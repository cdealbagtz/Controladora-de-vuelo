
Controladora-de-vuelo-V0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012d00  080002b0  080002b0  000012b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000df0  08012fb0  08012fb0  00013fb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08013da0  08013da0  00014da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08013da8  08013da8  00014da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08013dac  08013dac  00014dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000110  24000000  08013db0  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002c44  24000110  08013ec0  00015110  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  24002d54  08013ec0  00015d54  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00015110  2**0
                  CONTENTS, READONLY
 10 .debug_info   000294a3  00000000  00000000  0001513e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000053c0  00000000  00000000  0003e5e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001f40  00000000  00000000  000439a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000184f  00000000  00000000  000458e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037e94  00000000  00000000  00047137  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000319a7  00000000  00000000  0007efcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001552d5  00000000  00000000  000b0972  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00205c47  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008658  00000000  00000000  00205c8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000068  00000000  00000000  0020e2e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000110 	.word	0x24000110
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08012f98 	.word	0x08012f98

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000114 	.word	0x24000114
 80002ec:	08012f98 	.word	0x08012f98

080002f0 <__aeabi_ldivmod>:
 80002f0:	b97b      	cbnz	r3, 8000312 <__aeabi_ldivmod+0x22>
 80002f2:	b972      	cbnz	r2, 8000312 <__aeabi_ldivmod+0x22>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bfbe      	ittt	lt
 80002f8:	2000      	movlt	r0, #0
 80002fa:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80002fe:	e006      	blt.n	800030e <__aeabi_ldivmod+0x1e>
 8000300:	bf08      	it	eq
 8000302:	2800      	cmpeq	r0, #0
 8000304:	bf1c      	itt	ne
 8000306:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800030a:	f04f 30ff 	movne.w	r0, #4294967295
 800030e:	f000 b9b5 	b.w	800067c <__aeabi_idiv0>
 8000312:	f1ad 0c08 	sub.w	ip, sp, #8
 8000316:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800031a:	2900      	cmp	r1, #0
 800031c:	db09      	blt.n	8000332 <__aeabi_ldivmod+0x42>
 800031e:	2b00      	cmp	r3, #0
 8000320:	db1a      	blt.n	8000358 <__aeabi_ldivmod+0x68>
 8000322:	f000 f84d 	bl	80003c0 <__udivmoddi4>
 8000326:	f8dd e004 	ldr.w	lr, [sp, #4]
 800032a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800032e:	b004      	add	sp, #16
 8000330:	4770      	bx	lr
 8000332:	4240      	negs	r0, r0
 8000334:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000338:	2b00      	cmp	r3, #0
 800033a:	db1b      	blt.n	8000374 <__aeabi_ldivmod+0x84>
 800033c:	f000 f840 	bl	80003c0 <__udivmoddi4>
 8000340:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000348:	b004      	add	sp, #16
 800034a:	4240      	negs	r0, r0
 800034c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000350:	4252      	negs	r2, r2
 8000352:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000356:	4770      	bx	lr
 8000358:	4252      	negs	r2, r2
 800035a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800035e:	f000 f82f 	bl	80003c0 <__udivmoddi4>
 8000362:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000366:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800036a:	b004      	add	sp, #16
 800036c:	4240      	negs	r0, r0
 800036e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000372:	4770      	bx	lr
 8000374:	4252      	negs	r2, r2
 8000376:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037a:	f000 f821 	bl	80003c0 <__udivmoddi4>
 800037e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000382:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000386:	b004      	add	sp, #16
 8000388:	4252      	negs	r2, r2
 800038a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <BMP280_write>:
uint16_t dig_T1, dig_P1;
int16_t  dig_T2, dig_T3, dig_P2,dig_P3, dig_P4, dig_P5, dig_P6, dig_P7, dig_P8, dig_P9;

int32_t T_raw, P_raw, t_fine;

void BMP280_write(uint8_t Address, uint8_t Data){
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	460a      	mov	r2, r1
 800068a:	71fb      	strb	r3, [r7, #7]
 800068c:	4613      	mov	r3, r2
 800068e:	71bb      	strb	r3, [r7, #6]
	BMP280_select();
 8000690:	2200      	movs	r2, #0
 8000692:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000696:	480f      	ldr	r0, [pc, #60]	@ (80006d4 <BMP280_write+0x54>)
 8000698:	f006 ff02 	bl	80074a0 <HAL_GPIO_WritePin>
	Address &= 0x7F;
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 80006a6:	1df9      	adds	r1, r7, #7
 80006a8:	2364      	movs	r3, #100	@ 0x64
 80006aa:	2201      	movs	r2, #1
 80006ac:	480a      	ldr	r0, [pc, #40]	@ (80006d8 <BMP280_write+0x58>)
 80006ae:	f009 ff41 	bl	800a534 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(SPI_BMP280, &Data, 1, 100);
 80006b2:	1db9      	adds	r1, r7, #6
 80006b4:	2364      	movs	r3, #100	@ 0x64
 80006b6:	2201      	movs	r2, #1
 80006b8:	4807      	ldr	r0, [pc, #28]	@ (80006d8 <BMP280_write+0x58>)
 80006ba:	f009 ff3b 	bl	800a534 <HAL_SPI_Transmit>

	BMP280_unselect();
 80006be:	2201      	movs	r2, #1
 80006c0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006c4:	4803      	ldr	r0, [pc, #12]	@ (80006d4 <BMP280_write+0x54>)
 80006c6:	f006 feeb 	bl	80074a0 <HAL_GPIO_WritePin>
}
 80006ca:	bf00      	nop
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	58020400 	.word	0x58020400
 80006d8:	24002490 	.word	0x24002490

080006dc <BMP280_read>:

uint8_t BMP280_read(uint8_t Address){
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer = (Address|0x80);
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	73fb      	strb	r3, [r7, #15]
	BMP280_select();
 80006f0:	2200      	movs	r2, #0
 80006f2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006f6:	480e      	ldr	r0, [pc, #56]	@ (8000730 <BMP280_read+0x54>)
 80006f8:	f006 fed2 	bl	80074a0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Buffer, 1, 100);
 80006fc:	f107 010f 	add.w	r1, r7, #15
 8000700:	2364      	movs	r3, #100	@ 0x64
 8000702:	2201      	movs	r2, #1
 8000704:	480b      	ldr	r0, [pc, #44]	@ (8000734 <BMP280_read+0x58>)
 8000706:	f009 ff15 	bl	800a534 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, &Buffer, 1, 100);
 800070a:	f107 010f 	add.w	r1, r7, #15
 800070e:	2364      	movs	r3, #100	@ 0x64
 8000710:	2201      	movs	r2, #1
 8000712:	4808      	ldr	r0, [pc, #32]	@ (8000734 <BMP280_read+0x58>)
 8000714:	f00a f8fc 	bl	800a910 <HAL_SPI_Receive>
	BMP280_unselect();
 8000718:	2201      	movs	r2, #1
 800071a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800071e:	4804      	ldr	r0, [pc, #16]	@ (8000730 <BMP280_read+0x54>)
 8000720:	f006 febe 	bl	80074a0 <HAL_GPIO_WritePin>

	return Buffer;
 8000724:	7bfb      	ldrb	r3, [r7, #15]
}
 8000726:	4618      	mov	r0, r3
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	58020400 	.word	0x58020400
 8000734:	24002490 	.word	0x24002490

08000738 <BMP280_config>:

void BMP280_config(void){
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
	BMP280_write(ctrl_meas, 0x57);
 800073c:	2157      	movs	r1, #87	@ 0x57
 800073e:	20f4      	movs	r0, #244	@ 0xf4
 8000740:	f7ff ff9e 	bl	8000680 <BMP280_write>
	BMP280_write(config, 0x10);
 8000744:	2110      	movs	r1, #16
 8000746:	20f5      	movs	r0, #245	@ 0xf5
 8000748:	f7ff ff9a 	bl	8000680 <BMP280_write>
}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}

08000750 <BMP280_calibrationData>:

void BMP280_reset(void){
	BMP280_write(reset, 0xB6);
}

void BMP280_calibrationData(void){
 8000750:	b580      	push	{r7, lr}
 8000752:	b088      	sub	sp, #32
 8000754:	af00      	add	r7, sp, #0
	uint8_t Address = 0x88;
 8000756:	2388      	movs	r3, #136	@ 0x88
 8000758:	77fb      	strb	r3, [r7, #31]
	uint8_t Buffer[24] = {0};
 800075a:	2300      	movs	r3, #0
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	f107 0308 	add.w	r3, r7, #8
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
 800076c:	611a      	str	r2, [r3, #16]
	BMP280_select();
 800076e:	2200      	movs	r2, #0
 8000770:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000774:	4843      	ldr	r0, [pc, #268]	@ (8000884 <BMP280_calibrationData+0x134>)
 8000776:	f006 fe93 	bl	80074a0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 800077a:	f107 011f 	add.w	r1, r7, #31
 800077e:	2364      	movs	r3, #100	@ 0x64
 8000780:	2201      	movs	r2, #1
 8000782:	4841      	ldr	r0, [pc, #260]	@ (8000888 <BMP280_calibrationData+0x138>)
 8000784:	f009 fed6 	bl	800a534 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 24, 100);
 8000788:	1d39      	adds	r1, r7, #4
 800078a:	2364      	movs	r3, #100	@ 0x64
 800078c:	2218      	movs	r2, #24
 800078e:	483e      	ldr	r0, [pc, #248]	@ (8000888 <BMP280_calibrationData+0x138>)
 8000790:	f00a f8be 	bl	800a910 <HAL_SPI_Receive>
	BMP280_unselect();
 8000794:	2201      	movs	r2, #1
 8000796:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800079a:	483a      	ldr	r0, [pc, #232]	@ (8000884 <BMP280_calibrationData+0x134>)
 800079c:	f006 fe80 	bl	80074a0 <HAL_GPIO_WritePin>

	dig_T1 = (Buffer[1]<<8)|Buffer[0];
 80007a0:	797b      	ldrb	r3, [r7, #5]
 80007a2:	021b      	lsls	r3, r3, #8
 80007a4:	b21a      	sxth	r2, r3
 80007a6:	793b      	ldrb	r3, [r7, #4]
 80007a8:	b21b      	sxth	r3, r3
 80007aa:	4313      	orrs	r3, r2
 80007ac:	b21b      	sxth	r3, r3
 80007ae:	b29a      	uxth	r2, r3
 80007b0:	4b36      	ldr	r3, [pc, #216]	@ (800088c <BMP280_calibrationData+0x13c>)
 80007b2:	801a      	strh	r2, [r3, #0]
	dig_T2 = (Buffer[3]<<8)|Buffer[2];
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	021b      	lsls	r3, r3, #8
 80007b8:	b21a      	sxth	r2, r3
 80007ba:	79bb      	ldrb	r3, [r7, #6]
 80007bc:	b21b      	sxth	r3, r3
 80007be:	4313      	orrs	r3, r2
 80007c0:	b21a      	sxth	r2, r3
 80007c2:	4b33      	ldr	r3, [pc, #204]	@ (8000890 <BMP280_calibrationData+0x140>)
 80007c4:	801a      	strh	r2, [r3, #0]
	dig_T3 = (Buffer[5]<<8)|Buffer[4];
 80007c6:	7a7b      	ldrb	r3, [r7, #9]
 80007c8:	021b      	lsls	r3, r3, #8
 80007ca:	b21a      	sxth	r2, r3
 80007cc:	7a3b      	ldrb	r3, [r7, #8]
 80007ce:	b21b      	sxth	r3, r3
 80007d0:	4313      	orrs	r3, r2
 80007d2:	b21a      	sxth	r2, r3
 80007d4:	4b2f      	ldr	r3, [pc, #188]	@ (8000894 <BMP280_calibrationData+0x144>)
 80007d6:	801a      	strh	r2, [r3, #0]

	dig_P1 = (Buffer[7]<<8)|Buffer[6];
 80007d8:	7afb      	ldrb	r3, [r7, #11]
 80007da:	021b      	lsls	r3, r3, #8
 80007dc:	b21a      	sxth	r2, r3
 80007de:	7abb      	ldrb	r3, [r7, #10]
 80007e0:	b21b      	sxth	r3, r3
 80007e2:	4313      	orrs	r3, r2
 80007e4:	b21b      	sxth	r3, r3
 80007e6:	b29a      	uxth	r2, r3
 80007e8:	4b2b      	ldr	r3, [pc, #172]	@ (8000898 <BMP280_calibrationData+0x148>)
 80007ea:	801a      	strh	r2, [r3, #0]
	dig_P2 = (Buffer[9]<<8)|Buffer[8];
 80007ec:	7b7b      	ldrb	r3, [r7, #13]
 80007ee:	021b      	lsls	r3, r3, #8
 80007f0:	b21a      	sxth	r2, r3
 80007f2:	7b3b      	ldrb	r3, [r7, #12]
 80007f4:	b21b      	sxth	r3, r3
 80007f6:	4313      	orrs	r3, r2
 80007f8:	b21a      	sxth	r2, r3
 80007fa:	4b28      	ldr	r3, [pc, #160]	@ (800089c <BMP280_calibrationData+0x14c>)
 80007fc:	801a      	strh	r2, [r3, #0]
	dig_P3 = (Buffer[11]<<8)|Buffer[10];
 80007fe:	7bfb      	ldrb	r3, [r7, #15]
 8000800:	021b      	lsls	r3, r3, #8
 8000802:	b21a      	sxth	r2, r3
 8000804:	7bbb      	ldrb	r3, [r7, #14]
 8000806:	b21b      	sxth	r3, r3
 8000808:	4313      	orrs	r3, r2
 800080a:	b21a      	sxth	r2, r3
 800080c:	4b24      	ldr	r3, [pc, #144]	@ (80008a0 <BMP280_calibrationData+0x150>)
 800080e:	801a      	strh	r2, [r3, #0]
	dig_P4 = (Buffer[13]<<8)|Buffer[12];
 8000810:	7c7b      	ldrb	r3, [r7, #17]
 8000812:	021b      	lsls	r3, r3, #8
 8000814:	b21a      	sxth	r2, r3
 8000816:	7c3b      	ldrb	r3, [r7, #16]
 8000818:	b21b      	sxth	r3, r3
 800081a:	4313      	orrs	r3, r2
 800081c:	b21a      	sxth	r2, r3
 800081e:	4b21      	ldr	r3, [pc, #132]	@ (80008a4 <BMP280_calibrationData+0x154>)
 8000820:	801a      	strh	r2, [r3, #0]
	dig_P5 = (Buffer[15]<<8)|Buffer[14];
 8000822:	7cfb      	ldrb	r3, [r7, #19]
 8000824:	021b      	lsls	r3, r3, #8
 8000826:	b21a      	sxth	r2, r3
 8000828:	7cbb      	ldrb	r3, [r7, #18]
 800082a:	b21b      	sxth	r3, r3
 800082c:	4313      	orrs	r3, r2
 800082e:	b21a      	sxth	r2, r3
 8000830:	4b1d      	ldr	r3, [pc, #116]	@ (80008a8 <BMP280_calibrationData+0x158>)
 8000832:	801a      	strh	r2, [r3, #0]
	dig_P6 = (Buffer[17]<<8)|Buffer[16];
 8000834:	7d7b      	ldrb	r3, [r7, #21]
 8000836:	021b      	lsls	r3, r3, #8
 8000838:	b21a      	sxth	r2, r3
 800083a:	7d3b      	ldrb	r3, [r7, #20]
 800083c:	b21b      	sxth	r3, r3
 800083e:	4313      	orrs	r3, r2
 8000840:	b21a      	sxth	r2, r3
 8000842:	4b1a      	ldr	r3, [pc, #104]	@ (80008ac <BMP280_calibrationData+0x15c>)
 8000844:	801a      	strh	r2, [r3, #0]
	dig_P7 = (Buffer[19]<<8)|Buffer[18];
 8000846:	7dfb      	ldrb	r3, [r7, #23]
 8000848:	021b      	lsls	r3, r3, #8
 800084a:	b21a      	sxth	r2, r3
 800084c:	7dbb      	ldrb	r3, [r7, #22]
 800084e:	b21b      	sxth	r3, r3
 8000850:	4313      	orrs	r3, r2
 8000852:	b21a      	sxth	r2, r3
 8000854:	4b16      	ldr	r3, [pc, #88]	@ (80008b0 <BMP280_calibrationData+0x160>)
 8000856:	801a      	strh	r2, [r3, #0]
	dig_P8 = (Buffer[21]<<8)|Buffer[20];
 8000858:	7e7b      	ldrb	r3, [r7, #25]
 800085a:	021b      	lsls	r3, r3, #8
 800085c:	b21a      	sxth	r2, r3
 800085e:	7e3b      	ldrb	r3, [r7, #24]
 8000860:	b21b      	sxth	r3, r3
 8000862:	4313      	orrs	r3, r2
 8000864:	b21a      	sxth	r2, r3
 8000866:	4b13      	ldr	r3, [pc, #76]	@ (80008b4 <BMP280_calibrationData+0x164>)
 8000868:	801a      	strh	r2, [r3, #0]
	dig_P9 = (Buffer[23]<<8)|Buffer[22];
 800086a:	7efb      	ldrb	r3, [r7, #27]
 800086c:	021b      	lsls	r3, r3, #8
 800086e:	b21a      	sxth	r2, r3
 8000870:	7ebb      	ldrb	r3, [r7, #26]
 8000872:	b21b      	sxth	r3, r3
 8000874:	4313      	orrs	r3, r2
 8000876:	b21a      	sxth	r2, r3
 8000878:	4b0f      	ldr	r3, [pc, #60]	@ (80008b8 <BMP280_calibrationData+0x168>)
 800087a:	801a      	strh	r2, [r3, #0]
}
 800087c:	bf00      	nop
 800087e:	3720      	adds	r7, #32
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	58020400 	.word	0x58020400
 8000888:	24002490 	.word	0x24002490
 800088c:	24000140 	.word	0x24000140
 8000890:	24000144 	.word	0x24000144
 8000894:	24000146 	.word	0x24000146
 8000898:	24000142 	.word	0x24000142
 800089c:	24000148 	.word	0x24000148
 80008a0:	2400014a 	.word	0x2400014a
 80008a4:	2400014c 	.word	0x2400014c
 80008a8:	2400014e 	.word	0x2400014e
 80008ac:	24000150 	.word	0x24000150
 80008b0:	24000152 	.word	0x24000152
 80008b4:	24000154 	.word	0x24000154
 80008b8:	24000156 	.word	0x24000156

080008bc <BMP280_readRawValues>:

void BMP280_readRawValues(void){
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
	uint8_t Address = press_msb;
 80008c2:	23f7      	movs	r3, #247	@ 0xf7
 80008c4:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[6] = {0};
 80008c6:	2300      	movs	r3, #0
 80008c8:	603b      	str	r3, [r7, #0]
 80008ca:	2300      	movs	r3, #0
 80008cc:	80bb      	strh	r3, [r7, #4]
	BMP280_select();
 80008ce:	2200      	movs	r2, #0
 80008d0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008d4:	4817      	ldr	r0, [pc, #92]	@ (8000934 <BMP280_readRawValues+0x78>)
 80008d6:	f006 fde3 	bl	80074a0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 80008da:	1df9      	adds	r1, r7, #7
 80008dc:	2364      	movs	r3, #100	@ 0x64
 80008de:	2201      	movs	r2, #1
 80008e0:	4815      	ldr	r0, [pc, #84]	@ (8000938 <BMP280_readRawValues+0x7c>)
 80008e2:	f009 fe27 	bl	800a534 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 6, 100);
 80008e6:	4639      	mov	r1, r7
 80008e8:	2364      	movs	r3, #100	@ 0x64
 80008ea:	2206      	movs	r2, #6
 80008ec:	4812      	ldr	r0, [pc, #72]	@ (8000938 <BMP280_readRawValues+0x7c>)
 80008ee:	f00a f80f 	bl	800a910 <HAL_SPI_Receive>
	BMP280_unselect();
 80008f2:	2201      	movs	r2, #1
 80008f4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008f8:	480e      	ldr	r0, [pc, #56]	@ (8000934 <BMP280_readRawValues+0x78>)
 80008fa:	f006 fdd1 	bl	80074a0 <HAL_GPIO_WritePin>

	P_raw = (Buffer[0]<<12)|(Buffer[1]<<4)|(Buffer[2]>>4);
 80008fe:	783b      	ldrb	r3, [r7, #0]
 8000900:	031a      	lsls	r2, r3, #12
 8000902:	787b      	ldrb	r3, [r7, #1]
 8000904:	011b      	lsls	r3, r3, #4
 8000906:	4313      	orrs	r3, r2
 8000908:	78ba      	ldrb	r2, [r7, #2]
 800090a:	0912      	lsrs	r2, r2, #4
 800090c:	b2d2      	uxtb	r2, r2
 800090e:	4313      	orrs	r3, r2
 8000910:	4a0a      	ldr	r2, [pc, #40]	@ (800093c <BMP280_readRawValues+0x80>)
 8000912:	6013      	str	r3, [r2, #0]
	T_raw = (Buffer[3]<<12)|(Buffer[4]<<4)|(Buffer[5]>>4);
 8000914:	78fb      	ldrb	r3, [r7, #3]
 8000916:	031a      	lsls	r2, r3, #12
 8000918:	793b      	ldrb	r3, [r7, #4]
 800091a:	011b      	lsls	r3, r3, #4
 800091c:	4313      	orrs	r3, r2
 800091e:	797a      	ldrb	r2, [r7, #5]
 8000920:	0912      	lsrs	r2, r2, #4
 8000922:	b2d2      	uxtb	r2, r2
 8000924:	4313      	orrs	r3, r2
 8000926:	4a06      	ldr	r2, [pc, #24]	@ (8000940 <BMP280_readRawValues+0x84>)
 8000928:	6013      	str	r3, [r2, #0]
}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	58020400 	.word	0x58020400
 8000938:	24002490 	.word	0x24002490
 800093c:	2400015c 	.word	0x2400015c
 8000940:	24000158 	.word	0x24000158

08000944 <BMP280_measureT>:

int32_t BMP280_measureT(int32_t adc_T){
 8000944:	b480      	push	{r7}
 8000946:	b087      	sub	sp, #28
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 =  ((((T_raw>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 800094c:	4b1a      	ldr	r3, [pc, #104]	@ (80009b8 <BMP280_measureT+0x74>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	10da      	asrs	r2, r3, #3
 8000952:	4b1a      	ldr	r3, [pc, #104]	@ (80009bc <BMP280_measureT+0x78>)
 8000954:	881b      	ldrh	r3, [r3, #0]
 8000956:	005b      	lsls	r3, r3, #1
 8000958:	1ad3      	subs	r3, r2, r3
 800095a:	4a19      	ldr	r2, [pc, #100]	@ (80009c0 <BMP280_measureT+0x7c>)
 800095c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000960:	fb02 f303 	mul.w	r3, r2, r3
 8000964:	12db      	asrs	r3, r3, #11
 8000966:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1))) >> 12) * ((int32_t)dig_T3)) >> 14;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	111b      	asrs	r3, r3, #4
 800096c:	4a13      	ldr	r2, [pc, #76]	@ (80009bc <BMP280_measureT+0x78>)
 800096e:	8812      	ldrh	r2, [r2, #0]
 8000970:	1a9b      	subs	r3, r3, r2
 8000972:	687a      	ldr	r2, [r7, #4]
 8000974:	1112      	asrs	r2, r2, #4
 8000976:	4911      	ldr	r1, [pc, #68]	@ (80009bc <BMP280_measureT+0x78>)
 8000978:	8809      	ldrh	r1, [r1, #0]
 800097a:	1a52      	subs	r2, r2, r1
 800097c:	fb02 f303 	mul.w	r3, r2, r3
 8000980:	131b      	asrs	r3, r3, #12
 8000982:	4a10      	ldr	r2, [pc, #64]	@ (80009c4 <BMP280_measureT+0x80>)
 8000984:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000988:	fb02 f303 	mul.w	r3, r2, r3
 800098c:	139b      	asrs	r3, r3, #14
 800098e:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8000990:	697a      	ldr	r2, [r7, #20]
 8000992:	693b      	ldr	r3, [r7, #16]
 8000994:	4413      	add	r3, r2
 8000996:	4a0c      	ldr	r2, [pc, #48]	@ (80009c8 <BMP280_measureT+0x84>)
 8000998:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 800099a:	4b0b      	ldr	r3, [pc, #44]	@ (80009c8 <BMP280_measureT+0x84>)
 800099c:	681a      	ldr	r2, [r3, #0]
 800099e:	4613      	mov	r3, r2
 80009a0:	009b      	lsls	r3, r3, #2
 80009a2:	4413      	add	r3, r2
 80009a4:	3380      	adds	r3, #128	@ 0x80
 80009a6:	121b      	asrs	r3, r3, #8
 80009a8:	60fb      	str	r3, [r7, #12]
	return T;
 80009aa:	68fb      	ldr	r3, [r7, #12]
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	371c      	adds	r7, #28
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	24000158 	.word	0x24000158
 80009bc:	24000140 	.word	0x24000140
 80009c0:	24000144 	.word	0x24000144
 80009c4:	24000146 	.word	0x24000146
 80009c8:	24000160 	.word	0x24000160

080009cc <BMP280_measureP>:

uint32_t BMP280_measureP(int32_t adc_P){
 80009cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80009d0:	b0ca      	sub	sp, #296	@ 0x128
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 80009d8:	4baf      	ldr	r3, [pc, #700]	@ (8000c98 <BMP280_measureP+0x2cc>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	17da      	asrs	r2, r3, #31
 80009de:	461c      	mov	r4, r3
 80009e0:	4615      	mov	r5, r2
 80009e2:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 80009e6:	f145 3bff 	adc.w	fp, r5, #4294967295
 80009ea:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 80009ee:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80009f2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80009f6:	fb03 f102 	mul.w	r1, r3, r2
 80009fa:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80009fe:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000a02:	fb02 f303 	mul.w	r3, r2, r3
 8000a06:	18ca      	adds	r2, r1, r3
 8000a08:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000a0c:	fba3 8903 	umull	r8, r9, r3, r3
 8000a10:	eb02 0309 	add.w	r3, r2, r9
 8000a14:	4699      	mov	r9, r3
 8000a16:	4ba1      	ldr	r3, [pc, #644]	@ (8000c9c <BMP280_measureP+0x2d0>)
 8000a18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a1c:	b21b      	sxth	r3, r3
 8000a1e:	17da      	asrs	r2, r3, #31
 8000a20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000a24:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8000a28:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	fb03 f209 	mul.w	r2, r3, r9
 8000a32:	460b      	mov	r3, r1
 8000a34:	fb08 f303 	mul.w	r3, r8, r3
 8000a38:	4413      	add	r3, r2
 8000a3a:	4602      	mov	r2, r0
 8000a3c:	fba8 1202 	umull	r1, r2, r8, r2
 8000a40:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8000a44:	460a      	mov	r2, r1
 8000a46:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8000a4a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8000a4e:	4413      	add	r3, r2
 8000a50:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8000a54:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8000a58:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 8000a5c:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 8000a60:	4b8f      	ldr	r3, [pc, #572]	@ (8000ca0 <BMP280_measureP+0x2d4>)
 8000a62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a66:	b21b      	sxth	r3, r3
 8000a68:	17da      	asrs	r2, r3, #31
 8000a6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000a6e:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8000a72:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000a76:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8000a7a:	462a      	mov	r2, r5
 8000a7c:	fb02 f203 	mul.w	r2, r2, r3
 8000a80:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000a84:	4621      	mov	r1, r4
 8000a86:	fb01 f303 	mul.w	r3, r1, r3
 8000a8a:	441a      	add	r2, r3
 8000a8c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000a90:	4621      	mov	r1, r4
 8000a92:	fba3 1301 	umull	r1, r3, r3, r1
 8000a96:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000a9a:	460b      	mov	r3, r1
 8000a9c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8000aa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000aa4:	18d3      	adds	r3, r2, r3
 8000aa6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000aaa:	f04f 0000 	mov.w	r0, #0
 8000aae:	f04f 0100 	mov.w	r1, #0
 8000ab2:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8000ab6:	462b      	mov	r3, r5
 8000ab8:	0459      	lsls	r1, r3, #17
 8000aba:	4623      	mov	r3, r4
 8000abc:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8000ac0:	4623      	mov	r3, r4
 8000ac2:	0458      	lsls	r0, r3, #17
 8000ac4:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000ac8:	1814      	adds	r4, r2, r0
 8000aca:	643c      	str	r4, [r7, #64]	@ 0x40
 8000acc:	414b      	adcs	r3, r1
 8000ace:	647b      	str	r3, [r7, #68]	@ 0x44
 8000ad0:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8000ad4:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8000ad8:	4b72      	ldr	r3, [pc, #456]	@ (8000ca4 <BMP280_measureP+0x2d8>)
 8000ada:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ade:	b21b      	sxth	r3, r3
 8000ae0:	17da      	asrs	r2, r3, #31
 8000ae2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000ae6:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8000aea:	f04f 0000 	mov.w	r0, #0
 8000aee:	f04f 0100 	mov.w	r1, #0
 8000af2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000af6:	00d9      	lsls	r1, r3, #3
 8000af8:	2000      	movs	r0, #0
 8000afa:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000afe:	1814      	adds	r4, r2, r0
 8000b00:	63bc      	str	r4, [r7, #56]	@ 0x38
 8000b02:	414b      	adcs	r3, r1
 8000b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000b06:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8000b0a:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 8000b0e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000b12:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000b16:	fb03 f102 	mul.w	r1, r3, r2
 8000b1a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000b1e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000b22:	fb02 f303 	mul.w	r3, r2, r3
 8000b26:	18ca      	adds	r2, r1, r3
 8000b28:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000b2c:	fba3 1303 	umull	r1, r3, r3, r3
 8000b30:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000b34:	460b      	mov	r3, r1
 8000b36:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8000b3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000b3e:	18d3      	adds	r3, r2, r3
 8000b40:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000b44:	4b58      	ldr	r3, [pc, #352]	@ (8000ca8 <BMP280_measureP+0x2dc>)
 8000b46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b4a:	b21b      	sxth	r3, r3
 8000b4c:	17da      	asrs	r2, r3, #31
 8000b4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000b52:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8000b56:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8000b5a:	462b      	mov	r3, r5
 8000b5c:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8000b60:	4642      	mov	r2, r8
 8000b62:	fb02 f203 	mul.w	r2, r2, r3
 8000b66:	464b      	mov	r3, r9
 8000b68:	4621      	mov	r1, r4
 8000b6a:	fb01 f303 	mul.w	r3, r1, r3
 8000b6e:	4413      	add	r3, r2
 8000b70:	4622      	mov	r2, r4
 8000b72:	4641      	mov	r1, r8
 8000b74:	fba2 1201 	umull	r1, r2, r2, r1
 8000b78:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8000b7c:	460a      	mov	r2, r1
 8000b7e:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8000b82:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8000b86:	4413      	add	r3, r2
 8000b88:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	f04f 0100 	mov.w	r1, #0
 8000b94:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8000b98:	4623      	mov	r3, r4
 8000b9a:	0a18      	lsrs	r0, r3, #8
 8000b9c:	462b      	mov	r3, r5
 8000b9e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000ba2:	462b      	mov	r3, r5
 8000ba4:	1219      	asrs	r1, r3, #8
 8000ba6:	4b41      	ldr	r3, [pc, #260]	@ (8000cac <BMP280_measureP+0x2e0>)
 8000ba8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bac:	b21b      	sxth	r3, r3
 8000bae:	17da      	asrs	r2, r3, #31
 8000bb0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000bb4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8000bb8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000bbc:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8000bc0:	464a      	mov	r2, r9
 8000bc2:	fb02 f203 	mul.w	r2, r2, r3
 8000bc6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000bca:	4644      	mov	r4, r8
 8000bcc:	fb04 f303 	mul.w	r3, r4, r3
 8000bd0:	441a      	add	r2, r3
 8000bd2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000bd6:	4644      	mov	r4, r8
 8000bd8:	fba3 4304 	umull	r4, r3, r3, r4
 8000bdc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000be0:	4623      	mov	r3, r4
 8000be2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8000be6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000bea:	18d3      	adds	r3, r2, r3
 8000bec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000bf0:	f04f 0200 	mov.w	r2, #0
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8000bfc:	464c      	mov	r4, r9
 8000bfe:	0323      	lsls	r3, r4, #12
 8000c00:	4644      	mov	r4, r8
 8000c02:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8000c06:	4644      	mov	r4, r8
 8000c08:	0322      	lsls	r2, r4, #12
 8000c0a:	1884      	adds	r4, r0, r2
 8000c0c:	633c      	str	r4, [r7, #48]	@ 0x30
 8000c0e:	eb41 0303 	adc.w	r3, r1, r3
 8000c12:	637b      	str	r3, [r7, #52]	@ 0x34
 8000c14:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8000c18:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 8000c1c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000c20:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8000c24:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8000c28:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8000c2c:	4b20      	ldr	r3, [pc, #128]	@ (8000cb0 <BMP280_measureP+0x2e4>)
 8000c2e:	881b      	ldrh	r3, [r3, #0]
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	2200      	movs	r2, #0
 8000c34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000c38:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8000c3c:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8000c40:	462b      	mov	r3, r5
 8000c42:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8000c46:	4642      	mov	r2, r8
 8000c48:	fb02 f203 	mul.w	r2, r2, r3
 8000c4c:	464b      	mov	r3, r9
 8000c4e:	4621      	mov	r1, r4
 8000c50:	fb01 f303 	mul.w	r3, r1, r3
 8000c54:	4413      	add	r3, r2
 8000c56:	4622      	mov	r2, r4
 8000c58:	4641      	mov	r1, r8
 8000c5a:	fba2 1201 	umull	r1, r2, r2, r1
 8000c5e:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8000c62:	460a      	mov	r2, r1
 8000c64:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8000c68:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000c6c:	4413      	add	r3, r2
 8000c6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8000c72:	f04f 0200 	mov.w	r2, #0
 8000c76:	f04f 0300 	mov.w	r3, #0
 8000c7a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8000c7e:	4629      	mov	r1, r5
 8000c80:	104a      	asrs	r2, r1, #1
 8000c82:	4629      	mov	r1, r5
 8000c84:	17cb      	asrs	r3, r1, #31
 8000c86:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	if (var1 == 0)
 8000c8a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	d110      	bne.n	8000cb4 <BMP280_measureP+0x2e8>
	{
	return 0;
 8000c92:	2300      	movs	r3, #0
 8000c94:	e154      	b.n	8000f40 <BMP280_measureP+0x574>
 8000c96:	bf00      	nop
 8000c98:	24000160 	.word	0x24000160
 8000c9c:	24000150 	.word	0x24000150
 8000ca0:	2400014e 	.word	0x2400014e
 8000ca4:	2400014c 	.word	0x2400014c
 8000ca8:	2400014a 	.word	0x2400014a
 8000cac:	24000148 	.word	0x24000148
 8000cb0:	24000142 	.word	0x24000142
	}
	p = 1048576-adc_P;
 8000cb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000cb8:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8000cbc:	17da      	asrs	r2, r3, #31
 8000cbe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000cc0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000cc2:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8000cc6:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	p = (((p<<31)-var2)*3125)/var1;
 8000cca:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000cce:	105b      	asrs	r3, r3, #1
 8000cd0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000cd4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000cd8:	07db      	lsls	r3, r3, #31
 8000cda:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000cde:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000ce2:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8000ce6:	4621      	mov	r1, r4
 8000ce8:	1a89      	subs	r1, r1, r2
 8000cea:	67b9      	str	r1, [r7, #120]	@ 0x78
 8000cec:	4629      	mov	r1, r5
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000cf4:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8000cf8:	4622      	mov	r2, r4
 8000cfa:	462b      	mov	r3, r5
 8000cfc:	1891      	adds	r1, r2, r2
 8000cfe:	6239      	str	r1, [r7, #32]
 8000d00:	415b      	adcs	r3, r3
 8000d02:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d04:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000d08:	4621      	mov	r1, r4
 8000d0a:	1851      	adds	r1, r2, r1
 8000d0c:	61b9      	str	r1, [r7, #24]
 8000d0e:	4629      	mov	r1, r5
 8000d10:	414b      	adcs	r3, r1
 8000d12:	61fb      	str	r3, [r7, #28]
 8000d14:	f04f 0200 	mov.w	r2, #0
 8000d18:	f04f 0300 	mov.w	r3, #0
 8000d1c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8000d20:	4649      	mov	r1, r9
 8000d22:	018b      	lsls	r3, r1, #6
 8000d24:	4641      	mov	r1, r8
 8000d26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8000d2a:	4641      	mov	r1, r8
 8000d2c:	018a      	lsls	r2, r1, #6
 8000d2e:	4641      	mov	r1, r8
 8000d30:	1889      	adds	r1, r1, r2
 8000d32:	6139      	str	r1, [r7, #16]
 8000d34:	4649      	mov	r1, r9
 8000d36:	eb43 0101 	adc.w	r1, r3, r1
 8000d3a:	6179      	str	r1, [r7, #20]
 8000d3c:	f04f 0200 	mov.w	r2, #0
 8000d40:	f04f 0300 	mov.w	r3, #0
 8000d44:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8000d48:	4649      	mov	r1, r9
 8000d4a:	008b      	lsls	r3, r1, #2
 8000d4c:	4641      	mov	r1, r8
 8000d4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000d52:	4641      	mov	r1, r8
 8000d54:	008a      	lsls	r2, r1, #2
 8000d56:	4610      	mov	r0, r2
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	4622      	mov	r2, r4
 8000d5e:	189b      	adds	r3, r3, r2
 8000d60:	60bb      	str	r3, [r7, #8]
 8000d62:	460b      	mov	r3, r1
 8000d64:	462a      	mov	r2, r5
 8000d66:	eb42 0303 	adc.w	r3, r2, r3
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	f04f 0200 	mov.w	r2, #0
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8000d78:	4649      	mov	r1, r9
 8000d7a:	008b      	lsls	r3, r1, #2
 8000d7c:	4641      	mov	r1, r8
 8000d7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000d82:	4641      	mov	r1, r8
 8000d84:	008a      	lsls	r2, r1, #2
 8000d86:	4610      	mov	r0, r2
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	4622      	mov	r2, r4
 8000d8e:	189b      	adds	r3, r3, r2
 8000d90:	673b      	str	r3, [r7, #112]	@ 0x70
 8000d92:	462b      	mov	r3, r5
 8000d94:	460a      	mov	r2, r1
 8000d96:	eb42 0303 	adc.w	r3, r2, r3
 8000d9a:	677b      	str	r3, [r7, #116]	@ 0x74
 8000d9c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000da0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8000da4:	f7ff faa4 	bl	80002f0 <__aeabi_ldivmod>
 8000da8:	4602      	mov	r2, r0
 8000daa:	460b      	mov	r3, r1
 8000dac:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8000db0:	4b66      	ldr	r3, [pc, #408]	@ (8000f4c <BMP280_measureP+0x580>)
 8000db2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000db6:	b21b      	sxth	r3, r3
 8000db8:	17da      	asrs	r2, r3, #31
 8000dba:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000dbc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8000dbe:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8000dc2:	f04f 0000 	mov.w	r0, #0
 8000dc6:	f04f 0100 	mov.w	r1, #0
 8000dca:	0b50      	lsrs	r0, r2, #13
 8000dcc:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000dd0:	1359      	asrs	r1, r3, #13
 8000dd2:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8000dd6:	462b      	mov	r3, r5
 8000dd8:	fb00 f203 	mul.w	r2, r0, r3
 8000ddc:	4623      	mov	r3, r4
 8000dde:	fb03 f301 	mul.w	r3, r3, r1
 8000de2:	4413      	add	r3, r2
 8000de4:	4622      	mov	r2, r4
 8000de6:	fba2 1200 	umull	r1, r2, r2, r0
 8000dea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8000dee:	460a      	mov	r2, r1
 8000df0:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8000df4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000df8:	4413      	add	r3, r2
 8000dfa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8000dfe:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8000e02:	f04f 0000 	mov.w	r0, #0
 8000e06:	f04f 0100 	mov.w	r1, #0
 8000e0a:	0b50      	lsrs	r0, r2, #13
 8000e0c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000e10:	1359      	asrs	r1, r3, #13
 8000e12:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8000e16:	462b      	mov	r3, r5
 8000e18:	fb00 f203 	mul.w	r2, r0, r3
 8000e1c:	4623      	mov	r3, r4
 8000e1e:	fb03 f301 	mul.w	r3, r3, r1
 8000e22:	4413      	add	r3, r2
 8000e24:	4622      	mov	r2, r4
 8000e26:	fba2 1200 	umull	r1, r2, r2, r0
 8000e2a:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8000e2e:	460a      	mov	r2, r1
 8000e30:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8000e34:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8000e38:	4413      	add	r3, r2
 8000e3a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8000e3e:	f04f 0200 	mov.w	r2, #0
 8000e42:	f04f 0300 	mov.w	r3, #0
 8000e46:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8000e4a:	4621      	mov	r1, r4
 8000e4c:	0e4a      	lsrs	r2, r1, #25
 8000e4e:	4629      	mov	r1, r5
 8000e50:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8000e54:	4629      	mov	r1, r5
 8000e56:	164b      	asrs	r3, r1, #25
 8000e58:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8000e5c:	4b3c      	ldr	r3, [pc, #240]	@ (8000f50 <BMP280_measureP+0x584>)
 8000e5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e62:	b21b      	sxth	r3, r3
 8000e64:	17da      	asrs	r2, r3, #31
 8000e66:	663b      	str	r3, [r7, #96]	@ 0x60
 8000e68:	667a      	str	r2, [r7, #100]	@ 0x64
 8000e6a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000e6e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8000e72:	462a      	mov	r2, r5
 8000e74:	fb02 f203 	mul.w	r2, r2, r3
 8000e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000e7c:	4621      	mov	r1, r4
 8000e7e:	fb01 f303 	mul.w	r3, r1, r3
 8000e82:	4413      	add	r3, r2
 8000e84:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8000e88:	4621      	mov	r1, r4
 8000e8a:	fba2 1201 	umull	r1, r2, r2, r1
 8000e8e:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8000e92:	460a      	mov	r2, r1
 8000e94:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8000e98:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8000e9c:	4413      	add	r3, r2
 8000e9e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8000ea2:	f04f 0200 	mov.w	r2, #0
 8000ea6:	f04f 0300 	mov.w	r3, #0
 8000eaa:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8000eae:	4621      	mov	r1, r4
 8000eb0:	0cca      	lsrs	r2, r1, #19
 8000eb2:	4629      	mov	r1, r5
 8000eb4:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8000eb8:	4629      	mov	r1, r5
 8000eba:	14cb      	asrs	r3, r1, #19
 8000ebc:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8000ec0:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8000ec4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000ec8:	1884      	adds	r4, r0, r2
 8000eca:	65bc      	str	r4, [r7, #88]	@ 0x58
 8000ecc:	eb41 0303 	adc.w	r3, r1, r3
 8000ed0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000ed2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000ed6:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8000eda:	4621      	mov	r1, r4
 8000edc:	1889      	adds	r1, r1, r2
 8000ede:	6539      	str	r1, [r7, #80]	@ 0x50
 8000ee0:	4629      	mov	r1, r5
 8000ee2:	eb43 0101 	adc.w	r1, r3, r1
 8000ee6:	6579      	str	r1, [r7, #84]	@ 0x54
 8000ee8:	f04f 0000 	mov.w	r0, #0
 8000eec:	f04f 0100 	mov.w	r1, #0
 8000ef0:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8000ef4:	4623      	mov	r3, r4
 8000ef6:	0a18      	lsrs	r0, r3, #8
 8000ef8:	462b      	mov	r3, r5
 8000efa:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000efe:	462b      	mov	r3, r5
 8000f00:	1219      	asrs	r1, r3, #8
 8000f02:	4b14      	ldr	r3, [pc, #80]	@ (8000f54 <BMP280_measureP+0x588>)
 8000f04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f08:	b21b      	sxth	r3, r3
 8000f0a:	17da      	asrs	r2, r3, #31
 8000f0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000f0e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8000f10:	f04f 0200 	mov.w	r2, #0
 8000f14:	f04f 0300 	mov.w	r3, #0
 8000f18:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8000f1c:	464c      	mov	r4, r9
 8000f1e:	0123      	lsls	r3, r4, #4
 8000f20:	4644      	mov	r4, r8
 8000f22:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000f26:	4644      	mov	r4, r8
 8000f28:	0122      	lsls	r2, r4, #4
 8000f2a:	1884      	adds	r4, r0, r2
 8000f2c:	603c      	str	r4, [r7, #0]
 8000f2e:	eb41 0303 	adc.w	r3, r1, r3
 8000f32:	607b      	str	r3, [r7, #4]
 8000f34:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000f38:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (uint32_t)p;
 8000f3c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8000f46:	46bd      	mov	sp, r7
 8000f48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000f4c:	24000156 	.word	0x24000156
 8000f50:	24000154 	.word	0x24000154
 8000f54:	24000152 	.word	0x24000152

08000f58 <BMP280_measureH>:

uint16_t BMP280_measureH(uint32_t Pres, int32_t Temp){
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b088      	sub	sp, #32
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
	double var1, var2, h;

	if(Pres == 0) return 0;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d101      	bne.n	8000f6c <BMP280_measureH+0x14>
 8000f68:	2300      	movs	r3, #0
 8000f6a:	e03d      	b.n	8000fe8 <BMP280_measureH+0x90>
	var1 = -log(((double)Pres)/101325);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	ee07 3a90 	vmov	s15, r3
 8000f72:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000f76:	ed9f 5b1e 	vldr	d5, [pc, #120]	@ 8000ff0 <BMP280_measureH+0x98>
 8000f7a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000f7e:	eeb0 0b46 	vmov.f64	d0, d6
 8000f82:	f011 fedd 	bl	8012d40 <log>
 8000f86:	eeb0 7b40 	vmov.f64	d7, d0
 8000f8a:	eeb1 7b47 	vneg.f64	d7, d7
 8000f8e:	ed87 7b06 	vstr	d7, [r7, #24]

	if(var1 == 0) return 0;
 8000f92:	ed97 7b06 	vldr	d7, [r7, #24]
 8000f96:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8000f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f9e:	d101      	bne.n	8000fa4 <BMP280_measureH+0x4c>
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	e021      	b.n	8000fe8 <BMP280_measureH+0x90>
	var2 = 0.0341663/((((double)Temp)/100)+273.15);
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	ee07 3a90 	vmov	s15, r3
 8000faa:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000fae:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 8000ff8 <BMP280_measureH+0xa0>
 8000fb2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000fb6:	ed9f 6b12 	vldr	d6, [pc, #72]	@ 8001000 <BMP280_measureH+0xa8>
 8000fba:	ee37 6b06 	vadd.f64	d6, d7, d6
 8000fbe:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 8001008 <BMP280_measureH+0xb0>
 8000fc2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000fc6:	ed87 7b04 	vstr	d7, [r7, #16]
	h = var1/var2;
 8000fca:	ed97 5b06 	vldr	d5, [r7, #24]
 8000fce:	ed97 6b04 	vldr	d6, [r7, #16]
 8000fd2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000fd6:	ed87 7b02 	vstr	d7, [r7, #8]
	return (uint16_t)h;
 8000fda:	ed97 7b02 	vldr	d7, [r7, #8]
 8000fde:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000fe2:	ee17 3a90 	vmov	r3, s15
 8000fe6:	b29b      	uxth	r3, r3
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3720      	adds	r7, #32
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	00000000 	.word	0x00000000
 8000ff4:	40f8bcd0 	.word	0x40f8bcd0
 8000ff8:	00000000 	.word	0x00000000
 8000ffc:	40590000 	.word	0x40590000
 8001000:	66666666 	.word	0x66666666
 8001004:	40711266 	.word	0x40711266
 8001008:	ca402a92 	.word	0xca402a92
 800100c:	3fa17e3e 	.word	0x3fa17e3e

08001010 <BMP280_init>:

void BMP280_init(void){
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
	BMP280_unselect();
 8001014:	2201      	movs	r2, #1
 8001016:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800101a:	480d      	ldr	r0, [pc, #52]	@ (8001050 <BMP280_init+0x40>)
 800101c:	f006 fa40 	bl	80074a0 <HAL_GPIO_WritePin>
	BMP280_config();
 8001020:	f7ff fb8a 	bl	8000738 <BMP280_config>
	BMP280.ID = BMP280_read(0x89);
 8001024:	2089      	movs	r0, #137	@ 0x89
 8001026:	f7ff fb59 	bl	80006dc <BMP280_read>
 800102a:	4603      	mov	r3, r0
 800102c:	461a      	mov	r2, r3
 800102e:	4b09      	ldr	r3, [pc, #36]	@ (8001054 <BMP280_init+0x44>)
 8001030:	701a      	strb	r2, [r3, #0]
	BMP280_calibrationData();
 8001032:	f7ff fb8d 	bl	8000750 <BMP280_calibrationData>
	BMP280_readRawValues();
 8001036:	f7ff fc41 	bl	80008bc <BMP280_readRawValues>
	BMP280.Temp_inicial = BMP280_measureT(T_raw);
 800103a:	4b07      	ldr	r3, [pc, #28]	@ (8001058 <BMP280_init+0x48>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff fc80 	bl	8000944 <BMP280_measureT>
 8001044:	4603      	mov	r3, r0
 8001046:	4a03      	ldr	r2, [pc, #12]	@ (8001054 <BMP280_init+0x44>)
 8001048:	6093      	str	r3, [r2, #8]
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	58020400 	.word	0x58020400
 8001054:	2400012c 	.word	0x2400012c
 8001058:	24000158 	.word	0x24000158

0800105c <BMP280_calculate>:

void BMP280_calculate(void){
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
	//BMP280.ID = 0;
	BMP280.ID = BMP280_read(0x89);
 8001060:	2089      	movs	r0, #137	@ 0x89
 8001062:	f7ff fb3b 	bl	80006dc <BMP280_read>
 8001066:	4603      	mov	r3, r0
 8001068:	461a      	mov	r2, r3
 800106a:	4b16      	ldr	r3, [pc, #88]	@ (80010c4 <BMP280_calculate+0x68>)
 800106c:	701a      	strb	r2, [r3, #0]
	BMP280_readRawValues();
 800106e:	f7ff fc25 	bl	80008bc <BMP280_readRawValues>
	BMP280.Temp = BMP280_measureT(T_raw);
 8001072:	4b15      	ldr	r3, [pc, #84]	@ (80010c8 <BMP280_calculate+0x6c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff fc64 	bl	8000944 <BMP280_measureT>
 800107c:	4603      	mov	r3, r0
 800107e:	4a11      	ldr	r2, [pc, #68]	@ (80010c4 <BMP280_calculate+0x68>)
 8001080:	6053      	str	r3, [r2, #4]
	BMP280.Pressure    		= BMP280_measureP(P_raw)/256;
 8001082:	4b12      	ldr	r3, [pc, #72]	@ (80010cc <BMP280_calculate+0x70>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff fca0 	bl	80009cc <BMP280_measureP>
 800108c:	4603      	mov	r3, r0
 800108e:	0a1b      	lsrs	r3, r3, #8
 8001090:	4a0c      	ldr	r2, [pc, #48]	@ (80010c4 <BMP280_calculate+0x68>)
 8001092:	60d3      	str	r3, [r2, #12]
	BMP280.Barometric_Altitude = BMP280_measureH(BMP280.Pressure, BMP280.Temp_inicial);
 8001094:	4b0b      	ldr	r3, [pc, #44]	@ (80010c4 <BMP280_calculate+0x68>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	4a0a      	ldr	r2, [pc, #40]	@ (80010c4 <BMP280_calculate+0x68>)
 800109a:	6892      	ldr	r2, [r2, #8]
 800109c:	4611      	mov	r1, r2
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff ff5a 	bl	8000f58 <BMP280_measureH>
 80010a4:	4603      	mov	r3, r0
 80010a6:	461a      	mov	r2, r3
 80010a8:	4b06      	ldr	r3, [pc, #24]	@ (80010c4 <BMP280_calculate+0x68>)
 80010aa:	821a      	strh	r2, [r3, #16]

	if(BMP280.Barometric_Altitude > BMP280.Max_Altitude) BMP280.Max_Altitude = BMP280.Barometric_Altitude;
 80010ac:	4b05      	ldr	r3, [pc, #20]	@ (80010c4 <BMP280_calculate+0x68>)
 80010ae:	8a1a      	ldrh	r2, [r3, #16]
 80010b0:	4b04      	ldr	r3, [pc, #16]	@ (80010c4 <BMP280_calculate+0x68>)
 80010b2:	8a5b      	ldrh	r3, [r3, #18]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d903      	bls.n	80010c0 <BMP280_calculate+0x64>
 80010b8:	4b02      	ldr	r3, [pc, #8]	@ (80010c4 <BMP280_calculate+0x68>)
 80010ba:	8a1a      	ldrh	r2, [r3, #16]
 80010bc:	4b01      	ldr	r3, [pc, #4]	@ (80010c4 <BMP280_calculate+0x68>)
 80010be:	825a      	strh	r2, [r3, #18]
}
 80010c0:	bf00      	nop
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	2400012c 	.word	0x2400012c
 80010c8:	24000158 	.word	0x24000158
 80010cc:	2400015c 	.word	0x2400015c

080010d0 <BNO_Page0Adress>:


IMU_t IMU;


void BNO_Page0Adress(void){
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
	switch (BNO_RxBuffer[0]) {
 80010d4:	4b16      	ldr	r3, [pc, #88]	@ (8001130 <BNO_Page0Adress+0x60>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d002      	beq.n	80010e2 <BNO_Page0Adress+0x12>
 80010dc:	2b07      	cmp	r3, #7
 80010de:	d017      	beq.n	8001110 <BNO_Page0Adress+0x40>
			IMU.Page = BNO_RxBuffer[1];
			BNO_bufferStatus = Awaiting;
			BNO_ErrorHandler = ReadSucces;
			break;
		default:
			break;
 80010e0:	e021      	b.n	8001126 <BNO_Page0Adress+0x56>
			IMU.ID = BNO_RxBuffer[1];
 80010e2:	4b13      	ldr	r3, [pc, #76]	@ (8001130 <BNO_Page0Adress+0x60>)
 80010e4:	785a      	ldrb	r2, [r3, #1]
 80010e6:	4b13      	ldr	r3, [pc, #76]	@ (8001134 <BNO_Page0Adress+0x64>)
 80010e8:	701a      	strb	r2, [r3, #0]
			IMU.ACC.ID = BNO_RxBuffer[2];
 80010ea:	4b11      	ldr	r3, [pc, #68]	@ (8001130 <BNO_Page0Adress+0x60>)
 80010ec:	789a      	ldrb	r2, [r3, #2]
 80010ee:	4b11      	ldr	r3, [pc, #68]	@ (8001134 <BNO_Page0Adress+0x64>)
 80010f0:	705a      	strb	r2, [r3, #1]
			IMU.MAG.ID = BNO_RxBuffer[3];
 80010f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001130 <BNO_Page0Adress+0x60>)
 80010f4:	78da      	ldrb	r2, [r3, #3]
 80010f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001134 <BNO_Page0Adress+0x64>)
 80010f8:	709a      	strb	r2, [r3, #2]
			IMU.GYR.ID = BNO_RxBuffer[4];
 80010fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001130 <BNO_Page0Adress+0x60>)
 80010fc:	791a      	ldrb	r2, [r3, #4]
 80010fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001134 <BNO_Page0Adress+0x64>)
 8001100:	70da      	strb	r2, [r3, #3]
			BNO_bufferStatus = Awaiting;
 8001102:	4b0d      	ldr	r3, [pc, #52]	@ (8001138 <BNO_Page0Adress+0x68>)
 8001104:	2200      	movs	r2, #0
 8001106:	701a      	strb	r2, [r3, #0]
			BNO_ErrorHandler = ReadSucces;
 8001108:	4b0c      	ldr	r3, [pc, #48]	@ (800113c <BNO_Page0Adress+0x6c>)
 800110a:	220b      	movs	r2, #11
 800110c:	701a      	strb	r2, [r3, #0]
			break;
 800110e:	e00a      	b.n	8001126 <BNO_Page0Adress+0x56>
			IMU.Page = BNO_RxBuffer[1];
 8001110:	4b07      	ldr	r3, [pc, #28]	@ (8001130 <BNO_Page0Adress+0x60>)
 8001112:	785a      	ldrb	r2, [r3, #1]
 8001114:	4b07      	ldr	r3, [pc, #28]	@ (8001134 <BNO_Page0Adress+0x64>)
 8001116:	711a      	strb	r2, [r3, #4]
			BNO_bufferStatus = Awaiting;
 8001118:	4b07      	ldr	r3, [pc, #28]	@ (8001138 <BNO_Page0Adress+0x68>)
 800111a:	2200      	movs	r2, #0
 800111c:	701a      	strb	r2, [r3, #0]
			BNO_ErrorHandler = ReadSucces;
 800111e:	4b07      	ldr	r3, [pc, #28]	@ (800113c <BNO_Page0Adress+0x6c>)
 8001120:	220b      	movs	r2, #11
 8001122:	701a      	strb	r2, [r3, #0]
			break;
 8001124:	bf00      	nop
	}
}
 8001126:	bf00      	nop
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	24000164 	.word	0x24000164
 8001134:	24000268 	.word	0x24000268
 8001138:	24000266 	.word	0x24000266
 800113c:	24000265 	.word	0x24000265

08001140 <BNO_Page1Adress>:

void BNO_Page1Adress(void){
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
	switch (BNO_RxBuffer[0]) {
 8001144:	4b0a      	ldr	r3, [pc, #40]	@ (8001170 <BNO_Page1Adress+0x30>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	2b07      	cmp	r3, #7
 800114a:	d10a      	bne.n	8001162 <BNO_Page1Adress+0x22>
		case BNO055_PAGE_ID:
			IMU.Page = BNO_RxBuffer[1];
 800114c:	4b08      	ldr	r3, [pc, #32]	@ (8001170 <BNO_Page1Adress+0x30>)
 800114e:	785a      	ldrb	r2, [r3, #1]
 8001150:	4b08      	ldr	r3, [pc, #32]	@ (8001174 <BNO_Page1Adress+0x34>)
 8001152:	711a      	strb	r2, [r3, #4]
			BNO_bufferStatus = Awaiting;
 8001154:	4b08      	ldr	r3, [pc, #32]	@ (8001178 <BNO_Page1Adress+0x38>)
 8001156:	2200      	movs	r2, #0
 8001158:	701a      	strb	r2, [r3, #0]
			BNO_ErrorHandler = ReadSucces;
 800115a:	4b08      	ldr	r3, [pc, #32]	@ (800117c <BNO_Page1Adress+0x3c>)
 800115c:	220b      	movs	r2, #11
 800115e:	701a      	strb	r2, [r3, #0]
			break;
 8001160:	e000      	b.n	8001164 <BNO_Page1Adress+0x24>

		default:
			break;
 8001162:	bf00      	nop
	}
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	24000164 	.word	0x24000164
 8001174:	24000268 	.word	0x24000268
 8001178:	24000266 	.word	0x24000266
 800117c:	24000265 	.word	0x24000265

08001180 <BNO_EmptyingBuffer>:

void BNO_EmptyingBuffer(void){
 8001180:	b5b0      	push	{r4, r5, r7, lr}
 8001182:	af00      	add	r7, sp, #0
	static uint64_t BusyTime;
	static uint8_t BusyFlag = 0;

	if(BNO_bufferStatus == Ready){
 8001184:	4b20      	ldr	r3, [pc, #128]	@ (8001208 <BNO_EmptyingBuffer+0x88>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2b02      	cmp	r3, #2
 800118a:	d114      	bne.n	80011b6 <BNO_EmptyingBuffer+0x36>
		switch (IMU.Page) {
 800118c:	4b1f      	ldr	r3, [pc, #124]	@ (800120c <BNO_EmptyingBuffer+0x8c>)
 800118e:	791b      	ldrb	r3, [r3, #4]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d002      	beq.n	800119a <BNO_EmptyingBuffer+0x1a>
 8001194:	2b01      	cmp	r3, #1
 8001196:	d003      	beq.n	80011a0 <BNO_EmptyingBuffer+0x20>
				break;
			case 1:
				BNO_Page1Adress();
				break;
			default:
				break;
 8001198:	e005      	b.n	80011a6 <BNO_EmptyingBuffer+0x26>
				BNO_Page0Adress();
 800119a:	f7ff ff99 	bl	80010d0 <BNO_Page0Adress>
				break;
 800119e:	e002      	b.n	80011a6 <BNO_EmptyingBuffer+0x26>
				BNO_Page1Adress();
 80011a0:	f7ff ffce 	bl	8001140 <BNO_Page1Adress>
				break;
 80011a4:	bf00      	nop
		}
		memset(BNO_RxBuffer, 0, sizeof(BNO_RxBuffer));
 80011a6:	22ff      	movs	r2, #255	@ 0xff
 80011a8:	2100      	movs	r1, #0
 80011aa:	4819      	ldr	r0, [pc, #100]	@ (8001210 <BNO_EmptyingBuffer+0x90>)
 80011ac:	f011 fd86 	bl	8012cbc <memset>
		BusyFlag = 0;
 80011b0:	4b18      	ldr	r3, [pc, #96]	@ (8001214 <BNO_EmptyingBuffer+0x94>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	701a      	strb	r2, [r3, #0]
	}

	if(BNO_bufferStatus ==  Busy && !BusyFlag){
 80011b6:	4b14      	ldr	r3, [pc, #80]	@ (8001208 <BNO_EmptyingBuffer+0x88>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d10c      	bne.n	80011d8 <BNO_EmptyingBuffer+0x58>
 80011be:	4b15      	ldr	r3, [pc, #84]	@ (8001214 <BNO_EmptyingBuffer+0x94>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d108      	bne.n	80011d8 <BNO_EmptyingBuffer+0x58>
		BusyFlag = 1;
 80011c6:	4b13      	ldr	r3, [pc, #76]	@ (8001214 <BNO_EmptyingBuffer+0x94>)
 80011c8:	2201      	movs	r2, #1
 80011ca:	701a      	strb	r2, [r3, #0]
		BusyTime = TimeOn_Counter;
 80011cc:	4b12      	ldr	r3, [pc, #72]	@ (8001218 <BNO_EmptyingBuffer+0x98>)
 80011ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d2:	4912      	ldr	r1, [pc, #72]	@ (800121c <BNO_EmptyingBuffer+0x9c>)
 80011d4:	e9c1 2300 	strd	r2, r3, [r1]
	}
	if((TimeOn_Counter - BusyTime)>100){
 80011d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001218 <BNO_EmptyingBuffer+0x98>)
 80011da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011de:	4b0f      	ldr	r3, [pc, #60]	@ (800121c <BNO_EmptyingBuffer+0x9c>)
 80011e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e4:	1a84      	subs	r4, r0, r2
 80011e6:	eb61 0503 	sbc.w	r5, r1, r3
 80011ea:	2c65      	cmp	r4, #101	@ 0x65
 80011ec:	f175 0300 	sbcs.w	r3, r5, #0
 80011f0:	d308      	bcc.n	8001204 <BNO_EmptyingBuffer+0x84>
		BNO_bufferStatus = Awaiting;
 80011f2:	4b05      	ldr	r3, [pc, #20]	@ (8001208 <BNO_EmptyingBuffer+0x88>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	701a      	strb	r2, [r3, #0]
		BNO_ErrorHandler = READ_FAIL;
 80011f8:	4b09      	ldr	r3, [pc, #36]	@ (8001220 <BNO_EmptyingBuffer+0xa0>)
 80011fa:	2202      	movs	r2, #2
 80011fc:	701a      	strb	r2, [r3, #0]
		BusyFlag = 0;
 80011fe:	4b05      	ldr	r3, [pc, #20]	@ (8001214 <BNO_EmptyingBuffer+0x94>)
 8001200:	2200      	movs	r2, #0
 8001202:	701a      	strb	r2, [r3, #0]
	}

}
 8001204:	bf00      	nop
 8001206:	bdb0      	pop	{r4, r5, r7, pc}
 8001208:	24000266 	.word	0x24000266
 800120c:	24000268 	.word	0x24000268
 8001210:	24000164 	.word	0x24000164
 8001214:	2400026d 	.word	0x2400026d
 8001218:	24002400 	.word	0x24002400
 800121c:	24000270 	.word	0x24000270
 8001220:	24000265 	.word	0x24000265

08001224 <BNO_Read>:

HAL_StatusTypeDef BNO_Read(uint8_t Address,uint8_t Size){
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	460a      	mov	r2, r1
 800122e:	71fb      	strb	r3, [r7, #7]
 8001230:	4613      	mov	r3, r2
 8001232:	71bb      	strb	r3, [r7, #6]
	uint8_t ReadCommand[4] = {0xAA, 0x01, Address, Size};
 8001234:	23aa      	movs	r3, #170	@ 0xaa
 8001236:	723b      	strb	r3, [r7, #8]
 8001238:	2301      	movs	r3, #1
 800123a:	727b      	strb	r3, [r7, #9]
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	72bb      	strb	r3, [r7, #10]
 8001240:	79bb      	ldrb	r3, [r7, #6]
 8001242:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef uartError;

	BNO_EmptyingBuffer();
 8001244:	f7ff ff9c 	bl	8001180 <BNO_EmptyingBuffer>

	if(BNO_bufferStatus == Awaiting){
 8001248:	4b0d      	ldr	r3, [pc, #52]	@ (8001280 <BNO_Read+0x5c>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d110      	bne.n	8001272 <BNO_Read+0x4e>
		BNO_RxBuffer[0] = Address;
 8001250:	4a0c      	ldr	r2, [pc, #48]	@ (8001284 <BNO_Read+0x60>)
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	7013      	strb	r3, [r2, #0]
		BNO_bufferStatus = Busy;
 8001256:	4b0a      	ldr	r3, [pc, #40]	@ (8001280 <BNO_Read+0x5c>)
 8001258:	2201      	movs	r2, #1
 800125a:	701a      	strb	r2, [r3, #0]
	}
	else return uartError = HAL_BUSY;

	uartError = HAL_UART_Transmit(&huart3, ReadCommand, 4,100);
 800125c:	f107 0108 	add.w	r1, r7, #8
 8001260:	2364      	movs	r3, #100	@ 0x64
 8001262:	2204      	movs	r2, #4
 8001264:	4808      	ldr	r0, [pc, #32]	@ (8001288 <BNO_Read+0x64>)
 8001266:	f00b faff 	bl	800c868 <HAL_UART_Transmit>
 800126a:	4603      	mov	r3, r0
 800126c:	73fb      	strb	r3, [r7, #15]
	return uartError;
 800126e:	7bfb      	ldrb	r3, [r7, #15]
 8001270:	e002      	b.n	8001278 <BNO_Read+0x54>
	else return uartError = HAL_BUSY;
 8001272:	2302      	movs	r3, #2
 8001274:	73fb      	strb	r3, [r7, #15]
 8001276:	7bfb      	ldrb	r3, [r7, #15]
}
 8001278:	4618      	mov	r0, r3
 800127a:	3710      	adds	r7, #16
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	24000266 	.word	0x24000266
 8001284:	24000164 	.word	0x24000164
 8001288:	240027bc 	.word	0x240027bc

0800128c <BNO_Write>:

HAL_StatusTypeDef BNO_Write(uint8_t Address,uint8_t Size, uint8_t *pData){
 800128c:	b580      	push	{r7, lr}
 800128e:	b0c4      	sub	sp, #272	@ 0x110
 8001290:	af00      	add	r7, sp, #0
 8001292:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001296:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80012a0:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80012a4:	4602      	mov	r2, r0
 80012a6:	701a      	strb	r2, [r3, #0]
 80012a8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80012ac:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80012b0:	460a      	mov	r2, r1
 80012b2:	701a      	strb	r2, [r3, #0]
	uint8_t WriteCommand[255];
	HAL_StatusTypeDef uartError;

	WriteCommand[0] = 0xAA;
 80012b4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80012b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80012bc:	22aa      	movs	r2, #170	@ 0xaa
 80012be:	701a      	strb	r2, [r3, #0]
	WriteCommand[1] = 0x00;
 80012c0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80012c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80012c8:	2200      	movs	r2, #0
 80012ca:	705a      	strb	r2, [r3, #1]
	WriteCommand[2] = Address;
 80012cc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80012d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80012d4:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80012d8:	f2a2 1209 	subw	r2, r2, #265	@ 0x109
 80012dc:	7812      	ldrb	r2, [r2, #0]
 80012de:	709a      	strb	r2, [r3, #2]
	WriteCommand[3] = Size;
 80012e0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80012e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80012e8:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80012ec:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 80012f0:	7812      	ldrb	r2, [r2, #0]
 80012f2:	70da      	strb	r2, [r3, #3]

	for (uint8_t n = 0; n < Size; ++n) {
 80012f4:	2300      	movs	r3, #0
 80012f6:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80012fa:	e015      	b.n	8001328 <BNO_Write+0x9c>
		WriteCommand[n + 4] = pData[n];
 80012fc:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001300:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001304:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001308:	6812      	ldr	r2, [r2, #0]
 800130a:	441a      	add	r2, r3
 800130c:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001310:	3304      	adds	r3, #4
 8001312:	7811      	ldrb	r1, [r2, #0]
 8001314:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001318:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800131c:	54d1      	strb	r1, [r2, r3]
	for (uint8_t n = 0; n < Size; ++n) {
 800131e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001322:	3301      	adds	r3, #1
 8001324:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001328:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800132c:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001330:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	429a      	cmp	r2, r3
 8001338:	d3e0      	bcc.n	80012fc <BNO_Write+0x70>
	}

	uartError = HAL_UART_Transmit(&huart3, WriteCommand, (Size + 4),100);
 800133a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800133e:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	b29b      	uxth	r3, r3
 8001346:	3304      	adds	r3, #4
 8001348:	b29a      	uxth	r2, r3
 800134a:	f107 010c 	add.w	r1, r7, #12
 800134e:	2364      	movs	r3, #100	@ 0x64
 8001350:	4806      	ldr	r0, [pc, #24]	@ (800136c <BNO_Write+0xe0>)
 8001352:	f00b fa89 	bl	800c868 <HAL_UART_Transmit>
 8001356:	4603      	mov	r3, r0
 8001358:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
	return uartError;
 800135c:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
}
 8001360:	4618      	mov	r0, r3
 8001362:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	240027bc 	.word	0x240027bc

08001370 <BNO_SelectPage>:

void BNO_SelectPage(uint8_t Page){
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	71fb      	strb	r3, [r7, #7]
	BNO_Write(BNO055_PAGE_ID, 1, &Page);
 800137a:	1dfb      	adds	r3, r7, #7
 800137c:	461a      	mov	r2, r3
 800137e:	2101      	movs	r1, #1
 8001380:	2007      	movs	r0, #7
 8001382:	f7ff ff83 	bl	800128c <BNO_Write>
	BNO_Read(BNO055_PAGE_ID, 1);
 8001386:	2101      	movs	r1, #1
 8001388:	2007      	movs	r0, #7
 800138a:	f7ff ff4b 	bl	8001224 <BNO_Read>
}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
	...

08001398 <BNO_Reset>:

void BNO_Reset(void){
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IMU_RST_GPIO_Port, IMU_RST_Pin, RESET);
 800139c:	2200      	movs	r2, #0
 800139e:	2104      	movs	r1, #4
 80013a0:	4808      	ldr	r0, [pc, #32]	@ (80013c4 <BNO_Reset+0x2c>)
 80013a2:	f006 f87d 	bl	80074a0 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80013a6:	200a      	movs	r0, #10
 80013a8:	f002 fadc 	bl	8003964 <HAL_Delay>
	HAL_GPIO_WritePin(IMU_RST_GPIO_Port, IMU_RST_Pin, SET);
 80013ac:	2201      	movs	r2, #1
 80013ae:	2104      	movs	r1, #4
 80013b0:	4804      	ldr	r0, [pc, #16]	@ (80013c4 <BNO_Reset+0x2c>)
 80013b2:	f006 f875 	bl	80074a0 <HAL_GPIO_WritePin>
	HAL_Delay(700);
 80013b6:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 80013ba:	f002 fad3 	bl	8003964 <HAL_Delay>
}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	58020c00 	.word	0x58020c00

080013c8 <BNO_Init>:

void BNO_Init(void){
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart3, &BNO_BufferByte,1);
 80013cc:	2201      	movs	r2, #1
 80013ce:	4909      	ldr	r1, [pc, #36]	@ (80013f4 <BNO_Init+0x2c>)
 80013d0:	4809      	ldr	r0, [pc, #36]	@ (80013f8 <BNO_Init+0x30>)
 80013d2:	f00b fad7 	bl	800c984 <HAL_UART_Receive_DMA>
	HAL_GPIO_WritePin(IMU_BOOT_GPIO_Port, IMU_BOOT_Pin, SET);
 80013d6:	2201      	movs	r2, #1
 80013d8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80013dc:	4807      	ldr	r0, [pc, #28]	@ (80013fc <BNO_Init+0x34>)
 80013de:	f006 f85f 	bl	80074a0 <HAL_GPIO_WritePin>
	BNO_Reset();
 80013e2:	f7ff ffd9 	bl	8001398 <BNO_Reset>
	BNO_Read(BNO055_CHIP_ID,4);
 80013e6:	2104      	movs	r1, #4
 80013e8:	2000      	movs	r0, #0
 80013ea:	f7ff ff1b 	bl	8001224 <BNO_Read>
}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	24000263 	.word	0x24000263
 80013f8:	240027bc 	.word	0x240027bc
 80013fc:	58020400 	.word	0x58020400

08001400 <BNO_Receive>:
		default:
			break;
	}
}

void BNO_Receive(uint8_t Buffer){
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	71fb      	strb	r3, [r7, #7]
	static uint8_t MsgSize = 0;
	static uint8_t Counter = 0;

	switch (BNO_Rx_Status) {
 800140a:	4b2a      	ldr	r3, [pc, #168]	@ (80014b4 <BNO_Receive+0xb4>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	2bff      	cmp	r3, #255	@ 0xff
 8001410:	d022      	beq.n	8001458 <BNO_Receive+0x58>
 8001412:	2bff      	cmp	r3, #255	@ 0xff
 8001414:	dc42      	bgt.n	800149c <BNO_Receive+0x9c>
 8001416:	2bee      	cmp	r3, #238	@ 0xee
 8001418:	d017      	beq.n	800144a <BNO_Receive+0x4a>
 800141a:	2bee      	cmp	r3, #238	@ 0xee
 800141c:	dc3e      	bgt.n	800149c <BNO_Receive+0x9c>
 800141e:	2b00      	cmp	r3, #0
 8001420:	d002      	beq.n	8001428 <BNO_Receive+0x28>
 8001422:	2bbb      	cmp	r3, #187	@ 0xbb
 8001424:	d00a      	beq.n	800143c <BNO_Receive+0x3c>
				BNO_ErrorHandler = ReadSucces;
			}

			break;
		default:
			break;
 8001426:	e039      	b.n	800149c <BNO_Receive+0x9c>
			if(Buffer == Read_Response || Buffer == Header) BNO_Rx_Status = Buffer;
 8001428:	79fb      	ldrb	r3, [r7, #7]
 800142a:	2bbb      	cmp	r3, #187	@ 0xbb
 800142c:	d002      	beq.n	8001434 <BNO_Receive+0x34>
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	2bee      	cmp	r3, #238	@ 0xee
 8001432:	d135      	bne.n	80014a0 <BNO_Receive+0xa0>
 8001434:	4a1f      	ldr	r2, [pc, #124]	@ (80014b4 <BNO_Receive+0xb4>)
 8001436:	79fb      	ldrb	r3, [r7, #7]
 8001438:	7013      	strb	r3, [r2, #0]
			break;
 800143a:	e031      	b.n	80014a0 <BNO_Receive+0xa0>
			MsgSize = Buffer;
 800143c:	4a1e      	ldr	r2, [pc, #120]	@ (80014b8 <BNO_Receive+0xb8>)
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	7013      	strb	r3, [r2, #0]
			BNO_Rx_Status = Emptying_Buffer;
 8001442:	4b1c      	ldr	r3, [pc, #112]	@ (80014b4 <BNO_Receive+0xb4>)
 8001444:	22ff      	movs	r2, #255	@ 0xff
 8001446:	701a      	strb	r2, [r3, #0]
			break;
 8001448:	e02d      	b.n	80014a6 <BNO_Receive+0xa6>
			BNO_ErrorHandler = Buffer;
 800144a:	4a1c      	ldr	r2, [pc, #112]	@ (80014bc <BNO_Receive+0xbc>)
 800144c:	79fb      	ldrb	r3, [r7, #7]
 800144e:	7013      	strb	r3, [r2, #0]
			BNO_Rx_Status = AwaitingMsg;
 8001450:	4b18      	ldr	r3, [pc, #96]	@ (80014b4 <BNO_Receive+0xb4>)
 8001452:	2200      	movs	r2, #0
 8001454:	701a      	strb	r2, [r3, #0]
			break;
 8001456:	e026      	b.n	80014a6 <BNO_Receive+0xa6>
			BNO_RxBuffer[Counter + 1] = Buffer;
 8001458:	4b19      	ldr	r3, [pc, #100]	@ (80014c0 <BNO_Receive+0xc0>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	3301      	adds	r3, #1
 800145e:	4919      	ldr	r1, [pc, #100]	@ (80014c4 <BNO_Receive+0xc4>)
 8001460:	79fa      	ldrb	r2, [r7, #7]
 8001462:	54ca      	strb	r2, [r1, r3]
			Counter++;
 8001464:	4b16      	ldr	r3, [pc, #88]	@ (80014c0 <BNO_Receive+0xc0>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	3301      	adds	r3, #1
 800146a:	b2da      	uxtb	r2, r3
 800146c:	4b14      	ldr	r3, [pc, #80]	@ (80014c0 <BNO_Receive+0xc0>)
 800146e:	701a      	strb	r2, [r3, #0]
			if(Counter == MsgSize){
 8001470:	4b13      	ldr	r3, [pc, #76]	@ (80014c0 <BNO_Receive+0xc0>)
 8001472:	781a      	ldrb	r2, [r3, #0]
 8001474:	4b10      	ldr	r3, [pc, #64]	@ (80014b8 <BNO_Receive+0xb8>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	429a      	cmp	r2, r3
 800147a:	d113      	bne.n	80014a4 <BNO_Receive+0xa4>
				Counter = 0;
 800147c:	4b10      	ldr	r3, [pc, #64]	@ (80014c0 <BNO_Receive+0xc0>)
 800147e:	2200      	movs	r2, #0
 8001480:	701a      	strb	r2, [r3, #0]
				MsgSize = 0;
 8001482:	4b0d      	ldr	r3, [pc, #52]	@ (80014b8 <BNO_Receive+0xb8>)
 8001484:	2200      	movs	r2, #0
 8001486:	701a      	strb	r2, [r3, #0]
				BNO_bufferStatus = Ready;
 8001488:	4b0f      	ldr	r3, [pc, #60]	@ (80014c8 <BNO_Receive+0xc8>)
 800148a:	2202      	movs	r2, #2
 800148c:	701a      	strb	r2, [r3, #0]
				BNO_Rx_Status = AwaitingMsg;
 800148e:	4b09      	ldr	r3, [pc, #36]	@ (80014b4 <BNO_Receive+0xb4>)
 8001490:	2200      	movs	r2, #0
 8001492:	701a      	strb	r2, [r3, #0]
				BNO_ErrorHandler = ReadSucces;
 8001494:	4b09      	ldr	r3, [pc, #36]	@ (80014bc <BNO_Receive+0xbc>)
 8001496:	220b      	movs	r2, #11
 8001498:	701a      	strb	r2, [r3, #0]
			break;
 800149a:	e003      	b.n	80014a4 <BNO_Receive+0xa4>
			break;
 800149c:	bf00      	nop
 800149e:	e002      	b.n	80014a6 <BNO_Receive+0xa6>
			break;
 80014a0:	bf00      	nop
 80014a2:	e000      	b.n	80014a6 <BNO_Receive+0xa6>
			break;
 80014a4:	bf00      	nop
	}
	BNO_EmptyingBuffer();
 80014a6:	f7ff fe6b 	bl	8001180 <BNO_EmptyingBuffer>
}
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	24000264 	.word	0x24000264
 80014b8:	24000278 	.word	0x24000278
 80014bc:	24000265 	.word	0x24000265
 80014c0:	24000279 	.word	0x24000279
 80014c4:	24000164 	.word	0x24000164
 80014c8:	24000266 	.word	0x24000266

080014cc <LED_blink>:

		.G_LED.LED_GPIO_GPIOx = LED_5_GPIO_Port,
		.G_LED.LED_GPIO_Pin   = LED_5_Pin
};

LED_config_t LED_blink(LED_config_t LED){
 80014cc:	b084      	sub	sp, #16
 80014ce:	b590      	push	{r4, r7, lr}
 80014d0:	b083      	sub	sp, #12
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
 80014d6:	f107 001c 	add.w	r0, r7, #28
 80014da:	e880 000e 	stmia.w	r0, {r1, r2, r3}

		switch (LED.Blink_status) {
 80014de:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d002      	beq.n	80014ec <LED_blink+0x20>
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d010      	beq.n	800150c <LED_blink+0x40>
 80014ea:	e01f      	b.n	800152c <LED_blink+0x60>
			case 0x00:
				if(LED.count >= LED.Time_Off){
 80014ec:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80014ee:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d31f      	bcc.n	8001534 <LED_blink+0x68>
					HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, SET);
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	8c39      	ldrh	r1, [r7, #32]
 80014f8:	2201      	movs	r2, #1
 80014fa:	4618      	mov	r0, r3
 80014fc:	f005 ffd0 	bl	80074a0 <HAL_GPIO_WritePin>
					LED.Blink_status = 1;
 8001500:	2301      	movs	r3, #1
 8001502:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
					LED.count = 0;
 8001506:	2300      	movs	r3, #0
 8001508:	853b      	strh	r3, [r7, #40]	@ 0x28
				}
				break;
 800150a:	e013      	b.n	8001534 <LED_blink+0x68>
			case 0x01:
				if(LED.count >= LED.Time_On){
 800150c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800150e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001510:	429a      	cmp	r2, r3
 8001512:	d311      	bcc.n	8001538 <LED_blink+0x6c>
					HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, RESET);
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	8c39      	ldrh	r1, [r7, #32]
 8001518:	2200      	movs	r2, #0
 800151a:	4618      	mov	r0, r3
 800151c:	f005 ffc0 	bl	80074a0 <HAL_GPIO_WritePin>
					LED.Blink_status = 0;
 8001520:	2300      	movs	r3, #0
 8001522:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
					LED.count = 0;
 8001526:	2300      	movs	r3, #0
 8001528:	853b      	strh	r3, [r7, #40]	@ 0x28
				}
				break;
 800152a:	e005      	b.n	8001538 <LED_blink+0x6c>
			default:
				LED.Blink_status = 0;
 800152c:	2300      	movs	r3, #0
 800152e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
				break;
 8001532:	e002      	b.n	800153a <LED_blink+0x6e>
				break;
 8001534:	bf00      	nop
 8001536:	e000      	b.n	800153a <LED_blink+0x6e>
				break;
 8001538:	bf00      	nop
		}

	LED.count++;
 800153a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800153c:	3301      	adds	r3, #1
 800153e:	b29b      	uxth	r3, r3
 8001540:	853b      	strh	r3, [r7, #40]	@ 0x28
	return LED;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	461c      	mov	r4, r3
 8001546:	f107 031c 	add.w	r3, r7, #28
 800154a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800154c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800155a:	b004      	add	sp, #16
 800155c:	4770      	bx	lr

0800155e <LED_Rutine>:

LED_config_t LED_Rutine(LED_config_t LED){
 800155e:	b084      	sub	sp, #16
 8001560:	b590      	push	{r4, r7, lr}
 8001562:	b085      	sub	sp, #20
 8001564:	af02      	add	r7, sp, #8
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	f107 001c 	add.w	r0, r7, #28
 800156c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if(LED.LED_status == 1){
 8001570:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001574:	2b01      	cmp	r3, #1
 8001576:	d117      	bne.n	80015a8 <LED_Rutine+0x4a>
		switch (LED.Sequence) {
 8001578:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800157c:	2b00      	cmp	r3, #0
 800157e:	d002      	beq.n	8001586 <LED_Rutine+0x28>
 8001580:	2b01      	cmp	r3, #1
 8001582:	d007      	beq.n	8001594 <LED_Rutine+0x36>
				break;
			case Blink:
				LED = LED_blink(LED);
				break;
			default:
				break;
 8001584:	e018      	b.n	80015b8 <LED_Rutine+0x5a>
				HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, SET);
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	8c39      	ldrh	r1, [r7, #32]
 800158a:	2201      	movs	r2, #1
 800158c:	4618      	mov	r0, r3
 800158e:	f005 ff87 	bl	80074a0 <HAL_GPIO_WritePin>
				break;
 8001592:	e011      	b.n	80015b8 <LED_Rutine+0x5a>
				LED = LED_blink(LED);
 8001594:	f107 001c 	add.w	r0, r7, #28
 8001598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800159a:	9300      	str	r3, [sp, #0]
 800159c:	f107 031c 	add.w	r3, r7, #28
 80015a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015a2:	f7ff ff93 	bl	80014cc <LED_blink>
				break;
 80015a6:	e007      	b.n	80015b8 <LED_Rutine+0x5a>
		}
	}
	else{
		HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, RESET);
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	8c39      	ldrh	r1, [r7, #32]
 80015ac:	2200      	movs	r2, #0
 80015ae:	4618      	mov	r0, r3
 80015b0:	f005 ff76 	bl	80074a0 <HAL_GPIO_WritePin>
		LED.count = 0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	853b      	strh	r3, [r7, #40]	@ 0x28
	}
	return LED;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	461c      	mov	r4, r3
 80015bc:	f107 031c 	add.w	r3, r7, #28
 80015c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80015d0:	b004      	add	sp, #16
 80015d2:	4770      	bx	lr

080015d4 <LED_Tasks>:

void LED_Tasks (void){
 80015d4:	b590      	push	{r4, r7, lr}
 80015d6:	b087      	sub	sp, #28
 80015d8:	af02      	add	r7, sp, #8
	LED_Info.R_LED = LED_Rutine(LED_Info.R_LED);
 80015da:	4c24      	ldr	r4, [pc, #144]	@ (800166c <LED_Tasks+0x98>)
 80015dc:	4638      	mov	r0, r7
 80015de:	4b23      	ldr	r3, [pc, #140]	@ (800166c <LED_Tasks+0x98>)
 80015e0:	68da      	ldr	r2, [r3, #12]
 80015e2:	9200      	str	r2, [sp, #0]
 80015e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015e6:	f7ff ffba 	bl	800155e <LED_Rutine>
 80015ea:	463b      	mov	r3, r7
 80015ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED1 = LED_Rutine(LED_Info.B_LED1);
 80015f2:	4c1e      	ldr	r4, [pc, #120]	@ (800166c <LED_Tasks+0x98>)
 80015f4:	4638      	mov	r0, r7
 80015f6:	4b1d      	ldr	r3, [pc, #116]	@ (800166c <LED_Tasks+0x98>)
 80015f8:	69da      	ldr	r2, [r3, #28]
 80015fa:	9200      	str	r2, [sp, #0]
 80015fc:	3310      	adds	r3, #16
 80015fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001600:	f7ff ffad 	bl	800155e <LED_Rutine>
 8001604:	3410      	adds	r4, #16
 8001606:	463b      	mov	r3, r7
 8001608:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800160a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED2 = LED_Rutine(LED_Info.B_LED2);
 800160e:	4c17      	ldr	r4, [pc, #92]	@ (800166c <LED_Tasks+0x98>)
 8001610:	4638      	mov	r0, r7
 8001612:	4b16      	ldr	r3, [pc, #88]	@ (800166c <LED_Tasks+0x98>)
 8001614:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001616:	9200      	str	r2, [sp, #0]
 8001618:	3320      	adds	r3, #32
 800161a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800161c:	f7ff ff9f 	bl	800155e <LED_Rutine>
 8001620:	3420      	adds	r4, #32
 8001622:	463b      	mov	r3, r7
 8001624:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001626:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED3 = LED_Rutine(LED_Info.B_LED3);
 800162a:	4c10      	ldr	r4, [pc, #64]	@ (800166c <LED_Tasks+0x98>)
 800162c:	4638      	mov	r0, r7
 800162e:	4b0f      	ldr	r3, [pc, #60]	@ (800166c <LED_Tasks+0x98>)
 8001630:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001632:	9200      	str	r2, [sp, #0]
 8001634:	3330      	adds	r3, #48	@ 0x30
 8001636:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001638:	f7ff ff91 	bl	800155e <LED_Rutine>
 800163c:	3430      	adds	r4, #48	@ 0x30
 800163e:	463b      	mov	r3, r7
 8001640:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001642:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.G_LED = LED_Rutine(LED_Info.G_LED);
 8001646:	4c09      	ldr	r4, [pc, #36]	@ (800166c <LED_Tasks+0x98>)
 8001648:	4638      	mov	r0, r7
 800164a:	4b08      	ldr	r3, [pc, #32]	@ (800166c <LED_Tasks+0x98>)
 800164c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800164e:	9200      	str	r2, [sp, #0]
 8001650:	3340      	adds	r3, #64	@ 0x40
 8001652:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001654:	f7ff ff83 	bl	800155e <LED_Rutine>
 8001658:	3440      	adds	r4, #64	@ 0x40
 800165a:	463b      	mov	r3, r7
 800165c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800165e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001662:	bf00      	nop
 8001664:	3714      	adds	r7, #20
 8001666:	46bd      	mov	sp, r7
 8001668:	bd90      	pop	{r4, r7, pc}
 800166a:	bf00      	nop
 800166c:	24000000 	.word	0x24000000

08001670 <PWM_Assing>:
		.Canal_8  = 1500,
		.Canal_9  = 1500,
		.Canal_10 = 1500,
};

void PWM_Assing(void){
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
	TIM2->CCR1 = PWM_Output.Canal_1;
 8001674:	4b2a      	ldr	r3, [pc, #168]	@ (8001720 <PWM_Assing+0xb0>)
 8001676:	881a      	ldrh	r2, [r3, #0]
 8001678:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800167c:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM2->CCR2 = PWM_Output.Canal_2;
 800167e:	4b28      	ldr	r3, [pc, #160]	@ (8001720 <PWM_Assing+0xb0>)
 8001680:	885a      	ldrh	r2, [r3, #2]
 8001682:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001686:	639a      	str	r2, [r3, #56]	@ 0x38

	TIM3->CCR1 = PWM_Output.Canal_3;
 8001688:	4b25      	ldr	r3, [pc, #148]	@ (8001720 <PWM_Assing+0xb0>)
 800168a:	889a      	ldrh	r2, [r3, #4]
 800168c:	4b25      	ldr	r3, [pc, #148]	@ (8001724 <PWM_Assing+0xb4>)
 800168e:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3->CCR2 = PWM_Output.Canal_4;
 8001690:	4b23      	ldr	r3, [pc, #140]	@ (8001720 <PWM_Assing+0xb0>)
 8001692:	88da      	ldrh	r2, [r3, #6]
 8001694:	4b23      	ldr	r3, [pc, #140]	@ (8001724 <PWM_Assing+0xb4>)
 8001696:	639a      	str	r2, [r3, #56]	@ 0x38

	TIM4->CCR1 = PWM_Output.Canal_5;
 8001698:	4b21      	ldr	r3, [pc, #132]	@ (8001720 <PWM_Assing+0xb0>)
 800169a:	891a      	ldrh	r2, [r3, #8]
 800169c:	4b22      	ldr	r3, [pc, #136]	@ (8001728 <PWM_Assing+0xb8>)
 800169e:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM4->CCR2 = PWM_Output.Canal_6;
 80016a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001720 <PWM_Assing+0xb0>)
 80016a2:	895a      	ldrh	r2, [r3, #10]
 80016a4:	4b20      	ldr	r3, [pc, #128]	@ (8001728 <PWM_Assing+0xb8>)
 80016a6:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM4->CCR3 = PWM_Output.Canal_7;
 80016a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001720 <PWM_Assing+0xb0>)
 80016aa:	899a      	ldrh	r2, [r3, #12]
 80016ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001728 <PWM_Assing+0xb8>)
 80016ae:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM4->CCR4 = PWM_Output.Canal_8;
 80016b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001720 <PWM_Assing+0xb0>)
 80016b2:	89da      	ldrh	r2, [r3, #14]
 80016b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001728 <PWM_Assing+0xb8>)
 80016b6:	641a      	str	r2, [r3, #64]	@ 0x40

	TIM2->CCR4 = PWM_Output.Canal_9;
 80016b8:	4b19      	ldr	r3, [pc, #100]	@ (8001720 <PWM_Assing+0xb0>)
 80016ba:	8a1a      	ldrh	r2, [r3, #16]
 80016bc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80016c0:	641a      	str	r2, [r3, #64]	@ 0x40
	TIM2->CCR3 = PWM_Output.Canal_10;
 80016c2:	4b17      	ldr	r3, [pc, #92]	@ (8001720 <PWM_Assing+0xb0>)
 80016c4:	8a5a      	ldrh	r2, [r3, #18]
 80016c6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80016ca:	63da      	str	r2, [r3, #60]	@ 0x3c

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80016cc:	2100      	movs	r1, #0
 80016ce:	4817      	ldr	r0, [pc, #92]	@ (800172c <PWM_Assing+0xbc>)
 80016d0:	f00a f8da 	bl	800b888 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80016d4:	2104      	movs	r1, #4
 80016d6:	4815      	ldr	r0, [pc, #84]	@ (800172c <PWM_Assing+0xbc>)
 80016d8:	f00a f8d6 	bl	800b888 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80016dc:	2108      	movs	r1, #8
 80016de:	4813      	ldr	r0, [pc, #76]	@ (800172c <PWM_Assing+0xbc>)
 80016e0:	f00a f8d2 	bl	800b888 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80016e4:	210c      	movs	r1, #12
 80016e6:	4811      	ldr	r0, [pc, #68]	@ (800172c <PWM_Assing+0xbc>)
 80016e8:	f00a f8ce 	bl	800b888 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80016ec:	2100      	movs	r1, #0
 80016ee:	4810      	ldr	r0, [pc, #64]	@ (8001730 <PWM_Assing+0xc0>)
 80016f0:	f00a f8ca 	bl	800b888 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80016f4:	2104      	movs	r1, #4
 80016f6:	480e      	ldr	r0, [pc, #56]	@ (8001730 <PWM_Assing+0xc0>)
 80016f8:	f00a f8c6 	bl	800b888 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80016fc:	2100      	movs	r1, #0
 80016fe:	480d      	ldr	r0, [pc, #52]	@ (8001734 <PWM_Assing+0xc4>)
 8001700:	f00a f8c2 	bl	800b888 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001704:	2104      	movs	r1, #4
 8001706:	480b      	ldr	r0, [pc, #44]	@ (8001734 <PWM_Assing+0xc4>)
 8001708:	f00a f8be 	bl	800b888 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800170c:	2108      	movs	r1, #8
 800170e:	4809      	ldr	r0, [pc, #36]	@ (8001734 <PWM_Assing+0xc4>)
 8001710:	f00a f8ba 	bl	800b888 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001714:	210c      	movs	r1, #12
 8001716:	4807      	ldr	r0, [pc, #28]	@ (8001734 <PWM_Assing+0xc4>)
 8001718:	f00a f8b6 	bl	800b888 <HAL_TIM_PWM_Start>
}
 800171c:	bf00      	nop
 800171e:	bd80      	pop	{r7, pc}
 8001720:	24000050 	.word	0x24000050
 8001724:	40000400 	.word	0x40000400
 8001728:	40000800 	.word	0x40000800
 800172c:	24002518 	.word	0x24002518
 8001730:	24002564 	.word	0x24002564
 8001734:	240025b0 	.word	0x240025b0

08001738 <SBUS_init>:

extern UART_HandleTypeDef huart1;
#define SBUS_UART_handler &huart1


void SBUS_init(void){
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(SBUS_UART_handler, &SBUS_RxBuffer, 1);
 800173c:	2201      	movs	r2, #1
 800173e:	4903      	ldr	r1, [pc, #12]	@ (800174c <SBUS_init+0x14>)
 8001740:	4803      	ldr	r0, [pc, #12]	@ (8001750 <SBUS_init+0x18>)
 8001742:	f00b f91f 	bl	800c984 <HAL_UART_Receive_DMA>

}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	24000295 	.word	0x24000295
 8001750:	24002728 	.word	0x24002728

08001754 <SBUS_Receive>:

void SBUS_Receive(uint8_t SBUS_RxBuffer){
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	71fb      	strb	r3, [r7, #7]
	static uint8_t Actual_status = 0;
	static uint8_t RxCount;

	switch (Actual_status) {
 800175e:	4b20      	ldr	r3, [pc, #128]	@ (80017e0 <SBUS_Receive+0x8c>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d002      	beq.n	800176c <SBUS_Receive+0x18>
 8001766:	2b01      	cmp	r3, #1
 8001768:	d017      	beq.n	800179a <SBUS_Receive+0x46>
 800176a:	e02f      	b.n	80017cc <SBUS_Receive+0x78>
		case 0:
			if(SBUS_RxBuffer == 0x0F){
 800176c:	79fb      	ldrb	r3, [r7, #7]
 800176e:	2b0f      	cmp	r3, #15
 8001770:	d10f      	bne.n	8001792 <SBUS_Receive+0x3e>
				SBUS_UART_Rx[RxCount] = SBUS_RxBuffer;
 8001772:	4b1c      	ldr	r3, [pc, #112]	@ (80017e4 <SBUS_Receive+0x90>)
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	4619      	mov	r1, r3
 8001778:	4a1b      	ldr	r2, [pc, #108]	@ (80017e8 <SBUS_Receive+0x94>)
 800177a:	79fb      	ldrb	r3, [r7, #7]
 800177c:	5453      	strb	r3, [r2, r1]
				Actual_status = 1;
 800177e:	4b18      	ldr	r3, [pc, #96]	@ (80017e0 <SBUS_Receive+0x8c>)
 8001780:	2201      	movs	r2, #1
 8001782:	701a      	strb	r2, [r3, #0]
				RxCount++;
 8001784:	4b17      	ldr	r3, [pc, #92]	@ (80017e4 <SBUS_Receive+0x90>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	3301      	adds	r3, #1
 800178a:	b2da      	uxtb	r2, r3
 800178c:	4b15      	ldr	r3, [pc, #84]	@ (80017e4 <SBUS_Receive+0x90>)
 800178e:	701a      	strb	r2, [r3, #0]
			}
			else{
				RxCount = 0;
			}
			break;
 8001790:	e021      	b.n	80017d6 <SBUS_Receive+0x82>
				RxCount = 0;
 8001792:	4b14      	ldr	r3, [pc, #80]	@ (80017e4 <SBUS_Receive+0x90>)
 8001794:	2200      	movs	r2, #0
 8001796:	701a      	strb	r2, [r3, #0]
			break;
 8001798:	e01d      	b.n	80017d6 <SBUS_Receive+0x82>
		case 1:
			SBUS_UART_Rx[RxCount] = SBUS_RxBuffer;
 800179a:	4b12      	ldr	r3, [pc, #72]	@ (80017e4 <SBUS_Receive+0x90>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	4619      	mov	r1, r3
 80017a0:	4a11      	ldr	r2, [pc, #68]	@ (80017e8 <SBUS_Receive+0x94>)
 80017a2:	79fb      	ldrb	r3, [r7, #7]
 80017a4:	5453      	strb	r3, [r2, r1]
			RxCount++;
 80017a6:	4b0f      	ldr	r3, [pc, #60]	@ (80017e4 <SBUS_Receive+0x90>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	3301      	adds	r3, #1
 80017ac:	b2da      	uxtb	r2, r3
 80017ae:	4b0d      	ldr	r3, [pc, #52]	@ (80017e4 <SBUS_Receive+0x90>)
 80017b0:	701a      	strb	r2, [r3, #0]
			if(RxCount == 24){
 80017b2:	4b0c      	ldr	r3, [pc, #48]	@ (80017e4 <SBUS_Receive+0x90>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	2b18      	cmp	r3, #24
 80017b8:	d10c      	bne.n	80017d4 <SBUS_Receive+0x80>
				RxCount = 0;
 80017ba:	4b0a      	ldr	r3, [pc, #40]	@ (80017e4 <SBUS_Receive+0x90>)
 80017bc:	2200      	movs	r2, #0
 80017be:	701a      	strb	r2, [r3, #0]
				Actual_status = 0;
 80017c0:	4b07      	ldr	r3, [pc, #28]	@ (80017e0 <SBUS_Receive+0x8c>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	701a      	strb	r2, [r3, #0]
				SBUS_getData();
 80017c6:	f000 f843 	bl	8001850 <SBUS_getData>
			}
			break;
 80017ca:	e003      	b.n	80017d4 <SBUS_Receive+0x80>
		default:
			Actual_status = 0;
 80017cc:	4b04      	ldr	r3, [pc, #16]	@ (80017e0 <SBUS_Receive+0x8c>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	701a      	strb	r2, [r3, #0]
			break;
 80017d2:	e000      	b.n	80017d6 <SBUS_Receive+0x82>
			break;
 80017d4:	bf00      	nop
	}
}
 80017d6:	bf00      	nop
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	24000296 	.word	0x24000296
 80017e4:	24000297 	.word	0x24000297
 80017e8:	2400027c 	.word	0x2400027c

080017ec <Temp_BypassFunct>:

void Temp_BypassFunct (void){
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
	PWM_Output.Canal_1  = Radio_input.Canal_1;
 80017f0:	4b15      	ldr	r3, [pc, #84]	@ (8001848 <Temp_BypassFunct+0x5c>)
 80017f2:	881a      	ldrh	r2, [r3, #0]
 80017f4:	4b15      	ldr	r3, [pc, #84]	@ (800184c <Temp_BypassFunct+0x60>)
 80017f6:	801a      	strh	r2, [r3, #0]
	PWM_Output.Canal_2  = Radio_input.Canal_2;
 80017f8:	4b13      	ldr	r3, [pc, #76]	@ (8001848 <Temp_BypassFunct+0x5c>)
 80017fa:	885a      	ldrh	r2, [r3, #2]
 80017fc:	4b13      	ldr	r3, [pc, #76]	@ (800184c <Temp_BypassFunct+0x60>)
 80017fe:	805a      	strh	r2, [r3, #2]
	PWM_Output.Canal_3  = Radio_input.Canal_3;
 8001800:	4b11      	ldr	r3, [pc, #68]	@ (8001848 <Temp_BypassFunct+0x5c>)
 8001802:	889a      	ldrh	r2, [r3, #4]
 8001804:	4b11      	ldr	r3, [pc, #68]	@ (800184c <Temp_BypassFunct+0x60>)
 8001806:	809a      	strh	r2, [r3, #4]
	PWM_Output.Canal_4  = Radio_input.Canal_4;
 8001808:	4b0f      	ldr	r3, [pc, #60]	@ (8001848 <Temp_BypassFunct+0x5c>)
 800180a:	88da      	ldrh	r2, [r3, #6]
 800180c:	4b0f      	ldr	r3, [pc, #60]	@ (800184c <Temp_BypassFunct+0x60>)
 800180e:	80da      	strh	r2, [r3, #6]
	PWM_Output.Canal_5  = Radio_input.Canal_5;
 8001810:	4b0d      	ldr	r3, [pc, #52]	@ (8001848 <Temp_BypassFunct+0x5c>)
 8001812:	891a      	ldrh	r2, [r3, #8]
 8001814:	4b0d      	ldr	r3, [pc, #52]	@ (800184c <Temp_BypassFunct+0x60>)
 8001816:	811a      	strh	r2, [r3, #8]
	PWM_Output.Canal_6  = Radio_input.Canal_6;
 8001818:	4b0b      	ldr	r3, [pc, #44]	@ (8001848 <Temp_BypassFunct+0x5c>)
 800181a:	895a      	ldrh	r2, [r3, #10]
 800181c:	4b0b      	ldr	r3, [pc, #44]	@ (800184c <Temp_BypassFunct+0x60>)
 800181e:	815a      	strh	r2, [r3, #10]
	PWM_Output.Canal_7  = Radio_input.Canal_7;
 8001820:	4b09      	ldr	r3, [pc, #36]	@ (8001848 <Temp_BypassFunct+0x5c>)
 8001822:	899a      	ldrh	r2, [r3, #12]
 8001824:	4b09      	ldr	r3, [pc, #36]	@ (800184c <Temp_BypassFunct+0x60>)
 8001826:	819a      	strh	r2, [r3, #12]
	PWM_Output.Canal_8  = Radio_input.Canal_8;
 8001828:	4b07      	ldr	r3, [pc, #28]	@ (8001848 <Temp_BypassFunct+0x5c>)
 800182a:	89da      	ldrh	r2, [r3, #14]
 800182c:	4b07      	ldr	r3, [pc, #28]	@ (800184c <Temp_BypassFunct+0x60>)
 800182e:	81da      	strh	r2, [r3, #14]
	PWM_Output.Canal_9  = Radio_input.Canal_9;
 8001830:	4b05      	ldr	r3, [pc, #20]	@ (8001848 <Temp_BypassFunct+0x5c>)
 8001832:	8a1a      	ldrh	r2, [r3, #16]
 8001834:	4b05      	ldr	r3, [pc, #20]	@ (800184c <Temp_BypassFunct+0x60>)
 8001836:	821a      	strh	r2, [r3, #16]
	PWM_Output.Canal_10 = Radio_input.Canal_10;
 8001838:	4b03      	ldr	r3, [pc, #12]	@ (8001848 <Temp_BypassFunct+0x5c>)
 800183a:	8a5a      	ldrh	r2, [r3, #18]
 800183c:	4b03      	ldr	r3, [pc, #12]	@ (800184c <Temp_BypassFunct+0x60>)
 800183e:	825a      	strh	r2, [r3, #18]

	PWM_Assing();
 8001840:	f7ff ff16 	bl	8001670 <PWM_Assing>
}
 8001844:	bf00      	nop
 8001846:	bd80      	pop	{r7, pc}
 8001848:	24000064 	.word	0x24000064
 800184c:	24000050 	.word	0x24000050

08001850 <SBUS_getData>:

void SBUS_getData(void){
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
	//Se hace el corrimiento de bits para dar la estructura de los 16 canales, donde cada canal esta compuesto por 11 bits
	//pero cada paquete es de 1 byte. Para cada canal se utilizan los 8 bits (O los que correspondan) de el byte 1
	//(O el que corresponda) como los bits menos significativos del canal 1, y los tres bits faltantes se toman los 3 bits
	// menos significativos (O los que correspondan) del byte 2 y se colocan como los 3 bits más significativos del canal 1.
	Radio_input.Canal_1 = ((SBUS_UART_Rx[1] | SBUS_UART_Rx[2] << 8) & 0x07FF);
 8001854:	4b95      	ldr	r3, [pc, #596]	@ (8001aac <SBUS_getData+0x25c>)
 8001856:	785b      	ldrb	r3, [r3, #1]
 8001858:	b21a      	sxth	r2, r3
 800185a:	4b94      	ldr	r3, [pc, #592]	@ (8001aac <SBUS_getData+0x25c>)
 800185c:	789b      	ldrb	r3, [r3, #2]
 800185e:	021b      	lsls	r3, r3, #8
 8001860:	b21b      	sxth	r3, r3
 8001862:	4313      	orrs	r3, r2
 8001864:	b21b      	sxth	r3, r3
 8001866:	b29b      	uxth	r3, r3
 8001868:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800186c:	b29a      	uxth	r2, r3
 800186e:	4b90      	ldr	r3, [pc, #576]	@ (8001ab0 <SBUS_getData+0x260>)
 8001870:	801a      	strh	r2, [r3, #0]
	Radio_input.Canal_2 = ((SBUS_UART_Rx[2] >> 3 | SBUS_UART_Rx[3] << 5) & 0x07FF);
 8001872:	4b8e      	ldr	r3, [pc, #568]	@ (8001aac <SBUS_getData+0x25c>)
 8001874:	789b      	ldrb	r3, [r3, #2]
 8001876:	08db      	lsrs	r3, r3, #3
 8001878:	b2db      	uxtb	r3, r3
 800187a:	b21a      	sxth	r2, r3
 800187c:	4b8b      	ldr	r3, [pc, #556]	@ (8001aac <SBUS_getData+0x25c>)
 800187e:	78db      	ldrb	r3, [r3, #3]
 8001880:	015b      	lsls	r3, r3, #5
 8001882:	b21b      	sxth	r3, r3
 8001884:	4313      	orrs	r3, r2
 8001886:	b21b      	sxth	r3, r3
 8001888:	b29b      	uxth	r3, r3
 800188a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800188e:	b29a      	uxth	r2, r3
 8001890:	4b87      	ldr	r3, [pc, #540]	@ (8001ab0 <SBUS_getData+0x260>)
 8001892:	805a      	strh	r2, [r3, #2]
	Radio_input.Canal_3 = ((SBUS_UART_Rx[3] >> 6 | SBUS_UART_Rx[4] << 2 | SBUS_UART_Rx[5] << 10) & 0x07FF);
 8001894:	4b85      	ldr	r3, [pc, #532]	@ (8001aac <SBUS_getData+0x25c>)
 8001896:	78db      	ldrb	r3, [r3, #3]
 8001898:	099b      	lsrs	r3, r3, #6
 800189a:	b2db      	uxtb	r3, r3
 800189c:	b21a      	sxth	r2, r3
 800189e:	4b83      	ldr	r3, [pc, #524]	@ (8001aac <SBUS_getData+0x25c>)
 80018a0:	791b      	ldrb	r3, [r3, #4]
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	b21b      	sxth	r3, r3
 80018a6:	4313      	orrs	r3, r2
 80018a8:	b21a      	sxth	r2, r3
 80018aa:	4b80      	ldr	r3, [pc, #512]	@ (8001aac <SBUS_getData+0x25c>)
 80018ac:	795b      	ldrb	r3, [r3, #5]
 80018ae:	029b      	lsls	r3, r3, #10
 80018b0:	b21b      	sxth	r3, r3
 80018b2:	4313      	orrs	r3, r2
 80018b4:	b21b      	sxth	r3, r3
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018bc:	b29a      	uxth	r2, r3
 80018be:	4b7c      	ldr	r3, [pc, #496]	@ (8001ab0 <SBUS_getData+0x260>)
 80018c0:	809a      	strh	r2, [r3, #4]
	Radio_input.Canal_4 = ((SBUS_UART_Rx[5] >> 1 | SBUS_UART_Rx[6] << 7) & 0x07FF);
 80018c2:	4b7a      	ldr	r3, [pc, #488]	@ (8001aac <SBUS_getData+0x25c>)
 80018c4:	795b      	ldrb	r3, [r3, #5]
 80018c6:	085b      	lsrs	r3, r3, #1
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	b21a      	sxth	r2, r3
 80018cc:	4b77      	ldr	r3, [pc, #476]	@ (8001aac <SBUS_getData+0x25c>)
 80018ce:	799b      	ldrb	r3, [r3, #6]
 80018d0:	01db      	lsls	r3, r3, #7
 80018d2:	b21b      	sxth	r3, r3
 80018d4:	4313      	orrs	r3, r2
 80018d6:	b21b      	sxth	r3, r3
 80018d8:	b29b      	uxth	r3, r3
 80018da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018de:	b29a      	uxth	r2, r3
 80018e0:	4b73      	ldr	r3, [pc, #460]	@ (8001ab0 <SBUS_getData+0x260>)
 80018e2:	80da      	strh	r2, [r3, #6]
	Radio_input.Canal_5 = ((SBUS_UART_Rx[6] >> 4 | SBUS_UART_Rx[7] << 4) & 0x07FF);
 80018e4:	4b71      	ldr	r3, [pc, #452]	@ (8001aac <SBUS_getData+0x25c>)
 80018e6:	799b      	ldrb	r3, [r3, #6]
 80018e8:	091b      	lsrs	r3, r3, #4
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	b21a      	sxth	r2, r3
 80018ee:	4b6f      	ldr	r3, [pc, #444]	@ (8001aac <SBUS_getData+0x25c>)
 80018f0:	79db      	ldrb	r3, [r3, #7]
 80018f2:	011b      	lsls	r3, r3, #4
 80018f4:	b21b      	sxth	r3, r3
 80018f6:	4313      	orrs	r3, r2
 80018f8:	b21b      	sxth	r3, r3
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001900:	b29a      	uxth	r2, r3
 8001902:	4b6b      	ldr	r3, [pc, #428]	@ (8001ab0 <SBUS_getData+0x260>)
 8001904:	811a      	strh	r2, [r3, #8]
	Radio_input.Canal_6 = ((SBUS_UART_Rx[7] >> 7 | SBUS_UART_Rx[8] << 1 | SBUS_UART_Rx[9] << 9) & 0x07FF);
 8001906:	4b69      	ldr	r3, [pc, #420]	@ (8001aac <SBUS_getData+0x25c>)
 8001908:	79db      	ldrb	r3, [r3, #7]
 800190a:	09db      	lsrs	r3, r3, #7
 800190c:	b2db      	uxtb	r3, r3
 800190e:	b21a      	sxth	r2, r3
 8001910:	4b66      	ldr	r3, [pc, #408]	@ (8001aac <SBUS_getData+0x25c>)
 8001912:	7a1b      	ldrb	r3, [r3, #8]
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	b21b      	sxth	r3, r3
 8001918:	4313      	orrs	r3, r2
 800191a:	b21a      	sxth	r2, r3
 800191c:	4b63      	ldr	r3, [pc, #396]	@ (8001aac <SBUS_getData+0x25c>)
 800191e:	7a5b      	ldrb	r3, [r3, #9]
 8001920:	025b      	lsls	r3, r3, #9
 8001922:	b21b      	sxth	r3, r3
 8001924:	4313      	orrs	r3, r2
 8001926:	b21b      	sxth	r3, r3
 8001928:	b29b      	uxth	r3, r3
 800192a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800192e:	b29a      	uxth	r2, r3
 8001930:	4b5f      	ldr	r3, [pc, #380]	@ (8001ab0 <SBUS_getData+0x260>)
 8001932:	815a      	strh	r2, [r3, #10]
	Radio_input.Canal_7 = ((SBUS_UART_Rx[9] >> 2 | SBUS_UART_Rx[10] << 6) & 0x07FF);
 8001934:	4b5d      	ldr	r3, [pc, #372]	@ (8001aac <SBUS_getData+0x25c>)
 8001936:	7a5b      	ldrb	r3, [r3, #9]
 8001938:	089b      	lsrs	r3, r3, #2
 800193a:	b2db      	uxtb	r3, r3
 800193c:	b21a      	sxth	r2, r3
 800193e:	4b5b      	ldr	r3, [pc, #364]	@ (8001aac <SBUS_getData+0x25c>)
 8001940:	7a9b      	ldrb	r3, [r3, #10]
 8001942:	019b      	lsls	r3, r3, #6
 8001944:	b21b      	sxth	r3, r3
 8001946:	4313      	orrs	r3, r2
 8001948:	b21b      	sxth	r3, r3
 800194a:	b29b      	uxth	r3, r3
 800194c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001950:	b29a      	uxth	r2, r3
 8001952:	4b57      	ldr	r3, [pc, #348]	@ (8001ab0 <SBUS_getData+0x260>)
 8001954:	819a      	strh	r2, [r3, #12]
	Radio_input.Canal_8 = ((SBUS_UART_Rx[10] >> 5 | SBUS_UART_Rx[11] << 3) & 0x07FF);
 8001956:	4b55      	ldr	r3, [pc, #340]	@ (8001aac <SBUS_getData+0x25c>)
 8001958:	7a9b      	ldrb	r3, [r3, #10]
 800195a:	095b      	lsrs	r3, r3, #5
 800195c:	b2db      	uxtb	r3, r3
 800195e:	b21a      	sxth	r2, r3
 8001960:	4b52      	ldr	r3, [pc, #328]	@ (8001aac <SBUS_getData+0x25c>)
 8001962:	7adb      	ldrb	r3, [r3, #11]
 8001964:	00db      	lsls	r3, r3, #3
 8001966:	b21b      	sxth	r3, r3
 8001968:	4313      	orrs	r3, r2
 800196a:	b21b      	sxth	r3, r3
 800196c:	b29b      	uxth	r3, r3
 800196e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001972:	b29a      	uxth	r2, r3
 8001974:	4b4e      	ldr	r3, [pc, #312]	@ (8001ab0 <SBUS_getData+0x260>)
 8001976:	81da      	strh	r2, [r3, #14]
	Radio_input.Canal_9 = ((SBUS_UART_Rx[12] | SBUS_UART_Rx[13] << 8) & 0x07FF);
 8001978:	4b4c      	ldr	r3, [pc, #304]	@ (8001aac <SBUS_getData+0x25c>)
 800197a:	7b1b      	ldrb	r3, [r3, #12]
 800197c:	b21a      	sxth	r2, r3
 800197e:	4b4b      	ldr	r3, [pc, #300]	@ (8001aac <SBUS_getData+0x25c>)
 8001980:	7b5b      	ldrb	r3, [r3, #13]
 8001982:	021b      	lsls	r3, r3, #8
 8001984:	b21b      	sxth	r3, r3
 8001986:	4313      	orrs	r3, r2
 8001988:	b21b      	sxth	r3, r3
 800198a:	b29b      	uxth	r3, r3
 800198c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001990:	b29a      	uxth	r2, r3
 8001992:	4b47      	ldr	r3, [pc, #284]	@ (8001ab0 <SBUS_getData+0x260>)
 8001994:	821a      	strh	r2, [r3, #16]
	Radio_input.Canal_10 = ((SBUS_UART_Rx[13] >> 3 | SBUS_UART_Rx[14] << 5) & 0x07FF);
 8001996:	4b45      	ldr	r3, [pc, #276]	@ (8001aac <SBUS_getData+0x25c>)
 8001998:	7b5b      	ldrb	r3, [r3, #13]
 800199a:	08db      	lsrs	r3, r3, #3
 800199c:	b2db      	uxtb	r3, r3
 800199e:	b21a      	sxth	r2, r3
 80019a0:	4b42      	ldr	r3, [pc, #264]	@ (8001aac <SBUS_getData+0x25c>)
 80019a2:	7b9b      	ldrb	r3, [r3, #14]
 80019a4:	015b      	lsls	r3, r3, #5
 80019a6:	b21b      	sxth	r3, r3
 80019a8:	4313      	orrs	r3, r2
 80019aa:	b21b      	sxth	r3, r3
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	4b3e      	ldr	r3, [pc, #248]	@ (8001ab0 <SBUS_getData+0x260>)
 80019b6:	825a      	strh	r2, [r3, #18]
	Radio_input.Canal_11 = ((SBUS_UART_Rx[14] >> 6 | SBUS_UART_Rx[15] << 2 | SBUS_UART_Rx[16] << 10) & 0x07FF);
 80019b8:	4b3c      	ldr	r3, [pc, #240]	@ (8001aac <SBUS_getData+0x25c>)
 80019ba:	7b9b      	ldrb	r3, [r3, #14]
 80019bc:	099b      	lsrs	r3, r3, #6
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	b21a      	sxth	r2, r3
 80019c2:	4b3a      	ldr	r3, [pc, #232]	@ (8001aac <SBUS_getData+0x25c>)
 80019c4:	7bdb      	ldrb	r3, [r3, #15]
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	b21b      	sxth	r3, r3
 80019ca:	4313      	orrs	r3, r2
 80019cc:	b21a      	sxth	r2, r3
 80019ce:	4b37      	ldr	r3, [pc, #220]	@ (8001aac <SBUS_getData+0x25c>)
 80019d0:	7c1b      	ldrb	r3, [r3, #16]
 80019d2:	029b      	lsls	r3, r3, #10
 80019d4:	b21b      	sxth	r3, r3
 80019d6:	4313      	orrs	r3, r2
 80019d8:	b21b      	sxth	r3, r3
 80019da:	b29b      	uxth	r3, r3
 80019dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	4b33      	ldr	r3, [pc, #204]	@ (8001ab0 <SBUS_getData+0x260>)
 80019e4:	829a      	strh	r2, [r3, #20]
	Radio_input.Canal_12 = ((SBUS_UART_Rx[16] >> 1 | SBUS_UART_Rx[17] << 7) & 0x07FF);
 80019e6:	4b31      	ldr	r3, [pc, #196]	@ (8001aac <SBUS_getData+0x25c>)
 80019e8:	7c1b      	ldrb	r3, [r3, #16]
 80019ea:	085b      	lsrs	r3, r3, #1
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	b21a      	sxth	r2, r3
 80019f0:	4b2e      	ldr	r3, [pc, #184]	@ (8001aac <SBUS_getData+0x25c>)
 80019f2:	7c5b      	ldrb	r3, [r3, #17]
 80019f4:	01db      	lsls	r3, r3, #7
 80019f6:	b21b      	sxth	r3, r3
 80019f8:	4313      	orrs	r3, r2
 80019fa:	b21b      	sxth	r3, r3
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a02:	b29a      	uxth	r2, r3
 8001a04:	4b2a      	ldr	r3, [pc, #168]	@ (8001ab0 <SBUS_getData+0x260>)
 8001a06:	82da      	strh	r2, [r3, #22]
	Radio_input.Canal_13 = ((SBUS_UART_Rx[17] >> 4 | SBUS_UART_Rx[18] << 4) & 0x07FF);
 8001a08:	4b28      	ldr	r3, [pc, #160]	@ (8001aac <SBUS_getData+0x25c>)
 8001a0a:	7c5b      	ldrb	r3, [r3, #17]
 8001a0c:	091b      	lsrs	r3, r3, #4
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	b21a      	sxth	r2, r3
 8001a12:	4b26      	ldr	r3, [pc, #152]	@ (8001aac <SBUS_getData+0x25c>)
 8001a14:	7c9b      	ldrb	r3, [r3, #18]
 8001a16:	011b      	lsls	r3, r3, #4
 8001a18:	b21b      	sxth	r3, r3
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	b21b      	sxth	r3, r3
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a24:	b29a      	uxth	r2, r3
 8001a26:	4b22      	ldr	r3, [pc, #136]	@ (8001ab0 <SBUS_getData+0x260>)
 8001a28:	831a      	strh	r2, [r3, #24]
	Radio_input.Canal_14 = ((SBUS_UART_Rx[18] >> 7 | SBUS_UART_Rx[19] << 1 | SBUS_UART_Rx[20] << 9) & 0x07FF);
 8001a2a:	4b20      	ldr	r3, [pc, #128]	@ (8001aac <SBUS_getData+0x25c>)
 8001a2c:	7c9b      	ldrb	r3, [r3, #18]
 8001a2e:	09db      	lsrs	r3, r3, #7
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	b21a      	sxth	r2, r3
 8001a34:	4b1d      	ldr	r3, [pc, #116]	@ (8001aac <SBUS_getData+0x25c>)
 8001a36:	7cdb      	ldrb	r3, [r3, #19]
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	b21b      	sxth	r3, r3
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	b21a      	sxth	r2, r3
 8001a40:	4b1a      	ldr	r3, [pc, #104]	@ (8001aac <SBUS_getData+0x25c>)
 8001a42:	7d1b      	ldrb	r3, [r3, #20]
 8001a44:	025b      	lsls	r3, r3, #9
 8001a46:	b21b      	sxth	r3, r3
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	b21b      	sxth	r3, r3
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a52:	b29a      	uxth	r2, r3
 8001a54:	4b16      	ldr	r3, [pc, #88]	@ (8001ab0 <SBUS_getData+0x260>)
 8001a56:	835a      	strh	r2, [r3, #26]
	Radio_input.Canal_15 = ((SBUS_UART_Rx[20] >> 2 | SBUS_UART_Rx[21] << 6) & 0x07FF);
 8001a58:	4b14      	ldr	r3, [pc, #80]	@ (8001aac <SBUS_getData+0x25c>)
 8001a5a:	7d1b      	ldrb	r3, [r3, #20]
 8001a5c:	089b      	lsrs	r3, r3, #2
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	b21a      	sxth	r2, r3
 8001a62:	4b12      	ldr	r3, [pc, #72]	@ (8001aac <SBUS_getData+0x25c>)
 8001a64:	7d5b      	ldrb	r3, [r3, #21]
 8001a66:	019b      	lsls	r3, r3, #6
 8001a68:	b21b      	sxth	r3, r3
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	b21b      	sxth	r3, r3
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a74:	b29a      	uxth	r2, r3
 8001a76:	4b0e      	ldr	r3, [pc, #56]	@ (8001ab0 <SBUS_getData+0x260>)
 8001a78:	839a      	strh	r2, [r3, #28]
	Radio_input.Canal_16 = ((SBUS_UART_Rx[21] >> 5 | SBUS_UART_Rx[22] << 3) & 0x07FF);
 8001a7a:	4b0c      	ldr	r3, [pc, #48]	@ (8001aac <SBUS_getData+0x25c>)
 8001a7c:	7d5b      	ldrb	r3, [r3, #21]
 8001a7e:	095b      	lsrs	r3, r3, #5
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	b21a      	sxth	r2, r3
 8001a84:	4b09      	ldr	r3, [pc, #36]	@ (8001aac <SBUS_getData+0x25c>)
 8001a86:	7d9b      	ldrb	r3, [r3, #22]
 8001a88:	00db      	lsls	r3, r3, #3
 8001a8a:	b21b      	sxth	r3, r3
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	b21b      	sxth	r3, r3
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a96:	b29a      	uxth	r2, r3
 8001a98:	4b05      	ldr	r3, [pc, #20]	@ (8001ab0 <SBUS_getData+0x260>)
 8001a9a:	83da      	strh	r2, [r3, #30]

	Radio_input.Canal_1 = (uint16_t)((((float)Radio_input.Canal_1 - 352) /1344 ) * 1000) + 1000;
 8001a9c:	4b04      	ldr	r3, [pc, #16]	@ (8001ab0 <SBUS_getData+0x260>)
 8001a9e:	881b      	ldrh	r3, [r3, #0]
 8001aa0:	ee07 3a90 	vmov	s15, r3
 8001aa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001aa8:	e00a      	b.n	8001ac0 <SBUS_getData+0x270>
 8001aaa:	bf00      	nop
 8001aac:	2400027c 	.word	0x2400027c
 8001ab0:	24000064 	.word	0x24000064
 8001ab4:	43b00000 	.word	0x43b00000
 8001ab8:	44a80000 	.word	0x44a80000
 8001abc:	447a0000 	.word	0x447a0000
 8001ac0:	ed1f 7a04 	vldr	s14, [pc, #-16]	@ 8001ab4 <SBUS_getData+0x264>
 8001ac4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001ac8:	ed5f 6a05 	vldr	s13, [pc, #-20]	@ 8001ab8 <SBUS_getData+0x268>
 8001acc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ad0:	ed1f 7a06 	vldr	s14, [pc, #-24]	@ 8001abc <SBUS_getData+0x26c>
 8001ad4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ad8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001adc:	ee17 3a90 	vmov	r3, s15
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001ae6:	b29a      	uxth	r2, r3
 8001ae8:	4bd1      	ldr	r3, [pc, #836]	@ (8001e30 <SBUS_getData+0x5e0>)
 8001aea:	801a      	strh	r2, [r3, #0]
	Radio_input.Canal_2 = (uint16_t)((((float)Radio_input.Canal_2 - 352) /1344 ) * 1000) + 1000;
 8001aec:	4bd0      	ldr	r3, [pc, #832]	@ (8001e30 <SBUS_getData+0x5e0>)
 8001aee:	885b      	ldrh	r3, [r3, #2]
 8001af0:	ee07 3a90 	vmov	s15, r3
 8001af4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001af8:	ed9f 7ace 	vldr	s14, [pc, #824]	@ 8001e34 <SBUS_getData+0x5e4>
 8001afc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001b00:	eddf 6acd 	vldr	s13, [pc, #820]	@ 8001e38 <SBUS_getData+0x5e8>
 8001b04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b08:	ed9f 7acc 	vldr	s14, [pc, #816]	@ 8001e3c <SBUS_getData+0x5ec>
 8001b0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b14:	ee17 3a90 	vmov	r3, s15
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	4bc3      	ldr	r3, [pc, #780]	@ (8001e30 <SBUS_getData+0x5e0>)
 8001b22:	805a      	strh	r2, [r3, #2]
	Radio_input.Canal_3 = (uint16_t)((((float)Radio_input.Canal_3 - 352) /1344 ) * 1000) + 1000;
 8001b24:	4bc2      	ldr	r3, [pc, #776]	@ (8001e30 <SBUS_getData+0x5e0>)
 8001b26:	889b      	ldrh	r3, [r3, #4]
 8001b28:	ee07 3a90 	vmov	s15, r3
 8001b2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b30:	ed9f 7ac0 	vldr	s14, [pc, #768]	@ 8001e34 <SBUS_getData+0x5e4>
 8001b34:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001b38:	eddf 6abf 	vldr	s13, [pc, #764]	@ 8001e38 <SBUS_getData+0x5e8>
 8001b3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b40:	ed9f 7abe 	vldr	s14, [pc, #760]	@ 8001e3c <SBUS_getData+0x5ec>
 8001b44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b4c:	ee17 3a90 	vmov	r3, s15
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	4bb5      	ldr	r3, [pc, #724]	@ (8001e30 <SBUS_getData+0x5e0>)
 8001b5a:	809a      	strh	r2, [r3, #4]
	Radio_input.Canal_4 = (uint16_t)((((float)Radio_input.Canal_4 - 352) /1344 ) * 1000) + 1000;
 8001b5c:	4bb4      	ldr	r3, [pc, #720]	@ (8001e30 <SBUS_getData+0x5e0>)
 8001b5e:	88db      	ldrh	r3, [r3, #6]
 8001b60:	ee07 3a90 	vmov	s15, r3
 8001b64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b68:	ed9f 7ab2 	vldr	s14, [pc, #712]	@ 8001e34 <SBUS_getData+0x5e4>
 8001b6c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001b70:	eddf 6ab1 	vldr	s13, [pc, #708]	@ 8001e38 <SBUS_getData+0x5e8>
 8001b74:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b78:	ed9f 7ab0 	vldr	s14, [pc, #704]	@ 8001e3c <SBUS_getData+0x5ec>
 8001b7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b84:	ee17 3a90 	vmov	r3, s15
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001b8e:	b29a      	uxth	r2, r3
 8001b90:	4ba7      	ldr	r3, [pc, #668]	@ (8001e30 <SBUS_getData+0x5e0>)
 8001b92:	80da      	strh	r2, [r3, #6]
	Radio_input.Canal_5 = (uint16_t)((((float)Radio_input.Canal_5 - 352) /1344 ) * 1000) + 1000;
 8001b94:	4ba6      	ldr	r3, [pc, #664]	@ (8001e30 <SBUS_getData+0x5e0>)
 8001b96:	891b      	ldrh	r3, [r3, #8]
 8001b98:	ee07 3a90 	vmov	s15, r3
 8001b9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ba0:	ed9f 7aa4 	vldr	s14, [pc, #656]	@ 8001e34 <SBUS_getData+0x5e4>
 8001ba4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001ba8:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 8001e38 <SBUS_getData+0x5e8>
 8001bac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bb0:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 8001e3c <SBUS_getData+0x5ec>
 8001bb4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bbc:	ee17 3a90 	vmov	r3, s15
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001bc6:	b29a      	uxth	r2, r3
 8001bc8:	4b99      	ldr	r3, [pc, #612]	@ (8001e30 <SBUS_getData+0x5e0>)
 8001bca:	811a      	strh	r2, [r3, #8]
	Radio_input.Canal_6 = (uint16_t)((((float)Radio_input.Canal_6 - 352) /1344 ) * 1000) + 1000;
 8001bcc:	4b98      	ldr	r3, [pc, #608]	@ (8001e30 <SBUS_getData+0x5e0>)
 8001bce:	895b      	ldrh	r3, [r3, #10]
 8001bd0:	ee07 3a90 	vmov	s15, r3
 8001bd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bd8:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 8001e34 <SBUS_getData+0x5e4>
 8001bdc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001be0:	eddf 6a95 	vldr	s13, [pc, #596]	@ 8001e38 <SBUS_getData+0x5e8>
 8001be4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001be8:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 8001e3c <SBUS_getData+0x5ec>
 8001bec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bf4:	ee17 3a90 	vmov	r3, s15
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001bfe:	b29a      	uxth	r2, r3
 8001c00:	4b8b      	ldr	r3, [pc, #556]	@ (8001e30 <SBUS_getData+0x5e0>)
 8001c02:	815a      	strh	r2, [r3, #10]
	Radio_input.Canal_7 = (uint16_t)((((float)Radio_input.Canal_7 - 352) /1344 ) * 1000) + 1000;
 8001c04:	4b8a      	ldr	r3, [pc, #552]	@ (8001e30 <SBUS_getData+0x5e0>)
 8001c06:	899b      	ldrh	r3, [r3, #12]
 8001c08:	ee07 3a90 	vmov	s15, r3
 8001c0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c10:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 8001e34 <SBUS_getData+0x5e4>
 8001c14:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001c18:	eddf 6a87 	vldr	s13, [pc, #540]	@ 8001e38 <SBUS_getData+0x5e8>
 8001c1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c20:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8001e3c <SBUS_getData+0x5ec>
 8001c24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c2c:	ee17 3a90 	vmov	r3, s15
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001c36:	b29a      	uxth	r2, r3
 8001c38:	4b7d      	ldr	r3, [pc, #500]	@ (8001e30 <SBUS_getData+0x5e0>)
 8001c3a:	819a      	strh	r2, [r3, #12]
	Radio_input.Canal_8 = (uint16_t)((((float)Radio_input.Canal_8 - 352) /1344 ) * 1000) + 1000;
 8001c3c:	4b7c      	ldr	r3, [pc, #496]	@ (8001e30 <SBUS_getData+0x5e0>)
 8001c3e:	89db      	ldrh	r3, [r3, #14]
 8001c40:	ee07 3a90 	vmov	s15, r3
 8001c44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c48:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8001e34 <SBUS_getData+0x5e4>
 8001c4c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001c50:	eddf 6a79 	vldr	s13, [pc, #484]	@ 8001e38 <SBUS_getData+0x5e8>
 8001c54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c58:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 8001e3c <SBUS_getData+0x5ec>
 8001c5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c64:	ee17 3a90 	vmov	r3, s15
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001c6e:	b29a      	uxth	r2, r3
 8001c70:	4b6f      	ldr	r3, [pc, #444]	@ (8001e30 <SBUS_getData+0x5e0>)
 8001c72:	81da      	strh	r2, [r3, #14]
	Radio_input.Canal_9 = (uint16_t)((((float)Radio_input.Canal_9 - 352) /1344 ) * 1000) + 1000;
 8001c74:	4b6e      	ldr	r3, [pc, #440]	@ (8001e30 <SBUS_getData+0x5e0>)
 8001c76:	8a1b      	ldrh	r3, [r3, #16]
 8001c78:	ee07 3a90 	vmov	s15, r3
 8001c7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c80:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8001e34 <SBUS_getData+0x5e4>
 8001c84:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001c88:	eddf 6a6b 	vldr	s13, [pc, #428]	@ 8001e38 <SBUS_getData+0x5e8>
 8001c8c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c90:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 8001e3c <SBUS_getData+0x5ec>
 8001c94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c9c:	ee17 3a90 	vmov	r3, s15
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001ca6:	b29a      	uxth	r2, r3
 8001ca8:	4b61      	ldr	r3, [pc, #388]	@ (8001e30 <SBUS_getData+0x5e0>)
 8001caa:	821a      	strh	r2, [r3, #16]
	Radio_input.Canal_10 = (uint16_t)((((float)Radio_input.Canal_10 - 352) /1344 ) * 1000) + 1000;
 8001cac:	4b60      	ldr	r3, [pc, #384]	@ (8001e30 <SBUS_getData+0x5e0>)
 8001cae:	8a5b      	ldrh	r3, [r3, #18]
 8001cb0:	ee07 3a90 	vmov	s15, r3
 8001cb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cb8:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8001e34 <SBUS_getData+0x5e4>
 8001cbc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001cc0:	eddf 6a5d 	vldr	s13, [pc, #372]	@ 8001e38 <SBUS_getData+0x5e8>
 8001cc4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cc8:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8001e3c <SBUS_getData+0x5ec>
 8001ccc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cd4:	ee17 3a90 	vmov	r3, s15
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	4b53      	ldr	r3, [pc, #332]	@ (8001e30 <SBUS_getData+0x5e0>)
 8001ce2:	825a      	strh	r2, [r3, #18]
	Radio_input.Canal_11 = (uint16_t)((((float)Radio_input.Canal_11 - 352) /1344 ) * 1000) + 1000;
 8001ce4:	4b52      	ldr	r3, [pc, #328]	@ (8001e30 <SBUS_getData+0x5e0>)
 8001ce6:	8a9b      	ldrh	r3, [r3, #20]
 8001ce8:	ee07 3a90 	vmov	s15, r3
 8001cec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cf0:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8001e34 <SBUS_getData+0x5e4>
 8001cf4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001cf8:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8001e38 <SBUS_getData+0x5e8>
 8001cfc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d00:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8001e3c <SBUS_getData+0x5ec>
 8001d04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d0c:	ee17 3a90 	vmov	r3, s15
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001d16:	b29a      	uxth	r2, r3
 8001d18:	4b45      	ldr	r3, [pc, #276]	@ (8001e30 <SBUS_getData+0x5e0>)
 8001d1a:	829a      	strh	r2, [r3, #20]
	Radio_input.Canal_12 = (uint16_t)((((float)Radio_input.Canal_12 - 352) /1344 ) * 1000) + 1000;
 8001d1c:	4b44      	ldr	r3, [pc, #272]	@ (8001e30 <SBUS_getData+0x5e0>)
 8001d1e:	8adb      	ldrh	r3, [r3, #22]
 8001d20:	ee07 3a90 	vmov	s15, r3
 8001d24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d28:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8001e34 <SBUS_getData+0x5e4>
 8001d2c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001d30:	eddf 6a41 	vldr	s13, [pc, #260]	@ 8001e38 <SBUS_getData+0x5e8>
 8001d34:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d38:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8001e3c <SBUS_getData+0x5ec>
 8001d3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d44:	ee17 3a90 	vmov	r3, s15
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001d4e:	b29a      	uxth	r2, r3
 8001d50:	4b37      	ldr	r3, [pc, #220]	@ (8001e30 <SBUS_getData+0x5e0>)
 8001d52:	82da      	strh	r2, [r3, #22]
	Radio_input.Canal_13 = (uint16_t)((((float)Radio_input.Canal_13 - 352) /1344 ) * 1000) + 1000;
 8001d54:	4b36      	ldr	r3, [pc, #216]	@ (8001e30 <SBUS_getData+0x5e0>)
 8001d56:	8b1b      	ldrh	r3, [r3, #24]
 8001d58:	ee07 3a90 	vmov	s15, r3
 8001d5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d60:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8001e34 <SBUS_getData+0x5e4>
 8001d64:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001d68:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8001e38 <SBUS_getData+0x5e8>
 8001d6c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d70:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8001e3c <SBUS_getData+0x5ec>
 8001d74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d7c:	ee17 3a90 	vmov	r3, s15
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	4b29      	ldr	r3, [pc, #164]	@ (8001e30 <SBUS_getData+0x5e0>)
 8001d8a:	831a      	strh	r2, [r3, #24]
	Radio_input.Canal_14 = (uint16_t)((((float)Radio_input.Canal_14 - 352) /1344 ) * 1000) + 1000;
 8001d8c:	4b28      	ldr	r3, [pc, #160]	@ (8001e30 <SBUS_getData+0x5e0>)
 8001d8e:	8b5b      	ldrh	r3, [r3, #26]
 8001d90:	ee07 3a90 	vmov	s15, r3
 8001d94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d98:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001e34 <SBUS_getData+0x5e4>
 8001d9c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001da0:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8001e38 <SBUS_getData+0x5e8>
 8001da4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001da8:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8001e3c <SBUS_getData+0x5ec>
 8001dac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001db0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001db4:	ee17 3a90 	vmov	r3, s15
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	4b1b      	ldr	r3, [pc, #108]	@ (8001e30 <SBUS_getData+0x5e0>)
 8001dc2:	835a      	strh	r2, [r3, #26]
	Radio_input.Canal_15 = (uint16_t)((((float)Radio_input.Canal_15 - 352) /1344 ) * 1000) + 1000;
 8001dc4:	4b1a      	ldr	r3, [pc, #104]	@ (8001e30 <SBUS_getData+0x5e0>)
 8001dc6:	8b9b      	ldrh	r3, [r3, #28]
 8001dc8:	ee07 3a90 	vmov	s15, r3
 8001dcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dd0:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8001e34 <SBUS_getData+0x5e4>
 8001dd4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001dd8:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8001e38 <SBUS_getData+0x5e8>
 8001ddc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001de0:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8001e3c <SBUS_getData+0x5ec>
 8001de4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001de8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001dec:	ee17 3a90 	vmov	r3, s15
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001df6:	b29a      	uxth	r2, r3
 8001df8:	4b0d      	ldr	r3, [pc, #52]	@ (8001e30 <SBUS_getData+0x5e0>)
 8001dfa:	839a      	strh	r2, [r3, #28]
	Radio_input.Canal_16 = (uint16_t)((((float)Radio_input.Canal_16 - 352) /1344 ) * 1000) + 1000;
 8001dfc:	4b0c      	ldr	r3, [pc, #48]	@ (8001e30 <SBUS_getData+0x5e0>)
 8001dfe:	8bdb      	ldrh	r3, [r3, #30]
 8001e00:	ee07 3a90 	vmov	s15, r3
 8001e04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e08:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8001e34 <SBUS_getData+0x5e4>
 8001e0c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001e10:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8001e38 <SBUS_getData+0x5e8>
 8001e14:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e18:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8001e3c <SBUS_getData+0x5ec>
 8001e1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e24:	ee17 3a90 	vmov	r3, s15
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001e2e:	e007      	b.n	8001e40 <SBUS_getData+0x5f0>
 8001e30:	24000064 	.word	0x24000064
 8001e34:	43b00000 	.word	0x43b00000
 8001e38:	44a80000 	.word	0x44a80000
 8001e3c:	447a0000 	.word	0x447a0000
 8001e40:	b29a      	uxth	r2, r3
 8001e42:	4b28      	ldr	r3, [pc, #160]	@ (8001ee4 <SBUS_getData+0x694>)
 8001e44:	83da      	strh	r2, [r3, #30]

	//En el caso del byte 24, el primer bit menos significativo corresponde al canal 17, el segundo al canal 18, el tercero a el fail safe y
	//el cuarto a la perdida de paquetes. Los 4 restantes no se utilizan.
	if(SBUS_UART_Rx[23]>=8){
 8001e46:	4b28      	ldr	r3, [pc, #160]	@ (8001ee8 <SBUS_getData+0x698>)
 8001e48:	7ddb      	ldrb	r3, [r3, #23]
 8001e4a:	2b07      	cmp	r3, #7
 8001e4c:	d90a      	bls.n	8001e64 <SBUS_getData+0x614>
		SBUS_UART_Rx[23]-=8;
 8001e4e:	4b26      	ldr	r3, [pc, #152]	@ (8001ee8 <SBUS_getData+0x698>)
 8001e50:	7ddb      	ldrb	r3, [r3, #23]
 8001e52:	3b08      	subs	r3, #8
 8001e54:	b2da      	uxtb	r2, r3
 8001e56:	4b24      	ldr	r3, [pc, #144]	@ (8001ee8 <SBUS_getData+0x698>)
 8001e58:	75da      	strb	r2, [r3, #23]
		Radio_input.fail_safe = FailSafe;
 8001e5a:	4b22      	ldr	r3, [pc, #136]	@ (8001ee4 <SBUS_getData+0x694>)
 8001e5c:	2235      	movs	r2, #53	@ 0x35
 8001e5e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
 8001e62:	e003      	b.n	8001e6c <SBUS_getData+0x61c>
	}else Radio_input.fail_safe= Ok;
 8001e64:	4b1f      	ldr	r3, [pc, #124]	@ (8001ee4 <SBUS_getData+0x694>)
 8001e66:	22aa      	movs	r2, #170	@ 0xaa
 8001e68:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

	if(SBUS_UART_Rx[23]>=4){
 8001e6c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ee8 <SBUS_getData+0x698>)
 8001e6e:	7ddb      	ldrb	r3, [r3, #23]
 8001e70:	2b03      	cmp	r3, #3
 8001e72:	d90a      	bls.n	8001e8a <SBUS_getData+0x63a>
		SBUS_UART_Rx[23]-=4;
 8001e74:	4b1c      	ldr	r3, [pc, #112]	@ (8001ee8 <SBUS_getData+0x698>)
 8001e76:	7ddb      	ldrb	r3, [r3, #23]
 8001e78:	3b04      	subs	r3, #4
 8001e7a:	b2da      	uxtb	r2, r3
 8001e7c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ee8 <SBUS_getData+0x698>)
 8001e7e:	75da      	strb	r2, [r3, #23]
		Radio_input.pkg_lost = Pkg_Lost;
 8001e80:	4b18      	ldr	r3, [pc, #96]	@ (8001ee4 <SBUS_getData+0x694>)
 8001e82:	2210      	movs	r2, #16
 8001e84:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8001e88:	e003      	b.n	8001e92 <SBUS_getData+0x642>
	}else Radio_input.pkg_lost=Ok;
 8001e8a:	4b16      	ldr	r3, [pc, #88]	@ (8001ee4 <SBUS_getData+0x694>)
 8001e8c:	22aa      	movs	r2, #170	@ 0xaa
 8001e8e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

	if(SBUS_UART_Rx[23]>=2){
 8001e92:	4b15      	ldr	r3, [pc, #84]	@ (8001ee8 <SBUS_getData+0x698>)
 8001e94:	7ddb      	ldrb	r3, [r3, #23]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d90a      	bls.n	8001eb0 <SBUS_getData+0x660>
		SBUS_UART_Rx[23]-=2;
 8001e9a:	4b13      	ldr	r3, [pc, #76]	@ (8001ee8 <SBUS_getData+0x698>)
 8001e9c:	7ddb      	ldrb	r3, [r3, #23]
 8001e9e:	3b02      	subs	r3, #2
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	4b11      	ldr	r3, [pc, #68]	@ (8001ee8 <SBUS_getData+0x698>)
 8001ea4:	75da      	strb	r2, [r3, #23]
		Radio_input.Interruptor_2=ON;
 8001ea6:	4b0f      	ldr	r3, [pc, #60]	@ (8001ee4 <SBUS_getData+0x694>)
 8001ea8:	22ff      	movs	r2, #255	@ 0xff
 8001eaa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 8001eae:	e003      	b.n	8001eb8 <SBUS_getData+0x668>
	}else Radio_input.Interruptor_2=OFF;
 8001eb0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ee4 <SBUS_getData+0x694>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	if(SBUS_UART_Rx[23]){
 8001eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ee8 <SBUS_getData+0x698>)
 8001eba:	7ddb      	ldrb	r3, [r3, #23]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d004      	beq.n	8001eca <SBUS_getData+0x67a>
		Radio_input.Interruptor_1=ON;
 8001ec0:	4b08      	ldr	r3, [pc, #32]	@ (8001ee4 <SBUS_getData+0x694>)
 8001ec2:	22ff      	movs	r2, #255	@ 0xff
 8001ec4:	f883 2020 	strb.w	r2, [r3, #32]
 8001ec8:	e003      	b.n	8001ed2 <SBUS_getData+0x682>
	}else Radio_input.Interruptor_1=OFF;
 8001eca:	4b06      	ldr	r3, [pc, #24]	@ (8001ee4 <SBUS_getData+0x694>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f883 2020 	strb.w	r2, [r3, #32]


	Radio_input.Uart_Counter = 0;
 8001ed2:	4b04      	ldr	r3, [pc, #16]	@ (8001ee4 <SBUS_getData+0x694>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	Temp_BypassFunct();
 8001eda:	f7ff fc87 	bl	80017ec <Temp_BypassFunct>

}
 8001ede:	bf00      	nop
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	24000064 	.word	0x24000064
 8001ee8:	2400027c 	.word	0x2400027c

08001eec <SBUS_IntegrityVerification>:

void SBUS_IntegrityVerification(void){
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0

	if(Radio_input.Uart_Counter != 255){
 8001ef0:	4b0f      	ldr	r3, [pc, #60]	@ (8001f30 <SBUS_IntegrityVerification+0x44>)
 8001ef2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001ef6:	2bff      	cmp	r3, #255	@ 0xff
 8001ef8:	d00c      	beq.n	8001f14 <SBUS_IntegrityVerification+0x28>
		Radio_input.Uart_Counter++;
 8001efa:	4b0d      	ldr	r3, [pc, #52]	@ (8001f30 <SBUS_IntegrityVerification+0x44>)
 8001efc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001f00:	3301      	adds	r3, #1
 8001f02:	b2da      	uxtb	r2, r3
 8001f04:	4b0a      	ldr	r3, [pc, #40]	@ (8001f30 <SBUS_IntegrityVerification+0x44>)
 8001f06:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
		Radio_input.uart_error = Ok;
 8001f0a:	4b09      	ldr	r3, [pc, #36]	@ (8001f30 <SBUS_IntegrityVerification+0x44>)
 8001f0c:	22aa      	movs	r2, #170	@ 0xaa
 8001f0e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	}
	else{
		Radio_input.uart_error = Uart_Error;
		Radio_input.fail_safe = FailSafe;
	}
}
 8001f12:	e007      	b.n	8001f24 <SBUS_IntegrityVerification+0x38>
		Radio_input.uart_error = Uart_Error;
 8001f14:	4b06      	ldr	r3, [pc, #24]	@ (8001f30 <SBUS_IntegrityVerification+0x44>)
 8001f16:	2220      	movs	r2, #32
 8001f18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		Radio_input.fail_safe = FailSafe;
 8001f1c:	4b04      	ldr	r3, [pc, #16]	@ (8001f30 <SBUS_IntegrityVerification+0x44>)
 8001f1e:	2235      	movs	r2, #53	@ 0x35
 8001f20:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
}
 8001f24:	bf00      	nop
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	24000064 	.word	0x24000064

08001f34 <SD_init>:
UINT br, bw;  // File read/write count

char pahtName[7] = "Data000";
char fileName[] = "FD000.csv";

void SD_init(void){
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
	  fresult = f_mount(&fs, "/", 1);
 8001f38:	2201      	movs	r2, #1
 8001f3a:	4910      	ldr	r1, [pc, #64]	@ (8001f7c <SD_init+0x48>)
 8001f3c:	4810      	ldr	r0, [pc, #64]	@ (8001f80 <SD_init+0x4c>)
 8001f3e:	f00f fc97 	bl	8011870 <f_mount>
 8001f42:	4603      	mov	r3, r0
 8001f44:	461a      	mov	r2, r3
 8001f46:	4b0f      	ldr	r3, [pc, #60]	@ (8001f84 <SD_init+0x50>)
 8001f48:	701a      	strb	r2, [r3, #0]
	  //Get_NewDir();
	  f_open(&fil, fileName, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001f4a:	2213      	movs	r2, #19
 8001f4c:	490e      	ldr	r1, [pc, #56]	@ (8001f88 <SD_init+0x54>)
 8001f4e:	480f      	ldr	r0, [pc, #60]	@ (8001f8c <SD_init+0x58>)
 8001f50:	f00f fcd4 	bl	80118fc <f_open>
	  fresult = f_lseek(&fil , f_size(&fil));
 8001f54:	4b0d      	ldr	r3, [pc, #52]	@ (8001f8c <SD_init+0x58>)
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	4619      	mov	r1, r3
 8001f5a:	480c      	ldr	r0, [pc, #48]	@ (8001f8c <SD_init+0x58>)
 8001f5c:	f010 f8d2 	bl	8012104 <f_lseek>
 8001f60:	4603      	mov	r3, r0
 8001f62:	461a      	mov	r2, r3
 8001f64:	4b07      	ldr	r3, [pc, #28]	@ (8001f84 <SD_init+0x50>)
 8001f66:	701a      	strb	r2, [r3, #0]
	  f_printf(&fil,"Nmsg,AccX,AccY,AccZ,GyroX,GyroY,GyroZ,Pitch,Roll,Yaw,Alt,Pressure,Temp\n");
 8001f68:	4909      	ldr	r1, [pc, #36]	@ (8001f90 <SD_init+0x5c>)
 8001f6a:	4808      	ldr	r0, [pc, #32]	@ (8001f8c <SD_init+0x58>)
 8001f6c:	f010 fb66 	bl	801263c <f_printf>
	  f_close(&fil);
 8001f70:	4806      	ldr	r0, [pc, #24]	@ (8001f8c <SD_init+0x58>)
 8001f72:	f010 f89d 	bl	80120b0 <f_close>

	  }
	  else{
		  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, SET);
	  }
}
 8001f76:	bf00      	nop
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	08012fb0 	.word	0x08012fb0
 8001f80:	24000298 	.word	0x24000298
 8001f84:	24002304 	.word	0x24002304
 8001f88:	2400008c 	.word	0x2400008c
 8001f8c:	240012d4 	.word	0x240012d4
 8001f90:	08012fb4 	.word	0x08012fb4

08001f94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f9a:	4b11      	ldr	r3, [pc, #68]	@ (8001fe0 <MX_DMA_Init+0x4c>)
 8001f9c:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8001fa0:	4a0f      	ldr	r2, [pc, #60]	@ (8001fe0 <MX_DMA_Init+0x4c>)
 8001fa2:	f043 0301 	orr.w	r3, r3, #1
 8001fa6:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8001faa:	4b0d      	ldr	r3, [pc, #52]	@ (8001fe0 <MX_DMA_Init+0x4c>)
 8001fac:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8001fb0:	f003 0301 	and.w	r3, r3, #1
 8001fb4:	607b      	str	r3, [r7, #4]
 8001fb6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001fb8:	2200      	movs	r2, #0
 8001fba:	2100      	movs	r1, #0
 8001fbc:	200b      	movs	r0, #11
 8001fbe:	f001 fdd0 	bl	8003b62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001fc2:	200b      	movs	r0, #11
 8001fc4:	f001 fde7 	bl	8003b96 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001fc8:	2200      	movs	r2, #0
 8001fca:	2100      	movs	r1, #0
 8001fcc:	200c      	movs	r0, #12
 8001fce:	f001 fdc8 	bl	8003b62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001fd2:	200c      	movs	r0, #12
 8001fd4:	f001 fddf 	bl	8003b96 <HAL_NVIC_EnableIRQ>

}
 8001fd8:	bf00      	nop
 8001fda:	3708      	adds	r7, #8
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	58024400 	.word	0x58024400

08001fe4 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001fe8:	4b2e      	ldr	r3, [pc, #184]	@ (80020a4 <MX_FDCAN1_Init+0xc0>)
 8001fea:	4a2f      	ldr	r2, [pc, #188]	@ (80020a8 <MX_FDCAN1_Init+0xc4>)
 8001fec:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001fee:	4b2d      	ldr	r3, [pc, #180]	@ (80020a4 <MX_FDCAN1_Init+0xc0>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001ff4:	4b2b      	ldr	r3, [pc, #172]	@ (80020a4 <MX_FDCAN1_Init+0xc0>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001ffa:	4b2a      	ldr	r3, [pc, #168]	@ (80020a4 <MX_FDCAN1_Init+0xc0>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8002000:	4b28      	ldr	r3, [pc, #160]	@ (80020a4 <MX_FDCAN1_Init+0xc0>)
 8002002:	2200      	movs	r2, #0
 8002004:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8002006:	4b27      	ldr	r3, [pc, #156]	@ (80020a4 <MX_FDCAN1_Init+0xc0>)
 8002008:	2200      	movs	r2, #0
 800200a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 800200c:	4b25      	ldr	r3, [pc, #148]	@ (80020a4 <MX_FDCAN1_Init+0xc0>)
 800200e:	2210      	movs	r2, #16
 8002010:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8002012:	4b24      	ldr	r3, [pc, #144]	@ (80020a4 <MX_FDCAN1_Init+0xc0>)
 8002014:	2201      	movs	r2, #1
 8002016:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8002018:	4b22      	ldr	r3, [pc, #136]	@ (80020a4 <MX_FDCAN1_Init+0xc0>)
 800201a:	2202      	movs	r2, #2
 800201c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800201e:	4b21      	ldr	r3, [pc, #132]	@ (80020a4 <MX_FDCAN1_Init+0xc0>)
 8002020:	2202      	movs	r2, #2
 8002022:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8002024:	4b1f      	ldr	r3, [pc, #124]	@ (80020a4 <MX_FDCAN1_Init+0xc0>)
 8002026:	2201      	movs	r2, #1
 8002028:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800202a:	4b1e      	ldr	r3, [pc, #120]	@ (80020a4 <MX_FDCAN1_Init+0xc0>)
 800202c:	2201      	movs	r2, #1
 800202e:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8002030:	4b1c      	ldr	r3, [pc, #112]	@ (80020a4 <MX_FDCAN1_Init+0xc0>)
 8002032:	2201      	movs	r2, #1
 8002034:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8002036:	4b1b      	ldr	r3, [pc, #108]	@ (80020a4 <MX_FDCAN1_Init+0xc0>)
 8002038:	2201      	movs	r2, #1
 800203a:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 800203c:	4b19      	ldr	r3, [pc, #100]	@ (80020a4 <MX_FDCAN1_Init+0xc0>)
 800203e:	2200      	movs	r2, #0
 8002040:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8002042:	4b18      	ldr	r3, [pc, #96]	@ (80020a4 <MX_FDCAN1_Init+0xc0>)
 8002044:	2200      	movs	r2, #0
 8002046:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8002048:	4b16      	ldr	r3, [pc, #88]	@ (80020a4 <MX_FDCAN1_Init+0xc0>)
 800204a:	2200      	movs	r2, #0
 800204c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 800204e:	4b15      	ldr	r3, [pc, #84]	@ (80020a4 <MX_FDCAN1_Init+0xc0>)
 8002050:	2200      	movs	r2, #0
 8002052:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8002054:	4b13      	ldr	r3, [pc, #76]	@ (80020a4 <MX_FDCAN1_Init+0xc0>)
 8002056:	2204      	movs	r2, #4
 8002058:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 800205a:	4b12      	ldr	r3, [pc, #72]	@ (80020a4 <MX_FDCAN1_Init+0xc0>)
 800205c:	2200      	movs	r2, #0
 800205e:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8002060:	4b10      	ldr	r3, [pc, #64]	@ (80020a4 <MX_FDCAN1_Init+0xc0>)
 8002062:	2204      	movs	r2, #4
 8002064:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8002066:	4b0f      	ldr	r3, [pc, #60]	@ (80020a4 <MX_FDCAN1_Init+0xc0>)
 8002068:	2200      	movs	r2, #0
 800206a:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800206c:	4b0d      	ldr	r3, [pc, #52]	@ (80020a4 <MX_FDCAN1_Init+0xc0>)
 800206e:	2204      	movs	r2, #4
 8002070:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8002072:	4b0c      	ldr	r3, [pc, #48]	@ (80020a4 <MX_FDCAN1_Init+0xc0>)
 8002074:	2200      	movs	r2, #0
 8002076:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8002078:	4b0a      	ldr	r3, [pc, #40]	@ (80020a4 <MX_FDCAN1_Init+0xc0>)
 800207a:	2200      	movs	r2, #0
 800207c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 800207e:	4b09      	ldr	r3, [pc, #36]	@ (80020a4 <MX_FDCAN1_Init+0xc0>)
 8002080:	2200      	movs	r2, #0
 8002082:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002084:	4b07      	ldr	r3, [pc, #28]	@ (80020a4 <MX_FDCAN1_Init+0xc0>)
 8002086:	2200      	movs	r2, #0
 8002088:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800208a:	4b06      	ldr	r3, [pc, #24]	@ (80020a4 <MX_FDCAN1_Init+0xc0>)
 800208c:	2204      	movs	r2, #4
 800208e:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8002090:	4804      	ldr	r0, [pc, #16]	@ (80020a4 <MX_FDCAN1_Init+0xc0>)
 8002092:	f004 fcf1 	bl	8006a78 <HAL_FDCAN_Init>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 800209c:	f000 fb36 	bl	800270c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80020a0:	bf00      	nop
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	24002308 	.word	0x24002308
 80020a8:	4000a000 	.word	0x4000a000

080020ac <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b0ba      	sub	sp, #232	@ 0xe8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	605a      	str	r2, [r3, #4]
 80020be:	609a      	str	r2, [r3, #8]
 80020c0:	60da      	str	r2, [r3, #12]
 80020c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020c4:	f107 0310 	add.w	r3, r7, #16
 80020c8:	22c0      	movs	r2, #192	@ 0xc0
 80020ca:	2100      	movs	r1, #0
 80020cc:	4618      	mov	r0, r3
 80020ce:	f010 fdf5 	bl	8012cbc <memset>
  if(fdcanHandle->Instance==FDCAN1)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a2f      	ldr	r2, [pc, #188]	@ (8002194 <HAL_FDCAN_MspInit+0xe8>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d157      	bne.n	800218c <HAL_FDCAN_MspInit+0xe0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80020dc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80020e0:	f04f 0300 	mov.w	r3, #0
 80020e4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 80020e8:	2304      	movs	r3, #4
 80020ea:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 8;
 80020ec:	2308      	movs	r3, #8
 80020ee:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80020f0:	2302      	movs	r3, #2
 80020f2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 1;
 80020f4:	2301      	movs	r3, #1
 80020f6:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80020f8:	2302      	movs	r3, #2
 80020fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80020fc:	23c0      	movs	r3, #192	@ 0xc0
 80020fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8002100:	2300      	movs	r3, #0
 8002102:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8002104:	2300      	movs	r3, #0
 8002106:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 8002108:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800210c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002110:	f107 0310 	add.w	r3, r7, #16
 8002114:	4618      	mov	r0, r3
 8002116:	f006 fb09 	bl	800872c <HAL_RCCEx_PeriphCLKConfig>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <HAL_FDCAN_MspInit+0x78>
    {
      Error_Handler();
 8002120:	f000 faf4 	bl	800270c <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002124:	4b1c      	ldr	r3, [pc, #112]	@ (8002198 <HAL_FDCAN_MspInit+0xec>)
 8002126:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 800212a:	4a1b      	ldr	r2, [pc, #108]	@ (8002198 <HAL_FDCAN_MspInit+0xec>)
 800212c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002130:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
 8002134:	4b18      	ldr	r3, [pc, #96]	@ (8002198 <HAL_FDCAN_MspInit+0xec>)
 8002136:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 800213a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002142:	4b15      	ldr	r3, [pc, #84]	@ (8002198 <HAL_FDCAN_MspInit+0xec>)
 8002144:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002148:	4a13      	ldr	r2, [pc, #76]	@ (8002198 <HAL_FDCAN_MspInit+0xec>)
 800214a:	f043 0301 	orr.w	r3, r3, #1
 800214e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002152:	4b11      	ldr	r3, [pc, #68]	@ (8002198 <HAL_FDCAN_MspInit+0xec>)
 8002154:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002158:	f003 0301 	and.w	r3, r3, #1
 800215c:	60bb      	str	r3, [r7, #8]
 800215e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002160:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002164:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002168:	2302      	movs	r3, #2
 800216a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216e:	2300      	movs	r3, #0
 8002170:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002174:	2300      	movs	r3, #0
 8002176:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800217a:	2309      	movs	r3, #9
 800217c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002180:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002184:	4619      	mov	r1, r3
 8002186:	4805      	ldr	r0, [pc, #20]	@ (800219c <HAL_FDCAN_MspInit+0xf0>)
 8002188:	f004 ffda 	bl	8007140 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 800218c:	bf00      	nop
 800218e:	37e8      	adds	r7, #232	@ 0xe8
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	4000a000 	.word	0x4000a000
 8002198:	58024400 	.word	0x58024400
 800219c:	58020000 	.word	0x58020000

080021a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b08a      	sub	sp, #40	@ 0x28
 80021a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a6:	f107 0314 	add.w	r3, r7, #20
 80021aa:	2200      	movs	r2, #0
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	605a      	str	r2, [r3, #4]
 80021b0:	609a      	str	r2, [r3, #8]
 80021b2:	60da      	str	r2, [r3, #12]
 80021b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021b6:	4b4e      	ldr	r3, [pc, #312]	@ (80022f0 <MX_GPIO_Init+0x150>)
 80021b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80021bc:	4a4c      	ldr	r2, [pc, #304]	@ (80022f0 <MX_GPIO_Init+0x150>)
 80021be:	f043 0304 	orr.w	r3, r3, #4
 80021c2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80021c6:	4b4a      	ldr	r3, [pc, #296]	@ (80022f0 <MX_GPIO_Init+0x150>)
 80021c8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80021cc:	f003 0304 	and.w	r3, r3, #4
 80021d0:	613b      	str	r3, [r7, #16]
 80021d2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021d4:	4b46      	ldr	r3, [pc, #280]	@ (80022f0 <MX_GPIO_Init+0x150>)
 80021d6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80021da:	4a45      	ldr	r2, [pc, #276]	@ (80022f0 <MX_GPIO_Init+0x150>)
 80021dc:	f043 0301 	orr.w	r3, r3, #1
 80021e0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80021e4:	4b42      	ldr	r3, [pc, #264]	@ (80022f0 <MX_GPIO_Init+0x150>)
 80021e6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	60fb      	str	r3, [r7, #12]
 80021f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021f2:	4b3f      	ldr	r3, [pc, #252]	@ (80022f0 <MX_GPIO_Init+0x150>)
 80021f4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80021f8:	4a3d      	ldr	r2, [pc, #244]	@ (80022f0 <MX_GPIO_Init+0x150>)
 80021fa:	f043 0302 	orr.w	r3, r3, #2
 80021fe:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002202:	4b3b      	ldr	r3, [pc, #236]	@ (80022f0 <MX_GPIO_Init+0x150>)
 8002204:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002208:	f003 0302 	and.w	r3, r3, #2
 800220c:	60bb      	str	r3, [r7, #8]
 800220e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002210:	4b37      	ldr	r3, [pc, #220]	@ (80022f0 <MX_GPIO_Init+0x150>)
 8002212:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002216:	4a36      	ldr	r2, [pc, #216]	@ (80022f0 <MX_GPIO_Init+0x150>)
 8002218:	f043 0308 	orr.w	r3, r3, #8
 800221c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002220:	4b33      	ldr	r3, [pc, #204]	@ (80022f0 <MX_GPIO_Init+0x150>)
 8002222:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002226:	f003 0308 	and.w	r3, r3, #8
 800222a:	607b      	str	r3, [r7, #4]
 800222c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 800222e:	2200      	movs	r2, #0
 8002230:	f242 010f 	movw	r1, #8207	@ 0x200f
 8002234:	482f      	ldr	r0, [pc, #188]	@ (80022f4 <MX_GPIO_Init+0x154>)
 8002236:	f005 f933 	bl	80074a0 <HAL_GPIO_WritePin>
                          |LED_5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_NSS_GPIO_Port, SD_NSS_Pin, GPIO_PIN_RESET);
 800223a:	2200      	movs	r2, #0
 800223c:	2110      	movs	r1, #16
 800223e:	482e      	ldr	r0, [pc, #184]	@ (80022f8 <MX_GPIO_Init+0x158>)
 8002240:	f005 f92e 	bl	80074a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IMU_BOOT_Pin|BME_NSS_Pin, GPIO_PIN_RESET);
 8002244:	2200      	movs	r2, #0
 8002246:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 800224a:	482c      	ldr	r0, [pc, #176]	@ (80022fc <MX_GPIO_Init+0x15c>)
 800224c:	f005 f928 	bl	80074a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_RST_GPIO_Port, IMU_RST_Pin, GPIO_PIN_RESET);
 8002250:	2200      	movs	r2, #0
 8002252:	2104      	movs	r1, #4
 8002254:	482a      	ldr	r0, [pc, #168]	@ (8002300 <MX_GPIO_Init+0x160>)
 8002256:	f005 f923 	bl	80074a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 800225a:	f242 030f 	movw	r3, #8207	@ 0x200f
 800225e:	617b      	str	r3, [r7, #20]
                          |LED_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002260:	2301      	movs	r3, #1
 8002262:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002264:	2300      	movs	r3, #0
 8002266:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002268:	2300      	movs	r3, #0
 800226a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800226c:	f107 0314 	add.w	r3, r7, #20
 8002270:	4619      	mov	r1, r3
 8002272:	4820      	ldr	r0, [pc, #128]	@ (80022f4 <MX_GPIO_Init+0x154>)
 8002274:	f004 ff64 	bl	8007140 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_NSS_Pin;
 8002278:	2310      	movs	r3, #16
 800227a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800227c:	2301      	movs	r3, #1
 800227e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002280:	2300      	movs	r3, #0
 8002282:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002284:	2300      	movs	r3, #0
 8002286:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_NSS_GPIO_Port, &GPIO_InitStruct);
 8002288:	f107 0314 	add.w	r3, r7, #20
 800228c:	4619      	mov	r1, r3
 800228e:	481a      	ldr	r0, [pc, #104]	@ (80022f8 <MX_GPIO_Init+0x158>)
 8002290:	f004 ff56 	bl	8007140 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = IMU_BOOT_Pin|BME_NSS_Pin;
 8002294:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002298:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800229a:	2301      	movs	r3, #1
 800229c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229e:	2300      	movs	r3, #0
 80022a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a2:	2300      	movs	r3, #0
 80022a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022a6:	f107 0314 	add.w	r3, r7, #20
 80022aa:	4619      	mov	r1, r3
 80022ac:	4813      	ldr	r0, [pc, #76]	@ (80022fc <MX_GPIO_Init+0x15c>)
 80022ae:	f004 ff47 	bl	8007140 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 80022b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022b8:	2300      	movs	r3, #0
 80022ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022bc:	2300      	movs	r3, #0
 80022be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 80022c0:	f107 0314 	add.w	r3, r7, #20
 80022c4:	4619      	mov	r1, r3
 80022c6:	480b      	ldr	r0, [pc, #44]	@ (80022f4 <MX_GPIO_Init+0x154>)
 80022c8:	f004 ff3a 	bl	8007140 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_RST_Pin;
 80022cc:	2304      	movs	r3, #4
 80022ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022d0:	2301      	movs	r3, #1
 80022d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d4:	2300      	movs	r3, #0
 80022d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d8:	2300      	movs	r3, #0
 80022da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IMU_RST_GPIO_Port, &GPIO_InitStruct);
 80022dc:	f107 0314 	add.w	r3, r7, #20
 80022e0:	4619      	mov	r1, r3
 80022e2:	4807      	ldr	r0, [pc, #28]	@ (8002300 <MX_GPIO_Init+0x160>)
 80022e4:	f004 ff2c 	bl	8007140 <HAL_GPIO_Init>

}
 80022e8:	bf00      	nop
 80022ea:	3728      	adds	r7, #40	@ 0x28
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	58024400 	.word	0x58024400
 80022f4:	58020800 	.word	0x58020800
 80022f8:	58020000 	.word	0x58020000
 80022fc:	58020400 	.word	0x58020400
 8002300:	58020c00 	.word	0x58020c00

08002304 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002308:	4b1b      	ldr	r3, [pc, #108]	@ (8002378 <MX_I2C3_Init+0x74>)
 800230a:	4a1c      	ldr	r2, [pc, #112]	@ (800237c <MX_I2C3_Init+0x78>)
 800230c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20B0CCFF;
 800230e:	4b1a      	ldr	r3, [pc, #104]	@ (8002378 <MX_I2C3_Init+0x74>)
 8002310:	4a1b      	ldr	r2, [pc, #108]	@ (8002380 <MX_I2C3_Init+0x7c>)
 8002312:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8002314:	4b18      	ldr	r3, [pc, #96]	@ (8002378 <MX_I2C3_Init+0x74>)
 8002316:	2200      	movs	r2, #0
 8002318:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800231a:	4b17      	ldr	r3, [pc, #92]	@ (8002378 <MX_I2C3_Init+0x74>)
 800231c:	2201      	movs	r2, #1
 800231e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002320:	4b15      	ldr	r3, [pc, #84]	@ (8002378 <MX_I2C3_Init+0x74>)
 8002322:	2200      	movs	r2, #0
 8002324:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002326:	4b14      	ldr	r3, [pc, #80]	@ (8002378 <MX_I2C3_Init+0x74>)
 8002328:	2200      	movs	r2, #0
 800232a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800232c:	4b12      	ldr	r3, [pc, #72]	@ (8002378 <MX_I2C3_Init+0x74>)
 800232e:	2200      	movs	r2, #0
 8002330:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002332:	4b11      	ldr	r3, [pc, #68]	@ (8002378 <MX_I2C3_Init+0x74>)
 8002334:	2200      	movs	r2, #0
 8002336:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002338:	4b0f      	ldr	r3, [pc, #60]	@ (8002378 <MX_I2C3_Init+0x74>)
 800233a:	2200      	movs	r2, #0
 800233c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800233e:	480e      	ldr	r0, [pc, #56]	@ (8002378 <MX_I2C3_Init+0x74>)
 8002340:	f005 f8c8 	bl	80074d4 <HAL_I2C_Init>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800234a:	f000 f9df 	bl	800270c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800234e:	2100      	movs	r1, #0
 8002350:	4809      	ldr	r0, [pc, #36]	@ (8002378 <MX_I2C3_Init+0x74>)
 8002352:	f005 f95b 	bl	800760c <HAL_I2CEx_ConfigAnalogFilter>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800235c:	f000 f9d6 	bl	800270c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002360:	2100      	movs	r1, #0
 8002362:	4805      	ldr	r0, [pc, #20]	@ (8002378 <MX_I2C3_Init+0x74>)
 8002364:	f005 f99d 	bl	80076a2 <HAL_I2CEx_ConfigDigitalFilter>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800236e:	f000 f9cd 	bl	800270c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002372:	bf00      	nop
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	240023a8 	.word	0x240023a8
 800237c:	40005c00 	.word	0x40005c00
 8002380:	20b0ccff 	.word	0x20b0ccff

08002384 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b0bc      	sub	sp, #240	@ 0xf0
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800238c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	605a      	str	r2, [r3, #4]
 8002396:	609a      	str	r2, [r3, #8]
 8002398:	60da      	str	r2, [r3, #12]
 800239a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800239c:	f107 0318 	add.w	r3, r7, #24
 80023a0:	22c0      	movs	r2, #192	@ 0xc0
 80023a2:	2100      	movs	r1, #0
 80023a4:	4618      	mov	r0, r3
 80023a6:	f010 fc89 	bl	8012cbc <memset>
  if(i2cHandle->Instance==I2C3)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a39      	ldr	r2, [pc, #228]	@ (8002494 <HAL_I2C_MspInit+0x110>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d16b      	bne.n	800248c <HAL_I2C_MspInit+0x108>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80023b4:	f04f 0208 	mov.w	r2, #8
 80023b8:	f04f 0300 	mov.w	r3, #0
 80023bc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80023c0:	2300      	movs	r3, #0
 80023c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023c6:	f107 0318 	add.w	r3, r7, #24
 80023ca:	4618      	mov	r0, r3
 80023cc:	f006 f9ae 	bl	800872c <HAL_RCCEx_PeriphCLKConfig>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80023d6:	f000 f999 	bl	800270c <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023da:	4b2f      	ldr	r3, [pc, #188]	@ (8002498 <HAL_I2C_MspInit+0x114>)
 80023dc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80023e0:	4a2d      	ldr	r2, [pc, #180]	@ (8002498 <HAL_I2C_MspInit+0x114>)
 80023e2:	f043 0304 	orr.w	r3, r3, #4
 80023e6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80023ea:	4b2b      	ldr	r3, [pc, #172]	@ (8002498 <HAL_I2C_MspInit+0x114>)
 80023ec:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80023f0:	f003 0304 	and.w	r3, r3, #4
 80023f4:	617b      	str	r3, [r7, #20]
 80023f6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023f8:	4b27      	ldr	r3, [pc, #156]	@ (8002498 <HAL_I2C_MspInit+0x114>)
 80023fa:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80023fe:	4a26      	ldr	r2, [pc, #152]	@ (8002498 <HAL_I2C_MspInit+0x114>)
 8002400:	f043 0301 	orr.w	r3, r3, #1
 8002404:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002408:	4b23      	ldr	r3, [pc, #140]	@ (8002498 <HAL_I2C_MspInit+0x114>)
 800240a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	613b      	str	r3, [r7, #16]
 8002414:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002416:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800241a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800241e:	2312      	movs	r3, #18
 8002420:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002424:	2300      	movs	r3, #0
 8002426:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800242a:	2300      	movs	r3, #0
 800242c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002430:	2304      	movs	r3, #4
 8002432:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002436:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800243a:	4619      	mov	r1, r3
 800243c:	4817      	ldr	r0, [pc, #92]	@ (800249c <HAL_I2C_MspInit+0x118>)
 800243e:	f004 fe7f 	bl	8007140 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002442:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002446:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800244a:	2312      	movs	r3, #18
 800244c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002450:	2300      	movs	r3, #0
 8002452:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002456:	2300      	movs	r3, #0
 8002458:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800245c:	2304      	movs	r3, #4
 800245e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002462:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002466:	4619      	mov	r1, r3
 8002468:	480d      	ldr	r0, [pc, #52]	@ (80024a0 <HAL_I2C_MspInit+0x11c>)
 800246a:	f004 fe69 	bl	8007140 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800246e:	4b0a      	ldr	r3, [pc, #40]	@ (8002498 <HAL_I2C_MspInit+0x114>)
 8002470:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002474:	4a08      	ldr	r2, [pc, #32]	@ (8002498 <HAL_I2C_MspInit+0x114>)
 8002476:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800247a:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800247e:	4b06      	ldr	r3, [pc, #24]	@ (8002498 <HAL_I2C_MspInit+0x114>)
 8002480:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002484:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002488:	60fb      	str	r3, [r7, #12]
 800248a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800248c:	bf00      	nop
 800248e:	37f0      	adds	r7, #240	@ 0xf0
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	40005c00 	.word	0x40005c00
 8002498:	58024400 	.word	0x58024400
 800249c:	58020800 	.word	0x58020800
 80024a0:	58020000 	.word	0x58020000

080024a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80024a8:	f000 f904 	bl	80026b4 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024ac:	f001 f9c8 	bl	8003840 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024b0:	f000 f838 	bl	8002524 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024b4:	f7ff fe74 	bl	80021a0 <MX_GPIO_Init>
  MX_DMA_Init();
 80024b8:	f7ff fd6c 	bl	8001f94 <MX_DMA_Init>
  MX_FDCAN1_Init();
 80024bc:	f7ff fd92 	bl	8001fe4 <MX_FDCAN1_Init>
  MX_I2C3_Init();
 80024c0:	f7ff ff20 	bl	8002304 <MX_I2C3_Init>
  MX_SPI1_Init();
 80024c4:	f000 f928 	bl	8002718 <MX_SPI1_Init>
  MX_SPI2_Init();
 80024c8:	f000 f97c 	bl	80027c4 <MX_SPI2_Init>
  MX_TIM2_Init();
 80024cc:	f000 fb94 	bl	8002bf8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80024d0:	f000 fc0e 	bl	8002cf0 <MX_TIM3_Init>
  MX_TIM4_Init();
 80024d4:	f000 fc72 	bl	8002dbc <MX_TIM4_Init>
  MX_UART4_Init();
 80024d8:	f000 fe82 	bl	80031e0 <MX_UART4_Init>
  MX_USART1_UART_Init();
 80024dc:	f000 fecc 	bl	8003278 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80024e0:	f000 ff66 	bl	80033b0 <MX_USART6_UART_Init>
  MX_TIM13_Init();
 80024e4:	f000 fd20 	bl	8002f28 <MX_TIM13_Init>
  MX_FATFS_Init();
 80024e8:	f00c fa46 	bl	800e978 <MX_FATFS_Init>
  MX_TIM6_Init();
 80024ec:	f000 fce2 	bl	8002eb4 <MX_TIM6_Init>
  MX_USART3_UART_Init();
 80024f0:	f000 ff12 	bl	8003318 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  BMP280_init();
 80024f4:	f7fe fd8c 	bl	8001010 <BMP280_init>
  SD_init();
 80024f8:	f7ff fd1c 	bl	8001f34 <SD_init>
  SBUS_init();
 80024fc:	f7ff f91c 	bl	8001738 <SBUS_init>
  BNO_Init();
 8002500:	f7fe ff62 	bl	80013c8 <BNO_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  BMP280_calculate();
 8002504:	f7fe fdaa 	bl	800105c <BMP280_calculate>
	  BNO_SelectPage(TestPage);
 8002508:	4b05      	ldr	r3, [pc, #20]	@ (8002520 <main+0x7c>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	4618      	mov	r0, r3
 800250e:	f7fe ff2f 	bl	8001370 <BNO_SelectPage>
	  HAL_Delay(500);
 8002512:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002516:	f001 fa25 	bl	8003964 <HAL_Delay>
	  BMP280_calculate();
 800251a:	bf00      	nop
 800251c:	e7f2      	b.n	8002504 <main+0x60>
 800251e:	bf00      	nop
 8002520:	240023fc 	.word	0x240023fc

08002524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b09c      	sub	sp, #112	@ 0x70
 8002528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800252a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800252e:	224c      	movs	r2, #76	@ 0x4c
 8002530:	2100      	movs	r1, #0
 8002532:	4618      	mov	r0, r3
 8002534:	f010 fbc2 	bl	8012cbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002538:	1d3b      	adds	r3, r7, #4
 800253a:	2220      	movs	r2, #32
 800253c:	2100      	movs	r1, #0
 800253e:	4618      	mov	r0, r3
 8002540:	f010 fbbc 	bl	8012cbc <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8002544:	4b30      	ldr	r3, [pc, #192]	@ (8002608 <SystemClock_Config+0xe4>)
 8002546:	f04f 32ff 	mov.w	r2, #4294967295
 800254a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800254e:	2002      	movs	r0, #2
 8002550:	f005 f8f4 	bl	800773c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002554:	2300      	movs	r3, #0
 8002556:	603b      	str	r3, [r7, #0]
 8002558:	4b2c      	ldr	r3, [pc, #176]	@ (800260c <SystemClock_Config+0xe8>)
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	4a2b      	ldr	r2, [pc, #172]	@ (800260c <SystemClock_Config+0xe8>)
 800255e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002562:	6193      	str	r3, [r2, #24]
 8002564:	4b29      	ldr	r3, [pc, #164]	@ (800260c <SystemClock_Config+0xe8>)
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800256c:	603b      	str	r3, [r7, #0]
 800256e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002570:	bf00      	nop
 8002572:	4b26      	ldr	r3, [pc, #152]	@ (800260c <SystemClock_Config+0xe8>)
 8002574:	699b      	ldr	r3, [r3, #24]
 8002576:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800257a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800257e:	d1f8      	bne.n	8002572 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002580:	2302      	movs	r3, #2
 8002582:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8002584:	2301      	movs	r3, #1
 8002586:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8002588:	2340      	movs	r3, #64	@ 0x40
 800258a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800258c:	2302      	movs	r3, #2
 800258e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002590:	2300      	movs	r3, #0
 8002592:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002594:	2304      	movs	r3, #4
 8002596:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 8002598:	2323      	movs	r3, #35	@ 0x23
 800259a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800259c:	2302      	movs	r3, #2
 800259e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80025a0:	2302      	movs	r3, #2
 80025a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80025a4:	2302      	movs	r3, #2
 80025a6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80025a8:	230c      	movs	r3, #12
 80025aa:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80025ac:	2300      	movs	r3, #0
 80025ae:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80025b0:	2300      	movs	r3, #0
 80025b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025b8:	4618      	mov	r0, r3
 80025ba:	f005 f8f9 	bl	80077b0 <HAL_RCC_OscConfig>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80025c4:	f000 f8a2 	bl	800270c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025c8:	233f      	movs	r3, #63	@ 0x3f
 80025ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025cc:	2303      	movs	r3, #3
 80025ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80025d0:	2300      	movs	r3, #0
 80025d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80025d4:	2300      	movs	r3, #0
 80025d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80025d8:	2340      	movs	r3, #64	@ 0x40
 80025da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80025dc:	2340      	movs	r3, #64	@ 0x40
 80025de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80025e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80025e4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80025e6:	2340      	movs	r3, #64	@ 0x40
 80025e8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80025ea:	1d3b      	adds	r3, r7, #4
 80025ec:	2106      	movs	r1, #6
 80025ee:	4618      	mov	r0, r3
 80025f0:	f005 fd10 	bl	8008014 <HAL_RCC_ClockConfig>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <SystemClock_Config+0xda>
  {
    Error_Handler();
 80025fa:	f000 f887 	bl	800270c <Error_Handler>
  }
}
 80025fe:	bf00      	nop
 8002600:	3770      	adds	r7, #112	@ 0x70
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	58024400 	.word	0x58024400
 800260c:	58024800 	.word	0x58024800

08002610 <HAL_UART_RxCpltCallback>:

uint64_t TimeOn_Counter = 0x00;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
	if (huart -> Instance == USART1){
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a10      	ldr	r2, [pc, #64]	@ (8002660 <HAL_UART_RxCpltCallback+0x50>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d10a      	bne.n	8002638 <HAL_UART_RxCpltCallback+0x28>
		SBUS_Receive(SBUS_RxBuffer);
 8002622:	4b10      	ldr	r3, [pc, #64]	@ (8002664 <HAL_UART_RxCpltCallback+0x54>)
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	4618      	mov	r0, r3
 8002628:	f7ff f894 	bl	8001754 <SBUS_Receive>
		HAL_UART_Receive_DMA(&huart1, &SBUS_RxBuffer, 1);
 800262c:	2201      	movs	r2, #1
 800262e:	490d      	ldr	r1, [pc, #52]	@ (8002664 <HAL_UART_RxCpltCallback+0x54>)
 8002630:	480d      	ldr	r0, [pc, #52]	@ (8002668 <HAL_UART_RxCpltCallback+0x58>)
 8002632:	f00a f9a7 	bl	800c984 <HAL_UART_Receive_DMA>
	}
    else if (huart -> Instance == USART3){
        BNO_Receive(BNO_BufferByte);
        HAL_UART_Receive_DMA(&huart3, &BNO_BufferByte,1);
    }
}
 8002636:	e00e      	b.n	8002656 <HAL_UART_RxCpltCallback+0x46>
    else if (huart -> Instance == USART3){
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a0b      	ldr	r2, [pc, #44]	@ (800266c <HAL_UART_RxCpltCallback+0x5c>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d109      	bne.n	8002656 <HAL_UART_RxCpltCallback+0x46>
        BNO_Receive(BNO_BufferByte);
 8002642:	4b0b      	ldr	r3, [pc, #44]	@ (8002670 <HAL_UART_RxCpltCallback+0x60>)
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	4618      	mov	r0, r3
 8002648:	f7fe feda 	bl	8001400 <BNO_Receive>
        HAL_UART_Receive_DMA(&huart3, &BNO_BufferByte,1);
 800264c:	2201      	movs	r2, #1
 800264e:	4908      	ldr	r1, [pc, #32]	@ (8002670 <HAL_UART_RxCpltCallback+0x60>)
 8002650:	4808      	ldr	r0, [pc, #32]	@ (8002674 <HAL_UART_RxCpltCallback+0x64>)
 8002652:	f00a f997 	bl	800c984 <HAL_UART_Receive_DMA>
}
 8002656:	bf00      	nop
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	40011000 	.word	0x40011000
 8002664:	24000295 	.word	0x24000295
 8002668:	24002728 	.word	0x24002728
 800266c:	40004800 	.word	0x40004800
 8002670:	24000263 	.word	0x24000263
 8002674:	240027bc 	.word	0x240027bc

08002678 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8002678:	b5b0      	push	{r4, r5, r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
	//Interrupción cada 1 ms
	if (htim -> Instance == TIM6){
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a09      	ldr	r2, [pc, #36]	@ (80026ac <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d10c      	bne.n	80026a4 <HAL_TIM_PeriodElapsedCallback+0x2c>
		TimeOn_Counter++;
 800268a:	4b09      	ldr	r3, [pc, #36]	@ (80026b0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800268c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002690:	1c54      	adds	r4, r2, #1
 8002692:	f143 0500 	adc.w	r5, r3, #0
 8002696:	4b06      	ldr	r3, [pc, #24]	@ (80026b0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002698:	e9c3 4500 	strd	r4, r5, [r3]
		LED_Tasks();
 800269c:	f7fe ff9a 	bl	80015d4 <LED_Tasks>
		SBUS_IntegrityVerification();
 80026a0:	f7ff fc24 	bl	8001eec <SBUS_IntegrityVerification>
	}

}
 80026a4:	bf00      	nop
 80026a6:	3708      	adds	r7, #8
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bdb0      	pop	{r4, r5, r7, pc}
 80026ac:	40001000 	.word	0x40001000
 80026b0:	24002400 	.word	0x24002400

080026b4 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80026ba:	463b      	mov	r3, r7
 80026bc:	2200      	movs	r2, #0
 80026be:	601a      	str	r2, [r3, #0]
 80026c0:	605a      	str	r2, [r3, #4]
 80026c2:	609a      	str	r2, [r3, #8]
 80026c4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80026c6:	f001 fa81 	bl	8003bcc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80026ca:	2301      	movs	r3, #1
 80026cc:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80026ce:	2300      	movs	r3, #0
 80026d0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80026d2:	2300      	movs	r3, #0
 80026d4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80026d6:	231f      	movs	r3, #31
 80026d8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80026da:	2387      	movs	r3, #135	@ 0x87
 80026dc:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80026de:	2300      	movs	r3, #0
 80026e0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80026e2:	2300      	movs	r3, #0
 80026e4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80026e6:	2301      	movs	r3, #1
 80026e8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80026ea:	2301      	movs	r3, #1
 80026ec:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80026ee:	2300      	movs	r3, #0
 80026f0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80026f2:	2300      	movs	r3, #0
 80026f4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80026f6:	463b      	mov	r3, r7
 80026f8:	4618      	mov	r0, r3
 80026fa:	f001 fa9f 	bl	8003c3c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80026fe:	2004      	movs	r0, #4
 8002700:	f001 fa7c 	bl	8003bfc <HAL_MPU_Enable>

}
 8002704:	bf00      	nop
 8002706:	3710      	adds	r7, #16
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002710:	b672      	cpsid	i
}
 8002712:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002714:	bf00      	nop
 8002716:	e7fd      	b.n	8002714 <Error_Handler+0x8>

08002718 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800271c:	4b27      	ldr	r3, [pc, #156]	@ (80027bc <MX_SPI1_Init+0xa4>)
 800271e:	4a28      	ldr	r2, [pc, #160]	@ (80027c0 <MX_SPI1_Init+0xa8>)
 8002720:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002722:	4b26      	ldr	r3, [pc, #152]	@ (80027bc <MX_SPI1_Init+0xa4>)
 8002724:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002728:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800272a:	4b24      	ldr	r3, [pc, #144]	@ (80027bc <MX_SPI1_Init+0xa4>)
 800272c:	2200      	movs	r2, #0
 800272e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002730:	4b22      	ldr	r3, [pc, #136]	@ (80027bc <MX_SPI1_Init+0xa4>)
 8002732:	2207      	movs	r2, #7
 8002734:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002736:	4b21      	ldr	r3, [pc, #132]	@ (80027bc <MX_SPI1_Init+0xa4>)
 8002738:	2200      	movs	r2, #0
 800273a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800273c:	4b1f      	ldr	r3, [pc, #124]	@ (80027bc <MX_SPI1_Init+0xa4>)
 800273e:	2200      	movs	r2, #0
 8002740:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002742:	4b1e      	ldr	r3, [pc, #120]	@ (80027bc <MX_SPI1_Init+0xa4>)
 8002744:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002748:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800274a:	4b1c      	ldr	r3, [pc, #112]	@ (80027bc <MX_SPI1_Init+0xa4>)
 800274c:	f04f 42e0 	mov.w	r2, #1879048192	@ 0x70000000
 8002750:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002752:	4b1a      	ldr	r3, [pc, #104]	@ (80027bc <MX_SPI1_Init+0xa4>)
 8002754:	2200      	movs	r2, #0
 8002756:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002758:	4b18      	ldr	r3, [pc, #96]	@ (80027bc <MX_SPI1_Init+0xa4>)
 800275a:	2200      	movs	r2, #0
 800275c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800275e:	4b17      	ldr	r3, [pc, #92]	@ (80027bc <MX_SPI1_Init+0xa4>)
 8002760:	2200      	movs	r2, #0
 8002762:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8002764:	4b15      	ldr	r3, [pc, #84]	@ (80027bc <MX_SPI1_Init+0xa4>)
 8002766:	2200      	movs	r2, #0
 8002768:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800276a:	4b14      	ldr	r3, [pc, #80]	@ (80027bc <MX_SPI1_Init+0xa4>)
 800276c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002770:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002772:	4b12      	ldr	r3, [pc, #72]	@ (80027bc <MX_SPI1_Init+0xa4>)
 8002774:	2200      	movs	r2, #0
 8002776:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002778:	4b10      	ldr	r3, [pc, #64]	@ (80027bc <MX_SPI1_Init+0xa4>)
 800277a:	2200      	movs	r2, #0
 800277c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800277e:	4b0f      	ldr	r3, [pc, #60]	@ (80027bc <MX_SPI1_Init+0xa4>)
 8002780:	2200      	movs	r2, #0
 8002782:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002784:	4b0d      	ldr	r3, [pc, #52]	@ (80027bc <MX_SPI1_Init+0xa4>)
 8002786:	2200      	movs	r2, #0
 8002788:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800278a:	4b0c      	ldr	r3, [pc, #48]	@ (80027bc <MX_SPI1_Init+0xa4>)
 800278c:	2200      	movs	r2, #0
 800278e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002790:	4b0a      	ldr	r3, [pc, #40]	@ (80027bc <MX_SPI1_Init+0xa4>)
 8002792:	2200      	movs	r2, #0
 8002794:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002796:	4b09      	ldr	r3, [pc, #36]	@ (80027bc <MX_SPI1_Init+0xa4>)
 8002798:	2200      	movs	r2, #0
 800279a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800279c:	4b07      	ldr	r3, [pc, #28]	@ (80027bc <MX_SPI1_Init+0xa4>)
 800279e:	2200      	movs	r2, #0
 80027a0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80027a2:	4b06      	ldr	r3, [pc, #24]	@ (80027bc <MX_SPI1_Init+0xa4>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80027a8:	4804      	ldr	r0, [pc, #16]	@ (80027bc <MX_SPI1_Init+0xa4>)
 80027aa:	f007 fd9f 	bl	800a2ec <HAL_SPI_Init>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d001      	beq.n	80027b8 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80027b4:	f7ff ffaa 	bl	800270c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80027b8:	bf00      	nop
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	24002408 	.word	0x24002408
 80027c0:	40013000 	.word	0x40013000

080027c4 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80027c8:	4b27      	ldr	r3, [pc, #156]	@ (8002868 <MX_SPI2_Init+0xa4>)
 80027ca:	4a28      	ldr	r2, [pc, #160]	@ (800286c <MX_SPI2_Init+0xa8>)
 80027cc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80027ce:	4b26      	ldr	r3, [pc, #152]	@ (8002868 <MX_SPI2_Init+0xa4>)
 80027d0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80027d4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80027d6:	4b24      	ldr	r3, [pc, #144]	@ (8002868 <MX_SPI2_Init+0xa4>)
 80027d8:	2200      	movs	r2, #0
 80027da:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80027dc:	4b22      	ldr	r3, [pc, #136]	@ (8002868 <MX_SPI2_Init+0xa4>)
 80027de:	2207      	movs	r2, #7
 80027e0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80027e2:	4b21      	ldr	r3, [pc, #132]	@ (8002868 <MX_SPI2_Init+0xa4>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80027e8:	4b1f      	ldr	r3, [pc, #124]	@ (8002868 <MX_SPI2_Init+0xa4>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80027ee:	4b1e      	ldr	r3, [pc, #120]	@ (8002868 <MX_SPI2_Init+0xa4>)
 80027f0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80027f4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80027f6:	4b1c      	ldr	r3, [pc, #112]	@ (8002868 <MX_SPI2_Init+0xa4>)
 80027f8:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 80027fc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80027fe:	4b1a      	ldr	r3, [pc, #104]	@ (8002868 <MX_SPI2_Init+0xa4>)
 8002800:	2200      	movs	r2, #0
 8002802:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002804:	4b18      	ldr	r3, [pc, #96]	@ (8002868 <MX_SPI2_Init+0xa4>)
 8002806:	2200      	movs	r2, #0
 8002808:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800280a:	4b17      	ldr	r3, [pc, #92]	@ (8002868 <MX_SPI2_Init+0xa4>)
 800280c:	2200      	movs	r2, #0
 800280e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8002810:	4b15      	ldr	r3, [pc, #84]	@ (8002868 <MX_SPI2_Init+0xa4>)
 8002812:	2200      	movs	r2, #0
 8002814:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002816:	4b14      	ldr	r3, [pc, #80]	@ (8002868 <MX_SPI2_Init+0xa4>)
 8002818:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800281c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800281e:	4b12      	ldr	r3, [pc, #72]	@ (8002868 <MX_SPI2_Init+0xa4>)
 8002820:	2200      	movs	r2, #0
 8002822:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002824:	4b10      	ldr	r3, [pc, #64]	@ (8002868 <MX_SPI2_Init+0xa4>)
 8002826:	2200      	movs	r2, #0
 8002828:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800282a:	4b0f      	ldr	r3, [pc, #60]	@ (8002868 <MX_SPI2_Init+0xa4>)
 800282c:	2200      	movs	r2, #0
 800282e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002830:	4b0d      	ldr	r3, [pc, #52]	@ (8002868 <MX_SPI2_Init+0xa4>)
 8002832:	2200      	movs	r2, #0
 8002834:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002836:	4b0c      	ldr	r3, [pc, #48]	@ (8002868 <MX_SPI2_Init+0xa4>)
 8002838:	2200      	movs	r2, #0
 800283a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800283c:	4b0a      	ldr	r3, [pc, #40]	@ (8002868 <MX_SPI2_Init+0xa4>)
 800283e:	2200      	movs	r2, #0
 8002840:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002842:	4b09      	ldr	r3, [pc, #36]	@ (8002868 <MX_SPI2_Init+0xa4>)
 8002844:	2200      	movs	r2, #0
 8002846:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002848:	4b07      	ldr	r3, [pc, #28]	@ (8002868 <MX_SPI2_Init+0xa4>)
 800284a:	2200      	movs	r2, #0
 800284c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800284e:	4b06      	ldr	r3, [pc, #24]	@ (8002868 <MX_SPI2_Init+0xa4>)
 8002850:	2200      	movs	r2, #0
 8002852:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002854:	4804      	ldr	r0, [pc, #16]	@ (8002868 <MX_SPI2_Init+0xa4>)
 8002856:	f007 fd49 	bl	800a2ec <HAL_SPI_Init>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d001      	beq.n	8002864 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8002860:	f7ff ff54 	bl	800270c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002864:	bf00      	nop
 8002866:	bd80      	pop	{r7, pc}
 8002868:	24002490 	.word	0x24002490
 800286c:	40003800 	.word	0x40003800

08002870 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b0bc      	sub	sp, #240	@ 0xf0
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002878:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800287c:	2200      	movs	r2, #0
 800287e:	601a      	str	r2, [r3, #0]
 8002880:	605a      	str	r2, [r3, #4]
 8002882:	609a      	str	r2, [r3, #8]
 8002884:	60da      	str	r2, [r3, #12]
 8002886:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002888:	f107 0318 	add.w	r3, r7, #24
 800288c:	22c0      	movs	r2, #192	@ 0xc0
 800288e:	2100      	movs	r1, #0
 8002890:	4618      	mov	r0, r3
 8002892:	f010 fa13 	bl	8012cbc <memset>
  if(spiHandle->Instance==SPI1)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a4c      	ldr	r2, [pc, #304]	@ (80029cc <HAL_SPI_MspInit+0x15c>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d145      	bne.n	800292c <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80028a0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80028a4:	f04f 0300 	mov.w	r3, #0
 80028a8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80028ac:	2300      	movs	r3, #0
 80028ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028b0:	f107 0318 	add.w	r3, r7, #24
 80028b4:	4618      	mov	r0, r3
 80028b6:	f005 ff39 	bl	800872c <HAL_RCCEx_PeriphCLKConfig>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80028c0:	f7ff ff24 	bl	800270c <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80028c4:	4b42      	ldr	r3, [pc, #264]	@ (80029d0 <HAL_SPI_MspInit+0x160>)
 80028c6:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80028ca:	4a41      	ldr	r2, [pc, #260]	@ (80029d0 <HAL_SPI_MspInit+0x160>)
 80028cc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80028d0:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 80028d4:	4b3e      	ldr	r3, [pc, #248]	@ (80029d0 <HAL_SPI_MspInit+0x160>)
 80028d6:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80028da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028de:	617b      	str	r3, [r7, #20]
 80028e0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028e2:	4b3b      	ldr	r3, [pc, #236]	@ (80029d0 <HAL_SPI_MspInit+0x160>)
 80028e4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80028e8:	4a39      	ldr	r2, [pc, #228]	@ (80029d0 <HAL_SPI_MspInit+0x160>)
 80028ea:	f043 0301 	orr.w	r3, r3, #1
 80028ee:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80028f2:	4b37      	ldr	r3, [pc, #220]	@ (80029d0 <HAL_SPI_MspInit+0x160>)
 80028f4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80028f8:	f003 0301 	and.w	r3, r3, #1
 80028fc:	613b      	str	r3, [r7, #16]
 80028fe:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 8002900:	23e0      	movs	r3, #224	@ 0xe0
 8002902:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002906:	2302      	movs	r3, #2
 8002908:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290c:	2300      	movs	r3, #0
 800290e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002912:	2300      	movs	r3, #0
 8002914:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002918:	2305      	movs	r3, #5
 800291a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800291e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002922:	4619      	mov	r1, r3
 8002924:	482b      	ldr	r0, [pc, #172]	@ (80029d4 <HAL_SPI_MspInit+0x164>)
 8002926:	f004 fc0b 	bl	8007140 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800292a:	e04a      	b.n	80029c2 <HAL_SPI_MspInit+0x152>
  else if(spiHandle->Instance==SPI2)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a29      	ldr	r2, [pc, #164]	@ (80029d8 <HAL_SPI_MspInit+0x168>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d145      	bne.n	80029c2 <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002936:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800293a:	f04f 0300 	mov.w	r3, #0
 800293e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002942:	2300      	movs	r3, #0
 8002944:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002946:	f107 0318 	add.w	r3, r7, #24
 800294a:	4618      	mov	r0, r3
 800294c:	f005 feee 	bl	800872c <HAL_RCCEx_PeriphCLKConfig>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <HAL_SPI_MspInit+0xea>
      Error_Handler();
 8002956:	f7ff fed9 	bl	800270c <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800295a:	4b1d      	ldr	r3, [pc, #116]	@ (80029d0 <HAL_SPI_MspInit+0x160>)
 800295c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002960:	4a1b      	ldr	r2, [pc, #108]	@ (80029d0 <HAL_SPI_MspInit+0x160>)
 8002962:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002966:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800296a:	4b19      	ldr	r3, [pc, #100]	@ (80029d0 <HAL_SPI_MspInit+0x160>)
 800296c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002970:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002974:	60fb      	str	r3, [r7, #12]
 8002976:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002978:	4b15      	ldr	r3, [pc, #84]	@ (80029d0 <HAL_SPI_MspInit+0x160>)
 800297a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800297e:	4a14      	ldr	r2, [pc, #80]	@ (80029d0 <HAL_SPI_MspInit+0x160>)
 8002980:	f043 0302 	orr.w	r3, r3, #2
 8002984:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002988:	4b11      	ldr	r3, [pc, #68]	@ (80029d0 <HAL_SPI_MspInit+0x160>)
 800298a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	60bb      	str	r3, [r7, #8]
 8002994:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BMP_SCK_Pin|BMP_MISO_Pin|BMP_MOSI_Pin;
 8002996:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800299a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800299e:	2302      	movs	r3, #2
 80029a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a4:	2300      	movs	r3, #0
 80029a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029aa:	2300      	movs	r3, #0
 80029ac:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80029b0:	2305      	movs	r3, #5
 80029b2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029b6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80029ba:	4619      	mov	r1, r3
 80029bc:	4807      	ldr	r0, [pc, #28]	@ (80029dc <HAL_SPI_MspInit+0x16c>)
 80029be:	f004 fbbf 	bl	8007140 <HAL_GPIO_Init>
}
 80029c2:	bf00      	nop
 80029c4:	37f0      	adds	r7, #240	@ 0xf0
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	40013000 	.word	0x40013000
 80029d0:	58024400 	.word	0x58024400
 80029d4:	58020000 	.word	0x58020000
 80029d8:	40003800 	.word	0x40003800
 80029dc:	58020400 	.word	0x58020400

080029e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002a10 <HAL_MspInit+0x30>)
 80029e8:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80029ec:	4a08      	ldr	r2, [pc, #32]	@ (8002a10 <HAL_MspInit+0x30>)
 80029ee:	f043 0302 	orr.w	r3, r3, #2
 80029f2:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80029f6:	4b06      	ldr	r3, [pc, #24]	@ (8002a10 <HAL_MspInit+0x30>)
 80029f8:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80029fc:	f003 0302 	and.w	r3, r3, #2
 8002a00:	607b      	str	r3, [r7, #4]
 8002a02:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr
 8002a10:	58024400 	.word	0x58024400

08002a14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a18:	bf00      	nop
 8002a1a:	e7fd      	b.n	8002a18 <NMI_Handler+0x4>

08002a1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a20:	bf00      	nop
 8002a22:	e7fd      	b.n	8002a20 <HardFault_Handler+0x4>

08002a24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a28:	bf00      	nop
 8002a2a:	e7fd      	b.n	8002a28 <MemManage_Handler+0x4>

08002a2c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a30:	bf00      	nop
 8002a32:	e7fd      	b.n	8002a30 <BusFault_Handler+0x4>

08002a34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a38:	bf00      	nop
 8002a3a:	e7fd      	b.n	8002a38 <UsageFault_Handler+0x4>

08002a3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a40:	bf00      	nop
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr

08002a4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a4e:	bf00      	nop
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a5c:	bf00      	nop
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
	...

08002a68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  if(Timer1 > 0)
 8002a6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a9c <SysTick_Handler+0x34>)
 8002a6e:	881b      	ldrh	r3, [r3, #0]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d005      	beq.n	8002a80 <SysTick_Handler+0x18>
	    Timer1--;
 8002a74:	4b09      	ldr	r3, [pc, #36]	@ (8002a9c <SysTick_Handler+0x34>)
 8002a76:	881b      	ldrh	r3, [r3, #0]
 8002a78:	3b01      	subs	r3, #1
 8002a7a:	b29a      	uxth	r2, r3
 8002a7c:	4b07      	ldr	r3, [pc, #28]	@ (8002a9c <SysTick_Handler+0x34>)
 8002a7e:	801a      	strh	r2, [r3, #0]
	  if(Timer2 > 0)
 8002a80:	4b07      	ldr	r3, [pc, #28]	@ (8002aa0 <SysTick_Handler+0x38>)
 8002a82:	881b      	ldrh	r3, [r3, #0]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d005      	beq.n	8002a94 <SysTick_Handler+0x2c>
	    Timer2--;
 8002a88:	4b05      	ldr	r3, [pc, #20]	@ (8002aa0 <SysTick_Handler+0x38>)
 8002a8a:	881b      	ldrh	r3, [r3, #0]
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	b29a      	uxth	r2, r3
 8002a90:	4b03      	ldr	r3, [pc, #12]	@ (8002aa0 <SysTick_Handler+0x38>)
 8002a92:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a94:	f000 ff46 	bl	8003924 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a98:	bf00      	nop
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	240029e0 	.word	0x240029e0
 8002aa0:	240029e2 	.word	0x240029e2

08002aa4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002aa8:	4802      	ldr	r0, [pc, #8]	@ (8002ab4 <DMA1_Stream0_IRQHandler+0x10>)
 8002aaa:	f002 fc63 	bl	8005374 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002aae:	bf00      	nop
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	240028e4 	.word	0x240028e4

08002ab8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002abc:	4802      	ldr	r0, [pc, #8]	@ (8002ac8 <DMA1_Stream1_IRQHandler+0x10>)
 8002abe:	f002 fc59 	bl	8005374 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002ac2:	bf00      	nop
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	2400295c 	.word	0x2400295c

08002acc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002ad0:	4802      	ldr	r0, [pc, #8]	@ (8002adc <USART1_IRQHandler+0x10>)
 8002ad2:	f009 ffa3 	bl	800ca1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002ad6:	bf00      	nop
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	24002728 	.word	0x24002728

08002ae0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002ae4:	4802      	ldr	r0, [pc, #8]	@ (8002af0 <USART3_IRQHandler+0x10>)
 8002ae6:	f009 ff99 	bl	800ca1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002aea:	bf00      	nop
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	240027bc 	.word	0x240027bc

08002af4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002af8:	4802      	ldr	r0, [pc, #8]	@ (8002b04 <TIM6_DAC_IRQHandler+0x10>)
 8002afa:	f008 ffd3 	bl	800baa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002afe:	bf00      	nop
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	240025fc 	.word	0x240025fc

08002b08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002b0c:	4b32      	ldr	r3, [pc, #200]	@ (8002bd8 <SystemInit+0xd0>)
 8002b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b12:	4a31      	ldr	r2, [pc, #196]	@ (8002bd8 <SystemInit+0xd0>)
 8002b14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002b18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002b1c:	4b2f      	ldr	r3, [pc, #188]	@ (8002bdc <SystemInit+0xd4>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 030f 	and.w	r3, r3, #15
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d807      	bhi.n	8002b38 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002b28:	4b2c      	ldr	r3, [pc, #176]	@ (8002bdc <SystemInit+0xd4>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f023 030f 	bic.w	r3, r3, #15
 8002b30:	4a2a      	ldr	r2, [pc, #168]	@ (8002bdc <SystemInit+0xd4>)
 8002b32:	f043 0303 	orr.w	r3, r3, #3
 8002b36:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002b38:	4b29      	ldr	r3, [pc, #164]	@ (8002be0 <SystemInit+0xd8>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a28      	ldr	r2, [pc, #160]	@ (8002be0 <SystemInit+0xd8>)
 8002b3e:	f043 0301 	orr.w	r3, r3, #1
 8002b42:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002b44:	4b26      	ldr	r3, [pc, #152]	@ (8002be0 <SystemInit+0xd8>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002b4a:	4b25      	ldr	r3, [pc, #148]	@ (8002be0 <SystemInit+0xd8>)
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	4924      	ldr	r1, [pc, #144]	@ (8002be0 <SystemInit+0xd8>)
 8002b50:	4b24      	ldr	r3, [pc, #144]	@ (8002be4 <SystemInit+0xdc>)
 8002b52:	4013      	ands	r3, r2
 8002b54:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002b56:	4b21      	ldr	r3, [pc, #132]	@ (8002bdc <SystemInit+0xd4>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 030c 	and.w	r3, r3, #12
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d007      	beq.n	8002b72 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002b62:	4b1e      	ldr	r3, [pc, #120]	@ (8002bdc <SystemInit+0xd4>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f023 030f 	bic.w	r3, r3, #15
 8002b6a:	4a1c      	ldr	r2, [pc, #112]	@ (8002bdc <SystemInit+0xd4>)
 8002b6c:	f043 0303 	orr.w	r3, r3, #3
 8002b70:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8002b72:	4b1b      	ldr	r3, [pc, #108]	@ (8002be0 <SystemInit+0xd8>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8002b78:	4b19      	ldr	r3, [pc, #100]	@ (8002be0 <SystemInit+0xd8>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8002b7e:	4b18      	ldr	r3, [pc, #96]	@ (8002be0 <SystemInit+0xd8>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002b84:	4b16      	ldr	r3, [pc, #88]	@ (8002be0 <SystemInit+0xd8>)
 8002b86:	4a18      	ldr	r2, [pc, #96]	@ (8002be8 <SystemInit+0xe0>)
 8002b88:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002b8a:	4b15      	ldr	r3, [pc, #84]	@ (8002be0 <SystemInit+0xd8>)
 8002b8c:	4a17      	ldr	r2, [pc, #92]	@ (8002bec <SystemInit+0xe4>)
 8002b8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002b90:	4b13      	ldr	r3, [pc, #76]	@ (8002be0 <SystemInit+0xd8>)
 8002b92:	4a17      	ldr	r2, [pc, #92]	@ (8002bf0 <SystemInit+0xe8>)
 8002b94:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002b96:	4b12      	ldr	r3, [pc, #72]	@ (8002be0 <SystemInit+0xd8>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002b9c:	4b10      	ldr	r3, [pc, #64]	@ (8002be0 <SystemInit+0xd8>)
 8002b9e:	4a14      	ldr	r2, [pc, #80]	@ (8002bf0 <SystemInit+0xe8>)
 8002ba0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002ba2:	4b0f      	ldr	r3, [pc, #60]	@ (8002be0 <SystemInit+0xd8>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002ba8:	4b0d      	ldr	r3, [pc, #52]	@ (8002be0 <SystemInit+0xd8>)
 8002baa:	4a11      	ldr	r2, [pc, #68]	@ (8002bf0 <SystemInit+0xe8>)
 8002bac:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002bae:	4b0c      	ldr	r3, [pc, #48]	@ (8002be0 <SystemInit+0xd8>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002bb4:	4b0a      	ldr	r3, [pc, #40]	@ (8002be0 <SystemInit+0xd8>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a09      	ldr	r2, [pc, #36]	@ (8002be0 <SystemInit+0xd8>)
 8002bba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002bbe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002bc0:	4b07      	ldr	r3, [pc, #28]	@ (8002be0 <SystemInit+0xd8>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002bc6:	4b0b      	ldr	r3, [pc, #44]	@ (8002bf4 <SystemInit+0xec>)
 8002bc8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002bcc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002bce:	bf00      	nop
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr
 8002bd8:	e000ed00 	.word	0xe000ed00
 8002bdc:	52002000 	.word	0x52002000
 8002be0:	58024400 	.word	0x58024400
 8002be4:	eaf6ed7f 	.word	0xeaf6ed7f
 8002be8:	02020200 	.word	0x02020200
 8002bec:	01ff0000 	.word	0x01ff0000
 8002bf0:	01010280 	.word	0x01010280
 8002bf4:	52004000 	.word	0x52004000

08002bf8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim13;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b08a      	sub	sp, #40	@ 0x28
 8002bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bfe:	f107 031c 	add.w	r3, r7, #28
 8002c02:	2200      	movs	r2, #0
 8002c04:	601a      	str	r2, [r3, #0]
 8002c06:	605a      	str	r2, [r3, #4]
 8002c08:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c0a:	463b      	mov	r3, r7
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	601a      	str	r2, [r3, #0]
 8002c10:	605a      	str	r2, [r3, #4]
 8002c12:	609a      	str	r2, [r3, #8]
 8002c14:	60da      	str	r2, [r3, #12]
 8002c16:	611a      	str	r2, [r3, #16]
 8002c18:	615a      	str	r2, [r3, #20]
 8002c1a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002c1c:	4b33      	ldr	r3, [pc, #204]	@ (8002cec <MX_TIM2_Init+0xf4>)
 8002c1e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002c22:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 280-1;
 8002c24:	4b31      	ldr	r3, [pc, #196]	@ (8002cec <MX_TIM2_Init+0xf4>)
 8002c26:	f240 1217 	movw	r2, #279	@ 0x117
 8002c2a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c2c:	4b2f      	ldr	r3, [pc, #188]	@ (8002cec <MX_TIM2_Init+0xf4>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7000;
 8002c32:	4b2e      	ldr	r3, [pc, #184]	@ (8002cec <MX_TIM2_Init+0xf4>)
 8002c34:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8002c38:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c3a:	4b2c      	ldr	r3, [pc, #176]	@ (8002cec <MX_TIM2_Init+0xf4>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002c40:	4b2a      	ldr	r3, [pc, #168]	@ (8002cec <MX_TIM2_Init+0xf4>)
 8002c42:	2280      	movs	r2, #128	@ 0x80
 8002c44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002c46:	4829      	ldr	r0, [pc, #164]	@ (8002cec <MX_TIM2_Init+0xf4>)
 8002c48:	f008 fdc6 	bl	800b7d8 <HAL_TIM_PWM_Init>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 8002c52:	f7ff fd5b 	bl	800270c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c56:	2300      	movs	r3, #0
 8002c58:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002c5e:	f107 031c 	add.w	r3, r7, #28
 8002c62:	4619      	mov	r1, r3
 8002c64:	4821      	ldr	r0, [pc, #132]	@ (8002cec <MX_TIM2_Init+0xf4>)
 8002c66:	f009 fd03 	bl	800c670 <HAL_TIMEx_MasterConfigSynchronization>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d001      	beq.n	8002c74 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8002c70:	f7ff fd4c 	bl	800270c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c74:	2360      	movs	r3, #96	@ 0x60
 8002c76:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c80:	2300      	movs	r3, #0
 8002c82:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c84:	463b      	mov	r3, r7
 8002c86:	2200      	movs	r2, #0
 8002c88:	4619      	mov	r1, r3
 8002c8a:	4818      	ldr	r0, [pc, #96]	@ (8002cec <MX_TIM2_Init+0xf4>)
 8002c8c:	f009 f812 	bl	800bcb4 <HAL_TIM_PWM_ConfigChannel>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8002c96:	f7ff fd39 	bl	800270c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002c9a:	463b      	mov	r3, r7
 8002c9c:	2204      	movs	r2, #4
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	4812      	ldr	r0, [pc, #72]	@ (8002cec <MX_TIM2_Init+0xf4>)
 8002ca2:	f009 f807 	bl	800bcb4 <HAL_TIM_PWM_ConfigChannel>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d001      	beq.n	8002cb0 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8002cac:	f7ff fd2e 	bl	800270c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002cb0:	463b      	mov	r3, r7
 8002cb2:	2208      	movs	r2, #8
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	480d      	ldr	r0, [pc, #52]	@ (8002cec <MX_TIM2_Init+0xf4>)
 8002cb8:	f008 fffc 	bl	800bcb4 <HAL_TIM_PWM_ConfigChannel>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d001      	beq.n	8002cc6 <MX_TIM2_Init+0xce>
  {
    Error_Handler();
 8002cc2:	f7ff fd23 	bl	800270c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002cc6:	463b      	mov	r3, r7
 8002cc8:	220c      	movs	r2, #12
 8002cca:	4619      	mov	r1, r3
 8002ccc:	4807      	ldr	r0, [pc, #28]	@ (8002cec <MX_TIM2_Init+0xf4>)
 8002cce:	f008 fff1 	bl	800bcb4 <HAL_TIM_PWM_ConfigChannel>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <MX_TIM2_Init+0xe4>
  {
    Error_Handler();
 8002cd8:	f7ff fd18 	bl	800270c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002cdc:	4803      	ldr	r0, [pc, #12]	@ (8002cec <MX_TIM2_Init+0xf4>)
 8002cde:	f000 f9d5 	bl	800308c <HAL_TIM_MspPostInit>

}
 8002ce2:	bf00      	nop
 8002ce4:	3728      	adds	r7, #40	@ 0x28
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	24002518 	.word	0x24002518

08002cf0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b08a      	sub	sp, #40	@ 0x28
 8002cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cf6:	f107 031c 	add.w	r3, r7, #28
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	601a      	str	r2, [r3, #0]
 8002cfe:	605a      	str	r2, [r3, #4]
 8002d00:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d02:	463b      	mov	r3, r7
 8002d04:	2200      	movs	r2, #0
 8002d06:	601a      	str	r2, [r3, #0]
 8002d08:	605a      	str	r2, [r3, #4]
 8002d0a:	609a      	str	r2, [r3, #8]
 8002d0c:	60da      	str	r2, [r3, #12]
 8002d0e:	611a      	str	r2, [r3, #16]
 8002d10:	615a      	str	r2, [r3, #20]
 8002d12:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002d14:	4b27      	ldr	r3, [pc, #156]	@ (8002db4 <MX_TIM3_Init+0xc4>)
 8002d16:	4a28      	ldr	r2, [pc, #160]	@ (8002db8 <MX_TIM3_Init+0xc8>)
 8002d18:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 280-1;
 8002d1a:	4b26      	ldr	r3, [pc, #152]	@ (8002db4 <MX_TIM3_Init+0xc4>)
 8002d1c:	f240 1217 	movw	r2, #279	@ 0x117
 8002d20:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d22:	4b24      	ldr	r3, [pc, #144]	@ (8002db4 <MX_TIM3_Init+0xc4>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7000;
 8002d28:	4b22      	ldr	r3, [pc, #136]	@ (8002db4 <MX_TIM3_Init+0xc4>)
 8002d2a:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8002d2e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d30:	4b20      	ldr	r3, [pc, #128]	@ (8002db4 <MX_TIM3_Init+0xc4>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002d36:	4b1f      	ldr	r3, [pc, #124]	@ (8002db4 <MX_TIM3_Init+0xc4>)
 8002d38:	2280      	movs	r2, #128	@ 0x80
 8002d3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002d3c:	481d      	ldr	r0, [pc, #116]	@ (8002db4 <MX_TIM3_Init+0xc4>)
 8002d3e:	f008 fd4b 	bl	800b7d8 <HAL_TIM_PWM_Init>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8002d48:	f7ff fce0 	bl	800270c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d50:	2300      	movs	r3, #0
 8002d52:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002d54:	f107 031c 	add.w	r3, r7, #28
 8002d58:	4619      	mov	r1, r3
 8002d5a:	4816      	ldr	r0, [pc, #88]	@ (8002db4 <MX_TIM3_Init+0xc4>)
 8002d5c:	f009 fc88 	bl	800c670 <HAL_TIMEx_MasterConfigSynchronization>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d001      	beq.n	8002d6a <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8002d66:	f7ff fcd1 	bl	800270c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d6a:	2360      	movs	r3, #96	@ 0x60
 8002d6c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d72:	2300      	movs	r3, #0
 8002d74:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d76:	2300      	movs	r3, #0
 8002d78:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d7a:	463b      	mov	r3, r7
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	4619      	mov	r1, r3
 8002d80:	480c      	ldr	r0, [pc, #48]	@ (8002db4 <MX_TIM3_Init+0xc4>)
 8002d82:	f008 ff97 	bl	800bcb4 <HAL_TIM_PWM_ConfigChannel>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d001      	beq.n	8002d90 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8002d8c:	f7ff fcbe 	bl	800270c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002d90:	463b      	mov	r3, r7
 8002d92:	2204      	movs	r2, #4
 8002d94:	4619      	mov	r1, r3
 8002d96:	4807      	ldr	r0, [pc, #28]	@ (8002db4 <MX_TIM3_Init+0xc4>)
 8002d98:	f008 ff8c 	bl	800bcb4 <HAL_TIM_PWM_ConfigChannel>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 8002da2:	f7ff fcb3 	bl	800270c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002da6:	4803      	ldr	r0, [pc, #12]	@ (8002db4 <MX_TIM3_Init+0xc4>)
 8002da8:	f000 f970 	bl	800308c <HAL_TIM_MspPostInit>

}
 8002dac:	bf00      	nop
 8002dae:	3728      	adds	r7, #40	@ 0x28
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	24002564 	.word	0x24002564
 8002db8:	40000400 	.word	0x40000400

08002dbc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b08a      	sub	sp, #40	@ 0x28
 8002dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dc2:	f107 031c 	add.w	r3, r7, #28
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	601a      	str	r2, [r3, #0]
 8002dca:	605a      	str	r2, [r3, #4]
 8002dcc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002dce:	463b      	mov	r3, r7
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	601a      	str	r2, [r3, #0]
 8002dd4:	605a      	str	r2, [r3, #4]
 8002dd6:	609a      	str	r2, [r3, #8]
 8002dd8:	60da      	str	r2, [r3, #12]
 8002dda:	611a      	str	r2, [r3, #16]
 8002ddc:	615a      	str	r2, [r3, #20]
 8002dde:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002de0:	4b32      	ldr	r3, [pc, #200]	@ (8002eac <MX_TIM4_Init+0xf0>)
 8002de2:	4a33      	ldr	r2, [pc, #204]	@ (8002eb0 <MX_TIM4_Init+0xf4>)
 8002de4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 280-1;
 8002de6:	4b31      	ldr	r3, [pc, #196]	@ (8002eac <MX_TIM4_Init+0xf0>)
 8002de8:	f240 1217 	movw	r2, #279	@ 0x117
 8002dec:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dee:	4b2f      	ldr	r3, [pc, #188]	@ (8002eac <MX_TIM4_Init+0xf0>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 7000;
 8002df4:	4b2d      	ldr	r3, [pc, #180]	@ (8002eac <MX_TIM4_Init+0xf0>)
 8002df6:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8002dfa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dfc:	4b2b      	ldr	r3, [pc, #172]	@ (8002eac <MX_TIM4_Init+0xf0>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002e02:	4b2a      	ldr	r3, [pc, #168]	@ (8002eac <MX_TIM4_Init+0xf0>)
 8002e04:	2280      	movs	r2, #128	@ 0x80
 8002e06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002e08:	4828      	ldr	r0, [pc, #160]	@ (8002eac <MX_TIM4_Init+0xf0>)
 8002e0a:	f008 fce5 	bl	800b7d8 <HAL_TIM_PWM_Init>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d001      	beq.n	8002e18 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 8002e14:	f7ff fc7a 	bl	800270c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002e20:	f107 031c 	add.w	r3, r7, #28
 8002e24:	4619      	mov	r1, r3
 8002e26:	4821      	ldr	r0, [pc, #132]	@ (8002eac <MX_TIM4_Init+0xf0>)
 8002e28:	f009 fc22 	bl	800c670 <HAL_TIMEx_MasterConfigSynchronization>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 8002e32:	f7ff fc6b 	bl	800270c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e36:	2360      	movs	r3, #96	@ 0x60
 8002e38:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e42:	2300      	movs	r3, #0
 8002e44:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e46:	463b      	mov	r3, r7
 8002e48:	2200      	movs	r2, #0
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	4817      	ldr	r0, [pc, #92]	@ (8002eac <MX_TIM4_Init+0xf0>)
 8002e4e:	f008 ff31 	bl	800bcb4 <HAL_TIM_PWM_ConfigChannel>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d001      	beq.n	8002e5c <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8002e58:	f7ff fc58 	bl	800270c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002e5c:	463b      	mov	r3, r7
 8002e5e:	2204      	movs	r2, #4
 8002e60:	4619      	mov	r1, r3
 8002e62:	4812      	ldr	r0, [pc, #72]	@ (8002eac <MX_TIM4_Init+0xf0>)
 8002e64:	f008 ff26 	bl	800bcb4 <HAL_TIM_PWM_ConfigChannel>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 8002e6e:	f7ff fc4d 	bl	800270c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002e72:	463b      	mov	r3, r7
 8002e74:	2208      	movs	r2, #8
 8002e76:	4619      	mov	r1, r3
 8002e78:	480c      	ldr	r0, [pc, #48]	@ (8002eac <MX_TIM4_Init+0xf0>)
 8002e7a:	f008 ff1b 	bl	800bcb4 <HAL_TIM_PWM_ConfigChannel>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d001      	beq.n	8002e88 <MX_TIM4_Init+0xcc>
  {
    Error_Handler();
 8002e84:	f7ff fc42 	bl	800270c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002e88:	463b      	mov	r3, r7
 8002e8a:	220c      	movs	r2, #12
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	4807      	ldr	r0, [pc, #28]	@ (8002eac <MX_TIM4_Init+0xf0>)
 8002e90:	f008 ff10 	bl	800bcb4 <HAL_TIM_PWM_ConfigChannel>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <MX_TIM4_Init+0xe2>
  {
    Error_Handler();
 8002e9a:	f7ff fc37 	bl	800270c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002e9e:	4803      	ldr	r0, [pc, #12]	@ (8002eac <MX_TIM4_Init+0xf0>)
 8002ea0:	f000 f8f4 	bl	800308c <HAL_TIM_MspPostInit>

}
 8002ea4:	bf00      	nop
 8002ea6:	3728      	adds	r7, #40	@ 0x28
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	240025b0 	.word	0x240025b0
 8002eb0:	40000800 	.word	0x40000800

08002eb4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002eba:	1d3b      	adds	r3, r7, #4
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	601a      	str	r2, [r3, #0]
 8002ec0:	605a      	str	r2, [r3, #4]
 8002ec2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002ec4:	4b16      	ldr	r3, [pc, #88]	@ (8002f20 <MX_TIM6_Init+0x6c>)
 8002ec6:	4a17      	ldr	r2, [pc, #92]	@ (8002f24 <MX_TIM6_Init+0x70>)
 8002ec8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 999;
 8002eca:	4b15      	ldr	r3, [pc, #84]	@ (8002f20 <MX_TIM6_Init+0x6c>)
 8002ecc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002ed0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ed2:	4b13      	ldr	r3, [pc, #76]	@ (8002f20 <MX_TIM6_Init+0x6c>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 279;
 8002ed8:	4b11      	ldr	r3, [pc, #68]	@ (8002f20 <MX_TIM6_Init+0x6c>)
 8002eda:	f240 1217 	movw	r2, #279	@ 0x117
 8002ede:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ee0:	4b0f      	ldr	r3, [pc, #60]	@ (8002f20 <MX_TIM6_Init+0x6c>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002ee6:	480e      	ldr	r0, [pc, #56]	@ (8002f20 <MX_TIM6_Init+0x6c>)
 8002ee8:	f008 fba7 	bl	800b63a <HAL_TIM_Base_Init>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002ef2:	f7ff fc0b 	bl	800270c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002efa:	2300      	movs	r3, #0
 8002efc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002efe:	1d3b      	adds	r3, r7, #4
 8002f00:	4619      	mov	r1, r3
 8002f02:	4807      	ldr	r0, [pc, #28]	@ (8002f20 <MX_TIM6_Init+0x6c>)
 8002f04:	f009 fbb4 	bl	800c670 <HAL_TIMEx_MasterConfigSynchronization>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8002f0e:	f7ff fbfd 	bl	800270c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8002f12:	4803      	ldr	r0, [pc, #12]	@ (8002f20 <MX_TIM6_Init+0x6c>)
 8002f14:	f008 fbe8 	bl	800b6e8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM6_Init 2 */

}
 8002f18:	bf00      	nop
 8002f1a:	3710      	adds	r7, #16
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	240025fc 	.word	0x240025fc
 8002f24:	40001000 	.word	0x40001000

08002f28 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002f2c:	4b0e      	ldr	r3, [pc, #56]	@ (8002f68 <MX_TIM13_Init+0x40>)
 8002f2e:	4a0f      	ldr	r2, [pc, #60]	@ (8002f6c <MX_TIM13_Init+0x44>)
 8002f30:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 280-1;
 8002f32:	4b0d      	ldr	r3, [pc, #52]	@ (8002f68 <MX_TIM13_Init+0x40>)
 8002f34:	f240 1217 	movw	r2, #279	@ 0x117
 8002f38:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f3a:	4b0b      	ldr	r3, [pc, #44]	@ (8002f68 <MX_TIM13_Init+0x40>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8002f40:	4b09      	ldr	r3, [pc, #36]	@ (8002f68 <MX_TIM13_Init+0x40>)
 8002f42:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002f46:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f48:	4b07      	ldr	r3, [pc, #28]	@ (8002f68 <MX_TIM13_Init+0x40>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002f4e:	4b06      	ldr	r3, [pc, #24]	@ (8002f68 <MX_TIM13_Init+0x40>)
 8002f50:	2280      	movs	r2, #128	@ 0x80
 8002f52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002f54:	4804      	ldr	r0, [pc, #16]	@ (8002f68 <MX_TIM13_Init+0x40>)
 8002f56:	f008 fb70 	bl	800b63a <HAL_TIM_Base_Init>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d001      	beq.n	8002f64 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8002f60:	f7ff fbd4 	bl	800270c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8002f64:	bf00      	nop
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	24002648 	.word	0x24002648
 8002f6c:	40001c00 	.word	0x40001c00

08002f70 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b087      	sub	sp, #28
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f80:	d10f      	bne.n	8002fa2 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f82:	4b1f      	ldr	r3, [pc, #124]	@ (8003000 <HAL_TIM_PWM_MspInit+0x90>)
 8002f84:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002f88:	4a1d      	ldr	r2, [pc, #116]	@ (8003000 <HAL_TIM_PWM_MspInit+0x90>)
 8002f8a:	f043 0301 	orr.w	r3, r3, #1
 8002f8e:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8002f92:	4b1b      	ldr	r3, [pc, #108]	@ (8003000 <HAL_TIM_PWM_MspInit+0x90>)
 8002f94:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002f98:	f003 0301 	and.w	r3, r3, #1
 8002f9c:	617b      	str	r3, [r7, #20]
 8002f9e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002fa0:	e028      	b.n	8002ff4 <HAL_TIM_PWM_MspInit+0x84>
  else if(tim_pwmHandle->Instance==TIM3)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a17      	ldr	r2, [pc, #92]	@ (8003004 <HAL_TIM_PWM_MspInit+0x94>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d10f      	bne.n	8002fcc <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002fac:	4b14      	ldr	r3, [pc, #80]	@ (8003000 <HAL_TIM_PWM_MspInit+0x90>)
 8002fae:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002fb2:	4a13      	ldr	r2, [pc, #76]	@ (8003000 <HAL_TIM_PWM_MspInit+0x90>)
 8002fb4:	f043 0302 	orr.w	r3, r3, #2
 8002fb8:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8002fbc:	4b10      	ldr	r3, [pc, #64]	@ (8003000 <HAL_TIM_PWM_MspInit+0x90>)
 8002fbe:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	613b      	str	r3, [r7, #16]
 8002fc8:	693b      	ldr	r3, [r7, #16]
}
 8002fca:	e013      	b.n	8002ff4 <HAL_TIM_PWM_MspInit+0x84>
  else if(tim_pwmHandle->Instance==TIM4)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a0d      	ldr	r2, [pc, #52]	@ (8003008 <HAL_TIM_PWM_MspInit+0x98>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d10e      	bne.n	8002ff4 <HAL_TIM_PWM_MspInit+0x84>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002fd6:	4b0a      	ldr	r3, [pc, #40]	@ (8003000 <HAL_TIM_PWM_MspInit+0x90>)
 8002fd8:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002fdc:	4a08      	ldr	r2, [pc, #32]	@ (8003000 <HAL_TIM_PWM_MspInit+0x90>)
 8002fde:	f043 0304 	orr.w	r3, r3, #4
 8002fe2:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8002fe6:	4b06      	ldr	r3, [pc, #24]	@ (8003000 <HAL_TIM_PWM_MspInit+0x90>)
 8002fe8:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002fec:	f003 0304 	and.w	r3, r3, #4
 8002ff0:	60fb      	str	r3, [r7, #12]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
}
 8002ff4:	bf00      	nop
 8002ff6:	371c      	adds	r7, #28
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr
 8003000:	58024400 	.word	0x58024400
 8003004:	40000400 	.word	0x40000400
 8003008:	40000800 	.word	0x40000800

0800300c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a19      	ldr	r2, [pc, #100]	@ (8003080 <HAL_TIM_Base_MspInit+0x74>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d117      	bne.n	800304e <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800301e:	4b19      	ldr	r3, [pc, #100]	@ (8003084 <HAL_TIM_Base_MspInit+0x78>)
 8003020:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003024:	4a17      	ldr	r2, [pc, #92]	@ (8003084 <HAL_TIM_Base_MspInit+0x78>)
 8003026:	f043 0310 	orr.w	r3, r3, #16
 800302a:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800302e:	4b15      	ldr	r3, [pc, #84]	@ (8003084 <HAL_TIM_Base_MspInit+0x78>)
 8003030:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003034:	f003 0310 	and.w	r3, r3, #16
 8003038:	60fb      	str	r3, [r7, #12]
 800303a:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800303c:	2200      	movs	r2, #0
 800303e:	2100      	movs	r1, #0
 8003040:	2036      	movs	r0, #54	@ 0x36
 8003042:	f000 fd8e 	bl	8003b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003046:	2036      	movs	r0, #54	@ 0x36
 8003048:	f000 fda5 	bl	8003b96 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 800304c:	e013      	b.n	8003076 <HAL_TIM_Base_MspInit+0x6a>
  else if(tim_baseHandle->Instance==TIM13)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a0d      	ldr	r2, [pc, #52]	@ (8003088 <HAL_TIM_Base_MspInit+0x7c>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d10e      	bne.n	8003076 <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003058:	4b0a      	ldr	r3, [pc, #40]	@ (8003084 <HAL_TIM_Base_MspInit+0x78>)
 800305a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800305e:	4a09      	ldr	r2, [pc, #36]	@ (8003084 <HAL_TIM_Base_MspInit+0x78>)
 8003060:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003064:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8003068:	4b06      	ldr	r3, [pc, #24]	@ (8003084 <HAL_TIM_Base_MspInit+0x78>)
 800306a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800306e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003072:	60bb      	str	r3, [r7, #8]
 8003074:	68bb      	ldr	r3, [r7, #8]
}
 8003076:	bf00      	nop
 8003078:	3710      	adds	r7, #16
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	40001000 	.word	0x40001000
 8003084:	58024400 	.word	0x58024400
 8003088:	40001c00 	.word	0x40001c00

0800308c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b08c      	sub	sp, #48	@ 0x30
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003094:	f107 031c 	add.w	r3, r7, #28
 8003098:	2200      	movs	r2, #0
 800309a:	601a      	str	r2, [r3, #0]
 800309c:	605a      	str	r2, [r3, #4]
 800309e:	609a      	str	r2, [r3, #8]
 80030a0:	60da      	str	r2, [r3, #12]
 80030a2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030ac:	d13f      	bne.n	800312e <HAL_TIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ae:	4b47      	ldr	r3, [pc, #284]	@ (80031cc <HAL_TIM_MspPostInit+0x140>)
 80030b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80030b4:	4a45      	ldr	r2, [pc, #276]	@ (80031cc <HAL_TIM_MspPostInit+0x140>)
 80030b6:	f043 0301 	orr.w	r3, r3, #1
 80030ba:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80030be:	4b43      	ldr	r3, [pc, #268]	@ (80031cc <HAL_TIM_MspPostInit+0x140>)
 80030c0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80030c4:	f003 0301 	and.w	r3, r3, #1
 80030c8:	61bb      	str	r3, [r7, #24]
 80030ca:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030cc:	4b3f      	ldr	r3, [pc, #252]	@ (80031cc <HAL_TIM_MspPostInit+0x140>)
 80030ce:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80030d2:	4a3e      	ldr	r2, [pc, #248]	@ (80031cc <HAL_TIM_MspPostInit+0x140>)
 80030d4:	f043 0302 	orr.w	r3, r3, #2
 80030d8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80030dc:	4b3b      	ldr	r3, [pc, #236]	@ (80031cc <HAL_TIM_MspPostInit+0x140>)
 80030de:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	617b      	str	r3, [r7, #20]
 80030e8:	697b      	ldr	r3, [r7, #20]
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 80030ea:	f248 030c 	movw	r3, #32780	@ 0x800c
 80030ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030f0:	2302      	movs	r3, #2
 80030f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f4:	2300      	movs	r3, #0
 80030f6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030f8:	2300      	movs	r3, #0
 80030fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80030fc:	2301      	movs	r3, #1
 80030fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003100:	f107 031c 	add.w	r3, r7, #28
 8003104:	4619      	mov	r1, r3
 8003106:	4832      	ldr	r0, [pc, #200]	@ (80031d0 <HAL_TIM_MspPostInit+0x144>)
 8003108:	f004 f81a 	bl	8007140 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800310c:	2308      	movs	r3, #8
 800310e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003110:	2302      	movs	r3, #2
 8003112:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003114:	2300      	movs	r3, #0
 8003116:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003118:	2300      	movs	r3, #0
 800311a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800311c:	2301      	movs	r3, #1
 800311e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003120:	f107 031c 	add.w	r3, r7, #28
 8003124:	4619      	mov	r1, r3
 8003126:	482b      	ldr	r0, [pc, #172]	@ (80031d4 <HAL_TIM_MspPostInit+0x148>)
 8003128:	f004 f80a 	bl	8007140 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800312c:	e049      	b.n	80031c2 <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM3)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a29      	ldr	r2, [pc, #164]	@ (80031d8 <HAL_TIM_MspPostInit+0x14c>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d11f      	bne.n	8003178 <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003138:	4b24      	ldr	r3, [pc, #144]	@ (80031cc <HAL_TIM_MspPostInit+0x140>)
 800313a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800313e:	4a23      	ldr	r2, [pc, #140]	@ (80031cc <HAL_TIM_MspPostInit+0x140>)
 8003140:	f043 0302 	orr.w	r3, r3, #2
 8003144:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003148:	4b20      	ldr	r3, [pc, #128]	@ (80031cc <HAL_TIM_MspPostInit+0x140>)
 800314a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	613b      	str	r3, [r7, #16]
 8003154:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003156:	2330      	movs	r3, #48	@ 0x30
 8003158:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800315a:	2302      	movs	r3, #2
 800315c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800315e:	2300      	movs	r3, #0
 8003160:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003162:	2300      	movs	r3, #0
 8003164:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003166:	2302      	movs	r3, #2
 8003168:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800316a:	f107 031c 	add.w	r3, r7, #28
 800316e:	4619      	mov	r1, r3
 8003170:	4818      	ldr	r0, [pc, #96]	@ (80031d4 <HAL_TIM_MspPostInit+0x148>)
 8003172:	f003 ffe5 	bl	8007140 <HAL_GPIO_Init>
}
 8003176:	e024      	b.n	80031c2 <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM4)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a17      	ldr	r2, [pc, #92]	@ (80031dc <HAL_TIM_MspPostInit+0x150>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d11f      	bne.n	80031c2 <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003182:	4b12      	ldr	r3, [pc, #72]	@ (80031cc <HAL_TIM_MspPostInit+0x140>)
 8003184:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003188:	4a10      	ldr	r2, [pc, #64]	@ (80031cc <HAL_TIM_MspPostInit+0x140>)
 800318a:	f043 0302 	orr.w	r3, r3, #2
 800318e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003192:	4b0e      	ldr	r3, [pc, #56]	@ (80031cc <HAL_TIM_MspPostInit+0x140>)
 8003194:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003198:	f003 0302 	and.w	r3, r3, #2
 800319c:	60fb      	str	r3, [r7, #12]
 800319e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80031a0:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80031a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031a6:	2302      	movs	r3, #2
 80031a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031aa:	2300      	movs	r3, #0
 80031ac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ae:	2300      	movs	r3, #0
 80031b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80031b2:	2302      	movs	r3, #2
 80031b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031b6:	f107 031c 	add.w	r3, r7, #28
 80031ba:	4619      	mov	r1, r3
 80031bc:	4805      	ldr	r0, [pc, #20]	@ (80031d4 <HAL_TIM_MspPostInit+0x148>)
 80031be:	f003 ffbf 	bl	8007140 <HAL_GPIO_Init>
}
 80031c2:	bf00      	nop
 80031c4:	3730      	adds	r7, #48	@ 0x30
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	58024400 	.word	0x58024400
 80031d0:	58020000 	.word	0x58020000
 80031d4:	58020400 	.word	0x58020400
 80031d8:	40000400 	.word	0x40000400
 80031dc:	40000800 	.word	0x40000800

080031e0 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart1_rx;
DMA_HandleTypeDef hdma_usart3_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80031e4:	4b22      	ldr	r3, [pc, #136]	@ (8003270 <MX_UART4_Init+0x90>)
 80031e6:	4a23      	ldr	r2, [pc, #140]	@ (8003274 <MX_UART4_Init+0x94>)
 80031e8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80031ea:	4b21      	ldr	r3, [pc, #132]	@ (8003270 <MX_UART4_Init+0x90>)
 80031ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80031f0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80031f2:	4b1f      	ldr	r3, [pc, #124]	@ (8003270 <MX_UART4_Init+0x90>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80031f8:	4b1d      	ldr	r3, [pc, #116]	@ (8003270 <MX_UART4_Init+0x90>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80031fe:	4b1c      	ldr	r3, [pc, #112]	@ (8003270 <MX_UART4_Init+0x90>)
 8003200:	2200      	movs	r2, #0
 8003202:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003204:	4b1a      	ldr	r3, [pc, #104]	@ (8003270 <MX_UART4_Init+0x90>)
 8003206:	220c      	movs	r2, #12
 8003208:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800320a:	4b19      	ldr	r3, [pc, #100]	@ (8003270 <MX_UART4_Init+0x90>)
 800320c:	2200      	movs	r2, #0
 800320e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003210:	4b17      	ldr	r3, [pc, #92]	@ (8003270 <MX_UART4_Init+0x90>)
 8003212:	2200      	movs	r2, #0
 8003214:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003216:	4b16      	ldr	r3, [pc, #88]	@ (8003270 <MX_UART4_Init+0x90>)
 8003218:	2200      	movs	r2, #0
 800321a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800321c:	4b14      	ldr	r3, [pc, #80]	@ (8003270 <MX_UART4_Init+0x90>)
 800321e:	2200      	movs	r2, #0
 8003220:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003222:	4b13      	ldr	r3, [pc, #76]	@ (8003270 <MX_UART4_Init+0x90>)
 8003224:	2200      	movs	r2, #0
 8003226:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003228:	4811      	ldr	r0, [pc, #68]	@ (8003270 <MX_UART4_Init+0x90>)
 800322a:	f009 facd 	bl	800c7c8 <HAL_UART_Init>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d001      	beq.n	8003238 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8003234:	f7ff fa6a 	bl	800270c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003238:	2100      	movs	r1, #0
 800323a:	480d      	ldr	r0, [pc, #52]	@ (8003270 <MX_UART4_Init+0x90>)
 800323c:	f00b fad1 	bl	800e7e2 <HAL_UARTEx_SetTxFifoThreshold>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d001      	beq.n	800324a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8003246:	f7ff fa61 	bl	800270c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800324a:	2100      	movs	r1, #0
 800324c:	4808      	ldr	r0, [pc, #32]	@ (8003270 <MX_UART4_Init+0x90>)
 800324e:	f00b fb06 	bl	800e85e <HAL_UARTEx_SetRxFifoThreshold>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8003258:	f7ff fa58 	bl	800270c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800325c:	4804      	ldr	r0, [pc, #16]	@ (8003270 <MX_UART4_Init+0x90>)
 800325e:	f00b fa87 	bl	800e770 <HAL_UARTEx_DisableFifoMode>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d001      	beq.n	800326c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8003268:	f7ff fa50 	bl	800270c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800326c:	bf00      	nop
 800326e:	bd80      	pop	{r7, pc}
 8003270:	24002694 	.word	0x24002694
 8003274:	40004c00 	.word	0x40004c00

08003278 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800327c:	4b23      	ldr	r3, [pc, #140]	@ (800330c <MX_USART1_UART_Init+0x94>)
 800327e:	4a24      	ldr	r2, [pc, #144]	@ (8003310 <MX_USART1_UART_Init+0x98>)
 8003280:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 8003282:	4b22      	ldr	r3, [pc, #136]	@ (800330c <MX_USART1_UART_Init+0x94>)
 8003284:	4a23      	ldr	r2, [pc, #140]	@ (8003314 <MX_USART1_UART_Init+0x9c>)
 8003286:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8003288:	4b20      	ldr	r3, [pc, #128]	@ (800330c <MX_USART1_UART_Init+0x94>)
 800328a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800328e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003290:	4b1e      	ldr	r3, [pc, #120]	@ (800330c <MX_USART1_UART_Init+0x94>)
 8003292:	2200      	movs	r2, #0
 8003294:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8003296:	4b1d      	ldr	r3, [pc, #116]	@ (800330c <MX_USART1_UART_Init+0x94>)
 8003298:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800329c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800329e:	4b1b      	ldr	r3, [pc, #108]	@ (800330c <MX_USART1_UART_Init+0x94>)
 80032a0:	220c      	movs	r2, #12
 80032a2:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032a4:	4b19      	ldr	r3, [pc, #100]	@ (800330c <MX_USART1_UART_Init+0x94>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80032aa:	4b18      	ldr	r3, [pc, #96]	@ (800330c <MX_USART1_UART_Init+0x94>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80032b0:	4b16      	ldr	r3, [pc, #88]	@ (800330c <MX_USART1_UART_Init+0x94>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80032b6:	4b15      	ldr	r3, [pc, #84]	@ (800330c <MX_USART1_UART_Init+0x94>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80032bc:	4b13      	ldr	r3, [pc, #76]	@ (800330c <MX_USART1_UART_Init+0x94>)
 80032be:	2200      	movs	r2, #0
 80032c0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80032c2:	4812      	ldr	r0, [pc, #72]	@ (800330c <MX_USART1_UART_Init+0x94>)
 80032c4:	f009 fa80 	bl	800c7c8 <HAL_UART_Init>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80032ce:	f7ff fa1d 	bl	800270c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80032d2:	2100      	movs	r1, #0
 80032d4:	480d      	ldr	r0, [pc, #52]	@ (800330c <MX_USART1_UART_Init+0x94>)
 80032d6:	f00b fa84 	bl	800e7e2 <HAL_UARTEx_SetTxFifoThreshold>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d001      	beq.n	80032e4 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 80032e0:	f7ff fa14 	bl	800270c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80032e4:	2100      	movs	r1, #0
 80032e6:	4809      	ldr	r0, [pc, #36]	@ (800330c <MX_USART1_UART_Init+0x94>)
 80032e8:	f00b fab9 	bl	800e85e <HAL_UARTEx_SetRxFifoThreshold>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 80032f2:	f7ff fa0b 	bl	800270c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80032f6:	4805      	ldr	r0, [pc, #20]	@ (800330c <MX_USART1_UART_Init+0x94>)
 80032f8:	f00b fa3a 	bl	800e770 <HAL_UARTEx_DisableFifoMode>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d001      	beq.n	8003306 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8003302:	f7ff fa03 	bl	800270c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003306:	bf00      	nop
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	24002728 	.word	0x24002728
 8003310:	40011000 	.word	0x40011000
 8003314:	000186a0 	.word	0x000186a0

08003318 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800331c:	4b22      	ldr	r3, [pc, #136]	@ (80033a8 <MX_USART3_UART_Init+0x90>)
 800331e:	4a23      	ldr	r2, [pc, #140]	@ (80033ac <MX_USART3_UART_Init+0x94>)
 8003320:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003322:	4b21      	ldr	r3, [pc, #132]	@ (80033a8 <MX_USART3_UART_Init+0x90>)
 8003324:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003328:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800332a:	4b1f      	ldr	r3, [pc, #124]	@ (80033a8 <MX_USART3_UART_Init+0x90>)
 800332c:	2200      	movs	r2, #0
 800332e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003330:	4b1d      	ldr	r3, [pc, #116]	@ (80033a8 <MX_USART3_UART_Init+0x90>)
 8003332:	2200      	movs	r2, #0
 8003334:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003336:	4b1c      	ldr	r3, [pc, #112]	@ (80033a8 <MX_USART3_UART_Init+0x90>)
 8003338:	2200      	movs	r2, #0
 800333a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800333c:	4b1a      	ldr	r3, [pc, #104]	@ (80033a8 <MX_USART3_UART_Init+0x90>)
 800333e:	220c      	movs	r2, #12
 8003340:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003342:	4b19      	ldr	r3, [pc, #100]	@ (80033a8 <MX_USART3_UART_Init+0x90>)
 8003344:	2200      	movs	r2, #0
 8003346:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003348:	4b17      	ldr	r3, [pc, #92]	@ (80033a8 <MX_USART3_UART_Init+0x90>)
 800334a:	2200      	movs	r2, #0
 800334c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800334e:	4b16      	ldr	r3, [pc, #88]	@ (80033a8 <MX_USART3_UART_Init+0x90>)
 8003350:	2200      	movs	r2, #0
 8003352:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003354:	4b14      	ldr	r3, [pc, #80]	@ (80033a8 <MX_USART3_UART_Init+0x90>)
 8003356:	2200      	movs	r2, #0
 8003358:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800335a:	4b13      	ldr	r3, [pc, #76]	@ (80033a8 <MX_USART3_UART_Init+0x90>)
 800335c:	2200      	movs	r2, #0
 800335e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003360:	4811      	ldr	r0, [pc, #68]	@ (80033a8 <MX_USART3_UART_Init+0x90>)
 8003362:	f009 fa31 	bl	800c7c8 <HAL_UART_Init>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d001      	beq.n	8003370 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800336c:	f7ff f9ce 	bl	800270c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003370:	2100      	movs	r1, #0
 8003372:	480d      	ldr	r0, [pc, #52]	@ (80033a8 <MX_USART3_UART_Init+0x90>)
 8003374:	f00b fa35 	bl	800e7e2 <HAL_UARTEx_SetTxFifoThreshold>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800337e:	f7ff f9c5 	bl	800270c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003382:	2100      	movs	r1, #0
 8003384:	4808      	ldr	r0, [pc, #32]	@ (80033a8 <MX_USART3_UART_Init+0x90>)
 8003386:	f00b fa6a 	bl	800e85e <HAL_UARTEx_SetRxFifoThreshold>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d001      	beq.n	8003394 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8003390:	f7ff f9bc 	bl	800270c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8003394:	4804      	ldr	r0, [pc, #16]	@ (80033a8 <MX_USART3_UART_Init+0x90>)
 8003396:	f00b f9eb 	bl	800e770 <HAL_UARTEx_DisableFifoMode>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d001      	beq.n	80033a4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80033a0:	f7ff f9b4 	bl	800270c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80033a4:	bf00      	nop
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	240027bc 	.word	0x240027bc
 80033ac:	40004800 	.word	0x40004800

080033b0 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80033b4:	4b22      	ldr	r3, [pc, #136]	@ (8003440 <MX_USART6_UART_Init+0x90>)
 80033b6:	4a23      	ldr	r2, [pc, #140]	@ (8003444 <MX_USART6_UART_Init+0x94>)
 80033b8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80033ba:	4b21      	ldr	r3, [pc, #132]	@ (8003440 <MX_USART6_UART_Init+0x90>)
 80033bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80033c0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80033c2:	4b1f      	ldr	r3, [pc, #124]	@ (8003440 <MX_USART6_UART_Init+0x90>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80033c8:	4b1d      	ldr	r3, [pc, #116]	@ (8003440 <MX_USART6_UART_Init+0x90>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80033ce:	4b1c      	ldr	r3, [pc, #112]	@ (8003440 <MX_USART6_UART_Init+0x90>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80033d4:	4b1a      	ldr	r3, [pc, #104]	@ (8003440 <MX_USART6_UART_Init+0x90>)
 80033d6:	220c      	movs	r2, #12
 80033d8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033da:	4b19      	ldr	r3, [pc, #100]	@ (8003440 <MX_USART6_UART_Init+0x90>)
 80033dc:	2200      	movs	r2, #0
 80033de:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80033e0:	4b17      	ldr	r3, [pc, #92]	@ (8003440 <MX_USART6_UART_Init+0x90>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80033e6:	4b16      	ldr	r3, [pc, #88]	@ (8003440 <MX_USART6_UART_Init+0x90>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80033ec:	4b14      	ldr	r3, [pc, #80]	@ (8003440 <MX_USART6_UART_Init+0x90>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80033f2:	4b13      	ldr	r3, [pc, #76]	@ (8003440 <MX_USART6_UART_Init+0x90>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80033f8:	4811      	ldr	r0, [pc, #68]	@ (8003440 <MX_USART6_UART_Init+0x90>)
 80033fa:	f009 f9e5 	bl	800c7c8 <HAL_UART_Init>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d001      	beq.n	8003408 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8003404:	f7ff f982 	bl	800270c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003408:	2100      	movs	r1, #0
 800340a:	480d      	ldr	r0, [pc, #52]	@ (8003440 <MX_USART6_UART_Init+0x90>)
 800340c:	f00b f9e9 	bl	800e7e2 <HAL_UARTEx_SetTxFifoThreshold>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d001      	beq.n	800341a <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8003416:	f7ff f979 	bl	800270c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800341a:	2100      	movs	r1, #0
 800341c:	4808      	ldr	r0, [pc, #32]	@ (8003440 <MX_USART6_UART_Init+0x90>)
 800341e:	f00b fa1e 	bl	800e85e <HAL_UARTEx_SetRxFifoThreshold>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d001      	beq.n	800342c <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8003428:	f7ff f970 	bl	800270c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 800342c:	4804      	ldr	r0, [pc, #16]	@ (8003440 <MX_USART6_UART_Init+0x90>)
 800342e:	f00b f99f 	bl	800e770 <HAL_UARTEx_DisableFifoMode>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d001      	beq.n	800343c <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8003438:	f7ff f968 	bl	800270c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800343c:	bf00      	nop
 800343e:	bd80      	pop	{r7, pc}
 8003440:	24002850 	.word	0x24002850
 8003444:	40011400 	.word	0x40011400

08003448 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b0c0      	sub	sp, #256	@ 0x100
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003450:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8003454:	2200      	movs	r2, #0
 8003456:	601a      	str	r2, [r3, #0]
 8003458:	605a      	str	r2, [r3, #4]
 800345a:	609a      	str	r2, [r3, #8]
 800345c:	60da      	str	r2, [r3, #12]
 800345e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003460:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003464:	22c0      	movs	r2, #192	@ 0xc0
 8003466:	2100      	movs	r1, #0
 8003468:	4618      	mov	r0, r3
 800346a:	f00f fc27 	bl	8012cbc <memset>
  if(uartHandle->Instance==UART4)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4aa9      	ldr	r2, [pc, #676]	@ (8003718 <HAL_UART_MspInit+0x2d0>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d146      	bne.n	8003506 <HAL_UART_MspInit+0xbe>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003478:	f04f 0202 	mov.w	r2, #2
 800347c:	f04f 0300 	mov.w	r3, #0
 8003480:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003484:	2300      	movs	r3, #0
 8003486:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800348a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800348e:	4618      	mov	r0, r3
 8003490:	f005 f94c 	bl	800872c <HAL_RCCEx_PeriphCLKConfig>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800349a:	f7ff f937 	bl	800270c <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800349e:	4b9f      	ldr	r3, [pc, #636]	@ (800371c <HAL_UART_MspInit+0x2d4>)
 80034a0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80034a4:	4a9d      	ldr	r2, [pc, #628]	@ (800371c <HAL_UART_MspInit+0x2d4>)
 80034a6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80034aa:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80034ae:	4b9b      	ldr	r3, [pc, #620]	@ (800371c <HAL_UART_MspInit+0x2d4>)
 80034b0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80034b4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80034ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034bc:	4b97      	ldr	r3, [pc, #604]	@ (800371c <HAL_UART_MspInit+0x2d4>)
 80034be:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80034c2:	4a96      	ldr	r2, [pc, #600]	@ (800371c <HAL_UART_MspInit+0x2d4>)
 80034c4:	f043 0301 	orr.w	r3, r3, #1
 80034c8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80034cc:	4b93      	ldr	r3, [pc, #588]	@ (800371c <HAL_UART_MspInit+0x2d4>)
 80034ce:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	623b      	str	r3, [r7, #32]
 80034d8:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80034da:	2303      	movs	r3, #3
 80034dc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034e0:	2302      	movs	r3, #2
 80034e2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e6:	2300      	movs	r3, #0
 80034e8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ec:	2300      	movs	r3, #0
 80034ee:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80034f2:	2308      	movs	r3, #8
 80034f4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034f8:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80034fc:	4619      	mov	r1, r3
 80034fe:	4888      	ldr	r0, [pc, #544]	@ (8003720 <HAL_UART_MspInit+0x2d8>)
 8003500:	f003 fe1e 	bl	8007140 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8003504:	e167      	b.n	80037d6 <HAL_UART_MspInit+0x38e>
  else if(uartHandle->Instance==USART1)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a86      	ldr	r2, [pc, #536]	@ (8003724 <HAL_UART_MspInit+0x2dc>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d17f      	bne.n	8003610 <HAL_UART_MspInit+0x1c8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003510:	f04f 0201 	mov.w	r2, #1
 8003514:	f04f 0300 	mov.w	r3, #0
 8003518:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 800351c:	2300      	movs	r3, #0
 800351e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003522:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003526:	4618      	mov	r0, r3
 8003528:	f005 f900 	bl	800872c <HAL_RCCEx_PeriphCLKConfig>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d001      	beq.n	8003536 <HAL_UART_MspInit+0xee>
      Error_Handler();
 8003532:	f7ff f8eb 	bl	800270c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003536:	4b79      	ldr	r3, [pc, #484]	@ (800371c <HAL_UART_MspInit+0x2d4>)
 8003538:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800353c:	4a77      	ldr	r2, [pc, #476]	@ (800371c <HAL_UART_MspInit+0x2d4>)
 800353e:	f043 0310 	orr.w	r3, r3, #16
 8003542:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8003546:	4b75      	ldr	r3, [pc, #468]	@ (800371c <HAL_UART_MspInit+0x2d4>)
 8003548:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800354c:	f003 0310 	and.w	r3, r3, #16
 8003550:	61fb      	str	r3, [r7, #28]
 8003552:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003554:	4b71      	ldr	r3, [pc, #452]	@ (800371c <HAL_UART_MspInit+0x2d4>)
 8003556:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800355a:	4a70      	ldr	r2, [pc, #448]	@ (800371c <HAL_UART_MspInit+0x2d4>)
 800355c:	f043 0301 	orr.w	r3, r3, #1
 8003560:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003564:	4b6d      	ldr	r3, [pc, #436]	@ (800371c <HAL_UART_MspInit+0x2d4>)
 8003566:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	61bb      	str	r3, [r7, #24]
 8003570:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|SBUS_RX_Pin;
 8003572:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003576:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800357a:	2302      	movs	r3, #2
 800357c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003580:	2300      	movs	r3, #0
 8003582:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003586:	2300      	movs	r3, #0
 8003588:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800358c:	2307      	movs	r3, #7
 800358e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003592:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8003596:	4619      	mov	r1, r3
 8003598:	4861      	ldr	r0, [pc, #388]	@ (8003720 <HAL_UART_MspInit+0x2d8>)
 800359a:	f003 fdd1 	bl	8007140 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream0;
 800359e:	4b62      	ldr	r3, [pc, #392]	@ (8003728 <HAL_UART_MspInit+0x2e0>)
 80035a0:	4a62      	ldr	r2, [pc, #392]	@ (800372c <HAL_UART_MspInit+0x2e4>)
 80035a2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80035a4:	4b60      	ldr	r3, [pc, #384]	@ (8003728 <HAL_UART_MspInit+0x2e0>)
 80035a6:	2229      	movs	r2, #41	@ 0x29
 80035a8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035aa:	4b5f      	ldr	r3, [pc, #380]	@ (8003728 <HAL_UART_MspInit+0x2e0>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035b0:	4b5d      	ldr	r3, [pc, #372]	@ (8003728 <HAL_UART_MspInit+0x2e0>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80035b6:	4b5c      	ldr	r3, [pc, #368]	@ (8003728 <HAL_UART_MspInit+0x2e0>)
 80035b8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80035bc:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035be:	4b5a      	ldr	r3, [pc, #360]	@ (8003728 <HAL_UART_MspInit+0x2e0>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035c4:	4b58      	ldr	r3, [pc, #352]	@ (8003728 <HAL_UART_MspInit+0x2e0>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80035ca:	4b57      	ldr	r3, [pc, #348]	@ (8003728 <HAL_UART_MspInit+0x2e0>)
 80035cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80035d0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80035d2:	4b55      	ldr	r3, [pc, #340]	@ (8003728 <HAL_UART_MspInit+0x2e0>)
 80035d4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80035d8:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80035da:	4b53      	ldr	r3, [pc, #332]	@ (8003728 <HAL_UART_MspInit+0x2e0>)
 80035dc:	2200      	movs	r2, #0
 80035de:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80035e0:	4851      	ldr	r0, [pc, #324]	@ (8003728 <HAL_UART_MspInit+0x2e0>)
 80035e2:	f000 fb6b 	bl	8003cbc <HAL_DMA_Init>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d001      	beq.n	80035f0 <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 80035ec:	f7ff f88e 	bl	800270c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a4d      	ldr	r2, [pc, #308]	@ (8003728 <HAL_UART_MspInit+0x2e0>)
 80035f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80035f8:	4a4b      	ldr	r2, [pc, #300]	@ (8003728 <HAL_UART_MspInit+0x2e0>)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80035fe:	2200      	movs	r2, #0
 8003600:	2100      	movs	r1, #0
 8003602:	2025      	movs	r0, #37	@ 0x25
 8003604:	f000 faad 	bl	8003b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003608:	2025      	movs	r0, #37	@ 0x25
 800360a:	f000 fac4 	bl	8003b96 <HAL_NVIC_EnableIRQ>
}
 800360e:	e0e2      	b.n	80037d6 <HAL_UART_MspInit+0x38e>
  else if(uartHandle->Instance==USART3)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a46      	ldr	r2, [pc, #280]	@ (8003730 <HAL_UART_MspInit+0x2e8>)
 8003616:	4293      	cmp	r3, r2
 8003618:	f040 8092 	bne.w	8003740 <HAL_UART_MspInit+0x2f8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800361c:	f04f 0202 	mov.w	r2, #2
 8003620:	f04f 0300 	mov.w	r3, #0
 8003624:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003628:	2300      	movs	r3, #0
 800362a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800362e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003632:	4618      	mov	r0, r3
 8003634:	f005 f87a 	bl	800872c <HAL_RCCEx_PeriphCLKConfig>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d001      	beq.n	8003642 <HAL_UART_MspInit+0x1fa>
      Error_Handler();
 800363e:	f7ff f865 	bl	800270c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003642:	4b36      	ldr	r3, [pc, #216]	@ (800371c <HAL_UART_MspInit+0x2d4>)
 8003644:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003648:	4a34      	ldr	r2, [pc, #208]	@ (800371c <HAL_UART_MspInit+0x2d4>)
 800364a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800364e:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8003652:	4b32      	ldr	r3, [pc, #200]	@ (800371c <HAL_UART_MspInit+0x2d4>)
 8003654:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003658:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800365c:	617b      	str	r3, [r7, #20]
 800365e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003660:	4b2e      	ldr	r3, [pc, #184]	@ (800371c <HAL_UART_MspInit+0x2d4>)
 8003662:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003666:	4a2d      	ldr	r2, [pc, #180]	@ (800371c <HAL_UART_MspInit+0x2d4>)
 8003668:	f043 0304 	orr.w	r3, r3, #4
 800366c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003670:	4b2a      	ldr	r3, [pc, #168]	@ (800371c <HAL_UART_MspInit+0x2d4>)
 8003672:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003676:	f003 0304 	and.w	r3, r3, #4
 800367a:	613b      	str	r3, [r7, #16]
 800367c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800367e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003682:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003686:	2302      	movs	r3, #2
 8003688:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800368c:	2300      	movs	r3, #0
 800368e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003692:	2300      	movs	r3, #0
 8003694:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003698:	2307      	movs	r3, #7
 800369a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800369e:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80036a2:	4619      	mov	r1, r3
 80036a4:	4823      	ldr	r0, [pc, #140]	@ (8003734 <HAL_UART_MspInit+0x2ec>)
 80036a6:	f003 fd4b 	bl	8007140 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80036aa:	4b23      	ldr	r3, [pc, #140]	@ (8003738 <HAL_UART_MspInit+0x2f0>)
 80036ac:	4a23      	ldr	r2, [pc, #140]	@ (800373c <HAL_UART_MspInit+0x2f4>)
 80036ae:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80036b0:	4b21      	ldr	r3, [pc, #132]	@ (8003738 <HAL_UART_MspInit+0x2f0>)
 80036b2:	222d      	movs	r2, #45	@ 0x2d
 80036b4:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80036b6:	4b20      	ldr	r3, [pc, #128]	@ (8003738 <HAL_UART_MspInit+0x2f0>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80036bc:	4b1e      	ldr	r3, [pc, #120]	@ (8003738 <HAL_UART_MspInit+0x2f0>)
 80036be:	2200      	movs	r2, #0
 80036c0:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80036c2:	4b1d      	ldr	r3, [pc, #116]	@ (8003738 <HAL_UART_MspInit+0x2f0>)
 80036c4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80036c8:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80036ca:	4b1b      	ldr	r3, [pc, #108]	@ (8003738 <HAL_UART_MspInit+0x2f0>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80036d0:	4b19      	ldr	r3, [pc, #100]	@ (8003738 <HAL_UART_MspInit+0x2f0>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80036d6:	4b18      	ldr	r3, [pc, #96]	@ (8003738 <HAL_UART_MspInit+0x2f0>)
 80036d8:	2200      	movs	r2, #0
 80036da:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80036dc:	4b16      	ldr	r3, [pc, #88]	@ (8003738 <HAL_UART_MspInit+0x2f0>)
 80036de:	2200      	movs	r2, #0
 80036e0:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036e2:	4b15      	ldr	r3, [pc, #84]	@ (8003738 <HAL_UART_MspInit+0x2f0>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80036e8:	4813      	ldr	r0, [pc, #76]	@ (8003738 <HAL_UART_MspInit+0x2f0>)
 80036ea:	f000 fae7 	bl	8003cbc <HAL_DMA_Init>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d001      	beq.n	80036f8 <HAL_UART_MspInit+0x2b0>
      Error_Handler();
 80036f4:	f7ff f80a 	bl	800270c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	4a0f      	ldr	r2, [pc, #60]	@ (8003738 <HAL_UART_MspInit+0x2f0>)
 80036fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003700:	4a0d      	ldr	r2, [pc, #52]	@ (8003738 <HAL_UART_MspInit+0x2f0>)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003706:	2200      	movs	r2, #0
 8003708:	2100      	movs	r1, #0
 800370a:	2027      	movs	r0, #39	@ 0x27
 800370c:	f000 fa29 	bl	8003b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003710:	2027      	movs	r0, #39	@ 0x27
 8003712:	f000 fa40 	bl	8003b96 <HAL_NVIC_EnableIRQ>
}
 8003716:	e05e      	b.n	80037d6 <HAL_UART_MspInit+0x38e>
 8003718:	40004c00 	.word	0x40004c00
 800371c:	58024400 	.word	0x58024400
 8003720:	58020000 	.word	0x58020000
 8003724:	40011000 	.word	0x40011000
 8003728:	240028e4 	.word	0x240028e4
 800372c:	40020010 	.word	0x40020010
 8003730:	40004800 	.word	0x40004800
 8003734:	58020800 	.word	0x58020800
 8003738:	2400295c 	.word	0x2400295c
 800373c:	40020028 	.word	0x40020028
  else if(uartHandle->Instance==USART6)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a26      	ldr	r2, [pc, #152]	@ (80037e0 <HAL_UART_MspInit+0x398>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d145      	bne.n	80037d6 <HAL_UART_MspInit+0x38e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800374a:	f04f 0201 	mov.w	r2, #1
 800374e:	f04f 0300 	mov.w	r3, #0
 8003752:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8003756:	2300      	movs	r3, #0
 8003758:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800375c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003760:	4618      	mov	r0, r3
 8003762:	f004 ffe3 	bl	800872c <HAL_RCCEx_PeriphCLKConfig>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d001      	beq.n	8003770 <HAL_UART_MspInit+0x328>
      Error_Handler();
 800376c:	f7fe ffce 	bl	800270c <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003770:	4b1c      	ldr	r3, [pc, #112]	@ (80037e4 <HAL_UART_MspInit+0x39c>)
 8003772:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8003776:	4a1b      	ldr	r2, [pc, #108]	@ (80037e4 <HAL_UART_MspInit+0x39c>)
 8003778:	f043 0320 	orr.w	r3, r3, #32
 800377c:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8003780:	4b18      	ldr	r3, [pc, #96]	@ (80037e4 <HAL_UART_MspInit+0x39c>)
 8003782:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8003786:	f003 0320 	and.w	r3, r3, #32
 800378a:	60fb      	str	r3, [r7, #12]
 800378c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800378e:	4b15      	ldr	r3, [pc, #84]	@ (80037e4 <HAL_UART_MspInit+0x39c>)
 8003790:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003794:	4a13      	ldr	r2, [pc, #76]	@ (80037e4 <HAL_UART_MspInit+0x39c>)
 8003796:	f043 0304 	orr.w	r3, r3, #4
 800379a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800379e:	4b11      	ldr	r3, [pc, #68]	@ (80037e4 <HAL_UART_MspInit+0x39c>)
 80037a0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80037a4:	f003 0304 	and.w	r3, r3, #4
 80037a8:	60bb      	str	r3, [r7, #8]
 80037aa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80037ac:	23c0      	movs	r3, #192	@ 0xc0
 80037ae:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037b2:	2302      	movs	r3, #2
 80037b4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b8:	2300      	movs	r3, #0
 80037ba:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037be:	2300      	movs	r3, #0
 80037c0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 80037c4:	2307      	movs	r3, #7
 80037c6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037ca:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80037ce:	4619      	mov	r1, r3
 80037d0:	4805      	ldr	r0, [pc, #20]	@ (80037e8 <HAL_UART_MspInit+0x3a0>)
 80037d2:	f003 fcb5 	bl	8007140 <HAL_GPIO_Init>
}
 80037d6:	bf00      	nop
 80037d8:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	40011400 	.word	0x40011400
 80037e4:	58024400 	.word	0x58024400
 80037e8:	58020800 	.word	0x58020800

080037ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80037ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003824 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80037f0:	f7ff f98a 	bl	8002b08 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80037f4:	480c      	ldr	r0, [pc, #48]	@ (8003828 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80037f6:	490d      	ldr	r1, [pc, #52]	@ (800382c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80037f8:	4a0d      	ldr	r2, [pc, #52]	@ (8003830 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80037fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80037fc:	e002      	b.n	8003804 <LoopCopyDataInit>

080037fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80037fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003800:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003802:	3304      	adds	r3, #4

08003804 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8003804:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003806:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003808:	d3f9      	bcc.n	80037fe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800380a:	4a0a      	ldr	r2, [pc, #40]	@ (8003834 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800380c:	4c0a      	ldr	r4, [pc, #40]	@ (8003838 <LoopFillZerobss+0x22>)
  movs r3, #0
 800380e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003810:	e001      	b.n	8003816 <LoopFillZerobss>

08003812 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003812:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003814:	3204      	adds	r2, #4

08003816 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003816:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003818:	d3fb      	bcc.n	8003812 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800381a:	f00f fa5d 	bl	8012cd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800381e:	f7fe fe41 	bl	80024a4 <main>
  bx  lr
 8003822:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003824:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8003828:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800382c:	24000110 	.word	0x24000110
  ldr r2, =_sidata
 8003830:	08013db0 	.word	0x08013db0
  ldr r2, =_sbss
 8003834:	24000110 	.word	0x24000110
  ldr r4, =_ebss
 8003838:	24002d54 	.word	0x24002d54

0800383c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800383c:	e7fe      	b.n	800383c <ADC_IRQHandler>
	...

08003840 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003846:	2003      	movs	r0, #3
 8003848:	f000 f980 	bl	8003b4c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800384c:	f004 fd98 	bl	8008380 <HAL_RCC_GetSysClockFreq>
 8003850:	4602      	mov	r2, r0
 8003852:	4b15      	ldr	r3, [pc, #84]	@ (80038a8 <HAL_Init+0x68>)
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	0a1b      	lsrs	r3, r3, #8
 8003858:	f003 030f 	and.w	r3, r3, #15
 800385c:	4913      	ldr	r1, [pc, #76]	@ (80038ac <HAL_Init+0x6c>)
 800385e:	5ccb      	ldrb	r3, [r1, r3]
 8003860:	f003 031f 	and.w	r3, r3, #31
 8003864:	fa22 f303 	lsr.w	r3, r2, r3
 8003868:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800386a:	4b0f      	ldr	r3, [pc, #60]	@ (80038a8 <HAL_Init+0x68>)
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	f003 030f 	and.w	r3, r3, #15
 8003872:	4a0e      	ldr	r2, [pc, #56]	@ (80038ac <HAL_Init+0x6c>)
 8003874:	5cd3      	ldrb	r3, [r2, r3]
 8003876:	f003 031f 	and.w	r3, r3, #31
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	fa22 f303 	lsr.w	r3, r2, r3
 8003880:	4a0b      	ldr	r2, [pc, #44]	@ (80038b0 <HAL_Init+0x70>)
 8003882:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003884:	4a0b      	ldr	r2, [pc, #44]	@ (80038b4 <HAL_Init+0x74>)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800388a:	200f      	movs	r0, #15
 800388c:	f000 f814 	bl	80038b8 <HAL_InitTick>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d001      	beq.n	800389a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e002      	b.n	80038a0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800389a:	f7ff f8a1 	bl	80029e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800389e:	2300      	movs	r3, #0
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3708      	adds	r7, #8
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	58024400 	.word	0x58024400
 80038ac:	08013090 	.word	0x08013090
 80038b0:	2400009c 	.word	0x2400009c
 80038b4:	24000098 	.word	0x24000098

080038b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80038c0:	4b15      	ldr	r3, [pc, #84]	@ (8003918 <HAL_InitTick+0x60>)
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d101      	bne.n	80038cc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e021      	b.n	8003910 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80038cc:	4b13      	ldr	r3, [pc, #76]	@ (800391c <HAL_InitTick+0x64>)
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	4b11      	ldr	r3, [pc, #68]	@ (8003918 <HAL_InitTick+0x60>)
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	4619      	mov	r1, r3
 80038d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80038da:	fbb3 f3f1 	udiv	r3, r3, r1
 80038de:	fbb2 f3f3 	udiv	r3, r2, r3
 80038e2:	4618      	mov	r0, r3
 80038e4:	f000 f965 	bl	8003bb2 <HAL_SYSTICK_Config>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d001      	beq.n	80038f2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e00e      	b.n	8003910 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2b0f      	cmp	r3, #15
 80038f6:	d80a      	bhi.n	800390e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038f8:	2200      	movs	r2, #0
 80038fa:	6879      	ldr	r1, [r7, #4]
 80038fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003900:	f000 f92f 	bl	8003b62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003904:	4a06      	ldr	r2, [pc, #24]	@ (8003920 <HAL_InitTick+0x68>)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800390a:	2300      	movs	r3, #0
 800390c:	e000      	b.n	8003910 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
}
 8003910:	4618      	mov	r0, r3
 8003912:	3708      	adds	r7, #8
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	240000a4 	.word	0x240000a4
 800391c:	24000098 	.word	0x24000098
 8003920:	240000a0 	.word	0x240000a0

08003924 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003924:	b480      	push	{r7}
 8003926:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003928:	4b06      	ldr	r3, [pc, #24]	@ (8003944 <HAL_IncTick+0x20>)
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	461a      	mov	r2, r3
 800392e:	4b06      	ldr	r3, [pc, #24]	@ (8003948 <HAL_IncTick+0x24>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4413      	add	r3, r2
 8003934:	4a04      	ldr	r2, [pc, #16]	@ (8003948 <HAL_IncTick+0x24>)
 8003936:	6013      	str	r3, [r2, #0]
}
 8003938:	bf00      	nop
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	240000a4 	.word	0x240000a4
 8003948:	240029d4 	.word	0x240029d4

0800394c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800394c:	b480      	push	{r7}
 800394e:	af00      	add	r7, sp, #0
  return uwTick;
 8003950:	4b03      	ldr	r3, [pc, #12]	@ (8003960 <HAL_GetTick+0x14>)
 8003952:	681b      	ldr	r3, [r3, #0]
}
 8003954:	4618      	mov	r0, r3
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop
 8003960:	240029d4 	.word	0x240029d4

08003964 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800396c:	f7ff ffee 	bl	800394c <HAL_GetTick>
 8003970:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800397c:	d005      	beq.n	800398a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800397e:	4b0a      	ldr	r3, [pc, #40]	@ (80039a8 <HAL_Delay+0x44>)
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	461a      	mov	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	4413      	add	r3, r2
 8003988:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800398a:	bf00      	nop
 800398c:	f7ff ffde 	bl	800394c <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	429a      	cmp	r2, r3
 800399a:	d8f7      	bhi.n	800398c <HAL_Delay+0x28>
  {
  }
}
 800399c:	bf00      	nop
 800399e:	bf00      	nop
 80039a0:	3710      	adds	r7, #16
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	240000a4 	.word	0x240000a4

080039ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b085      	sub	sp, #20
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f003 0307 	and.w	r3, r3, #7
 80039ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039bc:	4b0b      	ldr	r3, [pc, #44]	@ (80039ec <__NVIC_SetPriorityGrouping+0x40>)
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039c2:	68ba      	ldr	r2, [r7, #8]
 80039c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80039c8:	4013      	ands	r3, r2
 80039ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80039d4:	4b06      	ldr	r3, [pc, #24]	@ (80039f0 <__NVIC_SetPriorityGrouping+0x44>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039da:	4a04      	ldr	r2, [pc, #16]	@ (80039ec <__NVIC_SetPriorityGrouping+0x40>)
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	60d3      	str	r3, [r2, #12]
}
 80039e0:	bf00      	nop
 80039e2:	3714      	adds	r7, #20
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr
 80039ec:	e000ed00 	.word	0xe000ed00
 80039f0:	05fa0000 	.word	0x05fa0000

080039f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039f4:	b480      	push	{r7}
 80039f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039f8:	4b04      	ldr	r3, [pc, #16]	@ (8003a0c <__NVIC_GetPriorityGrouping+0x18>)
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	0a1b      	lsrs	r3, r3, #8
 80039fe:	f003 0307 	and.w	r3, r3, #7
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr
 8003a0c:	e000ed00 	.word	0xe000ed00

08003a10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	4603      	mov	r3, r0
 8003a18:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003a1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	db0b      	blt.n	8003a3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a22:	88fb      	ldrh	r3, [r7, #6]
 8003a24:	f003 021f 	and.w	r2, r3, #31
 8003a28:	4907      	ldr	r1, [pc, #28]	@ (8003a48 <__NVIC_EnableIRQ+0x38>)
 8003a2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a2e:	095b      	lsrs	r3, r3, #5
 8003a30:	2001      	movs	r0, #1
 8003a32:	fa00 f202 	lsl.w	r2, r0, r2
 8003a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a3a:	bf00      	nop
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	e000e100 	.word	0xe000e100

08003a4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	4603      	mov	r3, r0
 8003a54:	6039      	str	r1, [r7, #0]
 8003a56:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003a58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	db0a      	blt.n	8003a76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	b2da      	uxtb	r2, r3
 8003a64:	490c      	ldr	r1, [pc, #48]	@ (8003a98 <__NVIC_SetPriority+0x4c>)
 8003a66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a6a:	0112      	lsls	r2, r2, #4
 8003a6c:	b2d2      	uxtb	r2, r2
 8003a6e:	440b      	add	r3, r1
 8003a70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a74:	e00a      	b.n	8003a8c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	b2da      	uxtb	r2, r3
 8003a7a:	4908      	ldr	r1, [pc, #32]	@ (8003a9c <__NVIC_SetPriority+0x50>)
 8003a7c:	88fb      	ldrh	r3, [r7, #6]
 8003a7e:	f003 030f 	and.w	r3, r3, #15
 8003a82:	3b04      	subs	r3, #4
 8003a84:	0112      	lsls	r2, r2, #4
 8003a86:	b2d2      	uxtb	r2, r2
 8003a88:	440b      	add	r3, r1
 8003a8a:	761a      	strb	r2, [r3, #24]
}
 8003a8c:	bf00      	nop
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr
 8003a98:	e000e100 	.word	0xe000e100
 8003a9c:	e000ed00 	.word	0xe000ed00

08003aa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b089      	sub	sp, #36	@ 0x24
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f003 0307 	and.w	r3, r3, #7
 8003ab2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	f1c3 0307 	rsb	r3, r3, #7
 8003aba:	2b04      	cmp	r3, #4
 8003abc:	bf28      	it	cs
 8003abe:	2304      	movcs	r3, #4
 8003ac0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	3304      	adds	r3, #4
 8003ac6:	2b06      	cmp	r3, #6
 8003ac8:	d902      	bls.n	8003ad0 <NVIC_EncodePriority+0x30>
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	3b03      	subs	r3, #3
 8003ace:	e000      	b.n	8003ad2 <NVIC_EncodePriority+0x32>
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	fa02 f303 	lsl.w	r3, r2, r3
 8003ade:	43da      	mvns	r2, r3
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	401a      	ands	r2, r3
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ae8:	f04f 31ff 	mov.w	r1, #4294967295
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	fa01 f303 	lsl.w	r3, r1, r3
 8003af2:	43d9      	mvns	r1, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003af8:	4313      	orrs	r3, r2
         );
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3724      	adds	r7, #36	@ 0x24
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr
	...

08003b08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	3b01      	subs	r3, #1
 8003b14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b18:	d301      	bcc.n	8003b1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e00f      	b.n	8003b3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b1e:	4a0a      	ldr	r2, [pc, #40]	@ (8003b48 <SysTick_Config+0x40>)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	3b01      	subs	r3, #1
 8003b24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b26:	210f      	movs	r1, #15
 8003b28:	f04f 30ff 	mov.w	r0, #4294967295
 8003b2c:	f7ff ff8e 	bl	8003a4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b30:	4b05      	ldr	r3, [pc, #20]	@ (8003b48 <SysTick_Config+0x40>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b36:	4b04      	ldr	r3, [pc, #16]	@ (8003b48 <SysTick_Config+0x40>)
 8003b38:	2207      	movs	r2, #7
 8003b3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3708      	adds	r7, #8
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	e000e010 	.word	0xe000e010

08003b4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f7ff ff29 	bl	80039ac <__NVIC_SetPriorityGrouping>
}
 8003b5a:	bf00      	nop
 8003b5c:	3708      	adds	r7, #8
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b086      	sub	sp, #24
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	4603      	mov	r3, r0
 8003b6a:	60b9      	str	r1, [r7, #8]
 8003b6c:	607a      	str	r2, [r7, #4]
 8003b6e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003b70:	f7ff ff40 	bl	80039f4 <__NVIC_GetPriorityGrouping>
 8003b74:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	68b9      	ldr	r1, [r7, #8]
 8003b7a:	6978      	ldr	r0, [r7, #20]
 8003b7c:	f7ff ff90 	bl	8003aa0 <NVIC_EncodePriority>
 8003b80:	4602      	mov	r2, r0
 8003b82:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003b86:	4611      	mov	r1, r2
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f7ff ff5f 	bl	8003a4c <__NVIC_SetPriority>
}
 8003b8e:	bf00      	nop
 8003b90:	3718      	adds	r7, #24
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}

08003b96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b96:	b580      	push	{r7, lr}
 8003b98:	b082      	sub	sp, #8
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ba0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f7ff ff33 	bl	8003a10 <__NVIC_EnableIRQ>
}
 8003baa:	bf00      	nop
 8003bac:	3708      	adds	r7, #8
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	b082      	sub	sp, #8
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f7ff ffa4 	bl	8003b08 <SysTick_Config>
 8003bc0:	4603      	mov	r3, r0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3708      	adds	r7, #8
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
	...

08003bcc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003bd0:	f3bf 8f5f 	dmb	sy
}
 8003bd4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003bd6:	4b07      	ldr	r3, [pc, #28]	@ (8003bf4 <HAL_MPU_Disable+0x28>)
 8003bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bda:	4a06      	ldr	r2, [pc, #24]	@ (8003bf4 <HAL_MPU_Disable+0x28>)
 8003bdc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003be0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003be2:	4b05      	ldr	r3, [pc, #20]	@ (8003bf8 <HAL_MPU_Disable+0x2c>)
 8003be4:	2200      	movs	r2, #0
 8003be6:	605a      	str	r2, [r3, #4]
}
 8003be8:	bf00      	nop
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	e000ed00 	.word	0xe000ed00
 8003bf8:	e000ed90 	.word	0xe000ed90

08003bfc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003c04:	4a0b      	ldr	r2, [pc, #44]	@ (8003c34 <HAL_MPU_Enable+0x38>)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f043 0301 	orr.w	r3, r3, #1
 8003c0c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003c0e:	4b0a      	ldr	r3, [pc, #40]	@ (8003c38 <HAL_MPU_Enable+0x3c>)
 8003c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c12:	4a09      	ldr	r2, [pc, #36]	@ (8003c38 <HAL_MPU_Enable+0x3c>)
 8003c14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c18:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003c1a:	f3bf 8f4f 	dsb	sy
}
 8003c1e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003c20:	f3bf 8f6f 	isb	sy
}
 8003c24:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003c26:	bf00      	nop
 8003c28:	370c      	adds	r7, #12
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	e000ed90 	.word	0xe000ed90
 8003c38:	e000ed00 	.word	0xe000ed00

08003c3c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	785a      	ldrb	r2, [r3, #1]
 8003c48:	4b1b      	ldr	r3, [pc, #108]	@ (8003cb8 <HAL_MPU_ConfigRegion+0x7c>)
 8003c4a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003c4c:	4b1a      	ldr	r3, [pc, #104]	@ (8003cb8 <HAL_MPU_ConfigRegion+0x7c>)
 8003c4e:	691b      	ldr	r3, [r3, #16]
 8003c50:	4a19      	ldr	r2, [pc, #100]	@ (8003cb8 <HAL_MPU_ConfigRegion+0x7c>)
 8003c52:	f023 0301 	bic.w	r3, r3, #1
 8003c56:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003c58:	4a17      	ldr	r2, [pc, #92]	@ (8003cb8 <HAL_MPU_ConfigRegion+0x7c>)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	7b1b      	ldrb	r3, [r3, #12]
 8003c64:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	7adb      	ldrb	r3, [r3, #11]
 8003c6a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003c6c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	7a9b      	ldrb	r3, [r3, #10]
 8003c72:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003c74:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	7b5b      	ldrb	r3, [r3, #13]
 8003c7a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003c7c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	7b9b      	ldrb	r3, [r3, #14]
 8003c82:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003c84:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	7bdb      	ldrb	r3, [r3, #15]
 8003c8a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003c8c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	7a5b      	ldrb	r3, [r3, #9]
 8003c92:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003c94:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	7a1b      	ldrb	r3, [r3, #8]
 8003c9a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003c9c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	7812      	ldrb	r2, [r2, #0]
 8003ca2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003ca4:	4a04      	ldr	r2, [pc, #16]	@ (8003cb8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003ca6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003ca8:	6113      	str	r3, [r2, #16]
}
 8003caa:	bf00      	nop
 8003cac:	370c      	adds	r7, #12
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	e000ed90 	.word	0xe000ed90

08003cbc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b086      	sub	sp, #24
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003cc4:	f7ff fe42 	bl	800394c <HAL_GetTick>
 8003cc8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d101      	bne.n	8003cd4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e37d      	b.n	80043d0 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a66      	ldr	r2, [pc, #408]	@ (8003e74 <HAL_DMA_Init+0x1b8>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d04a      	beq.n	8003d74 <HAL_DMA_Init+0xb8>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a65      	ldr	r2, [pc, #404]	@ (8003e78 <HAL_DMA_Init+0x1bc>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d045      	beq.n	8003d74 <HAL_DMA_Init+0xb8>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a63      	ldr	r2, [pc, #396]	@ (8003e7c <HAL_DMA_Init+0x1c0>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d040      	beq.n	8003d74 <HAL_DMA_Init+0xb8>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a62      	ldr	r2, [pc, #392]	@ (8003e80 <HAL_DMA_Init+0x1c4>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d03b      	beq.n	8003d74 <HAL_DMA_Init+0xb8>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a60      	ldr	r2, [pc, #384]	@ (8003e84 <HAL_DMA_Init+0x1c8>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d036      	beq.n	8003d74 <HAL_DMA_Init+0xb8>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a5f      	ldr	r2, [pc, #380]	@ (8003e88 <HAL_DMA_Init+0x1cc>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d031      	beq.n	8003d74 <HAL_DMA_Init+0xb8>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a5d      	ldr	r2, [pc, #372]	@ (8003e8c <HAL_DMA_Init+0x1d0>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d02c      	beq.n	8003d74 <HAL_DMA_Init+0xb8>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a5c      	ldr	r2, [pc, #368]	@ (8003e90 <HAL_DMA_Init+0x1d4>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d027      	beq.n	8003d74 <HAL_DMA_Init+0xb8>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a5a      	ldr	r2, [pc, #360]	@ (8003e94 <HAL_DMA_Init+0x1d8>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d022      	beq.n	8003d74 <HAL_DMA_Init+0xb8>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a59      	ldr	r2, [pc, #356]	@ (8003e98 <HAL_DMA_Init+0x1dc>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d01d      	beq.n	8003d74 <HAL_DMA_Init+0xb8>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a57      	ldr	r2, [pc, #348]	@ (8003e9c <HAL_DMA_Init+0x1e0>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d018      	beq.n	8003d74 <HAL_DMA_Init+0xb8>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a56      	ldr	r2, [pc, #344]	@ (8003ea0 <HAL_DMA_Init+0x1e4>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d013      	beq.n	8003d74 <HAL_DMA_Init+0xb8>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a54      	ldr	r2, [pc, #336]	@ (8003ea4 <HAL_DMA_Init+0x1e8>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d00e      	beq.n	8003d74 <HAL_DMA_Init+0xb8>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a53      	ldr	r2, [pc, #332]	@ (8003ea8 <HAL_DMA_Init+0x1ec>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d009      	beq.n	8003d74 <HAL_DMA_Init+0xb8>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a51      	ldr	r2, [pc, #324]	@ (8003eac <HAL_DMA_Init+0x1f0>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d004      	beq.n	8003d74 <HAL_DMA_Init+0xb8>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a50      	ldr	r2, [pc, #320]	@ (8003eb0 <HAL_DMA_Init+0x1f4>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d101      	bne.n	8003d78 <HAL_DMA_Init+0xbc>
 8003d74:	2301      	movs	r3, #1
 8003d76:	e000      	b.n	8003d7a <HAL_DMA_Init+0xbe>
 8003d78:	2300      	movs	r3, #0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	f000 813c 	beq.w	8003ff8 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2202      	movs	r2, #2
 8003d84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a37      	ldr	r2, [pc, #220]	@ (8003e74 <HAL_DMA_Init+0x1b8>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d04a      	beq.n	8003e30 <HAL_DMA_Init+0x174>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a36      	ldr	r2, [pc, #216]	@ (8003e78 <HAL_DMA_Init+0x1bc>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d045      	beq.n	8003e30 <HAL_DMA_Init+0x174>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a34      	ldr	r2, [pc, #208]	@ (8003e7c <HAL_DMA_Init+0x1c0>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d040      	beq.n	8003e30 <HAL_DMA_Init+0x174>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a33      	ldr	r2, [pc, #204]	@ (8003e80 <HAL_DMA_Init+0x1c4>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d03b      	beq.n	8003e30 <HAL_DMA_Init+0x174>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a31      	ldr	r2, [pc, #196]	@ (8003e84 <HAL_DMA_Init+0x1c8>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d036      	beq.n	8003e30 <HAL_DMA_Init+0x174>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a30      	ldr	r2, [pc, #192]	@ (8003e88 <HAL_DMA_Init+0x1cc>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d031      	beq.n	8003e30 <HAL_DMA_Init+0x174>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a2e      	ldr	r2, [pc, #184]	@ (8003e8c <HAL_DMA_Init+0x1d0>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d02c      	beq.n	8003e30 <HAL_DMA_Init+0x174>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a2d      	ldr	r2, [pc, #180]	@ (8003e90 <HAL_DMA_Init+0x1d4>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d027      	beq.n	8003e30 <HAL_DMA_Init+0x174>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a2b      	ldr	r2, [pc, #172]	@ (8003e94 <HAL_DMA_Init+0x1d8>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d022      	beq.n	8003e30 <HAL_DMA_Init+0x174>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a2a      	ldr	r2, [pc, #168]	@ (8003e98 <HAL_DMA_Init+0x1dc>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d01d      	beq.n	8003e30 <HAL_DMA_Init+0x174>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a28      	ldr	r2, [pc, #160]	@ (8003e9c <HAL_DMA_Init+0x1e0>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d018      	beq.n	8003e30 <HAL_DMA_Init+0x174>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a27      	ldr	r2, [pc, #156]	@ (8003ea0 <HAL_DMA_Init+0x1e4>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d013      	beq.n	8003e30 <HAL_DMA_Init+0x174>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a25      	ldr	r2, [pc, #148]	@ (8003ea4 <HAL_DMA_Init+0x1e8>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d00e      	beq.n	8003e30 <HAL_DMA_Init+0x174>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a24      	ldr	r2, [pc, #144]	@ (8003ea8 <HAL_DMA_Init+0x1ec>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d009      	beq.n	8003e30 <HAL_DMA_Init+0x174>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a22      	ldr	r2, [pc, #136]	@ (8003eac <HAL_DMA_Init+0x1f0>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d004      	beq.n	8003e30 <HAL_DMA_Init+0x174>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a21      	ldr	r2, [pc, #132]	@ (8003eb0 <HAL_DMA_Init+0x1f4>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d108      	bne.n	8003e42 <HAL_DMA_Init+0x186>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f022 0201 	bic.w	r2, r2, #1
 8003e3e:	601a      	str	r2, [r3, #0]
 8003e40:	e007      	b.n	8003e52 <HAL_DMA_Init+0x196>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f022 0201 	bic.w	r2, r2, #1
 8003e50:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003e52:	e02f      	b.n	8003eb4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e54:	f7ff fd7a 	bl	800394c <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b05      	cmp	r3, #5
 8003e60:	d928      	bls.n	8003eb4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2220      	movs	r2, #32
 8003e66:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2203      	movs	r2, #3
 8003e6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e2ad      	b.n	80043d0 <HAL_DMA_Init+0x714>
 8003e74:	40020010 	.word	0x40020010
 8003e78:	40020028 	.word	0x40020028
 8003e7c:	40020040 	.word	0x40020040
 8003e80:	40020058 	.word	0x40020058
 8003e84:	40020070 	.word	0x40020070
 8003e88:	40020088 	.word	0x40020088
 8003e8c:	400200a0 	.word	0x400200a0
 8003e90:	400200b8 	.word	0x400200b8
 8003e94:	40020410 	.word	0x40020410
 8003e98:	40020428 	.word	0x40020428
 8003e9c:	40020440 	.word	0x40020440
 8003ea0:	40020458 	.word	0x40020458
 8003ea4:	40020470 	.word	0x40020470
 8003ea8:	40020488 	.word	0x40020488
 8003eac:	400204a0 	.word	0x400204a0
 8003eb0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0301 	and.w	r3, r3, #1
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d1c8      	bne.n	8003e54 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003eca:	697a      	ldr	r2, [r7, #20]
 8003ecc:	4b73      	ldr	r3, [pc, #460]	@ (800409c <HAL_DMA_Init+0x3e0>)
 8003ece:	4013      	ands	r3, r2
 8003ed0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003eda:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ee6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ef2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a1b      	ldr	r3, [r3, #32]
 8003ef8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003efa:	697a      	ldr	r2, [r7, #20]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f04:	2b04      	cmp	r3, #4
 8003f06:	d107      	bne.n	8003f18 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f10:	4313      	orrs	r3, r2
 8003f12:	697a      	ldr	r2, [r7, #20]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	2b28      	cmp	r3, #40	@ 0x28
 8003f1e:	d903      	bls.n	8003f28 <HAL_DMA_Init+0x26c>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	2b2e      	cmp	r3, #46	@ 0x2e
 8003f26:	d91f      	bls.n	8003f68 <HAL_DMA_Init+0x2ac>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	2b3e      	cmp	r3, #62	@ 0x3e
 8003f2e:	d903      	bls.n	8003f38 <HAL_DMA_Init+0x27c>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	2b42      	cmp	r3, #66	@ 0x42
 8003f36:	d917      	bls.n	8003f68 <HAL_DMA_Init+0x2ac>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	2b46      	cmp	r3, #70	@ 0x46
 8003f3e:	d903      	bls.n	8003f48 <HAL_DMA_Init+0x28c>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	2b48      	cmp	r3, #72	@ 0x48
 8003f46:	d90f      	bls.n	8003f68 <HAL_DMA_Init+0x2ac>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	2b4e      	cmp	r3, #78	@ 0x4e
 8003f4e:	d903      	bls.n	8003f58 <HAL_DMA_Init+0x29c>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	2b52      	cmp	r3, #82	@ 0x52
 8003f56:	d907      	bls.n	8003f68 <HAL_DMA_Init+0x2ac>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	2b73      	cmp	r3, #115	@ 0x73
 8003f5e:	d905      	bls.n	8003f6c <HAL_DMA_Init+0x2b0>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	2b77      	cmp	r3, #119	@ 0x77
 8003f66:	d801      	bhi.n	8003f6c <HAL_DMA_Init+0x2b0>
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e000      	b.n	8003f6e <HAL_DMA_Init+0x2b2>
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d003      	beq.n	8003f7a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f78:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	697a      	ldr	r2, [r7, #20]
 8003f80:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	f023 0307 	bic.w	r3, r3, #7
 8003f90:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa0:	2b04      	cmp	r3, #4
 8003fa2:	d117      	bne.n	8003fd4 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fa8:	697a      	ldr	r2, [r7, #20]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00e      	beq.n	8003fd4 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f002 fbd4 	bl	8006764 <DMA_CheckFifoParam>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d008      	beq.n	8003fd4 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2240      	movs	r2, #64	@ 0x40
 8003fc6:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e1fd      	b.n	80043d0 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	697a      	ldr	r2, [r7, #20]
 8003fda:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f002 fb0f 	bl	8006600 <DMA_CalcBaseAndBitshift>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fea:	f003 031f 	and.w	r3, r3, #31
 8003fee:	223f      	movs	r2, #63	@ 0x3f
 8003ff0:	409a      	lsls	r2, r3
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	609a      	str	r2, [r3, #8]
 8003ff6:	e0fd      	b.n	80041f4 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a28      	ldr	r2, [pc, #160]	@ (80040a0 <HAL_DMA_Init+0x3e4>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d04a      	beq.n	8004098 <HAL_DMA_Init+0x3dc>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a27      	ldr	r2, [pc, #156]	@ (80040a4 <HAL_DMA_Init+0x3e8>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d045      	beq.n	8004098 <HAL_DMA_Init+0x3dc>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a25      	ldr	r2, [pc, #148]	@ (80040a8 <HAL_DMA_Init+0x3ec>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d040      	beq.n	8004098 <HAL_DMA_Init+0x3dc>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a24      	ldr	r2, [pc, #144]	@ (80040ac <HAL_DMA_Init+0x3f0>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d03b      	beq.n	8004098 <HAL_DMA_Init+0x3dc>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a22      	ldr	r2, [pc, #136]	@ (80040b0 <HAL_DMA_Init+0x3f4>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d036      	beq.n	8004098 <HAL_DMA_Init+0x3dc>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a21      	ldr	r2, [pc, #132]	@ (80040b4 <HAL_DMA_Init+0x3f8>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d031      	beq.n	8004098 <HAL_DMA_Init+0x3dc>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a1f      	ldr	r2, [pc, #124]	@ (80040b8 <HAL_DMA_Init+0x3fc>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d02c      	beq.n	8004098 <HAL_DMA_Init+0x3dc>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a1e      	ldr	r2, [pc, #120]	@ (80040bc <HAL_DMA_Init+0x400>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d027      	beq.n	8004098 <HAL_DMA_Init+0x3dc>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a1c      	ldr	r2, [pc, #112]	@ (80040c0 <HAL_DMA_Init+0x404>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d022      	beq.n	8004098 <HAL_DMA_Init+0x3dc>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a1b      	ldr	r2, [pc, #108]	@ (80040c4 <HAL_DMA_Init+0x408>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d01d      	beq.n	8004098 <HAL_DMA_Init+0x3dc>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a19      	ldr	r2, [pc, #100]	@ (80040c8 <HAL_DMA_Init+0x40c>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d018      	beq.n	8004098 <HAL_DMA_Init+0x3dc>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a18      	ldr	r2, [pc, #96]	@ (80040cc <HAL_DMA_Init+0x410>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d013      	beq.n	8004098 <HAL_DMA_Init+0x3dc>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a16      	ldr	r2, [pc, #88]	@ (80040d0 <HAL_DMA_Init+0x414>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d00e      	beq.n	8004098 <HAL_DMA_Init+0x3dc>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a15      	ldr	r2, [pc, #84]	@ (80040d4 <HAL_DMA_Init+0x418>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d009      	beq.n	8004098 <HAL_DMA_Init+0x3dc>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a13      	ldr	r2, [pc, #76]	@ (80040d8 <HAL_DMA_Init+0x41c>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d004      	beq.n	8004098 <HAL_DMA_Init+0x3dc>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a12      	ldr	r2, [pc, #72]	@ (80040dc <HAL_DMA_Init+0x420>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d123      	bne.n	80040e0 <HAL_DMA_Init+0x424>
 8004098:	2301      	movs	r3, #1
 800409a:	e022      	b.n	80040e2 <HAL_DMA_Init+0x426>
 800409c:	fe10803f 	.word	0xfe10803f
 80040a0:	48022c08 	.word	0x48022c08
 80040a4:	48022c1c 	.word	0x48022c1c
 80040a8:	48022c30 	.word	0x48022c30
 80040ac:	48022c44 	.word	0x48022c44
 80040b0:	48022c58 	.word	0x48022c58
 80040b4:	48022c6c 	.word	0x48022c6c
 80040b8:	48022c80 	.word	0x48022c80
 80040bc:	48022c94 	.word	0x48022c94
 80040c0:	58025408 	.word	0x58025408
 80040c4:	5802541c 	.word	0x5802541c
 80040c8:	58025430 	.word	0x58025430
 80040cc:	58025444 	.word	0x58025444
 80040d0:	58025458 	.word	0x58025458
 80040d4:	5802546c 	.word	0x5802546c
 80040d8:	58025480 	.word	0x58025480
 80040dc:	58025494 	.word	0x58025494
 80040e0:	2300      	movs	r3, #0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d07d      	beq.n	80041e2 <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a7f      	ldr	r2, [pc, #508]	@ (80042e8 <HAL_DMA_Init+0x62c>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d021      	beq.n	8004134 <HAL_DMA_Init+0x478>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a7d      	ldr	r2, [pc, #500]	@ (80042ec <HAL_DMA_Init+0x630>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d01c      	beq.n	8004134 <HAL_DMA_Init+0x478>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a7c      	ldr	r2, [pc, #496]	@ (80042f0 <HAL_DMA_Init+0x634>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d017      	beq.n	8004134 <HAL_DMA_Init+0x478>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a7a      	ldr	r2, [pc, #488]	@ (80042f4 <HAL_DMA_Init+0x638>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d012      	beq.n	8004134 <HAL_DMA_Init+0x478>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a79      	ldr	r2, [pc, #484]	@ (80042f8 <HAL_DMA_Init+0x63c>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d00d      	beq.n	8004134 <HAL_DMA_Init+0x478>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a77      	ldr	r2, [pc, #476]	@ (80042fc <HAL_DMA_Init+0x640>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d008      	beq.n	8004134 <HAL_DMA_Init+0x478>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a76      	ldr	r2, [pc, #472]	@ (8004300 <HAL_DMA_Init+0x644>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d003      	beq.n	8004134 <HAL_DMA_Init+0x478>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a74      	ldr	r2, [pc, #464]	@ (8004304 <HAL_DMA_Init+0x648>)
 8004132:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2202      	movs	r2, #2
 8004138:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800414c:	697a      	ldr	r2, [r7, #20]
 800414e:	4b6e      	ldr	r3, [pc, #440]	@ (8004308 <HAL_DMA_Init+0x64c>)
 8004150:	4013      	ands	r3, r2
 8004152:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	2b40      	cmp	r3, #64	@ 0x40
 800415a:	d008      	beq.n	800416e <HAL_DMA_Init+0x4b2>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	2b80      	cmp	r3, #128	@ 0x80
 8004162:	d102      	bne.n	800416a <HAL_DMA_Init+0x4ae>
 8004164:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004168:	e002      	b.n	8004170 <HAL_DMA_Init+0x4b4>
 800416a:	2300      	movs	r3, #0
 800416c:	e000      	b.n	8004170 <HAL_DMA_Init+0x4b4>
 800416e:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	68d2      	ldr	r2, [r2, #12]
 8004174:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004176:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800417e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	695b      	ldr	r3, [r3, #20]
 8004184:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004186:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	699b      	ldr	r3, [r3, #24]
 800418c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800418e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	69db      	ldr	r3, [r3, #28]
 8004194:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004196:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a1b      	ldr	r3, [r3, #32]
 800419c:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800419e:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80041a0:	697a      	ldr	r2, [r7, #20]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	697a      	ldr	r2, [r7, #20]
 80041ac:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	461a      	mov	r2, r3
 80041b4:	4b55      	ldr	r3, [pc, #340]	@ (800430c <HAL_DMA_Init+0x650>)
 80041b6:	4413      	add	r3, r2
 80041b8:	4a55      	ldr	r2, [pc, #340]	@ (8004310 <HAL_DMA_Init+0x654>)
 80041ba:	fba2 2303 	umull	r2, r3, r2, r3
 80041be:	091b      	lsrs	r3, r3, #4
 80041c0:	009a      	lsls	r2, r3, #2
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f002 fa1a 	bl	8006600 <DMA_CalcBaseAndBitshift>
 80041cc:	4603      	mov	r3, r0
 80041ce:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041d4:	f003 031f 	and.w	r3, r3, #31
 80041d8:	2201      	movs	r2, #1
 80041da:	409a      	lsls	r2, r3
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	605a      	str	r2, [r3, #4]
 80041e0:	e008      	b.n	80041f4 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2240      	movs	r2, #64	@ 0x40
 80041e6:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2203      	movs	r2, #3
 80041ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e0ed      	b.n	80043d0 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a46      	ldr	r2, [pc, #280]	@ (8004314 <HAL_DMA_Init+0x658>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d072      	beq.n	80042e4 <HAL_DMA_Init+0x628>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a45      	ldr	r2, [pc, #276]	@ (8004318 <HAL_DMA_Init+0x65c>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d06d      	beq.n	80042e4 <HAL_DMA_Init+0x628>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a43      	ldr	r2, [pc, #268]	@ (800431c <HAL_DMA_Init+0x660>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d068      	beq.n	80042e4 <HAL_DMA_Init+0x628>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a42      	ldr	r2, [pc, #264]	@ (8004320 <HAL_DMA_Init+0x664>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d063      	beq.n	80042e4 <HAL_DMA_Init+0x628>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a40      	ldr	r2, [pc, #256]	@ (8004324 <HAL_DMA_Init+0x668>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d05e      	beq.n	80042e4 <HAL_DMA_Init+0x628>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a3f      	ldr	r2, [pc, #252]	@ (8004328 <HAL_DMA_Init+0x66c>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d059      	beq.n	80042e4 <HAL_DMA_Init+0x628>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a3d      	ldr	r2, [pc, #244]	@ (800432c <HAL_DMA_Init+0x670>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d054      	beq.n	80042e4 <HAL_DMA_Init+0x628>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a3c      	ldr	r2, [pc, #240]	@ (8004330 <HAL_DMA_Init+0x674>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d04f      	beq.n	80042e4 <HAL_DMA_Init+0x628>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a3a      	ldr	r2, [pc, #232]	@ (8004334 <HAL_DMA_Init+0x678>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d04a      	beq.n	80042e4 <HAL_DMA_Init+0x628>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a39      	ldr	r2, [pc, #228]	@ (8004338 <HAL_DMA_Init+0x67c>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d045      	beq.n	80042e4 <HAL_DMA_Init+0x628>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a37      	ldr	r2, [pc, #220]	@ (800433c <HAL_DMA_Init+0x680>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d040      	beq.n	80042e4 <HAL_DMA_Init+0x628>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a36      	ldr	r2, [pc, #216]	@ (8004340 <HAL_DMA_Init+0x684>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d03b      	beq.n	80042e4 <HAL_DMA_Init+0x628>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a34      	ldr	r2, [pc, #208]	@ (8004344 <HAL_DMA_Init+0x688>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d036      	beq.n	80042e4 <HAL_DMA_Init+0x628>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a33      	ldr	r2, [pc, #204]	@ (8004348 <HAL_DMA_Init+0x68c>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d031      	beq.n	80042e4 <HAL_DMA_Init+0x628>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a31      	ldr	r2, [pc, #196]	@ (800434c <HAL_DMA_Init+0x690>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d02c      	beq.n	80042e4 <HAL_DMA_Init+0x628>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a30      	ldr	r2, [pc, #192]	@ (8004350 <HAL_DMA_Init+0x694>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d027      	beq.n	80042e4 <HAL_DMA_Init+0x628>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a13      	ldr	r2, [pc, #76]	@ (80042e8 <HAL_DMA_Init+0x62c>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d022      	beq.n	80042e4 <HAL_DMA_Init+0x628>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a12      	ldr	r2, [pc, #72]	@ (80042ec <HAL_DMA_Init+0x630>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d01d      	beq.n	80042e4 <HAL_DMA_Init+0x628>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a10      	ldr	r2, [pc, #64]	@ (80042f0 <HAL_DMA_Init+0x634>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d018      	beq.n	80042e4 <HAL_DMA_Init+0x628>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a0f      	ldr	r2, [pc, #60]	@ (80042f4 <HAL_DMA_Init+0x638>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d013      	beq.n	80042e4 <HAL_DMA_Init+0x628>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a0d      	ldr	r2, [pc, #52]	@ (80042f8 <HAL_DMA_Init+0x63c>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d00e      	beq.n	80042e4 <HAL_DMA_Init+0x628>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a0c      	ldr	r2, [pc, #48]	@ (80042fc <HAL_DMA_Init+0x640>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d009      	beq.n	80042e4 <HAL_DMA_Init+0x628>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a0a      	ldr	r2, [pc, #40]	@ (8004300 <HAL_DMA_Init+0x644>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d004      	beq.n	80042e4 <HAL_DMA_Init+0x628>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a09      	ldr	r2, [pc, #36]	@ (8004304 <HAL_DMA_Init+0x648>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d137      	bne.n	8004354 <HAL_DMA_Init+0x698>
 80042e4:	2301      	movs	r3, #1
 80042e6:	e036      	b.n	8004356 <HAL_DMA_Init+0x69a>
 80042e8:	58025408 	.word	0x58025408
 80042ec:	5802541c 	.word	0x5802541c
 80042f0:	58025430 	.word	0x58025430
 80042f4:	58025444 	.word	0x58025444
 80042f8:	58025458 	.word	0x58025458
 80042fc:	5802546c 	.word	0x5802546c
 8004300:	58025480 	.word	0x58025480
 8004304:	58025494 	.word	0x58025494
 8004308:	fffe000f 	.word	0xfffe000f
 800430c:	a7fdabf8 	.word	0xa7fdabf8
 8004310:	cccccccd 	.word	0xcccccccd
 8004314:	40020010 	.word	0x40020010
 8004318:	40020028 	.word	0x40020028
 800431c:	40020040 	.word	0x40020040
 8004320:	40020058 	.word	0x40020058
 8004324:	40020070 	.word	0x40020070
 8004328:	40020088 	.word	0x40020088
 800432c:	400200a0 	.word	0x400200a0
 8004330:	400200b8 	.word	0x400200b8
 8004334:	40020410 	.word	0x40020410
 8004338:	40020428 	.word	0x40020428
 800433c:	40020440 	.word	0x40020440
 8004340:	40020458 	.word	0x40020458
 8004344:	40020470 	.word	0x40020470
 8004348:	40020488 	.word	0x40020488
 800434c:	400204a0 	.word	0x400204a0
 8004350:	400204b8 	.word	0x400204b8
 8004354:	2300      	movs	r3, #0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d032      	beq.n	80043c0 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f002 fa7e 	bl	800685c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	2b80      	cmp	r3, #128	@ 0x80
 8004366:	d102      	bne.n	800436e <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685a      	ldr	r2, [r3, #4]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004376:	b2d2      	uxtb	r2, r2
 8004378:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004382:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d010      	beq.n	80043ae <HAL_DMA_Init+0x6f2>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	2b08      	cmp	r3, #8
 8004392:	d80c      	bhi.n	80043ae <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f002 fafb 	bl	8006990 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800439e:	2200      	movs	r2, #0
 80043a0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80043aa:	605a      	str	r2, [r3, #4]
 80043ac:	e008      	b.n	80043c0 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2201      	movs	r2, #1
 80043ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80043ce:	2300      	movs	r3, #0
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3718      	adds	r7, #24
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b086      	sub	sp, #24
 80043dc:	af00      	add	r7, sp, #0
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	60b9      	str	r1, [r7, #8]
 80043e2:	607a      	str	r2, [r7, #4]
 80043e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043e6:	2300      	movs	r3, #0
 80043e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d101      	bne.n	80043f4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e226      	b.n	8004842 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d101      	bne.n	8004402 <HAL_DMA_Start_IT+0x2a>
 80043fe:	2302      	movs	r3, #2
 8004400:	e21f      	b.n	8004842 <HAL_DMA_Start_IT+0x46a>
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2201      	movs	r2, #1
 8004406:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b01      	cmp	r3, #1
 8004414:	f040 820a 	bne.w	800482c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2202      	movs	r2, #2
 800441c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a68      	ldr	r2, [pc, #416]	@ (80045cc <HAL_DMA_Start_IT+0x1f4>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d04a      	beq.n	80044c6 <HAL_DMA_Start_IT+0xee>
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a66      	ldr	r2, [pc, #408]	@ (80045d0 <HAL_DMA_Start_IT+0x1f8>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d045      	beq.n	80044c6 <HAL_DMA_Start_IT+0xee>
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a65      	ldr	r2, [pc, #404]	@ (80045d4 <HAL_DMA_Start_IT+0x1fc>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d040      	beq.n	80044c6 <HAL_DMA_Start_IT+0xee>
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a63      	ldr	r2, [pc, #396]	@ (80045d8 <HAL_DMA_Start_IT+0x200>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d03b      	beq.n	80044c6 <HAL_DMA_Start_IT+0xee>
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a62      	ldr	r2, [pc, #392]	@ (80045dc <HAL_DMA_Start_IT+0x204>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d036      	beq.n	80044c6 <HAL_DMA_Start_IT+0xee>
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a60      	ldr	r2, [pc, #384]	@ (80045e0 <HAL_DMA_Start_IT+0x208>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d031      	beq.n	80044c6 <HAL_DMA_Start_IT+0xee>
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a5f      	ldr	r2, [pc, #380]	@ (80045e4 <HAL_DMA_Start_IT+0x20c>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d02c      	beq.n	80044c6 <HAL_DMA_Start_IT+0xee>
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a5d      	ldr	r2, [pc, #372]	@ (80045e8 <HAL_DMA_Start_IT+0x210>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d027      	beq.n	80044c6 <HAL_DMA_Start_IT+0xee>
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a5c      	ldr	r2, [pc, #368]	@ (80045ec <HAL_DMA_Start_IT+0x214>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d022      	beq.n	80044c6 <HAL_DMA_Start_IT+0xee>
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a5a      	ldr	r2, [pc, #360]	@ (80045f0 <HAL_DMA_Start_IT+0x218>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d01d      	beq.n	80044c6 <HAL_DMA_Start_IT+0xee>
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a59      	ldr	r2, [pc, #356]	@ (80045f4 <HAL_DMA_Start_IT+0x21c>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d018      	beq.n	80044c6 <HAL_DMA_Start_IT+0xee>
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a57      	ldr	r2, [pc, #348]	@ (80045f8 <HAL_DMA_Start_IT+0x220>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d013      	beq.n	80044c6 <HAL_DMA_Start_IT+0xee>
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a56      	ldr	r2, [pc, #344]	@ (80045fc <HAL_DMA_Start_IT+0x224>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d00e      	beq.n	80044c6 <HAL_DMA_Start_IT+0xee>
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a54      	ldr	r2, [pc, #336]	@ (8004600 <HAL_DMA_Start_IT+0x228>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d009      	beq.n	80044c6 <HAL_DMA_Start_IT+0xee>
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a53      	ldr	r2, [pc, #332]	@ (8004604 <HAL_DMA_Start_IT+0x22c>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d004      	beq.n	80044c6 <HAL_DMA_Start_IT+0xee>
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a51      	ldr	r2, [pc, #324]	@ (8004608 <HAL_DMA_Start_IT+0x230>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d108      	bne.n	80044d8 <HAL_DMA_Start_IT+0x100>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f022 0201 	bic.w	r2, r2, #1
 80044d4:	601a      	str	r2, [r3, #0]
 80044d6:	e007      	b.n	80044e8 <HAL_DMA_Start_IT+0x110>
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f022 0201 	bic.w	r2, r2, #1
 80044e6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	68b9      	ldr	r1, [r7, #8]
 80044ee:	68f8      	ldr	r0, [r7, #12]
 80044f0:	f001 fea2 	bl	8006238 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a34      	ldr	r2, [pc, #208]	@ (80045cc <HAL_DMA_Start_IT+0x1f4>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d04a      	beq.n	8004594 <HAL_DMA_Start_IT+0x1bc>
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a33      	ldr	r2, [pc, #204]	@ (80045d0 <HAL_DMA_Start_IT+0x1f8>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d045      	beq.n	8004594 <HAL_DMA_Start_IT+0x1bc>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a31      	ldr	r2, [pc, #196]	@ (80045d4 <HAL_DMA_Start_IT+0x1fc>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d040      	beq.n	8004594 <HAL_DMA_Start_IT+0x1bc>
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a30      	ldr	r2, [pc, #192]	@ (80045d8 <HAL_DMA_Start_IT+0x200>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d03b      	beq.n	8004594 <HAL_DMA_Start_IT+0x1bc>
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a2e      	ldr	r2, [pc, #184]	@ (80045dc <HAL_DMA_Start_IT+0x204>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d036      	beq.n	8004594 <HAL_DMA_Start_IT+0x1bc>
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a2d      	ldr	r2, [pc, #180]	@ (80045e0 <HAL_DMA_Start_IT+0x208>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d031      	beq.n	8004594 <HAL_DMA_Start_IT+0x1bc>
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a2b      	ldr	r2, [pc, #172]	@ (80045e4 <HAL_DMA_Start_IT+0x20c>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d02c      	beq.n	8004594 <HAL_DMA_Start_IT+0x1bc>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a2a      	ldr	r2, [pc, #168]	@ (80045e8 <HAL_DMA_Start_IT+0x210>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d027      	beq.n	8004594 <HAL_DMA_Start_IT+0x1bc>
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a28      	ldr	r2, [pc, #160]	@ (80045ec <HAL_DMA_Start_IT+0x214>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d022      	beq.n	8004594 <HAL_DMA_Start_IT+0x1bc>
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a27      	ldr	r2, [pc, #156]	@ (80045f0 <HAL_DMA_Start_IT+0x218>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d01d      	beq.n	8004594 <HAL_DMA_Start_IT+0x1bc>
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a25      	ldr	r2, [pc, #148]	@ (80045f4 <HAL_DMA_Start_IT+0x21c>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d018      	beq.n	8004594 <HAL_DMA_Start_IT+0x1bc>
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a24      	ldr	r2, [pc, #144]	@ (80045f8 <HAL_DMA_Start_IT+0x220>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d013      	beq.n	8004594 <HAL_DMA_Start_IT+0x1bc>
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a22      	ldr	r2, [pc, #136]	@ (80045fc <HAL_DMA_Start_IT+0x224>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d00e      	beq.n	8004594 <HAL_DMA_Start_IT+0x1bc>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a21      	ldr	r2, [pc, #132]	@ (8004600 <HAL_DMA_Start_IT+0x228>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d009      	beq.n	8004594 <HAL_DMA_Start_IT+0x1bc>
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a1f      	ldr	r2, [pc, #124]	@ (8004604 <HAL_DMA_Start_IT+0x22c>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d004      	beq.n	8004594 <HAL_DMA_Start_IT+0x1bc>
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a1e      	ldr	r2, [pc, #120]	@ (8004608 <HAL_DMA_Start_IT+0x230>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d101      	bne.n	8004598 <HAL_DMA_Start_IT+0x1c0>
 8004594:	2301      	movs	r3, #1
 8004596:	e000      	b.n	800459a <HAL_DMA_Start_IT+0x1c2>
 8004598:	2300      	movs	r3, #0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d036      	beq.n	800460c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f023 021e 	bic.w	r2, r3, #30
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f042 0216 	orr.w	r2, r2, #22
 80045b0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d03e      	beq.n	8004638 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f042 0208 	orr.w	r2, r2, #8
 80045c8:	601a      	str	r2, [r3, #0]
 80045ca:	e035      	b.n	8004638 <HAL_DMA_Start_IT+0x260>
 80045cc:	40020010 	.word	0x40020010
 80045d0:	40020028 	.word	0x40020028
 80045d4:	40020040 	.word	0x40020040
 80045d8:	40020058 	.word	0x40020058
 80045dc:	40020070 	.word	0x40020070
 80045e0:	40020088 	.word	0x40020088
 80045e4:	400200a0 	.word	0x400200a0
 80045e8:	400200b8 	.word	0x400200b8
 80045ec:	40020410 	.word	0x40020410
 80045f0:	40020428 	.word	0x40020428
 80045f4:	40020440 	.word	0x40020440
 80045f8:	40020458 	.word	0x40020458
 80045fc:	40020470 	.word	0x40020470
 8004600:	40020488 	.word	0x40020488
 8004604:	400204a0 	.word	0x400204a0
 8004608:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f023 020e 	bic.w	r2, r3, #14
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f042 020a 	orr.w	r2, r2, #10
 800461e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004624:	2b00      	cmp	r3, #0
 8004626:	d007      	beq.n	8004638 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f042 0204 	orr.w	r2, r2, #4
 8004636:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a83      	ldr	r2, [pc, #524]	@ (800484c <HAL_DMA_Start_IT+0x474>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d072      	beq.n	8004728 <HAL_DMA_Start_IT+0x350>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a82      	ldr	r2, [pc, #520]	@ (8004850 <HAL_DMA_Start_IT+0x478>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d06d      	beq.n	8004728 <HAL_DMA_Start_IT+0x350>
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a80      	ldr	r2, [pc, #512]	@ (8004854 <HAL_DMA_Start_IT+0x47c>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d068      	beq.n	8004728 <HAL_DMA_Start_IT+0x350>
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a7f      	ldr	r2, [pc, #508]	@ (8004858 <HAL_DMA_Start_IT+0x480>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d063      	beq.n	8004728 <HAL_DMA_Start_IT+0x350>
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a7d      	ldr	r2, [pc, #500]	@ (800485c <HAL_DMA_Start_IT+0x484>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d05e      	beq.n	8004728 <HAL_DMA_Start_IT+0x350>
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a7c      	ldr	r2, [pc, #496]	@ (8004860 <HAL_DMA_Start_IT+0x488>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d059      	beq.n	8004728 <HAL_DMA_Start_IT+0x350>
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a7a      	ldr	r2, [pc, #488]	@ (8004864 <HAL_DMA_Start_IT+0x48c>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d054      	beq.n	8004728 <HAL_DMA_Start_IT+0x350>
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a79      	ldr	r2, [pc, #484]	@ (8004868 <HAL_DMA_Start_IT+0x490>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d04f      	beq.n	8004728 <HAL_DMA_Start_IT+0x350>
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a77      	ldr	r2, [pc, #476]	@ (800486c <HAL_DMA_Start_IT+0x494>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d04a      	beq.n	8004728 <HAL_DMA_Start_IT+0x350>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a76      	ldr	r2, [pc, #472]	@ (8004870 <HAL_DMA_Start_IT+0x498>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d045      	beq.n	8004728 <HAL_DMA_Start_IT+0x350>
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a74      	ldr	r2, [pc, #464]	@ (8004874 <HAL_DMA_Start_IT+0x49c>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d040      	beq.n	8004728 <HAL_DMA_Start_IT+0x350>
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a73      	ldr	r2, [pc, #460]	@ (8004878 <HAL_DMA_Start_IT+0x4a0>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d03b      	beq.n	8004728 <HAL_DMA_Start_IT+0x350>
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a71      	ldr	r2, [pc, #452]	@ (800487c <HAL_DMA_Start_IT+0x4a4>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d036      	beq.n	8004728 <HAL_DMA_Start_IT+0x350>
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a70      	ldr	r2, [pc, #448]	@ (8004880 <HAL_DMA_Start_IT+0x4a8>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d031      	beq.n	8004728 <HAL_DMA_Start_IT+0x350>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a6e      	ldr	r2, [pc, #440]	@ (8004884 <HAL_DMA_Start_IT+0x4ac>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d02c      	beq.n	8004728 <HAL_DMA_Start_IT+0x350>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a6d      	ldr	r2, [pc, #436]	@ (8004888 <HAL_DMA_Start_IT+0x4b0>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d027      	beq.n	8004728 <HAL_DMA_Start_IT+0x350>
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a6b      	ldr	r2, [pc, #428]	@ (800488c <HAL_DMA_Start_IT+0x4b4>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d022      	beq.n	8004728 <HAL_DMA_Start_IT+0x350>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a6a      	ldr	r2, [pc, #424]	@ (8004890 <HAL_DMA_Start_IT+0x4b8>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d01d      	beq.n	8004728 <HAL_DMA_Start_IT+0x350>
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a68      	ldr	r2, [pc, #416]	@ (8004894 <HAL_DMA_Start_IT+0x4bc>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d018      	beq.n	8004728 <HAL_DMA_Start_IT+0x350>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a67      	ldr	r2, [pc, #412]	@ (8004898 <HAL_DMA_Start_IT+0x4c0>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d013      	beq.n	8004728 <HAL_DMA_Start_IT+0x350>
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a65      	ldr	r2, [pc, #404]	@ (800489c <HAL_DMA_Start_IT+0x4c4>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d00e      	beq.n	8004728 <HAL_DMA_Start_IT+0x350>
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a64      	ldr	r2, [pc, #400]	@ (80048a0 <HAL_DMA_Start_IT+0x4c8>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d009      	beq.n	8004728 <HAL_DMA_Start_IT+0x350>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a62      	ldr	r2, [pc, #392]	@ (80048a4 <HAL_DMA_Start_IT+0x4cc>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d004      	beq.n	8004728 <HAL_DMA_Start_IT+0x350>
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a61      	ldr	r2, [pc, #388]	@ (80048a8 <HAL_DMA_Start_IT+0x4d0>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d101      	bne.n	800472c <HAL_DMA_Start_IT+0x354>
 8004728:	2301      	movs	r3, #1
 800472a:	e000      	b.n	800472e <HAL_DMA_Start_IT+0x356>
 800472c:	2300      	movs	r3, #0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d01a      	beq.n	8004768 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d007      	beq.n	8004750 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800474a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800474e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004754:	2b00      	cmp	r3, #0
 8004756:	d007      	beq.n	8004768 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004762:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004766:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a37      	ldr	r2, [pc, #220]	@ (800484c <HAL_DMA_Start_IT+0x474>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d04a      	beq.n	8004808 <HAL_DMA_Start_IT+0x430>
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a36      	ldr	r2, [pc, #216]	@ (8004850 <HAL_DMA_Start_IT+0x478>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d045      	beq.n	8004808 <HAL_DMA_Start_IT+0x430>
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a34      	ldr	r2, [pc, #208]	@ (8004854 <HAL_DMA_Start_IT+0x47c>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d040      	beq.n	8004808 <HAL_DMA_Start_IT+0x430>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a33      	ldr	r2, [pc, #204]	@ (8004858 <HAL_DMA_Start_IT+0x480>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d03b      	beq.n	8004808 <HAL_DMA_Start_IT+0x430>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a31      	ldr	r2, [pc, #196]	@ (800485c <HAL_DMA_Start_IT+0x484>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d036      	beq.n	8004808 <HAL_DMA_Start_IT+0x430>
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a30      	ldr	r2, [pc, #192]	@ (8004860 <HAL_DMA_Start_IT+0x488>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d031      	beq.n	8004808 <HAL_DMA_Start_IT+0x430>
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a2e      	ldr	r2, [pc, #184]	@ (8004864 <HAL_DMA_Start_IT+0x48c>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d02c      	beq.n	8004808 <HAL_DMA_Start_IT+0x430>
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a2d      	ldr	r2, [pc, #180]	@ (8004868 <HAL_DMA_Start_IT+0x490>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d027      	beq.n	8004808 <HAL_DMA_Start_IT+0x430>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a2b      	ldr	r2, [pc, #172]	@ (800486c <HAL_DMA_Start_IT+0x494>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d022      	beq.n	8004808 <HAL_DMA_Start_IT+0x430>
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a2a      	ldr	r2, [pc, #168]	@ (8004870 <HAL_DMA_Start_IT+0x498>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d01d      	beq.n	8004808 <HAL_DMA_Start_IT+0x430>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a28      	ldr	r2, [pc, #160]	@ (8004874 <HAL_DMA_Start_IT+0x49c>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d018      	beq.n	8004808 <HAL_DMA_Start_IT+0x430>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a27      	ldr	r2, [pc, #156]	@ (8004878 <HAL_DMA_Start_IT+0x4a0>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d013      	beq.n	8004808 <HAL_DMA_Start_IT+0x430>
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a25      	ldr	r2, [pc, #148]	@ (800487c <HAL_DMA_Start_IT+0x4a4>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d00e      	beq.n	8004808 <HAL_DMA_Start_IT+0x430>
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a24      	ldr	r2, [pc, #144]	@ (8004880 <HAL_DMA_Start_IT+0x4a8>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d009      	beq.n	8004808 <HAL_DMA_Start_IT+0x430>
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a22      	ldr	r2, [pc, #136]	@ (8004884 <HAL_DMA_Start_IT+0x4ac>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d004      	beq.n	8004808 <HAL_DMA_Start_IT+0x430>
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a21      	ldr	r2, [pc, #132]	@ (8004888 <HAL_DMA_Start_IT+0x4b0>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d108      	bne.n	800481a <HAL_DMA_Start_IT+0x442>
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f042 0201 	orr.w	r2, r2, #1
 8004816:	601a      	str	r2, [r3, #0]
 8004818:	e012      	b.n	8004840 <HAL_DMA_Start_IT+0x468>
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f042 0201 	orr.w	r2, r2, #1
 8004828:	601a      	str	r2, [r3, #0]
 800482a:	e009      	b.n	8004840 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004832:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2200      	movs	r2, #0
 8004838:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004840:	7dfb      	ldrb	r3, [r7, #23]
}
 8004842:	4618      	mov	r0, r3
 8004844:	3718      	adds	r7, #24
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	40020010 	.word	0x40020010
 8004850:	40020028 	.word	0x40020028
 8004854:	40020040 	.word	0x40020040
 8004858:	40020058 	.word	0x40020058
 800485c:	40020070 	.word	0x40020070
 8004860:	40020088 	.word	0x40020088
 8004864:	400200a0 	.word	0x400200a0
 8004868:	400200b8 	.word	0x400200b8
 800486c:	40020410 	.word	0x40020410
 8004870:	40020428 	.word	0x40020428
 8004874:	40020440 	.word	0x40020440
 8004878:	40020458 	.word	0x40020458
 800487c:	40020470 	.word	0x40020470
 8004880:	40020488 	.word	0x40020488
 8004884:	400204a0 	.word	0x400204a0
 8004888:	400204b8 	.word	0x400204b8
 800488c:	58025408 	.word	0x58025408
 8004890:	5802541c 	.word	0x5802541c
 8004894:	58025430 	.word	0x58025430
 8004898:	58025444 	.word	0x58025444
 800489c:	58025458 	.word	0x58025458
 80048a0:	5802546c 	.word	0x5802546c
 80048a4:	58025480 	.word	0x58025480
 80048a8:	58025494 	.word	0x58025494

080048ac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b086      	sub	sp, #24
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80048b4:	f7ff f84a 	bl	800394c <HAL_GetTick>
 80048b8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d101      	bne.n	80048c4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e2dc      	b.n	8004e7e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d008      	beq.n	80048e2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2280      	movs	r2, #128	@ 0x80
 80048d4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e2cd      	b.n	8004e7e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a76      	ldr	r2, [pc, #472]	@ (8004ac0 <HAL_DMA_Abort+0x214>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d04a      	beq.n	8004982 <HAL_DMA_Abort+0xd6>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a74      	ldr	r2, [pc, #464]	@ (8004ac4 <HAL_DMA_Abort+0x218>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d045      	beq.n	8004982 <HAL_DMA_Abort+0xd6>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a73      	ldr	r2, [pc, #460]	@ (8004ac8 <HAL_DMA_Abort+0x21c>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d040      	beq.n	8004982 <HAL_DMA_Abort+0xd6>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a71      	ldr	r2, [pc, #452]	@ (8004acc <HAL_DMA_Abort+0x220>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d03b      	beq.n	8004982 <HAL_DMA_Abort+0xd6>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a70      	ldr	r2, [pc, #448]	@ (8004ad0 <HAL_DMA_Abort+0x224>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d036      	beq.n	8004982 <HAL_DMA_Abort+0xd6>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a6e      	ldr	r2, [pc, #440]	@ (8004ad4 <HAL_DMA_Abort+0x228>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d031      	beq.n	8004982 <HAL_DMA_Abort+0xd6>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a6d      	ldr	r2, [pc, #436]	@ (8004ad8 <HAL_DMA_Abort+0x22c>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d02c      	beq.n	8004982 <HAL_DMA_Abort+0xd6>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a6b      	ldr	r2, [pc, #428]	@ (8004adc <HAL_DMA_Abort+0x230>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d027      	beq.n	8004982 <HAL_DMA_Abort+0xd6>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a6a      	ldr	r2, [pc, #424]	@ (8004ae0 <HAL_DMA_Abort+0x234>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d022      	beq.n	8004982 <HAL_DMA_Abort+0xd6>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a68      	ldr	r2, [pc, #416]	@ (8004ae4 <HAL_DMA_Abort+0x238>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d01d      	beq.n	8004982 <HAL_DMA_Abort+0xd6>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a67      	ldr	r2, [pc, #412]	@ (8004ae8 <HAL_DMA_Abort+0x23c>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d018      	beq.n	8004982 <HAL_DMA_Abort+0xd6>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a65      	ldr	r2, [pc, #404]	@ (8004aec <HAL_DMA_Abort+0x240>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d013      	beq.n	8004982 <HAL_DMA_Abort+0xd6>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a64      	ldr	r2, [pc, #400]	@ (8004af0 <HAL_DMA_Abort+0x244>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d00e      	beq.n	8004982 <HAL_DMA_Abort+0xd6>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a62      	ldr	r2, [pc, #392]	@ (8004af4 <HAL_DMA_Abort+0x248>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d009      	beq.n	8004982 <HAL_DMA_Abort+0xd6>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a61      	ldr	r2, [pc, #388]	@ (8004af8 <HAL_DMA_Abort+0x24c>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d004      	beq.n	8004982 <HAL_DMA_Abort+0xd6>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a5f      	ldr	r2, [pc, #380]	@ (8004afc <HAL_DMA_Abort+0x250>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d101      	bne.n	8004986 <HAL_DMA_Abort+0xda>
 8004982:	2301      	movs	r3, #1
 8004984:	e000      	b.n	8004988 <HAL_DMA_Abort+0xdc>
 8004986:	2300      	movs	r3, #0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d013      	beq.n	80049b4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f022 021e 	bic.w	r2, r2, #30
 800499a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	695a      	ldr	r2, [r3, #20]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80049aa:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	617b      	str	r3, [r7, #20]
 80049b2:	e00a      	b.n	80049ca <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f022 020e 	bic.w	r2, r2, #14
 80049c2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a3c      	ldr	r2, [pc, #240]	@ (8004ac0 <HAL_DMA_Abort+0x214>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d072      	beq.n	8004aba <HAL_DMA_Abort+0x20e>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a3a      	ldr	r2, [pc, #232]	@ (8004ac4 <HAL_DMA_Abort+0x218>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d06d      	beq.n	8004aba <HAL_DMA_Abort+0x20e>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a39      	ldr	r2, [pc, #228]	@ (8004ac8 <HAL_DMA_Abort+0x21c>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d068      	beq.n	8004aba <HAL_DMA_Abort+0x20e>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a37      	ldr	r2, [pc, #220]	@ (8004acc <HAL_DMA_Abort+0x220>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d063      	beq.n	8004aba <HAL_DMA_Abort+0x20e>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a36      	ldr	r2, [pc, #216]	@ (8004ad0 <HAL_DMA_Abort+0x224>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d05e      	beq.n	8004aba <HAL_DMA_Abort+0x20e>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a34      	ldr	r2, [pc, #208]	@ (8004ad4 <HAL_DMA_Abort+0x228>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d059      	beq.n	8004aba <HAL_DMA_Abort+0x20e>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a33      	ldr	r2, [pc, #204]	@ (8004ad8 <HAL_DMA_Abort+0x22c>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d054      	beq.n	8004aba <HAL_DMA_Abort+0x20e>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a31      	ldr	r2, [pc, #196]	@ (8004adc <HAL_DMA_Abort+0x230>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d04f      	beq.n	8004aba <HAL_DMA_Abort+0x20e>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a30      	ldr	r2, [pc, #192]	@ (8004ae0 <HAL_DMA_Abort+0x234>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d04a      	beq.n	8004aba <HAL_DMA_Abort+0x20e>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a2e      	ldr	r2, [pc, #184]	@ (8004ae4 <HAL_DMA_Abort+0x238>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d045      	beq.n	8004aba <HAL_DMA_Abort+0x20e>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a2d      	ldr	r2, [pc, #180]	@ (8004ae8 <HAL_DMA_Abort+0x23c>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d040      	beq.n	8004aba <HAL_DMA_Abort+0x20e>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a2b      	ldr	r2, [pc, #172]	@ (8004aec <HAL_DMA_Abort+0x240>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d03b      	beq.n	8004aba <HAL_DMA_Abort+0x20e>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a2a      	ldr	r2, [pc, #168]	@ (8004af0 <HAL_DMA_Abort+0x244>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d036      	beq.n	8004aba <HAL_DMA_Abort+0x20e>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a28      	ldr	r2, [pc, #160]	@ (8004af4 <HAL_DMA_Abort+0x248>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d031      	beq.n	8004aba <HAL_DMA_Abort+0x20e>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a27      	ldr	r2, [pc, #156]	@ (8004af8 <HAL_DMA_Abort+0x24c>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d02c      	beq.n	8004aba <HAL_DMA_Abort+0x20e>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a25      	ldr	r2, [pc, #148]	@ (8004afc <HAL_DMA_Abort+0x250>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d027      	beq.n	8004aba <HAL_DMA_Abort+0x20e>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a24      	ldr	r2, [pc, #144]	@ (8004b00 <HAL_DMA_Abort+0x254>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d022      	beq.n	8004aba <HAL_DMA_Abort+0x20e>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a22      	ldr	r2, [pc, #136]	@ (8004b04 <HAL_DMA_Abort+0x258>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d01d      	beq.n	8004aba <HAL_DMA_Abort+0x20e>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a21      	ldr	r2, [pc, #132]	@ (8004b08 <HAL_DMA_Abort+0x25c>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d018      	beq.n	8004aba <HAL_DMA_Abort+0x20e>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a1f      	ldr	r2, [pc, #124]	@ (8004b0c <HAL_DMA_Abort+0x260>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d013      	beq.n	8004aba <HAL_DMA_Abort+0x20e>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a1e      	ldr	r2, [pc, #120]	@ (8004b10 <HAL_DMA_Abort+0x264>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d00e      	beq.n	8004aba <HAL_DMA_Abort+0x20e>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a1c      	ldr	r2, [pc, #112]	@ (8004b14 <HAL_DMA_Abort+0x268>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d009      	beq.n	8004aba <HAL_DMA_Abort+0x20e>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a1b      	ldr	r2, [pc, #108]	@ (8004b18 <HAL_DMA_Abort+0x26c>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d004      	beq.n	8004aba <HAL_DMA_Abort+0x20e>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a19      	ldr	r2, [pc, #100]	@ (8004b1c <HAL_DMA_Abort+0x270>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d132      	bne.n	8004b20 <HAL_DMA_Abort+0x274>
 8004aba:	2301      	movs	r3, #1
 8004abc:	e031      	b.n	8004b22 <HAL_DMA_Abort+0x276>
 8004abe:	bf00      	nop
 8004ac0:	40020010 	.word	0x40020010
 8004ac4:	40020028 	.word	0x40020028
 8004ac8:	40020040 	.word	0x40020040
 8004acc:	40020058 	.word	0x40020058
 8004ad0:	40020070 	.word	0x40020070
 8004ad4:	40020088 	.word	0x40020088
 8004ad8:	400200a0 	.word	0x400200a0
 8004adc:	400200b8 	.word	0x400200b8
 8004ae0:	40020410 	.word	0x40020410
 8004ae4:	40020428 	.word	0x40020428
 8004ae8:	40020440 	.word	0x40020440
 8004aec:	40020458 	.word	0x40020458
 8004af0:	40020470 	.word	0x40020470
 8004af4:	40020488 	.word	0x40020488
 8004af8:	400204a0 	.word	0x400204a0
 8004afc:	400204b8 	.word	0x400204b8
 8004b00:	58025408 	.word	0x58025408
 8004b04:	5802541c 	.word	0x5802541c
 8004b08:	58025430 	.word	0x58025430
 8004b0c:	58025444 	.word	0x58025444
 8004b10:	58025458 	.word	0x58025458
 8004b14:	5802546c 	.word	0x5802546c
 8004b18:	58025480 	.word	0x58025480
 8004b1c:	58025494 	.word	0x58025494
 8004b20:	2300      	movs	r3, #0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d007      	beq.n	8004b36 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b30:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b34:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a6d      	ldr	r2, [pc, #436]	@ (8004cf0 <HAL_DMA_Abort+0x444>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d04a      	beq.n	8004bd6 <HAL_DMA_Abort+0x32a>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a6b      	ldr	r2, [pc, #428]	@ (8004cf4 <HAL_DMA_Abort+0x448>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d045      	beq.n	8004bd6 <HAL_DMA_Abort+0x32a>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a6a      	ldr	r2, [pc, #424]	@ (8004cf8 <HAL_DMA_Abort+0x44c>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d040      	beq.n	8004bd6 <HAL_DMA_Abort+0x32a>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a68      	ldr	r2, [pc, #416]	@ (8004cfc <HAL_DMA_Abort+0x450>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d03b      	beq.n	8004bd6 <HAL_DMA_Abort+0x32a>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a67      	ldr	r2, [pc, #412]	@ (8004d00 <HAL_DMA_Abort+0x454>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d036      	beq.n	8004bd6 <HAL_DMA_Abort+0x32a>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a65      	ldr	r2, [pc, #404]	@ (8004d04 <HAL_DMA_Abort+0x458>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d031      	beq.n	8004bd6 <HAL_DMA_Abort+0x32a>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a64      	ldr	r2, [pc, #400]	@ (8004d08 <HAL_DMA_Abort+0x45c>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d02c      	beq.n	8004bd6 <HAL_DMA_Abort+0x32a>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a62      	ldr	r2, [pc, #392]	@ (8004d0c <HAL_DMA_Abort+0x460>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d027      	beq.n	8004bd6 <HAL_DMA_Abort+0x32a>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a61      	ldr	r2, [pc, #388]	@ (8004d10 <HAL_DMA_Abort+0x464>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d022      	beq.n	8004bd6 <HAL_DMA_Abort+0x32a>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a5f      	ldr	r2, [pc, #380]	@ (8004d14 <HAL_DMA_Abort+0x468>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d01d      	beq.n	8004bd6 <HAL_DMA_Abort+0x32a>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a5e      	ldr	r2, [pc, #376]	@ (8004d18 <HAL_DMA_Abort+0x46c>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d018      	beq.n	8004bd6 <HAL_DMA_Abort+0x32a>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a5c      	ldr	r2, [pc, #368]	@ (8004d1c <HAL_DMA_Abort+0x470>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d013      	beq.n	8004bd6 <HAL_DMA_Abort+0x32a>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a5b      	ldr	r2, [pc, #364]	@ (8004d20 <HAL_DMA_Abort+0x474>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d00e      	beq.n	8004bd6 <HAL_DMA_Abort+0x32a>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a59      	ldr	r2, [pc, #356]	@ (8004d24 <HAL_DMA_Abort+0x478>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d009      	beq.n	8004bd6 <HAL_DMA_Abort+0x32a>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a58      	ldr	r2, [pc, #352]	@ (8004d28 <HAL_DMA_Abort+0x47c>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d004      	beq.n	8004bd6 <HAL_DMA_Abort+0x32a>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a56      	ldr	r2, [pc, #344]	@ (8004d2c <HAL_DMA_Abort+0x480>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d108      	bne.n	8004be8 <HAL_DMA_Abort+0x33c>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f022 0201 	bic.w	r2, r2, #1
 8004be4:	601a      	str	r2, [r3, #0]
 8004be6:	e007      	b.n	8004bf8 <HAL_DMA_Abort+0x34c>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f022 0201 	bic.w	r2, r2, #1
 8004bf6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004bf8:	e013      	b.n	8004c22 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004bfa:	f7fe fea7 	bl	800394c <HAL_GetTick>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	2b05      	cmp	r3, #5
 8004c06:	d90c      	bls.n	8004c22 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2220      	movs	r2, #32
 8004c0c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2203      	movs	r2, #3
 8004c12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e12d      	b.n	8004e7e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0301 	and.w	r3, r3, #1
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d1e5      	bne.n	8004bfa <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a2f      	ldr	r2, [pc, #188]	@ (8004cf0 <HAL_DMA_Abort+0x444>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d04a      	beq.n	8004cce <HAL_DMA_Abort+0x422>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a2d      	ldr	r2, [pc, #180]	@ (8004cf4 <HAL_DMA_Abort+0x448>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d045      	beq.n	8004cce <HAL_DMA_Abort+0x422>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a2c      	ldr	r2, [pc, #176]	@ (8004cf8 <HAL_DMA_Abort+0x44c>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d040      	beq.n	8004cce <HAL_DMA_Abort+0x422>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a2a      	ldr	r2, [pc, #168]	@ (8004cfc <HAL_DMA_Abort+0x450>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d03b      	beq.n	8004cce <HAL_DMA_Abort+0x422>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a29      	ldr	r2, [pc, #164]	@ (8004d00 <HAL_DMA_Abort+0x454>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d036      	beq.n	8004cce <HAL_DMA_Abort+0x422>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a27      	ldr	r2, [pc, #156]	@ (8004d04 <HAL_DMA_Abort+0x458>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d031      	beq.n	8004cce <HAL_DMA_Abort+0x422>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a26      	ldr	r2, [pc, #152]	@ (8004d08 <HAL_DMA_Abort+0x45c>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d02c      	beq.n	8004cce <HAL_DMA_Abort+0x422>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a24      	ldr	r2, [pc, #144]	@ (8004d0c <HAL_DMA_Abort+0x460>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d027      	beq.n	8004cce <HAL_DMA_Abort+0x422>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a23      	ldr	r2, [pc, #140]	@ (8004d10 <HAL_DMA_Abort+0x464>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d022      	beq.n	8004cce <HAL_DMA_Abort+0x422>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a21      	ldr	r2, [pc, #132]	@ (8004d14 <HAL_DMA_Abort+0x468>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d01d      	beq.n	8004cce <HAL_DMA_Abort+0x422>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a20      	ldr	r2, [pc, #128]	@ (8004d18 <HAL_DMA_Abort+0x46c>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d018      	beq.n	8004cce <HAL_DMA_Abort+0x422>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a1e      	ldr	r2, [pc, #120]	@ (8004d1c <HAL_DMA_Abort+0x470>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d013      	beq.n	8004cce <HAL_DMA_Abort+0x422>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a1d      	ldr	r2, [pc, #116]	@ (8004d20 <HAL_DMA_Abort+0x474>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d00e      	beq.n	8004cce <HAL_DMA_Abort+0x422>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a1b      	ldr	r2, [pc, #108]	@ (8004d24 <HAL_DMA_Abort+0x478>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d009      	beq.n	8004cce <HAL_DMA_Abort+0x422>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a1a      	ldr	r2, [pc, #104]	@ (8004d28 <HAL_DMA_Abort+0x47c>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d004      	beq.n	8004cce <HAL_DMA_Abort+0x422>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a18      	ldr	r2, [pc, #96]	@ (8004d2c <HAL_DMA_Abort+0x480>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d101      	bne.n	8004cd2 <HAL_DMA_Abort+0x426>
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e000      	b.n	8004cd4 <HAL_DMA_Abort+0x428>
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d02b      	beq.n	8004d30 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cdc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ce2:	f003 031f 	and.w	r3, r3, #31
 8004ce6:	223f      	movs	r2, #63	@ 0x3f
 8004ce8:	409a      	lsls	r2, r3
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	609a      	str	r2, [r3, #8]
 8004cee:	e02a      	b.n	8004d46 <HAL_DMA_Abort+0x49a>
 8004cf0:	40020010 	.word	0x40020010
 8004cf4:	40020028 	.word	0x40020028
 8004cf8:	40020040 	.word	0x40020040
 8004cfc:	40020058 	.word	0x40020058
 8004d00:	40020070 	.word	0x40020070
 8004d04:	40020088 	.word	0x40020088
 8004d08:	400200a0 	.word	0x400200a0
 8004d0c:	400200b8 	.word	0x400200b8
 8004d10:	40020410 	.word	0x40020410
 8004d14:	40020428 	.word	0x40020428
 8004d18:	40020440 	.word	0x40020440
 8004d1c:	40020458 	.word	0x40020458
 8004d20:	40020470 	.word	0x40020470
 8004d24:	40020488 	.word	0x40020488
 8004d28:	400204a0 	.word	0x400204a0
 8004d2c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d34:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d3a:	f003 031f 	and.w	r3, r3, #31
 8004d3e:	2201      	movs	r2, #1
 8004d40:	409a      	lsls	r2, r3
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a4f      	ldr	r2, [pc, #316]	@ (8004e88 <HAL_DMA_Abort+0x5dc>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d072      	beq.n	8004e36 <HAL_DMA_Abort+0x58a>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a4d      	ldr	r2, [pc, #308]	@ (8004e8c <HAL_DMA_Abort+0x5e0>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d06d      	beq.n	8004e36 <HAL_DMA_Abort+0x58a>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a4c      	ldr	r2, [pc, #304]	@ (8004e90 <HAL_DMA_Abort+0x5e4>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d068      	beq.n	8004e36 <HAL_DMA_Abort+0x58a>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a4a      	ldr	r2, [pc, #296]	@ (8004e94 <HAL_DMA_Abort+0x5e8>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d063      	beq.n	8004e36 <HAL_DMA_Abort+0x58a>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a49      	ldr	r2, [pc, #292]	@ (8004e98 <HAL_DMA_Abort+0x5ec>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d05e      	beq.n	8004e36 <HAL_DMA_Abort+0x58a>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a47      	ldr	r2, [pc, #284]	@ (8004e9c <HAL_DMA_Abort+0x5f0>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d059      	beq.n	8004e36 <HAL_DMA_Abort+0x58a>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a46      	ldr	r2, [pc, #280]	@ (8004ea0 <HAL_DMA_Abort+0x5f4>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d054      	beq.n	8004e36 <HAL_DMA_Abort+0x58a>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a44      	ldr	r2, [pc, #272]	@ (8004ea4 <HAL_DMA_Abort+0x5f8>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d04f      	beq.n	8004e36 <HAL_DMA_Abort+0x58a>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a43      	ldr	r2, [pc, #268]	@ (8004ea8 <HAL_DMA_Abort+0x5fc>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d04a      	beq.n	8004e36 <HAL_DMA_Abort+0x58a>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a41      	ldr	r2, [pc, #260]	@ (8004eac <HAL_DMA_Abort+0x600>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d045      	beq.n	8004e36 <HAL_DMA_Abort+0x58a>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a40      	ldr	r2, [pc, #256]	@ (8004eb0 <HAL_DMA_Abort+0x604>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d040      	beq.n	8004e36 <HAL_DMA_Abort+0x58a>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a3e      	ldr	r2, [pc, #248]	@ (8004eb4 <HAL_DMA_Abort+0x608>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d03b      	beq.n	8004e36 <HAL_DMA_Abort+0x58a>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a3d      	ldr	r2, [pc, #244]	@ (8004eb8 <HAL_DMA_Abort+0x60c>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d036      	beq.n	8004e36 <HAL_DMA_Abort+0x58a>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a3b      	ldr	r2, [pc, #236]	@ (8004ebc <HAL_DMA_Abort+0x610>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d031      	beq.n	8004e36 <HAL_DMA_Abort+0x58a>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a3a      	ldr	r2, [pc, #232]	@ (8004ec0 <HAL_DMA_Abort+0x614>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d02c      	beq.n	8004e36 <HAL_DMA_Abort+0x58a>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a38      	ldr	r2, [pc, #224]	@ (8004ec4 <HAL_DMA_Abort+0x618>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d027      	beq.n	8004e36 <HAL_DMA_Abort+0x58a>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a37      	ldr	r2, [pc, #220]	@ (8004ec8 <HAL_DMA_Abort+0x61c>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d022      	beq.n	8004e36 <HAL_DMA_Abort+0x58a>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a35      	ldr	r2, [pc, #212]	@ (8004ecc <HAL_DMA_Abort+0x620>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d01d      	beq.n	8004e36 <HAL_DMA_Abort+0x58a>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a34      	ldr	r2, [pc, #208]	@ (8004ed0 <HAL_DMA_Abort+0x624>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d018      	beq.n	8004e36 <HAL_DMA_Abort+0x58a>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a32      	ldr	r2, [pc, #200]	@ (8004ed4 <HAL_DMA_Abort+0x628>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d013      	beq.n	8004e36 <HAL_DMA_Abort+0x58a>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a31      	ldr	r2, [pc, #196]	@ (8004ed8 <HAL_DMA_Abort+0x62c>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d00e      	beq.n	8004e36 <HAL_DMA_Abort+0x58a>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a2f      	ldr	r2, [pc, #188]	@ (8004edc <HAL_DMA_Abort+0x630>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d009      	beq.n	8004e36 <HAL_DMA_Abort+0x58a>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a2e      	ldr	r2, [pc, #184]	@ (8004ee0 <HAL_DMA_Abort+0x634>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d004      	beq.n	8004e36 <HAL_DMA_Abort+0x58a>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a2c      	ldr	r2, [pc, #176]	@ (8004ee4 <HAL_DMA_Abort+0x638>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d101      	bne.n	8004e3a <HAL_DMA_Abort+0x58e>
 8004e36:	2301      	movs	r3, #1
 8004e38:	e000      	b.n	8004e3c <HAL_DMA_Abort+0x590>
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d015      	beq.n	8004e6c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004e48:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d00c      	beq.n	8004e6c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e5c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004e60:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004e6a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3718      	adds	r7, #24
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	40020010 	.word	0x40020010
 8004e8c:	40020028 	.word	0x40020028
 8004e90:	40020040 	.word	0x40020040
 8004e94:	40020058 	.word	0x40020058
 8004e98:	40020070 	.word	0x40020070
 8004e9c:	40020088 	.word	0x40020088
 8004ea0:	400200a0 	.word	0x400200a0
 8004ea4:	400200b8 	.word	0x400200b8
 8004ea8:	40020410 	.word	0x40020410
 8004eac:	40020428 	.word	0x40020428
 8004eb0:	40020440 	.word	0x40020440
 8004eb4:	40020458 	.word	0x40020458
 8004eb8:	40020470 	.word	0x40020470
 8004ebc:	40020488 	.word	0x40020488
 8004ec0:	400204a0 	.word	0x400204a0
 8004ec4:	400204b8 	.word	0x400204b8
 8004ec8:	58025408 	.word	0x58025408
 8004ecc:	5802541c 	.word	0x5802541c
 8004ed0:	58025430 	.word	0x58025430
 8004ed4:	58025444 	.word	0x58025444
 8004ed8:	58025458 	.word	0x58025458
 8004edc:	5802546c 	.word	0x5802546c
 8004ee0:	58025480 	.word	0x58025480
 8004ee4:	58025494 	.word	0x58025494

08004ee8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d101      	bne.n	8004efa <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e237      	b.n	800536a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	d004      	beq.n	8004f10 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2280      	movs	r2, #128	@ 0x80
 8004f0a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e22c      	b.n	800536a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a5c      	ldr	r2, [pc, #368]	@ (8005088 <HAL_DMA_Abort_IT+0x1a0>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d04a      	beq.n	8004fb0 <HAL_DMA_Abort_IT+0xc8>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a5b      	ldr	r2, [pc, #364]	@ (800508c <HAL_DMA_Abort_IT+0x1a4>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d045      	beq.n	8004fb0 <HAL_DMA_Abort_IT+0xc8>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a59      	ldr	r2, [pc, #356]	@ (8005090 <HAL_DMA_Abort_IT+0x1a8>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d040      	beq.n	8004fb0 <HAL_DMA_Abort_IT+0xc8>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a58      	ldr	r2, [pc, #352]	@ (8005094 <HAL_DMA_Abort_IT+0x1ac>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d03b      	beq.n	8004fb0 <HAL_DMA_Abort_IT+0xc8>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a56      	ldr	r2, [pc, #344]	@ (8005098 <HAL_DMA_Abort_IT+0x1b0>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d036      	beq.n	8004fb0 <HAL_DMA_Abort_IT+0xc8>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a55      	ldr	r2, [pc, #340]	@ (800509c <HAL_DMA_Abort_IT+0x1b4>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d031      	beq.n	8004fb0 <HAL_DMA_Abort_IT+0xc8>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a53      	ldr	r2, [pc, #332]	@ (80050a0 <HAL_DMA_Abort_IT+0x1b8>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d02c      	beq.n	8004fb0 <HAL_DMA_Abort_IT+0xc8>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a52      	ldr	r2, [pc, #328]	@ (80050a4 <HAL_DMA_Abort_IT+0x1bc>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d027      	beq.n	8004fb0 <HAL_DMA_Abort_IT+0xc8>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a50      	ldr	r2, [pc, #320]	@ (80050a8 <HAL_DMA_Abort_IT+0x1c0>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d022      	beq.n	8004fb0 <HAL_DMA_Abort_IT+0xc8>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a4f      	ldr	r2, [pc, #316]	@ (80050ac <HAL_DMA_Abort_IT+0x1c4>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d01d      	beq.n	8004fb0 <HAL_DMA_Abort_IT+0xc8>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a4d      	ldr	r2, [pc, #308]	@ (80050b0 <HAL_DMA_Abort_IT+0x1c8>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d018      	beq.n	8004fb0 <HAL_DMA_Abort_IT+0xc8>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a4c      	ldr	r2, [pc, #304]	@ (80050b4 <HAL_DMA_Abort_IT+0x1cc>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d013      	beq.n	8004fb0 <HAL_DMA_Abort_IT+0xc8>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a4a      	ldr	r2, [pc, #296]	@ (80050b8 <HAL_DMA_Abort_IT+0x1d0>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d00e      	beq.n	8004fb0 <HAL_DMA_Abort_IT+0xc8>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a49      	ldr	r2, [pc, #292]	@ (80050bc <HAL_DMA_Abort_IT+0x1d4>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d009      	beq.n	8004fb0 <HAL_DMA_Abort_IT+0xc8>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a47      	ldr	r2, [pc, #284]	@ (80050c0 <HAL_DMA_Abort_IT+0x1d8>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d004      	beq.n	8004fb0 <HAL_DMA_Abort_IT+0xc8>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a46      	ldr	r2, [pc, #280]	@ (80050c4 <HAL_DMA_Abort_IT+0x1dc>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d101      	bne.n	8004fb4 <HAL_DMA_Abort_IT+0xcc>
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e000      	b.n	8004fb6 <HAL_DMA_Abort_IT+0xce>
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	f000 8086 	beq.w	80050c8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2204      	movs	r2, #4
 8004fc0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a2f      	ldr	r2, [pc, #188]	@ (8005088 <HAL_DMA_Abort_IT+0x1a0>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d04a      	beq.n	8005064 <HAL_DMA_Abort_IT+0x17c>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a2e      	ldr	r2, [pc, #184]	@ (800508c <HAL_DMA_Abort_IT+0x1a4>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d045      	beq.n	8005064 <HAL_DMA_Abort_IT+0x17c>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a2c      	ldr	r2, [pc, #176]	@ (8005090 <HAL_DMA_Abort_IT+0x1a8>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d040      	beq.n	8005064 <HAL_DMA_Abort_IT+0x17c>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a2b      	ldr	r2, [pc, #172]	@ (8005094 <HAL_DMA_Abort_IT+0x1ac>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d03b      	beq.n	8005064 <HAL_DMA_Abort_IT+0x17c>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a29      	ldr	r2, [pc, #164]	@ (8005098 <HAL_DMA_Abort_IT+0x1b0>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d036      	beq.n	8005064 <HAL_DMA_Abort_IT+0x17c>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a28      	ldr	r2, [pc, #160]	@ (800509c <HAL_DMA_Abort_IT+0x1b4>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d031      	beq.n	8005064 <HAL_DMA_Abort_IT+0x17c>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a26      	ldr	r2, [pc, #152]	@ (80050a0 <HAL_DMA_Abort_IT+0x1b8>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d02c      	beq.n	8005064 <HAL_DMA_Abort_IT+0x17c>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a25      	ldr	r2, [pc, #148]	@ (80050a4 <HAL_DMA_Abort_IT+0x1bc>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d027      	beq.n	8005064 <HAL_DMA_Abort_IT+0x17c>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a23      	ldr	r2, [pc, #140]	@ (80050a8 <HAL_DMA_Abort_IT+0x1c0>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d022      	beq.n	8005064 <HAL_DMA_Abort_IT+0x17c>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a22      	ldr	r2, [pc, #136]	@ (80050ac <HAL_DMA_Abort_IT+0x1c4>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d01d      	beq.n	8005064 <HAL_DMA_Abort_IT+0x17c>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a20      	ldr	r2, [pc, #128]	@ (80050b0 <HAL_DMA_Abort_IT+0x1c8>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d018      	beq.n	8005064 <HAL_DMA_Abort_IT+0x17c>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a1f      	ldr	r2, [pc, #124]	@ (80050b4 <HAL_DMA_Abort_IT+0x1cc>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d013      	beq.n	8005064 <HAL_DMA_Abort_IT+0x17c>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a1d      	ldr	r2, [pc, #116]	@ (80050b8 <HAL_DMA_Abort_IT+0x1d0>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d00e      	beq.n	8005064 <HAL_DMA_Abort_IT+0x17c>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a1c      	ldr	r2, [pc, #112]	@ (80050bc <HAL_DMA_Abort_IT+0x1d4>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d009      	beq.n	8005064 <HAL_DMA_Abort_IT+0x17c>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a1a      	ldr	r2, [pc, #104]	@ (80050c0 <HAL_DMA_Abort_IT+0x1d8>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d004      	beq.n	8005064 <HAL_DMA_Abort_IT+0x17c>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a19      	ldr	r2, [pc, #100]	@ (80050c4 <HAL_DMA_Abort_IT+0x1dc>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d108      	bne.n	8005076 <HAL_DMA_Abort_IT+0x18e>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f022 0201 	bic.w	r2, r2, #1
 8005072:	601a      	str	r2, [r3, #0]
 8005074:	e178      	b.n	8005368 <HAL_DMA_Abort_IT+0x480>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f022 0201 	bic.w	r2, r2, #1
 8005084:	601a      	str	r2, [r3, #0]
 8005086:	e16f      	b.n	8005368 <HAL_DMA_Abort_IT+0x480>
 8005088:	40020010 	.word	0x40020010
 800508c:	40020028 	.word	0x40020028
 8005090:	40020040 	.word	0x40020040
 8005094:	40020058 	.word	0x40020058
 8005098:	40020070 	.word	0x40020070
 800509c:	40020088 	.word	0x40020088
 80050a0:	400200a0 	.word	0x400200a0
 80050a4:	400200b8 	.word	0x400200b8
 80050a8:	40020410 	.word	0x40020410
 80050ac:	40020428 	.word	0x40020428
 80050b0:	40020440 	.word	0x40020440
 80050b4:	40020458 	.word	0x40020458
 80050b8:	40020470 	.word	0x40020470
 80050bc:	40020488 	.word	0x40020488
 80050c0:	400204a0 	.word	0x400204a0
 80050c4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f022 020e 	bic.w	r2, r2, #14
 80050d6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a6c      	ldr	r2, [pc, #432]	@ (8005290 <HAL_DMA_Abort_IT+0x3a8>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d04a      	beq.n	8005178 <HAL_DMA_Abort_IT+0x290>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a6b      	ldr	r2, [pc, #428]	@ (8005294 <HAL_DMA_Abort_IT+0x3ac>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d045      	beq.n	8005178 <HAL_DMA_Abort_IT+0x290>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a69      	ldr	r2, [pc, #420]	@ (8005298 <HAL_DMA_Abort_IT+0x3b0>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d040      	beq.n	8005178 <HAL_DMA_Abort_IT+0x290>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a68      	ldr	r2, [pc, #416]	@ (800529c <HAL_DMA_Abort_IT+0x3b4>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d03b      	beq.n	8005178 <HAL_DMA_Abort_IT+0x290>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a66      	ldr	r2, [pc, #408]	@ (80052a0 <HAL_DMA_Abort_IT+0x3b8>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d036      	beq.n	8005178 <HAL_DMA_Abort_IT+0x290>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a65      	ldr	r2, [pc, #404]	@ (80052a4 <HAL_DMA_Abort_IT+0x3bc>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d031      	beq.n	8005178 <HAL_DMA_Abort_IT+0x290>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a63      	ldr	r2, [pc, #396]	@ (80052a8 <HAL_DMA_Abort_IT+0x3c0>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d02c      	beq.n	8005178 <HAL_DMA_Abort_IT+0x290>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a62      	ldr	r2, [pc, #392]	@ (80052ac <HAL_DMA_Abort_IT+0x3c4>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d027      	beq.n	8005178 <HAL_DMA_Abort_IT+0x290>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a60      	ldr	r2, [pc, #384]	@ (80052b0 <HAL_DMA_Abort_IT+0x3c8>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d022      	beq.n	8005178 <HAL_DMA_Abort_IT+0x290>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a5f      	ldr	r2, [pc, #380]	@ (80052b4 <HAL_DMA_Abort_IT+0x3cc>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d01d      	beq.n	8005178 <HAL_DMA_Abort_IT+0x290>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a5d      	ldr	r2, [pc, #372]	@ (80052b8 <HAL_DMA_Abort_IT+0x3d0>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d018      	beq.n	8005178 <HAL_DMA_Abort_IT+0x290>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a5c      	ldr	r2, [pc, #368]	@ (80052bc <HAL_DMA_Abort_IT+0x3d4>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d013      	beq.n	8005178 <HAL_DMA_Abort_IT+0x290>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a5a      	ldr	r2, [pc, #360]	@ (80052c0 <HAL_DMA_Abort_IT+0x3d8>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d00e      	beq.n	8005178 <HAL_DMA_Abort_IT+0x290>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a59      	ldr	r2, [pc, #356]	@ (80052c4 <HAL_DMA_Abort_IT+0x3dc>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d009      	beq.n	8005178 <HAL_DMA_Abort_IT+0x290>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a57      	ldr	r2, [pc, #348]	@ (80052c8 <HAL_DMA_Abort_IT+0x3e0>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d004      	beq.n	8005178 <HAL_DMA_Abort_IT+0x290>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a56      	ldr	r2, [pc, #344]	@ (80052cc <HAL_DMA_Abort_IT+0x3e4>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d108      	bne.n	800518a <HAL_DMA_Abort_IT+0x2a2>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f022 0201 	bic.w	r2, r2, #1
 8005186:	601a      	str	r2, [r3, #0]
 8005188:	e007      	b.n	800519a <HAL_DMA_Abort_IT+0x2b2>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f022 0201 	bic.w	r2, r2, #1
 8005198:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a3c      	ldr	r2, [pc, #240]	@ (8005290 <HAL_DMA_Abort_IT+0x3a8>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d072      	beq.n	800528a <HAL_DMA_Abort_IT+0x3a2>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a3a      	ldr	r2, [pc, #232]	@ (8005294 <HAL_DMA_Abort_IT+0x3ac>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d06d      	beq.n	800528a <HAL_DMA_Abort_IT+0x3a2>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a39      	ldr	r2, [pc, #228]	@ (8005298 <HAL_DMA_Abort_IT+0x3b0>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d068      	beq.n	800528a <HAL_DMA_Abort_IT+0x3a2>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a37      	ldr	r2, [pc, #220]	@ (800529c <HAL_DMA_Abort_IT+0x3b4>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d063      	beq.n	800528a <HAL_DMA_Abort_IT+0x3a2>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a36      	ldr	r2, [pc, #216]	@ (80052a0 <HAL_DMA_Abort_IT+0x3b8>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d05e      	beq.n	800528a <HAL_DMA_Abort_IT+0x3a2>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a34      	ldr	r2, [pc, #208]	@ (80052a4 <HAL_DMA_Abort_IT+0x3bc>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d059      	beq.n	800528a <HAL_DMA_Abort_IT+0x3a2>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a33      	ldr	r2, [pc, #204]	@ (80052a8 <HAL_DMA_Abort_IT+0x3c0>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d054      	beq.n	800528a <HAL_DMA_Abort_IT+0x3a2>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a31      	ldr	r2, [pc, #196]	@ (80052ac <HAL_DMA_Abort_IT+0x3c4>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d04f      	beq.n	800528a <HAL_DMA_Abort_IT+0x3a2>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a30      	ldr	r2, [pc, #192]	@ (80052b0 <HAL_DMA_Abort_IT+0x3c8>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d04a      	beq.n	800528a <HAL_DMA_Abort_IT+0x3a2>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a2e      	ldr	r2, [pc, #184]	@ (80052b4 <HAL_DMA_Abort_IT+0x3cc>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d045      	beq.n	800528a <HAL_DMA_Abort_IT+0x3a2>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a2d      	ldr	r2, [pc, #180]	@ (80052b8 <HAL_DMA_Abort_IT+0x3d0>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d040      	beq.n	800528a <HAL_DMA_Abort_IT+0x3a2>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a2b      	ldr	r2, [pc, #172]	@ (80052bc <HAL_DMA_Abort_IT+0x3d4>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d03b      	beq.n	800528a <HAL_DMA_Abort_IT+0x3a2>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a2a      	ldr	r2, [pc, #168]	@ (80052c0 <HAL_DMA_Abort_IT+0x3d8>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d036      	beq.n	800528a <HAL_DMA_Abort_IT+0x3a2>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a28      	ldr	r2, [pc, #160]	@ (80052c4 <HAL_DMA_Abort_IT+0x3dc>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d031      	beq.n	800528a <HAL_DMA_Abort_IT+0x3a2>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a27      	ldr	r2, [pc, #156]	@ (80052c8 <HAL_DMA_Abort_IT+0x3e0>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d02c      	beq.n	800528a <HAL_DMA_Abort_IT+0x3a2>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a25      	ldr	r2, [pc, #148]	@ (80052cc <HAL_DMA_Abort_IT+0x3e4>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d027      	beq.n	800528a <HAL_DMA_Abort_IT+0x3a2>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a24      	ldr	r2, [pc, #144]	@ (80052d0 <HAL_DMA_Abort_IT+0x3e8>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d022      	beq.n	800528a <HAL_DMA_Abort_IT+0x3a2>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a22      	ldr	r2, [pc, #136]	@ (80052d4 <HAL_DMA_Abort_IT+0x3ec>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d01d      	beq.n	800528a <HAL_DMA_Abort_IT+0x3a2>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a21      	ldr	r2, [pc, #132]	@ (80052d8 <HAL_DMA_Abort_IT+0x3f0>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d018      	beq.n	800528a <HAL_DMA_Abort_IT+0x3a2>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a1f      	ldr	r2, [pc, #124]	@ (80052dc <HAL_DMA_Abort_IT+0x3f4>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d013      	beq.n	800528a <HAL_DMA_Abort_IT+0x3a2>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a1e      	ldr	r2, [pc, #120]	@ (80052e0 <HAL_DMA_Abort_IT+0x3f8>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d00e      	beq.n	800528a <HAL_DMA_Abort_IT+0x3a2>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a1c      	ldr	r2, [pc, #112]	@ (80052e4 <HAL_DMA_Abort_IT+0x3fc>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d009      	beq.n	800528a <HAL_DMA_Abort_IT+0x3a2>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a1b      	ldr	r2, [pc, #108]	@ (80052e8 <HAL_DMA_Abort_IT+0x400>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d004      	beq.n	800528a <HAL_DMA_Abort_IT+0x3a2>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a19      	ldr	r2, [pc, #100]	@ (80052ec <HAL_DMA_Abort_IT+0x404>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d132      	bne.n	80052f0 <HAL_DMA_Abort_IT+0x408>
 800528a:	2301      	movs	r3, #1
 800528c:	e031      	b.n	80052f2 <HAL_DMA_Abort_IT+0x40a>
 800528e:	bf00      	nop
 8005290:	40020010 	.word	0x40020010
 8005294:	40020028 	.word	0x40020028
 8005298:	40020040 	.word	0x40020040
 800529c:	40020058 	.word	0x40020058
 80052a0:	40020070 	.word	0x40020070
 80052a4:	40020088 	.word	0x40020088
 80052a8:	400200a0 	.word	0x400200a0
 80052ac:	400200b8 	.word	0x400200b8
 80052b0:	40020410 	.word	0x40020410
 80052b4:	40020428 	.word	0x40020428
 80052b8:	40020440 	.word	0x40020440
 80052bc:	40020458 	.word	0x40020458
 80052c0:	40020470 	.word	0x40020470
 80052c4:	40020488 	.word	0x40020488
 80052c8:	400204a0 	.word	0x400204a0
 80052cc:	400204b8 	.word	0x400204b8
 80052d0:	58025408 	.word	0x58025408
 80052d4:	5802541c 	.word	0x5802541c
 80052d8:	58025430 	.word	0x58025430
 80052dc:	58025444 	.word	0x58025444
 80052e0:	58025458 	.word	0x58025458
 80052e4:	5802546c 	.word	0x5802546c
 80052e8:	58025480 	.word	0x58025480
 80052ec:	58025494 	.word	0x58025494
 80052f0:	2300      	movs	r3, #0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d028      	beq.n	8005348 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005300:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005304:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800530a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005310:	f003 031f 	and.w	r3, r3, #31
 8005314:	2201      	movs	r2, #1
 8005316:	409a      	lsls	r2, r3
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005324:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800532a:	2b00      	cmp	r3, #0
 800532c:	d00c      	beq.n	8005348 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005338:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800533c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005346:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800535c:	2b00      	cmp	r3, #0
 800535e:	d003      	beq.n	8005368 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3710      	adds	r7, #16
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop

08005374 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b08a      	sub	sp, #40	@ 0x28
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800537c:	2300      	movs	r3, #0
 800537e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005380:	4b67      	ldr	r3, [pc, #412]	@ (8005520 <HAL_DMA_IRQHandler+0x1ac>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a67      	ldr	r2, [pc, #412]	@ (8005524 <HAL_DMA_IRQHandler+0x1b0>)
 8005386:	fba2 2303 	umull	r2, r3, r2, r3
 800538a:	0a9b      	lsrs	r3, r3, #10
 800538c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005392:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005398:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800539a:	6a3b      	ldr	r3, [r7, #32]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a5f      	ldr	r2, [pc, #380]	@ (8005528 <HAL_DMA_IRQHandler+0x1b4>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d04a      	beq.n	8005446 <HAL_DMA_IRQHandler+0xd2>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a5d      	ldr	r2, [pc, #372]	@ (800552c <HAL_DMA_IRQHandler+0x1b8>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d045      	beq.n	8005446 <HAL_DMA_IRQHandler+0xd2>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a5c      	ldr	r2, [pc, #368]	@ (8005530 <HAL_DMA_IRQHandler+0x1bc>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d040      	beq.n	8005446 <HAL_DMA_IRQHandler+0xd2>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a5a      	ldr	r2, [pc, #360]	@ (8005534 <HAL_DMA_IRQHandler+0x1c0>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d03b      	beq.n	8005446 <HAL_DMA_IRQHandler+0xd2>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a59      	ldr	r2, [pc, #356]	@ (8005538 <HAL_DMA_IRQHandler+0x1c4>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d036      	beq.n	8005446 <HAL_DMA_IRQHandler+0xd2>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a57      	ldr	r2, [pc, #348]	@ (800553c <HAL_DMA_IRQHandler+0x1c8>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d031      	beq.n	8005446 <HAL_DMA_IRQHandler+0xd2>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a56      	ldr	r2, [pc, #344]	@ (8005540 <HAL_DMA_IRQHandler+0x1cc>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d02c      	beq.n	8005446 <HAL_DMA_IRQHandler+0xd2>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a54      	ldr	r2, [pc, #336]	@ (8005544 <HAL_DMA_IRQHandler+0x1d0>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d027      	beq.n	8005446 <HAL_DMA_IRQHandler+0xd2>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a53      	ldr	r2, [pc, #332]	@ (8005548 <HAL_DMA_IRQHandler+0x1d4>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d022      	beq.n	8005446 <HAL_DMA_IRQHandler+0xd2>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a51      	ldr	r2, [pc, #324]	@ (800554c <HAL_DMA_IRQHandler+0x1d8>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d01d      	beq.n	8005446 <HAL_DMA_IRQHandler+0xd2>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a50      	ldr	r2, [pc, #320]	@ (8005550 <HAL_DMA_IRQHandler+0x1dc>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d018      	beq.n	8005446 <HAL_DMA_IRQHandler+0xd2>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a4e      	ldr	r2, [pc, #312]	@ (8005554 <HAL_DMA_IRQHandler+0x1e0>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d013      	beq.n	8005446 <HAL_DMA_IRQHandler+0xd2>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a4d      	ldr	r2, [pc, #308]	@ (8005558 <HAL_DMA_IRQHandler+0x1e4>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d00e      	beq.n	8005446 <HAL_DMA_IRQHandler+0xd2>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a4b      	ldr	r2, [pc, #300]	@ (800555c <HAL_DMA_IRQHandler+0x1e8>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d009      	beq.n	8005446 <HAL_DMA_IRQHandler+0xd2>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a4a      	ldr	r2, [pc, #296]	@ (8005560 <HAL_DMA_IRQHandler+0x1ec>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d004      	beq.n	8005446 <HAL_DMA_IRQHandler+0xd2>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a48      	ldr	r2, [pc, #288]	@ (8005564 <HAL_DMA_IRQHandler+0x1f0>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d101      	bne.n	800544a <HAL_DMA_IRQHandler+0xd6>
 8005446:	2301      	movs	r3, #1
 8005448:	e000      	b.n	800544c <HAL_DMA_IRQHandler+0xd8>
 800544a:	2300      	movs	r3, #0
 800544c:	2b00      	cmp	r3, #0
 800544e:	f000 842b 	beq.w	8005ca8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005456:	f003 031f 	and.w	r3, r3, #31
 800545a:	2208      	movs	r2, #8
 800545c:	409a      	lsls	r2, r3
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	4013      	ands	r3, r2
 8005462:	2b00      	cmp	r3, #0
 8005464:	f000 80a2 	beq.w	80055ac <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a2e      	ldr	r2, [pc, #184]	@ (8005528 <HAL_DMA_IRQHandler+0x1b4>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d04a      	beq.n	8005508 <HAL_DMA_IRQHandler+0x194>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a2d      	ldr	r2, [pc, #180]	@ (800552c <HAL_DMA_IRQHandler+0x1b8>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d045      	beq.n	8005508 <HAL_DMA_IRQHandler+0x194>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a2b      	ldr	r2, [pc, #172]	@ (8005530 <HAL_DMA_IRQHandler+0x1bc>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d040      	beq.n	8005508 <HAL_DMA_IRQHandler+0x194>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a2a      	ldr	r2, [pc, #168]	@ (8005534 <HAL_DMA_IRQHandler+0x1c0>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d03b      	beq.n	8005508 <HAL_DMA_IRQHandler+0x194>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a28      	ldr	r2, [pc, #160]	@ (8005538 <HAL_DMA_IRQHandler+0x1c4>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d036      	beq.n	8005508 <HAL_DMA_IRQHandler+0x194>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a27      	ldr	r2, [pc, #156]	@ (800553c <HAL_DMA_IRQHandler+0x1c8>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d031      	beq.n	8005508 <HAL_DMA_IRQHandler+0x194>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a25      	ldr	r2, [pc, #148]	@ (8005540 <HAL_DMA_IRQHandler+0x1cc>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d02c      	beq.n	8005508 <HAL_DMA_IRQHandler+0x194>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a24      	ldr	r2, [pc, #144]	@ (8005544 <HAL_DMA_IRQHandler+0x1d0>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d027      	beq.n	8005508 <HAL_DMA_IRQHandler+0x194>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a22      	ldr	r2, [pc, #136]	@ (8005548 <HAL_DMA_IRQHandler+0x1d4>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d022      	beq.n	8005508 <HAL_DMA_IRQHandler+0x194>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a21      	ldr	r2, [pc, #132]	@ (800554c <HAL_DMA_IRQHandler+0x1d8>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d01d      	beq.n	8005508 <HAL_DMA_IRQHandler+0x194>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a1f      	ldr	r2, [pc, #124]	@ (8005550 <HAL_DMA_IRQHandler+0x1dc>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d018      	beq.n	8005508 <HAL_DMA_IRQHandler+0x194>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a1e      	ldr	r2, [pc, #120]	@ (8005554 <HAL_DMA_IRQHandler+0x1e0>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d013      	beq.n	8005508 <HAL_DMA_IRQHandler+0x194>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a1c      	ldr	r2, [pc, #112]	@ (8005558 <HAL_DMA_IRQHandler+0x1e4>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d00e      	beq.n	8005508 <HAL_DMA_IRQHandler+0x194>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a1b      	ldr	r2, [pc, #108]	@ (800555c <HAL_DMA_IRQHandler+0x1e8>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d009      	beq.n	8005508 <HAL_DMA_IRQHandler+0x194>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a19      	ldr	r2, [pc, #100]	@ (8005560 <HAL_DMA_IRQHandler+0x1ec>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d004      	beq.n	8005508 <HAL_DMA_IRQHandler+0x194>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a18      	ldr	r2, [pc, #96]	@ (8005564 <HAL_DMA_IRQHandler+0x1f0>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d12f      	bne.n	8005568 <HAL_DMA_IRQHandler+0x1f4>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 0304 	and.w	r3, r3, #4
 8005512:	2b00      	cmp	r3, #0
 8005514:	bf14      	ite	ne
 8005516:	2301      	movne	r3, #1
 8005518:	2300      	moveq	r3, #0
 800551a:	b2db      	uxtb	r3, r3
 800551c:	e02e      	b.n	800557c <HAL_DMA_IRQHandler+0x208>
 800551e:	bf00      	nop
 8005520:	24000098 	.word	0x24000098
 8005524:	1b4e81b5 	.word	0x1b4e81b5
 8005528:	40020010 	.word	0x40020010
 800552c:	40020028 	.word	0x40020028
 8005530:	40020040 	.word	0x40020040
 8005534:	40020058 	.word	0x40020058
 8005538:	40020070 	.word	0x40020070
 800553c:	40020088 	.word	0x40020088
 8005540:	400200a0 	.word	0x400200a0
 8005544:	400200b8 	.word	0x400200b8
 8005548:	40020410 	.word	0x40020410
 800554c:	40020428 	.word	0x40020428
 8005550:	40020440 	.word	0x40020440
 8005554:	40020458 	.word	0x40020458
 8005558:	40020470 	.word	0x40020470
 800555c:	40020488 	.word	0x40020488
 8005560:	400204a0 	.word	0x400204a0
 8005564:	400204b8 	.word	0x400204b8
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 0308 	and.w	r3, r3, #8
 8005572:	2b00      	cmp	r3, #0
 8005574:	bf14      	ite	ne
 8005576:	2301      	movne	r3, #1
 8005578:	2300      	moveq	r3, #0
 800557a:	b2db      	uxtb	r3, r3
 800557c:	2b00      	cmp	r3, #0
 800557e:	d015      	beq.n	80055ac <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f022 0204 	bic.w	r2, r2, #4
 800558e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005594:	f003 031f 	and.w	r3, r3, #31
 8005598:	2208      	movs	r2, #8
 800559a:	409a      	lsls	r2, r3
 800559c:	6a3b      	ldr	r3, [r7, #32]
 800559e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055a4:	f043 0201 	orr.w	r2, r3, #1
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055b0:	f003 031f 	and.w	r3, r3, #31
 80055b4:	69ba      	ldr	r2, [r7, #24]
 80055b6:	fa22 f303 	lsr.w	r3, r2, r3
 80055ba:	f003 0301 	and.w	r3, r3, #1
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d06e      	beq.n	80056a0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a69      	ldr	r2, [pc, #420]	@ (800576c <HAL_DMA_IRQHandler+0x3f8>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d04a      	beq.n	8005662 <HAL_DMA_IRQHandler+0x2ee>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a67      	ldr	r2, [pc, #412]	@ (8005770 <HAL_DMA_IRQHandler+0x3fc>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d045      	beq.n	8005662 <HAL_DMA_IRQHandler+0x2ee>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a66      	ldr	r2, [pc, #408]	@ (8005774 <HAL_DMA_IRQHandler+0x400>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d040      	beq.n	8005662 <HAL_DMA_IRQHandler+0x2ee>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a64      	ldr	r2, [pc, #400]	@ (8005778 <HAL_DMA_IRQHandler+0x404>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d03b      	beq.n	8005662 <HAL_DMA_IRQHandler+0x2ee>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a63      	ldr	r2, [pc, #396]	@ (800577c <HAL_DMA_IRQHandler+0x408>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d036      	beq.n	8005662 <HAL_DMA_IRQHandler+0x2ee>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a61      	ldr	r2, [pc, #388]	@ (8005780 <HAL_DMA_IRQHandler+0x40c>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d031      	beq.n	8005662 <HAL_DMA_IRQHandler+0x2ee>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a60      	ldr	r2, [pc, #384]	@ (8005784 <HAL_DMA_IRQHandler+0x410>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d02c      	beq.n	8005662 <HAL_DMA_IRQHandler+0x2ee>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a5e      	ldr	r2, [pc, #376]	@ (8005788 <HAL_DMA_IRQHandler+0x414>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d027      	beq.n	8005662 <HAL_DMA_IRQHandler+0x2ee>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a5d      	ldr	r2, [pc, #372]	@ (800578c <HAL_DMA_IRQHandler+0x418>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d022      	beq.n	8005662 <HAL_DMA_IRQHandler+0x2ee>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a5b      	ldr	r2, [pc, #364]	@ (8005790 <HAL_DMA_IRQHandler+0x41c>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d01d      	beq.n	8005662 <HAL_DMA_IRQHandler+0x2ee>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a5a      	ldr	r2, [pc, #360]	@ (8005794 <HAL_DMA_IRQHandler+0x420>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d018      	beq.n	8005662 <HAL_DMA_IRQHandler+0x2ee>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a58      	ldr	r2, [pc, #352]	@ (8005798 <HAL_DMA_IRQHandler+0x424>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d013      	beq.n	8005662 <HAL_DMA_IRQHandler+0x2ee>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a57      	ldr	r2, [pc, #348]	@ (800579c <HAL_DMA_IRQHandler+0x428>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d00e      	beq.n	8005662 <HAL_DMA_IRQHandler+0x2ee>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a55      	ldr	r2, [pc, #340]	@ (80057a0 <HAL_DMA_IRQHandler+0x42c>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d009      	beq.n	8005662 <HAL_DMA_IRQHandler+0x2ee>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a54      	ldr	r2, [pc, #336]	@ (80057a4 <HAL_DMA_IRQHandler+0x430>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d004      	beq.n	8005662 <HAL_DMA_IRQHandler+0x2ee>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a52      	ldr	r2, [pc, #328]	@ (80057a8 <HAL_DMA_IRQHandler+0x434>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d10a      	bne.n	8005678 <HAL_DMA_IRQHandler+0x304>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	695b      	ldr	r3, [r3, #20]
 8005668:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800566c:	2b00      	cmp	r3, #0
 800566e:	bf14      	ite	ne
 8005670:	2301      	movne	r3, #1
 8005672:	2300      	moveq	r3, #0
 8005674:	b2db      	uxtb	r3, r3
 8005676:	e003      	b.n	8005680 <HAL_DMA_IRQHandler+0x30c>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2300      	movs	r3, #0
 8005680:	2b00      	cmp	r3, #0
 8005682:	d00d      	beq.n	80056a0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005688:	f003 031f 	and.w	r3, r3, #31
 800568c:	2201      	movs	r2, #1
 800568e:	409a      	lsls	r2, r3
 8005690:	6a3b      	ldr	r3, [r7, #32]
 8005692:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005698:	f043 0202 	orr.w	r2, r3, #2
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056a4:	f003 031f 	and.w	r3, r3, #31
 80056a8:	2204      	movs	r2, #4
 80056aa:	409a      	lsls	r2, r3
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	4013      	ands	r3, r2
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	f000 808f 	beq.w	80057d4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a2c      	ldr	r2, [pc, #176]	@ (800576c <HAL_DMA_IRQHandler+0x3f8>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d04a      	beq.n	8005756 <HAL_DMA_IRQHandler+0x3e2>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a2a      	ldr	r2, [pc, #168]	@ (8005770 <HAL_DMA_IRQHandler+0x3fc>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d045      	beq.n	8005756 <HAL_DMA_IRQHandler+0x3e2>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a29      	ldr	r2, [pc, #164]	@ (8005774 <HAL_DMA_IRQHandler+0x400>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d040      	beq.n	8005756 <HAL_DMA_IRQHandler+0x3e2>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a27      	ldr	r2, [pc, #156]	@ (8005778 <HAL_DMA_IRQHandler+0x404>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d03b      	beq.n	8005756 <HAL_DMA_IRQHandler+0x3e2>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a26      	ldr	r2, [pc, #152]	@ (800577c <HAL_DMA_IRQHandler+0x408>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d036      	beq.n	8005756 <HAL_DMA_IRQHandler+0x3e2>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a24      	ldr	r2, [pc, #144]	@ (8005780 <HAL_DMA_IRQHandler+0x40c>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d031      	beq.n	8005756 <HAL_DMA_IRQHandler+0x3e2>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a23      	ldr	r2, [pc, #140]	@ (8005784 <HAL_DMA_IRQHandler+0x410>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d02c      	beq.n	8005756 <HAL_DMA_IRQHandler+0x3e2>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a21      	ldr	r2, [pc, #132]	@ (8005788 <HAL_DMA_IRQHandler+0x414>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d027      	beq.n	8005756 <HAL_DMA_IRQHandler+0x3e2>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a20      	ldr	r2, [pc, #128]	@ (800578c <HAL_DMA_IRQHandler+0x418>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d022      	beq.n	8005756 <HAL_DMA_IRQHandler+0x3e2>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a1e      	ldr	r2, [pc, #120]	@ (8005790 <HAL_DMA_IRQHandler+0x41c>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d01d      	beq.n	8005756 <HAL_DMA_IRQHandler+0x3e2>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a1d      	ldr	r2, [pc, #116]	@ (8005794 <HAL_DMA_IRQHandler+0x420>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d018      	beq.n	8005756 <HAL_DMA_IRQHandler+0x3e2>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a1b      	ldr	r2, [pc, #108]	@ (8005798 <HAL_DMA_IRQHandler+0x424>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d013      	beq.n	8005756 <HAL_DMA_IRQHandler+0x3e2>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a1a      	ldr	r2, [pc, #104]	@ (800579c <HAL_DMA_IRQHandler+0x428>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d00e      	beq.n	8005756 <HAL_DMA_IRQHandler+0x3e2>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a18      	ldr	r2, [pc, #96]	@ (80057a0 <HAL_DMA_IRQHandler+0x42c>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d009      	beq.n	8005756 <HAL_DMA_IRQHandler+0x3e2>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a17      	ldr	r2, [pc, #92]	@ (80057a4 <HAL_DMA_IRQHandler+0x430>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d004      	beq.n	8005756 <HAL_DMA_IRQHandler+0x3e2>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a15      	ldr	r2, [pc, #84]	@ (80057a8 <HAL_DMA_IRQHandler+0x434>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d12a      	bne.n	80057ac <HAL_DMA_IRQHandler+0x438>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 0302 	and.w	r3, r3, #2
 8005760:	2b00      	cmp	r3, #0
 8005762:	bf14      	ite	ne
 8005764:	2301      	movne	r3, #1
 8005766:	2300      	moveq	r3, #0
 8005768:	b2db      	uxtb	r3, r3
 800576a:	e023      	b.n	80057b4 <HAL_DMA_IRQHandler+0x440>
 800576c:	40020010 	.word	0x40020010
 8005770:	40020028 	.word	0x40020028
 8005774:	40020040 	.word	0x40020040
 8005778:	40020058 	.word	0x40020058
 800577c:	40020070 	.word	0x40020070
 8005780:	40020088 	.word	0x40020088
 8005784:	400200a0 	.word	0x400200a0
 8005788:	400200b8 	.word	0x400200b8
 800578c:	40020410 	.word	0x40020410
 8005790:	40020428 	.word	0x40020428
 8005794:	40020440 	.word	0x40020440
 8005798:	40020458 	.word	0x40020458
 800579c:	40020470 	.word	0x40020470
 80057a0:	40020488 	.word	0x40020488
 80057a4:	400204a0 	.word	0x400204a0
 80057a8:	400204b8 	.word	0x400204b8
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	2300      	movs	r3, #0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d00d      	beq.n	80057d4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057bc:	f003 031f 	and.w	r3, r3, #31
 80057c0:	2204      	movs	r2, #4
 80057c2:	409a      	lsls	r2, r3
 80057c4:	6a3b      	ldr	r3, [r7, #32]
 80057c6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057cc:	f043 0204 	orr.w	r2, r3, #4
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057d8:	f003 031f 	and.w	r3, r3, #31
 80057dc:	2210      	movs	r2, #16
 80057de:	409a      	lsls	r2, r3
 80057e0:	69bb      	ldr	r3, [r7, #24]
 80057e2:	4013      	ands	r3, r2
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	f000 80a6 	beq.w	8005936 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a85      	ldr	r2, [pc, #532]	@ (8005a04 <HAL_DMA_IRQHandler+0x690>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d04a      	beq.n	800588a <HAL_DMA_IRQHandler+0x516>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a83      	ldr	r2, [pc, #524]	@ (8005a08 <HAL_DMA_IRQHandler+0x694>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d045      	beq.n	800588a <HAL_DMA_IRQHandler+0x516>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a82      	ldr	r2, [pc, #520]	@ (8005a0c <HAL_DMA_IRQHandler+0x698>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d040      	beq.n	800588a <HAL_DMA_IRQHandler+0x516>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a80      	ldr	r2, [pc, #512]	@ (8005a10 <HAL_DMA_IRQHandler+0x69c>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d03b      	beq.n	800588a <HAL_DMA_IRQHandler+0x516>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a7f      	ldr	r2, [pc, #508]	@ (8005a14 <HAL_DMA_IRQHandler+0x6a0>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d036      	beq.n	800588a <HAL_DMA_IRQHandler+0x516>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a7d      	ldr	r2, [pc, #500]	@ (8005a18 <HAL_DMA_IRQHandler+0x6a4>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d031      	beq.n	800588a <HAL_DMA_IRQHandler+0x516>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a7c      	ldr	r2, [pc, #496]	@ (8005a1c <HAL_DMA_IRQHandler+0x6a8>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d02c      	beq.n	800588a <HAL_DMA_IRQHandler+0x516>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a7a      	ldr	r2, [pc, #488]	@ (8005a20 <HAL_DMA_IRQHandler+0x6ac>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d027      	beq.n	800588a <HAL_DMA_IRQHandler+0x516>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a79      	ldr	r2, [pc, #484]	@ (8005a24 <HAL_DMA_IRQHandler+0x6b0>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d022      	beq.n	800588a <HAL_DMA_IRQHandler+0x516>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a77      	ldr	r2, [pc, #476]	@ (8005a28 <HAL_DMA_IRQHandler+0x6b4>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d01d      	beq.n	800588a <HAL_DMA_IRQHandler+0x516>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a76      	ldr	r2, [pc, #472]	@ (8005a2c <HAL_DMA_IRQHandler+0x6b8>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d018      	beq.n	800588a <HAL_DMA_IRQHandler+0x516>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a74      	ldr	r2, [pc, #464]	@ (8005a30 <HAL_DMA_IRQHandler+0x6bc>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d013      	beq.n	800588a <HAL_DMA_IRQHandler+0x516>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a73      	ldr	r2, [pc, #460]	@ (8005a34 <HAL_DMA_IRQHandler+0x6c0>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d00e      	beq.n	800588a <HAL_DMA_IRQHandler+0x516>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a71      	ldr	r2, [pc, #452]	@ (8005a38 <HAL_DMA_IRQHandler+0x6c4>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d009      	beq.n	800588a <HAL_DMA_IRQHandler+0x516>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a70      	ldr	r2, [pc, #448]	@ (8005a3c <HAL_DMA_IRQHandler+0x6c8>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d004      	beq.n	800588a <HAL_DMA_IRQHandler+0x516>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a6e      	ldr	r2, [pc, #440]	@ (8005a40 <HAL_DMA_IRQHandler+0x6cc>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d10a      	bne.n	80058a0 <HAL_DMA_IRQHandler+0x52c>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 0308 	and.w	r3, r3, #8
 8005894:	2b00      	cmp	r3, #0
 8005896:	bf14      	ite	ne
 8005898:	2301      	movne	r3, #1
 800589a:	2300      	moveq	r3, #0
 800589c:	b2db      	uxtb	r3, r3
 800589e:	e009      	b.n	80058b4 <HAL_DMA_IRQHandler+0x540>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 0304 	and.w	r3, r3, #4
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	bf14      	ite	ne
 80058ae:	2301      	movne	r3, #1
 80058b0:	2300      	moveq	r3, #0
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d03e      	beq.n	8005936 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058bc:	f003 031f 	and.w	r3, r3, #31
 80058c0:	2210      	movs	r2, #16
 80058c2:	409a      	lsls	r2, r3
 80058c4:	6a3b      	ldr	r3, [r7, #32]
 80058c6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d018      	beq.n	8005908 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d108      	bne.n	80058f6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d024      	beq.n	8005936 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	4798      	blx	r3
 80058f4:	e01f      	b.n	8005936 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d01b      	beq.n	8005936 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	4798      	blx	r3
 8005906:	e016      	b.n	8005936 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005912:	2b00      	cmp	r3, #0
 8005914:	d107      	bne.n	8005926 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f022 0208 	bic.w	r2, r2, #8
 8005924:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800592a:	2b00      	cmp	r3, #0
 800592c:	d003      	beq.n	8005936 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800593a:	f003 031f 	and.w	r3, r3, #31
 800593e:	2220      	movs	r2, #32
 8005940:	409a      	lsls	r2, r3
 8005942:	69bb      	ldr	r3, [r7, #24]
 8005944:	4013      	ands	r3, r2
 8005946:	2b00      	cmp	r3, #0
 8005948:	f000 8110 	beq.w	8005b6c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a2c      	ldr	r2, [pc, #176]	@ (8005a04 <HAL_DMA_IRQHandler+0x690>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d04a      	beq.n	80059ec <HAL_DMA_IRQHandler+0x678>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a2b      	ldr	r2, [pc, #172]	@ (8005a08 <HAL_DMA_IRQHandler+0x694>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d045      	beq.n	80059ec <HAL_DMA_IRQHandler+0x678>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a29      	ldr	r2, [pc, #164]	@ (8005a0c <HAL_DMA_IRQHandler+0x698>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d040      	beq.n	80059ec <HAL_DMA_IRQHandler+0x678>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a28      	ldr	r2, [pc, #160]	@ (8005a10 <HAL_DMA_IRQHandler+0x69c>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d03b      	beq.n	80059ec <HAL_DMA_IRQHandler+0x678>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a26      	ldr	r2, [pc, #152]	@ (8005a14 <HAL_DMA_IRQHandler+0x6a0>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d036      	beq.n	80059ec <HAL_DMA_IRQHandler+0x678>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a25      	ldr	r2, [pc, #148]	@ (8005a18 <HAL_DMA_IRQHandler+0x6a4>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d031      	beq.n	80059ec <HAL_DMA_IRQHandler+0x678>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a23      	ldr	r2, [pc, #140]	@ (8005a1c <HAL_DMA_IRQHandler+0x6a8>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d02c      	beq.n	80059ec <HAL_DMA_IRQHandler+0x678>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a22      	ldr	r2, [pc, #136]	@ (8005a20 <HAL_DMA_IRQHandler+0x6ac>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d027      	beq.n	80059ec <HAL_DMA_IRQHandler+0x678>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a20      	ldr	r2, [pc, #128]	@ (8005a24 <HAL_DMA_IRQHandler+0x6b0>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d022      	beq.n	80059ec <HAL_DMA_IRQHandler+0x678>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a1f      	ldr	r2, [pc, #124]	@ (8005a28 <HAL_DMA_IRQHandler+0x6b4>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d01d      	beq.n	80059ec <HAL_DMA_IRQHandler+0x678>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a1d      	ldr	r2, [pc, #116]	@ (8005a2c <HAL_DMA_IRQHandler+0x6b8>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d018      	beq.n	80059ec <HAL_DMA_IRQHandler+0x678>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a1c      	ldr	r2, [pc, #112]	@ (8005a30 <HAL_DMA_IRQHandler+0x6bc>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d013      	beq.n	80059ec <HAL_DMA_IRQHandler+0x678>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a1a      	ldr	r2, [pc, #104]	@ (8005a34 <HAL_DMA_IRQHandler+0x6c0>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d00e      	beq.n	80059ec <HAL_DMA_IRQHandler+0x678>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a19      	ldr	r2, [pc, #100]	@ (8005a38 <HAL_DMA_IRQHandler+0x6c4>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d009      	beq.n	80059ec <HAL_DMA_IRQHandler+0x678>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a17      	ldr	r2, [pc, #92]	@ (8005a3c <HAL_DMA_IRQHandler+0x6c8>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d004      	beq.n	80059ec <HAL_DMA_IRQHandler+0x678>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a16      	ldr	r2, [pc, #88]	@ (8005a40 <HAL_DMA_IRQHandler+0x6cc>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d12b      	bne.n	8005a44 <HAL_DMA_IRQHandler+0x6d0>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 0310 	and.w	r3, r3, #16
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	bf14      	ite	ne
 80059fa:	2301      	movne	r3, #1
 80059fc:	2300      	moveq	r3, #0
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	e02a      	b.n	8005a58 <HAL_DMA_IRQHandler+0x6e4>
 8005a02:	bf00      	nop
 8005a04:	40020010 	.word	0x40020010
 8005a08:	40020028 	.word	0x40020028
 8005a0c:	40020040 	.word	0x40020040
 8005a10:	40020058 	.word	0x40020058
 8005a14:	40020070 	.word	0x40020070
 8005a18:	40020088 	.word	0x40020088
 8005a1c:	400200a0 	.word	0x400200a0
 8005a20:	400200b8 	.word	0x400200b8
 8005a24:	40020410 	.word	0x40020410
 8005a28:	40020428 	.word	0x40020428
 8005a2c:	40020440 	.word	0x40020440
 8005a30:	40020458 	.word	0x40020458
 8005a34:	40020470 	.word	0x40020470
 8005a38:	40020488 	.word	0x40020488
 8005a3c:	400204a0 	.word	0x400204a0
 8005a40:	400204b8 	.word	0x400204b8
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f003 0302 	and.w	r3, r3, #2
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	bf14      	ite	ne
 8005a52:	2301      	movne	r3, #1
 8005a54:	2300      	moveq	r3, #0
 8005a56:	b2db      	uxtb	r3, r3
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	f000 8087 	beq.w	8005b6c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a62:	f003 031f 	and.w	r3, r3, #31
 8005a66:	2220      	movs	r2, #32
 8005a68:	409a      	lsls	r2, r3
 8005a6a:	6a3b      	ldr	r3, [r7, #32]
 8005a6c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	2b04      	cmp	r3, #4
 8005a78:	d139      	bne.n	8005aee <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f022 0216 	bic.w	r2, r2, #22
 8005a88:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	695a      	ldr	r2, [r3, #20]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005a98:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d103      	bne.n	8005aaa <HAL_DMA_IRQHandler+0x736>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d007      	beq.n	8005aba <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f022 0208 	bic.w	r2, r2, #8
 8005ab8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005abe:	f003 031f 	and.w	r3, r3, #31
 8005ac2:	223f      	movs	r2, #63	@ 0x3f
 8005ac4:	409a      	lsls	r2, r3
 8005ac6:	6a3b      	ldr	r3, [r7, #32]
 8005ac8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2201      	movs	r2, #1
 8005ace:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	f000 8382 	beq.w	80061e8 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	4798      	blx	r3
          }
          return;
 8005aec:	e37c      	b.n	80061e8 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d018      	beq.n	8005b2e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d108      	bne.n	8005b1c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d02c      	beq.n	8005b6c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	4798      	blx	r3
 8005b1a:	e027      	b.n	8005b6c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d023      	beq.n	8005b6c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	4798      	blx	r3
 8005b2c:	e01e      	b.n	8005b6c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d10f      	bne.n	8005b5c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f022 0210 	bic.w	r2, r2, #16
 8005b4a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d003      	beq.n	8005b6c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	f000 833e 	beq.w	80061f2 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b7a:	f003 0301 	and.w	r3, r3, #1
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	f000 8088 	beq.w	8005c94 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2204      	movs	r2, #4
 8005b88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a89      	ldr	r2, [pc, #548]	@ (8005db8 <HAL_DMA_IRQHandler+0xa44>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d04a      	beq.n	8005c2c <HAL_DMA_IRQHandler+0x8b8>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a88      	ldr	r2, [pc, #544]	@ (8005dbc <HAL_DMA_IRQHandler+0xa48>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d045      	beq.n	8005c2c <HAL_DMA_IRQHandler+0x8b8>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a86      	ldr	r2, [pc, #536]	@ (8005dc0 <HAL_DMA_IRQHandler+0xa4c>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d040      	beq.n	8005c2c <HAL_DMA_IRQHandler+0x8b8>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a85      	ldr	r2, [pc, #532]	@ (8005dc4 <HAL_DMA_IRQHandler+0xa50>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d03b      	beq.n	8005c2c <HAL_DMA_IRQHandler+0x8b8>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a83      	ldr	r2, [pc, #524]	@ (8005dc8 <HAL_DMA_IRQHandler+0xa54>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d036      	beq.n	8005c2c <HAL_DMA_IRQHandler+0x8b8>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a82      	ldr	r2, [pc, #520]	@ (8005dcc <HAL_DMA_IRQHandler+0xa58>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d031      	beq.n	8005c2c <HAL_DMA_IRQHandler+0x8b8>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a80      	ldr	r2, [pc, #512]	@ (8005dd0 <HAL_DMA_IRQHandler+0xa5c>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d02c      	beq.n	8005c2c <HAL_DMA_IRQHandler+0x8b8>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a7f      	ldr	r2, [pc, #508]	@ (8005dd4 <HAL_DMA_IRQHandler+0xa60>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d027      	beq.n	8005c2c <HAL_DMA_IRQHandler+0x8b8>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a7d      	ldr	r2, [pc, #500]	@ (8005dd8 <HAL_DMA_IRQHandler+0xa64>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d022      	beq.n	8005c2c <HAL_DMA_IRQHandler+0x8b8>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a7c      	ldr	r2, [pc, #496]	@ (8005ddc <HAL_DMA_IRQHandler+0xa68>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d01d      	beq.n	8005c2c <HAL_DMA_IRQHandler+0x8b8>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a7a      	ldr	r2, [pc, #488]	@ (8005de0 <HAL_DMA_IRQHandler+0xa6c>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d018      	beq.n	8005c2c <HAL_DMA_IRQHandler+0x8b8>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a79      	ldr	r2, [pc, #484]	@ (8005de4 <HAL_DMA_IRQHandler+0xa70>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d013      	beq.n	8005c2c <HAL_DMA_IRQHandler+0x8b8>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a77      	ldr	r2, [pc, #476]	@ (8005de8 <HAL_DMA_IRQHandler+0xa74>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d00e      	beq.n	8005c2c <HAL_DMA_IRQHandler+0x8b8>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a76      	ldr	r2, [pc, #472]	@ (8005dec <HAL_DMA_IRQHandler+0xa78>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d009      	beq.n	8005c2c <HAL_DMA_IRQHandler+0x8b8>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a74      	ldr	r2, [pc, #464]	@ (8005df0 <HAL_DMA_IRQHandler+0xa7c>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d004      	beq.n	8005c2c <HAL_DMA_IRQHandler+0x8b8>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a73      	ldr	r2, [pc, #460]	@ (8005df4 <HAL_DMA_IRQHandler+0xa80>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d108      	bne.n	8005c3e <HAL_DMA_IRQHandler+0x8ca>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f022 0201 	bic.w	r2, r2, #1
 8005c3a:	601a      	str	r2, [r3, #0]
 8005c3c:	e007      	b.n	8005c4e <HAL_DMA_IRQHandler+0x8da>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f022 0201 	bic.w	r2, r2, #1
 8005c4c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	3301      	adds	r3, #1
 8005c52:	60fb      	str	r3, [r7, #12]
 8005c54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d307      	bcc.n	8005c6a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 0301 	and.w	r3, r3, #1
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d1f2      	bne.n	8005c4e <HAL_DMA_IRQHandler+0x8da>
 8005c68:	e000      	b.n	8005c6c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005c6a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f003 0301 	and.w	r3, r3, #1
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d004      	beq.n	8005c84 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2203      	movs	r2, #3
 8005c7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8005c82:	e003      	b.n	8005c8c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	f000 82aa 	beq.w	80061f2 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	4798      	blx	r3
 8005ca6:	e2a4      	b.n	80061f2 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a52      	ldr	r2, [pc, #328]	@ (8005df8 <HAL_DMA_IRQHandler+0xa84>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d04a      	beq.n	8005d48 <HAL_DMA_IRQHandler+0x9d4>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a51      	ldr	r2, [pc, #324]	@ (8005dfc <HAL_DMA_IRQHandler+0xa88>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d045      	beq.n	8005d48 <HAL_DMA_IRQHandler+0x9d4>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a4f      	ldr	r2, [pc, #316]	@ (8005e00 <HAL_DMA_IRQHandler+0xa8c>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d040      	beq.n	8005d48 <HAL_DMA_IRQHandler+0x9d4>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a4e      	ldr	r2, [pc, #312]	@ (8005e04 <HAL_DMA_IRQHandler+0xa90>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d03b      	beq.n	8005d48 <HAL_DMA_IRQHandler+0x9d4>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a4c      	ldr	r2, [pc, #304]	@ (8005e08 <HAL_DMA_IRQHandler+0xa94>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d036      	beq.n	8005d48 <HAL_DMA_IRQHandler+0x9d4>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a4b      	ldr	r2, [pc, #300]	@ (8005e0c <HAL_DMA_IRQHandler+0xa98>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d031      	beq.n	8005d48 <HAL_DMA_IRQHandler+0x9d4>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a49      	ldr	r2, [pc, #292]	@ (8005e10 <HAL_DMA_IRQHandler+0xa9c>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d02c      	beq.n	8005d48 <HAL_DMA_IRQHandler+0x9d4>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a48      	ldr	r2, [pc, #288]	@ (8005e14 <HAL_DMA_IRQHandler+0xaa0>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d027      	beq.n	8005d48 <HAL_DMA_IRQHandler+0x9d4>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a46      	ldr	r2, [pc, #280]	@ (8005e18 <HAL_DMA_IRQHandler+0xaa4>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d022      	beq.n	8005d48 <HAL_DMA_IRQHandler+0x9d4>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a45      	ldr	r2, [pc, #276]	@ (8005e1c <HAL_DMA_IRQHandler+0xaa8>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d01d      	beq.n	8005d48 <HAL_DMA_IRQHandler+0x9d4>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a43      	ldr	r2, [pc, #268]	@ (8005e20 <HAL_DMA_IRQHandler+0xaac>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d018      	beq.n	8005d48 <HAL_DMA_IRQHandler+0x9d4>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a42      	ldr	r2, [pc, #264]	@ (8005e24 <HAL_DMA_IRQHandler+0xab0>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d013      	beq.n	8005d48 <HAL_DMA_IRQHandler+0x9d4>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a40      	ldr	r2, [pc, #256]	@ (8005e28 <HAL_DMA_IRQHandler+0xab4>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d00e      	beq.n	8005d48 <HAL_DMA_IRQHandler+0x9d4>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a3f      	ldr	r2, [pc, #252]	@ (8005e2c <HAL_DMA_IRQHandler+0xab8>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d009      	beq.n	8005d48 <HAL_DMA_IRQHandler+0x9d4>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a3d      	ldr	r2, [pc, #244]	@ (8005e30 <HAL_DMA_IRQHandler+0xabc>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d004      	beq.n	8005d48 <HAL_DMA_IRQHandler+0x9d4>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a3c      	ldr	r2, [pc, #240]	@ (8005e34 <HAL_DMA_IRQHandler+0xac0>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d101      	bne.n	8005d4c <HAL_DMA_IRQHandler+0x9d8>
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e000      	b.n	8005d4e <HAL_DMA_IRQHandler+0x9da>
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	f000 824f 	beq.w	80061f2 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d60:	f003 031f 	and.w	r3, r3, #31
 8005d64:	2204      	movs	r2, #4
 8005d66:	409a      	lsls	r2, r3
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	4013      	ands	r3, r2
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	f000 80dd 	beq.w	8005f2c <HAL_DMA_IRQHandler+0xbb8>
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	f003 0304 	and.w	r3, r3, #4
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	f000 80d7 	beq.w	8005f2c <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d82:	f003 031f 	and.w	r3, r3, #31
 8005d86:	2204      	movs	r2, #4
 8005d88:	409a      	lsls	r2, r3
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d059      	beq.n	8005e4c <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d14a      	bne.n	8005e38 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	f000 8220 	beq.w	80061ec <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005db4:	e21a      	b.n	80061ec <HAL_DMA_IRQHandler+0xe78>
 8005db6:	bf00      	nop
 8005db8:	40020010 	.word	0x40020010
 8005dbc:	40020028 	.word	0x40020028
 8005dc0:	40020040 	.word	0x40020040
 8005dc4:	40020058 	.word	0x40020058
 8005dc8:	40020070 	.word	0x40020070
 8005dcc:	40020088 	.word	0x40020088
 8005dd0:	400200a0 	.word	0x400200a0
 8005dd4:	400200b8 	.word	0x400200b8
 8005dd8:	40020410 	.word	0x40020410
 8005ddc:	40020428 	.word	0x40020428
 8005de0:	40020440 	.word	0x40020440
 8005de4:	40020458 	.word	0x40020458
 8005de8:	40020470 	.word	0x40020470
 8005dec:	40020488 	.word	0x40020488
 8005df0:	400204a0 	.word	0x400204a0
 8005df4:	400204b8 	.word	0x400204b8
 8005df8:	48022c08 	.word	0x48022c08
 8005dfc:	48022c1c 	.word	0x48022c1c
 8005e00:	48022c30 	.word	0x48022c30
 8005e04:	48022c44 	.word	0x48022c44
 8005e08:	48022c58 	.word	0x48022c58
 8005e0c:	48022c6c 	.word	0x48022c6c
 8005e10:	48022c80 	.word	0x48022c80
 8005e14:	48022c94 	.word	0x48022c94
 8005e18:	58025408 	.word	0x58025408
 8005e1c:	5802541c 	.word	0x5802541c
 8005e20:	58025430 	.word	0x58025430
 8005e24:	58025444 	.word	0x58025444
 8005e28:	58025458 	.word	0x58025458
 8005e2c:	5802546c 	.word	0x5802546c
 8005e30:	58025480 	.word	0x58025480
 8005e34:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	f000 81d5 	beq.w	80061ec <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e4a:	e1cf      	b.n	80061ec <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	f003 0320 	and.w	r3, r3, #32
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d160      	bne.n	8005f18 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a7f      	ldr	r2, [pc, #508]	@ (8006058 <HAL_DMA_IRQHandler+0xce4>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d04a      	beq.n	8005ef6 <HAL_DMA_IRQHandler+0xb82>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a7d      	ldr	r2, [pc, #500]	@ (800605c <HAL_DMA_IRQHandler+0xce8>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d045      	beq.n	8005ef6 <HAL_DMA_IRQHandler+0xb82>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a7c      	ldr	r2, [pc, #496]	@ (8006060 <HAL_DMA_IRQHandler+0xcec>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d040      	beq.n	8005ef6 <HAL_DMA_IRQHandler+0xb82>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a7a      	ldr	r2, [pc, #488]	@ (8006064 <HAL_DMA_IRQHandler+0xcf0>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d03b      	beq.n	8005ef6 <HAL_DMA_IRQHandler+0xb82>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a79      	ldr	r2, [pc, #484]	@ (8006068 <HAL_DMA_IRQHandler+0xcf4>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d036      	beq.n	8005ef6 <HAL_DMA_IRQHandler+0xb82>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a77      	ldr	r2, [pc, #476]	@ (800606c <HAL_DMA_IRQHandler+0xcf8>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d031      	beq.n	8005ef6 <HAL_DMA_IRQHandler+0xb82>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a76      	ldr	r2, [pc, #472]	@ (8006070 <HAL_DMA_IRQHandler+0xcfc>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d02c      	beq.n	8005ef6 <HAL_DMA_IRQHandler+0xb82>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a74      	ldr	r2, [pc, #464]	@ (8006074 <HAL_DMA_IRQHandler+0xd00>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d027      	beq.n	8005ef6 <HAL_DMA_IRQHandler+0xb82>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a73      	ldr	r2, [pc, #460]	@ (8006078 <HAL_DMA_IRQHandler+0xd04>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d022      	beq.n	8005ef6 <HAL_DMA_IRQHandler+0xb82>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a71      	ldr	r2, [pc, #452]	@ (800607c <HAL_DMA_IRQHandler+0xd08>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d01d      	beq.n	8005ef6 <HAL_DMA_IRQHandler+0xb82>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a70      	ldr	r2, [pc, #448]	@ (8006080 <HAL_DMA_IRQHandler+0xd0c>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d018      	beq.n	8005ef6 <HAL_DMA_IRQHandler+0xb82>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a6e      	ldr	r2, [pc, #440]	@ (8006084 <HAL_DMA_IRQHandler+0xd10>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d013      	beq.n	8005ef6 <HAL_DMA_IRQHandler+0xb82>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a6d      	ldr	r2, [pc, #436]	@ (8006088 <HAL_DMA_IRQHandler+0xd14>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d00e      	beq.n	8005ef6 <HAL_DMA_IRQHandler+0xb82>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a6b      	ldr	r2, [pc, #428]	@ (800608c <HAL_DMA_IRQHandler+0xd18>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d009      	beq.n	8005ef6 <HAL_DMA_IRQHandler+0xb82>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a6a      	ldr	r2, [pc, #424]	@ (8006090 <HAL_DMA_IRQHandler+0xd1c>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d004      	beq.n	8005ef6 <HAL_DMA_IRQHandler+0xb82>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a68      	ldr	r2, [pc, #416]	@ (8006094 <HAL_DMA_IRQHandler+0xd20>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d108      	bne.n	8005f08 <HAL_DMA_IRQHandler+0xb94>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f022 0208 	bic.w	r2, r2, #8
 8005f04:	601a      	str	r2, [r3, #0]
 8005f06:	e007      	b.n	8005f18 <HAL_DMA_IRQHandler+0xba4>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f022 0204 	bic.w	r2, r2, #4
 8005f16:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	f000 8165 	beq.w	80061ec <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f2a:	e15f      	b.n	80061ec <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f30:	f003 031f 	and.w	r3, r3, #31
 8005f34:	2202      	movs	r2, #2
 8005f36:	409a      	lsls	r2, r3
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	4013      	ands	r3, r2
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	f000 80c5 	beq.w	80060cc <HAL_DMA_IRQHandler+0xd58>
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	f003 0302 	and.w	r3, r3, #2
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	f000 80bf 	beq.w	80060cc <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f52:	f003 031f 	and.w	r3, r3, #31
 8005f56:	2202      	movs	r2, #2
 8005f58:	409a      	lsls	r2, r3
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d018      	beq.n	8005f9a <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d109      	bne.n	8005f86 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	f000 813a 	beq.w	80061f0 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f84:	e134      	b.n	80061f0 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	f000 8130 	beq.w	80061f0 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f98:	e12a      	b.n	80061f0 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	f003 0320 	and.w	r3, r3, #32
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	f040 8089 	bne.w	80060b8 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a2b      	ldr	r2, [pc, #172]	@ (8006058 <HAL_DMA_IRQHandler+0xce4>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d04a      	beq.n	8006046 <HAL_DMA_IRQHandler+0xcd2>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a29      	ldr	r2, [pc, #164]	@ (800605c <HAL_DMA_IRQHandler+0xce8>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d045      	beq.n	8006046 <HAL_DMA_IRQHandler+0xcd2>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a28      	ldr	r2, [pc, #160]	@ (8006060 <HAL_DMA_IRQHandler+0xcec>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d040      	beq.n	8006046 <HAL_DMA_IRQHandler+0xcd2>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a26      	ldr	r2, [pc, #152]	@ (8006064 <HAL_DMA_IRQHandler+0xcf0>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d03b      	beq.n	8006046 <HAL_DMA_IRQHandler+0xcd2>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a25      	ldr	r2, [pc, #148]	@ (8006068 <HAL_DMA_IRQHandler+0xcf4>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d036      	beq.n	8006046 <HAL_DMA_IRQHandler+0xcd2>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a23      	ldr	r2, [pc, #140]	@ (800606c <HAL_DMA_IRQHandler+0xcf8>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d031      	beq.n	8006046 <HAL_DMA_IRQHandler+0xcd2>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a22      	ldr	r2, [pc, #136]	@ (8006070 <HAL_DMA_IRQHandler+0xcfc>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d02c      	beq.n	8006046 <HAL_DMA_IRQHandler+0xcd2>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a20      	ldr	r2, [pc, #128]	@ (8006074 <HAL_DMA_IRQHandler+0xd00>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d027      	beq.n	8006046 <HAL_DMA_IRQHandler+0xcd2>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a1f      	ldr	r2, [pc, #124]	@ (8006078 <HAL_DMA_IRQHandler+0xd04>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d022      	beq.n	8006046 <HAL_DMA_IRQHandler+0xcd2>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a1d      	ldr	r2, [pc, #116]	@ (800607c <HAL_DMA_IRQHandler+0xd08>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d01d      	beq.n	8006046 <HAL_DMA_IRQHandler+0xcd2>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a1c      	ldr	r2, [pc, #112]	@ (8006080 <HAL_DMA_IRQHandler+0xd0c>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d018      	beq.n	8006046 <HAL_DMA_IRQHandler+0xcd2>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a1a      	ldr	r2, [pc, #104]	@ (8006084 <HAL_DMA_IRQHandler+0xd10>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d013      	beq.n	8006046 <HAL_DMA_IRQHandler+0xcd2>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a19      	ldr	r2, [pc, #100]	@ (8006088 <HAL_DMA_IRQHandler+0xd14>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d00e      	beq.n	8006046 <HAL_DMA_IRQHandler+0xcd2>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a17      	ldr	r2, [pc, #92]	@ (800608c <HAL_DMA_IRQHandler+0xd18>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d009      	beq.n	8006046 <HAL_DMA_IRQHandler+0xcd2>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a16      	ldr	r2, [pc, #88]	@ (8006090 <HAL_DMA_IRQHandler+0xd1c>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d004      	beq.n	8006046 <HAL_DMA_IRQHandler+0xcd2>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a14      	ldr	r2, [pc, #80]	@ (8006094 <HAL_DMA_IRQHandler+0xd20>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d128      	bne.n	8006098 <HAL_DMA_IRQHandler+0xd24>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f022 0214 	bic.w	r2, r2, #20
 8006054:	601a      	str	r2, [r3, #0]
 8006056:	e027      	b.n	80060a8 <HAL_DMA_IRQHandler+0xd34>
 8006058:	40020010 	.word	0x40020010
 800605c:	40020028 	.word	0x40020028
 8006060:	40020040 	.word	0x40020040
 8006064:	40020058 	.word	0x40020058
 8006068:	40020070 	.word	0x40020070
 800606c:	40020088 	.word	0x40020088
 8006070:	400200a0 	.word	0x400200a0
 8006074:	400200b8 	.word	0x400200b8
 8006078:	40020410 	.word	0x40020410
 800607c:	40020428 	.word	0x40020428
 8006080:	40020440 	.word	0x40020440
 8006084:	40020458 	.word	0x40020458
 8006088:	40020470 	.word	0x40020470
 800608c:	40020488 	.word	0x40020488
 8006090:	400204a0 	.word	0x400204a0
 8006094:	400204b8 	.word	0x400204b8
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f022 020a 	bic.w	r2, r2, #10
 80060a6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060bc:	2b00      	cmp	r3, #0
 80060be:	f000 8097 	beq.w	80061f0 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80060ca:	e091      	b.n	80061f0 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060d0:	f003 031f 	and.w	r3, r3, #31
 80060d4:	2208      	movs	r2, #8
 80060d6:	409a      	lsls	r2, r3
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	4013      	ands	r3, r2
 80060dc:	2b00      	cmp	r3, #0
 80060de:	f000 8088 	beq.w	80061f2 <HAL_DMA_IRQHandler+0xe7e>
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	f003 0308 	and.w	r3, r3, #8
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	f000 8082 	beq.w	80061f2 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a41      	ldr	r2, [pc, #260]	@ (80061f8 <HAL_DMA_IRQHandler+0xe84>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d04a      	beq.n	800618e <HAL_DMA_IRQHandler+0xe1a>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a3f      	ldr	r2, [pc, #252]	@ (80061fc <HAL_DMA_IRQHandler+0xe88>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d045      	beq.n	800618e <HAL_DMA_IRQHandler+0xe1a>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a3e      	ldr	r2, [pc, #248]	@ (8006200 <HAL_DMA_IRQHandler+0xe8c>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d040      	beq.n	800618e <HAL_DMA_IRQHandler+0xe1a>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a3c      	ldr	r2, [pc, #240]	@ (8006204 <HAL_DMA_IRQHandler+0xe90>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d03b      	beq.n	800618e <HAL_DMA_IRQHandler+0xe1a>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a3b      	ldr	r2, [pc, #236]	@ (8006208 <HAL_DMA_IRQHandler+0xe94>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d036      	beq.n	800618e <HAL_DMA_IRQHandler+0xe1a>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a39      	ldr	r2, [pc, #228]	@ (800620c <HAL_DMA_IRQHandler+0xe98>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d031      	beq.n	800618e <HAL_DMA_IRQHandler+0xe1a>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a38      	ldr	r2, [pc, #224]	@ (8006210 <HAL_DMA_IRQHandler+0xe9c>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d02c      	beq.n	800618e <HAL_DMA_IRQHandler+0xe1a>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a36      	ldr	r2, [pc, #216]	@ (8006214 <HAL_DMA_IRQHandler+0xea0>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d027      	beq.n	800618e <HAL_DMA_IRQHandler+0xe1a>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a35      	ldr	r2, [pc, #212]	@ (8006218 <HAL_DMA_IRQHandler+0xea4>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d022      	beq.n	800618e <HAL_DMA_IRQHandler+0xe1a>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a33      	ldr	r2, [pc, #204]	@ (800621c <HAL_DMA_IRQHandler+0xea8>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d01d      	beq.n	800618e <HAL_DMA_IRQHandler+0xe1a>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a32      	ldr	r2, [pc, #200]	@ (8006220 <HAL_DMA_IRQHandler+0xeac>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d018      	beq.n	800618e <HAL_DMA_IRQHandler+0xe1a>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a30      	ldr	r2, [pc, #192]	@ (8006224 <HAL_DMA_IRQHandler+0xeb0>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d013      	beq.n	800618e <HAL_DMA_IRQHandler+0xe1a>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a2f      	ldr	r2, [pc, #188]	@ (8006228 <HAL_DMA_IRQHandler+0xeb4>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d00e      	beq.n	800618e <HAL_DMA_IRQHandler+0xe1a>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a2d      	ldr	r2, [pc, #180]	@ (800622c <HAL_DMA_IRQHandler+0xeb8>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d009      	beq.n	800618e <HAL_DMA_IRQHandler+0xe1a>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a2c      	ldr	r2, [pc, #176]	@ (8006230 <HAL_DMA_IRQHandler+0xebc>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d004      	beq.n	800618e <HAL_DMA_IRQHandler+0xe1a>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a2a      	ldr	r2, [pc, #168]	@ (8006234 <HAL_DMA_IRQHandler+0xec0>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d108      	bne.n	80061a0 <HAL_DMA_IRQHandler+0xe2c>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f022 021c 	bic.w	r2, r2, #28
 800619c:	601a      	str	r2, [r3, #0]
 800619e:	e007      	b.n	80061b0 <HAL_DMA_IRQHandler+0xe3c>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f022 020e 	bic.w	r2, r2, #14
 80061ae:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061b4:	f003 031f 	and.w	r3, r3, #31
 80061b8:	2201      	movs	r2, #1
 80061ba:	409a      	lsls	r2, r3
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2201      	movs	r2, #1
 80061ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d009      	beq.n	80061f2 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	4798      	blx	r3
 80061e6:	e004      	b.n	80061f2 <HAL_DMA_IRQHandler+0xe7e>
          return;
 80061e8:	bf00      	nop
 80061ea:	e002      	b.n	80061f2 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80061ec:	bf00      	nop
 80061ee:	e000      	b.n	80061f2 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80061f0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80061f2:	3728      	adds	r7, #40	@ 0x28
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	40020010 	.word	0x40020010
 80061fc:	40020028 	.word	0x40020028
 8006200:	40020040 	.word	0x40020040
 8006204:	40020058 	.word	0x40020058
 8006208:	40020070 	.word	0x40020070
 800620c:	40020088 	.word	0x40020088
 8006210:	400200a0 	.word	0x400200a0
 8006214:	400200b8 	.word	0x400200b8
 8006218:	40020410 	.word	0x40020410
 800621c:	40020428 	.word	0x40020428
 8006220:	40020440 	.word	0x40020440
 8006224:	40020458 	.word	0x40020458
 8006228:	40020470 	.word	0x40020470
 800622c:	40020488 	.word	0x40020488
 8006230:	400204a0 	.word	0x400204a0
 8006234:	400204b8 	.word	0x400204b8

08006238 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006238:	b480      	push	{r7}
 800623a:	b087      	sub	sp, #28
 800623c:	af00      	add	r7, sp, #0
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	607a      	str	r2, [r7, #4]
 8006244:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800624a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006250:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a7f      	ldr	r2, [pc, #508]	@ (8006454 <DMA_SetConfig+0x21c>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d072      	beq.n	8006342 <DMA_SetConfig+0x10a>
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a7d      	ldr	r2, [pc, #500]	@ (8006458 <DMA_SetConfig+0x220>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d06d      	beq.n	8006342 <DMA_SetConfig+0x10a>
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a7c      	ldr	r2, [pc, #496]	@ (800645c <DMA_SetConfig+0x224>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d068      	beq.n	8006342 <DMA_SetConfig+0x10a>
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a7a      	ldr	r2, [pc, #488]	@ (8006460 <DMA_SetConfig+0x228>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d063      	beq.n	8006342 <DMA_SetConfig+0x10a>
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a79      	ldr	r2, [pc, #484]	@ (8006464 <DMA_SetConfig+0x22c>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d05e      	beq.n	8006342 <DMA_SetConfig+0x10a>
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a77      	ldr	r2, [pc, #476]	@ (8006468 <DMA_SetConfig+0x230>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d059      	beq.n	8006342 <DMA_SetConfig+0x10a>
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a76      	ldr	r2, [pc, #472]	@ (800646c <DMA_SetConfig+0x234>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d054      	beq.n	8006342 <DMA_SetConfig+0x10a>
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a74      	ldr	r2, [pc, #464]	@ (8006470 <DMA_SetConfig+0x238>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d04f      	beq.n	8006342 <DMA_SetConfig+0x10a>
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a73      	ldr	r2, [pc, #460]	@ (8006474 <DMA_SetConfig+0x23c>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d04a      	beq.n	8006342 <DMA_SetConfig+0x10a>
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a71      	ldr	r2, [pc, #452]	@ (8006478 <DMA_SetConfig+0x240>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d045      	beq.n	8006342 <DMA_SetConfig+0x10a>
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a70      	ldr	r2, [pc, #448]	@ (800647c <DMA_SetConfig+0x244>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d040      	beq.n	8006342 <DMA_SetConfig+0x10a>
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a6e      	ldr	r2, [pc, #440]	@ (8006480 <DMA_SetConfig+0x248>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d03b      	beq.n	8006342 <DMA_SetConfig+0x10a>
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a6d      	ldr	r2, [pc, #436]	@ (8006484 <DMA_SetConfig+0x24c>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d036      	beq.n	8006342 <DMA_SetConfig+0x10a>
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a6b      	ldr	r2, [pc, #428]	@ (8006488 <DMA_SetConfig+0x250>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d031      	beq.n	8006342 <DMA_SetConfig+0x10a>
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a6a      	ldr	r2, [pc, #424]	@ (800648c <DMA_SetConfig+0x254>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d02c      	beq.n	8006342 <DMA_SetConfig+0x10a>
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a68      	ldr	r2, [pc, #416]	@ (8006490 <DMA_SetConfig+0x258>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d027      	beq.n	8006342 <DMA_SetConfig+0x10a>
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a67      	ldr	r2, [pc, #412]	@ (8006494 <DMA_SetConfig+0x25c>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d022      	beq.n	8006342 <DMA_SetConfig+0x10a>
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a65      	ldr	r2, [pc, #404]	@ (8006498 <DMA_SetConfig+0x260>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d01d      	beq.n	8006342 <DMA_SetConfig+0x10a>
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a64      	ldr	r2, [pc, #400]	@ (800649c <DMA_SetConfig+0x264>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d018      	beq.n	8006342 <DMA_SetConfig+0x10a>
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a62      	ldr	r2, [pc, #392]	@ (80064a0 <DMA_SetConfig+0x268>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d013      	beq.n	8006342 <DMA_SetConfig+0x10a>
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a61      	ldr	r2, [pc, #388]	@ (80064a4 <DMA_SetConfig+0x26c>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d00e      	beq.n	8006342 <DMA_SetConfig+0x10a>
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a5f      	ldr	r2, [pc, #380]	@ (80064a8 <DMA_SetConfig+0x270>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d009      	beq.n	8006342 <DMA_SetConfig+0x10a>
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a5e      	ldr	r2, [pc, #376]	@ (80064ac <DMA_SetConfig+0x274>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d004      	beq.n	8006342 <DMA_SetConfig+0x10a>
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a5c      	ldr	r2, [pc, #368]	@ (80064b0 <DMA_SetConfig+0x278>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d101      	bne.n	8006346 <DMA_SetConfig+0x10e>
 8006342:	2301      	movs	r3, #1
 8006344:	e000      	b.n	8006348 <DMA_SetConfig+0x110>
 8006346:	2300      	movs	r3, #0
 8006348:	2b00      	cmp	r3, #0
 800634a:	d00d      	beq.n	8006368 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006350:	68fa      	ldr	r2, [r7, #12]
 8006352:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006354:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800635a:	2b00      	cmp	r3, #0
 800635c:	d004      	beq.n	8006368 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006362:	68fa      	ldr	r2, [r7, #12]
 8006364:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006366:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a39      	ldr	r2, [pc, #228]	@ (8006454 <DMA_SetConfig+0x21c>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d04a      	beq.n	8006408 <DMA_SetConfig+0x1d0>
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a38      	ldr	r2, [pc, #224]	@ (8006458 <DMA_SetConfig+0x220>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d045      	beq.n	8006408 <DMA_SetConfig+0x1d0>
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a36      	ldr	r2, [pc, #216]	@ (800645c <DMA_SetConfig+0x224>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d040      	beq.n	8006408 <DMA_SetConfig+0x1d0>
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a35      	ldr	r2, [pc, #212]	@ (8006460 <DMA_SetConfig+0x228>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d03b      	beq.n	8006408 <DMA_SetConfig+0x1d0>
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a33      	ldr	r2, [pc, #204]	@ (8006464 <DMA_SetConfig+0x22c>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d036      	beq.n	8006408 <DMA_SetConfig+0x1d0>
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a32      	ldr	r2, [pc, #200]	@ (8006468 <DMA_SetConfig+0x230>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d031      	beq.n	8006408 <DMA_SetConfig+0x1d0>
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a30      	ldr	r2, [pc, #192]	@ (800646c <DMA_SetConfig+0x234>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d02c      	beq.n	8006408 <DMA_SetConfig+0x1d0>
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a2f      	ldr	r2, [pc, #188]	@ (8006470 <DMA_SetConfig+0x238>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d027      	beq.n	8006408 <DMA_SetConfig+0x1d0>
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a2d      	ldr	r2, [pc, #180]	@ (8006474 <DMA_SetConfig+0x23c>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d022      	beq.n	8006408 <DMA_SetConfig+0x1d0>
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a2c      	ldr	r2, [pc, #176]	@ (8006478 <DMA_SetConfig+0x240>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d01d      	beq.n	8006408 <DMA_SetConfig+0x1d0>
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a2a      	ldr	r2, [pc, #168]	@ (800647c <DMA_SetConfig+0x244>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d018      	beq.n	8006408 <DMA_SetConfig+0x1d0>
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a29      	ldr	r2, [pc, #164]	@ (8006480 <DMA_SetConfig+0x248>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d013      	beq.n	8006408 <DMA_SetConfig+0x1d0>
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a27      	ldr	r2, [pc, #156]	@ (8006484 <DMA_SetConfig+0x24c>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d00e      	beq.n	8006408 <DMA_SetConfig+0x1d0>
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a26      	ldr	r2, [pc, #152]	@ (8006488 <DMA_SetConfig+0x250>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d009      	beq.n	8006408 <DMA_SetConfig+0x1d0>
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a24      	ldr	r2, [pc, #144]	@ (800648c <DMA_SetConfig+0x254>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d004      	beq.n	8006408 <DMA_SetConfig+0x1d0>
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a23      	ldr	r2, [pc, #140]	@ (8006490 <DMA_SetConfig+0x258>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d101      	bne.n	800640c <DMA_SetConfig+0x1d4>
 8006408:	2301      	movs	r3, #1
 800640a:	e000      	b.n	800640e <DMA_SetConfig+0x1d6>
 800640c:	2300      	movs	r3, #0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d059      	beq.n	80064c6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006416:	f003 031f 	and.w	r3, r3, #31
 800641a:	223f      	movs	r2, #63	@ 0x3f
 800641c:	409a      	lsls	r2, r3
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006430:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	683a      	ldr	r2, [r7, #0]
 8006438:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	2b40      	cmp	r3, #64	@ 0x40
 8006440:	d138      	bne.n	80064b4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	68ba      	ldr	r2, [r7, #8]
 8006450:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006452:	e0ae      	b.n	80065b2 <DMA_SetConfig+0x37a>
 8006454:	40020010 	.word	0x40020010
 8006458:	40020028 	.word	0x40020028
 800645c:	40020040 	.word	0x40020040
 8006460:	40020058 	.word	0x40020058
 8006464:	40020070 	.word	0x40020070
 8006468:	40020088 	.word	0x40020088
 800646c:	400200a0 	.word	0x400200a0
 8006470:	400200b8 	.word	0x400200b8
 8006474:	40020410 	.word	0x40020410
 8006478:	40020428 	.word	0x40020428
 800647c:	40020440 	.word	0x40020440
 8006480:	40020458 	.word	0x40020458
 8006484:	40020470 	.word	0x40020470
 8006488:	40020488 	.word	0x40020488
 800648c:	400204a0 	.word	0x400204a0
 8006490:	400204b8 	.word	0x400204b8
 8006494:	58025408 	.word	0x58025408
 8006498:	5802541c 	.word	0x5802541c
 800649c:	58025430 	.word	0x58025430
 80064a0:	58025444 	.word	0x58025444
 80064a4:	58025458 	.word	0x58025458
 80064a8:	5802546c 	.word	0x5802546c
 80064ac:	58025480 	.word	0x58025480
 80064b0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	68ba      	ldr	r2, [r7, #8]
 80064ba:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	60da      	str	r2, [r3, #12]
}
 80064c4:	e075      	b.n	80065b2 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a3d      	ldr	r2, [pc, #244]	@ (80065c0 <DMA_SetConfig+0x388>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d04a      	beq.n	8006566 <DMA_SetConfig+0x32e>
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a3b      	ldr	r2, [pc, #236]	@ (80065c4 <DMA_SetConfig+0x38c>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d045      	beq.n	8006566 <DMA_SetConfig+0x32e>
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a3a      	ldr	r2, [pc, #232]	@ (80065c8 <DMA_SetConfig+0x390>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d040      	beq.n	8006566 <DMA_SetConfig+0x32e>
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a38      	ldr	r2, [pc, #224]	@ (80065cc <DMA_SetConfig+0x394>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d03b      	beq.n	8006566 <DMA_SetConfig+0x32e>
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a37      	ldr	r2, [pc, #220]	@ (80065d0 <DMA_SetConfig+0x398>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d036      	beq.n	8006566 <DMA_SetConfig+0x32e>
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a35      	ldr	r2, [pc, #212]	@ (80065d4 <DMA_SetConfig+0x39c>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d031      	beq.n	8006566 <DMA_SetConfig+0x32e>
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a34      	ldr	r2, [pc, #208]	@ (80065d8 <DMA_SetConfig+0x3a0>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d02c      	beq.n	8006566 <DMA_SetConfig+0x32e>
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a32      	ldr	r2, [pc, #200]	@ (80065dc <DMA_SetConfig+0x3a4>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d027      	beq.n	8006566 <DMA_SetConfig+0x32e>
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a31      	ldr	r2, [pc, #196]	@ (80065e0 <DMA_SetConfig+0x3a8>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d022      	beq.n	8006566 <DMA_SetConfig+0x32e>
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a2f      	ldr	r2, [pc, #188]	@ (80065e4 <DMA_SetConfig+0x3ac>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d01d      	beq.n	8006566 <DMA_SetConfig+0x32e>
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a2e      	ldr	r2, [pc, #184]	@ (80065e8 <DMA_SetConfig+0x3b0>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d018      	beq.n	8006566 <DMA_SetConfig+0x32e>
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a2c      	ldr	r2, [pc, #176]	@ (80065ec <DMA_SetConfig+0x3b4>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d013      	beq.n	8006566 <DMA_SetConfig+0x32e>
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a2b      	ldr	r2, [pc, #172]	@ (80065f0 <DMA_SetConfig+0x3b8>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d00e      	beq.n	8006566 <DMA_SetConfig+0x32e>
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a29      	ldr	r2, [pc, #164]	@ (80065f4 <DMA_SetConfig+0x3bc>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d009      	beq.n	8006566 <DMA_SetConfig+0x32e>
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a28      	ldr	r2, [pc, #160]	@ (80065f8 <DMA_SetConfig+0x3c0>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d004      	beq.n	8006566 <DMA_SetConfig+0x32e>
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a26      	ldr	r2, [pc, #152]	@ (80065fc <DMA_SetConfig+0x3c4>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d101      	bne.n	800656a <DMA_SetConfig+0x332>
 8006566:	2301      	movs	r3, #1
 8006568:	e000      	b.n	800656c <DMA_SetConfig+0x334>
 800656a:	2300      	movs	r3, #0
 800656c:	2b00      	cmp	r3, #0
 800656e:	d020      	beq.n	80065b2 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006574:	f003 031f 	and.w	r3, r3, #31
 8006578:	2201      	movs	r2, #1
 800657a:	409a      	lsls	r2, r3
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	683a      	ldr	r2, [r7, #0]
 8006586:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	2b40      	cmp	r3, #64	@ 0x40
 800658e:	d108      	bne.n	80065a2 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	68ba      	ldr	r2, [r7, #8]
 800659e:	60da      	str	r2, [r3, #12]
}
 80065a0:	e007      	b.n	80065b2 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68ba      	ldr	r2, [r7, #8]
 80065a8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	60da      	str	r2, [r3, #12]
}
 80065b2:	bf00      	nop
 80065b4:	371c      	adds	r7, #28
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr
 80065be:	bf00      	nop
 80065c0:	48022c08 	.word	0x48022c08
 80065c4:	48022c1c 	.word	0x48022c1c
 80065c8:	48022c30 	.word	0x48022c30
 80065cc:	48022c44 	.word	0x48022c44
 80065d0:	48022c58 	.word	0x48022c58
 80065d4:	48022c6c 	.word	0x48022c6c
 80065d8:	48022c80 	.word	0x48022c80
 80065dc:	48022c94 	.word	0x48022c94
 80065e0:	58025408 	.word	0x58025408
 80065e4:	5802541c 	.word	0x5802541c
 80065e8:	58025430 	.word	0x58025430
 80065ec:	58025444 	.word	0x58025444
 80065f0:	58025458 	.word	0x58025458
 80065f4:	5802546c 	.word	0x5802546c
 80065f8:	58025480 	.word	0x58025480
 80065fc:	58025494 	.word	0x58025494

08006600 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006600:	b480      	push	{r7}
 8006602:	b085      	sub	sp, #20
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a42      	ldr	r2, [pc, #264]	@ (8006718 <DMA_CalcBaseAndBitshift+0x118>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d04a      	beq.n	80066a8 <DMA_CalcBaseAndBitshift+0xa8>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a41      	ldr	r2, [pc, #260]	@ (800671c <DMA_CalcBaseAndBitshift+0x11c>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d045      	beq.n	80066a8 <DMA_CalcBaseAndBitshift+0xa8>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a3f      	ldr	r2, [pc, #252]	@ (8006720 <DMA_CalcBaseAndBitshift+0x120>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d040      	beq.n	80066a8 <DMA_CalcBaseAndBitshift+0xa8>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a3e      	ldr	r2, [pc, #248]	@ (8006724 <DMA_CalcBaseAndBitshift+0x124>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d03b      	beq.n	80066a8 <DMA_CalcBaseAndBitshift+0xa8>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a3c      	ldr	r2, [pc, #240]	@ (8006728 <DMA_CalcBaseAndBitshift+0x128>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d036      	beq.n	80066a8 <DMA_CalcBaseAndBitshift+0xa8>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a3b      	ldr	r2, [pc, #236]	@ (800672c <DMA_CalcBaseAndBitshift+0x12c>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d031      	beq.n	80066a8 <DMA_CalcBaseAndBitshift+0xa8>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a39      	ldr	r2, [pc, #228]	@ (8006730 <DMA_CalcBaseAndBitshift+0x130>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d02c      	beq.n	80066a8 <DMA_CalcBaseAndBitshift+0xa8>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a38      	ldr	r2, [pc, #224]	@ (8006734 <DMA_CalcBaseAndBitshift+0x134>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d027      	beq.n	80066a8 <DMA_CalcBaseAndBitshift+0xa8>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a36      	ldr	r2, [pc, #216]	@ (8006738 <DMA_CalcBaseAndBitshift+0x138>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d022      	beq.n	80066a8 <DMA_CalcBaseAndBitshift+0xa8>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a35      	ldr	r2, [pc, #212]	@ (800673c <DMA_CalcBaseAndBitshift+0x13c>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d01d      	beq.n	80066a8 <DMA_CalcBaseAndBitshift+0xa8>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a33      	ldr	r2, [pc, #204]	@ (8006740 <DMA_CalcBaseAndBitshift+0x140>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d018      	beq.n	80066a8 <DMA_CalcBaseAndBitshift+0xa8>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a32      	ldr	r2, [pc, #200]	@ (8006744 <DMA_CalcBaseAndBitshift+0x144>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d013      	beq.n	80066a8 <DMA_CalcBaseAndBitshift+0xa8>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a30      	ldr	r2, [pc, #192]	@ (8006748 <DMA_CalcBaseAndBitshift+0x148>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d00e      	beq.n	80066a8 <DMA_CalcBaseAndBitshift+0xa8>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a2f      	ldr	r2, [pc, #188]	@ (800674c <DMA_CalcBaseAndBitshift+0x14c>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d009      	beq.n	80066a8 <DMA_CalcBaseAndBitshift+0xa8>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a2d      	ldr	r2, [pc, #180]	@ (8006750 <DMA_CalcBaseAndBitshift+0x150>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d004      	beq.n	80066a8 <DMA_CalcBaseAndBitshift+0xa8>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a2c      	ldr	r2, [pc, #176]	@ (8006754 <DMA_CalcBaseAndBitshift+0x154>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d101      	bne.n	80066ac <DMA_CalcBaseAndBitshift+0xac>
 80066a8:	2301      	movs	r3, #1
 80066aa:	e000      	b.n	80066ae <DMA_CalcBaseAndBitshift+0xae>
 80066ac:	2300      	movs	r3, #0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d024      	beq.n	80066fc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	b2db      	uxtb	r3, r3
 80066b8:	3b10      	subs	r3, #16
 80066ba:	4a27      	ldr	r2, [pc, #156]	@ (8006758 <DMA_CalcBaseAndBitshift+0x158>)
 80066bc:	fba2 2303 	umull	r2, r3, r2, r3
 80066c0:	091b      	lsrs	r3, r3, #4
 80066c2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f003 0307 	and.w	r3, r3, #7
 80066ca:	4a24      	ldr	r2, [pc, #144]	@ (800675c <DMA_CalcBaseAndBitshift+0x15c>)
 80066cc:	5cd3      	ldrb	r3, [r2, r3]
 80066ce:	461a      	mov	r2, r3
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2b03      	cmp	r3, #3
 80066d8:	d908      	bls.n	80066ec <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	461a      	mov	r2, r3
 80066e0:	4b1f      	ldr	r3, [pc, #124]	@ (8006760 <DMA_CalcBaseAndBitshift+0x160>)
 80066e2:	4013      	ands	r3, r2
 80066e4:	1d1a      	adds	r2, r3, #4
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	659a      	str	r2, [r3, #88]	@ 0x58
 80066ea:	e00d      	b.n	8006708 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	461a      	mov	r2, r3
 80066f2:	4b1b      	ldr	r3, [pc, #108]	@ (8006760 <DMA_CalcBaseAndBitshift+0x160>)
 80066f4:	4013      	ands	r3, r2
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80066fa:	e005      	b.n	8006708 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800670c:	4618      	mov	r0, r3
 800670e:	3714      	adds	r7, #20
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr
 8006718:	40020010 	.word	0x40020010
 800671c:	40020028 	.word	0x40020028
 8006720:	40020040 	.word	0x40020040
 8006724:	40020058 	.word	0x40020058
 8006728:	40020070 	.word	0x40020070
 800672c:	40020088 	.word	0x40020088
 8006730:	400200a0 	.word	0x400200a0
 8006734:	400200b8 	.word	0x400200b8
 8006738:	40020410 	.word	0x40020410
 800673c:	40020428 	.word	0x40020428
 8006740:	40020440 	.word	0x40020440
 8006744:	40020458 	.word	0x40020458
 8006748:	40020470 	.word	0x40020470
 800674c:	40020488 	.word	0x40020488
 8006750:	400204a0 	.word	0x400204a0
 8006754:	400204b8 	.word	0x400204b8
 8006758:	aaaaaaab 	.word	0xaaaaaaab
 800675c:	080130a0 	.word	0x080130a0
 8006760:	fffffc00 	.word	0xfffffc00

08006764 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006764:	b480      	push	{r7}
 8006766:	b085      	sub	sp, #20
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800676c:	2300      	movs	r3, #0
 800676e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	699b      	ldr	r3, [r3, #24]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d120      	bne.n	80067ba <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800677c:	2b03      	cmp	r3, #3
 800677e:	d858      	bhi.n	8006832 <DMA_CheckFifoParam+0xce>
 8006780:	a201      	add	r2, pc, #4	@ (adr r2, 8006788 <DMA_CheckFifoParam+0x24>)
 8006782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006786:	bf00      	nop
 8006788:	08006799 	.word	0x08006799
 800678c:	080067ab 	.word	0x080067ab
 8006790:	08006799 	.word	0x08006799
 8006794:	08006833 	.word	0x08006833
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800679c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d048      	beq.n	8006836 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80067a4:	2301      	movs	r3, #1
 80067a6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80067a8:	e045      	b.n	8006836 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067ae:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80067b2:	d142      	bne.n	800683a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80067b8:	e03f      	b.n	800683a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	699b      	ldr	r3, [r3, #24]
 80067be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067c2:	d123      	bne.n	800680c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067c8:	2b03      	cmp	r3, #3
 80067ca:	d838      	bhi.n	800683e <DMA_CheckFifoParam+0xda>
 80067cc:	a201      	add	r2, pc, #4	@ (adr r2, 80067d4 <DMA_CheckFifoParam+0x70>)
 80067ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067d2:	bf00      	nop
 80067d4:	080067e5 	.word	0x080067e5
 80067d8:	080067eb 	.word	0x080067eb
 80067dc:	080067e5 	.word	0x080067e5
 80067e0:	080067fd 	.word	0x080067fd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80067e4:	2301      	movs	r3, #1
 80067e6:	73fb      	strb	r3, [r7, #15]
        break;
 80067e8:	e030      	b.n	800684c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067ee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d025      	beq.n	8006842 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80067fa:	e022      	b.n	8006842 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006800:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006804:	d11f      	bne.n	8006846 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800680a:	e01c      	b.n	8006846 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006810:	2b02      	cmp	r3, #2
 8006812:	d902      	bls.n	800681a <DMA_CheckFifoParam+0xb6>
 8006814:	2b03      	cmp	r3, #3
 8006816:	d003      	beq.n	8006820 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006818:	e018      	b.n	800684c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800681a:	2301      	movs	r3, #1
 800681c:	73fb      	strb	r3, [r7, #15]
        break;
 800681e:	e015      	b.n	800684c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006824:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006828:	2b00      	cmp	r3, #0
 800682a:	d00e      	beq.n	800684a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800682c:	2301      	movs	r3, #1
 800682e:	73fb      	strb	r3, [r7, #15]
    break;
 8006830:	e00b      	b.n	800684a <DMA_CheckFifoParam+0xe6>
        break;
 8006832:	bf00      	nop
 8006834:	e00a      	b.n	800684c <DMA_CheckFifoParam+0xe8>
        break;
 8006836:	bf00      	nop
 8006838:	e008      	b.n	800684c <DMA_CheckFifoParam+0xe8>
        break;
 800683a:	bf00      	nop
 800683c:	e006      	b.n	800684c <DMA_CheckFifoParam+0xe8>
        break;
 800683e:	bf00      	nop
 8006840:	e004      	b.n	800684c <DMA_CheckFifoParam+0xe8>
        break;
 8006842:	bf00      	nop
 8006844:	e002      	b.n	800684c <DMA_CheckFifoParam+0xe8>
        break;
 8006846:	bf00      	nop
 8006848:	e000      	b.n	800684c <DMA_CheckFifoParam+0xe8>
    break;
 800684a:	bf00      	nop
    }
  }

  return status;
 800684c:	7bfb      	ldrb	r3, [r7, #15]
}
 800684e:	4618      	mov	r0, r3
 8006850:	3714      	adds	r7, #20
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr
 800685a:	bf00      	nop

0800685c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800685c:	b480      	push	{r7}
 800685e:	b085      	sub	sp, #20
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a38      	ldr	r2, [pc, #224]	@ (8006950 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d022      	beq.n	80068ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a36      	ldr	r2, [pc, #216]	@ (8006954 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d01d      	beq.n	80068ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a35      	ldr	r2, [pc, #212]	@ (8006958 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d018      	beq.n	80068ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a33      	ldr	r2, [pc, #204]	@ (800695c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d013      	beq.n	80068ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a32      	ldr	r2, [pc, #200]	@ (8006960 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d00e      	beq.n	80068ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a30      	ldr	r2, [pc, #192]	@ (8006964 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d009      	beq.n	80068ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a2f      	ldr	r2, [pc, #188]	@ (8006968 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d004      	beq.n	80068ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a2d      	ldr	r2, [pc, #180]	@ (800696c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d101      	bne.n	80068be <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80068ba:	2301      	movs	r3, #1
 80068bc:	e000      	b.n	80068c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80068be:	2300      	movs	r3, #0
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d01a      	beq.n	80068fa <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	3b08      	subs	r3, #8
 80068cc:	4a28      	ldr	r2, [pc, #160]	@ (8006970 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80068ce:	fba2 2303 	umull	r2, r3, r2, r3
 80068d2:	091b      	lsrs	r3, r3, #4
 80068d4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80068d6:	68fa      	ldr	r2, [r7, #12]
 80068d8:	4b26      	ldr	r3, [pc, #152]	@ (8006974 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80068da:	4413      	add	r3, r2
 80068dc:	009b      	lsls	r3, r3, #2
 80068de:	461a      	mov	r2, r3
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	4a24      	ldr	r2, [pc, #144]	@ (8006978 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80068e8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f003 031f 	and.w	r3, r3, #31
 80068f0:	2201      	movs	r2, #1
 80068f2:	409a      	lsls	r2, r3
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80068f8:	e024      	b.n	8006944 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	3b10      	subs	r3, #16
 8006902:	4a1e      	ldr	r2, [pc, #120]	@ (800697c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006904:	fba2 2303 	umull	r2, r3, r2, r3
 8006908:	091b      	lsrs	r3, r3, #4
 800690a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	4a1c      	ldr	r2, [pc, #112]	@ (8006980 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d806      	bhi.n	8006922 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	4a1b      	ldr	r2, [pc, #108]	@ (8006984 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d902      	bls.n	8006922 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	3308      	adds	r3, #8
 8006920:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006922:	68fa      	ldr	r2, [r7, #12]
 8006924:	4b18      	ldr	r3, [pc, #96]	@ (8006988 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006926:	4413      	add	r3, r2
 8006928:	009b      	lsls	r3, r3, #2
 800692a:	461a      	mov	r2, r3
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	4a16      	ldr	r2, [pc, #88]	@ (800698c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006934:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f003 031f 	and.w	r3, r3, #31
 800693c:	2201      	movs	r2, #1
 800693e:	409a      	lsls	r2, r3
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006944:	bf00      	nop
 8006946:	3714      	adds	r7, #20
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr
 8006950:	58025408 	.word	0x58025408
 8006954:	5802541c 	.word	0x5802541c
 8006958:	58025430 	.word	0x58025430
 800695c:	58025444 	.word	0x58025444
 8006960:	58025458 	.word	0x58025458
 8006964:	5802546c 	.word	0x5802546c
 8006968:	58025480 	.word	0x58025480
 800696c:	58025494 	.word	0x58025494
 8006970:	cccccccd 	.word	0xcccccccd
 8006974:	16009600 	.word	0x16009600
 8006978:	58025880 	.word	0x58025880
 800697c:	aaaaaaab 	.word	0xaaaaaaab
 8006980:	400204b8 	.word	0x400204b8
 8006984:	4002040f 	.word	0x4002040f
 8006988:	10008200 	.word	0x10008200
 800698c:	40020880 	.word	0x40020880

08006990 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006990:	b480      	push	{r7}
 8006992:	b085      	sub	sp, #20
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	b2db      	uxtb	r3, r3
 800699e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d04a      	beq.n	8006a3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2b08      	cmp	r3, #8
 80069aa:	d847      	bhi.n	8006a3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a25      	ldr	r2, [pc, #148]	@ (8006a48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d022      	beq.n	80069fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a24      	ldr	r2, [pc, #144]	@ (8006a4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d01d      	beq.n	80069fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a22      	ldr	r2, [pc, #136]	@ (8006a50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d018      	beq.n	80069fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a21      	ldr	r2, [pc, #132]	@ (8006a54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d013      	beq.n	80069fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a1f      	ldr	r2, [pc, #124]	@ (8006a58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d00e      	beq.n	80069fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a1e      	ldr	r2, [pc, #120]	@ (8006a5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d009      	beq.n	80069fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a1c      	ldr	r2, [pc, #112]	@ (8006a60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d004      	beq.n	80069fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a1b      	ldr	r2, [pc, #108]	@ (8006a64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d101      	bne.n	8006a00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80069fc:	2301      	movs	r3, #1
 80069fe:	e000      	b.n	8006a02 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006a00:	2300      	movs	r3, #0
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d00a      	beq.n	8006a1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006a06:	68fa      	ldr	r2, [r7, #12]
 8006a08:	4b17      	ldr	r3, [pc, #92]	@ (8006a68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006a0a:	4413      	add	r3, r2
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	461a      	mov	r2, r3
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	4a15      	ldr	r2, [pc, #84]	@ (8006a6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006a18:	671a      	str	r2, [r3, #112]	@ 0x70
 8006a1a:	e009      	b.n	8006a30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006a1c:	68fa      	ldr	r2, [r7, #12]
 8006a1e:	4b14      	ldr	r3, [pc, #80]	@ (8006a70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006a20:	4413      	add	r3, r2
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	461a      	mov	r2, r3
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	4a11      	ldr	r2, [pc, #68]	@ (8006a74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006a2e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	3b01      	subs	r3, #1
 8006a34:	2201      	movs	r2, #1
 8006a36:	409a      	lsls	r2, r3
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8006a3c:	bf00      	nop
 8006a3e:	3714      	adds	r7, #20
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr
 8006a48:	58025408 	.word	0x58025408
 8006a4c:	5802541c 	.word	0x5802541c
 8006a50:	58025430 	.word	0x58025430
 8006a54:	58025444 	.word	0x58025444
 8006a58:	58025458 	.word	0x58025458
 8006a5c:	5802546c 	.word	0x5802546c
 8006a60:	58025480 	.word	0x58025480
 8006a64:	58025494 	.word	0x58025494
 8006a68:	1600963f 	.word	0x1600963f
 8006a6c:	58025940 	.word	0x58025940
 8006a70:	1000823f 	.word	0x1000823f
 8006a74:	40020940 	.word	0x40020940

08006a78 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b098      	sub	sp, #96	@ 0x60
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8006a80:	4a84      	ldr	r2, [pc, #528]	@ (8006c94 <HAL_FDCAN_Init+0x21c>)
 8006a82:	f107 030c 	add.w	r3, r7, #12
 8006a86:	4611      	mov	r1, r2
 8006a88:	224c      	movs	r2, #76	@ 0x4c
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f00c f948 	bl	8012d20 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d101      	bne.n	8006a9a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	e1c6      	b.n	8006e28 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a7e      	ldr	r2, [pc, #504]	@ (8006c98 <HAL_FDCAN_Init+0x220>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d106      	bne.n	8006ab2 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8006aac:	461a      	mov	r2, r3
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8006ab8:	b2db      	uxtb	r3, r3
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d106      	bne.n	8006acc <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f7fb faf0 	bl	80020ac <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	699a      	ldr	r2, [r3, #24]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f022 0210 	bic.w	r2, r2, #16
 8006ada:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006adc:	f7fc ff36 	bl	800394c <HAL_GetTick>
 8006ae0:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006ae2:	e014      	b.n	8006b0e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006ae4:	f7fc ff32 	bl	800394c <HAL_GetTick>
 8006ae8:	4602      	mov	r2, r0
 8006aea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006aec:	1ad3      	subs	r3, r2, r3
 8006aee:	2b0a      	cmp	r3, #10
 8006af0:	d90d      	bls.n	8006b0e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006af8:	f043 0201 	orr.w	r2, r3, #1
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2203      	movs	r2, #3
 8006b06:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	e18c      	b.n	8006e28 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	699b      	ldr	r3, [r3, #24]
 8006b14:	f003 0308 	and.w	r3, r3, #8
 8006b18:	2b08      	cmp	r3, #8
 8006b1a:	d0e3      	beq.n	8006ae4 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	699a      	ldr	r2, [r3, #24]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f042 0201 	orr.w	r2, r2, #1
 8006b2a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006b2c:	f7fc ff0e 	bl	800394c <HAL_GetTick>
 8006b30:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006b32:	e014      	b.n	8006b5e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006b34:	f7fc ff0a 	bl	800394c <HAL_GetTick>
 8006b38:	4602      	mov	r2, r0
 8006b3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006b3c:	1ad3      	subs	r3, r2, r3
 8006b3e:	2b0a      	cmp	r3, #10
 8006b40:	d90d      	bls.n	8006b5e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006b48:	f043 0201 	orr.w	r2, r3, #1
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2203      	movs	r2, #3
 8006b56:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	e164      	b.n	8006e28 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	699b      	ldr	r3, [r3, #24]
 8006b64:	f003 0301 	and.w	r3, r3, #1
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d0e3      	beq.n	8006b34 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	699a      	ldr	r2, [r3, #24]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f042 0202 	orr.w	r2, r2, #2
 8006b7a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	7c1b      	ldrb	r3, [r3, #16]
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d108      	bne.n	8006b96 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	699a      	ldr	r2, [r3, #24]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b92:	619a      	str	r2, [r3, #24]
 8006b94:	e007      	b.n	8006ba6 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	699a      	ldr	r2, [r3, #24]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ba4:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	7c5b      	ldrb	r3, [r3, #17]
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d108      	bne.n	8006bc0 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	699a      	ldr	r2, [r3, #24]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006bbc:	619a      	str	r2, [r3, #24]
 8006bbe:	e007      	b.n	8006bd0 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	699a      	ldr	r2, [r3, #24]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006bce:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	7c9b      	ldrb	r3, [r3, #18]
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d108      	bne.n	8006bea <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	699a      	ldr	r2, [r3, #24]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006be6:	619a      	str	r2, [r3, #24]
 8006be8:	e007      	b.n	8006bfa <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	699a      	ldr	r2, [r3, #24]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006bf8:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	699b      	ldr	r3, [r3, #24]
 8006c00:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	689a      	ldr	r2, [r3, #8]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	430a      	orrs	r2, r1
 8006c0e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	699a      	ldr	r2, [r3, #24]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8006c1e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	691a      	ldr	r2, [r3, #16]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f022 0210 	bic.w	r2, r2, #16
 8006c2e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	68db      	ldr	r3, [r3, #12]
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d108      	bne.n	8006c4a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	699a      	ldr	r2, [r3, #24]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f042 0204 	orr.w	r2, r2, #4
 8006c46:	619a      	str	r2, [r3, #24]
 8006c48:	e030      	b.n	8006cac <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d02c      	beq.n	8006cac <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	68db      	ldr	r3, [r3, #12]
 8006c56:	2b02      	cmp	r3, #2
 8006c58:	d020      	beq.n	8006c9c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	699a      	ldr	r2, [r3, #24]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006c68:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	691a      	ldr	r2, [r3, #16]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f042 0210 	orr.w	r2, r2, #16
 8006c78:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	68db      	ldr	r3, [r3, #12]
 8006c7e:	2b03      	cmp	r3, #3
 8006c80:	d114      	bne.n	8006cac <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	699a      	ldr	r2, [r3, #24]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f042 0220 	orr.w	r2, r2, #32
 8006c90:	619a      	str	r2, [r3, #24]
 8006c92:	e00b      	b.n	8006cac <HAL_FDCAN_Init+0x234>
 8006c94:	08012ffc 	.word	0x08012ffc
 8006c98:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	699a      	ldr	r2, [r3, #24]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f042 0220 	orr.w	r2, r2, #32
 8006caa:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	699b      	ldr	r3, [r3, #24]
 8006cb0:	3b01      	subs	r3, #1
 8006cb2:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	69db      	ldr	r3, [r3, #28]
 8006cb8:	3b01      	subs	r3, #1
 8006cba:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006cbc:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6a1b      	ldr	r3, [r3, #32]
 8006cc2:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006cc4:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	695b      	ldr	r3, [r3, #20]
 8006ccc:	3b01      	subs	r3, #1
 8006cce:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006cd4:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006cd6:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ce0:	d115      	bne.n	8006d0e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ce6:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cec:	3b01      	subs	r3, #1
 8006cee:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006cf0:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cf6:	3b01      	subs	r3, #1
 8006cf8:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006cfa:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d02:	3b01      	subs	r3, #1
 8006d04:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006d0a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006d0c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d00a      	beq.n	8006d2c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	430a      	orrs	r2, r1
 8006d28:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d34:	4413      	add	r3, r2
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d011      	beq.n	8006d5e <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8006d42:	f023 0107 	bic.w	r1, r3, #7
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006d4a:	009b      	lsls	r3, r3, #2
 8006d4c:	3360      	adds	r3, #96	@ 0x60
 8006d4e:	443b      	add	r3, r7
 8006d50:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	430a      	orrs	r2, r1
 8006d5a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d011      	beq.n	8006d8a <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006d6e:	f023 0107 	bic.w	r1, r3, #7
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	3360      	adds	r3, #96	@ 0x60
 8006d7a:	443b      	add	r3, r7
 8006d7c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	430a      	orrs	r2, r1
 8006d86:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d012      	beq.n	8006db8 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006d9a:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006da2:	009b      	lsls	r3, r3, #2
 8006da4:	3360      	adds	r3, #96	@ 0x60
 8006da6:	443b      	add	r3, r7
 8006da8:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8006dac:	011a      	lsls	r2, r3, #4
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	430a      	orrs	r2, r1
 8006db4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d012      	beq.n	8006de6 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006dc8:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dd0:	009b      	lsls	r3, r3, #2
 8006dd2:	3360      	adds	r3, #96	@ 0x60
 8006dd4:	443b      	add	r3, r7
 8006dd6:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8006dda:	021a      	lsls	r2, r3, #8
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	430a      	orrs	r2, r1
 8006de2:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a11      	ldr	r2, [pc, #68]	@ (8006e30 <HAL_FDCAN_Init+0x3b8>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d107      	bne.n	8006e00 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	689a      	ldr	r2, [r3, #8]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	f022 0203 	bic.w	r2, r2, #3
 8006dfe:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2200      	movs	r2, #0
 8006e04:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2201      	movs	r2, #1
 8006e14:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 f80b 	bl	8006e34 <FDCAN_CalcultateRamBlockAddresses>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8006e24:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3760      	adds	r7, #96	@ 0x60
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}
 8006e30:	4000a000 	.word	0x4000a000

08006e34 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b085      	sub	sp, #20
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e40:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8006e4a:	4ba7      	ldr	r3, [pc, #668]	@ (80070e8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006e4c:	4013      	ands	r3, r2
 8006e4e:	68ba      	ldr	r2, [r7, #8]
 8006e50:	0091      	lsls	r1, r2, #2
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	6812      	ldr	r2, [r2, #0]
 8006e56:	430b      	orrs	r3, r1
 8006e58:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e64:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e6c:	041a      	lsls	r2, r3, #16
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	430a      	orrs	r2, r1
 8006e74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e7c:	68ba      	ldr	r2, [r7, #8]
 8006e7e:	4413      	add	r3, r2
 8006e80:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006e8a:	4b97      	ldr	r3, [pc, #604]	@ (80070e8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006e8c:	4013      	ands	r3, r2
 8006e8e:	68ba      	ldr	r2, [r7, #8]
 8006e90:	0091      	lsls	r1, r2, #2
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	6812      	ldr	r2, [r2, #0]
 8006e96:	430b      	orrs	r3, r1
 8006e98:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ea4:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006eac:	041a      	lsls	r2, r3, #16
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	430a      	orrs	r2, r1
 8006eb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ebc:	005b      	lsls	r3, r3, #1
 8006ebe:	68ba      	ldr	r2, [r7, #8]
 8006ec0:	4413      	add	r3, r2
 8006ec2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8006ecc:	4b86      	ldr	r3, [pc, #536]	@ (80070e8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006ece:	4013      	ands	r3, r2
 8006ed0:	68ba      	ldr	r2, [r7, #8]
 8006ed2:	0091      	lsls	r1, r2, #2
 8006ed4:	687a      	ldr	r2, [r7, #4]
 8006ed6:	6812      	ldr	r2, [r2, #0]
 8006ed8:	430b      	orrs	r3, r1
 8006eda:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006ee6:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eee:	041a      	lsls	r2, r3, #16
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	430a      	orrs	r2, r1
 8006ef6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8006f02:	fb02 f303 	mul.w	r3, r2, r3
 8006f06:	68ba      	ldr	r2, [r7, #8]
 8006f08:	4413      	add	r3, r2
 8006f0a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8006f14:	4b74      	ldr	r3, [pc, #464]	@ (80070e8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006f16:	4013      	ands	r3, r2
 8006f18:	68ba      	ldr	r2, [r7, #8]
 8006f1a:	0091      	lsls	r1, r2, #2
 8006f1c:	687a      	ldr	r2, [r7, #4]
 8006f1e:	6812      	ldr	r2, [r2, #0]
 8006f20:	430b      	orrs	r3, r1
 8006f22:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006f2e:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f36:	041a      	lsls	r2, r3, #16
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	430a      	orrs	r2, r1
 8006f3e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006f4a:	fb02 f303 	mul.w	r3, r2, r3
 8006f4e:	68ba      	ldr	r2, [r7, #8]
 8006f50:	4413      	add	r3, r2
 8006f52:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8006f5c:	4b62      	ldr	r3, [pc, #392]	@ (80070e8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006f5e:	4013      	ands	r3, r2
 8006f60:	68ba      	ldr	r2, [r7, #8]
 8006f62:	0091      	lsls	r1, r2, #2
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	6812      	ldr	r2, [r2, #0]
 8006f68:	430b      	orrs	r3, r1
 8006f6a:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f72:	687a      	ldr	r2, [r7, #4]
 8006f74:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8006f76:	fb02 f303 	mul.w	r3, r2, r3
 8006f7a:	68ba      	ldr	r2, [r7, #8]
 8006f7c:	4413      	add	r3, r2
 8006f7e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8006f88:	4b57      	ldr	r3, [pc, #348]	@ (80070e8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006f8a:	4013      	ands	r3, r2
 8006f8c:	68ba      	ldr	r2, [r7, #8]
 8006f8e:	0091      	lsls	r1, r2, #2
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	6812      	ldr	r2, [r2, #0]
 8006f94:	430b      	orrs	r3, r1
 8006f96:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006fa2:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006faa:	041a      	lsls	r2, r3, #16
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	430a      	orrs	r2, r1
 8006fb2:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fba:	005b      	lsls	r3, r3, #1
 8006fbc:	68ba      	ldr	r2, [r7, #8]
 8006fbe:	4413      	add	r3, r2
 8006fc0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8006fca:	4b47      	ldr	r3, [pc, #284]	@ (80070e8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006fcc:	4013      	ands	r3, r2
 8006fce:	68ba      	ldr	r2, [r7, #8]
 8006fd0:	0091      	lsls	r1, r2, #2
 8006fd2:	687a      	ldr	r2, [r7, #4]
 8006fd4:	6812      	ldr	r2, [r2, #0]
 8006fd6:	430b      	orrs	r3, r1
 8006fd8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006fe4:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006fec:	041a      	lsls	r2, r3, #16
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	430a      	orrs	r2, r1
 8006ff4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007000:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007008:	061a      	lsls	r2, r3, #24
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	430a      	orrs	r2, r1
 8007010:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007018:	4b34      	ldr	r3, [pc, #208]	@ (80070ec <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800701a:	4413      	add	r3, r2
 800701c:	009a      	lsls	r2, r3, #2
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800702a:	009b      	lsls	r3, r3, #2
 800702c:	441a      	add	r2, r3
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800703a:	00db      	lsls	r3, r3, #3
 800703c:	441a      	add	r2, r3
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800704a:	6879      	ldr	r1, [r7, #4]
 800704c:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 800704e:	fb01 f303 	mul.w	r3, r1, r3
 8007052:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8007054:	441a      	add	r2, r3
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007062:	6879      	ldr	r1, [r7, #4]
 8007064:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8007066:	fb01 f303 	mul.w	r3, r1, r3
 800706a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 800706c:	441a      	add	r2, r3
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800707a:	6879      	ldr	r1, [r7, #4]
 800707c:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 800707e:	fb01 f303 	mul.w	r3, r1, r3
 8007082:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8007084:	441a      	add	r2, r3
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007096:	00db      	lsls	r3, r3, #3
 8007098:	441a      	add	r2, r3
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070aa:	6879      	ldr	r1, [r7, #4]
 80070ac:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80070ae:	fb01 f303 	mul.w	r3, r1, r3
 80070b2:	009b      	lsls	r3, r3, #2
 80070b4:	441a      	add	r2, r3
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070c6:	6879      	ldr	r1, [r7, #4]
 80070c8:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80070ca:	fb01 f303 	mul.w	r3, r1, r3
 80070ce:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80070d0:	441a      	add	r2, r3
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070de:	4a04      	ldr	r2, [pc, #16]	@ (80070f0 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d915      	bls.n	8007110 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80070e4:	e006      	b.n	80070f4 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80070e6:	bf00      	nop
 80070e8:	ffff0003 	.word	0xffff0003
 80070ec:	10002b00 	.word	0x10002b00
 80070f0:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80070fa:	f043 0220 	orr.w	r2, r3, #32
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2203      	movs	r2, #3
 8007108:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 800710c:	2301      	movs	r3, #1
 800710e:	e010      	b.n	8007132 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007114:	60fb      	str	r3, [r7, #12]
 8007116:	e005      	b.n	8007124 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2200      	movs	r2, #0
 800711c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	3304      	adds	r3, #4
 8007122:	60fb      	str	r3, [r7, #12]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800712a:	68fa      	ldr	r2, [r7, #12]
 800712c:	429a      	cmp	r2, r3
 800712e:	d3f3      	bcc.n	8007118 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8007130:	2300      	movs	r3, #0
}
 8007132:	4618      	mov	r0, r3
 8007134:	3714      	adds	r7, #20
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr
 800713e:	bf00      	nop

08007140 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007140:	b480      	push	{r7}
 8007142:	b089      	sub	sp, #36	@ 0x24
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800714a:	2300      	movs	r3, #0
 800714c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800714e:	4b89      	ldr	r3, [pc, #548]	@ (8007374 <HAL_GPIO_Init+0x234>)
 8007150:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007152:	e194      	b.n	800747e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	681a      	ldr	r2, [r3, #0]
 8007158:	2101      	movs	r1, #1
 800715a:	69fb      	ldr	r3, [r7, #28]
 800715c:	fa01 f303 	lsl.w	r3, r1, r3
 8007160:	4013      	ands	r3, r2
 8007162:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	2b00      	cmp	r3, #0
 8007168:	f000 8186 	beq.w	8007478 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	f003 0303 	and.w	r3, r3, #3
 8007174:	2b01      	cmp	r3, #1
 8007176:	d005      	beq.n	8007184 <HAL_GPIO_Init+0x44>
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	f003 0303 	and.w	r3, r3, #3
 8007180:	2b02      	cmp	r3, #2
 8007182:	d130      	bne.n	80071e6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800718a:	69fb      	ldr	r3, [r7, #28]
 800718c:	005b      	lsls	r3, r3, #1
 800718e:	2203      	movs	r2, #3
 8007190:	fa02 f303 	lsl.w	r3, r2, r3
 8007194:	43db      	mvns	r3, r3
 8007196:	69ba      	ldr	r2, [r7, #24]
 8007198:	4013      	ands	r3, r2
 800719a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	68da      	ldr	r2, [r3, #12]
 80071a0:	69fb      	ldr	r3, [r7, #28]
 80071a2:	005b      	lsls	r3, r3, #1
 80071a4:	fa02 f303 	lsl.w	r3, r2, r3
 80071a8:	69ba      	ldr	r2, [r7, #24]
 80071aa:	4313      	orrs	r3, r2
 80071ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	69ba      	ldr	r2, [r7, #24]
 80071b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80071ba:	2201      	movs	r2, #1
 80071bc:	69fb      	ldr	r3, [r7, #28]
 80071be:	fa02 f303 	lsl.w	r3, r2, r3
 80071c2:	43db      	mvns	r3, r3
 80071c4:	69ba      	ldr	r2, [r7, #24]
 80071c6:	4013      	ands	r3, r2
 80071c8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	091b      	lsrs	r3, r3, #4
 80071d0:	f003 0201 	and.w	r2, r3, #1
 80071d4:	69fb      	ldr	r3, [r7, #28]
 80071d6:	fa02 f303 	lsl.w	r3, r2, r3
 80071da:	69ba      	ldr	r2, [r7, #24]
 80071dc:	4313      	orrs	r3, r2
 80071de:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	69ba      	ldr	r2, [r7, #24]
 80071e4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	f003 0303 	and.w	r3, r3, #3
 80071ee:	2b03      	cmp	r3, #3
 80071f0:	d017      	beq.n	8007222 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	68db      	ldr	r3, [r3, #12]
 80071f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80071f8:	69fb      	ldr	r3, [r7, #28]
 80071fa:	005b      	lsls	r3, r3, #1
 80071fc:	2203      	movs	r2, #3
 80071fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007202:	43db      	mvns	r3, r3
 8007204:	69ba      	ldr	r2, [r7, #24]
 8007206:	4013      	ands	r3, r2
 8007208:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	689a      	ldr	r2, [r3, #8]
 800720e:	69fb      	ldr	r3, [r7, #28]
 8007210:	005b      	lsls	r3, r3, #1
 8007212:	fa02 f303 	lsl.w	r3, r2, r3
 8007216:	69ba      	ldr	r2, [r7, #24]
 8007218:	4313      	orrs	r3, r2
 800721a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	69ba      	ldr	r2, [r7, #24]
 8007220:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	f003 0303 	and.w	r3, r3, #3
 800722a:	2b02      	cmp	r3, #2
 800722c:	d123      	bne.n	8007276 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800722e:	69fb      	ldr	r3, [r7, #28]
 8007230:	08da      	lsrs	r2, r3, #3
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	3208      	adds	r2, #8
 8007236:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800723a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800723c:	69fb      	ldr	r3, [r7, #28]
 800723e:	f003 0307 	and.w	r3, r3, #7
 8007242:	009b      	lsls	r3, r3, #2
 8007244:	220f      	movs	r2, #15
 8007246:	fa02 f303 	lsl.w	r3, r2, r3
 800724a:	43db      	mvns	r3, r3
 800724c:	69ba      	ldr	r2, [r7, #24]
 800724e:	4013      	ands	r3, r2
 8007250:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	691a      	ldr	r2, [r3, #16]
 8007256:	69fb      	ldr	r3, [r7, #28]
 8007258:	f003 0307 	and.w	r3, r3, #7
 800725c:	009b      	lsls	r3, r3, #2
 800725e:	fa02 f303 	lsl.w	r3, r2, r3
 8007262:	69ba      	ldr	r2, [r7, #24]
 8007264:	4313      	orrs	r3, r2
 8007266:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007268:	69fb      	ldr	r3, [r7, #28]
 800726a:	08da      	lsrs	r2, r3, #3
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	3208      	adds	r2, #8
 8007270:	69b9      	ldr	r1, [r7, #24]
 8007272:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800727c:	69fb      	ldr	r3, [r7, #28]
 800727e:	005b      	lsls	r3, r3, #1
 8007280:	2203      	movs	r2, #3
 8007282:	fa02 f303 	lsl.w	r3, r2, r3
 8007286:	43db      	mvns	r3, r3
 8007288:	69ba      	ldr	r2, [r7, #24]
 800728a:	4013      	ands	r3, r2
 800728c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	f003 0203 	and.w	r2, r3, #3
 8007296:	69fb      	ldr	r3, [r7, #28]
 8007298:	005b      	lsls	r3, r3, #1
 800729a:	fa02 f303 	lsl.w	r3, r2, r3
 800729e:	69ba      	ldr	r2, [r7, #24]
 80072a0:	4313      	orrs	r3, r2
 80072a2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	69ba      	ldr	r2, [r7, #24]
 80072a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	f000 80e0 	beq.w	8007478 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80072b8:	4b2f      	ldr	r3, [pc, #188]	@ (8007378 <HAL_GPIO_Init+0x238>)
 80072ba:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80072be:	4a2e      	ldr	r2, [pc, #184]	@ (8007378 <HAL_GPIO_Init+0x238>)
 80072c0:	f043 0302 	orr.w	r3, r3, #2
 80072c4:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80072c8:	4b2b      	ldr	r3, [pc, #172]	@ (8007378 <HAL_GPIO_Init+0x238>)
 80072ca:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80072ce:	f003 0302 	and.w	r3, r3, #2
 80072d2:	60fb      	str	r3, [r7, #12]
 80072d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80072d6:	4a29      	ldr	r2, [pc, #164]	@ (800737c <HAL_GPIO_Init+0x23c>)
 80072d8:	69fb      	ldr	r3, [r7, #28]
 80072da:	089b      	lsrs	r3, r3, #2
 80072dc:	3302      	adds	r3, #2
 80072de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80072e4:	69fb      	ldr	r3, [r7, #28]
 80072e6:	f003 0303 	and.w	r3, r3, #3
 80072ea:	009b      	lsls	r3, r3, #2
 80072ec:	220f      	movs	r2, #15
 80072ee:	fa02 f303 	lsl.w	r3, r2, r3
 80072f2:	43db      	mvns	r3, r3
 80072f4:	69ba      	ldr	r2, [r7, #24]
 80072f6:	4013      	ands	r3, r2
 80072f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	4a20      	ldr	r2, [pc, #128]	@ (8007380 <HAL_GPIO_Init+0x240>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d052      	beq.n	80073a8 <HAL_GPIO_Init+0x268>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	4a1f      	ldr	r2, [pc, #124]	@ (8007384 <HAL_GPIO_Init+0x244>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d031      	beq.n	800736e <HAL_GPIO_Init+0x22e>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	4a1e      	ldr	r2, [pc, #120]	@ (8007388 <HAL_GPIO_Init+0x248>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d02b      	beq.n	800736a <HAL_GPIO_Init+0x22a>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	4a1d      	ldr	r2, [pc, #116]	@ (800738c <HAL_GPIO_Init+0x24c>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d025      	beq.n	8007366 <HAL_GPIO_Init+0x226>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	4a1c      	ldr	r2, [pc, #112]	@ (8007390 <HAL_GPIO_Init+0x250>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d01f      	beq.n	8007362 <HAL_GPIO_Init+0x222>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	4a1b      	ldr	r2, [pc, #108]	@ (8007394 <HAL_GPIO_Init+0x254>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d019      	beq.n	800735e <HAL_GPIO_Init+0x21e>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	4a1a      	ldr	r2, [pc, #104]	@ (8007398 <HAL_GPIO_Init+0x258>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d013      	beq.n	800735a <HAL_GPIO_Init+0x21a>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	4a19      	ldr	r2, [pc, #100]	@ (800739c <HAL_GPIO_Init+0x25c>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d00d      	beq.n	8007356 <HAL_GPIO_Init+0x216>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	4a18      	ldr	r2, [pc, #96]	@ (80073a0 <HAL_GPIO_Init+0x260>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d007      	beq.n	8007352 <HAL_GPIO_Init+0x212>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	4a17      	ldr	r2, [pc, #92]	@ (80073a4 <HAL_GPIO_Init+0x264>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d101      	bne.n	800734e <HAL_GPIO_Init+0x20e>
 800734a:	2309      	movs	r3, #9
 800734c:	e02d      	b.n	80073aa <HAL_GPIO_Init+0x26a>
 800734e:	230a      	movs	r3, #10
 8007350:	e02b      	b.n	80073aa <HAL_GPIO_Init+0x26a>
 8007352:	2308      	movs	r3, #8
 8007354:	e029      	b.n	80073aa <HAL_GPIO_Init+0x26a>
 8007356:	2307      	movs	r3, #7
 8007358:	e027      	b.n	80073aa <HAL_GPIO_Init+0x26a>
 800735a:	2306      	movs	r3, #6
 800735c:	e025      	b.n	80073aa <HAL_GPIO_Init+0x26a>
 800735e:	2305      	movs	r3, #5
 8007360:	e023      	b.n	80073aa <HAL_GPIO_Init+0x26a>
 8007362:	2304      	movs	r3, #4
 8007364:	e021      	b.n	80073aa <HAL_GPIO_Init+0x26a>
 8007366:	2303      	movs	r3, #3
 8007368:	e01f      	b.n	80073aa <HAL_GPIO_Init+0x26a>
 800736a:	2302      	movs	r3, #2
 800736c:	e01d      	b.n	80073aa <HAL_GPIO_Init+0x26a>
 800736e:	2301      	movs	r3, #1
 8007370:	e01b      	b.n	80073aa <HAL_GPIO_Init+0x26a>
 8007372:	bf00      	nop
 8007374:	58000080 	.word	0x58000080
 8007378:	58024400 	.word	0x58024400
 800737c:	58000400 	.word	0x58000400
 8007380:	58020000 	.word	0x58020000
 8007384:	58020400 	.word	0x58020400
 8007388:	58020800 	.word	0x58020800
 800738c:	58020c00 	.word	0x58020c00
 8007390:	58021000 	.word	0x58021000
 8007394:	58021400 	.word	0x58021400
 8007398:	58021800 	.word	0x58021800
 800739c:	58021c00 	.word	0x58021c00
 80073a0:	58022000 	.word	0x58022000
 80073a4:	58022400 	.word	0x58022400
 80073a8:	2300      	movs	r3, #0
 80073aa:	69fa      	ldr	r2, [r7, #28]
 80073ac:	f002 0203 	and.w	r2, r2, #3
 80073b0:	0092      	lsls	r2, r2, #2
 80073b2:	4093      	lsls	r3, r2
 80073b4:	69ba      	ldr	r2, [r7, #24]
 80073b6:	4313      	orrs	r3, r2
 80073b8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80073ba:	4938      	ldr	r1, [pc, #224]	@ (800749c <HAL_GPIO_Init+0x35c>)
 80073bc:	69fb      	ldr	r3, [r7, #28]
 80073be:	089b      	lsrs	r3, r3, #2
 80073c0:	3302      	adds	r3, #2
 80073c2:	69ba      	ldr	r2, [r7, #24]
 80073c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80073c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	43db      	mvns	r3, r3
 80073d4:	69ba      	ldr	r2, [r7, #24]
 80073d6:	4013      	ands	r3, r2
 80073d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d003      	beq.n	80073ee <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80073e6:	69ba      	ldr	r2, [r7, #24]
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	4313      	orrs	r3, r2
 80073ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80073ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80073f2:	69bb      	ldr	r3, [r7, #24]
 80073f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80073f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	43db      	mvns	r3, r3
 8007402:	69ba      	ldr	r2, [r7, #24]
 8007404:	4013      	ands	r3, r2
 8007406:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007410:	2b00      	cmp	r3, #0
 8007412:	d003      	beq.n	800741c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007414:	69ba      	ldr	r2, [r7, #24]
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	4313      	orrs	r3, r2
 800741a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800741c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007420:	69bb      	ldr	r3, [r7, #24]
 8007422:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	43db      	mvns	r3, r3
 800742e:	69ba      	ldr	r2, [r7, #24]
 8007430:	4013      	ands	r3, r2
 8007432:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800743c:	2b00      	cmp	r3, #0
 800743e:	d003      	beq.n	8007448 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007440:	69ba      	ldr	r2, [r7, #24]
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	4313      	orrs	r3, r2
 8007446:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	69ba      	ldr	r2, [r7, #24]
 800744c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	43db      	mvns	r3, r3
 8007458:	69ba      	ldr	r2, [r7, #24]
 800745a:	4013      	ands	r3, r2
 800745c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007466:	2b00      	cmp	r3, #0
 8007468:	d003      	beq.n	8007472 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800746a:	69ba      	ldr	r2, [r7, #24]
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	4313      	orrs	r3, r2
 8007470:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	69ba      	ldr	r2, [r7, #24]
 8007476:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007478:	69fb      	ldr	r3, [r7, #28]
 800747a:	3301      	adds	r3, #1
 800747c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	69fb      	ldr	r3, [r7, #28]
 8007484:	fa22 f303 	lsr.w	r3, r2, r3
 8007488:	2b00      	cmp	r3, #0
 800748a:	f47f ae63 	bne.w	8007154 <HAL_GPIO_Init+0x14>
  }
}
 800748e:	bf00      	nop
 8007490:	bf00      	nop
 8007492:	3724      	adds	r7, #36	@ 0x24
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr
 800749c:	58000400 	.word	0x58000400

080074a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b083      	sub	sp, #12
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	460b      	mov	r3, r1
 80074aa:	807b      	strh	r3, [r7, #2]
 80074ac:	4613      	mov	r3, r2
 80074ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80074b0:	787b      	ldrb	r3, [r7, #1]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d003      	beq.n	80074be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80074b6:	887a      	ldrh	r2, [r7, #2]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80074bc:	e003      	b.n	80074c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80074be:	887b      	ldrh	r3, [r7, #2]
 80074c0:	041a      	lsls	r2, r3, #16
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	619a      	str	r2, [r3, #24]
}
 80074c6:	bf00      	nop
 80074c8:	370c      	adds	r7, #12
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr
	...

080074d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b082      	sub	sp, #8
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d101      	bne.n	80074e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80074e2:	2301      	movs	r3, #1
 80074e4:	e08b      	b.n	80075fe <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80074ec:	b2db      	uxtb	r3, r3
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d106      	bne.n	8007500 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2200      	movs	r2, #0
 80074f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f7fa ff42 	bl	8002384 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2224      	movs	r2, #36	@ 0x24
 8007504:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f022 0201 	bic.w	r2, r2, #1
 8007516:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	685a      	ldr	r2, [r3, #4]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007524:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	689a      	ldr	r2, [r3, #8]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007534:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	68db      	ldr	r3, [r3, #12]
 800753a:	2b01      	cmp	r3, #1
 800753c:	d107      	bne.n	800754e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	689a      	ldr	r2, [r3, #8]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800754a:	609a      	str	r2, [r3, #8]
 800754c:	e006      	b.n	800755c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	689a      	ldr	r2, [r3, #8]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800755a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	68db      	ldr	r3, [r3, #12]
 8007560:	2b02      	cmp	r3, #2
 8007562:	d108      	bne.n	8007576 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	685a      	ldr	r2, [r3, #4]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007572:	605a      	str	r2, [r3, #4]
 8007574:	e007      	b.n	8007586 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	685a      	ldr	r2, [r3, #4]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007584:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	6859      	ldr	r1, [r3, #4]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681a      	ldr	r2, [r3, #0]
 8007590:	4b1d      	ldr	r3, [pc, #116]	@ (8007608 <HAL_I2C_Init+0x134>)
 8007592:	430b      	orrs	r3, r1
 8007594:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	68da      	ldr	r2, [r3, #12]
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80075a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	691a      	ldr	r2, [r3, #16]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	695b      	ldr	r3, [r3, #20]
 80075ae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	699b      	ldr	r3, [r3, #24]
 80075b6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	430a      	orrs	r2, r1
 80075be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	69d9      	ldr	r1, [r3, #28]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6a1a      	ldr	r2, [r3, #32]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	430a      	orrs	r2, r1
 80075ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	681a      	ldr	r2, [r3, #0]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f042 0201 	orr.w	r2, r2, #1
 80075de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2200      	movs	r2, #0
 80075e4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2220      	movs	r2, #32
 80075ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2200      	movs	r2, #0
 80075f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2200      	movs	r2, #0
 80075f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80075fc:	2300      	movs	r3, #0
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3708      	adds	r7, #8
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}
 8007606:	bf00      	nop
 8007608:	02008000 	.word	0x02008000

0800760c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800760c:	b480      	push	{r7}
 800760e:	b083      	sub	sp, #12
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800761c:	b2db      	uxtb	r3, r3
 800761e:	2b20      	cmp	r3, #32
 8007620:	d138      	bne.n	8007694 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007628:	2b01      	cmp	r3, #1
 800762a:	d101      	bne.n	8007630 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800762c:	2302      	movs	r3, #2
 800762e:	e032      	b.n	8007696 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2201      	movs	r2, #1
 8007634:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2224      	movs	r2, #36	@ 0x24
 800763c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	681a      	ldr	r2, [r3, #0]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f022 0201 	bic.w	r2, r2, #1
 800764e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	681a      	ldr	r2, [r3, #0]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800765e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	6819      	ldr	r1, [r3, #0]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	683a      	ldr	r2, [r7, #0]
 800766c:	430a      	orrs	r2, r1
 800766e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f042 0201 	orr.w	r2, r2, #1
 800767e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2220      	movs	r2, #32
 8007684:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2200      	movs	r2, #0
 800768c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007690:	2300      	movs	r3, #0
 8007692:	e000      	b.n	8007696 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007694:	2302      	movs	r3, #2
  }
}
 8007696:	4618      	mov	r0, r3
 8007698:	370c      	adds	r7, #12
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr

080076a2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80076a2:	b480      	push	{r7}
 80076a4:	b085      	sub	sp, #20
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
 80076aa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076b2:	b2db      	uxtb	r3, r3
 80076b4:	2b20      	cmp	r3, #32
 80076b6:	d139      	bne.n	800772c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80076be:	2b01      	cmp	r3, #1
 80076c0:	d101      	bne.n	80076c6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80076c2:	2302      	movs	r3, #2
 80076c4:	e033      	b.n	800772e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2201      	movs	r2, #1
 80076ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2224      	movs	r2, #36	@ 0x24
 80076d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	681a      	ldr	r2, [r3, #0]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f022 0201 	bic.w	r2, r2, #1
 80076e4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80076f4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	021b      	lsls	r3, r3, #8
 80076fa:	68fa      	ldr	r2, [r7, #12]
 80076fc:	4313      	orrs	r3, r2
 80076fe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	68fa      	ldr	r2, [r7, #12]
 8007706:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	681a      	ldr	r2, [r3, #0]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f042 0201 	orr.w	r2, r2, #1
 8007716:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2220      	movs	r2, #32
 800771c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2200      	movs	r2, #0
 8007724:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007728:	2300      	movs	r3, #0
 800772a:	e000      	b.n	800772e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800772c:	2302      	movs	r3, #2
  }
}
 800772e:	4618      	mov	r0, r3
 8007730:	3714      	adds	r7, #20
 8007732:	46bd      	mov	sp, r7
 8007734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007738:	4770      	bx	lr
	...

0800773c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b084      	sub	sp, #16
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007744:	4b19      	ldr	r3, [pc, #100]	@ (80077ac <HAL_PWREx_ConfigSupply+0x70>)
 8007746:	68db      	ldr	r3, [r3, #12]
 8007748:	f003 0304 	and.w	r3, r3, #4
 800774c:	2b04      	cmp	r3, #4
 800774e:	d00a      	beq.n	8007766 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007750:	4b16      	ldr	r3, [pc, #88]	@ (80077ac <HAL_PWREx_ConfigSupply+0x70>)
 8007752:	68db      	ldr	r3, [r3, #12]
 8007754:	f003 0307 	and.w	r3, r3, #7
 8007758:	687a      	ldr	r2, [r7, #4]
 800775a:	429a      	cmp	r2, r3
 800775c:	d001      	beq.n	8007762 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800775e:	2301      	movs	r3, #1
 8007760:	e01f      	b.n	80077a2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007762:	2300      	movs	r3, #0
 8007764:	e01d      	b.n	80077a2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007766:	4b11      	ldr	r3, [pc, #68]	@ (80077ac <HAL_PWREx_ConfigSupply+0x70>)
 8007768:	68db      	ldr	r3, [r3, #12]
 800776a:	f023 0207 	bic.w	r2, r3, #7
 800776e:	490f      	ldr	r1, [pc, #60]	@ (80077ac <HAL_PWREx_ConfigSupply+0x70>)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	4313      	orrs	r3, r2
 8007774:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007776:	f7fc f8e9 	bl	800394c <HAL_GetTick>
 800777a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800777c:	e009      	b.n	8007792 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800777e:	f7fc f8e5 	bl	800394c <HAL_GetTick>
 8007782:	4602      	mov	r2, r0
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	1ad3      	subs	r3, r2, r3
 8007788:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800778c:	d901      	bls.n	8007792 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	e007      	b.n	80077a2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007792:	4b06      	ldr	r3, [pc, #24]	@ (80077ac <HAL_PWREx_ConfigSupply+0x70>)
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800779a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800779e:	d1ee      	bne.n	800777e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80077a0:	2300      	movs	r3, #0
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3710      	adds	r7, #16
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}
 80077aa:	bf00      	nop
 80077ac:	58024800 	.word	0x58024800

080077b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b08c      	sub	sp, #48	@ 0x30
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d102      	bne.n	80077c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80077be:	2301      	movs	r3, #1
 80077c0:	f000 bc1f 	b.w	8008002 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f003 0301 	and.w	r3, r3, #1
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	f000 80b3 	beq.w	8007938 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80077d2:	4b95      	ldr	r3, [pc, #596]	@ (8007a28 <HAL_RCC_OscConfig+0x278>)
 80077d4:	691b      	ldr	r3, [r3, #16]
 80077d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80077da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80077dc:	4b92      	ldr	r3, [pc, #584]	@ (8007a28 <HAL_RCC_OscConfig+0x278>)
 80077de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80077e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077e4:	2b10      	cmp	r3, #16
 80077e6:	d007      	beq.n	80077f8 <HAL_RCC_OscConfig+0x48>
 80077e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077ea:	2b18      	cmp	r3, #24
 80077ec:	d112      	bne.n	8007814 <HAL_RCC_OscConfig+0x64>
 80077ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077f0:	f003 0303 	and.w	r3, r3, #3
 80077f4:	2b02      	cmp	r3, #2
 80077f6:	d10d      	bne.n	8007814 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077f8:	4b8b      	ldr	r3, [pc, #556]	@ (8007a28 <HAL_RCC_OscConfig+0x278>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007800:	2b00      	cmp	r3, #0
 8007802:	f000 8098 	beq.w	8007936 <HAL_RCC_OscConfig+0x186>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	2b00      	cmp	r3, #0
 800780c:	f040 8093 	bne.w	8007936 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8007810:	2301      	movs	r3, #1
 8007812:	e3f6      	b.n	8008002 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800781c:	d106      	bne.n	800782c <HAL_RCC_OscConfig+0x7c>
 800781e:	4b82      	ldr	r3, [pc, #520]	@ (8007a28 <HAL_RCC_OscConfig+0x278>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a81      	ldr	r2, [pc, #516]	@ (8007a28 <HAL_RCC_OscConfig+0x278>)
 8007824:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007828:	6013      	str	r3, [r2, #0]
 800782a:	e058      	b.n	80078de <HAL_RCC_OscConfig+0x12e>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d112      	bne.n	800785a <HAL_RCC_OscConfig+0xaa>
 8007834:	4b7c      	ldr	r3, [pc, #496]	@ (8007a28 <HAL_RCC_OscConfig+0x278>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a7b      	ldr	r2, [pc, #492]	@ (8007a28 <HAL_RCC_OscConfig+0x278>)
 800783a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800783e:	6013      	str	r3, [r2, #0]
 8007840:	4b79      	ldr	r3, [pc, #484]	@ (8007a28 <HAL_RCC_OscConfig+0x278>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a78      	ldr	r2, [pc, #480]	@ (8007a28 <HAL_RCC_OscConfig+0x278>)
 8007846:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800784a:	6013      	str	r3, [r2, #0]
 800784c:	4b76      	ldr	r3, [pc, #472]	@ (8007a28 <HAL_RCC_OscConfig+0x278>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a75      	ldr	r2, [pc, #468]	@ (8007a28 <HAL_RCC_OscConfig+0x278>)
 8007852:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007856:	6013      	str	r3, [r2, #0]
 8007858:	e041      	b.n	80078de <HAL_RCC_OscConfig+0x12e>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007862:	d112      	bne.n	800788a <HAL_RCC_OscConfig+0xda>
 8007864:	4b70      	ldr	r3, [pc, #448]	@ (8007a28 <HAL_RCC_OscConfig+0x278>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a6f      	ldr	r2, [pc, #444]	@ (8007a28 <HAL_RCC_OscConfig+0x278>)
 800786a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800786e:	6013      	str	r3, [r2, #0]
 8007870:	4b6d      	ldr	r3, [pc, #436]	@ (8007a28 <HAL_RCC_OscConfig+0x278>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a6c      	ldr	r2, [pc, #432]	@ (8007a28 <HAL_RCC_OscConfig+0x278>)
 8007876:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800787a:	6013      	str	r3, [r2, #0]
 800787c:	4b6a      	ldr	r3, [pc, #424]	@ (8007a28 <HAL_RCC_OscConfig+0x278>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a69      	ldr	r2, [pc, #420]	@ (8007a28 <HAL_RCC_OscConfig+0x278>)
 8007882:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007886:	6013      	str	r3, [r2, #0]
 8007888:	e029      	b.n	80078de <HAL_RCC_OscConfig+0x12e>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8007892:	d112      	bne.n	80078ba <HAL_RCC_OscConfig+0x10a>
 8007894:	4b64      	ldr	r3, [pc, #400]	@ (8007a28 <HAL_RCC_OscConfig+0x278>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a63      	ldr	r2, [pc, #396]	@ (8007a28 <HAL_RCC_OscConfig+0x278>)
 800789a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800789e:	6013      	str	r3, [r2, #0]
 80078a0:	4b61      	ldr	r3, [pc, #388]	@ (8007a28 <HAL_RCC_OscConfig+0x278>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a60      	ldr	r2, [pc, #384]	@ (8007a28 <HAL_RCC_OscConfig+0x278>)
 80078a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80078aa:	6013      	str	r3, [r2, #0]
 80078ac:	4b5e      	ldr	r3, [pc, #376]	@ (8007a28 <HAL_RCC_OscConfig+0x278>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a5d      	ldr	r2, [pc, #372]	@ (8007a28 <HAL_RCC_OscConfig+0x278>)
 80078b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078b6:	6013      	str	r3, [r2, #0]
 80078b8:	e011      	b.n	80078de <HAL_RCC_OscConfig+0x12e>
 80078ba:	4b5b      	ldr	r3, [pc, #364]	@ (8007a28 <HAL_RCC_OscConfig+0x278>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a5a      	ldr	r2, [pc, #360]	@ (8007a28 <HAL_RCC_OscConfig+0x278>)
 80078c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80078c4:	6013      	str	r3, [r2, #0]
 80078c6:	4b58      	ldr	r3, [pc, #352]	@ (8007a28 <HAL_RCC_OscConfig+0x278>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a57      	ldr	r2, [pc, #348]	@ (8007a28 <HAL_RCC_OscConfig+0x278>)
 80078cc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80078d0:	6013      	str	r3, [r2, #0]
 80078d2:	4b55      	ldr	r3, [pc, #340]	@ (8007a28 <HAL_RCC_OscConfig+0x278>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a54      	ldr	r2, [pc, #336]	@ (8007a28 <HAL_RCC_OscConfig+0x278>)
 80078d8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80078dc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	685b      	ldr	r3, [r3, #4]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d013      	beq.n	800790e <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078e6:	f7fc f831 	bl	800394c <HAL_GetTick>
 80078ea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80078ec:	e008      	b.n	8007900 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80078ee:	f7fc f82d 	bl	800394c <HAL_GetTick>
 80078f2:	4602      	mov	r2, r0
 80078f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078f6:	1ad3      	subs	r3, r2, r3
 80078f8:	2b64      	cmp	r3, #100	@ 0x64
 80078fa:	d901      	bls.n	8007900 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 80078fc:	2303      	movs	r3, #3
 80078fe:	e380      	b.n	8008002 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007900:	4b49      	ldr	r3, [pc, #292]	@ (8007a28 <HAL_RCC_OscConfig+0x278>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007908:	2b00      	cmp	r3, #0
 800790a:	d0f0      	beq.n	80078ee <HAL_RCC_OscConfig+0x13e>
 800790c:	e014      	b.n	8007938 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800790e:	f7fc f81d 	bl	800394c <HAL_GetTick>
 8007912:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007914:	e008      	b.n	8007928 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007916:	f7fc f819 	bl	800394c <HAL_GetTick>
 800791a:	4602      	mov	r2, r0
 800791c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800791e:	1ad3      	subs	r3, r2, r3
 8007920:	2b64      	cmp	r3, #100	@ 0x64
 8007922:	d901      	bls.n	8007928 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8007924:	2303      	movs	r3, #3
 8007926:	e36c      	b.n	8008002 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007928:	4b3f      	ldr	r3, [pc, #252]	@ (8007a28 <HAL_RCC_OscConfig+0x278>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007930:	2b00      	cmp	r3, #0
 8007932:	d1f0      	bne.n	8007916 <HAL_RCC_OscConfig+0x166>
 8007934:	e000      	b.n	8007938 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007936:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f003 0302 	and.w	r3, r3, #2
 8007940:	2b00      	cmp	r3, #0
 8007942:	f000 808c 	beq.w	8007a5e <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007946:	4b38      	ldr	r3, [pc, #224]	@ (8007a28 <HAL_RCC_OscConfig+0x278>)
 8007948:	691b      	ldr	r3, [r3, #16]
 800794a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800794e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007950:	4b35      	ldr	r3, [pc, #212]	@ (8007a28 <HAL_RCC_OscConfig+0x278>)
 8007952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007954:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007956:	6a3b      	ldr	r3, [r7, #32]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d007      	beq.n	800796c <HAL_RCC_OscConfig+0x1bc>
 800795c:	6a3b      	ldr	r3, [r7, #32]
 800795e:	2b18      	cmp	r3, #24
 8007960:	d137      	bne.n	80079d2 <HAL_RCC_OscConfig+0x222>
 8007962:	69fb      	ldr	r3, [r7, #28]
 8007964:	f003 0303 	and.w	r3, r3, #3
 8007968:	2b00      	cmp	r3, #0
 800796a:	d132      	bne.n	80079d2 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800796c:	4b2e      	ldr	r3, [pc, #184]	@ (8007a28 <HAL_RCC_OscConfig+0x278>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f003 0304 	and.w	r3, r3, #4
 8007974:	2b00      	cmp	r3, #0
 8007976:	d005      	beq.n	8007984 <HAL_RCC_OscConfig+0x1d4>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	68db      	ldr	r3, [r3, #12]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d101      	bne.n	8007984 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8007980:	2301      	movs	r3, #1
 8007982:	e33e      	b.n	8008002 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007984:	4b28      	ldr	r3, [pc, #160]	@ (8007a28 <HAL_RCC_OscConfig+0x278>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f023 0219 	bic.w	r2, r3, #25
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	68db      	ldr	r3, [r3, #12]
 8007990:	4925      	ldr	r1, [pc, #148]	@ (8007a28 <HAL_RCC_OscConfig+0x278>)
 8007992:	4313      	orrs	r3, r2
 8007994:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007996:	f7fb ffd9 	bl	800394c <HAL_GetTick>
 800799a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800799c:	e008      	b.n	80079b0 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800799e:	f7fb ffd5 	bl	800394c <HAL_GetTick>
 80079a2:	4602      	mov	r2, r0
 80079a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079a6:	1ad3      	subs	r3, r2, r3
 80079a8:	2b02      	cmp	r3, #2
 80079aa:	d901      	bls.n	80079b0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80079ac:	2303      	movs	r3, #3
 80079ae:	e328      	b.n	8008002 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80079b0:	4b1d      	ldr	r3, [pc, #116]	@ (8007a28 <HAL_RCC_OscConfig+0x278>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f003 0304 	and.w	r3, r3, #4
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d0f0      	beq.n	800799e <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079bc:	4b1a      	ldr	r3, [pc, #104]	@ (8007a28 <HAL_RCC_OscConfig+0x278>)
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	691b      	ldr	r3, [r3, #16]
 80079c8:	061b      	lsls	r3, r3, #24
 80079ca:	4917      	ldr	r1, [pc, #92]	@ (8007a28 <HAL_RCC_OscConfig+0x278>)
 80079cc:	4313      	orrs	r3, r2
 80079ce:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80079d0:	e045      	b.n	8007a5e <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	68db      	ldr	r3, [r3, #12]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d028      	beq.n	8007a2c <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80079da:	4b13      	ldr	r3, [pc, #76]	@ (8007a28 <HAL_RCC_OscConfig+0x278>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f023 0219 	bic.w	r2, r3, #25
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	68db      	ldr	r3, [r3, #12]
 80079e6:	4910      	ldr	r1, [pc, #64]	@ (8007a28 <HAL_RCC_OscConfig+0x278>)
 80079e8:	4313      	orrs	r3, r2
 80079ea:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079ec:	f7fb ffae 	bl	800394c <HAL_GetTick>
 80079f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80079f2:	e008      	b.n	8007a06 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80079f4:	f7fb ffaa 	bl	800394c <HAL_GetTick>
 80079f8:	4602      	mov	r2, r0
 80079fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079fc:	1ad3      	subs	r3, r2, r3
 80079fe:	2b02      	cmp	r3, #2
 8007a00:	d901      	bls.n	8007a06 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8007a02:	2303      	movs	r3, #3
 8007a04:	e2fd      	b.n	8008002 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007a06:	4b08      	ldr	r3, [pc, #32]	@ (8007a28 <HAL_RCC_OscConfig+0x278>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f003 0304 	and.w	r3, r3, #4
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d0f0      	beq.n	80079f4 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a12:	4b05      	ldr	r3, [pc, #20]	@ (8007a28 <HAL_RCC_OscConfig+0x278>)
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	691b      	ldr	r3, [r3, #16]
 8007a1e:	061b      	lsls	r3, r3, #24
 8007a20:	4901      	ldr	r1, [pc, #4]	@ (8007a28 <HAL_RCC_OscConfig+0x278>)
 8007a22:	4313      	orrs	r3, r2
 8007a24:	604b      	str	r3, [r1, #4]
 8007a26:	e01a      	b.n	8007a5e <HAL_RCC_OscConfig+0x2ae>
 8007a28:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007a2c:	4b97      	ldr	r3, [pc, #604]	@ (8007c8c <HAL_RCC_OscConfig+0x4dc>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a96      	ldr	r2, [pc, #600]	@ (8007c8c <HAL_RCC_OscConfig+0x4dc>)
 8007a32:	f023 0301 	bic.w	r3, r3, #1
 8007a36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a38:	f7fb ff88 	bl	800394c <HAL_GetTick>
 8007a3c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007a3e:	e008      	b.n	8007a52 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a40:	f7fb ff84 	bl	800394c <HAL_GetTick>
 8007a44:	4602      	mov	r2, r0
 8007a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a48:	1ad3      	subs	r3, r2, r3
 8007a4a:	2b02      	cmp	r3, #2
 8007a4c:	d901      	bls.n	8007a52 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8007a4e:	2303      	movs	r3, #3
 8007a50:	e2d7      	b.n	8008002 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007a52:	4b8e      	ldr	r3, [pc, #568]	@ (8007c8c <HAL_RCC_OscConfig+0x4dc>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f003 0304 	and.w	r3, r3, #4
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d1f0      	bne.n	8007a40 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f003 0310 	and.w	r3, r3, #16
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d06a      	beq.n	8007b40 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007a6a:	4b88      	ldr	r3, [pc, #544]	@ (8007c8c <HAL_RCC_OscConfig+0x4dc>)
 8007a6c:	691b      	ldr	r3, [r3, #16]
 8007a6e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007a72:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007a74:	4b85      	ldr	r3, [pc, #532]	@ (8007c8c <HAL_RCC_OscConfig+0x4dc>)
 8007a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a78:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007a7a:	69bb      	ldr	r3, [r7, #24]
 8007a7c:	2b08      	cmp	r3, #8
 8007a7e:	d007      	beq.n	8007a90 <HAL_RCC_OscConfig+0x2e0>
 8007a80:	69bb      	ldr	r3, [r7, #24]
 8007a82:	2b18      	cmp	r3, #24
 8007a84:	d11b      	bne.n	8007abe <HAL_RCC_OscConfig+0x30e>
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	f003 0303 	and.w	r3, r3, #3
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d116      	bne.n	8007abe <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007a90:	4b7e      	ldr	r3, [pc, #504]	@ (8007c8c <HAL_RCC_OscConfig+0x4dc>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d005      	beq.n	8007aa8 <HAL_RCC_OscConfig+0x2f8>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	69db      	ldr	r3, [r3, #28]
 8007aa0:	2b80      	cmp	r3, #128	@ 0x80
 8007aa2:	d001      	beq.n	8007aa8 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	e2ac      	b.n	8008002 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007aa8:	4b78      	ldr	r3, [pc, #480]	@ (8007c8c <HAL_RCC_OscConfig+0x4dc>)
 8007aaa:	68db      	ldr	r3, [r3, #12]
 8007aac:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6a1b      	ldr	r3, [r3, #32]
 8007ab4:	061b      	lsls	r3, r3, #24
 8007ab6:	4975      	ldr	r1, [pc, #468]	@ (8007c8c <HAL_RCC_OscConfig+0x4dc>)
 8007ab8:	4313      	orrs	r3, r2
 8007aba:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007abc:	e040      	b.n	8007b40 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	69db      	ldr	r3, [r3, #28]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d023      	beq.n	8007b0e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007ac6:	4b71      	ldr	r3, [pc, #452]	@ (8007c8c <HAL_RCC_OscConfig+0x4dc>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a70      	ldr	r2, [pc, #448]	@ (8007c8c <HAL_RCC_OscConfig+0x4dc>)
 8007acc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ad0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ad2:	f7fb ff3b 	bl	800394c <HAL_GetTick>
 8007ad6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007ad8:	e008      	b.n	8007aec <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007ada:	f7fb ff37 	bl	800394c <HAL_GetTick>
 8007ade:	4602      	mov	r2, r0
 8007ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ae2:	1ad3      	subs	r3, r2, r3
 8007ae4:	2b02      	cmp	r3, #2
 8007ae6:	d901      	bls.n	8007aec <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8007ae8:	2303      	movs	r3, #3
 8007aea:	e28a      	b.n	8008002 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007aec:	4b67      	ldr	r3, [pc, #412]	@ (8007c8c <HAL_RCC_OscConfig+0x4dc>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d0f0      	beq.n	8007ada <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007af8:	4b64      	ldr	r3, [pc, #400]	@ (8007c8c <HAL_RCC_OscConfig+0x4dc>)
 8007afa:	68db      	ldr	r3, [r3, #12]
 8007afc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6a1b      	ldr	r3, [r3, #32]
 8007b04:	061b      	lsls	r3, r3, #24
 8007b06:	4961      	ldr	r1, [pc, #388]	@ (8007c8c <HAL_RCC_OscConfig+0x4dc>)
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	60cb      	str	r3, [r1, #12]
 8007b0c:	e018      	b.n	8007b40 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007b0e:	4b5f      	ldr	r3, [pc, #380]	@ (8007c8c <HAL_RCC_OscConfig+0x4dc>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a5e      	ldr	r2, [pc, #376]	@ (8007c8c <HAL_RCC_OscConfig+0x4dc>)
 8007b14:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b1a:	f7fb ff17 	bl	800394c <HAL_GetTick>
 8007b1e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007b20:	e008      	b.n	8007b34 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007b22:	f7fb ff13 	bl	800394c <HAL_GetTick>
 8007b26:	4602      	mov	r2, r0
 8007b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b2a:	1ad3      	subs	r3, r2, r3
 8007b2c:	2b02      	cmp	r3, #2
 8007b2e:	d901      	bls.n	8007b34 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8007b30:	2303      	movs	r3, #3
 8007b32:	e266      	b.n	8008002 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007b34:	4b55      	ldr	r3, [pc, #340]	@ (8007c8c <HAL_RCC_OscConfig+0x4dc>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d1f0      	bne.n	8007b22 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f003 0308 	and.w	r3, r3, #8
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d036      	beq.n	8007bba <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	695b      	ldr	r3, [r3, #20]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d019      	beq.n	8007b88 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007b54:	4b4d      	ldr	r3, [pc, #308]	@ (8007c8c <HAL_RCC_OscConfig+0x4dc>)
 8007b56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b58:	4a4c      	ldr	r2, [pc, #304]	@ (8007c8c <HAL_RCC_OscConfig+0x4dc>)
 8007b5a:	f043 0301 	orr.w	r3, r3, #1
 8007b5e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b60:	f7fb fef4 	bl	800394c <HAL_GetTick>
 8007b64:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007b66:	e008      	b.n	8007b7a <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b68:	f7fb fef0 	bl	800394c <HAL_GetTick>
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b70:	1ad3      	subs	r3, r2, r3
 8007b72:	2b02      	cmp	r3, #2
 8007b74:	d901      	bls.n	8007b7a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8007b76:	2303      	movs	r3, #3
 8007b78:	e243      	b.n	8008002 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007b7a:	4b44      	ldr	r3, [pc, #272]	@ (8007c8c <HAL_RCC_OscConfig+0x4dc>)
 8007b7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b7e:	f003 0302 	and.w	r3, r3, #2
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d0f0      	beq.n	8007b68 <HAL_RCC_OscConfig+0x3b8>
 8007b86:	e018      	b.n	8007bba <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007b88:	4b40      	ldr	r3, [pc, #256]	@ (8007c8c <HAL_RCC_OscConfig+0x4dc>)
 8007b8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b8c:	4a3f      	ldr	r2, [pc, #252]	@ (8007c8c <HAL_RCC_OscConfig+0x4dc>)
 8007b8e:	f023 0301 	bic.w	r3, r3, #1
 8007b92:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b94:	f7fb feda 	bl	800394c <HAL_GetTick>
 8007b98:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007b9a:	e008      	b.n	8007bae <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b9c:	f7fb fed6 	bl	800394c <HAL_GetTick>
 8007ba0:	4602      	mov	r2, r0
 8007ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ba4:	1ad3      	subs	r3, r2, r3
 8007ba6:	2b02      	cmp	r3, #2
 8007ba8:	d901      	bls.n	8007bae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8007baa:	2303      	movs	r3, #3
 8007bac:	e229      	b.n	8008002 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007bae:	4b37      	ldr	r3, [pc, #220]	@ (8007c8c <HAL_RCC_OscConfig+0x4dc>)
 8007bb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007bb2:	f003 0302 	and.w	r3, r3, #2
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d1f0      	bne.n	8007b9c <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f003 0320 	and.w	r3, r3, #32
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d036      	beq.n	8007c34 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	699b      	ldr	r3, [r3, #24]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d019      	beq.n	8007c02 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007bce:	4b2f      	ldr	r3, [pc, #188]	@ (8007c8c <HAL_RCC_OscConfig+0x4dc>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a2e      	ldr	r2, [pc, #184]	@ (8007c8c <HAL_RCC_OscConfig+0x4dc>)
 8007bd4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007bd8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007bda:	f7fb feb7 	bl	800394c <HAL_GetTick>
 8007bde:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007be0:	e008      	b.n	8007bf4 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007be2:	f7fb feb3 	bl	800394c <HAL_GetTick>
 8007be6:	4602      	mov	r2, r0
 8007be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bea:	1ad3      	subs	r3, r2, r3
 8007bec:	2b02      	cmp	r3, #2
 8007bee:	d901      	bls.n	8007bf4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8007bf0:	2303      	movs	r3, #3
 8007bf2:	e206      	b.n	8008002 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007bf4:	4b25      	ldr	r3, [pc, #148]	@ (8007c8c <HAL_RCC_OscConfig+0x4dc>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d0f0      	beq.n	8007be2 <HAL_RCC_OscConfig+0x432>
 8007c00:	e018      	b.n	8007c34 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007c02:	4b22      	ldr	r3, [pc, #136]	@ (8007c8c <HAL_RCC_OscConfig+0x4dc>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a21      	ldr	r2, [pc, #132]	@ (8007c8c <HAL_RCC_OscConfig+0x4dc>)
 8007c08:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007c0c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007c0e:	f7fb fe9d 	bl	800394c <HAL_GetTick>
 8007c12:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007c14:	e008      	b.n	8007c28 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007c16:	f7fb fe99 	bl	800394c <HAL_GetTick>
 8007c1a:	4602      	mov	r2, r0
 8007c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c1e:	1ad3      	subs	r3, r2, r3
 8007c20:	2b02      	cmp	r3, #2
 8007c22:	d901      	bls.n	8007c28 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8007c24:	2303      	movs	r3, #3
 8007c26:	e1ec      	b.n	8008002 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007c28:	4b18      	ldr	r3, [pc, #96]	@ (8007c8c <HAL_RCC_OscConfig+0x4dc>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d1f0      	bne.n	8007c16 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f003 0304 	and.w	r3, r3, #4
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	f000 80af 	beq.w	8007da0 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007c42:	4b13      	ldr	r3, [pc, #76]	@ (8007c90 <HAL_RCC_OscConfig+0x4e0>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4a12      	ldr	r2, [pc, #72]	@ (8007c90 <HAL_RCC_OscConfig+0x4e0>)
 8007c48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c4c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007c4e:	f7fb fe7d 	bl	800394c <HAL_GetTick>
 8007c52:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007c54:	e008      	b.n	8007c68 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c56:	f7fb fe79 	bl	800394c <HAL_GetTick>
 8007c5a:	4602      	mov	r2, r0
 8007c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c5e:	1ad3      	subs	r3, r2, r3
 8007c60:	2b64      	cmp	r3, #100	@ 0x64
 8007c62:	d901      	bls.n	8007c68 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8007c64:	2303      	movs	r3, #3
 8007c66:	e1cc      	b.n	8008002 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007c68:	4b09      	ldr	r3, [pc, #36]	@ (8007c90 <HAL_RCC_OscConfig+0x4e0>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d0f0      	beq.n	8007c56 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	689b      	ldr	r3, [r3, #8]
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	d10b      	bne.n	8007c94 <HAL_RCC_OscConfig+0x4e4>
 8007c7c:	4b03      	ldr	r3, [pc, #12]	@ (8007c8c <HAL_RCC_OscConfig+0x4dc>)
 8007c7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c80:	4a02      	ldr	r2, [pc, #8]	@ (8007c8c <HAL_RCC_OscConfig+0x4dc>)
 8007c82:	f043 0301 	orr.w	r3, r3, #1
 8007c86:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c88:	e05b      	b.n	8007d42 <HAL_RCC_OscConfig+0x592>
 8007c8a:	bf00      	nop
 8007c8c:	58024400 	.word	0x58024400
 8007c90:	58024800 	.word	0x58024800
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	689b      	ldr	r3, [r3, #8]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d112      	bne.n	8007cc2 <HAL_RCC_OscConfig+0x512>
 8007c9c:	4b9d      	ldr	r3, [pc, #628]	@ (8007f14 <HAL_RCC_OscConfig+0x764>)
 8007c9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ca0:	4a9c      	ldr	r2, [pc, #624]	@ (8007f14 <HAL_RCC_OscConfig+0x764>)
 8007ca2:	f023 0301 	bic.w	r3, r3, #1
 8007ca6:	6713      	str	r3, [r2, #112]	@ 0x70
 8007ca8:	4b9a      	ldr	r3, [pc, #616]	@ (8007f14 <HAL_RCC_OscConfig+0x764>)
 8007caa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cac:	4a99      	ldr	r2, [pc, #612]	@ (8007f14 <HAL_RCC_OscConfig+0x764>)
 8007cae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007cb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8007cb4:	4b97      	ldr	r3, [pc, #604]	@ (8007f14 <HAL_RCC_OscConfig+0x764>)
 8007cb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cb8:	4a96      	ldr	r2, [pc, #600]	@ (8007f14 <HAL_RCC_OscConfig+0x764>)
 8007cba:	f023 0304 	bic.w	r3, r3, #4
 8007cbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8007cc0:	e03f      	b.n	8007d42 <HAL_RCC_OscConfig+0x592>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	689b      	ldr	r3, [r3, #8]
 8007cc6:	2b05      	cmp	r3, #5
 8007cc8:	d112      	bne.n	8007cf0 <HAL_RCC_OscConfig+0x540>
 8007cca:	4b92      	ldr	r3, [pc, #584]	@ (8007f14 <HAL_RCC_OscConfig+0x764>)
 8007ccc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cce:	4a91      	ldr	r2, [pc, #580]	@ (8007f14 <HAL_RCC_OscConfig+0x764>)
 8007cd0:	f043 0304 	orr.w	r3, r3, #4
 8007cd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8007cd6:	4b8f      	ldr	r3, [pc, #572]	@ (8007f14 <HAL_RCC_OscConfig+0x764>)
 8007cd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cda:	4a8e      	ldr	r2, [pc, #568]	@ (8007f14 <HAL_RCC_OscConfig+0x764>)
 8007cdc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007ce0:	6713      	str	r3, [r2, #112]	@ 0x70
 8007ce2:	4b8c      	ldr	r3, [pc, #560]	@ (8007f14 <HAL_RCC_OscConfig+0x764>)
 8007ce4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ce6:	4a8b      	ldr	r2, [pc, #556]	@ (8007f14 <HAL_RCC_OscConfig+0x764>)
 8007ce8:	f043 0301 	orr.w	r3, r3, #1
 8007cec:	6713      	str	r3, [r2, #112]	@ 0x70
 8007cee:	e028      	b.n	8007d42 <HAL_RCC_OscConfig+0x592>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	689b      	ldr	r3, [r3, #8]
 8007cf4:	2b85      	cmp	r3, #133	@ 0x85
 8007cf6:	d112      	bne.n	8007d1e <HAL_RCC_OscConfig+0x56e>
 8007cf8:	4b86      	ldr	r3, [pc, #536]	@ (8007f14 <HAL_RCC_OscConfig+0x764>)
 8007cfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cfc:	4a85      	ldr	r2, [pc, #532]	@ (8007f14 <HAL_RCC_OscConfig+0x764>)
 8007cfe:	f043 0304 	orr.w	r3, r3, #4
 8007d02:	6713      	str	r3, [r2, #112]	@ 0x70
 8007d04:	4b83      	ldr	r3, [pc, #524]	@ (8007f14 <HAL_RCC_OscConfig+0x764>)
 8007d06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d08:	4a82      	ldr	r2, [pc, #520]	@ (8007f14 <HAL_RCC_OscConfig+0x764>)
 8007d0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007d10:	4b80      	ldr	r3, [pc, #512]	@ (8007f14 <HAL_RCC_OscConfig+0x764>)
 8007d12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d14:	4a7f      	ldr	r2, [pc, #508]	@ (8007f14 <HAL_RCC_OscConfig+0x764>)
 8007d16:	f043 0301 	orr.w	r3, r3, #1
 8007d1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8007d1c:	e011      	b.n	8007d42 <HAL_RCC_OscConfig+0x592>
 8007d1e:	4b7d      	ldr	r3, [pc, #500]	@ (8007f14 <HAL_RCC_OscConfig+0x764>)
 8007d20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d22:	4a7c      	ldr	r2, [pc, #496]	@ (8007f14 <HAL_RCC_OscConfig+0x764>)
 8007d24:	f023 0301 	bic.w	r3, r3, #1
 8007d28:	6713      	str	r3, [r2, #112]	@ 0x70
 8007d2a:	4b7a      	ldr	r3, [pc, #488]	@ (8007f14 <HAL_RCC_OscConfig+0x764>)
 8007d2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d2e:	4a79      	ldr	r2, [pc, #484]	@ (8007f14 <HAL_RCC_OscConfig+0x764>)
 8007d30:	f023 0304 	bic.w	r3, r3, #4
 8007d34:	6713      	str	r3, [r2, #112]	@ 0x70
 8007d36:	4b77      	ldr	r3, [pc, #476]	@ (8007f14 <HAL_RCC_OscConfig+0x764>)
 8007d38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d3a:	4a76      	ldr	r2, [pc, #472]	@ (8007f14 <HAL_RCC_OscConfig+0x764>)
 8007d3c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007d40:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	689b      	ldr	r3, [r3, #8]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d015      	beq.n	8007d76 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d4a:	f7fb fdff 	bl	800394c <HAL_GetTick>
 8007d4e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007d50:	e00a      	b.n	8007d68 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d52:	f7fb fdfb 	bl	800394c <HAL_GetTick>
 8007d56:	4602      	mov	r2, r0
 8007d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d5a:	1ad3      	subs	r3, r2, r3
 8007d5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d901      	bls.n	8007d68 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8007d64:	2303      	movs	r3, #3
 8007d66:	e14c      	b.n	8008002 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007d68:	4b6a      	ldr	r3, [pc, #424]	@ (8007f14 <HAL_RCC_OscConfig+0x764>)
 8007d6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d6c:	f003 0302 	and.w	r3, r3, #2
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d0ee      	beq.n	8007d52 <HAL_RCC_OscConfig+0x5a2>
 8007d74:	e014      	b.n	8007da0 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d76:	f7fb fde9 	bl	800394c <HAL_GetTick>
 8007d7a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007d7c:	e00a      	b.n	8007d94 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d7e:	f7fb fde5 	bl	800394c <HAL_GetTick>
 8007d82:	4602      	mov	r2, r0
 8007d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d86:	1ad3      	subs	r3, r2, r3
 8007d88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d901      	bls.n	8007d94 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8007d90:	2303      	movs	r3, #3
 8007d92:	e136      	b.n	8008002 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007d94:	4b5f      	ldr	r3, [pc, #380]	@ (8007f14 <HAL_RCC_OscConfig+0x764>)
 8007d96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d98:	f003 0302 	and.w	r3, r3, #2
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d1ee      	bne.n	8007d7e <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	f000 812b 	beq.w	8008000 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007daa:	4b5a      	ldr	r3, [pc, #360]	@ (8007f14 <HAL_RCC_OscConfig+0x764>)
 8007dac:	691b      	ldr	r3, [r3, #16]
 8007dae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007db2:	2b18      	cmp	r3, #24
 8007db4:	f000 80bb 	beq.w	8007f2e <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dbc:	2b02      	cmp	r3, #2
 8007dbe:	f040 8095 	bne.w	8007eec <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007dc2:	4b54      	ldr	r3, [pc, #336]	@ (8007f14 <HAL_RCC_OscConfig+0x764>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4a53      	ldr	r2, [pc, #332]	@ (8007f14 <HAL_RCC_OscConfig+0x764>)
 8007dc8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007dcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dce:	f7fb fdbd 	bl	800394c <HAL_GetTick>
 8007dd2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007dd4:	e008      	b.n	8007de8 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007dd6:	f7fb fdb9 	bl	800394c <HAL_GetTick>
 8007dda:	4602      	mov	r2, r0
 8007ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dde:	1ad3      	subs	r3, r2, r3
 8007de0:	2b02      	cmp	r3, #2
 8007de2:	d901      	bls.n	8007de8 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8007de4:	2303      	movs	r3, #3
 8007de6:	e10c      	b.n	8008002 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007de8:	4b4a      	ldr	r3, [pc, #296]	@ (8007f14 <HAL_RCC_OscConfig+0x764>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d1f0      	bne.n	8007dd6 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007df4:	4b47      	ldr	r3, [pc, #284]	@ (8007f14 <HAL_RCC_OscConfig+0x764>)
 8007df6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007df8:	4b47      	ldr	r3, [pc, #284]	@ (8007f18 <HAL_RCC_OscConfig+0x768>)
 8007dfa:	4013      	ands	r3, r2
 8007dfc:	687a      	ldr	r2, [r7, #4]
 8007dfe:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8007e00:	687a      	ldr	r2, [r7, #4]
 8007e02:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007e04:	0112      	lsls	r2, r2, #4
 8007e06:	430a      	orrs	r2, r1
 8007e08:	4942      	ldr	r1, [pc, #264]	@ (8007f14 <HAL_RCC_OscConfig+0x764>)
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	628b      	str	r3, [r1, #40]	@ 0x28
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e12:	3b01      	subs	r3, #1
 8007e14:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e1c:	3b01      	subs	r3, #1
 8007e1e:	025b      	lsls	r3, r3, #9
 8007e20:	b29b      	uxth	r3, r3
 8007e22:	431a      	orrs	r2, r3
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e28:	3b01      	subs	r3, #1
 8007e2a:	041b      	lsls	r3, r3, #16
 8007e2c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007e30:	431a      	orrs	r2, r3
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e36:	3b01      	subs	r3, #1
 8007e38:	061b      	lsls	r3, r3, #24
 8007e3a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007e3e:	4935      	ldr	r1, [pc, #212]	@ (8007f14 <HAL_RCC_OscConfig+0x764>)
 8007e40:	4313      	orrs	r3, r2
 8007e42:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007e44:	4b33      	ldr	r3, [pc, #204]	@ (8007f14 <HAL_RCC_OscConfig+0x764>)
 8007e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e48:	4a32      	ldr	r2, [pc, #200]	@ (8007f14 <HAL_RCC_OscConfig+0x764>)
 8007e4a:	f023 0301 	bic.w	r3, r3, #1
 8007e4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007e50:	4b30      	ldr	r3, [pc, #192]	@ (8007f14 <HAL_RCC_OscConfig+0x764>)
 8007e52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e54:	4b31      	ldr	r3, [pc, #196]	@ (8007f1c <HAL_RCC_OscConfig+0x76c>)
 8007e56:	4013      	ands	r3, r2
 8007e58:	687a      	ldr	r2, [r7, #4]
 8007e5a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007e5c:	00d2      	lsls	r2, r2, #3
 8007e5e:	492d      	ldr	r1, [pc, #180]	@ (8007f14 <HAL_RCC_OscConfig+0x764>)
 8007e60:	4313      	orrs	r3, r2
 8007e62:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007e64:	4b2b      	ldr	r3, [pc, #172]	@ (8007f14 <HAL_RCC_OscConfig+0x764>)
 8007e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e68:	f023 020c 	bic.w	r2, r3, #12
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e70:	4928      	ldr	r1, [pc, #160]	@ (8007f14 <HAL_RCC_OscConfig+0x764>)
 8007e72:	4313      	orrs	r3, r2
 8007e74:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007e76:	4b27      	ldr	r3, [pc, #156]	@ (8007f14 <HAL_RCC_OscConfig+0x764>)
 8007e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e7a:	f023 0202 	bic.w	r2, r3, #2
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e82:	4924      	ldr	r1, [pc, #144]	@ (8007f14 <HAL_RCC_OscConfig+0x764>)
 8007e84:	4313      	orrs	r3, r2
 8007e86:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007e88:	4b22      	ldr	r3, [pc, #136]	@ (8007f14 <HAL_RCC_OscConfig+0x764>)
 8007e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e8c:	4a21      	ldr	r2, [pc, #132]	@ (8007f14 <HAL_RCC_OscConfig+0x764>)
 8007e8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e94:	4b1f      	ldr	r3, [pc, #124]	@ (8007f14 <HAL_RCC_OscConfig+0x764>)
 8007e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e98:	4a1e      	ldr	r2, [pc, #120]	@ (8007f14 <HAL_RCC_OscConfig+0x764>)
 8007e9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007ea0:	4b1c      	ldr	r3, [pc, #112]	@ (8007f14 <HAL_RCC_OscConfig+0x764>)
 8007ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ea4:	4a1b      	ldr	r2, [pc, #108]	@ (8007f14 <HAL_RCC_OscConfig+0x764>)
 8007ea6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007eaa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007eac:	4b19      	ldr	r3, [pc, #100]	@ (8007f14 <HAL_RCC_OscConfig+0x764>)
 8007eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eb0:	4a18      	ldr	r2, [pc, #96]	@ (8007f14 <HAL_RCC_OscConfig+0x764>)
 8007eb2:	f043 0301 	orr.w	r3, r3, #1
 8007eb6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007eb8:	4b16      	ldr	r3, [pc, #88]	@ (8007f14 <HAL_RCC_OscConfig+0x764>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4a15      	ldr	r2, [pc, #84]	@ (8007f14 <HAL_RCC_OscConfig+0x764>)
 8007ebe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007ec2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ec4:	f7fb fd42 	bl	800394c <HAL_GetTick>
 8007ec8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007eca:	e008      	b.n	8007ede <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ecc:	f7fb fd3e 	bl	800394c <HAL_GetTick>
 8007ed0:	4602      	mov	r2, r0
 8007ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ed4:	1ad3      	subs	r3, r2, r3
 8007ed6:	2b02      	cmp	r3, #2
 8007ed8:	d901      	bls.n	8007ede <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8007eda:	2303      	movs	r3, #3
 8007edc:	e091      	b.n	8008002 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007ede:	4b0d      	ldr	r3, [pc, #52]	@ (8007f14 <HAL_RCC_OscConfig+0x764>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d0f0      	beq.n	8007ecc <HAL_RCC_OscConfig+0x71c>
 8007eea:	e089      	b.n	8008000 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007eec:	4b09      	ldr	r3, [pc, #36]	@ (8007f14 <HAL_RCC_OscConfig+0x764>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4a08      	ldr	r2, [pc, #32]	@ (8007f14 <HAL_RCC_OscConfig+0x764>)
 8007ef2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007ef6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ef8:	f7fb fd28 	bl	800394c <HAL_GetTick>
 8007efc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007efe:	e00f      	b.n	8007f20 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f00:	f7fb fd24 	bl	800394c <HAL_GetTick>
 8007f04:	4602      	mov	r2, r0
 8007f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f08:	1ad3      	subs	r3, r2, r3
 8007f0a:	2b02      	cmp	r3, #2
 8007f0c:	d908      	bls.n	8007f20 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8007f0e:	2303      	movs	r3, #3
 8007f10:	e077      	b.n	8008002 <HAL_RCC_OscConfig+0x852>
 8007f12:	bf00      	nop
 8007f14:	58024400 	.word	0x58024400
 8007f18:	fffffc0c 	.word	0xfffffc0c
 8007f1c:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007f20:	4b3a      	ldr	r3, [pc, #232]	@ (800800c <HAL_RCC_OscConfig+0x85c>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d1e9      	bne.n	8007f00 <HAL_RCC_OscConfig+0x750>
 8007f2c:	e068      	b.n	8008000 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007f2e:	4b37      	ldr	r3, [pc, #220]	@ (800800c <HAL_RCC_OscConfig+0x85c>)
 8007f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f32:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007f34:	4b35      	ldr	r3, [pc, #212]	@ (800800c <HAL_RCC_OscConfig+0x85c>)
 8007f36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f38:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f3e:	2b01      	cmp	r3, #1
 8007f40:	d031      	beq.n	8007fa6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	f003 0203 	and.w	r2, r3, #3
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d12a      	bne.n	8007fa6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	091b      	lsrs	r3, r3, #4
 8007f54:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	d122      	bne.n	8007fa6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f6a:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d11a      	bne.n	8007fa6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	0a5b      	lsrs	r3, r3, #9
 8007f74:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f7c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007f7e:	429a      	cmp	r2, r3
 8007f80:	d111      	bne.n	8007fa6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	0c1b      	lsrs	r3, r3, #16
 8007f86:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f8e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007f90:	429a      	cmp	r2, r3
 8007f92:	d108      	bne.n	8007fa6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	0e1b      	lsrs	r3, r3, #24
 8007f98:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fa0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d001      	beq.n	8007faa <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	e02b      	b.n	8008002 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007faa:	4b18      	ldr	r3, [pc, #96]	@ (800800c <HAL_RCC_OscConfig+0x85c>)
 8007fac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fae:	08db      	lsrs	r3, r3, #3
 8007fb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007fb4:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007fba:	693a      	ldr	r2, [r7, #16]
 8007fbc:	429a      	cmp	r2, r3
 8007fbe:	d01f      	beq.n	8008000 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007fc0:	4b12      	ldr	r3, [pc, #72]	@ (800800c <HAL_RCC_OscConfig+0x85c>)
 8007fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fc4:	4a11      	ldr	r2, [pc, #68]	@ (800800c <HAL_RCC_OscConfig+0x85c>)
 8007fc6:	f023 0301 	bic.w	r3, r3, #1
 8007fca:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007fcc:	f7fb fcbe 	bl	800394c <HAL_GetTick>
 8007fd0:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007fd2:	bf00      	nop
 8007fd4:	f7fb fcba 	bl	800394c <HAL_GetTick>
 8007fd8:	4602      	mov	r2, r0
 8007fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d0f9      	beq.n	8007fd4 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007fe0:	4b0a      	ldr	r3, [pc, #40]	@ (800800c <HAL_RCC_OscConfig+0x85c>)
 8007fe2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007fe4:	4b0a      	ldr	r3, [pc, #40]	@ (8008010 <HAL_RCC_OscConfig+0x860>)
 8007fe6:	4013      	ands	r3, r2
 8007fe8:	687a      	ldr	r2, [r7, #4]
 8007fea:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007fec:	00d2      	lsls	r2, r2, #3
 8007fee:	4907      	ldr	r1, [pc, #28]	@ (800800c <HAL_RCC_OscConfig+0x85c>)
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007ff4:	4b05      	ldr	r3, [pc, #20]	@ (800800c <HAL_RCC_OscConfig+0x85c>)
 8007ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ff8:	4a04      	ldr	r2, [pc, #16]	@ (800800c <HAL_RCC_OscConfig+0x85c>)
 8007ffa:	f043 0301 	orr.w	r3, r3, #1
 8007ffe:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008000:	2300      	movs	r3, #0
}
 8008002:	4618      	mov	r0, r3
 8008004:	3730      	adds	r7, #48	@ 0x30
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}
 800800a:	bf00      	nop
 800800c:	58024400 	.word	0x58024400
 8008010:	ffff0007 	.word	0xffff0007

08008014 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b086      	sub	sp, #24
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d101      	bne.n	8008028 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008024:	2301      	movs	r3, #1
 8008026:	e19c      	b.n	8008362 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008028:	4b8a      	ldr	r3, [pc, #552]	@ (8008254 <HAL_RCC_ClockConfig+0x240>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f003 030f 	and.w	r3, r3, #15
 8008030:	683a      	ldr	r2, [r7, #0]
 8008032:	429a      	cmp	r2, r3
 8008034:	d910      	bls.n	8008058 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008036:	4b87      	ldr	r3, [pc, #540]	@ (8008254 <HAL_RCC_ClockConfig+0x240>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f023 020f 	bic.w	r2, r3, #15
 800803e:	4985      	ldr	r1, [pc, #532]	@ (8008254 <HAL_RCC_ClockConfig+0x240>)
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	4313      	orrs	r3, r2
 8008044:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008046:	4b83      	ldr	r3, [pc, #524]	@ (8008254 <HAL_RCC_ClockConfig+0x240>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f003 030f 	and.w	r3, r3, #15
 800804e:	683a      	ldr	r2, [r7, #0]
 8008050:	429a      	cmp	r2, r3
 8008052:	d001      	beq.n	8008058 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008054:	2301      	movs	r3, #1
 8008056:	e184      	b.n	8008362 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f003 0304 	and.w	r3, r3, #4
 8008060:	2b00      	cmp	r3, #0
 8008062:	d010      	beq.n	8008086 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	691a      	ldr	r2, [r3, #16]
 8008068:	4b7b      	ldr	r3, [pc, #492]	@ (8008258 <HAL_RCC_ClockConfig+0x244>)
 800806a:	699b      	ldr	r3, [r3, #24]
 800806c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008070:	429a      	cmp	r2, r3
 8008072:	d908      	bls.n	8008086 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008074:	4b78      	ldr	r3, [pc, #480]	@ (8008258 <HAL_RCC_ClockConfig+0x244>)
 8008076:	699b      	ldr	r3, [r3, #24]
 8008078:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	691b      	ldr	r3, [r3, #16]
 8008080:	4975      	ldr	r1, [pc, #468]	@ (8008258 <HAL_RCC_ClockConfig+0x244>)
 8008082:	4313      	orrs	r3, r2
 8008084:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f003 0308 	and.w	r3, r3, #8
 800808e:	2b00      	cmp	r3, #0
 8008090:	d010      	beq.n	80080b4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	695a      	ldr	r2, [r3, #20]
 8008096:	4b70      	ldr	r3, [pc, #448]	@ (8008258 <HAL_RCC_ClockConfig+0x244>)
 8008098:	69db      	ldr	r3, [r3, #28]
 800809a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800809e:	429a      	cmp	r2, r3
 80080a0:	d908      	bls.n	80080b4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80080a2:	4b6d      	ldr	r3, [pc, #436]	@ (8008258 <HAL_RCC_ClockConfig+0x244>)
 80080a4:	69db      	ldr	r3, [r3, #28]
 80080a6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	695b      	ldr	r3, [r3, #20]
 80080ae:	496a      	ldr	r1, [pc, #424]	@ (8008258 <HAL_RCC_ClockConfig+0x244>)
 80080b0:	4313      	orrs	r3, r2
 80080b2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f003 0310 	and.w	r3, r3, #16
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d010      	beq.n	80080e2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	699a      	ldr	r2, [r3, #24]
 80080c4:	4b64      	ldr	r3, [pc, #400]	@ (8008258 <HAL_RCC_ClockConfig+0x244>)
 80080c6:	69db      	ldr	r3, [r3, #28]
 80080c8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d908      	bls.n	80080e2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80080d0:	4b61      	ldr	r3, [pc, #388]	@ (8008258 <HAL_RCC_ClockConfig+0x244>)
 80080d2:	69db      	ldr	r3, [r3, #28]
 80080d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	699b      	ldr	r3, [r3, #24]
 80080dc:	495e      	ldr	r1, [pc, #376]	@ (8008258 <HAL_RCC_ClockConfig+0x244>)
 80080de:	4313      	orrs	r3, r2
 80080e0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f003 0320 	and.w	r3, r3, #32
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d010      	beq.n	8008110 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	69da      	ldr	r2, [r3, #28]
 80080f2:	4b59      	ldr	r3, [pc, #356]	@ (8008258 <HAL_RCC_ClockConfig+0x244>)
 80080f4:	6a1b      	ldr	r3, [r3, #32]
 80080f6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80080fa:	429a      	cmp	r2, r3
 80080fc:	d908      	bls.n	8008110 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80080fe:	4b56      	ldr	r3, [pc, #344]	@ (8008258 <HAL_RCC_ClockConfig+0x244>)
 8008100:	6a1b      	ldr	r3, [r3, #32]
 8008102:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	69db      	ldr	r3, [r3, #28]
 800810a:	4953      	ldr	r1, [pc, #332]	@ (8008258 <HAL_RCC_ClockConfig+0x244>)
 800810c:	4313      	orrs	r3, r2
 800810e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f003 0302 	and.w	r3, r3, #2
 8008118:	2b00      	cmp	r3, #0
 800811a:	d010      	beq.n	800813e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	68da      	ldr	r2, [r3, #12]
 8008120:	4b4d      	ldr	r3, [pc, #308]	@ (8008258 <HAL_RCC_ClockConfig+0x244>)
 8008122:	699b      	ldr	r3, [r3, #24]
 8008124:	f003 030f 	and.w	r3, r3, #15
 8008128:	429a      	cmp	r2, r3
 800812a:	d908      	bls.n	800813e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800812c:	4b4a      	ldr	r3, [pc, #296]	@ (8008258 <HAL_RCC_ClockConfig+0x244>)
 800812e:	699b      	ldr	r3, [r3, #24]
 8008130:	f023 020f 	bic.w	r2, r3, #15
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	68db      	ldr	r3, [r3, #12]
 8008138:	4947      	ldr	r1, [pc, #284]	@ (8008258 <HAL_RCC_ClockConfig+0x244>)
 800813a:	4313      	orrs	r3, r2
 800813c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f003 0301 	and.w	r3, r3, #1
 8008146:	2b00      	cmp	r3, #0
 8008148:	d055      	beq.n	80081f6 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800814a:	4b43      	ldr	r3, [pc, #268]	@ (8008258 <HAL_RCC_ClockConfig+0x244>)
 800814c:	699b      	ldr	r3, [r3, #24]
 800814e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	689b      	ldr	r3, [r3, #8]
 8008156:	4940      	ldr	r1, [pc, #256]	@ (8008258 <HAL_RCC_ClockConfig+0x244>)
 8008158:	4313      	orrs	r3, r2
 800815a:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	2b02      	cmp	r3, #2
 8008162:	d107      	bne.n	8008174 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008164:	4b3c      	ldr	r3, [pc, #240]	@ (8008258 <HAL_RCC_ClockConfig+0x244>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800816c:	2b00      	cmp	r3, #0
 800816e:	d121      	bne.n	80081b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008170:	2301      	movs	r3, #1
 8008172:	e0f6      	b.n	8008362 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	2b03      	cmp	r3, #3
 800817a:	d107      	bne.n	800818c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800817c:	4b36      	ldr	r3, [pc, #216]	@ (8008258 <HAL_RCC_ClockConfig+0x244>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008184:	2b00      	cmp	r3, #0
 8008186:	d115      	bne.n	80081b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008188:	2301      	movs	r3, #1
 800818a:	e0ea      	b.n	8008362 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	2b01      	cmp	r3, #1
 8008192:	d107      	bne.n	80081a4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008194:	4b30      	ldr	r3, [pc, #192]	@ (8008258 <HAL_RCC_ClockConfig+0x244>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800819c:	2b00      	cmp	r3, #0
 800819e:	d109      	bne.n	80081b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80081a0:	2301      	movs	r3, #1
 80081a2:	e0de      	b.n	8008362 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80081a4:	4b2c      	ldr	r3, [pc, #176]	@ (8008258 <HAL_RCC_ClockConfig+0x244>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f003 0304 	and.w	r3, r3, #4
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d101      	bne.n	80081b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80081b0:	2301      	movs	r3, #1
 80081b2:	e0d6      	b.n	8008362 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80081b4:	4b28      	ldr	r3, [pc, #160]	@ (8008258 <HAL_RCC_ClockConfig+0x244>)
 80081b6:	691b      	ldr	r3, [r3, #16]
 80081b8:	f023 0207 	bic.w	r2, r3, #7
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	4925      	ldr	r1, [pc, #148]	@ (8008258 <HAL_RCC_ClockConfig+0x244>)
 80081c2:	4313      	orrs	r3, r2
 80081c4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80081c6:	f7fb fbc1 	bl	800394c <HAL_GetTick>
 80081ca:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80081cc:	e00a      	b.n	80081e4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80081ce:	f7fb fbbd 	bl	800394c <HAL_GetTick>
 80081d2:	4602      	mov	r2, r0
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	1ad3      	subs	r3, r2, r3
 80081d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80081dc:	4293      	cmp	r3, r2
 80081de:	d901      	bls.n	80081e4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80081e0:	2303      	movs	r3, #3
 80081e2:	e0be      	b.n	8008362 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80081e4:	4b1c      	ldr	r3, [pc, #112]	@ (8008258 <HAL_RCC_ClockConfig+0x244>)
 80081e6:	691b      	ldr	r3, [r3, #16]
 80081e8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	685b      	ldr	r3, [r3, #4]
 80081f0:	00db      	lsls	r3, r3, #3
 80081f2:	429a      	cmp	r2, r3
 80081f4:	d1eb      	bne.n	80081ce <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f003 0302 	and.w	r3, r3, #2
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d010      	beq.n	8008224 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	68da      	ldr	r2, [r3, #12]
 8008206:	4b14      	ldr	r3, [pc, #80]	@ (8008258 <HAL_RCC_ClockConfig+0x244>)
 8008208:	699b      	ldr	r3, [r3, #24]
 800820a:	f003 030f 	and.w	r3, r3, #15
 800820e:	429a      	cmp	r2, r3
 8008210:	d208      	bcs.n	8008224 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008212:	4b11      	ldr	r3, [pc, #68]	@ (8008258 <HAL_RCC_ClockConfig+0x244>)
 8008214:	699b      	ldr	r3, [r3, #24]
 8008216:	f023 020f 	bic.w	r2, r3, #15
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	68db      	ldr	r3, [r3, #12]
 800821e:	490e      	ldr	r1, [pc, #56]	@ (8008258 <HAL_RCC_ClockConfig+0x244>)
 8008220:	4313      	orrs	r3, r2
 8008222:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008224:	4b0b      	ldr	r3, [pc, #44]	@ (8008254 <HAL_RCC_ClockConfig+0x240>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f003 030f 	and.w	r3, r3, #15
 800822c:	683a      	ldr	r2, [r7, #0]
 800822e:	429a      	cmp	r2, r3
 8008230:	d214      	bcs.n	800825c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008232:	4b08      	ldr	r3, [pc, #32]	@ (8008254 <HAL_RCC_ClockConfig+0x240>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f023 020f 	bic.w	r2, r3, #15
 800823a:	4906      	ldr	r1, [pc, #24]	@ (8008254 <HAL_RCC_ClockConfig+0x240>)
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	4313      	orrs	r3, r2
 8008240:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008242:	4b04      	ldr	r3, [pc, #16]	@ (8008254 <HAL_RCC_ClockConfig+0x240>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f003 030f 	and.w	r3, r3, #15
 800824a:	683a      	ldr	r2, [r7, #0]
 800824c:	429a      	cmp	r2, r3
 800824e:	d005      	beq.n	800825c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008250:	2301      	movs	r3, #1
 8008252:	e086      	b.n	8008362 <HAL_RCC_ClockConfig+0x34e>
 8008254:	52002000 	.word	0x52002000
 8008258:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f003 0304 	and.w	r3, r3, #4
 8008264:	2b00      	cmp	r3, #0
 8008266:	d010      	beq.n	800828a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	691a      	ldr	r2, [r3, #16]
 800826c:	4b3f      	ldr	r3, [pc, #252]	@ (800836c <HAL_RCC_ClockConfig+0x358>)
 800826e:	699b      	ldr	r3, [r3, #24]
 8008270:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008274:	429a      	cmp	r2, r3
 8008276:	d208      	bcs.n	800828a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008278:	4b3c      	ldr	r3, [pc, #240]	@ (800836c <HAL_RCC_ClockConfig+0x358>)
 800827a:	699b      	ldr	r3, [r3, #24]
 800827c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	691b      	ldr	r3, [r3, #16]
 8008284:	4939      	ldr	r1, [pc, #228]	@ (800836c <HAL_RCC_ClockConfig+0x358>)
 8008286:	4313      	orrs	r3, r2
 8008288:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f003 0308 	and.w	r3, r3, #8
 8008292:	2b00      	cmp	r3, #0
 8008294:	d010      	beq.n	80082b8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	695a      	ldr	r2, [r3, #20]
 800829a:	4b34      	ldr	r3, [pc, #208]	@ (800836c <HAL_RCC_ClockConfig+0x358>)
 800829c:	69db      	ldr	r3, [r3, #28]
 800829e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80082a2:	429a      	cmp	r2, r3
 80082a4:	d208      	bcs.n	80082b8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80082a6:	4b31      	ldr	r3, [pc, #196]	@ (800836c <HAL_RCC_ClockConfig+0x358>)
 80082a8:	69db      	ldr	r3, [r3, #28]
 80082aa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	695b      	ldr	r3, [r3, #20]
 80082b2:	492e      	ldr	r1, [pc, #184]	@ (800836c <HAL_RCC_ClockConfig+0x358>)
 80082b4:	4313      	orrs	r3, r2
 80082b6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f003 0310 	and.w	r3, r3, #16
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d010      	beq.n	80082e6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	699a      	ldr	r2, [r3, #24]
 80082c8:	4b28      	ldr	r3, [pc, #160]	@ (800836c <HAL_RCC_ClockConfig+0x358>)
 80082ca:	69db      	ldr	r3, [r3, #28]
 80082cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d208      	bcs.n	80082e6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80082d4:	4b25      	ldr	r3, [pc, #148]	@ (800836c <HAL_RCC_ClockConfig+0x358>)
 80082d6:	69db      	ldr	r3, [r3, #28]
 80082d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	699b      	ldr	r3, [r3, #24]
 80082e0:	4922      	ldr	r1, [pc, #136]	@ (800836c <HAL_RCC_ClockConfig+0x358>)
 80082e2:	4313      	orrs	r3, r2
 80082e4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f003 0320 	and.w	r3, r3, #32
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d010      	beq.n	8008314 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	69da      	ldr	r2, [r3, #28]
 80082f6:	4b1d      	ldr	r3, [pc, #116]	@ (800836c <HAL_RCC_ClockConfig+0x358>)
 80082f8:	6a1b      	ldr	r3, [r3, #32]
 80082fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80082fe:	429a      	cmp	r2, r3
 8008300:	d208      	bcs.n	8008314 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008302:	4b1a      	ldr	r3, [pc, #104]	@ (800836c <HAL_RCC_ClockConfig+0x358>)
 8008304:	6a1b      	ldr	r3, [r3, #32]
 8008306:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	69db      	ldr	r3, [r3, #28]
 800830e:	4917      	ldr	r1, [pc, #92]	@ (800836c <HAL_RCC_ClockConfig+0x358>)
 8008310:	4313      	orrs	r3, r2
 8008312:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8008314:	f000 f834 	bl	8008380 <HAL_RCC_GetSysClockFreq>
 8008318:	4602      	mov	r2, r0
 800831a:	4b14      	ldr	r3, [pc, #80]	@ (800836c <HAL_RCC_ClockConfig+0x358>)
 800831c:	699b      	ldr	r3, [r3, #24]
 800831e:	0a1b      	lsrs	r3, r3, #8
 8008320:	f003 030f 	and.w	r3, r3, #15
 8008324:	4912      	ldr	r1, [pc, #72]	@ (8008370 <HAL_RCC_ClockConfig+0x35c>)
 8008326:	5ccb      	ldrb	r3, [r1, r3]
 8008328:	f003 031f 	and.w	r3, r3, #31
 800832c:	fa22 f303 	lsr.w	r3, r2, r3
 8008330:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8008332:	4b0e      	ldr	r3, [pc, #56]	@ (800836c <HAL_RCC_ClockConfig+0x358>)
 8008334:	699b      	ldr	r3, [r3, #24]
 8008336:	f003 030f 	and.w	r3, r3, #15
 800833a:	4a0d      	ldr	r2, [pc, #52]	@ (8008370 <HAL_RCC_ClockConfig+0x35c>)
 800833c:	5cd3      	ldrb	r3, [r2, r3]
 800833e:	f003 031f 	and.w	r3, r3, #31
 8008342:	693a      	ldr	r2, [r7, #16]
 8008344:	fa22 f303 	lsr.w	r3, r2, r3
 8008348:	4a0a      	ldr	r2, [pc, #40]	@ (8008374 <HAL_RCC_ClockConfig+0x360>)
 800834a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800834c:	4a0a      	ldr	r2, [pc, #40]	@ (8008378 <HAL_RCC_ClockConfig+0x364>)
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008352:	4b0a      	ldr	r3, [pc, #40]	@ (800837c <HAL_RCC_ClockConfig+0x368>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4618      	mov	r0, r3
 8008358:	f7fb faae 	bl	80038b8 <HAL_InitTick>
 800835c:	4603      	mov	r3, r0
 800835e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008360:	7bfb      	ldrb	r3, [r7, #15]
}
 8008362:	4618      	mov	r0, r3
 8008364:	3718      	adds	r7, #24
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}
 800836a:	bf00      	nop
 800836c:	58024400 	.word	0x58024400
 8008370:	08013090 	.word	0x08013090
 8008374:	2400009c 	.word	0x2400009c
 8008378:	24000098 	.word	0x24000098
 800837c:	240000a0 	.word	0x240000a0

08008380 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008380:	b480      	push	{r7}
 8008382:	b089      	sub	sp, #36	@ 0x24
 8008384:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008386:	4bb3      	ldr	r3, [pc, #716]	@ (8008654 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008388:	691b      	ldr	r3, [r3, #16]
 800838a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800838e:	2b18      	cmp	r3, #24
 8008390:	f200 8155 	bhi.w	800863e <HAL_RCC_GetSysClockFreq+0x2be>
 8008394:	a201      	add	r2, pc, #4	@ (adr r2, 800839c <HAL_RCC_GetSysClockFreq+0x1c>)
 8008396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800839a:	bf00      	nop
 800839c:	08008401 	.word	0x08008401
 80083a0:	0800863f 	.word	0x0800863f
 80083a4:	0800863f 	.word	0x0800863f
 80083a8:	0800863f 	.word	0x0800863f
 80083ac:	0800863f 	.word	0x0800863f
 80083b0:	0800863f 	.word	0x0800863f
 80083b4:	0800863f 	.word	0x0800863f
 80083b8:	0800863f 	.word	0x0800863f
 80083bc:	08008427 	.word	0x08008427
 80083c0:	0800863f 	.word	0x0800863f
 80083c4:	0800863f 	.word	0x0800863f
 80083c8:	0800863f 	.word	0x0800863f
 80083cc:	0800863f 	.word	0x0800863f
 80083d0:	0800863f 	.word	0x0800863f
 80083d4:	0800863f 	.word	0x0800863f
 80083d8:	0800863f 	.word	0x0800863f
 80083dc:	0800842d 	.word	0x0800842d
 80083e0:	0800863f 	.word	0x0800863f
 80083e4:	0800863f 	.word	0x0800863f
 80083e8:	0800863f 	.word	0x0800863f
 80083ec:	0800863f 	.word	0x0800863f
 80083f0:	0800863f 	.word	0x0800863f
 80083f4:	0800863f 	.word	0x0800863f
 80083f8:	0800863f 	.word	0x0800863f
 80083fc:	08008433 	.word	0x08008433
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008400:	4b94      	ldr	r3, [pc, #592]	@ (8008654 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f003 0320 	and.w	r3, r3, #32
 8008408:	2b00      	cmp	r3, #0
 800840a:	d009      	beq.n	8008420 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800840c:	4b91      	ldr	r3, [pc, #580]	@ (8008654 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	08db      	lsrs	r3, r3, #3
 8008412:	f003 0303 	and.w	r3, r3, #3
 8008416:	4a90      	ldr	r2, [pc, #576]	@ (8008658 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008418:	fa22 f303 	lsr.w	r3, r2, r3
 800841c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800841e:	e111      	b.n	8008644 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008420:	4b8d      	ldr	r3, [pc, #564]	@ (8008658 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008422:	61bb      	str	r3, [r7, #24]
      break;
 8008424:	e10e      	b.n	8008644 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008426:	4b8d      	ldr	r3, [pc, #564]	@ (800865c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008428:	61bb      	str	r3, [r7, #24]
      break;
 800842a:	e10b      	b.n	8008644 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800842c:	4b8c      	ldr	r3, [pc, #560]	@ (8008660 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800842e:	61bb      	str	r3, [r7, #24]
      break;
 8008430:	e108      	b.n	8008644 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008432:	4b88      	ldr	r3, [pc, #544]	@ (8008654 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008436:	f003 0303 	and.w	r3, r3, #3
 800843a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800843c:	4b85      	ldr	r3, [pc, #532]	@ (8008654 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800843e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008440:	091b      	lsrs	r3, r3, #4
 8008442:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008446:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008448:	4b82      	ldr	r3, [pc, #520]	@ (8008654 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800844a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800844c:	f003 0301 	and.w	r3, r3, #1
 8008450:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008452:	4b80      	ldr	r3, [pc, #512]	@ (8008654 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008454:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008456:	08db      	lsrs	r3, r3, #3
 8008458:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800845c:	68fa      	ldr	r2, [r7, #12]
 800845e:	fb02 f303 	mul.w	r3, r2, r3
 8008462:	ee07 3a90 	vmov	s15, r3
 8008466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800846a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	2b00      	cmp	r3, #0
 8008472:	f000 80e1 	beq.w	8008638 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	2b02      	cmp	r3, #2
 800847a:	f000 8083 	beq.w	8008584 <HAL_RCC_GetSysClockFreq+0x204>
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	2b02      	cmp	r3, #2
 8008482:	f200 80a1 	bhi.w	80085c8 <HAL_RCC_GetSysClockFreq+0x248>
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d003      	beq.n	8008494 <HAL_RCC_GetSysClockFreq+0x114>
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	2b01      	cmp	r3, #1
 8008490:	d056      	beq.n	8008540 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008492:	e099      	b.n	80085c8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008494:	4b6f      	ldr	r3, [pc, #444]	@ (8008654 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f003 0320 	and.w	r3, r3, #32
 800849c:	2b00      	cmp	r3, #0
 800849e:	d02d      	beq.n	80084fc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80084a0:	4b6c      	ldr	r3, [pc, #432]	@ (8008654 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	08db      	lsrs	r3, r3, #3
 80084a6:	f003 0303 	and.w	r3, r3, #3
 80084aa:	4a6b      	ldr	r2, [pc, #428]	@ (8008658 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80084ac:	fa22 f303 	lsr.w	r3, r2, r3
 80084b0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	ee07 3a90 	vmov	s15, r3
 80084b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	ee07 3a90 	vmov	s15, r3
 80084c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084ca:	4b62      	ldr	r3, [pc, #392]	@ (8008654 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80084cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084d2:	ee07 3a90 	vmov	s15, r3
 80084d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084da:	ed97 6a02 	vldr	s12, [r7, #8]
 80084de:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8008664 <HAL_RCC_GetSysClockFreq+0x2e4>
 80084e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80084ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084f6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80084fa:	e087      	b.n	800860c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	ee07 3a90 	vmov	s15, r3
 8008502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008506:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8008668 <HAL_RCC_GetSysClockFreq+0x2e8>
 800850a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800850e:	4b51      	ldr	r3, [pc, #324]	@ (8008654 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008512:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008516:	ee07 3a90 	vmov	s15, r3
 800851a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800851e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008522:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8008664 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008526:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800852a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800852e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008532:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800853a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800853e:	e065      	b.n	800860c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	ee07 3a90 	vmov	s15, r3
 8008546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800854a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800866c <HAL_RCC_GetSysClockFreq+0x2ec>
 800854e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008552:	4b40      	ldr	r3, [pc, #256]	@ (8008654 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008556:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800855a:	ee07 3a90 	vmov	s15, r3
 800855e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008562:	ed97 6a02 	vldr	s12, [r7, #8]
 8008566:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8008664 <HAL_RCC_GetSysClockFreq+0x2e4>
 800856a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800856e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008572:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008576:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800857a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800857e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008582:	e043      	b.n	800860c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008584:	693b      	ldr	r3, [r7, #16]
 8008586:	ee07 3a90 	vmov	s15, r3
 800858a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800858e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8008670 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008592:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008596:	4b2f      	ldr	r3, [pc, #188]	@ (8008654 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800859a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800859e:	ee07 3a90 	vmov	s15, r3
 80085a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80085aa:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8008664 <HAL_RCC_GetSysClockFreq+0x2e4>
 80085ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80085ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80085c6:	e021      	b.n	800860c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	ee07 3a90 	vmov	s15, r3
 80085ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085d2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800866c <HAL_RCC_GetSysClockFreq+0x2ec>
 80085d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085da:	4b1e      	ldr	r3, [pc, #120]	@ (8008654 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085e2:	ee07 3a90 	vmov	s15, r3
 80085e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80085ee:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8008664 <HAL_RCC_GetSysClockFreq+0x2e4>
 80085f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80085fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008606:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800860a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800860c:	4b11      	ldr	r3, [pc, #68]	@ (8008654 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800860e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008610:	0a5b      	lsrs	r3, r3, #9
 8008612:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008616:	3301      	adds	r3, #1
 8008618:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	ee07 3a90 	vmov	s15, r3
 8008620:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008624:	edd7 6a07 	vldr	s13, [r7, #28]
 8008628:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800862c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008630:	ee17 3a90 	vmov	r3, s15
 8008634:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008636:	e005      	b.n	8008644 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008638:	2300      	movs	r3, #0
 800863a:	61bb      	str	r3, [r7, #24]
      break;
 800863c:	e002      	b.n	8008644 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800863e:	4b07      	ldr	r3, [pc, #28]	@ (800865c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008640:	61bb      	str	r3, [r7, #24]
      break;
 8008642:	bf00      	nop
  }

  return sysclockfreq;
 8008644:	69bb      	ldr	r3, [r7, #24]
}
 8008646:	4618      	mov	r0, r3
 8008648:	3724      	adds	r7, #36	@ 0x24
 800864a:	46bd      	mov	sp, r7
 800864c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008650:	4770      	bx	lr
 8008652:	bf00      	nop
 8008654:	58024400 	.word	0x58024400
 8008658:	03d09000 	.word	0x03d09000
 800865c:	003d0900 	.word	0x003d0900
 8008660:	016e3600 	.word	0x016e3600
 8008664:	46000000 	.word	0x46000000
 8008668:	4c742400 	.word	0x4c742400
 800866c:	4a742400 	.word	0x4a742400
 8008670:	4bb71b00 	.word	0x4bb71b00

08008674 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b082      	sub	sp, #8
 8008678:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800867a:	f7ff fe81 	bl	8008380 <HAL_RCC_GetSysClockFreq>
 800867e:	4602      	mov	r2, r0
 8008680:	4b10      	ldr	r3, [pc, #64]	@ (80086c4 <HAL_RCC_GetHCLKFreq+0x50>)
 8008682:	699b      	ldr	r3, [r3, #24]
 8008684:	0a1b      	lsrs	r3, r3, #8
 8008686:	f003 030f 	and.w	r3, r3, #15
 800868a:	490f      	ldr	r1, [pc, #60]	@ (80086c8 <HAL_RCC_GetHCLKFreq+0x54>)
 800868c:	5ccb      	ldrb	r3, [r1, r3]
 800868e:	f003 031f 	and.w	r3, r3, #31
 8008692:	fa22 f303 	lsr.w	r3, r2, r3
 8008696:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8008698:	4b0a      	ldr	r3, [pc, #40]	@ (80086c4 <HAL_RCC_GetHCLKFreq+0x50>)
 800869a:	699b      	ldr	r3, [r3, #24]
 800869c:	f003 030f 	and.w	r3, r3, #15
 80086a0:	4a09      	ldr	r2, [pc, #36]	@ (80086c8 <HAL_RCC_GetHCLKFreq+0x54>)
 80086a2:	5cd3      	ldrb	r3, [r2, r3]
 80086a4:	f003 031f 	and.w	r3, r3, #31
 80086a8:	687a      	ldr	r2, [r7, #4]
 80086aa:	fa22 f303 	lsr.w	r3, r2, r3
 80086ae:	4a07      	ldr	r2, [pc, #28]	@ (80086cc <HAL_RCC_GetHCLKFreq+0x58>)
 80086b0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80086b2:	4a07      	ldr	r2, [pc, #28]	@ (80086d0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80086b8:	4b04      	ldr	r3, [pc, #16]	@ (80086cc <HAL_RCC_GetHCLKFreq+0x58>)
 80086ba:	681b      	ldr	r3, [r3, #0]
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3708      	adds	r7, #8
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}
 80086c4:	58024400 	.word	0x58024400
 80086c8:	08013090 	.word	0x08013090
 80086cc:	2400009c 	.word	0x2400009c
 80086d0:	24000098 	.word	0x24000098

080086d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80086d8:	f7ff ffcc 	bl	8008674 <HAL_RCC_GetHCLKFreq>
 80086dc:	4602      	mov	r2, r0
 80086de:	4b06      	ldr	r3, [pc, #24]	@ (80086f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80086e0:	69db      	ldr	r3, [r3, #28]
 80086e2:	091b      	lsrs	r3, r3, #4
 80086e4:	f003 0307 	and.w	r3, r3, #7
 80086e8:	4904      	ldr	r1, [pc, #16]	@ (80086fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80086ea:	5ccb      	ldrb	r3, [r1, r3]
 80086ec:	f003 031f 	and.w	r3, r3, #31
 80086f0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	bd80      	pop	{r7, pc}
 80086f8:	58024400 	.word	0x58024400
 80086fc:	08013090 	.word	0x08013090

08008700 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8008704:	f7ff ffb6 	bl	8008674 <HAL_RCC_GetHCLKFreq>
 8008708:	4602      	mov	r2, r0
 800870a:	4b06      	ldr	r3, [pc, #24]	@ (8008724 <HAL_RCC_GetPCLK2Freq+0x24>)
 800870c:	69db      	ldr	r3, [r3, #28]
 800870e:	0a1b      	lsrs	r3, r3, #8
 8008710:	f003 0307 	and.w	r3, r3, #7
 8008714:	4904      	ldr	r1, [pc, #16]	@ (8008728 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008716:	5ccb      	ldrb	r3, [r1, r3]
 8008718:	f003 031f 	and.w	r3, r3, #31
 800871c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8008720:	4618      	mov	r0, r3
 8008722:	bd80      	pop	{r7, pc}
 8008724:	58024400 	.word	0x58024400
 8008728:	08013090 	.word	0x08013090

0800872c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800872c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008730:	b0c8      	sub	sp, #288	@ 0x120
 8008732:	af00      	add	r7, sp, #0
 8008734:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008738:	2300      	movs	r3, #0
 800873a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800873e:	2300      	movs	r3, #0
 8008740:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008744:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800874c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8008750:	2500      	movs	r5, #0
 8008752:	ea54 0305 	orrs.w	r3, r4, r5
 8008756:	d049      	beq.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008758:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800875c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800875e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008762:	d02f      	beq.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008764:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008768:	d828      	bhi.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800876a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800876e:	d01a      	beq.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008770:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008774:	d822      	bhi.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008776:	2b00      	cmp	r3, #0
 8008778:	d003      	beq.n	8008782 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800877a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800877e:	d007      	beq.n	8008790 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008780:	e01c      	b.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008782:	4ba7      	ldr	r3, [pc, #668]	@ (8008a20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008786:	4aa6      	ldr	r2, [pc, #664]	@ (8008a20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008788:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800878c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800878e:	e01a      	b.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008790:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008794:	3308      	adds	r3, #8
 8008796:	2102      	movs	r1, #2
 8008798:	4618      	mov	r0, r3
 800879a:	f001 fc43 	bl	800a024 <RCCEx_PLL2_Config>
 800879e:	4603      	mov	r3, r0
 80087a0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80087a4:	e00f      	b.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80087a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087aa:	3328      	adds	r3, #40	@ 0x28
 80087ac:	2102      	movs	r1, #2
 80087ae:	4618      	mov	r0, r3
 80087b0:	f001 fcea 	bl	800a188 <RCCEx_PLL3_Config>
 80087b4:	4603      	mov	r3, r0
 80087b6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80087ba:	e004      	b.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80087bc:	2301      	movs	r3, #1
 80087be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80087c2:	e000      	b.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80087c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087c6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d10a      	bne.n	80087e4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80087ce:	4b94      	ldr	r3, [pc, #592]	@ (8008a20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80087d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80087d2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80087d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80087dc:	4a90      	ldr	r2, [pc, #576]	@ (8008a20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80087de:	430b      	orrs	r3, r1
 80087e0:	6513      	str	r3, [r2, #80]	@ 0x50
 80087e2:	e003      	b.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087e4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80087e8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80087ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087f4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80087f8:	f04f 0900 	mov.w	r9, #0
 80087fc:	ea58 0309 	orrs.w	r3, r8, r9
 8008800:	d047      	beq.n	8008892 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008802:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008806:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008808:	2b04      	cmp	r3, #4
 800880a:	d82a      	bhi.n	8008862 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800880c:	a201      	add	r2, pc, #4	@ (adr r2, 8008814 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800880e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008812:	bf00      	nop
 8008814:	08008829 	.word	0x08008829
 8008818:	08008837 	.word	0x08008837
 800881c:	0800884d 	.word	0x0800884d
 8008820:	0800886b 	.word	0x0800886b
 8008824:	0800886b 	.word	0x0800886b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008828:	4b7d      	ldr	r3, [pc, #500]	@ (8008a20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800882a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800882c:	4a7c      	ldr	r2, [pc, #496]	@ (8008a20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800882e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008832:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008834:	e01a      	b.n	800886c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008836:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800883a:	3308      	adds	r3, #8
 800883c:	2100      	movs	r1, #0
 800883e:	4618      	mov	r0, r3
 8008840:	f001 fbf0 	bl	800a024 <RCCEx_PLL2_Config>
 8008844:	4603      	mov	r3, r0
 8008846:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800884a:	e00f      	b.n	800886c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800884c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008850:	3328      	adds	r3, #40	@ 0x28
 8008852:	2100      	movs	r1, #0
 8008854:	4618      	mov	r0, r3
 8008856:	f001 fc97 	bl	800a188 <RCCEx_PLL3_Config>
 800885a:	4603      	mov	r3, r0
 800885c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008860:	e004      	b.n	800886c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008862:	2301      	movs	r3, #1
 8008864:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008868:	e000      	b.n	800886c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800886a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800886c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008870:	2b00      	cmp	r3, #0
 8008872:	d10a      	bne.n	800888a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008874:	4b6a      	ldr	r3, [pc, #424]	@ (8008a20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008876:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008878:	f023 0107 	bic.w	r1, r3, #7
 800887c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008880:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008882:	4a67      	ldr	r2, [pc, #412]	@ (8008a20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008884:	430b      	orrs	r3, r1
 8008886:	6513      	str	r3, [r2, #80]	@ 0x50
 8008888:	e003      	b.n	8008892 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800888a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800888e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8008892:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800889a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800889e:	f04f 0b00 	mov.w	fp, #0
 80088a2:	ea5a 030b 	orrs.w	r3, sl, fp
 80088a6:	d054      	beq.n	8008952 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 80088a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80088ae:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80088b2:	d036      	beq.n	8008922 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80088b4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80088b8:	d82f      	bhi.n	800891a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80088ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80088be:	d032      	beq.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80088c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80088c4:	d829      	bhi.n	800891a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80088c6:	2bc0      	cmp	r3, #192	@ 0xc0
 80088c8:	d02f      	beq.n	800892a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 80088ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80088cc:	d825      	bhi.n	800891a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80088ce:	2b80      	cmp	r3, #128	@ 0x80
 80088d0:	d018      	beq.n	8008904 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80088d2:	2b80      	cmp	r3, #128	@ 0x80
 80088d4:	d821      	bhi.n	800891a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d002      	beq.n	80088e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80088da:	2b40      	cmp	r3, #64	@ 0x40
 80088dc:	d007      	beq.n	80088ee <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80088de:	e01c      	b.n	800891a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088e0:	4b4f      	ldr	r3, [pc, #316]	@ (8008a20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80088e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088e4:	4a4e      	ldr	r2, [pc, #312]	@ (8008a20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80088e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80088ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80088ec:	e01e      	b.n	800892c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80088ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088f2:	3308      	adds	r3, #8
 80088f4:	2100      	movs	r1, #0
 80088f6:	4618      	mov	r0, r3
 80088f8:	f001 fb94 	bl	800a024 <RCCEx_PLL2_Config>
 80088fc:	4603      	mov	r3, r0
 80088fe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8008902:	e013      	b.n	800892c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008904:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008908:	3328      	adds	r3, #40	@ 0x28
 800890a:	2100      	movs	r1, #0
 800890c:	4618      	mov	r0, r3
 800890e:	f001 fc3b 	bl	800a188 <RCCEx_PLL3_Config>
 8008912:	4603      	mov	r3, r0
 8008914:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8008918:	e008      	b.n	800892c <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800891a:	2301      	movs	r3, #1
 800891c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008920:	e004      	b.n	800892c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8008922:	bf00      	nop
 8008924:	e002      	b.n	800892c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8008926:	bf00      	nop
 8008928:	e000      	b.n	800892c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800892a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800892c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008930:	2b00      	cmp	r3, #0
 8008932:	d10a      	bne.n	800894a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8008934:	4b3a      	ldr	r3, [pc, #232]	@ (8008a20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008936:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008938:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800893c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008940:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008942:	4a37      	ldr	r2, [pc, #220]	@ (8008a20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008944:	430b      	orrs	r3, r1
 8008946:	6513      	str	r3, [r2, #80]	@ 0x50
 8008948:	e003      	b.n	8008952 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800894a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800894e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8008952:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800895a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800895e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008962:	2300      	movs	r3, #0
 8008964:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008968:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800896c:	460b      	mov	r3, r1
 800896e:	4313      	orrs	r3, r2
 8008970:	d05c      	beq.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8008972:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008976:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008978:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800897c:	d03b      	beq.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800897e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8008982:	d834      	bhi.n	80089ee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8008984:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008988:	d037      	beq.n	80089fa <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800898a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800898e:	d82e      	bhi.n	80089ee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8008990:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008994:	d033      	beq.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008996:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800899a:	d828      	bhi.n	80089ee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800899c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80089a0:	d01a      	beq.n	80089d8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80089a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80089a6:	d822      	bhi.n	80089ee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d003      	beq.n	80089b4 <HAL_RCCEx_PeriphCLKConfig+0x288>
 80089ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089b0:	d007      	beq.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0x296>
 80089b2:	e01c      	b.n	80089ee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089b4:	4b1a      	ldr	r3, [pc, #104]	@ (8008a20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80089b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089b8:	4a19      	ldr	r2, [pc, #100]	@ (8008a20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80089ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80089be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80089c0:	e01e      	b.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80089c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089c6:	3308      	adds	r3, #8
 80089c8:	2100      	movs	r1, #0
 80089ca:	4618      	mov	r0, r3
 80089cc:	f001 fb2a 	bl	800a024 <RCCEx_PLL2_Config>
 80089d0:	4603      	mov	r3, r0
 80089d2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80089d6:	e013      	b.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80089d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089dc:	3328      	adds	r3, #40	@ 0x28
 80089de:	2100      	movs	r1, #0
 80089e0:	4618      	mov	r0, r3
 80089e2:	f001 fbd1 	bl	800a188 <RCCEx_PLL3_Config>
 80089e6:	4603      	mov	r3, r0
 80089e8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80089ec:	e008      	b.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80089ee:	2301      	movs	r3, #1
 80089f0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80089f4:	e004      	b.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80089f6:	bf00      	nop
 80089f8:	e002      	b.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80089fa:	bf00      	nop
 80089fc:	e000      	b.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80089fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a00:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d10d      	bne.n	8008a24 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8008a08:	4b05      	ldr	r3, [pc, #20]	@ (8008a20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008a0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a0c:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8008a10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a16:	4a02      	ldr	r2, [pc, #8]	@ (8008a20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008a18:	430b      	orrs	r3, r1
 8008a1a:	6513      	str	r3, [r2, #80]	@ 0x50
 8008a1c:	e006      	b.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0x300>
 8008a1e:	bf00      	nop
 8008a20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a24:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008a28:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008a2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a34:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008a38:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008a42:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8008a46:	460b      	mov	r3, r1
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	d03a      	beq.n	8008ac2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8008a4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a52:	2b30      	cmp	r3, #48	@ 0x30
 8008a54:	d01f      	beq.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8008a56:	2b30      	cmp	r3, #48	@ 0x30
 8008a58:	d819      	bhi.n	8008a8e <HAL_RCCEx_PeriphCLKConfig+0x362>
 8008a5a:	2b20      	cmp	r3, #32
 8008a5c:	d00c      	beq.n	8008a78 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8008a5e:	2b20      	cmp	r3, #32
 8008a60:	d815      	bhi.n	8008a8e <HAL_RCCEx_PeriphCLKConfig+0x362>
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d019      	beq.n	8008a9a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008a66:	2b10      	cmp	r3, #16
 8008a68:	d111      	bne.n	8008a8e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a6a:	4bae      	ldr	r3, [pc, #696]	@ (8008d24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a6e:	4aad      	ldr	r2, [pc, #692]	@ (8008d24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008a70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008a74:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008a76:	e011      	b.n	8008a9c <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008a78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a7c:	3308      	adds	r3, #8
 8008a7e:	2102      	movs	r1, #2
 8008a80:	4618      	mov	r0, r3
 8008a82:	f001 facf 	bl	800a024 <RCCEx_PLL2_Config>
 8008a86:	4603      	mov	r3, r0
 8008a88:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008a8c:	e006      	b.n	8008a9c <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008a8e:	2301      	movs	r3, #1
 8008a90:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008a94:	e002      	b.n	8008a9c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8008a96:	bf00      	nop
 8008a98:	e000      	b.n	8008a9c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8008a9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a9c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d10a      	bne.n	8008aba <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008aa4:	4b9f      	ldr	r3, [pc, #636]	@ (8008d24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008aa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008aa8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008aac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ab0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ab2:	4a9c      	ldr	r2, [pc, #624]	@ (8008d24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008ab4:	430b      	orrs	r3, r1
 8008ab6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008ab8:	e003      	b.n	8008ac2 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008aba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008abe:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008ac2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aca:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8008ace:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008ad8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8008adc:	460b      	mov	r3, r1
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	d051      	beq.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008ae2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ae6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008ae8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008aec:	d035      	beq.n	8008b5a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8008aee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008af2:	d82e      	bhi.n	8008b52 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8008af4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008af8:	d031      	beq.n	8008b5e <HAL_RCCEx_PeriphCLKConfig+0x432>
 8008afa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008afe:	d828      	bhi.n	8008b52 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8008b00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b04:	d01a      	beq.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8008b06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b0a:	d822      	bhi.n	8008b52 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d003      	beq.n	8008b18 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8008b10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b14:	d007      	beq.n	8008b26 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8008b16:	e01c      	b.n	8008b52 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b18:	4b82      	ldr	r3, [pc, #520]	@ (8008d24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b1c:	4a81      	ldr	r2, [pc, #516]	@ (8008d24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008b1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008b22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008b24:	e01c      	b.n	8008b60 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008b26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b2a:	3308      	adds	r3, #8
 8008b2c:	2100      	movs	r1, #0
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f001 fa78 	bl	800a024 <RCCEx_PLL2_Config>
 8008b34:	4603      	mov	r3, r0
 8008b36:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008b3a:	e011      	b.n	8008b60 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008b3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b40:	3328      	adds	r3, #40	@ 0x28
 8008b42:	2100      	movs	r1, #0
 8008b44:	4618      	mov	r0, r3
 8008b46:	f001 fb1f 	bl	800a188 <RCCEx_PLL3_Config>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008b50:	e006      	b.n	8008b60 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b52:	2301      	movs	r3, #1
 8008b54:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008b58:	e002      	b.n	8008b60 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8008b5a:	bf00      	nop
 8008b5c:	e000      	b.n	8008b60 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8008b5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b60:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d10a      	bne.n	8008b7e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008b68:	4b6e      	ldr	r3, [pc, #440]	@ (8008d24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008b6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b6c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008b70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b74:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008b76:	4a6b      	ldr	r2, [pc, #428]	@ (8008d24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008b78:	430b      	orrs	r3, r1
 8008b7a:	6513      	str	r3, [r2, #80]	@ 0x50
 8008b7c:	e003      	b.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b7e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008b82:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008b86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b8e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8008b92:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008b96:	2300      	movs	r3, #0
 8008b98:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008b9c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8008ba0:	460b      	mov	r3, r1
 8008ba2:	4313      	orrs	r3, r2
 8008ba4:	d053      	beq.n	8008c4e <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008ba6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008baa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008bac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008bb0:	d033      	beq.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8008bb2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008bb6:	d82c      	bhi.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8008bb8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008bbc:	d02f      	beq.n	8008c1e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8008bbe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008bc2:	d826      	bhi.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8008bc4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008bc8:	d02b      	beq.n	8008c22 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008bca:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008bce:	d820      	bhi.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8008bd0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008bd4:	d012      	beq.n	8008bfc <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8008bd6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008bda:	d81a      	bhi.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d022      	beq.n	8008c26 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8008be0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008be4:	d115      	bne.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008be6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008bea:	3308      	adds	r3, #8
 8008bec:	2101      	movs	r1, #1
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f001 fa18 	bl	800a024 <RCCEx_PLL2_Config>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008bfa:	e015      	b.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008bfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c00:	3328      	adds	r3, #40	@ 0x28
 8008c02:	2101      	movs	r1, #1
 8008c04:	4618      	mov	r0, r3
 8008c06:	f001 fabf 	bl	800a188 <RCCEx_PLL3_Config>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008c10:	e00a      	b.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c12:	2301      	movs	r3, #1
 8008c14:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008c18:	e006      	b.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8008c1a:	bf00      	nop
 8008c1c:	e004      	b.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8008c1e:	bf00      	nop
 8008c20:	e002      	b.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8008c22:	bf00      	nop
 8008c24:	e000      	b.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8008c26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c28:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d10a      	bne.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008c30:	4b3c      	ldr	r3, [pc, #240]	@ (8008d24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008c32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c34:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8008c38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c3c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008c3e:	4a39      	ldr	r2, [pc, #228]	@ (8008d24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008c40:	430b      	orrs	r3, r1
 8008c42:	6513      	str	r3, [r2, #80]	@ 0x50
 8008c44:	e003      	b.n	8008c4e <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c46:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008c4a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008c4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c56:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8008c5a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008c5e:	2300      	movs	r3, #0
 8008c60:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008c64:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8008c68:	460b      	mov	r3, r1
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	d060      	beq.n	8008d30 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008c6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c72:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008c76:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8008c7a:	d039      	beq.n	8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8008c7c:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8008c80:	d832      	bhi.n	8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8008c82:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008c86:	d035      	beq.n	8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8008c88:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008c8c:	d82c      	bhi.n	8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8008c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c92:	d031      	beq.n	8008cf8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8008c94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c98:	d826      	bhi.n	8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8008c9a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008c9e:	d02d      	beq.n	8008cfc <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8008ca0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008ca4:	d820      	bhi.n	8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8008ca6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008caa:	d012      	beq.n	8008cd2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8008cac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008cb0:	d81a      	bhi.n	8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d024      	beq.n	8008d00 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008cb6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008cba:	d115      	bne.n	8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008cbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cc0:	3308      	adds	r3, #8
 8008cc2:	2101      	movs	r1, #1
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	f001 f9ad 	bl	800a024 <RCCEx_PLL2_Config>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008cd0:	e017      	b.n	8008d02 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008cd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cd6:	3328      	adds	r3, #40	@ 0x28
 8008cd8:	2101      	movs	r1, #1
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f001 fa54 	bl	800a188 <RCCEx_PLL3_Config>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008ce6:	e00c      	b.n	8008d02 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008ce8:	2301      	movs	r3, #1
 8008cea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008cee:	e008      	b.n	8008d02 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008cf0:	bf00      	nop
 8008cf2:	e006      	b.n	8008d02 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008cf4:	bf00      	nop
 8008cf6:	e004      	b.n	8008d02 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008cf8:	bf00      	nop
 8008cfa:	e002      	b.n	8008d02 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008cfc:	bf00      	nop
 8008cfe:	e000      	b.n	8008d02 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008d00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d02:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d10e      	bne.n	8008d28 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008d0a:	4b06      	ldr	r3, [pc, #24]	@ (8008d24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008d0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d0e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008d12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d16:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008d1a:	4a02      	ldr	r2, [pc, #8]	@ (8008d24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008d1c:	430b      	orrs	r3, r1
 8008d1e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008d20:	e006      	b.n	8008d30 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8008d22:	bf00      	nop
 8008d24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d28:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008d2c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008d30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d38:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8008d3c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008d40:	2300      	movs	r3, #0
 8008d42:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008d46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008d4a:	460b      	mov	r3, r1
 8008d4c:	4313      	orrs	r3, r2
 8008d4e:	d037      	beq.n	8008dc0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008d50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d54:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008d56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d5a:	d00e      	beq.n	8008d7a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8008d5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d60:	d816      	bhi.n	8008d90 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d018      	beq.n	8008d98 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8008d66:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d6a:	d111      	bne.n	8008d90 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d6c:	4bc4      	ldr	r3, [pc, #784]	@ (8009080 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d70:	4ac3      	ldr	r2, [pc, #780]	@ (8009080 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008d72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008d76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008d78:	e00f      	b.n	8008d9a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008d7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d7e:	3308      	adds	r3, #8
 8008d80:	2101      	movs	r1, #1
 8008d82:	4618      	mov	r0, r3
 8008d84:	f001 f94e 	bl	800a024 <RCCEx_PLL2_Config>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008d8e:	e004      	b.n	8008d9a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d90:	2301      	movs	r3, #1
 8008d92:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008d96:	e000      	b.n	8008d9a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8008d98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d9a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d10a      	bne.n	8008db8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008da2:	4bb7      	ldr	r3, [pc, #732]	@ (8009080 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008da4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008da6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008daa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008dae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008db0:	4ab3      	ldr	r2, [pc, #716]	@ (8009080 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008db2:	430b      	orrs	r3, r1
 8008db4:	6513      	str	r3, [r2, #80]	@ 0x50
 8008db6:	e003      	b.n	8008dc0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008db8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008dbc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008dc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8008dcc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008dd6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8008dda:	460b      	mov	r3, r1
 8008ddc:	4313      	orrs	r3, r2
 8008dde:	d039      	beq.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008de0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008de4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008de6:	2b03      	cmp	r3, #3
 8008de8:	d81c      	bhi.n	8008e24 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8008dea:	a201      	add	r2, pc, #4	@ (adr r2, 8008df0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8008dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008df0:	08008e2d 	.word	0x08008e2d
 8008df4:	08008e01 	.word	0x08008e01
 8008df8:	08008e0f 	.word	0x08008e0f
 8008dfc:	08008e2d 	.word	0x08008e2d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e00:	4b9f      	ldr	r3, [pc, #636]	@ (8009080 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e04:	4a9e      	ldr	r2, [pc, #632]	@ (8009080 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008e06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008e0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008e0c:	e00f      	b.n	8008e2e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008e0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e12:	3308      	adds	r3, #8
 8008e14:	2102      	movs	r1, #2
 8008e16:	4618      	mov	r0, r3
 8008e18:	f001 f904 	bl	800a024 <RCCEx_PLL2_Config>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008e22:	e004      	b.n	8008e2e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008e24:	2301      	movs	r3, #1
 8008e26:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008e2a:	e000      	b.n	8008e2e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8008e2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e2e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d10a      	bne.n	8008e4c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008e36:	4b92      	ldr	r3, [pc, #584]	@ (8009080 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008e38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e3a:	f023 0103 	bic.w	r1, r3, #3
 8008e3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008e44:	4a8e      	ldr	r2, [pc, #568]	@ (8009080 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008e46:	430b      	orrs	r3, r1
 8008e48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008e4a:	e003      	b.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e4c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008e50:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008e54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e5c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008e60:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008e64:	2300      	movs	r3, #0
 8008e66:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008e6a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8008e6e:	460b      	mov	r3, r1
 8008e70:	4313      	orrs	r3, r2
 8008e72:	f000 8099 	beq.w	8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008e76:	4b83      	ldr	r3, [pc, #524]	@ (8009084 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	4a82      	ldr	r2, [pc, #520]	@ (8009084 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008e7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008e80:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008e82:	f7fa fd63 	bl	800394c <HAL_GetTick>
 8008e86:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008e8a:	e00b      	b.n	8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008e8c:	f7fa fd5e 	bl	800394c <HAL_GetTick>
 8008e90:	4602      	mov	r2, r0
 8008e92:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8008e96:	1ad3      	subs	r3, r2, r3
 8008e98:	2b64      	cmp	r3, #100	@ 0x64
 8008e9a:	d903      	bls.n	8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8008e9c:	2303      	movs	r3, #3
 8008e9e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008ea2:	e005      	b.n	8008eb0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008ea4:	4b77      	ldr	r3, [pc, #476]	@ (8009084 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d0ed      	beq.n	8008e8c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8008eb0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d173      	bne.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008eb8:	4b71      	ldr	r3, [pc, #452]	@ (8009080 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008eba:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008ebc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ec0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008ec4:	4053      	eors	r3, r2
 8008ec6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d015      	beq.n	8008efa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008ece:	4b6c      	ldr	r3, [pc, #432]	@ (8009080 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008ed0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ed2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008ed6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008eda:	4b69      	ldr	r3, [pc, #420]	@ (8009080 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008edc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ede:	4a68      	ldr	r2, [pc, #416]	@ (8009080 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008ee0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008ee4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008ee6:	4b66      	ldr	r3, [pc, #408]	@ (8009080 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008ee8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008eea:	4a65      	ldr	r2, [pc, #404]	@ (8009080 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008eec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008ef0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008ef2:	4a63      	ldr	r2, [pc, #396]	@ (8009080 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008ef4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ef8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008efa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008efe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008f02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f06:	d118      	bne.n	8008f3a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f08:	f7fa fd20 	bl	800394c <HAL_GetTick>
 8008f0c:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008f10:	e00d      	b.n	8008f2e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f12:	f7fa fd1b 	bl	800394c <HAL_GetTick>
 8008f16:	4602      	mov	r2, r0
 8008f18:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8008f1c:	1ad2      	subs	r2, r2, r3
 8008f1e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008f22:	429a      	cmp	r2, r3
 8008f24:	d903      	bls.n	8008f2e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8008f26:	2303      	movs	r3, #3
 8008f28:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8008f2c:	e005      	b.n	8008f3a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008f2e:	4b54      	ldr	r3, [pc, #336]	@ (8009080 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008f30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f32:	f003 0302 	and.w	r3, r3, #2
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d0eb      	beq.n	8008f12 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8008f3a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d129      	bne.n	8008f96 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008f42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f46:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008f4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008f4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008f52:	d10e      	bne.n	8008f72 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8008f54:	4b4a      	ldr	r3, [pc, #296]	@ (8009080 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008f56:	691b      	ldr	r3, [r3, #16]
 8008f58:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8008f5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f60:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008f64:	091a      	lsrs	r2, r3, #4
 8008f66:	4b48      	ldr	r3, [pc, #288]	@ (8009088 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8008f68:	4013      	ands	r3, r2
 8008f6a:	4a45      	ldr	r2, [pc, #276]	@ (8009080 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008f6c:	430b      	orrs	r3, r1
 8008f6e:	6113      	str	r3, [r2, #16]
 8008f70:	e005      	b.n	8008f7e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8008f72:	4b43      	ldr	r3, [pc, #268]	@ (8009080 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008f74:	691b      	ldr	r3, [r3, #16]
 8008f76:	4a42      	ldr	r2, [pc, #264]	@ (8009080 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008f78:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008f7c:	6113      	str	r3, [r2, #16]
 8008f7e:	4b40      	ldr	r3, [pc, #256]	@ (8009080 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008f80:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8008f82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f86:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008f8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f8e:	4a3c      	ldr	r2, [pc, #240]	@ (8009080 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008f90:	430b      	orrs	r3, r1
 8008f92:	6713      	str	r3, [r2, #112]	@ 0x70
 8008f94:	e008      	b.n	8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008f96:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008f9a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8008f9e:	e003      	b.n	8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fa0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008fa4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008fa8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fb0:	f002 0301 	and.w	r3, r2, #1
 8008fb4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008fb8:	2300      	movs	r3, #0
 8008fba:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008fbe:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008fc2:	460b      	mov	r3, r1
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	f000 8090 	beq.w	80090ea <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8008fca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008fd2:	2b28      	cmp	r3, #40	@ 0x28
 8008fd4:	d870      	bhi.n	80090b8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8008fd6:	a201      	add	r2, pc, #4	@ (adr r2, 8008fdc <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8008fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fdc:	080090c1 	.word	0x080090c1
 8008fe0:	080090b9 	.word	0x080090b9
 8008fe4:	080090b9 	.word	0x080090b9
 8008fe8:	080090b9 	.word	0x080090b9
 8008fec:	080090b9 	.word	0x080090b9
 8008ff0:	080090b9 	.word	0x080090b9
 8008ff4:	080090b9 	.word	0x080090b9
 8008ff8:	080090b9 	.word	0x080090b9
 8008ffc:	0800908d 	.word	0x0800908d
 8009000:	080090b9 	.word	0x080090b9
 8009004:	080090b9 	.word	0x080090b9
 8009008:	080090b9 	.word	0x080090b9
 800900c:	080090b9 	.word	0x080090b9
 8009010:	080090b9 	.word	0x080090b9
 8009014:	080090b9 	.word	0x080090b9
 8009018:	080090b9 	.word	0x080090b9
 800901c:	080090a3 	.word	0x080090a3
 8009020:	080090b9 	.word	0x080090b9
 8009024:	080090b9 	.word	0x080090b9
 8009028:	080090b9 	.word	0x080090b9
 800902c:	080090b9 	.word	0x080090b9
 8009030:	080090b9 	.word	0x080090b9
 8009034:	080090b9 	.word	0x080090b9
 8009038:	080090b9 	.word	0x080090b9
 800903c:	080090c1 	.word	0x080090c1
 8009040:	080090b9 	.word	0x080090b9
 8009044:	080090b9 	.word	0x080090b9
 8009048:	080090b9 	.word	0x080090b9
 800904c:	080090b9 	.word	0x080090b9
 8009050:	080090b9 	.word	0x080090b9
 8009054:	080090b9 	.word	0x080090b9
 8009058:	080090b9 	.word	0x080090b9
 800905c:	080090c1 	.word	0x080090c1
 8009060:	080090b9 	.word	0x080090b9
 8009064:	080090b9 	.word	0x080090b9
 8009068:	080090b9 	.word	0x080090b9
 800906c:	080090b9 	.word	0x080090b9
 8009070:	080090b9 	.word	0x080090b9
 8009074:	080090b9 	.word	0x080090b9
 8009078:	080090b9 	.word	0x080090b9
 800907c:	080090c1 	.word	0x080090c1
 8009080:	58024400 	.word	0x58024400
 8009084:	58024800 	.word	0x58024800
 8009088:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800908c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009090:	3308      	adds	r3, #8
 8009092:	2101      	movs	r1, #1
 8009094:	4618      	mov	r0, r3
 8009096:	f000 ffc5 	bl	800a024 <RCCEx_PLL2_Config>
 800909a:	4603      	mov	r3, r0
 800909c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80090a0:	e00f      	b.n	80090c2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80090a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090a6:	3328      	adds	r3, #40	@ 0x28
 80090a8:	2101      	movs	r1, #1
 80090aa:	4618      	mov	r0, r3
 80090ac:	f001 f86c 	bl	800a188 <RCCEx_PLL3_Config>
 80090b0:	4603      	mov	r3, r0
 80090b2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80090b6:	e004      	b.n	80090c2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80090b8:	2301      	movs	r3, #1
 80090ba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80090be:	e000      	b.n	80090c2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80090c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090c2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d10b      	bne.n	80090e2 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80090ca:	4bc0      	ldr	r3, [pc, #768]	@ (80093cc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80090cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090ce:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80090d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80090da:	4abc      	ldr	r2, [pc, #752]	@ (80093cc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80090dc:	430b      	orrs	r3, r1
 80090de:	6553      	str	r3, [r2, #84]	@ 0x54
 80090e0:	e003      	b.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090e2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80090e6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80090ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f2:	f002 0302 	and.w	r3, r2, #2
 80090f6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80090fa:	2300      	movs	r3, #0
 80090fc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009100:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8009104:	460b      	mov	r3, r1
 8009106:	4313      	orrs	r3, r2
 8009108:	d043      	beq.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800910a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800910e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009112:	2b05      	cmp	r3, #5
 8009114:	d824      	bhi.n	8009160 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8009116:	a201      	add	r2, pc, #4	@ (adr r2, 800911c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8009118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800911c:	08009169 	.word	0x08009169
 8009120:	08009135 	.word	0x08009135
 8009124:	0800914b 	.word	0x0800914b
 8009128:	08009169 	.word	0x08009169
 800912c:	08009169 	.word	0x08009169
 8009130:	08009169 	.word	0x08009169
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009134:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009138:	3308      	adds	r3, #8
 800913a:	2101      	movs	r1, #1
 800913c:	4618      	mov	r0, r3
 800913e:	f000 ff71 	bl	800a024 <RCCEx_PLL2_Config>
 8009142:	4603      	mov	r3, r0
 8009144:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009148:	e00f      	b.n	800916a <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800914a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800914e:	3328      	adds	r3, #40	@ 0x28
 8009150:	2101      	movs	r1, #1
 8009152:	4618      	mov	r0, r3
 8009154:	f001 f818 	bl	800a188 <RCCEx_PLL3_Config>
 8009158:	4603      	mov	r3, r0
 800915a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800915e:	e004      	b.n	800916a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009160:	2301      	movs	r3, #1
 8009162:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009166:	e000      	b.n	800916a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8009168:	bf00      	nop
    }

    if (ret == HAL_OK)
 800916a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800916e:	2b00      	cmp	r3, #0
 8009170:	d10b      	bne.n	800918a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009172:	4b96      	ldr	r3, [pc, #600]	@ (80093cc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009174:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009176:	f023 0107 	bic.w	r1, r3, #7
 800917a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800917e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009182:	4a92      	ldr	r2, [pc, #584]	@ (80093cc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009184:	430b      	orrs	r3, r1
 8009186:	6553      	str	r3, [r2, #84]	@ 0x54
 8009188:	e003      	b.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800918a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800918e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009192:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800919a:	f002 0304 	and.w	r3, r2, #4
 800919e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80091a2:	2300      	movs	r3, #0
 80091a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80091a8:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80091ac:	460b      	mov	r3, r1
 80091ae:	4313      	orrs	r3, r2
 80091b0:	d043      	beq.n	800923a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80091b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80091ba:	2b05      	cmp	r3, #5
 80091bc:	d824      	bhi.n	8009208 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80091be:	a201      	add	r2, pc, #4	@ (adr r2, 80091c4 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 80091c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091c4:	08009211 	.word	0x08009211
 80091c8:	080091dd 	.word	0x080091dd
 80091cc:	080091f3 	.word	0x080091f3
 80091d0:	08009211 	.word	0x08009211
 80091d4:	08009211 	.word	0x08009211
 80091d8:	08009211 	.word	0x08009211
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80091dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091e0:	3308      	adds	r3, #8
 80091e2:	2101      	movs	r1, #1
 80091e4:	4618      	mov	r0, r3
 80091e6:	f000 ff1d 	bl	800a024 <RCCEx_PLL2_Config>
 80091ea:	4603      	mov	r3, r0
 80091ec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80091f0:	e00f      	b.n	8009212 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80091f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091f6:	3328      	adds	r3, #40	@ 0x28
 80091f8:	2101      	movs	r1, #1
 80091fa:	4618      	mov	r0, r3
 80091fc:	f000 ffc4 	bl	800a188 <RCCEx_PLL3_Config>
 8009200:	4603      	mov	r3, r0
 8009202:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009206:	e004      	b.n	8009212 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009208:	2301      	movs	r3, #1
 800920a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800920e:	e000      	b.n	8009212 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8009210:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009212:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009216:	2b00      	cmp	r3, #0
 8009218:	d10b      	bne.n	8009232 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800921a:	4b6c      	ldr	r3, [pc, #432]	@ (80093cc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800921c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800921e:	f023 0107 	bic.w	r1, r3, #7
 8009222:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009226:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800922a:	4a68      	ldr	r2, [pc, #416]	@ (80093cc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800922c:	430b      	orrs	r3, r1
 800922e:	6593      	str	r3, [r2, #88]	@ 0x58
 8009230:	e003      	b.n	800923a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009232:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009236:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800923a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800923e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009242:	f002 0320 	and.w	r3, r2, #32
 8009246:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800924a:	2300      	movs	r3, #0
 800924c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009250:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009254:	460b      	mov	r3, r1
 8009256:	4313      	orrs	r3, r2
 8009258:	d055      	beq.n	8009306 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800925a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800925e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009262:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009266:	d033      	beq.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8009268:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800926c:	d82c      	bhi.n	80092c8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800926e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009272:	d02f      	beq.n	80092d4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8009274:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009278:	d826      	bhi.n	80092c8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800927a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800927e:	d02b      	beq.n	80092d8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8009280:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009284:	d820      	bhi.n	80092c8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8009286:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800928a:	d012      	beq.n	80092b2 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800928c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009290:	d81a      	bhi.n	80092c8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8009292:	2b00      	cmp	r3, #0
 8009294:	d022      	beq.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8009296:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800929a:	d115      	bne.n	80092c8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800929c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80092a0:	3308      	adds	r3, #8
 80092a2:	2100      	movs	r1, #0
 80092a4:	4618      	mov	r0, r3
 80092a6:	f000 febd 	bl	800a024 <RCCEx_PLL2_Config>
 80092aa:	4603      	mov	r3, r0
 80092ac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80092b0:	e015      	b.n	80092de <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80092b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80092b6:	3328      	adds	r3, #40	@ 0x28
 80092b8:	2102      	movs	r1, #2
 80092ba:	4618      	mov	r0, r3
 80092bc:	f000 ff64 	bl	800a188 <RCCEx_PLL3_Config>
 80092c0:	4603      	mov	r3, r0
 80092c2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80092c6:	e00a      	b.n	80092de <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80092c8:	2301      	movs	r3, #1
 80092ca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80092ce:	e006      	b.n	80092de <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80092d0:	bf00      	nop
 80092d2:	e004      	b.n	80092de <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80092d4:	bf00      	nop
 80092d6:	e002      	b.n	80092de <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80092d8:	bf00      	nop
 80092da:	e000      	b.n	80092de <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80092dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092de:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d10b      	bne.n	80092fe <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80092e6:	4b39      	ldr	r3, [pc, #228]	@ (80093cc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80092e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092ea:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80092ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80092f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80092f6:	4a35      	ldr	r2, [pc, #212]	@ (80093cc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80092f8:	430b      	orrs	r3, r1
 80092fa:	6553      	str	r3, [r2, #84]	@ 0x54
 80092fc:	e003      	b.n	8009306 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092fe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009302:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009306:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800930a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800930e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8009312:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009316:	2300      	movs	r3, #0
 8009318:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800931c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8009320:	460b      	mov	r3, r1
 8009322:	4313      	orrs	r3, r2
 8009324:	d058      	beq.n	80093d8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009326:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800932a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800932e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009332:	d033      	beq.n	800939c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8009334:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009338:	d82c      	bhi.n	8009394 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800933a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800933e:	d02f      	beq.n	80093a0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8009340:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009344:	d826      	bhi.n	8009394 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8009346:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800934a:	d02b      	beq.n	80093a4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800934c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009350:	d820      	bhi.n	8009394 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8009352:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009356:	d012      	beq.n	800937e <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8009358:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800935c:	d81a      	bhi.n	8009394 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800935e:	2b00      	cmp	r3, #0
 8009360:	d022      	beq.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8009362:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009366:	d115      	bne.n	8009394 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009368:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800936c:	3308      	adds	r3, #8
 800936e:	2100      	movs	r1, #0
 8009370:	4618      	mov	r0, r3
 8009372:	f000 fe57 	bl	800a024 <RCCEx_PLL2_Config>
 8009376:	4603      	mov	r3, r0
 8009378:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800937c:	e015      	b.n	80093aa <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800937e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009382:	3328      	adds	r3, #40	@ 0x28
 8009384:	2102      	movs	r1, #2
 8009386:	4618      	mov	r0, r3
 8009388:	f000 fefe 	bl	800a188 <RCCEx_PLL3_Config>
 800938c:	4603      	mov	r3, r0
 800938e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009392:	e00a      	b.n	80093aa <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009394:	2301      	movs	r3, #1
 8009396:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800939a:	e006      	b.n	80093aa <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800939c:	bf00      	nop
 800939e:	e004      	b.n	80093aa <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80093a0:	bf00      	nop
 80093a2:	e002      	b.n	80093aa <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80093a4:	bf00      	nop
 80093a6:	e000      	b.n	80093aa <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80093a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093aa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d10e      	bne.n	80093d0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80093b2:	4b06      	ldr	r3, [pc, #24]	@ (80093cc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80093b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093b6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80093ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80093be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80093c2:	4a02      	ldr	r2, [pc, #8]	@ (80093cc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80093c4:	430b      	orrs	r3, r1
 80093c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80093c8:	e006      	b.n	80093d8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 80093ca:	bf00      	nop
 80093cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093d0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80093d4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80093d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80093dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093e0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80093e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80093e8:	2300      	movs	r3, #0
 80093ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80093ee:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80093f2:	460b      	mov	r3, r1
 80093f4:	4313      	orrs	r3, r2
 80093f6:	d055      	beq.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80093f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80093fc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009400:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009404:	d033      	beq.n	800946e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8009406:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800940a:	d82c      	bhi.n	8009466 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800940c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009410:	d02f      	beq.n	8009472 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8009412:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009416:	d826      	bhi.n	8009466 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8009418:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800941c:	d02b      	beq.n	8009476 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800941e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009422:	d820      	bhi.n	8009466 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8009424:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009428:	d012      	beq.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800942a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800942e:	d81a      	bhi.n	8009466 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8009430:	2b00      	cmp	r3, #0
 8009432:	d022      	beq.n	800947a <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8009434:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009438:	d115      	bne.n	8009466 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800943a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800943e:	3308      	adds	r3, #8
 8009440:	2100      	movs	r1, #0
 8009442:	4618      	mov	r0, r3
 8009444:	f000 fdee 	bl	800a024 <RCCEx_PLL2_Config>
 8009448:	4603      	mov	r3, r0
 800944a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800944e:	e015      	b.n	800947c <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009450:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009454:	3328      	adds	r3, #40	@ 0x28
 8009456:	2102      	movs	r1, #2
 8009458:	4618      	mov	r0, r3
 800945a:	f000 fe95 	bl	800a188 <RCCEx_PLL3_Config>
 800945e:	4603      	mov	r3, r0
 8009460:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009464:	e00a      	b.n	800947c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009466:	2301      	movs	r3, #1
 8009468:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800946c:	e006      	b.n	800947c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800946e:	bf00      	nop
 8009470:	e004      	b.n	800947c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8009472:	bf00      	nop
 8009474:	e002      	b.n	800947c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8009476:	bf00      	nop
 8009478:	e000      	b.n	800947c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800947a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800947c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009480:	2b00      	cmp	r3, #0
 8009482:	d10b      	bne.n	800949c <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009484:	4ba1      	ldr	r3, [pc, #644]	@ (800970c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009486:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009488:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800948c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009490:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009494:	4a9d      	ldr	r2, [pc, #628]	@ (800970c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009496:	430b      	orrs	r3, r1
 8009498:	6593      	str	r3, [r2, #88]	@ 0x58
 800949a:	e003      	b.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800949c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80094a0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80094a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ac:	f002 0308 	and.w	r3, r2, #8
 80094b0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80094b4:	2300      	movs	r3, #0
 80094b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80094ba:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80094be:	460b      	mov	r3, r1
 80094c0:	4313      	orrs	r3, r2
 80094c2:	d01e      	beq.n	8009502 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80094c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80094cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80094d0:	d10c      	bne.n	80094ec <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80094d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094d6:	3328      	adds	r3, #40	@ 0x28
 80094d8:	2102      	movs	r1, #2
 80094da:	4618      	mov	r0, r3
 80094dc:	f000 fe54 	bl	800a188 <RCCEx_PLL3_Config>
 80094e0:	4603      	mov	r3, r0
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d002      	beq.n	80094ec <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 80094e6:	2301      	movs	r3, #1
 80094e8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80094ec:	4b87      	ldr	r3, [pc, #540]	@ (800970c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80094ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094f0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80094f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80094fc:	4a83      	ldr	r2, [pc, #524]	@ (800970c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80094fe:	430b      	orrs	r3, r1
 8009500:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009502:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800950a:	f002 0310 	and.w	r3, r2, #16
 800950e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009512:	2300      	movs	r3, #0
 8009514:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009518:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800951c:	460b      	mov	r3, r1
 800951e:	4313      	orrs	r3, r2
 8009520:	d01e      	beq.n	8009560 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009522:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009526:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800952a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800952e:	d10c      	bne.n	800954a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009530:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009534:	3328      	adds	r3, #40	@ 0x28
 8009536:	2102      	movs	r1, #2
 8009538:	4618      	mov	r0, r3
 800953a:	f000 fe25 	bl	800a188 <RCCEx_PLL3_Config>
 800953e:	4603      	mov	r3, r0
 8009540:	2b00      	cmp	r3, #0
 8009542:	d002      	beq.n	800954a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8009544:	2301      	movs	r3, #1
 8009546:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800954a:	4b70      	ldr	r3, [pc, #448]	@ (800970c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800954c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800954e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009552:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009556:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800955a:	4a6c      	ldr	r2, [pc, #432]	@ (800970c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800955c:	430b      	orrs	r3, r1
 800955e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009560:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009568:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800956c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009570:	2300      	movs	r3, #0
 8009572:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009576:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800957a:	460b      	mov	r3, r1
 800957c:	4313      	orrs	r3, r2
 800957e:	d03e      	beq.n	80095fe <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009580:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009584:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009588:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800958c:	d022      	beq.n	80095d4 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800958e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009592:	d81b      	bhi.n	80095cc <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8009594:	2b00      	cmp	r3, #0
 8009596:	d003      	beq.n	80095a0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8009598:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800959c:	d00b      	beq.n	80095b6 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800959e:	e015      	b.n	80095cc <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80095a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095a4:	3308      	adds	r3, #8
 80095a6:	2100      	movs	r1, #0
 80095a8:	4618      	mov	r0, r3
 80095aa:	f000 fd3b 	bl	800a024 <RCCEx_PLL2_Config>
 80095ae:	4603      	mov	r3, r0
 80095b0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80095b4:	e00f      	b.n	80095d6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80095b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095ba:	3328      	adds	r3, #40	@ 0x28
 80095bc:	2102      	movs	r1, #2
 80095be:	4618      	mov	r0, r3
 80095c0:	f000 fde2 	bl	800a188 <RCCEx_PLL3_Config>
 80095c4:	4603      	mov	r3, r0
 80095c6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80095ca:	e004      	b.n	80095d6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80095cc:	2301      	movs	r3, #1
 80095ce:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80095d2:	e000      	b.n	80095d6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 80095d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095d6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d10b      	bne.n	80095f6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80095de:	4b4b      	ldr	r3, [pc, #300]	@ (800970c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80095e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095e2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80095e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095ea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80095ee:	4a47      	ldr	r2, [pc, #284]	@ (800970c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80095f0:	430b      	orrs	r3, r1
 80095f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80095f4:	e003      	b.n	80095fe <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095f6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80095fa:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80095fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009606:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800960a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800960c:	2300      	movs	r3, #0
 800960e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009610:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8009614:	460b      	mov	r3, r1
 8009616:	4313      	orrs	r3, r2
 8009618:	d03b      	beq.n	8009692 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800961a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800961e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009622:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009626:	d01f      	beq.n	8009668 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8009628:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800962c:	d818      	bhi.n	8009660 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800962e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009632:	d003      	beq.n	800963c <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8009634:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009638:	d007      	beq.n	800964a <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800963a:	e011      	b.n	8009660 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800963c:	4b33      	ldr	r3, [pc, #204]	@ (800970c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800963e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009640:	4a32      	ldr	r2, [pc, #200]	@ (800970c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009642:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009646:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009648:	e00f      	b.n	800966a <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800964a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800964e:	3328      	adds	r3, #40	@ 0x28
 8009650:	2101      	movs	r1, #1
 8009652:	4618      	mov	r0, r3
 8009654:	f000 fd98 	bl	800a188 <RCCEx_PLL3_Config>
 8009658:	4603      	mov	r3, r0
 800965a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800965e:	e004      	b.n	800966a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009660:	2301      	movs	r3, #1
 8009662:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009666:	e000      	b.n	800966a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8009668:	bf00      	nop
    }

    if (ret == HAL_OK)
 800966a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800966e:	2b00      	cmp	r3, #0
 8009670:	d10b      	bne.n	800968a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009672:	4b26      	ldr	r3, [pc, #152]	@ (800970c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009674:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009676:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800967a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800967e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009682:	4a22      	ldr	r2, [pc, #136]	@ (800970c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009684:	430b      	orrs	r3, r1
 8009686:	6553      	str	r3, [r2, #84]	@ 0x54
 8009688:	e003      	b.n	8009692 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800968a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800968e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009692:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800969a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800969e:	673b      	str	r3, [r7, #112]	@ 0x70
 80096a0:	2300      	movs	r3, #0
 80096a2:	677b      	str	r3, [r7, #116]	@ 0x74
 80096a4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80096a8:	460b      	mov	r3, r1
 80096aa:	4313      	orrs	r3, r2
 80096ac:	d034      	beq.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80096ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d003      	beq.n	80096c0 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 80096b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80096bc:	d007      	beq.n	80096ce <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 80096be:	e011      	b.n	80096e4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096c0:	4b12      	ldr	r3, [pc, #72]	@ (800970c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80096c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096c4:	4a11      	ldr	r2, [pc, #68]	@ (800970c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80096c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80096ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80096cc:	e00e      	b.n	80096ec <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80096ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096d2:	3308      	adds	r3, #8
 80096d4:	2102      	movs	r1, #2
 80096d6:	4618      	mov	r0, r3
 80096d8:	f000 fca4 	bl	800a024 <RCCEx_PLL2_Config>
 80096dc:	4603      	mov	r3, r0
 80096de:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80096e2:	e003      	b.n	80096ec <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 80096e4:	2301      	movs	r3, #1
 80096e6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80096ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80096ec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d10d      	bne.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80096f4:	4b05      	ldr	r3, [pc, #20]	@ (800970c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80096f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80096f8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80096fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009700:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009702:	4a02      	ldr	r2, [pc, #8]	@ (800970c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009704:	430b      	orrs	r3, r1
 8009706:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009708:	e006      	b.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800970a:	bf00      	nop
 800970c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009710:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009714:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009718:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800971c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009720:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8009724:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009726:	2300      	movs	r3, #0
 8009728:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800972a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800972e:	460b      	mov	r3, r1
 8009730:	4313      	orrs	r3, r2
 8009732:	d00c      	beq.n	800974e <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009734:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009738:	3328      	adds	r3, #40	@ 0x28
 800973a:	2102      	movs	r1, #2
 800973c:	4618      	mov	r0, r3
 800973e:	f000 fd23 	bl	800a188 <RCCEx_PLL3_Config>
 8009742:	4603      	mov	r3, r0
 8009744:	2b00      	cmp	r3, #0
 8009746:	d002      	beq.n	800974e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8009748:	2301      	movs	r3, #1
 800974a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800974e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009756:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800975a:	663b      	str	r3, [r7, #96]	@ 0x60
 800975c:	2300      	movs	r3, #0
 800975e:	667b      	str	r3, [r7, #100]	@ 0x64
 8009760:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8009764:	460b      	mov	r3, r1
 8009766:	4313      	orrs	r3, r2
 8009768:	d038      	beq.n	80097dc <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800976a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800976e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009772:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009776:	d018      	beq.n	80097aa <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8009778:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800977c:	d811      	bhi.n	80097a2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800977e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009782:	d014      	beq.n	80097ae <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8009784:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009788:	d80b      	bhi.n	80097a2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800978a:	2b00      	cmp	r3, #0
 800978c:	d011      	beq.n	80097b2 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800978e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009792:	d106      	bne.n	80097a2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009794:	4bc3      	ldr	r3, [pc, #780]	@ (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009798:	4ac2      	ldr	r2, [pc, #776]	@ (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800979a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800979e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80097a0:	e008      	b.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80097a2:	2301      	movs	r3, #1
 80097a4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80097a8:	e004      	b.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80097aa:	bf00      	nop
 80097ac:	e002      	b.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80097ae:	bf00      	nop
 80097b0:	e000      	b.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80097b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097b4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d10b      	bne.n	80097d4 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80097bc:	4bb9      	ldr	r3, [pc, #740]	@ (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80097be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097c0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80097c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80097c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097cc:	4ab5      	ldr	r2, [pc, #724]	@ (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80097ce:	430b      	orrs	r3, r1
 80097d0:	6553      	str	r3, [r2, #84]	@ 0x54
 80097d2:	e003      	b.n	80097dc <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097d4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80097d8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80097dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80097e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097e4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80097e8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80097ea:	2300      	movs	r3, #0
 80097ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80097ee:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80097f2:	460b      	mov	r3, r1
 80097f4:	4313      	orrs	r3, r2
 80097f6:	d009      	beq.n	800980c <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80097f8:	4baa      	ldr	r3, [pc, #680]	@ (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80097fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80097fc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009800:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009804:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009806:	4aa7      	ldr	r2, [pc, #668]	@ (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009808:	430b      	orrs	r3, r1
 800980a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800980c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009814:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8009818:	653b      	str	r3, [r7, #80]	@ 0x50
 800981a:	2300      	movs	r3, #0
 800981c:	657b      	str	r3, [r7, #84]	@ 0x54
 800981e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8009822:	460b      	mov	r3, r1
 8009824:	4313      	orrs	r3, r2
 8009826:	d009      	beq.n	800983c <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009828:	4b9e      	ldr	r3, [pc, #632]	@ (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800982a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800982c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8009830:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009834:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009836:	4a9b      	ldr	r2, [pc, #620]	@ (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009838:	430b      	orrs	r3, r1
 800983a:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800983c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009844:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8009848:	64bb      	str	r3, [r7, #72]	@ 0x48
 800984a:	2300      	movs	r3, #0
 800984c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800984e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8009852:	460b      	mov	r3, r1
 8009854:	4313      	orrs	r3, r2
 8009856:	d009      	beq.n	800986c <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8009858:	4b92      	ldr	r3, [pc, #584]	@ (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800985a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800985c:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8009860:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009864:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009866:	4a8f      	ldr	r2, [pc, #572]	@ (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009868:	430b      	orrs	r3, r1
 800986a:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800986c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009874:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8009878:	643b      	str	r3, [r7, #64]	@ 0x40
 800987a:	2300      	movs	r3, #0
 800987c:	647b      	str	r3, [r7, #68]	@ 0x44
 800987e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009882:	460b      	mov	r3, r1
 8009884:	4313      	orrs	r3, r2
 8009886:	d00e      	beq.n	80098a6 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009888:	4b86      	ldr	r3, [pc, #536]	@ (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800988a:	691b      	ldr	r3, [r3, #16]
 800988c:	4a85      	ldr	r2, [pc, #532]	@ (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800988e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009892:	6113      	str	r3, [r2, #16]
 8009894:	4b83      	ldr	r3, [pc, #524]	@ (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009896:	6919      	ldr	r1, [r3, #16]
 8009898:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800989c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80098a0:	4a80      	ldr	r2, [pc, #512]	@ (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80098a2:	430b      	orrs	r3, r1
 80098a4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80098a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ae:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80098b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80098b4:	2300      	movs	r3, #0
 80098b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80098b8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80098bc:	460b      	mov	r3, r1
 80098be:	4313      	orrs	r3, r2
 80098c0:	d009      	beq.n	80098d6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80098c2:	4b78      	ldr	r3, [pc, #480]	@ (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80098c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80098c6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80098ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098d0:	4a74      	ldr	r2, [pc, #464]	@ (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80098d2:	430b      	orrs	r3, r1
 80098d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80098d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098de:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80098e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80098e4:	2300      	movs	r3, #0
 80098e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80098e8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80098ec:	460b      	mov	r3, r1
 80098ee:	4313      	orrs	r3, r2
 80098f0:	d00a      	beq.n	8009908 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80098f2:	4b6c      	ldr	r3, [pc, #432]	@ (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80098f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098f6:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80098fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009902:	4a68      	ldr	r2, [pc, #416]	@ (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009904:	430b      	orrs	r3, r1
 8009906:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009908:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800990c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009910:	2100      	movs	r1, #0
 8009912:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009914:	f003 0301 	and.w	r3, r3, #1
 8009918:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800991a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800991e:	460b      	mov	r3, r1
 8009920:	4313      	orrs	r3, r2
 8009922:	d011      	beq.n	8009948 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009924:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009928:	3308      	adds	r3, #8
 800992a:	2100      	movs	r1, #0
 800992c:	4618      	mov	r0, r3
 800992e:	f000 fb79 	bl	800a024 <RCCEx_PLL2_Config>
 8009932:	4603      	mov	r3, r0
 8009934:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009938:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800993c:	2b00      	cmp	r3, #0
 800993e:	d003      	beq.n	8009948 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009940:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009944:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009948:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800994c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009950:	2100      	movs	r1, #0
 8009952:	6239      	str	r1, [r7, #32]
 8009954:	f003 0302 	and.w	r3, r3, #2
 8009958:	627b      	str	r3, [r7, #36]	@ 0x24
 800995a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800995e:	460b      	mov	r3, r1
 8009960:	4313      	orrs	r3, r2
 8009962:	d011      	beq.n	8009988 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009964:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009968:	3308      	adds	r3, #8
 800996a:	2101      	movs	r1, #1
 800996c:	4618      	mov	r0, r3
 800996e:	f000 fb59 	bl	800a024 <RCCEx_PLL2_Config>
 8009972:	4603      	mov	r3, r0
 8009974:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009978:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800997c:	2b00      	cmp	r3, #0
 800997e:	d003      	beq.n	8009988 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009980:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009984:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009988:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800998c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009990:	2100      	movs	r1, #0
 8009992:	61b9      	str	r1, [r7, #24]
 8009994:	f003 0304 	and.w	r3, r3, #4
 8009998:	61fb      	str	r3, [r7, #28]
 800999a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800999e:	460b      	mov	r3, r1
 80099a0:	4313      	orrs	r3, r2
 80099a2:	d011      	beq.n	80099c8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80099a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099a8:	3308      	adds	r3, #8
 80099aa:	2102      	movs	r1, #2
 80099ac:	4618      	mov	r0, r3
 80099ae:	f000 fb39 	bl	800a024 <RCCEx_PLL2_Config>
 80099b2:	4603      	mov	r3, r0
 80099b4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80099b8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d003      	beq.n	80099c8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099c0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80099c4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80099c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099d0:	2100      	movs	r1, #0
 80099d2:	6139      	str	r1, [r7, #16]
 80099d4:	f003 0308 	and.w	r3, r3, #8
 80099d8:	617b      	str	r3, [r7, #20]
 80099da:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80099de:	460b      	mov	r3, r1
 80099e0:	4313      	orrs	r3, r2
 80099e2:	d011      	beq.n	8009a08 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80099e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099e8:	3328      	adds	r3, #40	@ 0x28
 80099ea:	2100      	movs	r1, #0
 80099ec:	4618      	mov	r0, r3
 80099ee:	f000 fbcb 	bl	800a188 <RCCEx_PLL3_Config>
 80099f2:	4603      	mov	r3, r0
 80099f4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 80099f8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d003      	beq.n	8009a08 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a00:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009a04:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009a08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a10:	2100      	movs	r1, #0
 8009a12:	60b9      	str	r1, [r7, #8]
 8009a14:	f003 0310 	and.w	r3, r3, #16
 8009a18:	60fb      	str	r3, [r7, #12]
 8009a1a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009a1e:	460b      	mov	r3, r1
 8009a20:	4313      	orrs	r3, r2
 8009a22:	d011      	beq.n	8009a48 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009a24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a28:	3328      	adds	r3, #40	@ 0x28
 8009a2a:	2101      	movs	r1, #1
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f000 fbab 	bl	800a188 <RCCEx_PLL3_Config>
 8009a32:	4603      	mov	r3, r0
 8009a34:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009a38:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d003      	beq.n	8009a48 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a40:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009a44:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009a48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a50:	2100      	movs	r1, #0
 8009a52:	6039      	str	r1, [r7, #0]
 8009a54:	f003 0320 	and.w	r3, r3, #32
 8009a58:	607b      	str	r3, [r7, #4]
 8009a5a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009a5e:	460b      	mov	r3, r1
 8009a60:	4313      	orrs	r3, r2
 8009a62:	d011      	beq.n	8009a88 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009a64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a68:	3328      	adds	r3, #40	@ 0x28
 8009a6a:	2102      	movs	r1, #2
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f000 fb8b 	bl	800a188 <RCCEx_PLL3_Config>
 8009a72:	4603      	mov	r3, r0
 8009a74:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009a78:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d003      	beq.n	8009a88 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a80:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009a84:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8009a88:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d101      	bne.n	8009a94 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8009a90:	2300      	movs	r3, #0
 8009a92:	e000      	b.n	8009a96 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8009a94:	2301      	movs	r3, #1
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009aa2:	bf00      	nop
 8009aa4:	58024400 	.word	0x58024400

08009aa8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8009aac:	f7fe fde2 	bl	8008674 <HAL_RCC_GetHCLKFreq>
 8009ab0:	4602      	mov	r2, r0
 8009ab2:	4b06      	ldr	r3, [pc, #24]	@ (8009acc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009ab4:	6a1b      	ldr	r3, [r3, #32]
 8009ab6:	091b      	lsrs	r3, r3, #4
 8009ab8:	f003 0307 	and.w	r3, r3, #7
 8009abc:	4904      	ldr	r1, [pc, #16]	@ (8009ad0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009abe:	5ccb      	ldrb	r3, [r1, r3]
 8009ac0:	f003 031f 	and.w	r3, r3, #31
 8009ac4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	bd80      	pop	{r7, pc}
 8009acc:	58024400 	.word	0x58024400
 8009ad0:	08013090 	.word	0x08013090

08009ad4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b089      	sub	sp, #36	@ 0x24
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009adc:	4ba1      	ldr	r3, [pc, #644]	@ (8009d64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ae0:	f003 0303 	and.w	r3, r3, #3
 8009ae4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009ae6:	4b9f      	ldr	r3, [pc, #636]	@ (8009d64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009aea:	0b1b      	lsrs	r3, r3, #12
 8009aec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009af0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009af2:	4b9c      	ldr	r3, [pc, #624]	@ (8009d64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009af6:	091b      	lsrs	r3, r3, #4
 8009af8:	f003 0301 	and.w	r3, r3, #1
 8009afc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009afe:	4b99      	ldr	r3, [pc, #612]	@ (8009d64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b02:	08db      	lsrs	r3, r3, #3
 8009b04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009b08:	693a      	ldr	r2, [r7, #16]
 8009b0a:	fb02 f303 	mul.w	r3, r2, r3
 8009b0e:	ee07 3a90 	vmov	s15, r3
 8009b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b16:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009b1a:	697b      	ldr	r3, [r7, #20]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	f000 8111 	beq.w	8009d44 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009b22:	69bb      	ldr	r3, [r7, #24]
 8009b24:	2b02      	cmp	r3, #2
 8009b26:	f000 8083 	beq.w	8009c30 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009b2a:	69bb      	ldr	r3, [r7, #24]
 8009b2c:	2b02      	cmp	r3, #2
 8009b2e:	f200 80a1 	bhi.w	8009c74 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009b32:	69bb      	ldr	r3, [r7, #24]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d003      	beq.n	8009b40 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009b38:	69bb      	ldr	r3, [r7, #24]
 8009b3a:	2b01      	cmp	r3, #1
 8009b3c:	d056      	beq.n	8009bec <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009b3e:	e099      	b.n	8009c74 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b40:	4b88      	ldr	r3, [pc, #544]	@ (8009d64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f003 0320 	and.w	r3, r3, #32
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d02d      	beq.n	8009ba8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009b4c:	4b85      	ldr	r3, [pc, #532]	@ (8009d64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	08db      	lsrs	r3, r3, #3
 8009b52:	f003 0303 	and.w	r3, r3, #3
 8009b56:	4a84      	ldr	r2, [pc, #528]	@ (8009d68 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009b58:	fa22 f303 	lsr.w	r3, r2, r3
 8009b5c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009b5e:	68bb      	ldr	r3, [r7, #8]
 8009b60:	ee07 3a90 	vmov	s15, r3
 8009b64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b68:	697b      	ldr	r3, [r7, #20]
 8009b6a:	ee07 3a90 	vmov	s15, r3
 8009b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b76:	4b7b      	ldr	r3, [pc, #492]	@ (8009d64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b7e:	ee07 3a90 	vmov	s15, r3
 8009b82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b86:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b8a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009d6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009b8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ba2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009ba6:	e087      	b.n	8009cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	ee07 3a90 	vmov	s15, r3
 8009bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bb2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009d70 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009bb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bba:	4b6a      	ldr	r3, [pc, #424]	@ (8009d64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bc2:	ee07 3a90 	vmov	s15, r3
 8009bc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bca:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bce:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009d6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009bd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009bde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009be2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009be6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009bea:	e065      	b.n	8009cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009bec:	697b      	ldr	r3, [r7, #20]
 8009bee:	ee07 3a90 	vmov	s15, r3
 8009bf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bf6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009d74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009bfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bfe:	4b59      	ldr	r3, [pc, #356]	@ (8009d64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c06:	ee07 3a90 	vmov	s15, r3
 8009c0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c12:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009d6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009c16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c2e:	e043      	b.n	8009cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009c30:	697b      	ldr	r3, [r7, #20]
 8009c32:	ee07 3a90 	vmov	s15, r3
 8009c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c3a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009d78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009c3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c42:	4b48      	ldr	r3, [pc, #288]	@ (8009d64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c4a:	ee07 3a90 	vmov	s15, r3
 8009c4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c52:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c56:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009d6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009c5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c72:	e021      	b.n	8009cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009c74:	697b      	ldr	r3, [r7, #20]
 8009c76:	ee07 3a90 	vmov	s15, r3
 8009c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c7e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009d74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009c82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c86:	4b37      	ldr	r3, [pc, #220]	@ (8009d64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c8e:	ee07 3a90 	vmov	s15, r3
 8009c92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c96:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c9a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009d6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009c9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ca2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ca6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009caa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009cb6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009cb8:	4b2a      	ldr	r3, [pc, #168]	@ (8009d64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009cba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cbc:	0a5b      	lsrs	r3, r3, #9
 8009cbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009cc2:	ee07 3a90 	vmov	s15, r3
 8009cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009cce:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009cd2:	edd7 6a07 	vldr	s13, [r7, #28]
 8009cd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009cda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009cde:	ee17 2a90 	vmov	r2, s15
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009ce6:	4b1f      	ldr	r3, [pc, #124]	@ (8009d64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ce8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cea:	0c1b      	lsrs	r3, r3, #16
 8009cec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009cf0:	ee07 3a90 	vmov	s15, r3
 8009cf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cf8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009cfc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d00:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d0c:	ee17 2a90 	vmov	r2, s15
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009d14:	4b13      	ldr	r3, [pc, #76]	@ (8009d64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d18:	0e1b      	lsrs	r3, r3, #24
 8009d1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d1e:	ee07 3a90 	vmov	s15, r3
 8009d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009d2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d3a:	ee17 2a90 	vmov	r2, s15
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009d42:	e008      	b.n	8009d56 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2200      	movs	r2, #0
 8009d48:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2200      	movs	r2, #0
 8009d54:	609a      	str	r2, [r3, #8]
}
 8009d56:	bf00      	nop
 8009d58:	3724      	adds	r7, #36	@ 0x24
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d60:	4770      	bx	lr
 8009d62:	bf00      	nop
 8009d64:	58024400 	.word	0x58024400
 8009d68:	03d09000 	.word	0x03d09000
 8009d6c:	46000000 	.word	0x46000000
 8009d70:	4c742400 	.word	0x4c742400
 8009d74:	4a742400 	.word	0x4a742400
 8009d78:	4bb71b00 	.word	0x4bb71b00

08009d7c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009d7c:	b480      	push	{r7}
 8009d7e:	b089      	sub	sp, #36	@ 0x24
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009d84:	4ba1      	ldr	r3, [pc, #644]	@ (800a00c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d88:	f003 0303 	and.w	r3, r3, #3
 8009d8c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009d8e:	4b9f      	ldr	r3, [pc, #636]	@ (800a00c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d92:	0d1b      	lsrs	r3, r3, #20
 8009d94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009d98:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009d9a:	4b9c      	ldr	r3, [pc, #624]	@ (800a00c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d9e:	0a1b      	lsrs	r3, r3, #8
 8009da0:	f003 0301 	and.w	r3, r3, #1
 8009da4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009da6:	4b99      	ldr	r3, [pc, #612]	@ (800a00c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009daa:	08db      	lsrs	r3, r3, #3
 8009dac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009db0:	693a      	ldr	r2, [r7, #16]
 8009db2:	fb02 f303 	mul.w	r3, r2, r3
 8009db6:	ee07 3a90 	vmov	s15, r3
 8009dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dbe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	f000 8111 	beq.w	8009fec <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009dca:	69bb      	ldr	r3, [r7, #24]
 8009dcc:	2b02      	cmp	r3, #2
 8009dce:	f000 8083 	beq.w	8009ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009dd2:	69bb      	ldr	r3, [r7, #24]
 8009dd4:	2b02      	cmp	r3, #2
 8009dd6:	f200 80a1 	bhi.w	8009f1c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009dda:	69bb      	ldr	r3, [r7, #24]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d003      	beq.n	8009de8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009de0:	69bb      	ldr	r3, [r7, #24]
 8009de2:	2b01      	cmp	r3, #1
 8009de4:	d056      	beq.n	8009e94 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009de6:	e099      	b.n	8009f1c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009de8:	4b88      	ldr	r3, [pc, #544]	@ (800a00c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	f003 0320 	and.w	r3, r3, #32
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d02d      	beq.n	8009e50 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009df4:	4b85      	ldr	r3, [pc, #532]	@ (800a00c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	08db      	lsrs	r3, r3, #3
 8009dfa:	f003 0303 	and.w	r3, r3, #3
 8009dfe:	4a84      	ldr	r2, [pc, #528]	@ (800a010 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009e00:	fa22 f303 	lsr.w	r3, r2, r3
 8009e04:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	ee07 3a90 	vmov	s15, r3
 8009e0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e10:	697b      	ldr	r3, [r7, #20]
 8009e12:	ee07 3a90 	vmov	s15, r3
 8009e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e1e:	4b7b      	ldr	r3, [pc, #492]	@ (800a00c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e26:	ee07 3a90 	vmov	s15, r3
 8009e2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e32:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a014 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009e36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009e42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e4a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009e4e:	e087      	b.n	8009f60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009e50:	697b      	ldr	r3, [r7, #20]
 8009e52:	ee07 3a90 	vmov	s15, r3
 8009e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e5a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a018 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009e5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e62:	4b6a      	ldr	r3, [pc, #424]	@ (800a00c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e6a:	ee07 3a90 	vmov	s15, r3
 8009e6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e72:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e76:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a014 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009e7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009e86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e92:	e065      	b.n	8009f60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009e94:	697b      	ldr	r3, [r7, #20]
 8009e96:	ee07 3a90 	vmov	s15, r3
 8009e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e9e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a01c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009ea2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ea6:	4b59      	ldr	r3, [pc, #356]	@ (800a00c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009eaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009eae:	ee07 3a90 	vmov	s15, r3
 8009eb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009eb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009eba:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a014 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009ebe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ec2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ec6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009eca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ece:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ed2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009ed6:	e043      	b.n	8009f60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009ed8:	697b      	ldr	r3, [r7, #20]
 8009eda:	ee07 3a90 	vmov	s15, r3
 8009ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ee2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a020 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009ee6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009eea:	4b48      	ldr	r3, [pc, #288]	@ (800a00c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009eee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ef2:	ee07 3a90 	vmov	s15, r3
 8009ef6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009efa:	ed97 6a03 	vldr	s12, [r7, #12]
 8009efe:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a014 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009f02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009f0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009f1a:	e021      	b.n	8009f60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	ee07 3a90 	vmov	s15, r3
 8009f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f26:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a01c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009f2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f2e:	4b37      	ldr	r3, [pc, #220]	@ (800a00c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f36:	ee07 3a90 	vmov	s15, r3
 8009f3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f42:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a014 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009f46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009f52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009f5e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009f60:	4b2a      	ldr	r3, [pc, #168]	@ (800a00c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f64:	0a5b      	lsrs	r3, r3, #9
 8009f66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f6a:	ee07 3a90 	vmov	s15, r3
 8009f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f72:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009f76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f86:	ee17 2a90 	vmov	r2, s15
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009f8e:	4b1f      	ldr	r3, [pc, #124]	@ (800a00c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f92:	0c1b      	lsrs	r3, r3, #16
 8009f94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f98:	ee07 3a90 	vmov	s15, r3
 8009f9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fa0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009fa4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009fa8:	edd7 6a07 	vldr	s13, [r7, #28]
 8009fac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009fb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009fb4:	ee17 2a90 	vmov	r2, s15
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009fbc:	4b13      	ldr	r3, [pc, #76]	@ (800a00c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fc0:	0e1b      	lsrs	r3, r3, #24
 8009fc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009fc6:	ee07 3a90 	vmov	s15, r3
 8009fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009fd2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009fd6:	edd7 6a07 	vldr	s13, [r7, #28]
 8009fda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009fde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009fe2:	ee17 2a90 	vmov	r2, s15
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009fea:	e008      	b.n	8009ffe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	609a      	str	r2, [r3, #8]
}
 8009ffe:	bf00      	nop
 800a000:	3724      	adds	r7, #36	@ 0x24
 800a002:	46bd      	mov	sp, r7
 800a004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a008:	4770      	bx	lr
 800a00a:	bf00      	nop
 800a00c:	58024400 	.word	0x58024400
 800a010:	03d09000 	.word	0x03d09000
 800a014:	46000000 	.word	0x46000000
 800a018:	4c742400 	.word	0x4c742400
 800a01c:	4a742400 	.word	0x4a742400
 800a020:	4bb71b00 	.word	0x4bb71b00

0800a024 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b084      	sub	sp, #16
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
 800a02c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a02e:	2300      	movs	r3, #0
 800a030:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a032:	4b53      	ldr	r3, [pc, #332]	@ (800a180 <RCCEx_PLL2_Config+0x15c>)
 800a034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a036:	f003 0303 	and.w	r3, r3, #3
 800a03a:	2b03      	cmp	r3, #3
 800a03c:	d101      	bne.n	800a042 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a03e:	2301      	movs	r3, #1
 800a040:	e099      	b.n	800a176 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a042:	4b4f      	ldr	r3, [pc, #316]	@ (800a180 <RCCEx_PLL2_Config+0x15c>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	4a4e      	ldr	r2, [pc, #312]	@ (800a180 <RCCEx_PLL2_Config+0x15c>)
 800a048:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a04c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a04e:	f7f9 fc7d 	bl	800394c <HAL_GetTick>
 800a052:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a054:	e008      	b.n	800a068 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a056:	f7f9 fc79 	bl	800394c <HAL_GetTick>
 800a05a:	4602      	mov	r2, r0
 800a05c:	68bb      	ldr	r3, [r7, #8]
 800a05e:	1ad3      	subs	r3, r2, r3
 800a060:	2b02      	cmp	r3, #2
 800a062:	d901      	bls.n	800a068 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a064:	2303      	movs	r3, #3
 800a066:	e086      	b.n	800a176 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a068:	4b45      	ldr	r3, [pc, #276]	@ (800a180 <RCCEx_PLL2_Config+0x15c>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a070:	2b00      	cmp	r3, #0
 800a072:	d1f0      	bne.n	800a056 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a074:	4b42      	ldr	r3, [pc, #264]	@ (800a180 <RCCEx_PLL2_Config+0x15c>)
 800a076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a078:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	031b      	lsls	r3, r3, #12
 800a082:	493f      	ldr	r1, [pc, #252]	@ (800a180 <RCCEx_PLL2_Config+0x15c>)
 800a084:	4313      	orrs	r3, r2
 800a086:	628b      	str	r3, [r1, #40]	@ 0x28
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	685b      	ldr	r3, [r3, #4]
 800a08c:	3b01      	subs	r3, #1
 800a08e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	689b      	ldr	r3, [r3, #8]
 800a096:	3b01      	subs	r3, #1
 800a098:	025b      	lsls	r3, r3, #9
 800a09a:	b29b      	uxth	r3, r3
 800a09c:	431a      	orrs	r2, r3
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	68db      	ldr	r3, [r3, #12]
 800a0a2:	3b01      	subs	r3, #1
 800a0a4:	041b      	lsls	r3, r3, #16
 800a0a6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a0aa:	431a      	orrs	r2, r3
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	691b      	ldr	r3, [r3, #16]
 800a0b0:	3b01      	subs	r3, #1
 800a0b2:	061b      	lsls	r3, r3, #24
 800a0b4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a0b8:	4931      	ldr	r1, [pc, #196]	@ (800a180 <RCCEx_PLL2_Config+0x15c>)
 800a0ba:	4313      	orrs	r3, r2
 800a0bc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a0be:	4b30      	ldr	r3, [pc, #192]	@ (800a180 <RCCEx_PLL2_Config+0x15c>)
 800a0c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0c2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	695b      	ldr	r3, [r3, #20]
 800a0ca:	492d      	ldr	r1, [pc, #180]	@ (800a180 <RCCEx_PLL2_Config+0x15c>)
 800a0cc:	4313      	orrs	r3, r2
 800a0ce:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a0d0:	4b2b      	ldr	r3, [pc, #172]	@ (800a180 <RCCEx_PLL2_Config+0x15c>)
 800a0d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0d4:	f023 0220 	bic.w	r2, r3, #32
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	699b      	ldr	r3, [r3, #24]
 800a0dc:	4928      	ldr	r1, [pc, #160]	@ (800a180 <RCCEx_PLL2_Config+0x15c>)
 800a0de:	4313      	orrs	r3, r2
 800a0e0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a0e2:	4b27      	ldr	r3, [pc, #156]	@ (800a180 <RCCEx_PLL2_Config+0x15c>)
 800a0e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0e6:	4a26      	ldr	r2, [pc, #152]	@ (800a180 <RCCEx_PLL2_Config+0x15c>)
 800a0e8:	f023 0310 	bic.w	r3, r3, #16
 800a0ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a0ee:	4b24      	ldr	r3, [pc, #144]	@ (800a180 <RCCEx_PLL2_Config+0x15c>)
 800a0f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a0f2:	4b24      	ldr	r3, [pc, #144]	@ (800a184 <RCCEx_PLL2_Config+0x160>)
 800a0f4:	4013      	ands	r3, r2
 800a0f6:	687a      	ldr	r2, [r7, #4]
 800a0f8:	69d2      	ldr	r2, [r2, #28]
 800a0fa:	00d2      	lsls	r2, r2, #3
 800a0fc:	4920      	ldr	r1, [pc, #128]	@ (800a180 <RCCEx_PLL2_Config+0x15c>)
 800a0fe:	4313      	orrs	r3, r2
 800a100:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a102:	4b1f      	ldr	r3, [pc, #124]	@ (800a180 <RCCEx_PLL2_Config+0x15c>)
 800a104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a106:	4a1e      	ldr	r2, [pc, #120]	@ (800a180 <RCCEx_PLL2_Config+0x15c>)
 800a108:	f043 0310 	orr.w	r3, r3, #16
 800a10c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d106      	bne.n	800a122 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a114:	4b1a      	ldr	r3, [pc, #104]	@ (800a180 <RCCEx_PLL2_Config+0x15c>)
 800a116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a118:	4a19      	ldr	r2, [pc, #100]	@ (800a180 <RCCEx_PLL2_Config+0x15c>)
 800a11a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a11e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a120:	e00f      	b.n	800a142 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	2b01      	cmp	r3, #1
 800a126:	d106      	bne.n	800a136 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a128:	4b15      	ldr	r3, [pc, #84]	@ (800a180 <RCCEx_PLL2_Config+0x15c>)
 800a12a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a12c:	4a14      	ldr	r2, [pc, #80]	@ (800a180 <RCCEx_PLL2_Config+0x15c>)
 800a12e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a132:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a134:	e005      	b.n	800a142 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a136:	4b12      	ldr	r3, [pc, #72]	@ (800a180 <RCCEx_PLL2_Config+0x15c>)
 800a138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a13a:	4a11      	ldr	r2, [pc, #68]	@ (800a180 <RCCEx_PLL2_Config+0x15c>)
 800a13c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a140:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a142:	4b0f      	ldr	r3, [pc, #60]	@ (800a180 <RCCEx_PLL2_Config+0x15c>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	4a0e      	ldr	r2, [pc, #56]	@ (800a180 <RCCEx_PLL2_Config+0x15c>)
 800a148:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a14c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a14e:	f7f9 fbfd 	bl	800394c <HAL_GetTick>
 800a152:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a154:	e008      	b.n	800a168 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a156:	f7f9 fbf9 	bl	800394c <HAL_GetTick>
 800a15a:	4602      	mov	r2, r0
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	1ad3      	subs	r3, r2, r3
 800a160:	2b02      	cmp	r3, #2
 800a162:	d901      	bls.n	800a168 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a164:	2303      	movs	r3, #3
 800a166:	e006      	b.n	800a176 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a168:	4b05      	ldr	r3, [pc, #20]	@ (800a180 <RCCEx_PLL2_Config+0x15c>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a170:	2b00      	cmp	r3, #0
 800a172:	d0f0      	beq.n	800a156 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a174:	7bfb      	ldrb	r3, [r7, #15]
}
 800a176:	4618      	mov	r0, r3
 800a178:	3710      	adds	r7, #16
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd80      	pop	{r7, pc}
 800a17e:	bf00      	nop
 800a180:	58024400 	.word	0x58024400
 800a184:	ffff0007 	.word	0xffff0007

0800a188 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b084      	sub	sp, #16
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
 800a190:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a192:	2300      	movs	r3, #0
 800a194:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a196:	4b53      	ldr	r3, [pc, #332]	@ (800a2e4 <RCCEx_PLL3_Config+0x15c>)
 800a198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a19a:	f003 0303 	and.w	r3, r3, #3
 800a19e:	2b03      	cmp	r3, #3
 800a1a0:	d101      	bne.n	800a1a6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	e099      	b.n	800a2da <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a1a6:	4b4f      	ldr	r3, [pc, #316]	@ (800a2e4 <RCCEx_PLL3_Config+0x15c>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	4a4e      	ldr	r2, [pc, #312]	@ (800a2e4 <RCCEx_PLL3_Config+0x15c>)
 800a1ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a1b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a1b2:	f7f9 fbcb 	bl	800394c <HAL_GetTick>
 800a1b6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a1b8:	e008      	b.n	800a1cc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a1ba:	f7f9 fbc7 	bl	800394c <HAL_GetTick>
 800a1be:	4602      	mov	r2, r0
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	1ad3      	subs	r3, r2, r3
 800a1c4:	2b02      	cmp	r3, #2
 800a1c6:	d901      	bls.n	800a1cc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a1c8:	2303      	movs	r3, #3
 800a1ca:	e086      	b.n	800a2da <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a1cc:	4b45      	ldr	r3, [pc, #276]	@ (800a2e4 <RCCEx_PLL3_Config+0x15c>)
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d1f0      	bne.n	800a1ba <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a1d8:	4b42      	ldr	r3, [pc, #264]	@ (800a2e4 <RCCEx_PLL3_Config+0x15c>)
 800a1da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1dc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	051b      	lsls	r3, r3, #20
 800a1e6:	493f      	ldr	r1, [pc, #252]	@ (800a2e4 <RCCEx_PLL3_Config+0x15c>)
 800a1e8:	4313      	orrs	r3, r2
 800a1ea:	628b      	str	r3, [r1, #40]	@ 0x28
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	685b      	ldr	r3, [r3, #4]
 800a1f0:	3b01      	subs	r3, #1
 800a1f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	689b      	ldr	r3, [r3, #8]
 800a1fa:	3b01      	subs	r3, #1
 800a1fc:	025b      	lsls	r3, r3, #9
 800a1fe:	b29b      	uxth	r3, r3
 800a200:	431a      	orrs	r2, r3
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	68db      	ldr	r3, [r3, #12]
 800a206:	3b01      	subs	r3, #1
 800a208:	041b      	lsls	r3, r3, #16
 800a20a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a20e:	431a      	orrs	r2, r3
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	691b      	ldr	r3, [r3, #16]
 800a214:	3b01      	subs	r3, #1
 800a216:	061b      	lsls	r3, r3, #24
 800a218:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a21c:	4931      	ldr	r1, [pc, #196]	@ (800a2e4 <RCCEx_PLL3_Config+0x15c>)
 800a21e:	4313      	orrs	r3, r2
 800a220:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a222:	4b30      	ldr	r3, [pc, #192]	@ (800a2e4 <RCCEx_PLL3_Config+0x15c>)
 800a224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a226:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	695b      	ldr	r3, [r3, #20]
 800a22e:	492d      	ldr	r1, [pc, #180]	@ (800a2e4 <RCCEx_PLL3_Config+0x15c>)
 800a230:	4313      	orrs	r3, r2
 800a232:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a234:	4b2b      	ldr	r3, [pc, #172]	@ (800a2e4 <RCCEx_PLL3_Config+0x15c>)
 800a236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a238:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	699b      	ldr	r3, [r3, #24]
 800a240:	4928      	ldr	r1, [pc, #160]	@ (800a2e4 <RCCEx_PLL3_Config+0x15c>)
 800a242:	4313      	orrs	r3, r2
 800a244:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a246:	4b27      	ldr	r3, [pc, #156]	@ (800a2e4 <RCCEx_PLL3_Config+0x15c>)
 800a248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a24a:	4a26      	ldr	r2, [pc, #152]	@ (800a2e4 <RCCEx_PLL3_Config+0x15c>)
 800a24c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a250:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a252:	4b24      	ldr	r3, [pc, #144]	@ (800a2e4 <RCCEx_PLL3_Config+0x15c>)
 800a254:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a256:	4b24      	ldr	r3, [pc, #144]	@ (800a2e8 <RCCEx_PLL3_Config+0x160>)
 800a258:	4013      	ands	r3, r2
 800a25a:	687a      	ldr	r2, [r7, #4]
 800a25c:	69d2      	ldr	r2, [r2, #28]
 800a25e:	00d2      	lsls	r2, r2, #3
 800a260:	4920      	ldr	r1, [pc, #128]	@ (800a2e4 <RCCEx_PLL3_Config+0x15c>)
 800a262:	4313      	orrs	r3, r2
 800a264:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a266:	4b1f      	ldr	r3, [pc, #124]	@ (800a2e4 <RCCEx_PLL3_Config+0x15c>)
 800a268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a26a:	4a1e      	ldr	r2, [pc, #120]	@ (800a2e4 <RCCEx_PLL3_Config+0x15c>)
 800a26c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a270:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d106      	bne.n	800a286 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a278:	4b1a      	ldr	r3, [pc, #104]	@ (800a2e4 <RCCEx_PLL3_Config+0x15c>)
 800a27a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a27c:	4a19      	ldr	r2, [pc, #100]	@ (800a2e4 <RCCEx_PLL3_Config+0x15c>)
 800a27e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a282:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a284:	e00f      	b.n	800a2a6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	2b01      	cmp	r3, #1
 800a28a:	d106      	bne.n	800a29a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a28c:	4b15      	ldr	r3, [pc, #84]	@ (800a2e4 <RCCEx_PLL3_Config+0x15c>)
 800a28e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a290:	4a14      	ldr	r2, [pc, #80]	@ (800a2e4 <RCCEx_PLL3_Config+0x15c>)
 800a292:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a296:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a298:	e005      	b.n	800a2a6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a29a:	4b12      	ldr	r3, [pc, #72]	@ (800a2e4 <RCCEx_PLL3_Config+0x15c>)
 800a29c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a29e:	4a11      	ldr	r2, [pc, #68]	@ (800a2e4 <RCCEx_PLL3_Config+0x15c>)
 800a2a0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a2a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a2a6:	4b0f      	ldr	r3, [pc, #60]	@ (800a2e4 <RCCEx_PLL3_Config+0x15c>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	4a0e      	ldr	r2, [pc, #56]	@ (800a2e4 <RCCEx_PLL3_Config+0x15c>)
 800a2ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a2b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a2b2:	f7f9 fb4b 	bl	800394c <HAL_GetTick>
 800a2b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a2b8:	e008      	b.n	800a2cc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a2ba:	f7f9 fb47 	bl	800394c <HAL_GetTick>
 800a2be:	4602      	mov	r2, r0
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	1ad3      	subs	r3, r2, r3
 800a2c4:	2b02      	cmp	r3, #2
 800a2c6:	d901      	bls.n	800a2cc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a2c8:	2303      	movs	r3, #3
 800a2ca:	e006      	b.n	800a2da <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a2cc:	4b05      	ldr	r3, [pc, #20]	@ (800a2e4 <RCCEx_PLL3_Config+0x15c>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d0f0      	beq.n	800a2ba <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a2d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2da:	4618      	mov	r0, r3
 800a2dc:	3710      	adds	r7, #16
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	bd80      	pop	{r7, pc}
 800a2e2:	bf00      	nop
 800a2e4:	58024400 	.word	0x58024400
 800a2e8:	ffff0007 	.word	0xffff0007

0800a2ec <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b084      	sub	sp, #16
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d101      	bne.n	800a2fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a2fa:	2301      	movs	r3, #1
 800a2fc:	e10f      	b.n	800a51e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2200      	movs	r2, #0
 800a302:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	4a87      	ldr	r2, [pc, #540]	@ (800a528 <HAL_SPI_Init+0x23c>)
 800a30a:	4293      	cmp	r3, r2
 800a30c:	d00f      	beq.n	800a32e <HAL_SPI_Init+0x42>
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	4a86      	ldr	r2, [pc, #536]	@ (800a52c <HAL_SPI_Init+0x240>)
 800a314:	4293      	cmp	r3, r2
 800a316:	d00a      	beq.n	800a32e <HAL_SPI_Init+0x42>
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	4a84      	ldr	r2, [pc, #528]	@ (800a530 <HAL_SPI_Init+0x244>)
 800a31e:	4293      	cmp	r3, r2
 800a320:	d005      	beq.n	800a32e <HAL_SPI_Init+0x42>
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	68db      	ldr	r3, [r3, #12]
 800a326:	2b0f      	cmp	r3, #15
 800a328:	d901      	bls.n	800a32e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800a32a:	2301      	movs	r3, #1
 800a32c:	e0f7      	b.n	800a51e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a32e:	6878      	ldr	r0, [r7, #4]
 800a330:	f001 f968 	bl	800b604 <SPI_GetPacketSize>
 800a334:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	4a7b      	ldr	r2, [pc, #492]	@ (800a528 <HAL_SPI_Init+0x23c>)
 800a33c:	4293      	cmp	r3, r2
 800a33e:	d00c      	beq.n	800a35a <HAL_SPI_Init+0x6e>
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	4a79      	ldr	r2, [pc, #484]	@ (800a52c <HAL_SPI_Init+0x240>)
 800a346:	4293      	cmp	r3, r2
 800a348:	d007      	beq.n	800a35a <HAL_SPI_Init+0x6e>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	4a78      	ldr	r2, [pc, #480]	@ (800a530 <HAL_SPI_Init+0x244>)
 800a350:	4293      	cmp	r3, r2
 800a352:	d002      	beq.n	800a35a <HAL_SPI_Init+0x6e>
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	2b08      	cmp	r3, #8
 800a358:	d811      	bhi.n	800a37e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a35e:	4a72      	ldr	r2, [pc, #456]	@ (800a528 <HAL_SPI_Init+0x23c>)
 800a360:	4293      	cmp	r3, r2
 800a362:	d009      	beq.n	800a378 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	4a70      	ldr	r2, [pc, #448]	@ (800a52c <HAL_SPI_Init+0x240>)
 800a36a:	4293      	cmp	r3, r2
 800a36c:	d004      	beq.n	800a378 <HAL_SPI_Init+0x8c>
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	4a6f      	ldr	r2, [pc, #444]	@ (800a530 <HAL_SPI_Init+0x244>)
 800a374:	4293      	cmp	r3, r2
 800a376:	d104      	bne.n	800a382 <HAL_SPI_Init+0x96>
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	2b10      	cmp	r3, #16
 800a37c:	d901      	bls.n	800a382 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800a37e:	2301      	movs	r3, #1
 800a380:	e0cd      	b.n	800a51e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a388:	b2db      	uxtb	r3, r3
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d106      	bne.n	800a39c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2200      	movs	r2, #0
 800a392:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	f7f8 fa6a 	bl	8002870 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2202      	movs	r2, #2
 800a3a0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	681a      	ldr	r2, [r3, #0]
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	f022 0201 	bic.w	r2, r2, #1
 800a3b2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	689b      	ldr	r3, [r3, #8]
 800a3ba:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800a3be:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	699b      	ldr	r3, [r3, #24]
 800a3c4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a3c8:	d119      	bne.n	800a3fe <HAL_SPI_Init+0x112>
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	685b      	ldr	r3, [r3, #4]
 800a3ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a3d2:	d103      	bne.n	800a3dc <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d008      	beq.n	800a3ee <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d10c      	bne.n	800a3fe <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a3e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a3ec:	d107      	bne.n	800a3fe <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	681a      	ldr	r2, [r3, #0]
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a3fc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	685b      	ldr	r3, [r3, #4]
 800a402:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a406:	2b00      	cmp	r3, #0
 800a408:	d00f      	beq.n	800a42a <HAL_SPI_Init+0x13e>
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	68db      	ldr	r3, [r3, #12]
 800a40e:	2b06      	cmp	r3, #6
 800a410:	d90b      	bls.n	800a42a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	430a      	orrs	r2, r1
 800a426:	601a      	str	r2, [r3, #0]
 800a428:	e007      	b.n	800a43a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	681a      	ldr	r2, [r3, #0]
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a438:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	69da      	ldr	r2, [r3, #28]
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a442:	431a      	orrs	r2, r3
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	431a      	orrs	r2, r3
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a44c:	ea42 0103 	orr.w	r1, r2, r3
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	68da      	ldr	r2, [r3, #12]
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	430a      	orrs	r2, r1
 800a45a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a464:	431a      	orrs	r2, r3
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a46a:	431a      	orrs	r2, r3
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	699b      	ldr	r3, [r3, #24]
 800a470:	431a      	orrs	r2, r3
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	691b      	ldr	r3, [r3, #16]
 800a476:	431a      	orrs	r2, r3
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	695b      	ldr	r3, [r3, #20]
 800a47c:	431a      	orrs	r2, r3
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	6a1b      	ldr	r3, [r3, #32]
 800a482:	431a      	orrs	r2, r3
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	685b      	ldr	r3, [r3, #4]
 800a488:	431a      	orrs	r2, r3
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a48e:	431a      	orrs	r2, r3
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	689b      	ldr	r3, [r3, #8]
 800a494:	431a      	orrs	r2, r3
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a49a:	ea42 0103 	orr.w	r1, r2, r3
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	430a      	orrs	r2, r1
 800a4a8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	685b      	ldr	r3, [r3, #4]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d113      	bne.n	800a4da <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	689b      	ldr	r3, [r3, #8]
 800a4b8:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a4c4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	689b      	ldr	r3, [r3, #8]
 800a4cc:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a4d8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	f022 0201 	bic.w	r2, r2, #1
 800a4e8:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	685b      	ldr	r3, [r3, #4]
 800a4ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d00a      	beq.n	800a50c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	68db      	ldr	r3, [r3, #12]
 800a4fc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	430a      	orrs	r2, r1
 800a50a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2200      	movs	r2, #0
 800a510:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2201      	movs	r2, #1
 800a518:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800a51c:	2300      	movs	r3, #0
}
 800a51e:	4618      	mov	r0, r3
 800a520:	3710      	adds	r7, #16
 800a522:	46bd      	mov	sp, r7
 800a524:	bd80      	pop	{r7, pc}
 800a526:	bf00      	nop
 800a528:	40013000 	.word	0x40013000
 800a52c:	40003800 	.word	0x40003800
 800a530:	40003c00 	.word	0x40003c00

0800a534 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b088      	sub	sp, #32
 800a538:	af02      	add	r7, sp, #8
 800a53a:	60f8      	str	r0, [r7, #12]
 800a53c:	60b9      	str	r1, [r7, #8]
 800a53e:	603b      	str	r3, [r7, #0]
 800a540:	4613      	mov	r3, r2
 800a542:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	3320      	adds	r3, #32
 800a54a:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a54c:	f7f9 f9fe 	bl	800394c <HAL_GetTick>
 800a550:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a558:	b2db      	uxtb	r3, r3
 800a55a:	2b01      	cmp	r3, #1
 800a55c:	d001      	beq.n	800a562 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800a55e:	2302      	movs	r3, #2
 800a560:	e1d1      	b.n	800a906 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a562:	68bb      	ldr	r3, [r7, #8]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d002      	beq.n	800a56e <HAL_SPI_Transmit+0x3a>
 800a568:	88fb      	ldrh	r3, [r7, #6]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d101      	bne.n	800a572 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800a56e:	2301      	movs	r3, #1
 800a570:	e1c9      	b.n	800a906 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a578:	2b01      	cmp	r3, #1
 800a57a:	d101      	bne.n	800a580 <HAL_SPI_Transmit+0x4c>
 800a57c:	2302      	movs	r3, #2
 800a57e:	e1c2      	b.n	800a906 <HAL_SPI_Transmit+0x3d2>
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	2201      	movs	r2, #1
 800a584:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	2203      	movs	r2, #3
 800a58c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	2200      	movs	r2, #0
 800a594:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	68ba      	ldr	r2, [r7, #8]
 800a59c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	88fa      	ldrh	r2, [r7, #6]
 800a5a2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	88fa      	ldrh	r2, [r7, #6]
 800a5aa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	2200      	movs	r2, #0
 800a5c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	689b      	ldr	r3, [r3, #8]
 800a5d4:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800a5d8:	d108      	bne.n	800a5ec <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	681a      	ldr	r2, [r3, #0]
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a5e8:	601a      	str	r2, [r3, #0]
 800a5ea:	e009      	b.n	800a600 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	68db      	ldr	r3, [r3, #12]
 800a5f2:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800a5fe:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	685a      	ldr	r2, [r3, #4]
 800a606:	4b96      	ldr	r3, [pc, #600]	@ (800a860 <HAL_SPI_Transmit+0x32c>)
 800a608:	4013      	ands	r3, r2
 800a60a:	88f9      	ldrh	r1, [r7, #6]
 800a60c:	68fa      	ldr	r2, [r7, #12]
 800a60e:	6812      	ldr	r2, [r2, #0]
 800a610:	430b      	orrs	r3, r1
 800a612:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	681a      	ldr	r2, [r3, #0]
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f042 0201 	orr.w	r2, r2, #1
 800a622:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	685b      	ldr	r3, [r3, #4]
 800a628:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a62c:	d107      	bne.n	800a63e <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	681a      	ldr	r2, [r3, #0]
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a63c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	68db      	ldr	r3, [r3, #12]
 800a642:	2b0f      	cmp	r3, #15
 800a644:	d947      	bls.n	800a6d6 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a646:	e03f      	b.n	800a6c8 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	695b      	ldr	r3, [r3, #20]
 800a64e:	f003 0302 	and.w	r3, r3, #2
 800a652:	2b02      	cmp	r3, #2
 800a654:	d114      	bne.n	800a680 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	6812      	ldr	r2, [r2, #0]
 800a660:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a666:	1d1a      	adds	r2, r3, #4
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a672:	b29b      	uxth	r3, r3
 800a674:	3b01      	subs	r3, #1
 800a676:	b29a      	uxth	r2, r3
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a67e:	e023      	b.n	800a6c8 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a680:	f7f9 f964 	bl	800394c <HAL_GetTick>
 800a684:	4602      	mov	r2, r0
 800a686:	693b      	ldr	r3, [r7, #16]
 800a688:	1ad3      	subs	r3, r2, r3
 800a68a:	683a      	ldr	r2, [r7, #0]
 800a68c:	429a      	cmp	r2, r3
 800a68e:	d803      	bhi.n	800a698 <HAL_SPI_Transmit+0x164>
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a696:	d102      	bne.n	800a69e <HAL_SPI_Transmit+0x16a>
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d114      	bne.n	800a6c8 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a69e:	68f8      	ldr	r0, [r7, #12]
 800a6a0:	f000 fee2 	bl	800b468 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a6aa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	2201      	movs	r2, #1
 800a6b8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	2200      	movs	r2, #0
 800a6c0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a6c4:	2303      	movs	r3, #3
 800a6c6:	e11e      	b.n	800a906 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a6ce:	b29b      	uxth	r3, r3
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d1b9      	bne.n	800a648 <HAL_SPI_Transmit+0x114>
 800a6d4:	e0f1      	b.n	800a8ba <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	68db      	ldr	r3, [r3, #12]
 800a6da:	2b07      	cmp	r3, #7
 800a6dc:	f240 80e6 	bls.w	800a8ac <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a6e0:	e05d      	b.n	800a79e <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	695b      	ldr	r3, [r3, #20]
 800a6e8:	f003 0302 	and.w	r3, r3, #2
 800a6ec:	2b02      	cmp	r3, #2
 800a6ee:	d132      	bne.n	800a756 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a6f6:	b29b      	uxth	r3, r3
 800a6f8:	2b01      	cmp	r3, #1
 800a6fa:	d918      	bls.n	800a72e <HAL_SPI_Transmit+0x1fa>
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a700:	2b00      	cmp	r3, #0
 800a702:	d014      	beq.n	800a72e <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	6812      	ldr	r2, [r2, #0]
 800a70e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a714:	1d1a      	adds	r2, r3, #4
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a720:	b29b      	uxth	r3, r3
 800a722:	3b02      	subs	r3, #2
 800a724:	b29a      	uxth	r2, r3
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a72c:	e037      	b.n	800a79e <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a732:	881a      	ldrh	r2, [r3, #0]
 800a734:	697b      	ldr	r3, [r7, #20]
 800a736:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a73c:	1c9a      	adds	r2, r3, #2
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a748:	b29b      	uxth	r3, r3
 800a74a:	3b01      	subs	r3, #1
 800a74c:	b29a      	uxth	r2, r3
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a754:	e023      	b.n	800a79e <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a756:	f7f9 f8f9 	bl	800394c <HAL_GetTick>
 800a75a:	4602      	mov	r2, r0
 800a75c:	693b      	ldr	r3, [r7, #16]
 800a75e:	1ad3      	subs	r3, r2, r3
 800a760:	683a      	ldr	r2, [r7, #0]
 800a762:	429a      	cmp	r2, r3
 800a764:	d803      	bhi.n	800a76e <HAL_SPI_Transmit+0x23a>
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a76c:	d102      	bne.n	800a774 <HAL_SPI_Transmit+0x240>
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d114      	bne.n	800a79e <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a774:	68f8      	ldr	r0, [r7, #12]
 800a776:	f000 fe77 	bl	800b468 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a780:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	2201      	movs	r2, #1
 800a78e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	2200      	movs	r2, #0
 800a796:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a79a:	2303      	movs	r3, #3
 800a79c:	e0b3      	b.n	800a906 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a7a4:	b29b      	uxth	r3, r3
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d19b      	bne.n	800a6e2 <HAL_SPI_Transmit+0x1ae>
 800a7aa:	e086      	b.n	800a8ba <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	695b      	ldr	r3, [r3, #20]
 800a7b2:	f003 0302 	and.w	r3, r3, #2
 800a7b6:	2b02      	cmp	r3, #2
 800a7b8:	d154      	bne.n	800a864 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a7c0:	b29b      	uxth	r3, r3
 800a7c2:	2b03      	cmp	r3, #3
 800a7c4:	d918      	bls.n	800a7f8 <HAL_SPI_Transmit+0x2c4>
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7ca:	2b40      	cmp	r3, #64	@ 0x40
 800a7cc:	d914      	bls.n	800a7f8 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	6812      	ldr	r2, [r2, #0]
 800a7d8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a7de:	1d1a      	adds	r2, r3, #4
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a7ea:	b29b      	uxth	r3, r3
 800a7ec:	3b04      	subs	r3, #4
 800a7ee:	b29a      	uxth	r2, r3
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a7f6:	e059      	b.n	800a8ac <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a7fe:	b29b      	uxth	r3, r3
 800a800:	2b01      	cmp	r3, #1
 800a802:	d917      	bls.n	800a834 <HAL_SPI_Transmit+0x300>
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d013      	beq.n	800a834 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a810:	881a      	ldrh	r2, [r3, #0]
 800a812:	697b      	ldr	r3, [r7, #20]
 800a814:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a81a:	1c9a      	adds	r2, r3, #2
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a826:	b29b      	uxth	r3, r3
 800a828:	3b02      	subs	r3, #2
 800a82a:	b29a      	uxth	r2, r3
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a832:	e03b      	b.n	800a8ac <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	3320      	adds	r3, #32
 800a83e:	7812      	ldrb	r2, [r2, #0]
 800a840:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a846:	1c5a      	adds	r2, r3, #1
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a852:	b29b      	uxth	r3, r3
 800a854:	3b01      	subs	r3, #1
 800a856:	b29a      	uxth	r2, r3
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a85e:	e025      	b.n	800a8ac <HAL_SPI_Transmit+0x378>
 800a860:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a864:	f7f9 f872 	bl	800394c <HAL_GetTick>
 800a868:	4602      	mov	r2, r0
 800a86a:	693b      	ldr	r3, [r7, #16]
 800a86c:	1ad3      	subs	r3, r2, r3
 800a86e:	683a      	ldr	r2, [r7, #0]
 800a870:	429a      	cmp	r2, r3
 800a872:	d803      	bhi.n	800a87c <HAL_SPI_Transmit+0x348>
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a87a:	d102      	bne.n	800a882 <HAL_SPI_Transmit+0x34e>
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d114      	bne.n	800a8ac <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a882:	68f8      	ldr	r0, [r7, #12]
 800a884:	f000 fdf0 	bl	800b468 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a88e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	2201      	movs	r2, #1
 800a89c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a8a8:	2303      	movs	r3, #3
 800a8aa:	e02c      	b.n	800a906 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a8b2:	b29b      	uxth	r3, r3
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	f47f af79 	bne.w	800a7ac <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800a8ba:	693b      	ldr	r3, [r7, #16]
 800a8bc:	9300      	str	r3, [sp, #0]
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	2108      	movs	r1, #8
 800a8c4:	68f8      	ldr	r0, [r7, #12]
 800a8c6:	f000 fe6f 	bl	800b5a8 <SPI_WaitOnFlagUntilTimeout>
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d007      	beq.n	800a8e0 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a8d6:	f043 0220 	orr.w	r2, r3, #32
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a8e0:	68f8      	ldr	r0, [r7, #12]
 800a8e2:	f000 fdc1 	bl	800b468 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	2201      	movs	r2, #1
 800a8ea:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d001      	beq.n	800a904 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800a900:	2301      	movs	r3, #1
 800a902:	e000      	b.n	800a906 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800a904:	2300      	movs	r3, #0
  }
}
 800a906:	4618      	mov	r0, r3
 800a908:	3718      	adds	r7, #24
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}
 800a90e:	bf00      	nop

0800a910 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b088      	sub	sp, #32
 800a914:	af00      	add	r7, sp, #0
 800a916:	60f8      	str	r0, [r7, #12]
 800a918:	60b9      	str	r1, [r7, #8]
 800a91a:	603b      	str	r3, [r7, #0]
 800a91c:	4613      	mov	r3, r2
 800a91e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a924:	095b      	lsrs	r3, r3, #5
 800a926:	b29b      	uxth	r3, r3
 800a928:	3301      	adds	r3, #1
 800a92a:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	3330      	adds	r3, #48	@ 0x30
 800a932:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a934:	f7f9 f80a 	bl	800394c <HAL_GetTick>
 800a938:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a940:	b2db      	uxtb	r3, r3
 800a942:	2b01      	cmp	r3, #1
 800a944:	d001      	beq.n	800a94a <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800a946:	2302      	movs	r3, #2
 800a948:	e250      	b.n	800adec <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a94a:	68bb      	ldr	r3, [r7, #8]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d002      	beq.n	800a956 <HAL_SPI_Receive+0x46>
 800a950:	88fb      	ldrh	r3, [r7, #6]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d101      	bne.n	800a95a <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800a956:	2301      	movs	r3, #1
 800a958:	e248      	b.n	800adec <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a960:	2b01      	cmp	r3, #1
 800a962:	d101      	bne.n	800a968 <HAL_SPI_Receive+0x58>
 800a964:	2302      	movs	r3, #2
 800a966:	e241      	b.n	800adec <HAL_SPI_Receive+0x4dc>
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	2201      	movs	r2, #1
 800a96c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	2204      	movs	r2, #4
 800a974:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	2200      	movs	r2, #0
 800a97c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	68ba      	ldr	r2, [r7, #8]
 800a984:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	88fa      	ldrh	r2, [r7, #6]
 800a98a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	88fa      	ldrh	r2, [r7, #6]
 800a992:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	2200      	movs	r2, #0
 800a99a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	2200      	movs	r2, #0
 800a9a0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	689b      	ldr	r3, [r3, #8]
 800a9bc:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800a9c0:	d108      	bne.n	800a9d4 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	681a      	ldr	r2, [r3, #0]
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a9d0:	601a      	str	r2, [r3, #0]
 800a9d2:	e009      	b.n	800a9e8 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	68db      	ldr	r3, [r3, #12]
 800a9da:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800a9e6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	685a      	ldr	r2, [r3, #4]
 800a9ee:	4b95      	ldr	r3, [pc, #596]	@ (800ac44 <HAL_SPI_Receive+0x334>)
 800a9f0:	4013      	ands	r3, r2
 800a9f2:	88f9      	ldrh	r1, [r7, #6]
 800a9f4:	68fa      	ldr	r2, [r7, #12]
 800a9f6:	6812      	ldr	r2, [r2, #0]
 800a9f8:	430b      	orrs	r3, r1
 800a9fa:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	681a      	ldr	r2, [r3, #0]
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f042 0201 	orr.w	r2, r2, #1
 800aa0a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	685b      	ldr	r3, [r3, #4]
 800aa10:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800aa14:	d107      	bne.n	800aa26 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	681a      	ldr	r2, [r3, #0]
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aa24:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	68db      	ldr	r3, [r3, #12]
 800aa2a:	2b0f      	cmp	r3, #15
 800aa2c:	d96c      	bls.n	800ab08 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800aa2e:	e064      	b.n	800aafa <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	695b      	ldr	r3, [r3, #20]
 800aa36:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	695b      	ldr	r3, [r3, #20]
 800aa3e:	f003 0301 	and.w	r3, r3, #1
 800aa42:	2b01      	cmp	r3, #1
 800aa44:	d114      	bne.n	800aa70 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	681a      	ldr	r2, [r3, #0]
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa4e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800aa50:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa56:	1d1a      	adds	r2, r3, #4
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800aa62:	b29b      	uxth	r3, r3
 800aa64:	3b01      	subs	r3, #1
 800aa66:	b29a      	uxth	r2, r3
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800aa6e:	e044      	b.n	800aafa <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800aa76:	b29b      	uxth	r3, r3
 800aa78:	8bfa      	ldrh	r2, [r7, #30]
 800aa7a:	429a      	cmp	r2, r3
 800aa7c:	d919      	bls.n	800aab2 <HAL_SPI_Receive+0x1a2>
 800aa7e:	693b      	ldr	r3, [r7, #16]
 800aa80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d014      	beq.n	800aab2 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	681a      	ldr	r2, [r3, #0]
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa90:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800aa92:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa98:	1d1a      	adds	r2, r3, #4
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800aaa4:	b29b      	uxth	r3, r3
 800aaa6:	3b01      	subs	r3, #1
 800aaa8:	b29a      	uxth	r2, r3
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800aab0:	e023      	b.n	800aafa <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aab2:	f7f8 ff4b 	bl	800394c <HAL_GetTick>
 800aab6:	4602      	mov	r2, r0
 800aab8:	697b      	ldr	r3, [r7, #20]
 800aaba:	1ad3      	subs	r3, r2, r3
 800aabc:	683a      	ldr	r2, [r7, #0]
 800aabe:	429a      	cmp	r2, r3
 800aac0:	d803      	bhi.n	800aaca <HAL_SPI_Receive+0x1ba>
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aac8:	d102      	bne.n	800aad0 <HAL_SPI_Receive+0x1c0>
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d114      	bne.n	800aafa <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800aad0:	68f8      	ldr	r0, [r7, #12]
 800aad2:	f000 fcc9 	bl	800b468 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aadc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	2201      	movs	r2, #1
 800aaea:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800aaf6:	2303      	movs	r3, #3
 800aaf8:	e178      	b.n	800adec <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ab00:	b29b      	uxth	r3, r3
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d194      	bne.n	800aa30 <HAL_SPI_Receive+0x120>
 800ab06:	e15e      	b.n	800adc6 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	68db      	ldr	r3, [r3, #12]
 800ab0c:	2b07      	cmp	r3, #7
 800ab0e:	f240 8153 	bls.w	800adb8 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800ab12:	e08f      	b.n	800ac34 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	695b      	ldr	r3, [r3, #20]
 800ab1a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	695b      	ldr	r3, [r3, #20]
 800ab22:	f003 0301 	and.w	r3, r3, #1
 800ab26:	2b01      	cmp	r3, #1
 800ab28:	d114      	bne.n	800ab54 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab2e:	69ba      	ldr	r2, [r7, #24]
 800ab30:	8812      	ldrh	r2, [r2, #0]
 800ab32:	b292      	uxth	r2, r2
 800ab34:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab3a:	1c9a      	adds	r2, r3, #2
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ab46:	b29b      	uxth	r3, r3
 800ab48:	3b01      	subs	r3, #1
 800ab4a:	b29a      	uxth	r2, r3
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800ab52:	e06f      	b.n	800ac34 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ab5a:	b29b      	uxth	r3, r3
 800ab5c:	8bfa      	ldrh	r2, [r7, #30]
 800ab5e:	429a      	cmp	r2, r3
 800ab60:	d924      	bls.n	800abac <HAL_SPI_Receive+0x29c>
 800ab62:	693b      	ldr	r3, [r7, #16]
 800ab64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d01f      	beq.n	800abac <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab70:	69ba      	ldr	r2, [r7, #24]
 800ab72:	8812      	ldrh	r2, [r2, #0]
 800ab74:	b292      	uxth	r2, r2
 800ab76:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab7c:	1c9a      	adds	r2, r3, #2
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab86:	69ba      	ldr	r2, [r7, #24]
 800ab88:	8812      	ldrh	r2, [r2, #0]
 800ab8a:	b292      	uxth	r2, r2
 800ab8c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab92:	1c9a      	adds	r2, r3, #2
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ab9e:	b29b      	uxth	r3, r3
 800aba0:	3b02      	subs	r3, #2
 800aba2:	b29a      	uxth	r2, r3
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800abaa:	e043      	b.n	800ac34 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800abb2:	b29b      	uxth	r3, r3
 800abb4:	2b01      	cmp	r3, #1
 800abb6:	d119      	bne.n	800abec <HAL_SPI_Receive+0x2dc>
 800abb8:	693b      	ldr	r3, [r7, #16]
 800abba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d014      	beq.n	800abec <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800abc6:	69ba      	ldr	r2, [r7, #24]
 800abc8:	8812      	ldrh	r2, [r2, #0]
 800abca:	b292      	uxth	r2, r2
 800abcc:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800abd2:	1c9a      	adds	r2, r3, #2
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800abde:	b29b      	uxth	r3, r3
 800abe0:	3b01      	subs	r3, #1
 800abe2:	b29a      	uxth	r2, r3
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800abea:	e023      	b.n	800ac34 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800abec:	f7f8 feae 	bl	800394c <HAL_GetTick>
 800abf0:	4602      	mov	r2, r0
 800abf2:	697b      	ldr	r3, [r7, #20]
 800abf4:	1ad3      	subs	r3, r2, r3
 800abf6:	683a      	ldr	r2, [r7, #0]
 800abf8:	429a      	cmp	r2, r3
 800abfa:	d803      	bhi.n	800ac04 <HAL_SPI_Receive+0x2f4>
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac02:	d102      	bne.n	800ac0a <HAL_SPI_Receive+0x2fa>
 800ac04:	683b      	ldr	r3, [r7, #0]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d114      	bne.n	800ac34 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ac0a:	68f8      	ldr	r0, [r7, #12]
 800ac0c:	f000 fc2c 	bl	800b468 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ac16:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	2201      	movs	r2, #1
 800ac24:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800ac30:	2303      	movs	r3, #3
 800ac32:	e0db      	b.n	800adec <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ac3a:	b29b      	uxth	r3, r3
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	f47f af69 	bne.w	800ab14 <HAL_SPI_Receive+0x204>
 800ac42:	e0c0      	b.n	800adc6 <HAL_SPI_Receive+0x4b6>
 800ac44:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	695b      	ldr	r3, [r3, #20]
 800ac4e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	695b      	ldr	r3, [r3, #20]
 800ac56:	f003 0301 	and.w	r3, r3, #1
 800ac5a:	2b01      	cmp	r3, #1
 800ac5c:	d117      	bne.n	800ac8e <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ac6a:	7812      	ldrb	r2, [r2, #0]
 800ac6c:	b2d2      	uxtb	r2, r2
 800ac6e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ac74:	1c5a      	adds	r2, r3, #1
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ac80:	b29b      	uxth	r3, r3
 800ac82:	3b01      	subs	r3, #1
 800ac84:	b29a      	uxth	r2, r3
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800ac8c:	e094      	b.n	800adb8 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ac94:	b29b      	uxth	r3, r3
 800ac96:	8bfa      	ldrh	r2, [r7, #30]
 800ac98:	429a      	cmp	r2, r3
 800ac9a:	d946      	bls.n	800ad2a <HAL_SPI_Receive+0x41a>
 800ac9c:	693b      	ldr	r3, [r7, #16]
 800ac9e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d041      	beq.n	800ad2a <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800acb2:	7812      	ldrb	r2, [r2, #0]
 800acb4:	b2d2      	uxtb	r2, r2
 800acb6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800acbc:	1c5a      	adds	r2, r3, #1
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800acce:	7812      	ldrb	r2, [r2, #0]
 800acd0:	b2d2      	uxtb	r2, r2
 800acd2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800acd8:	1c5a      	adds	r2, r3, #1
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800acea:	7812      	ldrb	r2, [r2, #0]
 800acec:	b2d2      	uxtb	r2, r2
 800acee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800acf4:	1c5a      	adds	r2, r3, #1
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ad06:	7812      	ldrb	r2, [r2, #0]
 800ad08:	b2d2      	uxtb	r2, r2
 800ad0a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ad10:	1c5a      	adds	r2, r3, #1
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ad1c:	b29b      	uxth	r3, r3
 800ad1e:	3b04      	subs	r3, #4
 800ad20:	b29a      	uxth	r2, r3
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800ad28:	e046      	b.n	800adb8 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ad30:	b29b      	uxth	r3, r3
 800ad32:	2b03      	cmp	r3, #3
 800ad34:	d81c      	bhi.n	800ad70 <HAL_SPI_Receive+0x460>
 800ad36:	693b      	ldr	r3, [r7, #16]
 800ad38:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d017      	beq.n	800ad70 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ad4c:	7812      	ldrb	r2, [r2, #0]
 800ad4e:	b2d2      	uxtb	r2, r2
 800ad50:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ad56:	1c5a      	adds	r2, r3, #1
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ad62:	b29b      	uxth	r3, r3
 800ad64:	3b01      	subs	r3, #1
 800ad66:	b29a      	uxth	r2, r3
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800ad6e:	e023      	b.n	800adb8 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ad70:	f7f8 fdec 	bl	800394c <HAL_GetTick>
 800ad74:	4602      	mov	r2, r0
 800ad76:	697b      	ldr	r3, [r7, #20]
 800ad78:	1ad3      	subs	r3, r2, r3
 800ad7a:	683a      	ldr	r2, [r7, #0]
 800ad7c:	429a      	cmp	r2, r3
 800ad7e:	d803      	bhi.n	800ad88 <HAL_SPI_Receive+0x478>
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad86:	d102      	bne.n	800ad8e <HAL_SPI_Receive+0x47e>
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d114      	bne.n	800adb8 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ad8e:	68f8      	ldr	r0, [r7, #12]
 800ad90:	f000 fb6a 	bl	800b468 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ad9a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	2201      	movs	r2, #1
 800ada8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	2200      	movs	r2, #0
 800adb0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800adb4:	2303      	movs	r3, #3
 800adb6:	e019      	b.n	800adec <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800adbe:	b29b      	uxth	r3, r3
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	f47f af41 	bne.w	800ac48 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800adc6:	68f8      	ldr	r0, [r7, #12]
 800adc8:	f000 fb4e 	bl	800b468 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	2201      	movs	r2, #1
 800add0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	2200      	movs	r2, #0
 800add8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d001      	beq.n	800adea <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800ade6:	2301      	movs	r3, #1
 800ade8:	e000      	b.n	800adec <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800adea:	2300      	movs	r3, #0
  }
}
 800adec:	4618      	mov	r0, r3
 800adee:	3720      	adds	r7, #32
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bd80      	pop	{r7, pc}

0800adf4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b08e      	sub	sp, #56	@ 0x38
 800adf8:	af02      	add	r7, sp, #8
 800adfa:	60f8      	str	r0, [r7, #12]
 800adfc:	60b9      	str	r1, [r7, #8]
 800adfe:	607a      	str	r2, [r7, #4]
 800ae00:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	3320      	adds	r3, #32
 800ae08:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	3330      	adds	r3, #48	@ 0x30
 800ae10:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae16:	095b      	lsrs	r3, r3, #5
 800ae18:	b29b      	uxth	r3, r3
 800ae1a:	3301      	adds	r3, #1
 800ae1c:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ae1e:	f7f8 fd95 	bl	800394c <HAL_GetTick>
 800ae22:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 800ae24:	887b      	ldrh	r3, [r7, #2]
 800ae26:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 800ae28:	887b      	ldrh	r3, [r7, #2]
 800ae2a:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ae32:	b2db      	uxtb	r3, r3
 800ae34:	2b01      	cmp	r3, #1
 800ae36:	d001      	beq.n	800ae3c <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 800ae38:	2302      	movs	r3, #2
 800ae3a:	e310      	b.n	800b45e <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800ae3c:	68bb      	ldr	r3, [r7, #8]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d005      	beq.n	800ae4e <HAL_SPI_TransmitReceive+0x5a>
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d002      	beq.n	800ae4e <HAL_SPI_TransmitReceive+0x5a>
 800ae48:	887b      	ldrh	r3, [r7, #2]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d101      	bne.n	800ae52 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 800ae4e:	2301      	movs	r3, #1
 800ae50:	e305      	b.n	800b45e <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800ae58:	2b01      	cmp	r3, #1
 800ae5a:	d101      	bne.n	800ae60 <HAL_SPI_TransmitReceive+0x6c>
 800ae5c:	2302      	movs	r3, #2
 800ae5e:	e2fe      	b.n	800b45e <HAL_SPI_TransmitReceive+0x66a>
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	2201      	movs	r2, #1
 800ae64:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	2205      	movs	r2, #5
 800ae6c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	2200      	movs	r2, #0
 800ae74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	687a      	ldr	r2, [r7, #4]
 800ae7c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	887a      	ldrh	r2, [r7, #2]
 800ae82:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	887a      	ldrh	r2, [r7, #2]
 800ae8a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	68ba      	ldr	r2, [r7, #8]
 800ae92:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	887a      	ldrh	r2, [r7, #2]
 800ae98:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	887a      	ldrh	r2, [r7, #2]
 800aea0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	2200      	movs	r2, #0
 800aea8:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	2200      	movs	r2, #0
 800aeae:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	68da      	ldr	r2, [r3, #12]
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800aebe:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	4a70      	ldr	r2, [pc, #448]	@ (800b088 <HAL_SPI_TransmitReceive+0x294>)
 800aec6:	4293      	cmp	r3, r2
 800aec8:	d009      	beq.n	800aede <HAL_SPI_TransmitReceive+0xea>
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	4a6f      	ldr	r2, [pc, #444]	@ (800b08c <HAL_SPI_TransmitReceive+0x298>)
 800aed0:	4293      	cmp	r3, r2
 800aed2:	d004      	beq.n	800aede <HAL_SPI_TransmitReceive+0xea>
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	4a6d      	ldr	r2, [pc, #436]	@ (800b090 <HAL_SPI_TransmitReceive+0x29c>)
 800aeda:	4293      	cmp	r3, r2
 800aedc:	d102      	bne.n	800aee4 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800aede:	2310      	movs	r3, #16
 800aee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aee2:	e001      	b.n	800aee8 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 800aee4:	2308      	movs	r3, #8
 800aee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	685a      	ldr	r2, [r3, #4]
 800aeee:	4b69      	ldr	r3, [pc, #420]	@ (800b094 <HAL_SPI_TransmitReceive+0x2a0>)
 800aef0:	4013      	ands	r3, r2
 800aef2:	8879      	ldrh	r1, [r7, #2]
 800aef4:	68fa      	ldr	r2, [r7, #12]
 800aef6:	6812      	ldr	r2, [r2, #0]
 800aef8:	430b      	orrs	r3, r1
 800aefa:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	681a      	ldr	r2, [r3, #0]
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	f042 0201 	orr.w	r2, r2, #1
 800af0a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	685b      	ldr	r3, [r3, #4]
 800af10:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800af14:	d107      	bne.n	800af26 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	681a      	ldr	r2, [r3, #0]
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800af24:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	68db      	ldr	r3, [r3, #12]
 800af2a:	2b0f      	cmp	r3, #15
 800af2c:	f240 80a2 	bls.w	800b074 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 800af30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af32:	089b      	lsrs	r3, r3, #2
 800af34:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800af36:	e094      	b.n	800b062 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	695b      	ldr	r3, [r3, #20]
 800af3e:	f003 0302 	and.w	r3, r3, #2
 800af42:	2b02      	cmp	r3, #2
 800af44:	d120      	bne.n	800af88 <HAL_SPI_TransmitReceive+0x194>
 800af46:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d01d      	beq.n	800af88 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800af4c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800af4e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800af50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af52:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800af54:	429a      	cmp	r2, r3
 800af56:	d217      	bcs.n	800af88 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	6812      	ldr	r2, [r2, #0]
 800af62:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800af68:	1d1a      	adds	r2, r3, #4
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800af74:	b29b      	uxth	r3, r3
 800af76:	3b01      	subs	r3, #1
 800af78:	b29a      	uxth	r2, r3
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800af86:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	695b      	ldr	r3, [r3, #20]
 800af8e:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800af90:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800af92:	2b00      	cmp	r3, #0
 800af94:	d065      	beq.n	800b062 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	695b      	ldr	r3, [r3, #20]
 800af9c:	f003 0301 	and.w	r3, r3, #1
 800afa0:	2b01      	cmp	r3, #1
 800afa2:	d118      	bne.n	800afd6 <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	681a      	ldr	r2, [r3, #0]
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800afac:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800afae:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800afb4:	1d1a      	adds	r2, r3, #4
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800afc0:	b29b      	uxth	r3, r3
 800afc2:	3b01      	subs	r3, #1
 800afc4:	b29a      	uxth	r2, r3
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800afd2:	853b      	strh	r3, [r7, #40]	@ 0x28
 800afd4:	e045      	b.n	800b062 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800afd6:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800afd8:	8bfb      	ldrh	r3, [r7, #30]
 800afda:	429a      	cmp	r2, r3
 800afdc:	d21d      	bcs.n	800b01a <HAL_SPI_TransmitReceive+0x226>
 800afde:	697b      	ldr	r3, [r7, #20]
 800afe0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d018      	beq.n	800b01a <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	681a      	ldr	r2, [r3, #0]
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aff0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800aff2:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aff8:	1d1a      	adds	r2, r3, #4
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b004:	b29b      	uxth	r3, r3
 800b006:	3b01      	subs	r3, #1
 800b008:	b29a      	uxth	r2, r3
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b016:	853b      	strh	r3, [r7, #40]	@ 0x28
 800b018:	e023      	b.n	800b062 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b01a:	f7f8 fc97 	bl	800394c <HAL_GetTick>
 800b01e:	4602      	mov	r2, r0
 800b020:	69bb      	ldr	r3, [r7, #24]
 800b022:	1ad3      	subs	r3, r2, r3
 800b024:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b026:	429a      	cmp	r2, r3
 800b028:	d803      	bhi.n	800b032 <HAL_SPI_TransmitReceive+0x23e>
 800b02a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b02c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b030:	d102      	bne.n	800b038 <HAL_SPI_TransmitReceive+0x244>
 800b032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b034:	2b00      	cmp	r3, #0
 800b036:	d114      	bne.n	800b062 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800b038:	68f8      	ldr	r0, [r7, #12]
 800b03a:	f000 fa15 	bl	800b468 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b044:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	2201      	movs	r2, #1
 800b052:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	2200      	movs	r2, #0
 800b05a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800b05e:	2303      	movs	r3, #3
 800b060:	e1fd      	b.n	800b45e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b062:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b064:	2b00      	cmp	r3, #0
 800b066:	f47f af67 	bne.w	800af38 <HAL_SPI_TransmitReceive+0x144>
 800b06a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	f47f af63 	bne.w	800af38 <HAL_SPI_TransmitReceive+0x144>
 800b072:	e1ce      	b.n	800b412 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	68db      	ldr	r3, [r3, #12]
 800b078:	2b07      	cmp	r3, #7
 800b07a:	f240 81c2 	bls.w	800b402 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800b07e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b080:	085b      	lsrs	r3, r3, #1
 800b082:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b084:	e0c9      	b.n	800b21a <HAL_SPI_TransmitReceive+0x426>
 800b086:	bf00      	nop
 800b088:	40013000 	.word	0x40013000
 800b08c:	40003800 	.word	0x40003800
 800b090:	40003c00 	.word	0x40003c00
 800b094:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	695b      	ldr	r3, [r3, #20]
 800b09e:	f003 0302 	and.w	r3, r3, #2
 800b0a2:	2b02      	cmp	r3, #2
 800b0a4:	d11f      	bne.n	800b0e6 <HAL_SPI_TransmitReceive+0x2f2>
 800b0a6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d01c      	beq.n	800b0e6 <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800b0ac:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800b0ae:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800b0b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0b2:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800b0b4:	429a      	cmp	r2, r3
 800b0b6:	d216      	bcs.n	800b0e6 <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b0bc:	881a      	ldrh	r2, [r3, #0]
 800b0be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0c0:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b0c6:	1c9a      	adds	r2, r3, #2
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b0d2:	b29b      	uxth	r3, r3
 800b0d4:	3b01      	subs	r3, #1
 800b0d6:	b29a      	uxth	r2, r3
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b0e4:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	695b      	ldr	r3, [r3, #20]
 800b0ec:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800b0ee:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	f000 8092 	beq.w	800b21a <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	695b      	ldr	r3, [r3, #20]
 800b0fc:	f003 0301 	and.w	r3, r3, #1
 800b100:	2b01      	cmp	r3, #1
 800b102:	d118      	bne.n	800b136 <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b108:	6a3a      	ldr	r2, [r7, #32]
 800b10a:	8812      	ldrh	r2, [r2, #0]
 800b10c:	b292      	uxth	r2, r2
 800b10e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b114:	1c9a      	adds	r2, r3, #2
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b120:	b29b      	uxth	r3, r3
 800b122:	3b01      	subs	r3, #1
 800b124:	b29a      	uxth	r2, r3
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b132:	853b      	strh	r3, [r7, #40]	@ 0x28
 800b134:	e071      	b.n	800b21a <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800b136:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800b138:	8bfb      	ldrh	r3, [r7, #30]
 800b13a:	429a      	cmp	r2, r3
 800b13c:	d228      	bcs.n	800b190 <HAL_SPI_TransmitReceive+0x39c>
 800b13e:	697b      	ldr	r3, [r7, #20]
 800b140:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b144:	2b00      	cmp	r3, #0
 800b146:	d023      	beq.n	800b190 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b14c:	6a3a      	ldr	r2, [r7, #32]
 800b14e:	8812      	ldrh	r2, [r2, #0]
 800b150:	b292      	uxth	r2, r2
 800b152:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b158:	1c9a      	adds	r2, r3, #2
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b162:	6a3a      	ldr	r2, [r7, #32]
 800b164:	8812      	ldrh	r2, [r2, #0]
 800b166:	b292      	uxth	r2, r2
 800b168:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b16e:	1c9a      	adds	r2, r3, #2
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b17a:	b29b      	uxth	r3, r3
 800b17c:	3b02      	subs	r3, #2
 800b17e:	b29a      	uxth	r2, r3
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b18c:	853b      	strh	r3, [r7, #40]	@ 0x28
 800b18e:	e044      	b.n	800b21a <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800b190:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b192:	2b01      	cmp	r3, #1
 800b194:	d11d      	bne.n	800b1d2 <HAL_SPI_TransmitReceive+0x3de>
 800b196:	697b      	ldr	r3, [r7, #20]
 800b198:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d018      	beq.n	800b1d2 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b1a4:	6a3a      	ldr	r2, [r7, #32]
 800b1a6:	8812      	ldrh	r2, [r2, #0]
 800b1a8:	b292      	uxth	r2, r2
 800b1aa:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b1b0:	1c9a      	adds	r2, r3, #2
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b1bc:	b29b      	uxth	r3, r3
 800b1be:	3b01      	subs	r3, #1
 800b1c0:	b29a      	uxth	r2, r3
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b1ce:	853b      	strh	r3, [r7, #40]	@ 0x28
 800b1d0:	e023      	b.n	800b21a <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b1d2:	f7f8 fbbb 	bl	800394c <HAL_GetTick>
 800b1d6:	4602      	mov	r2, r0
 800b1d8:	69bb      	ldr	r3, [r7, #24]
 800b1da:	1ad3      	subs	r3, r2, r3
 800b1dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b1de:	429a      	cmp	r2, r3
 800b1e0:	d803      	bhi.n	800b1ea <HAL_SPI_TransmitReceive+0x3f6>
 800b1e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1e8:	d102      	bne.n	800b1f0 <HAL_SPI_TransmitReceive+0x3fc>
 800b1ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d114      	bne.n	800b21a <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800b1f0:	68f8      	ldr	r0, [r7, #12]
 800b1f2:	f000 f939 	bl	800b468 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b1fc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	2201      	movs	r2, #1
 800b20a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	2200      	movs	r2, #0
 800b212:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800b216:	2303      	movs	r3, #3
 800b218:	e121      	b.n	800b45e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b21a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	f47f af3b 	bne.w	800b098 <HAL_SPI_TransmitReceive+0x2a4>
 800b222:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b224:	2b00      	cmp	r3, #0
 800b226:	f47f af37 	bne.w	800b098 <HAL_SPI_TransmitReceive+0x2a4>
 800b22a:	e0f2      	b.n	800b412 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	695b      	ldr	r3, [r3, #20]
 800b232:	f003 0302 	and.w	r3, r3, #2
 800b236:	2b02      	cmp	r3, #2
 800b238:	d121      	bne.n	800b27e <HAL_SPI_TransmitReceive+0x48a>
 800b23a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d01e      	beq.n	800b27e <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800b240:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800b242:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800b244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b246:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800b248:	429a      	cmp	r2, r3
 800b24a:	d218      	bcs.n	800b27e <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	3320      	adds	r3, #32
 800b256:	7812      	ldrb	r2, [r2, #0]
 800b258:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b25e:	1c5a      	adds	r2, r3, #1
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b26a:	b29b      	uxth	r3, r3
 800b26c:	3b01      	subs	r3, #1
 800b26e:	b29a      	uxth	r2, r3
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b27c:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	695b      	ldr	r3, [r3, #20]
 800b284:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800b286:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b288:	2b00      	cmp	r3, #0
 800b28a:	f000 80ba 	beq.w	800b402 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	695b      	ldr	r3, [r3, #20]
 800b294:	f003 0301 	and.w	r3, r3, #1
 800b298:	2b01      	cmp	r3, #1
 800b29a:	d11b      	bne.n	800b2d4 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b2a8:	7812      	ldrb	r2, [r2, #0]
 800b2aa:	b2d2      	uxtb	r2, r2
 800b2ac:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b2b2:	1c5a      	adds	r2, r3, #1
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b2be:	b29b      	uxth	r3, r3
 800b2c0:	3b01      	subs	r3, #1
 800b2c2:	b29a      	uxth	r2, r3
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b2d0:	853b      	strh	r3, [r7, #40]	@ 0x28
 800b2d2:	e096      	b.n	800b402 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800b2d4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800b2d6:	8bfb      	ldrh	r3, [r7, #30]
 800b2d8:	429a      	cmp	r2, r3
 800b2da:	d24a      	bcs.n	800b372 <HAL_SPI_TransmitReceive+0x57e>
 800b2dc:	697b      	ldr	r3, [r7, #20]
 800b2de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d045      	beq.n	800b372 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b2f2:	7812      	ldrb	r2, [r2, #0]
 800b2f4:	b2d2      	uxtb	r2, r2
 800b2f6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b2fc:	1c5a      	adds	r2, r3, #1
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b30e:	7812      	ldrb	r2, [r2, #0]
 800b310:	b2d2      	uxtb	r2, r2
 800b312:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b318:	1c5a      	adds	r2, r3, #1
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b32a:	7812      	ldrb	r2, [r2, #0]
 800b32c:	b2d2      	uxtb	r2, r2
 800b32e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b334:	1c5a      	adds	r2, r3, #1
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b346:	7812      	ldrb	r2, [r2, #0]
 800b348:	b2d2      	uxtb	r2, r2
 800b34a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b350:	1c5a      	adds	r2, r3, #1
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b35c:	b29b      	uxth	r3, r3
 800b35e:	3b04      	subs	r3, #4
 800b360:	b29a      	uxth	r2, r3
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b36e:	853b      	strh	r3, [r7, #40]	@ 0x28
 800b370:	e047      	b.n	800b402 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800b372:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b374:	2b03      	cmp	r3, #3
 800b376:	d820      	bhi.n	800b3ba <HAL_SPI_TransmitReceive+0x5c6>
 800b378:	697b      	ldr	r3, [r7, #20]
 800b37a:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d01b      	beq.n	800b3ba <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b38e:	7812      	ldrb	r2, [r2, #0]
 800b390:	b2d2      	uxtb	r2, r2
 800b392:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b398:	1c5a      	adds	r2, r3, #1
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b3a4:	b29b      	uxth	r3, r3
 800b3a6:	3b01      	subs	r3, #1
 800b3a8:	b29a      	uxth	r2, r3
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b3b6:	853b      	strh	r3, [r7, #40]	@ 0x28
 800b3b8:	e023      	b.n	800b402 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b3ba:	f7f8 fac7 	bl	800394c <HAL_GetTick>
 800b3be:	4602      	mov	r2, r0
 800b3c0:	69bb      	ldr	r3, [r7, #24]
 800b3c2:	1ad3      	subs	r3, r2, r3
 800b3c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b3c6:	429a      	cmp	r2, r3
 800b3c8:	d803      	bhi.n	800b3d2 <HAL_SPI_TransmitReceive+0x5de>
 800b3ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3d0:	d102      	bne.n	800b3d8 <HAL_SPI_TransmitReceive+0x5e4>
 800b3d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d114      	bne.n	800b402 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800b3d8:	68f8      	ldr	r0, [r7, #12]
 800b3da:	f000 f845 	bl	800b468 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b3e4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	2201      	movs	r2, #1
 800b3f2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800b3fe:	2303      	movs	r3, #3
 800b400:	e02d      	b.n	800b45e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b402:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b404:	2b00      	cmp	r3, #0
 800b406:	f47f af11 	bne.w	800b22c <HAL_SPI_TransmitReceive+0x438>
 800b40a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	f47f af0d 	bne.w	800b22c <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800b412:	69bb      	ldr	r3, [r7, #24]
 800b414:	9300      	str	r3, [sp, #0]
 800b416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b418:	2200      	movs	r2, #0
 800b41a:	2108      	movs	r1, #8
 800b41c:	68f8      	ldr	r0, [r7, #12]
 800b41e:	f000 f8c3 	bl	800b5a8 <SPI_WaitOnFlagUntilTimeout>
 800b422:	4603      	mov	r3, r0
 800b424:	2b00      	cmp	r3, #0
 800b426:	d007      	beq.n	800b438 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b42e:	f043 0220 	orr.w	r2, r3, #32
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800b438:	68f8      	ldr	r0, [r7, #12]
 800b43a:	f000 f815 	bl	800b468 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	2201      	movs	r2, #1
 800b442:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	2200      	movs	r2, #0
 800b44a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b454:	2b00      	cmp	r3, #0
 800b456:	d001      	beq.n	800b45c <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 800b458:	2301      	movs	r3, #1
 800b45a:	e000      	b.n	800b45e <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 800b45c:	2300      	movs	r3, #0
  }
}
 800b45e:	4618      	mov	r0, r3
 800b460:	3730      	adds	r7, #48	@ 0x30
 800b462:	46bd      	mov	sp, r7
 800b464:	bd80      	pop	{r7, pc}
 800b466:	bf00      	nop

0800b468 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800b468:	b480      	push	{r7}
 800b46a:	b085      	sub	sp, #20
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	695b      	ldr	r3, [r3, #20]
 800b476:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	699a      	ldr	r2, [r3, #24]
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	f042 0208 	orr.w	r2, r2, #8
 800b486:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	699a      	ldr	r2, [r3, #24]
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	f042 0210 	orr.w	r2, r2, #16
 800b496:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	681a      	ldr	r2, [r3, #0]
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	f022 0201 	bic.w	r2, r2, #1
 800b4a6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	6919      	ldr	r1, [r3, #16]
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681a      	ldr	r2, [r3, #0]
 800b4b2:	4b3c      	ldr	r3, [pc, #240]	@ (800b5a4 <SPI_CloseTransfer+0x13c>)
 800b4b4:	400b      	ands	r3, r1
 800b4b6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	689a      	ldr	r2, [r3, #8]
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800b4c6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b4ce:	b2db      	uxtb	r3, r3
 800b4d0:	2b04      	cmp	r3, #4
 800b4d2:	d014      	beq.n	800b4fe <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	f003 0320 	and.w	r3, r3, #32
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d00f      	beq.n	800b4fe <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b4e4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	699a      	ldr	r2, [r3, #24]
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	f042 0220 	orr.w	r2, r2, #32
 800b4fc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b504:	b2db      	uxtb	r3, r3
 800b506:	2b03      	cmp	r3, #3
 800b508:	d014      	beq.n	800b534 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b510:	2b00      	cmp	r3, #0
 800b512:	d00f      	beq.n	800b534 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b51a:	f043 0204 	orr.w	r2, r3, #4
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	699a      	ldr	r2, [r3, #24]
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b532:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d00f      	beq.n	800b55e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b544:	f043 0201 	orr.w	r2, r3, #1
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	699a      	ldr	r2, [r3, #24]
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b55c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b564:	2b00      	cmp	r3, #0
 800b566:	d00f      	beq.n	800b588 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b56e:	f043 0208 	orr.w	r2, r3, #8
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	699a      	ldr	r2, [r3, #24]
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b586:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	2200      	movs	r2, #0
 800b58c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2200      	movs	r2, #0
 800b594:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800b598:	bf00      	nop
 800b59a:	3714      	adds	r7, #20
 800b59c:	46bd      	mov	sp, r7
 800b59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a2:	4770      	bx	lr
 800b5a4:	fffffc90 	.word	0xfffffc90

0800b5a8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b084      	sub	sp, #16
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	60f8      	str	r0, [r7, #12]
 800b5b0:	60b9      	str	r1, [r7, #8]
 800b5b2:	603b      	str	r3, [r7, #0]
 800b5b4:	4613      	mov	r3, r2
 800b5b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b5b8:	e010      	b.n	800b5dc <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b5ba:	f7f8 f9c7 	bl	800394c <HAL_GetTick>
 800b5be:	4602      	mov	r2, r0
 800b5c0:	69bb      	ldr	r3, [r7, #24]
 800b5c2:	1ad3      	subs	r3, r2, r3
 800b5c4:	683a      	ldr	r2, [r7, #0]
 800b5c6:	429a      	cmp	r2, r3
 800b5c8:	d803      	bhi.n	800b5d2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5d0:	d102      	bne.n	800b5d8 <SPI_WaitOnFlagUntilTimeout+0x30>
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d101      	bne.n	800b5dc <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800b5d8:	2303      	movs	r3, #3
 800b5da:	e00f      	b.n	800b5fc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	695a      	ldr	r2, [r3, #20]
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	4013      	ands	r3, r2
 800b5e6:	68ba      	ldr	r2, [r7, #8]
 800b5e8:	429a      	cmp	r2, r3
 800b5ea:	bf0c      	ite	eq
 800b5ec:	2301      	moveq	r3, #1
 800b5ee:	2300      	movne	r3, #0
 800b5f0:	b2db      	uxtb	r3, r3
 800b5f2:	461a      	mov	r2, r3
 800b5f4:	79fb      	ldrb	r3, [r7, #7]
 800b5f6:	429a      	cmp	r2, r3
 800b5f8:	d0df      	beq.n	800b5ba <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800b5fa:	2300      	movs	r3, #0
}
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	3710      	adds	r7, #16
 800b600:	46bd      	mov	sp, r7
 800b602:	bd80      	pop	{r7, pc}

0800b604 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800b604:	b480      	push	{r7}
 800b606:	b085      	sub	sp, #20
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b610:	095b      	lsrs	r3, r3, #5
 800b612:	3301      	adds	r3, #1
 800b614:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	68db      	ldr	r3, [r3, #12]
 800b61a:	3301      	adds	r3, #1
 800b61c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b61e:	68bb      	ldr	r3, [r7, #8]
 800b620:	3307      	adds	r3, #7
 800b622:	08db      	lsrs	r3, r3, #3
 800b624:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b626:	68bb      	ldr	r3, [r7, #8]
 800b628:	68fa      	ldr	r2, [r7, #12]
 800b62a:	fb02 f303 	mul.w	r3, r2, r3
}
 800b62e:	4618      	mov	r0, r3
 800b630:	3714      	adds	r7, #20
 800b632:	46bd      	mov	sp, r7
 800b634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b638:	4770      	bx	lr

0800b63a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b63a:	b580      	push	{r7, lr}
 800b63c:	b082      	sub	sp, #8
 800b63e:	af00      	add	r7, sp, #0
 800b640:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d101      	bne.n	800b64c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b648:	2301      	movs	r3, #1
 800b64a:	e049      	b.n	800b6e0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b652:	b2db      	uxtb	r3, r3
 800b654:	2b00      	cmp	r3, #0
 800b656:	d106      	bne.n	800b666 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2200      	movs	r2, #0
 800b65c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b660:	6878      	ldr	r0, [r7, #4]
 800b662:	f7f7 fcd3 	bl	800300c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	2202      	movs	r2, #2
 800b66a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681a      	ldr	r2, [r3, #0]
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	3304      	adds	r3, #4
 800b676:	4619      	mov	r1, r3
 800b678:	4610      	mov	r0, r2
 800b67a:	f000 fc57 	bl	800bf2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	2201      	movs	r2, #1
 800b682:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	2201      	movs	r2, #1
 800b68a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	2201      	movs	r2, #1
 800b692:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	2201      	movs	r2, #1
 800b69a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	2201      	movs	r2, #1
 800b6a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	2201      	movs	r2, #1
 800b6aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	2201      	movs	r2, #1
 800b6b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	2201      	movs	r2, #1
 800b6ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	2201      	movs	r2, #1
 800b6c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	2201      	movs	r2, #1
 800b6ca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	2201      	movs	r2, #1
 800b6d2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	2201      	movs	r2, #1
 800b6da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b6de:	2300      	movs	r3, #0
}
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	3708      	adds	r7, #8
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd80      	pop	{r7, pc}

0800b6e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b6e8:	b480      	push	{r7}
 800b6ea:	b085      	sub	sp, #20
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b6f6:	b2db      	uxtb	r3, r3
 800b6f8:	2b01      	cmp	r3, #1
 800b6fa:	d001      	beq.n	800b700 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b6fc:	2301      	movs	r3, #1
 800b6fe:	e054      	b.n	800b7aa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	2202      	movs	r2, #2
 800b704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	68da      	ldr	r2, [r3, #12]
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	f042 0201 	orr.w	r2, r2, #1
 800b716:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	4a26      	ldr	r2, [pc, #152]	@ (800b7b8 <HAL_TIM_Base_Start_IT+0xd0>)
 800b71e:	4293      	cmp	r3, r2
 800b720:	d022      	beq.n	800b768 <HAL_TIM_Base_Start_IT+0x80>
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b72a:	d01d      	beq.n	800b768 <HAL_TIM_Base_Start_IT+0x80>
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	4a22      	ldr	r2, [pc, #136]	@ (800b7bc <HAL_TIM_Base_Start_IT+0xd4>)
 800b732:	4293      	cmp	r3, r2
 800b734:	d018      	beq.n	800b768 <HAL_TIM_Base_Start_IT+0x80>
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	4a21      	ldr	r2, [pc, #132]	@ (800b7c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800b73c:	4293      	cmp	r3, r2
 800b73e:	d013      	beq.n	800b768 <HAL_TIM_Base_Start_IT+0x80>
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	4a1f      	ldr	r2, [pc, #124]	@ (800b7c4 <HAL_TIM_Base_Start_IT+0xdc>)
 800b746:	4293      	cmp	r3, r2
 800b748:	d00e      	beq.n	800b768 <HAL_TIM_Base_Start_IT+0x80>
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	4a1e      	ldr	r2, [pc, #120]	@ (800b7c8 <HAL_TIM_Base_Start_IT+0xe0>)
 800b750:	4293      	cmp	r3, r2
 800b752:	d009      	beq.n	800b768 <HAL_TIM_Base_Start_IT+0x80>
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	4a1c      	ldr	r2, [pc, #112]	@ (800b7cc <HAL_TIM_Base_Start_IT+0xe4>)
 800b75a:	4293      	cmp	r3, r2
 800b75c:	d004      	beq.n	800b768 <HAL_TIM_Base_Start_IT+0x80>
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	4a1b      	ldr	r2, [pc, #108]	@ (800b7d0 <HAL_TIM_Base_Start_IT+0xe8>)
 800b764:	4293      	cmp	r3, r2
 800b766:	d115      	bne.n	800b794 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	689a      	ldr	r2, [r3, #8]
 800b76e:	4b19      	ldr	r3, [pc, #100]	@ (800b7d4 <HAL_TIM_Base_Start_IT+0xec>)
 800b770:	4013      	ands	r3, r2
 800b772:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	2b06      	cmp	r3, #6
 800b778:	d015      	beq.n	800b7a6 <HAL_TIM_Base_Start_IT+0xbe>
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b780:	d011      	beq.n	800b7a6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	681a      	ldr	r2, [r3, #0]
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	f042 0201 	orr.w	r2, r2, #1
 800b790:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b792:	e008      	b.n	800b7a6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	681a      	ldr	r2, [r3, #0]
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	f042 0201 	orr.w	r2, r2, #1
 800b7a2:	601a      	str	r2, [r3, #0]
 800b7a4:	e000      	b.n	800b7a8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b7a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b7a8:	2300      	movs	r3, #0
}
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	3714      	adds	r7, #20
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b4:	4770      	bx	lr
 800b7b6:	bf00      	nop
 800b7b8:	40010000 	.word	0x40010000
 800b7bc:	40000400 	.word	0x40000400
 800b7c0:	40000800 	.word	0x40000800
 800b7c4:	40000c00 	.word	0x40000c00
 800b7c8:	40010400 	.word	0x40010400
 800b7cc:	40001800 	.word	0x40001800
 800b7d0:	40014000 	.word	0x40014000
 800b7d4:	00010007 	.word	0x00010007

0800b7d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b082      	sub	sp, #8
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d101      	bne.n	800b7ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b7e6:	2301      	movs	r3, #1
 800b7e8:	e049      	b.n	800b87e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b7f0:	b2db      	uxtb	r3, r3
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d106      	bne.n	800b804 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b7fe:	6878      	ldr	r0, [r7, #4]
 800b800:	f7f7 fbb6 	bl	8002f70 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2202      	movs	r2, #2
 800b808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681a      	ldr	r2, [r3, #0]
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	3304      	adds	r3, #4
 800b814:	4619      	mov	r1, r3
 800b816:	4610      	mov	r0, r2
 800b818:	f000 fb88 	bl	800bf2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2201      	movs	r2, #1
 800b820:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2201      	movs	r2, #1
 800b828:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2201      	movs	r2, #1
 800b830:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2201      	movs	r2, #1
 800b838:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	2201      	movs	r2, #1
 800b840:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2201      	movs	r2, #1
 800b848:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2201      	movs	r2, #1
 800b850:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2201      	movs	r2, #1
 800b858:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	2201      	movs	r2, #1
 800b860:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2201      	movs	r2, #1
 800b868:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2201      	movs	r2, #1
 800b870:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	2201      	movs	r2, #1
 800b878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b87c:	2300      	movs	r3, #0
}
 800b87e:	4618      	mov	r0, r3
 800b880:	3708      	adds	r7, #8
 800b882:	46bd      	mov	sp, r7
 800b884:	bd80      	pop	{r7, pc}
	...

0800b888 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b084      	sub	sp, #16
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
 800b890:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b892:	683b      	ldr	r3, [r7, #0]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d109      	bne.n	800b8ac <HAL_TIM_PWM_Start+0x24>
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b89e:	b2db      	uxtb	r3, r3
 800b8a0:	2b01      	cmp	r3, #1
 800b8a2:	bf14      	ite	ne
 800b8a4:	2301      	movne	r3, #1
 800b8a6:	2300      	moveq	r3, #0
 800b8a8:	b2db      	uxtb	r3, r3
 800b8aa:	e03c      	b.n	800b926 <HAL_TIM_PWM_Start+0x9e>
 800b8ac:	683b      	ldr	r3, [r7, #0]
 800b8ae:	2b04      	cmp	r3, #4
 800b8b0:	d109      	bne.n	800b8c6 <HAL_TIM_PWM_Start+0x3e>
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b8b8:	b2db      	uxtb	r3, r3
 800b8ba:	2b01      	cmp	r3, #1
 800b8bc:	bf14      	ite	ne
 800b8be:	2301      	movne	r3, #1
 800b8c0:	2300      	moveq	r3, #0
 800b8c2:	b2db      	uxtb	r3, r3
 800b8c4:	e02f      	b.n	800b926 <HAL_TIM_PWM_Start+0x9e>
 800b8c6:	683b      	ldr	r3, [r7, #0]
 800b8c8:	2b08      	cmp	r3, #8
 800b8ca:	d109      	bne.n	800b8e0 <HAL_TIM_PWM_Start+0x58>
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b8d2:	b2db      	uxtb	r3, r3
 800b8d4:	2b01      	cmp	r3, #1
 800b8d6:	bf14      	ite	ne
 800b8d8:	2301      	movne	r3, #1
 800b8da:	2300      	moveq	r3, #0
 800b8dc:	b2db      	uxtb	r3, r3
 800b8de:	e022      	b.n	800b926 <HAL_TIM_PWM_Start+0x9e>
 800b8e0:	683b      	ldr	r3, [r7, #0]
 800b8e2:	2b0c      	cmp	r3, #12
 800b8e4:	d109      	bne.n	800b8fa <HAL_TIM_PWM_Start+0x72>
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b8ec:	b2db      	uxtb	r3, r3
 800b8ee:	2b01      	cmp	r3, #1
 800b8f0:	bf14      	ite	ne
 800b8f2:	2301      	movne	r3, #1
 800b8f4:	2300      	moveq	r3, #0
 800b8f6:	b2db      	uxtb	r3, r3
 800b8f8:	e015      	b.n	800b926 <HAL_TIM_PWM_Start+0x9e>
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	2b10      	cmp	r3, #16
 800b8fe:	d109      	bne.n	800b914 <HAL_TIM_PWM_Start+0x8c>
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b906:	b2db      	uxtb	r3, r3
 800b908:	2b01      	cmp	r3, #1
 800b90a:	bf14      	ite	ne
 800b90c:	2301      	movne	r3, #1
 800b90e:	2300      	moveq	r3, #0
 800b910:	b2db      	uxtb	r3, r3
 800b912:	e008      	b.n	800b926 <HAL_TIM_PWM_Start+0x9e>
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b91a:	b2db      	uxtb	r3, r3
 800b91c:	2b01      	cmp	r3, #1
 800b91e:	bf14      	ite	ne
 800b920:	2301      	movne	r3, #1
 800b922:	2300      	moveq	r3, #0
 800b924:	b2db      	uxtb	r3, r3
 800b926:	2b00      	cmp	r3, #0
 800b928:	d001      	beq.n	800b92e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800b92a:	2301      	movs	r3, #1
 800b92c:	e0a1      	b.n	800ba72 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d104      	bne.n	800b93e <HAL_TIM_PWM_Start+0xb6>
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2202      	movs	r2, #2
 800b938:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b93c:	e023      	b.n	800b986 <HAL_TIM_PWM_Start+0xfe>
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	2b04      	cmp	r3, #4
 800b942:	d104      	bne.n	800b94e <HAL_TIM_PWM_Start+0xc6>
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2202      	movs	r2, #2
 800b948:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b94c:	e01b      	b.n	800b986 <HAL_TIM_PWM_Start+0xfe>
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	2b08      	cmp	r3, #8
 800b952:	d104      	bne.n	800b95e <HAL_TIM_PWM_Start+0xd6>
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	2202      	movs	r2, #2
 800b958:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b95c:	e013      	b.n	800b986 <HAL_TIM_PWM_Start+0xfe>
 800b95e:	683b      	ldr	r3, [r7, #0]
 800b960:	2b0c      	cmp	r3, #12
 800b962:	d104      	bne.n	800b96e <HAL_TIM_PWM_Start+0xe6>
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2202      	movs	r2, #2
 800b968:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b96c:	e00b      	b.n	800b986 <HAL_TIM_PWM_Start+0xfe>
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	2b10      	cmp	r3, #16
 800b972:	d104      	bne.n	800b97e <HAL_TIM_PWM_Start+0xf6>
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2202      	movs	r2, #2
 800b978:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b97c:	e003      	b.n	800b986 <HAL_TIM_PWM_Start+0xfe>
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	2202      	movs	r2, #2
 800b982:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	2201      	movs	r2, #1
 800b98c:	6839      	ldr	r1, [r7, #0]
 800b98e:	4618      	mov	r0, r3
 800b990:	f000 fe48 	bl	800c624 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	4a38      	ldr	r2, [pc, #224]	@ (800ba7c <HAL_TIM_PWM_Start+0x1f4>)
 800b99a:	4293      	cmp	r3, r2
 800b99c:	d013      	beq.n	800b9c6 <HAL_TIM_PWM_Start+0x13e>
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	4a37      	ldr	r2, [pc, #220]	@ (800ba80 <HAL_TIM_PWM_Start+0x1f8>)
 800b9a4:	4293      	cmp	r3, r2
 800b9a6:	d00e      	beq.n	800b9c6 <HAL_TIM_PWM_Start+0x13e>
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	4a35      	ldr	r2, [pc, #212]	@ (800ba84 <HAL_TIM_PWM_Start+0x1fc>)
 800b9ae:	4293      	cmp	r3, r2
 800b9b0:	d009      	beq.n	800b9c6 <HAL_TIM_PWM_Start+0x13e>
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	4a34      	ldr	r2, [pc, #208]	@ (800ba88 <HAL_TIM_PWM_Start+0x200>)
 800b9b8:	4293      	cmp	r3, r2
 800b9ba:	d004      	beq.n	800b9c6 <HAL_TIM_PWM_Start+0x13e>
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	4a32      	ldr	r2, [pc, #200]	@ (800ba8c <HAL_TIM_PWM_Start+0x204>)
 800b9c2:	4293      	cmp	r3, r2
 800b9c4:	d101      	bne.n	800b9ca <HAL_TIM_PWM_Start+0x142>
 800b9c6:	2301      	movs	r3, #1
 800b9c8:	e000      	b.n	800b9cc <HAL_TIM_PWM_Start+0x144>
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d007      	beq.n	800b9e0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b9de:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	4a25      	ldr	r2, [pc, #148]	@ (800ba7c <HAL_TIM_PWM_Start+0x1f4>)
 800b9e6:	4293      	cmp	r3, r2
 800b9e8:	d022      	beq.n	800ba30 <HAL_TIM_PWM_Start+0x1a8>
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b9f2:	d01d      	beq.n	800ba30 <HAL_TIM_PWM_Start+0x1a8>
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	4a25      	ldr	r2, [pc, #148]	@ (800ba90 <HAL_TIM_PWM_Start+0x208>)
 800b9fa:	4293      	cmp	r3, r2
 800b9fc:	d018      	beq.n	800ba30 <HAL_TIM_PWM_Start+0x1a8>
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	4a24      	ldr	r2, [pc, #144]	@ (800ba94 <HAL_TIM_PWM_Start+0x20c>)
 800ba04:	4293      	cmp	r3, r2
 800ba06:	d013      	beq.n	800ba30 <HAL_TIM_PWM_Start+0x1a8>
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	4a22      	ldr	r2, [pc, #136]	@ (800ba98 <HAL_TIM_PWM_Start+0x210>)
 800ba0e:	4293      	cmp	r3, r2
 800ba10:	d00e      	beq.n	800ba30 <HAL_TIM_PWM_Start+0x1a8>
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	4a1a      	ldr	r2, [pc, #104]	@ (800ba80 <HAL_TIM_PWM_Start+0x1f8>)
 800ba18:	4293      	cmp	r3, r2
 800ba1a:	d009      	beq.n	800ba30 <HAL_TIM_PWM_Start+0x1a8>
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	4a1e      	ldr	r2, [pc, #120]	@ (800ba9c <HAL_TIM_PWM_Start+0x214>)
 800ba22:	4293      	cmp	r3, r2
 800ba24:	d004      	beq.n	800ba30 <HAL_TIM_PWM_Start+0x1a8>
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	4a16      	ldr	r2, [pc, #88]	@ (800ba84 <HAL_TIM_PWM_Start+0x1fc>)
 800ba2c:	4293      	cmp	r3, r2
 800ba2e:	d115      	bne.n	800ba5c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	689a      	ldr	r2, [r3, #8]
 800ba36:	4b1a      	ldr	r3, [pc, #104]	@ (800baa0 <HAL_TIM_PWM_Start+0x218>)
 800ba38:	4013      	ands	r3, r2
 800ba3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	2b06      	cmp	r3, #6
 800ba40:	d015      	beq.n	800ba6e <HAL_TIM_PWM_Start+0x1e6>
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ba48:	d011      	beq.n	800ba6e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	681a      	ldr	r2, [r3, #0]
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	f042 0201 	orr.w	r2, r2, #1
 800ba58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba5a:	e008      	b.n	800ba6e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	681a      	ldr	r2, [r3, #0]
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	f042 0201 	orr.w	r2, r2, #1
 800ba6a:	601a      	str	r2, [r3, #0]
 800ba6c:	e000      	b.n	800ba70 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba6e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ba70:	2300      	movs	r3, #0
}
 800ba72:	4618      	mov	r0, r3
 800ba74:	3710      	adds	r7, #16
 800ba76:	46bd      	mov	sp, r7
 800ba78:	bd80      	pop	{r7, pc}
 800ba7a:	bf00      	nop
 800ba7c:	40010000 	.word	0x40010000
 800ba80:	40010400 	.word	0x40010400
 800ba84:	40014000 	.word	0x40014000
 800ba88:	40014400 	.word	0x40014400
 800ba8c:	40014800 	.word	0x40014800
 800ba90:	40000400 	.word	0x40000400
 800ba94:	40000800 	.word	0x40000800
 800ba98:	40000c00 	.word	0x40000c00
 800ba9c:	40001800 	.word	0x40001800
 800baa0:	00010007 	.word	0x00010007

0800baa4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b084      	sub	sp, #16
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	68db      	ldr	r3, [r3, #12]
 800bab2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	691b      	ldr	r3, [r3, #16]
 800baba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800babc:	68bb      	ldr	r3, [r7, #8]
 800babe:	f003 0302 	and.w	r3, r3, #2
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d020      	beq.n	800bb08 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	f003 0302 	and.w	r3, r3, #2
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d01b      	beq.n	800bb08 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	f06f 0202 	mvn.w	r2, #2
 800bad8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	2201      	movs	r2, #1
 800bade:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	699b      	ldr	r3, [r3, #24]
 800bae6:	f003 0303 	and.w	r3, r3, #3
 800baea:	2b00      	cmp	r3, #0
 800baec:	d003      	beq.n	800baf6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	f000 f9fe 	bl	800bef0 <HAL_TIM_IC_CaptureCallback>
 800baf4:	e005      	b.n	800bb02 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800baf6:	6878      	ldr	r0, [r7, #4]
 800baf8:	f000 f9f0 	bl	800bedc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bafc:	6878      	ldr	r0, [r7, #4]
 800bafe:	f000 fa01 	bl	800bf04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	2200      	movs	r2, #0
 800bb06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800bb08:	68bb      	ldr	r3, [r7, #8]
 800bb0a:	f003 0304 	and.w	r3, r3, #4
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d020      	beq.n	800bb54 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	f003 0304 	and.w	r3, r3, #4
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d01b      	beq.n	800bb54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	f06f 0204 	mvn.w	r2, #4
 800bb24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	2202      	movs	r2, #2
 800bb2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	699b      	ldr	r3, [r3, #24]
 800bb32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d003      	beq.n	800bb42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb3a:	6878      	ldr	r0, [r7, #4]
 800bb3c:	f000 f9d8 	bl	800bef0 <HAL_TIM_IC_CaptureCallback>
 800bb40:	e005      	b.n	800bb4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb42:	6878      	ldr	r0, [r7, #4]
 800bb44:	f000 f9ca 	bl	800bedc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb48:	6878      	ldr	r0, [r7, #4]
 800bb4a:	f000 f9db 	bl	800bf04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	2200      	movs	r2, #0
 800bb52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800bb54:	68bb      	ldr	r3, [r7, #8]
 800bb56:	f003 0308 	and.w	r3, r3, #8
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d020      	beq.n	800bba0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	f003 0308 	and.w	r3, r3, #8
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d01b      	beq.n	800bba0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	f06f 0208 	mvn.w	r2, #8
 800bb70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	2204      	movs	r2, #4
 800bb76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	69db      	ldr	r3, [r3, #28]
 800bb7e:	f003 0303 	and.w	r3, r3, #3
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d003      	beq.n	800bb8e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb86:	6878      	ldr	r0, [r7, #4]
 800bb88:	f000 f9b2 	bl	800bef0 <HAL_TIM_IC_CaptureCallback>
 800bb8c:	e005      	b.n	800bb9a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb8e:	6878      	ldr	r0, [r7, #4]
 800bb90:	f000 f9a4 	bl	800bedc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb94:	6878      	ldr	r0, [r7, #4]
 800bb96:	f000 f9b5 	bl	800bf04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800bba0:	68bb      	ldr	r3, [r7, #8]
 800bba2:	f003 0310 	and.w	r3, r3, #16
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d020      	beq.n	800bbec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	f003 0310 	and.w	r3, r3, #16
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d01b      	beq.n	800bbec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	f06f 0210 	mvn.w	r2, #16
 800bbbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	2208      	movs	r2, #8
 800bbc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	69db      	ldr	r3, [r3, #28]
 800bbca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d003      	beq.n	800bbda <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bbd2:	6878      	ldr	r0, [r7, #4]
 800bbd4:	f000 f98c 	bl	800bef0 <HAL_TIM_IC_CaptureCallback>
 800bbd8:	e005      	b.n	800bbe6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bbda:	6878      	ldr	r0, [r7, #4]
 800bbdc:	f000 f97e 	bl	800bedc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bbe0:	6878      	ldr	r0, [r7, #4]
 800bbe2:	f000 f98f 	bl	800bf04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	2200      	movs	r2, #0
 800bbea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800bbec:	68bb      	ldr	r3, [r7, #8]
 800bbee:	f003 0301 	and.w	r3, r3, #1
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d00c      	beq.n	800bc10 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	f003 0301 	and.w	r3, r3, #1
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d007      	beq.n	800bc10 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	f06f 0201 	mvn.w	r2, #1
 800bc08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bc0a:	6878      	ldr	r0, [r7, #4]
 800bc0c:	f7f6 fd34 	bl	8002678 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bc10:	68bb      	ldr	r3, [r7, #8]
 800bc12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d104      	bne.n	800bc24 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800bc1a:	68bb      	ldr	r3, [r7, #8]
 800bc1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d00c      	beq.n	800bc3e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d007      	beq.n	800bc3e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800bc36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bc38:	6878      	ldr	r0, [r7, #4]
 800bc3a:	f000 fdb1 	bl	800c7a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800bc3e:	68bb      	ldr	r3, [r7, #8]
 800bc40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d00c      	beq.n	800bc62 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d007      	beq.n	800bc62 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800bc5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bc5c:	6878      	ldr	r0, [r7, #4]
 800bc5e:	f000 fda9 	bl	800c7b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800bc62:	68bb      	ldr	r3, [r7, #8]
 800bc64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d00c      	beq.n	800bc86 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d007      	beq.n	800bc86 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800bc7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bc80:	6878      	ldr	r0, [r7, #4]
 800bc82:	f000 f949 	bl	800bf18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800bc86:	68bb      	ldr	r3, [r7, #8]
 800bc88:	f003 0320 	and.w	r3, r3, #32
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d00c      	beq.n	800bcaa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	f003 0320 	and.w	r3, r3, #32
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d007      	beq.n	800bcaa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	f06f 0220 	mvn.w	r2, #32
 800bca2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bca4:	6878      	ldr	r0, [r7, #4]
 800bca6:	f000 fd71 	bl	800c78c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bcaa:	bf00      	nop
 800bcac:	3710      	adds	r7, #16
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	bd80      	pop	{r7, pc}
	...

0800bcb4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b086      	sub	sp, #24
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	60f8      	str	r0, [r7, #12]
 800bcbc:	60b9      	str	r1, [r7, #8]
 800bcbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bcca:	2b01      	cmp	r3, #1
 800bccc:	d101      	bne.n	800bcd2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800bcce:	2302      	movs	r3, #2
 800bcd0:	e0ff      	b.n	800bed2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	2201      	movs	r2, #1
 800bcd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	2b14      	cmp	r3, #20
 800bcde:	f200 80f0 	bhi.w	800bec2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800bce2:	a201      	add	r2, pc, #4	@ (adr r2, 800bce8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bce8:	0800bd3d 	.word	0x0800bd3d
 800bcec:	0800bec3 	.word	0x0800bec3
 800bcf0:	0800bec3 	.word	0x0800bec3
 800bcf4:	0800bec3 	.word	0x0800bec3
 800bcf8:	0800bd7d 	.word	0x0800bd7d
 800bcfc:	0800bec3 	.word	0x0800bec3
 800bd00:	0800bec3 	.word	0x0800bec3
 800bd04:	0800bec3 	.word	0x0800bec3
 800bd08:	0800bdbf 	.word	0x0800bdbf
 800bd0c:	0800bec3 	.word	0x0800bec3
 800bd10:	0800bec3 	.word	0x0800bec3
 800bd14:	0800bec3 	.word	0x0800bec3
 800bd18:	0800bdff 	.word	0x0800bdff
 800bd1c:	0800bec3 	.word	0x0800bec3
 800bd20:	0800bec3 	.word	0x0800bec3
 800bd24:	0800bec3 	.word	0x0800bec3
 800bd28:	0800be41 	.word	0x0800be41
 800bd2c:	0800bec3 	.word	0x0800bec3
 800bd30:	0800bec3 	.word	0x0800bec3
 800bd34:	0800bec3 	.word	0x0800bec3
 800bd38:	0800be81 	.word	0x0800be81
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	68b9      	ldr	r1, [r7, #8]
 800bd42:	4618      	mov	r0, r3
 800bd44:	f000 f998 	bl	800c078 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	699a      	ldr	r2, [r3, #24]
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	f042 0208 	orr.w	r2, r2, #8
 800bd56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	699a      	ldr	r2, [r3, #24]
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	f022 0204 	bic.w	r2, r2, #4
 800bd66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	6999      	ldr	r1, [r3, #24]
 800bd6e:	68bb      	ldr	r3, [r7, #8]
 800bd70:	691a      	ldr	r2, [r3, #16]
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	430a      	orrs	r2, r1
 800bd78:	619a      	str	r2, [r3, #24]
      break;
 800bd7a:	e0a5      	b.n	800bec8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	68b9      	ldr	r1, [r7, #8]
 800bd82:	4618      	mov	r0, r3
 800bd84:	f000 fa08 	bl	800c198 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	699a      	ldr	r2, [r3, #24]
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bd96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	699a      	ldr	r2, [r3, #24]
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bda6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	6999      	ldr	r1, [r3, #24]
 800bdae:	68bb      	ldr	r3, [r7, #8]
 800bdb0:	691b      	ldr	r3, [r3, #16]
 800bdb2:	021a      	lsls	r2, r3, #8
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	430a      	orrs	r2, r1
 800bdba:	619a      	str	r2, [r3, #24]
      break;
 800bdbc:	e084      	b.n	800bec8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	68b9      	ldr	r1, [r7, #8]
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	f000 fa71 	bl	800c2ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	69da      	ldr	r2, [r3, #28]
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	f042 0208 	orr.w	r2, r2, #8
 800bdd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	69da      	ldr	r2, [r3, #28]
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	f022 0204 	bic.w	r2, r2, #4
 800bde8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	69d9      	ldr	r1, [r3, #28]
 800bdf0:	68bb      	ldr	r3, [r7, #8]
 800bdf2:	691a      	ldr	r2, [r3, #16]
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	430a      	orrs	r2, r1
 800bdfa:	61da      	str	r2, [r3, #28]
      break;
 800bdfc:	e064      	b.n	800bec8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	68b9      	ldr	r1, [r7, #8]
 800be04:	4618      	mov	r0, r3
 800be06:	f000 fad9 	bl	800c3bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	69da      	ldr	r2, [r3, #28]
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800be18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	69da      	ldr	r2, [r3, #28]
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800be28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	69d9      	ldr	r1, [r3, #28]
 800be30:	68bb      	ldr	r3, [r7, #8]
 800be32:	691b      	ldr	r3, [r3, #16]
 800be34:	021a      	lsls	r2, r3, #8
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	430a      	orrs	r2, r1
 800be3c:	61da      	str	r2, [r3, #28]
      break;
 800be3e:	e043      	b.n	800bec8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	68b9      	ldr	r1, [r7, #8]
 800be46:	4618      	mov	r0, r3
 800be48:	f000 fb22 	bl	800c490 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	f042 0208 	orr.w	r2, r2, #8
 800be5a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	f022 0204 	bic.w	r2, r2, #4
 800be6a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800be72:	68bb      	ldr	r3, [r7, #8]
 800be74:	691a      	ldr	r2, [r3, #16]
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	430a      	orrs	r2, r1
 800be7c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800be7e:	e023      	b.n	800bec8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	68b9      	ldr	r1, [r7, #8]
 800be86:	4618      	mov	r0, r3
 800be88:	f000 fb66 	bl	800c558 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800be9a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800beaa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800beb2:	68bb      	ldr	r3, [r7, #8]
 800beb4:	691b      	ldr	r3, [r3, #16]
 800beb6:	021a      	lsls	r2, r3, #8
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	430a      	orrs	r2, r1
 800bebe:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800bec0:	e002      	b.n	800bec8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800bec2:	2301      	movs	r3, #1
 800bec4:	75fb      	strb	r3, [r7, #23]
      break;
 800bec6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	2200      	movs	r2, #0
 800becc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bed0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bed2:	4618      	mov	r0, r3
 800bed4:	3718      	adds	r7, #24
 800bed6:	46bd      	mov	sp, r7
 800bed8:	bd80      	pop	{r7, pc}
 800beda:	bf00      	nop

0800bedc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bedc:	b480      	push	{r7}
 800bede:	b083      	sub	sp, #12
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bee4:	bf00      	nop
 800bee6:	370c      	adds	r7, #12
 800bee8:	46bd      	mov	sp, r7
 800beea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beee:	4770      	bx	lr

0800bef0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bef0:	b480      	push	{r7}
 800bef2:	b083      	sub	sp, #12
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bef8:	bf00      	nop
 800befa:	370c      	adds	r7, #12
 800befc:	46bd      	mov	sp, r7
 800befe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf02:	4770      	bx	lr

0800bf04 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bf04:	b480      	push	{r7}
 800bf06:	b083      	sub	sp, #12
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bf0c:	bf00      	nop
 800bf0e:	370c      	adds	r7, #12
 800bf10:	46bd      	mov	sp, r7
 800bf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf16:	4770      	bx	lr

0800bf18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bf18:	b480      	push	{r7}
 800bf1a:	b083      	sub	sp, #12
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bf20:	bf00      	nop
 800bf22:	370c      	adds	r7, #12
 800bf24:	46bd      	mov	sp, r7
 800bf26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2a:	4770      	bx	lr

0800bf2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bf2c:	b480      	push	{r7}
 800bf2e:	b085      	sub	sp, #20
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
 800bf34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	4a46      	ldr	r2, [pc, #280]	@ (800c058 <TIM_Base_SetConfig+0x12c>)
 800bf40:	4293      	cmp	r3, r2
 800bf42:	d013      	beq.n	800bf6c <TIM_Base_SetConfig+0x40>
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bf4a:	d00f      	beq.n	800bf6c <TIM_Base_SetConfig+0x40>
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	4a43      	ldr	r2, [pc, #268]	@ (800c05c <TIM_Base_SetConfig+0x130>)
 800bf50:	4293      	cmp	r3, r2
 800bf52:	d00b      	beq.n	800bf6c <TIM_Base_SetConfig+0x40>
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	4a42      	ldr	r2, [pc, #264]	@ (800c060 <TIM_Base_SetConfig+0x134>)
 800bf58:	4293      	cmp	r3, r2
 800bf5a:	d007      	beq.n	800bf6c <TIM_Base_SetConfig+0x40>
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	4a41      	ldr	r2, [pc, #260]	@ (800c064 <TIM_Base_SetConfig+0x138>)
 800bf60:	4293      	cmp	r3, r2
 800bf62:	d003      	beq.n	800bf6c <TIM_Base_SetConfig+0x40>
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	4a40      	ldr	r2, [pc, #256]	@ (800c068 <TIM_Base_SetConfig+0x13c>)
 800bf68:	4293      	cmp	r3, r2
 800bf6a:	d108      	bne.n	800bf7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bf72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bf74:	683b      	ldr	r3, [r7, #0]
 800bf76:	685b      	ldr	r3, [r3, #4]
 800bf78:	68fa      	ldr	r2, [r7, #12]
 800bf7a:	4313      	orrs	r3, r2
 800bf7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	4a35      	ldr	r2, [pc, #212]	@ (800c058 <TIM_Base_SetConfig+0x12c>)
 800bf82:	4293      	cmp	r3, r2
 800bf84:	d01f      	beq.n	800bfc6 <TIM_Base_SetConfig+0x9a>
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bf8c:	d01b      	beq.n	800bfc6 <TIM_Base_SetConfig+0x9a>
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	4a32      	ldr	r2, [pc, #200]	@ (800c05c <TIM_Base_SetConfig+0x130>)
 800bf92:	4293      	cmp	r3, r2
 800bf94:	d017      	beq.n	800bfc6 <TIM_Base_SetConfig+0x9a>
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	4a31      	ldr	r2, [pc, #196]	@ (800c060 <TIM_Base_SetConfig+0x134>)
 800bf9a:	4293      	cmp	r3, r2
 800bf9c:	d013      	beq.n	800bfc6 <TIM_Base_SetConfig+0x9a>
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	4a30      	ldr	r2, [pc, #192]	@ (800c064 <TIM_Base_SetConfig+0x138>)
 800bfa2:	4293      	cmp	r3, r2
 800bfa4:	d00f      	beq.n	800bfc6 <TIM_Base_SetConfig+0x9a>
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	4a2f      	ldr	r2, [pc, #188]	@ (800c068 <TIM_Base_SetConfig+0x13c>)
 800bfaa:	4293      	cmp	r3, r2
 800bfac:	d00b      	beq.n	800bfc6 <TIM_Base_SetConfig+0x9a>
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	4a2e      	ldr	r2, [pc, #184]	@ (800c06c <TIM_Base_SetConfig+0x140>)
 800bfb2:	4293      	cmp	r3, r2
 800bfb4:	d007      	beq.n	800bfc6 <TIM_Base_SetConfig+0x9a>
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	4a2d      	ldr	r2, [pc, #180]	@ (800c070 <TIM_Base_SetConfig+0x144>)
 800bfba:	4293      	cmp	r3, r2
 800bfbc:	d003      	beq.n	800bfc6 <TIM_Base_SetConfig+0x9a>
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	4a2c      	ldr	r2, [pc, #176]	@ (800c074 <TIM_Base_SetConfig+0x148>)
 800bfc2:	4293      	cmp	r3, r2
 800bfc4:	d108      	bne.n	800bfd8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bfcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bfce:	683b      	ldr	r3, [r7, #0]
 800bfd0:	68db      	ldr	r3, [r3, #12]
 800bfd2:	68fa      	ldr	r2, [r7, #12]
 800bfd4:	4313      	orrs	r3, r2
 800bfd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bfde:	683b      	ldr	r3, [r7, #0]
 800bfe0:	695b      	ldr	r3, [r3, #20]
 800bfe2:	4313      	orrs	r3, r2
 800bfe4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	68fa      	ldr	r2, [r7, #12]
 800bfea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bfec:	683b      	ldr	r3, [r7, #0]
 800bfee:	689a      	ldr	r2, [r3, #8]
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	681a      	ldr	r2, [r3, #0]
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	4a16      	ldr	r2, [pc, #88]	@ (800c058 <TIM_Base_SetConfig+0x12c>)
 800c000:	4293      	cmp	r3, r2
 800c002:	d00f      	beq.n	800c024 <TIM_Base_SetConfig+0xf8>
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	4a18      	ldr	r2, [pc, #96]	@ (800c068 <TIM_Base_SetConfig+0x13c>)
 800c008:	4293      	cmp	r3, r2
 800c00a:	d00b      	beq.n	800c024 <TIM_Base_SetConfig+0xf8>
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	4a17      	ldr	r2, [pc, #92]	@ (800c06c <TIM_Base_SetConfig+0x140>)
 800c010:	4293      	cmp	r3, r2
 800c012:	d007      	beq.n	800c024 <TIM_Base_SetConfig+0xf8>
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	4a16      	ldr	r2, [pc, #88]	@ (800c070 <TIM_Base_SetConfig+0x144>)
 800c018:	4293      	cmp	r3, r2
 800c01a:	d003      	beq.n	800c024 <TIM_Base_SetConfig+0xf8>
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	4a15      	ldr	r2, [pc, #84]	@ (800c074 <TIM_Base_SetConfig+0x148>)
 800c020:	4293      	cmp	r3, r2
 800c022:	d103      	bne.n	800c02c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c024:	683b      	ldr	r3, [r7, #0]
 800c026:	691a      	ldr	r2, [r3, #16]
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2201      	movs	r2, #1
 800c030:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	691b      	ldr	r3, [r3, #16]
 800c036:	f003 0301 	and.w	r3, r3, #1
 800c03a:	2b01      	cmp	r3, #1
 800c03c:	d105      	bne.n	800c04a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	691b      	ldr	r3, [r3, #16]
 800c042:	f023 0201 	bic.w	r2, r3, #1
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	611a      	str	r2, [r3, #16]
  }
}
 800c04a:	bf00      	nop
 800c04c:	3714      	adds	r7, #20
 800c04e:	46bd      	mov	sp, r7
 800c050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c054:	4770      	bx	lr
 800c056:	bf00      	nop
 800c058:	40010000 	.word	0x40010000
 800c05c:	40000400 	.word	0x40000400
 800c060:	40000800 	.word	0x40000800
 800c064:	40000c00 	.word	0x40000c00
 800c068:	40010400 	.word	0x40010400
 800c06c:	40014000 	.word	0x40014000
 800c070:	40014400 	.word	0x40014400
 800c074:	40014800 	.word	0x40014800

0800c078 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c078:	b480      	push	{r7}
 800c07a:	b087      	sub	sp, #28
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
 800c080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	6a1b      	ldr	r3, [r3, #32]
 800c086:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	6a1b      	ldr	r3, [r3, #32]
 800c08c:	f023 0201 	bic.w	r2, r3, #1
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	685b      	ldr	r3, [r3, #4]
 800c098:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	699b      	ldr	r3, [r3, #24]
 800c09e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c0a0:	68fa      	ldr	r2, [r7, #12]
 800c0a2:	4b37      	ldr	r3, [pc, #220]	@ (800c180 <TIM_OC1_SetConfig+0x108>)
 800c0a4:	4013      	ands	r3, r2
 800c0a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	f023 0303 	bic.w	r3, r3, #3
 800c0ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c0b0:	683b      	ldr	r3, [r7, #0]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	68fa      	ldr	r2, [r7, #12]
 800c0b6:	4313      	orrs	r3, r2
 800c0b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c0ba:	697b      	ldr	r3, [r7, #20]
 800c0bc:	f023 0302 	bic.w	r3, r3, #2
 800c0c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c0c2:	683b      	ldr	r3, [r7, #0]
 800c0c4:	689b      	ldr	r3, [r3, #8]
 800c0c6:	697a      	ldr	r2, [r7, #20]
 800c0c8:	4313      	orrs	r3, r2
 800c0ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	4a2d      	ldr	r2, [pc, #180]	@ (800c184 <TIM_OC1_SetConfig+0x10c>)
 800c0d0:	4293      	cmp	r3, r2
 800c0d2:	d00f      	beq.n	800c0f4 <TIM_OC1_SetConfig+0x7c>
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	4a2c      	ldr	r2, [pc, #176]	@ (800c188 <TIM_OC1_SetConfig+0x110>)
 800c0d8:	4293      	cmp	r3, r2
 800c0da:	d00b      	beq.n	800c0f4 <TIM_OC1_SetConfig+0x7c>
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	4a2b      	ldr	r2, [pc, #172]	@ (800c18c <TIM_OC1_SetConfig+0x114>)
 800c0e0:	4293      	cmp	r3, r2
 800c0e2:	d007      	beq.n	800c0f4 <TIM_OC1_SetConfig+0x7c>
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	4a2a      	ldr	r2, [pc, #168]	@ (800c190 <TIM_OC1_SetConfig+0x118>)
 800c0e8:	4293      	cmp	r3, r2
 800c0ea:	d003      	beq.n	800c0f4 <TIM_OC1_SetConfig+0x7c>
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	4a29      	ldr	r2, [pc, #164]	@ (800c194 <TIM_OC1_SetConfig+0x11c>)
 800c0f0:	4293      	cmp	r3, r2
 800c0f2:	d10c      	bne.n	800c10e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c0f4:	697b      	ldr	r3, [r7, #20]
 800c0f6:	f023 0308 	bic.w	r3, r3, #8
 800c0fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	68db      	ldr	r3, [r3, #12]
 800c100:	697a      	ldr	r2, [r7, #20]
 800c102:	4313      	orrs	r3, r2
 800c104:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c106:	697b      	ldr	r3, [r7, #20]
 800c108:	f023 0304 	bic.w	r3, r3, #4
 800c10c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	4a1c      	ldr	r2, [pc, #112]	@ (800c184 <TIM_OC1_SetConfig+0x10c>)
 800c112:	4293      	cmp	r3, r2
 800c114:	d00f      	beq.n	800c136 <TIM_OC1_SetConfig+0xbe>
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	4a1b      	ldr	r2, [pc, #108]	@ (800c188 <TIM_OC1_SetConfig+0x110>)
 800c11a:	4293      	cmp	r3, r2
 800c11c:	d00b      	beq.n	800c136 <TIM_OC1_SetConfig+0xbe>
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	4a1a      	ldr	r2, [pc, #104]	@ (800c18c <TIM_OC1_SetConfig+0x114>)
 800c122:	4293      	cmp	r3, r2
 800c124:	d007      	beq.n	800c136 <TIM_OC1_SetConfig+0xbe>
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	4a19      	ldr	r2, [pc, #100]	@ (800c190 <TIM_OC1_SetConfig+0x118>)
 800c12a:	4293      	cmp	r3, r2
 800c12c:	d003      	beq.n	800c136 <TIM_OC1_SetConfig+0xbe>
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	4a18      	ldr	r2, [pc, #96]	@ (800c194 <TIM_OC1_SetConfig+0x11c>)
 800c132:	4293      	cmp	r3, r2
 800c134:	d111      	bne.n	800c15a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c136:	693b      	ldr	r3, [r7, #16]
 800c138:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c13c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c13e:	693b      	ldr	r3, [r7, #16]
 800c140:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c144:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c146:	683b      	ldr	r3, [r7, #0]
 800c148:	695b      	ldr	r3, [r3, #20]
 800c14a:	693a      	ldr	r2, [r7, #16]
 800c14c:	4313      	orrs	r3, r2
 800c14e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c150:	683b      	ldr	r3, [r7, #0]
 800c152:	699b      	ldr	r3, [r3, #24]
 800c154:	693a      	ldr	r2, [r7, #16]
 800c156:	4313      	orrs	r3, r2
 800c158:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	693a      	ldr	r2, [r7, #16]
 800c15e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	68fa      	ldr	r2, [r7, #12]
 800c164:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c166:	683b      	ldr	r3, [r7, #0]
 800c168:	685a      	ldr	r2, [r3, #4]
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	697a      	ldr	r2, [r7, #20]
 800c172:	621a      	str	r2, [r3, #32]
}
 800c174:	bf00      	nop
 800c176:	371c      	adds	r7, #28
 800c178:	46bd      	mov	sp, r7
 800c17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17e:	4770      	bx	lr
 800c180:	fffeff8f 	.word	0xfffeff8f
 800c184:	40010000 	.word	0x40010000
 800c188:	40010400 	.word	0x40010400
 800c18c:	40014000 	.word	0x40014000
 800c190:	40014400 	.word	0x40014400
 800c194:	40014800 	.word	0x40014800

0800c198 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c198:	b480      	push	{r7}
 800c19a:	b087      	sub	sp, #28
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
 800c1a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	6a1b      	ldr	r3, [r3, #32]
 800c1a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	6a1b      	ldr	r3, [r3, #32]
 800c1ac:	f023 0210 	bic.w	r2, r3, #16
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	685b      	ldr	r3, [r3, #4]
 800c1b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	699b      	ldr	r3, [r3, #24]
 800c1be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c1c0:	68fa      	ldr	r2, [r7, #12]
 800c1c2:	4b34      	ldr	r3, [pc, #208]	@ (800c294 <TIM_OC2_SetConfig+0xfc>)
 800c1c4:	4013      	ands	r3, r2
 800c1c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c1ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c1d0:	683b      	ldr	r3, [r7, #0]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	021b      	lsls	r3, r3, #8
 800c1d6:	68fa      	ldr	r2, [r7, #12]
 800c1d8:	4313      	orrs	r3, r2
 800c1da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c1dc:	697b      	ldr	r3, [r7, #20]
 800c1de:	f023 0320 	bic.w	r3, r3, #32
 800c1e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c1e4:	683b      	ldr	r3, [r7, #0]
 800c1e6:	689b      	ldr	r3, [r3, #8]
 800c1e8:	011b      	lsls	r3, r3, #4
 800c1ea:	697a      	ldr	r2, [r7, #20]
 800c1ec:	4313      	orrs	r3, r2
 800c1ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	4a29      	ldr	r2, [pc, #164]	@ (800c298 <TIM_OC2_SetConfig+0x100>)
 800c1f4:	4293      	cmp	r3, r2
 800c1f6:	d003      	beq.n	800c200 <TIM_OC2_SetConfig+0x68>
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	4a28      	ldr	r2, [pc, #160]	@ (800c29c <TIM_OC2_SetConfig+0x104>)
 800c1fc:	4293      	cmp	r3, r2
 800c1fe:	d10d      	bne.n	800c21c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c200:	697b      	ldr	r3, [r7, #20]
 800c202:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c206:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c208:	683b      	ldr	r3, [r7, #0]
 800c20a:	68db      	ldr	r3, [r3, #12]
 800c20c:	011b      	lsls	r3, r3, #4
 800c20e:	697a      	ldr	r2, [r7, #20]
 800c210:	4313      	orrs	r3, r2
 800c212:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c214:	697b      	ldr	r3, [r7, #20]
 800c216:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c21a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	4a1e      	ldr	r2, [pc, #120]	@ (800c298 <TIM_OC2_SetConfig+0x100>)
 800c220:	4293      	cmp	r3, r2
 800c222:	d00f      	beq.n	800c244 <TIM_OC2_SetConfig+0xac>
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	4a1d      	ldr	r2, [pc, #116]	@ (800c29c <TIM_OC2_SetConfig+0x104>)
 800c228:	4293      	cmp	r3, r2
 800c22a:	d00b      	beq.n	800c244 <TIM_OC2_SetConfig+0xac>
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	4a1c      	ldr	r2, [pc, #112]	@ (800c2a0 <TIM_OC2_SetConfig+0x108>)
 800c230:	4293      	cmp	r3, r2
 800c232:	d007      	beq.n	800c244 <TIM_OC2_SetConfig+0xac>
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	4a1b      	ldr	r2, [pc, #108]	@ (800c2a4 <TIM_OC2_SetConfig+0x10c>)
 800c238:	4293      	cmp	r3, r2
 800c23a:	d003      	beq.n	800c244 <TIM_OC2_SetConfig+0xac>
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	4a1a      	ldr	r2, [pc, #104]	@ (800c2a8 <TIM_OC2_SetConfig+0x110>)
 800c240:	4293      	cmp	r3, r2
 800c242:	d113      	bne.n	800c26c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c244:	693b      	ldr	r3, [r7, #16]
 800c246:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c24a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c24c:	693b      	ldr	r3, [r7, #16]
 800c24e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c252:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c254:	683b      	ldr	r3, [r7, #0]
 800c256:	695b      	ldr	r3, [r3, #20]
 800c258:	009b      	lsls	r3, r3, #2
 800c25a:	693a      	ldr	r2, [r7, #16]
 800c25c:	4313      	orrs	r3, r2
 800c25e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c260:	683b      	ldr	r3, [r7, #0]
 800c262:	699b      	ldr	r3, [r3, #24]
 800c264:	009b      	lsls	r3, r3, #2
 800c266:	693a      	ldr	r2, [r7, #16]
 800c268:	4313      	orrs	r3, r2
 800c26a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	693a      	ldr	r2, [r7, #16]
 800c270:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	68fa      	ldr	r2, [r7, #12]
 800c276:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c278:	683b      	ldr	r3, [r7, #0]
 800c27a:	685a      	ldr	r2, [r3, #4]
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	697a      	ldr	r2, [r7, #20]
 800c284:	621a      	str	r2, [r3, #32]
}
 800c286:	bf00      	nop
 800c288:	371c      	adds	r7, #28
 800c28a:	46bd      	mov	sp, r7
 800c28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c290:	4770      	bx	lr
 800c292:	bf00      	nop
 800c294:	feff8fff 	.word	0xfeff8fff
 800c298:	40010000 	.word	0x40010000
 800c29c:	40010400 	.word	0x40010400
 800c2a0:	40014000 	.word	0x40014000
 800c2a4:	40014400 	.word	0x40014400
 800c2a8:	40014800 	.word	0x40014800

0800c2ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c2ac:	b480      	push	{r7}
 800c2ae:	b087      	sub	sp, #28
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
 800c2b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	6a1b      	ldr	r3, [r3, #32]
 800c2ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	6a1b      	ldr	r3, [r3, #32]
 800c2c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	685b      	ldr	r3, [r3, #4]
 800c2cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	69db      	ldr	r3, [r3, #28]
 800c2d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c2d4:	68fa      	ldr	r2, [r7, #12]
 800c2d6:	4b33      	ldr	r3, [pc, #204]	@ (800c3a4 <TIM_OC3_SetConfig+0xf8>)
 800c2d8:	4013      	ands	r3, r2
 800c2da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	f023 0303 	bic.w	r3, r3, #3
 800c2e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c2e4:	683b      	ldr	r3, [r7, #0]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	68fa      	ldr	r2, [r7, #12]
 800c2ea:	4313      	orrs	r3, r2
 800c2ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c2ee:	697b      	ldr	r3, [r7, #20]
 800c2f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c2f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c2f6:	683b      	ldr	r3, [r7, #0]
 800c2f8:	689b      	ldr	r3, [r3, #8]
 800c2fa:	021b      	lsls	r3, r3, #8
 800c2fc:	697a      	ldr	r2, [r7, #20]
 800c2fe:	4313      	orrs	r3, r2
 800c300:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	4a28      	ldr	r2, [pc, #160]	@ (800c3a8 <TIM_OC3_SetConfig+0xfc>)
 800c306:	4293      	cmp	r3, r2
 800c308:	d003      	beq.n	800c312 <TIM_OC3_SetConfig+0x66>
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	4a27      	ldr	r2, [pc, #156]	@ (800c3ac <TIM_OC3_SetConfig+0x100>)
 800c30e:	4293      	cmp	r3, r2
 800c310:	d10d      	bne.n	800c32e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c312:	697b      	ldr	r3, [r7, #20]
 800c314:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c318:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	68db      	ldr	r3, [r3, #12]
 800c31e:	021b      	lsls	r3, r3, #8
 800c320:	697a      	ldr	r2, [r7, #20]
 800c322:	4313      	orrs	r3, r2
 800c324:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c326:	697b      	ldr	r3, [r7, #20]
 800c328:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c32c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	4a1d      	ldr	r2, [pc, #116]	@ (800c3a8 <TIM_OC3_SetConfig+0xfc>)
 800c332:	4293      	cmp	r3, r2
 800c334:	d00f      	beq.n	800c356 <TIM_OC3_SetConfig+0xaa>
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	4a1c      	ldr	r2, [pc, #112]	@ (800c3ac <TIM_OC3_SetConfig+0x100>)
 800c33a:	4293      	cmp	r3, r2
 800c33c:	d00b      	beq.n	800c356 <TIM_OC3_SetConfig+0xaa>
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	4a1b      	ldr	r2, [pc, #108]	@ (800c3b0 <TIM_OC3_SetConfig+0x104>)
 800c342:	4293      	cmp	r3, r2
 800c344:	d007      	beq.n	800c356 <TIM_OC3_SetConfig+0xaa>
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	4a1a      	ldr	r2, [pc, #104]	@ (800c3b4 <TIM_OC3_SetConfig+0x108>)
 800c34a:	4293      	cmp	r3, r2
 800c34c:	d003      	beq.n	800c356 <TIM_OC3_SetConfig+0xaa>
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	4a19      	ldr	r2, [pc, #100]	@ (800c3b8 <TIM_OC3_SetConfig+0x10c>)
 800c352:	4293      	cmp	r3, r2
 800c354:	d113      	bne.n	800c37e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c356:	693b      	ldr	r3, [r7, #16]
 800c358:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c35c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c35e:	693b      	ldr	r3, [r7, #16]
 800c360:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c364:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c366:	683b      	ldr	r3, [r7, #0]
 800c368:	695b      	ldr	r3, [r3, #20]
 800c36a:	011b      	lsls	r3, r3, #4
 800c36c:	693a      	ldr	r2, [r7, #16]
 800c36e:	4313      	orrs	r3, r2
 800c370:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c372:	683b      	ldr	r3, [r7, #0]
 800c374:	699b      	ldr	r3, [r3, #24]
 800c376:	011b      	lsls	r3, r3, #4
 800c378:	693a      	ldr	r2, [r7, #16]
 800c37a:	4313      	orrs	r3, r2
 800c37c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	693a      	ldr	r2, [r7, #16]
 800c382:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	68fa      	ldr	r2, [r7, #12]
 800c388:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c38a:	683b      	ldr	r3, [r7, #0]
 800c38c:	685a      	ldr	r2, [r3, #4]
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	697a      	ldr	r2, [r7, #20]
 800c396:	621a      	str	r2, [r3, #32]
}
 800c398:	bf00      	nop
 800c39a:	371c      	adds	r7, #28
 800c39c:	46bd      	mov	sp, r7
 800c39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a2:	4770      	bx	lr
 800c3a4:	fffeff8f 	.word	0xfffeff8f
 800c3a8:	40010000 	.word	0x40010000
 800c3ac:	40010400 	.word	0x40010400
 800c3b0:	40014000 	.word	0x40014000
 800c3b4:	40014400 	.word	0x40014400
 800c3b8:	40014800 	.word	0x40014800

0800c3bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c3bc:	b480      	push	{r7}
 800c3be:	b087      	sub	sp, #28
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
 800c3c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	6a1b      	ldr	r3, [r3, #32]
 800c3ca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	6a1b      	ldr	r3, [r3, #32]
 800c3d0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	685b      	ldr	r3, [r3, #4]
 800c3dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	69db      	ldr	r3, [r3, #28]
 800c3e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c3e4:	68fa      	ldr	r2, [r7, #12]
 800c3e6:	4b24      	ldr	r3, [pc, #144]	@ (800c478 <TIM_OC4_SetConfig+0xbc>)
 800c3e8:	4013      	ands	r3, r2
 800c3ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c3f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c3f4:	683b      	ldr	r3, [r7, #0]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	021b      	lsls	r3, r3, #8
 800c3fa:	68fa      	ldr	r2, [r7, #12]
 800c3fc:	4313      	orrs	r3, r2
 800c3fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c400:	693b      	ldr	r3, [r7, #16]
 800c402:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c406:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c408:	683b      	ldr	r3, [r7, #0]
 800c40a:	689b      	ldr	r3, [r3, #8]
 800c40c:	031b      	lsls	r3, r3, #12
 800c40e:	693a      	ldr	r2, [r7, #16]
 800c410:	4313      	orrs	r3, r2
 800c412:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	4a19      	ldr	r2, [pc, #100]	@ (800c47c <TIM_OC4_SetConfig+0xc0>)
 800c418:	4293      	cmp	r3, r2
 800c41a:	d00f      	beq.n	800c43c <TIM_OC4_SetConfig+0x80>
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	4a18      	ldr	r2, [pc, #96]	@ (800c480 <TIM_OC4_SetConfig+0xc4>)
 800c420:	4293      	cmp	r3, r2
 800c422:	d00b      	beq.n	800c43c <TIM_OC4_SetConfig+0x80>
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	4a17      	ldr	r2, [pc, #92]	@ (800c484 <TIM_OC4_SetConfig+0xc8>)
 800c428:	4293      	cmp	r3, r2
 800c42a:	d007      	beq.n	800c43c <TIM_OC4_SetConfig+0x80>
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	4a16      	ldr	r2, [pc, #88]	@ (800c488 <TIM_OC4_SetConfig+0xcc>)
 800c430:	4293      	cmp	r3, r2
 800c432:	d003      	beq.n	800c43c <TIM_OC4_SetConfig+0x80>
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	4a15      	ldr	r2, [pc, #84]	@ (800c48c <TIM_OC4_SetConfig+0xd0>)
 800c438:	4293      	cmp	r3, r2
 800c43a:	d109      	bne.n	800c450 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c43c:	697b      	ldr	r3, [r7, #20]
 800c43e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c442:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c444:	683b      	ldr	r3, [r7, #0]
 800c446:	695b      	ldr	r3, [r3, #20]
 800c448:	019b      	lsls	r3, r3, #6
 800c44a:	697a      	ldr	r2, [r7, #20]
 800c44c:	4313      	orrs	r3, r2
 800c44e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	697a      	ldr	r2, [r7, #20]
 800c454:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	68fa      	ldr	r2, [r7, #12]
 800c45a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c45c:	683b      	ldr	r3, [r7, #0]
 800c45e:	685a      	ldr	r2, [r3, #4]
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	693a      	ldr	r2, [r7, #16]
 800c468:	621a      	str	r2, [r3, #32]
}
 800c46a:	bf00      	nop
 800c46c:	371c      	adds	r7, #28
 800c46e:	46bd      	mov	sp, r7
 800c470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c474:	4770      	bx	lr
 800c476:	bf00      	nop
 800c478:	feff8fff 	.word	0xfeff8fff
 800c47c:	40010000 	.word	0x40010000
 800c480:	40010400 	.word	0x40010400
 800c484:	40014000 	.word	0x40014000
 800c488:	40014400 	.word	0x40014400
 800c48c:	40014800 	.word	0x40014800

0800c490 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c490:	b480      	push	{r7}
 800c492:	b087      	sub	sp, #28
 800c494:	af00      	add	r7, sp, #0
 800c496:	6078      	str	r0, [r7, #4]
 800c498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	6a1b      	ldr	r3, [r3, #32]
 800c49e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	6a1b      	ldr	r3, [r3, #32]
 800c4a4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	685b      	ldr	r3, [r3, #4]
 800c4b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c4b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c4b8:	68fa      	ldr	r2, [r7, #12]
 800c4ba:	4b21      	ldr	r3, [pc, #132]	@ (800c540 <TIM_OC5_SetConfig+0xb0>)
 800c4bc:	4013      	ands	r3, r2
 800c4be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c4c0:	683b      	ldr	r3, [r7, #0]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	68fa      	ldr	r2, [r7, #12]
 800c4c6:	4313      	orrs	r3, r2
 800c4c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c4ca:	693b      	ldr	r3, [r7, #16]
 800c4cc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800c4d0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c4d2:	683b      	ldr	r3, [r7, #0]
 800c4d4:	689b      	ldr	r3, [r3, #8]
 800c4d6:	041b      	lsls	r3, r3, #16
 800c4d8:	693a      	ldr	r2, [r7, #16]
 800c4da:	4313      	orrs	r3, r2
 800c4dc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	4a18      	ldr	r2, [pc, #96]	@ (800c544 <TIM_OC5_SetConfig+0xb4>)
 800c4e2:	4293      	cmp	r3, r2
 800c4e4:	d00f      	beq.n	800c506 <TIM_OC5_SetConfig+0x76>
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	4a17      	ldr	r2, [pc, #92]	@ (800c548 <TIM_OC5_SetConfig+0xb8>)
 800c4ea:	4293      	cmp	r3, r2
 800c4ec:	d00b      	beq.n	800c506 <TIM_OC5_SetConfig+0x76>
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	4a16      	ldr	r2, [pc, #88]	@ (800c54c <TIM_OC5_SetConfig+0xbc>)
 800c4f2:	4293      	cmp	r3, r2
 800c4f4:	d007      	beq.n	800c506 <TIM_OC5_SetConfig+0x76>
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	4a15      	ldr	r2, [pc, #84]	@ (800c550 <TIM_OC5_SetConfig+0xc0>)
 800c4fa:	4293      	cmp	r3, r2
 800c4fc:	d003      	beq.n	800c506 <TIM_OC5_SetConfig+0x76>
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	4a14      	ldr	r2, [pc, #80]	@ (800c554 <TIM_OC5_SetConfig+0xc4>)
 800c502:	4293      	cmp	r3, r2
 800c504:	d109      	bne.n	800c51a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c506:	697b      	ldr	r3, [r7, #20]
 800c508:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c50c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c50e:	683b      	ldr	r3, [r7, #0]
 800c510:	695b      	ldr	r3, [r3, #20]
 800c512:	021b      	lsls	r3, r3, #8
 800c514:	697a      	ldr	r2, [r7, #20]
 800c516:	4313      	orrs	r3, r2
 800c518:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	697a      	ldr	r2, [r7, #20]
 800c51e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	68fa      	ldr	r2, [r7, #12]
 800c524:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c526:	683b      	ldr	r3, [r7, #0]
 800c528:	685a      	ldr	r2, [r3, #4]
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	693a      	ldr	r2, [r7, #16]
 800c532:	621a      	str	r2, [r3, #32]
}
 800c534:	bf00      	nop
 800c536:	371c      	adds	r7, #28
 800c538:	46bd      	mov	sp, r7
 800c53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53e:	4770      	bx	lr
 800c540:	fffeff8f 	.word	0xfffeff8f
 800c544:	40010000 	.word	0x40010000
 800c548:	40010400 	.word	0x40010400
 800c54c:	40014000 	.word	0x40014000
 800c550:	40014400 	.word	0x40014400
 800c554:	40014800 	.word	0x40014800

0800c558 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c558:	b480      	push	{r7}
 800c55a:	b087      	sub	sp, #28
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
 800c560:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	6a1b      	ldr	r3, [r3, #32]
 800c566:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	6a1b      	ldr	r3, [r3, #32]
 800c56c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	685b      	ldr	r3, [r3, #4]
 800c578:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c57e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c580:	68fa      	ldr	r2, [r7, #12]
 800c582:	4b22      	ldr	r3, [pc, #136]	@ (800c60c <TIM_OC6_SetConfig+0xb4>)
 800c584:	4013      	ands	r3, r2
 800c586:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c588:	683b      	ldr	r3, [r7, #0]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	021b      	lsls	r3, r3, #8
 800c58e:	68fa      	ldr	r2, [r7, #12]
 800c590:	4313      	orrs	r3, r2
 800c592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c594:	693b      	ldr	r3, [r7, #16]
 800c596:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c59a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c59c:	683b      	ldr	r3, [r7, #0]
 800c59e:	689b      	ldr	r3, [r3, #8]
 800c5a0:	051b      	lsls	r3, r3, #20
 800c5a2:	693a      	ldr	r2, [r7, #16]
 800c5a4:	4313      	orrs	r3, r2
 800c5a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	4a19      	ldr	r2, [pc, #100]	@ (800c610 <TIM_OC6_SetConfig+0xb8>)
 800c5ac:	4293      	cmp	r3, r2
 800c5ae:	d00f      	beq.n	800c5d0 <TIM_OC6_SetConfig+0x78>
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	4a18      	ldr	r2, [pc, #96]	@ (800c614 <TIM_OC6_SetConfig+0xbc>)
 800c5b4:	4293      	cmp	r3, r2
 800c5b6:	d00b      	beq.n	800c5d0 <TIM_OC6_SetConfig+0x78>
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	4a17      	ldr	r2, [pc, #92]	@ (800c618 <TIM_OC6_SetConfig+0xc0>)
 800c5bc:	4293      	cmp	r3, r2
 800c5be:	d007      	beq.n	800c5d0 <TIM_OC6_SetConfig+0x78>
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	4a16      	ldr	r2, [pc, #88]	@ (800c61c <TIM_OC6_SetConfig+0xc4>)
 800c5c4:	4293      	cmp	r3, r2
 800c5c6:	d003      	beq.n	800c5d0 <TIM_OC6_SetConfig+0x78>
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	4a15      	ldr	r2, [pc, #84]	@ (800c620 <TIM_OC6_SetConfig+0xc8>)
 800c5cc:	4293      	cmp	r3, r2
 800c5ce:	d109      	bne.n	800c5e4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c5d0:	697b      	ldr	r3, [r7, #20]
 800c5d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c5d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c5d8:	683b      	ldr	r3, [r7, #0]
 800c5da:	695b      	ldr	r3, [r3, #20]
 800c5dc:	029b      	lsls	r3, r3, #10
 800c5de:	697a      	ldr	r2, [r7, #20]
 800c5e0:	4313      	orrs	r3, r2
 800c5e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	697a      	ldr	r2, [r7, #20]
 800c5e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	68fa      	ldr	r2, [r7, #12]
 800c5ee:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c5f0:	683b      	ldr	r3, [r7, #0]
 800c5f2:	685a      	ldr	r2, [r3, #4]
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	693a      	ldr	r2, [r7, #16]
 800c5fc:	621a      	str	r2, [r3, #32]
}
 800c5fe:	bf00      	nop
 800c600:	371c      	adds	r7, #28
 800c602:	46bd      	mov	sp, r7
 800c604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c608:	4770      	bx	lr
 800c60a:	bf00      	nop
 800c60c:	feff8fff 	.word	0xfeff8fff
 800c610:	40010000 	.word	0x40010000
 800c614:	40010400 	.word	0x40010400
 800c618:	40014000 	.word	0x40014000
 800c61c:	40014400 	.word	0x40014400
 800c620:	40014800 	.word	0x40014800

0800c624 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c624:	b480      	push	{r7}
 800c626:	b087      	sub	sp, #28
 800c628:	af00      	add	r7, sp, #0
 800c62a:	60f8      	str	r0, [r7, #12]
 800c62c:	60b9      	str	r1, [r7, #8]
 800c62e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c630:	68bb      	ldr	r3, [r7, #8]
 800c632:	f003 031f 	and.w	r3, r3, #31
 800c636:	2201      	movs	r2, #1
 800c638:	fa02 f303 	lsl.w	r3, r2, r3
 800c63c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	6a1a      	ldr	r2, [r3, #32]
 800c642:	697b      	ldr	r3, [r7, #20]
 800c644:	43db      	mvns	r3, r3
 800c646:	401a      	ands	r2, r3
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	6a1a      	ldr	r2, [r3, #32]
 800c650:	68bb      	ldr	r3, [r7, #8]
 800c652:	f003 031f 	and.w	r3, r3, #31
 800c656:	6879      	ldr	r1, [r7, #4]
 800c658:	fa01 f303 	lsl.w	r3, r1, r3
 800c65c:	431a      	orrs	r2, r3
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	621a      	str	r2, [r3, #32]
}
 800c662:	bf00      	nop
 800c664:	371c      	adds	r7, #28
 800c666:	46bd      	mov	sp, r7
 800c668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66c:	4770      	bx	lr
	...

0800c670 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c670:	b480      	push	{r7}
 800c672:	b085      	sub	sp, #20
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
 800c678:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c680:	2b01      	cmp	r3, #1
 800c682:	d101      	bne.n	800c688 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c684:	2302      	movs	r3, #2
 800c686:	e06d      	b.n	800c764 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2201      	movs	r2, #1
 800c68c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	2202      	movs	r2, #2
 800c694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	685b      	ldr	r3, [r3, #4]
 800c69e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	689b      	ldr	r3, [r3, #8]
 800c6a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	4a30      	ldr	r2, [pc, #192]	@ (800c770 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c6ae:	4293      	cmp	r3, r2
 800c6b0:	d004      	beq.n	800c6bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	4a2f      	ldr	r2, [pc, #188]	@ (800c774 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c6b8:	4293      	cmp	r3, r2
 800c6ba:	d108      	bne.n	800c6ce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c6c2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c6c4:	683b      	ldr	r3, [r7, #0]
 800c6c6:	685b      	ldr	r3, [r3, #4]
 800c6c8:	68fa      	ldr	r2, [r7, #12]
 800c6ca:	4313      	orrs	r3, r2
 800c6cc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c6d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c6d6:	683b      	ldr	r3, [r7, #0]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	68fa      	ldr	r2, [r7, #12]
 800c6dc:	4313      	orrs	r3, r2
 800c6de:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	68fa      	ldr	r2, [r7, #12]
 800c6e6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	4a20      	ldr	r2, [pc, #128]	@ (800c770 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c6ee:	4293      	cmp	r3, r2
 800c6f0:	d022      	beq.n	800c738 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c6fa:	d01d      	beq.n	800c738 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	4a1d      	ldr	r2, [pc, #116]	@ (800c778 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c702:	4293      	cmp	r3, r2
 800c704:	d018      	beq.n	800c738 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	4a1c      	ldr	r2, [pc, #112]	@ (800c77c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c70c:	4293      	cmp	r3, r2
 800c70e:	d013      	beq.n	800c738 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	4a1a      	ldr	r2, [pc, #104]	@ (800c780 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c716:	4293      	cmp	r3, r2
 800c718:	d00e      	beq.n	800c738 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	4a15      	ldr	r2, [pc, #84]	@ (800c774 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c720:	4293      	cmp	r3, r2
 800c722:	d009      	beq.n	800c738 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	4a16      	ldr	r2, [pc, #88]	@ (800c784 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c72a:	4293      	cmp	r3, r2
 800c72c:	d004      	beq.n	800c738 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	4a15      	ldr	r2, [pc, #84]	@ (800c788 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c734:	4293      	cmp	r3, r2
 800c736:	d10c      	bne.n	800c752 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c738:	68bb      	ldr	r3, [r7, #8]
 800c73a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c73e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	689b      	ldr	r3, [r3, #8]
 800c744:	68ba      	ldr	r2, [r7, #8]
 800c746:	4313      	orrs	r3, r2
 800c748:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	68ba      	ldr	r2, [r7, #8]
 800c750:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	2201      	movs	r2, #1
 800c756:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	2200      	movs	r2, #0
 800c75e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c762:	2300      	movs	r3, #0
}
 800c764:	4618      	mov	r0, r3
 800c766:	3714      	adds	r7, #20
 800c768:	46bd      	mov	sp, r7
 800c76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76e:	4770      	bx	lr
 800c770:	40010000 	.word	0x40010000
 800c774:	40010400 	.word	0x40010400
 800c778:	40000400 	.word	0x40000400
 800c77c:	40000800 	.word	0x40000800
 800c780:	40000c00 	.word	0x40000c00
 800c784:	40001800 	.word	0x40001800
 800c788:	40014000 	.word	0x40014000

0800c78c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c78c:	b480      	push	{r7}
 800c78e:	b083      	sub	sp, #12
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c794:	bf00      	nop
 800c796:	370c      	adds	r7, #12
 800c798:	46bd      	mov	sp, r7
 800c79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79e:	4770      	bx	lr

0800c7a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c7a0:	b480      	push	{r7}
 800c7a2:	b083      	sub	sp, #12
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c7a8:	bf00      	nop
 800c7aa:	370c      	adds	r7, #12
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b2:	4770      	bx	lr

0800c7b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c7b4:	b480      	push	{r7}
 800c7b6:	b083      	sub	sp, #12
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c7bc:	bf00      	nop
 800c7be:	370c      	adds	r7, #12
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c6:	4770      	bx	lr

0800c7c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b082      	sub	sp, #8
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d101      	bne.n	800c7da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c7d6:	2301      	movs	r3, #1
 800c7d8:	e042      	b.n	800c860 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d106      	bne.n	800c7f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c7ec:	6878      	ldr	r0, [r7, #4]
 800c7ee:	f7f6 fe2b 	bl	8003448 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	2224      	movs	r2, #36	@ 0x24
 800c7f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	681a      	ldr	r2, [r3, #0]
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	f022 0201 	bic.w	r2, r2, #1
 800c808:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d002      	beq.n	800c818 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800c812:	6878      	ldr	r0, [r7, #4]
 800c814:	f001 fb52 	bl	800debc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c818:	6878      	ldr	r0, [r7, #4]
 800c81a:	f000 fce3 	bl	800d1e4 <UART_SetConfig>
 800c81e:	4603      	mov	r3, r0
 800c820:	2b01      	cmp	r3, #1
 800c822:	d101      	bne.n	800c828 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800c824:	2301      	movs	r3, #1
 800c826:	e01b      	b.n	800c860 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	685a      	ldr	r2, [r3, #4]
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c836:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	689a      	ldr	r2, [r3, #8]
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c846:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	681a      	ldr	r2, [r3, #0]
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	f042 0201 	orr.w	r2, r2, #1
 800c856:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c858:	6878      	ldr	r0, [r7, #4]
 800c85a:	f001 fbd1 	bl	800e000 <UART_CheckIdleState>
 800c85e:	4603      	mov	r3, r0
}
 800c860:	4618      	mov	r0, r3
 800c862:	3708      	adds	r7, #8
 800c864:	46bd      	mov	sp, r7
 800c866:	bd80      	pop	{r7, pc}

0800c868 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b08a      	sub	sp, #40	@ 0x28
 800c86c:	af02      	add	r7, sp, #8
 800c86e:	60f8      	str	r0, [r7, #12]
 800c870:	60b9      	str	r1, [r7, #8]
 800c872:	603b      	str	r3, [r7, #0]
 800c874:	4613      	mov	r3, r2
 800c876:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c87e:	2b20      	cmp	r3, #32
 800c880:	d17b      	bne.n	800c97a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800c882:	68bb      	ldr	r3, [r7, #8]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d002      	beq.n	800c88e <HAL_UART_Transmit+0x26>
 800c888:	88fb      	ldrh	r3, [r7, #6]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d101      	bne.n	800c892 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800c88e:	2301      	movs	r3, #1
 800c890:	e074      	b.n	800c97c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	2200      	movs	r2, #0
 800c896:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	2221      	movs	r2, #33	@ 0x21
 800c89e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c8a2:	f7f7 f853 	bl	800394c <HAL_GetTick>
 800c8a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	88fa      	ldrh	r2, [r7, #6]
 800c8ac:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	88fa      	ldrh	r2, [r7, #6]
 800c8b4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	689b      	ldr	r3, [r3, #8]
 800c8bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c8c0:	d108      	bne.n	800c8d4 <HAL_UART_Transmit+0x6c>
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	691b      	ldr	r3, [r3, #16]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d104      	bne.n	800c8d4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c8ce:	68bb      	ldr	r3, [r7, #8]
 800c8d0:	61bb      	str	r3, [r7, #24]
 800c8d2:	e003      	b.n	800c8dc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800c8d4:	68bb      	ldr	r3, [r7, #8]
 800c8d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c8d8:	2300      	movs	r3, #0
 800c8da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c8dc:	e030      	b.n	800c940 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c8de:	683b      	ldr	r3, [r7, #0]
 800c8e0:	9300      	str	r3, [sp, #0]
 800c8e2:	697b      	ldr	r3, [r7, #20]
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	2180      	movs	r1, #128	@ 0x80
 800c8e8:	68f8      	ldr	r0, [r7, #12]
 800c8ea:	f001 fc33 	bl	800e154 <UART_WaitOnFlagUntilTimeout>
 800c8ee:	4603      	mov	r3, r0
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d005      	beq.n	800c900 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	2220      	movs	r2, #32
 800c8f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800c8fc:	2303      	movs	r3, #3
 800c8fe:	e03d      	b.n	800c97c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800c900:	69fb      	ldr	r3, [r7, #28]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d10b      	bne.n	800c91e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c906:	69bb      	ldr	r3, [r7, #24]
 800c908:	881b      	ldrh	r3, [r3, #0]
 800c90a:	461a      	mov	r2, r3
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c914:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800c916:	69bb      	ldr	r3, [r7, #24]
 800c918:	3302      	adds	r3, #2
 800c91a:	61bb      	str	r3, [r7, #24]
 800c91c:	e007      	b.n	800c92e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c91e:	69fb      	ldr	r3, [r7, #28]
 800c920:	781a      	ldrb	r2, [r3, #0]
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800c928:	69fb      	ldr	r3, [r7, #28]
 800c92a:	3301      	adds	r3, #1
 800c92c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c934:	b29b      	uxth	r3, r3
 800c936:	3b01      	subs	r3, #1
 800c938:	b29a      	uxth	r2, r3
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c946:	b29b      	uxth	r3, r3
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d1c8      	bne.n	800c8de <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c94c:	683b      	ldr	r3, [r7, #0]
 800c94e:	9300      	str	r3, [sp, #0]
 800c950:	697b      	ldr	r3, [r7, #20]
 800c952:	2200      	movs	r2, #0
 800c954:	2140      	movs	r1, #64	@ 0x40
 800c956:	68f8      	ldr	r0, [r7, #12]
 800c958:	f001 fbfc 	bl	800e154 <UART_WaitOnFlagUntilTimeout>
 800c95c:	4603      	mov	r3, r0
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d005      	beq.n	800c96e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	2220      	movs	r2, #32
 800c966:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800c96a:	2303      	movs	r3, #3
 800c96c:	e006      	b.n	800c97c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	2220      	movs	r2, #32
 800c972:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800c976:	2300      	movs	r3, #0
 800c978:	e000      	b.n	800c97c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800c97a:	2302      	movs	r3, #2
  }
}
 800c97c:	4618      	mov	r0, r3
 800c97e:	3720      	adds	r7, #32
 800c980:	46bd      	mov	sp, r7
 800c982:	bd80      	pop	{r7, pc}

0800c984 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c984:	b580      	push	{r7, lr}
 800c986:	b08a      	sub	sp, #40	@ 0x28
 800c988:	af00      	add	r7, sp, #0
 800c98a:	60f8      	str	r0, [r7, #12]
 800c98c:	60b9      	str	r1, [r7, #8]
 800c98e:	4613      	mov	r3, r2
 800c990:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c998:	2b20      	cmp	r3, #32
 800c99a:	d137      	bne.n	800ca0c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800c99c:	68bb      	ldr	r3, [r7, #8]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d002      	beq.n	800c9a8 <HAL_UART_Receive_DMA+0x24>
 800c9a2:	88fb      	ldrh	r3, [r7, #6]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d101      	bne.n	800c9ac <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800c9a8:	2301      	movs	r3, #1
 800c9aa:	e030      	b.n	800ca0e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	4a18      	ldr	r2, [pc, #96]	@ (800ca18 <HAL_UART_Receive_DMA+0x94>)
 800c9b8:	4293      	cmp	r3, r2
 800c9ba:	d01f      	beq.n	800c9fc <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	685b      	ldr	r3, [r3, #4]
 800c9c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d018      	beq.n	800c9fc <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9d0:	697b      	ldr	r3, [r7, #20]
 800c9d2:	e853 3f00 	ldrex	r3, [r3]
 800c9d6:	613b      	str	r3, [r7, #16]
   return(result);
 800c9d8:	693b      	ldr	r3, [r7, #16]
 800c9da:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c9de:	627b      	str	r3, [r7, #36]	@ 0x24
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	461a      	mov	r2, r3
 800c9e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9e8:	623b      	str	r3, [r7, #32]
 800c9ea:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9ec:	69f9      	ldr	r1, [r7, #28]
 800c9ee:	6a3a      	ldr	r2, [r7, #32]
 800c9f0:	e841 2300 	strex	r3, r2, [r1]
 800c9f4:	61bb      	str	r3, [r7, #24]
   return(result);
 800c9f6:	69bb      	ldr	r3, [r7, #24]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d1e6      	bne.n	800c9ca <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c9fc:	88fb      	ldrh	r3, [r7, #6]
 800c9fe:	461a      	mov	r2, r3
 800ca00:	68b9      	ldr	r1, [r7, #8]
 800ca02:	68f8      	ldr	r0, [r7, #12]
 800ca04:	f001 fc14 	bl	800e230 <UART_Start_Receive_DMA>
 800ca08:	4603      	mov	r3, r0
 800ca0a:	e000      	b.n	800ca0e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ca0c:	2302      	movs	r3, #2
  }
}
 800ca0e:	4618      	mov	r0, r3
 800ca10:	3728      	adds	r7, #40	@ 0x28
 800ca12:	46bd      	mov	sp, r7
 800ca14:	bd80      	pop	{r7, pc}
 800ca16:	bf00      	nop
 800ca18:	58000c00 	.word	0x58000c00

0800ca1c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b0ba      	sub	sp, #232	@ 0xe8
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	69db      	ldr	r3, [r3, #28]
 800ca2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	689b      	ldr	r3, [r3, #8]
 800ca3e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ca42:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800ca46:	f640 030f 	movw	r3, #2063	@ 0x80f
 800ca4a:	4013      	ands	r3, r2
 800ca4c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800ca50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d11b      	bne.n	800ca90 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ca58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ca5c:	f003 0320 	and.w	r3, r3, #32
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d015      	beq.n	800ca90 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ca64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ca68:	f003 0320 	and.w	r3, r3, #32
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d105      	bne.n	800ca7c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ca70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ca74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d009      	beq.n	800ca90 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	f000 8377 	beq.w	800d174 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ca8a:	6878      	ldr	r0, [r7, #4]
 800ca8c:	4798      	blx	r3
      }
      return;
 800ca8e:	e371      	b.n	800d174 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ca90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	f000 8123 	beq.w	800cce0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ca9a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ca9e:	4b8d      	ldr	r3, [pc, #564]	@ (800ccd4 <HAL_UART_IRQHandler+0x2b8>)
 800caa0:	4013      	ands	r3, r2
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d106      	bne.n	800cab4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800caa6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800caaa:	4b8b      	ldr	r3, [pc, #556]	@ (800ccd8 <HAL_UART_IRQHandler+0x2bc>)
 800caac:	4013      	ands	r3, r2
 800caae:	2b00      	cmp	r3, #0
 800cab0:	f000 8116 	beq.w	800cce0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cab4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cab8:	f003 0301 	and.w	r3, r3, #1
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d011      	beq.n	800cae4 <HAL_UART_IRQHandler+0xc8>
 800cac0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cac4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d00b      	beq.n	800cae4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	2201      	movs	r2, #1
 800cad2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cada:	f043 0201 	orr.w	r2, r3, #1
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cae4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cae8:	f003 0302 	and.w	r3, r3, #2
 800caec:	2b00      	cmp	r3, #0
 800caee:	d011      	beq.n	800cb14 <HAL_UART_IRQHandler+0xf8>
 800caf0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800caf4:	f003 0301 	and.w	r3, r3, #1
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d00b      	beq.n	800cb14 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	2202      	movs	r2, #2
 800cb02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cb0a:	f043 0204 	orr.w	r2, r3, #4
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cb14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cb18:	f003 0304 	and.w	r3, r3, #4
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d011      	beq.n	800cb44 <HAL_UART_IRQHandler+0x128>
 800cb20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cb24:	f003 0301 	and.w	r3, r3, #1
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d00b      	beq.n	800cb44 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	2204      	movs	r2, #4
 800cb32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cb3a:	f043 0202 	orr.w	r2, r3, #2
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800cb44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cb48:	f003 0308 	and.w	r3, r3, #8
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d017      	beq.n	800cb80 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cb50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cb54:	f003 0320 	and.w	r3, r3, #32
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d105      	bne.n	800cb68 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800cb5c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800cb60:	4b5c      	ldr	r3, [pc, #368]	@ (800ccd4 <HAL_UART_IRQHandler+0x2b8>)
 800cb62:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d00b      	beq.n	800cb80 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	2208      	movs	r2, #8
 800cb6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cb76:	f043 0208 	orr.w	r2, r3, #8
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800cb80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cb84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d012      	beq.n	800cbb2 <HAL_UART_IRQHandler+0x196>
 800cb8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cb90:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d00c      	beq.n	800cbb2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cba0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cba8:	f043 0220 	orr.w	r2, r3, #32
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	f000 82dd 	beq.w	800d178 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cbbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cbc2:	f003 0320 	and.w	r3, r3, #32
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d013      	beq.n	800cbf2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cbca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cbce:	f003 0320 	and.w	r3, r3, #32
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d105      	bne.n	800cbe2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cbd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cbda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d007      	beq.n	800cbf2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d003      	beq.n	800cbf2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cbee:	6878      	ldr	r0, [r7, #4]
 800cbf0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cbf8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	689b      	ldr	r3, [r3, #8]
 800cc02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc06:	2b40      	cmp	r3, #64	@ 0x40
 800cc08:	d005      	beq.n	800cc16 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800cc0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cc0e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d054      	beq.n	800ccc0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cc16:	6878      	ldr	r0, [r7, #4]
 800cc18:	f001 fbf2 	bl	800e400 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	689b      	ldr	r3, [r3, #8]
 800cc22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc26:	2b40      	cmp	r3, #64	@ 0x40
 800cc28:	d146      	bne.n	800ccb8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	3308      	adds	r3, #8
 800cc30:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc34:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800cc38:	e853 3f00 	ldrex	r3, [r3]
 800cc3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800cc40:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cc44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cc48:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	3308      	adds	r3, #8
 800cc52:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800cc56:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800cc5a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc5e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800cc62:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800cc66:	e841 2300 	strex	r3, r2, [r1]
 800cc6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800cc6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d1d9      	bne.n	800cc2a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d017      	beq.n	800ccb0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cc86:	4a15      	ldr	r2, [pc, #84]	@ (800ccdc <HAL_UART_IRQHandler+0x2c0>)
 800cc88:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cc90:	4618      	mov	r0, r3
 800cc92:	f7f8 f929 	bl	8004ee8 <HAL_DMA_Abort_IT>
 800cc96:	4603      	mov	r3, r0
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d019      	beq.n	800ccd0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cca2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cca4:	687a      	ldr	r2, [r7, #4]
 800cca6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800ccaa:	4610      	mov	r0, r2
 800ccac:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ccae:	e00f      	b.n	800ccd0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ccb0:	6878      	ldr	r0, [r7, #4]
 800ccb2:	f000 fa81 	bl	800d1b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ccb6:	e00b      	b.n	800ccd0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ccb8:	6878      	ldr	r0, [r7, #4]
 800ccba:	f000 fa7d 	bl	800d1b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ccbe:	e007      	b.n	800ccd0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ccc0:	6878      	ldr	r0, [r7, #4]
 800ccc2:	f000 fa79 	bl	800d1b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	2200      	movs	r2, #0
 800ccca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800ccce:	e253      	b.n	800d178 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ccd0:	bf00      	nop
    return;
 800ccd2:	e251      	b.n	800d178 <HAL_UART_IRQHandler+0x75c>
 800ccd4:	10000001 	.word	0x10000001
 800ccd8:	04000120 	.word	0x04000120
 800ccdc:	0800e6b3 	.word	0x0800e6b3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cce4:	2b01      	cmp	r3, #1
 800cce6:	f040 81e7 	bne.w	800d0b8 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ccea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ccee:	f003 0310 	and.w	r3, r3, #16
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	f000 81e0 	beq.w	800d0b8 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ccf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ccfc:	f003 0310 	and.w	r3, r3, #16
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	f000 81d9 	beq.w	800d0b8 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	2210      	movs	r2, #16
 800cd0c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	689b      	ldr	r3, [r3, #8]
 800cd14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cd18:	2b40      	cmp	r3, #64	@ 0x40
 800cd1a:	f040 8151 	bne.w	800cfc0 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	4a96      	ldr	r2, [pc, #600]	@ (800cf80 <HAL_UART_IRQHandler+0x564>)
 800cd28:	4293      	cmp	r3, r2
 800cd2a:	d068      	beq.n	800cdfe <HAL_UART_IRQHandler+0x3e2>
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	4a93      	ldr	r2, [pc, #588]	@ (800cf84 <HAL_UART_IRQHandler+0x568>)
 800cd36:	4293      	cmp	r3, r2
 800cd38:	d061      	beq.n	800cdfe <HAL_UART_IRQHandler+0x3e2>
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	4a91      	ldr	r2, [pc, #580]	@ (800cf88 <HAL_UART_IRQHandler+0x56c>)
 800cd44:	4293      	cmp	r3, r2
 800cd46:	d05a      	beq.n	800cdfe <HAL_UART_IRQHandler+0x3e2>
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	4a8e      	ldr	r2, [pc, #568]	@ (800cf8c <HAL_UART_IRQHandler+0x570>)
 800cd52:	4293      	cmp	r3, r2
 800cd54:	d053      	beq.n	800cdfe <HAL_UART_IRQHandler+0x3e2>
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	4a8c      	ldr	r2, [pc, #560]	@ (800cf90 <HAL_UART_IRQHandler+0x574>)
 800cd60:	4293      	cmp	r3, r2
 800cd62:	d04c      	beq.n	800cdfe <HAL_UART_IRQHandler+0x3e2>
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	4a89      	ldr	r2, [pc, #548]	@ (800cf94 <HAL_UART_IRQHandler+0x578>)
 800cd6e:	4293      	cmp	r3, r2
 800cd70:	d045      	beq.n	800cdfe <HAL_UART_IRQHandler+0x3e2>
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	4a87      	ldr	r2, [pc, #540]	@ (800cf98 <HAL_UART_IRQHandler+0x57c>)
 800cd7c:	4293      	cmp	r3, r2
 800cd7e:	d03e      	beq.n	800cdfe <HAL_UART_IRQHandler+0x3e2>
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	4a84      	ldr	r2, [pc, #528]	@ (800cf9c <HAL_UART_IRQHandler+0x580>)
 800cd8a:	4293      	cmp	r3, r2
 800cd8c:	d037      	beq.n	800cdfe <HAL_UART_IRQHandler+0x3e2>
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	4a82      	ldr	r2, [pc, #520]	@ (800cfa0 <HAL_UART_IRQHandler+0x584>)
 800cd98:	4293      	cmp	r3, r2
 800cd9a:	d030      	beq.n	800cdfe <HAL_UART_IRQHandler+0x3e2>
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	4a7f      	ldr	r2, [pc, #508]	@ (800cfa4 <HAL_UART_IRQHandler+0x588>)
 800cda6:	4293      	cmp	r3, r2
 800cda8:	d029      	beq.n	800cdfe <HAL_UART_IRQHandler+0x3e2>
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	4a7d      	ldr	r2, [pc, #500]	@ (800cfa8 <HAL_UART_IRQHandler+0x58c>)
 800cdb4:	4293      	cmp	r3, r2
 800cdb6:	d022      	beq.n	800cdfe <HAL_UART_IRQHandler+0x3e2>
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	4a7a      	ldr	r2, [pc, #488]	@ (800cfac <HAL_UART_IRQHandler+0x590>)
 800cdc2:	4293      	cmp	r3, r2
 800cdc4:	d01b      	beq.n	800cdfe <HAL_UART_IRQHandler+0x3e2>
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	4a78      	ldr	r2, [pc, #480]	@ (800cfb0 <HAL_UART_IRQHandler+0x594>)
 800cdd0:	4293      	cmp	r3, r2
 800cdd2:	d014      	beq.n	800cdfe <HAL_UART_IRQHandler+0x3e2>
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	4a75      	ldr	r2, [pc, #468]	@ (800cfb4 <HAL_UART_IRQHandler+0x598>)
 800cdde:	4293      	cmp	r3, r2
 800cde0:	d00d      	beq.n	800cdfe <HAL_UART_IRQHandler+0x3e2>
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	4a73      	ldr	r2, [pc, #460]	@ (800cfb8 <HAL_UART_IRQHandler+0x59c>)
 800cdec:	4293      	cmp	r3, r2
 800cdee:	d006      	beq.n	800cdfe <HAL_UART_IRQHandler+0x3e2>
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	4a70      	ldr	r2, [pc, #448]	@ (800cfbc <HAL_UART_IRQHandler+0x5a0>)
 800cdfa:	4293      	cmp	r3, r2
 800cdfc:	d106      	bne.n	800ce0c <HAL_UART_IRQHandler+0x3f0>
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	685b      	ldr	r3, [r3, #4]
 800ce08:	b29b      	uxth	r3, r3
 800ce0a:	e005      	b.n	800ce18 <HAL_UART_IRQHandler+0x3fc>
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	685b      	ldr	r3, [r3, #4]
 800ce16:	b29b      	uxth	r3, r3
 800ce18:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ce1c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	f000 81ab 	beq.w	800d17c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ce2c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ce30:	429a      	cmp	r2, r3
 800ce32:	f080 81a3 	bcs.w	800d17c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ce3c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ce46:	69db      	ldr	r3, [r3, #28]
 800ce48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ce4c:	f000 8087 	beq.w	800cf5e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce58:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ce5c:	e853 3f00 	ldrex	r3, [r3]
 800ce60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800ce64:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ce68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ce6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	461a      	mov	r2, r3
 800ce76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ce7a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ce7e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce82:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800ce86:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ce8a:	e841 2300 	strex	r3, r2, [r1]
 800ce8e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800ce92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d1da      	bne.n	800ce50 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	3308      	adds	r3, #8
 800cea0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cea2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cea4:	e853 3f00 	ldrex	r3, [r3]
 800cea8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ceaa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ceac:	f023 0301 	bic.w	r3, r3, #1
 800ceb0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	3308      	adds	r3, #8
 800ceba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800cebe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800cec2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cec4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800cec6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ceca:	e841 2300 	strex	r3, r2, [r1]
 800cece:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ced0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d1e1      	bne.n	800ce9a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	3308      	adds	r3, #8
 800cedc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cede:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cee0:	e853 3f00 	ldrex	r3, [r3]
 800cee4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800cee6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cee8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ceec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	3308      	adds	r3, #8
 800cef6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800cefa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800cefc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cefe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800cf00:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800cf02:	e841 2300 	strex	r3, r2, [r1]
 800cf06:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800cf08:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d1e3      	bne.n	800ced6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	2220      	movs	r2, #32
 800cf12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	2200      	movs	r2, #0
 800cf1a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cf24:	e853 3f00 	ldrex	r3, [r3]
 800cf28:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800cf2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cf2c:	f023 0310 	bic.w	r3, r3, #16
 800cf30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	461a      	mov	r2, r3
 800cf3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cf3e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cf40:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf42:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800cf44:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cf46:	e841 2300 	strex	r3, r2, [r1]
 800cf4a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800cf4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d1e4      	bne.n	800cf1c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cf58:	4618      	mov	r0, r3
 800cf5a:	f7f7 fca7 	bl	80048ac <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	2202      	movs	r2, #2
 800cf62:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cf70:	b29b      	uxth	r3, r3
 800cf72:	1ad3      	subs	r3, r2, r3
 800cf74:	b29b      	uxth	r3, r3
 800cf76:	4619      	mov	r1, r3
 800cf78:	6878      	ldr	r0, [r7, #4]
 800cf7a:	f000 f927 	bl	800d1cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cf7e:	e0fd      	b.n	800d17c <HAL_UART_IRQHandler+0x760>
 800cf80:	40020010 	.word	0x40020010
 800cf84:	40020028 	.word	0x40020028
 800cf88:	40020040 	.word	0x40020040
 800cf8c:	40020058 	.word	0x40020058
 800cf90:	40020070 	.word	0x40020070
 800cf94:	40020088 	.word	0x40020088
 800cf98:	400200a0 	.word	0x400200a0
 800cf9c:	400200b8 	.word	0x400200b8
 800cfa0:	40020410 	.word	0x40020410
 800cfa4:	40020428 	.word	0x40020428
 800cfa8:	40020440 	.word	0x40020440
 800cfac:	40020458 	.word	0x40020458
 800cfb0:	40020470 	.word	0x40020470
 800cfb4:	40020488 	.word	0x40020488
 800cfb8:	400204a0 	.word	0x400204a0
 800cfbc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cfcc:	b29b      	uxth	r3, r3
 800cfce:	1ad3      	subs	r3, r2, r3
 800cfd0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cfda:	b29b      	uxth	r3, r3
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	f000 80cf 	beq.w	800d180 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800cfe2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	f000 80ca 	beq.w	800d180 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cff4:	e853 3f00 	ldrex	r3, [r3]
 800cff8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cffa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cffc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d000:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	461a      	mov	r2, r3
 800d00a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d00e:	647b      	str	r3, [r7, #68]	@ 0x44
 800d010:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d012:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d014:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d016:	e841 2300 	strex	r3, r2, [r1]
 800d01a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d01c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d1e4      	bne.n	800cfec <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	3308      	adds	r3, #8
 800d028:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d02a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d02c:	e853 3f00 	ldrex	r3, [r3]
 800d030:	623b      	str	r3, [r7, #32]
   return(result);
 800d032:	6a3a      	ldr	r2, [r7, #32]
 800d034:	4b55      	ldr	r3, [pc, #340]	@ (800d18c <HAL_UART_IRQHandler+0x770>)
 800d036:	4013      	ands	r3, r2
 800d038:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	3308      	adds	r3, #8
 800d042:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800d046:	633a      	str	r2, [r7, #48]	@ 0x30
 800d048:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d04a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d04c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d04e:	e841 2300 	strex	r3, r2, [r1]
 800d052:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d056:	2b00      	cmp	r3, #0
 800d058:	d1e3      	bne.n	800d022 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	2220      	movs	r2, #32
 800d05e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	2200      	movs	r2, #0
 800d066:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	2200      	movs	r2, #0
 800d06c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d074:	693b      	ldr	r3, [r7, #16]
 800d076:	e853 3f00 	ldrex	r3, [r3]
 800d07a:	60fb      	str	r3, [r7, #12]
   return(result);
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	f023 0310 	bic.w	r3, r3, #16
 800d082:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	461a      	mov	r2, r3
 800d08c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800d090:	61fb      	str	r3, [r7, #28]
 800d092:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d094:	69b9      	ldr	r1, [r7, #24]
 800d096:	69fa      	ldr	r2, [r7, #28]
 800d098:	e841 2300 	strex	r3, r2, [r1]
 800d09c:	617b      	str	r3, [r7, #20]
   return(result);
 800d09e:	697b      	ldr	r3, [r7, #20]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d1e4      	bne.n	800d06e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	2202      	movs	r2, #2
 800d0a8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d0aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d0ae:	4619      	mov	r1, r3
 800d0b0:	6878      	ldr	r0, [r7, #4]
 800d0b2:	f000 f88b 	bl	800d1cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d0b6:	e063      	b.n	800d180 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d0b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d0bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d00e      	beq.n	800d0e2 <HAL_UART_IRQHandler+0x6c6>
 800d0c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d0c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d008      	beq.n	800d0e2 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800d0d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d0da:	6878      	ldr	r0, [r7, #4]
 800d0dc:	f001 fb2a 	bl	800e734 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d0e0:	e051      	b.n	800d186 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d0e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d0e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d014      	beq.n	800d118 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d0ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d0f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d105      	bne.n	800d106 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d0fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d0fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d102:	2b00      	cmp	r3, #0
 800d104:	d008      	beq.n	800d118 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d03a      	beq.n	800d184 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d112:	6878      	ldr	r0, [r7, #4]
 800d114:	4798      	blx	r3
    }
    return;
 800d116:	e035      	b.n	800d184 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d118:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d11c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d120:	2b00      	cmp	r3, #0
 800d122:	d009      	beq.n	800d138 <HAL_UART_IRQHandler+0x71c>
 800d124:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d128:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d003      	beq.n	800d138 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800d130:	6878      	ldr	r0, [r7, #4]
 800d132:	f001 fad4 	bl	800e6de <UART_EndTransmit_IT>
    return;
 800d136:	e026      	b.n	800d186 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d13c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d140:	2b00      	cmp	r3, #0
 800d142:	d009      	beq.n	800d158 <HAL_UART_IRQHandler+0x73c>
 800d144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d148:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d003      	beq.n	800d158 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d150:	6878      	ldr	r0, [r7, #4]
 800d152:	f001 fb03 	bl	800e75c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d156:	e016      	b.n	800d186 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d15c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d160:	2b00      	cmp	r3, #0
 800d162:	d010      	beq.n	800d186 <HAL_UART_IRQHandler+0x76a>
 800d164:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d168:	2b00      	cmp	r3, #0
 800d16a:	da0c      	bge.n	800d186 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d16c:	6878      	ldr	r0, [r7, #4]
 800d16e:	f001 faeb 	bl	800e748 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d172:	e008      	b.n	800d186 <HAL_UART_IRQHandler+0x76a>
      return;
 800d174:	bf00      	nop
 800d176:	e006      	b.n	800d186 <HAL_UART_IRQHandler+0x76a>
    return;
 800d178:	bf00      	nop
 800d17a:	e004      	b.n	800d186 <HAL_UART_IRQHandler+0x76a>
      return;
 800d17c:	bf00      	nop
 800d17e:	e002      	b.n	800d186 <HAL_UART_IRQHandler+0x76a>
      return;
 800d180:	bf00      	nop
 800d182:	e000      	b.n	800d186 <HAL_UART_IRQHandler+0x76a>
    return;
 800d184:	bf00      	nop
  }
}
 800d186:	37e8      	adds	r7, #232	@ 0xe8
 800d188:	46bd      	mov	sp, r7
 800d18a:	bd80      	pop	{r7, pc}
 800d18c:	effffffe 	.word	0xeffffffe

0800d190 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d190:	b480      	push	{r7}
 800d192:	b083      	sub	sp, #12
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d198:	bf00      	nop
 800d19a:	370c      	adds	r7, #12
 800d19c:	46bd      	mov	sp, r7
 800d19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a2:	4770      	bx	lr

0800d1a4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d1a4:	b480      	push	{r7}
 800d1a6:	b083      	sub	sp, #12
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800d1ac:	bf00      	nop
 800d1ae:	370c      	adds	r7, #12
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b6:	4770      	bx	lr

0800d1b8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d1b8:	b480      	push	{r7}
 800d1ba:	b083      	sub	sp, #12
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d1c0:	bf00      	nop
 800d1c2:	370c      	adds	r7, #12
 800d1c4:	46bd      	mov	sp, r7
 800d1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ca:	4770      	bx	lr

0800d1cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d1cc:	b480      	push	{r7}
 800d1ce:	b083      	sub	sp, #12
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
 800d1d4:	460b      	mov	r3, r1
 800d1d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d1d8:	bf00      	nop
 800d1da:	370c      	adds	r7, #12
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e2:	4770      	bx	lr

0800d1e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d1e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d1e8:	b092      	sub	sp, #72	@ 0x48
 800d1ea:	af00      	add	r7, sp, #0
 800d1ec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d1f4:	697b      	ldr	r3, [r7, #20]
 800d1f6:	689a      	ldr	r2, [r3, #8]
 800d1f8:	697b      	ldr	r3, [r7, #20]
 800d1fa:	691b      	ldr	r3, [r3, #16]
 800d1fc:	431a      	orrs	r2, r3
 800d1fe:	697b      	ldr	r3, [r7, #20]
 800d200:	695b      	ldr	r3, [r3, #20]
 800d202:	431a      	orrs	r2, r3
 800d204:	697b      	ldr	r3, [r7, #20]
 800d206:	69db      	ldr	r3, [r3, #28]
 800d208:	4313      	orrs	r3, r2
 800d20a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d20c:	697b      	ldr	r3, [r7, #20]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	681a      	ldr	r2, [r3, #0]
 800d212:	4bbe      	ldr	r3, [pc, #760]	@ (800d50c <UART_SetConfig+0x328>)
 800d214:	4013      	ands	r3, r2
 800d216:	697a      	ldr	r2, [r7, #20]
 800d218:	6812      	ldr	r2, [r2, #0]
 800d21a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d21c:	430b      	orrs	r3, r1
 800d21e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d220:	697b      	ldr	r3, [r7, #20]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	685b      	ldr	r3, [r3, #4]
 800d226:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d22a:	697b      	ldr	r3, [r7, #20]
 800d22c:	68da      	ldr	r2, [r3, #12]
 800d22e:	697b      	ldr	r3, [r7, #20]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	430a      	orrs	r2, r1
 800d234:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d236:	697b      	ldr	r3, [r7, #20]
 800d238:	699b      	ldr	r3, [r3, #24]
 800d23a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d23c:	697b      	ldr	r3, [r7, #20]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	4ab3      	ldr	r2, [pc, #716]	@ (800d510 <UART_SetConfig+0x32c>)
 800d242:	4293      	cmp	r3, r2
 800d244:	d004      	beq.n	800d250 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d246:	697b      	ldr	r3, [r7, #20]
 800d248:	6a1b      	ldr	r3, [r3, #32]
 800d24a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d24c:	4313      	orrs	r3, r2
 800d24e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d250:	697b      	ldr	r3, [r7, #20]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	689a      	ldr	r2, [r3, #8]
 800d256:	4baf      	ldr	r3, [pc, #700]	@ (800d514 <UART_SetConfig+0x330>)
 800d258:	4013      	ands	r3, r2
 800d25a:	697a      	ldr	r2, [r7, #20]
 800d25c:	6812      	ldr	r2, [r2, #0]
 800d25e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d260:	430b      	orrs	r3, r1
 800d262:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d264:	697b      	ldr	r3, [r7, #20]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d26a:	f023 010f 	bic.w	r1, r3, #15
 800d26e:	697b      	ldr	r3, [r7, #20]
 800d270:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d272:	697b      	ldr	r3, [r7, #20]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	430a      	orrs	r2, r1
 800d278:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d27a:	697b      	ldr	r3, [r7, #20]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	4aa6      	ldr	r2, [pc, #664]	@ (800d518 <UART_SetConfig+0x334>)
 800d280:	4293      	cmp	r3, r2
 800d282:	d177      	bne.n	800d374 <UART_SetConfig+0x190>
 800d284:	4ba5      	ldr	r3, [pc, #660]	@ (800d51c <UART_SetConfig+0x338>)
 800d286:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d288:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d28c:	2b28      	cmp	r3, #40	@ 0x28
 800d28e:	d86d      	bhi.n	800d36c <UART_SetConfig+0x188>
 800d290:	a201      	add	r2, pc, #4	@ (adr r2, 800d298 <UART_SetConfig+0xb4>)
 800d292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d296:	bf00      	nop
 800d298:	0800d33d 	.word	0x0800d33d
 800d29c:	0800d36d 	.word	0x0800d36d
 800d2a0:	0800d36d 	.word	0x0800d36d
 800d2a4:	0800d36d 	.word	0x0800d36d
 800d2a8:	0800d36d 	.word	0x0800d36d
 800d2ac:	0800d36d 	.word	0x0800d36d
 800d2b0:	0800d36d 	.word	0x0800d36d
 800d2b4:	0800d36d 	.word	0x0800d36d
 800d2b8:	0800d345 	.word	0x0800d345
 800d2bc:	0800d36d 	.word	0x0800d36d
 800d2c0:	0800d36d 	.word	0x0800d36d
 800d2c4:	0800d36d 	.word	0x0800d36d
 800d2c8:	0800d36d 	.word	0x0800d36d
 800d2cc:	0800d36d 	.word	0x0800d36d
 800d2d0:	0800d36d 	.word	0x0800d36d
 800d2d4:	0800d36d 	.word	0x0800d36d
 800d2d8:	0800d34d 	.word	0x0800d34d
 800d2dc:	0800d36d 	.word	0x0800d36d
 800d2e0:	0800d36d 	.word	0x0800d36d
 800d2e4:	0800d36d 	.word	0x0800d36d
 800d2e8:	0800d36d 	.word	0x0800d36d
 800d2ec:	0800d36d 	.word	0x0800d36d
 800d2f0:	0800d36d 	.word	0x0800d36d
 800d2f4:	0800d36d 	.word	0x0800d36d
 800d2f8:	0800d355 	.word	0x0800d355
 800d2fc:	0800d36d 	.word	0x0800d36d
 800d300:	0800d36d 	.word	0x0800d36d
 800d304:	0800d36d 	.word	0x0800d36d
 800d308:	0800d36d 	.word	0x0800d36d
 800d30c:	0800d36d 	.word	0x0800d36d
 800d310:	0800d36d 	.word	0x0800d36d
 800d314:	0800d36d 	.word	0x0800d36d
 800d318:	0800d35d 	.word	0x0800d35d
 800d31c:	0800d36d 	.word	0x0800d36d
 800d320:	0800d36d 	.word	0x0800d36d
 800d324:	0800d36d 	.word	0x0800d36d
 800d328:	0800d36d 	.word	0x0800d36d
 800d32c:	0800d36d 	.word	0x0800d36d
 800d330:	0800d36d 	.word	0x0800d36d
 800d334:	0800d36d 	.word	0x0800d36d
 800d338:	0800d365 	.word	0x0800d365
 800d33c:	2301      	movs	r3, #1
 800d33e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d342:	e326      	b.n	800d992 <UART_SetConfig+0x7ae>
 800d344:	2304      	movs	r3, #4
 800d346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d34a:	e322      	b.n	800d992 <UART_SetConfig+0x7ae>
 800d34c:	2308      	movs	r3, #8
 800d34e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d352:	e31e      	b.n	800d992 <UART_SetConfig+0x7ae>
 800d354:	2310      	movs	r3, #16
 800d356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d35a:	e31a      	b.n	800d992 <UART_SetConfig+0x7ae>
 800d35c:	2320      	movs	r3, #32
 800d35e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d362:	e316      	b.n	800d992 <UART_SetConfig+0x7ae>
 800d364:	2340      	movs	r3, #64	@ 0x40
 800d366:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d36a:	e312      	b.n	800d992 <UART_SetConfig+0x7ae>
 800d36c:	2380      	movs	r3, #128	@ 0x80
 800d36e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d372:	e30e      	b.n	800d992 <UART_SetConfig+0x7ae>
 800d374:	697b      	ldr	r3, [r7, #20]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	4a69      	ldr	r2, [pc, #420]	@ (800d520 <UART_SetConfig+0x33c>)
 800d37a:	4293      	cmp	r3, r2
 800d37c:	d130      	bne.n	800d3e0 <UART_SetConfig+0x1fc>
 800d37e:	4b67      	ldr	r3, [pc, #412]	@ (800d51c <UART_SetConfig+0x338>)
 800d380:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d382:	f003 0307 	and.w	r3, r3, #7
 800d386:	2b05      	cmp	r3, #5
 800d388:	d826      	bhi.n	800d3d8 <UART_SetConfig+0x1f4>
 800d38a:	a201      	add	r2, pc, #4	@ (adr r2, 800d390 <UART_SetConfig+0x1ac>)
 800d38c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d390:	0800d3a9 	.word	0x0800d3a9
 800d394:	0800d3b1 	.word	0x0800d3b1
 800d398:	0800d3b9 	.word	0x0800d3b9
 800d39c:	0800d3c1 	.word	0x0800d3c1
 800d3a0:	0800d3c9 	.word	0x0800d3c9
 800d3a4:	0800d3d1 	.word	0x0800d3d1
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3ae:	e2f0      	b.n	800d992 <UART_SetConfig+0x7ae>
 800d3b0:	2304      	movs	r3, #4
 800d3b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3b6:	e2ec      	b.n	800d992 <UART_SetConfig+0x7ae>
 800d3b8:	2308      	movs	r3, #8
 800d3ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3be:	e2e8      	b.n	800d992 <UART_SetConfig+0x7ae>
 800d3c0:	2310      	movs	r3, #16
 800d3c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3c6:	e2e4      	b.n	800d992 <UART_SetConfig+0x7ae>
 800d3c8:	2320      	movs	r3, #32
 800d3ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3ce:	e2e0      	b.n	800d992 <UART_SetConfig+0x7ae>
 800d3d0:	2340      	movs	r3, #64	@ 0x40
 800d3d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3d6:	e2dc      	b.n	800d992 <UART_SetConfig+0x7ae>
 800d3d8:	2380      	movs	r3, #128	@ 0x80
 800d3da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3de:	e2d8      	b.n	800d992 <UART_SetConfig+0x7ae>
 800d3e0:	697b      	ldr	r3, [r7, #20]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	4a4f      	ldr	r2, [pc, #316]	@ (800d524 <UART_SetConfig+0x340>)
 800d3e6:	4293      	cmp	r3, r2
 800d3e8:	d130      	bne.n	800d44c <UART_SetConfig+0x268>
 800d3ea:	4b4c      	ldr	r3, [pc, #304]	@ (800d51c <UART_SetConfig+0x338>)
 800d3ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d3ee:	f003 0307 	and.w	r3, r3, #7
 800d3f2:	2b05      	cmp	r3, #5
 800d3f4:	d826      	bhi.n	800d444 <UART_SetConfig+0x260>
 800d3f6:	a201      	add	r2, pc, #4	@ (adr r2, 800d3fc <UART_SetConfig+0x218>)
 800d3f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3fc:	0800d415 	.word	0x0800d415
 800d400:	0800d41d 	.word	0x0800d41d
 800d404:	0800d425 	.word	0x0800d425
 800d408:	0800d42d 	.word	0x0800d42d
 800d40c:	0800d435 	.word	0x0800d435
 800d410:	0800d43d 	.word	0x0800d43d
 800d414:	2300      	movs	r3, #0
 800d416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d41a:	e2ba      	b.n	800d992 <UART_SetConfig+0x7ae>
 800d41c:	2304      	movs	r3, #4
 800d41e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d422:	e2b6      	b.n	800d992 <UART_SetConfig+0x7ae>
 800d424:	2308      	movs	r3, #8
 800d426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d42a:	e2b2      	b.n	800d992 <UART_SetConfig+0x7ae>
 800d42c:	2310      	movs	r3, #16
 800d42e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d432:	e2ae      	b.n	800d992 <UART_SetConfig+0x7ae>
 800d434:	2320      	movs	r3, #32
 800d436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d43a:	e2aa      	b.n	800d992 <UART_SetConfig+0x7ae>
 800d43c:	2340      	movs	r3, #64	@ 0x40
 800d43e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d442:	e2a6      	b.n	800d992 <UART_SetConfig+0x7ae>
 800d444:	2380      	movs	r3, #128	@ 0x80
 800d446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d44a:	e2a2      	b.n	800d992 <UART_SetConfig+0x7ae>
 800d44c:	697b      	ldr	r3, [r7, #20]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	4a35      	ldr	r2, [pc, #212]	@ (800d528 <UART_SetConfig+0x344>)
 800d452:	4293      	cmp	r3, r2
 800d454:	d130      	bne.n	800d4b8 <UART_SetConfig+0x2d4>
 800d456:	4b31      	ldr	r3, [pc, #196]	@ (800d51c <UART_SetConfig+0x338>)
 800d458:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d45a:	f003 0307 	and.w	r3, r3, #7
 800d45e:	2b05      	cmp	r3, #5
 800d460:	d826      	bhi.n	800d4b0 <UART_SetConfig+0x2cc>
 800d462:	a201      	add	r2, pc, #4	@ (adr r2, 800d468 <UART_SetConfig+0x284>)
 800d464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d468:	0800d481 	.word	0x0800d481
 800d46c:	0800d489 	.word	0x0800d489
 800d470:	0800d491 	.word	0x0800d491
 800d474:	0800d499 	.word	0x0800d499
 800d478:	0800d4a1 	.word	0x0800d4a1
 800d47c:	0800d4a9 	.word	0x0800d4a9
 800d480:	2300      	movs	r3, #0
 800d482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d486:	e284      	b.n	800d992 <UART_SetConfig+0x7ae>
 800d488:	2304      	movs	r3, #4
 800d48a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d48e:	e280      	b.n	800d992 <UART_SetConfig+0x7ae>
 800d490:	2308      	movs	r3, #8
 800d492:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d496:	e27c      	b.n	800d992 <UART_SetConfig+0x7ae>
 800d498:	2310      	movs	r3, #16
 800d49a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d49e:	e278      	b.n	800d992 <UART_SetConfig+0x7ae>
 800d4a0:	2320      	movs	r3, #32
 800d4a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d4a6:	e274      	b.n	800d992 <UART_SetConfig+0x7ae>
 800d4a8:	2340      	movs	r3, #64	@ 0x40
 800d4aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d4ae:	e270      	b.n	800d992 <UART_SetConfig+0x7ae>
 800d4b0:	2380      	movs	r3, #128	@ 0x80
 800d4b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d4b6:	e26c      	b.n	800d992 <UART_SetConfig+0x7ae>
 800d4b8:	697b      	ldr	r3, [r7, #20]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	4a1b      	ldr	r2, [pc, #108]	@ (800d52c <UART_SetConfig+0x348>)
 800d4be:	4293      	cmp	r3, r2
 800d4c0:	d142      	bne.n	800d548 <UART_SetConfig+0x364>
 800d4c2:	4b16      	ldr	r3, [pc, #88]	@ (800d51c <UART_SetConfig+0x338>)
 800d4c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d4c6:	f003 0307 	and.w	r3, r3, #7
 800d4ca:	2b05      	cmp	r3, #5
 800d4cc:	d838      	bhi.n	800d540 <UART_SetConfig+0x35c>
 800d4ce:	a201      	add	r2, pc, #4	@ (adr r2, 800d4d4 <UART_SetConfig+0x2f0>)
 800d4d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4d4:	0800d4ed 	.word	0x0800d4ed
 800d4d8:	0800d4f5 	.word	0x0800d4f5
 800d4dc:	0800d4fd 	.word	0x0800d4fd
 800d4e0:	0800d505 	.word	0x0800d505
 800d4e4:	0800d531 	.word	0x0800d531
 800d4e8:	0800d539 	.word	0x0800d539
 800d4ec:	2300      	movs	r3, #0
 800d4ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d4f2:	e24e      	b.n	800d992 <UART_SetConfig+0x7ae>
 800d4f4:	2304      	movs	r3, #4
 800d4f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d4fa:	e24a      	b.n	800d992 <UART_SetConfig+0x7ae>
 800d4fc:	2308      	movs	r3, #8
 800d4fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d502:	e246      	b.n	800d992 <UART_SetConfig+0x7ae>
 800d504:	2310      	movs	r3, #16
 800d506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d50a:	e242      	b.n	800d992 <UART_SetConfig+0x7ae>
 800d50c:	cfff69f3 	.word	0xcfff69f3
 800d510:	58000c00 	.word	0x58000c00
 800d514:	11fff4ff 	.word	0x11fff4ff
 800d518:	40011000 	.word	0x40011000
 800d51c:	58024400 	.word	0x58024400
 800d520:	40004400 	.word	0x40004400
 800d524:	40004800 	.word	0x40004800
 800d528:	40004c00 	.word	0x40004c00
 800d52c:	40005000 	.word	0x40005000
 800d530:	2320      	movs	r3, #32
 800d532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d536:	e22c      	b.n	800d992 <UART_SetConfig+0x7ae>
 800d538:	2340      	movs	r3, #64	@ 0x40
 800d53a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d53e:	e228      	b.n	800d992 <UART_SetConfig+0x7ae>
 800d540:	2380      	movs	r3, #128	@ 0x80
 800d542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d546:	e224      	b.n	800d992 <UART_SetConfig+0x7ae>
 800d548:	697b      	ldr	r3, [r7, #20]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	4ab1      	ldr	r2, [pc, #708]	@ (800d814 <UART_SetConfig+0x630>)
 800d54e:	4293      	cmp	r3, r2
 800d550:	d176      	bne.n	800d640 <UART_SetConfig+0x45c>
 800d552:	4bb1      	ldr	r3, [pc, #708]	@ (800d818 <UART_SetConfig+0x634>)
 800d554:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d556:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d55a:	2b28      	cmp	r3, #40	@ 0x28
 800d55c:	d86c      	bhi.n	800d638 <UART_SetConfig+0x454>
 800d55e:	a201      	add	r2, pc, #4	@ (adr r2, 800d564 <UART_SetConfig+0x380>)
 800d560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d564:	0800d609 	.word	0x0800d609
 800d568:	0800d639 	.word	0x0800d639
 800d56c:	0800d639 	.word	0x0800d639
 800d570:	0800d639 	.word	0x0800d639
 800d574:	0800d639 	.word	0x0800d639
 800d578:	0800d639 	.word	0x0800d639
 800d57c:	0800d639 	.word	0x0800d639
 800d580:	0800d639 	.word	0x0800d639
 800d584:	0800d611 	.word	0x0800d611
 800d588:	0800d639 	.word	0x0800d639
 800d58c:	0800d639 	.word	0x0800d639
 800d590:	0800d639 	.word	0x0800d639
 800d594:	0800d639 	.word	0x0800d639
 800d598:	0800d639 	.word	0x0800d639
 800d59c:	0800d639 	.word	0x0800d639
 800d5a0:	0800d639 	.word	0x0800d639
 800d5a4:	0800d619 	.word	0x0800d619
 800d5a8:	0800d639 	.word	0x0800d639
 800d5ac:	0800d639 	.word	0x0800d639
 800d5b0:	0800d639 	.word	0x0800d639
 800d5b4:	0800d639 	.word	0x0800d639
 800d5b8:	0800d639 	.word	0x0800d639
 800d5bc:	0800d639 	.word	0x0800d639
 800d5c0:	0800d639 	.word	0x0800d639
 800d5c4:	0800d621 	.word	0x0800d621
 800d5c8:	0800d639 	.word	0x0800d639
 800d5cc:	0800d639 	.word	0x0800d639
 800d5d0:	0800d639 	.word	0x0800d639
 800d5d4:	0800d639 	.word	0x0800d639
 800d5d8:	0800d639 	.word	0x0800d639
 800d5dc:	0800d639 	.word	0x0800d639
 800d5e0:	0800d639 	.word	0x0800d639
 800d5e4:	0800d629 	.word	0x0800d629
 800d5e8:	0800d639 	.word	0x0800d639
 800d5ec:	0800d639 	.word	0x0800d639
 800d5f0:	0800d639 	.word	0x0800d639
 800d5f4:	0800d639 	.word	0x0800d639
 800d5f8:	0800d639 	.word	0x0800d639
 800d5fc:	0800d639 	.word	0x0800d639
 800d600:	0800d639 	.word	0x0800d639
 800d604:	0800d631 	.word	0x0800d631
 800d608:	2301      	movs	r3, #1
 800d60a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d60e:	e1c0      	b.n	800d992 <UART_SetConfig+0x7ae>
 800d610:	2304      	movs	r3, #4
 800d612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d616:	e1bc      	b.n	800d992 <UART_SetConfig+0x7ae>
 800d618:	2308      	movs	r3, #8
 800d61a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d61e:	e1b8      	b.n	800d992 <UART_SetConfig+0x7ae>
 800d620:	2310      	movs	r3, #16
 800d622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d626:	e1b4      	b.n	800d992 <UART_SetConfig+0x7ae>
 800d628:	2320      	movs	r3, #32
 800d62a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d62e:	e1b0      	b.n	800d992 <UART_SetConfig+0x7ae>
 800d630:	2340      	movs	r3, #64	@ 0x40
 800d632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d636:	e1ac      	b.n	800d992 <UART_SetConfig+0x7ae>
 800d638:	2380      	movs	r3, #128	@ 0x80
 800d63a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d63e:	e1a8      	b.n	800d992 <UART_SetConfig+0x7ae>
 800d640:	697b      	ldr	r3, [r7, #20]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	4a75      	ldr	r2, [pc, #468]	@ (800d81c <UART_SetConfig+0x638>)
 800d646:	4293      	cmp	r3, r2
 800d648:	d130      	bne.n	800d6ac <UART_SetConfig+0x4c8>
 800d64a:	4b73      	ldr	r3, [pc, #460]	@ (800d818 <UART_SetConfig+0x634>)
 800d64c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d64e:	f003 0307 	and.w	r3, r3, #7
 800d652:	2b05      	cmp	r3, #5
 800d654:	d826      	bhi.n	800d6a4 <UART_SetConfig+0x4c0>
 800d656:	a201      	add	r2, pc, #4	@ (adr r2, 800d65c <UART_SetConfig+0x478>)
 800d658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d65c:	0800d675 	.word	0x0800d675
 800d660:	0800d67d 	.word	0x0800d67d
 800d664:	0800d685 	.word	0x0800d685
 800d668:	0800d68d 	.word	0x0800d68d
 800d66c:	0800d695 	.word	0x0800d695
 800d670:	0800d69d 	.word	0x0800d69d
 800d674:	2300      	movs	r3, #0
 800d676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d67a:	e18a      	b.n	800d992 <UART_SetConfig+0x7ae>
 800d67c:	2304      	movs	r3, #4
 800d67e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d682:	e186      	b.n	800d992 <UART_SetConfig+0x7ae>
 800d684:	2308      	movs	r3, #8
 800d686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d68a:	e182      	b.n	800d992 <UART_SetConfig+0x7ae>
 800d68c:	2310      	movs	r3, #16
 800d68e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d692:	e17e      	b.n	800d992 <UART_SetConfig+0x7ae>
 800d694:	2320      	movs	r3, #32
 800d696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d69a:	e17a      	b.n	800d992 <UART_SetConfig+0x7ae>
 800d69c:	2340      	movs	r3, #64	@ 0x40
 800d69e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6a2:	e176      	b.n	800d992 <UART_SetConfig+0x7ae>
 800d6a4:	2380      	movs	r3, #128	@ 0x80
 800d6a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6aa:	e172      	b.n	800d992 <UART_SetConfig+0x7ae>
 800d6ac:	697b      	ldr	r3, [r7, #20]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	4a5b      	ldr	r2, [pc, #364]	@ (800d820 <UART_SetConfig+0x63c>)
 800d6b2:	4293      	cmp	r3, r2
 800d6b4:	d130      	bne.n	800d718 <UART_SetConfig+0x534>
 800d6b6:	4b58      	ldr	r3, [pc, #352]	@ (800d818 <UART_SetConfig+0x634>)
 800d6b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d6ba:	f003 0307 	and.w	r3, r3, #7
 800d6be:	2b05      	cmp	r3, #5
 800d6c0:	d826      	bhi.n	800d710 <UART_SetConfig+0x52c>
 800d6c2:	a201      	add	r2, pc, #4	@ (adr r2, 800d6c8 <UART_SetConfig+0x4e4>)
 800d6c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6c8:	0800d6e1 	.word	0x0800d6e1
 800d6cc:	0800d6e9 	.word	0x0800d6e9
 800d6d0:	0800d6f1 	.word	0x0800d6f1
 800d6d4:	0800d6f9 	.word	0x0800d6f9
 800d6d8:	0800d701 	.word	0x0800d701
 800d6dc:	0800d709 	.word	0x0800d709
 800d6e0:	2300      	movs	r3, #0
 800d6e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6e6:	e154      	b.n	800d992 <UART_SetConfig+0x7ae>
 800d6e8:	2304      	movs	r3, #4
 800d6ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6ee:	e150      	b.n	800d992 <UART_SetConfig+0x7ae>
 800d6f0:	2308      	movs	r3, #8
 800d6f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6f6:	e14c      	b.n	800d992 <UART_SetConfig+0x7ae>
 800d6f8:	2310      	movs	r3, #16
 800d6fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6fe:	e148      	b.n	800d992 <UART_SetConfig+0x7ae>
 800d700:	2320      	movs	r3, #32
 800d702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d706:	e144      	b.n	800d992 <UART_SetConfig+0x7ae>
 800d708:	2340      	movs	r3, #64	@ 0x40
 800d70a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d70e:	e140      	b.n	800d992 <UART_SetConfig+0x7ae>
 800d710:	2380      	movs	r3, #128	@ 0x80
 800d712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d716:	e13c      	b.n	800d992 <UART_SetConfig+0x7ae>
 800d718:	697b      	ldr	r3, [r7, #20]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	4a41      	ldr	r2, [pc, #260]	@ (800d824 <UART_SetConfig+0x640>)
 800d71e:	4293      	cmp	r3, r2
 800d720:	f040 8082 	bne.w	800d828 <UART_SetConfig+0x644>
 800d724:	4b3c      	ldr	r3, [pc, #240]	@ (800d818 <UART_SetConfig+0x634>)
 800d726:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d728:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d72c:	2b28      	cmp	r3, #40	@ 0x28
 800d72e:	d86d      	bhi.n	800d80c <UART_SetConfig+0x628>
 800d730:	a201      	add	r2, pc, #4	@ (adr r2, 800d738 <UART_SetConfig+0x554>)
 800d732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d736:	bf00      	nop
 800d738:	0800d7dd 	.word	0x0800d7dd
 800d73c:	0800d80d 	.word	0x0800d80d
 800d740:	0800d80d 	.word	0x0800d80d
 800d744:	0800d80d 	.word	0x0800d80d
 800d748:	0800d80d 	.word	0x0800d80d
 800d74c:	0800d80d 	.word	0x0800d80d
 800d750:	0800d80d 	.word	0x0800d80d
 800d754:	0800d80d 	.word	0x0800d80d
 800d758:	0800d7e5 	.word	0x0800d7e5
 800d75c:	0800d80d 	.word	0x0800d80d
 800d760:	0800d80d 	.word	0x0800d80d
 800d764:	0800d80d 	.word	0x0800d80d
 800d768:	0800d80d 	.word	0x0800d80d
 800d76c:	0800d80d 	.word	0x0800d80d
 800d770:	0800d80d 	.word	0x0800d80d
 800d774:	0800d80d 	.word	0x0800d80d
 800d778:	0800d7ed 	.word	0x0800d7ed
 800d77c:	0800d80d 	.word	0x0800d80d
 800d780:	0800d80d 	.word	0x0800d80d
 800d784:	0800d80d 	.word	0x0800d80d
 800d788:	0800d80d 	.word	0x0800d80d
 800d78c:	0800d80d 	.word	0x0800d80d
 800d790:	0800d80d 	.word	0x0800d80d
 800d794:	0800d80d 	.word	0x0800d80d
 800d798:	0800d7f5 	.word	0x0800d7f5
 800d79c:	0800d80d 	.word	0x0800d80d
 800d7a0:	0800d80d 	.word	0x0800d80d
 800d7a4:	0800d80d 	.word	0x0800d80d
 800d7a8:	0800d80d 	.word	0x0800d80d
 800d7ac:	0800d80d 	.word	0x0800d80d
 800d7b0:	0800d80d 	.word	0x0800d80d
 800d7b4:	0800d80d 	.word	0x0800d80d
 800d7b8:	0800d7fd 	.word	0x0800d7fd
 800d7bc:	0800d80d 	.word	0x0800d80d
 800d7c0:	0800d80d 	.word	0x0800d80d
 800d7c4:	0800d80d 	.word	0x0800d80d
 800d7c8:	0800d80d 	.word	0x0800d80d
 800d7cc:	0800d80d 	.word	0x0800d80d
 800d7d0:	0800d80d 	.word	0x0800d80d
 800d7d4:	0800d80d 	.word	0x0800d80d
 800d7d8:	0800d805 	.word	0x0800d805
 800d7dc:	2301      	movs	r3, #1
 800d7de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7e2:	e0d6      	b.n	800d992 <UART_SetConfig+0x7ae>
 800d7e4:	2304      	movs	r3, #4
 800d7e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7ea:	e0d2      	b.n	800d992 <UART_SetConfig+0x7ae>
 800d7ec:	2308      	movs	r3, #8
 800d7ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7f2:	e0ce      	b.n	800d992 <UART_SetConfig+0x7ae>
 800d7f4:	2310      	movs	r3, #16
 800d7f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7fa:	e0ca      	b.n	800d992 <UART_SetConfig+0x7ae>
 800d7fc:	2320      	movs	r3, #32
 800d7fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d802:	e0c6      	b.n	800d992 <UART_SetConfig+0x7ae>
 800d804:	2340      	movs	r3, #64	@ 0x40
 800d806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d80a:	e0c2      	b.n	800d992 <UART_SetConfig+0x7ae>
 800d80c:	2380      	movs	r3, #128	@ 0x80
 800d80e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d812:	e0be      	b.n	800d992 <UART_SetConfig+0x7ae>
 800d814:	40011400 	.word	0x40011400
 800d818:	58024400 	.word	0x58024400
 800d81c:	40007800 	.word	0x40007800
 800d820:	40007c00 	.word	0x40007c00
 800d824:	40011800 	.word	0x40011800
 800d828:	697b      	ldr	r3, [r7, #20]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	4aad      	ldr	r2, [pc, #692]	@ (800dae4 <UART_SetConfig+0x900>)
 800d82e:	4293      	cmp	r3, r2
 800d830:	d176      	bne.n	800d920 <UART_SetConfig+0x73c>
 800d832:	4bad      	ldr	r3, [pc, #692]	@ (800dae8 <UART_SetConfig+0x904>)
 800d834:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d836:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d83a:	2b28      	cmp	r3, #40	@ 0x28
 800d83c:	d86c      	bhi.n	800d918 <UART_SetConfig+0x734>
 800d83e:	a201      	add	r2, pc, #4	@ (adr r2, 800d844 <UART_SetConfig+0x660>)
 800d840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d844:	0800d8e9 	.word	0x0800d8e9
 800d848:	0800d919 	.word	0x0800d919
 800d84c:	0800d919 	.word	0x0800d919
 800d850:	0800d919 	.word	0x0800d919
 800d854:	0800d919 	.word	0x0800d919
 800d858:	0800d919 	.word	0x0800d919
 800d85c:	0800d919 	.word	0x0800d919
 800d860:	0800d919 	.word	0x0800d919
 800d864:	0800d8f1 	.word	0x0800d8f1
 800d868:	0800d919 	.word	0x0800d919
 800d86c:	0800d919 	.word	0x0800d919
 800d870:	0800d919 	.word	0x0800d919
 800d874:	0800d919 	.word	0x0800d919
 800d878:	0800d919 	.word	0x0800d919
 800d87c:	0800d919 	.word	0x0800d919
 800d880:	0800d919 	.word	0x0800d919
 800d884:	0800d8f9 	.word	0x0800d8f9
 800d888:	0800d919 	.word	0x0800d919
 800d88c:	0800d919 	.word	0x0800d919
 800d890:	0800d919 	.word	0x0800d919
 800d894:	0800d919 	.word	0x0800d919
 800d898:	0800d919 	.word	0x0800d919
 800d89c:	0800d919 	.word	0x0800d919
 800d8a0:	0800d919 	.word	0x0800d919
 800d8a4:	0800d901 	.word	0x0800d901
 800d8a8:	0800d919 	.word	0x0800d919
 800d8ac:	0800d919 	.word	0x0800d919
 800d8b0:	0800d919 	.word	0x0800d919
 800d8b4:	0800d919 	.word	0x0800d919
 800d8b8:	0800d919 	.word	0x0800d919
 800d8bc:	0800d919 	.word	0x0800d919
 800d8c0:	0800d919 	.word	0x0800d919
 800d8c4:	0800d909 	.word	0x0800d909
 800d8c8:	0800d919 	.word	0x0800d919
 800d8cc:	0800d919 	.word	0x0800d919
 800d8d0:	0800d919 	.word	0x0800d919
 800d8d4:	0800d919 	.word	0x0800d919
 800d8d8:	0800d919 	.word	0x0800d919
 800d8dc:	0800d919 	.word	0x0800d919
 800d8e0:	0800d919 	.word	0x0800d919
 800d8e4:	0800d911 	.word	0x0800d911
 800d8e8:	2301      	movs	r3, #1
 800d8ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8ee:	e050      	b.n	800d992 <UART_SetConfig+0x7ae>
 800d8f0:	2304      	movs	r3, #4
 800d8f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8f6:	e04c      	b.n	800d992 <UART_SetConfig+0x7ae>
 800d8f8:	2308      	movs	r3, #8
 800d8fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8fe:	e048      	b.n	800d992 <UART_SetConfig+0x7ae>
 800d900:	2310      	movs	r3, #16
 800d902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d906:	e044      	b.n	800d992 <UART_SetConfig+0x7ae>
 800d908:	2320      	movs	r3, #32
 800d90a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d90e:	e040      	b.n	800d992 <UART_SetConfig+0x7ae>
 800d910:	2340      	movs	r3, #64	@ 0x40
 800d912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d916:	e03c      	b.n	800d992 <UART_SetConfig+0x7ae>
 800d918:	2380      	movs	r3, #128	@ 0x80
 800d91a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d91e:	e038      	b.n	800d992 <UART_SetConfig+0x7ae>
 800d920:	697b      	ldr	r3, [r7, #20]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	4a71      	ldr	r2, [pc, #452]	@ (800daec <UART_SetConfig+0x908>)
 800d926:	4293      	cmp	r3, r2
 800d928:	d130      	bne.n	800d98c <UART_SetConfig+0x7a8>
 800d92a:	4b6f      	ldr	r3, [pc, #444]	@ (800dae8 <UART_SetConfig+0x904>)
 800d92c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d92e:	f003 0307 	and.w	r3, r3, #7
 800d932:	2b05      	cmp	r3, #5
 800d934:	d826      	bhi.n	800d984 <UART_SetConfig+0x7a0>
 800d936:	a201      	add	r2, pc, #4	@ (adr r2, 800d93c <UART_SetConfig+0x758>)
 800d938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d93c:	0800d955 	.word	0x0800d955
 800d940:	0800d95d 	.word	0x0800d95d
 800d944:	0800d965 	.word	0x0800d965
 800d948:	0800d96d 	.word	0x0800d96d
 800d94c:	0800d975 	.word	0x0800d975
 800d950:	0800d97d 	.word	0x0800d97d
 800d954:	2302      	movs	r3, #2
 800d956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d95a:	e01a      	b.n	800d992 <UART_SetConfig+0x7ae>
 800d95c:	2304      	movs	r3, #4
 800d95e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d962:	e016      	b.n	800d992 <UART_SetConfig+0x7ae>
 800d964:	2308      	movs	r3, #8
 800d966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d96a:	e012      	b.n	800d992 <UART_SetConfig+0x7ae>
 800d96c:	2310      	movs	r3, #16
 800d96e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d972:	e00e      	b.n	800d992 <UART_SetConfig+0x7ae>
 800d974:	2320      	movs	r3, #32
 800d976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d97a:	e00a      	b.n	800d992 <UART_SetConfig+0x7ae>
 800d97c:	2340      	movs	r3, #64	@ 0x40
 800d97e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d982:	e006      	b.n	800d992 <UART_SetConfig+0x7ae>
 800d984:	2380      	movs	r3, #128	@ 0x80
 800d986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d98a:	e002      	b.n	800d992 <UART_SetConfig+0x7ae>
 800d98c:	2380      	movs	r3, #128	@ 0x80
 800d98e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d992:	697b      	ldr	r3, [r7, #20]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	4a55      	ldr	r2, [pc, #340]	@ (800daec <UART_SetConfig+0x908>)
 800d998:	4293      	cmp	r3, r2
 800d99a:	f040 80f8 	bne.w	800db8e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d99e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d9a2:	2b20      	cmp	r3, #32
 800d9a4:	dc46      	bgt.n	800da34 <UART_SetConfig+0x850>
 800d9a6:	2b02      	cmp	r3, #2
 800d9a8:	db75      	blt.n	800da96 <UART_SetConfig+0x8b2>
 800d9aa:	3b02      	subs	r3, #2
 800d9ac:	2b1e      	cmp	r3, #30
 800d9ae:	d872      	bhi.n	800da96 <UART_SetConfig+0x8b2>
 800d9b0:	a201      	add	r2, pc, #4	@ (adr r2, 800d9b8 <UART_SetConfig+0x7d4>)
 800d9b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9b6:	bf00      	nop
 800d9b8:	0800da3b 	.word	0x0800da3b
 800d9bc:	0800da97 	.word	0x0800da97
 800d9c0:	0800da43 	.word	0x0800da43
 800d9c4:	0800da97 	.word	0x0800da97
 800d9c8:	0800da97 	.word	0x0800da97
 800d9cc:	0800da97 	.word	0x0800da97
 800d9d0:	0800da53 	.word	0x0800da53
 800d9d4:	0800da97 	.word	0x0800da97
 800d9d8:	0800da97 	.word	0x0800da97
 800d9dc:	0800da97 	.word	0x0800da97
 800d9e0:	0800da97 	.word	0x0800da97
 800d9e4:	0800da97 	.word	0x0800da97
 800d9e8:	0800da97 	.word	0x0800da97
 800d9ec:	0800da97 	.word	0x0800da97
 800d9f0:	0800da63 	.word	0x0800da63
 800d9f4:	0800da97 	.word	0x0800da97
 800d9f8:	0800da97 	.word	0x0800da97
 800d9fc:	0800da97 	.word	0x0800da97
 800da00:	0800da97 	.word	0x0800da97
 800da04:	0800da97 	.word	0x0800da97
 800da08:	0800da97 	.word	0x0800da97
 800da0c:	0800da97 	.word	0x0800da97
 800da10:	0800da97 	.word	0x0800da97
 800da14:	0800da97 	.word	0x0800da97
 800da18:	0800da97 	.word	0x0800da97
 800da1c:	0800da97 	.word	0x0800da97
 800da20:	0800da97 	.word	0x0800da97
 800da24:	0800da97 	.word	0x0800da97
 800da28:	0800da97 	.word	0x0800da97
 800da2c:	0800da97 	.word	0x0800da97
 800da30:	0800da89 	.word	0x0800da89
 800da34:	2b40      	cmp	r3, #64	@ 0x40
 800da36:	d02a      	beq.n	800da8e <UART_SetConfig+0x8aa>
 800da38:	e02d      	b.n	800da96 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800da3a:	f7fc f835 	bl	8009aa8 <HAL_RCCEx_GetD3PCLK1Freq>
 800da3e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800da40:	e02f      	b.n	800daa2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800da42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800da46:	4618      	mov	r0, r3
 800da48:	f7fc f844 	bl	8009ad4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800da4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800da50:	e027      	b.n	800daa2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800da52:	f107 0318 	add.w	r3, r7, #24
 800da56:	4618      	mov	r0, r3
 800da58:	f7fc f990 	bl	8009d7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800da5c:	69fb      	ldr	r3, [r7, #28]
 800da5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800da60:	e01f      	b.n	800daa2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800da62:	4b21      	ldr	r3, [pc, #132]	@ (800dae8 <UART_SetConfig+0x904>)
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	f003 0320 	and.w	r3, r3, #32
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d009      	beq.n	800da82 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800da6e:	4b1e      	ldr	r3, [pc, #120]	@ (800dae8 <UART_SetConfig+0x904>)
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	08db      	lsrs	r3, r3, #3
 800da74:	f003 0303 	and.w	r3, r3, #3
 800da78:	4a1d      	ldr	r2, [pc, #116]	@ (800daf0 <UART_SetConfig+0x90c>)
 800da7a:	fa22 f303 	lsr.w	r3, r2, r3
 800da7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800da80:	e00f      	b.n	800daa2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800da82:	4b1b      	ldr	r3, [pc, #108]	@ (800daf0 <UART_SetConfig+0x90c>)
 800da84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800da86:	e00c      	b.n	800daa2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800da88:	4b1a      	ldr	r3, [pc, #104]	@ (800daf4 <UART_SetConfig+0x910>)
 800da8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800da8c:	e009      	b.n	800daa2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800da8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800da92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800da94:	e005      	b.n	800daa2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800da96:	2300      	movs	r3, #0
 800da98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800da9a:	2301      	movs	r3, #1
 800da9c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800daa0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800daa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	f000 81ee 	beq.w	800de86 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800daaa:	697b      	ldr	r3, [r7, #20]
 800daac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800daae:	4a12      	ldr	r2, [pc, #72]	@ (800daf8 <UART_SetConfig+0x914>)
 800dab0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dab4:	461a      	mov	r2, r3
 800dab6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dab8:	fbb3 f3f2 	udiv	r3, r3, r2
 800dabc:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dabe:	697b      	ldr	r3, [r7, #20]
 800dac0:	685a      	ldr	r2, [r3, #4]
 800dac2:	4613      	mov	r3, r2
 800dac4:	005b      	lsls	r3, r3, #1
 800dac6:	4413      	add	r3, r2
 800dac8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800daca:	429a      	cmp	r2, r3
 800dacc:	d305      	bcc.n	800dada <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800dace:	697b      	ldr	r3, [r7, #20]
 800dad0:	685b      	ldr	r3, [r3, #4]
 800dad2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dad4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dad6:	429a      	cmp	r2, r3
 800dad8:	d910      	bls.n	800dafc <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800dada:	2301      	movs	r3, #1
 800dadc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800dae0:	e1d1      	b.n	800de86 <UART_SetConfig+0xca2>
 800dae2:	bf00      	nop
 800dae4:	40011c00 	.word	0x40011c00
 800dae8:	58024400 	.word	0x58024400
 800daec:	58000c00 	.word	0x58000c00
 800daf0:	03d09000 	.word	0x03d09000
 800daf4:	003d0900 	.word	0x003d0900
 800daf8:	080130a8 	.word	0x080130a8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dafc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dafe:	2200      	movs	r2, #0
 800db00:	60bb      	str	r3, [r7, #8]
 800db02:	60fa      	str	r2, [r7, #12]
 800db04:	697b      	ldr	r3, [r7, #20]
 800db06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db08:	4ac0      	ldr	r2, [pc, #768]	@ (800de0c <UART_SetConfig+0xc28>)
 800db0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800db0e:	b29b      	uxth	r3, r3
 800db10:	2200      	movs	r2, #0
 800db12:	603b      	str	r3, [r7, #0]
 800db14:	607a      	str	r2, [r7, #4]
 800db16:	e9d7 2300 	ldrd	r2, r3, [r7]
 800db1a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800db1e:	f7f2 fc37 	bl	8000390 <__aeabi_uldivmod>
 800db22:	4602      	mov	r2, r0
 800db24:	460b      	mov	r3, r1
 800db26:	4610      	mov	r0, r2
 800db28:	4619      	mov	r1, r3
 800db2a:	f04f 0200 	mov.w	r2, #0
 800db2e:	f04f 0300 	mov.w	r3, #0
 800db32:	020b      	lsls	r3, r1, #8
 800db34:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800db38:	0202      	lsls	r2, r0, #8
 800db3a:	6979      	ldr	r1, [r7, #20]
 800db3c:	6849      	ldr	r1, [r1, #4]
 800db3e:	0849      	lsrs	r1, r1, #1
 800db40:	2000      	movs	r0, #0
 800db42:	460c      	mov	r4, r1
 800db44:	4605      	mov	r5, r0
 800db46:	eb12 0804 	adds.w	r8, r2, r4
 800db4a:	eb43 0905 	adc.w	r9, r3, r5
 800db4e:	697b      	ldr	r3, [r7, #20]
 800db50:	685b      	ldr	r3, [r3, #4]
 800db52:	2200      	movs	r2, #0
 800db54:	469a      	mov	sl, r3
 800db56:	4693      	mov	fp, r2
 800db58:	4652      	mov	r2, sl
 800db5a:	465b      	mov	r3, fp
 800db5c:	4640      	mov	r0, r8
 800db5e:	4649      	mov	r1, r9
 800db60:	f7f2 fc16 	bl	8000390 <__aeabi_uldivmod>
 800db64:	4602      	mov	r2, r0
 800db66:	460b      	mov	r3, r1
 800db68:	4613      	mov	r3, r2
 800db6a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800db6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db6e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800db72:	d308      	bcc.n	800db86 <UART_SetConfig+0x9a2>
 800db74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800db7a:	d204      	bcs.n	800db86 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800db7c:	697b      	ldr	r3, [r7, #20]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800db82:	60da      	str	r2, [r3, #12]
 800db84:	e17f      	b.n	800de86 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800db86:	2301      	movs	r3, #1
 800db88:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800db8c:	e17b      	b.n	800de86 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800db8e:	697b      	ldr	r3, [r7, #20]
 800db90:	69db      	ldr	r3, [r3, #28]
 800db92:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800db96:	f040 80bd 	bne.w	800dd14 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800db9a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800db9e:	2b20      	cmp	r3, #32
 800dba0:	dc48      	bgt.n	800dc34 <UART_SetConfig+0xa50>
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	db7b      	blt.n	800dc9e <UART_SetConfig+0xaba>
 800dba6:	2b20      	cmp	r3, #32
 800dba8:	d879      	bhi.n	800dc9e <UART_SetConfig+0xaba>
 800dbaa:	a201      	add	r2, pc, #4	@ (adr r2, 800dbb0 <UART_SetConfig+0x9cc>)
 800dbac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbb0:	0800dc3b 	.word	0x0800dc3b
 800dbb4:	0800dc43 	.word	0x0800dc43
 800dbb8:	0800dc9f 	.word	0x0800dc9f
 800dbbc:	0800dc9f 	.word	0x0800dc9f
 800dbc0:	0800dc4b 	.word	0x0800dc4b
 800dbc4:	0800dc9f 	.word	0x0800dc9f
 800dbc8:	0800dc9f 	.word	0x0800dc9f
 800dbcc:	0800dc9f 	.word	0x0800dc9f
 800dbd0:	0800dc5b 	.word	0x0800dc5b
 800dbd4:	0800dc9f 	.word	0x0800dc9f
 800dbd8:	0800dc9f 	.word	0x0800dc9f
 800dbdc:	0800dc9f 	.word	0x0800dc9f
 800dbe0:	0800dc9f 	.word	0x0800dc9f
 800dbe4:	0800dc9f 	.word	0x0800dc9f
 800dbe8:	0800dc9f 	.word	0x0800dc9f
 800dbec:	0800dc9f 	.word	0x0800dc9f
 800dbf0:	0800dc6b 	.word	0x0800dc6b
 800dbf4:	0800dc9f 	.word	0x0800dc9f
 800dbf8:	0800dc9f 	.word	0x0800dc9f
 800dbfc:	0800dc9f 	.word	0x0800dc9f
 800dc00:	0800dc9f 	.word	0x0800dc9f
 800dc04:	0800dc9f 	.word	0x0800dc9f
 800dc08:	0800dc9f 	.word	0x0800dc9f
 800dc0c:	0800dc9f 	.word	0x0800dc9f
 800dc10:	0800dc9f 	.word	0x0800dc9f
 800dc14:	0800dc9f 	.word	0x0800dc9f
 800dc18:	0800dc9f 	.word	0x0800dc9f
 800dc1c:	0800dc9f 	.word	0x0800dc9f
 800dc20:	0800dc9f 	.word	0x0800dc9f
 800dc24:	0800dc9f 	.word	0x0800dc9f
 800dc28:	0800dc9f 	.word	0x0800dc9f
 800dc2c:	0800dc9f 	.word	0x0800dc9f
 800dc30:	0800dc91 	.word	0x0800dc91
 800dc34:	2b40      	cmp	r3, #64	@ 0x40
 800dc36:	d02e      	beq.n	800dc96 <UART_SetConfig+0xab2>
 800dc38:	e031      	b.n	800dc9e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dc3a:	f7fa fd4b 	bl	80086d4 <HAL_RCC_GetPCLK1Freq>
 800dc3e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800dc40:	e033      	b.n	800dcaa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dc42:	f7fa fd5d 	bl	8008700 <HAL_RCC_GetPCLK2Freq>
 800dc46:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800dc48:	e02f      	b.n	800dcaa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dc4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800dc4e:	4618      	mov	r0, r3
 800dc50:	f7fb ff40 	bl	8009ad4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dc54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dc58:	e027      	b.n	800dcaa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dc5a:	f107 0318 	add.w	r3, r7, #24
 800dc5e:	4618      	mov	r0, r3
 800dc60:	f7fc f88c 	bl	8009d7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dc64:	69fb      	ldr	r3, [r7, #28]
 800dc66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dc68:	e01f      	b.n	800dcaa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dc6a:	4b69      	ldr	r3, [pc, #420]	@ (800de10 <UART_SetConfig+0xc2c>)
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	f003 0320 	and.w	r3, r3, #32
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d009      	beq.n	800dc8a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dc76:	4b66      	ldr	r3, [pc, #408]	@ (800de10 <UART_SetConfig+0xc2c>)
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	08db      	lsrs	r3, r3, #3
 800dc7c:	f003 0303 	and.w	r3, r3, #3
 800dc80:	4a64      	ldr	r2, [pc, #400]	@ (800de14 <UART_SetConfig+0xc30>)
 800dc82:	fa22 f303 	lsr.w	r3, r2, r3
 800dc86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dc88:	e00f      	b.n	800dcaa <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800dc8a:	4b62      	ldr	r3, [pc, #392]	@ (800de14 <UART_SetConfig+0xc30>)
 800dc8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dc8e:	e00c      	b.n	800dcaa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800dc90:	4b61      	ldr	r3, [pc, #388]	@ (800de18 <UART_SetConfig+0xc34>)
 800dc92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dc94:	e009      	b.n	800dcaa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dc96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dc9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dc9c:	e005      	b.n	800dcaa <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800dc9e:	2300      	movs	r3, #0
 800dca0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800dca2:	2301      	movs	r3, #1
 800dca4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800dca8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800dcaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	f000 80ea 	beq.w	800de86 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dcb2:	697b      	ldr	r3, [r7, #20]
 800dcb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dcb6:	4a55      	ldr	r2, [pc, #340]	@ (800de0c <UART_SetConfig+0xc28>)
 800dcb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dcbc:	461a      	mov	r2, r3
 800dcbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dcc0:	fbb3 f3f2 	udiv	r3, r3, r2
 800dcc4:	005a      	lsls	r2, r3, #1
 800dcc6:	697b      	ldr	r3, [r7, #20]
 800dcc8:	685b      	ldr	r3, [r3, #4]
 800dcca:	085b      	lsrs	r3, r3, #1
 800dccc:	441a      	add	r2, r3
 800dcce:	697b      	ldr	r3, [r7, #20]
 800dcd0:	685b      	ldr	r3, [r3, #4]
 800dcd2:	fbb2 f3f3 	udiv	r3, r2, r3
 800dcd6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dcd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcda:	2b0f      	cmp	r3, #15
 800dcdc:	d916      	bls.n	800dd0c <UART_SetConfig+0xb28>
 800dcde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dce0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dce4:	d212      	bcs.n	800dd0c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800dce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dce8:	b29b      	uxth	r3, r3
 800dcea:	f023 030f 	bic.w	r3, r3, #15
 800dcee:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800dcf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcf2:	085b      	lsrs	r3, r3, #1
 800dcf4:	b29b      	uxth	r3, r3
 800dcf6:	f003 0307 	and.w	r3, r3, #7
 800dcfa:	b29a      	uxth	r2, r3
 800dcfc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800dcfe:	4313      	orrs	r3, r2
 800dd00:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800dd02:	697b      	ldr	r3, [r7, #20]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800dd08:	60da      	str	r2, [r3, #12]
 800dd0a:	e0bc      	b.n	800de86 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800dd0c:	2301      	movs	r3, #1
 800dd0e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800dd12:	e0b8      	b.n	800de86 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800dd14:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800dd18:	2b20      	cmp	r3, #32
 800dd1a:	dc4b      	bgt.n	800ddb4 <UART_SetConfig+0xbd0>
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	f2c0 8087 	blt.w	800de30 <UART_SetConfig+0xc4c>
 800dd22:	2b20      	cmp	r3, #32
 800dd24:	f200 8084 	bhi.w	800de30 <UART_SetConfig+0xc4c>
 800dd28:	a201      	add	r2, pc, #4	@ (adr r2, 800dd30 <UART_SetConfig+0xb4c>)
 800dd2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd2e:	bf00      	nop
 800dd30:	0800ddbb 	.word	0x0800ddbb
 800dd34:	0800ddc3 	.word	0x0800ddc3
 800dd38:	0800de31 	.word	0x0800de31
 800dd3c:	0800de31 	.word	0x0800de31
 800dd40:	0800ddcb 	.word	0x0800ddcb
 800dd44:	0800de31 	.word	0x0800de31
 800dd48:	0800de31 	.word	0x0800de31
 800dd4c:	0800de31 	.word	0x0800de31
 800dd50:	0800dddb 	.word	0x0800dddb
 800dd54:	0800de31 	.word	0x0800de31
 800dd58:	0800de31 	.word	0x0800de31
 800dd5c:	0800de31 	.word	0x0800de31
 800dd60:	0800de31 	.word	0x0800de31
 800dd64:	0800de31 	.word	0x0800de31
 800dd68:	0800de31 	.word	0x0800de31
 800dd6c:	0800de31 	.word	0x0800de31
 800dd70:	0800ddeb 	.word	0x0800ddeb
 800dd74:	0800de31 	.word	0x0800de31
 800dd78:	0800de31 	.word	0x0800de31
 800dd7c:	0800de31 	.word	0x0800de31
 800dd80:	0800de31 	.word	0x0800de31
 800dd84:	0800de31 	.word	0x0800de31
 800dd88:	0800de31 	.word	0x0800de31
 800dd8c:	0800de31 	.word	0x0800de31
 800dd90:	0800de31 	.word	0x0800de31
 800dd94:	0800de31 	.word	0x0800de31
 800dd98:	0800de31 	.word	0x0800de31
 800dd9c:	0800de31 	.word	0x0800de31
 800dda0:	0800de31 	.word	0x0800de31
 800dda4:	0800de31 	.word	0x0800de31
 800dda8:	0800de31 	.word	0x0800de31
 800ddac:	0800de31 	.word	0x0800de31
 800ddb0:	0800de23 	.word	0x0800de23
 800ddb4:	2b40      	cmp	r3, #64	@ 0x40
 800ddb6:	d037      	beq.n	800de28 <UART_SetConfig+0xc44>
 800ddb8:	e03a      	b.n	800de30 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ddba:	f7fa fc8b 	bl	80086d4 <HAL_RCC_GetPCLK1Freq>
 800ddbe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ddc0:	e03c      	b.n	800de3c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ddc2:	f7fa fc9d 	bl	8008700 <HAL_RCC_GetPCLK2Freq>
 800ddc6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ddc8:	e038      	b.n	800de3c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ddca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ddce:	4618      	mov	r0, r3
 800ddd0:	f7fb fe80 	bl	8009ad4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ddd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ddd8:	e030      	b.n	800de3c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ddda:	f107 0318 	add.w	r3, r7, #24
 800ddde:	4618      	mov	r0, r3
 800dde0:	f7fb ffcc 	bl	8009d7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dde4:	69fb      	ldr	r3, [r7, #28]
 800dde6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dde8:	e028      	b.n	800de3c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ddea:	4b09      	ldr	r3, [pc, #36]	@ (800de10 <UART_SetConfig+0xc2c>)
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	f003 0320 	and.w	r3, r3, #32
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d012      	beq.n	800de1c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ddf6:	4b06      	ldr	r3, [pc, #24]	@ (800de10 <UART_SetConfig+0xc2c>)
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	08db      	lsrs	r3, r3, #3
 800ddfc:	f003 0303 	and.w	r3, r3, #3
 800de00:	4a04      	ldr	r2, [pc, #16]	@ (800de14 <UART_SetConfig+0xc30>)
 800de02:	fa22 f303 	lsr.w	r3, r2, r3
 800de06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800de08:	e018      	b.n	800de3c <UART_SetConfig+0xc58>
 800de0a:	bf00      	nop
 800de0c:	080130a8 	.word	0x080130a8
 800de10:	58024400 	.word	0x58024400
 800de14:	03d09000 	.word	0x03d09000
 800de18:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800de1c:	4b24      	ldr	r3, [pc, #144]	@ (800deb0 <UART_SetConfig+0xccc>)
 800de1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800de20:	e00c      	b.n	800de3c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800de22:	4b24      	ldr	r3, [pc, #144]	@ (800deb4 <UART_SetConfig+0xcd0>)
 800de24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800de26:	e009      	b.n	800de3c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800de28:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800de2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800de2e:	e005      	b.n	800de3c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800de30:	2300      	movs	r3, #0
 800de32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800de34:	2301      	movs	r3, #1
 800de36:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800de3a:	bf00      	nop
    }

    if (pclk != 0U)
 800de3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d021      	beq.n	800de86 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800de42:	697b      	ldr	r3, [r7, #20]
 800de44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de46:	4a1c      	ldr	r2, [pc, #112]	@ (800deb8 <UART_SetConfig+0xcd4>)
 800de48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800de4c:	461a      	mov	r2, r3
 800de4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de50:	fbb3 f2f2 	udiv	r2, r3, r2
 800de54:	697b      	ldr	r3, [r7, #20]
 800de56:	685b      	ldr	r3, [r3, #4]
 800de58:	085b      	lsrs	r3, r3, #1
 800de5a:	441a      	add	r2, r3
 800de5c:	697b      	ldr	r3, [r7, #20]
 800de5e:	685b      	ldr	r3, [r3, #4]
 800de60:	fbb2 f3f3 	udiv	r3, r2, r3
 800de64:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800de66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de68:	2b0f      	cmp	r3, #15
 800de6a:	d909      	bls.n	800de80 <UART_SetConfig+0xc9c>
 800de6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800de72:	d205      	bcs.n	800de80 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800de74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de76:	b29a      	uxth	r2, r3
 800de78:	697b      	ldr	r3, [r7, #20]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	60da      	str	r2, [r3, #12]
 800de7e:	e002      	b.n	800de86 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800de80:	2301      	movs	r3, #1
 800de82:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800de86:	697b      	ldr	r3, [r7, #20]
 800de88:	2201      	movs	r2, #1
 800de8a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800de8e:	697b      	ldr	r3, [r7, #20]
 800de90:	2201      	movs	r2, #1
 800de92:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800de96:	697b      	ldr	r3, [r7, #20]
 800de98:	2200      	movs	r2, #0
 800de9a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800de9c:	697b      	ldr	r3, [r7, #20]
 800de9e:	2200      	movs	r2, #0
 800dea0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800dea2:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800dea6:	4618      	mov	r0, r3
 800dea8:	3748      	adds	r7, #72	@ 0x48
 800deaa:	46bd      	mov	sp, r7
 800deac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800deb0:	03d09000 	.word	0x03d09000
 800deb4:	003d0900 	.word	0x003d0900
 800deb8:	080130a8 	.word	0x080130a8

0800debc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800debc:	b480      	push	{r7}
 800debe:	b083      	sub	sp, #12
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dec8:	f003 0308 	and.w	r3, r3, #8
 800decc:	2b00      	cmp	r3, #0
 800dece:	d00a      	beq.n	800dee6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	685b      	ldr	r3, [r3, #4]
 800ded6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	430a      	orrs	r2, r1
 800dee4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800deea:	f003 0301 	and.w	r3, r3, #1
 800deee:	2b00      	cmp	r3, #0
 800def0:	d00a      	beq.n	800df08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	685b      	ldr	r3, [r3, #4]
 800def8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	430a      	orrs	r2, r1
 800df06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df0c:	f003 0302 	and.w	r3, r3, #2
 800df10:	2b00      	cmp	r3, #0
 800df12:	d00a      	beq.n	800df2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	685b      	ldr	r3, [r3, #4]
 800df1a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	430a      	orrs	r2, r1
 800df28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df2e:	f003 0304 	and.w	r3, r3, #4
 800df32:	2b00      	cmp	r3, #0
 800df34:	d00a      	beq.n	800df4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	685b      	ldr	r3, [r3, #4]
 800df3c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	430a      	orrs	r2, r1
 800df4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df50:	f003 0310 	and.w	r3, r3, #16
 800df54:	2b00      	cmp	r3, #0
 800df56:	d00a      	beq.n	800df6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	689b      	ldr	r3, [r3, #8]
 800df5e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	430a      	orrs	r2, r1
 800df6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df72:	f003 0320 	and.w	r3, r3, #32
 800df76:	2b00      	cmp	r3, #0
 800df78:	d00a      	beq.n	800df90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	689b      	ldr	r3, [r3, #8]
 800df80:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	430a      	orrs	r2, r1
 800df8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d01a      	beq.n	800dfd2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	685b      	ldr	r3, [r3, #4]
 800dfa2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	430a      	orrs	r2, r1
 800dfb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dfb6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dfba:	d10a      	bne.n	800dfd2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	685b      	ldr	r3, [r3, #4]
 800dfc2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	430a      	orrs	r2, r1
 800dfd0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dfd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d00a      	beq.n	800dff4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	685b      	ldr	r3, [r3, #4]
 800dfe4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	430a      	orrs	r2, r1
 800dff2:	605a      	str	r2, [r3, #4]
  }
}
 800dff4:	bf00      	nop
 800dff6:	370c      	adds	r7, #12
 800dff8:	46bd      	mov	sp, r7
 800dffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dffe:	4770      	bx	lr

0800e000 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e000:	b580      	push	{r7, lr}
 800e002:	b098      	sub	sp, #96	@ 0x60
 800e004:	af02      	add	r7, sp, #8
 800e006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	2200      	movs	r2, #0
 800e00c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e010:	f7f5 fc9c 	bl	800394c <HAL_GetTick>
 800e014:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	f003 0308 	and.w	r3, r3, #8
 800e020:	2b08      	cmp	r3, #8
 800e022:	d12f      	bne.n	800e084 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e024:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e028:	9300      	str	r3, [sp, #0]
 800e02a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e02c:	2200      	movs	r2, #0
 800e02e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800e032:	6878      	ldr	r0, [r7, #4]
 800e034:	f000 f88e 	bl	800e154 <UART_WaitOnFlagUntilTimeout>
 800e038:	4603      	mov	r3, r0
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d022      	beq.n	800e084 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e046:	e853 3f00 	ldrex	r3, [r3]
 800e04a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e04c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e04e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e052:	653b      	str	r3, [r7, #80]	@ 0x50
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	461a      	mov	r2, r3
 800e05a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e05c:	647b      	str	r3, [r7, #68]	@ 0x44
 800e05e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e060:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e062:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e064:	e841 2300 	strex	r3, r2, [r1]
 800e068:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e06a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d1e6      	bne.n	800e03e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	2220      	movs	r2, #32
 800e074:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	2200      	movs	r2, #0
 800e07c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e080:	2303      	movs	r3, #3
 800e082:	e063      	b.n	800e14c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	f003 0304 	and.w	r3, r3, #4
 800e08e:	2b04      	cmp	r3, #4
 800e090:	d149      	bne.n	800e126 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e092:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e096:	9300      	str	r3, [sp, #0]
 800e098:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e09a:	2200      	movs	r2, #0
 800e09c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800e0a0:	6878      	ldr	r0, [r7, #4]
 800e0a2:	f000 f857 	bl	800e154 <UART_WaitOnFlagUntilTimeout>
 800e0a6:	4603      	mov	r3, r0
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d03c      	beq.n	800e126 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0b4:	e853 3f00 	ldrex	r3, [r3]
 800e0b8:	623b      	str	r3, [r7, #32]
   return(result);
 800e0ba:	6a3b      	ldr	r3, [r7, #32]
 800e0bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e0c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	461a      	mov	r2, r3
 800e0c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e0ca:	633b      	str	r3, [r7, #48]	@ 0x30
 800e0cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e0d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e0d2:	e841 2300 	strex	r3, r2, [r1]
 800e0d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e0d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d1e6      	bne.n	800e0ac <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	3308      	adds	r3, #8
 800e0e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0e6:	693b      	ldr	r3, [r7, #16]
 800e0e8:	e853 3f00 	ldrex	r3, [r3]
 800e0ec:	60fb      	str	r3, [r7, #12]
   return(result);
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	f023 0301 	bic.w	r3, r3, #1
 800e0f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	3308      	adds	r3, #8
 800e0fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e0fe:	61fa      	str	r2, [r7, #28]
 800e100:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e102:	69b9      	ldr	r1, [r7, #24]
 800e104:	69fa      	ldr	r2, [r7, #28]
 800e106:	e841 2300 	strex	r3, r2, [r1]
 800e10a:	617b      	str	r3, [r7, #20]
   return(result);
 800e10c:	697b      	ldr	r3, [r7, #20]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d1e5      	bne.n	800e0de <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	2220      	movs	r2, #32
 800e116:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	2200      	movs	r2, #0
 800e11e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e122:	2303      	movs	r3, #3
 800e124:	e012      	b.n	800e14c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	2220      	movs	r2, #32
 800e12a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	2220      	movs	r2, #32
 800e132:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	2200      	movs	r2, #0
 800e13a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	2200      	movs	r2, #0
 800e140:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	2200      	movs	r2, #0
 800e146:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e14a:	2300      	movs	r3, #0
}
 800e14c:	4618      	mov	r0, r3
 800e14e:	3758      	adds	r7, #88	@ 0x58
 800e150:	46bd      	mov	sp, r7
 800e152:	bd80      	pop	{r7, pc}

0800e154 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e154:	b580      	push	{r7, lr}
 800e156:	b084      	sub	sp, #16
 800e158:	af00      	add	r7, sp, #0
 800e15a:	60f8      	str	r0, [r7, #12]
 800e15c:	60b9      	str	r1, [r7, #8]
 800e15e:	603b      	str	r3, [r7, #0]
 800e160:	4613      	mov	r3, r2
 800e162:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e164:	e04f      	b.n	800e206 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e166:	69bb      	ldr	r3, [r7, #24]
 800e168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e16c:	d04b      	beq.n	800e206 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e16e:	f7f5 fbed 	bl	800394c <HAL_GetTick>
 800e172:	4602      	mov	r2, r0
 800e174:	683b      	ldr	r3, [r7, #0]
 800e176:	1ad3      	subs	r3, r2, r3
 800e178:	69ba      	ldr	r2, [r7, #24]
 800e17a:	429a      	cmp	r2, r3
 800e17c:	d302      	bcc.n	800e184 <UART_WaitOnFlagUntilTimeout+0x30>
 800e17e:	69bb      	ldr	r3, [r7, #24]
 800e180:	2b00      	cmp	r3, #0
 800e182:	d101      	bne.n	800e188 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e184:	2303      	movs	r3, #3
 800e186:	e04e      	b.n	800e226 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	f003 0304 	and.w	r3, r3, #4
 800e192:	2b00      	cmp	r3, #0
 800e194:	d037      	beq.n	800e206 <UART_WaitOnFlagUntilTimeout+0xb2>
 800e196:	68bb      	ldr	r3, [r7, #8]
 800e198:	2b80      	cmp	r3, #128	@ 0x80
 800e19a:	d034      	beq.n	800e206 <UART_WaitOnFlagUntilTimeout+0xb2>
 800e19c:	68bb      	ldr	r3, [r7, #8]
 800e19e:	2b40      	cmp	r3, #64	@ 0x40
 800e1a0:	d031      	beq.n	800e206 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	69db      	ldr	r3, [r3, #28]
 800e1a8:	f003 0308 	and.w	r3, r3, #8
 800e1ac:	2b08      	cmp	r3, #8
 800e1ae:	d110      	bne.n	800e1d2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	2208      	movs	r2, #8
 800e1b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e1b8:	68f8      	ldr	r0, [r7, #12]
 800e1ba:	f000 f921 	bl	800e400 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	2208      	movs	r2, #8
 800e1c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	2200      	movs	r2, #0
 800e1ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800e1ce:	2301      	movs	r3, #1
 800e1d0:	e029      	b.n	800e226 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	69db      	ldr	r3, [r3, #28]
 800e1d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e1dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e1e0:	d111      	bne.n	800e206 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e1ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e1ec:	68f8      	ldr	r0, [r7, #12]
 800e1ee:	f000 f907 	bl	800e400 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	2220      	movs	r2, #32
 800e1f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	2200      	movs	r2, #0
 800e1fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800e202:	2303      	movs	r3, #3
 800e204:	e00f      	b.n	800e226 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	69da      	ldr	r2, [r3, #28]
 800e20c:	68bb      	ldr	r3, [r7, #8]
 800e20e:	4013      	ands	r3, r2
 800e210:	68ba      	ldr	r2, [r7, #8]
 800e212:	429a      	cmp	r2, r3
 800e214:	bf0c      	ite	eq
 800e216:	2301      	moveq	r3, #1
 800e218:	2300      	movne	r3, #0
 800e21a:	b2db      	uxtb	r3, r3
 800e21c:	461a      	mov	r2, r3
 800e21e:	79fb      	ldrb	r3, [r7, #7]
 800e220:	429a      	cmp	r2, r3
 800e222:	d0a0      	beq.n	800e166 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e224:	2300      	movs	r3, #0
}
 800e226:	4618      	mov	r0, r3
 800e228:	3710      	adds	r7, #16
 800e22a:	46bd      	mov	sp, r7
 800e22c:	bd80      	pop	{r7, pc}
	...

0800e230 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e230:	b580      	push	{r7, lr}
 800e232:	b096      	sub	sp, #88	@ 0x58
 800e234:	af00      	add	r7, sp, #0
 800e236:	60f8      	str	r0, [r7, #12]
 800e238:	60b9      	str	r1, [r7, #8]
 800e23a:	4613      	mov	r3, r2
 800e23c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	68ba      	ldr	r2, [r7, #8]
 800e242:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	88fa      	ldrh	r2, [r7, #6]
 800e248:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	2200      	movs	r2, #0
 800e250:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	2222      	movs	r2, #34	@ 0x22
 800e258:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e262:	2b00      	cmp	r3, #0
 800e264:	d02d      	beq.n	800e2c2 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e26c:	4a40      	ldr	r2, [pc, #256]	@ (800e370 <UART_Start_Receive_DMA+0x140>)
 800e26e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e276:	4a3f      	ldr	r2, [pc, #252]	@ (800e374 <UART_Start_Receive_DMA+0x144>)
 800e278:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e280:	4a3d      	ldr	r2, [pc, #244]	@ (800e378 <UART_Start_Receive_DMA+0x148>)
 800e282:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e28a:	2200      	movs	r2, #0
 800e28c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	3324      	adds	r3, #36	@ 0x24
 800e29a:	4619      	mov	r1, r3
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e2a0:	461a      	mov	r2, r3
 800e2a2:	88fb      	ldrh	r3, [r7, #6]
 800e2a4:	f7f6 f898 	bl	80043d8 <HAL_DMA_Start_IT>
 800e2a8:	4603      	mov	r3, r0
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d009      	beq.n	800e2c2 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	2210      	movs	r2, #16
 800e2b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	2220      	movs	r2, #32
 800e2ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800e2be:	2301      	movs	r3, #1
 800e2c0:	e051      	b.n	800e366 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	691b      	ldr	r3, [r3, #16]
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d018      	beq.n	800e2fc <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e2d2:	e853 3f00 	ldrex	r3, [r3]
 800e2d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e2d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e2de:	657b      	str	r3, [r7, #84]	@ 0x54
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	461a      	mov	r2, r3
 800e2e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e2e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e2ea:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2ec:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e2ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e2f0:	e841 2300 	strex	r3, r2, [r1]
 800e2f4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800e2f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d1e6      	bne.n	800e2ca <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	3308      	adds	r3, #8
 800e302:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e306:	e853 3f00 	ldrex	r3, [r3]
 800e30a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e30c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e30e:	f043 0301 	orr.w	r3, r3, #1
 800e312:	653b      	str	r3, [r7, #80]	@ 0x50
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	3308      	adds	r3, #8
 800e31a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e31c:	637a      	str	r2, [r7, #52]	@ 0x34
 800e31e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e320:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e322:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e324:	e841 2300 	strex	r3, r2, [r1]
 800e328:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800e32a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d1e5      	bne.n	800e2fc <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	3308      	adds	r3, #8
 800e336:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e338:	697b      	ldr	r3, [r7, #20]
 800e33a:	e853 3f00 	ldrex	r3, [r3]
 800e33e:	613b      	str	r3, [r7, #16]
   return(result);
 800e340:	693b      	ldr	r3, [r7, #16]
 800e342:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e346:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	3308      	adds	r3, #8
 800e34e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e350:	623a      	str	r2, [r7, #32]
 800e352:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e354:	69f9      	ldr	r1, [r7, #28]
 800e356:	6a3a      	ldr	r2, [r7, #32]
 800e358:	e841 2300 	strex	r3, r2, [r1]
 800e35c:	61bb      	str	r3, [r7, #24]
   return(result);
 800e35e:	69bb      	ldr	r3, [r7, #24]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d1e5      	bne.n	800e330 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800e364:	2300      	movs	r3, #0
}
 800e366:	4618      	mov	r0, r3
 800e368:	3758      	adds	r7, #88	@ 0x58
 800e36a:	46bd      	mov	sp, r7
 800e36c:	bd80      	pop	{r7, pc}
 800e36e:	bf00      	nop
 800e370:	0800e4cd 	.word	0x0800e4cd
 800e374:	0800e5f5 	.word	0x0800e5f5
 800e378:	0800e633 	.word	0x0800e633

0800e37c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e37c:	b480      	push	{r7}
 800e37e:	b08f      	sub	sp, #60	@ 0x3c
 800e380:	af00      	add	r7, sp, #0
 800e382:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e38a:	6a3b      	ldr	r3, [r7, #32]
 800e38c:	e853 3f00 	ldrex	r3, [r3]
 800e390:	61fb      	str	r3, [r7, #28]
   return(result);
 800e392:	69fb      	ldr	r3, [r7, #28]
 800e394:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800e398:	637b      	str	r3, [r7, #52]	@ 0x34
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	461a      	mov	r2, r3
 800e3a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e3a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e3a4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e3a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e3aa:	e841 2300 	strex	r3, r2, [r1]
 800e3ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e3b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d1e6      	bne.n	800e384 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	3308      	adds	r3, #8
 800e3bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	e853 3f00 	ldrex	r3, [r3]
 800e3c4:	60bb      	str	r3, [r7, #8]
   return(result);
 800e3c6:	68bb      	ldr	r3, [r7, #8]
 800e3c8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800e3cc:	633b      	str	r3, [r7, #48]	@ 0x30
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	3308      	adds	r3, #8
 800e3d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e3d6:	61ba      	str	r2, [r7, #24]
 800e3d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3da:	6979      	ldr	r1, [r7, #20]
 800e3dc:	69ba      	ldr	r2, [r7, #24]
 800e3de:	e841 2300 	strex	r3, r2, [r1]
 800e3e2:	613b      	str	r3, [r7, #16]
   return(result);
 800e3e4:	693b      	ldr	r3, [r7, #16]
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d1e5      	bne.n	800e3b6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	2220      	movs	r2, #32
 800e3ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800e3f2:	bf00      	nop
 800e3f4:	373c      	adds	r7, #60	@ 0x3c
 800e3f6:	46bd      	mov	sp, r7
 800e3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3fc:	4770      	bx	lr
	...

0800e400 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e400:	b480      	push	{r7}
 800e402:	b095      	sub	sp, #84	@ 0x54
 800e404:	af00      	add	r7, sp, #0
 800e406:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e40e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e410:	e853 3f00 	ldrex	r3, [r3]
 800e414:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e418:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e41c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	461a      	mov	r2, r3
 800e424:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e426:	643b      	str	r3, [r7, #64]	@ 0x40
 800e428:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e42a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e42c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e42e:	e841 2300 	strex	r3, r2, [r1]
 800e432:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e436:	2b00      	cmp	r3, #0
 800e438:	d1e6      	bne.n	800e408 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	3308      	adds	r3, #8
 800e440:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e442:	6a3b      	ldr	r3, [r7, #32]
 800e444:	e853 3f00 	ldrex	r3, [r3]
 800e448:	61fb      	str	r3, [r7, #28]
   return(result);
 800e44a:	69fa      	ldr	r2, [r7, #28]
 800e44c:	4b1e      	ldr	r3, [pc, #120]	@ (800e4c8 <UART_EndRxTransfer+0xc8>)
 800e44e:	4013      	ands	r3, r2
 800e450:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	3308      	adds	r3, #8
 800e458:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e45a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e45c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e45e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e460:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e462:	e841 2300 	strex	r3, r2, [r1]
 800e466:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d1e5      	bne.n	800e43a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e472:	2b01      	cmp	r3, #1
 800e474:	d118      	bne.n	800e4a8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	e853 3f00 	ldrex	r3, [r3]
 800e482:	60bb      	str	r3, [r7, #8]
   return(result);
 800e484:	68bb      	ldr	r3, [r7, #8]
 800e486:	f023 0310 	bic.w	r3, r3, #16
 800e48a:	647b      	str	r3, [r7, #68]	@ 0x44
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	461a      	mov	r2, r3
 800e492:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e494:	61bb      	str	r3, [r7, #24]
 800e496:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e498:	6979      	ldr	r1, [r7, #20]
 800e49a:	69ba      	ldr	r2, [r7, #24]
 800e49c:	e841 2300 	strex	r3, r2, [r1]
 800e4a0:	613b      	str	r3, [r7, #16]
   return(result);
 800e4a2:	693b      	ldr	r3, [r7, #16]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d1e6      	bne.n	800e476 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	2220      	movs	r2, #32
 800e4ac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	2200      	movs	r2, #0
 800e4b4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	2200      	movs	r2, #0
 800e4ba:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800e4bc:	bf00      	nop
 800e4be:	3754      	adds	r7, #84	@ 0x54
 800e4c0:	46bd      	mov	sp, r7
 800e4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c6:	4770      	bx	lr
 800e4c8:	effffffe 	.word	0xeffffffe

0800e4cc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e4cc:	b580      	push	{r7, lr}
 800e4ce:	b09c      	sub	sp, #112	@ 0x70
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e4d8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	69db      	ldr	r3, [r3, #28]
 800e4de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e4e2:	d071      	beq.n	800e5c8 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800e4e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e4e6:	2200      	movs	r2, #0
 800e4e8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e4ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e4f4:	e853 3f00 	ldrex	r3, [r3]
 800e4f8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e4fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e4fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e500:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e502:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	461a      	mov	r2, r3
 800e508:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e50a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e50c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e50e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e510:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e512:	e841 2300 	strex	r3, r2, [r1]
 800e516:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e518:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d1e6      	bne.n	800e4ec <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e51e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	3308      	adds	r3, #8
 800e524:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e528:	e853 3f00 	ldrex	r3, [r3]
 800e52c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e52e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e530:	f023 0301 	bic.w	r3, r3, #1
 800e534:	667b      	str	r3, [r7, #100]	@ 0x64
 800e536:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	3308      	adds	r3, #8
 800e53c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e53e:	647a      	str	r2, [r7, #68]	@ 0x44
 800e540:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e542:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e544:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e546:	e841 2300 	strex	r3, r2, [r1]
 800e54a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e54c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d1e5      	bne.n	800e51e <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e552:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	3308      	adds	r3, #8
 800e558:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e55a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e55c:	e853 3f00 	ldrex	r3, [r3]
 800e560:	623b      	str	r3, [r7, #32]
   return(result);
 800e562:	6a3b      	ldr	r3, [r7, #32]
 800e564:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e568:	663b      	str	r3, [r7, #96]	@ 0x60
 800e56a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	3308      	adds	r3, #8
 800e570:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e572:	633a      	str	r2, [r7, #48]	@ 0x30
 800e574:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e576:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e578:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e57a:	e841 2300 	strex	r3, r2, [r1]
 800e57e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e582:	2b00      	cmp	r3, #0
 800e584:	d1e5      	bne.n	800e552 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e586:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e588:	2220      	movs	r2, #32
 800e58a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e58e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e590:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e592:	2b01      	cmp	r3, #1
 800e594:	d118      	bne.n	800e5c8 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e596:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e59c:	693b      	ldr	r3, [r7, #16]
 800e59e:	e853 3f00 	ldrex	r3, [r3]
 800e5a2:	60fb      	str	r3, [r7, #12]
   return(result);
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	f023 0310 	bic.w	r3, r3, #16
 800e5aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e5ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	461a      	mov	r2, r3
 800e5b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e5b4:	61fb      	str	r3, [r7, #28]
 800e5b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5b8:	69b9      	ldr	r1, [r7, #24]
 800e5ba:	69fa      	ldr	r2, [r7, #28]
 800e5bc:	e841 2300 	strex	r3, r2, [r1]
 800e5c0:	617b      	str	r3, [r7, #20]
   return(result);
 800e5c2:	697b      	ldr	r3, [r7, #20]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d1e6      	bne.n	800e596 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e5c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e5ca:	2200      	movs	r2, #0
 800e5cc:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e5ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e5d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e5d2:	2b01      	cmp	r3, #1
 800e5d4:	d107      	bne.n	800e5e6 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e5d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e5d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e5dc:	4619      	mov	r1, r3
 800e5de:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e5e0:	f7fe fdf4 	bl	800d1cc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e5e4:	e002      	b.n	800e5ec <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800e5e6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e5e8:	f7f4 f812 	bl	8002610 <HAL_UART_RxCpltCallback>
}
 800e5ec:	bf00      	nop
 800e5ee:	3770      	adds	r7, #112	@ 0x70
 800e5f0:	46bd      	mov	sp, r7
 800e5f2:	bd80      	pop	{r7, pc}

0800e5f4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	b084      	sub	sp, #16
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e600:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	2201      	movs	r2, #1
 800e606:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e60c:	2b01      	cmp	r3, #1
 800e60e:	d109      	bne.n	800e624 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e616:	085b      	lsrs	r3, r3, #1
 800e618:	b29b      	uxth	r3, r3
 800e61a:	4619      	mov	r1, r3
 800e61c:	68f8      	ldr	r0, [r7, #12]
 800e61e:	f7fe fdd5 	bl	800d1cc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e622:	e002      	b.n	800e62a <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800e624:	68f8      	ldr	r0, [r7, #12]
 800e626:	f7fe fdbd 	bl	800d1a4 <HAL_UART_RxHalfCpltCallback>
}
 800e62a:	bf00      	nop
 800e62c:	3710      	adds	r7, #16
 800e62e:	46bd      	mov	sp, r7
 800e630:	bd80      	pop	{r7, pc}

0800e632 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e632:	b580      	push	{r7, lr}
 800e634:	b086      	sub	sp, #24
 800e636:	af00      	add	r7, sp, #0
 800e638:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e63e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e640:	697b      	ldr	r3, [r7, #20]
 800e642:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e646:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e648:	697b      	ldr	r3, [r7, #20]
 800e64a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e64e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e650:	697b      	ldr	r3, [r7, #20]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	689b      	ldr	r3, [r3, #8]
 800e656:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e65a:	2b80      	cmp	r3, #128	@ 0x80
 800e65c:	d109      	bne.n	800e672 <UART_DMAError+0x40>
 800e65e:	693b      	ldr	r3, [r7, #16]
 800e660:	2b21      	cmp	r3, #33	@ 0x21
 800e662:	d106      	bne.n	800e672 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e664:	697b      	ldr	r3, [r7, #20]
 800e666:	2200      	movs	r2, #0
 800e668:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800e66c:	6978      	ldr	r0, [r7, #20]
 800e66e:	f7ff fe85 	bl	800e37c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e672:	697b      	ldr	r3, [r7, #20]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	689b      	ldr	r3, [r3, #8]
 800e678:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e67c:	2b40      	cmp	r3, #64	@ 0x40
 800e67e:	d109      	bne.n	800e694 <UART_DMAError+0x62>
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	2b22      	cmp	r3, #34	@ 0x22
 800e684:	d106      	bne.n	800e694 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e686:	697b      	ldr	r3, [r7, #20]
 800e688:	2200      	movs	r2, #0
 800e68a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800e68e:	6978      	ldr	r0, [r7, #20]
 800e690:	f7ff feb6 	bl	800e400 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e694:	697b      	ldr	r3, [r7, #20]
 800e696:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e69a:	f043 0210 	orr.w	r2, r3, #16
 800e69e:	697b      	ldr	r3, [r7, #20]
 800e6a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e6a4:	6978      	ldr	r0, [r7, #20]
 800e6a6:	f7fe fd87 	bl	800d1b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e6aa:	bf00      	nop
 800e6ac:	3718      	adds	r7, #24
 800e6ae:	46bd      	mov	sp, r7
 800e6b0:	bd80      	pop	{r7, pc}

0800e6b2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e6b2:	b580      	push	{r7, lr}
 800e6b4:	b084      	sub	sp, #16
 800e6b6:	af00      	add	r7, sp, #0
 800e6b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e6be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	2200      	movs	r2, #0
 800e6c4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	2200      	movs	r2, #0
 800e6cc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e6d0:	68f8      	ldr	r0, [r7, #12]
 800e6d2:	f7fe fd71 	bl	800d1b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e6d6:	bf00      	nop
 800e6d8:	3710      	adds	r7, #16
 800e6da:	46bd      	mov	sp, r7
 800e6dc:	bd80      	pop	{r7, pc}

0800e6de <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e6de:	b580      	push	{r7, lr}
 800e6e0:	b088      	sub	sp, #32
 800e6e2:	af00      	add	r7, sp, #0
 800e6e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	e853 3f00 	ldrex	r3, [r3]
 800e6f2:	60bb      	str	r3, [r7, #8]
   return(result);
 800e6f4:	68bb      	ldr	r3, [r7, #8]
 800e6f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e6fa:	61fb      	str	r3, [r7, #28]
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	461a      	mov	r2, r3
 800e702:	69fb      	ldr	r3, [r7, #28]
 800e704:	61bb      	str	r3, [r7, #24]
 800e706:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e708:	6979      	ldr	r1, [r7, #20]
 800e70a:	69ba      	ldr	r2, [r7, #24]
 800e70c:	e841 2300 	strex	r3, r2, [r1]
 800e710:	613b      	str	r3, [r7, #16]
   return(result);
 800e712:	693b      	ldr	r3, [r7, #16]
 800e714:	2b00      	cmp	r3, #0
 800e716:	d1e6      	bne.n	800e6e6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	2220      	movs	r2, #32
 800e71c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	2200      	movs	r2, #0
 800e724:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e726:	6878      	ldr	r0, [r7, #4]
 800e728:	f7fe fd32 	bl	800d190 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e72c:	bf00      	nop
 800e72e:	3720      	adds	r7, #32
 800e730:	46bd      	mov	sp, r7
 800e732:	bd80      	pop	{r7, pc}

0800e734 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e734:	b480      	push	{r7}
 800e736:	b083      	sub	sp, #12
 800e738:	af00      	add	r7, sp, #0
 800e73a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e73c:	bf00      	nop
 800e73e:	370c      	adds	r7, #12
 800e740:	46bd      	mov	sp, r7
 800e742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e746:	4770      	bx	lr

0800e748 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e748:	b480      	push	{r7}
 800e74a:	b083      	sub	sp, #12
 800e74c:	af00      	add	r7, sp, #0
 800e74e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e750:	bf00      	nop
 800e752:	370c      	adds	r7, #12
 800e754:	46bd      	mov	sp, r7
 800e756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e75a:	4770      	bx	lr

0800e75c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e75c:	b480      	push	{r7}
 800e75e:	b083      	sub	sp, #12
 800e760:	af00      	add	r7, sp, #0
 800e762:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e764:	bf00      	nop
 800e766:	370c      	adds	r7, #12
 800e768:	46bd      	mov	sp, r7
 800e76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e76e:	4770      	bx	lr

0800e770 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e770:	b480      	push	{r7}
 800e772:	b085      	sub	sp, #20
 800e774:	af00      	add	r7, sp, #0
 800e776:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e77e:	2b01      	cmp	r3, #1
 800e780:	d101      	bne.n	800e786 <HAL_UARTEx_DisableFifoMode+0x16>
 800e782:	2302      	movs	r3, #2
 800e784:	e027      	b.n	800e7d6 <HAL_UARTEx_DisableFifoMode+0x66>
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	2201      	movs	r2, #1
 800e78a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	2224      	movs	r2, #36	@ 0x24
 800e792:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	681a      	ldr	r2, [r3, #0]
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	f022 0201 	bic.w	r2, r2, #1
 800e7ac:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800e7b4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	2200      	movs	r2, #0
 800e7ba:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	68fa      	ldr	r2, [r7, #12]
 800e7c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	2220      	movs	r2, #32
 800e7c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	2200      	movs	r2, #0
 800e7d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e7d4:	2300      	movs	r3, #0
}
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	3714      	adds	r7, #20
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e0:	4770      	bx	lr

0800e7e2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e7e2:	b580      	push	{r7, lr}
 800e7e4:	b084      	sub	sp, #16
 800e7e6:	af00      	add	r7, sp, #0
 800e7e8:	6078      	str	r0, [r7, #4]
 800e7ea:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e7f2:	2b01      	cmp	r3, #1
 800e7f4:	d101      	bne.n	800e7fa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e7f6:	2302      	movs	r3, #2
 800e7f8:	e02d      	b.n	800e856 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	2201      	movs	r2, #1
 800e7fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	2224      	movs	r2, #36	@ 0x24
 800e806:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	681a      	ldr	r2, [r3, #0]
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	f022 0201 	bic.w	r2, r2, #1
 800e820:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	689b      	ldr	r3, [r3, #8]
 800e828:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	683a      	ldr	r2, [r7, #0]
 800e832:	430a      	orrs	r2, r1
 800e834:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e836:	6878      	ldr	r0, [r7, #4]
 800e838:	f000 f850 	bl	800e8dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	68fa      	ldr	r2, [r7, #12]
 800e842:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	2220      	movs	r2, #32
 800e848:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	2200      	movs	r2, #0
 800e850:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e854:	2300      	movs	r3, #0
}
 800e856:	4618      	mov	r0, r3
 800e858:	3710      	adds	r7, #16
 800e85a:	46bd      	mov	sp, r7
 800e85c:	bd80      	pop	{r7, pc}

0800e85e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e85e:	b580      	push	{r7, lr}
 800e860:	b084      	sub	sp, #16
 800e862:	af00      	add	r7, sp, #0
 800e864:	6078      	str	r0, [r7, #4]
 800e866:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e86e:	2b01      	cmp	r3, #1
 800e870:	d101      	bne.n	800e876 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e872:	2302      	movs	r3, #2
 800e874:	e02d      	b.n	800e8d2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	2201      	movs	r2, #1
 800e87a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	2224      	movs	r2, #36	@ 0x24
 800e882:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	681a      	ldr	r2, [r3, #0]
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	f022 0201 	bic.w	r2, r2, #1
 800e89c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	689b      	ldr	r3, [r3, #8]
 800e8a4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	683a      	ldr	r2, [r7, #0]
 800e8ae:	430a      	orrs	r2, r1
 800e8b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e8b2:	6878      	ldr	r0, [r7, #4]
 800e8b4:	f000 f812 	bl	800e8dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	68fa      	ldr	r2, [r7, #12]
 800e8be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	2220      	movs	r2, #32
 800e8c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	2200      	movs	r2, #0
 800e8cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e8d0:	2300      	movs	r3, #0
}
 800e8d2:	4618      	mov	r0, r3
 800e8d4:	3710      	adds	r7, #16
 800e8d6:	46bd      	mov	sp, r7
 800e8d8:	bd80      	pop	{r7, pc}
	...

0800e8dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e8dc:	b480      	push	{r7}
 800e8de:	b085      	sub	sp, #20
 800e8e0:	af00      	add	r7, sp, #0
 800e8e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d108      	bne.n	800e8fe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	2201      	movs	r2, #1
 800e8f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	2201      	movs	r2, #1
 800e8f8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e8fc:	e031      	b.n	800e962 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e8fe:	2310      	movs	r3, #16
 800e900:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e902:	2310      	movs	r3, #16
 800e904:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	689b      	ldr	r3, [r3, #8]
 800e90c:	0e5b      	lsrs	r3, r3, #25
 800e90e:	b2db      	uxtb	r3, r3
 800e910:	f003 0307 	and.w	r3, r3, #7
 800e914:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	689b      	ldr	r3, [r3, #8]
 800e91c:	0f5b      	lsrs	r3, r3, #29
 800e91e:	b2db      	uxtb	r3, r3
 800e920:	f003 0307 	and.w	r3, r3, #7
 800e924:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e926:	7bbb      	ldrb	r3, [r7, #14]
 800e928:	7b3a      	ldrb	r2, [r7, #12]
 800e92a:	4911      	ldr	r1, [pc, #68]	@ (800e970 <UARTEx_SetNbDataToProcess+0x94>)
 800e92c:	5c8a      	ldrb	r2, [r1, r2]
 800e92e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e932:	7b3a      	ldrb	r2, [r7, #12]
 800e934:	490f      	ldr	r1, [pc, #60]	@ (800e974 <UARTEx_SetNbDataToProcess+0x98>)
 800e936:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e938:	fb93 f3f2 	sdiv	r3, r3, r2
 800e93c:	b29a      	uxth	r2, r3
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e944:	7bfb      	ldrb	r3, [r7, #15]
 800e946:	7b7a      	ldrb	r2, [r7, #13]
 800e948:	4909      	ldr	r1, [pc, #36]	@ (800e970 <UARTEx_SetNbDataToProcess+0x94>)
 800e94a:	5c8a      	ldrb	r2, [r1, r2]
 800e94c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e950:	7b7a      	ldrb	r2, [r7, #13]
 800e952:	4908      	ldr	r1, [pc, #32]	@ (800e974 <UARTEx_SetNbDataToProcess+0x98>)
 800e954:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e956:	fb93 f3f2 	sdiv	r3, r3, r2
 800e95a:	b29a      	uxth	r2, r3
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800e962:	bf00      	nop
 800e964:	3714      	adds	r7, #20
 800e966:	46bd      	mov	sp, r7
 800e968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e96c:	4770      	bx	lr
 800e96e:	bf00      	nop
 800e970:	080130c0 	.word	0x080130c0
 800e974:	080130c8 	.word	0x080130c8

0800e978 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800e978:	b580      	push	{r7, lr}
 800e97a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800e97c:	4904      	ldr	r1, [pc, #16]	@ (800e990 <MX_FATFS_Init+0x18>)
 800e97e:	4805      	ldr	r0, [pc, #20]	@ (800e994 <MX_FATFS_Init+0x1c>)
 800e980:	f004 f8c6 	bl	8012b10 <FATFS_LinkDriver>
 800e984:	4603      	mov	r3, r0
 800e986:	461a      	mov	r2, r3
 800e988:	4b03      	ldr	r3, [pc, #12]	@ (800e998 <MX_FATFS_Init+0x20>)
 800e98a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800e98c:	bf00      	nop
 800e98e:	bd80      	pop	{r7, pc}
 800e990:	240029dc 	.word	0x240029dc
 800e994:	240000a8 	.word	0x240000a8
 800e998:	240029d8 	.word	0x240029d8

0800e99c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800e99c:	b480      	push	{r7}
 800e99e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800e9a0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800e9a2:	4618      	mov	r0, r3
 800e9a4:	46bd      	mov	sp, r7
 800e9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9aa:	4770      	bx	lr

0800e9ac <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800e9ac:	b580      	push	{r7, lr}
 800e9ae:	b082      	sub	sp, #8
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	4603      	mov	r3, r0
 800e9b4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 800e9b6:	79fb      	ldrb	r3, [r7, #7]
 800e9b8:	4618      	mov	r0, r3
 800e9ba:	f000 f9fd 	bl	800edb8 <SD_disk_initialize>
 800e9be:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	3708      	adds	r7, #8
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	bd80      	pop	{r7, pc}

0800e9c8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800e9c8:	b580      	push	{r7, lr}
 800e9ca:	b082      	sub	sp, #8
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	4603      	mov	r3, r0
 800e9d0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 800e9d2:	79fb      	ldrb	r3, [r7, #7]
 800e9d4:	4618      	mov	r0, r3
 800e9d6:	f000 fad5 	bl	800ef84 <SD_disk_status>
 800e9da:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800e9dc:	4618      	mov	r0, r3
 800e9de:	3708      	adds	r7, #8
 800e9e0:	46bd      	mov	sp, r7
 800e9e2:	bd80      	pop	{r7, pc}

0800e9e4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800e9e4:	b580      	push	{r7, lr}
 800e9e6:	b084      	sub	sp, #16
 800e9e8:	af00      	add	r7, sp, #0
 800e9ea:	60b9      	str	r1, [r7, #8]
 800e9ec:	607a      	str	r2, [r7, #4]
 800e9ee:	603b      	str	r3, [r7, #0]
 800e9f0:	4603      	mov	r3, r0
 800e9f2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 800e9f4:	7bf8      	ldrb	r0, [r7, #15]
 800e9f6:	683b      	ldr	r3, [r7, #0]
 800e9f8:	687a      	ldr	r2, [r7, #4]
 800e9fa:	68b9      	ldr	r1, [r7, #8]
 800e9fc:	f000 fad8 	bl	800efb0 <SD_disk_read>
 800ea00:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800ea02:	4618      	mov	r0, r3
 800ea04:	3710      	adds	r7, #16
 800ea06:	46bd      	mov	sp, r7
 800ea08:	bd80      	pop	{r7, pc}

0800ea0a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800ea0a:	b580      	push	{r7, lr}
 800ea0c:	b084      	sub	sp, #16
 800ea0e:	af00      	add	r7, sp, #0
 800ea10:	60b9      	str	r1, [r7, #8]
 800ea12:	607a      	str	r2, [r7, #4]
 800ea14:	603b      	str	r3, [r7, #0]
 800ea16:	4603      	mov	r3, r0
 800ea18:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 800ea1a:	7bf8      	ldrb	r0, [r7, #15]
 800ea1c:	683b      	ldr	r3, [r7, #0]
 800ea1e:	687a      	ldr	r2, [r7, #4]
 800ea20:	68b9      	ldr	r1, [r7, #8]
 800ea22:	f000 fb2f 	bl	800f084 <SD_disk_write>
 800ea26:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800ea28:	4618      	mov	r0, r3
 800ea2a:	3710      	adds	r7, #16
 800ea2c:	46bd      	mov	sp, r7
 800ea2e:	bd80      	pop	{r7, pc}

0800ea30 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800ea30:	b580      	push	{r7, lr}
 800ea32:	b082      	sub	sp, #8
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	4603      	mov	r3, r0
 800ea38:	603a      	str	r2, [r7, #0]
 800ea3a:	71fb      	strb	r3, [r7, #7]
 800ea3c:	460b      	mov	r3, r1
 800ea3e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 800ea40:	79b9      	ldrb	r1, [r7, #6]
 800ea42:	79fb      	ldrb	r3, [r7, #7]
 800ea44:	683a      	ldr	r2, [r7, #0]
 800ea46:	4618      	mov	r0, r3
 800ea48:	f000 fba0 	bl	800f18c <SD_disk_ioctl>
 800ea4c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800ea4e:	4618      	mov	r0, r3
 800ea50:	3708      	adds	r7, #8
 800ea52:	46bd      	mov	sp, r7
 800ea54:	bd80      	pop	{r7, pc}
	...

0800ea58 <SELECT>:

//-----[ SPI Functions ]-----

/* slave select */
static void SELECT(void)
{
 800ea58:	b580      	push	{r7, lr}
 800ea5a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800ea5c:	2200      	movs	r2, #0
 800ea5e:	2110      	movs	r1, #16
 800ea60:	4802      	ldr	r0, [pc, #8]	@ (800ea6c <SELECT+0x14>)
 800ea62:	f7f8 fd1d 	bl	80074a0 <HAL_GPIO_WritePin>
}
 800ea66:	bf00      	nop
 800ea68:	bd80      	pop	{r7, pc}
 800ea6a:	bf00      	nop
 800ea6c:	58020000 	.word	0x58020000

0800ea70 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 800ea70:	b580      	push	{r7, lr}
 800ea72:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800ea74:	2201      	movs	r2, #1
 800ea76:	2110      	movs	r1, #16
 800ea78:	4802      	ldr	r0, [pc, #8]	@ (800ea84 <DESELECT+0x14>)
 800ea7a:	f7f8 fd11 	bl	80074a0 <HAL_GPIO_WritePin>
}
 800ea7e:	bf00      	nop
 800ea80:	bd80      	pop	{r7, pc}
 800ea82:	bf00      	nop
 800ea84:	58020000 	.word	0x58020000

0800ea88 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 800ea88:	b580      	push	{r7, lr}
 800ea8a:	b082      	sub	sp, #8
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	4603      	mov	r3, r0
 800ea90:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800ea92:	bf00      	nop
 800ea94:	4b08      	ldr	r3, [pc, #32]	@ (800eab8 <SPI_TxByte+0x30>)
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	695b      	ldr	r3, [r3, #20]
 800ea9a:	f003 0302 	and.w	r3, r3, #2
 800ea9e:	2b02      	cmp	r3, #2
 800eaa0:	d1f8      	bne.n	800ea94 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800eaa2:	1df9      	adds	r1, r7, #7
 800eaa4:	2364      	movs	r3, #100	@ 0x64
 800eaa6:	2201      	movs	r2, #1
 800eaa8:	4803      	ldr	r0, [pc, #12]	@ (800eab8 <SPI_TxByte+0x30>)
 800eaaa:	f7fb fd43 	bl	800a534 <HAL_SPI_Transmit>
}
 800eaae:	bf00      	nop
 800eab0:	3708      	adds	r7, #8
 800eab2:	46bd      	mov	sp, r7
 800eab4:	bd80      	pop	{r7, pc}
 800eab6:	bf00      	nop
 800eab8:	24002408 	.word	0x24002408

0800eabc <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 800eabc:	b580      	push	{r7, lr}
 800eabe:	b082      	sub	sp, #8
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	6078      	str	r0, [r7, #4]
 800eac4:	460b      	mov	r3, r1
 800eac6:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800eac8:	bf00      	nop
 800eaca:	4b08      	ldr	r3, [pc, #32]	@ (800eaec <SPI_TxBuffer+0x30>)
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	695b      	ldr	r3, [r3, #20]
 800ead0:	f003 0302 	and.w	r3, r3, #2
 800ead4:	2b02      	cmp	r3, #2
 800ead6:	d1f8      	bne.n	800eaca <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800ead8:	887a      	ldrh	r2, [r7, #2]
 800eada:	2364      	movs	r3, #100	@ 0x64
 800eadc:	6879      	ldr	r1, [r7, #4]
 800eade:	4803      	ldr	r0, [pc, #12]	@ (800eaec <SPI_TxBuffer+0x30>)
 800eae0:	f7fb fd28 	bl	800a534 <HAL_SPI_Transmit>
}
 800eae4:	bf00      	nop
 800eae6:	3708      	adds	r7, #8
 800eae8:	46bd      	mov	sp, r7
 800eaea:	bd80      	pop	{r7, pc}
 800eaec:	24002408 	.word	0x24002408

0800eaf0 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b084      	sub	sp, #16
 800eaf4:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 800eaf6:	23ff      	movs	r3, #255	@ 0xff
 800eaf8:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800eafa:	bf00      	nop
 800eafc:	4b09      	ldr	r3, [pc, #36]	@ (800eb24 <SPI_RxByte+0x34>)
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	695b      	ldr	r3, [r3, #20]
 800eb02:	f003 0302 	and.w	r3, r3, #2
 800eb06:	2b02      	cmp	r3, #2
 800eb08:	d1f8      	bne.n	800eafc <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800eb0a:	1dba      	adds	r2, r7, #6
 800eb0c:	1df9      	adds	r1, r7, #7
 800eb0e:	2364      	movs	r3, #100	@ 0x64
 800eb10:	9300      	str	r3, [sp, #0]
 800eb12:	2301      	movs	r3, #1
 800eb14:	4803      	ldr	r0, [pc, #12]	@ (800eb24 <SPI_RxByte+0x34>)
 800eb16:	f7fc f96d 	bl	800adf4 <HAL_SPI_TransmitReceive>
  return data;
 800eb1a:	79bb      	ldrb	r3, [r7, #6]
}
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	3708      	adds	r7, #8
 800eb20:	46bd      	mov	sp, r7
 800eb22:	bd80      	pop	{r7, pc}
 800eb24:	24002408 	.word	0x24002408

0800eb28 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 800eb28:	b580      	push	{r7, lr}
 800eb2a:	b082      	sub	sp, #8
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 800eb30:	f7ff ffde 	bl	800eaf0 <SPI_RxByte>
 800eb34:	4603      	mov	r3, r0
 800eb36:	461a      	mov	r2, r3
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	701a      	strb	r2, [r3, #0]
}
 800eb3c:	bf00      	nop
 800eb3e:	3708      	adds	r7, #8
 800eb40:	46bd      	mov	sp, r7
 800eb42:	bd80      	pop	{r7, pc}

0800eb44 <SD_ReadyWait>:

//-----[ SD Card Functions ]-----

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 800eb44:	b580      	push	{r7, lr}
 800eb46:	b082      	sub	sp, #8
 800eb48:	af00      	add	r7, sp, #0
  uint8_t res;
  /* timeout 500ms */
  Timer2 = 500;
 800eb4a:	4b0a      	ldr	r3, [pc, #40]	@ (800eb74 <SD_ReadyWait+0x30>)
 800eb4c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800eb50:	801a      	strh	r2, [r3, #0]
  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 800eb52:	f7ff ffcd 	bl	800eaf0 <SPI_RxByte>
 800eb56:	4603      	mov	r3, r0
 800eb58:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 800eb5a:	79fb      	ldrb	r3, [r7, #7]
 800eb5c:	2bff      	cmp	r3, #255	@ 0xff
 800eb5e:	d003      	beq.n	800eb68 <SD_ReadyWait+0x24>
 800eb60:	4b04      	ldr	r3, [pc, #16]	@ (800eb74 <SD_ReadyWait+0x30>)
 800eb62:	881b      	ldrh	r3, [r3, #0]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d1f4      	bne.n	800eb52 <SD_ReadyWait+0xe>
  return res;
 800eb68:	79fb      	ldrb	r3, [r7, #7]
}
 800eb6a:	4618      	mov	r0, r3
 800eb6c:	3708      	adds	r7, #8
 800eb6e:	46bd      	mov	sp, r7
 800eb70:	bd80      	pop	{r7, pc}
 800eb72:	bf00      	nop
 800eb74:	240029e2 	.word	0x240029e2

0800eb78 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	b084      	sub	sp, #16
 800eb7c:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 800eb7e:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800eb82:	60fb      	str	r3, [r7, #12]
  /* transmit bytes to wake up */
  DESELECT();
 800eb84:	f7ff ff74 	bl	800ea70 <DESELECT>
  for(int i = 0; i < 10; i++)
 800eb88:	2300      	movs	r3, #0
 800eb8a:	60bb      	str	r3, [r7, #8]
 800eb8c:	e005      	b.n	800eb9a <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 800eb8e:	20ff      	movs	r0, #255	@ 0xff
 800eb90:	f7ff ff7a 	bl	800ea88 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 800eb94:	68bb      	ldr	r3, [r7, #8]
 800eb96:	3301      	adds	r3, #1
 800eb98:	60bb      	str	r3, [r7, #8]
 800eb9a:	68bb      	ldr	r3, [r7, #8]
 800eb9c:	2b09      	cmp	r3, #9
 800eb9e:	ddf6      	ble.n	800eb8e <SD_PowerOn+0x16>
  }
  /* slave select */
  SELECT();
 800eba0:	f7ff ff5a 	bl	800ea58 <SELECT>
  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 800eba4:	2340      	movs	r3, #64	@ 0x40
 800eba6:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 800eba8:	2300      	movs	r3, #0
 800ebaa:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 800ebac:	2300      	movs	r3, #0
 800ebae:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 800ebb0:	2300      	movs	r3, #0
 800ebb2:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 800ebb4:	2300      	movs	r3, #0
 800ebb6:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;
 800ebb8:	2395      	movs	r3, #149	@ 0x95
 800ebba:	717b      	strb	r3, [r7, #5]
  SPI_TxBuffer(args, sizeof(args));
 800ebbc:	463b      	mov	r3, r7
 800ebbe:	2106      	movs	r1, #6
 800ebc0:	4618      	mov	r0, r3
 800ebc2:	f7ff ff7b 	bl	800eabc <SPI_TxBuffer>
  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 800ebc6:	e002      	b.n	800ebce <SD_PowerOn+0x56>
  {
    cnt--;
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	3b01      	subs	r3, #1
 800ebcc:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 800ebce:	f7ff ff8f 	bl	800eaf0 <SPI_RxByte>
 800ebd2:	4603      	mov	r3, r0
 800ebd4:	2b01      	cmp	r3, #1
 800ebd6:	d002      	beq.n	800ebde <SD_PowerOn+0x66>
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d1f4      	bne.n	800ebc8 <SD_PowerOn+0x50>
  }
  DESELECT();
 800ebde:	f7ff ff47 	bl	800ea70 <DESELECT>
  SPI_TxByte(0XFF);
 800ebe2:	20ff      	movs	r0, #255	@ 0xff
 800ebe4:	f7ff ff50 	bl	800ea88 <SPI_TxByte>
  PowerFlag = 1;
 800ebe8:	4b03      	ldr	r3, [pc, #12]	@ (800ebf8 <SD_PowerOn+0x80>)
 800ebea:	2201      	movs	r2, #1
 800ebec:	701a      	strb	r2, [r3, #0]
}
 800ebee:	bf00      	nop
 800ebf0:	3710      	adds	r7, #16
 800ebf2:	46bd      	mov	sp, r7
 800ebf4:	bd80      	pop	{r7, pc}
 800ebf6:	bf00      	nop
 800ebf8:	240029e5 	.word	0x240029e5

0800ebfc <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 800ebfc:	b480      	push	{r7}
 800ebfe:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 800ec00:	4b03      	ldr	r3, [pc, #12]	@ (800ec10 <SD_PowerOff+0x14>)
 800ec02:	2200      	movs	r2, #0
 800ec04:	701a      	strb	r2, [r3, #0]
}
 800ec06:	bf00      	nop
 800ec08:	46bd      	mov	sp, r7
 800ec0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec0e:	4770      	bx	lr
 800ec10:	240029e5 	.word	0x240029e5

0800ec14 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 800ec14:	b480      	push	{r7}
 800ec16:	af00      	add	r7, sp, #0
  return PowerFlag;
 800ec18:	4b03      	ldr	r3, [pc, #12]	@ (800ec28 <SD_CheckPower+0x14>)
 800ec1a:	781b      	ldrb	r3, [r3, #0]
}
 800ec1c:	4618      	mov	r0, r3
 800ec1e:	46bd      	mov	sp, r7
 800ec20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec24:	4770      	bx	lr
 800ec26:	bf00      	nop
 800ec28:	240029e5 	.word	0x240029e5

0800ec2c <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 800ec2c:	b580      	push	{r7, lr}
 800ec2e:	b084      	sub	sp, #16
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	6078      	str	r0, [r7, #4]
 800ec34:	6039      	str	r1, [r7, #0]
  uint8_t token;
  /* timeout 200ms */
  Timer1 = 200;
 800ec36:	4b13      	ldr	r3, [pc, #76]	@ (800ec84 <SD_RxDataBlock+0x58>)
 800ec38:	22c8      	movs	r2, #200	@ 0xc8
 800ec3a:	801a      	strh	r2, [r3, #0]
  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 800ec3c:	f7ff ff58 	bl	800eaf0 <SPI_RxByte>
 800ec40:	4603      	mov	r3, r0
 800ec42:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 800ec44:	7bfb      	ldrb	r3, [r7, #15]
 800ec46:	2bff      	cmp	r3, #255	@ 0xff
 800ec48:	d103      	bne.n	800ec52 <SD_RxDataBlock+0x26>
 800ec4a:	4b0e      	ldr	r3, [pc, #56]	@ (800ec84 <SD_RxDataBlock+0x58>)
 800ec4c:	881b      	ldrh	r3, [r3, #0]
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d1f4      	bne.n	800ec3c <SD_RxDataBlock+0x10>
  /* invalid response */
  if(token != 0xFE) return FALSE;
 800ec52:	7bfb      	ldrb	r3, [r7, #15]
 800ec54:	2bfe      	cmp	r3, #254	@ 0xfe
 800ec56:	d001      	beq.n	800ec5c <SD_RxDataBlock+0x30>
 800ec58:	2300      	movs	r3, #0
 800ec5a:	e00f      	b.n	800ec7c <SD_RxDataBlock+0x50>
  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	1c5a      	adds	r2, r3, #1
 800ec60:	607a      	str	r2, [r7, #4]
 800ec62:	4618      	mov	r0, r3
 800ec64:	f7ff ff60 	bl	800eb28 <SPI_RxBytePtr>
  } while(len--);
 800ec68:	683b      	ldr	r3, [r7, #0]
 800ec6a:	1e5a      	subs	r2, r3, #1
 800ec6c:	603a      	str	r2, [r7, #0]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d1f4      	bne.n	800ec5c <SD_RxDataBlock+0x30>
  /* discard CRC */
  SPI_RxByte();
 800ec72:	f7ff ff3d 	bl	800eaf0 <SPI_RxByte>
  SPI_RxByte();
 800ec76:	f7ff ff3b 	bl	800eaf0 <SPI_RxByte>
  return TRUE;
 800ec7a:	2301      	movs	r3, #1
}
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	3710      	adds	r7, #16
 800ec80:	46bd      	mov	sp, r7
 800ec82:	bd80      	pop	{r7, pc}
 800ec84:	240029e0 	.word	0x240029e0

0800ec88 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 800ec88:	b580      	push	{r7, lr}
 800ec8a:	b084      	sub	sp, #16
 800ec8c:	af00      	add	r7, sp, #0
 800ec8e:	6078      	str	r0, [r7, #4]
 800ec90:	460b      	mov	r3, r1
 800ec92:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 800ec94:	2300      	movs	r3, #0
 800ec96:	73bb      	strb	r3, [r7, #14]
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 800ec98:	f7ff ff54 	bl	800eb44 <SD_ReadyWait>
 800ec9c:	4603      	mov	r3, r0
 800ec9e:	2bff      	cmp	r3, #255	@ 0xff
 800eca0:	d001      	beq.n	800eca6 <SD_TxDataBlock+0x1e>
 800eca2:	2300      	movs	r3, #0
 800eca4:	e02f      	b.n	800ed06 <SD_TxDataBlock+0x7e>
  /* transmit token */
  SPI_TxByte(token);
 800eca6:	78fb      	ldrb	r3, [r7, #3]
 800eca8:	4618      	mov	r0, r3
 800ecaa:	f7ff feed 	bl	800ea88 <SPI_TxByte>
  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 800ecae:	78fb      	ldrb	r3, [r7, #3]
 800ecb0:	2bfd      	cmp	r3, #253	@ 0xfd
 800ecb2:	d020      	beq.n	800ecf6 <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 800ecb4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800ecb8:	6878      	ldr	r0, [r7, #4]
 800ecba:	f7ff feff 	bl	800eabc <SPI_TxBuffer>
    /* discard CRC */
    SPI_RxByte();
 800ecbe:	f7ff ff17 	bl	800eaf0 <SPI_RxByte>
    SPI_RxByte();
 800ecc2:	f7ff ff15 	bl	800eaf0 <SPI_RxByte>
    /* receive response */
    while (i <= 64)
 800ecc6:	e00b      	b.n	800ece0 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 800ecc8:	f7ff ff12 	bl	800eaf0 <SPI_RxByte>
 800eccc:	4603      	mov	r3, r0
 800ecce:	73fb      	strb	r3, [r7, #15]
      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 800ecd0:	7bfb      	ldrb	r3, [r7, #15]
 800ecd2:	f003 031f 	and.w	r3, r3, #31
 800ecd6:	2b05      	cmp	r3, #5
 800ecd8:	d006      	beq.n	800ece8 <SD_TxDataBlock+0x60>
      i++;
 800ecda:	7bbb      	ldrb	r3, [r7, #14]
 800ecdc:	3301      	adds	r3, #1
 800ecde:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 800ece0:	7bbb      	ldrb	r3, [r7, #14]
 800ece2:	2b40      	cmp	r3, #64	@ 0x40
 800ece4:	d9f0      	bls.n	800ecc8 <SD_TxDataBlock+0x40>
 800ece6:	e000      	b.n	800ecea <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 800ece8:	bf00      	nop
    }
    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 800ecea:	bf00      	nop
 800ecec:	f7ff ff00 	bl	800eaf0 <SPI_RxByte>
 800ecf0:	4603      	mov	r3, r0
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d0fa      	beq.n	800ecec <SD_TxDataBlock+0x64>
  }
  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 800ecf6:	7bfb      	ldrb	r3, [r7, #15]
 800ecf8:	f003 031f 	and.w	r3, r3, #31
 800ecfc:	2b05      	cmp	r3, #5
 800ecfe:	d101      	bne.n	800ed04 <SD_TxDataBlock+0x7c>
 800ed00:	2301      	movs	r3, #1
 800ed02:	e000      	b.n	800ed06 <SD_TxDataBlock+0x7e>

  return FALSE;
 800ed04:	2300      	movs	r3, #0
}
 800ed06:	4618      	mov	r0, r3
 800ed08:	3710      	adds	r7, #16
 800ed0a:	46bd      	mov	sp, r7
 800ed0c:	bd80      	pop	{r7, pc}

0800ed0e <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800ed0e:	b580      	push	{r7, lr}
 800ed10:	b084      	sub	sp, #16
 800ed12:	af00      	add	r7, sp, #0
 800ed14:	4603      	mov	r3, r0
 800ed16:	6039      	str	r1, [r7, #0]
 800ed18:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 800ed1a:	f7ff ff13 	bl	800eb44 <SD_ReadyWait>
 800ed1e:	4603      	mov	r3, r0
 800ed20:	2bff      	cmp	r3, #255	@ 0xff
 800ed22:	d001      	beq.n	800ed28 <SD_SendCmd+0x1a>
 800ed24:	23ff      	movs	r3, #255	@ 0xff
 800ed26:	e042      	b.n	800edae <SD_SendCmd+0xa0>
  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 800ed28:	79fb      	ldrb	r3, [r7, #7]
 800ed2a:	4618      	mov	r0, r3
 800ed2c:	f7ff feac 	bl	800ea88 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 800ed30:	683b      	ldr	r3, [r7, #0]
 800ed32:	0e1b      	lsrs	r3, r3, #24
 800ed34:	b2db      	uxtb	r3, r3
 800ed36:	4618      	mov	r0, r3
 800ed38:	f7ff fea6 	bl	800ea88 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 800ed3c:	683b      	ldr	r3, [r7, #0]
 800ed3e:	0c1b      	lsrs	r3, r3, #16
 800ed40:	b2db      	uxtb	r3, r3
 800ed42:	4618      	mov	r0, r3
 800ed44:	f7ff fea0 	bl	800ea88 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 800ed48:	683b      	ldr	r3, [r7, #0]
 800ed4a:	0a1b      	lsrs	r3, r3, #8
 800ed4c:	b2db      	uxtb	r3, r3
 800ed4e:	4618      	mov	r0, r3
 800ed50:	f7ff fe9a 	bl	800ea88 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 800ed54:	683b      	ldr	r3, [r7, #0]
 800ed56:	b2db      	uxtb	r3, r3
 800ed58:	4618      	mov	r0, r3
 800ed5a:	f7ff fe95 	bl	800ea88 <SPI_TxByte>
  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 800ed5e:	79fb      	ldrb	r3, [r7, #7]
 800ed60:	2b40      	cmp	r3, #64	@ 0x40
 800ed62:	d102      	bne.n	800ed6a <SD_SendCmd+0x5c>
 800ed64:	2395      	movs	r3, #149	@ 0x95
 800ed66:	73fb      	strb	r3, [r7, #15]
 800ed68:	e007      	b.n	800ed7a <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 800ed6a:	79fb      	ldrb	r3, [r7, #7]
 800ed6c:	2b48      	cmp	r3, #72	@ 0x48
 800ed6e:	d102      	bne.n	800ed76 <SD_SendCmd+0x68>
 800ed70:	2387      	movs	r3, #135	@ 0x87
 800ed72:	73fb      	strb	r3, [r7, #15]
 800ed74:	e001      	b.n	800ed7a <SD_SendCmd+0x6c>
  else crc = 1;
 800ed76:	2301      	movs	r3, #1
 800ed78:	73fb      	strb	r3, [r7, #15]
  /* transmit CRC */
  SPI_TxByte(crc);
 800ed7a:	7bfb      	ldrb	r3, [r7, #15]
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	f7ff fe83 	bl	800ea88 <SPI_TxByte>
  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 800ed82:	79fb      	ldrb	r3, [r7, #7]
 800ed84:	2b4c      	cmp	r3, #76	@ 0x4c
 800ed86:	d101      	bne.n	800ed8c <SD_SendCmd+0x7e>
 800ed88:	f7ff feb2 	bl	800eaf0 <SPI_RxByte>
  /* receive response */
  uint8_t n = 10;
 800ed8c:	230a      	movs	r3, #10
 800ed8e:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 800ed90:	f7ff feae 	bl	800eaf0 <SPI_RxByte>
 800ed94:	4603      	mov	r3, r0
 800ed96:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 800ed98:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	da05      	bge.n	800edac <SD_SendCmd+0x9e>
 800eda0:	7bbb      	ldrb	r3, [r7, #14]
 800eda2:	3b01      	subs	r3, #1
 800eda4:	73bb      	strb	r3, [r7, #14]
 800eda6:	7bbb      	ldrb	r3, [r7, #14]
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d1f1      	bne.n	800ed90 <SD_SendCmd+0x82>

  return res;
 800edac:	7b7b      	ldrb	r3, [r7, #13]
}
 800edae:	4618      	mov	r0, r3
 800edb0:	3710      	adds	r7, #16
 800edb2:	46bd      	mov	sp, r7
 800edb4:	bd80      	pop	{r7, pc}
	...

0800edb8 <SD_disk_initialize>:

//-----[ user_diskio.c Functions ]-----

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 800edb8:	b590      	push	{r4, r7, lr}
 800edba:	b085      	sub	sp, #20
 800edbc:	af00      	add	r7, sp, #0
 800edbe:	4603      	mov	r3, r0
 800edc0:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 800edc2:	79fb      	ldrb	r3, [r7, #7]
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d001      	beq.n	800edcc <SD_disk_initialize+0x14>
 800edc8:	2301      	movs	r3, #1
 800edca:	e0d1      	b.n	800ef70 <SD_disk_initialize+0x1b8>
  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 800edcc:	4b6a      	ldr	r3, [pc, #424]	@ (800ef78 <SD_disk_initialize+0x1c0>)
 800edce:	781b      	ldrb	r3, [r3, #0]
 800edd0:	b2db      	uxtb	r3, r3
 800edd2:	f003 0302 	and.w	r3, r3, #2
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d003      	beq.n	800ede2 <SD_disk_initialize+0x2a>
 800edda:	4b67      	ldr	r3, [pc, #412]	@ (800ef78 <SD_disk_initialize+0x1c0>)
 800eddc:	781b      	ldrb	r3, [r3, #0]
 800edde:	b2db      	uxtb	r3, r3
 800ede0:	e0c6      	b.n	800ef70 <SD_disk_initialize+0x1b8>
  /* power on */
  SD_PowerOn();
 800ede2:	f7ff fec9 	bl	800eb78 <SD_PowerOn>
  /* slave select */
  SELECT();
 800ede6:	f7ff fe37 	bl	800ea58 <SELECT>
  /* check disk type */
  type = 0;
 800edea:	2300      	movs	r3, #0
 800edec:	73bb      	strb	r3, [r7, #14]
  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 800edee:	2100      	movs	r1, #0
 800edf0:	2040      	movs	r0, #64	@ 0x40
 800edf2:	f7ff ff8c 	bl	800ed0e <SD_SendCmd>
 800edf6:	4603      	mov	r3, r0
 800edf8:	2b01      	cmp	r3, #1
 800edfa:	f040 80a1 	bne.w	800ef40 <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 800edfe:	4b5f      	ldr	r3, [pc, #380]	@ (800ef7c <SD_disk_initialize+0x1c4>)
 800ee00:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ee04:	801a      	strh	r2, [r3, #0]
    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800ee06:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800ee0a:	2048      	movs	r0, #72	@ 0x48
 800ee0c:	f7ff ff7f 	bl	800ed0e <SD_SendCmd>
 800ee10:	4603      	mov	r3, r0
 800ee12:	2b01      	cmp	r3, #1
 800ee14:	d155      	bne.n	800eec2 <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 800ee16:	2300      	movs	r3, #0
 800ee18:	73fb      	strb	r3, [r7, #15]
 800ee1a:	e00c      	b.n	800ee36 <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 800ee1c:	7bfc      	ldrb	r4, [r7, #15]
 800ee1e:	f7ff fe67 	bl	800eaf0 <SPI_RxByte>
 800ee22:	4603      	mov	r3, r0
 800ee24:	461a      	mov	r2, r3
 800ee26:	f104 0310 	add.w	r3, r4, #16
 800ee2a:	443b      	add	r3, r7
 800ee2c:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 800ee30:	7bfb      	ldrb	r3, [r7, #15]
 800ee32:	3301      	adds	r3, #1
 800ee34:	73fb      	strb	r3, [r7, #15]
 800ee36:	7bfb      	ldrb	r3, [r7, #15]
 800ee38:	2b03      	cmp	r3, #3
 800ee3a:	d9ef      	bls.n	800ee1c <SD_disk_initialize+0x64>
      }
      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800ee3c:	7abb      	ldrb	r3, [r7, #10]
 800ee3e:	2b01      	cmp	r3, #1
 800ee40:	d17e      	bne.n	800ef40 <SD_disk_initialize+0x188>
 800ee42:	7afb      	ldrb	r3, [r7, #11]
 800ee44:	2baa      	cmp	r3, #170	@ 0xaa
 800ee46:	d17b      	bne.n	800ef40 <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800ee48:	2100      	movs	r1, #0
 800ee4a:	2077      	movs	r0, #119	@ 0x77
 800ee4c:	f7ff ff5f 	bl	800ed0e <SD_SendCmd>
 800ee50:	4603      	mov	r3, r0
 800ee52:	2b01      	cmp	r3, #1
 800ee54:	d807      	bhi.n	800ee66 <SD_disk_initialize+0xae>
 800ee56:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800ee5a:	2069      	movs	r0, #105	@ 0x69
 800ee5c:	f7ff ff57 	bl	800ed0e <SD_SendCmd>
 800ee60:	4603      	mov	r3, r0
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d004      	beq.n	800ee70 <SD_disk_initialize+0xb8>
        } while (Timer1);
 800ee66:	4b45      	ldr	r3, [pc, #276]	@ (800ef7c <SD_disk_initialize+0x1c4>)
 800ee68:	881b      	ldrh	r3, [r3, #0]
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d1ec      	bne.n	800ee48 <SD_disk_initialize+0x90>
 800ee6e:	e000      	b.n	800ee72 <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800ee70:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800ee72:	4b42      	ldr	r3, [pc, #264]	@ (800ef7c <SD_disk_initialize+0x1c4>)
 800ee74:	881b      	ldrh	r3, [r3, #0]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d062      	beq.n	800ef40 <SD_disk_initialize+0x188>
 800ee7a:	2100      	movs	r1, #0
 800ee7c:	207a      	movs	r0, #122	@ 0x7a
 800ee7e:	f7ff ff46 	bl	800ed0e <SD_SendCmd>
 800ee82:	4603      	mov	r3, r0
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d15b      	bne.n	800ef40 <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 800ee88:	2300      	movs	r3, #0
 800ee8a:	73fb      	strb	r3, [r7, #15]
 800ee8c:	e00c      	b.n	800eea8 <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 800ee8e:	7bfc      	ldrb	r4, [r7, #15]
 800ee90:	f7ff fe2e 	bl	800eaf0 <SPI_RxByte>
 800ee94:	4603      	mov	r3, r0
 800ee96:	461a      	mov	r2, r3
 800ee98:	f104 0310 	add.w	r3, r4, #16
 800ee9c:	443b      	add	r3, r7
 800ee9e:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 800eea2:	7bfb      	ldrb	r3, [r7, #15]
 800eea4:	3301      	adds	r3, #1
 800eea6:	73fb      	strb	r3, [r7, #15]
 800eea8:	7bfb      	ldrb	r3, [r7, #15]
 800eeaa:	2b03      	cmp	r3, #3
 800eeac:	d9ef      	bls.n	800ee8e <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800eeae:	7a3b      	ldrb	r3, [r7, #8]
 800eeb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d001      	beq.n	800eebc <SD_disk_initialize+0x104>
 800eeb8:	230c      	movs	r3, #12
 800eeba:	e000      	b.n	800eebe <SD_disk_initialize+0x106>
 800eebc:	2304      	movs	r3, #4
 800eebe:	73bb      	strb	r3, [r7, #14]
 800eec0:	e03e      	b.n	800ef40 <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800eec2:	2100      	movs	r1, #0
 800eec4:	2077      	movs	r0, #119	@ 0x77
 800eec6:	f7ff ff22 	bl	800ed0e <SD_SendCmd>
 800eeca:	4603      	mov	r3, r0
 800eecc:	2b01      	cmp	r3, #1
 800eece:	d808      	bhi.n	800eee2 <SD_disk_initialize+0x12a>
 800eed0:	2100      	movs	r1, #0
 800eed2:	2069      	movs	r0, #105	@ 0x69
 800eed4:	f7ff ff1b 	bl	800ed0e <SD_SendCmd>
 800eed8:	4603      	mov	r3, r0
 800eeda:	2b01      	cmp	r3, #1
 800eedc:	d801      	bhi.n	800eee2 <SD_disk_initialize+0x12a>
 800eede:	2302      	movs	r3, #2
 800eee0:	e000      	b.n	800eee4 <SD_disk_initialize+0x12c>
 800eee2:	2301      	movs	r3, #1
 800eee4:	73bb      	strb	r3, [r7, #14]
      do
      {
        if (type == CT_SD1)
 800eee6:	7bbb      	ldrb	r3, [r7, #14]
 800eee8:	2b02      	cmp	r3, #2
 800eeea:	d10e      	bne.n	800ef0a <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800eeec:	2100      	movs	r1, #0
 800eeee:	2077      	movs	r0, #119	@ 0x77
 800eef0:	f7ff ff0d 	bl	800ed0e <SD_SendCmd>
 800eef4:	4603      	mov	r3, r0
 800eef6:	2b01      	cmp	r3, #1
 800eef8:	d80e      	bhi.n	800ef18 <SD_disk_initialize+0x160>
 800eefa:	2100      	movs	r1, #0
 800eefc:	2069      	movs	r0, #105	@ 0x69
 800eefe:	f7ff ff06 	bl	800ed0e <SD_SendCmd>
 800ef02:	4603      	mov	r3, r0
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d107      	bne.n	800ef18 <SD_disk_initialize+0x160>
 800ef08:	e00c      	b.n	800ef24 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800ef0a:	2100      	movs	r1, #0
 800ef0c:	2041      	movs	r0, #65	@ 0x41
 800ef0e:	f7ff fefe 	bl	800ed0e <SD_SendCmd>
 800ef12:	4603      	mov	r3, r0
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d004      	beq.n	800ef22 <SD_disk_initialize+0x16a>
        }
      } while (Timer1);
 800ef18:	4b18      	ldr	r3, [pc, #96]	@ (800ef7c <SD_disk_initialize+0x1c4>)
 800ef1a:	881b      	ldrh	r3, [r3, #0]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d1e2      	bne.n	800eee6 <SD_disk_initialize+0x12e>
 800ef20:	e000      	b.n	800ef24 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800ef22:	bf00      	nop
      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 800ef24:	4b15      	ldr	r3, [pc, #84]	@ (800ef7c <SD_disk_initialize+0x1c4>)
 800ef26:	881b      	ldrh	r3, [r3, #0]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d007      	beq.n	800ef3c <SD_disk_initialize+0x184>
 800ef2c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800ef30:	2050      	movs	r0, #80	@ 0x50
 800ef32:	f7ff feec 	bl	800ed0e <SD_SendCmd>
 800ef36:	4603      	mov	r3, r0
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d001      	beq.n	800ef40 <SD_disk_initialize+0x188>
 800ef3c:	2300      	movs	r3, #0
 800ef3e:	73bb      	strb	r3, [r7, #14]
    }
  }
  CardType = type;
 800ef40:	4a0f      	ldr	r2, [pc, #60]	@ (800ef80 <SD_disk_initialize+0x1c8>)
 800ef42:	7bbb      	ldrb	r3, [r7, #14]
 800ef44:	7013      	strb	r3, [r2, #0]
  /* Idle */
  DESELECT();
 800ef46:	f7ff fd93 	bl	800ea70 <DESELECT>
  SPI_RxByte();
 800ef4a:	f7ff fdd1 	bl	800eaf0 <SPI_RxByte>
  /* Clear STA_NOINIT */
  if (type)
 800ef4e:	7bbb      	ldrb	r3, [r7, #14]
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d008      	beq.n	800ef66 <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 800ef54:	4b08      	ldr	r3, [pc, #32]	@ (800ef78 <SD_disk_initialize+0x1c0>)
 800ef56:	781b      	ldrb	r3, [r3, #0]
 800ef58:	b2db      	uxtb	r3, r3
 800ef5a:	f023 0301 	bic.w	r3, r3, #1
 800ef5e:	b2da      	uxtb	r2, r3
 800ef60:	4b05      	ldr	r3, [pc, #20]	@ (800ef78 <SD_disk_initialize+0x1c0>)
 800ef62:	701a      	strb	r2, [r3, #0]
 800ef64:	e001      	b.n	800ef6a <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 800ef66:	f7ff fe49 	bl	800ebfc <SD_PowerOff>
  }
  return Stat;
 800ef6a:	4b03      	ldr	r3, [pc, #12]	@ (800ef78 <SD_disk_initialize+0x1c0>)
 800ef6c:	781b      	ldrb	r3, [r3, #0]
 800ef6e:	b2db      	uxtb	r3, r3
}
 800ef70:	4618      	mov	r0, r3
 800ef72:	3714      	adds	r7, #20
 800ef74:	46bd      	mov	sp, r7
 800ef76:	bd90      	pop	{r4, r7, pc}
 800ef78:	240000bc 	.word	0x240000bc
 800ef7c:	240029e0 	.word	0x240029e0
 800ef80:	240029e4 	.word	0x240029e4

0800ef84 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 800ef84:	b480      	push	{r7}
 800ef86:	b083      	sub	sp, #12
 800ef88:	af00      	add	r7, sp, #0
 800ef8a:	4603      	mov	r3, r0
 800ef8c:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 800ef8e:	79fb      	ldrb	r3, [r7, #7]
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d001      	beq.n	800ef98 <SD_disk_status+0x14>
 800ef94:	2301      	movs	r3, #1
 800ef96:	e002      	b.n	800ef9e <SD_disk_status+0x1a>
  return Stat;
 800ef98:	4b04      	ldr	r3, [pc, #16]	@ (800efac <SD_disk_status+0x28>)
 800ef9a:	781b      	ldrb	r3, [r3, #0]
 800ef9c:	b2db      	uxtb	r3, r3
}
 800ef9e:	4618      	mov	r0, r3
 800efa0:	370c      	adds	r7, #12
 800efa2:	46bd      	mov	sp, r7
 800efa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa8:	4770      	bx	lr
 800efaa:	bf00      	nop
 800efac:	240000bc 	.word	0x240000bc

0800efb0 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 800efb0:	b580      	push	{r7, lr}
 800efb2:	b084      	sub	sp, #16
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	60b9      	str	r1, [r7, #8]
 800efb8:	607a      	str	r2, [r7, #4]
 800efba:	603b      	str	r3, [r7, #0]
 800efbc:	4603      	mov	r3, r0
 800efbe:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 800efc0:	7bfb      	ldrb	r3, [r7, #15]
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d102      	bne.n	800efcc <SD_disk_read+0x1c>
 800efc6:	683b      	ldr	r3, [r7, #0]
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d101      	bne.n	800efd0 <SD_disk_read+0x20>
 800efcc:	2304      	movs	r3, #4
 800efce:	e051      	b.n	800f074 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800efd0:	4b2a      	ldr	r3, [pc, #168]	@ (800f07c <SD_disk_read+0xcc>)
 800efd2:	781b      	ldrb	r3, [r3, #0]
 800efd4:	b2db      	uxtb	r3, r3
 800efd6:	f003 0301 	and.w	r3, r3, #1
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d001      	beq.n	800efe2 <SD_disk_read+0x32>
 800efde:	2303      	movs	r3, #3
 800efe0:	e048      	b.n	800f074 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 800efe2:	4b27      	ldr	r3, [pc, #156]	@ (800f080 <SD_disk_read+0xd0>)
 800efe4:	781b      	ldrb	r3, [r3, #0]
 800efe6:	f003 0304 	and.w	r3, r3, #4
 800efea:	2b00      	cmp	r3, #0
 800efec:	d102      	bne.n	800eff4 <SD_disk_read+0x44>
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	025b      	lsls	r3, r3, #9
 800eff2:	607b      	str	r3, [r7, #4]

  SELECT();
 800eff4:	f7ff fd30 	bl	800ea58 <SELECT>

  if (count == 1)
 800eff8:	683b      	ldr	r3, [r7, #0]
 800effa:	2b01      	cmp	r3, #1
 800effc:	d111      	bne.n	800f022 <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800effe:	6879      	ldr	r1, [r7, #4]
 800f000:	2051      	movs	r0, #81	@ 0x51
 800f002:	f7ff fe84 	bl	800ed0e <SD_SendCmd>
 800f006:	4603      	mov	r3, r0
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d129      	bne.n	800f060 <SD_disk_read+0xb0>
 800f00c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800f010:	68b8      	ldr	r0, [r7, #8]
 800f012:	f7ff fe0b 	bl	800ec2c <SD_RxDataBlock>
 800f016:	4603      	mov	r3, r0
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d021      	beq.n	800f060 <SD_disk_read+0xb0>
 800f01c:	2300      	movs	r3, #0
 800f01e:	603b      	str	r3, [r7, #0]
 800f020:	e01e      	b.n	800f060 <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 800f022:	6879      	ldr	r1, [r7, #4]
 800f024:	2052      	movs	r0, #82	@ 0x52
 800f026:	f7ff fe72 	bl	800ed0e <SD_SendCmd>
 800f02a:	4603      	mov	r3, r0
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d117      	bne.n	800f060 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 800f030:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800f034:	68b8      	ldr	r0, [r7, #8]
 800f036:	f7ff fdf9 	bl	800ec2c <SD_RxDataBlock>
 800f03a:	4603      	mov	r3, r0
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d00a      	beq.n	800f056 <SD_disk_read+0xa6>
        buff += 512;
 800f040:	68bb      	ldr	r3, [r7, #8]
 800f042:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800f046:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800f048:	683b      	ldr	r3, [r7, #0]
 800f04a:	3b01      	subs	r3, #1
 800f04c:	603b      	str	r3, [r7, #0]
 800f04e:	683b      	ldr	r3, [r7, #0]
 800f050:	2b00      	cmp	r3, #0
 800f052:	d1ed      	bne.n	800f030 <SD_disk_read+0x80>
 800f054:	e000      	b.n	800f058 <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 800f056:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 800f058:	2100      	movs	r1, #0
 800f05a:	204c      	movs	r0, #76	@ 0x4c
 800f05c:	f7ff fe57 	bl	800ed0e <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 800f060:	f7ff fd06 	bl	800ea70 <DESELECT>
  SPI_RxByte();
 800f064:	f7ff fd44 	bl	800eaf0 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 800f068:	683b      	ldr	r3, [r7, #0]
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	bf14      	ite	ne
 800f06e:	2301      	movne	r3, #1
 800f070:	2300      	moveq	r3, #0
 800f072:	b2db      	uxtb	r3, r3
}
 800f074:	4618      	mov	r0, r3
 800f076:	3710      	adds	r7, #16
 800f078:	46bd      	mov	sp, r7
 800f07a:	bd80      	pop	{r7, pc}
 800f07c:	240000bc 	.word	0x240000bc
 800f080:	240029e4 	.word	0x240029e4

0800f084 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 800f084:	b580      	push	{r7, lr}
 800f086:	b084      	sub	sp, #16
 800f088:	af00      	add	r7, sp, #0
 800f08a:	60b9      	str	r1, [r7, #8]
 800f08c:	607a      	str	r2, [r7, #4]
 800f08e:	603b      	str	r3, [r7, #0]
 800f090:	4603      	mov	r3, r0
 800f092:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 800f094:	7bfb      	ldrb	r3, [r7, #15]
 800f096:	2b00      	cmp	r3, #0
 800f098:	d102      	bne.n	800f0a0 <SD_disk_write+0x1c>
 800f09a:	683b      	ldr	r3, [r7, #0]
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d101      	bne.n	800f0a4 <SD_disk_write+0x20>
 800f0a0:	2304      	movs	r3, #4
 800f0a2:	e06b      	b.n	800f17c <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800f0a4:	4b37      	ldr	r3, [pc, #220]	@ (800f184 <SD_disk_write+0x100>)
 800f0a6:	781b      	ldrb	r3, [r3, #0]
 800f0a8:	b2db      	uxtb	r3, r3
 800f0aa:	f003 0301 	and.w	r3, r3, #1
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d001      	beq.n	800f0b6 <SD_disk_write+0x32>
 800f0b2:	2303      	movs	r3, #3
 800f0b4:	e062      	b.n	800f17c <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 800f0b6:	4b33      	ldr	r3, [pc, #204]	@ (800f184 <SD_disk_write+0x100>)
 800f0b8:	781b      	ldrb	r3, [r3, #0]
 800f0ba:	b2db      	uxtb	r3, r3
 800f0bc:	f003 0304 	and.w	r3, r3, #4
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d001      	beq.n	800f0c8 <SD_disk_write+0x44>
 800f0c4:	2302      	movs	r3, #2
 800f0c6:	e059      	b.n	800f17c <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 800f0c8:	4b2f      	ldr	r3, [pc, #188]	@ (800f188 <SD_disk_write+0x104>)
 800f0ca:	781b      	ldrb	r3, [r3, #0]
 800f0cc:	f003 0304 	and.w	r3, r3, #4
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d102      	bne.n	800f0da <SD_disk_write+0x56>
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	025b      	lsls	r3, r3, #9
 800f0d8:	607b      	str	r3, [r7, #4]

  SELECT();
 800f0da:	f7ff fcbd 	bl	800ea58 <SELECT>

  if (count == 1)
 800f0de:	683b      	ldr	r3, [r7, #0]
 800f0e0:	2b01      	cmp	r3, #1
 800f0e2:	d110      	bne.n	800f106 <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800f0e4:	6879      	ldr	r1, [r7, #4]
 800f0e6:	2058      	movs	r0, #88	@ 0x58
 800f0e8:	f7ff fe11 	bl	800ed0e <SD_SendCmd>
 800f0ec:	4603      	mov	r3, r0
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d13a      	bne.n	800f168 <SD_disk_write+0xe4>
 800f0f2:	21fe      	movs	r1, #254	@ 0xfe
 800f0f4:	68b8      	ldr	r0, [r7, #8]
 800f0f6:	f7ff fdc7 	bl	800ec88 <SD_TxDataBlock>
 800f0fa:	4603      	mov	r3, r0
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d033      	beq.n	800f168 <SD_disk_write+0xe4>
      count = 0;
 800f100:	2300      	movs	r3, #0
 800f102:	603b      	str	r3, [r7, #0]
 800f104:	e030      	b.n	800f168 <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 800f106:	4b20      	ldr	r3, [pc, #128]	@ (800f188 <SD_disk_write+0x104>)
 800f108:	781b      	ldrb	r3, [r3, #0]
 800f10a:	f003 0302 	and.w	r3, r3, #2
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d007      	beq.n	800f122 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 800f112:	2100      	movs	r1, #0
 800f114:	2077      	movs	r0, #119	@ 0x77
 800f116:	f7ff fdfa 	bl	800ed0e <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 800f11a:	6839      	ldr	r1, [r7, #0]
 800f11c:	2057      	movs	r0, #87	@ 0x57
 800f11e:	f7ff fdf6 	bl	800ed0e <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 800f122:	6879      	ldr	r1, [r7, #4]
 800f124:	2059      	movs	r0, #89	@ 0x59
 800f126:	f7ff fdf2 	bl	800ed0e <SD_SendCmd>
 800f12a:	4603      	mov	r3, r0
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d11b      	bne.n	800f168 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 800f130:	21fc      	movs	r1, #252	@ 0xfc
 800f132:	68b8      	ldr	r0, [r7, #8]
 800f134:	f7ff fda8 	bl	800ec88 <SD_TxDataBlock>
 800f138:	4603      	mov	r3, r0
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d00a      	beq.n	800f154 <SD_disk_write+0xd0>
        buff += 512;
 800f13e:	68bb      	ldr	r3, [r7, #8]
 800f140:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800f144:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800f146:	683b      	ldr	r3, [r7, #0]
 800f148:	3b01      	subs	r3, #1
 800f14a:	603b      	str	r3, [r7, #0]
 800f14c:	683b      	ldr	r3, [r7, #0]
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d1ee      	bne.n	800f130 <SD_disk_write+0xac>
 800f152:	e000      	b.n	800f156 <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 800f154:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 800f156:	21fd      	movs	r1, #253	@ 0xfd
 800f158:	2000      	movs	r0, #0
 800f15a:	f7ff fd95 	bl	800ec88 <SD_TxDataBlock>
 800f15e:	4603      	mov	r3, r0
 800f160:	2b00      	cmp	r3, #0
 800f162:	d101      	bne.n	800f168 <SD_disk_write+0xe4>
      {
        count = 1;
 800f164:	2301      	movs	r3, #1
 800f166:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 800f168:	f7ff fc82 	bl	800ea70 <DESELECT>
  SPI_RxByte();
 800f16c:	f7ff fcc0 	bl	800eaf0 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 800f170:	683b      	ldr	r3, [r7, #0]
 800f172:	2b00      	cmp	r3, #0
 800f174:	bf14      	ite	ne
 800f176:	2301      	movne	r3, #1
 800f178:	2300      	moveq	r3, #0
 800f17a:	b2db      	uxtb	r3, r3
}
 800f17c:	4618      	mov	r0, r3
 800f17e:	3710      	adds	r7, #16
 800f180:	46bd      	mov	sp, r7
 800f182:	bd80      	pop	{r7, pc}
 800f184:	240000bc 	.word	0x240000bc
 800f188:	240029e4 	.word	0x240029e4

0800f18c <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 800f18c:	b590      	push	{r4, r7, lr}
 800f18e:	b08b      	sub	sp, #44	@ 0x2c
 800f190:	af00      	add	r7, sp, #0
 800f192:	4603      	mov	r3, r0
 800f194:	603a      	str	r2, [r7, #0]
 800f196:	71fb      	strb	r3, [r7, #7]
 800f198:	460b      	mov	r3, r1
 800f19a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 800f19c:	683b      	ldr	r3, [r7, #0]
 800f19e:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 800f1a0:	79fb      	ldrb	r3, [r7, #7]
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d001      	beq.n	800f1aa <SD_disk_ioctl+0x1e>
 800f1a6:	2304      	movs	r3, #4
 800f1a8:	e113      	b.n	800f3d2 <SD_disk_ioctl+0x246>
  res = RES_ERROR;
 800f1aa:	2301      	movs	r3, #1
 800f1ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 800f1b0:	79bb      	ldrb	r3, [r7, #6]
 800f1b2:	2b05      	cmp	r3, #5
 800f1b4:	d124      	bne.n	800f200 <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 800f1b6:	6a3b      	ldr	r3, [r7, #32]
 800f1b8:	781b      	ldrb	r3, [r3, #0]
 800f1ba:	2b02      	cmp	r3, #2
 800f1bc:	d012      	beq.n	800f1e4 <SD_disk_ioctl+0x58>
 800f1be:	2b02      	cmp	r3, #2
 800f1c0:	dc1a      	bgt.n	800f1f8 <SD_disk_ioctl+0x6c>
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d002      	beq.n	800f1cc <SD_disk_ioctl+0x40>
 800f1c6:	2b01      	cmp	r3, #1
 800f1c8:	d006      	beq.n	800f1d8 <SD_disk_ioctl+0x4c>
 800f1ca:	e015      	b.n	800f1f8 <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 800f1cc:	f7ff fd16 	bl	800ebfc <SD_PowerOff>
      res = RES_OK;
 800f1d0:	2300      	movs	r3, #0
 800f1d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800f1d6:	e0fa      	b.n	800f3ce <SD_disk_ioctl+0x242>
    case 1:
      SD_PowerOn();   /* Power On */
 800f1d8:	f7ff fcce 	bl	800eb78 <SD_PowerOn>
      res = RES_OK;
 800f1dc:	2300      	movs	r3, #0
 800f1de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800f1e2:	e0f4      	b.n	800f3ce <SD_disk_ioctl+0x242>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 800f1e4:	6a3b      	ldr	r3, [r7, #32]
 800f1e6:	1c5c      	adds	r4, r3, #1
 800f1e8:	f7ff fd14 	bl	800ec14 <SD_CheckPower>
 800f1ec:	4603      	mov	r3, r0
 800f1ee:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 800f1f0:	2300      	movs	r3, #0
 800f1f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800f1f6:	e0ea      	b.n	800f3ce <SD_disk_ioctl+0x242>
    default:
      res = RES_PARERR;
 800f1f8:	2304      	movs	r3, #4
 800f1fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f1fe:	e0e6      	b.n	800f3ce <SD_disk_ioctl+0x242>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT){
 800f200:	4b76      	ldr	r3, [pc, #472]	@ (800f3dc <SD_disk_ioctl+0x250>)
 800f202:	781b      	ldrb	r3, [r3, #0]
 800f204:	b2db      	uxtb	r3, r3
 800f206:	f003 0301 	and.w	r3, r3, #1
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d001      	beq.n	800f212 <SD_disk_ioctl+0x86>
    	return RES_NOTRDY;
 800f20e:	2303      	movs	r3, #3
 800f210:	e0df      	b.n	800f3d2 <SD_disk_ioctl+0x246>
    }
    SELECT();
 800f212:	f7ff fc21 	bl	800ea58 <SELECT>
    switch (ctrl)
 800f216:	79bb      	ldrb	r3, [r7, #6]
 800f218:	2b0d      	cmp	r3, #13
 800f21a:	f200 80c9 	bhi.w	800f3b0 <SD_disk_ioctl+0x224>
 800f21e:	a201      	add	r2, pc, #4	@ (adr r2, 800f224 <SD_disk_ioctl+0x98>)
 800f220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f224:	0800f31b 	.word	0x0800f31b
 800f228:	0800f25d 	.word	0x0800f25d
 800f22c:	0800f30b 	.word	0x0800f30b
 800f230:	0800f3b1 	.word	0x0800f3b1
 800f234:	0800f3b1 	.word	0x0800f3b1
 800f238:	0800f3b1 	.word	0x0800f3b1
 800f23c:	0800f3b1 	.word	0x0800f3b1
 800f240:	0800f3b1 	.word	0x0800f3b1
 800f244:	0800f3b1 	.word	0x0800f3b1
 800f248:	0800f3b1 	.word	0x0800f3b1
 800f24c:	0800f3b1 	.word	0x0800f3b1
 800f250:	0800f32d 	.word	0x0800f32d
 800f254:	0800f351 	.word	0x0800f351
 800f258:	0800f375 	.word	0x0800f375
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800f25c:	2100      	movs	r1, #0
 800f25e:	2049      	movs	r0, #73	@ 0x49
 800f260:	f7ff fd55 	bl	800ed0e <SD_SendCmd>
 800f264:	4603      	mov	r3, r0
 800f266:	2b00      	cmp	r3, #0
 800f268:	f040 80a6 	bne.w	800f3b8 <SD_disk_ioctl+0x22c>
 800f26c:	f107 030c 	add.w	r3, r7, #12
 800f270:	2110      	movs	r1, #16
 800f272:	4618      	mov	r0, r3
 800f274:	f7ff fcda 	bl	800ec2c <SD_RxDataBlock>
 800f278:	4603      	mov	r3, r0
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	f000 809c 	beq.w	800f3b8 <SD_disk_ioctl+0x22c>
      {
        if ((csd[0] >> 6) == 1)
 800f280:	7b3b      	ldrb	r3, [r7, #12]
 800f282:	099b      	lsrs	r3, r3, #6
 800f284:	b2db      	uxtb	r3, r3
 800f286:	2b01      	cmp	r3, #1
 800f288:	d10d      	bne.n	800f2a6 <SD_disk_ioctl+0x11a>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800f28a:	7d7b      	ldrb	r3, [r7, #21]
 800f28c:	461a      	mov	r2, r3
 800f28e:	7d3b      	ldrb	r3, [r7, #20]
 800f290:	021b      	lsls	r3, r3, #8
 800f292:	b29b      	uxth	r3, r3
 800f294:	4413      	add	r3, r2
 800f296:	b29b      	uxth	r3, r3
 800f298:	3301      	adds	r3, #1
 800f29a:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 800f29c:	8bfb      	ldrh	r3, [r7, #30]
 800f29e:	029a      	lsls	r2, r3, #10
 800f2a0:	683b      	ldr	r3, [r7, #0]
 800f2a2:	601a      	str	r2, [r3, #0]
 800f2a4:	e02d      	b.n	800f302 <SD_disk_ioctl+0x176>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800f2a6:	7c7b      	ldrb	r3, [r7, #17]
 800f2a8:	f003 030f 	and.w	r3, r3, #15
 800f2ac:	b2da      	uxtb	r2, r3
 800f2ae:	7dbb      	ldrb	r3, [r7, #22]
 800f2b0:	09db      	lsrs	r3, r3, #7
 800f2b2:	b2db      	uxtb	r3, r3
 800f2b4:	4413      	add	r3, r2
 800f2b6:	b2da      	uxtb	r2, r3
 800f2b8:	7d7b      	ldrb	r3, [r7, #21]
 800f2ba:	005b      	lsls	r3, r3, #1
 800f2bc:	b2db      	uxtb	r3, r3
 800f2be:	f003 0306 	and.w	r3, r3, #6
 800f2c2:	b2db      	uxtb	r3, r3
 800f2c4:	4413      	add	r3, r2
 800f2c6:	b2db      	uxtb	r3, r3
 800f2c8:	3302      	adds	r3, #2
 800f2ca:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800f2ce:	7d3b      	ldrb	r3, [r7, #20]
 800f2d0:	099b      	lsrs	r3, r3, #6
 800f2d2:	b2db      	uxtb	r3, r3
 800f2d4:	461a      	mov	r2, r3
 800f2d6:	7cfb      	ldrb	r3, [r7, #19]
 800f2d8:	009b      	lsls	r3, r3, #2
 800f2da:	b29b      	uxth	r3, r3
 800f2dc:	4413      	add	r3, r2
 800f2de:	b29a      	uxth	r2, r3
 800f2e0:	7cbb      	ldrb	r3, [r7, #18]
 800f2e2:	029b      	lsls	r3, r3, #10
 800f2e4:	b29b      	uxth	r3, r3
 800f2e6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800f2ea:	b29b      	uxth	r3, r3
 800f2ec:	4413      	add	r3, r2
 800f2ee:	b29b      	uxth	r3, r3
 800f2f0:	3301      	adds	r3, #1
 800f2f2:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 800f2f4:	8bfa      	ldrh	r2, [r7, #30]
 800f2f6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f2fa:	3b09      	subs	r3, #9
 800f2fc:	409a      	lsls	r2, r3
 800f2fe:	683b      	ldr	r3, [r7, #0]
 800f300:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 800f302:	2300      	movs	r3, #0
 800f304:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 800f308:	e056      	b.n	800f3b8 <SD_disk_ioctl+0x22c>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 800f30a:	683b      	ldr	r3, [r7, #0]
 800f30c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f310:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 800f312:	2300      	movs	r3, #0
 800f314:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800f318:	e055      	b.n	800f3c6 <SD_disk_ioctl+0x23a>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800f31a:	f7ff fc13 	bl	800eb44 <SD_ReadyWait>
 800f31e:	4603      	mov	r3, r0
 800f320:	2bff      	cmp	r3, #255	@ 0xff
 800f322:	d14b      	bne.n	800f3bc <SD_disk_ioctl+0x230>
 800f324:	2300      	movs	r3, #0
 800f326:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800f32a:	e047      	b.n	800f3bc <SD_disk_ioctl+0x230>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800f32c:	2100      	movs	r1, #0
 800f32e:	2049      	movs	r0, #73	@ 0x49
 800f330:	f7ff fced 	bl	800ed0e <SD_SendCmd>
 800f334:	4603      	mov	r3, r0
 800f336:	2b00      	cmp	r3, #0
 800f338:	d142      	bne.n	800f3c0 <SD_disk_ioctl+0x234>
 800f33a:	2110      	movs	r1, #16
 800f33c:	6a38      	ldr	r0, [r7, #32]
 800f33e:	f7ff fc75 	bl	800ec2c <SD_RxDataBlock>
 800f342:	4603      	mov	r3, r0
 800f344:	2b00      	cmp	r3, #0
 800f346:	d03b      	beq.n	800f3c0 <SD_disk_ioctl+0x234>
 800f348:	2300      	movs	r3, #0
 800f34a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800f34e:	e037      	b.n	800f3c0 <SD_disk_ioctl+0x234>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800f350:	2100      	movs	r1, #0
 800f352:	204a      	movs	r0, #74	@ 0x4a
 800f354:	f7ff fcdb 	bl	800ed0e <SD_SendCmd>
 800f358:	4603      	mov	r3, r0
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d132      	bne.n	800f3c4 <SD_disk_ioctl+0x238>
 800f35e:	2110      	movs	r1, #16
 800f360:	6a38      	ldr	r0, [r7, #32]
 800f362:	f7ff fc63 	bl	800ec2c <SD_RxDataBlock>
 800f366:	4603      	mov	r3, r0
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d02b      	beq.n	800f3c4 <SD_disk_ioctl+0x238>
 800f36c:	2300      	movs	r3, #0
 800f36e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800f372:	e027      	b.n	800f3c4 <SD_disk_ioctl+0x238>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 800f374:	2100      	movs	r1, #0
 800f376:	207a      	movs	r0, #122	@ 0x7a
 800f378:	f7ff fcc9 	bl	800ed0e <SD_SendCmd>
 800f37c:	4603      	mov	r3, r0
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d116      	bne.n	800f3b0 <SD_disk_ioctl+0x224>
      {
        for (n = 0; n < 4; n++)
 800f382:	2300      	movs	r3, #0
 800f384:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800f388:	e00b      	b.n	800f3a2 <SD_disk_ioctl+0x216>
        {
          *ptr++ = SPI_RxByte();
 800f38a:	6a3c      	ldr	r4, [r7, #32]
 800f38c:	1c63      	adds	r3, r4, #1
 800f38e:	623b      	str	r3, [r7, #32]
 800f390:	f7ff fbae 	bl	800eaf0 <SPI_RxByte>
 800f394:	4603      	mov	r3, r0
 800f396:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 800f398:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f39c:	3301      	adds	r3, #1
 800f39e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800f3a2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f3a6:	2b03      	cmp	r3, #3
 800f3a8:	d9ef      	bls.n	800f38a <SD_disk_ioctl+0x1fe>
        }
        res = RES_OK;
 800f3aa:	2300      	movs	r3, #0
 800f3ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
    default:
      res = RES_PARERR;
 800f3b0:	2304      	movs	r3, #4
 800f3b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f3b6:	e006      	b.n	800f3c6 <SD_disk_ioctl+0x23a>
      break;
 800f3b8:	bf00      	nop
 800f3ba:	e004      	b.n	800f3c6 <SD_disk_ioctl+0x23a>
      break;
 800f3bc:	bf00      	nop
 800f3be:	e002      	b.n	800f3c6 <SD_disk_ioctl+0x23a>
      break;
 800f3c0:	bf00      	nop
 800f3c2:	e000      	b.n	800f3c6 <SD_disk_ioctl+0x23a>
      break;
 800f3c4:	bf00      	nop
    }
    DESELECT();
 800f3c6:	f7ff fb53 	bl	800ea70 <DESELECT>
    SPI_RxByte();
 800f3ca:	f7ff fb91 	bl	800eaf0 <SPI_RxByte>
  }
  return res;
 800f3ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800f3d2:	4618      	mov	r0, r3
 800f3d4:	372c      	adds	r7, #44	@ 0x2c
 800f3d6:	46bd      	mov	sp, r7
 800f3d8:	bd90      	pop	{r4, r7, pc}
 800f3da:	bf00      	nop
 800f3dc:	240000bc 	.word	0x240000bc

0800f3e0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800f3e0:	b580      	push	{r7, lr}
 800f3e2:	b084      	sub	sp, #16
 800f3e4:	af00      	add	r7, sp, #0
 800f3e6:	4603      	mov	r3, r0
 800f3e8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800f3ea:	79fb      	ldrb	r3, [r7, #7]
 800f3ec:	4a08      	ldr	r2, [pc, #32]	@ (800f410 <disk_status+0x30>)
 800f3ee:	009b      	lsls	r3, r3, #2
 800f3f0:	4413      	add	r3, r2
 800f3f2:	685b      	ldr	r3, [r3, #4]
 800f3f4:	685b      	ldr	r3, [r3, #4]
 800f3f6:	79fa      	ldrb	r2, [r7, #7]
 800f3f8:	4905      	ldr	r1, [pc, #20]	@ (800f410 <disk_status+0x30>)
 800f3fa:	440a      	add	r2, r1
 800f3fc:	7a12      	ldrb	r2, [r2, #8]
 800f3fe:	4610      	mov	r0, r2
 800f400:	4798      	blx	r3
 800f402:	4603      	mov	r3, r0
 800f404:	73fb      	strb	r3, [r7, #15]
  return stat;
 800f406:	7bfb      	ldrb	r3, [r7, #15]
}
 800f408:	4618      	mov	r0, r3
 800f40a:	3710      	adds	r7, #16
 800f40c:	46bd      	mov	sp, r7
 800f40e:	bd80      	pop	{r7, pc}
 800f410:	24002c10 	.word	0x24002c10

0800f414 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800f414:	b580      	push	{r7, lr}
 800f416:	b084      	sub	sp, #16
 800f418:	af00      	add	r7, sp, #0
 800f41a:	4603      	mov	r3, r0
 800f41c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800f41e:	2300      	movs	r3, #0
 800f420:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800f422:	79fb      	ldrb	r3, [r7, #7]
 800f424:	4a0e      	ldr	r2, [pc, #56]	@ (800f460 <disk_initialize+0x4c>)
 800f426:	5cd3      	ldrb	r3, [r2, r3]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d114      	bne.n	800f456 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800f42c:	79fb      	ldrb	r3, [r7, #7]
 800f42e:	4a0c      	ldr	r2, [pc, #48]	@ (800f460 <disk_initialize+0x4c>)
 800f430:	009b      	lsls	r3, r3, #2
 800f432:	4413      	add	r3, r2
 800f434:	685b      	ldr	r3, [r3, #4]
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	79fa      	ldrb	r2, [r7, #7]
 800f43a:	4909      	ldr	r1, [pc, #36]	@ (800f460 <disk_initialize+0x4c>)
 800f43c:	440a      	add	r2, r1
 800f43e:	7a12      	ldrb	r2, [r2, #8]
 800f440:	4610      	mov	r0, r2
 800f442:	4798      	blx	r3
 800f444:	4603      	mov	r3, r0
 800f446:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800f448:	7bfb      	ldrb	r3, [r7, #15]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d103      	bne.n	800f456 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800f44e:	79fb      	ldrb	r3, [r7, #7]
 800f450:	4a03      	ldr	r2, [pc, #12]	@ (800f460 <disk_initialize+0x4c>)
 800f452:	2101      	movs	r1, #1
 800f454:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800f456:	7bfb      	ldrb	r3, [r7, #15]
}
 800f458:	4618      	mov	r0, r3
 800f45a:	3710      	adds	r7, #16
 800f45c:	46bd      	mov	sp, r7
 800f45e:	bd80      	pop	{r7, pc}
 800f460:	24002c10 	.word	0x24002c10

0800f464 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800f464:	b590      	push	{r4, r7, lr}
 800f466:	b087      	sub	sp, #28
 800f468:	af00      	add	r7, sp, #0
 800f46a:	60b9      	str	r1, [r7, #8]
 800f46c:	607a      	str	r2, [r7, #4]
 800f46e:	603b      	str	r3, [r7, #0]
 800f470:	4603      	mov	r3, r0
 800f472:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800f474:	7bfb      	ldrb	r3, [r7, #15]
 800f476:	4a0a      	ldr	r2, [pc, #40]	@ (800f4a0 <disk_read+0x3c>)
 800f478:	009b      	lsls	r3, r3, #2
 800f47a:	4413      	add	r3, r2
 800f47c:	685b      	ldr	r3, [r3, #4]
 800f47e:	689c      	ldr	r4, [r3, #8]
 800f480:	7bfb      	ldrb	r3, [r7, #15]
 800f482:	4a07      	ldr	r2, [pc, #28]	@ (800f4a0 <disk_read+0x3c>)
 800f484:	4413      	add	r3, r2
 800f486:	7a18      	ldrb	r0, [r3, #8]
 800f488:	683b      	ldr	r3, [r7, #0]
 800f48a:	687a      	ldr	r2, [r7, #4]
 800f48c:	68b9      	ldr	r1, [r7, #8]
 800f48e:	47a0      	blx	r4
 800f490:	4603      	mov	r3, r0
 800f492:	75fb      	strb	r3, [r7, #23]
  return res;
 800f494:	7dfb      	ldrb	r3, [r7, #23]
}
 800f496:	4618      	mov	r0, r3
 800f498:	371c      	adds	r7, #28
 800f49a:	46bd      	mov	sp, r7
 800f49c:	bd90      	pop	{r4, r7, pc}
 800f49e:	bf00      	nop
 800f4a0:	24002c10 	.word	0x24002c10

0800f4a4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800f4a4:	b590      	push	{r4, r7, lr}
 800f4a6:	b087      	sub	sp, #28
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	60b9      	str	r1, [r7, #8]
 800f4ac:	607a      	str	r2, [r7, #4]
 800f4ae:	603b      	str	r3, [r7, #0]
 800f4b0:	4603      	mov	r3, r0
 800f4b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800f4b4:	7bfb      	ldrb	r3, [r7, #15]
 800f4b6:	4a0a      	ldr	r2, [pc, #40]	@ (800f4e0 <disk_write+0x3c>)
 800f4b8:	009b      	lsls	r3, r3, #2
 800f4ba:	4413      	add	r3, r2
 800f4bc:	685b      	ldr	r3, [r3, #4]
 800f4be:	68dc      	ldr	r4, [r3, #12]
 800f4c0:	7bfb      	ldrb	r3, [r7, #15]
 800f4c2:	4a07      	ldr	r2, [pc, #28]	@ (800f4e0 <disk_write+0x3c>)
 800f4c4:	4413      	add	r3, r2
 800f4c6:	7a18      	ldrb	r0, [r3, #8]
 800f4c8:	683b      	ldr	r3, [r7, #0]
 800f4ca:	687a      	ldr	r2, [r7, #4]
 800f4cc:	68b9      	ldr	r1, [r7, #8]
 800f4ce:	47a0      	blx	r4
 800f4d0:	4603      	mov	r3, r0
 800f4d2:	75fb      	strb	r3, [r7, #23]
  return res;
 800f4d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800f4d6:	4618      	mov	r0, r3
 800f4d8:	371c      	adds	r7, #28
 800f4da:	46bd      	mov	sp, r7
 800f4dc:	bd90      	pop	{r4, r7, pc}
 800f4de:	bf00      	nop
 800f4e0:	24002c10 	.word	0x24002c10

0800f4e4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800f4e4:	b580      	push	{r7, lr}
 800f4e6:	b084      	sub	sp, #16
 800f4e8:	af00      	add	r7, sp, #0
 800f4ea:	4603      	mov	r3, r0
 800f4ec:	603a      	str	r2, [r7, #0]
 800f4ee:	71fb      	strb	r3, [r7, #7]
 800f4f0:	460b      	mov	r3, r1
 800f4f2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800f4f4:	79fb      	ldrb	r3, [r7, #7]
 800f4f6:	4a09      	ldr	r2, [pc, #36]	@ (800f51c <disk_ioctl+0x38>)
 800f4f8:	009b      	lsls	r3, r3, #2
 800f4fa:	4413      	add	r3, r2
 800f4fc:	685b      	ldr	r3, [r3, #4]
 800f4fe:	691b      	ldr	r3, [r3, #16]
 800f500:	79fa      	ldrb	r2, [r7, #7]
 800f502:	4906      	ldr	r1, [pc, #24]	@ (800f51c <disk_ioctl+0x38>)
 800f504:	440a      	add	r2, r1
 800f506:	7a10      	ldrb	r0, [r2, #8]
 800f508:	79b9      	ldrb	r1, [r7, #6]
 800f50a:	683a      	ldr	r2, [r7, #0]
 800f50c:	4798      	blx	r3
 800f50e:	4603      	mov	r3, r0
 800f510:	73fb      	strb	r3, [r7, #15]
  return res;
 800f512:	7bfb      	ldrb	r3, [r7, #15]
}
 800f514:	4618      	mov	r0, r3
 800f516:	3710      	adds	r7, #16
 800f518:	46bd      	mov	sp, r7
 800f51a:	bd80      	pop	{r7, pc}
 800f51c:	24002c10 	.word	0x24002c10

0800f520 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800f520:	b480      	push	{r7}
 800f522:	b085      	sub	sp, #20
 800f524:	af00      	add	r7, sp, #0
 800f526:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	3301      	adds	r3, #1
 800f52c:	781b      	ldrb	r3, [r3, #0]
 800f52e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800f530:	89fb      	ldrh	r3, [r7, #14]
 800f532:	021b      	lsls	r3, r3, #8
 800f534:	b21a      	sxth	r2, r3
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	781b      	ldrb	r3, [r3, #0]
 800f53a:	b21b      	sxth	r3, r3
 800f53c:	4313      	orrs	r3, r2
 800f53e:	b21b      	sxth	r3, r3
 800f540:	81fb      	strh	r3, [r7, #14]
	return rv;
 800f542:	89fb      	ldrh	r3, [r7, #14]
}
 800f544:	4618      	mov	r0, r3
 800f546:	3714      	adds	r7, #20
 800f548:	46bd      	mov	sp, r7
 800f54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f54e:	4770      	bx	lr

0800f550 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800f550:	b480      	push	{r7}
 800f552:	b085      	sub	sp, #20
 800f554:	af00      	add	r7, sp, #0
 800f556:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	3303      	adds	r3, #3
 800f55c:	781b      	ldrb	r3, [r3, #0]
 800f55e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	021b      	lsls	r3, r3, #8
 800f564:	687a      	ldr	r2, [r7, #4]
 800f566:	3202      	adds	r2, #2
 800f568:	7812      	ldrb	r2, [r2, #0]
 800f56a:	4313      	orrs	r3, r2
 800f56c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	021b      	lsls	r3, r3, #8
 800f572:	687a      	ldr	r2, [r7, #4]
 800f574:	3201      	adds	r2, #1
 800f576:	7812      	ldrb	r2, [r2, #0]
 800f578:	4313      	orrs	r3, r2
 800f57a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	021b      	lsls	r3, r3, #8
 800f580:	687a      	ldr	r2, [r7, #4]
 800f582:	7812      	ldrb	r2, [r2, #0]
 800f584:	4313      	orrs	r3, r2
 800f586:	60fb      	str	r3, [r7, #12]
	return rv;
 800f588:	68fb      	ldr	r3, [r7, #12]
}
 800f58a:	4618      	mov	r0, r3
 800f58c:	3714      	adds	r7, #20
 800f58e:	46bd      	mov	sp, r7
 800f590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f594:	4770      	bx	lr

0800f596 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800f596:	b480      	push	{r7}
 800f598:	b083      	sub	sp, #12
 800f59a:	af00      	add	r7, sp, #0
 800f59c:	6078      	str	r0, [r7, #4]
 800f59e:	460b      	mov	r3, r1
 800f5a0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	1c5a      	adds	r2, r3, #1
 800f5a6:	607a      	str	r2, [r7, #4]
 800f5a8:	887a      	ldrh	r2, [r7, #2]
 800f5aa:	b2d2      	uxtb	r2, r2
 800f5ac:	701a      	strb	r2, [r3, #0]
 800f5ae:	887b      	ldrh	r3, [r7, #2]
 800f5b0:	0a1b      	lsrs	r3, r3, #8
 800f5b2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	1c5a      	adds	r2, r3, #1
 800f5b8:	607a      	str	r2, [r7, #4]
 800f5ba:	887a      	ldrh	r2, [r7, #2]
 800f5bc:	b2d2      	uxtb	r2, r2
 800f5be:	701a      	strb	r2, [r3, #0]
}
 800f5c0:	bf00      	nop
 800f5c2:	370c      	adds	r7, #12
 800f5c4:	46bd      	mov	sp, r7
 800f5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ca:	4770      	bx	lr

0800f5cc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800f5cc:	b480      	push	{r7}
 800f5ce:	b083      	sub	sp, #12
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	6078      	str	r0, [r7, #4]
 800f5d4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	1c5a      	adds	r2, r3, #1
 800f5da:	607a      	str	r2, [r7, #4]
 800f5dc:	683a      	ldr	r2, [r7, #0]
 800f5de:	b2d2      	uxtb	r2, r2
 800f5e0:	701a      	strb	r2, [r3, #0]
 800f5e2:	683b      	ldr	r3, [r7, #0]
 800f5e4:	0a1b      	lsrs	r3, r3, #8
 800f5e6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	1c5a      	adds	r2, r3, #1
 800f5ec:	607a      	str	r2, [r7, #4]
 800f5ee:	683a      	ldr	r2, [r7, #0]
 800f5f0:	b2d2      	uxtb	r2, r2
 800f5f2:	701a      	strb	r2, [r3, #0]
 800f5f4:	683b      	ldr	r3, [r7, #0]
 800f5f6:	0a1b      	lsrs	r3, r3, #8
 800f5f8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	1c5a      	adds	r2, r3, #1
 800f5fe:	607a      	str	r2, [r7, #4]
 800f600:	683a      	ldr	r2, [r7, #0]
 800f602:	b2d2      	uxtb	r2, r2
 800f604:	701a      	strb	r2, [r3, #0]
 800f606:	683b      	ldr	r3, [r7, #0]
 800f608:	0a1b      	lsrs	r3, r3, #8
 800f60a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	1c5a      	adds	r2, r3, #1
 800f610:	607a      	str	r2, [r7, #4]
 800f612:	683a      	ldr	r2, [r7, #0]
 800f614:	b2d2      	uxtb	r2, r2
 800f616:	701a      	strb	r2, [r3, #0]
}
 800f618:	bf00      	nop
 800f61a:	370c      	adds	r7, #12
 800f61c:	46bd      	mov	sp, r7
 800f61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f622:	4770      	bx	lr

0800f624 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800f624:	b480      	push	{r7}
 800f626:	b087      	sub	sp, #28
 800f628:	af00      	add	r7, sp, #0
 800f62a:	60f8      	str	r0, [r7, #12]
 800f62c:	60b9      	str	r1, [r7, #8]
 800f62e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800f634:	68bb      	ldr	r3, [r7, #8]
 800f636:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d00d      	beq.n	800f65a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800f63e:	693a      	ldr	r2, [r7, #16]
 800f640:	1c53      	adds	r3, r2, #1
 800f642:	613b      	str	r3, [r7, #16]
 800f644:	697b      	ldr	r3, [r7, #20]
 800f646:	1c59      	adds	r1, r3, #1
 800f648:	6179      	str	r1, [r7, #20]
 800f64a:	7812      	ldrb	r2, [r2, #0]
 800f64c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	3b01      	subs	r3, #1
 800f652:	607b      	str	r3, [r7, #4]
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	2b00      	cmp	r3, #0
 800f658:	d1f1      	bne.n	800f63e <mem_cpy+0x1a>
	}
}
 800f65a:	bf00      	nop
 800f65c:	371c      	adds	r7, #28
 800f65e:	46bd      	mov	sp, r7
 800f660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f664:	4770      	bx	lr

0800f666 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800f666:	b480      	push	{r7}
 800f668:	b087      	sub	sp, #28
 800f66a:	af00      	add	r7, sp, #0
 800f66c:	60f8      	str	r0, [r7, #12]
 800f66e:	60b9      	str	r1, [r7, #8]
 800f670:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800f676:	697b      	ldr	r3, [r7, #20]
 800f678:	1c5a      	adds	r2, r3, #1
 800f67a:	617a      	str	r2, [r7, #20]
 800f67c:	68ba      	ldr	r2, [r7, #8]
 800f67e:	b2d2      	uxtb	r2, r2
 800f680:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	3b01      	subs	r3, #1
 800f686:	607b      	str	r3, [r7, #4]
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d1f3      	bne.n	800f676 <mem_set+0x10>
}
 800f68e:	bf00      	nop
 800f690:	bf00      	nop
 800f692:	371c      	adds	r7, #28
 800f694:	46bd      	mov	sp, r7
 800f696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f69a:	4770      	bx	lr

0800f69c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800f69c:	b480      	push	{r7}
 800f69e:	b089      	sub	sp, #36	@ 0x24
 800f6a0:	af00      	add	r7, sp, #0
 800f6a2:	60f8      	str	r0, [r7, #12]
 800f6a4:	60b9      	str	r1, [r7, #8]
 800f6a6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	61fb      	str	r3, [r7, #28]
 800f6ac:	68bb      	ldr	r3, [r7, #8]
 800f6ae:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800f6b0:	2300      	movs	r3, #0
 800f6b2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800f6b4:	69fb      	ldr	r3, [r7, #28]
 800f6b6:	1c5a      	adds	r2, r3, #1
 800f6b8:	61fa      	str	r2, [r7, #28]
 800f6ba:	781b      	ldrb	r3, [r3, #0]
 800f6bc:	4619      	mov	r1, r3
 800f6be:	69bb      	ldr	r3, [r7, #24]
 800f6c0:	1c5a      	adds	r2, r3, #1
 800f6c2:	61ba      	str	r2, [r7, #24]
 800f6c4:	781b      	ldrb	r3, [r3, #0]
 800f6c6:	1acb      	subs	r3, r1, r3
 800f6c8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	3b01      	subs	r3, #1
 800f6ce:	607b      	str	r3, [r7, #4]
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d002      	beq.n	800f6dc <mem_cmp+0x40>
 800f6d6:	697b      	ldr	r3, [r7, #20]
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d0eb      	beq.n	800f6b4 <mem_cmp+0x18>

	return r;
 800f6dc:	697b      	ldr	r3, [r7, #20]
}
 800f6de:	4618      	mov	r0, r3
 800f6e0:	3724      	adds	r7, #36	@ 0x24
 800f6e2:	46bd      	mov	sp, r7
 800f6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e8:	4770      	bx	lr

0800f6ea <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800f6ea:	b480      	push	{r7}
 800f6ec:	b083      	sub	sp, #12
 800f6ee:	af00      	add	r7, sp, #0
 800f6f0:	6078      	str	r0, [r7, #4]
 800f6f2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800f6f4:	e002      	b.n	800f6fc <chk_chr+0x12>
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	3301      	adds	r3, #1
 800f6fa:	607b      	str	r3, [r7, #4]
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	781b      	ldrb	r3, [r3, #0]
 800f700:	2b00      	cmp	r3, #0
 800f702:	d005      	beq.n	800f710 <chk_chr+0x26>
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	781b      	ldrb	r3, [r3, #0]
 800f708:	461a      	mov	r2, r3
 800f70a:	683b      	ldr	r3, [r7, #0]
 800f70c:	4293      	cmp	r3, r2
 800f70e:	d1f2      	bne.n	800f6f6 <chk_chr+0xc>
	return *str;
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	781b      	ldrb	r3, [r3, #0]
}
 800f714:	4618      	mov	r0, r3
 800f716:	370c      	adds	r7, #12
 800f718:	46bd      	mov	sp, r7
 800f71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f71e:	4770      	bx	lr

0800f720 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f720:	b480      	push	{r7}
 800f722:	b085      	sub	sp, #20
 800f724:	af00      	add	r7, sp, #0
 800f726:	6078      	str	r0, [r7, #4]
 800f728:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f72a:	2300      	movs	r3, #0
 800f72c:	60bb      	str	r3, [r7, #8]
 800f72e:	68bb      	ldr	r3, [r7, #8]
 800f730:	60fb      	str	r3, [r7, #12]
 800f732:	e029      	b.n	800f788 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800f734:	4a27      	ldr	r2, [pc, #156]	@ (800f7d4 <chk_lock+0xb4>)
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	011b      	lsls	r3, r3, #4
 800f73a:	4413      	add	r3, r2
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d01d      	beq.n	800f77e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f742:	4a24      	ldr	r2, [pc, #144]	@ (800f7d4 <chk_lock+0xb4>)
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	011b      	lsls	r3, r3, #4
 800f748:	4413      	add	r3, r2
 800f74a:	681a      	ldr	r2, [r3, #0]
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	429a      	cmp	r2, r3
 800f752:	d116      	bne.n	800f782 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800f754:	4a1f      	ldr	r2, [pc, #124]	@ (800f7d4 <chk_lock+0xb4>)
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	011b      	lsls	r3, r3, #4
 800f75a:	4413      	add	r3, r2
 800f75c:	3304      	adds	r3, #4
 800f75e:	681a      	ldr	r2, [r3, #0]
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f764:	429a      	cmp	r2, r3
 800f766:	d10c      	bne.n	800f782 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f768:	4a1a      	ldr	r2, [pc, #104]	@ (800f7d4 <chk_lock+0xb4>)
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	011b      	lsls	r3, r3, #4
 800f76e:	4413      	add	r3, r2
 800f770:	3308      	adds	r3, #8
 800f772:	681a      	ldr	r2, [r3, #0]
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800f778:	429a      	cmp	r2, r3
 800f77a:	d102      	bne.n	800f782 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f77c:	e007      	b.n	800f78e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800f77e:	2301      	movs	r3, #1
 800f780:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	3301      	adds	r3, #1
 800f786:	60fb      	str	r3, [r7, #12]
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	2b01      	cmp	r3, #1
 800f78c:	d9d2      	bls.n	800f734 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	2b02      	cmp	r3, #2
 800f792:	d109      	bne.n	800f7a8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800f794:	68bb      	ldr	r3, [r7, #8]
 800f796:	2b00      	cmp	r3, #0
 800f798:	d102      	bne.n	800f7a0 <chk_lock+0x80>
 800f79a:	683b      	ldr	r3, [r7, #0]
 800f79c:	2b02      	cmp	r3, #2
 800f79e:	d101      	bne.n	800f7a4 <chk_lock+0x84>
 800f7a0:	2300      	movs	r3, #0
 800f7a2:	e010      	b.n	800f7c6 <chk_lock+0xa6>
 800f7a4:	2312      	movs	r3, #18
 800f7a6:	e00e      	b.n	800f7c6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800f7a8:	683b      	ldr	r3, [r7, #0]
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d108      	bne.n	800f7c0 <chk_lock+0xa0>
 800f7ae:	4a09      	ldr	r2, [pc, #36]	@ (800f7d4 <chk_lock+0xb4>)
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	011b      	lsls	r3, r3, #4
 800f7b4:	4413      	add	r3, r2
 800f7b6:	330c      	adds	r3, #12
 800f7b8:	881b      	ldrh	r3, [r3, #0]
 800f7ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f7be:	d101      	bne.n	800f7c4 <chk_lock+0xa4>
 800f7c0:	2310      	movs	r3, #16
 800f7c2:	e000      	b.n	800f7c6 <chk_lock+0xa6>
 800f7c4:	2300      	movs	r3, #0
}
 800f7c6:	4618      	mov	r0, r3
 800f7c8:	3714      	adds	r7, #20
 800f7ca:	46bd      	mov	sp, r7
 800f7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7d0:	4770      	bx	lr
 800f7d2:	bf00      	nop
 800f7d4:	240029f0 	.word	0x240029f0

0800f7d8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800f7d8:	b480      	push	{r7}
 800f7da:	b083      	sub	sp, #12
 800f7dc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f7de:	2300      	movs	r3, #0
 800f7e0:	607b      	str	r3, [r7, #4]
 800f7e2:	e002      	b.n	800f7ea <enq_lock+0x12>
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	3301      	adds	r3, #1
 800f7e8:	607b      	str	r3, [r7, #4]
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	2b01      	cmp	r3, #1
 800f7ee:	d806      	bhi.n	800f7fe <enq_lock+0x26>
 800f7f0:	4a09      	ldr	r2, [pc, #36]	@ (800f818 <enq_lock+0x40>)
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	011b      	lsls	r3, r3, #4
 800f7f6:	4413      	add	r3, r2
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d1f2      	bne.n	800f7e4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	2b02      	cmp	r3, #2
 800f802:	bf14      	ite	ne
 800f804:	2301      	movne	r3, #1
 800f806:	2300      	moveq	r3, #0
 800f808:	b2db      	uxtb	r3, r3
}
 800f80a:	4618      	mov	r0, r3
 800f80c:	370c      	adds	r7, #12
 800f80e:	46bd      	mov	sp, r7
 800f810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f814:	4770      	bx	lr
 800f816:	bf00      	nop
 800f818:	240029f0 	.word	0x240029f0

0800f81c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f81c:	b480      	push	{r7}
 800f81e:	b085      	sub	sp, #20
 800f820:	af00      	add	r7, sp, #0
 800f822:	6078      	str	r0, [r7, #4]
 800f824:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f826:	2300      	movs	r3, #0
 800f828:	60fb      	str	r3, [r7, #12]
 800f82a:	e01f      	b.n	800f86c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800f82c:	4a41      	ldr	r2, [pc, #260]	@ (800f934 <inc_lock+0x118>)
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	011b      	lsls	r3, r3, #4
 800f832:	4413      	add	r3, r2
 800f834:	681a      	ldr	r2, [r3, #0]
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	429a      	cmp	r2, r3
 800f83c:	d113      	bne.n	800f866 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800f83e:	4a3d      	ldr	r2, [pc, #244]	@ (800f934 <inc_lock+0x118>)
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	011b      	lsls	r3, r3, #4
 800f844:	4413      	add	r3, r2
 800f846:	3304      	adds	r3, #4
 800f848:	681a      	ldr	r2, [r3, #0]
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800f84e:	429a      	cmp	r2, r3
 800f850:	d109      	bne.n	800f866 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800f852:	4a38      	ldr	r2, [pc, #224]	@ (800f934 <inc_lock+0x118>)
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	011b      	lsls	r3, r3, #4
 800f858:	4413      	add	r3, r2
 800f85a:	3308      	adds	r3, #8
 800f85c:	681a      	ldr	r2, [r3, #0]
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800f862:	429a      	cmp	r2, r3
 800f864:	d006      	beq.n	800f874 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	3301      	adds	r3, #1
 800f86a:	60fb      	str	r3, [r7, #12]
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	2b01      	cmp	r3, #1
 800f870:	d9dc      	bls.n	800f82c <inc_lock+0x10>
 800f872:	e000      	b.n	800f876 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800f874:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	2b02      	cmp	r3, #2
 800f87a:	d132      	bne.n	800f8e2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f87c:	2300      	movs	r3, #0
 800f87e:	60fb      	str	r3, [r7, #12]
 800f880:	e002      	b.n	800f888 <inc_lock+0x6c>
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	3301      	adds	r3, #1
 800f886:	60fb      	str	r3, [r7, #12]
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	2b01      	cmp	r3, #1
 800f88c:	d806      	bhi.n	800f89c <inc_lock+0x80>
 800f88e:	4a29      	ldr	r2, [pc, #164]	@ (800f934 <inc_lock+0x118>)
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	011b      	lsls	r3, r3, #4
 800f894:	4413      	add	r3, r2
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d1f2      	bne.n	800f882 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	2b02      	cmp	r3, #2
 800f8a0:	d101      	bne.n	800f8a6 <inc_lock+0x8a>
 800f8a2:	2300      	movs	r3, #0
 800f8a4:	e040      	b.n	800f928 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	681a      	ldr	r2, [r3, #0]
 800f8aa:	4922      	ldr	r1, [pc, #136]	@ (800f934 <inc_lock+0x118>)
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	011b      	lsls	r3, r3, #4
 800f8b0:	440b      	add	r3, r1
 800f8b2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	689a      	ldr	r2, [r3, #8]
 800f8b8:	491e      	ldr	r1, [pc, #120]	@ (800f934 <inc_lock+0x118>)
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	011b      	lsls	r3, r3, #4
 800f8be:	440b      	add	r3, r1
 800f8c0:	3304      	adds	r3, #4
 800f8c2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	695a      	ldr	r2, [r3, #20]
 800f8c8:	491a      	ldr	r1, [pc, #104]	@ (800f934 <inc_lock+0x118>)
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	011b      	lsls	r3, r3, #4
 800f8ce:	440b      	add	r3, r1
 800f8d0:	3308      	adds	r3, #8
 800f8d2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800f8d4:	4a17      	ldr	r2, [pc, #92]	@ (800f934 <inc_lock+0x118>)
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	011b      	lsls	r3, r3, #4
 800f8da:	4413      	add	r3, r2
 800f8dc:	330c      	adds	r3, #12
 800f8de:	2200      	movs	r2, #0
 800f8e0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800f8e2:	683b      	ldr	r3, [r7, #0]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d009      	beq.n	800f8fc <inc_lock+0xe0>
 800f8e8:	4a12      	ldr	r2, [pc, #72]	@ (800f934 <inc_lock+0x118>)
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	011b      	lsls	r3, r3, #4
 800f8ee:	4413      	add	r3, r2
 800f8f0:	330c      	adds	r3, #12
 800f8f2:	881b      	ldrh	r3, [r3, #0]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d001      	beq.n	800f8fc <inc_lock+0xe0>
 800f8f8:	2300      	movs	r3, #0
 800f8fa:	e015      	b.n	800f928 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800f8fc:	683b      	ldr	r3, [r7, #0]
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d108      	bne.n	800f914 <inc_lock+0xf8>
 800f902:	4a0c      	ldr	r2, [pc, #48]	@ (800f934 <inc_lock+0x118>)
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	011b      	lsls	r3, r3, #4
 800f908:	4413      	add	r3, r2
 800f90a:	330c      	adds	r3, #12
 800f90c:	881b      	ldrh	r3, [r3, #0]
 800f90e:	3301      	adds	r3, #1
 800f910:	b29a      	uxth	r2, r3
 800f912:	e001      	b.n	800f918 <inc_lock+0xfc>
 800f914:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800f918:	4906      	ldr	r1, [pc, #24]	@ (800f934 <inc_lock+0x118>)
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	011b      	lsls	r3, r3, #4
 800f91e:	440b      	add	r3, r1
 800f920:	330c      	adds	r3, #12
 800f922:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	3301      	adds	r3, #1
}
 800f928:	4618      	mov	r0, r3
 800f92a:	3714      	adds	r7, #20
 800f92c:	46bd      	mov	sp, r7
 800f92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f932:	4770      	bx	lr
 800f934:	240029f0 	.word	0x240029f0

0800f938 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800f938:	b480      	push	{r7}
 800f93a:	b085      	sub	sp, #20
 800f93c:	af00      	add	r7, sp, #0
 800f93e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	3b01      	subs	r3, #1
 800f944:	607b      	str	r3, [r7, #4]
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	2b01      	cmp	r3, #1
 800f94a:	d825      	bhi.n	800f998 <dec_lock+0x60>
		n = Files[i].ctr;
 800f94c:	4a17      	ldr	r2, [pc, #92]	@ (800f9ac <dec_lock+0x74>)
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	011b      	lsls	r3, r3, #4
 800f952:	4413      	add	r3, r2
 800f954:	330c      	adds	r3, #12
 800f956:	881b      	ldrh	r3, [r3, #0]
 800f958:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800f95a:	89fb      	ldrh	r3, [r7, #14]
 800f95c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f960:	d101      	bne.n	800f966 <dec_lock+0x2e>
 800f962:	2300      	movs	r3, #0
 800f964:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800f966:	89fb      	ldrh	r3, [r7, #14]
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d002      	beq.n	800f972 <dec_lock+0x3a>
 800f96c:	89fb      	ldrh	r3, [r7, #14]
 800f96e:	3b01      	subs	r3, #1
 800f970:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800f972:	4a0e      	ldr	r2, [pc, #56]	@ (800f9ac <dec_lock+0x74>)
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	011b      	lsls	r3, r3, #4
 800f978:	4413      	add	r3, r2
 800f97a:	330c      	adds	r3, #12
 800f97c:	89fa      	ldrh	r2, [r7, #14]
 800f97e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800f980:	89fb      	ldrh	r3, [r7, #14]
 800f982:	2b00      	cmp	r3, #0
 800f984:	d105      	bne.n	800f992 <dec_lock+0x5a>
 800f986:	4a09      	ldr	r2, [pc, #36]	@ (800f9ac <dec_lock+0x74>)
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	011b      	lsls	r3, r3, #4
 800f98c:	4413      	add	r3, r2
 800f98e:	2200      	movs	r2, #0
 800f990:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800f992:	2300      	movs	r3, #0
 800f994:	737b      	strb	r3, [r7, #13]
 800f996:	e001      	b.n	800f99c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800f998:	2302      	movs	r3, #2
 800f99a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800f99c:	7b7b      	ldrb	r3, [r7, #13]
}
 800f99e:	4618      	mov	r0, r3
 800f9a0:	3714      	adds	r7, #20
 800f9a2:	46bd      	mov	sp, r7
 800f9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a8:	4770      	bx	lr
 800f9aa:	bf00      	nop
 800f9ac:	240029f0 	.word	0x240029f0

0800f9b0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800f9b0:	b480      	push	{r7}
 800f9b2:	b085      	sub	sp, #20
 800f9b4:	af00      	add	r7, sp, #0
 800f9b6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800f9b8:	2300      	movs	r3, #0
 800f9ba:	60fb      	str	r3, [r7, #12]
 800f9bc:	e010      	b.n	800f9e0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f9be:	4a0d      	ldr	r2, [pc, #52]	@ (800f9f4 <clear_lock+0x44>)
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	011b      	lsls	r3, r3, #4
 800f9c4:	4413      	add	r3, r2
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	687a      	ldr	r2, [r7, #4]
 800f9ca:	429a      	cmp	r2, r3
 800f9cc:	d105      	bne.n	800f9da <clear_lock+0x2a>
 800f9ce:	4a09      	ldr	r2, [pc, #36]	@ (800f9f4 <clear_lock+0x44>)
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	011b      	lsls	r3, r3, #4
 800f9d4:	4413      	add	r3, r2
 800f9d6:	2200      	movs	r2, #0
 800f9d8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	3301      	adds	r3, #1
 800f9de:	60fb      	str	r3, [r7, #12]
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	2b01      	cmp	r3, #1
 800f9e4:	d9eb      	bls.n	800f9be <clear_lock+0xe>
	}
}
 800f9e6:	bf00      	nop
 800f9e8:	bf00      	nop
 800f9ea:	3714      	adds	r7, #20
 800f9ec:	46bd      	mov	sp, r7
 800f9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f2:	4770      	bx	lr
 800f9f4:	240029f0 	.word	0x240029f0

0800f9f8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800f9f8:	b580      	push	{r7, lr}
 800f9fa:	b086      	sub	sp, #24
 800f9fc:	af00      	add	r7, sp, #0
 800f9fe:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800fa00:	2300      	movs	r3, #0
 800fa02:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	78db      	ldrb	r3, [r3, #3]
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d034      	beq.n	800fa76 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa10:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	7858      	ldrb	r0, [r3, #1]
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800fa1c:	2301      	movs	r3, #1
 800fa1e:	697a      	ldr	r2, [r7, #20]
 800fa20:	f7ff fd40 	bl	800f4a4 <disk_write>
 800fa24:	4603      	mov	r3, r0
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d002      	beq.n	800fa30 <sync_window+0x38>
			res = FR_DISK_ERR;
 800fa2a:	2301      	movs	r3, #1
 800fa2c:	73fb      	strb	r3, [r7, #15]
 800fa2e:	e022      	b.n	800fa76 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	2200      	movs	r2, #0
 800fa34:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa3a:	697a      	ldr	r2, [r7, #20]
 800fa3c:	1ad2      	subs	r2, r2, r3
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fa42:	429a      	cmp	r2, r3
 800fa44:	d217      	bcs.n	800fa76 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	789b      	ldrb	r3, [r3, #2]
 800fa4a:	613b      	str	r3, [r7, #16]
 800fa4c:	e010      	b.n	800fa70 <sync_window+0x78>
					wsect += fs->fsize;
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fa52:	697a      	ldr	r2, [r7, #20]
 800fa54:	4413      	add	r3, r2
 800fa56:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	7858      	ldrb	r0, [r3, #1]
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800fa62:	2301      	movs	r3, #1
 800fa64:	697a      	ldr	r2, [r7, #20]
 800fa66:	f7ff fd1d 	bl	800f4a4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800fa6a:	693b      	ldr	r3, [r7, #16]
 800fa6c:	3b01      	subs	r3, #1
 800fa6e:	613b      	str	r3, [r7, #16]
 800fa70:	693b      	ldr	r3, [r7, #16]
 800fa72:	2b01      	cmp	r3, #1
 800fa74:	d8eb      	bhi.n	800fa4e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800fa76:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa78:	4618      	mov	r0, r3
 800fa7a:	3718      	adds	r7, #24
 800fa7c:	46bd      	mov	sp, r7
 800fa7e:	bd80      	pop	{r7, pc}

0800fa80 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800fa80:	b580      	push	{r7, lr}
 800fa82:	b084      	sub	sp, #16
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	6078      	str	r0, [r7, #4]
 800fa88:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800fa8a:	2300      	movs	r3, #0
 800fa8c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa92:	683a      	ldr	r2, [r7, #0]
 800fa94:	429a      	cmp	r2, r3
 800fa96:	d01b      	beq.n	800fad0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800fa98:	6878      	ldr	r0, [r7, #4]
 800fa9a:	f7ff ffad 	bl	800f9f8 <sync_window>
 800fa9e:	4603      	mov	r3, r0
 800faa0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800faa2:	7bfb      	ldrb	r3, [r7, #15]
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d113      	bne.n	800fad0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	7858      	ldrb	r0, [r3, #1]
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800fab2:	2301      	movs	r3, #1
 800fab4:	683a      	ldr	r2, [r7, #0]
 800fab6:	f7ff fcd5 	bl	800f464 <disk_read>
 800faba:	4603      	mov	r3, r0
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d004      	beq.n	800faca <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800fac0:	f04f 33ff 	mov.w	r3, #4294967295
 800fac4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800fac6:	2301      	movs	r3, #1
 800fac8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	683a      	ldr	r2, [r7, #0]
 800face:	639a      	str	r2, [r3, #56]	@ 0x38
		}
	}
	return res;
 800fad0:	7bfb      	ldrb	r3, [r7, #15]
}
 800fad2:	4618      	mov	r0, r3
 800fad4:	3710      	adds	r7, #16
 800fad6:	46bd      	mov	sp, r7
 800fad8:	bd80      	pop	{r7, pc}
	...

0800fadc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800fadc:	b580      	push	{r7, lr}
 800fade:	b084      	sub	sp, #16
 800fae0:	af00      	add	r7, sp, #0
 800fae2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800fae4:	6878      	ldr	r0, [r7, #4]
 800fae6:	f7ff ff87 	bl	800f9f8 <sync_window>
 800faea:	4603      	mov	r3, r0
 800faec:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800faee:	7bfb      	ldrb	r3, [r7, #15]
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d159      	bne.n	800fba8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	781b      	ldrb	r3, [r3, #0]
 800faf8:	2b03      	cmp	r3, #3
 800fafa:	d149      	bne.n	800fb90 <sync_fs+0xb4>
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	791b      	ldrb	r3, [r3, #4]
 800fb00:	2b01      	cmp	r3, #1
 800fb02:	d145      	bne.n	800fb90 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	899b      	ldrh	r3, [r3, #12]
 800fb0e:	461a      	mov	r2, r3
 800fb10:	2100      	movs	r1, #0
 800fb12:	f7ff fda8 	bl	800f666 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	333c      	adds	r3, #60	@ 0x3c
 800fb1a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800fb1e:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800fb22:	4618      	mov	r0, r3
 800fb24:	f7ff fd37 	bl	800f596 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	333c      	adds	r3, #60	@ 0x3c
 800fb2c:	4921      	ldr	r1, [pc, #132]	@ (800fbb4 <sync_fs+0xd8>)
 800fb2e:	4618      	mov	r0, r3
 800fb30:	f7ff fd4c 	bl	800f5cc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	333c      	adds	r3, #60	@ 0x3c
 800fb38:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800fb3c:	491e      	ldr	r1, [pc, #120]	@ (800fbb8 <sync_fs+0xdc>)
 800fb3e:	4618      	mov	r0, r3
 800fb40:	f7ff fd44 	bl	800f5cc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	333c      	adds	r3, #60	@ 0x3c
 800fb48:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	699b      	ldr	r3, [r3, #24]
 800fb50:	4619      	mov	r1, r3
 800fb52:	4610      	mov	r0, r2
 800fb54:	f7ff fd3a 	bl	800f5cc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	333c      	adds	r3, #60	@ 0x3c
 800fb5c:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	695b      	ldr	r3, [r3, #20]
 800fb64:	4619      	mov	r1, r3
 800fb66:	4610      	mov	r0, r2
 800fb68:	f7ff fd30 	bl	800f5cc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fb70:	1c5a      	adds	r2, r3, #1
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	639a      	str	r2, [r3, #56]	@ 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	7858      	ldrb	r0, [r3, #1]
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fb84:	2301      	movs	r3, #1
 800fb86:	f7ff fc8d 	bl	800f4a4 <disk_write>
			fs->fsi_flag = 0;
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	2200      	movs	r2, #0
 800fb8e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	785b      	ldrb	r3, [r3, #1]
 800fb94:	2200      	movs	r2, #0
 800fb96:	2100      	movs	r1, #0
 800fb98:	4618      	mov	r0, r3
 800fb9a:	f7ff fca3 	bl	800f4e4 <disk_ioctl>
 800fb9e:	4603      	mov	r3, r0
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d001      	beq.n	800fba8 <sync_fs+0xcc>
 800fba4:	2301      	movs	r3, #1
 800fba6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800fba8:	7bfb      	ldrb	r3, [r7, #15]
}
 800fbaa:	4618      	mov	r0, r3
 800fbac:	3710      	adds	r7, #16
 800fbae:	46bd      	mov	sp, r7
 800fbb0:	bd80      	pop	{r7, pc}
 800fbb2:	bf00      	nop
 800fbb4:	41615252 	.word	0x41615252
 800fbb8:	61417272 	.word	0x61417272

0800fbbc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800fbbc:	b480      	push	{r7}
 800fbbe:	b083      	sub	sp, #12
 800fbc0:	af00      	add	r7, sp, #0
 800fbc2:	6078      	str	r0, [r7, #4]
 800fbc4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800fbc6:	683b      	ldr	r3, [r7, #0]
 800fbc8:	3b02      	subs	r3, #2
 800fbca:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	6a1b      	ldr	r3, [r3, #32]
 800fbd0:	3b02      	subs	r3, #2
 800fbd2:	683a      	ldr	r2, [r7, #0]
 800fbd4:	429a      	cmp	r2, r3
 800fbd6:	d301      	bcc.n	800fbdc <clust2sect+0x20>
 800fbd8:	2300      	movs	r3, #0
 800fbda:	e008      	b.n	800fbee <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	895b      	ldrh	r3, [r3, #10]
 800fbe0:	461a      	mov	r2, r3
 800fbe2:	683b      	ldr	r3, [r7, #0]
 800fbe4:	fb03 f202 	mul.w	r2, r3, r2
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fbec:	4413      	add	r3, r2
}
 800fbee:	4618      	mov	r0, r3
 800fbf0:	370c      	adds	r7, #12
 800fbf2:	46bd      	mov	sp, r7
 800fbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf8:	4770      	bx	lr

0800fbfa <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800fbfa:	b580      	push	{r7, lr}
 800fbfc:	b086      	sub	sp, #24
 800fbfe:	af00      	add	r7, sp, #0
 800fc00:	6078      	str	r0, [r7, #4]
 800fc02:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800fc0a:	683b      	ldr	r3, [r7, #0]
 800fc0c:	2b01      	cmp	r3, #1
 800fc0e:	d904      	bls.n	800fc1a <get_fat+0x20>
 800fc10:	693b      	ldr	r3, [r7, #16]
 800fc12:	6a1b      	ldr	r3, [r3, #32]
 800fc14:	683a      	ldr	r2, [r7, #0]
 800fc16:	429a      	cmp	r2, r3
 800fc18:	d302      	bcc.n	800fc20 <get_fat+0x26>
		val = 1;	/* Internal error */
 800fc1a:	2301      	movs	r3, #1
 800fc1c:	617b      	str	r3, [r7, #20]
 800fc1e:	e0ba      	b.n	800fd96 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800fc20:	f04f 33ff 	mov.w	r3, #4294967295
 800fc24:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800fc26:	693b      	ldr	r3, [r7, #16]
 800fc28:	781b      	ldrb	r3, [r3, #0]
 800fc2a:	2b03      	cmp	r3, #3
 800fc2c:	f000 8082 	beq.w	800fd34 <get_fat+0x13a>
 800fc30:	2b03      	cmp	r3, #3
 800fc32:	f300 80a6 	bgt.w	800fd82 <get_fat+0x188>
 800fc36:	2b01      	cmp	r3, #1
 800fc38:	d002      	beq.n	800fc40 <get_fat+0x46>
 800fc3a:	2b02      	cmp	r3, #2
 800fc3c:	d055      	beq.n	800fcea <get_fat+0xf0>
 800fc3e:	e0a0      	b.n	800fd82 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800fc40:	683b      	ldr	r3, [r7, #0]
 800fc42:	60fb      	str	r3, [r7, #12]
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	085b      	lsrs	r3, r3, #1
 800fc48:	68fa      	ldr	r2, [r7, #12]
 800fc4a:	4413      	add	r3, r2
 800fc4c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fc4e:	693b      	ldr	r3, [r7, #16]
 800fc50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fc52:	693b      	ldr	r3, [r7, #16]
 800fc54:	899b      	ldrh	r3, [r3, #12]
 800fc56:	4619      	mov	r1, r3
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	fbb3 f3f1 	udiv	r3, r3, r1
 800fc5e:	4413      	add	r3, r2
 800fc60:	4619      	mov	r1, r3
 800fc62:	6938      	ldr	r0, [r7, #16]
 800fc64:	f7ff ff0c 	bl	800fa80 <move_window>
 800fc68:	4603      	mov	r3, r0
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	f040 808c 	bne.w	800fd88 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	1c5a      	adds	r2, r3, #1
 800fc74:	60fa      	str	r2, [r7, #12]
 800fc76:	693a      	ldr	r2, [r7, #16]
 800fc78:	8992      	ldrh	r2, [r2, #12]
 800fc7a:	fbb3 f1f2 	udiv	r1, r3, r2
 800fc7e:	fb01 f202 	mul.w	r2, r1, r2
 800fc82:	1a9b      	subs	r3, r3, r2
 800fc84:	693a      	ldr	r2, [r7, #16]
 800fc86:	4413      	add	r3, r2
 800fc88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fc8c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fc8e:	693b      	ldr	r3, [r7, #16]
 800fc90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fc92:	693b      	ldr	r3, [r7, #16]
 800fc94:	899b      	ldrh	r3, [r3, #12]
 800fc96:	4619      	mov	r1, r3
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	fbb3 f3f1 	udiv	r3, r3, r1
 800fc9e:	4413      	add	r3, r2
 800fca0:	4619      	mov	r1, r3
 800fca2:	6938      	ldr	r0, [r7, #16]
 800fca4:	f7ff feec 	bl	800fa80 <move_window>
 800fca8:	4603      	mov	r3, r0
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d16e      	bne.n	800fd8c <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 800fcae:	693b      	ldr	r3, [r7, #16]
 800fcb0:	899b      	ldrh	r3, [r3, #12]
 800fcb2:	461a      	mov	r2, r3
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	fbb3 f1f2 	udiv	r1, r3, r2
 800fcba:	fb01 f202 	mul.w	r2, r1, r2
 800fcbe:	1a9b      	subs	r3, r3, r2
 800fcc0:	693a      	ldr	r2, [r7, #16]
 800fcc2:	4413      	add	r3, r2
 800fcc4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fcc8:	021b      	lsls	r3, r3, #8
 800fcca:	68ba      	ldr	r2, [r7, #8]
 800fccc:	4313      	orrs	r3, r2
 800fcce:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800fcd0:	683b      	ldr	r3, [r7, #0]
 800fcd2:	f003 0301 	and.w	r3, r3, #1
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d002      	beq.n	800fce0 <get_fat+0xe6>
 800fcda:	68bb      	ldr	r3, [r7, #8]
 800fcdc:	091b      	lsrs	r3, r3, #4
 800fcde:	e002      	b.n	800fce6 <get_fat+0xec>
 800fce0:	68bb      	ldr	r3, [r7, #8]
 800fce2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fce6:	617b      	str	r3, [r7, #20]
			break;
 800fce8:	e055      	b.n	800fd96 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800fcea:	693b      	ldr	r3, [r7, #16]
 800fcec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fcee:	693b      	ldr	r3, [r7, #16]
 800fcf0:	899b      	ldrh	r3, [r3, #12]
 800fcf2:	085b      	lsrs	r3, r3, #1
 800fcf4:	b29b      	uxth	r3, r3
 800fcf6:	4619      	mov	r1, r3
 800fcf8:	683b      	ldr	r3, [r7, #0]
 800fcfa:	fbb3 f3f1 	udiv	r3, r3, r1
 800fcfe:	4413      	add	r3, r2
 800fd00:	4619      	mov	r1, r3
 800fd02:	6938      	ldr	r0, [r7, #16]
 800fd04:	f7ff febc 	bl	800fa80 <move_window>
 800fd08:	4603      	mov	r3, r0
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d140      	bne.n	800fd90 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800fd0e:	693b      	ldr	r3, [r7, #16]
 800fd10:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800fd14:	683b      	ldr	r3, [r7, #0]
 800fd16:	005b      	lsls	r3, r3, #1
 800fd18:	693a      	ldr	r2, [r7, #16]
 800fd1a:	8992      	ldrh	r2, [r2, #12]
 800fd1c:	fbb3 f0f2 	udiv	r0, r3, r2
 800fd20:	fb00 f202 	mul.w	r2, r0, r2
 800fd24:	1a9b      	subs	r3, r3, r2
 800fd26:	440b      	add	r3, r1
 800fd28:	4618      	mov	r0, r3
 800fd2a:	f7ff fbf9 	bl	800f520 <ld_word>
 800fd2e:	4603      	mov	r3, r0
 800fd30:	617b      	str	r3, [r7, #20]
			break;
 800fd32:	e030      	b.n	800fd96 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800fd34:	693b      	ldr	r3, [r7, #16]
 800fd36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fd38:	693b      	ldr	r3, [r7, #16]
 800fd3a:	899b      	ldrh	r3, [r3, #12]
 800fd3c:	089b      	lsrs	r3, r3, #2
 800fd3e:	b29b      	uxth	r3, r3
 800fd40:	4619      	mov	r1, r3
 800fd42:	683b      	ldr	r3, [r7, #0]
 800fd44:	fbb3 f3f1 	udiv	r3, r3, r1
 800fd48:	4413      	add	r3, r2
 800fd4a:	4619      	mov	r1, r3
 800fd4c:	6938      	ldr	r0, [r7, #16]
 800fd4e:	f7ff fe97 	bl	800fa80 <move_window>
 800fd52:	4603      	mov	r3, r0
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d11d      	bne.n	800fd94 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800fd58:	693b      	ldr	r3, [r7, #16]
 800fd5a:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800fd5e:	683b      	ldr	r3, [r7, #0]
 800fd60:	009b      	lsls	r3, r3, #2
 800fd62:	693a      	ldr	r2, [r7, #16]
 800fd64:	8992      	ldrh	r2, [r2, #12]
 800fd66:	fbb3 f0f2 	udiv	r0, r3, r2
 800fd6a:	fb00 f202 	mul.w	r2, r0, r2
 800fd6e:	1a9b      	subs	r3, r3, r2
 800fd70:	440b      	add	r3, r1
 800fd72:	4618      	mov	r0, r3
 800fd74:	f7ff fbec 	bl	800f550 <ld_dword>
 800fd78:	4603      	mov	r3, r0
 800fd7a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800fd7e:	617b      	str	r3, [r7, #20]
			break;
 800fd80:	e009      	b.n	800fd96 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800fd82:	2301      	movs	r3, #1
 800fd84:	617b      	str	r3, [r7, #20]
 800fd86:	e006      	b.n	800fd96 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fd88:	bf00      	nop
 800fd8a:	e004      	b.n	800fd96 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fd8c:	bf00      	nop
 800fd8e:	e002      	b.n	800fd96 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800fd90:	bf00      	nop
 800fd92:	e000      	b.n	800fd96 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800fd94:	bf00      	nop
		}
	}

	return val;
 800fd96:	697b      	ldr	r3, [r7, #20]
}
 800fd98:	4618      	mov	r0, r3
 800fd9a:	3718      	adds	r7, #24
 800fd9c:	46bd      	mov	sp, r7
 800fd9e:	bd80      	pop	{r7, pc}

0800fda0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800fda0:	b590      	push	{r4, r7, lr}
 800fda2:	b089      	sub	sp, #36	@ 0x24
 800fda4:	af00      	add	r7, sp, #0
 800fda6:	60f8      	str	r0, [r7, #12]
 800fda8:	60b9      	str	r1, [r7, #8]
 800fdaa:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800fdac:	2302      	movs	r3, #2
 800fdae:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800fdb0:	68bb      	ldr	r3, [r7, #8]
 800fdb2:	2b01      	cmp	r3, #1
 800fdb4:	f240 8109 	bls.w	800ffca <put_fat+0x22a>
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	6a1b      	ldr	r3, [r3, #32]
 800fdbc:	68ba      	ldr	r2, [r7, #8]
 800fdbe:	429a      	cmp	r2, r3
 800fdc0:	f080 8103 	bcs.w	800ffca <put_fat+0x22a>
		switch (fs->fs_type) {
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	781b      	ldrb	r3, [r3, #0]
 800fdc8:	2b03      	cmp	r3, #3
 800fdca:	f000 80b6 	beq.w	800ff3a <put_fat+0x19a>
 800fdce:	2b03      	cmp	r3, #3
 800fdd0:	f300 80fb 	bgt.w	800ffca <put_fat+0x22a>
 800fdd4:	2b01      	cmp	r3, #1
 800fdd6:	d003      	beq.n	800fde0 <put_fat+0x40>
 800fdd8:	2b02      	cmp	r3, #2
 800fdda:	f000 8083 	beq.w	800fee4 <put_fat+0x144>
 800fdde:	e0f4      	b.n	800ffca <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800fde0:	68bb      	ldr	r3, [r7, #8]
 800fde2:	61bb      	str	r3, [r7, #24]
 800fde4:	69bb      	ldr	r3, [r7, #24]
 800fde6:	085b      	lsrs	r3, r3, #1
 800fde8:	69ba      	ldr	r2, [r7, #24]
 800fdea:	4413      	add	r3, r2
 800fdec:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	899b      	ldrh	r3, [r3, #12]
 800fdf6:	4619      	mov	r1, r3
 800fdf8:	69bb      	ldr	r3, [r7, #24]
 800fdfa:	fbb3 f3f1 	udiv	r3, r3, r1
 800fdfe:	4413      	add	r3, r2
 800fe00:	4619      	mov	r1, r3
 800fe02:	68f8      	ldr	r0, [r7, #12]
 800fe04:	f7ff fe3c 	bl	800fa80 <move_window>
 800fe08:	4603      	mov	r3, r0
 800fe0a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fe0c:	7ffb      	ldrb	r3, [r7, #31]
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	f040 80d4 	bne.w	800ffbc <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800fe1a:	69bb      	ldr	r3, [r7, #24]
 800fe1c:	1c5a      	adds	r2, r3, #1
 800fe1e:	61ba      	str	r2, [r7, #24]
 800fe20:	68fa      	ldr	r2, [r7, #12]
 800fe22:	8992      	ldrh	r2, [r2, #12]
 800fe24:	fbb3 f0f2 	udiv	r0, r3, r2
 800fe28:	fb00 f202 	mul.w	r2, r0, r2
 800fe2c:	1a9b      	subs	r3, r3, r2
 800fe2e:	440b      	add	r3, r1
 800fe30:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800fe32:	68bb      	ldr	r3, [r7, #8]
 800fe34:	f003 0301 	and.w	r3, r3, #1
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d00d      	beq.n	800fe58 <put_fat+0xb8>
 800fe3c:	697b      	ldr	r3, [r7, #20]
 800fe3e:	781b      	ldrb	r3, [r3, #0]
 800fe40:	b25b      	sxtb	r3, r3
 800fe42:	f003 030f 	and.w	r3, r3, #15
 800fe46:	b25a      	sxtb	r2, r3
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	b2db      	uxtb	r3, r3
 800fe4c:	011b      	lsls	r3, r3, #4
 800fe4e:	b25b      	sxtb	r3, r3
 800fe50:	4313      	orrs	r3, r2
 800fe52:	b25b      	sxtb	r3, r3
 800fe54:	b2db      	uxtb	r3, r3
 800fe56:	e001      	b.n	800fe5c <put_fat+0xbc>
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	b2db      	uxtb	r3, r3
 800fe5c:	697a      	ldr	r2, [r7, #20]
 800fe5e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	2201      	movs	r2, #1
 800fe64:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	899b      	ldrh	r3, [r3, #12]
 800fe6e:	4619      	mov	r1, r3
 800fe70:	69bb      	ldr	r3, [r7, #24]
 800fe72:	fbb3 f3f1 	udiv	r3, r3, r1
 800fe76:	4413      	add	r3, r2
 800fe78:	4619      	mov	r1, r3
 800fe7a:	68f8      	ldr	r0, [r7, #12]
 800fe7c:	f7ff fe00 	bl	800fa80 <move_window>
 800fe80:	4603      	mov	r3, r0
 800fe82:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fe84:	7ffb      	ldrb	r3, [r7, #31]
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	f040 809a 	bne.w	800ffc0 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	899b      	ldrh	r3, [r3, #12]
 800fe96:	461a      	mov	r2, r3
 800fe98:	69bb      	ldr	r3, [r7, #24]
 800fe9a:	fbb3 f0f2 	udiv	r0, r3, r2
 800fe9e:	fb00 f202 	mul.w	r2, r0, r2
 800fea2:	1a9b      	subs	r3, r3, r2
 800fea4:	440b      	add	r3, r1
 800fea6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800fea8:	68bb      	ldr	r3, [r7, #8]
 800feaa:	f003 0301 	and.w	r3, r3, #1
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d003      	beq.n	800feba <put_fat+0x11a>
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	091b      	lsrs	r3, r3, #4
 800feb6:	b2db      	uxtb	r3, r3
 800feb8:	e00e      	b.n	800fed8 <put_fat+0x138>
 800feba:	697b      	ldr	r3, [r7, #20]
 800febc:	781b      	ldrb	r3, [r3, #0]
 800febe:	b25b      	sxtb	r3, r3
 800fec0:	f023 030f 	bic.w	r3, r3, #15
 800fec4:	b25a      	sxtb	r2, r3
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	0a1b      	lsrs	r3, r3, #8
 800feca:	b25b      	sxtb	r3, r3
 800fecc:	f003 030f 	and.w	r3, r3, #15
 800fed0:	b25b      	sxtb	r3, r3
 800fed2:	4313      	orrs	r3, r2
 800fed4:	b25b      	sxtb	r3, r3
 800fed6:	b2db      	uxtb	r3, r3
 800fed8:	697a      	ldr	r2, [r7, #20]
 800feda:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	2201      	movs	r2, #1
 800fee0:	70da      	strb	r2, [r3, #3]
			break;
 800fee2:	e072      	b.n	800ffca <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	899b      	ldrh	r3, [r3, #12]
 800feec:	085b      	lsrs	r3, r3, #1
 800feee:	b29b      	uxth	r3, r3
 800fef0:	4619      	mov	r1, r3
 800fef2:	68bb      	ldr	r3, [r7, #8]
 800fef4:	fbb3 f3f1 	udiv	r3, r3, r1
 800fef8:	4413      	add	r3, r2
 800fefa:	4619      	mov	r1, r3
 800fefc:	68f8      	ldr	r0, [r7, #12]
 800fefe:	f7ff fdbf 	bl	800fa80 <move_window>
 800ff02:	4603      	mov	r3, r0
 800ff04:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ff06:	7ffb      	ldrb	r3, [r7, #31]
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d15b      	bne.n	800ffc4 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800ff12:	68bb      	ldr	r3, [r7, #8]
 800ff14:	005b      	lsls	r3, r3, #1
 800ff16:	68fa      	ldr	r2, [r7, #12]
 800ff18:	8992      	ldrh	r2, [r2, #12]
 800ff1a:	fbb3 f0f2 	udiv	r0, r3, r2
 800ff1e:	fb00 f202 	mul.w	r2, r0, r2
 800ff22:	1a9b      	subs	r3, r3, r2
 800ff24:	440b      	add	r3, r1
 800ff26:	687a      	ldr	r2, [r7, #4]
 800ff28:	b292      	uxth	r2, r2
 800ff2a:	4611      	mov	r1, r2
 800ff2c:	4618      	mov	r0, r3
 800ff2e:	f7ff fb32 	bl	800f596 <st_word>
			fs->wflag = 1;
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	2201      	movs	r2, #1
 800ff36:	70da      	strb	r2, [r3, #3]
			break;
 800ff38:	e047      	b.n	800ffca <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	899b      	ldrh	r3, [r3, #12]
 800ff42:	089b      	lsrs	r3, r3, #2
 800ff44:	b29b      	uxth	r3, r3
 800ff46:	4619      	mov	r1, r3
 800ff48:	68bb      	ldr	r3, [r7, #8]
 800ff4a:	fbb3 f3f1 	udiv	r3, r3, r1
 800ff4e:	4413      	add	r3, r2
 800ff50:	4619      	mov	r1, r3
 800ff52:	68f8      	ldr	r0, [r7, #12]
 800ff54:	f7ff fd94 	bl	800fa80 <move_window>
 800ff58:	4603      	mov	r3, r0
 800ff5a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ff5c:	7ffb      	ldrb	r3, [r7, #31]
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d132      	bne.n	800ffc8 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800ff6e:	68bb      	ldr	r3, [r7, #8]
 800ff70:	009b      	lsls	r3, r3, #2
 800ff72:	68fa      	ldr	r2, [r7, #12]
 800ff74:	8992      	ldrh	r2, [r2, #12]
 800ff76:	fbb3 f0f2 	udiv	r0, r3, r2
 800ff7a:	fb00 f202 	mul.w	r2, r0, r2
 800ff7e:	1a9b      	subs	r3, r3, r2
 800ff80:	440b      	add	r3, r1
 800ff82:	4618      	mov	r0, r3
 800ff84:	f7ff fae4 	bl	800f550 <ld_dword>
 800ff88:	4603      	mov	r3, r0
 800ff8a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800ff8e:	4323      	orrs	r3, r4
 800ff90:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800ff98:	68bb      	ldr	r3, [r7, #8]
 800ff9a:	009b      	lsls	r3, r3, #2
 800ff9c:	68fa      	ldr	r2, [r7, #12]
 800ff9e:	8992      	ldrh	r2, [r2, #12]
 800ffa0:	fbb3 f0f2 	udiv	r0, r3, r2
 800ffa4:	fb00 f202 	mul.w	r2, r0, r2
 800ffa8:	1a9b      	subs	r3, r3, r2
 800ffaa:	440b      	add	r3, r1
 800ffac:	6879      	ldr	r1, [r7, #4]
 800ffae:	4618      	mov	r0, r3
 800ffb0:	f7ff fb0c 	bl	800f5cc <st_dword>
			fs->wflag = 1;
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	2201      	movs	r2, #1
 800ffb8:	70da      	strb	r2, [r3, #3]
			break;
 800ffba:	e006      	b.n	800ffca <put_fat+0x22a>
			if (res != FR_OK) break;
 800ffbc:	bf00      	nop
 800ffbe:	e004      	b.n	800ffca <put_fat+0x22a>
			if (res != FR_OK) break;
 800ffc0:	bf00      	nop
 800ffc2:	e002      	b.n	800ffca <put_fat+0x22a>
			if (res != FR_OK) break;
 800ffc4:	bf00      	nop
 800ffc6:	e000      	b.n	800ffca <put_fat+0x22a>
			if (res != FR_OK) break;
 800ffc8:	bf00      	nop
		}
	}
	return res;
 800ffca:	7ffb      	ldrb	r3, [r7, #31]
}
 800ffcc:	4618      	mov	r0, r3
 800ffce:	3724      	adds	r7, #36	@ 0x24
 800ffd0:	46bd      	mov	sp, r7
 800ffd2:	bd90      	pop	{r4, r7, pc}

0800ffd4 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ffd4:	b580      	push	{r7, lr}
 800ffd6:	b088      	sub	sp, #32
 800ffd8:	af00      	add	r7, sp, #0
 800ffda:	60f8      	str	r0, [r7, #12]
 800ffdc:	60b9      	str	r1, [r7, #8]
 800ffde:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ffe0:	2300      	movs	r3, #0
 800ffe2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ffea:	68bb      	ldr	r3, [r7, #8]
 800ffec:	2b01      	cmp	r3, #1
 800ffee:	d904      	bls.n	800fffa <remove_chain+0x26>
 800fff0:	69bb      	ldr	r3, [r7, #24]
 800fff2:	6a1b      	ldr	r3, [r3, #32]
 800fff4:	68ba      	ldr	r2, [r7, #8]
 800fff6:	429a      	cmp	r2, r3
 800fff8:	d301      	bcc.n	800fffe <remove_chain+0x2a>
 800fffa:	2302      	movs	r3, #2
 800fffc:	e04b      	b.n	8010096 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	2b00      	cmp	r3, #0
 8010002:	d00c      	beq.n	801001e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8010004:	f04f 32ff 	mov.w	r2, #4294967295
 8010008:	6879      	ldr	r1, [r7, #4]
 801000a:	69b8      	ldr	r0, [r7, #24]
 801000c:	f7ff fec8 	bl	800fda0 <put_fat>
 8010010:	4603      	mov	r3, r0
 8010012:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8010014:	7ffb      	ldrb	r3, [r7, #31]
 8010016:	2b00      	cmp	r3, #0
 8010018:	d001      	beq.n	801001e <remove_chain+0x4a>
 801001a:	7ffb      	ldrb	r3, [r7, #31]
 801001c:	e03b      	b.n	8010096 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801001e:	68b9      	ldr	r1, [r7, #8]
 8010020:	68f8      	ldr	r0, [r7, #12]
 8010022:	f7ff fdea 	bl	800fbfa <get_fat>
 8010026:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8010028:	697b      	ldr	r3, [r7, #20]
 801002a:	2b00      	cmp	r3, #0
 801002c:	d031      	beq.n	8010092 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801002e:	697b      	ldr	r3, [r7, #20]
 8010030:	2b01      	cmp	r3, #1
 8010032:	d101      	bne.n	8010038 <remove_chain+0x64>
 8010034:	2302      	movs	r3, #2
 8010036:	e02e      	b.n	8010096 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8010038:	697b      	ldr	r3, [r7, #20]
 801003a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801003e:	d101      	bne.n	8010044 <remove_chain+0x70>
 8010040:	2301      	movs	r3, #1
 8010042:	e028      	b.n	8010096 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8010044:	2200      	movs	r2, #0
 8010046:	68b9      	ldr	r1, [r7, #8]
 8010048:	69b8      	ldr	r0, [r7, #24]
 801004a:	f7ff fea9 	bl	800fda0 <put_fat>
 801004e:	4603      	mov	r3, r0
 8010050:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8010052:	7ffb      	ldrb	r3, [r7, #31]
 8010054:	2b00      	cmp	r3, #0
 8010056:	d001      	beq.n	801005c <remove_chain+0x88>
 8010058:	7ffb      	ldrb	r3, [r7, #31]
 801005a:	e01c      	b.n	8010096 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801005c:	69bb      	ldr	r3, [r7, #24]
 801005e:	699a      	ldr	r2, [r3, #24]
 8010060:	69bb      	ldr	r3, [r7, #24]
 8010062:	6a1b      	ldr	r3, [r3, #32]
 8010064:	3b02      	subs	r3, #2
 8010066:	429a      	cmp	r2, r3
 8010068:	d20b      	bcs.n	8010082 <remove_chain+0xae>
			fs->free_clst++;
 801006a:	69bb      	ldr	r3, [r7, #24]
 801006c:	699b      	ldr	r3, [r3, #24]
 801006e:	1c5a      	adds	r2, r3, #1
 8010070:	69bb      	ldr	r3, [r7, #24]
 8010072:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8010074:	69bb      	ldr	r3, [r7, #24]
 8010076:	791b      	ldrb	r3, [r3, #4]
 8010078:	f043 0301 	orr.w	r3, r3, #1
 801007c:	b2da      	uxtb	r2, r3
 801007e:	69bb      	ldr	r3, [r7, #24]
 8010080:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8010082:	697b      	ldr	r3, [r7, #20]
 8010084:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8010086:	69bb      	ldr	r3, [r7, #24]
 8010088:	6a1b      	ldr	r3, [r3, #32]
 801008a:	68ba      	ldr	r2, [r7, #8]
 801008c:	429a      	cmp	r2, r3
 801008e:	d3c6      	bcc.n	801001e <remove_chain+0x4a>
 8010090:	e000      	b.n	8010094 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8010092:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8010094:	2300      	movs	r3, #0
}
 8010096:	4618      	mov	r0, r3
 8010098:	3720      	adds	r7, #32
 801009a:	46bd      	mov	sp, r7
 801009c:	bd80      	pop	{r7, pc}

0801009e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801009e:	b580      	push	{r7, lr}
 80100a0:	b088      	sub	sp, #32
 80100a2:	af00      	add	r7, sp, #0
 80100a4:	6078      	str	r0, [r7, #4]
 80100a6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80100ae:	683b      	ldr	r3, [r7, #0]
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d10d      	bne.n	80100d0 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80100b4:	693b      	ldr	r3, [r7, #16]
 80100b6:	695b      	ldr	r3, [r3, #20]
 80100b8:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80100ba:	69bb      	ldr	r3, [r7, #24]
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d004      	beq.n	80100ca <create_chain+0x2c>
 80100c0:	693b      	ldr	r3, [r7, #16]
 80100c2:	6a1b      	ldr	r3, [r3, #32]
 80100c4:	69ba      	ldr	r2, [r7, #24]
 80100c6:	429a      	cmp	r2, r3
 80100c8:	d31b      	bcc.n	8010102 <create_chain+0x64>
 80100ca:	2301      	movs	r3, #1
 80100cc:	61bb      	str	r3, [r7, #24]
 80100ce:	e018      	b.n	8010102 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80100d0:	6839      	ldr	r1, [r7, #0]
 80100d2:	6878      	ldr	r0, [r7, #4]
 80100d4:	f7ff fd91 	bl	800fbfa <get_fat>
 80100d8:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	2b01      	cmp	r3, #1
 80100de:	d801      	bhi.n	80100e4 <create_chain+0x46>
 80100e0:	2301      	movs	r3, #1
 80100e2:	e070      	b.n	80101c6 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100ea:	d101      	bne.n	80100f0 <create_chain+0x52>
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	e06a      	b.n	80101c6 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80100f0:	693b      	ldr	r3, [r7, #16]
 80100f2:	6a1b      	ldr	r3, [r3, #32]
 80100f4:	68fa      	ldr	r2, [r7, #12]
 80100f6:	429a      	cmp	r2, r3
 80100f8:	d201      	bcs.n	80100fe <create_chain+0x60>
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	e063      	b.n	80101c6 <create_chain+0x128>
		scl = clst;
 80100fe:	683b      	ldr	r3, [r7, #0]
 8010100:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8010102:	69bb      	ldr	r3, [r7, #24]
 8010104:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8010106:	69fb      	ldr	r3, [r7, #28]
 8010108:	3301      	adds	r3, #1
 801010a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801010c:	693b      	ldr	r3, [r7, #16]
 801010e:	6a1b      	ldr	r3, [r3, #32]
 8010110:	69fa      	ldr	r2, [r7, #28]
 8010112:	429a      	cmp	r2, r3
 8010114:	d307      	bcc.n	8010126 <create_chain+0x88>
				ncl = 2;
 8010116:	2302      	movs	r3, #2
 8010118:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801011a:	69fa      	ldr	r2, [r7, #28]
 801011c:	69bb      	ldr	r3, [r7, #24]
 801011e:	429a      	cmp	r2, r3
 8010120:	d901      	bls.n	8010126 <create_chain+0x88>
 8010122:	2300      	movs	r3, #0
 8010124:	e04f      	b.n	80101c6 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8010126:	69f9      	ldr	r1, [r7, #28]
 8010128:	6878      	ldr	r0, [r7, #4]
 801012a:	f7ff fd66 	bl	800fbfa <get_fat>
 801012e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	2b00      	cmp	r3, #0
 8010134:	d00e      	beq.n	8010154 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	2b01      	cmp	r3, #1
 801013a:	d003      	beq.n	8010144 <create_chain+0xa6>
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010142:	d101      	bne.n	8010148 <create_chain+0xaa>
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	e03e      	b.n	80101c6 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8010148:	69fa      	ldr	r2, [r7, #28]
 801014a:	69bb      	ldr	r3, [r7, #24]
 801014c:	429a      	cmp	r2, r3
 801014e:	d1da      	bne.n	8010106 <create_chain+0x68>
 8010150:	2300      	movs	r3, #0
 8010152:	e038      	b.n	80101c6 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8010154:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8010156:	f04f 32ff 	mov.w	r2, #4294967295
 801015a:	69f9      	ldr	r1, [r7, #28]
 801015c:	6938      	ldr	r0, [r7, #16]
 801015e:	f7ff fe1f 	bl	800fda0 <put_fat>
 8010162:	4603      	mov	r3, r0
 8010164:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8010166:	7dfb      	ldrb	r3, [r7, #23]
 8010168:	2b00      	cmp	r3, #0
 801016a:	d109      	bne.n	8010180 <create_chain+0xe2>
 801016c:	683b      	ldr	r3, [r7, #0]
 801016e:	2b00      	cmp	r3, #0
 8010170:	d006      	beq.n	8010180 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8010172:	69fa      	ldr	r2, [r7, #28]
 8010174:	6839      	ldr	r1, [r7, #0]
 8010176:	6938      	ldr	r0, [r7, #16]
 8010178:	f7ff fe12 	bl	800fda0 <put_fat>
 801017c:	4603      	mov	r3, r0
 801017e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8010180:	7dfb      	ldrb	r3, [r7, #23]
 8010182:	2b00      	cmp	r3, #0
 8010184:	d116      	bne.n	80101b4 <create_chain+0x116>
		fs->last_clst = ncl;
 8010186:	693b      	ldr	r3, [r7, #16]
 8010188:	69fa      	ldr	r2, [r7, #28]
 801018a:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801018c:	693b      	ldr	r3, [r7, #16]
 801018e:	699a      	ldr	r2, [r3, #24]
 8010190:	693b      	ldr	r3, [r7, #16]
 8010192:	6a1b      	ldr	r3, [r3, #32]
 8010194:	3b02      	subs	r3, #2
 8010196:	429a      	cmp	r2, r3
 8010198:	d804      	bhi.n	80101a4 <create_chain+0x106>
 801019a:	693b      	ldr	r3, [r7, #16]
 801019c:	699b      	ldr	r3, [r3, #24]
 801019e:	1e5a      	subs	r2, r3, #1
 80101a0:	693b      	ldr	r3, [r7, #16]
 80101a2:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80101a4:	693b      	ldr	r3, [r7, #16]
 80101a6:	791b      	ldrb	r3, [r3, #4]
 80101a8:	f043 0301 	orr.w	r3, r3, #1
 80101ac:	b2da      	uxtb	r2, r3
 80101ae:	693b      	ldr	r3, [r7, #16]
 80101b0:	711a      	strb	r2, [r3, #4]
 80101b2:	e007      	b.n	80101c4 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80101b4:	7dfb      	ldrb	r3, [r7, #23]
 80101b6:	2b01      	cmp	r3, #1
 80101b8:	d102      	bne.n	80101c0 <create_chain+0x122>
 80101ba:	f04f 33ff 	mov.w	r3, #4294967295
 80101be:	e000      	b.n	80101c2 <create_chain+0x124>
 80101c0:	2301      	movs	r3, #1
 80101c2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80101c4:	69fb      	ldr	r3, [r7, #28]
}
 80101c6:	4618      	mov	r0, r3
 80101c8:	3720      	adds	r7, #32
 80101ca:	46bd      	mov	sp, r7
 80101cc:	bd80      	pop	{r7, pc}

080101ce <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80101ce:	b480      	push	{r7}
 80101d0:	b087      	sub	sp, #28
 80101d2:	af00      	add	r7, sp, #0
 80101d4:	6078      	str	r0, [r7, #4]
 80101d6:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80101e2:	3304      	adds	r3, #4
 80101e4:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	899b      	ldrh	r3, [r3, #12]
 80101ea:	461a      	mov	r2, r3
 80101ec:	683b      	ldr	r3, [r7, #0]
 80101ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80101f2:	68fa      	ldr	r2, [r7, #12]
 80101f4:	8952      	ldrh	r2, [r2, #10]
 80101f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80101fa:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80101fc:	693b      	ldr	r3, [r7, #16]
 80101fe:	1d1a      	adds	r2, r3, #4
 8010200:	613a      	str	r2, [r7, #16]
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8010206:	68bb      	ldr	r3, [r7, #8]
 8010208:	2b00      	cmp	r3, #0
 801020a:	d101      	bne.n	8010210 <clmt_clust+0x42>
 801020c:	2300      	movs	r3, #0
 801020e:	e010      	b.n	8010232 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8010210:	697a      	ldr	r2, [r7, #20]
 8010212:	68bb      	ldr	r3, [r7, #8]
 8010214:	429a      	cmp	r2, r3
 8010216:	d307      	bcc.n	8010228 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8010218:	697a      	ldr	r2, [r7, #20]
 801021a:	68bb      	ldr	r3, [r7, #8]
 801021c:	1ad3      	subs	r3, r2, r3
 801021e:	617b      	str	r3, [r7, #20]
 8010220:	693b      	ldr	r3, [r7, #16]
 8010222:	3304      	adds	r3, #4
 8010224:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8010226:	e7e9      	b.n	80101fc <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8010228:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801022a:	693b      	ldr	r3, [r7, #16]
 801022c:	681a      	ldr	r2, [r3, #0]
 801022e:	697b      	ldr	r3, [r7, #20]
 8010230:	4413      	add	r3, r2
}
 8010232:	4618      	mov	r0, r3
 8010234:	371c      	adds	r7, #28
 8010236:	46bd      	mov	sp, r7
 8010238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801023c:	4770      	bx	lr

0801023e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801023e:	b580      	push	{r7, lr}
 8010240:	b086      	sub	sp, #24
 8010242:	af00      	add	r7, sp, #0
 8010244:	6078      	str	r0, [r7, #4]
 8010246:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801024e:	683b      	ldr	r3, [r7, #0]
 8010250:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8010254:	d204      	bcs.n	8010260 <dir_sdi+0x22>
 8010256:	683b      	ldr	r3, [r7, #0]
 8010258:	f003 031f 	and.w	r3, r3, #31
 801025c:	2b00      	cmp	r3, #0
 801025e:	d001      	beq.n	8010264 <dir_sdi+0x26>
		return FR_INT_ERR;
 8010260:	2302      	movs	r3, #2
 8010262:	e071      	b.n	8010348 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	683a      	ldr	r2, [r7, #0]
 8010268:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	689b      	ldr	r3, [r3, #8]
 801026e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8010270:	697b      	ldr	r3, [r7, #20]
 8010272:	2b00      	cmp	r3, #0
 8010274:	d106      	bne.n	8010284 <dir_sdi+0x46>
 8010276:	693b      	ldr	r3, [r7, #16]
 8010278:	781b      	ldrb	r3, [r3, #0]
 801027a:	2b02      	cmp	r3, #2
 801027c:	d902      	bls.n	8010284 <dir_sdi+0x46>
		clst = fs->dirbase;
 801027e:	693b      	ldr	r3, [r7, #16]
 8010280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010282:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8010284:	697b      	ldr	r3, [r7, #20]
 8010286:	2b00      	cmp	r3, #0
 8010288:	d10c      	bne.n	80102a4 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801028a:	683b      	ldr	r3, [r7, #0]
 801028c:	095b      	lsrs	r3, r3, #5
 801028e:	693a      	ldr	r2, [r7, #16]
 8010290:	8912      	ldrh	r2, [r2, #8]
 8010292:	4293      	cmp	r3, r2
 8010294:	d301      	bcc.n	801029a <dir_sdi+0x5c>
 8010296:	2302      	movs	r3, #2
 8010298:	e056      	b.n	8010348 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 801029a:	693b      	ldr	r3, [r7, #16]
 801029c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	61da      	str	r2, [r3, #28]
 80102a2:	e02d      	b.n	8010300 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80102a4:	693b      	ldr	r3, [r7, #16]
 80102a6:	895b      	ldrh	r3, [r3, #10]
 80102a8:	461a      	mov	r2, r3
 80102aa:	693b      	ldr	r3, [r7, #16]
 80102ac:	899b      	ldrh	r3, [r3, #12]
 80102ae:	fb02 f303 	mul.w	r3, r2, r3
 80102b2:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80102b4:	e019      	b.n	80102ea <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	6979      	ldr	r1, [r7, #20]
 80102ba:	4618      	mov	r0, r3
 80102bc:	f7ff fc9d 	bl	800fbfa <get_fat>
 80102c0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80102c2:	697b      	ldr	r3, [r7, #20]
 80102c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102c8:	d101      	bne.n	80102ce <dir_sdi+0x90>
 80102ca:	2301      	movs	r3, #1
 80102cc:	e03c      	b.n	8010348 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80102ce:	697b      	ldr	r3, [r7, #20]
 80102d0:	2b01      	cmp	r3, #1
 80102d2:	d904      	bls.n	80102de <dir_sdi+0xa0>
 80102d4:	693b      	ldr	r3, [r7, #16]
 80102d6:	6a1b      	ldr	r3, [r3, #32]
 80102d8:	697a      	ldr	r2, [r7, #20]
 80102da:	429a      	cmp	r2, r3
 80102dc:	d301      	bcc.n	80102e2 <dir_sdi+0xa4>
 80102de:	2302      	movs	r3, #2
 80102e0:	e032      	b.n	8010348 <dir_sdi+0x10a>
			ofs -= csz;
 80102e2:	683a      	ldr	r2, [r7, #0]
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	1ad3      	subs	r3, r2, r3
 80102e8:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80102ea:	683a      	ldr	r2, [r7, #0]
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	429a      	cmp	r2, r3
 80102f0:	d2e1      	bcs.n	80102b6 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80102f2:	6979      	ldr	r1, [r7, #20]
 80102f4:	6938      	ldr	r0, [r7, #16]
 80102f6:	f7ff fc61 	bl	800fbbc <clust2sect>
 80102fa:	4602      	mov	r2, r0
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	697a      	ldr	r2, [r7, #20]
 8010304:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	69db      	ldr	r3, [r3, #28]
 801030a:	2b00      	cmp	r3, #0
 801030c:	d101      	bne.n	8010312 <dir_sdi+0xd4>
 801030e:	2302      	movs	r3, #2
 8010310:	e01a      	b.n	8010348 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	69da      	ldr	r2, [r3, #28]
 8010316:	693b      	ldr	r3, [r7, #16]
 8010318:	899b      	ldrh	r3, [r3, #12]
 801031a:	4619      	mov	r1, r3
 801031c:	683b      	ldr	r3, [r7, #0]
 801031e:	fbb3 f3f1 	udiv	r3, r3, r1
 8010322:	441a      	add	r2, r3
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8010328:	693b      	ldr	r3, [r7, #16]
 801032a:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 801032e:	693b      	ldr	r3, [r7, #16]
 8010330:	899b      	ldrh	r3, [r3, #12]
 8010332:	461a      	mov	r2, r3
 8010334:	683b      	ldr	r3, [r7, #0]
 8010336:	fbb3 f0f2 	udiv	r0, r3, r2
 801033a:	fb00 f202 	mul.w	r2, r0, r2
 801033e:	1a9b      	subs	r3, r3, r2
 8010340:	18ca      	adds	r2, r1, r3
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8010346:	2300      	movs	r3, #0
}
 8010348:	4618      	mov	r0, r3
 801034a:	3718      	adds	r7, #24
 801034c:	46bd      	mov	sp, r7
 801034e:	bd80      	pop	{r7, pc}

08010350 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8010350:	b580      	push	{r7, lr}
 8010352:	b086      	sub	sp, #24
 8010354:	af00      	add	r7, sp, #0
 8010356:	6078      	str	r0, [r7, #4]
 8010358:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	695b      	ldr	r3, [r3, #20]
 8010364:	3320      	adds	r3, #32
 8010366:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	69db      	ldr	r3, [r3, #28]
 801036c:	2b00      	cmp	r3, #0
 801036e:	d003      	beq.n	8010378 <dir_next+0x28>
 8010370:	68bb      	ldr	r3, [r7, #8]
 8010372:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8010376:	d301      	bcc.n	801037c <dir_next+0x2c>
 8010378:	2304      	movs	r3, #4
 801037a:	e0bb      	b.n	80104f4 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801037c:	68fb      	ldr	r3, [r7, #12]
 801037e:	899b      	ldrh	r3, [r3, #12]
 8010380:	461a      	mov	r2, r3
 8010382:	68bb      	ldr	r3, [r7, #8]
 8010384:	fbb3 f1f2 	udiv	r1, r3, r2
 8010388:	fb01 f202 	mul.w	r2, r1, r2
 801038c:	1a9b      	subs	r3, r3, r2
 801038e:	2b00      	cmp	r3, #0
 8010390:	f040 809d 	bne.w	80104ce <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	69db      	ldr	r3, [r3, #28]
 8010398:	1c5a      	adds	r2, r3, #1
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	699b      	ldr	r3, [r3, #24]
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d10b      	bne.n	80103be <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80103a6:	68bb      	ldr	r3, [r7, #8]
 80103a8:	095b      	lsrs	r3, r3, #5
 80103aa:	68fa      	ldr	r2, [r7, #12]
 80103ac:	8912      	ldrh	r2, [r2, #8]
 80103ae:	4293      	cmp	r3, r2
 80103b0:	f0c0 808d 	bcc.w	80104ce <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	2200      	movs	r2, #0
 80103b8:	61da      	str	r2, [r3, #28]
 80103ba:	2304      	movs	r3, #4
 80103bc:	e09a      	b.n	80104f4 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80103be:	68fb      	ldr	r3, [r7, #12]
 80103c0:	899b      	ldrh	r3, [r3, #12]
 80103c2:	461a      	mov	r2, r3
 80103c4:	68bb      	ldr	r3, [r7, #8]
 80103c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80103ca:	68fa      	ldr	r2, [r7, #12]
 80103cc:	8952      	ldrh	r2, [r2, #10]
 80103ce:	3a01      	subs	r2, #1
 80103d0:	4013      	ands	r3, r2
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d17b      	bne.n	80104ce <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80103d6:	687a      	ldr	r2, [r7, #4]
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	699b      	ldr	r3, [r3, #24]
 80103dc:	4619      	mov	r1, r3
 80103de:	4610      	mov	r0, r2
 80103e0:	f7ff fc0b 	bl	800fbfa <get_fat>
 80103e4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80103e6:	697b      	ldr	r3, [r7, #20]
 80103e8:	2b01      	cmp	r3, #1
 80103ea:	d801      	bhi.n	80103f0 <dir_next+0xa0>
 80103ec:	2302      	movs	r3, #2
 80103ee:	e081      	b.n	80104f4 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80103f0:	697b      	ldr	r3, [r7, #20]
 80103f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103f6:	d101      	bne.n	80103fc <dir_next+0xac>
 80103f8:	2301      	movs	r3, #1
 80103fa:	e07b      	b.n	80104f4 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	6a1b      	ldr	r3, [r3, #32]
 8010400:	697a      	ldr	r2, [r7, #20]
 8010402:	429a      	cmp	r2, r3
 8010404:	d359      	bcc.n	80104ba <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8010406:	683b      	ldr	r3, [r7, #0]
 8010408:	2b00      	cmp	r3, #0
 801040a:	d104      	bne.n	8010416 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	2200      	movs	r2, #0
 8010410:	61da      	str	r2, [r3, #28]
 8010412:	2304      	movs	r3, #4
 8010414:	e06e      	b.n	80104f4 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8010416:	687a      	ldr	r2, [r7, #4]
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	699b      	ldr	r3, [r3, #24]
 801041c:	4619      	mov	r1, r3
 801041e:	4610      	mov	r0, r2
 8010420:	f7ff fe3d 	bl	801009e <create_chain>
 8010424:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8010426:	697b      	ldr	r3, [r7, #20]
 8010428:	2b00      	cmp	r3, #0
 801042a:	d101      	bne.n	8010430 <dir_next+0xe0>
 801042c:	2307      	movs	r3, #7
 801042e:	e061      	b.n	80104f4 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8010430:	697b      	ldr	r3, [r7, #20]
 8010432:	2b01      	cmp	r3, #1
 8010434:	d101      	bne.n	801043a <dir_next+0xea>
 8010436:	2302      	movs	r3, #2
 8010438:	e05c      	b.n	80104f4 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801043a:	697b      	ldr	r3, [r7, #20]
 801043c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010440:	d101      	bne.n	8010446 <dir_next+0xf6>
 8010442:	2301      	movs	r3, #1
 8010444:	e056      	b.n	80104f4 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8010446:	68f8      	ldr	r0, [r7, #12]
 8010448:	f7ff fad6 	bl	800f9f8 <sync_window>
 801044c:	4603      	mov	r3, r0
 801044e:	2b00      	cmp	r3, #0
 8010450:	d001      	beq.n	8010456 <dir_next+0x106>
 8010452:	2301      	movs	r3, #1
 8010454:	e04e      	b.n	80104f4 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	899b      	ldrh	r3, [r3, #12]
 8010460:	461a      	mov	r2, r3
 8010462:	2100      	movs	r1, #0
 8010464:	f7ff f8ff 	bl	800f666 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010468:	2300      	movs	r3, #0
 801046a:	613b      	str	r3, [r7, #16]
 801046c:	6979      	ldr	r1, [r7, #20]
 801046e:	68f8      	ldr	r0, [r7, #12]
 8010470:	f7ff fba4 	bl	800fbbc <clust2sect>
 8010474:	4602      	mov	r2, r0
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	639a      	str	r2, [r3, #56]	@ 0x38
 801047a:	e012      	b.n	80104a2 <dir_next+0x152>
						fs->wflag = 1;
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	2201      	movs	r2, #1
 8010480:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8010482:	68f8      	ldr	r0, [r7, #12]
 8010484:	f7ff fab8 	bl	800f9f8 <sync_window>
 8010488:	4603      	mov	r3, r0
 801048a:	2b00      	cmp	r3, #0
 801048c:	d001      	beq.n	8010492 <dir_next+0x142>
 801048e:	2301      	movs	r3, #1
 8010490:	e030      	b.n	80104f4 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010492:	693b      	ldr	r3, [r7, #16]
 8010494:	3301      	adds	r3, #1
 8010496:	613b      	str	r3, [r7, #16]
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801049c:	1c5a      	adds	r2, r3, #1
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	639a      	str	r2, [r3, #56]	@ 0x38
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	895b      	ldrh	r3, [r3, #10]
 80104a6:	461a      	mov	r2, r3
 80104a8:	693b      	ldr	r3, [r7, #16]
 80104aa:	4293      	cmp	r3, r2
 80104ac:	d3e6      	bcc.n	801047c <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80104b2:	693b      	ldr	r3, [r7, #16]
 80104b4:	1ad2      	subs	r2, r2, r3
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	639a      	str	r2, [r3, #56]	@ 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	697a      	ldr	r2, [r7, #20]
 80104be:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80104c0:	6979      	ldr	r1, [r7, #20]
 80104c2:	68f8      	ldr	r0, [r7, #12]
 80104c4:	f7ff fb7a 	bl	800fbbc <clust2sect>
 80104c8:	4602      	mov	r2, r0
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	68ba      	ldr	r2, [r7, #8]
 80104d2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	899b      	ldrh	r3, [r3, #12]
 80104de:	461a      	mov	r2, r3
 80104e0:	68bb      	ldr	r3, [r7, #8]
 80104e2:	fbb3 f0f2 	udiv	r0, r3, r2
 80104e6:	fb00 f202 	mul.w	r2, r0, r2
 80104ea:	1a9b      	subs	r3, r3, r2
 80104ec:	18ca      	adds	r2, r1, r3
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80104f2:	2300      	movs	r3, #0
}
 80104f4:	4618      	mov	r0, r3
 80104f6:	3718      	adds	r7, #24
 80104f8:	46bd      	mov	sp, r7
 80104fa:	bd80      	pop	{r7, pc}

080104fc <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80104fc:	b580      	push	{r7, lr}
 80104fe:	b086      	sub	sp, #24
 8010500:	af00      	add	r7, sp, #0
 8010502:	6078      	str	r0, [r7, #4]
 8010504:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801050c:	2100      	movs	r1, #0
 801050e:	6878      	ldr	r0, [r7, #4]
 8010510:	f7ff fe95 	bl	801023e <dir_sdi>
 8010514:	4603      	mov	r3, r0
 8010516:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010518:	7dfb      	ldrb	r3, [r7, #23]
 801051a:	2b00      	cmp	r3, #0
 801051c:	d12b      	bne.n	8010576 <dir_alloc+0x7a>
		n = 0;
 801051e:	2300      	movs	r3, #0
 8010520:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	69db      	ldr	r3, [r3, #28]
 8010526:	4619      	mov	r1, r3
 8010528:	68f8      	ldr	r0, [r7, #12]
 801052a:	f7ff faa9 	bl	800fa80 <move_window>
 801052e:	4603      	mov	r3, r0
 8010530:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8010532:	7dfb      	ldrb	r3, [r7, #23]
 8010534:	2b00      	cmp	r3, #0
 8010536:	d11d      	bne.n	8010574 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	6a1b      	ldr	r3, [r3, #32]
 801053c:	781b      	ldrb	r3, [r3, #0]
 801053e:	2be5      	cmp	r3, #229	@ 0xe5
 8010540:	d004      	beq.n	801054c <dir_alloc+0x50>
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	6a1b      	ldr	r3, [r3, #32]
 8010546:	781b      	ldrb	r3, [r3, #0]
 8010548:	2b00      	cmp	r3, #0
 801054a:	d107      	bne.n	801055c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801054c:	693b      	ldr	r3, [r7, #16]
 801054e:	3301      	adds	r3, #1
 8010550:	613b      	str	r3, [r7, #16]
 8010552:	693a      	ldr	r2, [r7, #16]
 8010554:	683b      	ldr	r3, [r7, #0]
 8010556:	429a      	cmp	r2, r3
 8010558:	d102      	bne.n	8010560 <dir_alloc+0x64>
 801055a:	e00c      	b.n	8010576 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801055c:	2300      	movs	r3, #0
 801055e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8010560:	2101      	movs	r1, #1
 8010562:	6878      	ldr	r0, [r7, #4]
 8010564:	f7ff fef4 	bl	8010350 <dir_next>
 8010568:	4603      	mov	r3, r0
 801056a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801056c:	7dfb      	ldrb	r3, [r7, #23]
 801056e:	2b00      	cmp	r3, #0
 8010570:	d0d7      	beq.n	8010522 <dir_alloc+0x26>
 8010572:	e000      	b.n	8010576 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8010574:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8010576:	7dfb      	ldrb	r3, [r7, #23]
 8010578:	2b04      	cmp	r3, #4
 801057a:	d101      	bne.n	8010580 <dir_alloc+0x84>
 801057c:	2307      	movs	r3, #7
 801057e:	75fb      	strb	r3, [r7, #23]
	return res;
 8010580:	7dfb      	ldrb	r3, [r7, #23]
}
 8010582:	4618      	mov	r0, r3
 8010584:	3718      	adds	r7, #24
 8010586:	46bd      	mov	sp, r7
 8010588:	bd80      	pop	{r7, pc}

0801058a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801058a:	b580      	push	{r7, lr}
 801058c:	b084      	sub	sp, #16
 801058e:	af00      	add	r7, sp, #0
 8010590:	6078      	str	r0, [r7, #4]
 8010592:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8010594:	683b      	ldr	r3, [r7, #0]
 8010596:	331a      	adds	r3, #26
 8010598:	4618      	mov	r0, r3
 801059a:	f7fe ffc1 	bl	800f520 <ld_word>
 801059e:	4603      	mov	r3, r0
 80105a0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	781b      	ldrb	r3, [r3, #0]
 80105a6:	2b03      	cmp	r3, #3
 80105a8:	d109      	bne.n	80105be <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80105aa:	683b      	ldr	r3, [r7, #0]
 80105ac:	3314      	adds	r3, #20
 80105ae:	4618      	mov	r0, r3
 80105b0:	f7fe ffb6 	bl	800f520 <ld_word>
 80105b4:	4603      	mov	r3, r0
 80105b6:	041b      	lsls	r3, r3, #16
 80105b8:	68fa      	ldr	r2, [r7, #12]
 80105ba:	4313      	orrs	r3, r2
 80105bc:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80105be:	68fb      	ldr	r3, [r7, #12]
}
 80105c0:	4618      	mov	r0, r3
 80105c2:	3710      	adds	r7, #16
 80105c4:	46bd      	mov	sp, r7
 80105c6:	bd80      	pop	{r7, pc}

080105c8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80105c8:	b580      	push	{r7, lr}
 80105ca:	b084      	sub	sp, #16
 80105cc:	af00      	add	r7, sp, #0
 80105ce:	60f8      	str	r0, [r7, #12]
 80105d0:	60b9      	str	r1, [r7, #8]
 80105d2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80105d4:	68bb      	ldr	r3, [r7, #8]
 80105d6:	331a      	adds	r3, #26
 80105d8:	687a      	ldr	r2, [r7, #4]
 80105da:	b292      	uxth	r2, r2
 80105dc:	4611      	mov	r1, r2
 80105de:	4618      	mov	r0, r3
 80105e0:	f7fe ffd9 	bl	800f596 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	781b      	ldrb	r3, [r3, #0]
 80105e8:	2b03      	cmp	r3, #3
 80105ea:	d109      	bne.n	8010600 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80105ec:	68bb      	ldr	r3, [r7, #8]
 80105ee:	f103 0214 	add.w	r2, r3, #20
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	0c1b      	lsrs	r3, r3, #16
 80105f6:	b29b      	uxth	r3, r3
 80105f8:	4619      	mov	r1, r3
 80105fa:	4610      	mov	r0, r2
 80105fc:	f7fe ffcb 	bl	800f596 <st_word>
	}
}
 8010600:	bf00      	nop
 8010602:	3710      	adds	r7, #16
 8010604:	46bd      	mov	sp, r7
 8010606:	bd80      	pop	{r7, pc}

08010608 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8010608:	b590      	push	{r4, r7, lr}
 801060a:	b087      	sub	sp, #28
 801060c:	af00      	add	r7, sp, #0
 801060e:	6078      	str	r0, [r7, #4]
 8010610:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8010612:	683b      	ldr	r3, [r7, #0]
 8010614:	331a      	adds	r3, #26
 8010616:	4618      	mov	r0, r3
 8010618:	f7fe ff82 	bl	800f520 <ld_word>
 801061c:	4603      	mov	r3, r0
 801061e:	2b00      	cmp	r3, #0
 8010620:	d001      	beq.n	8010626 <cmp_lfn+0x1e>
 8010622:	2300      	movs	r3, #0
 8010624:	e059      	b.n	80106da <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8010626:	683b      	ldr	r3, [r7, #0]
 8010628:	781b      	ldrb	r3, [r3, #0]
 801062a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801062e:	1e5a      	subs	r2, r3, #1
 8010630:	4613      	mov	r3, r2
 8010632:	005b      	lsls	r3, r3, #1
 8010634:	4413      	add	r3, r2
 8010636:	009b      	lsls	r3, r3, #2
 8010638:	4413      	add	r3, r2
 801063a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801063c:	2301      	movs	r3, #1
 801063e:	81fb      	strh	r3, [r7, #14]
 8010640:	2300      	movs	r3, #0
 8010642:	613b      	str	r3, [r7, #16]
 8010644:	e033      	b.n	80106ae <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8010646:	4a27      	ldr	r2, [pc, #156]	@ (80106e4 <cmp_lfn+0xdc>)
 8010648:	693b      	ldr	r3, [r7, #16]
 801064a:	4413      	add	r3, r2
 801064c:	781b      	ldrb	r3, [r3, #0]
 801064e:	461a      	mov	r2, r3
 8010650:	683b      	ldr	r3, [r7, #0]
 8010652:	4413      	add	r3, r2
 8010654:	4618      	mov	r0, r3
 8010656:	f7fe ff63 	bl	800f520 <ld_word>
 801065a:	4603      	mov	r3, r0
 801065c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801065e:	89fb      	ldrh	r3, [r7, #14]
 8010660:	2b00      	cmp	r3, #0
 8010662:	d01a      	beq.n	801069a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8010664:	697b      	ldr	r3, [r7, #20]
 8010666:	2bfe      	cmp	r3, #254	@ 0xfe
 8010668:	d812      	bhi.n	8010690 <cmp_lfn+0x88>
 801066a:	89bb      	ldrh	r3, [r7, #12]
 801066c:	4618      	mov	r0, r3
 801066e:	f002 fa9b 	bl	8012ba8 <ff_wtoupper>
 8010672:	4603      	mov	r3, r0
 8010674:	461c      	mov	r4, r3
 8010676:	697b      	ldr	r3, [r7, #20]
 8010678:	1c5a      	adds	r2, r3, #1
 801067a:	617a      	str	r2, [r7, #20]
 801067c:	005b      	lsls	r3, r3, #1
 801067e:	687a      	ldr	r2, [r7, #4]
 8010680:	4413      	add	r3, r2
 8010682:	881b      	ldrh	r3, [r3, #0]
 8010684:	4618      	mov	r0, r3
 8010686:	f002 fa8f 	bl	8012ba8 <ff_wtoupper>
 801068a:	4603      	mov	r3, r0
 801068c:	429c      	cmp	r4, r3
 801068e:	d001      	beq.n	8010694 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8010690:	2300      	movs	r3, #0
 8010692:	e022      	b.n	80106da <cmp_lfn+0xd2>
			}
			wc = uc;
 8010694:	89bb      	ldrh	r3, [r7, #12]
 8010696:	81fb      	strh	r3, [r7, #14]
 8010698:	e006      	b.n	80106a8 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801069a:	89bb      	ldrh	r3, [r7, #12]
 801069c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80106a0:	4293      	cmp	r3, r2
 80106a2:	d001      	beq.n	80106a8 <cmp_lfn+0xa0>
 80106a4:	2300      	movs	r3, #0
 80106a6:	e018      	b.n	80106da <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80106a8:	693b      	ldr	r3, [r7, #16]
 80106aa:	3301      	adds	r3, #1
 80106ac:	613b      	str	r3, [r7, #16]
 80106ae:	693b      	ldr	r3, [r7, #16]
 80106b0:	2b0c      	cmp	r3, #12
 80106b2:	d9c8      	bls.n	8010646 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80106b4:	683b      	ldr	r3, [r7, #0]
 80106b6:	781b      	ldrb	r3, [r3, #0]
 80106b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d00b      	beq.n	80106d8 <cmp_lfn+0xd0>
 80106c0:	89fb      	ldrh	r3, [r7, #14]
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d008      	beq.n	80106d8 <cmp_lfn+0xd0>
 80106c6:	697b      	ldr	r3, [r7, #20]
 80106c8:	005b      	lsls	r3, r3, #1
 80106ca:	687a      	ldr	r2, [r7, #4]
 80106cc:	4413      	add	r3, r2
 80106ce:	881b      	ldrh	r3, [r3, #0]
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d001      	beq.n	80106d8 <cmp_lfn+0xd0>
 80106d4:	2300      	movs	r3, #0
 80106d6:	e000      	b.n	80106da <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80106d8:	2301      	movs	r3, #1
}
 80106da:	4618      	mov	r0, r3
 80106dc:	371c      	adds	r7, #28
 80106de:	46bd      	mov	sp, r7
 80106e0:	bd90      	pop	{r4, r7, pc}
 80106e2:	bf00      	nop
 80106e4:	08013150 	.word	0x08013150

080106e8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80106e8:	b580      	push	{r7, lr}
 80106ea:	b088      	sub	sp, #32
 80106ec:	af00      	add	r7, sp, #0
 80106ee:	60f8      	str	r0, [r7, #12]
 80106f0:	60b9      	str	r1, [r7, #8]
 80106f2:	4611      	mov	r1, r2
 80106f4:	461a      	mov	r2, r3
 80106f6:	460b      	mov	r3, r1
 80106f8:	71fb      	strb	r3, [r7, #7]
 80106fa:	4613      	mov	r3, r2
 80106fc:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80106fe:	68bb      	ldr	r3, [r7, #8]
 8010700:	330d      	adds	r3, #13
 8010702:	79ba      	ldrb	r2, [r7, #6]
 8010704:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8010706:	68bb      	ldr	r3, [r7, #8]
 8010708:	330b      	adds	r3, #11
 801070a:	220f      	movs	r2, #15
 801070c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 801070e:	68bb      	ldr	r3, [r7, #8]
 8010710:	330c      	adds	r3, #12
 8010712:	2200      	movs	r2, #0
 8010714:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8010716:	68bb      	ldr	r3, [r7, #8]
 8010718:	331a      	adds	r3, #26
 801071a:	2100      	movs	r1, #0
 801071c:	4618      	mov	r0, r3
 801071e:	f7fe ff3a 	bl	800f596 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8010722:	79fb      	ldrb	r3, [r7, #7]
 8010724:	1e5a      	subs	r2, r3, #1
 8010726:	4613      	mov	r3, r2
 8010728:	005b      	lsls	r3, r3, #1
 801072a:	4413      	add	r3, r2
 801072c:	009b      	lsls	r3, r3, #2
 801072e:	4413      	add	r3, r2
 8010730:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8010732:	2300      	movs	r3, #0
 8010734:	82fb      	strh	r3, [r7, #22]
 8010736:	2300      	movs	r3, #0
 8010738:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801073a:	8afb      	ldrh	r3, [r7, #22]
 801073c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010740:	4293      	cmp	r3, r2
 8010742:	d007      	beq.n	8010754 <put_lfn+0x6c>
 8010744:	69fb      	ldr	r3, [r7, #28]
 8010746:	1c5a      	adds	r2, r3, #1
 8010748:	61fa      	str	r2, [r7, #28]
 801074a:	005b      	lsls	r3, r3, #1
 801074c:	68fa      	ldr	r2, [r7, #12]
 801074e:	4413      	add	r3, r2
 8010750:	881b      	ldrh	r3, [r3, #0]
 8010752:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8010754:	4a17      	ldr	r2, [pc, #92]	@ (80107b4 <put_lfn+0xcc>)
 8010756:	69bb      	ldr	r3, [r7, #24]
 8010758:	4413      	add	r3, r2
 801075a:	781b      	ldrb	r3, [r3, #0]
 801075c:	461a      	mov	r2, r3
 801075e:	68bb      	ldr	r3, [r7, #8]
 8010760:	4413      	add	r3, r2
 8010762:	8afa      	ldrh	r2, [r7, #22]
 8010764:	4611      	mov	r1, r2
 8010766:	4618      	mov	r0, r3
 8010768:	f7fe ff15 	bl	800f596 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801076c:	8afb      	ldrh	r3, [r7, #22]
 801076e:	2b00      	cmp	r3, #0
 8010770:	d102      	bne.n	8010778 <put_lfn+0x90>
 8010772:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010776:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8010778:	69bb      	ldr	r3, [r7, #24]
 801077a:	3301      	adds	r3, #1
 801077c:	61bb      	str	r3, [r7, #24]
 801077e:	69bb      	ldr	r3, [r7, #24]
 8010780:	2b0c      	cmp	r3, #12
 8010782:	d9da      	bls.n	801073a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8010784:	8afb      	ldrh	r3, [r7, #22]
 8010786:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801078a:	4293      	cmp	r3, r2
 801078c:	d006      	beq.n	801079c <put_lfn+0xb4>
 801078e:	69fb      	ldr	r3, [r7, #28]
 8010790:	005b      	lsls	r3, r3, #1
 8010792:	68fa      	ldr	r2, [r7, #12]
 8010794:	4413      	add	r3, r2
 8010796:	881b      	ldrh	r3, [r3, #0]
 8010798:	2b00      	cmp	r3, #0
 801079a:	d103      	bne.n	80107a4 <put_lfn+0xbc>
 801079c:	79fb      	ldrb	r3, [r7, #7]
 801079e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80107a2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80107a4:	68bb      	ldr	r3, [r7, #8]
 80107a6:	79fa      	ldrb	r2, [r7, #7]
 80107a8:	701a      	strb	r2, [r3, #0]
}
 80107aa:	bf00      	nop
 80107ac:	3720      	adds	r7, #32
 80107ae:	46bd      	mov	sp, r7
 80107b0:	bd80      	pop	{r7, pc}
 80107b2:	bf00      	nop
 80107b4:	08013150 	.word	0x08013150

080107b8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80107b8:	b580      	push	{r7, lr}
 80107ba:	b08c      	sub	sp, #48	@ 0x30
 80107bc:	af00      	add	r7, sp, #0
 80107be:	60f8      	str	r0, [r7, #12]
 80107c0:	60b9      	str	r1, [r7, #8]
 80107c2:	607a      	str	r2, [r7, #4]
 80107c4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80107c6:	220b      	movs	r2, #11
 80107c8:	68b9      	ldr	r1, [r7, #8]
 80107ca:	68f8      	ldr	r0, [r7, #12]
 80107cc:	f7fe ff2a 	bl	800f624 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80107d0:	683b      	ldr	r3, [r7, #0]
 80107d2:	2b05      	cmp	r3, #5
 80107d4:	d929      	bls.n	801082a <gen_numname+0x72>
		sr = seq;
 80107d6:	683b      	ldr	r3, [r7, #0]
 80107d8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80107da:	e020      	b.n	801081e <gen_numname+0x66>
			wc = *lfn++;
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	1c9a      	adds	r2, r3, #2
 80107e0:	607a      	str	r2, [r7, #4]
 80107e2:	881b      	ldrh	r3, [r3, #0]
 80107e4:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 80107e6:	2300      	movs	r3, #0
 80107e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80107ea:	e015      	b.n	8010818 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 80107ec:	69fb      	ldr	r3, [r7, #28]
 80107ee:	005a      	lsls	r2, r3, #1
 80107f0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80107f2:	f003 0301 	and.w	r3, r3, #1
 80107f6:	4413      	add	r3, r2
 80107f8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80107fa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80107fc:	085b      	lsrs	r3, r3, #1
 80107fe:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8010800:	69fb      	ldr	r3, [r7, #28]
 8010802:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8010806:	2b00      	cmp	r3, #0
 8010808:	d003      	beq.n	8010812 <gen_numname+0x5a>
 801080a:	69fa      	ldr	r2, [r7, #28]
 801080c:	4b30      	ldr	r3, [pc, #192]	@ (80108d0 <gen_numname+0x118>)
 801080e:	4053      	eors	r3, r2
 8010810:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8010812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010814:	3301      	adds	r3, #1
 8010816:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801081a:	2b0f      	cmp	r3, #15
 801081c:	d9e6      	bls.n	80107ec <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	881b      	ldrh	r3, [r3, #0]
 8010822:	2b00      	cmp	r3, #0
 8010824:	d1da      	bne.n	80107dc <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8010826:	69fb      	ldr	r3, [r7, #28]
 8010828:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 801082a:	2307      	movs	r3, #7
 801082c:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 801082e:	683b      	ldr	r3, [r7, #0]
 8010830:	b2db      	uxtb	r3, r3
 8010832:	f003 030f 	and.w	r3, r3, #15
 8010836:	b2db      	uxtb	r3, r3
 8010838:	3330      	adds	r3, #48	@ 0x30
 801083a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 801083e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010842:	2b39      	cmp	r3, #57	@ 0x39
 8010844:	d904      	bls.n	8010850 <gen_numname+0x98>
 8010846:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801084a:	3307      	adds	r3, #7
 801084c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8010850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010852:	1e5a      	subs	r2, r3, #1
 8010854:	62ba      	str	r2, [r7, #40]	@ 0x28
 8010856:	3330      	adds	r3, #48	@ 0x30
 8010858:	443b      	add	r3, r7
 801085a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 801085e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8010862:	683b      	ldr	r3, [r7, #0]
 8010864:	091b      	lsrs	r3, r3, #4
 8010866:	603b      	str	r3, [r7, #0]
	} while (seq);
 8010868:	683b      	ldr	r3, [r7, #0]
 801086a:	2b00      	cmp	r3, #0
 801086c:	d1df      	bne.n	801082e <gen_numname+0x76>
	ns[i] = '~';
 801086e:	f107 0214 	add.w	r2, r7, #20
 8010872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010874:	4413      	add	r3, r2
 8010876:	227e      	movs	r2, #126	@ 0x7e
 8010878:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801087a:	2300      	movs	r3, #0
 801087c:	627b      	str	r3, [r7, #36]	@ 0x24
 801087e:	e002      	b.n	8010886 <gen_numname+0xce>
 8010880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010882:	3301      	adds	r3, #1
 8010884:	627b      	str	r3, [r7, #36]	@ 0x24
 8010886:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801088a:	429a      	cmp	r2, r3
 801088c:	d205      	bcs.n	801089a <gen_numname+0xe2>
 801088e:	68fa      	ldr	r2, [r7, #12]
 8010890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010892:	4413      	add	r3, r2
 8010894:	781b      	ldrb	r3, [r3, #0]
 8010896:	2b20      	cmp	r3, #32
 8010898:	d1f2      	bne.n	8010880 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801089a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801089c:	2b07      	cmp	r3, #7
 801089e:	d807      	bhi.n	80108b0 <gen_numname+0xf8>
 80108a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108a2:	1c5a      	adds	r2, r3, #1
 80108a4:	62ba      	str	r2, [r7, #40]	@ 0x28
 80108a6:	3330      	adds	r3, #48	@ 0x30
 80108a8:	443b      	add	r3, r7
 80108aa:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80108ae:	e000      	b.n	80108b2 <gen_numname+0xfa>
 80108b0:	2120      	movs	r1, #32
 80108b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108b4:	1c5a      	adds	r2, r3, #1
 80108b6:	627a      	str	r2, [r7, #36]	@ 0x24
 80108b8:	68fa      	ldr	r2, [r7, #12]
 80108ba:	4413      	add	r3, r2
 80108bc:	460a      	mov	r2, r1
 80108be:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80108c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108c2:	2b07      	cmp	r3, #7
 80108c4:	d9e9      	bls.n	801089a <gen_numname+0xe2>
}
 80108c6:	bf00      	nop
 80108c8:	bf00      	nop
 80108ca:	3730      	adds	r7, #48	@ 0x30
 80108cc:	46bd      	mov	sp, r7
 80108ce:	bd80      	pop	{r7, pc}
 80108d0:	00011021 	.word	0x00011021

080108d4 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80108d4:	b480      	push	{r7}
 80108d6:	b085      	sub	sp, #20
 80108d8:	af00      	add	r7, sp, #0
 80108da:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80108dc:	2300      	movs	r3, #0
 80108de:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80108e0:	230b      	movs	r3, #11
 80108e2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80108e4:	7bfb      	ldrb	r3, [r7, #15]
 80108e6:	b2da      	uxtb	r2, r3
 80108e8:	0852      	lsrs	r2, r2, #1
 80108ea:	01db      	lsls	r3, r3, #7
 80108ec:	4313      	orrs	r3, r2
 80108ee:	b2da      	uxtb	r2, r3
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	1c59      	adds	r1, r3, #1
 80108f4:	6079      	str	r1, [r7, #4]
 80108f6:	781b      	ldrb	r3, [r3, #0]
 80108f8:	4413      	add	r3, r2
 80108fa:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80108fc:	68bb      	ldr	r3, [r7, #8]
 80108fe:	3b01      	subs	r3, #1
 8010900:	60bb      	str	r3, [r7, #8]
 8010902:	68bb      	ldr	r3, [r7, #8]
 8010904:	2b00      	cmp	r3, #0
 8010906:	d1ed      	bne.n	80108e4 <sum_sfn+0x10>
	return sum;
 8010908:	7bfb      	ldrb	r3, [r7, #15]
}
 801090a:	4618      	mov	r0, r3
 801090c:	3714      	adds	r7, #20
 801090e:	46bd      	mov	sp, r7
 8010910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010914:	4770      	bx	lr

08010916 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8010916:	b580      	push	{r7, lr}
 8010918:	b086      	sub	sp, #24
 801091a:	af00      	add	r7, sp, #0
 801091c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8010924:	2100      	movs	r1, #0
 8010926:	6878      	ldr	r0, [r7, #4]
 8010928:	f7ff fc89 	bl	801023e <dir_sdi>
 801092c:	4603      	mov	r3, r0
 801092e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8010930:	7dfb      	ldrb	r3, [r7, #23]
 8010932:	2b00      	cmp	r3, #0
 8010934:	d001      	beq.n	801093a <dir_find+0x24>
 8010936:	7dfb      	ldrb	r3, [r7, #23]
 8010938:	e0a9      	b.n	8010a8e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801093a:	23ff      	movs	r3, #255	@ 0xff
 801093c:	753b      	strb	r3, [r7, #20]
 801093e:	7d3b      	ldrb	r3, [r7, #20]
 8010940:	757b      	strb	r3, [r7, #21]
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	f04f 32ff 	mov.w	r2, #4294967295
 8010948:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	69db      	ldr	r3, [r3, #28]
 801094e:	4619      	mov	r1, r3
 8010950:	6938      	ldr	r0, [r7, #16]
 8010952:	f7ff f895 	bl	800fa80 <move_window>
 8010956:	4603      	mov	r3, r0
 8010958:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801095a:	7dfb      	ldrb	r3, [r7, #23]
 801095c:	2b00      	cmp	r3, #0
 801095e:	f040 8090 	bne.w	8010a82 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	6a1b      	ldr	r3, [r3, #32]
 8010966:	781b      	ldrb	r3, [r3, #0]
 8010968:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801096a:	7dbb      	ldrb	r3, [r7, #22]
 801096c:	2b00      	cmp	r3, #0
 801096e:	d102      	bne.n	8010976 <dir_find+0x60>
 8010970:	2304      	movs	r3, #4
 8010972:	75fb      	strb	r3, [r7, #23]
 8010974:	e08a      	b.n	8010a8c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	6a1b      	ldr	r3, [r3, #32]
 801097a:	330b      	adds	r3, #11
 801097c:	781b      	ldrb	r3, [r3, #0]
 801097e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010982:	73fb      	strb	r3, [r7, #15]
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	7bfa      	ldrb	r2, [r7, #15]
 8010988:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 801098a:	7dbb      	ldrb	r3, [r7, #22]
 801098c:	2be5      	cmp	r3, #229	@ 0xe5
 801098e:	d007      	beq.n	80109a0 <dir_find+0x8a>
 8010990:	7bfb      	ldrb	r3, [r7, #15]
 8010992:	f003 0308 	and.w	r3, r3, #8
 8010996:	2b00      	cmp	r3, #0
 8010998:	d009      	beq.n	80109ae <dir_find+0x98>
 801099a:	7bfb      	ldrb	r3, [r7, #15]
 801099c:	2b0f      	cmp	r3, #15
 801099e:	d006      	beq.n	80109ae <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80109a0:	23ff      	movs	r3, #255	@ 0xff
 80109a2:	757b      	strb	r3, [r7, #21]
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	f04f 32ff 	mov.w	r2, #4294967295
 80109aa:	631a      	str	r2, [r3, #48]	@ 0x30
 80109ac:	e05e      	b.n	8010a6c <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80109ae:	7bfb      	ldrb	r3, [r7, #15]
 80109b0:	2b0f      	cmp	r3, #15
 80109b2:	d136      	bne.n	8010a22 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80109ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d154      	bne.n	8010a6c <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80109c2:	7dbb      	ldrb	r3, [r7, #22]
 80109c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d00d      	beq.n	80109e8 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	6a1b      	ldr	r3, [r3, #32]
 80109d0:	7b5b      	ldrb	r3, [r3, #13]
 80109d2:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80109d4:	7dbb      	ldrb	r3, [r7, #22]
 80109d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80109da:	75bb      	strb	r3, [r7, #22]
 80109dc:	7dbb      	ldrb	r3, [r7, #22]
 80109de:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	695a      	ldr	r2, [r3, #20]
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80109e8:	7dba      	ldrb	r2, [r7, #22]
 80109ea:	7d7b      	ldrb	r3, [r7, #21]
 80109ec:	429a      	cmp	r2, r3
 80109ee:	d115      	bne.n	8010a1c <dir_find+0x106>
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	6a1b      	ldr	r3, [r3, #32]
 80109f4:	330d      	adds	r3, #13
 80109f6:	781b      	ldrb	r3, [r3, #0]
 80109f8:	7d3a      	ldrb	r2, [r7, #20]
 80109fa:	429a      	cmp	r2, r3
 80109fc:	d10e      	bne.n	8010a1c <dir_find+0x106>
 80109fe:	693b      	ldr	r3, [r7, #16]
 8010a00:	691a      	ldr	r2, [r3, #16]
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	6a1b      	ldr	r3, [r3, #32]
 8010a06:	4619      	mov	r1, r3
 8010a08:	4610      	mov	r0, r2
 8010a0a:	f7ff fdfd 	bl	8010608 <cmp_lfn>
 8010a0e:	4603      	mov	r3, r0
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d003      	beq.n	8010a1c <dir_find+0x106>
 8010a14:	7d7b      	ldrb	r3, [r7, #21]
 8010a16:	3b01      	subs	r3, #1
 8010a18:	b2db      	uxtb	r3, r3
 8010a1a:	e000      	b.n	8010a1e <dir_find+0x108>
 8010a1c:	23ff      	movs	r3, #255	@ 0xff
 8010a1e:	757b      	strb	r3, [r7, #21]
 8010a20:	e024      	b.n	8010a6c <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8010a22:	7d7b      	ldrb	r3, [r7, #21]
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d109      	bne.n	8010a3c <dir_find+0x126>
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	6a1b      	ldr	r3, [r3, #32]
 8010a2c:	4618      	mov	r0, r3
 8010a2e:	f7ff ff51 	bl	80108d4 <sum_sfn>
 8010a32:	4603      	mov	r3, r0
 8010a34:	461a      	mov	r2, r3
 8010a36:	7d3b      	ldrb	r3, [r7, #20]
 8010a38:	4293      	cmp	r3, r2
 8010a3a:	d024      	beq.n	8010a86 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8010a42:	f003 0301 	and.w	r3, r3, #1
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d10a      	bne.n	8010a60 <dir_find+0x14a>
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	6a18      	ldr	r0, [r3, #32]
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	3324      	adds	r3, #36	@ 0x24
 8010a52:	220b      	movs	r2, #11
 8010a54:	4619      	mov	r1, r3
 8010a56:	f7fe fe21 	bl	800f69c <mem_cmp>
 8010a5a:	4603      	mov	r3, r0
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d014      	beq.n	8010a8a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8010a60:	23ff      	movs	r3, #255	@ 0xff
 8010a62:	757b      	strb	r3, [r7, #21]
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	f04f 32ff 	mov.w	r2, #4294967295
 8010a6a:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8010a6c:	2100      	movs	r1, #0
 8010a6e:	6878      	ldr	r0, [r7, #4]
 8010a70:	f7ff fc6e 	bl	8010350 <dir_next>
 8010a74:	4603      	mov	r3, r0
 8010a76:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8010a78:	7dfb      	ldrb	r3, [r7, #23]
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	f43f af65 	beq.w	801094a <dir_find+0x34>
 8010a80:	e004      	b.n	8010a8c <dir_find+0x176>
		if (res != FR_OK) break;
 8010a82:	bf00      	nop
 8010a84:	e002      	b.n	8010a8c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8010a86:	bf00      	nop
 8010a88:	e000      	b.n	8010a8c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8010a8a:	bf00      	nop

	return res;
 8010a8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a8e:	4618      	mov	r0, r3
 8010a90:	3718      	adds	r7, #24
 8010a92:	46bd      	mov	sp, r7
 8010a94:	bd80      	pop	{r7, pc}
	...

08010a98 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8010a98:	b580      	push	{r7, lr}
 8010a9a:	b08c      	sub	sp, #48	@ 0x30
 8010a9c:	af00      	add	r7, sp, #0
 8010a9e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8010aac:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d001      	beq.n	8010ab8 <dir_register+0x20>
 8010ab4:	2306      	movs	r3, #6
 8010ab6:	e0e0      	b.n	8010c7a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8010ab8:	2300      	movs	r3, #0
 8010aba:	627b      	str	r3, [r7, #36]	@ 0x24
 8010abc:	e002      	b.n	8010ac4 <dir_register+0x2c>
 8010abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ac0:	3301      	adds	r3, #1
 8010ac2:	627b      	str	r3, [r7, #36]	@ 0x24
 8010ac4:	69fb      	ldr	r3, [r7, #28]
 8010ac6:	691a      	ldr	r2, [r3, #16]
 8010ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010aca:	005b      	lsls	r3, r3, #1
 8010acc:	4413      	add	r3, r2
 8010ace:	881b      	ldrh	r3, [r3, #0]
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d1f4      	bne.n	8010abe <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8010ada:	f107 030c 	add.w	r3, r7, #12
 8010ade:	220c      	movs	r2, #12
 8010ae0:	4618      	mov	r0, r3
 8010ae2:	f7fe fd9f 	bl	800f624 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8010ae6:	7dfb      	ldrb	r3, [r7, #23]
 8010ae8:	f003 0301 	and.w	r3, r3, #1
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d032      	beq.n	8010b56 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	2240      	movs	r2, #64	@ 0x40
 8010af4:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8010af8:	2301      	movs	r3, #1
 8010afa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010afc:	e016      	b.n	8010b2c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8010b04:	69fb      	ldr	r3, [r7, #28]
 8010b06:	691a      	ldr	r2, [r3, #16]
 8010b08:	f107 010c 	add.w	r1, r7, #12
 8010b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b0e:	f7ff fe53 	bl	80107b8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8010b12:	6878      	ldr	r0, [r7, #4]
 8010b14:	f7ff feff 	bl	8010916 <dir_find>
 8010b18:	4603      	mov	r3, r0
 8010b1a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8010b1e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d106      	bne.n	8010b34 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8010b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b28:	3301      	adds	r3, #1
 8010b2a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b2e:	2b63      	cmp	r3, #99	@ 0x63
 8010b30:	d9e5      	bls.n	8010afe <dir_register+0x66>
 8010b32:	e000      	b.n	8010b36 <dir_register+0x9e>
			if (res != FR_OK) break;
 8010b34:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8010b36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b38:	2b64      	cmp	r3, #100	@ 0x64
 8010b3a:	d101      	bne.n	8010b40 <dir_register+0xa8>
 8010b3c:	2307      	movs	r3, #7
 8010b3e:	e09c      	b.n	8010c7a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8010b40:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010b44:	2b04      	cmp	r3, #4
 8010b46:	d002      	beq.n	8010b4e <dir_register+0xb6>
 8010b48:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010b4c:	e095      	b.n	8010c7a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8010b4e:	7dfa      	ldrb	r2, [r7, #23]
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8010b56:	7dfb      	ldrb	r3, [r7, #23]
 8010b58:	f003 0302 	and.w	r3, r3, #2
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d007      	beq.n	8010b70 <dir_register+0xd8>
 8010b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b62:	330c      	adds	r3, #12
 8010b64:	4a47      	ldr	r2, [pc, #284]	@ (8010c84 <dir_register+0x1ec>)
 8010b66:	fba2 2303 	umull	r2, r3, r2, r3
 8010b6a:	089b      	lsrs	r3, r3, #2
 8010b6c:	3301      	adds	r3, #1
 8010b6e:	e000      	b.n	8010b72 <dir_register+0xda>
 8010b70:	2301      	movs	r3, #1
 8010b72:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8010b74:	6a39      	ldr	r1, [r7, #32]
 8010b76:	6878      	ldr	r0, [r7, #4]
 8010b78:	f7ff fcc0 	bl	80104fc <dir_alloc>
 8010b7c:	4603      	mov	r3, r0
 8010b7e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8010b82:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d148      	bne.n	8010c1c <dir_register+0x184>
 8010b8a:	6a3b      	ldr	r3, [r7, #32]
 8010b8c:	3b01      	subs	r3, #1
 8010b8e:	623b      	str	r3, [r7, #32]
 8010b90:	6a3b      	ldr	r3, [r7, #32]
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d042      	beq.n	8010c1c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	695a      	ldr	r2, [r3, #20]
 8010b9a:	6a3b      	ldr	r3, [r7, #32]
 8010b9c:	015b      	lsls	r3, r3, #5
 8010b9e:	1ad3      	subs	r3, r2, r3
 8010ba0:	4619      	mov	r1, r3
 8010ba2:	6878      	ldr	r0, [r7, #4]
 8010ba4:	f7ff fb4b 	bl	801023e <dir_sdi>
 8010ba8:	4603      	mov	r3, r0
 8010baa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8010bae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d132      	bne.n	8010c1c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	3324      	adds	r3, #36	@ 0x24
 8010bba:	4618      	mov	r0, r3
 8010bbc:	f7ff fe8a 	bl	80108d4 <sum_sfn>
 8010bc0:	4603      	mov	r3, r0
 8010bc2:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	69db      	ldr	r3, [r3, #28]
 8010bc8:	4619      	mov	r1, r3
 8010bca:	69f8      	ldr	r0, [r7, #28]
 8010bcc:	f7fe ff58 	bl	800fa80 <move_window>
 8010bd0:	4603      	mov	r3, r0
 8010bd2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8010bd6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d11d      	bne.n	8010c1a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8010bde:	69fb      	ldr	r3, [r7, #28]
 8010be0:	6918      	ldr	r0, [r3, #16]
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	6a19      	ldr	r1, [r3, #32]
 8010be6:	6a3b      	ldr	r3, [r7, #32]
 8010be8:	b2da      	uxtb	r2, r3
 8010bea:	7efb      	ldrb	r3, [r7, #27]
 8010bec:	f7ff fd7c 	bl	80106e8 <put_lfn>
				fs->wflag = 1;
 8010bf0:	69fb      	ldr	r3, [r7, #28]
 8010bf2:	2201      	movs	r2, #1
 8010bf4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8010bf6:	2100      	movs	r1, #0
 8010bf8:	6878      	ldr	r0, [r7, #4]
 8010bfa:	f7ff fba9 	bl	8010350 <dir_next>
 8010bfe:	4603      	mov	r3, r0
 8010c00:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8010c04:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d107      	bne.n	8010c1c <dir_register+0x184>
 8010c0c:	6a3b      	ldr	r3, [r7, #32]
 8010c0e:	3b01      	subs	r3, #1
 8010c10:	623b      	str	r3, [r7, #32]
 8010c12:	6a3b      	ldr	r3, [r7, #32]
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d1d5      	bne.n	8010bc4 <dir_register+0x12c>
 8010c18:	e000      	b.n	8010c1c <dir_register+0x184>
				if (res != FR_OK) break;
 8010c1a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8010c1c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d128      	bne.n	8010c76 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	69db      	ldr	r3, [r3, #28]
 8010c28:	4619      	mov	r1, r3
 8010c2a:	69f8      	ldr	r0, [r7, #28]
 8010c2c:	f7fe ff28 	bl	800fa80 <move_window>
 8010c30:	4603      	mov	r3, r0
 8010c32:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8010c36:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d11b      	bne.n	8010c76 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	6a1b      	ldr	r3, [r3, #32]
 8010c42:	2220      	movs	r2, #32
 8010c44:	2100      	movs	r1, #0
 8010c46:	4618      	mov	r0, r3
 8010c48:	f7fe fd0d 	bl	800f666 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	6a18      	ldr	r0, [r3, #32]
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	3324      	adds	r3, #36	@ 0x24
 8010c54:	220b      	movs	r2, #11
 8010c56:	4619      	mov	r1, r3
 8010c58:	f7fe fce4 	bl	800f624 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	6a1b      	ldr	r3, [r3, #32]
 8010c66:	330c      	adds	r3, #12
 8010c68:	f002 0218 	and.w	r2, r2, #24
 8010c6c:	b2d2      	uxtb	r2, r2
 8010c6e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8010c70:	69fb      	ldr	r3, [r7, #28]
 8010c72:	2201      	movs	r2, #1
 8010c74:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8010c76:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8010c7a:	4618      	mov	r0, r3
 8010c7c:	3730      	adds	r7, #48	@ 0x30
 8010c7e:	46bd      	mov	sp, r7
 8010c80:	bd80      	pop	{r7, pc}
 8010c82:	bf00      	nop
 8010c84:	4ec4ec4f 	.word	0x4ec4ec4f

08010c88 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8010c88:	b580      	push	{r7, lr}
 8010c8a:	b08a      	sub	sp, #40	@ 0x28
 8010c8c:	af00      	add	r7, sp, #0
 8010c8e:	6078      	str	r0, [r7, #4]
 8010c90:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8010c92:	683b      	ldr	r3, [r7, #0]
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	613b      	str	r3, [r7, #16]
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	691b      	ldr	r3, [r3, #16]
 8010c9e:	60fb      	str	r3, [r7, #12]
 8010ca0:	2300      	movs	r3, #0
 8010ca2:	617b      	str	r3, [r7, #20]
 8010ca4:	697b      	ldr	r3, [r7, #20]
 8010ca6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8010ca8:	69bb      	ldr	r3, [r7, #24]
 8010caa:	1c5a      	adds	r2, r3, #1
 8010cac:	61ba      	str	r2, [r7, #24]
 8010cae:	693a      	ldr	r2, [r7, #16]
 8010cb0:	4413      	add	r3, r2
 8010cb2:	781b      	ldrb	r3, [r3, #0]
 8010cb4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8010cb6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010cb8:	2b1f      	cmp	r3, #31
 8010cba:	d940      	bls.n	8010d3e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8010cbc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010cbe:	2b2f      	cmp	r3, #47	@ 0x2f
 8010cc0:	d006      	beq.n	8010cd0 <create_name+0x48>
 8010cc2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010cc4:	2b5c      	cmp	r3, #92	@ 0x5c
 8010cc6:	d110      	bne.n	8010cea <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8010cc8:	e002      	b.n	8010cd0 <create_name+0x48>
 8010cca:	69bb      	ldr	r3, [r7, #24]
 8010ccc:	3301      	adds	r3, #1
 8010cce:	61bb      	str	r3, [r7, #24]
 8010cd0:	693a      	ldr	r2, [r7, #16]
 8010cd2:	69bb      	ldr	r3, [r7, #24]
 8010cd4:	4413      	add	r3, r2
 8010cd6:	781b      	ldrb	r3, [r3, #0]
 8010cd8:	2b2f      	cmp	r3, #47	@ 0x2f
 8010cda:	d0f6      	beq.n	8010cca <create_name+0x42>
 8010cdc:	693a      	ldr	r2, [r7, #16]
 8010cde:	69bb      	ldr	r3, [r7, #24]
 8010ce0:	4413      	add	r3, r2
 8010ce2:	781b      	ldrb	r3, [r3, #0]
 8010ce4:	2b5c      	cmp	r3, #92	@ 0x5c
 8010ce6:	d0f0      	beq.n	8010cca <create_name+0x42>
			break;
 8010ce8:	e02a      	b.n	8010d40 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8010cea:	697b      	ldr	r3, [r7, #20]
 8010cec:	2bfe      	cmp	r3, #254	@ 0xfe
 8010cee:	d901      	bls.n	8010cf4 <create_name+0x6c>
 8010cf0:	2306      	movs	r3, #6
 8010cf2:	e1ca      	b.n	801108a <create_name+0x402>
#if !_LFN_UNICODE
		w &= 0xFF;
 8010cf4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010cf6:	b2db      	uxtb	r3, r3
 8010cf8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8010cfa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010cfc:	2101      	movs	r1, #1
 8010cfe:	4618      	mov	r0, r3
 8010d00:	f001 ff16 	bl	8012b30 <ff_convert>
 8010d04:	4603      	mov	r3, r0
 8010d06:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8010d08:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d101      	bne.n	8010d12 <create_name+0x8a>
 8010d0e:	2306      	movs	r3, #6
 8010d10:	e1bb      	b.n	801108a <create_name+0x402>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8010d12:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010d14:	2b7f      	cmp	r3, #127	@ 0x7f
 8010d16:	d809      	bhi.n	8010d2c <create_name+0xa4>
 8010d18:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010d1a:	4619      	mov	r1, r3
 8010d1c:	489e      	ldr	r0, [pc, #632]	@ (8010f98 <create_name+0x310>)
 8010d1e:	f7fe fce4 	bl	800f6ea <chk_chr>
 8010d22:	4603      	mov	r3, r0
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d001      	beq.n	8010d2c <create_name+0xa4>
 8010d28:	2306      	movs	r3, #6
 8010d2a:	e1ae      	b.n	801108a <create_name+0x402>
		lfn[di++] = w;					/* Store the Unicode character */
 8010d2c:	697b      	ldr	r3, [r7, #20]
 8010d2e:	1c5a      	adds	r2, r3, #1
 8010d30:	617a      	str	r2, [r7, #20]
 8010d32:	005b      	lsls	r3, r3, #1
 8010d34:	68fa      	ldr	r2, [r7, #12]
 8010d36:	4413      	add	r3, r2
 8010d38:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8010d3a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8010d3c:	e7b4      	b.n	8010ca8 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8010d3e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8010d40:	693a      	ldr	r2, [r7, #16]
 8010d42:	69bb      	ldr	r3, [r7, #24]
 8010d44:	441a      	add	r2, r3
 8010d46:	683b      	ldr	r3, [r7, #0]
 8010d48:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8010d4a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010d4c:	2b1f      	cmp	r3, #31
 8010d4e:	d801      	bhi.n	8010d54 <create_name+0xcc>
 8010d50:	2304      	movs	r3, #4
 8010d52:	e000      	b.n	8010d56 <create_name+0xce>
 8010d54:	2300      	movs	r3, #0
 8010d56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if _FS_RPATH != 0
	if ((di == 1 && lfn[di - 1] == '.') ||
 8010d5a:	697b      	ldr	r3, [r7, #20]
 8010d5c:	2b01      	cmp	r3, #1
 8010d5e:	d109      	bne.n	8010d74 <create_name+0xec>
 8010d60:	697a      	ldr	r2, [r7, #20]
 8010d62:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010d66:	4413      	add	r3, r2
 8010d68:	005b      	lsls	r3, r3, #1
 8010d6a:	68fa      	ldr	r2, [r7, #12]
 8010d6c:	4413      	add	r3, r2
 8010d6e:	881b      	ldrh	r3, [r3, #0]
 8010d70:	2b2e      	cmp	r3, #46	@ 0x2e
 8010d72:	d015      	beq.n	8010da0 <create_name+0x118>
 8010d74:	697b      	ldr	r3, [r7, #20]
 8010d76:	2b02      	cmp	r3, #2
 8010d78:	d14d      	bne.n	8010e16 <create_name+0x18e>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 8010d7a:	697a      	ldr	r2, [r7, #20]
 8010d7c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010d80:	4413      	add	r3, r2
 8010d82:	005b      	lsls	r3, r3, #1
 8010d84:	68fa      	ldr	r2, [r7, #12]
 8010d86:	4413      	add	r3, r2
 8010d88:	881b      	ldrh	r3, [r3, #0]
 8010d8a:	2b2e      	cmp	r3, #46	@ 0x2e
 8010d8c:	d143      	bne.n	8010e16 <create_name+0x18e>
 8010d8e:	697a      	ldr	r2, [r7, #20]
 8010d90:	4b82      	ldr	r3, [pc, #520]	@ (8010f9c <create_name+0x314>)
 8010d92:	4413      	add	r3, r2
 8010d94:	005b      	lsls	r3, r3, #1
 8010d96:	68fa      	ldr	r2, [r7, #12]
 8010d98:	4413      	add	r3, r2
 8010d9a:	881b      	ldrh	r3, [r3, #0]
 8010d9c:	2b2e      	cmp	r3, #46	@ 0x2e
 8010d9e:	d13a      	bne.n	8010e16 <create_name+0x18e>
		lfn[di] = 0;
 8010da0:	697b      	ldr	r3, [r7, #20]
 8010da2:	005b      	lsls	r3, r3, #1
 8010da4:	68fa      	ldr	r2, [r7, #12]
 8010da6:	4413      	add	r3, r2
 8010da8:	2200      	movs	r2, #0
 8010daa:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 8010dac:	2300      	movs	r3, #0
 8010dae:	623b      	str	r3, [r7, #32]
 8010db0:	e00f      	b.n	8010dd2 <create_name+0x14a>
			dp->fn[i] = (i < di) ? '.' : ' ';
 8010db2:	6a3a      	ldr	r2, [r7, #32]
 8010db4:	697b      	ldr	r3, [r7, #20]
 8010db6:	429a      	cmp	r2, r3
 8010db8:	d201      	bcs.n	8010dbe <create_name+0x136>
 8010dba:	212e      	movs	r1, #46	@ 0x2e
 8010dbc:	e000      	b.n	8010dc0 <create_name+0x138>
 8010dbe:	2120      	movs	r1, #32
 8010dc0:	687a      	ldr	r2, [r7, #4]
 8010dc2:	6a3b      	ldr	r3, [r7, #32]
 8010dc4:	4413      	add	r3, r2
 8010dc6:	3324      	adds	r3, #36	@ 0x24
 8010dc8:	460a      	mov	r2, r1
 8010dca:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 8010dcc:	6a3b      	ldr	r3, [r7, #32]
 8010dce:	3301      	adds	r3, #1
 8010dd0:	623b      	str	r3, [r7, #32]
 8010dd2:	6a3b      	ldr	r3, [r7, #32]
 8010dd4:	2b0a      	cmp	r3, #10
 8010dd6:	d9ec      	bls.n	8010db2 <create_name+0x12a>
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 8010dd8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010ddc:	f043 0320 	orr.w	r3, r3, #32
 8010de0:	b2d9      	uxtb	r1, r3
 8010de2:	687a      	ldr	r2, [r7, #4]
 8010de4:	6a3b      	ldr	r3, [r7, #32]
 8010de6:	4413      	add	r3, r2
 8010de8:	3324      	adds	r3, #36	@ 0x24
 8010dea:	460a      	mov	r2, r1
 8010dec:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8010dee:	2300      	movs	r3, #0
 8010df0:	e14b      	b.n	801108a <create_name+0x402>
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
		w = lfn[di - 1];
 8010df2:	697a      	ldr	r2, [r7, #20]
 8010df4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010df8:	4413      	add	r3, r2
 8010dfa:	005b      	lsls	r3, r3, #1
 8010dfc:	68fa      	ldr	r2, [r7, #12]
 8010dfe:	4413      	add	r3, r2
 8010e00:	881b      	ldrh	r3, [r3, #0]
 8010e02:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8010e04:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010e06:	2b20      	cmp	r3, #32
 8010e08:	d002      	beq.n	8010e10 <create_name+0x188>
 8010e0a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010e0c:	2b2e      	cmp	r3, #46	@ 0x2e
 8010e0e:	d106      	bne.n	8010e1e <create_name+0x196>
		di--;
 8010e10:	697b      	ldr	r3, [r7, #20]
 8010e12:	3b01      	subs	r3, #1
 8010e14:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8010e16:	697b      	ldr	r3, [r7, #20]
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d1ea      	bne.n	8010df2 <create_name+0x16a>
 8010e1c:	e000      	b.n	8010e20 <create_name+0x198>
		if (w != ' ' && w != '.') break;
 8010e1e:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8010e20:	697b      	ldr	r3, [r7, #20]
 8010e22:	005b      	lsls	r3, r3, #1
 8010e24:	68fa      	ldr	r2, [r7, #12]
 8010e26:	4413      	add	r3, r2
 8010e28:	2200      	movs	r2, #0
 8010e2a:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8010e2c:	697b      	ldr	r3, [r7, #20]
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d101      	bne.n	8010e36 <create_name+0x1ae>
 8010e32:	2306      	movs	r3, #6
 8010e34:	e129      	b.n	801108a <create_name+0x402>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	3324      	adds	r3, #36	@ 0x24
 8010e3a:	220b      	movs	r2, #11
 8010e3c:	2120      	movs	r1, #32
 8010e3e:	4618      	mov	r0, r3
 8010e40:	f7fe fc11 	bl	800f666 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8010e44:	2300      	movs	r3, #0
 8010e46:	61bb      	str	r3, [r7, #24]
 8010e48:	e002      	b.n	8010e50 <create_name+0x1c8>
 8010e4a:	69bb      	ldr	r3, [r7, #24]
 8010e4c:	3301      	adds	r3, #1
 8010e4e:	61bb      	str	r3, [r7, #24]
 8010e50:	69bb      	ldr	r3, [r7, #24]
 8010e52:	005b      	lsls	r3, r3, #1
 8010e54:	68fa      	ldr	r2, [r7, #12]
 8010e56:	4413      	add	r3, r2
 8010e58:	881b      	ldrh	r3, [r3, #0]
 8010e5a:	2b20      	cmp	r3, #32
 8010e5c:	d0f5      	beq.n	8010e4a <create_name+0x1c2>
 8010e5e:	69bb      	ldr	r3, [r7, #24]
 8010e60:	005b      	lsls	r3, r3, #1
 8010e62:	68fa      	ldr	r2, [r7, #12]
 8010e64:	4413      	add	r3, r2
 8010e66:	881b      	ldrh	r3, [r3, #0]
 8010e68:	2b2e      	cmp	r3, #46	@ 0x2e
 8010e6a:	d0ee      	beq.n	8010e4a <create_name+0x1c2>
	if (si) cf |= NS_LOSS | NS_LFN;
 8010e6c:	69bb      	ldr	r3, [r7, #24]
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d009      	beq.n	8010e86 <create_name+0x1fe>
 8010e72:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010e76:	f043 0303 	orr.w	r3, r3, #3
 8010e7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8010e7e:	e002      	b.n	8010e86 <create_name+0x1fe>
 8010e80:	697b      	ldr	r3, [r7, #20]
 8010e82:	3b01      	subs	r3, #1
 8010e84:	617b      	str	r3, [r7, #20]
 8010e86:	697b      	ldr	r3, [r7, #20]
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d009      	beq.n	8010ea0 <create_name+0x218>
 8010e8c:	697a      	ldr	r2, [r7, #20]
 8010e8e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010e92:	4413      	add	r3, r2
 8010e94:	005b      	lsls	r3, r3, #1
 8010e96:	68fa      	ldr	r2, [r7, #12]
 8010e98:	4413      	add	r3, r2
 8010e9a:	881b      	ldrh	r3, [r3, #0]
 8010e9c:	2b2e      	cmp	r3, #46	@ 0x2e
 8010e9e:	d1ef      	bne.n	8010e80 <create_name+0x1f8>

	i = b = 0; ni = 8;
 8010ea0:	2300      	movs	r3, #0
 8010ea2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8010ea6:	2300      	movs	r3, #0
 8010ea8:	623b      	str	r3, [r7, #32]
 8010eaa:	2308      	movs	r3, #8
 8010eac:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8010eae:	69bb      	ldr	r3, [r7, #24]
 8010eb0:	1c5a      	adds	r2, r3, #1
 8010eb2:	61ba      	str	r2, [r7, #24]
 8010eb4:	005b      	lsls	r3, r3, #1
 8010eb6:	68fa      	ldr	r2, [r7, #12]
 8010eb8:	4413      	add	r3, r2
 8010eba:	881b      	ldrh	r3, [r3, #0]
 8010ebc:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8010ebe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	f000 8098 	beq.w	8010ff6 <create_name+0x36e>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8010ec6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010ec8:	2b20      	cmp	r3, #32
 8010eca:	d006      	beq.n	8010eda <create_name+0x252>
 8010ecc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010ece:	2b2e      	cmp	r3, #46	@ 0x2e
 8010ed0:	d10a      	bne.n	8010ee8 <create_name+0x260>
 8010ed2:	69ba      	ldr	r2, [r7, #24]
 8010ed4:	697b      	ldr	r3, [r7, #20]
 8010ed6:	429a      	cmp	r2, r3
 8010ed8:	d006      	beq.n	8010ee8 <create_name+0x260>
			cf |= NS_LOSS | NS_LFN; continue;
 8010eda:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010ede:	f043 0303 	orr.w	r3, r3, #3
 8010ee2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010ee6:	e085      	b.n	8010ff4 <create_name+0x36c>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8010ee8:	6a3a      	ldr	r2, [r7, #32]
 8010eea:	69fb      	ldr	r3, [r7, #28]
 8010eec:	429a      	cmp	r2, r3
 8010eee:	d203      	bcs.n	8010ef8 <create_name+0x270>
 8010ef0:	69ba      	ldr	r2, [r7, #24]
 8010ef2:	697b      	ldr	r3, [r7, #20]
 8010ef4:	429a      	cmp	r2, r3
 8010ef6:	d123      	bne.n	8010f40 <create_name+0x2b8>
			if (ni == 11) {				/* Long extension */
 8010ef8:	69fb      	ldr	r3, [r7, #28]
 8010efa:	2b0b      	cmp	r3, #11
 8010efc:	d106      	bne.n	8010f0c <create_name+0x284>
				cf |= NS_LOSS | NS_LFN; break;
 8010efe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010f02:	f043 0303 	orr.w	r3, r3, #3
 8010f06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010f0a:	e077      	b.n	8010ffc <create_name+0x374>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8010f0c:	69ba      	ldr	r2, [r7, #24]
 8010f0e:	697b      	ldr	r3, [r7, #20]
 8010f10:	429a      	cmp	r2, r3
 8010f12:	d005      	beq.n	8010f20 <create_name+0x298>
 8010f14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010f18:	f043 0303 	orr.w	r3, r3, #3
 8010f1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8010f20:	69ba      	ldr	r2, [r7, #24]
 8010f22:	697b      	ldr	r3, [r7, #20]
 8010f24:	429a      	cmp	r2, r3
 8010f26:	d868      	bhi.n	8010ffa <create_name+0x372>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8010f28:	697b      	ldr	r3, [r7, #20]
 8010f2a:	61bb      	str	r3, [r7, #24]
 8010f2c:	2308      	movs	r3, #8
 8010f2e:	623b      	str	r3, [r7, #32]
 8010f30:	230b      	movs	r3, #11
 8010f32:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8010f34:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010f38:	009b      	lsls	r3, r3, #2
 8010f3a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8010f3e:	e059      	b.n	8010ff4 <create_name+0x36c>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8010f40:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010f42:	2b7f      	cmp	r3, #127	@ 0x7f
 8010f44:	d914      	bls.n	8010f70 <create_name+0x2e8>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8010f46:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010f48:	2100      	movs	r1, #0
 8010f4a:	4618      	mov	r0, r3
 8010f4c:	f001 fdf0 	bl	8012b30 <ff_convert>
 8010f50:	4603      	mov	r3, r0
 8010f52:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8010f54:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d004      	beq.n	8010f64 <create_name+0x2dc>
 8010f5a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010f5c:	3b80      	subs	r3, #128	@ 0x80
 8010f5e:	4a10      	ldr	r2, [pc, #64]	@ (8010fa0 <create_name+0x318>)
 8010f60:	5cd3      	ldrb	r3, [r2, r3]
 8010f62:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8010f64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010f68:	f043 0302 	orr.w	r3, r3, #2
 8010f6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8010f70:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d007      	beq.n	8010f86 <create_name+0x2fe>
 8010f76:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010f78:	4619      	mov	r1, r3
 8010f7a:	480a      	ldr	r0, [pc, #40]	@ (8010fa4 <create_name+0x31c>)
 8010f7c:	f7fe fbb5 	bl	800f6ea <chk_chr>
 8010f80:	4603      	mov	r3, r0
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d010      	beq.n	8010fa8 <create_name+0x320>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8010f86:	235f      	movs	r3, #95	@ 0x5f
 8010f88:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8010f8a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010f8e:	f043 0303 	orr.w	r3, r3, #3
 8010f92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010f96:	e023      	b.n	8010fe0 <create_name+0x358>
 8010f98:	08013048 	.word	0x08013048
 8010f9c:	7ffffffe 	.word	0x7ffffffe
 8010fa0:	080130d0 	.word	0x080130d0
 8010fa4:	08013054 	.word	0x08013054
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8010fa8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010faa:	2b40      	cmp	r3, #64	@ 0x40
 8010fac:	d909      	bls.n	8010fc2 <create_name+0x33a>
 8010fae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010fb0:	2b5a      	cmp	r3, #90	@ 0x5a
 8010fb2:	d806      	bhi.n	8010fc2 <create_name+0x33a>
					b |= 2;
 8010fb4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010fb8:	f043 0302 	orr.w	r3, r3, #2
 8010fbc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8010fc0:	e00e      	b.n	8010fe0 <create_name+0x358>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8010fc2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010fc4:	2b60      	cmp	r3, #96	@ 0x60
 8010fc6:	d90b      	bls.n	8010fe0 <create_name+0x358>
 8010fc8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010fca:	2b7a      	cmp	r3, #122	@ 0x7a
 8010fcc:	d808      	bhi.n	8010fe0 <create_name+0x358>
						b |= 1; w -= 0x20;
 8010fce:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010fd2:	f043 0301 	orr.w	r3, r3, #1
 8010fd6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8010fda:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010fdc:	3b20      	subs	r3, #32
 8010fde:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8010fe0:	6a3b      	ldr	r3, [r7, #32]
 8010fe2:	1c5a      	adds	r2, r3, #1
 8010fe4:	623a      	str	r2, [r7, #32]
 8010fe6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8010fe8:	b2d1      	uxtb	r1, r2
 8010fea:	687a      	ldr	r2, [r7, #4]
 8010fec:	4413      	add	r3, r2
 8010fee:	460a      	mov	r2, r1
 8010ff0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8010ff4:	e75b      	b.n	8010eae <create_name+0x226>
		if (!w) break;					/* Break on end of the LFN */
 8010ff6:	bf00      	nop
 8010ff8:	e000      	b.n	8010ffc <create_name+0x374>
			if (si > di) break;			/* No extension */
 8010ffa:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8011002:	2be5      	cmp	r3, #229	@ 0xe5
 8011004:	d103      	bne.n	801100e <create_name+0x386>
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	2205      	movs	r2, #5
 801100a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 801100e:	69fb      	ldr	r3, [r7, #28]
 8011010:	2b08      	cmp	r3, #8
 8011012:	d104      	bne.n	801101e <create_name+0x396>
 8011014:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011018:	009b      	lsls	r3, r3, #2
 801101a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 801101e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011022:	f003 030c 	and.w	r3, r3, #12
 8011026:	2b0c      	cmp	r3, #12
 8011028:	d005      	beq.n	8011036 <create_name+0x3ae>
 801102a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801102e:	f003 0303 	and.w	r3, r3, #3
 8011032:	2b03      	cmp	r3, #3
 8011034:	d105      	bne.n	8011042 <create_name+0x3ba>
 8011036:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801103a:	f043 0302 	orr.w	r3, r3, #2
 801103e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8011042:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011046:	f003 0302 	and.w	r3, r3, #2
 801104a:	2b00      	cmp	r3, #0
 801104c:	d117      	bne.n	801107e <create_name+0x3f6>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 801104e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011052:	f003 0303 	and.w	r3, r3, #3
 8011056:	2b01      	cmp	r3, #1
 8011058:	d105      	bne.n	8011066 <create_name+0x3de>
 801105a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801105e:	f043 0310 	orr.w	r3, r3, #16
 8011062:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8011066:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801106a:	f003 030c 	and.w	r3, r3, #12
 801106e:	2b04      	cmp	r3, #4
 8011070:	d105      	bne.n	801107e <create_name+0x3f6>
 8011072:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011076:	f043 0308 	orr.w	r3, r3, #8
 801107a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8011084:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8011088:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 801108a:	4618      	mov	r0, r3
 801108c:	3728      	adds	r7, #40	@ 0x28
 801108e:	46bd      	mov	sp, r7
 8011090:	bd80      	pop	{r7, pc}
 8011092:	bf00      	nop

08011094 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8011094:	b580      	push	{r7, lr}
 8011096:	b086      	sub	sp, #24
 8011098:	af00      	add	r7, sp, #0
 801109a:	6078      	str	r0, [r7, #4]
 801109c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80110a2:	693b      	ldr	r3, [r7, #16]
 80110a4:	681b      	ldr	r3, [r3, #0]
 80110a6:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 80110a8:	683b      	ldr	r3, [r7, #0]
 80110aa:	781b      	ldrb	r3, [r3, #0]
 80110ac:	2b2f      	cmp	r3, #47	@ 0x2f
 80110ae:	d00b      	beq.n	80110c8 <follow_path+0x34>
 80110b0:	683b      	ldr	r3, [r7, #0]
 80110b2:	781b      	ldrb	r3, [r3, #0]
 80110b4:	2b5c      	cmp	r3, #92	@ 0x5c
 80110b6:	d007      	beq.n	80110c8 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	69da      	ldr	r2, [r3, #28]
 80110bc:	693b      	ldr	r3, [r7, #16]
 80110be:	609a      	str	r2, [r3, #8]
 80110c0:	e00d      	b.n	80110de <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80110c2:	683b      	ldr	r3, [r7, #0]
 80110c4:	3301      	adds	r3, #1
 80110c6:	603b      	str	r3, [r7, #0]
 80110c8:	683b      	ldr	r3, [r7, #0]
 80110ca:	781b      	ldrb	r3, [r3, #0]
 80110cc:	2b2f      	cmp	r3, #47	@ 0x2f
 80110ce:	d0f8      	beq.n	80110c2 <follow_path+0x2e>
 80110d0:	683b      	ldr	r3, [r7, #0]
 80110d2:	781b      	ldrb	r3, [r3, #0]
 80110d4:	2b5c      	cmp	r3, #92	@ 0x5c
 80110d6:	d0f4      	beq.n	80110c2 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 80110d8:	693b      	ldr	r3, [r7, #16]
 80110da:	2200      	movs	r2, #0
 80110dc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80110de:	683b      	ldr	r3, [r7, #0]
 80110e0:	781b      	ldrb	r3, [r3, #0]
 80110e2:	2b1f      	cmp	r3, #31
 80110e4:	d80a      	bhi.n	80110fc <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	2280      	movs	r2, #128	@ 0x80
 80110ea:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80110ee:	2100      	movs	r1, #0
 80110f0:	6878      	ldr	r0, [r7, #4]
 80110f2:	f7ff f8a4 	bl	801023e <dir_sdi>
 80110f6:	4603      	mov	r3, r0
 80110f8:	75fb      	strb	r3, [r7, #23]
 80110fa:	e05b      	b.n	80111b4 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80110fc:	463b      	mov	r3, r7
 80110fe:	4619      	mov	r1, r3
 8011100:	6878      	ldr	r0, [r7, #4]
 8011102:	f7ff fdc1 	bl	8010c88 <create_name>
 8011106:	4603      	mov	r3, r0
 8011108:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801110a:	7dfb      	ldrb	r3, [r7, #23]
 801110c:	2b00      	cmp	r3, #0
 801110e:	d14c      	bne.n	80111aa <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 8011110:	6878      	ldr	r0, [r7, #4]
 8011112:	f7ff fc00 	bl	8010916 <dir_find>
 8011116:	4603      	mov	r3, r0
 8011118:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8011120:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8011122:	7dfb      	ldrb	r3, [r7, #23]
 8011124:	2b00      	cmp	r3, #0
 8011126:	d01b      	beq.n	8011160 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8011128:	7dfb      	ldrb	r3, [r7, #23]
 801112a:	2b04      	cmp	r3, #4
 801112c:	d13f      	bne.n	80111ae <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 801112e:	7afb      	ldrb	r3, [r7, #11]
 8011130:	f003 0320 	and.w	r3, r3, #32
 8011134:	2b00      	cmp	r3, #0
 8011136:	d00b      	beq.n	8011150 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8011138:	7afb      	ldrb	r3, [r7, #11]
 801113a:	f003 0304 	and.w	r3, r3, #4
 801113e:	2b00      	cmp	r3, #0
 8011140:	d031      	beq.n	80111a6 <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	2280      	movs	r2, #128	@ 0x80
 8011146:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
						res = FR_OK;
 801114a:	2300      	movs	r3, #0
 801114c:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 801114e:	e02e      	b.n	80111ae <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8011150:	7afb      	ldrb	r3, [r7, #11]
 8011152:	f003 0304 	and.w	r3, r3, #4
 8011156:	2b00      	cmp	r3, #0
 8011158:	d129      	bne.n	80111ae <follow_path+0x11a>
 801115a:	2305      	movs	r3, #5
 801115c:	75fb      	strb	r3, [r7, #23]
				break;
 801115e:	e026      	b.n	80111ae <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011160:	7afb      	ldrb	r3, [r7, #11]
 8011162:	f003 0304 	and.w	r3, r3, #4
 8011166:	2b00      	cmp	r3, #0
 8011168:	d123      	bne.n	80111b2 <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801116a:	693b      	ldr	r3, [r7, #16]
 801116c:	799b      	ldrb	r3, [r3, #6]
 801116e:	f003 0310 	and.w	r3, r3, #16
 8011172:	2b00      	cmp	r3, #0
 8011174:	d102      	bne.n	801117c <follow_path+0xe8>
				res = FR_NO_PATH; break;
 8011176:	2305      	movs	r3, #5
 8011178:	75fb      	strb	r3, [r7, #23]
 801117a:	e01b      	b.n	80111b4 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	695b      	ldr	r3, [r3, #20]
 8011186:	68fa      	ldr	r2, [r7, #12]
 8011188:	8992      	ldrh	r2, [r2, #12]
 801118a:	fbb3 f0f2 	udiv	r0, r3, r2
 801118e:	fb00 f202 	mul.w	r2, r0, r2
 8011192:	1a9b      	subs	r3, r3, r2
 8011194:	440b      	add	r3, r1
 8011196:	4619      	mov	r1, r3
 8011198:	68f8      	ldr	r0, [r7, #12]
 801119a:	f7ff f9f6 	bl	801058a <ld_clust>
 801119e:	4602      	mov	r2, r0
 80111a0:	693b      	ldr	r3, [r7, #16]
 80111a2:	609a      	str	r2, [r3, #8]
 80111a4:	e7aa      	b.n	80110fc <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 80111a6:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80111a8:	e7a8      	b.n	80110fc <follow_path+0x68>
			if (res != FR_OK) break;
 80111aa:	bf00      	nop
 80111ac:	e002      	b.n	80111b4 <follow_path+0x120>
				break;
 80111ae:	bf00      	nop
 80111b0:	e000      	b.n	80111b4 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80111b2:	bf00      	nop
			}
		}
	}

	return res;
 80111b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80111b6:	4618      	mov	r0, r3
 80111b8:	3718      	adds	r7, #24
 80111ba:	46bd      	mov	sp, r7
 80111bc:	bd80      	pop	{r7, pc}

080111be <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80111be:	b480      	push	{r7}
 80111c0:	b087      	sub	sp, #28
 80111c2:	af00      	add	r7, sp, #0
 80111c4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80111c6:	f04f 33ff 	mov.w	r3, #4294967295
 80111ca:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	681b      	ldr	r3, [r3, #0]
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d031      	beq.n	8011238 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	617b      	str	r3, [r7, #20]
 80111da:	e002      	b.n	80111e2 <get_ldnumber+0x24>
 80111dc:	697b      	ldr	r3, [r7, #20]
 80111de:	3301      	adds	r3, #1
 80111e0:	617b      	str	r3, [r7, #20]
 80111e2:	697b      	ldr	r3, [r7, #20]
 80111e4:	781b      	ldrb	r3, [r3, #0]
 80111e6:	2b1f      	cmp	r3, #31
 80111e8:	d903      	bls.n	80111f2 <get_ldnumber+0x34>
 80111ea:	697b      	ldr	r3, [r7, #20]
 80111ec:	781b      	ldrb	r3, [r3, #0]
 80111ee:	2b3a      	cmp	r3, #58	@ 0x3a
 80111f0:	d1f4      	bne.n	80111dc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80111f2:	697b      	ldr	r3, [r7, #20]
 80111f4:	781b      	ldrb	r3, [r3, #0]
 80111f6:	2b3a      	cmp	r3, #58	@ 0x3a
 80111f8:	d11c      	bne.n	8011234 <get_ldnumber+0x76>
			tp = *path;
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	681b      	ldr	r3, [r3, #0]
 80111fe:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8011200:	68fb      	ldr	r3, [r7, #12]
 8011202:	1c5a      	adds	r2, r3, #1
 8011204:	60fa      	str	r2, [r7, #12]
 8011206:	781b      	ldrb	r3, [r3, #0]
 8011208:	3b30      	subs	r3, #48	@ 0x30
 801120a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801120c:	68bb      	ldr	r3, [r7, #8]
 801120e:	2b09      	cmp	r3, #9
 8011210:	d80e      	bhi.n	8011230 <get_ldnumber+0x72>
 8011212:	68fa      	ldr	r2, [r7, #12]
 8011214:	697b      	ldr	r3, [r7, #20]
 8011216:	429a      	cmp	r2, r3
 8011218:	d10a      	bne.n	8011230 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801121a:	68bb      	ldr	r3, [r7, #8]
 801121c:	2b00      	cmp	r3, #0
 801121e:	d107      	bne.n	8011230 <get_ldnumber+0x72>
					vol = (int)i;
 8011220:	68bb      	ldr	r3, [r7, #8]
 8011222:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8011224:	697b      	ldr	r3, [r7, #20]
 8011226:	3301      	adds	r3, #1
 8011228:	617b      	str	r3, [r7, #20]
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	697a      	ldr	r2, [r7, #20]
 801122e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8011230:	693b      	ldr	r3, [r7, #16]
 8011232:	e002      	b.n	801123a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8011234:	2300      	movs	r3, #0
 8011236:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8011238:	693b      	ldr	r3, [r7, #16]
}
 801123a:	4618      	mov	r0, r3
 801123c:	371c      	adds	r7, #28
 801123e:	46bd      	mov	sp, r7
 8011240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011244:	4770      	bx	lr
	...

08011248 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8011248:	b580      	push	{r7, lr}
 801124a:	b082      	sub	sp, #8
 801124c:	af00      	add	r7, sp, #0
 801124e:	6078      	str	r0, [r7, #4]
 8011250:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	2200      	movs	r2, #0
 8011256:	70da      	strb	r2, [r3, #3]
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	f04f 32ff 	mov.w	r2, #4294967295
 801125e:	639a      	str	r2, [r3, #56]	@ 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8011260:	6839      	ldr	r1, [r7, #0]
 8011262:	6878      	ldr	r0, [r7, #4]
 8011264:	f7fe fc0c 	bl	800fa80 <move_window>
 8011268:	4603      	mov	r3, r0
 801126a:	2b00      	cmp	r3, #0
 801126c:	d001      	beq.n	8011272 <check_fs+0x2a>
 801126e:	2304      	movs	r3, #4
 8011270:	e038      	b.n	80112e4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	333c      	adds	r3, #60	@ 0x3c
 8011276:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801127a:	4618      	mov	r0, r3
 801127c:	f7fe f950 	bl	800f520 <ld_word>
 8011280:	4603      	mov	r3, r0
 8011282:	461a      	mov	r2, r3
 8011284:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8011288:	429a      	cmp	r2, r3
 801128a:	d001      	beq.n	8011290 <check_fs+0x48>
 801128c:	2303      	movs	r3, #3
 801128e:	e029      	b.n	80112e4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011296:	2be9      	cmp	r3, #233	@ 0xe9
 8011298:	d009      	beq.n	80112ae <check_fs+0x66>
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80112a0:	2beb      	cmp	r3, #235	@ 0xeb
 80112a2:	d11e      	bne.n	80112e2 <check_fs+0x9a>
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80112aa:	2b90      	cmp	r3, #144	@ 0x90
 80112ac:	d119      	bne.n	80112e2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	333c      	adds	r3, #60	@ 0x3c
 80112b2:	3336      	adds	r3, #54	@ 0x36
 80112b4:	4618      	mov	r0, r3
 80112b6:	f7fe f94b 	bl	800f550 <ld_dword>
 80112ba:	4603      	mov	r3, r0
 80112bc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80112c0:	4a0a      	ldr	r2, [pc, #40]	@ (80112ec <check_fs+0xa4>)
 80112c2:	4293      	cmp	r3, r2
 80112c4:	d101      	bne.n	80112ca <check_fs+0x82>
 80112c6:	2300      	movs	r3, #0
 80112c8:	e00c      	b.n	80112e4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	333c      	adds	r3, #60	@ 0x3c
 80112ce:	3352      	adds	r3, #82	@ 0x52
 80112d0:	4618      	mov	r0, r3
 80112d2:	f7fe f93d 	bl	800f550 <ld_dword>
 80112d6:	4603      	mov	r3, r0
 80112d8:	4a05      	ldr	r2, [pc, #20]	@ (80112f0 <check_fs+0xa8>)
 80112da:	4293      	cmp	r3, r2
 80112dc:	d101      	bne.n	80112e2 <check_fs+0x9a>
 80112de:	2300      	movs	r3, #0
 80112e0:	e000      	b.n	80112e4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80112e2:	2302      	movs	r3, #2
}
 80112e4:	4618      	mov	r0, r3
 80112e6:	3708      	adds	r7, #8
 80112e8:	46bd      	mov	sp, r7
 80112ea:	bd80      	pop	{r7, pc}
 80112ec:	00544146 	.word	0x00544146
 80112f0:	33544146 	.word	0x33544146

080112f4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80112f4:	b580      	push	{r7, lr}
 80112f6:	b096      	sub	sp, #88	@ 0x58
 80112f8:	af00      	add	r7, sp, #0
 80112fa:	60f8      	str	r0, [r7, #12]
 80112fc:	60b9      	str	r1, [r7, #8]
 80112fe:	4613      	mov	r3, r2
 8011300:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8011302:	68bb      	ldr	r3, [r7, #8]
 8011304:	2200      	movs	r2, #0
 8011306:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8011308:	68f8      	ldr	r0, [r7, #12]
 801130a:	f7ff ff58 	bl	80111be <get_ldnumber>
 801130e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8011310:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011312:	2b00      	cmp	r3, #0
 8011314:	da01      	bge.n	801131a <find_volume+0x26>
 8011316:	230b      	movs	r3, #11
 8011318:	e268      	b.n	80117ec <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801131a:	4a9f      	ldr	r2, [pc, #636]	@ (8011598 <find_volume+0x2a4>)
 801131c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801131e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011322:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8011324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011326:	2b00      	cmp	r3, #0
 8011328:	d101      	bne.n	801132e <find_volume+0x3a>
 801132a:	230c      	movs	r3, #12
 801132c:	e25e      	b.n	80117ec <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801132e:	68bb      	ldr	r3, [r7, #8]
 8011330:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011332:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8011334:	79fb      	ldrb	r3, [r7, #7]
 8011336:	f023 0301 	bic.w	r3, r3, #1
 801133a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801133c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801133e:	781b      	ldrb	r3, [r3, #0]
 8011340:	2b00      	cmp	r3, #0
 8011342:	d01a      	beq.n	801137a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8011344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011346:	785b      	ldrb	r3, [r3, #1]
 8011348:	4618      	mov	r0, r3
 801134a:	f7fe f849 	bl	800f3e0 <disk_status>
 801134e:	4603      	mov	r3, r0
 8011350:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8011354:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011358:	f003 0301 	and.w	r3, r3, #1
 801135c:	2b00      	cmp	r3, #0
 801135e:	d10c      	bne.n	801137a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8011360:	79fb      	ldrb	r3, [r7, #7]
 8011362:	2b00      	cmp	r3, #0
 8011364:	d007      	beq.n	8011376 <find_volume+0x82>
 8011366:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801136a:	f003 0304 	and.w	r3, r3, #4
 801136e:	2b00      	cmp	r3, #0
 8011370:	d001      	beq.n	8011376 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8011372:	230a      	movs	r3, #10
 8011374:	e23a      	b.n	80117ec <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8011376:	2300      	movs	r3, #0
 8011378:	e238      	b.n	80117ec <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801137a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801137c:	2200      	movs	r2, #0
 801137e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8011380:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011382:	b2da      	uxtb	r2, r3
 8011384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011386:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8011388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801138a:	785b      	ldrb	r3, [r3, #1]
 801138c:	4618      	mov	r0, r3
 801138e:	f7fe f841 	bl	800f414 <disk_initialize>
 8011392:	4603      	mov	r3, r0
 8011394:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8011398:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801139c:	f003 0301 	and.w	r3, r3, #1
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	d001      	beq.n	80113a8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80113a4:	2303      	movs	r3, #3
 80113a6:	e221      	b.n	80117ec <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80113a8:	79fb      	ldrb	r3, [r7, #7]
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d007      	beq.n	80113be <find_volume+0xca>
 80113ae:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80113b2:	f003 0304 	and.w	r3, r3, #4
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d001      	beq.n	80113be <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80113ba:	230a      	movs	r3, #10
 80113bc:	e216      	b.n	80117ec <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80113be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80113c0:	7858      	ldrb	r0, [r3, #1]
 80113c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80113c4:	330c      	adds	r3, #12
 80113c6:	461a      	mov	r2, r3
 80113c8:	2102      	movs	r1, #2
 80113ca:	f7fe f88b 	bl	800f4e4 <disk_ioctl>
 80113ce:	4603      	mov	r3, r0
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d001      	beq.n	80113d8 <find_volume+0xe4>
 80113d4:	2301      	movs	r3, #1
 80113d6:	e209      	b.n	80117ec <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80113d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80113da:	899b      	ldrh	r3, [r3, #12]
 80113dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80113e0:	d80d      	bhi.n	80113fe <find_volume+0x10a>
 80113e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80113e4:	899b      	ldrh	r3, [r3, #12]
 80113e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80113ea:	d308      	bcc.n	80113fe <find_volume+0x10a>
 80113ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80113ee:	899b      	ldrh	r3, [r3, #12]
 80113f0:	461a      	mov	r2, r3
 80113f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80113f4:	899b      	ldrh	r3, [r3, #12]
 80113f6:	3b01      	subs	r3, #1
 80113f8:	4013      	ands	r3, r2
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d001      	beq.n	8011402 <find_volume+0x10e>
 80113fe:	2301      	movs	r3, #1
 8011400:	e1f4      	b.n	80117ec <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8011402:	2300      	movs	r3, #0
 8011404:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8011406:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8011408:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801140a:	f7ff ff1d 	bl	8011248 <check_fs>
 801140e:	4603      	mov	r3, r0
 8011410:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8011414:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011418:	2b02      	cmp	r3, #2
 801141a:	d149      	bne.n	80114b0 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801141c:	2300      	movs	r3, #0
 801141e:	643b      	str	r3, [r7, #64]	@ 0x40
 8011420:	e01e      	b.n	8011460 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8011422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011424:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8011428:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801142a:	011b      	lsls	r3, r3, #4
 801142c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8011430:	4413      	add	r3, r2
 8011432:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8011434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011436:	3304      	adds	r3, #4
 8011438:	781b      	ldrb	r3, [r3, #0]
 801143a:	2b00      	cmp	r3, #0
 801143c:	d006      	beq.n	801144c <find_volume+0x158>
 801143e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011440:	3308      	adds	r3, #8
 8011442:	4618      	mov	r0, r3
 8011444:	f7fe f884 	bl	800f550 <ld_dword>
 8011448:	4602      	mov	r2, r0
 801144a:	e000      	b.n	801144e <find_volume+0x15a>
 801144c:	2200      	movs	r2, #0
 801144e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011450:	009b      	lsls	r3, r3, #2
 8011452:	3358      	adds	r3, #88	@ 0x58
 8011454:	443b      	add	r3, r7
 8011456:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801145a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801145c:	3301      	adds	r3, #1
 801145e:	643b      	str	r3, [r7, #64]	@ 0x40
 8011460:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011462:	2b03      	cmp	r3, #3
 8011464:	d9dd      	bls.n	8011422 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8011466:	2300      	movs	r3, #0
 8011468:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 801146a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801146c:	2b00      	cmp	r3, #0
 801146e:	d002      	beq.n	8011476 <find_volume+0x182>
 8011470:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011472:	3b01      	subs	r3, #1
 8011474:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8011476:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011478:	009b      	lsls	r3, r3, #2
 801147a:	3358      	adds	r3, #88	@ 0x58
 801147c:	443b      	add	r3, r7
 801147e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8011482:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8011484:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011486:	2b00      	cmp	r3, #0
 8011488:	d005      	beq.n	8011496 <find_volume+0x1a2>
 801148a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801148c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801148e:	f7ff fedb 	bl	8011248 <check_fs>
 8011492:	4603      	mov	r3, r0
 8011494:	e000      	b.n	8011498 <find_volume+0x1a4>
 8011496:	2303      	movs	r3, #3
 8011498:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801149c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80114a0:	2b01      	cmp	r3, #1
 80114a2:	d905      	bls.n	80114b0 <find_volume+0x1bc>
 80114a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80114a6:	3301      	adds	r3, #1
 80114a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80114aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80114ac:	2b03      	cmp	r3, #3
 80114ae:	d9e2      	bls.n	8011476 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80114b0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80114b4:	2b04      	cmp	r3, #4
 80114b6:	d101      	bne.n	80114bc <find_volume+0x1c8>
 80114b8:	2301      	movs	r3, #1
 80114ba:	e197      	b.n	80117ec <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80114bc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80114c0:	2b01      	cmp	r3, #1
 80114c2:	d901      	bls.n	80114c8 <find_volume+0x1d4>
 80114c4:	230d      	movs	r3, #13
 80114c6:	e191      	b.n	80117ec <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80114c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114ca:	333c      	adds	r3, #60	@ 0x3c
 80114cc:	330b      	adds	r3, #11
 80114ce:	4618      	mov	r0, r3
 80114d0:	f7fe f826 	bl	800f520 <ld_word>
 80114d4:	4603      	mov	r3, r0
 80114d6:	461a      	mov	r2, r3
 80114d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114da:	899b      	ldrh	r3, [r3, #12]
 80114dc:	429a      	cmp	r2, r3
 80114de:	d001      	beq.n	80114e4 <find_volume+0x1f0>
 80114e0:	230d      	movs	r3, #13
 80114e2:	e183      	b.n	80117ec <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80114e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114e6:	333c      	adds	r3, #60	@ 0x3c
 80114e8:	3316      	adds	r3, #22
 80114ea:	4618      	mov	r0, r3
 80114ec:	f7fe f818 	bl	800f520 <ld_word>
 80114f0:	4603      	mov	r3, r0
 80114f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80114f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d106      	bne.n	8011508 <find_volume+0x214>
 80114fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114fc:	333c      	adds	r3, #60	@ 0x3c
 80114fe:	3324      	adds	r3, #36	@ 0x24
 8011500:	4618      	mov	r0, r3
 8011502:	f7fe f825 	bl	800f550 <ld_dword>
 8011506:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8011508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801150a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801150c:	625a      	str	r2, [r3, #36]	@ 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801150e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011510:	f893 204c 	ldrb.w	r2, [r3, #76]	@ 0x4c
 8011514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011516:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8011518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801151a:	789b      	ldrb	r3, [r3, #2]
 801151c:	2b01      	cmp	r3, #1
 801151e:	d005      	beq.n	801152c <find_volume+0x238>
 8011520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011522:	789b      	ldrb	r3, [r3, #2]
 8011524:	2b02      	cmp	r3, #2
 8011526:	d001      	beq.n	801152c <find_volume+0x238>
 8011528:	230d      	movs	r3, #13
 801152a:	e15f      	b.n	80117ec <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801152c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801152e:	789b      	ldrb	r3, [r3, #2]
 8011530:	461a      	mov	r2, r3
 8011532:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011534:	fb02 f303 	mul.w	r3, r2, r3
 8011538:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801153a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801153c:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8011540:	461a      	mov	r2, r3
 8011542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011544:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8011546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011548:	895b      	ldrh	r3, [r3, #10]
 801154a:	2b00      	cmp	r3, #0
 801154c:	d008      	beq.n	8011560 <find_volume+0x26c>
 801154e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011550:	895b      	ldrh	r3, [r3, #10]
 8011552:	461a      	mov	r2, r3
 8011554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011556:	895b      	ldrh	r3, [r3, #10]
 8011558:	3b01      	subs	r3, #1
 801155a:	4013      	ands	r3, r2
 801155c:	2b00      	cmp	r3, #0
 801155e:	d001      	beq.n	8011564 <find_volume+0x270>
 8011560:	230d      	movs	r3, #13
 8011562:	e143      	b.n	80117ec <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8011564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011566:	333c      	adds	r3, #60	@ 0x3c
 8011568:	3311      	adds	r3, #17
 801156a:	4618      	mov	r0, r3
 801156c:	f7fd ffd8 	bl	800f520 <ld_word>
 8011570:	4603      	mov	r3, r0
 8011572:	461a      	mov	r2, r3
 8011574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011576:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8011578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801157a:	891b      	ldrh	r3, [r3, #8]
 801157c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801157e:	8992      	ldrh	r2, [r2, #12]
 8011580:	0952      	lsrs	r2, r2, #5
 8011582:	b292      	uxth	r2, r2
 8011584:	fbb3 f1f2 	udiv	r1, r3, r2
 8011588:	fb01 f202 	mul.w	r2, r1, r2
 801158c:	1a9b      	subs	r3, r3, r2
 801158e:	b29b      	uxth	r3, r3
 8011590:	2b00      	cmp	r3, #0
 8011592:	d003      	beq.n	801159c <find_volume+0x2a8>
 8011594:	230d      	movs	r3, #13
 8011596:	e129      	b.n	80117ec <find_volume+0x4f8>
 8011598:	240029e8 	.word	0x240029e8

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801159c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801159e:	333c      	adds	r3, #60	@ 0x3c
 80115a0:	3313      	adds	r3, #19
 80115a2:	4618      	mov	r0, r3
 80115a4:	f7fd ffbc 	bl	800f520 <ld_word>
 80115a8:	4603      	mov	r3, r0
 80115aa:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80115ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d106      	bne.n	80115c0 <find_volume+0x2cc>
 80115b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80115b4:	333c      	adds	r3, #60	@ 0x3c
 80115b6:	3320      	adds	r3, #32
 80115b8:	4618      	mov	r0, r3
 80115ba:	f7fd ffc9 	bl	800f550 <ld_dword>
 80115be:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80115c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80115c2:	333c      	adds	r3, #60	@ 0x3c
 80115c4:	330e      	adds	r3, #14
 80115c6:	4618      	mov	r0, r3
 80115c8:	f7fd ffaa 	bl	800f520 <ld_word>
 80115cc:	4603      	mov	r3, r0
 80115ce:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80115d0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d101      	bne.n	80115da <find_volume+0x2e6>
 80115d6:	230d      	movs	r3, #13
 80115d8:	e108      	b.n	80117ec <find_volume+0x4f8>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80115da:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80115dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80115de:	4413      	add	r3, r2
 80115e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80115e2:	8911      	ldrh	r1, [r2, #8]
 80115e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80115e6:	8992      	ldrh	r2, [r2, #12]
 80115e8:	0952      	lsrs	r2, r2, #5
 80115ea:	b292      	uxth	r2, r2
 80115ec:	fbb1 f2f2 	udiv	r2, r1, r2
 80115f0:	b292      	uxth	r2, r2
 80115f2:	4413      	add	r3, r2
 80115f4:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80115f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80115f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80115fa:	429a      	cmp	r2, r3
 80115fc:	d201      	bcs.n	8011602 <find_volume+0x30e>
 80115fe:	230d      	movs	r3, #13
 8011600:	e0f4      	b.n	80117ec <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8011602:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011606:	1ad3      	subs	r3, r2, r3
 8011608:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801160a:	8952      	ldrh	r2, [r2, #10]
 801160c:	fbb3 f3f2 	udiv	r3, r3, r2
 8011610:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8011612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011614:	2b00      	cmp	r3, #0
 8011616:	d101      	bne.n	801161c <find_volume+0x328>
 8011618:	230d      	movs	r3, #13
 801161a:	e0e7      	b.n	80117ec <find_volume+0x4f8>
		fmt = FS_FAT32;
 801161c:	2303      	movs	r3, #3
 801161e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8011622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011624:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8011628:	4293      	cmp	r3, r2
 801162a:	d802      	bhi.n	8011632 <find_volume+0x33e>
 801162c:	2302      	movs	r3, #2
 801162e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8011632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011634:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8011638:	4293      	cmp	r3, r2
 801163a:	d802      	bhi.n	8011642 <find_volume+0x34e>
 801163c:	2301      	movs	r3, #1
 801163e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8011642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011644:	1c9a      	adds	r2, r3, #2
 8011646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011648:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 801164a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801164c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801164e:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8011650:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8011652:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011654:	441a      	add	r2, r3
 8011656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011658:	62da      	str	r2, [r3, #44]	@ 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 801165a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801165c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801165e:	441a      	add	r2, r3
 8011660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011662:	635a      	str	r2, [r3, #52]	@ 0x34
		if (fmt == FS_FAT32) {
 8011664:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011668:	2b03      	cmp	r3, #3
 801166a:	d11e      	bne.n	80116aa <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801166c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801166e:	333c      	adds	r3, #60	@ 0x3c
 8011670:	332a      	adds	r3, #42	@ 0x2a
 8011672:	4618      	mov	r0, r3
 8011674:	f7fd ff54 	bl	800f520 <ld_word>
 8011678:	4603      	mov	r3, r0
 801167a:	2b00      	cmp	r3, #0
 801167c:	d001      	beq.n	8011682 <find_volume+0x38e>
 801167e:	230d      	movs	r3, #13
 8011680:	e0b4      	b.n	80117ec <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8011682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011684:	891b      	ldrh	r3, [r3, #8]
 8011686:	2b00      	cmp	r3, #0
 8011688:	d001      	beq.n	801168e <find_volume+0x39a>
 801168a:	230d      	movs	r3, #13
 801168c:	e0ae      	b.n	80117ec <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801168e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011690:	333c      	adds	r3, #60	@ 0x3c
 8011692:	332c      	adds	r3, #44	@ 0x2c
 8011694:	4618      	mov	r0, r3
 8011696:	f7fd ff5b 	bl	800f550 <ld_dword>
 801169a:	4602      	mov	r2, r0
 801169c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801169e:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80116a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116a2:	6a1b      	ldr	r3, [r3, #32]
 80116a4:	009b      	lsls	r3, r3, #2
 80116a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80116a8:	e01f      	b.n	80116ea <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80116aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116ac:	891b      	ldrh	r3, [r3, #8]
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d101      	bne.n	80116b6 <find_volume+0x3c2>
 80116b2:	230d      	movs	r3, #13
 80116b4:	e09a      	b.n	80117ec <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80116b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80116ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80116bc:	441a      	add	r2, r3
 80116be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116c0:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80116c2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80116c6:	2b02      	cmp	r3, #2
 80116c8:	d103      	bne.n	80116d2 <find_volume+0x3de>
 80116ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116cc:	6a1b      	ldr	r3, [r3, #32]
 80116ce:	005b      	lsls	r3, r3, #1
 80116d0:	e00a      	b.n	80116e8 <find_volume+0x3f4>
 80116d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116d4:	6a1a      	ldr	r2, [r3, #32]
 80116d6:	4613      	mov	r3, r2
 80116d8:	005b      	lsls	r3, r3, #1
 80116da:	4413      	add	r3, r2
 80116dc:	085a      	lsrs	r2, r3, #1
 80116de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116e0:	6a1b      	ldr	r3, [r3, #32]
 80116e2:	f003 0301 	and.w	r3, r3, #1
 80116e6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80116e8:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80116ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80116ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116f0:	899b      	ldrh	r3, [r3, #12]
 80116f2:	4619      	mov	r1, r3
 80116f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80116f6:	440b      	add	r3, r1
 80116f8:	3b01      	subs	r3, #1
 80116fa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80116fc:	8989      	ldrh	r1, [r1, #12]
 80116fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8011702:	429a      	cmp	r2, r3
 8011704:	d201      	bcs.n	801170a <find_volume+0x416>
 8011706:	230d      	movs	r3, #13
 8011708:	e070      	b.n	80117ec <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801170a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801170c:	f04f 32ff 	mov.w	r2, #4294967295
 8011710:	619a      	str	r2, [r3, #24]
 8011712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011714:	699a      	ldr	r2, [r3, #24]
 8011716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011718:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 801171a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801171c:	2280      	movs	r2, #128	@ 0x80
 801171e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8011720:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011724:	2b03      	cmp	r3, #3
 8011726:	d149      	bne.n	80117bc <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8011728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801172a:	333c      	adds	r3, #60	@ 0x3c
 801172c:	3330      	adds	r3, #48	@ 0x30
 801172e:	4618      	mov	r0, r3
 8011730:	f7fd fef6 	bl	800f520 <ld_word>
 8011734:	4603      	mov	r3, r0
 8011736:	2b01      	cmp	r3, #1
 8011738:	d140      	bne.n	80117bc <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 801173a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801173c:	3301      	adds	r3, #1
 801173e:	4619      	mov	r1, r3
 8011740:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8011742:	f7fe f99d 	bl	800fa80 <move_window>
 8011746:	4603      	mov	r3, r0
 8011748:	2b00      	cmp	r3, #0
 801174a:	d137      	bne.n	80117bc <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 801174c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801174e:	2200      	movs	r2, #0
 8011750:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8011752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011754:	333c      	adds	r3, #60	@ 0x3c
 8011756:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801175a:	4618      	mov	r0, r3
 801175c:	f7fd fee0 	bl	800f520 <ld_word>
 8011760:	4603      	mov	r3, r0
 8011762:	461a      	mov	r2, r3
 8011764:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8011768:	429a      	cmp	r2, r3
 801176a:	d127      	bne.n	80117bc <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801176c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801176e:	333c      	adds	r3, #60	@ 0x3c
 8011770:	4618      	mov	r0, r3
 8011772:	f7fd feed 	bl	800f550 <ld_dword>
 8011776:	4603      	mov	r3, r0
 8011778:	4a1e      	ldr	r2, [pc, #120]	@ (80117f4 <find_volume+0x500>)
 801177a:	4293      	cmp	r3, r2
 801177c:	d11e      	bne.n	80117bc <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801177e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011780:	333c      	adds	r3, #60	@ 0x3c
 8011782:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8011786:	4618      	mov	r0, r3
 8011788:	f7fd fee2 	bl	800f550 <ld_dword>
 801178c:	4603      	mov	r3, r0
 801178e:	4a1a      	ldr	r2, [pc, #104]	@ (80117f8 <find_volume+0x504>)
 8011790:	4293      	cmp	r3, r2
 8011792:	d113      	bne.n	80117bc <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8011794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011796:	333c      	adds	r3, #60	@ 0x3c
 8011798:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 801179c:	4618      	mov	r0, r3
 801179e:	f7fd fed7 	bl	800f550 <ld_dword>
 80117a2:	4602      	mov	r2, r0
 80117a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117a6:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80117a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117aa:	333c      	adds	r3, #60	@ 0x3c
 80117ac:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80117b0:	4618      	mov	r0, r3
 80117b2:	f7fd fecd 	bl	800f550 <ld_dword>
 80117b6:	4602      	mov	r2, r0
 80117b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117ba:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80117bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117be:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80117c2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80117c4:	4b0d      	ldr	r3, [pc, #52]	@ (80117fc <find_volume+0x508>)
 80117c6:	881b      	ldrh	r3, [r3, #0]
 80117c8:	3301      	adds	r3, #1
 80117ca:	b29a      	uxth	r2, r3
 80117cc:	4b0b      	ldr	r3, [pc, #44]	@ (80117fc <find_volume+0x508>)
 80117ce:	801a      	strh	r2, [r3, #0]
 80117d0:	4b0a      	ldr	r3, [pc, #40]	@ (80117fc <find_volume+0x508>)
 80117d2:	881a      	ldrh	r2, [r3, #0]
 80117d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117d6:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80117d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117da:	4a09      	ldr	r2, [pc, #36]	@ (8011800 <find_volume+0x50c>)
 80117dc:	611a      	str	r2, [r3, #16]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 80117de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117e0:	2200      	movs	r2, #0
 80117e2:	61da      	str	r2, [r3, #28]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80117e4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80117e6:	f7fe f8e3 	bl	800f9b0 <clear_lock>
#endif
	return FR_OK;
 80117ea:	2300      	movs	r3, #0
}
 80117ec:	4618      	mov	r0, r3
 80117ee:	3758      	adds	r7, #88	@ 0x58
 80117f0:	46bd      	mov	sp, r7
 80117f2:	bd80      	pop	{r7, pc}
 80117f4:	41615252 	.word	0x41615252
 80117f8:	61417272 	.word	0x61417272
 80117fc:	240029ec 	.word	0x240029ec
 8011800:	24002a10 	.word	0x24002a10

08011804 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8011804:	b580      	push	{r7, lr}
 8011806:	b084      	sub	sp, #16
 8011808:	af00      	add	r7, sp, #0
 801180a:	6078      	str	r0, [r7, #4]
 801180c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801180e:	2309      	movs	r3, #9
 8011810:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	2b00      	cmp	r3, #0
 8011816:	d01c      	beq.n	8011852 <validate+0x4e>
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	681b      	ldr	r3, [r3, #0]
 801181c:	2b00      	cmp	r3, #0
 801181e:	d018      	beq.n	8011852 <validate+0x4e>
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	681b      	ldr	r3, [r3, #0]
 8011824:	781b      	ldrb	r3, [r3, #0]
 8011826:	2b00      	cmp	r3, #0
 8011828:	d013      	beq.n	8011852 <validate+0x4e>
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	889a      	ldrh	r2, [r3, #4]
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	88db      	ldrh	r3, [r3, #6]
 8011834:	429a      	cmp	r2, r3
 8011836:	d10c      	bne.n	8011852 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	681b      	ldr	r3, [r3, #0]
 801183c:	785b      	ldrb	r3, [r3, #1]
 801183e:	4618      	mov	r0, r3
 8011840:	f7fd fdce 	bl	800f3e0 <disk_status>
 8011844:	4603      	mov	r3, r0
 8011846:	f003 0301 	and.w	r3, r3, #1
 801184a:	2b00      	cmp	r3, #0
 801184c:	d101      	bne.n	8011852 <validate+0x4e>
			res = FR_OK;
 801184e:	2300      	movs	r3, #0
 8011850:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8011852:	7bfb      	ldrb	r3, [r7, #15]
 8011854:	2b00      	cmp	r3, #0
 8011856:	d102      	bne.n	801185e <validate+0x5a>
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	681b      	ldr	r3, [r3, #0]
 801185c:	e000      	b.n	8011860 <validate+0x5c>
 801185e:	2300      	movs	r3, #0
 8011860:	683a      	ldr	r2, [r7, #0]
 8011862:	6013      	str	r3, [r2, #0]
	return res;
 8011864:	7bfb      	ldrb	r3, [r7, #15]
}
 8011866:	4618      	mov	r0, r3
 8011868:	3710      	adds	r7, #16
 801186a:	46bd      	mov	sp, r7
 801186c:	bd80      	pop	{r7, pc}
	...

08011870 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8011870:	b580      	push	{r7, lr}
 8011872:	b088      	sub	sp, #32
 8011874:	af00      	add	r7, sp, #0
 8011876:	60f8      	str	r0, [r7, #12]
 8011878:	60b9      	str	r1, [r7, #8]
 801187a:	4613      	mov	r3, r2
 801187c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801187e:	68bb      	ldr	r3, [r7, #8]
 8011880:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8011882:	f107 0310 	add.w	r3, r7, #16
 8011886:	4618      	mov	r0, r3
 8011888:	f7ff fc99 	bl	80111be <get_ldnumber>
 801188c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801188e:	69fb      	ldr	r3, [r7, #28]
 8011890:	2b00      	cmp	r3, #0
 8011892:	da01      	bge.n	8011898 <f_mount+0x28>
 8011894:	230b      	movs	r3, #11
 8011896:	e02b      	b.n	80118f0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8011898:	4a17      	ldr	r2, [pc, #92]	@ (80118f8 <f_mount+0x88>)
 801189a:	69fb      	ldr	r3, [r7, #28]
 801189c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80118a0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80118a2:	69bb      	ldr	r3, [r7, #24]
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	d005      	beq.n	80118b4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80118a8:	69b8      	ldr	r0, [r7, #24]
 80118aa:	f7fe f881 	bl	800f9b0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80118ae:	69bb      	ldr	r3, [r7, #24]
 80118b0:	2200      	movs	r2, #0
 80118b2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80118b4:	68fb      	ldr	r3, [r7, #12]
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d002      	beq.n	80118c0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80118ba:	68fb      	ldr	r3, [r7, #12]
 80118bc:	2200      	movs	r2, #0
 80118be:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80118c0:	68fa      	ldr	r2, [r7, #12]
 80118c2:	490d      	ldr	r1, [pc, #52]	@ (80118f8 <f_mount+0x88>)
 80118c4:	69fb      	ldr	r3, [r7, #28]
 80118c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80118ca:	68fb      	ldr	r3, [r7, #12]
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d002      	beq.n	80118d6 <f_mount+0x66>
 80118d0:	79fb      	ldrb	r3, [r7, #7]
 80118d2:	2b01      	cmp	r3, #1
 80118d4:	d001      	beq.n	80118da <f_mount+0x6a>
 80118d6:	2300      	movs	r3, #0
 80118d8:	e00a      	b.n	80118f0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80118da:	f107 010c 	add.w	r1, r7, #12
 80118de:	f107 0308 	add.w	r3, r7, #8
 80118e2:	2200      	movs	r2, #0
 80118e4:	4618      	mov	r0, r3
 80118e6:	f7ff fd05 	bl	80112f4 <find_volume>
 80118ea:	4603      	mov	r3, r0
 80118ec:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80118ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80118f0:	4618      	mov	r0, r3
 80118f2:	3720      	adds	r7, #32
 80118f4:	46bd      	mov	sp, r7
 80118f6:	bd80      	pop	{r7, pc}
 80118f8:	240029e8 	.word	0x240029e8

080118fc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80118fc:	b580      	push	{r7, lr}
 80118fe:	b09a      	sub	sp, #104	@ 0x68
 8011900:	af00      	add	r7, sp, #0
 8011902:	60f8      	str	r0, [r7, #12]
 8011904:	60b9      	str	r1, [r7, #8]
 8011906:	4613      	mov	r3, r2
 8011908:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801190a:	68fb      	ldr	r3, [r7, #12]
 801190c:	2b00      	cmp	r3, #0
 801190e:	d101      	bne.n	8011914 <f_open+0x18>
 8011910:	2309      	movs	r3, #9
 8011912:	e1b7      	b.n	8011c84 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8011914:	79fb      	ldrb	r3, [r7, #7]
 8011916:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801191a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801191c:	79fa      	ldrb	r2, [r7, #7]
 801191e:	f107 0114 	add.w	r1, r7, #20
 8011922:	f107 0308 	add.w	r3, r7, #8
 8011926:	4618      	mov	r0, r3
 8011928:	f7ff fce4 	bl	80112f4 <find_volume>
 801192c:	4603      	mov	r3, r0
 801192e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8011932:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011936:	2b00      	cmp	r3, #0
 8011938:	f040 819b 	bne.w	8011c72 <f_open+0x376>
		dj.obj.fs = fs;
 801193c:	697b      	ldr	r3, [r7, #20]
 801193e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8011940:	68ba      	ldr	r2, [r7, #8]
 8011942:	f107 0318 	add.w	r3, r7, #24
 8011946:	4611      	mov	r1, r2
 8011948:	4618      	mov	r0, r3
 801194a:	f7ff fba3 	bl	8011094 <follow_path>
 801194e:	4603      	mov	r3, r0
 8011950:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8011954:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011958:	2b00      	cmp	r3, #0
 801195a:	d118      	bne.n	801198e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801195c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8011960:	b25b      	sxtb	r3, r3
 8011962:	2b00      	cmp	r3, #0
 8011964:	da03      	bge.n	801196e <f_open+0x72>
				res = FR_INVALID_NAME;
 8011966:	2306      	movs	r3, #6
 8011968:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801196c:	e00f      	b.n	801198e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801196e:	79fb      	ldrb	r3, [r7, #7]
 8011970:	2b01      	cmp	r3, #1
 8011972:	bf8c      	ite	hi
 8011974:	2301      	movhi	r3, #1
 8011976:	2300      	movls	r3, #0
 8011978:	b2db      	uxtb	r3, r3
 801197a:	461a      	mov	r2, r3
 801197c:	f107 0318 	add.w	r3, r7, #24
 8011980:	4611      	mov	r1, r2
 8011982:	4618      	mov	r0, r3
 8011984:	f7fd fecc 	bl	800f720 <chk_lock>
 8011988:	4603      	mov	r3, r0
 801198a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801198e:	79fb      	ldrb	r3, [r7, #7]
 8011990:	f003 031c 	and.w	r3, r3, #28
 8011994:	2b00      	cmp	r3, #0
 8011996:	d07f      	beq.n	8011a98 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8011998:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801199c:	2b00      	cmp	r3, #0
 801199e:	d017      	beq.n	80119d0 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80119a0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80119a4:	2b04      	cmp	r3, #4
 80119a6:	d10e      	bne.n	80119c6 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80119a8:	f7fd ff16 	bl	800f7d8 <enq_lock>
 80119ac:	4603      	mov	r3, r0
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d006      	beq.n	80119c0 <f_open+0xc4>
 80119b2:	f107 0318 	add.w	r3, r7, #24
 80119b6:	4618      	mov	r0, r3
 80119b8:	f7ff f86e 	bl	8010a98 <dir_register>
 80119bc:	4603      	mov	r3, r0
 80119be:	e000      	b.n	80119c2 <f_open+0xc6>
 80119c0:	2312      	movs	r3, #18
 80119c2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80119c6:	79fb      	ldrb	r3, [r7, #7]
 80119c8:	f043 0308 	orr.w	r3, r3, #8
 80119cc:	71fb      	strb	r3, [r7, #7]
 80119ce:	e010      	b.n	80119f2 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80119d0:	7fbb      	ldrb	r3, [r7, #30]
 80119d2:	f003 0311 	and.w	r3, r3, #17
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d003      	beq.n	80119e2 <f_open+0xe6>
					res = FR_DENIED;
 80119da:	2307      	movs	r3, #7
 80119dc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80119e0:	e007      	b.n	80119f2 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80119e2:	79fb      	ldrb	r3, [r7, #7]
 80119e4:	f003 0304 	and.w	r3, r3, #4
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d002      	beq.n	80119f2 <f_open+0xf6>
 80119ec:	2308      	movs	r3, #8
 80119ee:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80119f2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d168      	bne.n	8011acc <f_open+0x1d0>
 80119fa:	79fb      	ldrb	r3, [r7, #7]
 80119fc:	f003 0308 	and.w	r3, r3, #8
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d063      	beq.n	8011acc <f_open+0x1d0>
				dw = GET_FATTIME();
 8011a04:	f7fc ffca 	bl	800e99c <get_fattime>
 8011a08:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8011a0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a0c:	330e      	adds	r3, #14
 8011a0e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8011a10:	4618      	mov	r0, r3
 8011a12:	f7fd fddb 	bl	800f5cc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8011a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a18:	3316      	adds	r3, #22
 8011a1a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8011a1c:	4618      	mov	r0, r3
 8011a1e:	f7fd fdd5 	bl	800f5cc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8011a22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a24:	330b      	adds	r3, #11
 8011a26:	2220      	movs	r2, #32
 8011a28:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8011a2a:	697b      	ldr	r3, [r7, #20]
 8011a2c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011a2e:	4611      	mov	r1, r2
 8011a30:	4618      	mov	r0, r3
 8011a32:	f7fe fdaa 	bl	801058a <ld_clust>
 8011a36:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8011a38:	697b      	ldr	r3, [r7, #20]
 8011a3a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011a3c:	2200      	movs	r2, #0
 8011a3e:	4618      	mov	r0, r3
 8011a40:	f7fe fdc2 	bl	80105c8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8011a44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a46:	331c      	adds	r3, #28
 8011a48:	2100      	movs	r1, #0
 8011a4a:	4618      	mov	r0, r3
 8011a4c:	f7fd fdbe 	bl	800f5cc <st_dword>
					fs->wflag = 1;
 8011a50:	697b      	ldr	r3, [r7, #20]
 8011a52:	2201      	movs	r2, #1
 8011a54:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8011a56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d037      	beq.n	8011acc <f_open+0x1d0>
						dw = fs->winsect;
 8011a5c:	697b      	ldr	r3, [r7, #20]
 8011a5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011a60:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8011a62:	f107 0318 	add.w	r3, r7, #24
 8011a66:	2200      	movs	r2, #0
 8011a68:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8011a6a:	4618      	mov	r0, r3
 8011a6c:	f7fe fab2 	bl	800ffd4 <remove_chain>
 8011a70:	4603      	mov	r3, r0
 8011a72:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8011a76:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d126      	bne.n	8011acc <f_open+0x1d0>
							res = move_window(fs, dw);
 8011a7e:	697b      	ldr	r3, [r7, #20]
 8011a80:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8011a82:	4618      	mov	r0, r3
 8011a84:	f7fd fffc 	bl	800fa80 <move_window>
 8011a88:	4603      	mov	r3, r0
 8011a8a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8011a8e:	697b      	ldr	r3, [r7, #20]
 8011a90:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011a92:	3a01      	subs	r2, #1
 8011a94:	615a      	str	r2, [r3, #20]
 8011a96:	e019      	b.n	8011acc <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8011a98:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d115      	bne.n	8011acc <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8011aa0:	7fbb      	ldrb	r3, [r7, #30]
 8011aa2:	f003 0310 	and.w	r3, r3, #16
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d003      	beq.n	8011ab2 <f_open+0x1b6>
					res = FR_NO_FILE;
 8011aaa:	2304      	movs	r3, #4
 8011aac:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8011ab0:	e00c      	b.n	8011acc <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8011ab2:	79fb      	ldrb	r3, [r7, #7]
 8011ab4:	f003 0302 	and.w	r3, r3, #2
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d007      	beq.n	8011acc <f_open+0x1d0>
 8011abc:	7fbb      	ldrb	r3, [r7, #30]
 8011abe:	f003 0301 	and.w	r3, r3, #1
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d002      	beq.n	8011acc <f_open+0x1d0>
						res = FR_DENIED;
 8011ac6:	2307      	movs	r3, #7
 8011ac8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8011acc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d126      	bne.n	8011b22 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8011ad4:	79fb      	ldrb	r3, [r7, #7]
 8011ad6:	f003 0308 	and.w	r3, r3, #8
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d003      	beq.n	8011ae6 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8011ade:	79fb      	ldrb	r3, [r7, #7]
 8011ae0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011ae4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8011ae6:	697b      	ldr	r3, [r7, #20]
 8011ae8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011aea:	68fb      	ldr	r3, [r7, #12]
 8011aec:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8011aee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011af0:	68fb      	ldr	r3, [r7, #12]
 8011af2:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011af4:	79fb      	ldrb	r3, [r7, #7]
 8011af6:	2b01      	cmp	r3, #1
 8011af8:	bf8c      	ite	hi
 8011afa:	2301      	movhi	r3, #1
 8011afc:	2300      	movls	r3, #0
 8011afe:	b2db      	uxtb	r3, r3
 8011b00:	461a      	mov	r2, r3
 8011b02:	f107 0318 	add.w	r3, r7, #24
 8011b06:	4611      	mov	r1, r2
 8011b08:	4618      	mov	r0, r3
 8011b0a:	f7fd fe87 	bl	800f81c <inc_lock>
 8011b0e:	4602      	mov	r2, r0
 8011b10:	68fb      	ldr	r3, [r7, #12]
 8011b12:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8011b14:	68fb      	ldr	r3, [r7, #12]
 8011b16:	691b      	ldr	r3, [r3, #16]
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d102      	bne.n	8011b22 <f_open+0x226>
 8011b1c:	2302      	movs	r3, #2
 8011b1e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8011b22:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	f040 80a3 	bne.w	8011c72 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8011b2c:	697b      	ldr	r3, [r7, #20]
 8011b2e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011b30:	4611      	mov	r1, r2
 8011b32:	4618      	mov	r0, r3
 8011b34:	f7fe fd29 	bl	801058a <ld_clust>
 8011b38:	4602      	mov	r2, r0
 8011b3a:	68fb      	ldr	r3, [r7, #12]
 8011b3c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8011b3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b40:	331c      	adds	r3, #28
 8011b42:	4618      	mov	r0, r3
 8011b44:	f7fd fd04 	bl	800f550 <ld_dword>
 8011b48:	4602      	mov	r2, r0
 8011b4a:	68fb      	ldr	r3, [r7, #12]
 8011b4c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8011b4e:	68fb      	ldr	r3, [r7, #12]
 8011b50:	2200      	movs	r2, #0
 8011b52:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8011b54:	697a      	ldr	r2, [r7, #20]
 8011b56:	68fb      	ldr	r3, [r7, #12]
 8011b58:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8011b5a:	697b      	ldr	r3, [r7, #20]
 8011b5c:	88da      	ldrh	r2, [r3, #6]
 8011b5e:	68fb      	ldr	r3, [r7, #12]
 8011b60:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8011b62:	68fb      	ldr	r3, [r7, #12]
 8011b64:	79fa      	ldrb	r2, [r7, #7]
 8011b66:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8011b68:	68fb      	ldr	r3, [r7, #12]
 8011b6a:	2200      	movs	r2, #0
 8011b6c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	2200      	movs	r2, #0
 8011b72:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8011b74:	68fb      	ldr	r3, [r7, #12]
 8011b76:	2200      	movs	r2, #0
 8011b78:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8011b7a:	68fb      	ldr	r3, [r7, #12]
 8011b7c:	3330      	adds	r3, #48	@ 0x30
 8011b7e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8011b82:	2100      	movs	r1, #0
 8011b84:	4618      	mov	r0, r3
 8011b86:	f7fd fd6e 	bl	800f666 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8011b8a:	79fb      	ldrb	r3, [r7, #7]
 8011b8c:	f003 0320 	and.w	r3, r3, #32
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d06e      	beq.n	8011c72 <f_open+0x376>
 8011b94:	68fb      	ldr	r3, [r7, #12]
 8011b96:	68db      	ldr	r3, [r3, #12]
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d06a      	beq.n	8011c72 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8011b9c:	68fb      	ldr	r3, [r7, #12]
 8011b9e:	68da      	ldr	r2, [r3, #12]
 8011ba0:	68fb      	ldr	r3, [r7, #12]
 8011ba2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8011ba4:	697b      	ldr	r3, [r7, #20]
 8011ba6:	895b      	ldrh	r3, [r3, #10]
 8011ba8:	461a      	mov	r2, r3
 8011baa:	697b      	ldr	r3, [r7, #20]
 8011bac:	899b      	ldrh	r3, [r3, #12]
 8011bae:	fb02 f303 	mul.w	r3, r2, r3
 8011bb2:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8011bb4:	68fb      	ldr	r3, [r7, #12]
 8011bb6:	689b      	ldr	r3, [r3, #8]
 8011bb8:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011bba:	68fb      	ldr	r3, [r7, #12]
 8011bbc:	68db      	ldr	r3, [r3, #12]
 8011bbe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011bc0:	e016      	b.n	8011bf0 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8011bc2:	68fb      	ldr	r3, [r7, #12]
 8011bc4:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8011bc6:	4618      	mov	r0, r3
 8011bc8:	f7fe f817 	bl	800fbfa <get_fat>
 8011bcc:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8011bce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011bd0:	2b01      	cmp	r3, #1
 8011bd2:	d802      	bhi.n	8011bda <f_open+0x2de>
 8011bd4:	2302      	movs	r3, #2
 8011bd6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8011bda:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011be0:	d102      	bne.n	8011be8 <f_open+0x2ec>
 8011be2:	2301      	movs	r3, #1
 8011be4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011be8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8011bea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011bec:	1ad3      	subs	r3, r2, r3
 8011bee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011bf0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d103      	bne.n	8011c00 <f_open+0x304>
 8011bf8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8011bfa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011bfc:	429a      	cmp	r2, r3
 8011bfe:	d8e0      	bhi.n	8011bc2 <f_open+0x2c6>
				}
				fp->clust = clst;
 8011c00:	68fb      	ldr	r3, [r7, #12]
 8011c02:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8011c04:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8011c06:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d131      	bne.n	8011c72 <f_open+0x376>
 8011c0e:	697b      	ldr	r3, [r7, #20]
 8011c10:	899b      	ldrh	r3, [r3, #12]
 8011c12:	461a      	mov	r2, r3
 8011c14:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011c16:	fbb3 f1f2 	udiv	r1, r3, r2
 8011c1a:	fb01 f202 	mul.w	r2, r1, r2
 8011c1e:	1a9b      	subs	r3, r3, r2
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d026      	beq.n	8011c72 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8011c24:	697b      	ldr	r3, [r7, #20]
 8011c26:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8011c28:	4618      	mov	r0, r3
 8011c2a:	f7fd ffc7 	bl	800fbbc <clust2sect>
 8011c2e:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8011c30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d103      	bne.n	8011c3e <f_open+0x342>
						res = FR_INT_ERR;
 8011c36:	2302      	movs	r3, #2
 8011c38:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8011c3c:	e019      	b.n	8011c72 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8011c3e:	697b      	ldr	r3, [r7, #20]
 8011c40:	899b      	ldrh	r3, [r3, #12]
 8011c42:	461a      	mov	r2, r3
 8011c44:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011c46:	fbb3 f2f2 	udiv	r2, r3, r2
 8011c4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011c4c:	441a      	add	r2, r3
 8011c4e:	68fb      	ldr	r3, [r7, #12]
 8011c50:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8011c52:	697b      	ldr	r3, [r7, #20]
 8011c54:	7858      	ldrb	r0, [r3, #1]
 8011c56:	68fb      	ldr	r3, [r7, #12]
 8011c58:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011c5c:	68fb      	ldr	r3, [r7, #12]
 8011c5e:	6a1a      	ldr	r2, [r3, #32]
 8011c60:	2301      	movs	r3, #1
 8011c62:	f7fd fbff 	bl	800f464 <disk_read>
 8011c66:	4603      	mov	r3, r0
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d002      	beq.n	8011c72 <f_open+0x376>
 8011c6c:	2301      	movs	r3, #1
 8011c6e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8011c72:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d002      	beq.n	8011c80 <f_open+0x384>
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	2200      	movs	r2, #0
 8011c7e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8011c80:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8011c84:	4618      	mov	r0, r3
 8011c86:	3768      	adds	r7, #104	@ 0x68
 8011c88:	46bd      	mov	sp, r7
 8011c8a:	bd80      	pop	{r7, pc}

08011c8c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8011c8c:	b580      	push	{r7, lr}
 8011c8e:	b08c      	sub	sp, #48	@ 0x30
 8011c90:	af00      	add	r7, sp, #0
 8011c92:	60f8      	str	r0, [r7, #12]
 8011c94:	60b9      	str	r1, [r7, #8]
 8011c96:	607a      	str	r2, [r7, #4]
 8011c98:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8011c9a:	68bb      	ldr	r3, [r7, #8]
 8011c9c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8011c9e:	683b      	ldr	r3, [r7, #0]
 8011ca0:	2200      	movs	r2, #0
 8011ca2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8011ca4:	68fb      	ldr	r3, [r7, #12]
 8011ca6:	f107 0210 	add.w	r2, r7, #16
 8011caa:	4611      	mov	r1, r2
 8011cac:	4618      	mov	r0, r3
 8011cae:	f7ff fda9 	bl	8011804 <validate>
 8011cb2:	4603      	mov	r3, r0
 8011cb4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8011cb8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d107      	bne.n	8011cd0 <f_write+0x44>
 8011cc0:	68fb      	ldr	r3, [r7, #12]
 8011cc2:	7d5b      	ldrb	r3, [r3, #21]
 8011cc4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8011cc8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	d002      	beq.n	8011cd6 <f_write+0x4a>
 8011cd0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011cd4:	e16a      	b.n	8011fac <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8011cd6:	68fb      	ldr	r3, [r7, #12]
 8011cd8:	7d1b      	ldrb	r3, [r3, #20]
 8011cda:	f003 0302 	and.w	r3, r3, #2
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d101      	bne.n	8011ce6 <f_write+0x5a>
 8011ce2:	2307      	movs	r3, #7
 8011ce4:	e162      	b.n	8011fac <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8011ce6:	68fb      	ldr	r3, [r7, #12]
 8011ce8:	699a      	ldr	r2, [r3, #24]
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	441a      	add	r2, r3
 8011cee:	68fb      	ldr	r3, [r7, #12]
 8011cf0:	699b      	ldr	r3, [r3, #24]
 8011cf2:	429a      	cmp	r2, r3
 8011cf4:	f080 814c 	bcs.w	8011f90 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8011cf8:	68fb      	ldr	r3, [r7, #12]
 8011cfa:	699b      	ldr	r3, [r3, #24]
 8011cfc:	43db      	mvns	r3, r3
 8011cfe:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8011d00:	e146      	b.n	8011f90 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8011d02:	68fb      	ldr	r3, [r7, #12]
 8011d04:	699b      	ldr	r3, [r3, #24]
 8011d06:	693a      	ldr	r2, [r7, #16]
 8011d08:	8992      	ldrh	r2, [r2, #12]
 8011d0a:	fbb3 f1f2 	udiv	r1, r3, r2
 8011d0e:	fb01 f202 	mul.w	r2, r1, r2
 8011d12:	1a9b      	subs	r3, r3, r2
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	f040 80f1 	bne.w	8011efc <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8011d1a:	68fb      	ldr	r3, [r7, #12]
 8011d1c:	699b      	ldr	r3, [r3, #24]
 8011d1e:	693a      	ldr	r2, [r7, #16]
 8011d20:	8992      	ldrh	r2, [r2, #12]
 8011d22:	fbb3 f3f2 	udiv	r3, r3, r2
 8011d26:	693a      	ldr	r2, [r7, #16]
 8011d28:	8952      	ldrh	r2, [r2, #10]
 8011d2a:	3a01      	subs	r2, #1
 8011d2c:	4013      	ands	r3, r2
 8011d2e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8011d30:	69bb      	ldr	r3, [r7, #24]
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d143      	bne.n	8011dbe <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8011d36:	68fb      	ldr	r3, [r7, #12]
 8011d38:	699b      	ldr	r3, [r3, #24]
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	d10c      	bne.n	8011d58 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8011d3e:	68fb      	ldr	r3, [r7, #12]
 8011d40:	689b      	ldr	r3, [r3, #8]
 8011d42:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8011d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	d11a      	bne.n	8011d80 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8011d4a:	68fb      	ldr	r3, [r7, #12]
 8011d4c:	2100      	movs	r1, #0
 8011d4e:	4618      	mov	r0, r3
 8011d50:	f7fe f9a5 	bl	801009e <create_chain>
 8011d54:	62b8      	str	r0, [r7, #40]	@ 0x28
 8011d56:	e013      	b.n	8011d80 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8011d58:	68fb      	ldr	r3, [r7, #12]
 8011d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d007      	beq.n	8011d70 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8011d60:	68fb      	ldr	r3, [r7, #12]
 8011d62:	699b      	ldr	r3, [r3, #24]
 8011d64:	4619      	mov	r1, r3
 8011d66:	68f8      	ldr	r0, [r7, #12]
 8011d68:	f7fe fa31 	bl	80101ce <clmt_clust>
 8011d6c:	62b8      	str	r0, [r7, #40]	@ 0x28
 8011d6e:	e007      	b.n	8011d80 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8011d70:	68fa      	ldr	r2, [r7, #12]
 8011d72:	68fb      	ldr	r3, [r7, #12]
 8011d74:	69db      	ldr	r3, [r3, #28]
 8011d76:	4619      	mov	r1, r3
 8011d78:	4610      	mov	r0, r2
 8011d7a:	f7fe f990 	bl	801009e <create_chain>
 8011d7e:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	f000 8109 	beq.w	8011f9a <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d8a:	2b01      	cmp	r3, #1
 8011d8c:	d104      	bne.n	8011d98 <f_write+0x10c>
 8011d8e:	68fb      	ldr	r3, [r7, #12]
 8011d90:	2202      	movs	r2, #2
 8011d92:	755a      	strb	r2, [r3, #21]
 8011d94:	2302      	movs	r3, #2
 8011d96:	e109      	b.n	8011fac <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d9e:	d104      	bne.n	8011daa <f_write+0x11e>
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	2201      	movs	r2, #1
 8011da4:	755a      	strb	r2, [r3, #21]
 8011da6:	2301      	movs	r3, #1
 8011da8:	e100      	b.n	8011fac <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8011daa:	68fb      	ldr	r3, [r7, #12]
 8011dac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011dae:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8011db0:	68fb      	ldr	r3, [r7, #12]
 8011db2:	689b      	ldr	r3, [r3, #8]
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d102      	bne.n	8011dbe <f_write+0x132>
 8011db8:	68fb      	ldr	r3, [r7, #12]
 8011dba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011dbc:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8011dbe:	68fb      	ldr	r3, [r7, #12]
 8011dc0:	7d1b      	ldrb	r3, [r3, #20]
 8011dc2:	b25b      	sxtb	r3, r3
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	da18      	bge.n	8011dfa <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011dc8:	693b      	ldr	r3, [r7, #16]
 8011dca:	7858      	ldrb	r0, [r3, #1]
 8011dcc:	68fb      	ldr	r3, [r7, #12]
 8011dce:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011dd2:	68fb      	ldr	r3, [r7, #12]
 8011dd4:	6a1a      	ldr	r2, [r3, #32]
 8011dd6:	2301      	movs	r3, #1
 8011dd8:	f7fd fb64 	bl	800f4a4 <disk_write>
 8011ddc:	4603      	mov	r3, r0
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d004      	beq.n	8011dec <f_write+0x160>
 8011de2:	68fb      	ldr	r3, [r7, #12]
 8011de4:	2201      	movs	r2, #1
 8011de6:	755a      	strb	r2, [r3, #21]
 8011de8:	2301      	movs	r3, #1
 8011dea:	e0df      	b.n	8011fac <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011dec:	68fb      	ldr	r3, [r7, #12]
 8011dee:	7d1b      	ldrb	r3, [r3, #20]
 8011df0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011df4:	b2da      	uxtb	r2, r3
 8011df6:	68fb      	ldr	r3, [r7, #12]
 8011df8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8011dfa:	693a      	ldr	r2, [r7, #16]
 8011dfc:	68fb      	ldr	r3, [r7, #12]
 8011dfe:	69db      	ldr	r3, [r3, #28]
 8011e00:	4619      	mov	r1, r3
 8011e02:	4610      	mov	r0, r2
 8011e04:	f7fd feda 	bl	800fbbc <clust2sect>
 8011e08:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8011e0a:	697b      	ldr	r3, [r7, #20]
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d104      	bne.n	8011e1a <f_write+0x18e>
 8011e10:	68fb      	ldr	r3, [r7, #12]
 8011e12:	2202      	movs	r2, #2
 8011e14:	755a      	strb	r2, [r3, #21]
 8011e16:	2302      	movs	r3, #2
 8011e18:	e0c8      	b.n	8011fac <f_write+0x320>
			sect += csect;
 8011e1a:	697a      	ldr	r2, [r7, #20]
 8011e1c:	69bb      	ldr	r3, [r7, #24]
 8011e1e:	4413      	add	r3, r2
 8011e20:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8011e22:	693b      	ldr	r3, [r7, #16]
 8011e24:	899b      	ldrh	r3, [r3, #12]
 8011e26:	461a      	mov	r2, r3
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8011e2e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8011e30:	6a3b      	ldr	r3, [r7, #32]
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d043      	beq.n	8011ebe <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8011e36:	69ba      	ldr	r2, [r7, #24]
 8011e38:	6a3b      	ldr	r3, [r7, #32]
 8011e3a:	4413      	add	r3, r2
 8011e3c:	693a      	ldr	r2, [r7, #16]
 8011e3e:	8952      	ldrh	r2, [r2, #10]
 8011e40:	4293      	cmp	r3, r2
 8011e42:	d905      	bls.n	8011e50 <f_write+0x1c4>
					cc = fs->csize - csect;
 8011e44:	693b      	ldr	r3, [r7, #16]
 8011e46:	895b      	ldrh	r3, [r3, #10]
 8011e48:	461a      	mov	r2, r3
 8011e4a:	69bb      	ldr	r3, [r7, #24]
 8011e4c:	1ad3      	subs	r3, r2, r3
 8011e4e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011e50:	693b      	ldr	r3, [r7, #16]
 8011e52:	7858      	ldrb	r0, [r3, #1]
 8011e54:	6a3b      	ldr	r3, [r7, #32]
 8011e56:	697a      	ldr	r2, [r7, #20]
 8011e58:	69f9      	ldr	r1, [r7, #28]
 8011e5a:	f7fd fb23 	bl	800f4a4 <disk_write>
 8011e5e:	4603      	mov	r3, r0
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d004      	beq.n	8011e6e <f_write+0x1e2>
 8011e64:	68fb      	ldr	r3, [r7, #12]
 8011e66:	2201      	movs	r2, #1
 8011e68:	755a      	strb	r2, [r3, #21]
 8011e6a:	2301      	movs	r3, #1
 8011e6c:	e09e      	b.n	8011fac <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8011e6e:	68fb      	ldr	r3, [r7, #12]
 8011e70:	6a1a      	ldr	r2, [r3, #32]
 8011e72:	697b      	ldr	r3, [r7, #20]
 8011e74:	1ad3      	subs	r3, r2, r3
 8011e76:	6a3a      	ldr	r2, [r7, #32]
 8011e78:	429a      	cmp	r2, r3
 8011e7a:	d918      	bls.n	8011eae <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8011e7c:	68fb      	ldr	r3, [r7, #12]
 8011e7e:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8011e82:	68fb      	ldr	r3, [r7, #12]
 8011e84:	6a1a      	ldr	r2, [r3, #32]
 8011e86:	697b      	ldr	r3, [r7, #20]
 8011e88:	1ad3      	subs	r3, r2, r3
 8011e8a:	693a      	ldr	r2, [r7, #16]
 8011e8c:	8992      	ldrh	r2, [r2, #12]
 8011e8e:	fb02 f303 	mul.w	r3, r2, r3
 8011e92:	69fa      	ldr	r2, [r7, #28]
 8011e94:	18d1      	adds	r1, r2, r3
 8011e96:	693b      	ldr	r3, [r7, #16]
 8011e98:	899b      	ldrh	r3, [r3, #12]
 8011e9a:	461a      	mov	r2, r3
 8011e9c:	f7fd fbc2 	bl	800f624 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8011ea0:	68fb      	ldr	r3, [r7, #12]
 8011ea2:	7d1b      	ldrb	r3, [r3, #20]
 8011ea4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011ea8:	b2da      	uxtb	r2, r3
 8011eaa:	68fb      	ldr	r3, [r7, #12]
 8011eac:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8011eae:	693b      	ldr	r3, [r7, #16]
 8011eb0:	899b      	ldrh	r3, [r3, #12]
 8011eb2:	461a      	mov	r2, r3
 8011eb4:	6a3b      	ldr	r3, [r7, #32]
 8011eb6:	fb02 f303 	mul.w	r3, r2, r3
 8011eba:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8011ebc:	e04b      	b.n	8011f56 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011ebe:	68fb      	ldr	r3, [r7, #12]
 8011ec0:	6a1b      	ldr	r3, [r3, #32]
 8011ec2:	697a      	ldr	r2, [r7, #20]
 8011ec4:	429a      	cmp	r2, r3
 8011ec6:	d016      	beq.n	8011ef6 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8011ec8:	68fb      	ldr	r3, [r7, #12]
 8011eca:	699a      	ldr	r2, [r3, #24]
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011ed0:	429a      	cmp	r2, r3
 8011ed2:	d210      	bcs.n	8011ef6 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8011ed4:	693b      	ldr	r3, [r7, #16]
 8011ed6:	7858      	ldrb	r0, [r3, #1]
 8011ed8:	68fb      	ldr	r3, [r7, #12]
 8011eda:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011ede:	2301      	movs	r3, #1
 8011ee0:	697a      	ldr	r2, [r7, #20]
 8011ee2:	f7fd fabf 	bl	800f464 <disk_read>
 8011ee6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d004      	beq.n	8011ef6 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8011eec:	68fb      	ldr	r3, [r7, #12]
 8011eee:	2201      	movs	r2, #1
 8011ef0:	755a      	strb	r2, [r3, #21]
 8011ef2:	2301      	movs	r3, #1
 8011ef4:	e05a      	b.n	8011fac <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8011ef6:	68fb      	ldr	r3, [r7, #12]
 8011ef8:	697a      	ldr	r2, [r7, #20]
 8011efa:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8011efc:	693b      	ldr	r3, [r7, #16]
 8011efe:	899b      	ldrh	r3, [r3, #12]
 8011f00:	4618      	mov	r0, r3
 8011f02:	68fb      	ldr	r3, [r7, #12]
 8011f04:	699b      	ldr	r3, [r3, #24]
 8011f06:	693a      	ldr	r2, [r7, #16]
 8011f08:	8992      	ldrh	r2, [r2, #12]
 8011f0a:	fbb3 f1f2 	udiv	r1, r3, r2
 8011f0e:	fb01 f202 	mul.w	r2, r1, r2
 8011f12:	1a9b      	subs	r3, r3, r2
 8011f14:	1ac3      	subs	r3, r0, r3
 8011f16:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8011f18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	429a      	cmp	r2, r3
 8011f1e:	d901      	bls.n	8011f24 <f_write+0x298>
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8011f24:	68fb      	ldr	r3, [r7, #12]
 8011f26:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011f2a:	68fb      	ldr	r3, [r7, #12]
 8011f2c:	699b      	ldr	r3, [r3, #24]
 8011f2e:	693a      	ldr	r2, [r7, #16]
 8011f30:	8992      	ldrh	r2, [r2, #12]
 8011f32:	fbb3 f0f2 	udiv	r0, r3, r2
 8011f36:	fb00 f202 	mul.w	r2, r0, r2
 8011f3a:	1a9b      	subs	r3, r3, r2
 8011f3c:	440b      	add	r3, r1
 8011f3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011f40:	69f9      	ldr	r1, [r7, #28]
 8011f42:	4618      	mov	r0, r3
 8011f44:	f7fd fb6e 	bl	800f624 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8011f48:	68fb      	ldr	r3, [r7, #12]
 8011f4a:	7d1b      	ldrb	r3, [r3, #20]
 8011f4c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8011f50:	b2da      	uxtb	r2, r3
 8011f52:	68fb      	ldr	r3, [r7, #12]
 8011f54:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8011f56:	69fa      	ldr	r2, [r7, #28]
 8011f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f5a:	4413      	add	r3, r2
 8011f5c:	61fb      	str	r3, [r7, #28]
 8011f5e:	68fb      	ldr	r3, [r7, #12]
 8011f60:	699a      	ldr	r2, [r3, #24]
 8011f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f64:	441a      	add	r2, r3
 8011f66:	68fb      	ldr	r3, [r7, #12]
 8011f68:	619a      	str	r2, [r3, #24]
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	68da      	ldr	r2, [r3, #12]
 8011f6e:	68fb      	ldr	r3, [r7, #12]
 8011f70:	699b      	ldr	r3, [r3, #24]
 8011f72:	429a      	cmp	r2, r3
 8011f74:	bf38      	it	cc
 8011f76:	461a      	movcc	r2, r3
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	60da      	str	r2, [r3, #12]
 8011f7c:	683b      	ldr	r3, [r7, #0]
 8011f7e:	681a      	ldr	r2, [r3, #0]
 8011f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f82:	441a      	add	r2, r3
 8011f84:	683b      	ldr	r3, [r7, #0]
 8011f86:	601a      	str	r2, [r3, #0]
 8011f88:	687a      	ldr	r2, [r7, #4]
 8011f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f8c:	1ad3      	subs	r3, r2, r3
 8011f8e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	f47f aeb5 	bne.w	8011d02 <f_write+0x76>
 8011f98:	e000      	b.n	8011f9c <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011f9a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8011f9c:	68fb      	ldr	r3, [r7, #12]
 8011f9e:	7d1b      	ldrb	r3, [r3, #20]
 8011fa0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011fa4:	b2da      	uxtb	r2, r3
 8011fa6:	68fb      	ldr	r3, [r7, #12]
 8011fa8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8011faa:	2300      	movs	r3, #0
}
 8011fac:	4618      	mov	r0, r3
 8011fae:	3730      	adds	r7, #48	@ 0x30
 8011fb0:	46bd      	mov	sp, r7
 8011fb2:	bd80      	pop	{r7, pc}

08011fb4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8011fb4:	b580      	push	{r7, lr}
 8011fb6:	b086      	sub	sp, #24
 8011fb8:	af00      	add	r7, sp, #0
 8011fba:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	f107 0208 	add.w	r2, r7, #8
 8011fc2:	4611      	mov	r1, r2
 8011fc4:	4618      	mov	r0, r3
 8011fc6:	f7ff fc1d 	bl	8011804 <validate>
 8011fca:	4603      	mov	r3, r0
 8011fcc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011fce:	7dfb      	ldrb	r3, [r7, #23]
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d168      	bne.n	80120a6 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	7d1b      	ldrb	r3, [r3, #20]
 8011fd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d062      	beq.n	80120a6 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	7d1b      	ldrb	r3, [r3, #20]
 8011fe4:	b25b      	sxtb	r3, r3
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	da15      	bge.n	8012016 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8011fea:	68bb      	ldr	r3, [r7, #8]
 8011fec:	7858      	ldrb	r0, [r3, #1]
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	6a1a      	ldr	r2, [r3, #32]
 8011ff8:	2301      	movs	r3, #1
 8011ffa:	f7fd fa53 	bl	800f4a4 <disk_write>
 8011ffe:	4603      	mov	r3, r0
 8012000:	2b00      	cmp	r3, #0
 8012002:	d001      	beq.n	8012008 <f_sync+0x54>
 8012004:	2301      	movs	r3, #1
 8012006:	e04f      	b.n	80120a8 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	7d1b      	ldrb	r3, [r3, #20]
 801200c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012010:	b2da      	uxtb	r2, r3
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8012016:	f7fc fcc1 	bl	800e99c <get_fattime>
 801201a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801201c:	68ba      	ldr	r2, [r7, #8]
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012022:	4619      	mov	r1, r3
 8012024:	4610      	mov	r0, r2
 8012026:	f7fd fd2b 	bl	800fa80 <move_window>
 801202a:	4603      	mov	r3, r0
 801202c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801202e:	7dfb      	ldrb	r3, [r7, #23]
 8012030:	2b00      	cmp	r3, #0
 8012032:	d138      	bne.n	80120a6 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012038:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801203a:	68fb      	ldr	r3, [r7, #12]
 801203c:	330b      	adds	r3, #11
 801203e:	781a      	ldrb	r2, [r3, #0]
 8012040:	68fb      	ldr	r3, [r7, #12]
 8012042:	330b      	adds	r3, #11
 8012044:	f042 0220 	orr.w	r2, r2, #32
 8012048:	b2d2      	uxtb	r2, r2
 801204a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	6818      	ldr	r0, [r3, #0]
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	689b      	ldr	r3, [r3, #8]
 8012054:	461a      	mov	r2, r3
 8012056:	68f9      	ldr	r1, [r7, #12]
 8012058:	f7fe fab6 	bl	80105c8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801205c:	68fb      	ldr	r3, [r7, #12]
 801205e:	f103 021c 	add.w	r2, r3, #28
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	68db      	ldr	r3, [r3, #12]
 8012066:	4619      	mov	r1, r3
 8012068:	4610      	mov	r0, r2
 801206a:	f7fd faaf 	bl	800f5cc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801206e:	68fb      	ldr	r3, [r7, #12]
 8012070:	3316      	adds	r3, #22
 8012072:	6939      	ldr	r1, [r7, #16]
 8012074:	4618      	mov	r0, r3
 8012076:	f7fd faa9 	bl	800f5cc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801207a:	68fb      	ldr	r3, [r7, #12]
 801207c:	3312      	adds	r3, #18
 801207e:	2100      	movs	r1, #0
 8012080:	4618      	mov	r0, r3
 8012082:	f7fd fa88 	bl	800f596 <st_word>
					fs->wflag = 1;
 8012086:	68bb      	ldr	r3, [r7, #8]
 8012088:	2201      	movs	r2, #1
 801208a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801208c:	68bb      	ldr	r3, [r7, #8]
 801208e:	4618      	mov	r0, r3
 8012090:	f7fd fd24 	bl	800fadc <sync_fs>
 8012094:	4603      	mov	r3, r0
 8012096:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	7d1b      	ldrb	r3, [r3, #20]
 801209c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80120a0:	b2da      	uxtb	r2, r3
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80120a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80120a8:	4618      	mov	r0, r3
 80120aa:	3718      	adds	r7, #24
 80120ac:	46bd      	mov	sp, r7
 80120ae:	bd80      	pop	{r7, pc}

080120b0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80120b0:	b580      	push	{r7, lr}
 80120b2:	b084      	sub	sp, #16
 80120b4:	af00      	add	r7, sp, #0
 80120b6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80120b8:	6878      	ldr	r0, [r7, #4]
 80120ba:	f7ff ff7b 	bl	8011fb4 <f_sync>
 80120be:	4603      	mov	r3, r0
 80120c0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80120c2:	7bfb      	ldrb	r3, [r7, #15]
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d118      	bne.n	80120fa <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	f107 0208 	add.w	r2, r7, #8
 80120ce:	4611      	mov	r1, r2
 80120d0:	4618      	mov	r0, r3
 80120d2:	f7ff fb97 	bl	8011804 <validate>
 80120d6:	4603      	mov	r3, r0
 80120d8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80120da:	7bfb      	ldrb	r3, [r7, #15]
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d10c      	bne.n	80120fa <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	691b      	ldr	r3, [r3, #16]
 80120e4:	4618      	mov	r0, r3
 80120e6:	f7fd fc27 	bl	800f938 <dec_lock>
 80120ea:	4603      	mov	r3, r0
 80120ec:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80120ee:	7bfb      	ldrb	r3, [r7, #15]
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d102      	bne.n	80120fa <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	2200      	movs	r2, #0
 80120f8:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80120fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80120fc:	4618      	mov	r0, r3
 80120fe:	3710      	adds	r7, #16
 8012100:	46bd      	mov	sp, r7
 8012102:	bd80      	pop	{r7, pc}

08012104 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8012104:	b580      	push	{r7, lr}
 8012106:	b090      	sub	sp, #64	@ 0x40
 8012108:	af00      	add	r7, sp, #0
 801210a:	6078      	str	r0, [r7, #4]
 801210c:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	f107 0208 	add.w	r2, r7, #8
 8012114:	4611      	mov	r1, r2
 8012116:	4618      	mov	r0, r3
 8012118:	f7ff fb74 	bl	8011804 <validate>
 801211c:	4603      	mov	r3, r0
 801211e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8012122:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8012126:	2b00      	cmp	r3, #0
 8012128:	d103      	bne.n	8012132 <f_lseek+0x2e>
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	7d5b      	ldrb	r3, [r3, #21]
 801212e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8012132:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8012136:	2b00      	cmp	r3, #0
 8012138:	d002      	beq.n	8012140 <f_lseek+0x3c>
 801213a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801213e:	e201      	b.n	8012544 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012144:	2b00      	cmp	r3, #0
 8012146:	f000 80d9 	beq.w	80122fc <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 801214a:	683b      	ldr	r3, [r7, #0]
 801214c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012150:	d15a      	bne.n	8012208 <f_lseek+0x104>
			tbl = fp->cltbl;
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012156:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8012158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801215a:	1d1a      	adds	r2, r3, #4
 801215c:	627a      	str	r2, [r7, #36]	@ 0x24
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	617b      	str	r3, [r7, #20]
 8012162:	2302      	movs	r3, #2
 8012164:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	689b      	ldr	r3, [r3, #8]
 801216a:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 801216c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801216e:	2b00      	cmp	r3, #0
 8012170:	d03a      	beq.n	80121e8 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8012172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012174:	613b      	str	r3, [r7, #16]
 8012176:	2300      	movs	r3, #0
 8012178:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801217a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801217c:	3302      	adds	r3, #2
 801217e:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8012180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012182:	60fb      	str	r3, [r7, #12]
 8012184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012186:	3301      	adds	r3, #1
 8012188:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801218e:	4618      	mov	r0, r3
 8012190:	f7fd fd33 	bl	800fbfa <get_fat>
 8012194:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8012196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012198:	2b01      	cmp	r3, #1
 801219a:	d804      	bhi.n	80121a6 <f_lseek+0xa2>
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	2202      	movs	r2, #2
 80121a0:	755a      	strb	r2, [r3, #21]
 80121a2:	2302      	movs	r3, #2
 80121a4:	e1ce      	b.n	8012544 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80121a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80121a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80121ac:	d104      	bne.n	80121b8 <f_lseek+0xb4>
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	2201      	movs	r2, #1
 80121b2:	755a      	strb	r2, [r3, #21]
 80121b4:	2301      	movs	r3, #1
 80121b6:	e1c5      	b.n	8012544 <f_lseek+0x440>
					} while (cl == pcl + 1);
 80121b8:	68fb      	ldr	r3, [r7, #12]
 80121ba:	3301      	adds	r3, #1
 80121bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80121be:	429a      	cmp	r2, r3
 80121c0:	d0de      	beq.n	8012180 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80121c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80121c4:	697b      	ldr	r3, [r7, #20]
 80121c6:	429a      	cmp	r2, r3
 80121c8:	d809      	bhi.n	80121de <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 80121ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121cc:	1d1a      	adds	r2, r3, #4
 80121ce:	627a      	str	r2, [r7, #36]	@ 0x24
 80121d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80121d2:	601a      	str	r2, [r3, #0]
 80121d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121d6:	1d1a      	adds	r2, r3, #4
 80121d8:	627a      	str	r2, [r7, #36]	@ 0x24
 80121da:	693a      	ldr	r2, [r7, #16]
 80121dc:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80121de:	68bb      	ldr	r3, [r7, #8]
 80121e0:	6a1b      	ldr	r3, [r3, #32]
 80121e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80121e4:	429a      	cmp	r2, r3
 80121e6:	d3c4      	bcc.n	8012172 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80121ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80121ee:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80121f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80121f2:	697b      	ldr	r3, [r7, #20]
 80121f4:	429a      	cmp	r2, r3
 80121f6:	d803      	bhi.n	8012200 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 80121f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121fa:	2200      	movs	r2, #0
 80121fc:	601a      	str	r2, [r3, #0]
 80121fe:	e19f      	b.n	8012540 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8012200:	2311      	movs	r3, #17
 8012202:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8012206:	e19b      	b.n	8012540 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	68db      	ldr	r3, [r3, #12]
 801220c:	683a      	ldr	r2, [r7, #0]
 801220e:	429a      	cmp	r2, r3
 8012210:	d902      	bls.n	8012218 <f_lseek+0x114>
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	68db      	ldr	r3, [r3, #12]
 8012216:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	683a      	ldr	r2, [r7, #0]
 801221c:	619a      	str	r2, [r3, #24]
			if (ofs) {
 801221e:	683b      	ldr	r3, [r7, #0]
 8012220:	2b00      	cmp	r3, #0
 8012222:	f000 818d 	beq.w	8012540 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8012226:	683b      	ldr	r3, [r7, #0]
 8012228:	3b01      	subs	r3, #1
 801222a:	4619      	mov	r1, r3
 801222c:	6878      	ldr	r0, [r7, #4]
 801222e:	f7fd ffce 	bl	80101ce <clmt_clust>
 8012232:	4602      	mov	r2, r0
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8012238:	68ba      	ldr	r2, [r7, #8]
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	69db      	ldr	r3, [r3, #28]
 801223e:	4619      	mov	r1, r3
 8012240:	4610      	mov	r0, r2
 8012242:	f7fd fcbb 	bl	800fbbc <clust2sect>
 8012246:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8012248:	69bb      	ldr	r3, [r7, #24]
 801224a:	2b00      	cmp	r3, #0
 801224c:	d104      	bne.n	8012258 <f_lseek+0x154>
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	2202      	movs	r2, #2
 8012252:	755a      	strb	r2, [r3, #21]
 8012254:	2302      	movs	r3, #2
 8012256:	e175      	b.n	8012544 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8012258:	683b      	ldr	r3, [r7, #0]
 801225a:	3b01      	subs	r3, #1
 801225c:	68ba      	ldr	r2, [r7, #8]
 801225e:	8992      	ldrh	r2, [r2, #12]
 8012260:	fbb3 f3f2 	udiv	r3, r3, r2
 8012264:	68ba      	ldr	r2, [r7, #8]
 8012266:	8952      	ldrh	r2, [r2, #10]
 8012268:	3a01      	subs	r2, #1
 801226a:	4013      	ands	r3, r2
 801226c:	69ba      	ldr	r2, [r7, #24]
 801226e:	4413      	add	r3, r2
 8012270:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	699b      	ldr	r3, [r3, #24]
 8012276:	68ba      	ldr	r2, [r7, #8]
 8012278:	8992      	ldrh	r2, [r2, #12]
 801227a:	fbb3 f1f2 	udiv	r1, r3, r2
 801227e:	fb01 f202 	mul.w	r2, r1, r2
 8012282:	1a9b      	subs	r3, r3, r2
 8012284:	2b00      	cmp	r3, #0
 8012286:	f000 815b 	beq.w	8012540 <f_lseek+0x43c>
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	6a1b      	ldr	r3, [r3, #32]
 801228e:	69ba      	ldr	r2, [r7, #24]
 8012290:	429a      	cmp	r2, r3
 8012292:	f000 8155 	beq.w	8012540 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	7d1b      	ldrb	r3, [r3, #20]
 801229a:	b25b      	sxtb	r3, r3
 801229c:	2b00      	cmp	r3, #0
 801229e:	da18      	bge.n	80122d2 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80122a0:	68bb      	ldr	r3, [r7, #8]
 80122a2:	7858      	ldrb	r0, [r3, #1]
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	6a1a      	ldr	r2, [r3, #32]
 80122ae:	2301      	movs	r3, #1
 80122b0:	f7fd f8f8 	bl	800f4a4 <disk_write>
 80122b4:	4603      	mov	r3, r0
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d004      	beq.n	80122c4 <f_lseek+0x1c0>
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	2201      	movs	r2, #1
 80122be:	755a      	strb	r2, [r3, #21]
 80122c0:	2301      	movs	r3, #1
 80122c2:	e13f      	b.n	8012544 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	7d1b      	ldrb	r3, [r3, #20]
 80122c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80122cc:	b2da      	uxtb	r2, r3
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80122d2:	68bb      	ldr	r3, [r7, #8]
 80122d4:	7858      	ldrb	r0, [r3, #1]
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80122dc:	2301      	movs	r3, #1
 80122de:	69ba      	ldr	r2, [r7, #24]
 80122e0:	f7fd f8c0 	bl	800f464 <disk_read>
 80122e4:	4603      	mov	r3, r0
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	d004      	beq.n	80122f4 <f_lseek+0x1f0>
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	2201      	movs	r2, #1
 80122ee:	755a      	strb	r2, [r3, #21]
 80122f0:	2301      	movs	r3, #1
 80122f2:	e127      	b.n	8012544 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	69ba      	ldr	r2, [r7, #24]
 80122f8:	621a      	str	r2, [r3, #32]
 80122fa:	e121      	b.n	8012540 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	68db      	ldr	r3, [r3, #12]
 8012300:	683a      	ldr	r2, [r7, #0]
 8012302:	429a      	cmp	r2, r3
 8012304:	d908      	bls.n	8012318 <f_lseek+0x214>
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	7d1b      	ldrb	r3, [r3, #20]
 801230a:	f003 0302 	and.w	r3, r3, #2
 801230e:	2b00      	cmp	r3, #0
 8012310:	d102      	bne.n	8012318 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	68db      	ldr	r3, [r3, #12]
 8012316:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	699b      	ldr	r3, [r3, #24]
 801231c:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 801231e:	2300      	movs	r3, #0
 8012320:	637b      	str	r3, [r7, #52]	@ 0x34
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012326:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8012328:	683b      	ldr	r3, [r7, #0]
 801232a:	2b00      	cmp	r3, #0
 801232c:	f000 80b5 	beq.w	801249a <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8012330:	68bb      	ldr	r3, [r7, #8]
 8012332:	895b      	ldrh	r3, [r3, #10]
 8012334:	461a      	mov	r2, r3
 8012336:	68bb      	ldr	r3, [r7, #8]
 8012338:	899b      	ldrh	r3, [r3, #12]
 801233a:	fb02 f303 	mul.w	r3, r2, r3
 801233e:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8012340:	6a3b      	ldr	r3, [r7, #32]
 8012342:	2b00      	cmp	r3, #0
 8012344:	d01b      	beq.n	801237e <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8012346:	683b      	ldr	r3, [r7, #0]
 8012348:	1e5a      	subs	r2, r3, #1
 801234a:	69fb      	ldr	r3, [r7, #28]
 801234c:	fbb2 f2f3 	udiv	r2, r2, r3
 8012350:	6a3b      	ldr	r3, [r7, #32]
 8012352:	1e59      	subs	r1, r3, #1
 8012354:	69fb      	ldr	r3, [r7, #28]
 8012356:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 801235a:	429a      	cmp	r2, r3
 801235c:	d30f      	bcc.n	801237e <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 801235e:	6a3b      	ldr	r3, [r7, #32]
 8012360:	1e5a      	subs	r2, r3, #1
 8012362:	69fb      	ldr	r3, [r7, #28]
 8012364:	425b      	negs	r3, r3
 8012366:	401a      	ands	r2, r3
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	699b      	ldr	r3, [r3, #24]
 8012370:	683a      	ldr	r2, [r7, #0]
 8012372:	1ad3      	subs	r3, r2, r3
 8012374:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	69db      	ldr	r3, [r3, #28]
 801237a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801237c:	e022      	b.n	80123c4 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	689b      	ldr	r3, [r3, #8]
 8012382:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8012384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012386:	2b00      	cmp	r3, #0
 8012388:	d119      	bne.n	80123be <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	2100      	movs	r1, #0
 801238e:	4618      	mov	r0, r3
 8012390:	f7fd fe85 	bl	801009e <create_chain>
 8012394:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8012396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012398:	2b01      	cmp	r3, #1
 801239a:	d104      	bne.n	80123a6 <f_lseek+0x2a2>
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	2202      	movs	r2, #2
 80123a0:	755a      	strb	r2, [r3, #21]
 80123a2:	2302      	movs	r3, #2
 80123a4:	e0ce      	b.n	8012544 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80123a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80123a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80123ac:	d104      	bne.n	80123b8 <f_lseek+0x2b4>
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	2201      	movs	r2, #1
 80123b2:	755a      	strb	r2, [r3, #21]
 80123b4:	2301      	movs	r3, #1
 80123b6:	e0c5      	b.n	8012544 <f_lseek+0x440>
					fp->obj.sclust = clst;
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80123bc:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80123c2:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80123c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d067      	beq.n	801249a <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 80123ca:	e03a      	b.n	8012442 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 80123cc:	683a      	ldr	r2, [r7, #0]
 80123ce:	69fb      	ldr	r3, [r7, #28]
 80123d0:	1ad3      	subs	r3, r2, r3
 80123d2:	603b      	str	r3, [r7, #0]
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	699a      	ldr	r2, [r3, #24]
 80123d8:	69fb      	ldr	r3, [r7, #28]
 80123da:	441a      	add	r2, r3
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	7d1b      	ldrb	r3, [r3, #20]
 80123e4:	f003 0302 	and.w	r3, r3, #2
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d00b      	beq.n	8012404 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80123f0:	4618      	mov	r0, r3
 80123f2:	f7fd fe54 	bl	801009e <create_chain>
 80123f6:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80123f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	d108      	bne.n	8012410 <f_lseek+0x30c>
							ofs = 0; break;
 80123fe:	2300      	movs	r3, #0
 8012400:	603b      	str	r3, [r7, #0]
 8012402:	e022      	b.n	801244a <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8012408:	4618      	mov	r0, r3
 801240a:	f7fd fbf6 	bl	800fbfa <get_fat>
 801240e:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012416:	d104      	bne.n	8012422 <f_lseek+0x31e>
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	2201      	movs	r2, #1
 801241c:	755a      	strb	r2, [r3, #21]
 801241e:	2301      	movs	r3, #1
 8012420:	e090      	b.n	8012544 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8012422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012424:	2b01      	cmp	r3, #1
 8012426:	d904      	bls.n	8012432 <f_lseek+0x32e>
 8012428:	68bb      	ldr	r3, [r7, #8]
 801242a:	6a1b      	ldr	r3, [r3, #32]
 801242c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801242e:	429a      	cmp	r2, r3
 8012430:	d304      	bcc.n	801243c <f_lseek+0x338>
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	2202      	movs	r2, #2
 8012436:	755a      	strb	r2, [r3, #21]
 8012438:	2302      	movs	r3, #2
 801243a:	e083      	b.n	8012544 <f_lseek+0x440>
					fp->clust = clst;
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012440:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8012442:	683a      	ldr	r2, [r7, #0]
 8012444:	69fb      	ldr	r3, [r7, #28]
 8012446:	429a      	cmp	r2, r3
 8012448:	d8c0      	bhi.n	80123cc <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	699a      	ldr	r2, [r3, #24]
 801244e:	683b      	ldr	r3, [r7, #0]
 8012450:	441a      	add	r2, r3
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8012456:	68bb      	ldr	r3, [r7, #8]
 8012458:	899b      	ldrh	r3, [r3, #12]
 801245a:	461a      	mov	r2, r3
 801245c:	683b      	ldr	r3, [r7, #0]
 801245e:	fbb3 f1f2 	udiv	r1, r3, r2
 8012462:	fb01 f202 	mul.w	r2, r1, r2
 8012466:	1a9b      	subs	r3, r3, r2
 8012468:	2b00      	cmp	r3, #0
 801246a:	d016      	beq.n	801249a <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 801246c:	68bb      	ldr	r3, [r7, #8]
 801246e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8012470:	4618      	mov	r0, r3
 8012472:	f7fd fba3 	bl	800fbbc <clust2sect>
 8012476:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8012478:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801247a:	2b00      	cmp	r3, #0
 801247c:	d104      	bne.n	8012488 <f_lseek+0x384>
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	2202      	movs	r2, #2
 8012482:	755a      	strb	r2, [r3, #21]
 8012484:	2302      	movs	r3, #2
 8012486:	e05d      	b.n	8012544 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8012488:	68bb      	ldr	r3, [r7, #8]
 801248a:	899b      	ldrh	r3, [r3, #12]
 801248c:	461a      	mov	r2, r3
 801248e:	683b      	ldr	r3, [r7, #0]
 8012490:	fbb3 f3f2 	udiv	r3, r3, r2
 8012494:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012496:	4413      	add	r3, r2
 8012498:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	699a      	ldr	r2, [r3, #24]
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	68db      	ldr	r3, [r3, #12]
 80124a2:	429a      	cmp	r2, r3
 80124a4:	d90a      	bls.n	80124bc <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	699a      	ldr	r2, [r3, #24]
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	7d1b      	ldrb	r3, [r3, #20]
 80124b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80124b6:	b2da      	uxtb	r2, r3
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	699b      	ldr	r3, [r3, #24]
 80124c0:	68ba      	ldr	r2, [r7, #8]
 80124c2:	8992      	ldrh	r2, [r2, #12]
 80124c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80124c8:	fb01 f202 	mul.w	r2, r1, r2
 80124cc:	1a9b      	subs	r3, r3, r2
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d036      	beq.n	8012540 <f_lseek+0x43c>
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	6a1b      	ldr	r3, [r3, #32]
 80124d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80124d8:	429a      	cmp	r2, r3
 80124da:	d031      	beq.n	8012540 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	7d1b      	ldrb	r3, [r3, #20]
 80124e0:	b25b      	sxtb	r3, r3
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	da18      	bge.n	8012518 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80124e6:	68bb      	ldr	r3, [r7, #8]
 80124e8:	7858      	ldrb	r0, [r3, #1]
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	6a1a      	ldr	r2, [r3, #32]
 80124f4:	2301      	movs	r3, #1
 80124f6:	f7fc ffd5 	bl	800f4a4 <disk_write>
 80124fa:	4603      	mov	r3, r0
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d004      	beq.n	801250a <f_lseek+0x406>
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	2201      	movs	r2, #1
 8012504:	755a      	strb	r2, [r3, #21]
 8012506:	2301      	movs	r3, #1
 8012508:	e01c      	b.n	8012544 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	7d1b      	ldrb	r3, [r3, #20]
 801250e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012512:	b2da      	uxtb	r2, r3
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8012518:	68bb      	ldr	r3, [r7, #8]
 801251a:	7858      	ldrb	r0, [r3, #1]
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012522:	2301      	movs	r3, #1
 8012524:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012526:	f7fc ff9d 	bl	800f464 <disk_read>
 801252a:	4603      	mov	r3, r0
 801252c:	2b00      	cmp	r3, #0
 801252e:	d004      	beq.n	801253a <f_lseek+0x436>
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	2201      	movs	r2, #1
 8012534:	755a      	strb	r2, [r3, #21]
 8012536:	2301      	movs	r3, #1
 8012538:	e004      	b.n	8012544 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801253e:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8012540:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8012544:	4618      	mov	r0, r3
 8012546:	3740      	adds	r7, #64	@ 0x40
 8012548:	46bd      	mov	sp, r7
 801254a:	bd80      	pop	{r7, pc}

0801254c <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 801254c:	b580      	push	{r7, lr}
 801254e:	b084      	sub	sp, #16
 8012550:	af00      	add	r7, sp, #0
 8012552:	6078      	str	r0, [r7, #4]
 8012554:	460b      	mov	r3, r1
 8012556:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8012558:	78fb      	ldrb	r3, [r7, #3]
 801255a:	2b0a      	cmp	r3, #10
 801255c:	d103      	bne.n	8012566 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 801255e:	210d      	movs	r1, #13
 8012560:	6878      	ldr	r0, [r7, #4]
 8012562:	f7ff fff3 	bl	801254c <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	685b      	ldr	r3, [r3, #4]
 801256a:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 801256c:	68fb      	ldr	r3, [r7, #12]
 801256e:	2b00      	cmp	r3, #0
 8012570:	db25      	blt.n	80125be <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8012572:	68fb      	ldr	r3, [r7, #12]
 8012574:	1c5a      	adds	r2, r3, #1
 8012576:	60fa      	str	r2, [r7, #12]
 8012578:	687a      	ldr	r2, [r7, #4]
 801257a:	4413      	add	r3, r2
 801257c:	78fa      	ldrb	r2, [r7, #3]
 801257e:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8012580:	68fb      	ldr	r3, [r7, #12]
 8012582:	2b3c      	cmp	r3, #60	@ 0x3c
 8012584:	dd12      	ble.n	80125ac <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	6818      	ldr	r0, [r3, #0]
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	f103 010c 	add.w	r1, r3, #12
 8012590:	68fa      	ldr	r2, [r7, #12]
 8012592:	f107 0308 	add.w	r3, r7, #8
 8012596:	f7ff fb79 	bl	8011c8c <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 801259a:	68ba      	ldr	r2, [r7, #8]
 801259c:	68fb      	ldr	r3, [r7, #12]
 801259e:	429a      	cmp	r2, r3
 80125a0:	d101      	bne.n	80125a6 <putc_bfd+0x5a>
 80125a2:	2300      	movs	r3, #0
 80125a4:	e001      	b.n	80125aa <putc_bfd+0x5e>
 80125a6:	f04f 33ff 	mov.w	r3, #4294967295
 80125aa:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	68fa      	ldr	r2, [r7, #12]
 80125b0:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	689b      	ldr	r3, [r3, #8]
 80125b6:	1c5a      	adds	r2, r3, #1
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	609a      	str	r2, [r3, #8]
 80125bc:	e000      	b.n	80125c0 <putc_bfd+0x74>
	if (i < 0) return;
 80125be:	bf00      	nop
}
 80125c0:	3710      	adds	r7, #16
 80125c2:	46bd      	mov	sp, r7
 80125c4:	bd80      	pop	{r7, pc}

080125c6 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 80125c6:	b580      	push	{r7, lr}
 80125c8:	b084      	sub	sp, #16
 80125ca:	af00      	add	r7, sp, #0
 80125cc:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	685b      	ldr	r3, [r3, #4]
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	db16      	blt.n	8012604 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	6818      	ldr	r0, [r3, #0]
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	f103 010c 	add.w	r1, r3, #12
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	685b      	ldr	r3, [r3, #4]
 80125e4:	461a      	mov	r2, r3
 80125e6:	f107 030c 	add.w	r3, r7, #12
 80125ea:	f7ff fb4f 	bl	8011c8c <f_write>
 80125ee:	4603      	mov	r3, r0
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d107      	bne.n	8012604 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	685b      	ldr	r3, [r3, #4]
 80125f8:	68fa      	ldr	r2, [r7, #12]
 80125fa:	4293      	cmp	r3, r2
 80125fc:	d102      	bne.n	8012604 <putc_flush+0x3e>
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	689b      	ldr	r3, [r3, #8]
 8012602:	e001      	b.n	8012608 <putc_flush+0x42>
	return EOF;
 8012604:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012608:	4618      	mov	r0, r3
 801260a:	3710      	adds	r7, #16
 801260c:	46bd      	mov	sp, r7
 801260e:	bd80      	pop	{r7, pc}

08012610 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8012610:	b480      	push	{r7}
 8012612:	b083      	sub	sp, #12
 8012614:	af00      	add	r7, sp, #0
 8012616:	6078      	str	r0, [r7, #4]
 8012618:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	683a      	ldr	r2, [r7, #0]
 801261e:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	2200      	movs	r2, #0
 8012624:	605a      	str	r2, [r3, #4]
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	685a      	ldr	r2, [r3, #4]
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	609a      	str	r2, [r3, #8]
}
 801262e:	bf00      	nop
 8012630:	370c      	adds	r7, #12
 8012632:	46bd      	mov	sp, r7
 8012634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012638:	4770      	bx	lr
	...

0801263c <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 801263c:	b40e      	push	{r1, r2, r3}
 801263e:	b580      	push	{r7, lr}
 8012640:	b0a7      	sub	sp, #156	@ 0x9c
 8012642:	af00      	add	r7, sp, #0
 8012644:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 8012646:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801264a:	6879      	ldr	r1, [r7, #4]
 801264c:	4618      	mov	r0, r3
 801264e:	f7ff ffdf 	bl	8012610 <putc_init>

	va_start(arp, fmt);
 8012652:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8012656:	67bb      	str	r3, [r7, #120]	@ 0x78

	for (;;) {
		c = *fmt++;
 8012658:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801265c:	1c5a      	adds	r2, r3, #1
 801265e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8012662:	781b      	ldrb	r3, [r3, #0]
 8012664:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == 0) break;			/* End of string */
 8012668:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 801266c:	2b00      	cmp	r3, #0
 801266e:	f000 81f2 	beq.w	8012a56 <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 8012672:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8012676:	2b25      	cmp	r3, #37	@ 0x25
 8012678:	d008      	beq.n	801268c <f_printf+0x50>
			putc_bfd(&pb, c);
 801267a:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 801267e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012682:	4611      	mov	r1, r2
 8012684:	4618      	mov	r0, r3
 8012686:	f7ff ff61 	bl	801254c <putc_bfd>
			continue;
 801268a:	e1e3      	b.n	8012a54 <f_printf+0x418>
		}
		w = f = 0;
 801268c:	2300      	movs	r3, #0
 801268e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8012692:	2300      	movs	r3, #0
 8012694:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
		c = *fmt++;
 8012698:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801269c:	1c5a      	adds	r2, r3, #1
 801269e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80126a2:	781b      	ldrb	r3, [r3, #0]
 80126a4:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == '0') {				/* Flag: '0' padding */
 80126a8:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80126ac:	2b30      	cmp	r3, #48	@ 0x30
 80126ae:	d10b      	bne.n	80126c8 <f_printf+0x8c>
			f = 1; c = *fmt++;
 80126b0:	2301      	movs	r3, #1
 80126b2:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 80126b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80126ba:	1c5a      	adds	r2, r3, #1
 80126bc:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80126c0:	781b      	ldrb	r3, [r3, #0]
 80126c2:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 80126c6:	e024      	b.n	8012712 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 80126c8:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80126cc:	2b2d      	cmp	r3, #45	@ 0x2d
 80126ce:	d120      	bne.n	8012712 <f_printf+0xd6>
				f = 2; c = *fmt++;
 80126d0:	2302      	movs	r3, #2
 80126d2:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 80126d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80126da:	1c5a      	adds	r2, r3, #1
 80126dc:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80126e0:	781b      	ldrb	r3, [r3, #0]
 80126e2:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 80126e6:	e014      	b.n	8012712 <f_printf+0xd6>
			w = w * 10 + c - '0';
 80126e8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80126ec:	4613      	mov	r3, r2
 80126ee:	009b      	lsls	r3, r3, #2
 80126f0:	4413      	add	r3, r2
 80126f2:	005b      	lsls	r3, r3, #1
 80126f4:	461a      	mov	r2, r3
 80126f6:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80126fa:	4413      	add	r3, r2
 80126fc:	3b30      	subs	r3, #48	@ 0x30
 80126fe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			c = *fmt++;
 8012702:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012706:	1c5a      	adds	r2, r3, #1
 8012708:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 801270c:	781b      	ldrb	r3, [r3, #0]
 801270e:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		while (IsDigit(c)) {		/* Precision */
 8012712:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8012716:	2b2f      	cmp	r3, #47	@ 0x2f
 8012718:	d903      	bls.n	8012722 <f_printf+0xe6>
 801271a:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 801271e:	2b39      	cmp	r3, #57	@ 0x39
 8012720:	d9e2      	bls.n	80126e8 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 8012722:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8012726:	2b6c      	cmp	r3, #108	@ 0x6c
 8012728:	d003      	beq.n	8012732 <f_printf+0xf6>
 801272a:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 801272e:	2b4c      	cmp	r3, #76	@ 0x4c
 8012730:	d10d      	bne.n	801274e <f_printf+0x112>
			f |= 4; c = *fmt++;
 8012732:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8012736:	f043 0304 	orr.w	r3, r3, #4
 801273a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 801273e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012742:	1c5a      	adds	r2, r3, #1
 8012744:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8012748:	781b      	ldrb	r3, [r3, #0]
 801274a:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		}
		if (!c) break;
 801274e:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8012752:	2b00      	cmp	r3, #0
 8012754:	f000 8181 	beq.w	8012a5a <f_printf+0x41e>
		d = c;
 8012758:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 801275c:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		if (IsLower(d)) d -= 0x20;
 8012760:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8012764:	2b60      	cmp	r3, #96	@ 0x60
 8012766:	d908      	bls.n	801277a <f_printf+0x13e>
 8012768:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 801276c:	2b7a      	cmp	r3, #122	@ 0x7a
 801276e:	d804      	bhi.n	801277a <f_printf+0x13e>
 8012770:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8012774:	3b20      	subs	r3, #32
 8012776:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		switch (d) {				/* Type is... */
 801277a:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 801277e:	3b42      	subs	r3, #66	@ 0x42
 8012780:	2b16      	cmp	r3, #22
 8012782:	f200 8098 	bhi.w	80128b6 <f_printf+0x27a>
 8012786:	a201      	add	r2, pc, #4	@ (adr r2, 801278c <f_printf+0x150>)
 8012788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801278c:	08012897 	.word	0x08012897
 8012790:	0801287f 	.word	0x0801287f
 8012794:	080128a7 	.word	0x080128a7
 8012798:	080128b7 	.word	0x080128b7
 801279c:	080128b7 	.word	0x080128b7
 80127a0:	080128b7 	.word	0x080128b7
 80127a4:	080128b7 	.word	0x080128b7
 80127a8:	080128b7 	.word	0x080128b7
 80127ac:	080128b7 	.word	0x080128b7
 80127b0:	080128b7 	.word	0x080128b7
 80127b4:	080128b7 	.word	0x080128b7
 80127b8:	080128b7 	.word	0x080128b7
 80127bc:	080128b7 	.word	0x080128b7
 80127c0:	0801289f 	.word	0x0801289f
 80127c4:	080128b7 	.word	0x080128b7
 80127c8:	080128b7 	.word	0x080128b7
 80127cc:	080128b7 	.word	0x080128b7
 80127d0:	080127e9 	.word	0x080127e9
 80127d4:	080128b7 	.word	0x080128b7
 80127d8:	080128a7 	.word	0x080128a7
 80127dc:	080128b7 	.word	0x080128b7
 80127e0:	080128b7 	.word	0x080128b7
 80127e4:	080128af 	.word	0x080128af
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 80127e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80127ea:	1d1a      	adds	r2, r3, #4
 80127ec:	67ba      	str	r2, [r7, #120]	@ 0x78
 80127ee:	681b      	ldr	r3, [r3, #0]
 80127f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
			for (j = 0; p[j]; j++) ;
 80127f2:	2300      	movs	r3, #0
 80127f4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80127f8:	e004      	b.n	8012804 <f_printf+0x1c8>
 80127fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80127fe:	3301      	adds	r3, #1
 8012800:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8012804:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8012806:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801280a:	4413      	add	r3, r2
 801280c:	781b      	ldrb	r3, [r3, #0]
 801280e:	2b00      	cmp	r3, #0
 8012810:	d1f3      	bne.n	80127fa <f_printf+0x1be>
			if (!(f & 2)) {
 8012812:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8012816:	f003 0302 	and.w	r3, r3, #2
 801281a:	2b00      	cmp	r3, #0
 801281c:	d11a      	bne.n	8012854 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 801281e:	e005      	b.n	801282c <f_printf+0x1f0>
 8012820:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012824:	2120      	movs	r1, #32
 8012826:	4618      	mov	r0, r3
 8012828:	f7ff fe90 	bl	801254c <putc_bfd>
 801282c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012830:	1c5a      	adds	r2, r3, #1
 8012832:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8012836:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801283a:	429a      	cmp	r2, r3
 801283c:	d8f0      	bhi.n	8012820 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 801283e:	e009      	b.n	8012854 <f_printf+0x218>
 8012840:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8012842:	1c5a      	adds	r2, r3, #1
 8012844:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8012846:	781a      	ldrb	r2, [r3, #0]
 8012848:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801284c:	4611      	mov	r1, r2
 801284e:	4618      	mov	r0, r3
 8012850:	f7ff fe7c 	bl	801254c <putc_bfd>
 8012854:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8012856:	781b      	ldrb	r3, [r3, #0]
 8012858:	2b00      	cmp	r3, #0
 801285a:	d1f1      	bne.n	8012840 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 801285c:	e005      	b.n	801286a <f_printf+0x22e>
 801285e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012862:	2120      	movs	r1, #32
 8012864:	4618      	mov	r0, r3
 8012866:	f7ff fe71 	bl	801254c <putc_bfd>
 801286a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801286e:	1c5a      	adds	r2, r3, #1
 8012870:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8012874:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8012878:	429a      	cmp	r2, r3
 801287a:	d8f0      	bhi.n	801285e <f_printf+0x222>
			continue;
 801287c:	e0ea      	b.n	8012a54 <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 801287e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012880:	1d1a      	adds	r2, r3, #4
 8012882:	67ba      	str	r2, [r7, #120]	@ 0x78
 8012884:	681b      	ldr	r3, [r3, #0]
 8012886:	b2da      	uxtb	r2, r3
 8012888:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801288c:	4611      	mov	r1, r2
 801288e:	4618      	mov	r0, r3
 8012890:	f7ff fe5c 	bl	801254c <putc_bfd>
 8012894:	e0de      	b.n	8012a54 <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 8012896:	2302      	movs	r3, #2
 8012898:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 801289c:	e014      	b.n	80128c8 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 801289e:	2308      	movs	r3, #8
 80128a0:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 80128a4:	e010      	b.n	80128c8 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 80128a6:	230a      	movs	r3, #10
 80128a8:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 80128ac:	e00c      	b.n	80128c8 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 80128ae:	2310      	movs	r3, #16
 80128b0:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 80128b4:	e008      	b.n	80128c8 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 80128b6:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 80128ba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80128be:	4611      	mov	r1, r2
 80128c0:	4618      	mov	r0, r3
 80128c2:	f7ff fe43 	bl	801254c <putc_bfd>
 80128c6:	e0c5      	b.n	8012a54 <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 80128c8:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80128cc:	f003 0304 	and.w	r3, r3, #4
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	d004      	beq.n	80128de <f_printf+0x2a2>
 80128d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80128d6:	1d1a      	adds	r2, r3, #4
 80128d8:	67ba      	str	r2, [r7, #120]	@ 0x78
 80128da:	681b      	ldr	r3, [r3, #0]
 80128dc:	e00c      	b.n	80128f8 <f_printf+0x2bc>
 80128de:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 80128e2:	2b44      	cmp	r3, #68	@ 0x44
 80128e4:	d104      	bne.n	80128f0 <f_printf+0x2b4>
 80128e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80128e8:	1d1a      	adds	r2, r3, #4
 80128ea:	67ba      	str	r2, [r7, #120]	@ 0x78
 80128ec:	681b      	ldr	r3, [r3, #0]
 80128ee:	e003      	b.n	80128f8 <f_printf+0x2bc>
 80128f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80128f2:	1d1a      	adds	r2, r3, #4
 80128f4:	67ba      	str	r2, [r7, #120]	@ 0x78
 80128f6:	681b      	ldr	r3, [r3, #0]
 80128f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		if (d == 'D' && (v & 0x80000000)) {
 80128fc:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8012900:	2b44      	cmp	r3, #68	@ 0x44
 8012902:	d10e      	bne.n	8012922 <f_printf+0x2e6>
 8012904:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8012908:	2b00      	cmp	r3, #0
 801290a:	da0a      	bge.n	8012922 <f_printf+0x2e6>
			v = 0 - v;
 801290c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8012910:	425b      	negs	r3, r3
 8012912:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			f |= 8;
 8012916:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 801291a:	f043 0308 	orr.w	r3, r3, #8
 801291e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		}
		i = 0;
 8012922:	2300      	movs	r3, #0
 8012924:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 8012928:	f897 2096 	ldrb.w	r2, [r7, #150]	@ 0x96
 801292c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8012930:	fbb3 f1f2 	udiv	r1, r3, r2
 8012934:	fb01 f202 	mul.w	r2, r1, r2
 8012938:	1a9b      	subs	r3, r3, r2
 801293a:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
 801293e:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8012942:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8012946:	fbb2 f3f3 	udiv	r3, r2, r3
 801294a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 801294e:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8012952:	2b09      	cmp	r3, #9
 8012954:	d90b      	bls.n	801296e <f_printf+0x332>
 8012956:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 801295a:	2b78      	cmp	r3, #120	@ 0x78
 801295c:	d101      	bne.n	8012962 <f_printf+0x326>
 801295e:	2227      	movs	r2, #39	@ 0x27
 8012960:	e000      	b.n	8012964 <f_printf+0x328>
 8012962:	2207      	movs	r2, #7
 8012964:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8012968:	4413      	add	r3, r2
 801296a:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
			str[i++] = d + '0';
 801296e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8012972:	1c5a      	adds	r2, r3, #1
 8012974:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8012978:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 801297c:	3230      	adds	r2, #48	@ 0x30
 801297e:	b2d2      	uxtb	r2, r2
 8012980:	3398      	adds	r3, #152	@ 0x98
 8012982:	443b      	add	r3, r7
 8012984:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 8012988:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801298c:	2b00      	cmp	r3, #0
 801298e:	d003      	beq.n	8012998 <f_printf+0x35c>
 8012990:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8012994:	2b1f      	cmp	r3, #31
 8012996:	d9c7      	bls.n	8012928 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 8012998:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 801299c:	f003 0308 	and.w	r3, r3, #8
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d009      	beq.n	80129b8 <f_printf+0x37c>
 80129a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80129a8:	1c5a      	adds	r2, r3, #1
 80129aa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80129ae:	3398      	adds	r3, #152	@ 0x98
 80129b0:	443b      	add	r3, r7
 80129b2:	222d      	movs	r2, #45	@ 0x2d
 80129b4:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 80129b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80129bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80129c0:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80129c4:	f003 0301 	and.w	r3, r3, #1
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	d001      	beq.n	80129d0 <f_printf+0x394>
 80129cc:	2330      	movs	r3, #48	@ 0x30
 80129ce:	e000      	b.n	80129d2 <f_printf+0x396>
 80129d0:	2320      	movs	r3, #32
 80129d2:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 80129d6:	e007      	b.n	80129e8 <f_printf+0x3ac>
 80129d8:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 80129dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80129e0:	4611      	mov	r1, r2
 80129e2:	4618      	mov	r0, r3
 80129e4:	f7ff fdb2 	bl	801254c <putc_bfd>
 80129e8:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80129ec:	f003 0302 	and.w	r3, r3, #2
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d108      	bne.n	8012a06 <f_printf+0x3ca>
 80129f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80129f8:	1c5a      	adds	r2, r3, #1
 80129fa:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80129fe:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8012a02:	429a      	cmp	r2, r3
 8012a04:	d8e8      	bhi.n	80129d8 <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 8012a06:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8012a0a:	3b01      	subs	r3, #1
 8012a0c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8012a10:	f107 020c 	add.w	r2, r7, #12
 8012a14:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8012a18:	4413      	add	r3, r2
 8012a1a:	781a      	ldrb	r2, [r3, #0]
 8012a1c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012a20:	4611      	mov	r1, r2
 8012a22:	4618      	mov	r0, r3
 8012a24:	f7ff fd92 	bl	801254c <putc_bfd>
		} while (i);
 8012a28:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d1ea      	bne.n	8012a06 <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 8012a30:	e007      	b.n	8012a42 <f_printf+0x406>
 8012a32:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 8012a36:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012a3a:	4611      	mov	r1, r2
 8012a3c:	4618      	mov	r0, r3
 8012a3e:	f7ff fd85 	bl	801254c <putc_bfd>
 8012a42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012a46:	1c5a      	adds	r2, r3, #1
 8012a48:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8012a4c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8012a50:	429a      	cmp	r2, r3
 8012a52:	d8ee      	bhi.n	8012a32 <f_printf+0x3f6>
		c = *fmt++;
 8012a54:	e600      	b.n	8012658 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 8012a56:	bf00      	nop
 8012a58:	e000      	b.n	8012a5c <f_printf+0x420>
		if (!c) break;
 8012a5a:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 8012a5c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012a60:	4618      	mov	r0, r3
 8012a62:	f7ff fdb0 	bl	80125c6 <putc_flush>
 8012a66:	4603      	mov	r3, r0
}
 8012a68:	4618      	mov	r0, r3
 8012a6a:	379c      	adds	r7, #156	@ 0x9c
 8012a6c:	46bd      	mov	sp, r7
 8012a6e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012a72:	b003      	add	sp, #12
 8012a74:	4770      	bx	lr
 8012a76:	bf00      	nop

08012a78 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8012a78:	b480      	push	{r7}
 8012a7a:	b087      	sub	sp, #28
 8012a7c:	af00      	add	r7, sp, #0
 8012a7e:	60f8      	str	r0, [r7, #12]
 8012a80:	60b9      	str	r1, [r7, #8]
 8012a82:	4613      	mov	r3, r2
 8012a84:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8012a86:	2301      	movs	r3, #1
 8012a88:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8012a8a:	2300      	movs	r3, #0
 8012a8c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8012a8e:	4b1f      	ldr	r3, [pc, #124]	@ (8012b0c <FATFS_LinkDriverEx+0x94>)
 8012a90:	7a5b      	ldrb	r3, [r3, #9]
 8012a92:	b2db      	uxtb	r3, r3
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d131      	bne.n	8012afc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8012a98:	4b1c      	ldr	r3, [pc, #112]	@ (8012b0c <FATFS_LinkDriverEx+0x94>)
 8012a9a:	7a5b      	ldrb	r3, [r3, #9]
 8012a9c:	b2db      	uxtb	r3, r3
 8012a9e:	461a      	mov	r2, r3
 8012aa0:	4b1a      	ldr	r3, [pc, #104]	@ (8012b0c <FATFS_LinkDriverEx+0x94>)
 8012aa2:	2100      	movs	r1, #0
 8012aa4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8012aa6:	4b19      	ldr	r3, [pc, #100]	@ (8012b0c <FATFS_LinkDriverEx+0x94>)
 8012aa8:	7a5b      	ldrb	r3, [r3, #9]
 8012aaa:	b2db      	uxtb	r3, r3
 8012aac:	4a17      	ldr	r2, [pc, #92]	@ (8012b0c <FATFS_LinkDriverEx+0x94>)
 8012aae:	009b      	lsls	r3, r3, #2
 8012ab0:	4413      	add	r3, r2
 8012ab2:	68fa      	ldr	r2, [r7, #12]
 8012ab4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8012ab6:	4b15      	ldr	r3, [pc, #84]	@ (8012b0c <FATFS_LinkDriverEx+0x94>)
 8012ab8:	7a5b      	ldrb	r3, [r3, #9]
 8012aba:	b2db      	uxtb	r3, r3
 8012abc:	461a      	mov	r2, r3
 8012abe:	4b13      	ldr	r3, [pc, #76]	@ (8012b0c <FATFS_LinkDriverEx+0x94>)
 8012ac0:	4413      	add	r3, r2
 8012ac2:	79fa      	ldrb	r2, [r7, #7]
 8012ac4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8012ac6:	4b11      	ldr	r3, [pc, #68]	@ (8012b0c <FATFS_LinkDriverEx+0x94>)
 8012ac8:	7a5b      	ldrb	r3, [r3, #9]
 8012aca:	b2db      	uxtb	r3, r3
 8012acc:	1c5a      	adds	r2, r3, #1
 8012ace:	b2d1      	uxtb	r1, r2
 8012ad0:	4a0e      	ldr	r2, [pc, #56]	@ (8012b0c <FATFS_LinkDriverEx+0x94>)
 8012ad2:	7251      	strb	r1, [r2, #9]
 8012ad4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8012ad6:	7dbb      	ldrb	r3, [r7, #22]
 8012ad8:	3330      	adds	r3, #48	@ 0x30
 8012ada:	b2da      	uxtb	r2, r3
 8012adc:	68bb      	ldr	r3, [r7, #8]
 8012ade:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8012ae0:	68bb      	ldr	r3, [r7, #8]
 8012ae2:	3301      	adds	r3, #1
 8012ae4:	223a      	movs	r2, #58	@ 0x3a
 8012ae6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8012ae8:	68bb      	ldr	r3, [r7, #8]
 8012aea:	3302      	adds	r3, #2
 8012aec:	222f      	movs	r2, #47	@ 0x2f
 8012aee:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8012af0:	68bb      	ldr	r3, [r7, #8]
 8012af2:	3303      	adds	r3, #3
 8012af4:	2200      	movs	r2, #0
 8012af6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8012af8:	2300      	movs	r3, #0
 8012afa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8012afc:	7dfb      	ldrb	r3, [r7, #23]
}
 8012afe:	4618      	mov	r0, r3
 8012b00:	371c      	adds	r7, #28
 8012b02:	46bd      	mov	sp, r7
 8012b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b08:	4770      	bx	lr
 8012b0a:	bf00      	nop
 8012b0c:	24002c10 	.word	0x24002c10

08012b10 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8012b10:	b580      	push	{r7, lr}
 8012b12:	b082      	sub	sp, #8
 8012b14:	af00      	add	r7, sp, #0
 8012b16:	6078      	str	r0, [r7, #4]
 8012b18:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8012b1a:	2200      	movs	r2, #0
 8012b1c:	6839      	ldr	r1, [r7, #0]
 8012b1e:	6878      	ldr	r0, [r7, #4]
 8012b20:	f7ff ffaa 	bl	8012a78 <FATFS_LinkDriverEx>
 8012b24:	4603      	mov	r3, r0
}
 8012b26:	4618      	mov	r0, r3
 8012b28:	3708      	adds	r7, #8
 8012b2a:	46bd      	mov	sp, r7
 8012b2c:	bd80      	pop	{r7, pc}
	...

08012b30 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8012b30:	b480      	push	{r7}
 8012b32:	b085      	sub	sp, #20
 8012b34:	af00      	add	r7, sp, #0
 8012b36:	4603      	mov	r3, r0
 8012b38:	6039      	str	r1, [r7, #0]
 8012b3a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8012b3c:	88fb      	ldrh	r3, [r7, #6]
 8012b3e:	2b7f      	cmp	r3, #127	@ 0x7f
 8012b40:	d802      	bhi.n	8012b48 <ff_convert+0x18>
		c = chr;
 8012b42:	88fb      	ldrh	r3, [r7, #6]
 8012b44:	81fb      	strh	r3, [r7, #14]
 8012b46:	e025      	b.n	8012b94 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8012b48:	683b      	ldr	r3, [r7, #0]
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d00b      	beq.n	8012b66 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8012b4e:	88fb      	ldrh	r3, [r7, #6]
 8012b50:	2bff      	cmp	r3, #255	@ 0xff
 8012b52:	d805      	bhi.n	8012b60 <ff_convert+0x30>
 8012b54:	88fb      	ldrh	r3, [r7, #6]
 8012b56:	3b80      	subs	r3, #128	@ 0x80
 8012b58:	4a12      	ldr	r2, [pc, #72]	@ (8012ba4 <ff_convert+0x74>)
 8012b5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012b5e:	e000      	b.n	8012b62 <ff_convert+0x32>
 8012b60:	2300      	movs	r3, #0
 8012b62:	81fb      	strh	r3, [r7, #14]
 8012b64:	e016      	b.n	8012b94 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8012b66:	2300      	movs	r3, #0
 8012b68:	81fb      	strh	r3, [r7, #14]
 8012b6a:	e009      	b.n	8012b80 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8012b6c:	89fb      	ldrh	r3, [r7, #14]
 8012b6e:	4a0d      	ldr	r2, [pc, #52]	@ (8012ba4 <ff_convert+0x74>)
 8012b70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012b74:	88fa      	ldrh	r2, [r7, #6]
 8012b76:	429a      	cmp	r2, r3
 8012b78:	d006      	beq.n	8012b88 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8012b7a:	89fb      	ldrh	r3, [r7, #14]
 8012b7c:	3301      	adds	r3, #1
 8012b7e:	81fb      	strh	r3, [r7, #14]
 8012b80:	89fb      	ldrh	r3, [r7, #14]
 8012b82:	2b7f      	cmp	r3, #127	@ 0x7f
 8012b84:	d9f2      	bls.n	8012b6c <ff_convert+0x3c>
 8012b86:	e000      	b.n	8012b8a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8012b88:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8012b8a:	89fb      	ldrh	r3, [r7, #14]
 8012b8c:	3380      	adds	r3, #128	@ 0x80
 8012b8e:	b29b      	uxth	r3, r3
 8012b90:	b2db      	uxtb	r3, r3
 8012b92:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8012b94:	89fb      	ldrh	r3, [r7, #14]
}
 8012b96:	4618      	mov	r0, r3
 8012b98:	3714      	adds	r7, #20
 8012b9a:	46bd      	mov	sp, r7
 8012b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ba0:	4770      	bx	lr
 8012ba2:	bf00      	nop
 8012ba4:	08013160 	.word	0x08013160

08012ba8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8012ba8:	b480      	push	{r7}
 8012baa:	b087      	sub	sp, #28
 8012bac:	af00      	add	r7, sp, #0
 8012bae:	4603      	mov	r3, r0
 8012bb0:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8012bb2:	88fb      	ldrh	r3, [r7, #6]
 8012bb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012bb8:	d201      	bcs.n	8012bbe <ff_wtoupper+0x16>
 8012bba:	4b3e      	ldr	r3, [pc, #248]	@ (8012cb4 <ff_wtoupper+0x10c>)
 8012bbc:	e000      	b.n	8012bc0 <ff_wtoupper+0x18>
 8012bbe:	4b3e      	ldr	r3, [pc, #248]	@ (8012cb8 <ff_wtoupper+0x110>)
 8012bc0:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8012bc2:	697b      	ldr	r3, [r7, #20]
 8012bc4:	1c9a      	adds	r2, r3, #2
 8012bc6:	617a      	str	r2, [r7, #20]
 8012bc8:	881b      	ldrh	r3, [r3, #0]
 8012bca:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8012bcc:	8a7b      	ldrh	r3, [r7, #18]
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d068      	beq.n	8012ca4 <ff_wtoupper+0xfc>
 8012bd2:	88fa      	ldrh	r2, [r7, #6]
 8012bd4:	8a7b      	ldrh	r3, [r7, #18]
 8012bd6:	429a      	cmp	r2, r3
 8012bd8:	d364      	bcc.n	8012ca4 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8012bda:	697b      	ldr	r3, [r7, #20]
 8012bdc:	1c9a      	adds	r2, r3, #2
 8012bde:	617a      	str	r2, [r7, #20]
 8012be0:	881b      	ldrh	r3, [r3, #0]
 8012be2:	823b      	strh	r3, [r7, #16]
 8012be4:	8a3b      	ldrh	r3, [r7, #16]
 8012be6:	0a1b      	lsrs	r3, r3, #8
 8012be8:	81fb      	strh	r3, [r7, #14]
 8012bea:	8a3b      	ldrh	r3, [r7, #16]
 8012bec:	b2db      	uxtb	r3, r3
 8012bee:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8012bf0:	88fa      	ldrh	r2, [r7, #6]
 8012bf2:	8a79      	ldrh	r1, [r7, #18]
 8012bf4:	8a3b      	ldrh	r3, [r7, #16]
 8012bf6:	440b      	add	r3, r1
 8012bf8:	429a      	cmp	r2, r3
 8012bfa:	da49      	bge.n	8012c90 <ff_wtoupper+0xe8>
			switch (cmd) {
 8012bfc:	89fb      	ldrh	r3, [r7, #14]
 8012bfe:	2b08      	cmp	r3, #8
 8012c00:	d84f      	bhi.n	8012ca2 <ff_wtoupper+0xfa>
 8012c02:	a201      	add	r2, pc, #4	@ (adr r2, 8012c08 <ff_wtoupper+0x60>)
 8012c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c08:	08012c2d 	.word	0x08012c2d
 8012c0c:	08012c3f 	.word	0x08012c3f
 8012c10:	08012c55 	.word	0x08012c55
 8012c14:	08012c5d 	.word	0x08012c5d
 8012c18:	08012c65 	.word	0x08012c65
 8012c1c:	08012c6d 	.word	0x08012c6d
 8012c20:	08012c75 	.word	0x08012c75
 8012c24:	08012c7d 	.word	0x08012c7d
 8012c28:	08012c85 	.word	0x08012c85
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8012c2c:	88fa      	ldrh	r2, [r7, #6]
 8012c2e:	8a7b      	ldrh	r3, [r7, #18]
 8012c30:	1ad3      	subs	r3, r2, r3
 8012c32:	005b      	lsls	r3, r3, #1
 8012c34:	697a      	ldr	r2, [r7, #20]
 8012c36:	4413      	add	r3, r2
 8012c38:	881b      	ldrh	r3, [r3, #0]
 8012c3a:	80fb      	strh	r3, [r7, #6]
 8012c3c:	e027      	b.n	8012c8e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8012c3e:	88fa      	ldrh	r2, [r7, #6]
 8012c40:	8a7b      	ldrh	r3, [r7, #18]
 8012c42:	1ad3      	subs	r3, r2, r3
 8012c44:	b29b      	uxth	r3, r3
 8012c46:	f003 0301 	and.w	r3, r3, #1
 8012c4a:	b29b      	uxth	r3, r3
 8012c4c:	88fa      	ldrh	r2, [r7, #6]
 8012c4e:	1ad3      	subs	r3, r2, r3
 8012c50:	80fb      	strh	r3, [r7, #6]
 8012c52:	e01c      	b.n	8012c8e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8012c54:	88fb      	ldrh	r3, [r7, #6]
 8012c56:	3b10      	subs	r3, #16
 8012c58:	80fb      	strh	r3, [r7, #6]
 8012c5a:	e018      	b.n	8012c8e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8012c5c:	88fb      	ldrh	r3, [r7, #6]
 8012c5e:	3b20      	subs	r3, #32
 8012c60:	80fb      	strh	r3, [r7, #6]
 8012c62:	e014      	b.n	8012c8e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8012c64:	88fb      	ldrh	r3, [r7, #6]
 8012c66:	3b30      	subs	r3, #48	@ 0x30
 8012c68:	80fb      	strh	r3, [r7, #6]
 8012c6a:	e010      	b.n	8012c8e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8012c6c:	88fb      	ldrh	r3, [r7, #6]
 8012c6e:	3b1a      	subs	r3, #26
 8012c70:	80fb      	strh	r3, [r7, #6]
 8012c72:	e00c      	b.n	8012c8e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8012c74:	88fb      	ldrh	r3, [r7, #6]
 8012c76:	3308      	adds	r3, #8
 8012c78:	80fb      	strh	r3, [r7, #6]
 8012c7a:	e008      	b.n	8012c8e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8012c7c:	88fb      	ldrh	r3, [r7, #6]
 8012c7e:	3b50      	subs	r3, #80	@ 0x50
 8012c80:	80fb      	strh	r3, [r7, #6]
 8012c82:	e004      	b.n	8012c8e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8012c84:	88fb      	ldrh	r3, [r7, #6]
 8012c86:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8012c8a:	80fb      	strh	r3, [r7, #6]
 8012c8c:	bf00      	nop
			}
			break;
 8012c8e:	e008      	b.n	8012ca2 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8012c90:	89fb      	ldrh	r3, [r7, #14]
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d195      	bne.n	8012bc2 <ff_wtoupper+0x1a>
 8012c96:	8a3b      	ldrh	r3, [r7, #16]
 8012c98:	005b      	lsls	r3, r3, #1
 8012c9a:	697a      	ldr	r2, [r7, #20]
 8012c9c:	4413      	add	r3, r2
 8012c9e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8012ca0:	e78f      	b.n	8012bc2 <ff_wtoupper+0x1a>
			break;
 8012ca2:	bf00      	nop
	}

	return chr;
 8012ca4:	88fb      	ldrh	r3, [r7, #6]
}
 8012ca6:	4618      	mov	r0, r3
 8012ca8:	371c      	adds	r7, #28
 8012caa:	46bd      	mov	sp, r7
 8012cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cb0:	4770      	bx	lr
 8012cb2:	bf00      	nop
 8012cb4:	08013260 	.word	0x08013260
 8012cb8:	08013454 	.word	0x08013454

08012cbc <memset>:
 8012cbc:	4402      	add	r2, r0
 8012cbe:	4603      	mov	r3, r0
 8012cc0:	4293      	cmp	r3, r2
 8012cc2:	d100      	bne.n	8012cc6 <memset+0xa>
 8012cc4:	4770      	bx	lr
 8012cc6:	f803 1b01 	strb.w	r1, [r3], #1
 8012cca:	e7f9      	b.n	8012cc0 <memset+0x4>

08012ccc <__errno>:
 8012ccc:	4b01      	ldr	r3, [pc, #4]	@ (8012cd4 <__errno+0x8>)
 8012cce:	6818      	ldr	r0, [r3, #0]
 8012cd0:	4770      	bx	lr
 8012cd2:	bf00      	nop
 8012cd4:	240000c0 	.word	0x240000c0

08012cd8 <__libc_init_array>:
 8012cd8:	b570      	push	{r4, r5, r6, lr}
 8012cda:	4d0d      	ldr	r5, [pc, #52]	@ (8012d10 <__libc_init_array+0x38>)
 8012cdc:	4c0d      	ldr	r4, [pc, #52]	@ (8012d14 <__libc_init_array+0x3c>)
 8012cde:	1b64      	subs	r4, r4, r5
 8012ce0:	10a4      	asrs	r4, r4, #2
 8012ce2:	2600      	movs	r6, #0
 8012ce4:	42a6      	cmp	r6, r4
 8012ce6:	d109      	bne.n	8012cfc <__libc_init_array+0x24>
 8012ce8:	4d0b      	ldr	r5, [pc, #44]	@ (8012d18 <__libc_init_array+0x40>)
 8012cea:	4c0c      	ldr	r4, [pc, #48]	@ (8012d1c <__libc_init_array+0x44>)
 8012cec:	f000 f954 	bl	8012f98 <_init>
 8012cf0:	1b64      	subs	r4, r4, r5
 8012cf2:	10a4      	asrs	r4, r4, #2
 8012cf4:	2600      	movs	r6, #0
 8012cf6:	42a6      	cmp	r6, r4
 8012cf8:	d105      	bne.n	8012d06 <__libc_init_array+0x2e>
 8012cfa:	bd70      	pop	{r4, r5, r6, pc}
 8012cfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8012d00:	4798      	blx	r3
 8012d02:	3601      	adds	r6, #1
 8012d04:	e7ee      	b.n	8012ce4 <__libc_init_array+0xc>
 8012d06:	f855 3b04 	ldr.w	r3, [r5], #4
 8012d0a:	4798      	blx	r3
 8012d0c:	3601      	adds	r6, #1
 8012d0e:	e7f2      	b.n	8012cf6 <__libc_init_array+0x1e>
 8012d10:	08013da8 	.word	0x08013da8
 8012d14:	08013da8 	.word	0x08013da8
 8012d18:	08013da8 	.word	0x08013da8
 8012d1c:	08013dac 	.word	0x08013dac

08012d20 <memcpy>:
 8012d20:	440a      	add	r2, r1
 8012d22:	4291      	cmp	r1, r2
 8012d24:	f100 33ff 	add.w	r3, r0, #4294967295
 8012d28:	d100      	bne.n	8012d2c <memcpy+0xc>
 8012d2a:	4770      	bx	lr
 8012d2c:	b510      	push	{r4, lr}
 8012d2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012d32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012d36:	4291      	cmp	r1, r2
 8012d38:	d1f9      	bne.n	8012d2e <memcpy+0xe>
 8012d3a:	bd10      	pop	{r4, pc}
 8012d3c:	0000      	movs	r0, r0
	...

08012d40 <log>:
 8012d40:	b4f0      	push	{r4, r5, r6, r7}
 8012d42:	ee10 0a90 	vmov	r0, s1
 8012d46:	ee10 3a10 	vmov	r3, s0
 8012d4a:	f04f 34ff 	mov.w	r4, #4294967295
 8012d4e:	429c      	cmp	r4, r3
 8012d50:	f100 4140 	add.w	r1, r0, #3221225472	@ 0xc0000000
 8012d54:	4c70      	ldr	r4, [pc, #448]	@ (8012f18 <log+0x1d8>)
 8012d56:	f501 1190 	add.w	r1, r1, #1179648	@ 0x120000
 8012d5a:	418c      	sbcs	r4, r1
 8012d5c:	ed2d 8b02 	vpush	{d8}
 8012d60:	ea4f 4210 	mov.w	r2, r0, lsr #16
 8012d64:	d35a      	bcc.n	8012e1c <log+0xdc>
 8012d66:	4a6d      	ldr	r2, [pc, #436]	@ (8012f1c <log+0x1dc>)
 8012d68:	4290      	cmp	r0, r2
 8012d6a:	bf08      	it	eq
 8012d6c:	2b00      	cmpeq	r3, #0
 8012d6e:	f000 80c4 	beq.w	8012efa <log+0x1ba>
 8012d72:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 8012d76:	ee30 0b47 	vsub.f64	d0, d0, d7
 8012d7a:	4b69      	ldr	r3, [pc, #420]	@ (8012f20 <log+0x1e0>)
 8012d7c:	ee20 2b00 	vmul.f64	d2, d0, d0
 8012d80:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 8012d84:	ee20 4b02 	vmul.f64	d4, d0, d2
 8012d88:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 8012d8c:	eea6 7b00 	vfma.f64	d7, d6, d0
 8012d90:	ed93 6b14 	vldr	d6, [r3, #80]	@ 0x50
 8012d94:	ed93 5b18 	vldr	d5, [r3, #96]	@ 0x60
 8012d98:	eea6 7b02 	vfma.f64	d7, d6, d2
 8012d9c:	ed93 6b16 	vldr	d6, [r3, #88]	@ 0x58
 8012da0:	eea5 6b00 	vfma.f64	d6, d5, d0
 8012da4:	ed93 5b1a 	vldr	d5, [r3, #104]	@ 0x68
 8012da8:	ed93 3b1e 	vldr	d3, [r3, #120]	@ 0x78
 8012dac:	eea5 6b02 	vfma.f64	d6, d5, d2
 8012db0:	ed93 5b1c 	vldr	d5, [r3, #112]	@ 0x70
 8012db4:	eea3 5b00 	vfma.f64	d5, d3, d0
 8012db8:	ed93 3b20 	vldr	d3, [r3, #128]	@ 0x80
 8012dbc:	eea3 5b02 	vfma.f64	d5, d3, d2
 8012dc0:	ed93 3b22 	vldr	d3, [r3, #136]	@ 0x88
 8012dc4:	eea3 5b04 	vfma.f64	d5, d3, d4
 8012dc8:	eea5 6b04 	vfma.f64	d6, d5, d4
 8012dcc:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 8012dd0:	eea6 7b04 	vfma.f64	d7, d6, d4
 8012dd4:	eeb0 2b47 	vmov.f64	d2, d7
 8012dd8:	ed9f 7b49 	vldr	d7, [pc, #292]	@ 8012f00 <log+0x1c0>
 8012ddc:	eeb0 6b40 	vmov.f64	d6, d0
 8012de0:	eeb0 3b40 	vmov.f64	d3, d0
 8012de4:	eea0 6b07 	vfma.f64	d6, d0, d7
 8012de8:	eea0 6b47 	vfms.f64	d6, d0, d7
 8012dec:	ee30 8b46 	vsub.f64	d8, d0, d6
 8012df0:	ee26 1b06 	vmul.f64	d1, d6, d6
 8012df4:	eea1 3b05 	vfma.f64	d3, d1, d5
 8012df8:	ee30 7b43 	vsub.f64	d7, d0, d3
 8012dfc:	ee30 0b06 	vadd.f64	d0, d0, d6
 8012e00:	eea1 7b05 	vfma.f64	d7, d1, d5
 8012e04:	ee25 5b08 	vmul.f64	d5, d5, d8
 8012e08:	eea5 7b00 	vfma.f64	d7, d5, d0
 8012e0c:	eea2 7b04 	vfma.f64	d7, d2, d4
 8012e10:	ee33 0b07 	vadd.f64	d0, d3, d7
 8012e14:	ecbd 8b02 	vpop	{d8}
 8012e18:	bcf0      	pop	{r4, r5, r6, r7}
 8012e1a:	4770      	bx	lr
 8012e1c:	f1a2 0410 	sub.w	r4, r2, #16
 8012e20:	f647 71df 	movw	r1, #32735	@ 0x7fdf
 8012e24:	428c      	cmp	r4, r1
 8012e26:	d923      	bls.n	8012e70 <log+0x130>
 8012e28:	18d9      	adds	r1, r3, r3
 8012e2a:	eb40 0400 	adc.w	r4, r0, r0
 8012e2e:	4321      	orrs	r1, r4
 8012e30:	d105      	bne.n	8012e3e <log+0xfe>
 8012e32:	ecbd 8b02 	vpop	{d8}
 8012e36:	2001      	movs	r0, #1
 8012e38:	bcf0      	pop	{r4, r5, r6, r7}
 8012e3a:	f000 b885 	b.w	8012f48 <__math_divzero>
 8012e3e:	4939      	ldr	r1, [pc, #228]	@ (8012f24 <log+0x1e4>)
 8012e40:	4288      	cmp	r0, r1
 8012e42:	bf08      	it	eq
 8012e44:	2b00      	cmpeq	r3, #0
 8012e46:	d0e5      	beq.n	8012e14 <log+0xd4>
 8012e48:	0413      	lsls	r3, r2, #16
 8012e4a:	d403      	bmi.n	8012e54 <log+0x114>
 8012e4c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8012e50:	4393      	bics	r3, r2
 8012e52:	d104      	bne.n	8012e5e <log+0x11e>
 8012e54:	ecbd 8b02 	vpop	{d8}
 8012e58:	bcf0      	pop	{r4, r5, r6, r7}
 8012e5a:	f000 b88d 	b.w	8012f78 <__math_invalid>
 8012e5e:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8012f08 <log+0x1c8>
 8012e62:	ee20 7b07 	vmul.f64	d7, d0, d7
 8012e66:	ec53 2b17 	vmov	r2, r3, d7
 8012e6a:	f1a3 7050 	sub.w	r0, r3, #54525952	@ 0x3400000
 8012e6e:	4613      	mov	r3, r2
 8012e70:	f100 4240 	add.w	r2, r0, #3221225472	@ 0xc0000000
 8012e74:	492a      	ldr	r1, [pc, #168]	@ (8012f20 <log+0x1e0>)
 8012e76:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 8012e7a:	f502 12d0 	add.w	r2, r2, #1703936	@ 0x1a0000
 8012e7e:	f3c2 3446 	ubfx	r4, r2, #13, #7
 8012e82:	0d15      	lsrs	r5, r2, #20
 8012e84:	eb01 1c04 	add.w	ip, r1, r4, lsl #4
 8012e88:	052d      	lsls	r5, r5, #20
 8012e8a:	ed9c 7b24 	vldr	d7, [ip, #144]	@ 0x90
 8012e8e:	1e1e      	subs	r6, r3, #0
 8012e90:	1b47      	subs	r7, r0, r5
 8012e92:	ec47 6b16 	vmov	d6, r6, r7
 8012e96:	1512      	asrs	r2, r2, #20
 8012e98:	eea7 5b06 	vfma.f64	d5, d7, d6
 8012e9c:	ee07 2a90 	vmov	s15, r2
 8012ea0:	ee25 2b05 	vmul.f64	d2, d5, d5
 8012ea4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8012ea8:	ed91 4b00 	vldr	d4, [r1]
 8012eac:	ee25 1b02 	vmul.f64	d1, d5, d2
 8012eb0:	ed9c 7b26 	vldr	d7, [ip, #152]	@ 0x98
 8012eb4:	eea4 7b06 	vfma.f64	d7, d4, d6
 8012eb8:	ee35 4b07 	vadd.f64	d4, d5, d7
 8012ebc:	ee37 0b44 	vsub.f64	d0, d7, d4
 8012ec0:	ed91 7b02 	vldr	d7, [r1, #8]
 8012ec4:	ee30 0b05 	vadd.f64	d0, d0, d5
 8012ec8:	eea7 0b06 	vfma.f64	d0, d7, d6
 8012ecc:	ed91 7b04 	vldr	d7, [r1, #16]
 8012ed0:	ed91 6b08 	vldr	d6, [r1, #32]
 8012ed4:	eea7 0b02 	vfma.f64	d0, d7, d2
 8012ed8:	ed91 7b06 	vldr	d7, [r1, #24]
 8012edc:	ed91 3b0c 	vldr	d3, [r1, #48]	@ 0x30
 8012ee0:	eea6 7b05 	vfma.f64	d7, d6, d5
 8012ee4:	ed91 6b0a 	vldr	d6, [r1, #40]	@ 0x28
 8012ee8:	eea3 6b05 	vfma.f64	d6, d3, d5
 8012eec:	eea6 7b02 	vfma.f64	d7, d6, d2
 8012ef0:	eea1 0b07 	vfma.f64	d0, d1, d7
 8012ef4:	ee30 0b04 	vadd.f64	d0, d0, d4
 8012ef8:	e78c      	b.n	8012e14 <log+0xd4>
 8012efa:	ed9f 0b05 	vldr	d0, [pc, #20]	@ 8012f10 <log+0x1d0>
 8012efe:	e789      	b.n	8012e14 <log+0xd4>
 8012f00:	00000000 	.word	0x00000000
 8012f04:	41a00000 	.word	0x41a00000
 8012f08:	00000000 	.word	0x00000000
 8012f0c:	43300000 	.word	0x43300000
	...
 8012f18:	000308ff 	.word	0x000308ff
 8012f1c:	3ff00000 	.word	0x3ff00000
 8012f20:	08013510 	.word	0x08013510
 8012f24:	7ff00000 	.word	0x7ff00000

08012f28 <with_errno>:
 8012f28:	b510      	push	{r4, lr}
 8012f2a:	ed2d 8b02 	vpush	{d8}
 8012f2e:	eeb0 8b40 	vmov.f64	d8, d0
 8012f32:	4604      	mov	r4, r0
 8012f34:	f7ff feca 	bl	8012ccc <__errno>
 8012f38:	eeb0 0b48 	vmov.f64	d0, d8
 8012f3c:	ecbd 8b02 	vpop	{d8}
 8012f40:	6004      	str	r4, [r0, #0]
 8012f42:	bd10      	pop	{r4, pc}
 8012f44:	0000      	movs	r0, r0
	...

08012f48 <__math_divzero>:
 8012f48:	b082      	sub	sp, #8
 8012f4a:	2800      	cmp	r0, #0
 8012f4c:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8012f50:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 8012f54:	fe07 7b06 	vseleq.f64	d7, d7, d6
 8012f58:	ed8d 7b00 	vstr	d7, [sp]
 8012f5c:	ed9d 0b00 	vldr	d0, [sp]
 8012f60:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 8012f70 <__math_divzero+0x28>
 8012f64:	2022      	movs	r0, #34	@ 0x22
 8012f66:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8012f6a:	b002      	add	sp, #8
 8012f6c:	f7ff bfdc 	b.w	8012f28 <with_errno>
	...

08012f78 <__math_invalid>:
 8012f78:	eeb0 7b40 	vmov.f64	d7, d0
 8012f7c:	eeb4 7b47 	vcmp.f64	d7, d7
 8012f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f84:	ee30 6b40 	vsub.f64	d6, d0, d0
 8012f88:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8012f8c:	d602      	bvs.n	8012f94 <__math_invalid+0x1c>
 8012f8e:	2021      	movs	r0, #33	@ 0x21
 8012f90:	f7ff bfca 	b.w	8012f28 <with_errno>
 8012f94:	4770      	bx	lr
	...

08012f98 <_init>:
 8012f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f9a:	bf00      	nop
 8012f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012f9e:	bc08      	pop	{r3}
 8012fa0:	469e      	mov	lr, r3
 8012fa2:	4770      	bx	lr

08012fa4 <_fini>:
 8012fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012fa6:	bf00      	nop
 8012fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012faa:	bc08      	pop	{r3}
 8012fac:	469e      	mov	lr, r3
 8012fae:	4770      	bx	lr
