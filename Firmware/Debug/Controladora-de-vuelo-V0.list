
Controladora-de-vuelo-V0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012710  080002b0  080002b0  000012b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000df0  080129c0  080129c0  000139c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080137b0  080137b0  000147b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080137b8  080137b8  000147b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080137bc  080137bc  000147bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000110  24000000  080137c0  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002ab4  24000110  080138d0  00015110  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  24002bc4  080138d0  00015bc4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00015110  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002871a  00000000  00000000  0001513e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000512b  00000000  00000000  0003d858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001ed0  00000000  00000000  00042988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000017fc  00000000  00000000  00044858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037591  00000000  00000000  00046054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00030da8  00000000  00000000  0007d5e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001544a6  00000000  00000000  000ae38d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00202833  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000084e0  00000000  00000000  00202878  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000068  00000000  00000000  0020ad58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000110 	.word	0x24000110
 80002cc:	00000000 	.word	0x00000000
 80002d0:	080129a8 	.word	0x080129a8

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000114 	.word	0x24000114
 80002ec:	080129a8 	.word	0x080129a8

080002f0 <__aeabi_ldivmod>:
 80002f0:	b97b      	cbnz	r3, 8000312 <__aeabi_ldivmod+0x22>
 80002f2:	b972      	cbnz	r2, 8000312 <__aeabi_ldivmod+0x22>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bfbe      	ittt	lt
 80002f8:	2000      	movlt	r0, #0
 80002fa:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80002fe:	e006      	blt.n	800030e <__aeabi_ldivmod+0x1e>
 8000300:	bf08      	it	eq
 8000302:	2800      	cmpeq	r0, #0
 8000304:	bf1c      	itt	ne
 8000306:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800030a:	f04f 30ff 	movne.w	r0, #4294967295
 800030e:	f000 b9b5 	b.w	800067c <__aeabi_idiv0>
 8000312:	f1ad 0c08 	sub.w	ip, sp, #8
 8000316:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800031a:	2900      	cmp	r1, #0
 800031c:	db09      	blt.n	8000332 <__aeabi_ldivmod+0x42>
 800031e:	2b00      	cmp	r3, #0
 8000320:	db1a      	blt.n	8000358 <__aeabi_ldivmod+0x68>
 8000322:	f000 f84d 	bl	80003c0 <__udivmoddi4>
 8000326:	f8dd e004 	ldr.w	lr, [sp, #4]
 800032a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800032e:	b004      	add	sp, #16
 8000330:	4770      	bx	lr
 8000332:	4240      	negs	r0, r0
 8000334:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000338:	2b00      	cmp	r3, #0
 800033a:	db1b      	blt.n	8000374 <__aeabi_ldivmod+0x84>
 800033c:	f000 f840 	bl	80003c0 <__udivmoddi4>
 8000340:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000348:	b004      	add	sp, #16
 800034a:	4240      	negs	r0, r0
 800034c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000350:	4252      	negs	r2, r2
 8000352:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000356:	4770      	bx	lr
 8000358:	4252      	negs	r2, r2
 800035a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800035e:	f000 f82f 	bl	80003c0 <__udivmoddi4>
 8000362:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000366:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800036a:	b004      	add	sp, #16
 800036c:	4240      	negs	r0, r0
 800036e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000372:	4770      	bx	lr
 8000374:	4252      	negs	r2, r2
 8000376:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037a:	f000 f821 	bl	80003c0 <__udivmoddi4>
 800037e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000382:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000386:	b004      	add	sp, #16
 8000388:	4252      	negs	r2, r2
 800038a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <BMP280_write>:
uint16_t dig_T1, dig_P1;
int16_t  dig_T2, dig_T3, dig_P2,dig_P3, dig_P4, dig_P5, dig_P6, dig_P7, dig_P8, dig_P9;

int32_t T_raw, P_raw, t_fine;

void BMP280_write(uint8_t Address, uint8_t Data){
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	460a      	mov	r2, r1
 800068a:	71fb      	strb	r3, [r7, #7]
 800068c:	4613      	mov	r3, r2
 800068e:	71bb      	strb	r3, [r7, #6]
	BMP280_select();
 8000690:	2200      	movs	r2, #0
 8000692:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000696:	480f      	ldr	r0, [pc, #60]	@ (80006d4 <BMP280_write+0x54>)
 8000698:	f006 fc9a 	bl	8006fd0 <HAL_GPIO_WritePin>
	Address &= 0x7F;
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 80006a6:	1df9      	adds	r1, r7, #7
 80006a8:	2364      	movs	r3, #100	@ 0x64
 80006aa:	2201      	movs	r2, #1
 80006ac:	480a      	ldr	r0, [pc, #40]	@ (80006d8 <BMP280_write+0x58>)
 80006ae:	f009 fcd9 	bl	800a064 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(SPI_BMP280, &Data, 1, 100);
 80006b2:	1db9      	adds	r1, r7, #6
 80006b4:	2364      	movs	r3, #100	@ 0x64
 80006b6:	2201      	movs	r2, #1
 80006b8:	4807      	ldr	r0, [pc, #28]	@ (80006d8 <BMP280_write+0x58>)
 80006ba:	f009 fcd3 	bl	800a064 <HAL_SPI_Transmit>

	BMP280_unselect();
 80006be:	2201      	movs	r2, #1
 80006c0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006c4:	4803      	ldr	r0, [pc, #12]	@ (80006d4 <BMP280_write+0x54>)
 80006c6:	f006 fc83 	bl	8006fd0 <HAL_GPIO_WritePin>
}
 80006ca:	bf00      	nop
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	58020400 	.word	0x58020400
 80006d8:	24002378 	.word	0x24002378

080006dc <BMP280_read>:

uint8_t BMP280_read(uint8_t Address){
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer = (Address|0x80);
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	73fb      	strb	r3, [r7, #15]
	BMP280_select();
 80006f0:	2200      	movs	r2, #0
 80006f2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006f6:	480e      	ldr	r0, [pc, #56]	@ (8000730 <BMP280_read+0x54>)
 80006f8:	f006 fc6a 	bl	8006fd0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Buffer, 1, 100);
 80006fc:	f107 010f 	add.w	r1, r7, #15
 8000700:	2364      	movs	r3, #100	@ 0x64
 8000702:	2201      	movs	r2, #1
 8000704:	480b      	ldr	r0, [pc, #44]	@ (8000734 <BMP280_read+0x58>)
 8000706:	f009 fcad 	bl	800a064 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, &Buffer, 1, 100);
 800070a:	f107 010f 	add.w	r1, r7, #15
 800070e:	2364      	movs	r3, #100	@ 0x64
 8000710:	2201      	movs	r2, #1
 8000712:	4808      	ldr	r0, [pc, #32]	@ (8000734 <BMP280_read+0x58>)
 8000714:	f009 fe94 	bl	800a440 <HAL_SPI_Receive>
	BMP280_unselect();
 8000718:	2201      	movs	r2, #1
 800071a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800071e:	4804      	ldr	r0, [pc, #16]	@ (8000730 <BMP280_read+0x54>)
 8000720:	f006 fc56 	bl	8006fd0 <HAL_GPIO_WritePin>

	return Buffer;
 8000724:	7bfb      	ldrb	r3, [r7, #15]
}
 8000726:	4618      	mov	r0, r3
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	58020400 	.word	0x58020400
 8000734:	24002378 	.word	0x24002378

08000738 <BMP280_config>:

void BMP280_config(void){
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
	BMP280_write(ctrl_meas, 0x57);
 800073c:	2157      	movs	r1, #87	@ 0x57
 800073e:	20f4      	movs	r0, #244	@ 0xf4
 8000740:	f7ff ff9e 	bl	8000680 <BMP280_write>
	BMP280_write(config, 0x10);
 8000744:	2110      	movs	r1, #16
 8000746:	20f5      	movs	r0, #245	@ 0xf5
 8000748:	f7ff ff9a 	bl	8000680 <BMP280_write>
}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}

08000750 <BMP280_calibrationData>:

void BMP280_reset(void){
	BMP280_write(reset, 0xB6);
}

void BMP280_calibrationData(void){
 8000750:	b580      	push	{r7, lr}
 8000752:	b088      	sub	sp, #32
 8000754:	af00      	add	r7, sp, #0
	uint8_t Address = 0x88;
 8000756:	2388      	movs	r3, #136	@ 0x88
 8000758:	77fb      	strb	r3, [r7, #31]
	uint8_t Buffer[24] = {0};
 800075a:	2300      	movs	r3, #0
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	f107 0308 	add.w	r3, r7, #8
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
 800076c:	611a      	str	r2, [r3, #16]
	BMP280_select();
 800076e:	2200      	movs	r2, #0
 8000770:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000774:	4843      	ldr	r0, [pc, #268]	@ (8000884 <BMP280_calibrationData+0x134>)
 8000776:	f006 fc2b 	bl	8006fd0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 800077a:	f107 011f 	add.w	r1, r7, #31
 800077e:	2364      	movs	r3, #100	@ 0x64
 8000780:	2201      	movs	r2, #1
 8000782:	4841      	ldr	r0, [pc, #260]	@ (8000888 <BMP280_calibrationData+0x138>)
 8000784:	f009 fc6e 	bl	800a064 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 24, 100);
 8000788:	1d39      	adds	r1, r7, #4
 800078a:	2364      	movs	r3, #100	@ 0x64
 800078c:	2218      	movs	r2, #24
 800078e:	483e      	ldr	r0, [pc, #248]	@ (8000888 <BMP280_calibrationData+0x138>)
 8000790:	f009 fe56 	bl	800a440 <HAL_SPI_Receive>
	BMP280_unselect();
 8000794:	2201      	movs	r2, #1
 8000796:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800079a:	483a      	ldr	r0, [pc, #232]	@ (8000884 <BMP280_calibrationData+0x134>)
 800079c:	f006 fc18 	bl	8006fd0 <HAL_GPIO_WritePin>

	dig_T1 = (Buffer[1]<<8)|Buffer[0];
 80007a0:	797b      	ldrb	r3, [r7, #5]
 80007a2:	021b      	lsls	r3, r3, #8
 80007a4:	b21a      	sxth	r2, r3
 80007a6:	793b      	ldrb	r3, [r7, #4]
 80007a8:	b21b      	sxth	r3, r3
 80007aa:	4313      	orrs	r3, r2
 80007ac:	b21b      	sxth	r3, r3
 80007ae:	b29a      	uxth	r2, r3
 80007b0:	4b36      	ldr	r3, [pc, #216]	@ (800088c <BMP280_calibrationData+0x13c>)
 80007b2:	801a      	strh	r2, [r3, #0]
	dig_T2 = (Buffer[3]<<8)|Buffer[2];
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	021b      	lsls	r3, r3, #8
 80007b8:	b21a      	sxth	r2, r3
 80007ba:	79bb      	ldrb	r3, [r7, #6]
 80007bc:	b21b      	sxth	r3, r3
 80007be:	4313      	orrs	r3, r2
 80007c0:	b21a      	sxth	r2, r3
 80007c2:	4b33      	ldr	r3, [pc, #204]	@ (8000890 <BMP280_calibrationData+0x140>)
 80007c4:	801a      	strh	r2, [r3, #0]
	dig_T3 = (Buffer[5]<<8)|Buffer[4];
 80007c6:	7a7b      	ldrb	r3, [r7, #9]
 80007c8:	021b      	lsls	r3, r3, #8
 80007ca:	b21a      	sxth	r2, r3
 80007cc:	7a3b      	ldrb	r3, [r7, #8]
 80007ce:	b21b      	sxth	r3, r3
 80007d0:	4313      	orrs	r3, r2
 80007d2:	b21a      	sxth	r2, r3
 80007d4:	4b2f      	ldr	r3, [pc, #188]	@ (8000894 <BMP280_calibrationData+0x144>)
 80007d6:	801a      	strh	r2, [r3, #0]

	dig_P1 = (Buffer[7]<<8)|Buffer[6];
 80007d8:	7afb      	ldrb	r3, [r7, #11]
 80007da:	021b      	lsls	r3, r3, #8
 80007dc:	b21a      	sxth	r2, r3
 80007de:	7abb      	ldrb	r3, [r7, #10]
 80007e0:	b21b      	sxth	r3, r3
 80007e2:	4313      	orrs	r3, r2
 80007e4:	b21b      	sxth	r3, r3
 80007e6:	b29a      	uxth	r2, r3
 80007e8:	4b2b      	ldr	r3, [pc, #172]	@ (8000898 <BMP280_calibrationData+0x148>)
 80007ea:	801a      	strh	r2, [r3, #0]
	dig_P2 = (Buffer[9]<<8)|Buffer[8];
 80007ec:	7b7b      	ldrb	r3, [r7, #13]
 80007ee:	021b      	lsls	r3, r3, #8
 80007f0:	b21a      	sxth	r2, r3
 80007f2:	7b3b      	ldrb	r3, [r7, #12]
 80007f4:	b21b      	sxth	r3, r3
 80007f6:	4313      	orrs	r3, r2
 80007f8:	b21a      	sxth	r2, r3
 80007fa:	4b28      	ldr	r3, [pc, #160]	@ (800089c <BMP280_calibrationData+0x14c>)
 80007fc:	801a      	strh	r2, [r3, #0]
	dig_P3 = (Buffer[11]<<8)|Buffer[10];
 80007fe:	7bfb      	ldrb	r3, [r7, #15]
 8000800:	021b      	lsls	r3, r3, #8
 8000802:	b21a      	sxth	r2, r3
 8000804:	7bbb      	ldrb	r3, [r7, #14]
 8000806:	b21b      	sxth	r3, r3
 8000808:	4313      	orrs	r3, r2
 800080a:	b21a      	sxth	r2, r3
 800080c:	4b24      	ldr	r3, [pc, #144]	@ (80008a0 <BMP280_calibrationData+0x150>)
 800080e:	801a      	strh	r2, [r3, #0]
	dig_P4 = (Buffer[13]<<8)|Buffer[12];
 8000810:	7c7b      	ldrb	r3, [r7, #17]
 8000812:	021b      	lsls	r3, r3, #8
 8000814:	b21a      	sxth	r2, r3
 8000816:	7c3b      	ldrb	r3, [r7, #16]
 8000818:	b21b      	sxth	r3, r3
 800081a:	4313      	orrs	r3, r2
 800081c:	b21a      	sxth	r2, r3
 800081e:	4b21      	ldr	r3, [pc, #132]	@ (80008a4 <BMP280_calibrationData+0x154>)
 8000820:	801a      	strh	r2, [r3, #0]
	dig_P5 = (Buffer[15]<<8)|Buffer[14];
 8000822:	7cfb      	ldrb	r3, [r7, #19]
 8000824:	021b      	lsls	r3, r3, #8
 8000826:	b21a      	sxth	r2, r3
 8000828:	7cbb      	ldrb	r3, [r7, #18]
 800082a:	b21b      	sxth	r3, r3
 800082c:	4313      	orrs	r3, r2
 800082e:	b21a      	sxth	r2, r3
 8000830:	4b1d      	ldr	r3, [pc, #116]	@ (80008a8 <BMP280_calibrationData+0x158>)
 8000832:	801a      	strh	r2, [r3, #0]
	dig_P6 = (Buffer[17]<<8)|Buffer[16];
 8000834:	7d7b      	ldrb	r3, [r7, #21]
 8000836:	021b      	lsls	r3, r3, #8
 8000838:	b21a      	sxth	r2, r3
 800083a:	7d3b      	ldrb	r3, [r7, #20]
 800083c:	b21b      	sxth	r3, r3
 800083e:	4313      	orrs	r3, r2
 8000840:	b21a      	sxth	r2, r3
 8000842:	4b1a      	ldr	r3, [pc, #104]	@ (80008ac <BMP280_calibrationData+0x15c>)
 8000844:	801a      	strh	r2, [r3, #0]
	dig_P7 = (Buffer[19]<<8)|Buffer[18];
 8000846:	7dfb      	ldrb	r3, [r7, #23]
 8000848:	021b      	lsls	r3, r3, #8
 800084a:	b21a      	sxth	r2, r3
 800084c:	7dbb      	ldrb	r3, [r7, #22]
 800084e:	b21b      	sxth	r3, r3
 8000850:	4313      	orrs	r3, r2
 8000852:	b21a      	sxth	r2, r3
 8000854:	4b16      	ldr	r3, [pc, #88]	@ (80008b0 <BMP280_calibrationData+0x160>)
 8000856:	801a      	strh	r2, [r3, #0]
	dig_P8 = (Buffer[21]<<8)|Buffer[20];
 8000858:	7e7b      	ldrb	r3, [r7, #25]
 800085a:	021b      	lsls	r3, r3, #8
 800085c:	b21a      	sxth	r2, r3
 800085e:	7e3b      	ldrb	r3, [r7, #24]
 8000860:	b21b      	sxth	r3, r3
 8000862:	4313      	orrs	r3, r2
 8000864:	b21a      	sxth	r2, r3
 8000866:	4b13      	ldr	r3, [pc, #76]	@ (80008b4 <BMP280_calibrationData+0x164>)
 8000868:	801a      	strh	r2, [r3, #0]
	dig_P9 = (Buffer[23]<<8)|Buffer[22];
 800086a:	7efb      	ldrb	r3, [r7, #27]
 800086c:	021b      	lsls	r3, r3, #8
 800086e:	b21a      	sxth	r2, r3
 8000870:	7ebb      	ldrb	r3, [r7, #26]
 8000872:	b21b      	sxth	r3, r3
 8000874:	4313      	orrs	r3, r2
 8000876:	b21a      	sxth	r2, r3
 8000878:	4b0f      	ldr	r3, [pc, #60]	@ (80008b8 <BMP280_calibrationData+0x168>)
 800087a:	801a      	strh	r2, [r3, #0]
}
 800087c:	bf00      	nop
 800087e:	3720      	adds	r7, #32
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	58020400 	.word	0x58020400
 8000888:	24002378 	.word	0x24002378
 800088c:	24000140 	.word	0x24000140
 8000890:	24000144 	.word	0x24000144
 8000894:	24000146 	.word	0x24000146
 8000898:	24000142 	.word	0x24000142
 800089c:	24000148 	.word	0x24000148
 80008a0:	2400014a 	.word	0x2400014a
 80008a4:	2400014c 	.word	0x2400014c
 80008a8:	2400014e 	.word	0x2400014e
 80008ac:	24000150 	.word	0x24000150
 80008b0:	24000152 	.word	0x24000152
 80008b4:	24000154 	.word	0x24000154
 80008b8:	24000156 	.word	0x24000156

080008bc <BMP280_readRawValues>:

void BMP280_readRawValues(void){
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
	uint8_t Address = press_msb;
 80008c2:	23f7      	movs	r3, #247	@ 0xf7
 80008c4:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[6] = {0};
 80008c6:	2300      	movs	r3, #0
 80008c8:	603b      	str	r3, [r7, #0]
 80008ca:	2300      	movs	r3, #0
 80008cc:	80bb      	strh	r3, [r7, #4]
	BMP280_select();
 80008ce:	2200      	movs	r2, #0
 80008d0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008d4:	4817      	ldr	r0, [pc, #92]	@ (8000934 <BMP280_readRawValues+0x78>)
 80008d6:	f006 fb7b 	bl	8006fd0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 80008da:	1df9      	adds	r1, r7, #7
 80008dc:	2364      	movs	r3, #100	@ 0x64
 80008de:	2201      	movs	r2, #1
 80008e0:	4815      	ldr	r0, [pc, #84]	@ (8000938 <BMP280_readRawValues+0x7c>)
 80008e2:	f009 fbbf 	bl	800a064 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 6, 100);
 80008e6:	4639      	mov	r1, r7
 80008e8:	2364      	movs	r3, #100	@ 0x64
 80008ea:	2206      	movs	r2, #6
 80008ec:	4812      	ldr	r0, [pc, #72]	@ (8000938 <BMP280_readRawValues+0x7c>)
 80008ee:	f009 fda7 	bl	800a440 <HAL_SPI_Receive>
	BMP280_unselect();
 80008f2:	2201      	movs	r2, #1
 80008f4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008f8:	480e      	ldr	r0, [pc, #56]	@ (8000934 <BMP280_readRawValues+0x78>)
 80008fa:	f006 fb69 	bl	8006fd0 <HAL_GPIO_WritePin>

	P_raw = (Buffer[0]<<12)|(Buffer[1]<<4)|(Buffer[2]>>4);
 80008fe:	783b      	ldrb	r3, [r7, #0]
 8000900:	031a      	lsls	r2, r3, #12
 8000902:	787b      	ldrb	r3, [r7, #1]
 8000904:	011b      	lsls	r3, r3, #4
 8000906:	4313      	orrs	r3, r2
 8000908:	78ba      	ldrb	r2, [r7, #2]
 800090a:	0912      	lsrs	r2, r2, #4
 800090c:	b2d2      	uxtb	r2, r2
 800090e:	4313      	orrs	r3, r2
 8000910:	4a0a      	ldr	r2, [pc, #40]	@ (800093c <BMP280_readRawValues+0x80>)
 8000912:	6013      	str	r3, [r2, #0]
	T_raw = (Buffer[3]<<12)|(Buffer[4]<<4)|(Buffer[5]>>4);
 8000914:	78fb      	ldrb	r3, [r7, #3]
 8000916:	031a      	lsls	r2, r3, #12
 8000918:	793b      	ldrb	r3, [r7, #4]
 800091a:	011b      	lsls	r3, r3, #4
 800091c:	4313      	orrs	r3, r2
 800091e:	797a      	ldrb	r2, [r7, #5]
 8000920:	0912      	lsrs	r2, r2, #4
 8000922:	b2d2      	uxtb	r2, r2
 8000924:	4313      	orrs	r3, r2
 8000926:	4a06      	ldr	r2, [pc, #24]	@ (8000940 <BMP280_readRawValues+0x84>)
 8000928:	6013      	str	r3, [r2, #0]
}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	58020400 	.word	0x58020400
 8000938:	24002378 	.word	0x24002378
 800093c:	2400015c 	.word	0x2400015c
 8000940:	24000158 	.word	0x24000158

08000944 <BMP280_measureT>:

int32_t BMP280_measureT(int32_t adc_T){
 8000944:	b480      	push	{r7}
 8000946:	b087      	sub	sp, #28
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 =  ((((T_raw>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 800094c:	4b1a      	ldr	r3, [pc, #104]	@ (80009b8 <BMP280_measureT+0x74>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	10da      	asrs	r2, r3, #3
 8000952:	4b1a      	ldr	r3, [pc, #104]	@ (80009bc <BMP280_measureT+0x78>)
 8000954:	881b      	ldrh	r3, [r3, #0]
 8000956:	005b      	lsls	r3, r3, #1
 8000958:	1ad3      	subs	r3, r2, r3
 800095a:	4a19      	ldr	r2, [pc, #100]	@ (80009c0 <BMP280_measureT+0x7c>)
 800095c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000960:	fb02 f303 	mul.w	r3, r2, r3
 8000964:	12db      	asrs	r3, r3, #11
 8000966:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1))) >> 12) * ((int32_t)dig_T3)) >> 14;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	111b      	asrs	r3, r3, #4
 800096c:	4a13      	ldr	r2, [pc, #76]	@ (80009bc <BMP280_measureT+0x78>)
 800096e:	8812      	ldrh	r2, [r2, #0]
 8000970:	1a9b      	subs	r3, r3, r2
 8000972:	687a      	ldr	r2, [r7, #4]
 8000974:	1112      	asrs	r2, r2, #4
 8000976:	4911      	ldr	r1, [pc, #68]	@ (80009bc <BMP280_measureT+0x78>)
 8000978:	8809      	ldrh	r1, [r1, #0]
 800097a:	1a52      	subs	r2, r2, r1
 800097c:	fb02 f303 	mul.w	r3, r2, r3
 8000980:	131b      	asrs	r3, r3, #12
 8000982:	4a10      	ldr	r2, [pc, #64]	@ (80009c4 <BMP280_measureT+0x80>)
 8000984:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000988:	fb02 f303 	mul.w	r3, r2, r3
 800098c:	139b      	asrs	r3, r3, #14
 800098e:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8000990:	697a      	ldr	r2, [r7, #20]
 8000992:	693b      	ldr	r3, [r7, #16]
 8000994:	4413      	add	r3, r2
 8000996:	4a0c      	ldr	r2, [pc, #48]	@ (80009c8 <BMP280_measureT+0x84>)
 8000998:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 800099a:	4b0b      	ldr	r3, [pc, #44]	@ (80009c8 <BMP280_measureT+0x84>)
 800099c:	681a      	ldr	r2, [r3, #0]
 800099e:	4613      	mov	r3, r2
 80009a0:	009b      	lsls	r3, r3, #2
 80009a2:	4413      	add	r3, r2
 80009a4:	3380      	adds	r3, #128	@ 0x80
 80009a6:	121b      	asrs	r3, r3, #8
 80009a8:	60fb      	str	r3, [r7, #12]
	return T;
 80009aa:	68fb      	ldr	r3, [r7, #12]
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	371c      	adds	r7, #28
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	24000158 	.word	0x24000158
 80009bc:	24000140 	.word	0x24000140
 80009c0:	24000144 	.word	0x24000144
 80009c4:	24000146 	.word	0x24000146
 80009c8:	24000160 	.word	0x24000160

080009cc <BMP280_measureP>:

uint32_t BMP280_measureP(int32_t adc_P){
 80009cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80009d0:	b0ca      	sub	sp, #296	@ 0x128
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 80009d8:	4baf      	ldr	r3, [pc, #700]	@ (8000c98 <BMP280_measureP+0x2cc>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	17da      	asrs	r2, r3, #31
 80009de:	461c      	mov	r4, r3
 80009e0:	4615      	mov	r5, r2
 80009e2:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 80009e6:	f145 3bff 	adc.w	fp, r5, #4294967295
 80009ea:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 80009ee:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80009f2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80009f6:	fb03 f102 	mul.w	r1, r3, r2
 80009fa:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80009fe:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000a02:	fb02 f303 	mul.w	r3, r2, r3
 8000a06:	18ca      	adds	r2, r1, r3
 8000a08:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000a0c:	fba3 8903 	umull	r8, r9, r3, r3
 8000a10:	eb02 0309 	add.w	r3, r2, r9
 8000a14:	4699      	mov	r9, r3
 8000a16:	4ba1      	ldr	r3, [pc, #644]	@ (8000c9c <BMP280_measureP+0x2d0>)
 8000a18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a1c:	b21b      	sxth	r3, r3
 8000a1e:	17da      	asrs	r2, r3, #31
 8000a20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000a24:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8000a28:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	fb03 f209 	mul.w	r2, r3, r9
 8000a32:	460b      	mov	r3, r1
 8000a34:	fb08 f303 	mul.w	r3, r8, r3
 8000a38:	4413      	add	r3, r2
 8000a3a:	4602      	mov	r2, r0
 8000a3c:	fba8 1202 	umull	r1, r2, r8, r2
 8000a40:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8000a44:	460a      	mov	r2, r1
 8000a46:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8000a4a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8000a4e:	4413      	add	r3, r2
 8000a50:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8000a54:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8000a58:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 8000a5c:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 8000a60:	4b8f      	ldr	r3, [pc, #572]	@ (8000ca0 <BMP280_measureP+0x2d4>)
 8000a62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a66:	b21b      	sxth	r3, r3
 8000a68:	17da      	asrs	r2, r3, #31
 8000a6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000a6e:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8000a72:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000a76:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8000a7a:	462a      	mov	r2, r5
 8000a7c:	fb02 f203 	mul.w	r2, r2, r3
 8000a80:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000a84:	4621      	mov	r1, r4
 8000a86:	fb01 f303 	mul.w	r3, r1, r3
 8000a8a:	441a      	add	r2, r3
 8000a8c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000a90:	4621      	mov	r1, r4
 8000a92:	fba3 1301 	umull	r1, r3, r3, r1
 8000a96:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000a9a:	460b      	mov	r3, r1
 8000a9c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8000aa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000aa4:	18d3      	adds	r3, r2, r3
 8000aa6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000aaa:	f04f 0000 	mov.w	r0, #0
 8000aae:	f04f 0100 	mov.w	r1, #0
 8000ab2:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8000ab6:	462b      	mov	r3, r5
 8000ab8:	0459      	lsls	r1, r3, #17
 8000aba:	4623      	mov	r3, r4
 8000abc:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8000ac0:	4623      	mov	r3, r4
 8000ac2:	0458      	lsls	r0, r3, #17
 8000ac4:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000ac8:	1814      	adds	r4, r2, r0
 8000aca:	643c      	str	r4, [r7, #64]	@ 0x40
 8000acc:	414b      	adcs	r3, r1
 8000ace:	647b      	str	r3, [r7, #68]	@ 0x44
 8000ad0:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8000ad4:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8000ad8:	4b72      	ldr	r3, [pc, #456]	@ (8000ca4 <BMP280_measureP+0x2d8>)
 8000ada:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ade:	b21b      	sxth	r3, r3
 8000ae0:	17da      	asrs	r2, r3, #31
 8000ae2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000ae6:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8000aea:	f04f 0000 	mov.w	r0, #0
 8000aee:	f04f 0100 	mov.w	r1, #0
 8000af2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000af6:	00d9      	lsls	r1, r3, #3
 8000af8:	2000      	movs	r0, #0
 8000afa:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000afe:	1814      	adds	r4, r2, r0
 8000b00:	63bc      	str	r4, [r7, #56]	@ 0x38
 8000b02:	414b      	adcs	r3, r1
 8000b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000b06:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8000b0a:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 8000b0e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000b12:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000b16:	fb03 f102 	mul.w	r1, r3, r2
 8000b1a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000b1e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000b22:	fb02 f303 	mul.w	r3, r2, r3
 8000b26:	18ca      	adds	r2, r1, r3
 8000b28:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000b2c:	fba3 1303 	umull	r1, r3, r3, r3
 8000b30:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000b34:	460b      	mov	r3, r1
 8000b36:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8000b3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000b3e:	18d3      	adds	r3, r2, r3
 8000b40:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000b44:	4b58      	ldr	r3, [pc, #352]	@ (8000ca8 <BMP280_measureP+0x2dc>)
 8000b46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b4a:	b21b      	sxth	r3, r3
 8000b4c:	17da      	asrs	r2, r3, #31
 8000b4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000b52:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8000b56:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8000b5a:	462b      	mov	r3, r5
 8000b5c:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8000b60:	4642      	mov	r2, r8
 8000b62:	fb02 f203 	mul.w	r2, r2, r3
 8000b66:	464b      	mov	r3, r9
 8000b68:	4621      	mov	r1, r4
 8000b6a:	fb01 f303 	mul.w	r3, r1, r3
 8000b6e:	4413      	add	r3, r2
 8000b70:	4622      	mov	r2, r4
 8000b72:	4641      	mov	r1, r8
 8000b74:	fba2 1201 	umull	r1, r2, r2, r1
 8000b78:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8000b7c:	460a      	mov	r2, r1
 8000b7e:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8000b82:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8000b86:	4413      	add	r3, r2
 8000b88:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	f04f 0100 	mov.w	r1, #0
 8000b94:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8000b98:	4623      	mov	r3, r4
 8000b9a:	0a18      	lsrs	r0, r3, #8
 8000b9c:	462b      	mov	r3, r5
 8000b9e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000ba2:	462b      	mov	r3, r5
 8000ba4:	1219      	asrs	r1, r3, #8
 8000ba6:	4b41      	ldr	r3, [pc, #260]	@ (8000cac <BMP280_measureP+0x2e0>)
 8000ba8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bac:	b21b      	sxth	r3, r3
 8000bae:	17da      	asrs	r2, r3, #31
 8000bb0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000bb4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8000bb8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000bbc:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8000bc0:	464a      	mov	r2, r9
 8000bc2:	fb02 f203 	mul.w	r2, r2, r3
 8000bc6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000bca:	4644      	mov	r4, r8
 8000bcc:	fb04 f303 	mul.w	r3, r4, r3
 8000bd0:	441a      	add	r2, r3
 8000bd2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000bd6:	4644      	mov	r4, r8
 8000bd8:	fba3 4304 	umull	r4, r3, r3, r4
 8000bdc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000be0:	4623      	mov	r3, r4
 8000be2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8000be6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000bea:	18d3      	adds	r3, r2, r3
 8000bec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000bf0:	f04f 0200 	mov.w	r2, #0
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8000bfc:	464c      	mov	r4, r9
 8000bfe:	0323      	lsls	r3, r4, #12
 8000c00:	4644      	mov	r4, r8
 8000c02:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8000c06:	4644      	mov	r4, r8
 8000c08:	0322      	lsls	r2, r4, #12
 8000c0a:	1884      	adds	r4, r0, r2
 8000c0c:	633c      	str	r4, [r7, #48]	@ 0x30
 8000c0e:	eb41 0303 	adc.w	r3, r1, r3
 8000c12:	637b      	str	r3, [r7, #52]	@ 0x34
 8000c14:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8000c18:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 8000c1c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000c20:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8000c24:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8000c28:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8000c2c:	4b20      	ldr	r3, [pc, #128]	@ (8000cb0 <BMP280_measureP+0x2e4>)
 8000c2e:	881b      	ldrh	r3, [r3, #0]
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	2200      	movs	r2, #0
 8000c34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000c38:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8000c3c:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8000c40:	462b      	mov	r3, r5
 8000c42:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8000c46:	4642      	mov	r2, r8
 8000c48:	fb02 f203 	mul.w	r2, r2, r3
 8000c4c:	464b      	mov	r3, r9
 8000c4e:	4621      	mov	r1, r4
 8000c50:	fb01 f303 	mul.w	r3, r1, r3
 8000c54:	4413      	add	r3, r2
 8000c56:	4622      	mov	r2, r4
 8000c58:	4641      	mov	r1, r8
 8000c5a:	fba2 1201 	umull	r1, r2, r2, r1
 8000c5e:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8000c62:	460a      	mov	r2, r1
 8000c64:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8000c68:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000c6c:	4413      	add	r3, r2
 8000c6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8000c72:	f04f 0200 	mov.w	r2, #0
 8000c76:	f04f 0300 	mov.w	r3, #0
 8000c7a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8000c7e:	4629      	mov	r1, r5
 8000c80:	104a      	asrs	r2, r1, #1
 8000c82:	4629      	mov	r1, r5
 8000c84:	17cb      	asrs	r3, r1, #31
 8000c86:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	if (var1 == 0)
 8000c8a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	d110      	bne.n	8000cb4 <BMP280_measureP+0x2e8>
	{
	return 0;
 8000c92:	2300      	movs	r3, #0
 8000c94:	e154      	b.n	8000f40 <BMP280_measureP+0x574>
 8000c96:	bf00      	nop
 8000c98:	24000160 	.word	0x24000160
 8000c9c:	24000150 	.word	0x24000150
 8000ca0:	2400014e 	.word	0x2400014e
 8000ca4:	2400014c 	.word	0x2400014c
 8000ca8:	2400014a 	.word	0x2400014a
 8000cac:	24000148 	.word	0x24000148
 8000cb0:	24000142 	.word	0x24000142
	}
	p = 1048576-adc_P;
 8000cb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000cb8:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8000cbc:	17da      	asrs	r2, r3, #31
 8000cbe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000cc0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000cc2:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8000cc6:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	p = (((p<<31)-var2)*3125)/var1;
 8000cca:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000cce:	105b      	asrs	r3, r3, #1
 8000cd0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000cd4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000cd8:	07db      	lsls	r3, r3, #31
 8000cda:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000cde:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000ce2:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8000ce6:	4621      	mov	r1, r4
 8000ce8:	1a89      	subs	r1, r1, r2
 8000cea:	67b9      	str	r1, [r7, #120]	@ 0x78
 8000cec:	4629      	mov	r1, r5
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000cf4:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8000cf8:	4622      	mov	r2, r4
 8000cfa:	462b      	mov	r3, r5
 8000cfc:	1891      	adds	r1, r2, r2
 8000cfe:	6239      	str	r1, [r7, #32]
 8000d00:	415b      	adcs	r3, r3
 8000d02:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d04:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000d08:	4621      	mov	r1, r4
 8000d0a:	1851      	adds	r1, r2, r1
 8000d0c:	61b9      	str	r1, [r7, #24]
 8000d0e:	4629      	mov	r1, r5
 8000d10:	414b      	adcs	r3, r1
 8000d12:	61fb      	str	r3, [r7, #28]
 8000d14:	f04f 0200 	mov.w	r2, #0
 8000d18:	f04f 0300 	mov.w	r3, #0
 8000d1c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8000d20:	4649      	mov	r1, r9
 8000d22:	018b      	lsls	r3, r1, #6
 8000d24:	4641      	mov	r1, r8
 8000d26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8000d2a:	4641      	mov	r1, r8
 8000d2c:	018a      	lsls	r2, r1, #6
 8000d2e:	4641      	mov	r1, r8
 8000d30:	1889      	adds	r1, r1, r2
 8000d32:	6139      	str	r1, [r7, #16]
 8000d34:	4649      	mov	r1, r9
 8000d36:	eb43 0101 	adc.w	r1, r3, r1
 8000d3a:	6179      	str	r1, [r7, #20]
 8000d3c:	f04f 0200 	mov.w	r2, #0
 8000d40:	f04f 0300 	mov.w	r3, #0
 8000d44:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8000d48:	4649      	mov	r1, r9
 8000d4a:	008b      	lsls	r3, r1, #2
 8000d4c:	4641      	mov	r1, r8
 8000d4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000d52:	4641      	mov	r1, r8
 8000d54:	008a      	lsls	r2, r1, #2
 8000d56:	4610      	mov	r0, r2
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	4622      	mov	r2, r4
 8000d5e:	189b      	adds	r3, r3, r2
 8000d60:	60bb      	str	r3, [r7, #8]
 8000d62:	460b      	mov	r3, r1
 8000d64:	462a      	mov	r2, r5
 8000d66:	eb42 0303 	adc.w	r3, r2, r3
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	f04f 0200 	mov.w	r2, #0
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8000d78:	4649      	mov	r1, r9
 8000d7a:	008b      	lsls	r3, r1, #2
 8000d7c:	4641      	mov	r1, r8
 8000d7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000d82:	4641      	mov	r1, r8
 8000d84:	008a      	lsls	r2, r1, #2
 8000d86:	4610      	mov	r0, r2
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	4622      	mov	r2, r4
 8000d8e:	189b      	adds	r3, r3, r2
 8000d90:	673b      	str	r3, [r7, #112]	@ 0x70
 8000d92:	462b      	mov	r3, r5
 8000d94:	460a      	mov	r2, r1
 8000d96:	eb42 0303 	adc.w	r3, r2, r3
 8000d9a:	677b      	str	r3, [r7, #116]	@ 0x74
 8000d9c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000da0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8000da4:	f7ff faa4 	bl	80002f0 <__aeabi_ldivmod>
 8000da8:	4602      	mov	r2, r0
 8000daa:	460b      	mov	r3, r1
 8000dac:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8000db0:	4b66      	ldr	r3, [pc, #408]	@ (8000f4c <BMP280_measureP+0x580>)
 8000db2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000db6:	b21b      	sxth	r3, r3
 8000db8:	17da      	asrs	r2, r3, #31
 8000dba:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000dbc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8000dbe:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8000dc2:	f04f 0000 	mov.w	r0, #0
 8000dc6:	f04f 0100 	mov.w	r1, #0
 8000dca:	0b50      	lsrs	r0, r2, #13
 8000dcc:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000dd0:	1359      	asrs	r1, r3, #13
 8000dd2:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8000dd6:	462b      	mov	r3, r5
 8000dd8:	fb00 f203 	mul.w	r2, r0, r3
 8000ddc:	4623      	mov	r3, r4
 8000dde:	fb03 f301 	mul.w	r3, r3, r1
 8000de2:	4413      	add	r3, r2
 8000de4:	4622      	mov	r2, r4
 8000de6:	fba2 1200 	umull	r1, r2, r2, r0
 8000dea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8000dee:	460a      	mov	r2, r1
 8000df0:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8000df4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000df8:	4413      	add	r3, r2
 8000dfa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8000dfe:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8000e02:	f04f 0000 	mov.w	r0, #0
 8000e06:	f04f 0100 	mov.w	r1, #0
 8000e0a:	0b50      	lsrs	r0, r2, #13
 8000e0c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000e10:	1359      	asrs	r1, r3, #13
 8000e12:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8000e16:	462b      	mov	r3, r5
 8000e18:	fb00 f203 	mul.w	r2, r0, r3
 8000e1c:	4623      	mov	r3, r4
 8000e1e:	fb03 f301 	mul.w	r3, r3, r1
 8000e22:	4413      	add	r3, r2
 8000e24:	4622      	mov	r2, r4
 8000e26:	fba2 1200 	umull	r1, r2, r2, r0
 8000e2a:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8000e2e:	460a      	mov	r2, r1
 8000e30:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8000e34:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8000e38:	4413      	add	r3, r2
 8000e3a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8000e3e:	f04f 0200 	mov.w	r2, #0
 8000e42:	f04f 0300 	mov.w	r3, #0
 8000e46:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8000e4a:	4621      	mov	r1, r4
 8000e4c:	0e4a      	lsrs	r2, r1, #25
 8000e4e:	4629      	mov	r1, r5
 8000e50:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8000e54:	4629      	mov	r1, r5
 8000e56:	164b      	asrs	r3, r1, #25
 8000e58:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8000e5c:	4b3c      	ldr	r3, [pc, #240]	@ (8000f50 <BMP280_measureP+0x584>)
 8000e5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e62:	b21b      	sxth	r3, r3
 8000e64:	17da      	asrs	r2, r3, #31
 8000e66:	663b      	str	r3, [r7, #96]	@ 0x60
 8000e68:	667a      	str	r2, [r7, #100]	@ 0x64
 8000e6a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000e6e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8000e72:	462a      	mov	r2, r5
 8000e74:	fb02 f203 	mul.w	r2, r2, r3
 8000e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000e7c:	4621      	mov	r1, r4
 8000e7e:	fb01 f303 	mul.w	r3, r1, r3
 8000e82:	4413      	add	r3, r2
 8000e84:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8000e88:	4621      	mov	r1, r4
 8000e8a:	fba2 1201 	umull	r1, r2, r2, r1
 8000e8e:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8000e92:	460a      	mov	r2, r1
 8000e94:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8000e98:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8000e9c:	4413      	add	r3, r2
 8000e9e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8000ea2:	f04f 0200 	mov.w	r2, #0
 8000ea6:	f04f 0300 	mov.w	r3, #0
 8000eaa:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8000eae:	4621      	mov	r1, r4
 8000eb0:	0cca      	lsrs	r2, r1, #19
 8000eb2:	4629      	mov	r1, r5
 8000eb4:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8000eb8:	4629      	mov	r1, r5
 8000eba:	14cb      	asrs	r3, r1, #19
 8000ebc:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8000ec0:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8000ec4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000ec8:	1884      	adds	r4, r0, r2
 8000eca:	65bc      	str	r4, [r7, #88]	@ 0x58
 8000ecc:	eb41 0303 	adc.w	r3, r1, r3
 8000ed0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000ed2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000ed6:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8000eda:	4621      	mov	r1, r4
 8000edc:	1889      	adds	r1, r1, r2
 8000ede:	6539      	str	r1, [r7, #80]	@ 0x50
 8000ee0:	4629      	mov	r1, r5
 8000ee2:	eb43 0101 	adc.w	r1, r3, r1
 8000ee6:	6579      	str	r1, [r7, #84]	@ 0x54
 8000ee8:	f04f 0000 	mov.w	r0, #0
 8000eec:	f04f 0100 	mov.w	r1, #0
 8000ef0:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8000ef4:	4623      	mov	r3, r4
 8000ef6:	0a18      	lsrs	r0, r3, #8
 8000ef8:	462b      	mov	r3, r5
 8000efa:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000efe:	462b      	mov	r3, r5
 8000f00:	1219      	asrs	r1, r3, #8
 8000f02:	4b14      	ldr	r3, [pc, #80]	@ (8000f54 <BMP280_measureP+0x588>)
 8000f04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f08:	b21b      	sxth	r3, r3
 8000f0a:	17da      	asrs	r2, r3, #31
 8000f0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000f0e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8000f10:	f04f 0200 	mov.w	r2, #0
 8000f14:	f04f 0300 	mov.w	r3, #0
 8000f18:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8000f1c:	464c      	mov	r4, r9
 8000f1e:	0123      	lsls	r3, r4, #4
 8000f20:	4644      	mov	r4, r8
 8000f22:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000f26:	4644      	mov	r4, r8
 8000f28:	0122      	lsls	r2, r4, #4
 8000f2a:	1884      	adds	r4, r0, r2
 8000f2c:	603c      	str	r4, [r7, #0]
 8000f2e:	eb41 0303 	adc.w	r3, r1, r3
 8000f32:	607b      	str	r3, [r7, #4]
 8000f34:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000f38:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (uint32_t)p;
 8000f3c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8000f46:	46bd      	mov	sp, r7
 8000f48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000f4c:	24000156 	.word	0x24000156
 8000f50:	24000154 	.word	0x24000154
 8000f54:	24000152 	.word	0x24000152

08000f58 <BMP280_measureH>:

uint16_t BMP280_measureH(uint32_t Pres, int32_t Temp){
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b088      	sub	sp, #32
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
	double var1, var2, h;

	if(Pres == 0) return 0;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d101      	bne.n	8000f6c <BMP280_measureH+0x14>
 8000f68:	2300      	movs	r3, #0
 8000f6a:	e03d      	b.n	8000fe8 <BMP280_measureH+0x90>
	var1 = -log(((double)Pres)/101325);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	ee07 3a90 	vmov	s15, r3
 8000f72:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000f76:	ed9f 5b1e 	vldr	d5, [pc, #120]	@ 8000ff0 <BMP280_measureH+0x98>
 8000f7a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000f7e:	eeb0 0b46 	vmov.f64	d0, d6
 8000f82:	f011 fbe5 	bl	8012750 <log>
 8000f86:	eeb0 7b40 	vmov.f64	d7, d0
 8000f8a:	eeb1 7b47 	vneg.f64	d7, d7
 8000f8e:	ed87 7b06 	vstr	d7, [r7, #24]

	if(var1 == 0) return 0;
 8000f92:	ed97 7b06 	vldr	d7, [r7, #24]
 8000f96:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8000f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f9e:	d101      	bne.n	8000fa4 <BMP280_measureH+0x4c>
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	e021      	b.n	8000fe8 <BMP280_measureH+0x90>
	var2 = 0.0341663/((((double)Temp)/100)+273.15);
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	ee07 3a90 	vmov	s15, r3
 8000faa:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000fae:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 8000ff8 <BMP280_measureH+0xa0>
 8000fb2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000fb6:	ed9f 6b12 	vldr	d6, [pc, #72]	@ 8001000 <BMP280_measureH+0xa8>
 8000fba:	ee37 6b06 	vadd.f64	d6, d7, d6
 8000fbe:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 8001008 <BMP280_measureH+0xb0>
 8000fc2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000fc6:	ed87 7b04 	vstr	d7, [r7, #16]
	h = var1/var2;
 8000fca:	ed97 5b06 	vldr	d5, [r7, #24]
 8000fce:	ed97 6b04 	vldr	d6, [r7, #16]
 8000fd2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000fd6:	ed87 7b02 	vstr	d7, [r7, #8]
	return (uint16_t)h;
 8000fda:	ed97 7b02 	vldr	d7, [r7, #8]
 8000fde:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000fe2:	ee17 3a90 	vmov	r3, s15
 8000fe6:	b29b      	uxth	r3, r3
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3720      	adds	r7, #32
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	00000000 	.word	0x00000000
 8000ff4:	40f8bcd0 	.word	0x40f8bcd0
 8000ff8:	00000000 	.word	0x00000000
 8000ffc:	40590000 	.word	0x40590000
 8001000:	66666666 	.word	0x66666666
 8001004:	40711266 	.word	0x40711266
 8001008:	ca402a92 	.word	0xca402a92
 800100c:	3fa17e3e 	.word	0x3fa17e3e

08001010 <BMP280_init>:

void BMP280_init(void){
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
	BMP280_unselect();
 8001014:	2201      	movs	r2, #1
 8001016:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800101a:	480d      	ldr	r0, [pc, #52]	@ (8001050 <BMP280_init+0x40>)
 800101c:	f005 ffd8 	bl	8006fd0 <HAL_GPIO_WritePin>
	BMP280_config();
 8001020:	f7ff fb8a 	bl	8000738 <BMP280_config>
	BMP280.ID = BMP280_read(0x89);
 8001024:	2089      	movs	r0, #137	@ 0x89
 8001026:	f7ff fb59 	bl	80006dc <BMP280_read>
 800102a:	4603      	mov	r3, r0
 800102c:	461a      	mov	r2, r3
 800102e:	4b09      	ldr	r3, [pc, #36]	@ (8001054 <BMP280_init+0x44>)
 8001030:	701a      	strb	r2, [r3, #0]
	BMP280_calibrationData();
 8001032:	f7ff fb8d 	bl	8000750 <BMP280_calibrationData>
	BMP280_readRawValues();
 8001036:	f7ff fc41 	bl	80008bc <BMP280_readRawValues>
	BMP280.Temp_inicial = BMP280_measureT(T_raw);
 800103a:	4b07      	ldr	r3, [pc, #28]	@ (8001058 <BMP280_init+0x48>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff fc80 	bl	8000944 <BMP280_measureT>
 8001044:	4603      	mov	r3, r0
 8001046:	4a03      	ldr	r2, [pc, #12]	@ (8001054 <BMP280_init+0x44>)
 8001048:	6093      	str	r3, [r2, #8]
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	58020400 	.word	0x58020400
 8001054:	2400012c 	.word	0x2400012c
 8001058:	24000158 	.word	0x24000158

0800105c <BMP280_calculate>:

void BMP280_calculate(void){
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
	//BMP280.ID = 0;
	BMP280.ID = BMP280_read(0x89);
 8001060:	2089      	movs	r0, #137	@ 0x89
 8001062:	f7ff fb3b 	bl	80006dc <BMP280_read>
 8001066:	4603      	mov	r3, r0
 8001068:	461a      	mov	r2, r3
 800106a:	4b16      	ldr	r3, [pc, #88]	@ (80010c4 <BMP280_calculate+0x68>)
 800106c:	701a      	strb	r2, [r3, #0]
	BMP280_readRawValues();
 800106e:	f7ff fc25 	bl	80008bc <BMP280_readRawValues>
	BMP280.Temp = BMP280_measureT(T_raw);
 8001072:	4b15      	ldr	r3, [pc, #84]	@ (80010c8 <BMP280_calculate+0x6c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff fc64 	bl	8000944 <BMP280_measureT>
 800107c:	4603      	mov	r3, r0
 800107e:	4a11      	ldr	r2, [pc, #68]	@ (80010c4 <BMP280_calculate+0x68>)
 8001080:	6053      	str	r3, [r2, #4]
	BMP280.Pressure    		= BMP280_measureP(P_raw)/256;
 8001082:	4b12      	ldr	r3, [pc, #72]	@ (80010cc <BMP280_calculate+0x70>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff fca0 	bl	80009cc <BMP280_measureP>
 800108c:	4603      	mov	r3, r0
 800108e:	0a1b      	lsrs	r3, r3, #8
 8001090:	4a0c      	ldr	r2, [pc, #48]	@ (80010c4 <BMP280_calculate+0x68>)
 8001092:	60d3      	str	r3, [r2, #12]
	BMP280.Barometric_Altitude = BMP280_measureH(BMP280.Pressure, BMP280.Temp_inicial);
 8001094:	4b0b      	ldr	r3, [pc, #44]	@ (80010c4 <BMP280_calculate+0x68>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	4a0a      	ldr	r2, [pc, #40]	@ (80010c4 <BMP280_calculate+0x68>)
 800109a:	6892      	ldr	r2, [r2, #8]
 800109c:	4611      	mov	r1, r2
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff ff5a 	bl	8000f58 <BMP280_measureH>
 80010a4:	4603      	mov	r3, r0
 80010a6:	461a      	mov	r2, r3
 80010a8:	4b06      	ldr	r3, [pc, #24]	@ (80010c4 <BMP280_calculate+0x68>)
 80010aa:	821a      	strh	r2, [r3, #16]

	if(BMP280.Barometric_Altitude > BMP280.Max_Altitude) BMP280.Max_Altitude = BMP280.Barometric_Altitude;
 80010ac:	4b05      	ldr	r3, [pc, #20]	@ (80010c4 <BMP280_calculate+0x68>)
 80010ae:	8a1a      	ldrh	r2, [r3, #16]
 80010b0:	4b04      	ldr	r3, [pc, #16]	@ (80010c4 <BMP280_calculate+0x68>)
 80010b2:	8a5b      	ldrh	r3, [r3, #18]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d903      	bls.n	80010c0 <BMP280_calculate+0x64>
 80010b8:	4b02      	ldr	r3, [pc, #8]	@ (80010c4 <BMP280_calculate+0x68>)
 80010ba:	8a1a      	ldrh	r2, [r3, #16]
 80010bc:	4b01      	ldr	r3, [pc, #4]	@ (80010c4 <BMP280_calculate+0x68>)
 80010be:	825a      	strh	r2, [r3, #18]
}
 80010c0:	bf00      	nop
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	2400012c 	.word	0x2400012c
 80010c8:	24000158 	.word	0x24000158
 80010cc:	2400015c 	.word	0x2400015c

080010d0 <LED_blink>:

		.G_LED.LED_GPIO_GPIOx = LED_5_GPIO_Port,
		.G_LED.LED_GPIO_Pin   = LED_5_Pin
};

LED_config_t LED_blink(LED_config_t LED){
 80010d0:	b084      	sub	sp, #16
 80010d2:	b590      	push	{r4, r7, lr}
 80010d4:	b083      	sub	sp, #12
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
 80010da:	f107 001c 	add.w	r0, r7, #28
 80010de:	e880 000e 	stmia.w	r0, {r1, r2, r3}

		switch (LED.Blink_status) {
 80010e2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d002      	beq.n	80010f0 <LED_blink+0x20>
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d010      	beq.n	8001110 <LED_blink+0x40>
 80010ee:	e01f      	b.n	8001130 <LED_blink+0x60>
			case 0x00:
				if(LED.count >= LED.Time_Off){
 80010f0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80010f2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d31f      	bcc.n	8001138 <LED_blink+0x68>
					HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, SET);
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	8c39      	ldrh	r1, [r7, #32]
 80010fc:	2201      	movs	r2, #1
 80010fe:	4618      	mov	r0, r3
 8001100:	f005 ff66 	bl	8006fd0 <HAL_GPIO_WritePin>
					LED.Blink_status = 1;
 8001104:	2301      	movs	r3, #1
 8001106:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
					LED.count = 0;
 800110a:	2300      	movs	r3, #0
 800110c:	853b      	strh	r3, [r7, #40]	@ 0x28
				}
				break;
 800110e:	e013      	b.n	8001138 <LED_blink+0x68>
			case 0x01:
				if(LED.count >= LED.Time_On){
 8001110:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001112:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001114:	429a      	cmp	r2, r3
 8001116:	d311      	bcc.n	800113c <LED_blink+0x6c>
					HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, RESET);
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	8c39      	ldrh	r1, [r7, #32]
 800111c:	2200      	movs	r2, #0
 800111e:	4618      	mov	r0, r3
 8001120:	f005 ff56 	bl	8006fd0 <HAL_GPIO_WritePin>
					LED.Blink_status = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
					LED.count = 0;
 800112a:	2300      	movs	r3, #0
 800112c:	853b      	strh	r3, [r7, #40]	@ 0x28
				}
				break;
 800112e:	e005      	b.n	800113c <LED_blink+0x6c>
			default:
				LED.Blink_status = 0;
 8001130:	2300      	movs	r3, #0
 8001132:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
				break;
 8001136:	e002      	b.n	800113e <LED_blink+0x6e>
				break;
 8001138:	bf00      	nop
 800113a:	e000      	b.n	800113e <LED_blink+0x6e>
				break;
 800113c:	bf00      	nop
		}

	LED.count++;
 800113e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001140:	3301      	adds	r3, #1
 8001142:	b29b      	uxth	r3, r3
 8001144:	853b      	strh	r3, [r7, #40]	@ 0x28
	return LED;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	461c      	mov	r4, r3
 800114a:	f107 031c 	add.w	r3, r7, #28
 800114e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001150:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800115e:	b004      	add	sp, #16
 8001160:	4770      	bx	lr

08001162 <LED_Rutine>:

LED_config_t LED_Rutine(LED_config_t LED){
 8001162:	b084      	sub	sp, #16
 8001164:	b590      	push	{r4, r7, lr}
 8001166:	b085      	sub	sp, #20
 8001168:	af02      	add	r7, sp, #8
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	f107 001c 	add.w	r0, r7, #28
 8001170:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if(LED.LED_status == 1){
 8001174:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001178:	2b01      	cmp	r3, #1
 800117a:	d117      	bne.n	80011ac <LED_Rutine+0x4a>
		switch (LED.Sequence) {
 800117c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001180:	2b00      	cmp	r3, #0
 8001182:	d002      	beq.n	800118a <LED_Rutine+0x28>
 8001184:	2b01      	cmp	r3, #1
 8001186:	d007      	beq.n	8001198 <LED_Rutine+0x36>
				break;
			case Blink:
				LED = LED_blink(LED);
				break;
			default:
				break;
 8001188:	e018      	b.n	80011bc <LED_Rutine+0x5a>
				HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, SET);
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	8c39      	ldrh	r1, [r7, #32]
 800118e:	2201      	movs	r2, #1
 8001190:	4618      	mov	r0, r3
 8001192:	f005 ff1d 	bl	8006fd0 <HAL_GPIO_WritePin>
				break;
 8001196:	e011      	b.n	80011bc <LED_Rutine+0x5a>
				LED = LED_blink(LED);
 8001198:	f107 001c 	add.w	r0, r7, #28
 800119c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800119e:	9300      	str	r3, [sp, #0]
 80011a0:	f107 031c 	add.w	r3, r7, #28
 80011a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011a6:	f7ff ff93 	bl	80010d0 <LED_blink>
				break;
 80011aa:	e007      	b.n	80011bc <LED_Rutine+0x5a>
		}
	}
	else{
		HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, RESET);
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	8c39      	ldrh	r1, [r7, #32]
 80011b0:	2200      	movs	r2, #0
 80011b2:	4618      	mov	r0, r3
 80011b4:	f005 ff0c 	bl	8006fd0 <HAL_GPIO_WritePin>
		LED.count = 0;
 80011b8:	2300      	movs	r3, #0
 80011ba:	853b      	strh	r3, [r7, #40]	@ 0x28
	}
	return LED;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	461c      	mov	r4, r3
 80011c0:	f107 031c 	add.w	r3, r7, #28
 80011c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80011d4:	b004      	add	sp, #16
 80011d6:	4770      	bx	lr

080011d8 <LED_Tasks>:

void LED_Tasks (void){
 80011d8:	b590      	push	{r4, r7, lr}
 80011da:	b087      	sub	sp, #28
 80011dc:	af02      	add	r7, sp, #8
	LED_Info.R_LED = LED_Rutine(LED_Info.R_LED);
 80011de:	4c24      	ldr	r4, [pc, #144]	@ (8001270 <LED_Tasks+0x98>)
 80011e0:	4638      	mov	r0, r7
 80011e2:	4b23      	ldr	r3, [pc, #140]	@ (8001270 <LED_Tasks+0x98>)
 80011e4:	68da      	ldr	r2, [r3, #12]
 80011e6:	9200      	str	r2, [sp, #0]
 80011e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011ea:	f7ff ffba 	bl	8001162 <LED_Rutine>
 80011ee:	463b      	mov	r3, r7
 80011f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED1 = LED_Rutine(LED_Info.B_LED1);
 80011f6:	4c1e      	ldr	r4, [pc, #120]	@ (8001270 <LED_Tasks+0x98>)
 80011f8:	4638      	mov	r0, r7
 80011fa:	4b1d      	ldr	r3, [pc, #116]	@ (8001270 <LED_Tasks+0x98>)
 80011fc:	69da      	ldr	r2, [r3, #28]
 80011fe:	9200      	str	r2, [sp, #0]
 8001200:	3310      	adds	r3, #16
 8001202:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001204:	f7ff ffad 	bl	8001162 <LED_Rutine>
 8001208:	3410      	adds	r4, #16
 800120a:	463b      	mov	r3, r7
 800120c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800120e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED2 = LED_Rutine(LED_Info.B_LED2);
 8001212:	4c17      	ldr	r4, [pc, #92]	@ (8001270 <LED_Tasks+0x98>)
 8001214:	4638      	mov	r0, r7
 8001216:	4b16      	ldr	r3, [pc, #88]	@ (8001270 <LED_Tasks+0x98>)
 8001218:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800121a:	9200      	str	r2, [sp, #0]
 800121c:	3320      	adds	r3, #32
 800121e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001220:	f7ff ff9f 	bl	8001162 <LED_Rutine>
 8001224:	3420      	adds	r4, #32
 8001226:	463b      	mov	r3, r7
 8001228:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800122a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED3 = LED_Rutine(LED_Info.B_LED3);
 800122e:	4c10      	ldr	r4, [pc, #64]	@ (8001270 <LED_Tasks+0x98>)
 8001230:	4638      	mov	r0, r7
 8001232:	4b0f      	ldr	r3, [pc, #60]	@ (8001270 <LED_Tasks+0x98>)
 8001234:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001236:	9200      	str	r2, [sp, #0]
 8001238:	3330      	adds	r3, #48	@ 0x30
 800123a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800123c:	f7ff ff91 	bl	8001162 <LED_Rutine>
 8001240:	3430      	adds	r4, #48	@ 0x30
 8001242:	463b      	mov	r3, r7
 8001244:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001246:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.G_LED = LED_Rutine(LED_Info.G_LED);
 800124a:	4c09      	ldr	r4, [pc, #36]	@ (8001270 <LED_Tasks+0x98>)
 800124c:	4638      	mov	r0, r7
 800124e:	4b08      	ldr	r3, [pc, #32]	@ (8001270 <LED_Tasks+0x98>)
 8001250:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001252:	9200      	str	r2, [sp, #0]
 8001254:	3340      	adds	r3, #64	@ 0x40
 8001256:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001258:	f7ff ff83 	bl	8001162 <LED_Rutine>
 800125c:	3440      	adds	r4, #64	@ 0x40
 800125e:	463b      	mov	r3, r7
 8001260:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001262:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001266:	bf00      	nop
 8001268:	3714      	adds	r7, #20
 800126a:	46bd      	mov	sp, r7
 800126c:	bd90      	pop	{r4, r7, pc}
 800126e:	bf00      	nop
 8001270:	24000000 	.word	0x24000000

08001274 <PWM_Assing>:
		.Canal_8  = 1500,
		.Canal_9  = 1500,
		.Canal_10 = 1500,
};

void PWM_Assing(void){
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
	TIM2->CCR1 = PWM_Output.Canal_1;
 8001278:	4b2a      	ldr	r3, [pc, #168]	@ (8001324 <PWM_Assing+0xb0>)
 800127a:	881a      	ldrh	r2, [r3, #0]
 800127c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001280:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM2->CCR2 = PWM_Output.Canal_2;
 8001282:	4b28      	ldr	r3, [pc, #160]	@ (8001324 <PWM_Assing+0xb0>)
 8001284:	885a      	ldrh	r2, [r3, #2]
 8001286:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800128a:	639a      	str	r2, [r3, #56]	@ 0x38

	TIM3->CCR1 = PWM_Output.Canal_3;
 800128c:	4b25      	ldr	r3, [pc, #148]	@ (8001324 <PWM_Assing+0xb0>)
 800128e:	889a      	ldrh	r2, [r3, #4]
 8001290:	4b25      	ldr	r3, [pc, #148]	@ (8001328 <PWM_Assing+0xb4>)
 8001292:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3->CCR2 = PWM_Output.Canal_4;
 8001294:	4b23      	ldr	r3, [pc, #140]	@ (8001324 <PWM_Assing+0xb0>)
 8001296:	88da      	ldrh	r2, [r3, #6]
 8001298:	4b23      	ldr	r3, [pc, #140]	@ (8001328 <PWM_Assing+0xb4>)
 800129a:	639a      	str	r2, [r3, #56]	@ 0x38

	TIM4->CCR1 = PWM_Output.Canal_5;
 800129c:	4b21      	ldr	r3, [pc, #132]	@ (8001324 <PWM_Assing+0xb0>)
 800129e:	891a      	ldrh	r2, [r3, #8]
 80012a0:	4b22      	ldr	r3, [pc, #136]	@ (800132c <PWM_Assing+0xb8>)
 80012a2:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM4->CCR2 = PWM_Output.Canal_6;
 80012a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001324 <PWM_Assing+0xb0>)
 80012a6:	895a      	ldrh	r2, [r3, #10]
 80012a8:	4b20      	ldr	r3, [pc, #128]	@ (800132c <PWM_Assing+0xb8>)
 80012aa:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM4->CCR3 = PWM_Output.Canal_7;
 80012ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001324 <PWM_Assing+0xb0>)
 80012ae:	899a      	ldrh	r2, [r3, #12]
 80012b0:	4b1e      	ldr	r3, [pc, #120]	@ (800132c <PWM_Assing+0xb8>)
 80012b2:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM4->CCR4 = PWM_Output.Canal_8;
 80012b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001324 <PWM_Assing+0xb0>)
 80012b6:	89da      	ldrh	r2, [r3, #14]
 80012b8:	4b1c      	ldr	r3, [pc, #112]	@ (800132c <PWM_Assing+0xb8>)
 80012ba:	641a      	str	r2, [r3, #64]	@ 0x40

	TIM2->CCR4 = PWM_Output.Canal_9;
 80012bc:	4b19      	ldr	r3, [pc, #100]	@ (8001324 <PWM_Assing+0xb0>)
 80012be:	8a1a      	ldrh	r2, [r3, #16]
 80012c0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012c4:	641a      	str	r2, [r3, #64]	@ 0x40
	TIM2->CCR3 = PWM_Output.Canal_10;
 80012c6:	4b17      	ldr	r3, [pc, #92]	@ (8001324 <PWM_Assing+0xb0>)
 80012c8:	8a5a      	ldrh	r2, [r3, #18]
 80012ca:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012ce:	63da      	str	r2, [r3, #60]	@ 0x3c

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80012d0:	2100      	movs	r1, #0
 80012d2:	4817      	ldr	r0, [pc, #92]	@ (8001330 <PWM_Assing+0xbc>)
 80012d4:	f00a f870 	bl	800b3b8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80012d8:	2104      	movs	r1, #4
 80012da:	4815      	ldr	r0, [pc, #84]	@ (8001330 <PWM_Assing+0xbc>)
 80012dc:	f00a f86c 	bl	800b3b8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80012e0:	2108      	movs	r1, #8
 80012e2:	4813      	ldr	r0, [pc, #76]	@ (8001330 <PWM_Assing+0xbc>)
 80012e4:	f00a f868 	bl	800b3b8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80012e8:	210c      	movs	r1, #12
 80012ea:	4811      	ldr	r0, [pc, #68]	@ (8001330 <PWM_Assing+0xbc>)
 80012ec:	f00a f864 	bl	800b3b8 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80012f0:	2100      	movs	r1, #0
 80012f2:	4810      	ldr	r0, [pc, #64]	@ (8001334 <PWM_Assing+0xc0>)
 80012f4:	f00a f860 	bl	800b3b8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80012f8:	2104      	movs	r1, #4
 80012fa:	480e      	ldr	r0, [pc, #56]	@ (8001334 <PWM_Assing+0xc0>)
 80012fc:	f00a f85c 	bl	800b3b8 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001300:	2100      	movs	r1, #0
 8001302:	480d      	ldr	r0, [pc, #52]	@ (8001338 <PWM_Assing+0xc4>)
 8001304:	f00a f858 	bl	800b3b8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001308:	2104      	movs	r1, #4
 800130a:	480b      	ldr	r0, [pc, #44]	@ (8001338 <PWM_Assing+0xc4>)
 800130c:	f00a f854 	bl	800b3b8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001310:	2108      	movs	r1, #8
 8001312:	4809      	ldr	r0, [pc, #36]	@ (8001338 <PWM_Assing+0xc4>)
 8001314:	f00a f850 	bl	800b3b8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001318:	210c      	movs	r1, #12
 800131a:	4807      	ldr	r0, [pc, #28]	@ (8001338 <PWM_Assing+0xc4>)
 800131c:	f00a f84c 	bl	800b3b8 <HAL_TIM_PWM_Start>
}
 8001320:	bf00      	nop
 8001322:	bd80      	pop	{r7, pc}
 8001324:	24000050 	.word	0x24000050
 8001328:	40000400 	.word	0x40000400
 800132c:	40000800 	.word	0x40000800
 8001330:	24002400 	.word	0x24002400
 8001334:	2400244c 	.word	0x2400244c
 8001338:	24002498 	.word	0x24002498

0800133c <SBUS_init>:

extern UART_HandleTypeDef huart1;
#define SBUS_UART_handler &huart1


void SBUS_init(void){
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(SBUS_UART_handler, &SBUS_RxBuffer, 1);
 8001340:	2201      	movs	r2, #1
 8001342:	4903      	ldr	r1, [pc, #12]	@ (8001350 <SBUS_init+0x14>)
 8001344:	4803      	ldr	r0, [pc, #12]	@ (8001354 <SBUS_init+0x18>)
 8001346:	f00b f827 	bl	800c398 <HAL_UART_Receive_DMA>

}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	2400017d 	.word	0x2400017d
 8001354:	24002610 	.word	0x24002610

08001358 <SBUS_Receive>:

void SBUS_Receive(uint8_t SBUS_RxBuffer){
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	71fb      	strb	r3, [r7, #7]
	static uint8_t Actual_status = 0;
	static uint8_t RxCount;

	switch (Actual_status) {
 8001362:	4b20      	ldr	r3, [pc, #128]	@ (80013e4 <SBUS_Receive+0x8c>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d002      	beq.n	8001370 <SBUS_Receive+0x18>
 800136a:	2b01      	cmp	r3, #1
 800136c:	d017      	beq.n	800139e <SBUS_Receive+0x46>
 800136e:	e02f      	b.n	80013d0 <SBUS_Receive+0x78>
		case 0:
			if(SBUS_RxBuffer == 0x0F){
 8001370:	79fb      	ldrb	r3, [r7, #7]
 8001372:	2b0f      	cmp	r3, #15
 8001374:	d10f      	bne.n	8001396 <SBUS_Receive+0x3e>
				SBUS_UART_Rx[RxCount] = SBUS_RxBuffer;
 8001376:	4b1c      	ldr	r3, [pc, #112]	@ (80013e8 <SBUS_Receive+0x90>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	4619      	mov	r1, r3
 800137c:	4a1b      	ldr	r2, [pc, #108]	@ (80013ec <SBUS_Receive+0x94>)
 800137e:	79fb      	ldrb	r3, [r7, #7]
 8001380:	5453      	strb	r3, [r2, r1]
				Actual_status = 1;
 8001382:	4b18      	ldr	r3, [pc, #96]	@ (80013e4 <SBUS_Receive+0x8c>)
 8001384:	2201      	movs	r2, #1
 8001386:	701a      	strb	r2, [r3, #0]
				RxCount++;
 8001388:	4b17      	ldr	r3, [pc, #92]	@ (80013e8 <SBUS_Receive+0x90>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	3301      	adds	r3, #1
 800138e:	b2da      	uxtb	r2, r3
 8001390:	4b15      	ldr	r3, [pc, #84]	@ (80013e8 <SBUS_Receive+0x90>)
 8001392:	701a      	strb	r2, [r3, #0]
			}
			else{
				RxCount = 0;
			}
			break;
 8001394:	e021      	b.n	80013da <SBUS_Receive+0x82>
				RxCount = 0;
 8001396:	4b14      	ldr	r3, [pc, #80]	@ (80013e8 <SBUS_Receive+0x90>)
 8001398:	2200      	movs	r2, #0
 800139a:	701a      	strb	r2, [r3, #0]
			break;
 800139c:	e01d      	b.n	80013da <SBUS_Receive+0x82>
		case 1:
			SBUS_UART_Rx[RxCount] = SBUS_RxBuffer;
 800139e:	4b12      	ldr	r3, [pc, #72]	@ (80013e8 <SBUS_Receive+0x90>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	4619      	mov	r1, r3
 80013a4:	4a11      	ldr	r2, [pc, #68]	@ (80013ec <SBUS_Receive+0x94>)
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	5453      	strb	r3, [r2, r1]
			RxCount++;
 80013aa:	4b0f      	ldr	r3, [pc, #60]	@ (80013e8 <SBUS_Receive+0x90>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	3301      	adds	r3, #1
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	4b0d      	ldr	r3, [pc, #52]	@ (80013e8 <SBUS_Receive+0x90>)
 80013b4:	701a      	strb	r2, [r3, #0]
			if(RxCount == 24){
 80013b6:	4b0c      	ldr	r3, [pc, #48]	@ (80013e8 <SBUS_Receive+0x90>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	2b18      	cmp	r3, #24
 80013bc:	d10c      	bne.n	80013d8 <SBUS_Receive+0x80>
				RxCount = 0;
 80013be:	4b0a      	ldr	r3, [pc, #40]	@ (80013e8 <SBUS_Receive+0x90>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	701a      	strb	r2, [r3, #0]
				Actual_status = 0;
 80013c4:	4b07      	ldr	r3, [pc, #28]	@ (80013e4 <SBUS_Receive+0x8c>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	701a      	strb	r2, [r3, #0]
				SBUS_getData();
 80013ca:	f000 f843 	bl	8001454 <SBUS_getData>
			}
			break;
 80013ce:	e003      	b.n	80013d8 <SBUS_Receive+0x80>
		default:
			Actual_status = 0;
 80013d0:	4b04      	ldr	r3, [pc, #16]	@ (80013e4 <SBUS_Receive+0x8c>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	701a      	strb	r2, [r3, #0]
			break;
 80013d6:	e000      	b.n	80013da <SBUS_Receive+0x82>
			break;
 80013d8:	bf00      	nop
	}
}
 80013da:	bf00      	nop
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	2400017e 	.word	0x2400017e
 80013e8:	2400017f 	.word	0x2400017f
 80013ec:	24000164 	.word	0x24000164

080013f0 <Temp_BypassFunct>:

void Temp_BypassFunct (void){
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
	PWM_Output.Canal_1  = Radio_input.Canal_1;
 80013f4:	4b15      	ldr	r3, [pc, #84]	@ (800144c <Temp_BypassFunct+0x5c>)
 80013f6:	881a      	ldrh	r2, [r3, #0]
 80013f8:	4b15      	ldr	r3, [pc, #84]	@ (8001450 <Temp_BypassFunct+0x60>)
 80013fa:	801a      	strh	r2, [r3, #0]
	PWM_Output.Canal_2  = Radio_input.Canal_2;
 80013fc:	4b13      	ldr	r3, [pc, #76]	@ (800144c <Temp_BypassFunct+0x5c>)
 80013fe:	885a      	ldrh	r2, [r3, #2]
 8001400:	4b13      	ldr	r3, [pc, #76]	@ (8001450 <Temp_BypassFunct+0x60>)
 8001402:	805a      	strh	r2, [r3, #2]
	PWM_Output.Canal_3  = Radio_input.Canal_3;
 8001404:	4b11      	ldr	r3, [pc, #68]	@ (800144c <Temp_BypassFunct+0x5c>)
 8001406:	889a      	ldrh	r2, [r3, #4]
 8001408:	4b11      	ldr	r3, [pc, #68]	@ (8001450 <Temp_BypassFunct+0x60>)
 800140a:	809a      	strh	r2, [r3, #4]
	PWM_Output.Canal_4  = Radio_input.Canal_4;
 800140c:	4b0f      	ldr	r3, [pc, #60]	@ (800144c <Temp_BypassFunct+0x5c>)
 800140e:	88da      	ldrh	r2, [r3, #6]
 8001410:	4b0f      	ldr	r3, [pc, #60]	@ (8001450 <Temp_BypassFunct+0x60>)
 8001412:	80da      	strh	r2, [r3, #6]
	PWM_Output.Canal_5  = Radio_input.Canal_5;
 8001414:	4b0d      	ldr	r3, [pc, #52]	@ (800144c <Temp_BypassFunct+0x5c>)
 8001416:	891a      	ldrh	r2, [r3, #8]
 8001418:	4b0d      	ldr	r3, [pc, #52]	@ (8001450 <Temp_BypassFunct+0x60>)
 800141a:	811a      	strh	r2, [r3, #8]
	PWM_Output.Canal_6  = Radio_input.Canal_6;
 800141c:	4b0b      	ldr	r3, [pc, #44]	@ (800144c <Temp_BypassFunct+0x5c>)
 800141e:	895a      	ldrh	r2, [r3, #10]
 8001420:	4b0b      	ldr	r3, [pc, #44]	@ (8001450 <Temp_BypassFunct+0x60>)
 8001422:	815a      	strh	r2, [r3, #10]
	PWM_Output.Canal_7  = Radio_input.Canal_7;
 8001424:	4b09      	ldr	r3, [pc, #36]	@ (800144c <Temp_BypassFunct+0x5c>)
 8001426:	899a      	ldrh	r2, [r3, #12]
 8001428:	4b09      	ldr	r3, [pc, #36]	@ (8001450 <Temp_BypassFunct+0x60>)
 800142a:	819a      	strh	r2, [r3, #12]
	PWM_Output.Canal_8  = Radio_input.Canal_8;
 800142c:	4b07      	ldr	r3, [pc, #28]	@ (800144c <Temp_BypassFunct+0x5c>)
 800142e:	89da      	ldrh	r2, [r3, #14]
 8001430:	4b07      	ldr	r3, [pc, #28]	@ (8001450 <Temp_BypassFunct+0x60>)
 8001432:	81da      	strh	r2, [r3, #14]
	PWM_Output.Canal_9  = Radio_input.Canal_9;
 8001434:	4b05      	ldr	r3, [pc, #20]	@ (800144c <Temp_BypassFunct+0x5c>)
 8001436:	8a1a      	ldrh	r2, [r3, #16]
 8001438:	4b05      	ldr	r3, [pc, #20]	@ (8001450 <Temp_BypassFunct+0x60>)
 800143a:	821a      	strh	r2, [r3, #16]
	PWM_Output.Canal_10 = Radio_input.Canal_10;
 800143c:	4b03      	ldr	r3, [pc, #12]	@ (800144c <Temp_BypassFunct+0x5c>)
 800143e:	8a5a      	ldrh	r2, [r3, #18]
 8001440:	4b03      	ldr	r3, [pc, #12]	@ (8001450 <Temp_BypassFunct+0x60>)
 8001442:	825a      	strh	r2, [r3, #18]

	PWM_Assing();
 8001444:	f7ff ff16 	bl	8001274 <PWM_Assing>
}
 8001448:	bf00      	nop
 800144a:	bd80      	pop	{r7, pc}
 800144c:	24000064 	.word	0x24000064
 8001450:	24000050 	.word	0x24000050

08001454 <SBUS_getData>:

void SBUS_getData(void){
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
	//Se hace el corrimiento de bits para dar la estructura de los 16 canales, donde cada canal esta compuesto por 11 bits
	//pero cada paquete es de 1 byte. Para cada canal se utilizan los 8 bits (O los que correspondan) de el byte 1
	//(O el que corresponda) como los bits menos significativos del canal 1, y los tres bits faltantes se toman los 3 bits
	// menos significativos (O los que correspondan) del byte 2 y se colocan como los 3 bits más significativos del canal 1.
	Radio_input.Canal_1 = ((SBUS_UART_Rx[1] | SBUS_UART_Rx[2] << 8) & 0x07FF);
 8001458:	4b95      	ldr	r3, [pc, #596]	@ (80016b0 <SBUS_getData+0x25c>)
 800145a:	785b      	ldrb	r3, [r3, #1]
 800145c:	b21a      	sxth	r2, r3
 800145e:	4b94      	ldr	r3, [pc, #592]	@ (80016b0 <SBUS_getData+0x25c>)
 8001460:	789b      	ldrb	r3, [r3, #2]
 8001462:	021b      	lsls	r3, r3, #8
 8001464:	b21b      	sxth	r3, r3
 8001466:	4313      	orrs	r3, r2
 8001468:	b21b      	sxth	r3, r3
 800146a:	b29b      	uxth	r3, r3
 800146c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001470:	b29a      	uxth	r2, r3
 8001472:	4b90      	ldr	r3, [pc, #576]	@ (80016b4 <SBUS_getData+0x260>)
 8001474:	801a      	strh	r2, [r3, #0]
	Radio_input.Canal_2 = ((SBUS_UART_Rx[2] >> 3 | SBUS_UART_Rx[3] << 5) & 0x07FF);
 8001476:	4b8e      	ldr	r3, [pc, #568]	@ (80016b0 <SBUS_getData+0x25c>)
 8001478:	789b      	ldrb	r3, [r3, #2]
 800147a:	08db      	lsrs	r3, r3, #3
 800147c:	b2db      	uxtb	r3, r3
 800147e:	b21a      	sxth	r2, r3
 8001480:	4b8b      	ldr	r3, [pc, #556]	@ (80016b0 <SBUS_getData+0x25c>)
 8001482:	78db      	ldrb	r3, [r3, #3]
 8001484:	015b      	lsls	r3, r3, #5
 8001486:	b21b      	sxth	r3, r3
 8001488:	4313      	orrs	r3, r2
 800148a:	b21b      	sxth	r3, r3
 800148c:	b29b      	uxth	r3, r3
 800148e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001492:	b29a      	uxth	r2, r3
 8001494:	4b87      	ldr	r3, [pc, #540]	@ (80016b4 <SBUS_getData+0x260>)
 8001496:	805a      	strh	r2, [r3, #2]
	Radio_input.Canal_3 = ((SBUS_UART_Rx[3] >> 6 | SBUS_UART_Rx[4] << 2 | SBUS_UART_Rx[5] << 10) & 0x07FF);
 8001498:	4b85      	ldr	r3, [pc, #532]	@ (80016b0 <SBUS_getData+0x25c>)
 800149a:	78db      	ldrb	r3, [r3, #3]
 800149c:	099b      	lsrs	r3, r3, #6
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	b21a      	sxth	r2, r3
 80014a2:	4b83      	ldr	r3, [pc, #524]	@ (80016b0 <SBUS_getData+0x25c>)
 80014a4:	791b      	ldrb	r3, [r3, #4]
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	b21b      	sxth	r3, r3
 80014aa:	4313      	orrs	r3, r2
 80014ac:	b21a      	sxth	r2, r3
 80014ae:	4b80      	ldr	r3, [pc, #512]	@ (80016b0 <SBUS_getData+0x25c>)
 80014b0:	795b      	ldrb	r3, [r3, #5]
 80014b2:	029b      	lsls	r3, r3, #10
 80014b4:	b21b      	sxth	r3, r3
 80014b6:	4313      	orrs	r3, r2
 80014b8:	b21b      	sxth	r3, r3
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014c0:	b29a      	uxth	r2, r3
 80014c2:	4b7c      	ldr	r3, [pc, #496]	@ (80016b4 <SBUS_getData+0x260>)
 80014c4:	809a      	strh	r2, [r3, #4]
	Radio_input.Canal_4 = ((SBUS_UART_Rx[5] >> 1 | SBUS_UART_Rx[6] << 7) & 0x07FF);
 80014c6:	4b7a      	ldr	r3, [pc, #488]	@ (80016b0 <SBUS_getData+0x25c>)
 80014c8:	795b      	ldrb	r3, [r3, #5]
 80014ca:	085b      	lsrs	r3, r3, #1
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	b21a      	sxth	r2, r3
 80014d0:	4b77      	ldr	r3, [pc, #476]	@ (80016b0 <SBUS_getData+0x25c>)
 80014d2:	799b      	ldrb	r3, [r3, #6]
 80014d4:	01db      	lsls	r3, r3, #7
 80014d6:	b21b      	sxth	r3, r3
 80014d8:	4313      	orrs	r3, r2
 80014da:	b21b      	sxth	r3, r3
 80014dc:	b29b      	uxth	r3, r3
 80014de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014e2:	b29a      	uxth	r2, r3
 80014e4:	4b73      	ldr	r3, [pc, #460]	@ (80016b4 <SBUS_getData+0x260>)
 80014e6:	80da      	strh	r2, [r3, #6]
	Radio_input.Canal_5 = ((SBUS_UART_Rx[6] >> 4 | SBUS_UART_Rx[7] << 4) & 0x07FF);
 80014e8:	4b71      	ldr	r3, [pc, #452]	@ (80016b0 <SBUS_getData+0x25c>)
 80014ea:	799b      	ldrb	r3, [r3, #6]
 80014ec:	091b      	lsrs	r3, r3, #4
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	b21a      	sxth	r2, r3
 80014f2:	4b6f      	ldr	r3, [pc, #444]	@ (80016b0 <SBUS_getData+0x25c>)
 80014f4:	79db      	ldrb	r3, [r3, #7]
 80014f6:	011b      	lsls	r3, r3, #4
 80014f8:	b21b      	sxth	r3, r3
 80014fa:	4313      	orrs	r3, r2
 80014fc:	b21b      	sxth	r3, r3
 80014fe:	b29b      	uxth	r3, r3
 8001500:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001504:	b29a      	uxth	r2, r3
 8001506:	4b6b      	ldr	r3, [pc, #428]	@ (80016b4 <SBUS_getData+0x260>)
 8001508:	811a      	strh	r2, [r3, #8]
	Radio_input.Canal_6 = ((SBUS_UART_Rx[7] >> 7 | SBUS_UART_Rx[8] << 1 | SBUS_UART_Rx[9] << 9) & 0x07FF);
 800150a:	4b69      	ldr	r3, [pc, #420]	@ (80016b0 <SBUS_getData+0x25c>)
 800150c:	79db      	ldrb	r3, [r3, #7]
 800150e:	09db      	lsrs	r3, r3, #7
 8001510:	b2db      	uxtb	r3, r3
 8001512:	b21a      	sxth	r2, r3
 8001514:	4b66      	ldr	r3, [pc, #408]	@ (80016b0 <SBUS_getData+0x25c>)
 8001516:	7a1b      	ldrb	r3, [r3, #8]
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	b21b      	sxth	r3, r3
 800151c:	4313      	orrs	r3, r2
 800151e:	b21a      	sxth	r2, r3
 8001520:	4b63      	ldr	r3, [pc, #396]	@ (80016b0 <SBUS_getData+0x25c>)
 8001522:	7a5b      	ldrb	r3, [r3, #9]
 8001524:	025b      	lsls	r3, r3, #9
 8001526:	b21b      	sxth	r3, r3
 8001528:	4313      	orrs	r3, r2
 800152a:	b21b      	sxth	r3, r3
 800152c:	b29b      	uxth	r3, r3
 800152e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001532:	b29a      	uxth	r2, r3
 8001534:	4b5f      	ldr	r3, [pc, #380]	@ (80016b4 <SBUS_getData+0x260>)
 8001536:	815a      	strh	r2, [r3, #10]
	Radio_input.Canal_7 = ((SBUS_UART_Rx[9] >> 2 | SBUS_UART_Rx[10] << 6) & 0x07FF);
 8001538:	4b5d      	ldr	r3, [pc, #372]	@ (80016b0 <SBUS_getData+0x25c>)
 800153a:	7a5b      	ldrb	r3, [r3, #9]
 800153c:	089b      	lsrs	r3, r3, #2
 800153e:	b2db      	uxtb	r3, r3
 8001540:	b21a      	sxth	r2, r3
 8001542:	4b5b      	ldr	r3, [pc, #364]	@ (80016b0 <SBUS_getData+0x25c>)
 8001544:	7a9b      	ldrb	r3, [r3, #10]
 8001546:	019b      	lsls	r3, r3, #6
 8001548:	b21b      	sxth	r3, r3
 800154a:	4313      	orrs	r3, r2
 800154c:	b21b      	sxth	r3, r3
 800154e:	b29b      	uxth	r3, r3
 8001550:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001554:	b29a      	uxth	r2, r3
 8001556:	4b57      	ldr	r3, [pc, #348]	@ (80016b4 <SBUS_getData+0x260>)
 8001558:	819a      	strh	r2, [r3, #12]
	Radio_input.Canal_8 = ((SBUS_UART_Rx[10] >> 5 | SBUS_UART_Rx[11] << 3) & 0x07FF);
 800155a:	4b55      	ldr	r3, [pc, #340]	@ (80016b0 <SBUS_getData+0x25c>)
 800155c:	7a9b      	ldrb	r3, [r3, #10]
 800155e:	095b      	lsrs	r3, r3, #5
 8001560:	b2db      	uxtb	r3, r3
 8001562:	b21a      	sxth	r2, r3
 8001564:	4b52      	ldr	r3, [pc, #328]	@ (80016b0 <SBUS_getData+0x25c>)
 8001566:	7adb      	ldrb	r3, [r3, #11]
 8001568:	00db      	lsls	r3, r3, #3
 800156a:	b21b      	sxth	r3, r3
 800156c:	4313      	orrs	r3, r2
 800156e:	b21b      	sxth	r3, r3
 8001570:	b29b      	uxth	r3, r3
 8001572:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001576:	b29a      	uxth	r2, r3
 8001578:	4b4e      	ldr	r3, [pc, #312]	@ (80016b4 <SBUS_getData+0x260>)
 800157a:	81da      	strh	r2, [r3, #14]
	Radio_input.Canal_9 = ((SBUS_UART_Rx[12] | SBUS_UART_Rx[13] << 8) & 0x07FF);
 800157c:	4b4c      	ldr	r3, [pc, #304]	@ (80016b0 <SBUS_getData+0x25c>)
 800157e:	7b1b      	ldrb	r3, [r3, #12]
 8001580:	b21a      	sxth	r2, r3
 8001582:	4b4b      	ldr	r3, [pc, #300]	@ (80016b0 <SBUS_getData+0x25c>)
 8001584:	7b5b      	ldrb	r3, [r3, #13]
 8001586:	021b      	lsls	r3, r3, #8
 8001588:	b21b      	sxth	r3, r3
 800158a:	4313      	orrs	r3, r2
 800158c:	b21b      	sxth	r3, r3
 800158e:	b29b      	uxth	r3, r3
 8001590:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001594:	b29a      	uxth	r2, r3
 8001596:	4b47      	ldr	r3, [pc, #284]	@ (80016b4 <SBUS_getData+0x260>)
 8001598:	821a      	strh	r2, [r3, #16]
	Radio_input.Canal_10 = ((SBUS_UART_Rx[13] >> 3 | SBUS_UART_Rx[14] << 5) & 0x07FF);
 800159a:	4b45      	ldr	r3, [pc, #276]	@ (80016b0 <SBUS_getData+0x25c>)
 800159c:	7b5b      	ldrb	r3, [r3, #13]
 800159e:	08db      	lsrs	r3, r3, #3
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	b21a      	sxth	r2, r3
 80015a4:	4b42      	ldr	r3, [pc, #264]	@ (80016b0 <SBUS_getData+0x25c>)
 80015a6:	7b9b      	ldrb	r3, [r3, #14]
 80015a8:	015b      	lsls	r3, r3, #5
 80015aa:	b21b      	sxth	r3, r3
 80015ac:	4313      	orrs	r3, r2
 80015ae:	b21b      	sxth	r3, r3
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015b6:	b29a      	uxth	r2, r3
 80015b8:	4b3e      	ldr	r3, [pc, #248]	@ (80016b4 <SBUS_getData+0x260>)
 80015ba:	825a      	strh	r2, [r3, #18]
	Radio_input.Canal_11 = ((SBUS_UART_Rx[14] >> 6 | SBUS_UART_Rx[15] << 2 | SBUS_UART_Rx[16] << 10) & 0x07FF);
 80015bc:	4b3c      	ldr	r3, [pc, #240]	@ (80016b0 <SBUS_getData+0x25c>)
 80015be:	7b9b      	ldrb	r3, [r3, #14]
 80015c0:	099b      	lsrs	r3, r3, #6
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	b21a      	sxth	r2, r3
 80015c6:	4b3a      	ldr	r3, [pc, #232]	@ (80016b0 <SBUS_getData+0x25c>)
 80015c8:	7bdb      	ldrb	r3, [r3, #15]
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	b21b      	sxth	r3, r3
 80015ce:	4313      	orrs	r3, r2
 80015d0:	b21a      	sxth	r2, r3
 80015d2:	4b37      	ldr	r3, [pc, #220]	@ (80016b0 <SBUS_getData+0x25c>)
 80015d4:	7c1b      	ldrb	r3, [r3, #16]
 80015d6:	029b      	lsls	r3, r3, #10
 80015d8:	b21b      	sxth	r3, r3
 80015da:	4313      	orrs	r3, r2
 80015dc:	b21b      	sxth	r3, r3
 80015de:	b29b      	uxth	r3, r3
 80015e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015e4:	b29a      	uxth	r2, r3
 80015e6:	4b33      	ldr	r3, [pc, #204]	@ (80016b4 <SBUS_getData+0x260>)
 80015e8:	829a      	strh	r2, [r3, #20]
	Radio_input.Canal_12 = ((SBUS_UART_Rx[16] >> 1 | SBUS_UART_Rx[17] << 7) & 0x07FF);
 80015ea:	4b31      	ldr	r3, [pc, #196]	@ (80016b0 <SBUS_getData+0x25c>)
 80015ec:	7c1b      	ldrb	r3, [r3, #16]
 80015ee:	085b      	lsrs	r3, r3, #1
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	b21a      	sxth	r2, r3
 80015f4:	4b2e      	ldr	r3, [pc, #184]	@ (80016b0 <SBUS_getData+0x25c>)
 80015f6:	7c5b      	ldrb	r3, [r3, #17]
 80015f8:	01db      	lsls	r3, r3, #7
 80015fa:	b21b      	sxth	r3, r3
 80015fc:	4313      	orrs	r3, r2
 80015fe:	b21b      	sxth	r3, r3
 8001600:	b29b      	uxth	r3, r3
 8001602:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001606:	b29a      	uxth	r2, r3
 8001608:	4b2a      	ldr	r3, [pc, #168]	@ (80016b4 <SBUS_getData+0x260>)
 800160a:	82da      	strh	r2, [r3, #22]
	Radio_input.Canal_13 = ((SBUS_UART_Rx[17] >> 4 | SBUS_UART_Rx[18] << 4) & 0x07FF);
 800160c:	4b28      	ldr	r3, [pc, #160]	@ (80016b0 <SBUS_getData+0x25c>)
 800160e:	7c5b      	ldrb	r3, [r3, #17]
 8001610:	091b      	lsrs	r3, r3, #4
 8001612:	b2db      	uxtb	r3, r3
 8001614:	b21a      	sxth	r2, r3
 8001616:	4b26      	ldr	r3, [pc, #152]	@ (80016b0 <SBUS_getData+0x25c>)
 8001618:	7c9b      	ldrb	r3, [r3, #18]
 800161a:	011b      	lsls	r3, r3, #4
 800161c:	b21b      	sxth	r3, r3
 800161e:	4313      	orrs	r3, r2
 8001620:	b21b      	sxth	r3, r3
 8001622:	b29b      	uxth	r3, r3
 8001624:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001628:	b29a      	uxth	r2, r3
 800162a:	4b22      	ldr	r3, [pc, #136]	@ (80016b4 <SBUS_getData+0x260>)
 800162c:	831a      	strh	r2, [r3, #24]
	Radio_input.Canal_14 = ((SBUS_UART_Rx[18] >> 7 | SBUS_UART_Rx[19] << 1 | SBUS_UART_Rx[20] << 9) & 0x07FF);
 800162e:	4b20      	ldr	r3, [pc, #128]	@ (80016b0 <SBUS_getData+0x25c>)
 8001630:	7c9b      	ldrb	r3, [r3, #18]
 8001632:	09db      	lsrs	r3, r3, #7
 8001634:	b2db      	uxtb	r3, r3
 8001636:	b21a      	sxth	r2, r3
 8001638:	4b1d      	ldr	r3, [pc, #116]	@ (80016b0 <SBUS_getData+0x25c>)
 800163a:	7cdb      	ldrb	r3, [r3, #19]
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	b21b      	sxth	r3, r3
 8001640:	4313      	orrs	r3, r2
 8001642:	b21a      	sxth	r2, r3
 8001644:	4b1a      	ldr	r3, [pc, #104]	@ (80016b0 <SBUS_getData+0x25c>)
 8001646:	7d1b      	ldrb	r3, [r3, #20]
 8001648:	025b      	lsls	r3, r3, #9
 800164a:	b21b      	sxth	r3, r3
 800164c:	4313      	orrs	r3, r2
 800164e:	b21b      	sxth	r3, r3
 8001650:	b29b      	uxth	r3, r3
 8001652:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001656:	b29a      	uxth	r2, r3
 8001658:	4b16      	ldr	r3, [pc, #88]	@ (80016b4 <SBUS_getData+0x260>)
 800165a:	835a      	strh	r2, [r3, #26]
	Radio_input.Canal_15 = ((SBUS_UART_Rx[20] >> 2 | SBUS_UART_Rx[21] << 6) & 0x07FF);
 800165c:	4b14      	ldr	r3, [pc, #80]	@ (80016b0 <SBUS_getData+0x25c>)
 800165e:	7d1b      	ldrb	r3, [r3, #20]
 8001660:	089b      	lsrs	r3, r3, #2
 8001662:	b2db      	uxtb	r3, r3
 8001664:	b21a      	sxth	r2, r3
 8001666:	4b12      	ldr	r3, [pc, #72]	@ (80016b0 <SBUS_getData+0x25c>)
 8001668:	7d5b      	ldrb	r3, [r3, #21]
 800166a:	019b      	lsls	r3, r3, #6
 800166c:	b21b      	sxth	r3, r3
 800166e:	4313      	orrs	r3, r2
 8001670:	b21b      	sxth	r3, r3
 8001672:	b29b      	uxth	r3, r3
 8001674:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001678:	b29a      	uxth	r2, r3
 800167a:	4b0e      	ldr	r3, [pc, #56]	@ (80016b4 <SBUS_getData+0x260>)
 800167c:	839a      	strh	r2, [r3, #28]
	Radio_input.Canal_16 = ((SBUS_UART_Rx[21] >> 5 | SBUS_UART_Rx[22] << 3) & 0x07FF);
 800167e:	4b0c      	ldr	r3, [pc, #48]	@ (80016b0 <SBUS_getData+0x25c>)
 8001680:	7d5b      	ldrb	r3, [r3, #21]
 8001682:	095b      	lsrs	r3, r3, #5
 8001684:	b2db      	uxtb	r3, r3
 8001686:	b21a      	sxth	r2, r3
 8001688:	4b09      	ldr	r3, [pc, #36]	@ (80016b0 <SBUS_getData+0x25c>)
 800168a:	7d9b      	ldrb	r3, [r3, #22]
 800168c:	00db      	lsls	r3, r3, #3
 800168e:	b21b      	sxth	r3, r3
 8001690:	4313      	orrs	r3, r2
 8001692:	b21b      	sxth	r3, r3
 8001694:	b29b      	uxth	r3, r3
 8001696:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800169a:	b29a      	uxth	r2, r3
 800169c:	4b05      	ldr	r3, [pc, #20]	@ (80016b4 <SBUS_getData+0x260>)
 800169e:	83da      	strh	r2, [r3, #30]

	Radio_input.Canal_1 = (uint16_t)((((float)Radio_input.Canal_1 - 352) /1344 ) * 1000) + 1000;
 80016a0:	4b04      	ldr	r3, [pc, #16]	@ (80016b4 <SBUS_getData+0x260>)
 80016a2:	881b      	ldrh	r3, [r3, #0]
 80016a4:	ee07 3a90 	vmov	s15, r3
 80016a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016ac:	e00a      	b.n	80016c4 <SBUS_getData+0x270>
 80016ae:	bf00      	nop
 80016b0:	24000164 	.word	0x24000164
 80016b4:	24000064 	.word	0x24000064
 80016b8:	43b00000 	.word	0x43b00000
 80016bc:	44a80000 	.word	0x44a80000
 80016c0:	447a0000 	.word	0x447a0000
 80016c4:	ed1f 7a04 	vldr	s14, [pc, #-16]	@ 80016b8 <SBUS_getData+0x264>
 80016c8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80016cc:	ed5f 6a05 	vldr	s13, [pc, #-20]	@ 80016bc <SBUS_getData+0x268>
 80016d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016d4:	ed1f 7a06 	vldr	s14, [pc, #-24]	@ 80016c0 <SBUS_getData+0x26c>
 80016d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016e0:	ee17 3a90 	vmov	r3, s15
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80016ea:	b29a      	uxth	r2, r3
 80016ec:	4bd1      	ldr	r3, [pc, #836]	@ (8001a34 <SBUS_getData+0x5e0>)
 80016ee:	801a      	strh	r2, [r3, #0]
	Radio_input.Canal_2 = (uint16_t)((((float)Radio_input.Canal_2 - 352) /1344 ) * 1000) + 1000;
 80016f0:	4bd0      	ldr	r3, [pc, #832]	@ (8001a34 <SBUS_getData+0x5e0>)
 80016f2:	885b      	ldrh	r3, [r3, #2]
 80016f4:	ee07 3a90 	vmov	s15, r3
 80016f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016fc:	ed9f 7ace 	vldr	s14, [pc, #824]	@ 8001a38 <SBUS_getData+0x5e4>
 8001700:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001704:	eddf 6acd 	vldr	s13, [pc, #820]	@ 8001a3c <SBUS_getData+0x5e8>
 8001708:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800170c:	ed9f 7acc 	vldr	s14, [pc, #816]	@ 8001a40 <SBUS_getData+0x5ec>
 8001710:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001714:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001718:	ee17 3a90 	vmov	r3, s15
 800171c:	b29b      	uxth	r3, r3
 800171e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001722:	b29a      	uxth	r2, r3
 8001724:	4bc3      	ldr	r3, [pc, #780]	@ (8001a34 <SBUS_getData+0x5e0>)
 8001726:	805a      	strh	r2, [r3, #2]
	Radio_input.Canal_3 = (uint16_t)((((float)Radio_input.Canal_3 - 352) /1344 ) * 1000) + 1000;
 8001728:	4bc2      	ldr	r3, [pc, #776]	@ (8001a34 <SBUS_getData+0x5e0>)
 800172a:	889b      	ldrh	r3, [r3, #4]
 800172c:	ee07 3a90 	vmov	s15, r3
 8001730:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001734:	ed9f 7ac0 	vldr	s14, [pc, #768]	@ 8001a38 <SBUS_getData+0x5e4>
 8001738:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800173c:	eddf 6abf 	vldr	s13, [pc, #764]	@ 8001a3c <SBUS_getData+0x5e8>
 8001740:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001744:	ed9f 7abe 	vldr	s14, [pc, #760]	@ 8001a40 <SBUS_getData+0x5ec>
 8001748:	ee67 7a87 	vmul.f32	s15, s15, s14
 800174c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001750:	ee17 3a90 	vmov	r3, s15
 8001754:	b29b      	uxth	r3, r3
 8001756:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800175a:	b29a      	uxth	r2, r3
 800175c:	4bb5      	ldr	r3, [pc, #724]	@ (8001a34 <SBUS_getData+0x5e0>)
 800175e:	809a      	strh	r2, [r3, #4]
	Radio_input.Canal_4 = (uint16_t)((((float)Radio_input.Canal_4 - 352) /1344 ) * 1000) + 1000;
 8001760:	4bb4      	ldr	r3, [pc, #720]	@ (8001a34 <SBUS_getData+0x5e0>)
 8001762:	88db      	ldrh	r3, [r3, #6]
 8001764:	ee07 3a90 	vmov	s15, r3
 8001768:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800176c:	ed9f 7ab2 	vldr	s14, [pc, #712]	@ 8001a38 <SBUS_getData+0x5e4>
 8001770:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001774:	eddf 6ab1 	vldr	s13, [pc, #708]	@ 8001a3c <SBUS_getData+0x5e8>
 8001778:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800177c:	ed9f 7ab0 	vldr	s14, [pc, #704]	@ 8001a40 <SBUS_getData+0x5ec>
 8001780:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001784:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001788:	ee17 3a90 	vmov	r3, s15
 800178c:	b29b      	uxth	r3, r3
 800178e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001792:	b29a      	uxth	r2, r3
 8001794:	4ba7      	ldr	r3, [pc, #668]	@ (8001a34 <SBUS_getData+0x5e0>)
 8001796:	80da      	strh	r2, [r3, #6]
	Radio_input.Canal_5 = (uint16_t)((((float)Radio_input.Canal_5 - 352) /1344 ) * 1000) + 1000;
 8001798:	4ba6      	ldr	r3, [pc, #664]	@ (8001a34 <SBUS_getData+0x5e0>)
 800179a:	891b      	ldrh	r3, [r3, #8]
 800179c:	ee07 3a90 	vmov	s15, r3
 80017a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017a4:	ed9f 7aa4 	vldr	s14, [pc, #656]	@ 8001a38 <SBUS_getData+0x5e4>
 80017a8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80017ac:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 8001a3c <SBUS_getData+0x5e8>
 80017b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017b4:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 8001a40 <SBUS_getData+0x5ec>
 80017b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017c0:	ee17 3a90 	vmov	r3, s15
 80017c4:	b29b      	uxth	r3, r3
 80017c6:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	4b99      	ldr	r3, [pc, #612]	@ (8001a34 <SBUS_getData+0x5e0>)
 80017ce:	811a      	strh	r2, [r3, #8]
	Radio_input.Canal_6 = (uint16_t)((((float)Radio_input.Canal_6 - 352) /1344 ) * 1000) + 1000;
 80017d0:	4b98      	ldr	r3, [pc, #608]	@ (8001a34 <SBUS_getData+0x5e0>)
 80017d2:	895b      	ldrh	r3, [r3, #10]
 80017d4:	ee07 3a90 	vmov	s15, r3
 80017d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017dc:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 8001a38 <SBUS_getData+0x5e4>
 80017e0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80017e4:	eddf 6a95 	vldr	s13, [pc, #596]	@ 8001a3c <SBUS_getData+0x5e8>
 80017e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017ec:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 8001a40 <SBUS_getData+0x5ec>
 80017f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017f8:	ee17 3a90 	vmov	r3, s15
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001802:	b29a      	uxth	r2, r3
 8001804:	4b8b      	ldr	r3, [pc, #556]	@ (8001a34 <SBUS_getData+0x5e0>)
 8001806:	815a      	strh	r2, [r3, #10]
	Radio_input.Canal_7 = (uint16_t)((((float)Radio_input.Canal_7 - 352) /1344 ) * 1000) + 1000;
 8001808:	4b8a      	ldr	r3, [pc, #552]	@ (8001a34 <SBUS_getData+0x5e0>)
 800180a:	899b      	ldrh	r3, [r3, #12]
 800180c:	ee07 3a90 	vmov	s15, r3
 8001810:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001814:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 8001a38 <SBUS_getData+0x5e4>
 8001818:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800181c:	eddf 6a87 	vldr	s13, [pc, #540]	@ 8001a3c <SBUS_getData+0x5e8>
 8001820:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001824:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8001a40 <SBUS_getData+0x5ec>
 8001828:	ee67 7a87 	vmul.f32	s15, s15, s14
 800182c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001830:	ee17 3a90 	vmov	r3, s15
 8001834:	b29b      	uxth	r3, r3
 8001836:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800183a:	b29a      	uxth	r2, r3
 800183c:	4b7d      	ldr	r3, [pc, #500]	@ (8001a34 <SBUS_getData+0x5e0>)
 800183e:	819a      	strh	r2, [r3, #12]
	Radio_input.Canal_8 = (uint16_t)((((float)Radio_input.Canal_8 - 352) /1344 ) * 1000) + 1000;
 8001840:	4b7c      	ldr	r3, [pc, #496]	@ (8001a34 <SBUS_getData+0x5e0>)
 8001842:	89db      	ldrh	r3, [r3, #14]
 8001844:	ee07 3a90 	vmov	s15, r3
 8001848:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800184c:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8001a38 <SBUS_getData+0x5e4>
 8001850:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001854:	eddf 6a79 	vldr	s13, [pc, #484]	@ 8001a3c <SBUS_getData+0x5e8>
 8001858:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800185c:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 8001a40 <SBUS_getData+0x5ec>
 8001860:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001864:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001868:	ee17 3a90 	vmov	r3, s15
 800186c:	b29b      	uxth	r3, r3
 800186e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001872:	b29a      	uxth	r2, r3
 8001874:	4b6f      	ldr	r3, [pc, #444]	@ (8001a34 <SBUS_getData+0x5e0>)
 8001876:	81da      	strh	r2, [r3, #14]
	Radio_input.Canal_9 = (uint16_t)((((float)Radio_input.Canal_9 - 352) /1344 ) * 1000) + 1000;
 8001878:	4b6e      	ldr	r3, [pc, #440]	@ (8001a34 <SBUS_getData+0x5e0>)
 800187a:	8a1b      	ldrh	r3, [r3, #16]
 800187c:	ee07 3a90 	vmov	s15, r3
 8001880:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001884:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8001a38 <SBUS_getData+0x5e4>
 8001888:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800188c:	eddf 6a6b 	vldr	s13, [pc, #428]	@ 8001a3c <SBUS_getData+0x5e8>
 8001890:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001894:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 8001a40 <SBUS_getData+0x5ec>
 8001898:	ee67 7a87 	vmul.f32	s15, s15, s14
 800189c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018a0:	ee17 3a90 	vmov	r3, s15
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80018aa:	b29a      	uxth	r2, r3
 80018ac:	4b61      	ldr	r3, [pc, #388]	@ (8001a34 <SBUS_getData+0x5e0>)
 80018ae:	821a      	strh	r2, [r3, #16]
	Radio_input.Canal_10 = (uint16_t)((((float)Radio_input.Canal_10 - 352) /1344 ) * 1000) + 1000;
 80018b0:	4b60      	ldr	r3, [pc, #384]	@ (8001a34 <SBUS_getData+0x5e0>)
 80018b2:	8a5b      	ldrh	r3, [r3, #18]
 80018b4:	ee07 3a90 	vmov	s15, r3
 80018b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018bc:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8001a38 <SBUS_getData+0x5e4>
 80018c0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80018c4:	eddf 6a5d 	vldr	s13, [pc, #372]	@ 8001a3c <SBUS_getData+0x5e8>
 80018c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018cc:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8001a40 <SBUS_getData+0x5ec>
 80018d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018d8:	ee17 3a90 	vmov	r3, s15
 80018dc:	b29b      	uxth	r3, r3
 80018de:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80018e2:	b29a      	uxth	r2, r3
 80018e4:	4b53      	ldr	r3, [pc, #332]	@ (8001a34 <SBUS_getData+0x5e0>)
 80018e6:	825a      	strh	r2, [r3, #18]
	Radio_input.Canal_11 = (uint16_t)((((float)Radio_input.Canal_11 - 352) /1344 ) * 1000) + 1000;
 80018e8:	4b52      	ldr	r3, [pc, #328]	@ (8001a34 <SBUS_getData+0x5e0>)
 80018ea:	8a9b      	ldrh	r3, [r3, #20]
 80018ec:	ee07 3a90 	vmov	s15, r3
 80018f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018f4:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8001a38 <SBUS_getData+0x5e4>
 80018f8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80018fc:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8001a3c <SBUS_getData+0x5e8>
 8001900:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001904:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8001a40 <SBUS_getData+0x5ec>
 8001908:	ee67 7a87 	vmul.f32	s15, s15, s14
 800190c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001910:	ee17 3a90 	vmov	r3, s15
 8001914:	b29b      	uxth	r3, r3
 8001916:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800191a:	b29a      	uxth	r2, r3
 800191c:	4b45      	ldr	r3, [pc, #276]	@ (8001a34 <SBUS_getData+0x5e0>)
 800191e:	829a      	strh	r2, [r3, #20]
	Radio_input.Canal_12 = (uint16_t)((((float)Radio_input.Canal_12 - 352) /1344 ) * 1000) + 1000;
 8001920:	4b44      	ldr	r3, [pc, #272]	@ (8001a34 <SBUS_getData+0x5e0>)
 8001922:	8adb      	ldrh	r3, [r3, #22]
 8001924:	ee07 3a90 	vmov	s15, r3
 8001928:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800192c:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8001a38 <SBUS_getData+0x5e4>
 8001930:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001934:	eddf 6a41 	vldr	s13, [pc, #260]	@ 8001a3c <SBUS_getData+0x5e8>
 8001938:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800193c:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8001a40 <SBUS_getData+0x5ec>
 8001940:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001944:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001948:	ee17 3a90 	vmov	r3, s15
 800194c:	b29b      	uxth	r3, r3
 800194e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001952:	b29a      	uxth	r2, r3
 8001954:	4b37      	ldr	r3, [pc, #220]	@ (8001a34 <SBUS_getData+0x5e0>)
 8001956:	82da      	strh	r2, [r3, #22]
	Radio_input.Canal_13 = (uint16_t)((((float)Radio_input.Canal_13 - 352) /1344 ) * 1000) + 1000;
 8001958:	4b36      	ldr	r3, [pc, #216]	@ (8001a34 <SBUS_getData+0x5e0>)
 800195a:	8b1b      	ldrh	r3, [r3, #24]
 800195c:	ee07 3a90 	vmov	s15, r3
 8001960:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001964:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8001a38 <SBUS_getData+0x5e4>
 8001968:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800196c:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8001a3c <SBUS_getData+0x5e8>
 8001970:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001974:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8001a40 <SBUS_getData+0x5ec>
 8001978:	ee67 7a87 	vmul.f32	s15, s15, s14
 800197c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001980:	ee17 3a90 	vmov	r3, s15
 8001984:	b29b      	uxth	r3, r3
 8001986:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800198a:	b29a      	uxth	r2, r3
 800198c:	4b29      	ldr	r3, [pc, #164]	@ (8001a34 <SBUS_getData+0x5e0>)
 800198e:	831a      	strh	r2, [r3, #24]
	Radio_input.Canal_14 = (uint16_t)((((float)Radio_input.Canal_14 - 352) /1344 ) * 1000) + 1000;
 8001990:	4b28      	ldr	r3, [pc, #160]	@ (8001a34 <SBUS_getData+0x5e0>)
 8001992:	8b5b      	ldrh	r3, [r3, #26]
 8001994:	ee07 3a90 	vmov	s15, r3
 8001998:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800199c:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001a38 <SBUS_getData+0x5e4>
 80019a0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80019a4:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8001a3c <SBUS_getData+0x5e8>
 80019a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019ac:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8001a40 <SBUS_getData+0x5ec>
 80019b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019b8:	ee17 3a90 	vmov	r3, s15
 80019bc:	b29b      	uxth	r3, r3
 80019be:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001a34 <SBUS_getData+0x5e0>)
 80019c6:	835a      	strh	r2, [r3, #26]
	Radio_input.Canal_15 = (uint16_t)((((float)Radio_input.Canal_15 - 352) /1344 ) * 1000) + 1000;
 80019c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001a34 <SBUS_getData+0x5e0>)
 80019ca:	8b9b      	ldrh	r3, [r3, #28]
 80019cc:	ee07 3a90 	vmov	s15, r3
 80019d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019d4:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8001a38 <SBUS_getData+0x5e4>
 80019d8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80019dc:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8001a3c <SBUS_getData+0x5e8>
 80019e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019e4:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8001a40 <SBUS_getData+0x5ec>
 80019e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019f0:	ee17 3a90 	vmov	r3, s15
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80019fa:	b29a      	uxth	r2, r3
 80019fc:	4b0d      	ldr	r3, [pc, #52]	@ (8001a34 <SBUS_getData+0x5e0>)
 80019fe:	839a      	strh	r2, [r3, #28]
	Radio_input.Canal_16 = (uint16_t)((((float)Radio_input.Canal_16 - 352) /1344 ) * 1000) + 1000;
 8001a00:	4b0c      	ldr	r3, [pc, #48]	@ (8001a34 <SBUS_getData+0x5e0>)
 8001a02:	8bdb      	ldrh	r3, [r3, #30]
 8001a04:	ee07 3a90 	vmov	s15, r3
 8001a08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a0c:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8001a38 <SBUS_getData+0x5e4>
 8001a10:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001a14:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8001a3c <SBUS_getData+0x5e8>
 8001a18:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a1c:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8001a40 <SBUS_getData+0x5ec>
 8001a20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a28:	ee17 3a90 	vmov	r3, s15
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001a32:	e007      	b.n	8001a44 <SBUS_getData+0x5f0>
 8001a34:	24000064 	.word	0x24000064
 8001a38:	43b00000 	.word	0x43b00000
 8001a3c:	44a80000 	.word	0x44a80000
 8001a40:	447a0000 	.word	0x447a0000
 8001a44:	b29a      	uxth	r2, r3
 8001a46:	4b28      	ldr	r3, [pc, #160]	@ (8001ae8 <SBUS_getData+0x694>)
 8001a48:	83da      	strh	r2, [r3, #30]

	//En el caso del byte 24, el primer bit menos significativo corresponde al canal 17, el segundo al canal 18, el tercero a el fail safe y
	//el cuarto a la perdida de paquetes. Los 4 restantes no se utilizan.
	if(SBUS_UART_Rx[23]>=8){
 8001a4a:	4b28      	ldr	r3, [pc, #160]	@ (8001aec <SBUS_getData+0x698>)
 8001a4c:	7ddb      	ldrb	r3, [r3, #23]
 8001a4e:	2b07      	cmp	r3, #7
 8001a50:	d90a      	bls.n	8001a68 <SBUS_getData+0x614>
		SBUS_UART_Rx[23]-=8;
 8001a52:	4b26      	ldr	r3, [pc, #152]	@ (8001aec <SBUS_getData+0x698>)
 8001a54:	7ddb      	ldrb	r3, [r3, #23]
 8001a56:	3b08      	subs	r3, #8
 8001a58:	b2da      	uxtb	r2, r3
 8001a5a:	4b24      	ldr	r3, [pc, #144]	@ (8001aec <SBUS_getData+0x698>)
 8001a5c:	75da      	strb	r2, [r3, #23]
		Radio_input.fail_safe = FailSafe;
 8001a5e:	4b22      	ldr	r3, [pc, #136]	@ (8001ae8 <SBUS_getData+0x694>)
 8001a60:	2235      	movs	r2, #53	@ 0x35
 8001a62:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
 8001a66:	e003      	b.n	8001a70 <SBUS_getData+0x61c>
	}else Radio_input.fail_safe= Ok;
 8001a68:	4b1f      	ldr	r3, [pc, #124]	@ (8001ae8 <SBUS_getData+0x694>)
 8001a6a:	22aa      	movs	r2, #170	@ 0xaa
 8001a6c:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

	if(SBUS_UART_Rx[23]>=4){
 8001a70:	4b1e      	ldr	r3, [pc, #120]	@ (8001aec <SBUS_getData+0x698>)
 8001a72:	7ddb      	ldrb	r3, [r3, #23]
 8001a74:	2b03      	cmp	r3, #3
 8001a76:	d90a      	bls.n	8001a8e <SBUS_getData+0x63a>
		SBUS_UART_Rx[23]-=4;
 8001a78:	4b1c      	ldr	r3, [pc, #112]	@ (8001aec <SBUS_getData+0x698>)
 8001a7a:	7ddb      	ldrb	r3, [r3, #23]
 8001a7c:	3b04      	subs	r3, #4
 8001a7e:	b2da      	uxtb	r2, r3
 8001a80:	4b1a      	ldr	r3, [pc, #104]	@ (8001aec <SBUS_getData+0x698>)
 8001a82:	75da      	strb	r2, [r3, #23]
		Radio_input.pkg_lost = Pkg_Lost;
 8001a84:	4b18      	ldr	r3, [pc, #96]	@ (8001ae8 <SBUS_getData+0x694>)
 8001a86:	2210      	movs	r2, #16
 8001a88:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8001a8c:	e003      	b.n	8001a96 <SBUS_getData+0x642>
	}else Radio_input.pkg_lost=Ok;
 8001a8e:	4b16      	ldr	r3, [pc, #88]	@ (8001ae8 <SBUS_getData+0x694>)
 8001a90:	22aa      	movs	r2, #170	@ 0xaa
 8001a92:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

	if(SBUS_UART_Rx[23]>=2){
 8001a96:	4b15      	ldr	r3, [pc, #84]	@ (8001aec <SBUS_getData+0x698>)
 8001a98:	7ddb      	ldrb	r3, [r3, #23]
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d90a      	bls.n	8001ab4 <SBUS_getData+0x660>
		SBUS_UART_Rx[23]-=2;
 8001a9e:	4b13      	ldr	r3, [pc, #76]	@ (8001aec <SBUS_getData+0x698>)
 8001aa0:	7ddb      	ldrb	r3, [r3, #23]
 8001aa2:	3b02      	subs	r3, #2
 8001aa4:	b2da      	uxtb	r2, r3
 8001aa6:	4b11      	ldr	r3, [pc, #68]	@ (8001aec <SBUS_getData+0x698>)
 8001aa8:	75da      	strb	r2, [r3, #23]
		Radio_input.Interruptor_2=ON;
 8001aaa:	4b0f      	ldr	r3, [pc, #60]	@ (8001ae8 <SBUS_getData+0x694>)
 8001aac:	22ff      	movs	r2, #255	@ 0xff
 8001aae:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 8001ab2:	e003      	b.n	8001abc <SBUS_getData+0x668>
	}else Radio_input.Interruptor_2=OFF;
 8001ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae8 <SBUS_getData+0x694>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	if(SBUS_UART_Rx[23]){
 8001abc:	4b0b      	ldr	r3, [pc, #44]	@ (8001aec <SBUS_getData+0x698>)
 8001abe:	7ddb      	ldrb	r3, [r3, #23]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d004      	beq.n	8001ace <SBUS_getData+0x67a>
		Radio_input.Interruptor_1=ON;
 8001ac4:	4b08      	ldr	r3, [pc, #32]	@ (8001ae8 <SBUS_getData+0x694>)
 8001ac6:	22ff      	movs	r2, #255	@ 0xff
 8001ac8:	f883 2020 	strb.w	r2, [r3, #32]
 8001acc:	e003      	b.n	8001ad6 <SBUS_getData+0x682>
	}else Radio_input.Interruptor_1=OFF;
 8001ace:	4b06      	ldr	r3, [pc, #24]	@ (8001ae8 <SBUS_getData+0x694>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f883 2020 	strb.w	r2, [r3, #32]


	Radio_input.Uart_Counter = 0;
 8001ad6:	4b04      	ldr	r3, [pc, #16]	@ (8001ae8 <SBUS_getData+0x694>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	Temp_BypassFunct();
 8001ade:	f7ff fc87 	bl	80013f0 <Temp_BypassFunct>

}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	24000064 	.word	0x24000064
 8001aec:	24000164 	.word	0x24000164

08001af0 <SBUS_IntegrityVerification>:

void SBUS_IntegrityVerification(void){
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0

	if(Radio_input.Uart_Counter != 255){
 8001af4:	4b0f      	ldr	r3, [pc, #60]	@ (8001b34 <SBUS_IntegrityVerification+0x44>)
 8001af6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001afa:	2bff      	cmp	r3, #255	@ 0xff
 8001afc:	d00c      	beq.n	8001b18 <SBUS_IntegrityVerification+0x28>
		Radio_input.Uart_Counter++;
 8001afe:	4b0d      	ldr	r3, [pc, #52]	@ (8001b34 <SBUS_IntegrityVerification+0x44>)
 8001b00:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001b04:	3301      	adds	r3, #1
 8001b06:	b2da      	uxtb	r2, r3
 8001b08:	4b0a      	ldr	r3, [pc, #40]	@ (8001b34 <SBUS_IntegrityVerification+0x44>)
 8001b0a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
		Radio_input.uart_error = Ok;
 8001b0e:	4b09      	ldr	r3, [pc, #36]	@ (8001b34 <SBUS_IntegrityVerification+0x44>)
 8001b10:	22aa      	movs	r2, #170	@ 0xaa
 8001b12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	}
	else{
		Radio_input.uart_error = Uart_Error;
		Radio_input.fail_safe = FailSafe;
	}
}
 8001b16:	e007      	b.n	8001b28 <SBUS_IntegrityVerification+0x38>
		Radio_input.uart_error = Uart_Error;
 8001b18:	4b06      	ldr	r3, [pc, #24]	@ (8001b34 <SBUS_IntegrityVerification+0x44>)
 8001b1a:	2220      	movs	r2, #32
 8001b1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		Radio_input.fail_safe = FailSafe;
 8001b20:	4b04      	ldr	r3, [pc, #16]	@ (8001b34 <SBUS_IntegrityVerification+0x44>)
 8001b22:	2235      	movs	r2, #53	@ 0x35
 8001b24:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
}
 8001b28:	bf00      	nop
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	24000064 	.word	0x24000064

08001b38 <SD_init>:
UINT br, bw;  // File read/write count

char pahtName[7] = "Data000";
char fileName[] = "FD000.csv";

void SD_init(void){
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
	  fresult = f_mount(&fs, "/", 1);
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	4910      	ldr	r1, [pc, #64]	@ (8001b80 <SD_init+0x48>)
 8001b40:	4810      	ldr	r0, [pc, #64]	@ (8001b84 <SD_init+0x4c>)
 8001b42:	f00f fb9f 	bl	8011284 <f_mount>
 8001b46:	4603      	mov	r3, r0
 8001b48:	461a      	mov	r2, r3
 8001b4a:	4b0f      	ldr	r3, [pc, #60]	@ (8001b88 <SD_init+0x50>)
 8001b4c:	701a      	strb	r2, [r3, #0]
	  //Get_NewDir();
	  f_open(&fil, fileName, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001b4e:	2213      	movs	r2, #19
 8001b50:	490e      	ldr	r1, [pc, #56]	@ (8001b8c <SD_init+0x54>)
 8001b52:	480f      	ldr	r0, [pc, #60]	@ (8001b90 <SD_init+0x58>)
 8001b54:	f00f fbdc 	bl	8011310 <f_open>
	  fresult = f_lseek(&fil , f_size(&fil));
 8001b58:	4b0d      	ldr	r3, [pc, #52]	@ (8001b90 <SD_init+0x58>)
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	480c      	ldr	r0, [pc, #48]	@ (8001b90 <SD_init+0x58>)
 8001b60:	f00f ffda 	bl	8011b18 <f_lseek>
 8001b64:	4603      	mov	r3, r0
 8001b66:	461a      	mov	r2, r3
 8001b68:	4b07      	ldr	r3, [pc, #28]	@ (8001b88 <SD_init+0x50>)
 8001b6a:	701a      	strb	r2, [r3, #0]
	  f_printf(&fil,"Nmsg,AccX,AccY,AccZ,GyroX,GyroY,GyroZ,Pitch,Roll,Yaw,Alt,Pressure,Temp\n");
 8001b6c:	4909      	ldr	r1, [pc, #36]	@ (8001b94 <SD_init+0x5c>)
 8001b6e:	4808      	ldr	r0, [pc, #32]	@ (8001b90 <SD_init+0x58>)
 8001b70:	f010 fa6e 	bl	8012050 <f_printf>
	  f_close(&fil);
 8001b74:	4806      	ldr	r0, [pc, #24]	@ (8001b90 <SD_init+0x58>)
 8001b76:	f00f ffa5 	bl	8011ac4 <f_close>

	  }
	  else{
		  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, SET);
	  }
}
 8001b7a:	bf00      	nop
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	080129c0 	.word	0x080129c0
 8001b84:	24000180 	.word	0x24000180
 8001b88:	240021ec 	.word	0x240021ec
 8001b8c:	2400008c 	.word	0x2400008c
 8001b90:	240011bc 	.word	0x240011bc
 8001b94:	080129c4 	.word	0x080129c4

08001b98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8001bd4 <MX_DMA_Init+0x3c>)
 8001ba0:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8001ba4:	4a0b      	ldr	r2, [pc, #44]	@ (8001bd4 <MX_DMA_Init+0x3c>)
 8001ba6:	f043 0301 	orr.w	r3, r3, #1
 8001baa:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8001bae:	4b09      	ldr	r3, [pc, #36]	@ (8001bd4 <MX_DMA_Init+0x3c>)
 8001bb0:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8001bb4:	f003 0301 	and.w	r3, r3, #1
 8001bb8:	607b      	str	r3, [r7, #4]
 8001bba:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	200b      	movs	r0, #11
 8001bc2:	f001 fd66 	bl	8003692 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001bc6:	200b      	movs	r0, #11
 8001bc8:	f001 fd7d 	bl	80036c6 <HAL_NVIC_EnableIRQ>

}
 8001bcc:	bf00      	nop
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	58024400 	.word	0x58024400

08001bd8 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001bdc:	4b2e      	ldr	r3, [pc, #184]	@ (8001c98 <MX_FDCAN1_Init+0xc0>)
 8001bde:	4a2f      	ldr	r2, [pc, #188]	@ (8001c9c <MX_FDCAN1_Init+0xc4>)
 8001be0:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001be2:	4b2d      	ldr	r3, [pc, #180]	@ (8001c98 <MX_FDCAN1_Init+0xc0>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001be8:	4b2b      	ldr	r3, [pc, #172]	@ (8001c98 <MX_FDCAN1_Init+0xc0>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001bee:	4b2a      	ldr	r3, [pc, #168]	@ (8001c98 <MX_FDCAN1_Init+0xc0>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001bf4:	4b28      	ldr	r3, [pc, #160]	@ (8001c98 <MX_FDCAN1_Init+0xc0>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001bfa:	4b27      	ldr	r3, [pc, #156]	@ (8001c98 <MX_FDCAN1_Init+0xc0>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8001c00:	4b25      	ldr	r3, [pc, #148]	@ (8001c98 <MX_FDCAN1_Init+0xc0>)
 8001c02:	2210      	movs	r2, #16
 8001c04:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001c06:	4b24      	ldr	r3, [pc, #144]	@ (8001c98 <MX_FDCAN1_Init+0xc0>)
 8001c08:	2201      	movs	r2, #1
 8001c0a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8001c0c:	4b22      	ldr	r3, [pc, #136]	@ (8001c98 <MX_FDCAN1_Init+0xc0>)
 8001c0e:	2202      	movs	r2, #2
 8001c10:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001c12:	4b21      	ldr	r3, [pc, #132]	@ (8001c98 <MX_FDCAN1_Init+0xc0>)
 8001c14:	2202      	movs	r2, #2
 8001c16:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001c18:	4b1f      	ldr	r3, [pc, #124]	@ (8001c98 <MX_FDCAN1_Init+0xc0>)
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001c1e:	4b1e      	ldr	r3, [pc, #120]	@ (8001c98 <MX_FDCAN1_Init+0xc0>)
 8001c20:	2201      	movs	r2, #1
 8001c22:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001c24:	4b1c      	ldr	r3, [pc, #112]	@ (8001c98 <MX_FDCAN1_Init+0xc0>)
 8001c26:	2201      	movs	r2, #1
 8001c28:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001c2a:	4b1b      	ldr	r3, [pc, #108]	@ (8001c98 <MX_FDCAN1_Init+0xc0>)
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8001c30:	4b19      	ldr	r3, [pc, #100]	@ (8001c98 <MX_FDCAN1_Init+0xc0>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8001c36:	4b18      	ldr	r3, [pc, #96]	@ (8001c98 <MX_FDCAN1_Init+0xc0>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001c3c:	4b16      	ldr	r3, [pc, #88]	@ (8001c98 <MX_FDCAN1_Init+0xc0>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8001c42:	4b15      	ldr	r3, [pc, #84]	@ (8001c98 <MX_FDCAN1_Init+0xc0>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001c48:	4b13      	ldr	r3, [pc, #76]	@ (8001c98 <MX_FDCAN1_Init+0xc0>)
 8001c4a:	2204      	movs	r2, #4
 8001c4c:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8001c4e:	4b12      	ldr	r3, [pc, #72]	@ (8001c98 <MX_FDCAN1_Init+0xc0>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001c54:	4b10      	ldr	r3, [pc, #64]	@ (8001c98 <MX_FDCAN1_Init+0xc0>)
 8001c56:	2204      	movs	r2, #4
 8001c58:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8001c5a:	4b0f      	ldr	r3, [pc, #60]	@ (8001c98 <MX_FDCAN1_Init+0xc0>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001c60:	4b0d      	ldr	r3, [pc, #52]	@ (8001c98 <MX_FDCAN1_Init+0xc0>)
 8001c62:	2204      	movs	r2, #4
 8001c64:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8001c66:	4b0c      	ldr	r3, [pc, #48]	@ (8001c98 <MX_FDCAN1_Init+0xc0>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8001c6c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c98 <MX_FDCAN1_Init+0xc0>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8001c72:	4b09      	ldr	r3, [pc, #36]	@ (8001c98 <MX_FDCAN1_Init+0xc0>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001c78:	4b07      	ldr	r3, [pc, #28]	@ (8001c98 <MX_FDCAN1_Init+0xc0>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001c7e:	4b06      	ldr	r3, [pc, #24]	@ (8001c98 <MX_FDCAN1_Init+0xc0>)
 8001c80:	2204      	movs	r2, #4
 8001c82:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001c84:	4804      	ldr	r0, [pc, #16]	@ (8001c98 <MX_FDCAN1_Init+0xc0>)
 8001c86:	f004 fc8f 	bl	80065a8 <HAL_FDCAN_Init>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8001c90:	f000 fb16 	bl	80022c0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001c94:	bf00      	nop
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	240021f0 	.word	0x240021f0
 8001c9c:	4000a000 	.word	0x4000a000

08001ca0 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b0ba      	sub	sp, #232	@ 0xe8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	605a      	str	r2, [r3, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
 8001cb4:	60da      	str	r2, [r3, #12]
 8001cb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cb8:	f107 0310 	add.w	r3, r7, #16
 8001cbc:	22c0      	movs	r2, #192	@ 0xc0
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f010 fd05 	bl	80126d0 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a2f      	ldr	r2, [pc, #188]	@ (8001d88 <HAL_FDCAN_MspInit+0xe8>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d157      	bne.n	8001d80 <HAL_FDCAN_MspInit+0xe0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001cd0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001cd4:	f04f 0300 	mov.w	r3, #0
 8001cd8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001cdc:	2304      	movs	r3, #4
 8001cde:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 8;
 8001ce0:	2308      	movs	r3, #8
 8001ce2:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 1;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001cec:	2302      	movs	r3, #2
 8001cee:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001cf0:	23c0      	movs	r3, #192	@ 0xc0
 8001cf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 8001cfc:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001d00:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d04:	f107 0310 	add.w	r3, r7, #16
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f006 faa7 	bl	800825c <HAL_RCCEx_PeriphCLKConfig>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <HAL_FDCAN_MspInit+0x78>
    {
      Error_Handler();
 8001d14:	f000 fad4 	bl	80022c0 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001d18:	4b1c      	ldr	r3, [pc, #112]	@ (8001d8c <HAL_FDCAN_MspInit+0xec>)
 8001d1a:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8001d1e:	4a1b      	ldr	r2, [pc, #108]	@ (8001d8c <HAL_FDCAN_MspInit+0xec>)
 8001d20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d24:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
 8001d28:	4b18      	ldr	r3, [pc, #96]	@ (8001d8c <HAL_FDCAN_MspInit+0xec>)
 8001d2a:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8001d2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d36:	4b15      	ldr	r3, [pc, #84]	@ (8001d8c <HAL_FDCAN_MspInit+0xec>)
 8001d38:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001d3c:	4a13      	ldr	r2, [pc, #76]	@ (8001d8c <HAL_FDCAN_MspInit+0xec>)
 8001d3e:	f043 0301 	orr.w	r3, r3, #1
 8001d42:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001d46:	4b11      	ldr	r3, [pc, #68]	@ (8001d8c <HAL_FDCAN_MspInit+0xec>)
 8001d48:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001d4c:	f003 0301 	and.w	r3, r3, #1
 8001d50:	60bb      	str	r3, [r7, #8]
 8001d52:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001d54:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001d58:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d62:	2300      	movs	r3, #0
 8001d64:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001d6e:	2309      	movs	r3, #9
 8001d70:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d74:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4805      	ldr	r0, [pc, #20]	@ (8001d90 <HAL_FDCAN_MspInit+0xf0>)
 8001d7c:	f004 ff78 	bl	8006c70 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8001d80:	bf00      	nop
 8001d82:	37e8      	adds	r7, #232	@ 0xe8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	4000a000 	.word	0x4000a000
 8001d8c:	58024400 	.word	0x58024400
 8001d90:	58020000 	.word	0x58020000

08001d94 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b08a      	sub	sp, #40	@ 0x28
 8001d98:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d9a:	f107 0314 	add.w	r3, r7, #20
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]
 8001da2:	605a      	str	r2, [r3, #4]
 8001da4:	609a      	str	r2, [r3, #8]
 8001da6:	60da      	str	r2, [r3, #12]
 8001da8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001daa:	4b4e      	ldr	r3, [pc, #312]	@ (8001ee4 <MX_GPIO_Init+0x150>)
 8001dac:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001db0:	4a4c      	ldr	r2, [pc, #304]	@ (8001ee4 <MX_GPIO_Init+0x150>)
 8001db2:	f043 0304 	orr.w	r3, r3, #4
 8001db6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001dba:	4b4a      	ldr	r3, [pc, #296]	@ (8001ee4 <MX_GPIO_Init+0x150>)
 8001dbc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001dc0:	f003 0304 	and.w	r3, r3, #4
 8001dc4:	613b      	str	r3, [r7, #16]
 8001dc6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc8:	4b46      	ldr	r3, [pc, #280]	@ (8001ee4 <MX_GPIO_Init+0x150>)
 8001dca:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001dce:	4a45      	ldr	r2, [pc, #276]	@ (8001ee4 <MX_GPIO_Init+0x150>)
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001dd8:	4b42      	ldr	r3, [pc, #264]	@ (8001ee4 <MX_GPIO_Init+0x150>)
 8001dda:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	60fb      	str	r3, [r7, #12]
 8001de4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de6:	4b3f      	ldr	r3, [pc, #252]	@ (8001ee4 <MX_GPIO_Init+0x150>)
 8001de8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001dec:	4a3d      	ldr	r2, [pc, #244]	@ (8001ee4 <MX_GPIO_Init+0x150>)
 8001dee:	f043 0302 	orr.w	r3, r3, #2
 8001df2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001df6:	4b3b      	ldr	r3, [pc, #236]	@ (8001ee4 <MX_GPIO_Init+0x150>)
 8001df8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	60bb      	str	r3, [r7, #8]
 8001e02:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e04:	4b37      	ldr	r3, [pc, #220]	@ (8001ee4 <MX_GPIO_Init+0x150>)
 8001e06:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001e0a:	4a36      	ldr	r2, [pc, #216]	@ (8001ee4 <MX_GPIO_Init+0x150>)
 8001e0c:	f043 0308 	orr.w	r3, r3, #8
 8001e10:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001e14:	4b33      	ldr	r3, [pc, #204]	@ (8001ee4 <MX_GPIO_Init+0x150>)
 8001e16:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001e1a:	f003 0308 	and.w	r3, r3, #8
 8001e1e:	607b      	str	r3, [r7, #4]
 8001e20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 8001e22:	2200      	movs	r2, #0
 8001e24:	f242 010f 	movw	r1, #8207	@ 0x200f
 8001e28:	482f      	ldr	r0, [pc, #188]	@ (8001ee8 <MX_GPIO_Init+0x154>)
 8001e2a:	f005 f8d1 	bl	8006fd0 <HAL_GPIO_WritePin>
                          |LED_5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_NSS_GPIO_Port, SD_NSS_Pin, GPIO_PIN_RESET);
 8001e2e:	2200      	movs	r2, #0
 8001e30:	2110      	movs	r1, #16
 8001e32:	482e      	ldr	r0, [pc, #184]	@ (8001eec <MX_GPIO_Init+0x158>)
 8001e34:	f005 f8cc 	bl	8006fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IMU_BOOT_Pin|BME_NSS_Pin, GPIO_PIN_RESET);
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 8001e3e:	482c      	ldr	r0, [pc, #176]	@ (8001ef0 <MX_GPIO_Init+0x15c>)
 8001e40:	f005 f8c6 	bl	8006fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_RST_GPIO_Port, IMU_RST_Pin, GPIO_PIN_RESET);
 8001e44:	2200      	movs	r2, #0
 8001e46:	2104      	movs	r1, #4
 8001e48:	482a      	ldr	r0, [pc, #168]	@ (8001ef4 <MX_GPIO_Init+0x160>)
 8001e4a:	f005 f8c1 	bl	8006fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 8001e4e:	f242 030f 	movw	r3, #8207	@ 0x200f
 8001e52:	617b      	str	r3, [r7, #20]
                          |LED_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e54:	2301      	movs	r3, #1
 8001e56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e60:	f107 0314 	add.w	r3, r7, #20
 8001e64:	4619      	mov	r1, r3
 8001e66:	4820      	ldr	r0, [pc, #128]	@ (8001ee8 <MX_GPIO_Init+0x154>)
 8001e68:	f004 ff02 	bl	8006c70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_NSS_Pin;
 8001e6c:	2310      	movs	r3, #16
 8001e6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e70:	2301      	movs	r3, #1
 8001e72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e74:	2300      	movs	r3, #0
 8001e76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_NSS_GPIO_Port, &GPIO_InitStruct);
 8001e7c:	f107 0314 	add.w	r3, r7, #20
 8001e80:	4619      	mov	r1, r3
 8001e82:	481a      	ldr	r0, [pc, #104]	@ (8001eec <MX_GPIO_Init+0x158>)
 8001e84:	f004 fef4 	bl	8006c70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = IMU_BOOT_Pin|BME_NSS_Pin;
 8001e88:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001e8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e92:	2300      	movs	r3, #0
 8001e94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e96:	2300      	movs	r3, #0
 8001e98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e9a:	f107 0314 	add.w	r3, r7, #20
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	4813      	ldr	r0, [pc, #76]	@ (8001ef0 <MX_GPIO_Init+0x15c>)
 8001ea2:	f004 fee5 	bl	8006c70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 8001ea6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001eaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eac:	2300      	movs	r3, #0
 8001eae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8001eb4:	f107 0314 	add.w	r3, r7, #20
 8001eb8:	4619      	mov	r1, r3
 8001eba:	480b      	ldr	r0, [pc, #44]	@ (8001ee8 <MX_GPIO_Init+0x154>)
 8001ebc:	f004 fed8 	bl	8006c70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_RST_Pin;
 8001ec0:	2304      	movs	r3, #4
 8001ec2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IMU_RST_GPIO_Port, &GPIO_InitStruct);
 8001ed0:	f107 0314 	add.w	r3, r7, #20
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	4807      	ldr	r0, [pc, #28]	@ (8001ef4 <MX_GPIO_Init+0x160>)
 8001ed8:	f004 feca 	bl	8006c70 <HAL_GPIO_Init>

}
 8001edc:	bf00      	nop
 8001ede:	3728      	adds	r7, #40	@ 0x28
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	58024400 	.word	0x58024400
 8001ee8:	58020800 	.word	0x58020800
 8001eec:	58020000 	.word	0x58020000
 8001ef0:	58020400 	.word	0x58020400
 8001ef4:	58020c00 	.word	0x58020c00

08001ef8 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001efc:	4b1b      	ldr	r3, [pc, #108]	@ (8001f6c <MX_I2C3_Init+0x74>)
 8001efe:	4a1c      	ldr	r2, [pc, #112]	@ (8001f70 <MX_I2C3_Init+0x78>)
 8001f00:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20B0CCFF;
 8001f02:	4b1a      	ldr	r3, [pc, #104]	@ (8001f6c <MX_I2C3_Init+0x74>)
 8001f04:	4a1b      	ldr	r2, [pc, #108]	@ (8001f74 <MX_I2C3_Init+0x7c>)
 8001f06:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001f08:	4b18      	ldr	r3, [pc, #96]	@ (8001f6c <MX_I2C3_Init+0x74>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f0e:	4b17      	ldr	r3, [pc, #92]	@ (8001f6c <MX_I2C3_Init+0x74>)
 8001f10:	2201      	movs	r2, #1
 8001f12:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f14:	4b15      	ldr	r3, [pc, #84]	@ (8001f6c <MX_I2C3_Init+0x74>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001f1a:	4b14      	ldr	r3, [pc, #80]	@ (8001f6c <MX_I2C3_Init+0x74>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001f20:	4b12      	ldr	r3, [pc, #72]	@ (8001f6c <MX_I2C3_Init+0x74>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f26:	4b11      	ldr	r3, [pc, #68]	@ (8001f6c <MX_I2C3_Init+0x74>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f2c:	4b0f      	ldr	r3, [pc, #60]	@ (8001f6c <MX_I2C3_Init+0x74>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001f32:	480e      	ldr	r0, [pc, #56]	@ (8001f6c <MX_I2C3_Init+0x74>)
 8001f34:	f005 f866 	bl	8007004 <HAL_I2C_Init>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001f3e:	f000 f9bf 	bl	80022c0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001f42:	2100      	movs	r1, #0
 8001f44:	4809      	ldr	r0, [pc, #36]	@ (8001f6c <MX_I2C3_Init+0x74>)
 8001f46:	f005 f8f9 	bl	800713c <HAL_I2CEx_ConfigAnalogFilter>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001f50:	f000 f9b6 	bl	80022c0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001f54:	2100      	movs	r1, #0
 8001f56:	4805      	ldr	r0, [pc, #20]	@ (8001f6c <MX_I2C3_Init+0x74>)
 8001f58:	f005 f93b 	bl	80071d2 <HAL_I2CEx_ConfigDigitalFilter>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001f62:	f000 f9ad 	bl	80022c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001f66:	bf00      	nop
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	24002290 	.word	0x24002290
 8001f70:	40005c00 	.word	0x40005c00
 8001f74:	20b0ccff 	.word	0x20b0ccff

08001f78 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b0bc      	sub	sp, #240	@ 0xf0
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f80:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	605a      	str	r2, [r3, #4]
 8001f8a:	609a      	str	r2, [r3, #8]
 8001f8c:	60da      	str	r2, [r3, #12]
 8001f8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f90:	f107 0318 	add.w	r3, r7, #24
 8001f94:	22c0      	movs	r2, #192	@ 0xc0
 8001f96:	2100      	movs	r1, #0
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f010 fb99 	bl	80126d0 <memset>
  if(i2cHandle->Instance==I2C3)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a39      	ldr	r2, [pc, #228]	@ (8002088 <HAL_I2C_MspInit+0x110>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d16b      	bne.n	8002080 <HAL_I2C_MspInit+0x108>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001fa8:	f04f 0208 	mov.w	r2, #8
 8001fac:	f04f 0300 	mov.w	r3, #0
 8001fb0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fba:	f107 0318 	add.w	r3, r7, #24
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f006 f94c 	bl	800825c <HAL_RCCEx_PeriphCLKConfig>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001fca:	f000 f979 	bl	80022c0 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fce:	4b2f      	ldr	r3, [pc, #188]	@ (800208c <HAL_I2C_MspInit+0x114>)
 8001fd0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001fd4:	4a2d      	ldr	r2, [pc, #180]	@ (800208c <HAL_I2C_MspInit+0x114>)
 8001fd6:	f043 0304 	orr.w	r3, r3, #4
 8001fda:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001fde:	4b2b      	ldr	r3, [pc, #172]	@ (800208c <HAL_I2C_MspInit+0x114>)
 8001fe0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001fe4:	f003 0304 	and.w	r3, r3, #4
 8001fe8:	617b      	str	r3, [r7, #20]
 8001fea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fec:	4b27      	ldr	r3, [pc, #156]	@ (800208c <HAL_I2C_MspInit+0x114>)
 8001fee:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001ff2:	4a26      	ldr	r2, [pc, #152]	@ (800208c <HAL_I2C_MspInit+0x114>)
 8001ff4:	f043 0301 	orr.w	r3, r3, #1
 8001ff8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001ffc:	4b23      	ldr	r3, [pc, #140]	@ (800208c <HAL_I2C_MspInit+0x114>)
 8001ffe:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	613b      	str	r3, [r7, #16]
 8002008:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800200a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800200e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002012:	2312      	movs	r3, #18
 8002014:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002018:	2300      	movs	r3, #0
 800201a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800201e:	2300      	movs	r3, #0
 8002020:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002024:	2304      	movs	r3, #4
 8002026:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800202a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800202e:	4619      	mov	r1, r3
 8002030:	4817      	ldr	r0, [pc, #92]	@ (8002090 <HAL_I2C_MspInit+0x118>)
 8002032:	f004 fe1d 	bl	8006c70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002036:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800203a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800203e:	2312      	movs	r3, #18
 8002040:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002044:	2300      	movs	r3, #0
 8002046:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800204a:	2300      	movs	r3, #0
 800204c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002050:	2304      	movs	r3, #4
 8002052:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002056:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800205a:	4619      	mov	r1, r3
 800205c:	480d      	ldr	r0, [pc, #52]	@ (8002094 <HAL_I2C_MspInit+0x11c>)
 800205e:	f004 fe07 	bl	8006c70 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002062:	4b0a      	ldr	r3, [pc, #40]	@ (800208c <HAL_I2C_MspInit+0x114>)
 8002064:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002068:	4a08      	ldr	r2, [pc, #32]	@ (800208c <HAL_I2C_MspInit+0x114>)
 800206a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800206e:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8002072:	4b06      	ldr	r3, [pc, #24]	@ (800208c <HAL_I2C_MspInit+0x114>)
 8002074:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002078:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800207c:	60fb      	str	r3, [r7, #12]
 800207e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8002080:	bf00      	nop
 8002082:	37f0      	adds	r7, #240	@ 0xf0
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	40005c00 	.word	0x40005c00
 800208c:	58024400 	.word	0x58024400
 8002090:	58020800 	.word	0x58020800
 8002094:	58020000 	.word	0x58020000

08002098 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800209c:	f000 f8e4 	bl	8002268 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020a0:	f001 f966 	bl	8003370 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020a4:	f000 f82e 	bl	8002104 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020a8:	f7ff fe74 	bl	8001d94 <MX_GPIO_Init>
  MX_DMA_Init();
 80020ac:	f7ff fd74 	bl	8001b98 <MX_DMA_Init>
  MX_FDCAN1_Init();
 80020b0:	f7ff fd92 	bl	8001bd8 <MX_FDCAN1_Init>
  MX_I2C3_Init();
 80020b4:	f7ff ff20 	bl	8001ef8 <MX_I2C3_Init>
  MX_SPI1_Init();
 80020b8:	f000 f908 	bl	80022cc <MX_SPI1_Init>
  MX_SPI2_Init();
 80020bc:	f000 f95c 	bl	8002378 <MX_SPI2_Init>
  MX_TIM2_Init();
 80020c0:	f000 fb6a 	bl	8002798 <MX_TIM2_Init>
  MX_TIM3_Init();
 80020c4:	f000 fbe4 	bl	8002890 <MX_TIM3_Init>
  MX_TIM4_Init();
 80020c8:	f000 fc48 	bl	800295c <MX_TIM4_Init>
  MX_UART4_Init();
 80020cc:	f000 fe58 	bl	8002d80 <MX_UART4_Init>
  MX_USART1_UART_Init();
 80020d0:	f000 fea2 	bl	8002e18 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80020d4:	f000 ff3c 	bl	8002f50 <MX_USART6_UART_Init>
  MX_TIM13_Init();
 80020d8:	f000 fcf6 	bl	8002ac8 <MX_TIM13_Init>
  MX_FATFS_Init();
 80020dc:	f00c f956 	bl	800e38c <MX_FATFS_Init>
  MX_TIM6_Init();
 80020e0:	f000 fcb8 	bl	8002a54 <MX_TIM6_Init>
  MX_USART3_UART_Init();
 80020e4:	f000 fee8 	bl	8002eb8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  BMP280_init();
 80020e8:	f7fe ff92 	bl	8001010 <BMP280_init>
  SD_init();
 80020ec:	f7ff fd24 	bl	8001b38 <SD_init>
  SBUS_init();
 80020f0:	f7ff f924 	bl	800133c <SBUS_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  BMP280_calculate();
 80020f4:	f7fe ffb2 	bl	800105c <BMP280_calculate>

	  HAL_Delay(50);
 80020f8:	2032      	movs	r0, #50	@ 0x32
 80020fa:	f001 f9cb 	bl	8003494 <HAL_Delay>
	  BMP280_calculate();
 80020fe:	bf00      	nop
 8002100:	e7f8      	b.n	80020f4 <main+0x5c>
	...

08002104 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b09c      	sub	sp, #112	@ 0x70
 8002108:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800210a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800210e:	224c      	movs	r2, #76	@ 0x4c
 8002110:	2100      	movs	r1, #0
 8002112:	4618      	mov	r0, r3
 8002114:	f010 fadc 	bl	80126d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002118:	1d3b      	adds	r3, r7, #4
 800211a:	2220      	movs	r2, #32
 800211c:	2100      	movs	r1, #0
 800211e:	4618      	mov	r0, r3
 8002120:	f010 fad6 	bl	80126d0 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8002124:	4b30      	ldr	r3, [pc, #192]	@ (80021e8 <SystemClock_Config+0xe4>)
 8002126:	f04f 32ff 	mov.w	r2, #4294967295
 800212a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800212e:	2002      	movs	r0, #2
 8002130:	f005 f89c 	bl	800726c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002134:	2300      	movs	r3, #0
 8002136:	603b      	str	r3, [r7, #0]
 8002138:	4b2c      	ldr	r3, [pc, #176]	@ (80021ec <SystemClock_Config+0xe8>)
 800213a:	699b      	ldr	r3, [r3, #24]
 800213c:	4a2b      	ldr	r2, [pc, #172]	@ (80021ec <SystemClock_Config+0xe8>)
 800213e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002142:	6193      	str	r3, [r2, #24]
 8002144:	4b29      	ldr	r3, [pc, #164]	@ (80021ec <SystemClock_Config+0xe8>)
 8002146:	699b      	ldr	r3, [r3, #24]
 8002148:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800214c:	603b      	str	r3, [r7, #0]
 800214e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002150:	bf00      	nop
 8002152:	4b26      	ldr	r3, [pc, #152]	@ (80021ec <SystemClock_Config+0xe8>)
 8002154:	699b      	ldr	r3, [r3, #24]
 8002156:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800215a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800215e:	d1f8      	bne.n	8002152 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002160:	2302      	movs	r3, #2
 8002162:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8002164:	2301      	movs	r3, #1
 8002166:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8002168:	2340      	movs	r3, #64	@ 0x40
 800216a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800216c:	2302      	movs	r3, #2
 800216e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002170:	2300      	movs	r3, #0
 8002172:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002174:	2304      	movs	r3, #4
 8002176:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 8002178:	2323      	movs	r3, #35	@ 0x23
 800217a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800217c:	2302      	movs	r3, #2
 800217e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002180:	2302      	movs	r3, #2
 8002182:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002184:	2302      	movs	r3, #2
 8002186:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002188:	230c      	movs	r3, #12
 800218a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800218c:	2300      	movs	r3, #0
 800218e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002190:	2300      	movs	r3, #0
 8002192:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002194:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002198:	4618      	mov	r0, r3
 800219a:	f005 f8a1 	bl	80072e0 <HAL_RCC_OscConfig>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80021a4:	f000 f88c 	bl	80022c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021a8:	233f      	movs	r3, #63	@ 0x3f
 80021aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021ac:	2303      	movs	r3, #3
 80021ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80021b0:	2300      	movs	r3, #0
 80021b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80021b4:	2300      	movs	r3, #0
 80021b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80021b8:	2340      	movs	r3, #64	@ 0x40
 80021ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80021bc:	2340      	movs	r3, #64	@ 0x40
 80021be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80021c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021c4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80021c6:	2340      	movs	r3, #64	@ 0x40
 80021c8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80021ca:	1d3b      	adds	r3, r7, #4
 80021cc:	2106      	movs	r1, #6
 80021ce:	4618      	mov	r0, r3
 80021d0:	f005 fcb8 	bl	8007b44 <HAL_RCC_ClockConfig>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <SystemClock_Config+0xda>
  {
    Error_Handler();
 80021da:	f000 f871 	bl	80022c0 <Error_Handler>
  }
}
 80021de:	bf00      	nop
 80021e0:	3770      	adds	r7, #112	@ 0x70
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	58024400 	.word	0x58024400
 80021ec:	58024800 	.word	0x58024800

080021f0 <HAL_UART_RxCpltCallback>:

uint64_t TimeOn_Counter = 0x00;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
	if (huart -> Instance == USART1){
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a08      	ldr	r2, [pc, #32]	@ (8002220 <HAL_UART_RxCpltCallback+0x30>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d109      	bne.n	8002216 <HAL_UART_RxCpltCallback+0x26>
		SBUS_Receive(SBUS_RxBuffer);
 8002202:	4b08      	ldr	r3, [pc, #32]	@ (8002224 <HAL_UART_RxCpltCallback+0x34>)
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	4618      	mov	r0, r3
 8002208:	f7ff f8a6 	bl	8001358 <SBUS_Receive>
		HAL_UART_Receive_DMA(&huart1, &SBUS_RxBuffer, 1);
 800220c:	2201      	movs	r2, #1
 800220e:	4905      	ldr	r1, [pc, #20]	@ (8002224 <HAL_UART_RxCpltCallback+0x34>)
 8002210:	4805      	ldr	r0, [pc, #20]	@ (8002228 <HAL_UART_RxCpltCallback+0x38>)
 8002212:	f00a f8c1 	bl	800c398 <HAL_UART_Receive_DMA>
	}


}
 8002216:	bf00      	nop
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40011000 	.word	0x40011000
 8002224:	2400017d 	.word	0x2400017d
 8002228:	24002610 	.word	0x24002610

0800222c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 800222c:	b5b0      	push	{r4, r5, r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
	//Interrupción cada 1 ms
	if (htim -> Instance == TIM6){
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a09      	ldr	r2, [pc, #36]	@ (8002260 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d10c      	bne.n	8002258 <HAL_TIM_PeriodElapsedCallback+0x2c>
		TimeOn_Counter++;
 800223e:	4b09      	ldr	r3, [pc, #36]	@ (8002264 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002244:	1c54      	adds	r4, r2, #1
 8002246:	f143 0500 	adc.w	r5, r3, #0
 800224a:	4b06      	ldr	r3, [pc, #24]	@ (8002264 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800224c:	e9c3 4500 	strd	r4, r5, [r3]
		LED_Tasks();
 8002250:	f7fe ffc2 	bl	80011d8 <LED_Tasks>
		SBUS_IntegrityVerification();
 8002254:	f7ff fc4c 	bl	8001af0 <SBUS_IntegrityVerification>
	}
}
 8002258:	bf00      	nop
 800225a:	3708      	adds	r7, #8
 800225c:	46bd      	mov	sp, r7
 800225e:	bdb0      	pop	{r4, r5, r7, pc}
 8002260:	40001000 	.word	0x40001000
 8002264:	240022e8 	.word	0x240022e8

08002268 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800226e:	463b      	mov	r3, r7
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	605a      	str	r2, [r3, #4]
 8002276:	609a      	str	r2, [r3, #8]
 8002278:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800227a:	f001 fa3f 	bl	80036fc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800227e:	2301      	movs	r3, #1
 8002280:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8002282:	2300      	movs	r3, #0
 8002284:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8002286:	2300      	movs	r3, #0
 8002288:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800228a:	231f      	movs	r3, #31
 800228c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800228e:	2387      	movs	r3, #135	@ 0x87
 8002290:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8002292:	2300      	movs	r3, #0
 8002294:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8002296:	2300      	movs	r3, #0
 8002298:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800229a:	2301      	movs	r3, #1
 800229c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800229e:	2301      	movs	r3, #1
 80022a0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80022a2:	2300      	movs	r3, #0
 80022a4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80022a6:	2300      	movs	r3, #0
 80022a8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80022aa:	463b      	mov	r3, r7
 80022ac:	4618      	mov	r0, r3
 80022ae:	f001 fa5d 	bl	800376c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80022b2:	2004      	movs	r0, #4
 80022b4:	f001 fa3a 	bl	800372c <HAL_MPU_Enable>

}
 80022b8:	bf00      	nop
 80022ba:	3710      	adds	r7, #16
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022c4:	b672      	cpsid	i
}
 80022c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022c8:	bf00      	nop
 80022ca:	e7fd      	b.n	80022c8 <Error_Handler+0x8>

080022cc <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80022d0:	4b27      	ldr	r3, [pc, #156]	@ (8002370 <MX_SPI1_Init+0xa4>)
 80022d2:	4a28      	ldr	r2, [pc, #160]	@ (8002374 <MX_SPI1_Init+0xa8>)
 80022d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80022d6:	4b26      	ldr	r3, [pc, #152]	@ (8002370 <MX_SPI1_Init+0xa4>)
 80022d8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80022dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80022de:	4b24      	ldr	r3, [pc, #144]	@ (8002370 <MX_SPI1_Init+0xa4>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80022e4:	4b22      	ldr	r3, [pc, #136]	@ (8002370 <MX_SPI1_Init+0xa4>)
 80022e6:	2207      	movs	r2, #7
 80022e8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80022ea:	4b21      	ldr	r3, [pc, #132]	@ (8002370 <MX_SPI1_Init+0xa4>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80022f0:	4b1f      	ldr	r3, [pc, #124]	@ (8002370 <MX_SPI1_Init+0xa4>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80022f6:	4b1e      	ldr	r3, [pc, #120]	@ (8002370 <MX_SPI1_Init+0xa4>)
 80022f8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80022fc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80022fe:	4b1c      	ldr	r3, [pc, #112]	@ (8002370 <MX_SPI1_Init+0xa4>)
 8002300:	f04f 42e0 	mov.w	r2, #1879048192	@ 0x70000000
 8002304:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002306:	4b1a      	ldr	r3, [pc, #104]	@ (8002370 <MX_SPI1_Init+0xa4>)
 8002308:	2200      	movs	r2, #0
 800230a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800230c:	4b18      	ldr	r3, [pc, #96]	@ (8002370 <MX_SPI1_Init+0xa4>)
 800230e:	2200      	movs	r2, #0
 8002310:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002312:	4b17      	ldr	r3, [pc, #92]	@ (8002370 <MX_SPI1_Init+0xa4>)
 8002314:	2200      	movs	r2, #0
 8002316:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8002318:	4b15      	ldr	r3, [pc, #84]	@ (8002370 <MX_SPI1_Init+0xa4>)
 800231a:	2200      	movs	r2, #0
 800231c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800231e:	4b14      	ldr	r3, [pc, #80]	@ (8002370 <MX_SPI1_Init+0xa4>)
 8002320:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002324:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002326:	4b12      	ldr	r3, [pc, #72]	@ (8002370 <MX_SPI1_Init+0xa4>)
 8002328:	2200      	movs	r2, #0
 800232a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800232c:	4b10      	ldr	r3, [pc, #64]	@ (8002370 <MX_SPI1_Init+0xa4>)
 800232e:	2200      	movs	r2, #0
 8002330:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002332:	4b0f      	ldr	r3, [pc, #60]	@ (8002370 <MX_SPI1_Init+0xa4>)
 8002334:	2200      	movs	r2, #0
 8002336:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002338:	4b0d      	ldr	r3, [pc, #52]	@ (8002370 <MX_SPI1_Init+0xa4>)
 800233a:	2200      	movs	r2, #0
 800233c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800233e:	4b0c      	ldr	r3, [pc, #48]	@ (8002370 <MX_SPI1_Init+0xa4>)
 8002340:	2200      	movs	r2, #0
 8002342:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002344:	4b0a      	ldr	r3, [pc, #40]	@ (8002370 <MX_SPI1_Init+0xa4>)
 8002346:	2200      	movs	r2, #0
 8002348:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800234a:	4b09      	ldr	r3, [pc, #36]	@ (8002370 <MX_SPI1_Init+0xa4>)
 800234c:	2200      	movs	r2, #0
 800234e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002350:	4b07      	ldr	r3, [pc, #28]	@ (8002370 <MX_SPI1_Init+0xa4>)
 8002352:	2200      	movs	r2, #0
 8002354:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002356:	4b06      	ldr	r3, [pc, #24]	@ (8002370 <MX_SPI1_Init+0xa4>)
 8002358:	2200      	movs	r2, #0
 800235a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800235c:	4804      	ldr	r0, [pc, #16]	@ (8002370 <MX_SPI1_Init+0xa4>)
 800235e:	f007 fd5d 	bl	8009e1c <HAL_SPI_Init>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8002368:	f7ff ffaa 	bl	80022c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800236c:	bf00      	nop
 800236e:	bd80      	pop	{r7, pc}
 8002370:	240022f0 	.word	0x240022f0
 8002374:	40013000 	.word	0x40013000

08002378 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800237c:	4b27      	ldr	r3, [pc, #156]	@ (800241c <MX_SPI2_Init+0xa4>)
 800237e:	4a28      	ldr	r2, [pc, #160]	@ (8002420 <MX_SPI2_Init+0xa8>)
 8002380:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002382:	4b26      	ldr	r3, [pc, #152]	@ (800241c <MX_SPI2_Init+0xa4>)
 8002384:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002388:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800238a:	4b24      	ldr	r3, [pc, #144]	@ (800241c <MX_SPI2_Init+0xa4>)
 800238c:	2200      	movs	r2, #0
 800238e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002390:	4b22      	ldr	r3, [pc, #136]	@ (800241c <MX_SPI2_Init+0xa4>)
 8002392:	2207      	movs	r2, #7
 8002394:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002396:	4b21      	ldr	r3, [pc, #132]	@ (800241c <MX_SPI2_Init+0xa4>)
 8002398:	2200      	movs	r2, #0
 800239a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800239c:	4b1f      	ldr	r3, [pc, #124]	@ (800241c <MX_SPI2_Init+0xa4>)
 800239e:	2200      	movs	r2, #0
 80023a0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80023a2:	4b1e      	ldr	r3, [pc, #120]	@ (800241c <MX_SPI2_Init+0xa4>)
 80023a4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80023a8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80023aa:	4b1c      	ldr	r3, [pc, #112]	@ (800241c <MX_SPI2_Init+0xa4>)
 80023ac:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 80023b0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023b2:	4b1a      	ldr	r3, [pc, #104]	@ (800241c <MX_SPI2_Init+0xa4>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80023b8:	4b18      	ldr	r3, [pc, #96]	@ (800241c <MX_SPI2_Init+0xa4>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023be:	4b17      	ldr	r3, [pc, #92]	@ (800241c <MX_SPI2_Init+0xa4>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80023c4:	4b15      	ldr	r3, [pc, #84]	@ (800241c <MX_SPI2_Init+0xa4>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80023ca:	4b14      	ldr	r3, [pc, #80]	@ (800241c <MX_SPI2_Init+0xa4>)
 80023cc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80023d0:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80023d2:	4b12      	ldr	r3, [pc, #72]	@ (800241c <MX_SPI2_Init+0xa4>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80023d8:	4b10      	ldr	r3, [pc, #64]	@ (800241c <MX_SPI2_Init+0xa4>)
 80023da:	2200      	movs	r2, #0
 80023dc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80023de:	4b0f      	ldr	r3, [pc, #60]	@ (800241c <MX_SPI2_Init+0xa4>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80023e4:	4b0d      	ldr	r3, [pc, #52]	@ (800241c <MX_SPI2_Init+0xa4>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80023ea:	4b0c      	ldr	r3, [pc, #48]	@ (800241c <MX_SPI2_Init+0xa4>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80023f0:	4b0a      	ldr	r3, [pc, #40]	@ (800241c <MX_SPI2_Init+0xa4>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80023f6:	4b09      	ldr	r3, [pc, #36]	@ (800241c <MX_SPI2_Init+0xa4>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80023fc:	4b07      	ldr	r3, [pc, #28]	@ (800241c <MX_SPI2_Init+0xa4>)
 80023fe:	2200      	movs	r2, #0
 8002400:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002402:	4b06      	ldr	r3, [pc, #24]	@ (800241c <MX_SPI2_Init+0xa4>)
 8002404:	2200      	movs	r2, #0
 8002406:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002408:	4804      	ldr	r0, [pc, #16]	@ (800241c <MX_SPI2_Init+0xa4>)
 800240a:	f007 fd07 	bl	8009e1c <HAL_SPI_Init>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8002414:	f7ff ff54 	bl	80022c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002418:	bf00      	nop
 800241a:	bd80      	pop	{r7, pc}
 800241c:	24002378 	.word	0x24002378
 8002420:	40003800 	.word	0x40003800

08002424 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b0bc      	sub	sp, #240	@ 0xf0
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800242c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	605a      	str	r2, [r3, #4]
 8002436:	609a      	str	r2, [r3, #8]
 8002438:	60da      	str	r2, [r3, #12]
 800243a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800243c:	f107 0318 	add.w	r3, r7, #24
 8002440:	22c0      	movs	r2, #192	@ 0xc0
 8002442:	2100      	movs	r1, #0
 8002444:	4618      	mov	r0, r3
 8002446:	f010 f943 	bl	80126d0 <memset>
  if(spiHandle->Instance==SPI1)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a4c      	ldr	r2, [pc, #304]	@ (8002580 <HAL_SPI_MspInit+0x15c>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d145      	bne.n	80024e0 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002454:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002458:	f04f 0300 	mov.w	r3, #0
 800245c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002460:	2300      	movs	r3, #0
 8002462:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002464:	f107 0318 	add.w	r3, r7, #24
 8002468:	4618      	mov	r0, r3
 800246a:	f005 fef7 	bl	800825c <HAL_RCCEx_PeriphCLKConfig>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002474:	f7ff ff24 	bl	80022c0 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002478:	4b42      	ldr	r3, [pc, #264]	@ (8002584 <HAL_SPI_MspInit+0x160>)
 800247a:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800247e:	4a41      	ldr	r2, [pc, #260]	@ (8002584 <HAL_SPI_MspInit+0x160>)
 8002480:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002484:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8002488:	4b3e      	ldr	r3, [pc, #248]	@ (8002584 <HAL_SPI_MspInit+0x160>)
 800248a:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800248e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002492:	617b      	str	r3, [r7, #20]
 8002494:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002496:	4b3b      	ldr	r3, [pc, #236]	@ (8002584 <HAL_SPI_MspInit+0x160>)
 8002498:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800249c:	4a39      	ldr	r2, [pc, #228]	@ (8002584 <HAL_SPI_MspInit+0x160>)
 800249e:	f043 0301 	orr.w	r3, r3, #1
 80024a2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80024a6:	4b37      	ldr	r3, [pc, #220]	@ (8002584 <HAL_SPI_MspInit+0x160>)
 80024a8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80024ac:	f003 0301 	and.w	r3, r3, #1
 80024b0:	613b      	str	r3, [r7, #16]
 80024b2:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 80024b4:	23e0      	movs	r3, #224	@ 0xe0
 80024b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ba:	2302      	movs	r3, #2
 80024bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c0:	2300      	movs	r3, #0
 80024c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c6:	2300      	movs	r3, #0
 80024c8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80024cc:	2305      	movs	r3, #5
 80024ce:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024d2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80024d6:	4619      	mov	r1, r3
 80024d8:	482b      	ldr	r0, [pc, #172]	@ (8002588 <HAL_SPI_MspInit+0x164>)
 80024da:	f004 fbc9 	bl	8006c70 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80024de:	e04a      	b.n	8002576 <HAL_SPI_MspInit+0x152>
  else if(spiHandle->Instance==SPI2)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a29      	ldr	r2, [pc, #164]	@ (800258c <HAL_SPI_MspInit+0x168>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d145      	bne.n	8002576 <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80024ea:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80024ee:	f04f 0300 	mov.w	r3, #0
 80024f2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80024f6:	2300      	movs	r3, #0
 80024f8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024fa:	f107 0318 	add.w	r3, r7, #24
 80024fe:	4618      	mov	r0, r3
 8002500:	f005 feac 	bl	800825c <HAL_RCCEx_PeriphCLKConfig>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <HAL_SPI_MspInit+0xea>
      Error_Handler();
 800250a:	f7ff fed9 	bl	80022c0 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800250e:	4b1d      	ldr	r3, [pc, #116]	@ (8002584 <HAL_SPI_MspInit+0x160>)
 8002510:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002514:	4a1b      	ldr	r2, [pc, #108]	@ (8002584 <HAL_SPI_MspInit+0x160>)
 8002516:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800251a:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800251e:	4b19      	ldr	r3, [pc, #100]	@ (8002584 <HAL_SPI_MspInit+0x160>)
 8002520:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002524:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002528:	60fb      	str	r3, [r7, #12]
 800252a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800252c:	4b15      	ldr	r3, [pc, #84]	@ (8002584 <HAL_SPI_MspInit+0x160>)
 800252e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002532:	4a14      	ldr	r2, [pc, #80]	@ (8002584 <HAL_SPI_MspInit+0x160>)
 8002534:	f043 0302 	orr.w	r3, r3, #2
 8002538:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800253c:	4b11      	ldr	r3, [pc, #68]	@ (8002584 <HAL_SPI_MspInit+0x160>)
 800253e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	60bb      	str	r3, [r7, #8]
 8002548:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BMP_SCK_Pin|BMP_MISO_Pin|BMP_MOSI_Pin;
 800254a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800254e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002552:	2302      	movs	r3, #2
 8002554:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002558:	2300      	movs	r3, #0
 800255a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800255e:	2300      	movs	r3, #0
 8002560:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002564:	2305      	movs	r3, #5
 8002566:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800256a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800256e:	4619      	mov	r1, r3
 8002570:	4807      	ldr	r0, [pc, #28]	@ (8002590 <HAL_SPI_MspInit+0x16c>)
 8002572:	f004 fb7d 	bl	8006c70 <HAL_GPIO_Init>
}
 8002576:	bf00      	nop
 8002578:	37f0      	adds	r7, #240	@ 0xf0
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	40013000 	.word	0x40013000
 8002584:	58024400 	.word	0x58024400
 8002588:	58020000 	.word	0x58020000
 800258c:	40003800 	.word	0x40003800
 8002590:	58020400 	.word	0x58020400

08002594 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800259a:	4b0a      	ldr	r3, [pc, #40]	@ (80025c4 <HAL_MspInit+0x30>)
 800259c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80025a0:	4a08      	ldr	r2, [pc, #32]	@ (80025c4 <HAL_MspInit+0x30>)
 80025a2:	f043 0302 	orr.w	r3, r3, #2
 80025a6:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80025aa:	4b06      	ldr	r3, [pc, #24]	@ (80025c4 <HAL_MspInit+0x30>)
 80025ac:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80025b0:	f003 0302 	and.w	r3, r3, #2
 80025b4:	607b      	str	r3, [r7, #4]
 80025b6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025b8:	bf00      	nop
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr
 80025c4:	58024400 	.word	0x58024400

080025c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80025cc:	bf00      	nop
 80025ce:	e7fd      	b.n	80025cc <NMI_Handler+0x4>

080025d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025d4:	bf00      	nop
 80025d6:	e7fd      	b.n	80025d4 <HardFault_Handler+0x4>

080025d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025dc:	bf00      	nop
 80025de:	e7fd      	b.n	80025dc <MemManage_Handler+0x4>

080025e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025e4:	bf00      	nop
 80025e6:	e7fd      	b.n	80025e4 <BusFault_Handler+0x4>

080025e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025ec:	bf00      	nop
 80025ee:	e7fd      	b.n	80025ec <UsageFault_Handler+0x4>

080025f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025f4:	bf00      	nop
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr

080025fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025fe:	b480      	push	{r7}
 8002600:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002602:	bf00      	nop
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002610:	bf00      	nop
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
	...

0800261c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  if(Timer1 > 0)
 8002620:	4b0b      	ldr	r3, [pc, #44]	@ (8002650 <SysTick_Handler+0x34>)
 8002622:	881b      	ldrh	r3, [r3, #0]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d005      	beq.n	8002634 <SysTick_Handler+0x18>
	    Timer1--;
 8002628:	4b09      	ldr	r3, [pc, #36]	@ (8002650 <SysTick_Handler+0x34>)
 800262a:	881b      	ldrh	r3, [r3, #0]
 800262c:	3b01      	subs	r3, #1
 800262e:	b29a      	uxth	r2, r3
 8002630:	4b07      	ldr	r3, [pc, #28]	@ (8002650 <SysTick_Handler+0x34>)
 8002632:	801a      	strh	r2, [r3, #0]
	  if(Timer2 > 0)
 8002634:	4b07      	ldr	r3, [pc, #28]	@ (8002654 <SysTick_Handler+0x38>)
 8002636:	881b      	ldrh	r3, [r3, #0]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d005      	beq.n	8002648 <SysTick_Handler+0x2c>
	    Timer2--;
 800263c:	4b05      	ldr	r3, [pc, #20]	@ (8002654 <SysTick_Handler+0x38>)
 800263e:	881b      	ldrh	r3, [r3, #0]
 8002640:	3b01      	subs	r3, #1
 8002642:	b29a      	uxth	r2, r3
 8002644:	4b03      	ldr	r3, [pc, #12]	@ (8002654 <SysTick_Handler+0x38>)
 8002646:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002648:	f000 ff04 	bl	8003454 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800264c:	bf00      	nop
 800264e:	bd80      	pop	{r7, pc}
 8002650:	24002850 	.word	0x24002850
 8002654:	24002852 	.word	0x24002852

08002658 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800265c:	4802      	ldr	r0, [pc, #8]	@ (8002668 <DMA1_Stream0_IRQHandler+0x10>)
 800265e:	f002 fc21 	bl	8004ea4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002662:	bf00      	nop
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	240027cc 	.word	0x240027cc

0800266c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002670:	4802      	ldr	r0, [pc, #8]	@ (800267c <USART1_IRQHandler+0x10>)
 8002672:	f009 fedd 	bl	800c430 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002676:	bf00      	nop
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	24002610 	.word	0x24002610

08002680 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002684:	4802      	ldr	r0, [pc, #8]	@ (8002690 <USART3_IRQHandler+0x10>)
 8002686:	f009 fed3 	bl	800c430 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800268a:	bf00      	nop
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	240026a4 	.word	0x240026a4

08002694 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002698:	4802      	ldr	r0, [pc, #8]	@ (80026a4 <TIM6_DAC_IRQHandler+0x10>)
 800269a:	f008 ff9b 	bl	800b5d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800269e:	bf00      	nop
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	240024e4 	.word	0x240024e4

080026a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80026ac:	4b32      	ldr	r3, [pc, #200]	@ (8002778 <SystemInit+0xd0>)
 80026ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026b2:	4a31      	ldr	r2, [pc, #196]	@ (8002778 <SystemInit+0xd0>)
 80026b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80026b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80026bc:	4b2f      	ldr	r3, [pc, #188]	@ (800277c <SystemInit+0xd4>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 030f 	and.w	r3, r3, #15
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d807      	bhi.n	80026d8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80026c8:	4b2c      	ldr	r3, [pc, #176]	@ (800277c <SystemInit+0xd4>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f023 030f 	bic.w	r3, r3, #15
 80026d0:	4a2a      	ldr	r2, [pc, #168]	@ (800277c <SystemInit+0xd4>)
 80026d2:	f043 0303 	orr.w	r3, r3, #3
 80026d6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80026d8:	4b29      	ldr	r3, [pc, #164]	@ (8002780 <SystemInit+0xd8>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a28      	ldr	r2, [pc, #160]	@ (8002780 <SystemInit+0xd8>)
 80026de:	f043 0301 	orr.w	r3, r3, #1
 80026e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80026e4:	4b26      	ldr	r3, [pc, #152]	@ (8002780 <SystemInit+0xd8>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80026ea:	4b25      	ldr	r3, [pc, #148]	@ (8002780 <SystemInit+0xd8>)
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	4924      	ldr	r1, [pc, #144]	@ (8002780 <SystemInit+0xd8>)
 80026f0:	4b24      	ldr	r3, [pc, #144]	@ (8002784 <SystemInit+0xdc>)
 80026f2:	4013      	ands	r3, r2
 80026f4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80026f6:	4b21      	ldr	r3, [pc, #132]	@ (800277c <SystemInit+0xd4>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 030c 	and.w	r3, r3, #12
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d007      	beq.n	8002712 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002702:	4b1e      	ldr	r3, [pc, #120]	@ (800277c <SystemInit+0xd4>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f023 030f 	bic.w	r3, r3, #15
 800270a:	4a1c      	ldr	r2, [pc, #112]	@ (800277c <SystemInit+0xd4>)
 800270c:	f043 0303 	orr.w	r3, r3, #3
 8002710:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8002712:	4b1b      	ldr	r3, [pc, #108]	@ (8002780 <SystemInit+0xd8>)
 8002714:	2200      	movs	r2, #0
 8002716:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8002718:	4b19      	ldr	r3, [pc, #100]	@ (8002780 <SystemInit+0xd8>)
 800271a:	2200      	movs	r2, #0
 800271c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800271e:	4b18      	ldr	r3, [pc, #96]	@ (8002780 <SystemInit+0xd8>)
 8002720:	2200      	movs	r2, #0
 8002722:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002724:	4b16      	ldr	r3, [pc, #88]	@ (8002780 <SystemInit+0xd8>)
 8002726:	4a18      	ldr	r2, [pc, #96]	@ (8002788 <SystemInit+0xe0>)
 8002728:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800272a:	4b15      	ldr	r3, [pc, #84]	@ (8002780 <SystemInit+0xd8>)
 800272c:	4a17      	ldr	r2, [pc, #92]	@ (800278c <SystemInit+0xe4>)
 800272e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002730:	4b13      	ldr	r3, [pc, #76]	@ (8002780 <SystemInit+0xd8>)
 8002732:	4a17      	ldr	r2, [pc, #92]	@ (8002790 <SystemInit+0xe8>)
 8002734:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002736:	4b12      	ldr	r3, [pc, #72]	@ (8002780 <SystemInit+0xd8>)
 8002738:	2200      	movs	r2, #0
 800273a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800273c:	4b10      	ldr	r3, [pc, #64]	@ (8002780 <SystemInit+0xd8>)
 800273e:	4a14      	ldr	r2, [pc, #80]	@ (8002790 <SystemInit+0xe8>)
 8002740:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002742:	4b0f      	ldr	r3, [pc, #60]	@ (8002780 <SystemInit+0xd8>)
 8002744:	2200      	movs	r2, #0
 8002746:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002748:	4b0d      	ldr	r3, [pc, #52]	@ (8002780 <SystemInit+0xd8>)
 800274a:	4a11      	ldr	r2, [pc, #68]	@ (8002790 <SystemInit+0xe8>)
 800274c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800274e:	4b0c      	ldr	r3, [pc, #48]	@ (8002780 <SystemInit+0xd8>)
 8002750:	2200      	movs	r2, #0
 8002752:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002754:	4b0a      	ldr	r3, [pc, #40]	@ (8002780 <SystemInit+0xd8>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a09      	ldr	r2, [pc, #36]	@ (8002780 <SystemInit+0xd8>)
 800275a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800275e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002760:	4b07      	ldr	r3, [pc, #28]	@ (8002780 <SystemInit+0xd8>)
 8002762:	2200      	movs	r2, #0
 8002764:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002766:	4b0b      	ldr	r3, [pc, #44]	@ (8002794 <SystemInit+0xec>)
 8002768:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800276c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800276e:	bf00      	nop
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr
 8002778:	e000ed00 	.word	0xe000ed00
 800277c:	52002000 	.word	0x52002000
 8002780:	58024400 	.word	0x58024400
 8002784:	eaf6ed7f 	.word	0xeaf6ed7f
 8002788:	02020200 	.word	0x02020200
 800278c:	01ff0000 	.word	0x01ff0000
 8002790:	01010280 	.word	0x01010280
 8002794:	52004000 	.word	0x52004000

08002798 <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim13;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b08a      	sub	sp, #40	@ 0x28
 800279c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800279e:	f107 031c 	add.w	r3, r7, #28
 80027a2:	2200      	movs	r2, #0
 80027a4:	601a      	str	r2, [r3, #0]
 80027a6:	605a      	str	r2, [r3, #4]
 80027a8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027aa:	463b      	mov	r3, r7
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]
 80027b0:	605a      	str	r2, [r3, #4]
 80027b2:	609a      	str	r2, [r3, #8]
 80027b4:	60da      	str	r2, [r3, #12]
 80027b6:	611a      	str	r2, [r3, #16]
 80027b8:	615a      	str	r2, [r3, #20]
 80027ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80027bc:	4b33      	ldr	r3, [pc, #204]	@ (800288c <MX_TIM2_Init+0xf4>)
 80027be:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80027c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 280-1;
 80027c4:	4b31      	ldr	r3, [pc, #196]	@ (800288c <MX_TIM2_Init+0xf4>)
 80027c6:	f240 1217 	movw	r2, #279	@ 0x117
 80027ca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027cc:	4b2f      	ldr	r3, [pc, #188]	@ (800288c <MX_TIM2_Init+0xf4>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7000;
 80027d2:	4b2e      	ldr	r3, [pc, #184]	@ (800288c <MX_TIM2_Init+0xf4>)
 80027d4:	f641 3258 	movw	r2, #7000	@ 0x1b58
 80027d8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027da:	4b2c      	ldr	r3, [pc, #176]	@ (800288c <MX_TIM2_Init+0xf4>)
 80027dc:	2200      	movs	r2, #0
 80027de:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80027e0:	4b2a      	ldr	r3, [pc, #168]	@ (800288c <MX_TIM2_Init+0xf4>)
 80027e2:	2280      	movs	r2, #128	@ 0x80
 80027e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80027e6:	4829      	ldr	r0, [pc, #164]	@ (800288c <MX_TIM2_Init+0xf4>)
 80027e8:	f008 fd8e 	bl	800b308 <HAL_TIM_PWM_Init>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 80027f2:	f7ff fd65 	bl	80022c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027f6:	2300      	movs	r3, #0
 80027f8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027fa:	2300      	movs	r3, #0
 80027fc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80027fe:	f107 031c 	add.w	r3, r7, #28
 8002802:	4619      	mov	r1, r3
 8002804:	4821      	ldr	r0, [pc, #132]	@ (800288c <MX_TIM2_Init+0xf4>)
 8002806:	f009 fccb 	bl	800c1a0 <HAL_TIMEx_MasterConfigSynchronization>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d001      	beq.n	8002814 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8002810:	f7ff fd56 	bl	80022c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002814:	2360      	movs	r3, #96	@ 0x60
 8002816:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002818:	2300      	movs	r3, #0
 800281a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800281c:	2300      	movs	r3, #0
 800281e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002820:	2300      	movs	r3, #0
 8002822:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002824:	463b      	mov	r3, r7
 8002826:	2200      	movs	r2, #0
 8002828:	4619      	mov	r1, r3
 800282a:	4818      	ldr	r0, [pc, #96]	@ (800288c <MX_TIM2_Init+0xf4>)
 800282c:	f008 ffda 	bl	800b7e4 <HAL_TIM_PWM_ConfigChannel>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8002836:	f7ff fd43 	bl	80022c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800283a:	463b      	mov	r3, r7
 800283c:	2204      	movs	r2, #4
 800283e:	4619      	mov	r1, r3
 8002840:	4812      	ldr	r0, [pc, #72]	@ (800288c <MX_TIM2_Init+0xf4>)
 8002842:	f008 ffcf 	bl	800b7e4 <HAL_TIM_PWM_ConfigChannel>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 800284c:	f7ff fd38 	bl	80022c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002850:	463b      	mov	r3, r7
 8002852:	2208      	movs	r2, #8
 8002854:	4619      	mov	r1, r3
 8002856:	480d      	ldr	r0, [pc, #52]	@ (800288c <MX_TIM2_Init+0xf4>)
 8002858:	f008 ffc4 	bl	800b7e4 <HAL_TIM_PWM_ConfigChannel>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <MX_TIM2_Init+0xce>
  {
    Error_Handler();
 8002862:	f7ff fd2d 	bl	80022c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002866:	463b      	mov	r3, r7
 8002868:	220c      	movs	r2, #12
 800286a:	4619      	mov	r1, r3
 800286c:	4807      	ldr	r0, [pc, #28]	@ (800288c <MX_TIM2_Init+0xf4>)
 800286e:	f008 ffb9 	bl	800b7e4 <HAL_TIM_PWM_ConfigChannel>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <MX_TIM2_Init+0xe4>
  {
    Error_Handler();
 8002878:	f7ff fd22 	bl	80022c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800287c:	4803      	ldr	r0, [pc, #12]	@ (800288c <MX_TIM2_Init+0xf4>)
 800287e:	f000 f9d5 	bl	8002c2c <HAL_TIM_MspPostInit>

}
 8002882:	bf00      	nop
 8002884:	3728      	adds	r7, #40	@ 0x28
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	24002400 	.word	0x24002400

08002890 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b08a      	sub	sp, #40	@ 0x28
 8002894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002896:	f107 031c 	add.w	r3, r7, #28
 800289a:	2200      	movs	r2, #0
 800289c:	601a      	str	r2, [r3, #0]
 800289e:	605a      	str	r2, [r3, #4]
 80028a0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028a2:	463b      	mov	r3, r7
 80028a4:	2200      	movs	r2, #0
 80028a6:	601a      	str	r2, [r3, #0]
 80028a8:	605a      	str	r2, [r3, #4]
 80028aa:	609a      	str	r2, [r3, #8]
 80028ac:	60da      	str	r2, [r3, #12]
 80028ae:	611a      	str	r2, [r3, #16]
 80028b0:	615a      	str	r2, [r3, #20]
 80028b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80028b4:	4b27      	ldr	r3, [pc, #156]	@ (8002954 <MX_TIM3_Init+0xc4>)
 80028b6:	4a28      	ldr	r2, [pc, #160]	@ (8002958 <MX_TIM3_Init+0xc8>)
 80028b8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 280-1;
 80028ba:	4b26      	ldr	r3, [pc, #152]	@ (8002954 <MX_TIM3_Init+0xc4>)
 80028bc:	f240 1217 	movw	r2, #279	@ 0x117
 80028c0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028c2:	4b24      	ldr	r3, [pc, #144]	@ (8002954 <MX_TIM3_Init+0xc4>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7000;
 80028c8:	4b22      	ldr	r3, [pc, #136]	@ (8002954 <MX_TIM3_Init+0xc4>)
 80028ca:	f641 3258 	movw	r2, #7000	@ 0x1b58
 80028ce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028d0:	4b20      	ldr	r3, [pc, #128]	@ (8002954 <MX_TIM3_Init+0xc4>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80028d6:	4b1f      	ldr	r3, [pc, #124]	@ (8002954 <MX_TIM3_Init+0xc4>)
 80028d8:	2280      	movs	r2, #128	@ 0x80
 80028da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80028dc:	481d      	ldr	r0, [pc, #116]	@ (8002954 <MX_TIM3_Init+0xc4>)
 80028de:	f008 fd13 	bl	800b308 <HAL_TIM_PWM_Init>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 80028e8:	f7ff fcea 	bl	80022c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028ec:	2300      	movs	r3, #0
 80028ee:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028f0:	2300      	movs	r3, #0
 80028f2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80028f4:	f107 031c 	add.w	r3, r7, #28
 80028f8:	4619      	mov	r1, r3
 80028fa:	4816      	ldr	r0, [pc, #88]	@ (8002954 <MX_TIM3_Init+0xc4>)
 80028fc:	f009 fc50 	bl	800c1a0 <HAL_TIMEx_MasterConfigSynchronization>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8002906:	f7ff fcdb 	bl	80022c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800290a:	2360      	movs	r3, #96	@ 0x60
 800290c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800290e:	2300      	movs	r3, #0
 8002910:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002912:	2300      	movs	r3, #0
 8002914:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002916:	2300      	movs	r3, #0
 8002918:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800291a:	463b      	mov	r3, r7
 800291c:	2200      	movs	r2, #0
 800291e:	4619      	mov	r1, r3
 8002920:	480c      	ldr	r0, [pc, #48]	@ (8002954 <MX_TIM3_Init+0xc4>)
 8002922:	f008 ff5f 	bl	800b7e4 <HAL_TIM_PWM_ConfigChannel>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d001      	beq.n	8002930 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 800292c:	f7ff fcc8 	bl	80022c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002930:	463b      	mov	r3, r7
 8002932:	2204      	movs	r2, #4
 8002934:	4619      	mov	r1, r3
 8002936:	4807      	ldr	r0, [pc, #28]	@ (8002954 <MX_TIM3_Init+0xc4>)
 8002938:	f008 ff54 	bl	800b7e4 <HAL_TIM_PWM_ConfigChannel>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 8002942:	f7ff fcbd 	bl	80022c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002946:	4803      	ldr	r0, [pc, #12]	@ (8002954 <MX_TIM3_Init+0xc4>)
 8002948:	f000 f970 	bl	8002c2c <HAL_TIM_MspPostInit>

}
 800294c:	bf00      	nop
 800294e:	3728      	adds	r7, #40	@ 0x28
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	2400244c 	.word	0x2400244c
 8002958:	40000400 	.word	0x40000400

0800295c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b08a      	sub	sp, #40	@ 0x28
 8002960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002962:	f107 031c 	add.w	r3, r7, #28
 8002966:	2200      	movs	r2, #0
 8002968:	601a      	str	r2, [r3, #0]
 800296a:	605a      	str	r2, [r3, #4]
 800296c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800296e:	463b      	mov	r3, r7
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]
 8002974:	605a      	str	r2, [r3, #4]
 8002976:	609a      	str	r2, [r3, #8]
 8002978:	60da      	str	r2, [r3, #12]
 800297a:	611a      	str	r2, [r3, #16]
 800297c:	615a      	str	r2, [r3, #20]
 800297e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002980:	4b32      	ldr	r3, [pc, #200]	@ (8002a4c <MX_TIM4_Init+0xf0>)
 8002982:	4a33      	ldr	r2, [pc, #204]	@ (8002a50 <MX_TIM4_Init+0xf4>)
 8002984:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 280-1;
 8002986:	4b31      	ldr	r3, [pc, #196]	@ (8002a4c <MX_TIM4_Init+0xf0>)
 8002988:	f240 1217 	movw	r2, #279	@ 0x117
 800298c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800298e:	4b2f      	ldr	r3, [pc, #188]	@ (8002a4c <MX_TIM4_Init+0xf0>)
 8002990:	2200      	movs	r2, #0
 8002992:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 7000;
 8002994:	4b2d      	ldr	r3, [pc, #180]	@ (8002a4c <MX_TIM4_Init+0xf0>)
 8002996:	f641 3258 	movw	r2, #7000	@ 0x1b58
 800299a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800299c:	4b2b      	ldr	r3, [pc, #172]	@ (8002a4c <MX_TIM4_Init+0xf0>)
 800299e:	2200      	movs	r2, #0
 80029a0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80029a2:	4b2a      	ldr	r3, [pc, #168]	@ (8002a4c <MX_TIM4_Init+0xf0>)
 80029a4:	2280      	movs	r2, #128	@ 0x80
 80029a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80029a8:	4828      	ldr	r0, [pc, #160]	@ (8002a4c <MX_TIM4_Init+0xf0>)
 80029aa:	f008 fcad 	bl	800b308 <HAL_TIM_PWM_Init>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d001      	beq.n	80029b8 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 80029b4:	f7ff fc84 	bl	80022c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029b8:	2300      	movs	r3, #0
 80029ba:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029bc:	2300      	movs	r3, #0
 80029be:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80029c0:	f107 031c 	add.w	r3, r7, #28
 80029c4:	4619      	mov	r1, r3
 80029c6:	4821      	ldr	r0, [pc, #132]	@ (8002a4c <MX_TIM4_Init+0xf0>)
 80029c8:	f009 fbea 	bl	800c1a0 <HAL_TIMEx_MasterConfigSynchronization>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 80029d2:	f7ff fc75 	bl	80022c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029d6:	2360      	movs	r3, #96	@ 0x60
 80029d8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80029da:	2300      	movs	r3, #0
 80029dc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029de:	2300      	movs	r3, #0
 80029e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029e2:	2300      	movs	r3, #0
 80029e4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80029e6:	463b      	mov	r3, r7
 80029e8:	2200      	movs	r2, #0
 80029ea:	4619      	mov	r1, r3
 80029ec:	4817      	ldr	r0, [pc, #92]	@ (8002a4c <MX_TIM4_Init+0xf0>)
 80029ee:	f008 fef9 	bl	800b7e4 <HAL_TIM_PWM_ConfigChannel>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 80029f8:	f7ff fc62 	bl	80022c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80029fc:	463b      	mov	r3, r7
 80029fe:	2204      	movs	r2, #4
 8002a00:	4619      	mov	r1, r3
 8002a02:	4812      	ldr	r0, [pc, #72]	@ (8002a4c <MX_TIM4_Init+0xf0>)
 8002a04:	f008 feee 	bl	800b7e4 <HAL_TIM_PWM_ConfigChannel>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 8002a0e:	f7ff fc57 	bl	80022c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002a12:	463b      	mov	r3, r7
 8002a14:	2208      	movs	r2, #8
 8002a16:	4619      	mov	r1, r3
 8002a18:	480c      	ldr	r0, [pc, #48]	@ (8002a4c <MX_TIM4_Init+0xf0>)
 8002a1a:	f008 fee3 	bl	800b7e4 <HAL_TIM_PWM_ConfigChannel>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d001      	beq.n	8002a28 <MX_TIM4_Init+0xcc>
  {
    Error_Handler();
 8002a24:	f7ff fc4c 	bl	80022c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002a28:	463b      	mov	r3, r7
 8002a2a:	220c      	movs	r2, #12
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	4807      	ldr	r0, [pc, #28]	@ (8002a4c <MX_TIM4_Init+0xf0>)
 8002a30:	f008 fed8 	bl	800b7e4 <HAL_TIM_PWM_ConfigChannel>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <MX_TIM4_Init+0xe2>
  {
    Error_Handler();
 8002a3a:	f7ff fc41 	bl	80022c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002a3e:	4803      	ldr	r0, [pc, #12]	@ (8002a4c <MX_TIM4_Init+0xf0>)
 8002a40:	f000 f8f4 	bl	8002c2c <HAL_TIM_MspPostInit>

}
 8002a44:	bf00      	nop
 8002a46:	3728      	adds	r7, #40	@ 0x28
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	24002498 	.word	0x24002498
 8002a50:	40000800 	.word	0x40000800

08002a54 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a5a:	1d3b      	adds	r3, r7, #4
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	601a      	str	r2, [r3, #0]
 8002a60:	605a      	str	r2, [r3, #4]
 8002a62:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002a64:	4b16      	ldr	r3, [pc, #88]	@ (8002ac0 <MX_TIM6_Init+0x6c>)
 8002a66:	4a17      	ldr	r2, [pc, #92]	@ (8002ac4 <MX_TIM6_Init+0x70>)
 8002a68:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 999;
 8002a6a:	4b15      	ldr	r3, [pc, #84]	@ (8002ac0 <MX_TIM6_Init+0x6c>)
 8002a6c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002a70:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a72:	4b13      	ldr	r3, [pc, #76]	@ (8002ac0 <MX_TIM6_Init+0x6c>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 279;
 8002a78:	4b11      	ldr	r3, [pc, #68]	@ (8002ac0 <MX_TIM6_Init+0x6c>)
 8002a7a:	f240 1217 	movw	r2, #279	@ 0x117
 8002a7e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a80:	4b0f      	ldr	r3, [pc, #60]	@ (8002ac0 <MX_TIM6_Init+0x6c>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002a86:	480e      	ldr	r0, [pc, #56]	@ (8002ac0 <MX_TIM6_Init+0x6c>)
 8002a88:	f008 fb6f 	bl	800b16a <HAL_TIM_Base_Init>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002a92:	f7ff fc15 	bl	80022c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a96:	2300      	movs	r3, #0
 8002a98:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002a9e:	1d3b      	adds	r3, r7, #4
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	4807      	ldr	r0, [pc, #28]	@ (8002ac0 <MX_TIM6_Init+0x6c>)
 8002aa4:	f009 fb7c 	bl	800c1a0 <HAL_TIMEx_MasterConfigSynchronization>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8002aae:	f7ff fc07 	bl	80022c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8002ab2:	4803      	ldr	r0, [pc, #12]	@ (8002ac0 <MX_TIM6_Init+0x6c>)
 8002ab4:	f008 fbb0 	bl	800b218 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM6_Init 2 */

}
 8002ab8:	bf00      	nop
 8002aba:	3710      	adds	r7, #16
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	240024e4 	.word	0x240024e4
 8002ac4:	40001000 	.word	0x40001000

08002ac8 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002acc:	4b0e      	ldr	r3, [pc, #56]	@ (8002b08 <MX_TIM13_Init+0x40>)
 8002ace:	4a0f      	ldr	r2, [pc, #60]	@ (8002b0c <MX_TIM13_Init+0x44>)
 8002ad0:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 280-1;
 8002ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8002b08 <MX_TIM13_Init+0x40>)
 8002ad4:	f240 1217 	movw	r2, #279	@ 0x117
 8002ad8:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ada:	4b0b      	ldr	r3, [pc, #44]	@ (8002b08 <MX_TIM13_Init+0x40>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8002ae0:	4b09      	ldr	r3, [pc, #36]	@ (8002b08 <MX_TIM13_Init+0x40>)
 8002ae2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002ae6:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ae8:	4b07      	ldr	r3, [pc, #28]	@ (8002b08 <MX_TIM13_Init+0x40>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002aee:	4b06      	ldr	r3, [pc, #24]	@ (8002b08 <MX_TIM13_Init+0x40>)
 8002af0:	2280      	movs	r2, #128	@ 0x80
 8002af2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002af4:	4804      	ldr	r0, [pc, #16]	@ (8002b08 <MX_TIM13_Init+0x40>)
 8002af6:	f008 fb38 	bl	800b16a <HAL_TIM_Base_Init>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8002b00:	f7ff fbde 	bl	80022c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8002b04:	bf00      	nop
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	24002530 	.word	0x24002530
 8002b0c:	40001c00 	.word	0x40001c00

08002b10 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b087      	sub	sp, #28
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b20:	d10f      	bne.n	8002b42 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b22:	4b1f      	ldr	r3, [pc, #124]	@ (8002ba0 <HAL_TIM_PWM_MspInit+0x90>)
 8002b24:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002b28:	4a1d      	ldr	r2, [pc, #116]	@ (8002ba0 <HAL_TIM_PWM_MspInit+0x90>)
 8002b2a:	f043 0301 	orr.w	r3, r3, #1
 8002b2e:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8002b32:	4b1b      	ldr	r3, [pc, #108]	@ (8002ba0 <HAL_TIM_PWM_MspInit+0x90>)
 8002b34:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002b38:	f003 0301 	and.w	r3, r3, #1
 8002b3c:	617b      	str	r3, [r7, #20]
 8002b3e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002b40:	e028      	b.n	8002b94 <HAL_TIM_PWM_MspInit+0x84>
  else if(tim_pwmHandle->Instance==TIM3)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a17      	ldr	r2, [pc, #92]	@ (8002ba4 <HAL_TIM_PWM_MspInit+0x94>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d10f      	bne.n	8002b6c <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b4c:	4b14      	ldr	r3, [pc, #80]	@ (8002ba0 <HAL_TIM_PWM_MspInit+0x90>)
 8002b4e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002b52:	4a13      	ldr	r2, [pc, #76]	@ (8002ba0 <HAL_TIM_PWM_MspInit+0x90>)
 8002b54:	f043 0302 	orr.w	r3, r3, #2
 8002b58:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8002b5c:	4b10      	ldr	r3, [pc, #64]	@ (8002ba0 <HAL_TIM_PWM_MspInit+0x90>)
 8002b5e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	613b      	str	r3, [r7, #16]
 8002b68:	693b      	ldr	r3, [r7, #16]
}
 8002b6a:	e013      	b.n	8002b94 <HAL_TIM_PWM_MspInit+0x84>
  else if(tim_pwmHandle->Instance==TIM4)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a0d      	ldr	r2, [pc, #52]	@ (8002ba8 <HAL_TIM_PWM_MspInit+0x98>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d10e      	bne.n	8002b94 <HAL_TIM_PWM_MspInit+0x84>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002b76:	4b0a      	ldr	r3, [pc, #40]	@ (8002ba0 <HAL_TIM_PWM_MspInit+0x90>)
 8002b78:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002b7c:	4a08      	ldr	r2, [pc, #32]	@ (8002ba0 <HAL_TIM_PWM_MspInit+0x90>)
 8002b7e:	f043 0304 	orr.w	r3, r3, #4
 8002b82:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8002b86:	4b06      	ldr	r3, [pc, #24]	@ (8002ba0 <HAL_TIM_PWM_MspInit+0x90>)
 8002b88:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002b8c:	f003 0304 	and.w	r3, r3, #4
 8002b90:	60fb      	str	r3, [r7, #12]
 8002b92:	68fb      	ldr	r3, [r7, #12]
}
 8002b94:	bf00      	nop
 8002b96:	371c      	adds	r7, #28
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr
 8002ba0:	58024400 	.word	0x58024400
 8002ba4:	40000400 	.word	0x40000400
 8002ba8:	40000800 	.word	0x40000800

08002bac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a19      	ldr	r2, [pc, #100]	@ (8002c20 <HAL_TIM_Base_MspInit+0x74>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d117      	bne.n	8002bee <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002bbe:	4b19      	ldr	r3, [pc, #100]	@ (8002c24 <HAL_TIM_Base_MspInit+0x78>)
 8002bc0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002bc4:	4a17      	ldr	r2, [pc, #92]	@ (8002c24 <HAL_TIM_Base_MspInit+0x78>)
 8002bc6:	f043 0310 	orr.w	r3, r3, #16
 8002bca:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8002bce:	4b15      	ldr	r3, [pc, #84]	@ (8002c24 <HAL_TIM_Base_MspInit+0x78>)
 8002bd0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002bd4:	f003 0310 	and.w	r3, r3, #16
 8002bd8:	60fb      	str	r3, [r7, #12]
 8002bda:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002bdc:	2200      	movs	r2, #0
 8002bde:	2100      	movs	r1, #0
 8002be0:	2036      	movs	r0, #54	@ 0x36
 8002be2:	f000 fd56 	bl	8003692 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002be6:	2036      	movs	r0, #54	@ 0x36
 8002be8:	f000 fd6d 	bl	80036c6 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8002bec:	e013      	b.n	8002c16 <HAL_TIM_Base_MspInit+0x6a>
  else if(tim_baseHandle->Instance==TIM13)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a0d      	ldr	r2, [pc, #52]	@ (8002c28 <HAL_TIM_Base_MspInit+0x7c>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d10e      	bne.n	8002c16 <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002bf8:	4b0a      	ldr	r3, [pc, #40]	@ (8002c24 <HAL_TIM_Base_MspInit+0x78>)
 8002bfa:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002bfe:	4a09      	ldr	r2, [pc, #36]	@ (8002c24 <HAL_TIM_Base_MspInit+0x78>)
 8002c00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c04:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8002c08:	4b06      	ldr	r3, [pc, #24]	@ (8002c24 <HAL_TIM_Base_MspInit+0x78>)
 8002c0a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002c0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c12:	60bb      	str	r3, [r7, #8]
 8002c14:	68bb      	ldr	r3, [r7, #8]
}
 8002c16:	bf00      	nop
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	40001000 	.word	0x40001000
 8002c24:	58024400 	.word	0x58024400
 8002c28:	40001c00 	.word	0x40001c00

08002c2c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b08c      	sub	sp, #48	@ 0x30
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c34:	f107 031c 	add.w	r3, r7, #28
 8002c38:	2200      	movs	r2, #0
 8002c3a:	601a      	str	r2, [r3, #0]
 8002c3c:	605a      	str	r2, [r3, #4]
 8002c3e:	609a      	str	r2, [r3, #8]
 8002c40:	60da      	str	r2, [r3, #12]
 8002c42:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c4c:	d13f      	bne.n	8002cce <HAL_TIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c4e:	4b47      	ldr	r3, [pc, #284]	@ (8002d6c <HAL_TIM_MspPostInit+0x140>)
 8002c50:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002c54:	4a45      	ldr	r2, [pc, #276]	@ (8002d6c <HAL_TIM_MspPostInit+0x140>)
 8002c56:	f043 0301 	orr.w	r3, r3, #1
 8002c5a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002c5e:	4b43      	ldr	r3, [pc, #268]	@ (8002d6c <HAL_TIM_MspPostInit+0x140>)
 8002c60:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002c64:	f003 0301 	and.w	r3, r3, #1
 8002c68:	61bb      	str	r3, [r7, #24]
 8002c6a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c6c:	4b3f      	ldr	r3, [pc, #252]	@ (8002d6c <HAL_TIM_MspPostInit+0x140>)
 8002c6e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002c72:	4a3e      	ldr	r2, [pc, #248]	@ (8002d6c <HAL_TIM_MspPostInit+0x140>)
 8002c74:	f043 0302 	orr.w	r3, r3, #2
 8002c78:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002c7c:	4b3b      	ldr	r3, [pc, #236]	@ (8002d6c <HAL_TIM_MspPostInit+0x140>)
 8002c7e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	617b      	str	r3, [r7, #20]
 8002c88:	697b      	ldr	r3, [r7, #20]
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 8002c8a:	f248 030c 	movw	r3, #32780	@ 0x800c
 8002c8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c90:	2302      	movs	r3, #2
 8002c92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c94:	2300      	movs	r3, #0
 8002c96:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ca0:	f107 031c 	add.w	r3, r7, #28
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	4832      	ldr	r0, [pc, #200]	@ (8002d70 <HAL_TIM_MspPostInit+0x144>)
 8002ca8:	f003 ffe2 	bl	8006c70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002cac:	2308      	movs	r3, #8
 8002cae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cc0:	f107 031c 	add.w	r3, r7, #28
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	482b      	ldr	r0, [pc, #172]	@ (8002d74 <HAL_TIM_MspPostInit+0x148>)
 8002cc8:	f003 ffd2 	bl	8006c70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002ccc:	e049      	b.n	8002d62 <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM3)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a29      	ldr	r2, [pc, #164]	@ (8002d78 <HAL_TIM_MspPostInit+0x14c>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d11f      	bne.n	8002d18 <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cd8:	4b24      	ldr	r3, [pc, #144]	@ (8002d6c <HAL_TIM_MspPostInit+0x140>)
 8002cda:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002cde:	4a23      	ldr	r2, [pc, #140]	@ (8002d6c <HAL_TIM_MspPostInit+0x140>)
 8002ce0:	f043 0302 	orr.w	r3, r3, #2
 8002ce4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002ce8:	4b20      	ldr	r3, [pc, #128]	@ (8002d6c <HAL_TIM_MspPostInit+0x140>)
 8002cea:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	613b      	str	r3, [r7, #16]
 8002cf4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002cf6:	2330      	movs	r3, #48	@ 0x30
 8002cf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d02:	2300      	movs	r3, #0
 8002d04:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002d06:	2302      	movs	r3, #2
 8002d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d0a:	f107 031c 	add.w	r3, r7, #28
 8002d0e:	4619      	mov	r1, r3
 8002d10:	4818      	ldr	r0, [pc, #96]	@ (8002d74 <HAL_TIM_MspPostInit+0x148>)
 8002d12:	f003 ffad 	bl	8006c70 <HAL_GPIO_Init>
}
 8002d16:	e024      	b.n	8002d62 <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM4)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a17      	ldr	r2, [pc, #92]	@ (8002d7c <HAL_TIM_MspPostInit+0x150>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d11f      	bne.n	8002d62 <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d22:	4b12      	ldr	r3, [pc, #72]	@ (8002d6c <HAL_TIM_MspPostInit+0x140>)
 8002d24:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002d28:	4a10      	ldr	r2, [pc, #64]	@ (8002d6c <HAL_TIM_MspPostInit+0x140>)
 8002d2a:	f043 0302 	orr.w	r3, r3, #2
 8002d2e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002d32:	4b0e      	ldr	r3, [pc, #56]	@ (8002d6c <HAL_TIM_MspPostInit+0x140>)
 8002d34:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	60fb      	str	r3, [r7, #12]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002d40:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8002d44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d46:	2302      	movs	r3, #2
 8002d48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002d52:	2302      	movs	r3, #2
 8002d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d56:	f107 031c 	add.w	r3, r7, #28
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	4805      	ldr	r0, [pc, #20]	@ (8002d74 <HAL_TIM_MspPostInit+0x148>)
 8002d5e:	f003 ff87 	bl	8006c70 <HAL_GPIO_Init>
}
 8002d62:	bf00      	nop
 8002d64:	3730      	adds	r7, #48	@ 0x30
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	58024400 	.word	0x58024400
 8002d70:	58020000 	.word	0x58020000
 8002d74:	58020400 	.word	0x58020400
 8002d78:	40000400 	.word	0x40000400
 8002d7c:	40000800 	.word	0x40000800

08002d80 <MX_UART4_Init>:
UART_HandleTypeDef huart6;
DMA_HandleTypeDef hdma_usart1_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002d84:	4b22      	ldr	r3, [pc, #136]	@ (8002e10 <MX_UART4_Init+0x90>)
 8002d86:	4a23      	ldr	r2, [pc, #140]	@ (8002e14 <MX_UART4_Init+0x94>)
 8002d88:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002d8a:	4b21      	ldr	r3, [pc, #132]	@ (8002e10 <MX_UART4_Init+0x90>)
 8002d8c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002d90:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002d92:	4b1f      	ldr	r3, [pc, #124]	@ (8002e10 <MX_UART4_Init+0x90>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002d98:	4b1d      	ldr	r3, [pc, #116]	@ (8002e10 <MX_UART4_Init+0x90>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002d9e:	4b1c      	ldr	r3, [pc, #112]	@ (8002e10 <MX_UART4_Init+0x90>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002da4:	4b1a      	ldr	r3, [pc, #104]	@ (8002e10 <MX_UART4_Init+0x90>)
 8002da6:	220c      	movs	r2, #12
 8002da8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002daa:	4b19      	ldr	r3, [pc, #100]	@ (8002e10 <MX_UART4_Init+0x90>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002db0:	4b17      	ldr	r3, [pc, #92]	@ (8002e10 <MX_UART4_Init+0x90>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002db6:	4b16      	ldr	r3, [pc, #88]	@ (8002e10 <MX_UART4_Init+0x90>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002dbc:	4b14      	ldr	r3, [pc, #80]	@ (8002e10 <MX_UART4_Init+0x90>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002dc2:	4b13      	ldr	r3, [pc, #76]	@ (8002e10 <MX_UART4_Init+0x90>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002dc8:	4811      	ldr	r0, [pc, #68]	@ (8002e10 <MX_UART4_Init+0x90>)
 8002dca:	f009 fa95 	bl	800c2f8 <HAL_UART_Init>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8002dd4:	f7ff fa74 	bl	80022c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002dd8:	2100      	movs	r1, #0
 8002dda:	480d      	ldr	r0, [pc, #52]	@ (8002e10 <MX_UART4_Init+0x90>)
 8002ddc:	f00b fa0b 	bl	800e1f6 <HAL_UARTEx_SetTxFifoThreshold>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8002de6:	f7ff fa6b 	bl	80022c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002dea:	2100      	movs	r1, #0
 8002dec:	4808      	ldr	r0, [pc, #32]	@ (8002e10 <MX_UART4_Init+0x90>)
 8002dee:	f00b fa40 	bl	800e272 <HAL_UARTEx_SetRxFifoThreshold>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d001      	beq.n	8002dfc <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8002df8:	f7ff fa62 	bl	80022c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002dfc:	4804      	ldr	r0, [pc, #16]	@ (8002e10 <MX_UART4_Init+0x90>)
 8002dfe:	f00b f9c1 	bl	800e184 <HAL_UARTEx_DisableFifoMode>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d001      	beq.n	8002e0c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8002e08:	f7ff fa5a 	bl	80022c0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002e0c:	bf00      	nop
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	2400257c 	.word	0x2400257c
 8002e14:	40004c00 	.word	0x40004c00

08002e18 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002e1c:	4b23      	ldr	r3, [pc, #140]	@ (8002eac <MX_USART1_UART_Init+0x94>)
 8002e1e:	4a24      	ldr	r2, [pc, #144]	@ (8002eb0 <MX_USART1_UART_Init+0x98>)
 8002e20:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 8002e22:	4b22      	ldr	r3, [pc, #136]	@ (8002eac <MX_USART1_UART_Init+0x94>)
 8002e24:	4a23      	ldr	r2, [pc, #140]	@ (8002eb4 <MX_USART1_UART_Init+0x9c>)
 8002e26:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8002e28:	4b20      	ldr	r3, [pc, #128]	@ (8002eac <MX_USART1_UART_Init+0x94>)
 8002e2a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002e2e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002e30:	4b1e      	ldr	r3, [pc, #120]	@ (8002eac <MX_USART1_UART_Init+0x94>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8002e36:	4b1d      	ldr	r3, [pc, #116]	@ (8002eac <MX_USART1_UART_Init+0x94>)
 8002e38:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002e3c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002e3e:	4b1b      	ldr	r3, [pc, #108]	@ (8002eac <MX_USART1_UART_Init+0x94>)
 8002e40:	220c      	movs	r2, #12
 8002e42:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e44:	4b19      	ldr	r3, [pc, #100]	@ (8002eac <MX_USART1_UART_Init+0x94>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e4a:	4b18      	ldr	r3, [pc, #96]	@ (8002eac <MX_USART1_UART_Init+0x94>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e50:	4b16      	ldr	r3, [pc, #88]	@ (8002eac <MX_USART1_UART_Init+0x94>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002e56:	4b15      	ldr	r3, [pc, #84]	@ (8002eac <MX_USART1_UART_Init+0x94>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e5c:	4b13      	ldr	r3, [pc, #76]	@ (8002eac <MX_USART1_UART_Init+0x94>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002e62:	4812      	ldr	r0, [pc, #72]	@ (8002eac <MX_USART1_UART_Init+0x94>)
 8002e64:	f009 fa48 	bl	800c2f8 <HAL_UART_Init>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8002e6e:	f7ff fa27 	bl	80022c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e72:	2100      	movs	r1, #0
 8002e74:	480d      	ldr	r0, [pc, #52]	@ (8002eac <MX_USART1_UART_Init+0x94>)
 8002e76:	f00b f9be 	bl	800e1f6 <HAL_UARTEx_SetTxFifoThreshold>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d001      	beq.n	8002e84 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8002e80:	f7ff fa1e 	bl	80022c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e84:	2100      	movs	r1, #0
 8002e86:	4809      	ldr	r0, [pc, #36]	@ (8002eac <MX_USART1_UART_Init+0x94>)
 8002e88:	f00b f9f3 	bl	800e272 <HAL_UARTEx_SetRxFifoThreshold>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8002e92:	f7ff fa15 	bl	80022c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002e96:	4805      	ldr	r0, [pc, #20]	@ (8002eac <MX_USART1_UART_Init+0x94>)
 8002e98:	f00b f974 	bl	800e184 <HAL_UARTEx_DisableFifoMode>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8002ea2:	f7ff fa0d 	bl	80022c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002ea6:	bf00      	nop
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	24002610 	.word	0x24002610
 8002eb0:	40011000 	.word	0x40011000
 8002eb4:	000186a0 	.word	0x000186a0

08002eb8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002ebc:	4b22      	ldr	r3, [pc, #136]	@ (8002f48 <MX_USART3_UART_Init+0x90>)
 8002ebe:	4a23      	ldr	r2, [pc, #140]	@ (8002f4c <MX_USART3_UART_Init+0x94>)
 8002ec0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002ec2:	4b21      	ldr	r3, [pc, #132]	@ (8002f48 <MX_USART3_UART_Init+0x90>)
 8002ec4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002ec8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002eca:	4b1f      	ldr	r3, [pc, #124]	@ (8002f48 <MX_USART3_UART_Init+0x90>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002ed0:	4b1d      	ldr	r3, [pc, #116]	@ (8002f48 <MX_USART3_UART_Init+0x90>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002ed6:	4b1c      	ldr	r3, [pc, #112]	@ (8002f48 <MX_USART3_UART_Init+0x90>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002edc:	4b1a      	ldr	r3, [pc, #104]	@ (8002f48 <MX_USART3_UART_Init+0x90>)
 8002ede:	220c      	movs	r2, #12
 8002ee0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ee2:	4b19      	ldr	r3, [pc, #100]	@ (8002f48 <MX_USART3_UART_Init+0x90>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ee8:	4b17      	ldr	r3, [pc, #92]	@ (8002f48 <MX_USART3_UART_Init+0x90>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002eee:	4b16      	ldr	r3, [pc, #88]	@ (8002f48 <MX_USART3_UART_Init+0x90>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002ef4:	4b14      	ldr	r3, [pc, #80]	@ (8002f48 <MX_USART3_UART_Init+0x90>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002efa:	4b13      	ldr	r3, [pc, #76]	@ (8002f48 <MX_USART3_UART_Init+0x90>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002f00:	4811      	ldr	r0, [pc, #68]	@ (8002f48 <MX_USART3_UART_Init+0x90>)
 8002f02:	f009 f9f9 	bl	800c2f8 <HAL_UART_Init>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d001      	beq.n	8002f10 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002f0c:	f7ff f9d8 	bl	80022c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f10:	2100      	movs	r1, #0
 8002f12:	480d      	ldr	r0, [pc, #52]	@ (8002f48 <MX_USART3_UART_Init+0x90>)
 8002f14:	f00b f96f 	bl	800e1f6 <HAL_UARTEx_SetTxFifoThreshold>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002f1e:	f7ff f9cf 	bl	80022c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f22:	2100      	movs	r1, #0
 8002f24:	4808      	ldr	r0, [pc, #32]	@ (8002f48 <MX_USART3_UART_Init+0x90>)
 8002f26:	f00b f9a4 	bl	800e272 <HAL_UARTEx_SetRxFifoThreshold>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d001      	beq.n	8002f34 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002f30:	f7ff f9c6 	bl	80022c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002f34:	4804      	ldr	r0, [pc, #16]	@ (8002f48 <MX_USART3_UART_Init+0x90>)
 8002f36:	f00b f925 	bl	800e184 <HAL_UARTEx_DisableFifoMode>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002f40:	f7ff f9be 	bl	80022c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002f44:	bf00      	nop
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	240026a4 	.word	0x240026a4
 8002f4c:	40004800 	.word	0x40004800

08002f50 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002f54:	4b22      	ldr	r3, [pc, #136]	@ (8002fe0 <MX_USART6_UART_Init+0x90>)
 8002f56:	4a23      	ldr	r2, [pc, #140]	@ (8002fe4 <MX_USART6_UART_Init+0x94>)
 8002f58:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002f5a:	4b21      	ldr	r3, [pc, #132]	@ (8002fe0 <MX_USART6_UART_Init+0x90>)
 8002f5c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002f60:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002f62:	4b1f      	ldr	r3, [pc, #124]	@ (8002fe0 <MX_USART6_UART_Init+0x90>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002f68:	4b1d      	ldr	r3, [pc, #116]	@ (8002fe0 <MX_USART6_UART_Init+0x90>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002f6e:	4b1c      	ldr	r3, [pc, #112]	@ (8002fe0 <MX_USART6_UART_Init+0x90>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002f74:	4b1a      	ldr	r3, [pc, #104]	@ (8002fe0 <MX_USART6_UART_Init+0x90>)
 8002f76:	220c      	movs	r2, #12
 8002f78:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f7a:	4b19      	ldr	r3, [pc, #100]	@ (8002fe0 <MX_USART6_UART_Init+0x90>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f80:	4b17      	ldr	r3, [pc, #92]	@ (8002fe0 <MX_USART6_UART_Init+0x90>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f86:	4b16      	ldr	r3, [pc, #88]	@ (8002fe0 <MX_USART6_UART_Init+0x90>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002f8c:	4b14      	ldr	r3, [pc, #80]	@ (8002fe0 <MX_USART6_UART_Init+0x90>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f92:	4b13      	ldr	r3, [pc, #76]	@ (8002fe0 <MX_USART6_UART_Init+0x90>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002f98:	4811      	ldr	r0, [pc, #68]	@ (8002fe0 <MX_USART6_UART_Init+0x90>)
 8002f9a:	f009 f9ad 	bl	800c2f8 <HAL_UART_Init>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d001      	beq.n	8002fa8 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8002fa4:	f7ff f98c 	bl	80022c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002fa8:	2100      	movs	r1, #0
 8002faa:	480d      	ldr	r0, [pc, #52]	@ (8002fe0 <MX_USART6_UART_Init+0x90>)
 8002fac:	f00b f923 	bl	800e1f6 <HAL_UARTEx_SetTxFifoThreshold>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8002fb6:	f7ff f983 	bl	80022c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002fba:	2100      	movs	r1, #0
 8002fbc:	4808      	ldr	r0, [pc, #32]	@ (8002fe0 <MX_USART6_UART_Init+0x90>)
 8002fbe:	f00b f958 	bl	800e272 <HAL_UARTEx_SetRxFifoThreshold>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d001      	beq.n	8002fcc <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8002fc8:	f7ff f97a 	bl	80022c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8002fcc:	4804      	ldr	r0, [pc, #16]	@ (8002fe0 <MX_USART6_UART_Init+0x90>)
 8002fce:	f00b f8d9 	bl	800e184 <HAL_UARTEx_DisableFifoMode>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d001      	beq.n	8002fdc <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8002fd8:	f7ff f972 	bl	80022c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002fdc:	bf00      	nop
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	24002738 	.word	0x24002738
 8002fe4:	40011400 	.word	0x40011400

08002fe8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b0c0      	sub	sp, #256	@ 0x100
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ff0:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	601a      	str	r2, [r3, #0]
 8002ff8:	605a      	str	r2, [r3, #4]
 8002ffa:	609a      	str	r2, [r3, #8]
 8002ffc:	60da      	str	r2, [r3, #12]
 8002ffe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003000:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003004:	22c0      	movs	r2, #192	@ 0xc0
 8003006:	2100      	movs	r1, #0
 8003008:	4618      	mov	r0, r3
 800300a:	f00f fb61 	bl	80126d0 <memset>
  if(uartHandle->Instance==UART4)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4ab9      	ldr	r2, [pc, #740]	@ (80032f8 <HAL_UART_MspInit+0x310>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d146      	bne.n	80030a6 <HAL_UART_MspInit+0xbe>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003018:	f04f 0202 	mov.w	r2, #2
 800301c:	f04f 0300 	mov.w	r3, #0
 8003020:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003024:	2300      	movs	r3, #0
 8003026:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800302a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800302e:	4618      	mov	r0, r3
 8003030:	f005 f914 	bl	800825c <HAL_RCCEx_PeriphCLKConfig>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800303a:	f7ff f941 	bl	80022c0 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800303e:	4baf      	ldr	r3, [pc, #700]	@ (80032fc <HAL_UART_MspInit+0x314>)
 8003040:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003044:	4aad      	ldr	r2, [pc, #692]	@ (80032fc <HAL_UART_MspInit+0x314>)
 8003046:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800304a:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800304e:	4bab      	ldr	r3, [pc, #684]	@ (80032fc <HAL_UART_MspInit+0x314>)
 8003050:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003054:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003058:	627b      	str	r3, [r7, #36]	@ 0x24
 800305a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800305c:	4ba7      	ldr	r3, [pc, #668]	@ (80032fc <HAL_UART_MspInit+0x314>)
 800305e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003062:	4aa6      	ldr	r2, [pc, #664]	@ (80032fc <HAL_UART_MspInit+0x314>)
 8003064:	f043 0301 	orr.w	r3, r3, #1
 8003068:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800306c:	4ba3      	ldr	r3, [pc, #652]	@ (80032fc <HAL_UART_MspInit+0x314>)
 800306e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	623b      	str	r3, [r7, #32]
 8003078:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800307a:	2303      	movs	r3, #3
 800307c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003080:	2302      	movs	r3, #2
 8003082:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003086:	2300      	movs	r3, #0
 8003088:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800308c:	2300      	movs	r3, #0
 800308e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003092:	2308      	movs	r3, #8
 8003094:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003098:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800309c:	4619      	mov	r1, r3
 800309e:	4898      	ldr	r0, [pc, #608]	@ (8003300 <HAL_UART_MspInit+0x318>)
 80030a0:	f003 fde6 	bl	8006c70 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80030a4:	e123      	b.n	80032ee <HAL_UART_MspInit+0x306>
  else if(uartHandle->Instance==USART1)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a96      	ldr	r2, [pc, #600]	@ (8003304 <HAL_UART_MspInit+0x31c>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d17e      	bne.n	80031ae <HAL_UART_MspInit+0x1c6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80030b0:	f04f 0201 	mov.w	r2, #1
 80030b4:	f04f 0300 	mov.w	r3, #0
 80030b8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80030bc:	2300      	movs	r3, #0
 80030be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80030c6:	4618      	mov	r0, r3
 80030c8:	f005 f8c8 	bl	800825c <HAL_RCCEx_PeriphCLKConfig>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d001      	beq.n	80030d6 <HAL_UART_MspInit+0xee>
      Error_Handler();
 80030d2:	f7ff f8f5 	bl	80022c0 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80030d6:	4b89      	ldr	r3, [pc, #548]	@ (80032fc <HAL_UART_MspInit+0x314>)
 80030d8:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80030dc:	4a87      	ldr	r2, [pc, #540]	@ (80032fc <HAL_UART_MspInit+0x314>)
 80030de:	f043 0310 	orr.w	r3, r3, #16
 80030e2:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 80030e6:	4b85      	ldr	r3, [pc, #532]	@ (80032fc <HAL_UART_MspInit+0x314>)
 80030e8:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80030ec:	f003 0310 	and.w	r3, r3, #16
 80030f0:	61fb      	str	r3, [r7, #28]
 80030f2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030f4:	4b81      	ldr	r3, [pc, #516]	@ (80032fc <HAL_UART_MspInit+0x314>)
 80030f6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80030fa:	4a80      	ldr	r2, [pc, #512]	@ (80032fc <HAL_UART_MspInit+0x314>)
 80030fc:	f043 0301 	orr.w	r3, r3, #1
 8003100:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003104:	4b7d      	ldr	r3, [pc, #500]	@ (80032fc <HAL_UART_MspInit+0x314>)
 8003106:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	61bb      	str	r3, [r7, #24]
 8003110:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|SBUS_RX_Pin;
 8003112:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003116:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800311a:	2302      	movs	r3, #2
 800311c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003120:	2300      	movs	r3, #0
 8003122:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003126:	2300      	movs	r3, #0
 8003128:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800312c:	2307      	movs	r3, #7
 800312e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003132:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8003136:	4619      	mov	r1, r3
 8003138:	4871      	ldr	r0, [pc, #452]	@ (8003300 <HAL_UART_MspInit+0x318>)
 800313a:	f003 fd99 	bl	8006c70 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream0;
 800313e:	4b72      	ldr	r3, [pc, #456]	@ (8003308 <HAL_UART_MspInit+0x320>)
 8003140:	4a72      	ldr	r2, [pc, #456]	@ (800330c <HAL_UART_MspInit+0x324>)
 8003142:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8003144:	4b70      	ldr	r3, [pc, #448]	@ (8003308 <HAL_UART_MspInit+0x320>)
 8003146:	2229      	movs	r2, #41	@ 0x29
 8003148:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800314a:	4b6f      	ldr	r3, [pc, #444]	@ (8003308 <HAL_UART_MspInit+0x320>)
 800314c:	2200      	movs	r2, #0
 800314e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003150:	4b6d      	ldr	r3, [pc, #436]	@ (8003308 <HAL_UART_MspInit+0x320>)
 8003152:	2200      	movs	r2, #0
 8003154:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003156:	4b6c      	ldr	r3, [pc, #432]	@ (8003308 <HAL_UART_MspInit+0x320>)
 8003158:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800315c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800315e:	4b6a      	ldr	r3, [pc, #424]	@ (8003308 <HAL_UART_MspInit+0x320>)
 8003160:	2200      	movs	r2, #0
 8003162:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003164:	4b68      	ldr	r3, [pc, #416]	@ (8003308 <HAL_UART_MspInit+0x320>)
 8003166:	2200      	movs	r2, #0
 8003168:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800316a:	4b67      	ldr	r3, [pc, #412]	@ (8003308 <HAL_UART_MspInit+0x320>)
 800316c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003170:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003172:	4b65      	ldr	r3, [pc, #404]	@ (8003308 <HAL_UART_MspInit+0x320>)
 8003174:	2200      	movs	r2, #0
 8003176:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003178:	4b63      	ldr	r3, [pc, #396]	@ (8003308 <HAL_UART_MspInit+0x320>)
 800317a:	2200      	movs	r2, #0
 800317c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800317e:	4862      	ldr	r0, [pc, #392]	@ (8003308 <HAL_UART_MspInit+0x320>)
 8003180:	f000 fb34 	bl	80037ec <HAL_DMA_Init>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <HAL_UART_MspInit+0x1a6>
      Error_Handler();
 800318a:	f7ff f899 	bl	80022c0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a5d      	ldr	r2, [pc, #372]	@ (8003308 <HAL_UART_MspInit+0x320>)
 8003192:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003196:	4a5c      	ldr	r2, [pc, #368]	@ (8003308 <HAL_UART_MspInit+0x320>)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800319c:	2200      	movs	r2, #0
 800319e:	2100      	movs	r1, #0
 80031a0:	2025      	movs	r0, #37	@ 0x25
 80031a2:	f000 fa76 	bl	8003692 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80031a6:	2025      	movs	r0, #37	@ 0x25
 80031a8:	f000 fa8d 	bl	80036c6 <HAL_NVIC_EnableIRQ>
}
 80031ac:	e09f      	b.n	80032ee <HAL_UART_MspInit+0x306>
  else if(uartHandle->Instance==USART3)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a57      	ldr	r2, [pc, #348]	@ (8003310 <HAL_UART_MspInit+0x328>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d14f      	bne.n	8003258 <HAL_UART_MspInit+0x270>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80031b8:	f04f 0202 	mov.w	r2, #2
 80031bc:	f04f 0300 	mov.w	r3, #0
 80031c0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80031c4:	2300      	movs	r3, #0
 80031c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80031ce:	4618      	mov	r0, r3
 80031d0:	f005 f844 	bl	800825c <HAL_RCCEx_PeriphCLKConfig>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d001      	beq.n	80031de <HAL_UART_MspInit+0x1f6>
      Error_Handler();
 80031da:	f7ff f871 	bl	80022c0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80031de:	4b47      	ldr	r3, [pc, #284]	@ (80032fc <HAL_UART_MspInit+0x314>)
 80031e0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80031e4:	4a45      	ldr	r2, [pc, #276]	@ (80032fc <HAL_UART_MspInit+0x314>)
 80031e6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031ea:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80031ee:	4b43      	ldr	r3, [pc, #268]	@ (80032fc <HAL_UART_MspInit+0x314>)
 80031f0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80031f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031f8:	617b      	str	r3, [r7, #20]
 80031fa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031fc:	4b3f      	ldr	r3, [pc, #252]	@ (80032fc <HAL_UART_MspInit+0x314>)
 80031fe:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003202:	4a3e      	ldr	r2, [pc, #248]	@ (80032fc <HAL_UART_MspInit+0x314>)
 8003204:	f043 0304 	orr.w	r3, r3, #4
 8003208:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800320c:	4b3b      	ldr	r3, [pc, #236]	@ (80032fc <HAL_UART_MspInit+0x314>)
 800320e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003212:	f003 0304 	and.w	r3, r3, #4
 8003216:	613b      	str	r3, [r7, #16]
 8003218:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800321a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800321e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003222:	2302      	movs	r3, #2
 8003224:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003228:	2300      	movs	r3, #0
 800322a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800322e:	2300      	movs	r3, #0
 8003230:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003234:	2307      	movs	r3, #7
 8003236:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800323a:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800323e:	4619      	mov	r1, r3
 8003240:	4834      	ldr	r0, [pc, #208]	@ (8003314 <HAL_UART_MspInit+0x32c>)
 8003242:	f003 fd15 	bl	8006c70 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003246:	2200      	movs	r2, #0
 8003248:	2100      	movs	r1, #0
 800324a:	2027      	movs	r0, #39	@ 0x27
 800324c:	f000 fa21 	bl	8003692 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003250:	2027      	movs	r0, #39	@ 0x27
 8003252:	f000 fa38 	bl	80036c6 <HAL_NVIC_EnableIRQ>
}
 8003256:	e04a      	b.n	80032ee <HAL_UART_MspInit+0x306>
  else if(uartHandle->Instance==USART6)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a2e      	ldr	r2, [pc, #184]	@ (8003318 <HAL_UART_MspInit+0x330>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d145      	bne.n	80032ee <HAL_UART_MspInit+0x306>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8003262:	f04f 0201 	mov.w	r2, #1
 8003266:	f04f 0300 	mov.w	r3, #0
 800326a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 800326e:	2300      	movs	r3, #0
 8003270:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003274:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003278:	4618      	mov	r0, r3
 800327a:	f004 ffef 	bl	800825c <HAL_RCCEx_PeriphCLKConfig>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d001      	beq.n	8003288 <HAL_UART_MspInit+0x2a0>
      Error_Handler();
 8003284:	f7ff f81c 	bl	80022c0 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003288:	4b1c      	ldr	r3, [pc, #112]	@ (80032fc <HAL_UART_MspInit+0x314>)
 800328a:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800328e:	4a1b      	ldr	r2, [pc, #108]	@ (80032fc <HAL_UART_MspInit+0x314>)
 8003290:	f043 0320 	orr.w	r3, r3, #32
 8003294:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8003298:	4b18      	ldr	r3, [pc, #96]	@ (80032fc <HAL_UART_MspInit+0x314>)
 800329a:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800329e:	f003 0320 	and.w	r3, r3, #32
 80032a2:	60fb      	str	r3, [r7, #12]
 80032a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032a6:	4b15      	ldr	r3, [pc, #84]	@ (80032fc <HAL_UART_MspInit+0x314>)
 80032a8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80032ac:	4a13      	ldr	r2, [pc, #76]	@ (80032fc <HAL_UART_MspInit+0x314>)
 80032ae:	f043 0304 	orr.w	r3, r3, #4
 80032b2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80032b6:	4b11      	ldr	r3, [pc, #68]	@ (80032fc <HAL_UART_MspInit+0x314>)
 80032b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80032bc:	f003 0304 	and.w	r3, r3, #4
 80032c0:	60bb      	str	r3, [r7, #8]
 80032c2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80032c4:	23c0      	movs	r3, #192	@ 0xc0
 80032c6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ca:	2302      	movs	r3, #2
 80032cc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d0:	2300      	movs	r3, #0
 80032d2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032d6:	2300      	movs	r3, #0
 80032d8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 80032dc:	2307      	movs	r3, #7
 80032de:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032e2:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80032e6:	4619      	mov	r1, r3
 80032e8:	480a      	ldr	r0, [pc, #40]	@ (8003314 <HAL_UART_MspInit+0x32c>)
 80032ea:	f003 fcc1 	bl	8006c70 <HAL_GPIO_Init>
}
 80032ee:	bf00      	nop
 80032f0:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	40004c00 	.word	0x40004c00
 80032fc:	58024400 	.word	0x58024400
 8003300:	58020000 	.word	0x58020000
 8003304:	40011000 	.word	0x40011000
 8003308:	240027cc 	.word	0x240027cc
 800330c:	40020010 	.word	0x40020010
 8003310:	40004800 	.word	0x40004800
 8003314:	58020800 	.word	0x58020800
 8003318:	40011400 	.word	0x40011400

0800331c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800331c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003354 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003320:	f7ff f9c2 	bl	80026a8 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003324:	480c      	ldr	r0, [pc, #48]	@ (8003358 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003326:	490d      	ldr	r1, [pc, #52]	@ (800335c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003328:	4a0d      	ldr	r2, [pc, #52]	@ (8003360 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800332a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800332c:	e002      	b.n	8003334 <LoopCopyDataInit>

0800332e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800332e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003330:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003332:	3304      	adds	r3, #4

08003334 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8003334:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003336:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003338:	d3f9      	bcc.n	800332e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800333a:	4a0a      	ldr	r2, [pc, #40]	@ (8003364 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800333c:	4c0a      	ldr	r4, [pc, #40]	@ (8003368 <LoopFillZerobss+0x22>)
  movs r3, #0
 800333e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003340:	e001      	b.n	8003346 <LoopFillZerobss>

08003342 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003342:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003344:	3204      	adds	r2, #4

08003346 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003346:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003348:	d3fb      	bcc.n	8003342 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800334a:	f00f f9cf 	bl	80126ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800334e:	f7fe fea3 	bl	8002098 <main>
  bx  lr
 8003352:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003354:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8003358:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800335c:	24000110 	.word	0x24000110
  ldr r2, =_sidata
 8003360:	080137c0 	.word	0x080137c0
  ldr r2, =_sbss
 8003364:	24000110 	.word	0x24000110
  ldr r4, =_ebss
 8003368:	24002bc4 	.word	0x24002bc4

0800336c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800336c:	e7fe      	b.n	800336c <ADC_IRQHandler>
	...

08003370 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003376:	2003      	movs	r0, #3
 8003378:	f000 f980 	bl	800367c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800337c:	f004 fd98 	bl	8007eb0 <HAL_RCC_GetSysClockFreq>
 8003380:	4602      	mov	r2, r0
 8003382:	4b15      	ldr	r3, [pc, #84]	@ (80033d8 <HAL_Init+0x68>)
 8003384:	699b      	ldr	r3, [r3, #24]
 8003386:	0a1b      	lsrs	r3, r3, #8
 8003388:	f003 030f 	and.w	r3, r3, #15
 800338c:	4913      	ldr	r1, [pc, #76]	@ (80033dc <HAL_Init+0x6c>)
 800338e:	5ccb      	ldrb	r3, [r1, r3]
 8003390:	f003 031f 	and.w	r3, r3, #31
 8003394:	fa22 f303 	lsr.w	r3, r2, r3
 8003398:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800339a:	4b0f      	ldr	r3, [pc, #60]	@ (80033d8 <HAL_Init+0x68>)
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	f003 030f 	and.w	r3, r3, #15
 80033a2:	4a0e      	ldr	r2, [pc, #56]	@ (80033dc <HAL_Init+0x6c>)
 80033a4:	5cd3      	ldrb	r3, [r2, r3]
 80033a6:	f003 031f 	and.w	r3, r3, #31
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	fa22 f303 	lsr.w	r3, r2, r3
 80033b0:	4a0b      	ldr	r2, [pc, #44]	@ (80033e0 <HAL_Init+0x70>)
 80033b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80033b4:	4a0b      	ldr	r2, [pc, #44]	@ (80033e4 <HAL_Init+0x74>)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80033ba:	200f      	movs	r0, #15
 80033bc:	f000 f814 	bl	80033e8 <HAL_InitTick>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e002      	b.n	80033d0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80033ca:	f7ff f8e3 	bl	8002594 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80033ce:	2300      	movs	r3, #0
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3708      	adds	r7, #8
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	58024400 	.word	0x58024400
 80033dc:	08012aa0 	.word	0x08012aa0
 80033e0:	2400009c 	.word	0x2400009c
 80033e4:	24000098 	.word	0x24000098

080033e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80033f0:	4b15      	ldr	r3, [pc, #84]	@ (8003448 <HAL_InitTick+0x60>)
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d101      	bne.n	80033fc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e021      	b.n	8003440 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80033fc:	4b13      	ldr	r3, [pc, #76]	@ (800344c <HAL_InitTick+0x64>)
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	4b11      	ldr	r3, [pc, #68]	@ (8003448 <HAL_InitTick+0x60>)
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	4619      	mov	r1, r3
 8003406:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800340a:	fbb3 f3f1 	udiv	r3, r3, r1
 800340e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003412:	4618      	mov	r0, r3
 8003414:	f000 f965 	bl	80036e2 <HAL_SYSTICK_Config>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e00e      	b.n	8003440 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2b0f      	cmp	r3, #15
 8003426:	d80a      	bhi.n	800343e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003428:	2200      	movs	r2, #0
 800342a:	6879      	ldr	r1, [r7, #4]
 800342c:	f04f 30ff 	mov.w	r0, #4294967295
 8003430:	f000 f92f 	bl	8003692 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003434:	4a06      	ldr	r2, [pc, #24]	@ (8003450 <HAL_InitTick+0x68>)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800343a:	2300      	movs	r3, #0
 800343c:	e000      	b.n	8003440 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
}
 8003440:	4618      	mov	r0, r3
 8003442:	3708      	adds	r7, #8
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	240000a4 	.word	0x240000a4
 800344c:	24000098 	.word	0x24000098
 8003450:	240000a0 	.word	0x240000a0

08003454 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003454:	b480      	push	{r7}
 8003456:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003458:	4b06      	ldr	r3, [pc, #24]	@ (8003474 <HAL_IncTick+0x20>)
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	461a      	mov	r2, r3
 800345e:	4b06      	ldr	r3, [pc, #24]	@ (8003478 <HAL_IncTick+0x24>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4413      	add	r3, r2
 8003464:	4a04      	ldr	r2, [pc, #16]	@ (8003478 <HAL_IncTick+0x24>)
 8003466:	6013      	str	r3, [r2, #0]
}
 8003468:	bf00      	nop
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	240000a4 	.word	0x240000a4
 8003478:	24002844 	.word	0x24002844

0800347c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800347c:	b480      	push	{r7}
 800347e:	af00      	add	r7, sp, #0
  return uwTick;
 8003480:	4b03      	ldr	r3, [pc, #12]	@ (8003490 <HAL_GetTick+0x14>)
 8003482:	681b      	ldr	r3, [r3, #0]
}
 8003484:	4618      	mov	r0, r3
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	24002844 	.word	0x24002844

08003494 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800349c:	f7ff ffee 	bl	800347c <HAL_GetTick>
 80034a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ac:	d005      	beq.n	80034ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80034ae:	4b0a      	ldr	r3, [pc, #40]	@ (80034d8 <HAL_Delay+0x44>)
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	461a      	mov	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	4413      	add	r3, r2
 80034b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80034ba:	bf00      	nop
 80034bc:	f7ff ffde 	bl	800347c <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d8f7      	bhi.n	80034bc <HAL_Delay+0x28>
  {
  }
}
 80034cc:	bf00      	nop
 80034ce:	bf00      	nop
 80034d0:	3710      	adds	r7, #16
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	240000a4 	.word	0x240000a4

080034dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034dc:	b480      	push	{r7}
 80034de:	b085      	sub	sp, #20
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f003 0307 	and.w	r3, r3, #7
 80034ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034ec:	4b0b      	ldr	r3, [pc, #44]	@ (800351c <__NVIC_SetPriorityGrouping+0x40>)
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034f2:	68ba      	ldr	r2, [r7, #8]
 80034f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80034f8:	4013      	ands	r3, r2
 80034fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003504:	4b06      	ldr	r3, [pc, #24]	@ (8003520 <__NVIC_SetPriorityGrouping+0x44>)
 8003506:	4313      	orrs	r3, r2
 8003508:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800350a:	4a04      	ldr	r2, [pc, #16]	@ (800351c <__NVIC_SetPriorityGrouping+0x40>)
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	60d3      	str	r3, [r2, #12]
}
 8003510:	bf00      	nop
 8003512:	3714      	adds	r7, #20
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr
 800351c:	e000ed00 	.word	0xe000ed00
 8003520:	05fa0000 	.word	0x05fa0000

08003524 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003524:	b480      	push	{r7}
 8003526:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003528:	4b04      	ldr	r3, [pc, #16]	@ (800353c <__NVIC_GetPriorityGrouping+0x18>)
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	0a1b      	lsrs	r3, r3, #8
 800352e:	f003 0307 	and.w	r3, r3, #7
}
 8003532:	4618      	mov	r0, r3
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr
 800353c:	e000ed00 	.word	0xe000ed00

08003540 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	4603      	mov	r3, r0
 8003548:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800354a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800354e:	2b00      	cmp	r3, #0
 8003550:	db0b      	blt.n	800356a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003552:	88fb      	ldrh	r3, [r7, #6]
 8003554:	f003 021f 	and.w	r2, r3, #31
 8003558:	4907      	ldr	r1, [pc, #28]	@ (8003578 <__NVIC_EnableIRQ+0x38>)
 800355a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800355e:	095b      	lsrs	r3, r3, #5
 8003560:	2001      	movs	r0, #1
 8003562:	fa00 f202 	lsl.w	r2, r0, r2
 8003566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800356a:	bf00      	nop
 800356c:	370c      	adds	r7, #12
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	e000e100 	.word	0xe000e100

0800357c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	4603      	mov	r3, r0
 8003584:	6039      	str	r1, [r7, #0]
 8003586:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003588:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800358c:	2b00      	cmp	r3, #0
 800358e:	db0a      	blt.n	80035a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	b2da      	uxtb	r2, r3
 8003594:	490c      	ldr	r1, [pc, #48]	@ (80035c8 <__NVIC_SetPriority+0x4c>)
 8003596:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800359a:	0112      	lsls	r2, r2, #4
 800359c:	b2d2      	uxtb	r2, r2
 800359e:	440b      	add	r3, r1
 80035a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035a4:	e00a      	b.n	80035bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	b2da      	uxtb	r2, r3
 80035aa:	4908      	ldr	r1, [pc, #32]	@ (80035cc <__NVIC_SetPriority+0x50>)
 80035ac:	88fb      	ldrh	r3, [r7, #6]
 80035ae:	f003 030f 	and.w	r3, r3, #15
 80035b2:	3b04      	subs	r3, #4
 80035b4:	0112      	lsls	r2, r2, #4
 80035b6:	b2d2      	uxtb	r2, r2
 80035b8:	440b      	add	r3, r1
 80035ba:	761a      	strb	r2, [r3, #24]
}
 80035bc:	bf00      	nop
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr
 80035c8:	e000e100 	.word	0xe000e100
 80035cc:	e000ed00 	.word	0xe000ed00

080035d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b089      	sub	sp, #36	@ 0x24
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f003 0307 	and.w	r3, r3, #7
 80035e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	f1c3 0307 	rsb	r3, r3, #7
 80035ea:	2b04      	cmp	r3, #4
 80035ec:	bf28      	it	cs
 80035ee:	2304      	movcs	r3, #4
 80035f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	3304      	adds	r3, #4
 80035f6:	2b06      	cmp	r3, #6
 80035f8:	d902      	bls.n	8003600 <NVIC_EncodePriority+0x30>
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	3b03      	subs	r3, #3
 80035fe:	e000      	b.n	8003602 <NVIC_EncodePriority+0x32>
 8003600:	2300      	movs	r3, #0
 8003602:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003604:	f04f 32ff 	mov.w	r2, #4294967295
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	fa02 f303 	lsl.w	r3, r2, r3
 800360e:	43da      	mvns	r2, r3
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	401a      	ands	r2, r3
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003618:	f04f 31ff 	mov.w	r1, #4294967295
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	fa01 f303 	lsl.w	r3, r1, r3
 8003622:	43d9      	mvns	r1, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003628:	4313      	orrs	r3, r2
         );
}
 800362a:	4618      	mov	r0, r3
 800362c:	3724      	adds	r7, #36	@ 0x24
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
	...

08003638 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	3b01      	subs	r3, #1
 8003644:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003648:	d301      	bcc.n	800364e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800364a:	2301      	movs	r3, #1
 800364c:	e00f      	b.n	800366e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800364e:	4a0a      	ldr	r2, [pc, #40]	@ (8003678 <SysTick_Config+0x40>)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	3b01      	subs	r3, #1
 8003654:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003656:	210f      	movs	r1, #15
 8003658:	f04f 30ff 	mov.w	r0, #4294967295
 800365c:	f7ff ff8e 	bl	800357c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003660:	4b05      	ldr	r3, [pc, #20]	@ (8003678 <SysTick_Config+0x40>)
 8003662:	2200      	movs	r2, #0
 8003664:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003666:	4b04      	ldr	r3, [pc, #16]	@ (8003678 <SysTick_Config+0x40>)
 8003668:	2207      	movs	r2, #7
 800366a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3708      	adds	r7, #8
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	e000e010 	.word	0xe000e010

0800367c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f7ff ff29 	bl	80034dc <__NVIC_SetPriorityGrouping>
}
 800368a:	bf00      	nop
 800368c:	3708      	adds	r7, #8
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b086      	sub	sp, #24
 8003696:	af00      	add	r7, sp, #0
 8003698:	4603      	mov	r3, r0
 800369a:	60b9      	str	r1, [r7, #8]
 800369c:	607a      	str	r2, [r7, #4]
 800369e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80036a0:	f7ff ff40 	bl	8003524 <__NVIC_GetPriorityGrouping>
 80036a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	68b9      	ldr	r1, [r7, #8]
 80036aa:	6978      	ldr	r0, [r7, #20]
 80036ac:	f7ff ff90 	bl	80035d0 <NVIC_EncodePriority>
 80036b0:	4602      	mov	r2, r0
 80036b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80036b6:	4611      	mov	r1, r2
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7ff ff5f 	bl	800357c <__NVIC_SetPriority>
}
 80036be:	bf00      	nop
 80036c0:	3718      	adds	r7, #24
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b082      	sub	sp, #8
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	4603      	mov	r3, r0
 80036ce:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7ff ff33 	bl	8003540 <__NVIC_EnableIRQ>
}
 80036da:	bf00      	nop
 80036dc:	3708      	adds	r7, #8
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}

080036e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036e2:	b580      	push	{r7, lr}
 80036e4:	b082      	sub	sp, #8
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f7ff ffa4 	bl	8003638 <SysTick_Config>
 80036f0:	4603      	mov	r3, r0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3708      	adds	r7, #8
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
	...

080036fc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80036fc:	b480      	push	{r7}
 80036fe:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003700:	f3bf 8f5f 	dmb	sy
}
 8003704:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003706:	4b07      	ldr	r3, [pc, #28]	@ (8003724 <HAL_MPU_Disable+0x28>)
 8003708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800370a:	4a06      	ldr	r2, [pc, #24]	@ (8003724 <HAL_MPU_Disable+0x28>)
 800370c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003710:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003712:	4b05      	ldr	r3, [pc, #20]	@ (8003728 <HAL_MPU_Disable+0x2c>)
 8003714:	2200      	movs	r2, #0
 8003716:	605a      	str	r2, [r3, #4]
}
 8003718:	bf00      	nop
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	e000ed00 	.word	0xe000ed00
 8003728:	e000ed90 	.word	0xe000ed90

0800372c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003734:	4a0b      	ldr	r2, [pc, #44]	@ (8003764 <HAL_MPU_Enable+0x38>)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f043 0301 	orr.w	r3, r3, #1
 800373c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800373e:	4b0a      	ldr	r3, [pc, #40]	@ (8003768 <HAL_MPU_Enable+0x3c>)
 8003740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003742:	4a09      	ldr	r2, [pc, #36]	@ (8003768 <HAL_MPU_Enable+0x3c>)
 8003744:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003748:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800374a:	f3bf 8f4f 	dsb	sy
}
 800374e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003750:	f3bf 8f6f 	isb	sy
}
 8003754:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003756:	bf00      	nop
 8003758:	370c      	adds	r7, #12
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop
 8003764:	e000ed90 	.word	0xe000ed90
 8003768:	e000ed00 	.word	0xe000ed00

0800376c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	785a      	ldrb	r2, [r3, #1]
 8003778:	4b1b      	ldr	r3, [pc, #108]	@ (80037e8 <HAL_MPU_ConfigRegion+0x7c>)
 800377a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800377c:	4b1a      	ldr	r3, [pc, #104]	@ (80037e8 <HAL_MPU_ConfigRegion+0x7c>)
 800377e:	691b      	ldr	r3, [r3, #16]
 8003780:	4a19      	ldr	r2, [pc, #100]	@ (80037e8 <HAL_MPU_ConfigRegion+0x7c>)
 8003782:	f023 0301 	bic.w	r3, r3, #1
 8003786:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003788:	4a17      	ldr	r2, [pc, #92]	@ (80037e8 <HAL_MPU_ConfigRegion+0x7c>)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	7b1b      	ldrb	r3, [r3, #12]
 8003794:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	7adb      	ldrb	r3, [r3, #11]
 800379a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800379c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	7a9b      	ldrb	r3, [r3, #10]
 80037a2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80037a4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	7b5b      	ldrb	r3, [r3, #13]
 80037aa:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80037ac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	7b9b      	ldrb	r3, [r3, #14]
 80037b2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80037b4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	7bdb      	ldrb	r3, [r3, #15]
 80037ba:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80037bc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	7a5b      	ldrb	r3, [r3, #9]
 80037c2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80037c4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	7a1b      	ldrb	r3, [r3, #8]
 80037ca:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80037cc:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	7812      	ldrb	r2, [r2, #0]
 80037d2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80037d4:	4a04      	ldr	r2, [pc, #16]	@ (80037e8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80037d6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80037d8:	6113      	str	r3, [r2, #16]
}
 80037da:	bf00      	nop
 80037dc:	370c      	adds	r7, #12
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	e000ed90 	.word	0xe000ed90

080037ec <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b086      	sub	sp, #24
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80037f4:	f7ff fe42 	bl	800347c <HAL_GetTick>
 80037f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d101      	bne.n	8003804 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e37d      	b.n	8003f00 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a66      	ldr	r2, [pc, #408]	@ (80039a4 <HAL_DMA_Init+0x1b8>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d04a      	beq.n	80038a4 <HAL_DMA_Init+0xb8>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a65      	ldr	r2, [pc, #404]	@ (80039a8 <HAL_DMA_Init+0x1bc>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d045      	beq.n	80038a4 <HAL_DMA_Init+0xb8>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a63      	ldr	r2, [pc, #396]	@ (80039ac <HAL_DMA_Init+0x1c0>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d040      	beq.n	80038a4 <HAL_DMA_Init+0xb8>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a62      	ldr	r2, [pc, #392]	@ (80039b0 <HAL_DMA_Init+0x1c4>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d03b      	beq.n	80038a4 <HAL_DMA_Init+0xb8>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a60      	ldr	r2, [pc, #384]	@ (80039b4 <HAL_DMA_Init+0x1c8>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d036      	beq.n	80038a4 <HAL_DMA_Init+0xb8>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a5f      	ldr	r2, [pc, #380]	@ (80039b8 <HAL_DMA_Init+0x1cc>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d031      	beq.n	80038a4 <HAL_DMA_Init+0xb8>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a5d      	ldr	r2, [pc, #372]	@ (80039bc <HAL_DMA_Init+0x1d0>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d02c      	beq.n	80038a4 <HAL_DMA_Init+0xb8>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a5c      	ldr	r2, [pc, #368]	@ (80039c0 <HAL_DMA_Init+0x1d4>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d027      	beq.n	80038a4 <HAL_DMA_Init+0xb8>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a5a      	ldr	r2, [pc, #360]	@ (80039c4 <HAL_DMA_Init+0x1d8>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d022      	beq.n	80038a4 <HAL_DMA_Init+0xb8>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a59      	ldr	r2, [pc, #356]	@ (80039c8 <HAL_DMA_Init+0x1dc>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d01d      	beq.n	80038a4 <HAL_DMA_Init+0xb8>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a57      	ldr	r2, [pc, #348]	@ (80039cc <HAL_DMA_Init+0x1e0>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d018      	beq.n	80038a4 <HAL_DMA_Init+0xb8>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a56      	ldr	r2, [pc, #344]	@ (80039d0 <HAL_DMA_Init+0x1e4>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d013      	beq.n	80038a4 <HAL_DMA_Init+0xb8>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a54      	ldr	r2, [pc, #336]	@ (80039d4 <HAL_DMA_Init+0x1e8>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d00e      	beq.n	80038a4 <HAL_DMA_Init+0xb8>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a53      	ldr	r2, [pc, #332]	@ (80039d8 <HAL_DMA_Init+0x1ec>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d009      	beq.n	80038a4 <HAL_DMA_Init+0xb8>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a51      	ldr	r2, [pc, #324]	@ (80039dc <HAL_DMA_Init+0x1f0>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d004      	beq.n	80038a4 <HAL_DMA_Init+0xb8>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a50      	ldr	r2, [pc, #320]	@ (80039e0 <HAL_DMA_Init+0x1f4>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d101      	bne.n	80038a8 <HAL_DMA_Init+0xbc>
 80038a4:	2301      	movs	r3, #1
 80038a6:	e000      	b.n	80038aa <HAL_DMA_Init+0xbe>
 80038a8:	2300      	movs	r3, #0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	f000 813c 	beq.w	8003b28 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2202      	movs	r2, #2
 80038b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a37      	ldr	r2, [pc, #220]	@ (80039a4 <HAL_DMA_Init+0x1b8>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d04a      	beq.n	8003960 <HAL_DMA_Init+0x174>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a36      	ldr	r2, [pc, #216]	@ (80039a8 <HAL_DMA_Init+0x1bc>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d045      	beq.n	8003960 <HAL_DMA_Init+0x174>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a34      	ldr	r2, [pc, #208]	@ (80039ac <HAL_DMA_Init+0x1c0>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d040      	beq.n	8003960 <HAL_DMA_Init+0x174>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a33      	ldr	r2, [pc, #204]	@ (80039b0 <HAL_DMA_Init+0x1c4>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d03b      	beq.n	8003960 <HAL_DMA_Init+0x174>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a31      	ldr	r2, [pc, #196]	@ (80039b4 <HAL_DMA_Init+0x1c8>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d036      	beq.n	8003960 <HAL_DMA_Init+0x174>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a30      	ldr	r2, [pc, #192]	@ (80039b8 <HAL_DMA_Init+0x1cc>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d031      	beq.n	8003960 <HAL_DMA_Init+0x174>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a2e      	ldr	r2, [pc, #184]	@ (80039bc <HAL_DMA_Init+0x1d0>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d02c      	beq.n	8003960 <HAL_DMA_Init+0x174>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a2d      	ldr	r2, [pc, #180]	@ (80039c0 <HAL_DMA_Init+0x1d4>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d027      	beq.n	8003960 <HAL_DMA_Init+0x174>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a2b      	ldr	r2, [pc, #172]	@ (80039c4 <HAL_DMA_Init+0x1d8>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d022      	beq.n	8003960 <HAL_DMA_Init+0x174>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a2a      	ldr	r2, [pc, #168]	@ (80039c8 <HAL_DMA_Init+0x1dc>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d01d      	beq.n	8003960 <HAL_DMA_Init+0x174>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a28      	ldr	r2, [pc, #160]	@ (80039cc <HAL_DMA_Init+0x1e0>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d018      	beq.n	8003960 <HAL_DMA_Init+0x174>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a27      	ldr	r2, [pc, #156]	@ (80039d0 <HAL_DMA_Init+0x1e4>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d013      	beq.n	8003960 <HAL_DMA_Init+0x174>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a25      	ldr	r2, [pc, #148]	@ (80039d4 <HAL_DMA_Init+0x1e8>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d00e      	beq.n	8003960 <HAL_DMA_Init+0x174>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a24      	ldr	r2, [pc, #144]	@ (80039d8 <HAL_DMA_Init+0x1ec>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d009      	beq.n	8003960 <HAL_DMA_Init+0x174>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a22      	ldr	r2, [pc, #136]	@ (80039dc <HAL_DMA_Init+0x1f0>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d004      	beq.n	8003960 <HAL_DMA_Init+0x174>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a21      	ldr	r2, [pc, #132]	@ (80039e0 <HAL_DMA_Init+0x1f4>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d108      	bne.n	8003972 <HAL_DMA_Init+0x186>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f022 0201 	bic.w	r2, r2, #1
 800396e:	601a      	str	r2, [r3, #0]
 8003970:	e007      	b.n	8003982 <HAL_DMA_Init+0x196>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f022 0201 	bic.w	r2, r2, #1
 8003980:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003982:	e02f      	b.n	80039e4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003984:	f7ff fd7a 	bl	800347c <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b05      	cmp	r3, #5
 8003990:	d928      	bls.n	80039e4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2220      	movs	r2, #32
 8003996:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2203      	movs	r2, #3
 800399c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e2ad      	b.n	8003f00 <HAL_DMA_Init+0x714>
 80039a4:	40020010 	.word	0x40020010
 80039a8:	40020028 	.word	0x40020028
 80039ac:	40020040 	.word	0x40020040
 80039b0:	40020058 	.word	0x40020058
 80039b4:	40020070 	.word	0x40020070
 80039b8:	40020088 	.word	0x40020088
 80039bc:	400200a0 	.word	0x400200a0
 80039c0:	400200b8 	.word	0x400200b8
 80039c4:	40020410 	.word	0x40020410
 80039c8:	40020428 	.word	0x40020428
 80039cc:	40020440 	.word	0x40020440
 80039d0:	40020458 	.word	0x40020458
 80039d4:	40020470 	.word	0x40020470
 80039d8:	40020488 	.word	0x40020488
 80039dc:	400204a0 	.word	0x400204a0
 80039e0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1c8      	bne.n	8003984 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	4b73      	ldr	r3, [pc, #460]	@ (8003bcc <HAL_DMA_Init+0x3e0>)
 80039fe:	4013      	ands	r3, r2
 8003a00:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003a0a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	691b      	ldr	r3, [r3, #16]
 8003a10:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a16:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a22:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a1b      	ldr	r3, [r3, #32]
 8003a28:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003a2a:	697a      	ldr	r2, [r7, #20]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a34:	2b04      	cmp	r3, #4
 8003a36:	d107      	bne.n	8003a48 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a40:	4313      	orrs	r3, r2
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	2b28      	cmp	r3, #40	@ 0x28
 8003a4e:	d903      	bls.n	8003a58 <HAL_DMA_Init+0x26c>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	2b2e      	cmp	r3, #46	@ 0x2e
 8003a56:	d91f      	bls.n	8003a98 <HAL_DMA_Init+0x2ac>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	2b3e      	cmp	r3, #62	@ 0x3e
 8003a5e:	d903      	bls.n	8003a68 <HAL_DMA_Init+0x27c>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	2b42      	cmp	r3, #66	@ 0x42
 8003a66:	d917      	bls.n	8003a98 <HAL_DMA_Init+0x2ac>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	2b46      	cmp	r3, #70	@ 0x46
 8003a6e:	d903      	bls.n	8003a78 <HAL_DMA_Init+0x28c>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	2b48      	cmp	r3, #72	@ 0x48
 8003a76:	d90f      	bls.n	8003a98 <HAL_DMA_Init+0x2ac>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	2b4e      	cmp	r3, #78	@ 0x4e
 8003a7e:	d903      	bls.n	8003a88 <HAL_DMA_Init+0x29c>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	2b52      	cmp	r3, #82	@ 0x52
 8003a86:	d907      	bls.n	8003a98 <HAL_DMA_Init+0x2ac>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	2b73      	cmp	r3, #115	@ 0x73
 8003a8e:	d905      	bls.n	8003a9c <HAL_DMA_Init+0x2b0>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	2b77      	cmp	r3, #119	@ 0x77
 8003a96:	d801      	bhi.n	8003a9c <HAL_DMA_Init+0x2b0>
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e000      	b.n	8003a9e <HAL_DMA_Init+0x2b2>
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d003      	beq.n	8003aaa <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003aa8:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	697a      	ldr	r2, [r7, #20]
 8003ab0:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	695b      	ldr	r3, [r3, #20]
 8003ab8:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	f023 0307 	bic.w	r3, r3, #7
 8003ac0:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac6:	697a      	ldr	r2, [r7, #20]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad0:	2b04      	cmp	r3, #4
 8003ad2:	d117      	bne.n	8003b04 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ad8:	697a      	ldr	r2, [r7, #20]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00e      	beq.n	8003b04 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f002 fbd4 	bl	8006294 <DMA_CheckFifoParam>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d008      	beq.n	8003b04 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2240      	movs	r2, #64	@ 0x40
 8003af6:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e1fd      	b.n	8003f00 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	697a      	ldr	r2, [r7, #20]
 8003b0a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f002 fb0f 	bl	8006130 <DMA_CalcBaseAndBitshift>
 8003b12:	4603      	mov	r3, r0
 8003b14:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b1a:	f003 031f 	and.w	r3, r3, #31
 8003b1e:	223f      	movs	r2, #63	@ 0x3f
 8003b20:	409a      	lsls	r2, r3
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	609a      	str	r2, [r3, #8]
 8003b26:	e0fd      	b.n	8003d24 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a28      	ldr	r2, [pc, #160]	@ (8003bd0 <HAL_DMA_Init+0x3e4>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d04a      	beq.n	8003bc8 <HAL_DMA_Init+0x3dc>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a27      	ldr	r2, [pc, #156]	@ (8003bd4 <HAL_DMA_Init+0x3e8>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d045      	beq.n	8003bc8 <HAL_DMA_Init+0x3dc>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a25      	ldr	r2, [pc, #148]	@ (8003bd8 <HAL_DMA_Init+0x3ec>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d040      	beq.n	8003bc8 <HAL_DMA_Init+0x3dc>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a24      	ldr	r2, [pc, #144]	@ (8003bdc <HAL_DMA_Init+0x3f0>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d03b      	beq.n	8003bc8 <HAL_DMA_Init+0x3dc>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a22      	ldr	r2, [pc, #136]	@ (8003be0 <HAL_DMA_Init+0x3f4>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d036      	beq.n	8003bc8 <HAL_DMA_Init+0x3dc>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a21      	ldr	r2, [pc, #132]	@ (8003be4 <HAL_DMA_Init+0x3f8>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d031      	beq.n	8003bc8 <HAL_DMA_Init+0x3dc>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a1f      	ldr	r2, [pc, #124]	@ (8003be8 <HAL_DMA_Init+0x3fc>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d02c      	beq.n	8003bc8 <HAL_DMA_Init+0x3dc>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a1e      	ldr	r2, [pc, #120]	@ (8003bec <HAL_DMA_Init+0x400>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d027      	beq.n	8003bc8 <HAL_DMA_Init+0x3dc>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a1c      	ldr	r2, [pc, #112]	@ (8003bf0 <HAL_DMA_Init+0x404>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d022      	beq.n	8003bc8 <HAL_DMA_Init+0x3dc>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a1b      	ldr	r2, [pc, #108]	@ (8003bf4 <HAL_DMA_Init+0x408>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d01d      	beq.n	8003bc8 <HAL_DMA_Init+0x3dc>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a19      	ldr	r2, [pc, #100]	@ (8003bf8 <HAL_DMA_Init+0x40c>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d018      	beq.n	8003bc8 <HAL_DMA_Init+0x3dc>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a18      	ldr	r2, [pc, #96]	@ (8003bfc <HAL_DMA_Init+0x410>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d013      	beq.n	8003bc8 <HAL_DMA_Init+0x3dc>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a16      	ldr	r2, [pc, #88]	@ (8003c00 <HAL_DMA_Init+0x414>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d00e      	beq.n	8003bc8 <HAL_DMA_Init+0x3dc>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a15      	ldr	r2, [pc, #84]	@ (8003c04 <HAL_DMA_Init+0x418>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d009      	beq.n	8003bc8 <HAL_DMA_Init+0x3dc>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a13      	ldr	r2, [pc, #76]	@ (8003c08 <HAL_DMA_Init+0x41c>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d004      	beq.n	8003bc8 <HAL_DMA_Init+0x3dc>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a12      	ldr	r2, [pc, #72]	@ (8003c0c <HAL_DMA_Init+0x420>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d123      	bne.n	8003c10 <HAL_DMA_Init+0x424>
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e022      	b.n	8003c12 <HAL_DMA_Init+0x426>
 8003bcc:	fe10803f 	.word	0xfe10803f
 8003bd0:	48022c08 	.word	0x48022c08
 8003bd4:	48022c1c 	.word	0x48022c1c
 8003bd8:	48022c30 	.word	0x48022c30
 8003bdc:	48022c44 	.word	0x48022c44
 8003be0:	48022c58 	.word	0x48022c58
 8003be4:	48022c6c 	.word	0x48022c6c
 8003be8:	48022c80 	.word	0x48022c80
 8003bec:	48022c94 	.word	0x48022c94
 8003bf0:	58025408 	.word	0x58025408
 8003bf4:	5802541c 	.word	0x5802541c
 8003bf8:	58025430 	.word	0x58025430
 8003bfc:	58025444 	.word	0x58025444
 8003c00:	58025458 	.word	0x58025458
 8003c04:	5802546c 	.word	0x5802546c
 8003c08:	58025480 	.word	0x58025480
 8003c0c:	58025494 	.word	0x58025494
 8003c10:	2300      	movs	r3, #0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d07d      	beq.n	8003d12 <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a7f      	ldr	r2, [pc, #508]	@ (8003e18 <HAL_DMA_Init+0x62c>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d021      	beq.n	8003c64 <HAL_DMA_Init+0x478>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a7d      	ldr	r2, [pc, #500]	@ (8003e1c <HAL_DMA_Init+0x630>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d01c      	beq.n	8003c64 <HAL_DMA_Init+0x478>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a7c      	ldr	r2, [pc, #496]	@ (8003e20 <HAL_DMA_Init+0x634>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d017      	beq.n	8003c64 <HAL_DMA_Init+0x478>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a7a      	ldr	r2, [pc, #488]	@ (8003e24 <HAL_DMA_Init+0x638>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d012      	beq.n	8003c64 <HAL_DMA_Init+0x478>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a79      	ldr	r2, [pc, #484]	@ (8003e28 <HAL_DMA_Init+0x63c>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d00d      	beq.n	8003c64 <HAL_DMA_Init+0x478>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a77      	ldr	r2, [pc, #476]	@ (8003e2c <HAL_DMA_Init+0x640>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d008      	beq.n	8003c64 <HAL_DMA_Init+0x478>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a76      	ldr	r2, [pc, #472]	@ (8003e30 <HAL_DMA_Init+0x644>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d003      	beq.n	8003c64 <HAL_DMA_Init+0x478>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a74      	ldr	r2, [pc, #464]	@ (8003e34 <HAL_DMA_Init+0x648>)
 8003c62:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2202      	movs	r2, #2
 8003c68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003c7c:	697a      	ldr	r2, [r7, #20]
 8003c7e:	4b6e      	ldr	r3, [pc, #440]	@ (8003e38 <HAL_DMA_Init+0x64c>)
 8003c80:	4013      	ands	r3, r2
 8003c82:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	2b40      	cmp	r3, #64	@ 0x40
 8003c8a:	d008      	beq.n	8003c9e <HAL_DMA_Init+0x4b2>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	2b80      	cmp	r3, #128	@ 0x80
 8003c92:	d102      	bne.n	8003c9a <HAL_DMA_Init+0x4ae>
 8003c94:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003c98:	e002      	b.n	8003ca0 <HAL_DMA_Init+0x4b4>
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	e000      	b.n	8003ca0 <HAL_DMA_Init+0x4b4>
 8003c9e:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	68d2      	ldr	r2, [r2, #12]
 8003ca4:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003ca6:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	691b      	ldr	r3, [r3, #16]
 8003cac:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003cae:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	695b      	ldr	r3, [r3, #20]
 8003cb4:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003cb6:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	699b      	ldr	r3, [r3, #24]
 8003cbc:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003cbe:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	69db      	ldr	r3, [r3, #28]
 8003cc4:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003cc6:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a1b      	ldr	r3, [r3, #32]
 8003ccc:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003cce:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003cd0:	697a      	ldr	r2, [r7, #20]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	697a      	ldr	r2, [r7, #20]
 8003cdc:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	4b55      	ldr	r3, [pc, #340]	@ (8003e3c <HAL_DMA_Init+0x650>)
 8003ce6:	4413      	add	r3, r2
 8003ce8:	4a55      	ldr	r2, [pc, #340]	@ (8003e40 <HAL_DMA_Init+0x654>)
 8003cea:	fba2 2303 	umull	r2, r3, r2, r3
 8003cee:	091b      	lsrs	r3, r3, #4
 8003cf0:	009a      	lsls	r2, r3, #2
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f002 fa1a 	bl	8006130 <DMA_CalcBaseAndBitshift>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d04:	f003 031f 	and.w	r3, r3, #31
 8003d08:	2201      	movs	r2, #1
 8003d0a:	409a      	lsls	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	605a      	str	r2, [r3, #4]
 8003d10:	e008      	b.n	8003d24 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2240      	movs	r2, #64	@ 0x40
 8003d16:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2203      	movs	r2, #3
 8003d1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e0ed      	b.n	8003f00 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a46      	ldr	r2, [pc, #280]	@ (8003e44 <HAL_DMA_Init+0x658>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d072      	beq.n	8003e14 <HAL_DMA_Init+0x628>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a45      	ldr	r2, [pc, #276]	@ (8003e48 <HAL_DMA_Init+0x65c>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d06d      	beq.n	8003e14 <HAL_DMA_Init+0x628>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a43      	ldr	r2, [pc, #268]	@ (8003e4c <HAL_DMA_Init+0x660>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d068      	beq.n	8003e14 <HAL_DMA_Init+0x628>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a42      	ldr	r2, [pc, #264]	@ (8003e50 <HAL_DMA_Init+0x664>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d063      	beq.n	8003e14 <HAL_DMA_Init+0x628>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a40      	ldr	r2, [pc, #256]	@ (8003e54 <HAL_DMA_Init+0x668>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d05e      	beq.n	8003e14 <HAL_DMA_Init+0x628>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a3f      	ldr	r2, [pc, #252]	@ (8003e58 <HAL_DMA_Init+0x66c>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d059      	beq.n	8003e14 <HAL_DMA_Init+0x628>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a3d      	ldr	r2, [pc, #244]	@ (8003e5c <HAL_DMA_Init+0x670>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d054      	beq.n	8003e14 <HAL_DMA_Init+0x628>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a3c      	ldr	r2, [pc, #240]	@ (8003e60 <HAL_DMA_Init+0x674>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d04f      	beq.n	8003e14 <HAL_DMA_Init+0x628>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a3a      	ldr	r2, [pc, #232]	@ (8003e64 <HAL_DMA_Init+0x678>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d04a      	beq.n	8003e14 <HAL_DMA_Init+0x628>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a39      	ldr	r2, [pc, #228]	@ (8003e68 <HAL_DMA_Init+0x67c>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d045      	beq.n	8003e14 <HAL_DMA_Init+0x628>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a37      	ldr	r2, [pc, #220]	@ (8003e6c <HAL_DMA_Init+0x680>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d040      	beq.n	8003e14 <HAL_DMA_Init+0x628>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a36      	ldr	r2, [pc, #216]	@ (8003e70 <HAL_DMA_Init+0x684>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d03b      	beq.n	8003e14 <HAL_DMA_Init+0x628>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a34      	ldr	r2, [pc, #208]	@ (8003e74 <HAL_DMA_Init+0x688>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d036      	beq.n	8003e14 <HAL_DMA_Init+0x628>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a33      	ldr	r2, [pc, #204]	@ (8003e78 <HAL_DMA_Init+0x68c>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d031      	beq.n	8003e14 <HAL_DMA_Init+0x628>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a31      	ldr	r2, [pc, #196]	@ (8003e7c <HAL_DMA_Init+0x690>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d02c      	beq.n	8003e14 <HAL_DMA_Init+0x628>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a30      	ldr	r2, [pc, #192]	@ (8003e80 <HAL_DMA_Init+0x694>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d027      	beq.n	8003e14 <HAL_DMA_Init+0x628>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a13      	ldr	r2, [pc, #76]	@ (8003e18 <HAL_DMA_Init+0x62c>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d022      	beq.n	8003e14 <HAL_DMA_Init+0x628>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a12      	ldr	r2, [pc, #72]	@ (8003e1c <HAL_DMA_Init+0x630>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d01d      	beq.n	8003e14 <HAL_DMA_Init+0x628>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a10      	ldr	r2, [pc, #64]	@ (8003e20 <HAL_DMA_Init+0x634>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d018      	beq.n	8003e14 <HAL_DMA_Init+0x628>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a0f      	ldr	r2, [pc, #60]	@ (8003e24 <HAL_DMA_Init+0x638>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d013      	beq.n	8003e14 <HAL_DMA_Init+0x628>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a0d      	ldr	r2, [pc, #52]	@ (8003e28 <HAL_DMA_Init+0x63c>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d00e      	beq.n	8003e14 <HAL_DMA_Init+0x628>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a0c      	ldr	r2, [pc, #48]	@ (8003e2c <HAL_DMA_Init+0x640>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d009      	beq.n	8003e14 <HAL_DMA_Init+0x628>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a0a      	ldr	r2, [pc, #40]	@ (8003e30 <HAL_DMA_Init+0x644>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d004      	beq.n	8003e14 <HAL_DMA_Init+0x628>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a09      	ldr	r2, [pc, #36]	@ (8003e34 <HAL_DMA_Init+0x648>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d137      	bne.n	8003e84 <HAL_DMA_Init+0x698>
 8003e14:	2301      	movs	r3, #1
 8003e16:	e036      	b.n	8003e86 <HAL_DMA_Init+0x69a>
 8003e18:	58025408 	.word	0x58025408
 8003e1c:	5802541c 	.word	0x5802541c
 8003e20:	58025430 	.word	0x58025430
 8003e24:	58025444 	.word	0x58025444
 8003e28:	58025458 	.word	0x58025458
 8003e2c:	5802546c 	.word	0x5802546c
 8003e30:	58025480 	.word	0x58025480
 8003e34:	58025494 	.word	0x58025494
 8003e38:	fffe000f 	.word	0xfffe000f
 8003e3c:	a7fdabf8 	.word	0xa7fdabf8
 8003e40:	cccccccd 	.word	0xcccccccd
 8003e44:	40020010 	.word	0x40020010
 8003e48:	40020028 	.word	0x40020028
 8003e4c:	40020040 	.word	0x40020040
 8003e50:	40020058 	.word	0x40020058
 8003e54:	40020070 	.word	0x40020070
 8003e58:	40020088 	.word	0x40020088
 8003e5c:	400200a0 	.word	0x400200a0
 8003e60:	400200b8 	.word	0x400200b8
 8003e64:	40020410 	.word	0x40020410
 8003e68:	40020428 	.word	0x40020428
 8003e6c:	40020440 	.word	0x40020440
 8003e70:	40020458 	.word	0x40020458
 8003e74:	40020470 	.word	0x40020470
 8003e78:	40020488 	.word	0x40020488
 8003e7c:	400204a0 	.word	0x400204a0
 8003e80:	400204b8 	.word	0x400204b8
 8003e84:	2300      	movs	r3, #0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d032      	beq.n	8003ef0 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f002 fa7e 	bl	800638c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	2b80      	cmp	r3, #128	@ 0x80
 8003e96:	d102      	bne.n	8003e9e <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685a      	ldr	r2, [r3, #4]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ea6:	b2d2      	uxtb	r2, r2
 8003ea8:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003eb2:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d010      	beq.n	8003ede <HAL_DMA_Init+0x6f2>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	2b08      	cmp	r3, #8
 8003ec2:	d80c      	bhi.n	8003ede <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f002 fafb 	bl	80064c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ece:	2200      	movs	r2, #0
 8003ed0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003eda:	605a      	str	r2, [r3, #4]
 8003edc:	e008      	b.n	8003ef0 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003efe:	2300      	movs	r3, #0
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3718      	adds	r7, #24
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b086      	sub	sp, #24
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	607a      	str	r2, [r7, #4]
 8003f14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f16:	2300      	movs	r3, #0
 8003f18:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d101      	bne.n	8003f24 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e226      	b.n	8004372 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d101      	bne.n	8003f32 <HAL_DMA_Start_IT+0x2a>
 8003f2e:	2302      	movs	r3, #2
 8003f30:	e21f      	b.n	8004372 <HAL_DMA_Start_IT+0x46a>
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2201      	movs	r2, #1
 8003f36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	f040 820a 	bne.w	800435c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2202      	movs	r2, #2
 8003f4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2200      	movs	r2, #0
 8003f54:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a68      	ldr	r2, [pc, #416]	@ (80040fc <HAL_DMA_Start_IT+0x1f4>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d04a      	beq.n	8003ff6 <HAL_DMA_Start_IT+0xee>
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a66      	ldr	r2, [pc, #408]	@ (8004100 <HAL_DMA_Start_IT+0x1f8>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d045      	beq.n	8003ff6 <HAL_DMA_Start_IT+0xee>
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a65      	ldr	r2, [pc, #404]	@ (8004104 <HAL_DMA_Start_IT+0x1fc>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d040      	beq.n	8003ff6 <HAL_DMA_Start_IT+0xee>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a63      	ldr	r2, [pc, #396]	@ (8004108 <HAL_DMA_Start_IT+0x200>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d03b      	beq.n	8003ff6 <HAL_DMA_Start_IT+0xee>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a62      	ldr	r2, [pc, #392]	@ (800410c <HAL_DMA_Start_IT+0x204>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d036      	beq.n	8003ff6 <HAL_DMA_Start_IT+0xee>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a60      	ldr	r2, [pc, #384]	@ (8004110 <HAL_DMA_Start_IT+0x208>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d031      	beq.n	8003ff6 <HAL_DMA_Start_IT+0xee>
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a5f      	ldr	r2, [pc, #380]	@ (8004114 <HAL_DMA_Start_IT+0x20c>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d02c      	beq.n	8003ff6 <HAL_DMA_Start_IT+0xee>
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a5d      	ldr	r2, [pc, #372]	@ (8004118 <HAL_DMA_Start_IT+0x210>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d027      	beq.n	8003ff6 <HAL_DMA_Start_IT+0xee>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a5c      	ldr	r2, [pc, #368]	@ (800411c <HAL_DMA_Start_IT+0x214>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d022      	beq.n	8003ff6 <HAL_DMA_Start_IT+0xee>
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a5a      	ldr	r2, [pc, #360]	@ (8004120 <HAL_DMA_Start_IT+0x218>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d01d      	beq.n	8003ff6 <HAL_DMA_Start_IT+0xee>
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a59      	ldr	r2, [pc, #356]	@ (8004124 <HAL_DMA_Start_IT+0x21c>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d018      	beq.n	8003ff6 <HAL_DMA_Start_IT+0xee>
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a57      	ldr	r2, [pc, #348]	@ (8004128 <HAL_DMA_Start_IT+0x220>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d013      	beq.n	8003ff6 <HAL_DMA_Start_IT+0xee>
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a56      	ldr	r2, [pc, #344]	@ (800412c <HAL_DMA_Start_IT+0x224>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d00e      	beq.n	8003ff6 <HAL_DMA_Start_IT+0xee>
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a54      	ldr	r2, [pc, #336]	@ (8004130 <HAL_DMA_Start_IT+0x228>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d009      	beq.n	8003ff6 <HAL_DMA_Start_IT+0xee>
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a53      	ldr	r2, [pc, #332]	@ (8004134 <HAL_DMA_Start_IT+0x22c>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d004      	beq.n	8003ff6 <HAL_DMA_Start_IT+0xee>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a51      	ldr	r2, [pc, #324]	@ (8004138 <HAL_DMA_Start_IT+0x230>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d108      	bne.n	8004008 <HAL_DMA_Start_IT+0x100>
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f022 0201 	bic.w	r2, r2, #1
 8004004:	601a      	str	r2, [r3, #0]
 8004006:	e007      	b.n	8004018 <HAL_DMA_Start_IT+0x110>
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f022 0201 	bic.w	r2, r2, #1
 8004016:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	68b9      	ldr	r1, [r7, #8]
 800401e:	68f8      	ldr	r0, [r7, #12]
 8004020:	f001 fea2 	bl	8005d68 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a34      	ldr	r2, [pc, #208]	@ (80040fc <HAL_DMA_Start_IT+0x1f4>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d04a      	beq.n	80040c4 <HAL_DMA_Start_IT+0x1bc>
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a33      	ldr	r2, [pc, #204]	@ (8004100 <HAL_DMA_Start_IT+0x1f8>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d045      	beq.n	80040c4 <HAL_DMA_Start_IT+0x1bc>
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a31      	ldr	r2, [pc, #196]	@ (8004104 <HAL_DMA_Start_IT+0x1fc>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d040      	beq.n	80040c4 <HAL_DMA_Start_IT+0x1bc>
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a30      	ldr	r2, [pc, #192]	@ (8004108 <HAL_DMA_Start_IT+0x200>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d03b      	beq.n	80040c4 <HAL_DMA_Start_IT+0x1bc>
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a2e      	ldr	r2, [pc, #184]	@ (800410c <HAL_DMA_Start_IT+0x204>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d036      	beq.n	80040c4 <HAL_DMA_Start_IT+0x1bc>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a2d      	ldr	r2, [pc, #180]	@ (8004110 <HAL_DMA_Start_IT+0x208>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d031      	beq.n	80040c4 <HAL_DMA_Start_IT+0x1bc>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a2b      	ldr	r2, [pc, #172]	@ (8004114 <HAL_DMA_Start_IT+0x20c>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d02c      	beq.n	80040c4 <HAL_DMA_Start_IT+0x1bc>
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a2a      	ldr	r2, [pc, #168]	@ (8004118 <HAL_DMA_Start_IT+0x210>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d027      	beq.n	80040c4 <HAL_DMA_Start_IT+0x1bc>
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a28      	ldr	r2, [pc, #160]	@ (800411c <HAL_DMA_Start_IT+0x214>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d022      	beq.n	80040c4 <HAL_DMA_Start_IT+0x1bc>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a27      	ldr	r2, [pc, #156]	@ (8004120 <HAL_DMA_Start_IT+0x218>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d01d      	beq.n	80040c4 <HAL_DMA_Start_IT+0x1bc>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a25      	ldr	r2, [pc, #148]	@ (8004124 <HAL_DMA_Start_IT+0x21c>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d018      	beq.n	80040c4 <HAL_DMA_Start_IT+0x1bc>
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a24      	ldr	r2, [pc, #144]	@ (8004128 <HAL_DMA_Start_IT+0x220>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d013      	beq.n	80040c4 <HAL_DMA_Start_IT+0x1bc>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a22      	ldr	r2, [pc, #136]	@ (800412c <HAL_DMA_Start_IT+0x224>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d00e      	beq.n	80040c4 <HAL_DMA_Start_IT+0x1bc>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a21      	ldr	r2, [pc, #132]	@ (8004130 <HAL_DMA_Start_IT+0x228>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d009      	beq.n	80040c4 <HAL_DMA_Start_IT+0x1bc>
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a1f      	ldr	r2, [pc, #124]	@ (8004134 <HAL_DMA_Start_IT+0x22c>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d004      	beq.n	80040c4 <HAL_DMA_Start_IT+0x1bc>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a1e      	ldr	r2, [pc, #120]	@ (8004138 <HAL_DMA_Start_IT+0x230>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d101      	bne.n	80040c8 <HAL_DMA_Start_IT+0x1c0>
 80040c4:	2301      	movs	r3, #1
 80040c6:	e000      	b.n	80040ca <HAL_DMA_Start_IT+0x1c2>
 80040c8:	2300      	movs	r3, #0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d036      	beq.n	800413c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f023 021e 	bic.w	r2, r3, #30
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f042 0216 	orr.w	r2, r2, #22
 80040e0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d03e      	beq.n	8004168 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f042 0208 	orr.w	r2, r2, #8
 80040f8:	601a      	str	r2, [r3, #0]
 80040fa:	e035      	b.n	8004168 <HAL_DMA_Start_IT+0x260>
 80040fc:	40020010 	.word	0x40020010
 8004100:	40020028 	.word	0x40020028
 8004104:	40020040 	.word	0x40020040
 8004108:	40020058 	.word	0x40020058
 800410c:	40020070 	.word	0x40020070
 8004110:	40020088 	.word	0x40020088
 8004114:	400200a0 	.word	0x400200a0
 8004118:	400200b8 	.word	0x400200b8
 800411c:	40020410 	.word	0x40020410
 8004120:	40020428 	.word	0x40020428
 8004124:	40020440 	.word	0x40020440
 8004128:	40020458 	.word	0x40020458
 800412c:	40020470 	.word	0x40020470
 8004130:	40020488 	.word	0x40020488
 8004134:	400204a0 	.word	0x400204a0
 8004138:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f023 020e 	bic.w	r2, r3, #14
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f042 020a 	orr.w	r2, r2, #10
 800414e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004154:	2b00      	cmp	r3, #0
 8004156:	d007      	beq.n	8004168 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f042 0204 	orr.w	r2, r2, #4
 8004166:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a83      	ldr	r2, [pc, #524]	@ (800437c <HAL_DMA_Start_IT+0x474>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d072      	beq.n	8004258 <HAL_DMA_Start_IT+0x350>
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a82      	ldr	r2, [pc, #520]	@ (8004380 <HAL_DMA_Start_IT+0x478>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d06d      	beq.n	8004258 <HAL_DMA_Start_IT+0x350>
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a80      	ldr	r2, [pc, #512]	@ (8004384 <HAL_DMA_Start_IT+0x47c>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d068      	beq.n	8004258 <HAL_DMA_Start_IT+0x350>
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a7f      	ldr	r2, [pc, #508]	@ (8004388 <HAL_DMA_Start_IT+0x480>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d063      	beq.n	8004258 <HAL_DMA_Start_IT+0x350>
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a7d      	ldr	r2, [pc, #500]	@ (800438c <HAL_DMA_Start_IT+0x484>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d05e      	beq.n	8004258 <HAL_DMA_Start_IT+0x350>
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a7c      	ldr	r2, [pc, #496]	@ (8004390 <HAL_DMA_Start_IT+0x488>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d059      	beq.n	8004258 <HAL_DMA_Start_IT+0x350>
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a7a      	ldr	r2, [pc, #488]	@ (8004394 <HAL_DMA_Start_IT+0x48c>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d054      	beq.n	8004258 <HAL_DMA_Start_IT+0x350>
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a79      	ldr	r2, [pc, #484]	@ (8004398 <HAL_DMA_Start_IT+0x490>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d04f      	beq.n	8004258 <HAL_DMA_Start_IT+0x350>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a77      	ldr	r2, [pc, #476]	@ (800439c <HAL_DMA_Start_IT+0x494>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d04a      	beq.n	8004258 <HAL_DMA_Start_IT+0x350>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a76      	ldr	r2, [pc, #472]	@ (80043a0 <HAL_DMA_Start_IT+0x498>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d045      	beq.n	8004258 <HAL_DMA_Start_IT+0x350>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a74      	ldr	r2, [pc, #464]	@ (80043a4 <HAL_DMA_Start_IT+0x49c>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d040      	beq.n	8004258 <HAL_DMA_Start_IT+0x350>
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a73      	ldr	r2, [pc, #460]	@ (80043a8 <HAL_DMA_Start_IT+0x4a0>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d03b      	beq.n	8004258 <HAL_DMA_Start_IT+0x350>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a71      	ldr	r2, [pc, #452]	@ (80043ac <HAL_DMA_Start_IT+0x4a4>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d036      	beq.n	8004258 <HAL_DMA_Start_IT+0x350>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a70      	ldr	r2, [pc, #448]	@ (80043b0 <HAL_DMA_Start_IT+0x4a8>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d031      	beq.n	8004258 <HAL_DMA_Start_IT+0x350>
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a6e      	ldr	r2, [pc, #440]	@ (80043b4 <HAL_DMA_Start_IT+0x4ac>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d02c      	beq.n	8004258 <HAL_DMA_Start_IT+0x350>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a6d      	ldr	r2, [pc, #436]	@ (80043b8 <HAL_DMA_Start_IT+0x4b0>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d027      	beq.n	8004258 <HAL_DMA_Start_IT+0x350>
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a6b      	ldr	r2, [pc, #428]	@ (80043bc <HAL_DMA_Start_IT+0x4b4>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d022      	beq.n	8004258 <HAL_DMA_Start_IT+0x350>
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a6a      	ldr	r2, [pc, #424]	@ (80043c0 <HAL_DMA_Start_IT+0x4b8>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d01d      	beq.n	8004258 <HAL_DMA_Start_IT+0x350>
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a68      	ldr	r2, [pc, #416]	@ (80043c4 <HAL_DMA_Start_IT+0x4bc>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d018      	beq.n	8004258 <HAL_DMA_Start_IT+0x350>
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a67      	ldr	r2, [pc, #412]	@ (80043c8 <HAL_DMA_Start_IT+0x4c0>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d013      	beq.n	8004258 <HAL_DMA_Start_IT+0x350>
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a65      	ldr	r2, [pc, #404]	@ (80043cc <HAL_DMA_Start_IT+0x4c4>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d00e      	beq.n	8004258 <HAL_DMA_Start_IT+0x350>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a64      	ldr	r2, [pc, #400]	@ (80043d0 <HAL_DMA_Start_IT+0x4c8>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d009      	beq.n	8004258 <HAL_DMA_Start_IT+0x350>
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a62      	ldr	r2, [pc, #392]	@ (80043d4 <HAL_DMA_Start_IT+0x4cc>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d004      	beq.n	8004258 <HAL_DMA_Start_IT+0x350>
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a61      	ldr	r2, [pc, #388]	@ (80043d8 <HAL_DMA_Start_IT+0x4d0>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d101      	bne.n	800425c <HAL_DMA_Start_IT+0x354>
 8004258:	2301      	movs	r3, #1
 800425a:	e000      	b.n	800425e <HAL_DMA_Start_IT+0x356>
 800425c:	2300      	movs	r3, #0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d01a      	beq.n	8004298 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d007      	beq.n	8004280 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800427a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800427e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004284:	2b00      	cmp	r3, #0
 8004286:	d007      	beq.n	8004298 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004292:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004296:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a37      	ldr	r2, [pc, #220]	@ (800437c <HAL_DMA_Start_IT+0x474>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d04a      	beq.n	8004338 <HAL_DMA_Start_IT+0x430>
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a36      	ldr	r2, [pc, #216]	@ (8004380 <HAL_DMA_Start_IT+0x478>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d045      	beq.n	8004338 <HAL_DMA_Start_IT+0x430>
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a34      	ldr	r2, [pc, #208]	@ (8004384 <HAL_DMA_Start_IT+0x47c>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d040      	beq.n	8004338 <HAL_DMA_Start_IT+0x430>
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a33      	ldr	r2, [pc, #204]	@ (8004388 <HAL_DMA_Start_IT+0x480>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d03b      	beq.n	8004338 <HAL_DMA_Start_IT+0x430>
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a31      	ldr	r2, [pc, #196]	@ (800438c <HAL_DMA_Start_IT+0x484>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d036      	beq.n	8004338 <HAL_DMA_Start_IT+0x430>
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a30      	ldr	r2, [pc, #192]	@ (8004390 <HAL_DMA_Start_IT+0x488>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d031      	beq.n	8004338 <HAL_DMA_Start_IT+0x430>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a2e      	ldr	r2, [pc, #184]	@ (8004394 <HAL_DMA_Start_IT+0x48c>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d02c      	beq.n	8004338 <HAL_DMA_Start_IT+0x430>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a2d      	ldr	r2, [pc, #180]	@ (8004398 <HAL_DMA_Start_IT+0x490>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d027      	beq.n	8004338 <HAL_DMA_Start_IT+0x430>
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a2b      	ldr	r2, [pc, #172]	@ (800439c <HAL_DMA_Start_IT+0x494>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d022      	beq.n	8004338 <HAL_DMA_Start_IT+0x430>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a2a      	ldr	r2, [pc, #168]	@ (80043a0 <HAL_DMA_Start_IT+0x498>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d01d      	beq.n	8004338 <HAL_DMA_Start_IT+0x430>
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a28      	ldr	r2, [pc, #160]	@ (80043a4 <HAL_DMA_Start_IT+0x49c>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d018      	beq.n	8004338 <HAL_DMA_Start_IT+0x430>
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a27      	ldr	r2, [pc, #156]	@ (80043a8 <HAL_DMA_Start_IT+0x4a0>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d013      	beq.n	8004338 <HAL_DMA_Start_IT+0x430>
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a25      	ldr	r2, [pc, #148]	@ (80043ac <HAL_DMA_Start_IT+0x4a4>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d00e      	beq.n	8004338 <HAL_DMA_Start_IT+0x430>
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a24      	ldr	r2, [pc, #144]	@ (80043b0 <HAL_DMA_Start_IT+0x4a8>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d009      	beq.n	8004338 <HAL_DMA_Start_IT+0x430>
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a22      	ldr	r2, [pc, #136]	@ (80043b4 <HAL_DMA_Start_IT+0x4ac>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d004      	beq.n	8004338 <HAL_DMA_Start_IT+0x430>
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a21      	ldr	r2, [pc, #132]	@ (80043b8 <HAL_DMA_Start_IT+0x4b0>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d108      	bne.n	800434a <HAL_DMA_Start_IT+0x442>
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f042 0201 	orr.w	r2, r2, #1
 8004346:	601a      	str	r2, [r3, #0]
 8004348:	e012      	b.n	8004370 <HAL_DMA_Start_IT+0x468>
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f042 0201 	orr.w	r2, r2, #1
 8004358:	601a      	str	r2, [r3, #0]
 800435a:	e009      	b.n	8004370 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004362:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2200      	movs	r2, #0
 8004368:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004370:	7dfb      	ldrb	r3, [r7, #23]
}
 8004372:	4618      	mov	r0, r3
 8004374:	3718      	adds	r7, #24
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	40020010 	.word	0x40020010
 8004380:	40020028 	.word	0x40020028
 8004384:	40020040 	.word	0x40020040
 8004388:	40020058 	.word	0x40020058
 800438c:	40020070 	.word	0x40020070
 8004390:	40020088 	.word	0x40020088
 8004394:	400200a0 	.word	0x400200a0
 8004398:	400200b8 	.word	0x400200b8
 800439c:	40020410 	.word	0x40020410
 80043a0:	40020428 	.word	0x40020428
 80043a4:	40020440 	.word	0x40020440
 80043a8:	40020458 	.word	0x40020458
 80043ac:	40020470 	.word	0x40020470
 80043b0:	40020488 	.word	0x40020488
 80043b4:	400204a0 	.word	0x400204a0
 80043b8:	400204b8 	.word	0x400204b8
 80043bc:	58025408 	.word	0x58025408
 80043c0:	5802541c 	.word	0x5802541c
 80043c4:	58025430 	.word	0x58025430
 80043c8:	58025444 	.word	0x58025444
 80043cc:	58025458 	.word	0x58025458
 80043d0:	5802546c 	.word	0x5802546c
 80043d4:	58025480 	.word	0x58025480
 80043d8:	58025494 	.word	0x58025494

080043dc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b086      	sub	sp, #24
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80043e4:	f7ff f84a 	bl	800347c <HAL_GetTick>
 80043e8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d101      	bne.n	80043f4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e2dc      	b.n	80049ae <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d008      	beq.n	8004412 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2280      	movs	r2, #128	@ 0x80
 8004404:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e2cd      	b.n	80049ae <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a76      	ldr	r2, [pc, #472]	@ (80045f0 <HAL_DMA_Abort+0x214>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d04a      	beq.n	80044b2 <HAL_DMA_Abort+0xd6>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a74      	ldr	r2, [pc, #464]	@ (80045f4 <HAL_DMA_Abort+0x218>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d045      	beq.n	80044b2 <HAL_DMA_Abort+0xd6>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a73      	ldr	r2, [pc, #460]	@ (80045f8 <HAL_DMA_Abort+0x21c>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d040      	beq.n	80044b2 <HAL_DMA_Abort+0xd6>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a71      	ldr	r2, [pc, #452]	@ (80045fc <HAL_DMA_Abort+0x220>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d03b      	beq.n	80044b2 <HAL_DMA_Abort+0xd6>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a70      	ldr	r2, [pc, #448]	@ (8004600 <HAL_DMA_Abort+0x224>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d036      	beq.n	80044b2 <HAL_DMA_Abort+0xd6>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a6e      	ldr	r2, [pc, #440]	@ (8004604 <HAL_DMA_Abort+0x228>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d031      	beq.n	80044b2 <HAL_DMA_Abort+0xd6>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a6d      	ldr	r2, [pc, #436]	@ (8004608 <HAL_DMA_Abort+0x22c>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d02c      	beq.n	80044b2 <HAL_DMA_Abort+0xd6>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a6b      	ldr	r2, [pc, #428]	@ (800460c <HAL_DMA_Abort+0x230>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d027      	beq.n	80044b2 <HAL_DMA_Abort+0xd6>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a6a      	ldr	r2, [pc, #424]	@ (8004610 <HAL_DMA_Abort+0x234>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d022      	beq.n	80044b2 <HAL_DMA_Abort+0xd6>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a68      	ldr	r2, [pc, #416]	@ (8004614 <HAL_DMA_Abort+0x238>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d01d      	beq.n	80044b2 <HAL_DMA_Abort+0xd6>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a67      	ldr	r2, [pc, #412]	@ (8004618 <HAL_DMA_Abort+0x23c>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d018      	beq.n	80044b2 <HAL_DMA_Abort+0xd6>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a65      	ldr	r2, [pc, #404]	@ (800461c <HAL_DMA_Abort+0x240>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d013      	beq.n	80044b2 <HAL_DMA_Abort+0xd6>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a64      	ldr	r2, [pc, #400]	@ (8004620 <HAL_DMA_Abort+0x244>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d00e      	beq.n	80044b2 <HAL_DMA_Abort+0xd6>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a62      	ldr	r2, [pc, #392]	@ (8004624 <HAL_DMA_Abort+0x248>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d009      	beq.n	80044b2 <HAL_DMA_Abort+0xd6>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a61      	ldr	r2, [pc, #388]	@ (8004628 <HAL_DMA_Abort+0x24c>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d004      	beq.n	80044b2 <HAL_DMA_Abort+0xd6>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a5f      	ldr	r2, [pc, #380]	@ (800462c <HAL_DMA_Abort+0x250>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d101      	bne.n	80044b6 <HAL_DMA_Abort+0xda>
 80044b2:	2301      	movs	r3, #1
 80044b4:	e000      	b.n	80044b8 <HAL_DMA_Abort+0xdc>
 80044b6:	2300      	movs	r3, #0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d013      	beq.n	80044e4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f022 021e 	bic.w	r2, r2, #30
 80044ca:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	695a      	ldr	r2, [r3, #20]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80044da:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	617b      	str	r3, [r7, #20]
 80044e2:	e00a      	b.n	80044fa <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f022 020e 	bic.w	r2, r2, #14
 80044f2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a3c      	ldr	r2, [pc, #240]	@ (80045f0 <HAL_DMA_Abort+0x214>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d072      	beq.n	80045ea <HAL_DMA_Abort+0x20e>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a3a      	ldr	r2, [pc, #232]	@ (80045f4 <HAL_DMA_Abort+0x218>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d06d      	beq.n	80045ea <HAL_DMA_Abort+0x20e>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a39      	ldr	r2, [pc, #228]	@ (80045f8 <HAL_DMA_Abort+0x21c>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d068      	beq.n	80045ea <HAL_DMA_Abort+0x20e>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a37      	ldr	r2, [pc, #220]	@ (80045fc <HAL_DMA_Abort+0x220>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d063      	beq.n	80045ea <HAL_DMA_Abort+0x20e>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a36      	ldr	r2, [pc, #216]	@ (8004600 <HAL_DMA_Abort+0x224>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d05e      	beq.n	80045ea <HAL_DMA_Abort+0x20e>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a34      	ldr	r2, [pc, #208]	@ (8004604 <HAL_DMA_Abort+0x228>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d059      	beq.n	80045ea <HAL_DMA_Abort+0x20e>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a33      	ldr	r2, [pc, #204]	@ (8004608 <HAL_DMA_Abort+0x22c>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d054      	beq.n	80045ea <HAL_DMA_Abort+0x20e>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a31      	ldr	r2, [pc, #196]	@ (800460c <HAL_DMA_Abort+0x230>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d04f      	beq.n	80045ea <HAL_DMA_Abort+0x20e>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a30      	ldr	r2, [pc, #192]	@ (8004610 <HAL_DMA_Abort+0x234>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d04a      	beq.n	80045ea <HAL_DMA_Abort+0x20e>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a2e      	ldr	r2, [pc, #184]	@ (8004614 <HAL_DMA_Abort+0x238>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d045      	beq.n	80045ea <HAL_DMA_Abort+0x20e>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a2d      	ldr	r2, [pc, #180]	@ (8004618 <HAL_DMA_Abort+0x23c>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d040      	beq.n	80045ea <HAL_DMA_Abort+0x20e>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a2b      	ldr	r2, [pc, #172]	@ (800461c <HAL_DMA_Abort+0x240>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d03b      	beq.n	80045ea <HAL_DMA_Abort+0x20e>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a2a      	ldr	r2, [pc, #168]	@ (8004620 <HAL_DMA_Abort+0x244>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d036      	beq.n	80045ea <HAL_DMA_Abort+0x20e>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a28      	ldr	r2, [pc, #160]	@ (8004624 <HAL_DMA_Abort+0x248>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d031      	beq.n	80045ea <HAL_DMA_Abort+0x20e>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a27      	ldr	r2, [pc, #156]	@ (8004628 <HAL_DMA_Abort+0x24c>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d02c      	beq.n	80045ea <HAL_DMA_Abort+0x20e>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a25      	ldr	r2, [pc, #148]	@ (800462c <HAL_DMA_Abort+0x250>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d027      	beq.n	80045ea <HAL_DMA_Abort+0x20e>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a24      	ldr	r2, [pc, #144]	@ (8004630 <HAL_DMA_Abort+0x254>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d022      	beq.n	80045ea <HAL_DMA_Abort+0x20e>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a22      	ldr	r2, [pc, #136]	@ (8004634 <HAL_DMA_Abort+0x258>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d01d      	beq.n	80045ea <HAL_DMA_Abort+0x20e>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a21      	ldr	r2, [pc, #132]	@ (8004638 <HAL_DMA_Abort+0x25c>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d018      	beq.n	80045ea <HAL_DMA_Abort+0x20e>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a1f      	ldr	r2, [pc, #124]	@ (800463c <HAL_DMA_Abort+0x260>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d013      	beq.n	80045ea <HAL_DMA_Abort+0x20e>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a1e      	ldr	r2, [pc, #120]	@ (8004640 <HAL_DMA_Abort+0x264>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d00e      	beq.n	80045ea <HAL_DMA_Abort+0x20e>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a1c      	ldr	r2, [pc, #112]	@ (8004644 <HAL_DMA_Abort+0x268>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d009      	beq.n	80045ea <HAL_DMA_Abort+0x20e>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a1b      	ldr	r2, [pc, #108]	@ (8004648 <HAL_DMA_Abort+0x26c>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d004      	beq.n	80045ea <HAL_DMA_Abort+0x20e>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a19      	ldr	r2, [pc, #100]	@ (800464c <HAL_DMA_Abort+0x270>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d132      	bne.n	8004650 <HAL_DMA_Abort+0x274>
 80045ea:	2301      	movs	r3, #1
 80045ec:	e031      	b.n	8004652 <HAL_DMA_Abort+0x276>
 80045ee:	bf00      	nop
 80045f0:	40020010 	.word	0x40020010
 80045f4:	40020028 	.word	0x40020028
 80045f8:	40020040 	.word	0x40020040
 80045fc:	40020058 	.word	0x40020058
 8004600:	40020070 	.word	0x40020070
 8004604:	40020088 	.word	0x40020088
 8004608:	400200a0 	.word	0x400200a0
 800460c:	400200b8 	.word	0x400200b8
 8004610:	40020410 	.word	0x40020410
 8004614:	40020428 	.word	0x40020428
 8004618:	40020440 	.word	0x40020440
 800461c:	40020458 	.word	0x40020458
 8004620:	40020470 	.word	0x40020470
 8004624:	40020488 	.word	0x40020488
 8004628:	400204a0 	.word	0x400204a0
 800462c:	400204b8 	.word	0x400204b8
 8004630:	58025408 	.word	0x58025408
 8004634:	5802541c 	.word	0x5802541c
 8004638:	58025430 	.word	0x58025430
 800463c:	58025444 	.word	0x58025444
 8004640:	58025458 	.word	0x58025458
 8004644:	5802546c 	.word	0x5802546c
 8004648:	58025480 	.word	0x58025480
 800464c:	58025494 	.word	0x58025494
 8004650:	2300      	movs	r3, #0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d007      	beq.n	8004666 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004660:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004664:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a6d      	ldr	r2, [pc, #436]	@ (8004820 <HAL_DMA_Abort+0x444>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d04a      	beq.n	8004706 <HAL_DMA_Abort+0x32a>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a6b      	ldr	r2, [pc, #428]	@ (8004824 <HAL_DMA_Abort+0x448>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d045      	beq.n	8004706 <HAL_DMA_Abort+0x32a>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a6a      	ldr	r2, [pc, #424]	@ (8004828 <HAL_DMA_Abort+0x44c>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d040      	beq.n	8004706 <HAL_DMA_Abort+0x32a>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a68      	ldr	r2, [pc, #416]	@ (800482c <HAL_DMA_Abort+0x450>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d03b      	beq.n	8004706 <HAL_DMA_Abort+0x32a>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a67      	ldr	r2, [pc, #412]	@ (8004830 <HAL_DMA_Abort+0x454>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d036      	beq.n	8004706 <HAL_DMA_Abort+0x32a>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a65      	ldr	r2, [pc, #404]	@ (8004834 <HAL_DMA_Abort+0x458>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d031      	beq.n	8004706 <HAL_DMA_Abort+0x32a>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a64      	ldr	r2, [pc, #400]	@ (8004838 <HAL_DMA_Abort+0x45c>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d02c      	beq.n	8004706 <HAL_DMA_Abort+0x32a>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a62      	ldr	r2, [pc, #392]	@ (800483c <HAL_DMA_Abort+0x460>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d027      	beq.n	8004706 <HAL_DMA_Abort+0x32a>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a61      	ldr	r2, [pc, #388]	@ (8004840 <HAL_DMA_Abort+0x464>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d022      	beq.n	8004706 <HAL_DMA_Abort+0x32a>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a5f      	ldr	r2, [pc, #380]	@ (8004844 <HAL_DMA_Abort+0x468>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d01d      	beq.n	8004706 <HAL_DMA_Abort+0x32a>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a5e      	ldr	r2, [pc, #376]	@ (8004848 <HAL_DMA_Abort+0x46c>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d018      	beq.n	8004706 <HAL_DMA_Abort+0x32a>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a5c      	ldr	r2, [pc, #368]	@ (800484c <HAL_DMA_Abort+0x470>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d013      	beq.n	8004706 <HAL_DMA_Abort+0x32a>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a5b      	ldr	r2, [pc, #364]	@ (8004850 <HAL_DMA_Abort+0x474>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d00e      	beq.n	8004706 <HAL_DMA_Abort+0x32a>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a59      	ldr	r2, [pc, #356]	@ (8004854 <HAL_DMA_Abort+0x478>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d009      	beq.n	8004706 <HAL_DMA_Abort+0x32a>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a58      	ldr	r2, [pc, #352]	@ (8004858 <HAL_DMA_Abort+0x47c>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d004      	beq.n	8004706 <HAL_DMA_Abort+0x32a>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a56      	ldr	r2, [pc, #344]	@ (800485c <HAL_DMA_Abort+0x480>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d108      	bne.n	8004718 <HAL_DMA_Abort+0x33c>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f022 0201 	bic.w	r2, r2, #1
 8004714:	601a      	str	r2, [r3, #0]
 8004716:	e007      	b.n	8004728 <HAL_DMA_Abort+0x34c>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f022 0201 	bic.w	r2, r2, #1
 8004726:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004728:	e013      	b.n	8004752 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800472a:	f7fe fea7 	bl	800347c <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	2b05      	cmp	r3, #5
 8004736:	d90c      	bls.n	8004752 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2220      	movs	r2, #32
 800473c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2203      	movs	r2, #3
 8004742:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e12d      	b.n	80049ae <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1e5      	bne.n	800472a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a2f      	ldr	r2, [pc, #188]	@ (8004820 <HAL_DMA_Abort+0x444>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d04a      	beq.n	80047fe <HAL_DMA_Abort+0x422>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a2d      	ldr	r2, [pc, #180]	@ (8004824 <HAL_DMA_Abort+0x448>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d045      	beq.n	80047fe <HAL_DMA_Abort+0x422>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a2c      	ldr	r2, [pc, #176]	@ (8004828 <HAL_DMA_Abort+0x44c>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d040      	beq.n	80047fe <HAL_DMA_Abort+0x422>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a2a      	ldr	r2, [pc, #168]	@ (800482c <HAL_DMA_Abort+0x450>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d03b      	beq.n	80047fe <HAL_DMA_Abort+0x422>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a29      	ldr	r2, [pc, #164]	@ (8004830 <HAL_DMA_Abort+0x454>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d036      	beq.n	80047fe <HAL_DMA_Abort+0x422>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a27      	ldr	r2, [pc, #156]	@ (8004834 <HAL_DMA_Abort+0x458>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d031      	beq.n	80047fe <HAL_DMA_Abort+0x422>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a26      	ldr	r2, [pc, #152]	@ (8004838 <HAL_DMA_Abort+0x45c>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d02c      	beq.n	80047fe <HAL_DMA_Abort+0x422>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a24      	ldr	r2, [pc, #144]	@ (800483c <HAL_DMA_Abort+0x460>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d027      	beq.n	80047fe <HAL_DMA_Abort+0x422>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a23      	ldr	r2, [pc, #140]	@ (8004840 <HAL_DMA_Abort+0x464>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d022      	beq.n	80047fe <HAL_DMA_Abort+0x422>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a21      	ldr	r2, [pc, #132]	@ (8004844 <HAL_DMA_Abort+0x468>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d01d      	beq.n	80047fe <HAL_DMA_Abort+0x422>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a20      	ldr	r2, [pc, #128]	@ (8004848 <HAL_DMA_Abort+0x46c>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d018      	beq.n	80047fe <HAL_DMA_Abort+0x422>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a1e      	ldr	r2, [pc, #120]	@ (800484c <HAL_DMA_Abort+0x470>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d013      	beq.n	80047fe <HAL_DMA_Abort+0x422>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a1d      	ldr	r2, [pc, #116]	@ (8004850 <HAL_DMA_Abort+0x474>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d00e      	beq.n	80047fe <HAL_DMA_Abort+0x422>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a1b      	ldr	r2, [pc, #108]	@ (8004854 <HAL_DMA_Abort+0x478>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d009      	beq.n	80047fe <HAL_DMA_Abort+0x422>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a1a      	ldr	r2, [pc, #104]	@ (8004858 <HAL_DMA_Abort+0x47c>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d004      	beq.n	80047fe <HAL_DMA_Abort+0x422>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a18      	ldr	r2, [pc, #96]	@ (800485c <HAL_DMA_Abort+0x480>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d101      	bne.n	8004802 <HAL_DMA_Abort+0x426>
 80047fe:	2301      	movs	r3, #1
 8004800:	e000      	b.n	8004804 <HAL_DMA_Abort+0x428>
 8004802:	2300      	movs	r3, #0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d02b      	beq.n	8004860 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800480c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004812:	f003 031f 	and.w	r3, r3, #31
 8004816:	223f      	movs	r2, #63	@ 0x3f
 8004818:	409a      	lsls	r2, r3
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	609a      	str	r2, [r3, #8]
 800481e:	e02a      	b.n	8004876 <HAL_DMA_Abort+0x49a>
 8004820:	40020010 	.word	0x40020010
 8004824:	40020028 	.word	0x40020028
 8004828:	40020040 	.word	0x40020040
 800482c:	40020058 	.word	0x40020058
 8004830:	40020070 	.word	0x40020070
 8004834:	40020088 	.word	0x40020088
 8004838:	400200a0 	.word	0x400200a0
 800483c:	400200b8 	.word	0x400200b8
 8004840:	40020410 	.word	0x40020410
 8004844:	40020428 	.word	0x40020428
 8004848:	40020440 	.word	0x40020440
 800484c:	40020458 	.word	0x40020458
 8004850:	40020470 	.word	0x40020470
 8004854:	40020488 	.word	0x40020488
 8004858:	400204a0 	.word	0x400204a0
 800485c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004864:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800486a:	f003 031f 	and.w	r3, r3, #31
 800486e:	2201      	movs	r2, #1
 8004870:	409a      	lsls	r2, r3
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a4f      	ldr	r2, [pc, #316]	@ (80049b8 <HAL_DMA_Abort+0x5dc>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d072      	beq.n	8004966 <HAL_DMA_Abort+0x58a>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a4d      	ldr	r2, [pc, #308]	@ (80049bc <HAL_DMA_Abort+0x5e0>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d06d      	beq.n	8004966 <HAL_DMA_Abort+0x58a>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a4c      	ldr	r2, [pc, #304]	@ (80049c0 <HAL_DMA_Abort+0x5e4>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d068      	beq.n	8004966 <HAL_DMA_Abort+0x58a>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a4a      	ldr	r2, [pc, #296]	@ (80049c4 <HAL_DMA_Abort+0x5e8>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d063      	beq.n	8004966 <HAL_DMA_Abort+0x58a>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a49      	ldr	r2, [pc, #292]	@ (80049c8 <HAL_DMA_Abort+0x5ec>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d05e      	beq.n	8004966 <HAL_DMA_Abort+0x58a>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a47      	ldr	r2, [pc, #284]	@ (80049cc <HAL_DMA_Abort+0x5f0>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d059      	beq.n	8004966 <HAL_DMA_Abort+0x58a>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a46      	ldr	r2, [pc, #280]	@ (80049d0 <HAL_DMA_Abort+0x5f4>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d054      	beq.n	8004966 <HAL_DMA_Abort+0x58a>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a44      	ldr	r2, [pc, #272]	@ (80049d4 <HAL_DMA_Abort+0x5f8>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d04f      	beq.n	8004966 <HAL_DMA_Abort+0x58a>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a43      	ldr	r2, [pc, #268]	@ (80049d8 <HAL_DMA_Abort+0x5fc>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d04a      	beq.n	8004966 <HAL_DMA_Abort+0x58a>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a41      	ldr	r2, [pc, #260]	@ (80049dc <HAL_DMA_Abort+0x600>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d045      	beq.n	8004966 <HAL_DMA_Abort+0x58a>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a40      	ldr	r2, [pc, #256]	@ (80049e0 <HAL_DMA_Abort+0x604>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d040      	beq.n	8004966 <HAL_DMA_Abort+0x58a>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a3e      	ldr	r2, [pc, #248]	@ (80049e4 <HAL_DMA_Abort+0x608>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d03b      	beq.n	8004966 <HAL_DMA_Abort+0x58a>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a3d      	ldr	r2, [pc, #244]	@ (80049e8 <HAL_DMA_Abort+0x60c>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d036      	beq.n	8004966 <HAL_DMA_Abort+0x58a>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a3b      	ldr	r2, [pc, #236]	@ (80049ec <HAL_DMA_Abort+0x610>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d031      	beq.n	8004966 <HAL_DMA_Abort+0x58a>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a3a      	ldr	r2, [pc, #232]	@ (80049f0 <HAL_DMA_Abort+0x614>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d02c      	beq.n	8004966 <HAL_DMA_Abort+0x58a>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a38      	ldr	r2, [pc, #224]	@ (80049f4 <HAL_DMA_Abort+0x618>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d027      	beq.n	8004966 <HAL_DMA_Abort+0x58a>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a37      	ldr	r2, [pc, #220]	@ (80049f8 <HAL_DMA_Abort+0x61c>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d022      	beq.n	8004966 <HAL_DMA_Abort+0x58a>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a35      	ldr	r2, [pc, #212]	@ (80049fc <HAL_DMA_Abort+0x620>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d01d      	beq.n	8004966 <HAL_DMA_Abort+0x58a>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a34      	ldr	r2, [pc, #208]	@ (8004a00 <HAL_DMA_Abort+0x624>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d018      	beq.n	8004966 <HAL_DMA_Abort+0x58a>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a32      	ldr	r2, [pc, #200]	@ (8004a04 <HAL_DMA_Abort+0x628>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d013      	beq.n	8004966 <HAL_DMA_Abort+0x58a>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a31      	ldr	r2, [pc, #196]	@ (8004a08 <HAL_DMA_Abort+0x62c>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d00e      	beq.n	8004966 <HAL_DMA_Abort+0x58a>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a2f      	ldr	r2, [pc, #188]	@ (8004a0c <HAL_DMA_Abort+0x630>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d009      	beq.n	8004966 <HAL_DMA_Abort+0x58a>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a2e      	ldr	r2, [pc, #184]	@ (8004a10 <HAL_DMA_Abort+0x634>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d004      	beq.n	8004966 <HAL_DMA_Abort+0x58a>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a2c      	ldr	r2, [pc, #176]	@ (8004a14 <HAL_DMA_Abort+0x638>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d101      	bne.n	800496a <HAL_DMA_Abort+0x58e>
 8004966:	2301      	movs	r3, #1
 8004968:	e000      	b.n	800496c <HAL_DMA_Abort+0x590>
 800496a:	2300      	movs	r3, #0
 800496c:	2b00      	cmp	r3, #0
 800496e:	d015      	beq.n	800499c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004978:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00c      	beq.n	800499c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800498c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004990:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800499a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3718      	adds	r7, #24
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	40020010 	.word	0x40020010
 80049bc:	40020028 	.word	0x40020028
 80049c0:	40020040 	.word	0x40020040
 80049c4:	40020058 	.word	0x40020058
 80049c8:	40020070 	.word	0x40020070
 80049cc:	40020088 	.word	0x40020088
 80049d0:	400200a0 	.word	0x400200a0
 80049d4:	400200b8 	.word	0x400200b8
 80049d8:	40020410 	.word	0x40020410
 80049dc:	40020428 	.word	0x40020428
 80049e0:	40020440 	.word	0x40020440
 80049e4:	40020458 	.word	0x40020458
 80049e8:	40020470 	.word	0x40020470
 80049ec:	40020488 	.word	0x40020488
 80049f0:	400204a0 	.word	0x400204a0
 80049f4:	400204b8 	.word	0x400204b8
 80049f8:	58025408 	.word	0x58025408
 80049fc:	5802541c 	.word	0x5802541c
 8004a00:	58025430 	.word	0x58025430
 8004a04:	58025444 	.word	0x58025444
 8004a08:	58025458 	.word	0x58025458
 8004a0c:	5802546c 	.word	0x5802546c
 8004a10:	58025480 	.word	0x58025480
 8004a14:	58025494 	.word	0x58025494

08004a18 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d101      	bne.n	8004a2a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e237      	b.n	8004e9a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d004      	beq.n	8004a40 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2280      	movs	r2, #128	@ 0x80
 8004a3a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e22c      	b.n	8004e9a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a5c      	ldr	r2, [pc, #368]	@ (8004bb8 <HAL_DMA_Abort_IT+0x1a0>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d04a      	beq.n	8004ae0 <HAL_DMA_Abort_IT+0xc8>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a5b      	ldr	r2, [pc, #364]	@ (8004bbc <HAL_DMA_Abort_IT+0x1a4>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d045      	beq.n	8004ae0 <HAL_DMA_Abort_IT+0xc8>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a59      	ldr	r2, [pc, #356]	@ (8004bc0 <HAL_DMA_Abort_IT+0x1a8>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d040      	beq.n	8004ae0 <HAL_DMA_Abort_IT+0xc8>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a58      	ldr	r2, [pc, #352]	@ (8004bc4 <HAL_DMA_Abort_IT+0x1ac>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d03b      	beq.n	8004ae0 <HAL_DMA_Abort_IT+0xc8>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a56      	ldr	r2, [pc, #344]	@ (8004bc8 <HAL_DMA_Abort_IT+0x1b0>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d036      	beq.n	8004ae0 <HAL_DMA_Abort_IT+0xc8>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a55      	ldr	r2, [pc, #340]	@ (8004bcc <HAL_DMA_Abort_IT+0x1b4>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d031      	beq.n	8004ae0 <HAL_DMA_Abort_IT+0xc8>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a53      	ldr	r2, [pc, #332]	@ (8004bd0 <HAL_DMA_Abort_IT+0x1b8>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d02c      	beq.n	8004ae0 <HAL_DMA_Abort_IT+0xc8>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a52      	ldr	r2, [pc, #328]	@ (8004bd4 <HAL_DMA_Abort_IT+0x1bc>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d027      	beq.n	8004ae0 <HAL_DMA_Abort_IT+0xc8>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a50      	ldr	r2, [pc, #320]	@ (8004bd8 <HAL_DMA_Abort_IT+0x1c0>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d022      	beq.n	8004ae0 <HAL_DMA_Abort_IT+0xc8>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a4f      	ldr	r2, [pc, #316]	@ (8004bdc <HAL_DMA_Abort_IT+0x1c4>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d01d      	beq.n	8004ae0 <HAL_DMA_Abort_IT+0xc8>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a4d      	ldr	r2, [pc, #308]	@ (8004be0 <HAL_DMA_Abort_IT+0x1c8>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d018      	beq.n	8004ae0 <HAL_DMA_Abort_IT+0xc8>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a4c      	ldr	r2, [pc, #304]	@ (8004be4 <HAL_DMA_Abort_IT+0x1cc>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d013      	beq.n	8004ae0 <HAL_DMA_Abort_IT+0xc8>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a4a      	ldr	r2, [pc, #296]	@ (8004be8 <HAL_DMA_Abort_IT+0x1d0>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d00e      	beq.n	8004ae0 <HAL_DMA_Abort_IT+0xc8>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a49      	ldr	r2, [pc, #292]	@ (8004bec <HAL_DMA_Abort_IT+0x1d4>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d009      	beq.n	8004ae0 <HAL_DMA_Abort_IT+0xc8>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a47      	ldr	r2, [pc, #284]	@ (8004bf0 <HAL_DMA_Abort_IT+0x1d8>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d004      	beq.n	8004ae0 <HAL_DMA_Abort_IT+0xc8>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a46      	ldr	r2, [pc, #280]	@ (8004bf4 <HAL_DMA_Abort_IT+0x1dc>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d101      	bne.n	8004ae4 <HAL_DMA_Abort_IT+0xcc>
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e000      	b.n	8004ae6 <HAL_DMA_Abort_IT+0xce>
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	f000 8086 	beq.w	8004bf8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2204      	movs	r2, #4
 8004af0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a2f      	ldr	r2, [pc, #188]	@ (8004bb8 <HAL_DMA_Abort_IT+0x1a0>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d04a      	beq.n	8004b94 <HAL_DMA_Abort_IT+0x17c>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a2e      	ldr	r2, [pc, #184]	@ (8004bbc <HAL_DMA_Abort_IT+0x1a4>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d045      	beq.n	8004b94 <HAL_DMA_Abort_IT+0x17c>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a2c      	ldr	r2, [pc, #176]	@ (8004bc0 <HAL_DMA_Abort_IT+0x1a8>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d040      	beq.n	8004b94 <HAL_DMA_Abort_IT+0x17c>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a2b      	ldr	r2, [pc, #172]	@ (8004bc4 <HAL_DMA_Abort_IT+0x1ac>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d03b      	beq.n	8004b94 <HAL_DMA_Abort_IT+0x17c>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a29      	ldr	r2, [pc, #164]	@ (8004bc8 <HAL_DMA_Abort_IT+0x1b0>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d036      	beq.n	8004b94 <HAL_DMA_Abort_IT+0x17c>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a28      	ldr	r2, [pc, #160]	@ (8004bcc <HAL_DMA_Abort_IT+0x1b4>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d031      	beq.n	8004b94 <HAL_DMA_Abort_IT+0x17c>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a26      	ldr	r2, [pc, #152]	@ (8004bd0 <HAL_DMA_Abort_IT+0x1b8>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d02c      	beq.n	8004b94 <HAL_DMA_Abort_IT+0x17c>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a25      	ldr	r2, [pc, #148]	@ (8004bd4 <HAL_DMA_Abort_IT+0x1bc>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d027      	beq.n	8004b94 <HAL_DMA_Abort_IT+0x17c>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a23      	ldr	r2, [pc, #140]	@ (8004bd8 <HAL_DMA_Abort_IT+0x1c0>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d022      	beq.n	8004b94 <HAL_DMA_Abort_IT+0x17c>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a22      	ldr	r2, [pc, #136]	@ (8004bdc <HAL_DMA_Abort_IT+0x1c4>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d01d      	beq.n	8004b94 <HAL_DMA_Abort_IT+0x17c>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a20      	ldr	r2, [pc, #128]	@ (8004be0 <HAL_DMA_Abort_IT+0x1c8>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d018      	beq.n	8004b94 <HAL_DMA_Abort_IT+0x17c>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a1f      	ldr	r2, [pc, #124]	@ (8004be4 <HAL_DMA_Abort_IT+0x1cc>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d013      	beq.n	8004b94 <HAL_DMA_Abort_IT+0x17c>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a1d      	ldr	r2, [pc, #116]	@ (8004be8 <HAL_DMA_Abort_IT+0x1d0>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d00e      	beq.n	8004b94 <HAL_DMA_Abort_IT+0x17c>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a1c      	ldr	r2, [pc, #112]	@ (8004bec <HAL_DMA_Abort_IT+0x1d4>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d009      	beq.n	8004b94 <HAL_DMA_Abort_IT+0x17c>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a1a      	ldr	r2, [pc, #104]	@ (8004bf0 <HAL_DMA_Abort_IT+0x1d8>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d004      	beq.n	8004b94 <HAL_DMA_Abort_IT+0x17c>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a19      	ldr	r2, [pc, #100]	@ (8004bf4 <HAL_DMA_Abort_IT+0x1dc>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d108      	bne.n	8004ba6 <HAL_DMA_Abort_IT+0x18e>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f022 0201 	bic.w	r2, r2, #1
 8004ba2:	601a      	str	r2, [r3, #0]
 8004ba4:	e178      	b.n	8004e98 <HAL_DMA_Abort_IT+0x480>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f022 0201 	bic.w	r2, r2, #1
 8004bb4:	601a      	str	r2, [r3, #0]
 8004bb6:	e16f      	b.n	8004e98 <HAL_DMA_Abort_IT+0x480>
 8004bb8:	40020010 	.word	0x40020010
 8004bbc:	40020028 	.word	0x40020028
 8004bc0:	40020040 	.word	0x40020040
 8004bc4:	40020058 	.word	0x40020058
 8004bc8:	40020070 	.word	0x40020070
 8004bcc:	40020088 	.word	0x40020088
 8004bd0:	400200a0 	.word	0x400200a0
 8004bd4:	400200b8 	.word	0x400200b8
 8004bd8:	40020410 	.word	0x40020410
 8004bdc:	40020428 	.word	0x40020428
 8004be0:	40020440 	.word	0x40020440
 8004be4:	40020458 	.word	0x40020458
 8004be8:	40020470 	.word	0x40020470
 8004bec:	40020488 	.word	0x40020488
 8004bf0:	400204a0 	.word	0x400204a0
 8004bf4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f022 020e 	bic.w	r2, r2, #14
 8004c06:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a6c      	ldr	r2, [pc, #432]	@ (8004dc0 <HAL_DMA_Abort_IT+0x3a8>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d04a      	beq.n	8004ca8 <HAL_DMA_Abort_IT+0x290>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a6b      	ldr	r2, [pc, #428]	@ (8004dc4 <HAL_DMA_Abort_IT+0x3ac>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d045      	beq.n	8004ca8 <HAL_DMA_Abort_IT+0x290>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a69      	ldr	r2, [pc, #420]	@ (8004dc8 <HAL_DMA_Abort_IT+0x3b0>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d040      	beq.n	8004ca8 <HAL_DMA_Abort_IT+0x290>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a68      	ldr	r2, [pc, #416]	@ (8004dcc <HAL_DMA_Abort_IT+0x3b4>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d03b      	beq.n	8004ca8 <HAL_DMA_Abort_IT+0x290>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a66      	ldr	r2, [pc, #408]	@ (8004dd0 <HAL_DMA_Abort_IT+0x3b8>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d036      	beq.n	8004ca8 <HAL_DMA_Abort_IT+0x290>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a65      	ldr	r2, [pc, #404]	@ (8004dd4 <HAL_DMA_Abort_IT+0x3bc>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d031      	beq.n	8004ca8 <HAL_DMA_Abort_IT+0x290>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a63      	ldr	r2, [pc, #396]	@ (8004dd8 <HAL_DMA_Abort_IT+0x3c0>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d02c      	beq.n	8004ca8 <HAL_DMA_Abort_IT+0x290>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a62      	ldr	r2, [pc, #392]	@ (8004ddc <HAL_DMA_Abort_IT+0x3c4>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d027      	beq.n	8004ca8 <HAL_DMA_Abort_IT+0x290>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a60      	ldr	r2, [pc, #384]	@ (8004de0 <HAL_DMA_Abort_IT+0x3c8>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d022      	beq.n	8004ca8 <HAL_DMA_Abort_IT+0x290>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a5f      	ldr	r2, [pc, #380]	@ (8004de4 <HAL_DMA_Abort_IT+0x3cc>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d01d      	beq.n	8004ca8 <HAL_DMA_Abort_IT+0x290>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a5d      	ldr	r2, [pc, #372]	@ (8004de8 <HAL_DMA_Abort_IT+0x3d0>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d018      	beq.n	8004ca8 <HAL_DMA_Abort_IT+0x290>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a5c      	ldr	r2, [pc, #368]	@ (8004dec <HAL_DMA_Abort_IT+0x3d4>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d013      	beq.n	8004ca8 <HAL_DMA_Abort_IT+0x290>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a5a      	ldr	r2, [pc, #360]	@ (8004df0 <HAL_DMA_Abort_IT+0x3d8>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d00e      	beq.n	8004ca8 <HAL_DMA_Abort_IT+0x290>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a59      	ldr	r2, [pc, #356]	@ (8004df4 <HAL_DMA_Abort_IT+0x3dc>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d009      	beq.n	8004ca8 <HAL_DMA_Abort_IT+0x290>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a57      	ldr	r2, [pc, #348]	@ (8004df8 <HAL_DMA_Abort_IT+0x3e0>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d004      	beq.n	8004ca8 <HAL_DMA_Abort_IT+0x290>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a56      	ldr	r2, [pc, #344]	@ (8004dfc <HAL_DMA_Abort_IT+0x3e4>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d108      	bne.n	8004cba <HAL_DMA_Abort_IT+0x2a2>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f022 0201 	bic.w	r2, r2, #1
 8004cb6:	601a      	str	r2, [r3, #0]
 8004cb8:	e007      	b.n	8004cca <HAL_DMA_Abort_IT+0x2b2>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f022 0201 	bic.w	r2, r2, #1
 8004cc8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a3c      	ldr	r2, [pc, #240]	@ (8004dc0 <HAL_DMA_Abort_IT+0x3a8>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d072      	beq.n	8004dba <HAL_DMA_Abort_IT+0x3a2>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a3a      	ldr	r2, [pc, #232]	@ (8004dc4 <HAL_DMA_Abort_IT+0x3ac>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d06d      	beq.n	8004dba <HAL_DMA_Abort_IT+0x3a2>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a39      	ldr	r2, [pc, #228]	@ (8004dc8 <HAL_DMA_Abort_IT+0x3b0>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d068      	beq.n	8004dba <HAL_DMA_Abort_IT+0x3a2>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a37      	ldr	r2, [pc, #220]	@ (8004dcc <HAL_DMA_Abort_IT+0x3b4>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d063      	beq.n	8004dba <HAL_DMA_Abort_IT+0x3a2>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a36      	ldr	r2, [pc, #216]	@ (8004dd0 <HAL_DMA_Abort_IT+0x3b8>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d05e      	beq.n	8004dba <HAL_DMA_Abort_IT+0x3a2>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a34      	ldr	r2, [pc, #208]	@ (8004dd4 <HAL_DMA_Abort_IT+0x3bc>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d059      	beq.n	8004dba <HAL_DMA_Abort_IT+0x3a2>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a33      	ldr	r2, [pc, #204]	@ (8004dd8 <HAL_DMA_Abort_IT+0x3c0>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d054      	beq.n	8004dba <HAL_DMA_Abort_IT+0x3a2>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a31      	ldr	r2, [pc, #196]	@ (8004ddc <HAL_DMA_Abort_IT+0x3c4>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d04f      	beq.n	8004dba <HAL_DMA_Abort_IT+0x3a2>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a30      	ldr	r2, [pc, #192]	@ (8004de0 <HAL_DMA_Abort_IT+0x3c8>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d04a      	beq.n	8004dba <HAL_DMA_Abort_IT+0x3a2>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a2e      	ldr	r2, [pc, #184]	@ (8004de4 <HAL_DMA_Abort_IT+0x3cc>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d045      	beq.n	8004dba <HAL_DMA_Abort_IT+0x3a2>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a2d      	ldr	r2, [pc, #180]	@ (8004de8 <HAL_DMA_Abort_IT+0x3d0>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d040      	beq.n	8004dba <HAL_DMA_Abort_IT+0x3a2>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a2b      	ldr	r2, [pc, #172]	@ (8004dec <HAL_DMA_Abort_IT+0x3d4>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d03b      	beq.n	8004dba <HAL_DMA_Abort_IT+0x3a2>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a2a      	ldr	r2, [pc, #168]	@ (8004df0 <HAL_DMA_Abort_IT+0x3d8>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d036      	beq.n	8004dba <HAL_DMA_Abort_IT+0x3a2>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a28      	ldr	r2, [pc, #160]	@ (8004df4 <HAL_DMA_Abort_IT+0x3dc>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d031      	beq.n	8004dba <HAL_DMA_Abort_IT+0x3a2>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a27      	ldr	r2, [pc, #156]	@ (8004df8 <HAL_DMA_Abort_IT+0x3e0>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d02c      	beq.n	8004dba <HAL_DMA_Abort_IT+0x3a2>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a25      	ldr	r2, [pc, #148]	@ (8004dfc <HAL_DMA_Abort_IT+0x3e4>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d027      	beq.n	8004dba <HAL_DMA_Abort_IT+0x3a2>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a24      	ldr	r2, [pc, #144]	@ (8004e00 <HAL_DMA_Abort_IT+0x3e8>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d022      	beq.n	8004dba <HAL_DMA_Abort_IT+0x3a2>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a22      	ldr	r2, [pc, #136]	@ (8004e04 <HAL_DMA_Abort_IT+0x3ec>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d01d      	beq.n	8004dba <HAL_DMA_Abort_IT+0x3a2>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a21      	ldr	r2, [pc, #132]	@ (8004e08 <HAL_DMA_Abort_IT+0x3f0>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d018      	beq.n	8004dba <HAL_DMA_Abort_IT+0x3a2>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a1f      	ldr	r2, [pc, #124]	@ (8004e0c <HAL_DMA_Abort_IT+0x3f4>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d013      	beq.n	8004dba <HAL_DMA_Abort_IT+0x3a2>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a1e      	ldr	r2, [pc, #120]	@ (8004e10 <HAL_DMA_Abort_IT+0x3f8>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d00e      	beq.n	8004dba <HAL_DMA_Abort_IT+0x3a2>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a1c      	ldr	r2, [pc, #112]	@ (8004e14 <HAL_DMA_Abort_IT+0x3fc>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d009      	beq.n	8004dba <HAL_DMA_Abort_IT+0x3a2>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a1b      	ldr	r2, [pc, #108]	@ (8004e18 <HAL_DMA_Abort_IT+0x400>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d004      	beq.n	8004dba <HAL_DMA_Abort_IT+0x3a2>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a19      	ldr	r2, [pc, #100]	@ (8004e1c <HAL_DMA_Abort_IT+0x404>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d132      	bne.n	8004e20 <HAL_DMA_Abort_IT+0x408>
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e031      	b.n	8004e22 <HAL_DMA_Abort_IT+0x40a>
 8004dbe:	bf00      	nop
 8004dc0:	40020010 	.word	0x40020010
 8004dc4:	40020028 	.word	0x40020028
 8004dc8:	40020040 	.word	0x40020040
 8004dcc:	40020058 	.word	0x40020058
 8004dd0:	40020070 	.word	0x40020070
 8004dd4:	40020088 	.word	0x40020088
 8004dd8:	400200a0 	.word	0x400200a0
 8004ddc:	400200b8 	.word	0x400200b8
 8004de0:	40020410 	.word	0x40020410
 8004de4:	40020428 	.word	0x40020428
 8004de8:	40020440 	.word	0x40020440
 8004dec:	40020458 	.word	0x40020458
 8004df0:	40020470 	.word	0x40020470
 8004df4:	40020488 	.word	0x40020488
 8004df8:	400204a0 	.word	0x400204a0
 8004dfc:	400204b8 	.word	0x400204b8
 8004e00:	58025408 	.word	0x58025408
 8004e04:	5802541c 	.word	0x5802541c
 8004e08:	58025430 	.word	0x58025430
 8004e0c:	58025444 	.word	0x58025444
 8004e10:	58025458 	.word	0x58025458
 8004e14:	5802546c 	.word	0x5802546c
 8004e18:	58025480 	.word	0x58025480
 8004e1c:	58025494 	.word	0x58025494
 8004e20:	2300      	movs	r3, #0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d028      	beq.n	8004e78 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e30:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004e34:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e3a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e40:	f003 031f 	and.w	r3, r3, #31
 8004e44:	2201      	movs	r2, #1
 8004e46:	409a      	lsls	r2, r3
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004e54:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00c      	beq.n	8004e78 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e68:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004e6c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004e76:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d003      	beq.n	8004e98 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3710      	adds	r7, #16
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop

08004ea4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b08a      	sub	sp, #40	@ 0x28
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004eac:	2300      	movs	r3, #0
 8004eae:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004eb0:	4b67      	ldr	r3, [pc, #412]	@ (8005050 <HAL_DMA_IRQHandler+0x1ac>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a67      	ldr	r2, [pc, #412]	@ (8005054 <HAL_DMA_IRQHandler+0x1b0>)
 8004eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eba:	0a9b      	lsrs	r3, r3, #10
 8004ebc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ec2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ec8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004eca:	6a3b      	ldr	r3, [r7, #32]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a5f      	ldr	r2, [pc, #380]	@ (8005058 <HAL_DMA_IRQHandler+0x1b4>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d04a      	beq.n	8004f76 <HAL_DMA_IRQHandler+0xd2>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a5d      	ldr	r2, [pc, #372]	@ (800505c <HAL_DMA_IRQHandler+0x1b8>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d045      	beq.n	8004f76 <HAL_DMA_IRQHandler+0xd2>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a5c      	ldr	r2, [pc, #368]	@ (8005060 <HAL_DMA_IRQHandler+0x1bc>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d040      	beq.n	8004f76 <HAL_DMA_IRQHandler+0xd2>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a5a      	ldr	r2, [pc, #360]	@ (8005064 <HAL_DMA_IRQHandler+0x1c0>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d03b      	beq.n	8004f76 <HAL_DMA_IRQHandler+0xd2>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a59      	ldr	r2, [pc, #356]	@ (8005068 <HAL_DMA_IRQHandler+0x1c4>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d036      	beq.n	8004f76 <HAL_DMA_IRQHandler+0xd2>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a57      	ldr	r2, [pc, #348]	@ (800506c <HAL_DMA_IRQHandler+0x1c8>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d031      	beq.n	8004f76 <HAL_DMA_IRQHandler+0xd2>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a56      	ldr	r2, [pc, #344]	@ (8005070 <HAL_DMA_IRQHandler+0x1cc>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d02c      	beq.n	8004f76 <HAL_DMA_IRQHandler+0xd2>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a54      	ldr	r2, [pc, #336]	@ (8005074 <HAL_DMA_IRQHandler+0x1d0>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d027      	beq.n	8004f76 <HAL_DMA_IRQHandler+0xd2>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a53      	ldr	r2, [pc, #332]	@ (8005078 <HAL_DMA_IRQHandler+0x1d4>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d022      	beq.n	8004f76 <HAL_DMA_IRQHandler+0xd2>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a51      	ldr	r2, [pc, #324]	@ (800507c <HAL_DMA_IRQHandler+0x1d8>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d01d      	beq.n	8004f76 <HAL_DMA_IRQHandler+0xd2>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a50      	ldr	r2, [pc, #320]	@ (8005080 <HAL_DMA_IRQHandler+0x1dc>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d018      	beq.n	8004f76 <HAL_DMA_IRQHandler+0xd2>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a4e      	ldr	r2, [pc, #312]	@ (8005084 <HAL_DMA_IRQHandler+0x1e0>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d013      	beq.n	8004f76 <HAL_DMA_IRQHandler+0xd2>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a4d      	ldr	r2, [pc, #308]	@ (8005088 <HAL_DMA_IRQHandler+0x1e4>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d00e      	beq.n	8004f76 <HAL_DMA_IRQHandler+0xd2>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a4b      	ldr	r2, [pc, #300]	@ (800508c <HAL_DMA_IRQHandler+0x1e8>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d009      	beq.n	8004f76 <HAL_DMA_IRQHandler+0xd2>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a4a      	ldr	r2, [pc, #296]	@ (8005090 <HAL_DMA_IRQHandler+0x1ec>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d004      	beq.n	8004f76 <HAL_DMA_IRQHandler+0xd2>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a48      	ldr	r2, [pc, #288]	@ (8005094 <HAL_DMA_IRQHandler+0x1f0>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d101      	bne.n	8004f7a <HAL_DMA_IRQHandler+0xd6>
 8004f76:	2301      	movs	r3, #1
 8004f78:	e000      	b.n	8004f7c <HAL_DMA_IRQHandler+0xd8>
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	f000 842b 	beq.w	80057d8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f86:	f003 031f 	and.w	r3, r3, #31
 8004f8a:	2208      	movs	r2, #8
 8004f8c:	409a      	lsls	r2, r3
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	4013      	ands	r3, r2
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	f000 80a2 	beq.w	80050dc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a2e      	ldr	r2, [pc, #184]	@ (8005058 <HAL_DMA_IRQHandler+0x1b4>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d04a      	beq.n	8005038 <HAL_DMA_IRQHandler+0x194>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a2d      	ldr	r2, [pc, #180]	@ (800505c <HAL_DMA_IRQHandler+0x1b8>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d045      	beq.n	8005038 <HAL_DMA_IRQHandler+0x194>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a2b      	ldr	r2, [pc, #172]	@ (8005060 <HAL_DMA_IRQHandler+0x1bc>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d040      	beq.n	8005038 <HAL_DMA_IRQHandler+0x194>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a2a      	ldr	r2, [pc, #168]	@ (8005064 <HAL_DMA_IRQHandler+0x1c0>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d03b      	beq.n	8005038 <HAL_DMA_IRQHandler+0x194>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a28      	ldr	r2, [pc, #160]	@ (8005068 <HAL_DMA_IRQHandler+0x1c4>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d036      	beq.n	8005038 <HAL_DMA_IRQHandler+0x194>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a27      	ldr	r2, [pc, #156]	@ (800506c <HAL_DMA_IRQHandler+0x1c8>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d031      	beq.n	8005038 <HAL_DMA_IRQHandler+0x194>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a25      	ldr	r2, [pc, #148]	@ (8005070 <HAL_DMA_IRQHandler+0x1cc>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d02c      	beq.n	8005038 <HAL_DMA_IRQHandler+0x194>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a24      	ldr	r2, [pc, #144]	@ (8005074 <HAL_DMA_IRQHandler+0x1d0>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d027      	beq.n	8005038 <HAL_DMA_IRQHandler+0x194>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a22      	ldr	r2, [pc, #136]	@ (8005078 <HAL_DMA_IRQHandler+0x1d4>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d022      	beq.n	8005038 <HAL_DMA_IRQHandler+0x194>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a21      	ldr	r2, [pc, #132]	@ (800507c <HAL_DMA_IRQHandler+0x1d8>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d01d      	beq.n	8005038 <HAL_DMA_IRQHandler+0x194>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a1f      	ldr	r2, [pc, #124]	@ (8005080 <HAL_DMA_IRQHandler+0x1dc>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d018      	beq.n	8005038 <HAL_DMA_IRQHandler+0x194>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a1e      	ldr	r2, [pc, #120]	@ (8005084 <HAL_DMA_IRQHandler+0x1e0>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d013      	beq.n	8005038 <HAL_DMA_IRQHandler+0x194>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a1c      	ldr	r2, [pc, #112]	@ (8005088 <HAL_DMA_IRQHandler+0x1e4>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d00e      	beq.n	8005038 <HAL_DMA_IRQHandler+0x194>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a1b      	ldr	r2, [pc, #108]	@ (800508c <HAL_DMA_IRQHandler+0x1e8>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d009      	beq.n	8005038 <HAL_DMA_IRQHandler+0x194>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a19      	ldr	r2, [pc, #100]	@ (8005090 <HAL_DMA_IRQHandler+0x1ec>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d004      	beq.n	8005038 <HAL_DMA_IRQHandler+0x194>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a18      	ldr	r2, [pc, #96]	@ (8005094 <HAL_DMA_IRQHandler+0x1f0>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d12f      	bne.n	8005098 <HAL_DMA_IRQHandler+0x1f4>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 0304 	and.w	r3, r3, #4
 8005042:	2b00      	cmp	r3, #0
 8005044:	bf14      	ite	ne
 8005046:	2301      	movne	r3, #1
 8005048:	2300      	moveq	r3, #0
 800504a:	b2db      	uxtb	r3, r3
 800504c:	e02e      	b.n	80050ac <HAL_DMA_IRQHandler+0x208>
 800504e:	bf00      	nop
 8005050:	24000098 	.word	0x24000098
 8005054:	1b4e81b5 	.word	0x1b4e81b5
 8005058:	40020010 	.word	0x40020010
 800505c:	40020028 	.word	0x40020028
 8005060:	40020040 	.word	0x40020040
 8005064:	40020058 	.word	0x40020058
 8005068:	40020070 	.word	0x40020070
 800506c:	40020088 	.word	0x40020088
 8005070:	400200a0 	.word	0x400200a0
 8005074:	400200b8 	.word	0x400200b8
 8005078:	40020410 	.word	0x40020410
 800507c:	40020428 	.word	0x40020428
 8005080:	40020440 	.word	0x40020440
 8005084:	40020458 	.word	0x40020458
 8005088:	40020470 	.word	0x40020470
 800508c:	40020488 	.word	0x40020488
 8005090:	400204a0 	.word	0x400204a0
 8005094:	400204b8 	.word	0x400204b8
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 0308 	and.w	r3, r3, #8
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	bf14      	ite	ne
 80050a6:	2301      	movne	r3, #1
 80050a8:	2300      	moveq	r3, #0
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d015      	beq.n	80050dc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f022 0204 	bic.w	r2, r2, #4
 80050be:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050c4:	f003 031f 	and.w	r3, r3, #31
 80050c8:	2208      	movs	r2, #8
 80050ca:	409a      	lsls	r2, r3
 80050cc:	6a3b      	ldr	r3, [r7, #32]
 80050ce:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050d4:	f043 0201 	orr.w	r2, r3, #1
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050e0:	f003 031f 	and.w	r3, r3, #31
 80050e4:	69ba      	ldr	r2, [r7, #24]
 80050e6:	fa22 f303 	lsr.w	r3, r2, r3
 80050ea:	f003 0301 	and.w	r3, r3, #1
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d06e      	beq.n	80051d0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a69      	ldr	r2, [pc, #420]	@ (800529c <HAL_DMA_IRQHandler+0x3f8>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d04a      	beq.n	8005192 <HAL_DMA_IRQHandler+0x2ee>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a67      	ldr	r2, [pc, #412]	@ (80052a0 <HAL_DMA_IRQHandler+0x3fc>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d045      	beq.n	8005192 <HAL_DMA_IRQHandler+0x2ee>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a66      	ldr	r2, [pc, #408]	@ (80052a4 <HAL_DMA_IRQHandler+0x400>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d040      	beq.n	8005192 <HAL_DMA_IRQHandler+0x2ee>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a64      	ldr	r2, [pc, #400]	@ (80052a8 <HAL_DMA_IRQHandler+0x404>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d03b      	beq.n	8005192 <HAL_DMA_IRQHandler+0x2ee>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a63      	ldr	r2, [pc, #396]	@ (80052ac <HAL_DMA_IRQHandler+0x408>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d036      	beq.n	8005192 <HAL_DMA_IRQHandler+0x2ee>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a61      	ldr	r2, [pc, #388]	@ (80052b0 <HAL_DMA_IRQHandler+0x40c>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d031      	beq.n	8005192 <HAL_DMA_IRQHandler+0x2ee>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a60      	ldr	r2, [pc, #384]	@ (80052b4 <HAL_DMA_IRQHandler+0x410>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d02c      	beq.n	8005192 <HAL_DMA_IRQHandler+0x2ee>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a5e      	ldr	r2, [pc, #376]	@ (80052b8 <HAL_DMA_IRQHandler+0x414>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d027      	beq.n	8005192 <HAL_DMA_IRQHandler+0x2ee>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a5d      	ldr	r2, [pc, #372]	@ (80052bc <HAL_DMA_IRQHandler+0x418>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d022      	beq.n	8005192 <HAL_DMA_IRQHandler+0x2ee>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a5b      	ldr	r2, [pc, #364]	@ (80052c0 <HAL_DMA_IRQHandler+0x41c>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d01d      	beq.n	8005192 <HAL_DMA_IRQHandler+0x2ee>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a5a      	ldr	r2, [pc, #360]	@ (80052c4 <HAL_DMA_IRQHandler+0x420>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d018      	beq.n	8005192 <HAL_DMA_IRQHandler+0x2ee>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a58      	ldr	r2, [pc, #352]	@ (80052c8 <HAL_DMA_IRQHandler+0x424>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d013      	beq.n	8005192 <HAL_DMA_IRQHandler+0x2ee>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a57      	ldr	r2, [pc, #348]	@ (80052cc <HAL_DMA_IRQHandler+0x428>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d00e      	beq.n	8005192 <HAL_DMA_IRQHandler+0x2ee>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a55      	ldr	r2, [pc, #340]	@ (80052d0 <HAL_DMA_IRQHandler+0x42c>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d009      	beq.n	8005192 <HAL_DMA_IRQHandler+0x2ee>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a54      	ldr	r2, [pc, #336]	@ (80052d4 <HAL_DMA_IRQHandler+0x430>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d004      	beq.n	8005192 <HAL_DMA_IRQHandler+0x2ee>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a52      	ldr	r2, [pc, #328]	@ (80052d8 <HAL_DMA_IRQHandler+0x434>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d10a      	bne.n	80051a8 <HAL_DMA_IRQHandler+0x304>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	695b      	ldr	r3, [r3, #20]
 8005198:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800519c:	2b00      	cmp	r3, #0
 800519e:	bf14      	ite	ne
 80051a0:	2301      	movne	r3, #1
 80051a2:	2300      	moveq	r3, #0
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	e003      	b.n	80051b0 <HAL_DMA_IRQHandler+0x30c>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	2300      	movs	r3, #0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d00d      	beq.n	80051d0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051b8:	f003 031f 	and.w	r3, r3, #31
 80051bc:	2201      	movs	r2, #1
 80051be:	409a      	lsls	r2, r3
 80051c0:	6a3b      	ldr	r3, [r7, #32]
 80051c2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051c8:	f043 0202 	orr.w	r2, r3, #2
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051d4:	f003 031f 	and.w	r3, r3, #31
 80051d8:	2204      	movs	r2, #4
 80051da:	409a      	lsls	r2, r3
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	4013      	ands	r3, r2
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	f000 808f 	beq.w	8005304 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a2c      	ldr	r2, [pc, #176]	@ (800529c <HAL_DMA_IRQHandler+0x3f8>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d04a      	beq.n	8005286 <HAL_DMA_IRQHandler+0x3e2>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a2a      	ldr	r2, [pc, #168]	@ (80052a0 <HAL_DMA_IRQHandler+0x3fc>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d045      	beq.n	8005286 <HAL_DMA_IRQHandler+0x3e2>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a29      	ldr	r2, [pc, #164]	@ (80052a4 <HAL_DMA_IRQHandler+0x400>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d040      	beq.n	8005286 <HAL_DMA_IRQHandler+0x3e2>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a27      	ldr	r2, [pc, #156]	@ (80052a8 <HAL_DMA_IRQHandler+0x404>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d03b      	beq.n	8005286 <HAL_DMA_IRQHandler+0x3e2>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a26      	ldr	r2, [pc, #152]	@ (80052ac <HAL_DMA_IRQHandler+0x408>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d036      	beq.n	8005286 <HAL_DMA_IRQHandler+0x3e2>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a24      	ldr	r2, [pc, #144]	@ (80052b0 <HAL_DMA_IRQHandler+0x40c>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d031      	beq.n	8005286 <HAL_DMA_IRQHandler+0x3e2>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a23      	ldr	r2, [pc, #140]	@ (80052b4 <HAL_DMA_IRQHandler+0x410>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d02c      	beq.n	8005286 <HAL_DMA_IRQHandler+0x3e2>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a21      	ldr	r2, [pc, #132]	@ (80052b8 <HAL_DMA_IRQHandler+0x414>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d027      	beq.n	8005286 <HAL_DMA_IRQHandler+0x3e2>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a20      	ldr	r2, [pc, #128]	@ (80052bc <HAL_DMA_IRQHandler+0x418>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d022      	beq.n	8005286 <HAL_DMA_IRQHandler+0x3e2>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a1e      	ldr	r2, [pc, #120]	@ (80052c0 <HAL_DMA_IRQHandler+0x41c>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d01d      	beq.n	8005286 <HAL_DMA_IRQHandler+0x3e2>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a1d      	ldr	r2, [pc, #116]	@ (80052c4 <HAL_DMA_IRQHandler+0x420>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d018      	beq.n	8005286 <HAL_DMA_IRQHandler+0x3e2>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a1b      	ldr	r2, [pc, #108]	@ (80052c8 <HAL_DMA_IRQHandler+0x424>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d013      	beq.n	8005286 <HAL_DMA_IRQHandler+0x3e2>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a1a      	ldr	r2, [pc, #104]	@ (80052cc <HAL_DMA_IRQHandler+0x428>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d00e      	beq.n	8005286 <HAL_DMA_IRQHandler+0x3e2>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a18      	ldr	r2, [pc, #96]	@ (80052d0 <HAL_DMA_IRQHandler+0x42c>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d009      	beq.n	8005286 <HAL_DMA_IRQHandler+0x3e2>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a17      	ldr	r2, [pc, #92]	@ (80052d4 <HAL_DMA_IRQHandler+0x430>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d004      	beq.n	8005286 <HAL_DMA_IRQHandler+0x3e2>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a15      	ldr	r2, [pc, #84]	@ (80052d8 <HAL_DMA_IRQHandler+0x434>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d12a      	bne.n	80052dc <HAL_DMA_IRQHandler+0x438>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 0302 	and.w	r3, r3, #2
 8005290:	2b00      	cmp	r3, #0
 8005292:	bf14      	ite	ne
 8005294:	2301      	movne	r3, #1
 8005296:	2300      	moveq	r3, #0
 8005298:	b2db      	uxtb	r3, r3
 800529a:	e023      	b.n	80052e4 <HAL_DMA_IRQHandler+0x440>
 800529c:	40020010 	.word	0x40020010
 80052a0:	40020028 	.word	0x40020028
 80052a4:	40020040 	.word	0x40020040
 80052a8:	40020058 	.word	0x40020058
 80052ac:	40020070 	.word	0x40020070
 80052b0:	40020088 	.word	0x40020088
 80052b4:	400200a0 	.word	0x400200a0
 80052b8:	400200b8 	.word	0x400200b8
 80052bc:	40020410 	.word	0x40020410
 80052c0:	40020428 	.word	0x40020428
 80052c4:	40020440 	.word	0x40020440
 80052c8:	40020458 	.word	0x40020458
 80052cc:	40020470 	.word	0x40020470
 80052d0:	40020488 	.word	0x40020488
 80052d4:	400204a0 	.word	0x400204a0
 80052d8:	400204b8 	.word	0x400204b8
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2300      	movs	r3, #0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d00d      	beq.n	8005304 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052ec:	f003 031f 	and.w	r3, r3, #31
 80052f0:	2204      	movs	r2, #4
 80052f2:	409a      	lsls	r2, r3
 80052f4:	6a3b      	ldr	r3, [r7, #32]
 80052f6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052fc:	f043 0204 	orr.w	r2, r3, #4
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005308:	f003 031f 	and.w	r3, r3, #31
 800530c:	2210      	movs	r2, #16
 800530e:	409a      	lsls	r2, r3
 8005310:	69bb      	ldr	r3, [r7, #24]
 8005312:	4013      	ands	r3, r2
 8005314:	2b00      	cmp	r3, #0
 8005316:	f000 80a6 	beq.w	8005466 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a85      	ldr	r2, [pc, #532]	@ (8005534 <HAL_DMA_IRQHandler+0x690>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d04a      	beq.n	80053ba <HAL_DMA_IRQHandler+0x516>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a83      	ldr	r2, [pc, #524]	@ (8005538 <HAL_DMA_IRQHandler+0x694>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d045      	beq.n	80053ba <HAL_DMA_IRQHandler+0x516>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a82      	ldr	r2, [pc, #520]	@ (800553c <HAL_DMA_IRQHandler+0x698>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d040      	beq.n	80053ba <HAL_DMA_IRQHandler+0x516>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a80      	ldr	r2, [pc, #512]	@ (8005540 <HAL_DMA_IRQHandler+0x69c>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d03b      	beq.n	80053ba <HAL_DMA_IRQHandler+0x516>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a7f      	ldr	r2, [pc, #508]	@ (8005544 <HAL_DMA_IRQHandler+0x6a0>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d036      	beq.n	80053ba <HAL_DMA_IRQHandler+0x516>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a7d      	ldr	r2, [pc, #500]	@ (8005548 <HAL_DMA_IRQHandler+0x6a4>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d031      	beq.n	80053ba <HAL_DMA_IRQHandler+0x516>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a7c      	ldr	r2, [pc, #496]	@ (800554c <HAL_DMA_IRQHandler+0x6a8>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d02c      	beq.n	80053ba <HAL_DMA_IRQHandler+0x516>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a7a      	ldr	r2, [pc, #488]	@ (8005550 <HAL_DMA_IRQHandler+0x6ac>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d027      	beq.n	80053ba <HAL_DMA_IRQHandler+0x516>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a79      	ldr	r2, [pc, #484]	@ (8005554 <HAL_DMA_IRQHandler+0x6b0>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d022      	beq.n	80053ba <HAL_DMA_IRQHandler+0x516>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a77      	ldr	r2, [pc, #476]	@ (8005558 <HAL_DMA_IRQHandler+0x6b4>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d01d      	beq.n	80053ba <HAL_DMA_IRQHandler+0x516>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a76      	ldr	r2, [pc, #472]	@ (800555c <HAL_DMA_IRQHandler+0x6b8>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d018      	beq.n	80053ba <HAL_DMA_IRQHandler+0x516>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a74      	ldr	r2, [pc, #464]	@ (8005560 <HAL_DMA_IRQHandler+0x6bc>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d013      	beq.n	80053ba <HAL_DMA_IRQHandler+0x516>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a73      	ldr	r2, [pc, #460]	@ (8005564 <HAL_DMA_IRQHandler+0x6c0>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d00e      	beq.n	80053ba <HAL_DMA_IRQHandler+0x516>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a71      	ldr	r2, [pc, #452]	@ (8005568 <HAL_DMA_IRQHandler+0x6c4>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d009      	beq.n	80053ba <HAL_DMA_IRQHandler+0x516>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a70      	ldr	r2, [pc, #448]	@ (800556c <HAL_DMA_IRQHandler+0x6c8>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d004      	beq.n	80053ba <HAL_DMA_IRQHandler+0x516>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a6e      	ldr	r2, [pc, #440]	@ (8005570 <HAL_DMA_IRQHandler+0x6cc>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d10a      	bne.n	80053d0 <HAL_DMA_IRQHandler+0x52c>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0308 	and.w	r3, r3, #8
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	bf14      	ite	ne
 80053c8:	2301      	movne	r3, #1
 80053ca:	2300      	moveq	r3, #0
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	e009      	b.n	80053e4 <HAL_DMA_IRQHandler+0x540>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 0304 	and.w	r3, r3, #4
 80053da:	2b00      	cmp	r3, #0
 80053dc:	bf14      	ite	ne
 80053de:	2301      	movne	r3, #1
 80053e0:	2300      	moveq	r3, #0
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d03e      	beq.n	8005466 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053ec:	f003 031f 	and.w	r3, r3, #31
 80053f0:	2210      	movs	r2, #16
 80053f2:	409a      	lsls	r2, r3
 80053f4:	6a3b      	ldr	r3, [r7, #32]
 80053f6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005402:	2b00      	cmp	r3, #0
 8005404:	d018      	beq.n	8005438 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005410:	2b00      	cmp	r3, #0
 8005412:	d108      	bne.n	8005426 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005418:	2b00      	cmp	r3, #0
 800541a:	d024      	beq.n	8005466 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	4798      	blx	r3
 8005424:	e01f      	b.n	8005466 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800542a:	2b00      	cmp	r3, #0
 800542c:	d01b      	beq.n	8005466 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	4798      	blx	r3
 8005436:	e016      	b.n	8005466 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005442:	2b00      	cmp	r3, #0
 8005444:	d107      	bne.n	8005456 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f022 0208 	bic.w	r2, r2, #8
 8005454:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800545a:	2b00      	cmp	r3, #0
 800545c:	d003      	beq.n	8005466 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800546a:	f003 031f 	and.w	r3, r3, #31
 800546e:	2220      	movs	r2, #32
 8005470:	409a      	lsls	r2, r3
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	4013      	ands	r3, r2
 8005476:	2b00      	cmp	r3, #0
 8005478:	f000 8110 	beq.w	800569c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a2c      	ldr	r2, [pc, #176]	@ (8005534 <HAL_DMA_IRQHandler+0x690>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d04a      	beq.n	800551c <HAL_DMA_IRQHandler+0x678>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a2b      	ldr	r2, [pc, #172]	@ (8005538 <HAL_DMA_IRQHandler+0x694>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d045      	beq.n	800551c <HAL_DMA_IRQHandler+0x678>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a29      	ldr	r2, [pc, #164]	@ (800553c <HAL_DMA_IRQHandler+0x698>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d040      	beq.n	800551c <HAL_DMA_IRQHandler+0x678>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a28      	ldr	r2, [pc, #160]	@ (8005540 <HAL_DMA_IRQHandler+0x69c>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d03b      	beq.n	800551c <HAL_DMA_IRQHandler+0x678>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a26      	ldr	r2, [pc, #152]	@ (8005544 <HAL_DMA_IRQHandler+0x6a0>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d036      	beq.n	800551c <HAL_DMA_IRQHandler+0x678>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a25      	ldr	r2, [pc, #148]	@ (8005548 <HAL_DMA_IRQHandler+0x6a4>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d031      	beq.n	800551c <HAL_DMA_IRQHandler+0x678>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a23      	ldr	r2, [pc, #140]	@ (800554c <HAL_DMA_IRQHandler+0x6a8>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d02c      	beq.n	800551c <HAL_DMA_IRQHandler+0x678>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a22      	ldr	r2, [pc, #136]	@ (8005550 <HAL_DMA_IRQHandler+0x6ac>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d027      	beq.n	800551c <HAL_DMA_IRQHandler+0x678>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a20      	ldr	r2, [pc, #128]	@ (8005554 <HAL_DMA_IRQHandler+0x6b0>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d022      	beq.n	800551c <HAL_DMA_IRQHandler+0x678>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a1f      	ldr	r2, [pc, #124]	@ (8005558 <HAL_DMA_IRQHandler+0x6b4>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d01d      	beq.n	800551c <HAL_DMA_IRQHandler+0x678>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a1d      	ldr	r2, [pc, #116]	@ (800555c <HAL_DMA_IRQHandler+0x6b8>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d018      	beq.n	800551c <HAL_DMA_IRQHandler+0x678>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a1c      	ldr	r2, [pc, #112]	@ (8005560 <HAL_DMA_IRQHandler+0x6bc>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d013      	beq.n	800551c <HAL_DMA_IRQHandler+0x678>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a1a      	ldr	r2, [pc, #104]	@ (8005564 <HAL_DMA_IRQHandler+0x6c0>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d00e      	beq.n	800551c <HAL_DMA_IRQHandler+0x678>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a19      	ldr	r2, [pc, #100]	@ (8005568 <HAL_DMA_IRQHandler+0x6c4>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d009      	beq.n	800551c <HAL_DMA_IRQHandler+0x678>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a17      	ldr	r2, [pc, #92]	@ (800556c <HAL_DMA_IRQHandler+0x6c8>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d004      	beq.n	800551c <HAL_DMA_IRQHandler+0x678>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a16      	ldr	r2, [pc, #88]	@ (8005570 <HAL_DMA_IRQHandler+0x6cc>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d12b      	bne.n	8005574 <HAL_DMA_IRQHandler+0x6d0>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0310 	and.w	r3, r3, #16
 8005526:	2b00      	cmp	r3, #0
 8005528:	bf14      	ite	ne
 800552a:	2301      	movne	r3, #1
 800552c:	2300      	moveq	r3, #0
 800552e:	b2db      	uxtb	r3, r3
 8005530:	e02a      	b.n	8005588 <HAL_DMA_IRQHandler+0x6e4>
 8005532:	bf00      	nop
 8005534:	40020010 	.word	0x40020010
 8005538:	40020028 	.word	0x40020028
 800553c:	40020040 	.word	0x40020040
 8005540:	40020058 	.word	0x40020058
 8005544:	40020070 	.word	0x40020070
 8005548:	40020088 	.word	0x40020088
 800554c:	400200a0 	.word	0x400200a0
 8005550:	400200b8 	.word	0x400200b8
 8005554:	40020410 	.word	0x40020410
 8005558:	40020428 	.word	0x40020428
 800555c:	40020440 	.word	0x40020440
 8005560:	40020458 	.word	0x40020458
 8005564:	40020470 	.word	0x40020470
 8005568:	40020488 	.word	0x40020488
 800556c:	400204a0 	.word	0x400204a0
 8005570:	400204b8 	.word	0x400204b8
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0302 	and.w	r3, r3, #2
 800557e:	2b00      	cmp	r3, #0
 8005580:	bf14      	ite	ne
 8005582:	2301      	movne	r3, #1
 8005584:	2300      	moveq	r3, #0
 8005586:	b2db      	uxtb	r3, r3
 8005588:	2b00      	cmp	r3, #0
 800558a:	f000 8087 	beq.w	800569c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005592:	f003 031f 	and.w	r3, r3, #31
 8005596:	2220      	movs	r2, #32
 8005598:	409a      	lsls	r2, r3
 800559a:	6a3b      	ldr	r3, [r7, #32]
 800559c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	2b04      	cmp	r3, #4
 80055a8:	d139      	bne.n	800561e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f022 0216 	bic.w	r2, r2, #22
 80055b8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	695a      	ldr	r2, [r3, #20]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80055c8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d103      	bne.n	80055da <HAL_DMA_IRQHandler+0x736>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d007      	beq.n	80055ea <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f022 0208 	bic.w	r2, r2, #8
 80055e8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055ee:	f003 031f 	and.w	r3, r3, #31
 80055f2:	223f      	movs	r2, #63	@ 0x3f
 80055f4:	409a      	lsls	r2, r3
 80055f6:	6a3b      	ldr	r3, [r7, #32]
 80055f8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2201      	movs	r2, #1
 80055fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800560e:	2b00      	cmp	r3, #0
 8005610:	f000 8382 	beq.w	8005d18 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	4798      	blx	r3
          }
          return;
 800561c:	e37c      	b.n	8005d18 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005628:	2b00      	cmp	r3, #0
 800562a:	d018      	beq.n	800565e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005636:	2b00      	cmp	r3, #0
 8005638:	d108      	bne.n	800564c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800563e:	2b00      	cmp	r3, #0
 8005640:	d02c      	beq.n	800569c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	4798      	blx	r3
 800564a:	e027      	b.n	800569c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005650:	2b00      	cmp	r3, #0
 8005652:	d023      	beq.n	800569c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	4798      	blx	r3
 800565c:	e01e      	b.n	800569c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005668:	2b00      	cmp	r3, #0
 800566a:	d10f      	bne.n	800568c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f022 0210 	bic.w	r2, r2, #16
 800567a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005690:	2b00      	cmp	r3, #0
 8005692:	d003      	beq.n	800569c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	f000 833e 	beq.w	8005d22 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056aa:	f003 0301 	and.w	r3, r3, #1
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	f000 8088 	beq.w	80057c4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2204      	movs	r2, #4
 80056b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a89      	ldr	r2, [pc, #548]	@ (80058e8 <HAL_DMA_IRQHandler+0xa44>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d04a      	beq.n	800575c <HAL_DMA_IRQHandler+0x8b8>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a88      	ldr	r2, [pc, #544]	@ (80058ec <HAL_DMA_IRQHandler+0xa48>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d045      	beq.n	800575c <HAL_DMA_IRQHandler+0x8b8>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a86      	ldr	r2, [pc, #536]	@ (80058f0 <HAL_DMA_IRQHandler+0xa4c>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d040      	beq.n	800575c <HAL_DMA_IRQHandler+0x8b8>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a85      	ldr	r2, [pc, #532]	@ (80058f4 <HAL_DMA_IRQHandler+0xa50>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d03b      	beq.n	800575c <HAL_DMA_IRQHandler+0x8b8>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a83      	ldr	r2, [pc, #524]	@ (80058f8 <HAL_DMA_IRQHandler+0xa54>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d036      	beq.n	800575c <HAL_DMA_IRQHandler+0x8b8>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a82      	ldr	r2, [pc, #520]	@ (80058fc <HAL_DMA_IRQHandler+0xa58>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d031      	beq.n	800575c <HAL_DMA_IRQHandler+0x8b8>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a80      	ldr	r2, [pc, #512]	@ (8005900 <HAL_DMA_IRQHandler+0xa5c>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d02c      	beq.n	800575c <HAL_DMA_IRQHandler+0x8b8>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a7f      	ldr	r2, [pc, #508]	@ (8005904 <HAL_DMA_IRQHandler+0xa60>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d027      	beq.n	800575c <HAL_DMA_IRQHandler+0x8b8>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a7d      	ldr	r2, [pc, #500]	@ (8005908 <HAL_DMA_IRQHandler+0xa64>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d022      	beq.n	800575c <HAL_DMA_IRQHandler+0x8b8>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a7c      	ldr	r2, [pc, #496]	@ (800590c <HAL_DMA_IRQHandler+0xa68>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d01d      	beq.n	800575c <HAL_DMA_IRQHandler+0x8b8>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a7a      	ldr	r2, [pc, #488]	@ (8005910 <HAL_DMA_IRQHandler+0xa6c>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d018      	beq.n	800575c <HAL_DMA_IRQHandler+0x8b8>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a79      	ldr	r2, [pc, #484]	@ (8005914 <HAL_DMA_IRQHandler+0xa70>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d013      	beq.n	800575c <HAL_DMA_IRQHandler+0x8b8>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a77      	ldr	r2, [pc, #476]	@ (8005918 <HAL_DMA_IRQHandler+0xa74>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d00e      	beq.n	800575c <HAL_DMA_IRQHandler+0x8b8>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a76      	ldr	r2, [pc, #472]	@ (800591c <HAL_DMA_IRQHandler+0xa78>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d009      	beq.n	800575c <HAL_DMA_IRQHandler+0x8b8>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a74      	ldr	r2, [pc, #464]	@ (8005920 <HAL_DMA_IRQHandler+0xa7c>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d004      	beq.n	800575c <HAL_DMA_IRQHandler+0x8b8>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a73      	ldr	r2, [pc, #460]	@ (8005924 <HAL_DMA_IRQHandler+0xa80>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d108      	bne.n	800576e <HAL_DMA_IRQHandler+0x8ca>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f022 0201 	bic.w	r2, r2, #1
 800576a:	601a      	str	r2, [r3, #0]
 800576c:	e007      	b.n	800577e <HAL_DMA_IRQHandler+0x8da>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f022 0201 	bic.w	r2, r2, #1
 800577c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	3301      	adds	r3, #1
 8005782:	60fb      	str	r3, [r7, #12]
 8005784:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005786:	429a      	cmp	r2, r3
 8005788:	d307      	bcc.n	800579a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 0301 	and.w	r3, r3, #1
 8005794:	2b00      	cmp	r3, #0
 8005796:	d1f2      	bne.n	800577e <HAL_DMA_IRQHandler+0x8da>
 8005798:	e000      	b.n	800579c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800579a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 0301 	and.w	r3, r3, #1
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d004      	beq.n	80057b4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2203      	movs	r2, #3
 80057ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80057b2:	e003      	b.n	80057bc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	f000 82aa 	beq.w	8005d22 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	4798      	blx	r3
 80057d6:	e2a4      	b.n	8005d22 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a52      	ldr	r2, [pc, #328]	@ (8005928 <HAL_DMA_IRQHandler+0xa84>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d04a      	beq.n	8005878 <HAL_DMA_IRQHandler+0x9d4>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a51      	ldr	r2, [pc, #324]	@ (800592c <HAL_DMA_IRQHandler+0xa88>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d045      	beq.n	8005878 <HAL_DMA_IRQHandler+0x9d4>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a4f      	ldr	r2, [pc, #316]	@ (8005930 <HAL_DMA_IRQHandler+0xa8c>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d040      	beq.n	8005878 <HAL_DMA_IRQHandler+0x9d4>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a4e      	ldr	r2, [pc, #312]	@ (8005934 <HAL_DMA_IRQHandler+0xa90>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d03b      	beq.n	8005878 <HAL_DMA_IRQHandler+0x9d4>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a4c      	ldr	r2, [pc, #304]	@ (8005938 <HAL_DMA_IRQHandler+0xa94>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d036      	beq.n	8005878 <HAL_DMA_IRQHandler+0x9d4>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a4b      	ldr	r2, [pc, #300]	@ (800593c <HAL_DMA_IRQHandler+0xa98>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d031      	beq.n	8005878 <HAL_DMA_IRQHandler+0x9d4>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a49      	ldr	r2, [pc, #292]	@ (8005940 <HAL_DMA_IRQHandler+0xa9c>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d02c      	beq.n	8005878 <HAL_DMA_IRQHandler+0x9d4>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a48      	ldr	r2, [pc, #288]	@ (8005944 <HAL_DMA_IRQHandler+0xaa0>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d027      	beq.n	8005878 <HAL_DMA_IRQHandler+0x9d4>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a46      	ldr	r2, [pc, #280]	@ (8005948 <HAL_DMA_IRQHandler+0xaa4>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d022      	beq.n	8005878 <HAL_DMA_IRQHandler+0x9d4>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a45      	ldr	r2, [pc, #276]	@ (800594c <HAL_DMA_IRQHandler+0xaa8>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d01d      	beq.n	8005878 <HAL_DMA_IRQHandler+0x9d4>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a43      	ldr	r2, [pc, #268]	@ (8005950 <HAL_DMA_IRQHandler+0xaac>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d018      	beq.n	8005878 <HAL_DMA_IRQHandler+0x9d4>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a42      	ldr	r2, [pc, #264]	@ (8005954 <HAL_DMA_IRQHandler+0xab0>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d013      	beq.n	8005878 <HAL_DMA_IRQHandler+0x9d4>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a40      	ldr	r2, [pc, #256]	@ (8005958 <HAL_DMA_IRQHandler+0xab4>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d00e      	beq.n	8005878 <HAL_DMA_IRQHandler+0x9d4>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a3f      	ldr	r2, [pc, #252]	@ (800595c <HAL_DMA_IRQHandler+0xab8>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d009      	beq.n	8005878 <HAL_DMA_IRQHandler+0x9d4>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a3d      	ldr	r2, [pc, #244]	@ (8005960 <HAL_DMA_IRQHandler+0xabc>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d004      	beq.n	8005878 <HAL_DMA_IRQHandler+0x9d4>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a3c      	ldr	r2, [pc, #240]	@ (8005964 <HAL_DMA_IRQHandler+0xac0>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d101      	bne.n	800587c <HAL_DMA_IRQHandler+0x9d8>
 8005878:	2301      	movs	r3, #1
 800587a:	e000      	b.n	800587e <HAL_DMA_IRQHandler+0x9da>
 800587c:	2300      	movs	r3, #0
 800587e:	2b00      	cmp	r3, #0
 8005880:	f000 824f 	beq.w	8005d22 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005890:	f003 031f 	and.w	r3, r3, #31
 8005894:	2204      	movs	r2, #4
 8005896:	409a      	lsls	r2, r3
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	4013      	ands	r3, r2
 800589c:	2b00      	cmp	r3, #0
 800589e:	f000 80dd 	beq.w	8005a5c <HAL_DMA_IRQHandler+0xbb8>
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	f003 0304 	and.w	r3, r3, #4
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	f000 80d7 	beq.w	8005a5c <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058b2:	f003 031f 	and.w	r3, r3, #31
 80058b6:	2204      	movs	r2, #4
 80058b8:	409a      	lsls	r2, r3
 80058ba:	69fb      	ldr	r3, [r7, #28]
 80058bc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d059      	beq.n	800597c <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d14a      	bne.n	8005968 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	f000 8220 	beq.w	8005d1c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80058e4:	e21a      	b.n	8005d1c <HAL_DMA_IRQHandler+0xe78>
 80058e6:	bf00      	nop
 80058e8:	40020010 	.word	0x40020010
 80058ec:	40020028 	.word	0x40020028
 80058f0:	40020040 	.word	0x40020040
 80058f4:	40020058 	.word	0x40020058
 80058f8:	40020070 	.word	0x40020070
 80058fc:	40020088 	.word	0x40020088
 8005900:	400200a0 	.word	0x400200a0
 8005904:	400200b8 	.word	0x400200b8
 8005908:	40020410 	.word	0x40020410
 800590c:	40020428 	.word	0x40020428
 8005910:	40020440 	.word	0x40020440
 8005914:	40020458 	.word	0x40020458
 8005918:	40020470 	.word	0x40020470
 800591c:	40020488 	.word	0x40020488
 8005920:	400204a0 	.word	0x400204a0
 8005924:	400204b8 	.word	0x400204b8
 8005928:	48022c08 	.word	0x48022c08
 800592c:	48022c1c 	.word	0x48022c1c
 8005930:	48022c30 	.word	0x48022c30
 8005934:	48022c44 	.word	0x48022c44
 8005938:	48022c58 	.word	0x48022c58
 800593c:	48022c6c 	.word	0x48022c6c
 8005940:	48022c80 	.word	0x48022c80
 8005944:	48022c94 	.word	0x48022c94
 8005948:	58025408 	.word	0x58025408
 800594c:	5802541c 	.word	0x5802541c
 8005950:	58025430 	.word	0x58025430
 8005954:	58025444 	.word	0x58025444
 8005958:	58025458 	.word	0x58025458
 800595c:	5802546c 	.word	0x5802546c
 8005960:	58025480 	.word	0x58025480
 8005964:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800596c:	2b00      	cmp	r3, #0
 800596e:	f000 81d5 	beq.w	8005d1c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800597a:	e1cf      	b.n	8005d1c <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	f003 0320 	and.w	r3, r3, #32
 8005982:	2b00      	cmp	r3, #0
 8005984:	d160      	bne.n	8005a48 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a7f      	ldr	r2, [pc, #508]	@ (8005b88 <HAL_DMA_IRQHandler+0xce4>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d04a      	beq.n	8005a26 <HAL_DMA_IRQHandler+0xb82>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a7d      	ldr	r2, [pc, #500]	@ (8005b8c <HAL_DMA_IRQHandler+0xce8>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d045      	beq.n	8005a26 <HAL_DMA_IRQHandler+0xb82>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a7c      	ldr	r2, [pc, #496]	@ (8005b90 <HAL_DMA_IRQHandler+0xcec>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d040      	beq.n	8005a26 <HAL_DMA_IRQHandler+0xb82>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a7a      	ldr	r2, [pc, #488]	@ (8005b94 <HAL_DMA_IRQHandler+0xcf0>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d03b      	beq.n	8005a26 <HAL_DMA_IRQHandler+0xb82>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a79      	ldr	r2, [pc, #484]	@ (8005b98 <HAL_DMA_IRQHandler+0xcf4>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d036      	beq.n	8005a26 <HAL_DMA_IRQHandler+0xb82>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a77      	ldr	r2, [pc, #476]	@ (8005b9c <HAL_DMA_IRQHandler+0xcf8>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d031      	beq.n	8005a26 <HAL_DMA_IRQHandler+0xb82>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a76      	ldr	r2, [pc, #472]	@ (8005ba0 <HAL_DMA_IRQHandler+0xcfc>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d02c      	beq.n	8005a26 <HAL_DMA_IRQHandler+0xb82>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a74      	ldr	r2, [pc, #464]	@ (8005ba4 <HAL_DMA_IRQHandler+0xd00>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d027      	beq.n	8005a26 <HAL_DMA_IRQHandler+0xb82>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a73      	ldr	r2, [pc, #460]	@ (8005ba8 <HAL_DMA_IRQHandler+0xd04>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d022      	beq.n	8005a26 <HAL_DMA_IRQHandler+0xb82>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a71      	ldr	r2, [pc, #452]	@ (8005bac <HAL_DMA_IRQHandler+0xd08>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d01d      	beq.n	8005a26 <HAL_DMA_IRQHandler+0xb82>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a70      	ldr	r2, [pc, #448]	@ (8005bb0 <HAL_DMA_IRQHandler+0xd0c>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d018      	beq.n	8005a26 <HAL_DMA_IRQHandler+0xb82>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a6e      	ldr	r2, [pc, #440]	@ (8005bb4 <HAL_DMA_IRQHandler+0xd10>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d013      	beq.n	8005a26 <HAL_DMA_IRQHandler+0xb82>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a6d      	ldr	r2, [pc, #436]	@ (8005bb8 <HAL_DMA_IRQHandler+0xd14>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d00e      	beq.n	8005a26 <HAL_DMA_IRQHandler+0xb82>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a6b      	ldr	r2, [pc, #428]	@ (8005bbc <HAL_DMA_IRQHandler+0xd18>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d009      	beq.n	8005a26 <HAL_DMA_IRQHandler+0xb82>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a6a      	ldr	r2, [pc, #424]	@ (8005bc0 <HAL_DMA_IRQHandler+0xd1c>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d004      	beq.n	8005a26 <HAL_DMA_IRQHandler+0xb82>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a68      	ldr	r2, [pc, #416]	@ (8005bc4 <HAL_DMA_IRQHandler+0xd20>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d108      	bne.n	8005a38 <HAL_DMA_IRQHandler+0xb94>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f022 0208 	bic.w	r2, r2, #8
 8005a34:	601a      	str	r2, [r3, #0]
 8005a36:	e007      	b.n	8005a48 <HAL_DMA_IRQHandler+0xba4>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f022 0204 	bic.w	r2, r2, #4
 8005a46:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	f000 8165 	beq.w	8005d1c <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a5a:	e15f      	b.n	8005d1c <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a60:	f003 031f 	and.w	r3, r3, #31
 8005a64:	2202      	movs	r2, #2
 8005a66:	409a      	lsls	r2, r3
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	4013      	ands	r3, r2
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	f000 80c5 	beq.w	8005bfc <HAL_DMA_IRQHandler+0xd58>
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	f003 0302 	and.w	r3, r3, #2
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	f000 80bf 	beq.w	8005bfc <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a82:	f003 031f 	and.w	r3, r3, #31
 8005a86:	2202      	movs	r2, #2
 8005a88:	409a      	lsls	r2, r3
 8005a8a:	69fb      	ldr	r3, [r7, #28]
 8005a8c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d018      	beq.n	8005aca <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d109      	bne.n	8005ab6 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	f000 813a 	beq.w	8005d20 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ab4:	e134      	b.n	8005d20 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	f000 8130 	beq.w	8005d20 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ac8:	e12a      	b.n	8005d20 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	f003 0320 	and.w	r3, r3, #32
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	f040 8089 	bne.w	8005be8 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a2b      	ldr	r2, [pc, #172]	@ (8005b88 <HAL_DMA_IRQHandler+0xce4>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d04a      	beq.n	8005b76 <HAL_DMA_IRQHandler+0xcd2>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a29      	ldr	r2, [pc, #164]	@ (8005b8c <HAL_DMA_IRQHandler+0xce8>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d045      	beq.n	8005b76 <HAL_DMA_IRQHandler+0xcd2>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a28      	ldr	r2, [pc, #160]	@ (8005b90 <HAL_DMA_IRQHandler+0xcec>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d040      	beq.n	8005b76 <HAL_DMA_IRQHandler+0xcd2>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a26      	ldr	r2, [pc, #152]	@ (8005b94 <HAL_DMA_IRQHandler+0xcf0>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d03b      	beq.n	8005b76 <HAL_DMA_IRQHandler+0xcd2>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a25      	ldr	r2, [pc, #148]	@ (8005b98 <HAL_DMA_IRQHandler+0xcf4>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d036      	beq.n	8005b76 <HAL_DMA_IRQHandler+0xcd2>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a23      	ldr	r2, [pc, #140]	@ (8005b9c <HAL_DMA_IRQHandler+0xcf8>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d031      	beq.n	8005b76 <HAL_DMA_IRQHandler+0xcd2>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a22      	ldr	r2, [pc, #136]	@ (8005ba0 <HAL_DMA_IRQHandler+0xcfc>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d02c      	beq.n	8005b76 <HAL_DMA_IRQHandler+0xcd2>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a20      	ldr	r2, [pc, #128]	@ (8005ba4 <HAL_DMA_IRQHandler+0xd00>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d027      	beq.n	8005b76 <HAL_DMA_IRQHandler+0xcd2>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a1f      	ldr	r2, [pc, #124]	@ (8005ba8 <HAL_DMA_IRQHandler+0xd04>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d022      	beq.n	8005b76 <HAL_DMA_IRQHandler+0xcd2>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a1d      	ldr	r2, [pc, #116]	@ (8005bac <HAL_DMA_IRQHandler+0xd08>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d01d      	beq.n	8005b76 <HAL_DMA_IRQHandler+0xcd2>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a1c      	ldr	r2, [pc, #112]	@ (8005bb0 <HAL_DMA_IRQHandler+0xd0c>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d018      	beq.n	8005b76 <HAL_DMA_IRQHandler+0xcd2>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a1a      	ldr	r2, [pc, #104]	@ (8005bb4 <HAL_DMA_IRQHandler+0xd10>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d013      	beq.n	8005b76 <HAL_DMA_IRQHandler+0xcd2>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a19      	ldr	r2, [pc, #100]	@ (8005bb8 <HAL_DMA_IRQHandler+0xd14>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d00e      	beq.n	8005b76 <HAL_DMA_IRQHandler+0xcd2>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a17      	ldr	r2, [pc, #92]	@ (8005bbc <HAL_DMA_IRQHandler+0xd18>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d009      	beq.n	8005b76 <HAL_DMA_IRQHandler+0xcd2>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a16      	ldr	r2, [pc, #88]	@ (8005bc0 <HAL_DMA_IRQHandler+0xd1c>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d004      	beq.n	8005b76 <HAL_DMA_IRQHandler+0xcd2>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a14      	ldr	r2, [pc, #80]	@ (8005bc4 <HAL_DMA_IRQHandler+0xd20>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d128      	bne.n	8005bc8 <HAL_DMA_IRQHandler+0xd24>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f022 0214 	bic.w	r2, r2, #20
 8005b84:	601a      	str	r2, [r3, #0]
 8005b86:	e027      	b.n	8005bd8 <HAL_DMA_IRQHandler+0xd34>
 8005b88:	40020010 	.word	0x40020010
 8005b8c:	40020028 	.word	0x40020028
 8005b90:	40020040 	.word	0x40020040
 8005b94:	40020058 	.word	0x40020058
 8005b98:	40020070 	.word	0x40020070
 8005b9c:	40020088 	.word	0x40020088
 8005ba0:	400200a0 	.word	0x400200a0
 8005ba4:	400200b8 	.word	0x400200b8
 8005ba8:	40020410 	.word	0x40020410
 8005bac:	40020428 	.word	0x40020428
 8005bb0:	40020440 	.word	0x40020440
 8005bb4:	40020458 	.word	0x40020458
 8005bb8:	40020470 	.word	0x40020470
 8005bbc:	40020488 	.word	0x40020488
 8005bc0:	400204a0 	.word	0x400204a0
 8005bc4:	400204b8 	.word	0x400204b8
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f022 020a 	bic.w	r2, r2, #10
 8005bd6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	f000 8097 	beq.w	8005d20 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005bfa:	e091      	b.n	8005d20 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c00:	f003 031f 	and.w	r3, r3, #31
 8005c04:	2208      	movs	r2, #8
 8005c06:	409a      	lsls	r2, r3
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	4013      	ands	r3, r2
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	f000 8088 	beq.w	8005d22 <HAL_DMA_IRQHandler+0xe7e>
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	f003 0308 	and.w	r3, r3, #8
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	f000 8082 	beq.w	8005d22 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a41      	ldr	r2, [pc, #260]	@ (8005d28 <HAL_DMA_IRQHandler+0xe84>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d04a      	beq.n	8005cbe <HAL_DMA_IRQHandler+0xe1a>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a3f      	ldr	r2, [pc, #252]	@ (8005d2c <HAL_DMA_IRQHandler+0xe88>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d045      	beq.n	8005cbe <HAL_DMA_IRQHandler+0xe1a>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a3e      	ldr	r2, [pc, #248]	@ (8005d30 <HAL_DMA_IRQHandler+0xe8c>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d040      	beq.n	8005cbe <HAL_DMA_IRQHandler+0xe1a>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a3c      	ldr	r2, [pc, #240]	@ (8005d34 <HAL_DMA_IRQHandler+0xe90>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d03b      	beq.n	8005cbe <HAL_DMA_IRQHandler+0xe1a>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a3b      	ldr	r2, [pc, #236]	@ (8005d38 <HAL_DMA_IRQHandler+0xe94>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d036      	beq.n	8005cbe <HAL_DMA_IRQHandler+0xe1a>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a39      	ldr	r2, [pc, #228]	@ (8005d3c <HAL_DMA_IRQHandler+0xe98>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d031      	beq.n	8005cbe <HAL_DMA_IRQHandler+0xe1a>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a38      	ldr	r2, [pc, #224]	@ (8005d40 <HAL_DMA_IRQHandler+0xe9c>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d02c      	beq.n	8005cbe <HAL_DMA_IRQHandler+0xe1a>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a36      	ldr	r2, [pc, #216]	@ (8005d44 <HAL_DMA_IRQHandler+0xea0>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d027      	beq.n	8005cbe <HAL_DMA_IRQHandler+0xe1a>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a35      	ldr	r2, [pc, #212]	@ (8005d48 <HAL_DMA_IRQHandler+0xea4>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d022      	beq.n	8005cbe <HAL_DMA_IRQHandler+0xe1a>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a33      	ldr	r2, [pc, #204]	@ (8005d4c <HAL_DMA_IRQHandler+0xea8>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d01d      	beq.n	8005cbe <HAL_DMA_IRQHandler+0xe1a>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a32      	ldr	r2, [pc, #200]	@ (8005d50 <HAL_DMA_IRQHandler+0xeac>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d018      	beq.n	8005cbe <HAL_DMA_IRQHandler+0xe1a>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a30      	ldr	r2, [pc, #192]	@ (8005d54 <HAL_DMA_IRQHandler+0xeb0>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d013      	beq.n	8005cbe <HAL_DMA_IRQHandler+0xe1a>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a2f      	ldr	r2, [pc, #188]	@ (8005d58 <HAL_DMA_IRQHandler+0xeb4>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d00e      	beq.n	8005cbe <HAL_DMA_IRQHandler+0xe1a>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a2d      	ldr	r2, [pc, #180]	@ (8005d5c <HAL_DMA_IRQHandler+0xeb8>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d009      	beq.n	8005cbe <HAL_DMA_IRQHandler+0xe1a>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a2c      	ldr	r2, [pc, #176]	@ (8005d60 <HAL_DMA_IRQHandler+0xebc>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d004      	beq.n	8005cbe <HAL_DMA_IRQHandler+0xe1a>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a2a      	ldr	r2, [pc, #168]	@ (8005d64 <HAL_DMA_IRQHandler+0xec0>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d108      	bne.n	8005cd0 <HAL_DMA_IRQHandler+0xe2c>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f022 021c 	bic.w	r2, r2, #28
 8005ccc:	601a      	str	r2, [r3, #0]
 8005cce:	e007      	b.n	8005ce0 <HAL_DMA_IRQHandler+0xe3c>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f022 020e 	bic.w	r2, r2, #14
 8005cde:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ce4:	f003 031f 	and.w	r3, r3, #31
 8005ce8:	2201      	movs	r2, #1
 8005cea:	409a      	lsls	r2, r3
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d009      	beq.n	8005d22 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	4798      	blx	r3
 8005d16:	e004      	b.n	8005d22 <HAL_DMA_IRQHandler+0xe7e>
          return;
 8005d18:	bf00      	nop
 8005d1a:	e002      	b.n	8005d22 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d1c:	bf00      	nop
 8005d1e:	e000      	b.n	8005d22 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d20:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005d22:	3728      	adds	r7, #40	@ 0x28
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}
 8005d28:	40020010 	.word	0x40020010
 8005d2c:	40020028 	.word	0x40020028
 8005d30:	40020040 	.word	0x40020040
 8005d34:	40020058 	.word	0x40020058
 8005d38:	40020070 	.word	0x40020070
 8005d3c:	40020088 	.word	0x40020088
 8005d40:	400200a0 	.word	0x400200a0
 8005d44:	400200b8 	.word	0x400200b8
 8005d48:	40020410 	.word	0x40020410
 8005d4c:	40020428 	.word	0x40020428
 8005d50:	40020440 	.word	0x40020440
 8005d54:	40020458 	.word	0x40020458
 8005d58:	40020470 	.word	0x40020470
 8005d5c:	40020488 	.word	0x40020488
 8005d60:	400204a0 	.word	0x400204a0
 8005d64:	400204b8 	.word	0x400204b8

08005d68 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b087      	sub	sp, #28
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	60f8      	str	r0, [r7, #12]
 8005d70:	60b9      	str	r1, [r7, #8]
 8005d72:	607a      	str	r2, [r7, #4]
 8005d74:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d7a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d80:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a7f      	ldr	r2, [pc, #508]	@ (8005f84 <DMA_SetConfig+0x21c>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d072      	beq.n	8005e72 <DMA_SetConfig+0x10a>
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a7d      	ldr	r2, [pc, #500]	@ (8005f88 <DMA_SetConfig+0x220>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d06d      	beq.n	8005e72 <DMA_SetConfig+0x10a>
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a7c      	ldr	r2, [pc, #496]	@ (8005f8c <DMA_SetConfig+0x224>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d068      	beq.n	8005e72 <DMA_SetConfig+0x10a>
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a7a      	ldr	r2, [pc, #488]	@ (8005f90 <DMA_SetConfig+0x228>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d063      	beq.n	8005e72 <DMA_SetConfig+0x10a>
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a79      	ldr	r2, [pc, #484]	@ (8005f94 <DMA_SetConfig+0x22c>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d05e      	beq.n	8005e72 <DMA_SetConfig+0x10a>
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a77      	ldr	r2, [pc, #476]	@ (8005f98 <DMA_SetConfig+0x230>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d059      	beq.n	8005e72 <DMA_SetConfig+0x10a>
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a76      	ldr	r2, [pc, #472]	@ (8005f9c <DMA_SetConfig+0x234>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d054      	beq.n	8005e72 <DMA_SetConfig+0x10a>
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a74      	ldr	r2, [pc, #464]	@ (8005fa0 <DMA_SetConfig+0x238>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d04f      	beq.n	8005e72 <DMA_SetConfig+0x10a>
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a73      	ldr	r2, [pc, #460]	@ (8005fa4 <DMA_SetConfig+0x23c>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d04a      	beq.n	8005e72 <DMA_SetConfig+0x10a>
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a71      	ldr	r2, [pc, #452]	@ (8005fa8 <DMA_SetConfig+0x240>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d045      	beq.n	8005e72 <DMA_SetConfig+0x10a>
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a70      	ldr	r2, [pc, #448]	@ (8005fac <DMA_SetConfig+0x244>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d040      	beq.n	8005e72 <DMA_SetConfig+0x10a>
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a6e      	ldr	r2, [pc, #440]	@ (8005fb0 <DMA_SetConfig+0x248>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d03b      	beq.n	8005e72 <DMA_SetConfig+0x10a>
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a6d      	ldr	r2, [pc, #436]	@ (8005fb4 <DMA_SetConfig+0x24c>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d036      	beq.n	8005e72 <DMA_SetConfig+0x10a>
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a6b      	ldr	r2, [pc, #428]	@ (8005fb8 <DMA_SetConfig+0x250>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d031      	beq.n	8005e72 <DMA_SetConfig+0x10a>
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a6a      	ldr	r2, [pc, #424]	@ (8005fbc <DMA_SetConfig+0x254>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d02c      	beq.n	8005e72 <DMA_SetConfig+0x10a>
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a68      	ldr	r2, [pc, #416]	@ (8005fc0 <DMA_SetConfig+0x258>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d027      	beq.n	8005e72 <DMA_SetConfig+0x10a>
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a67      	ldr	r2, [pc, #412]	@ (8005fc4 <DMA_SetConfig+0x25c>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d022      	beq.n	8005e72 <DMA_SetConfig+0x10a>
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a65      	ldr	r2, [pc, #404]	@ (8005fc8 <DMA_SetConfig+0x260>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d01d      	beq.n	8005e72 <DMA_SetConfig+0x10a>
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a64      	ldr	r2, [pc, #400]	@ (8005fcc <DMA_SetConfig+0x264>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d018      	beq.n	8005e72 <DMA_SetConfig+0x10a>
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a62      	ldr	r2, [pc, #392]	@ (8005fd0 <DMA_SetConfig+0x268>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d013      	beq.n	8005e72 <DMA_SetConfig+0x10a>
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a61      	ldr	r2, [pc, #388]	@ (8005fd4 <DMA_SetConfig+0x26c>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d00e      	beq.n	8005e72 <DMA_SetConfig+0x10a>
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a5f      	ldr	r2, [pc, #380]	@ (8005fd8 <DMA_SetConfig+0x270>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d009      	beq.n	8005e72 <DMA_SetConfig+0x10a>
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a5e      	ldr	r2, [pc, #376]	@ (8005fdc <DMA_SetConfig+0x274>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d004      	beq.n	8005e72 <DMA_SetConfig+0x10a>
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a5c      	ldr	r2, [pc, #368]	@ (8005fe0 <DMA_SetConfig+0x278>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d101      	bne.n	8005e76 <DMA_SetConfig+0x10e>
 8005e72:	2301      	movs	r3, #1
 8005e74:	e000      	b.n	8005e78 <DMA_SetConfig+0x110>
 8005e76:	2300      	movs	r3, #0
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d00d      	beq.n	8005e98 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e80:	68fa      	ldr	r2, [r7, #12]
 8005e82:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005e84:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d004      	beq.n	8005e98 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e92:	68fa      	ldr	r2, [r7, #12]
 8005e94:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005e96:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a39      	ldr	r2, [pc, #228]	@ (8005f84 <DMA_SetConfig+0x21c>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d04a      	beq.n	8005f38 <DMA_SetConfig+0x1d0>
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a38      	ldr	r2, [pc, #224]	@ (8005f88 <DMA_SetConfig+0x220>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d045      	beq.n	8005f38 <DMA_SetConfig+0x1d0>
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a36      	ldr	r2, [pc, #216]	@ (8005f8c <DMA_SetConfig+0x224>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d040      	beq.n	8005f38 <DMA_SetConfig+0x1d0>
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a35      	ldr	r2, [pc, #212]	@ (8005f90 <DMA_SetConfig+0x228>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d03b      	beq.n	8005f38 <DMA_SetConfig+0x1d0>
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a33      	ldr	r2, [pc, #204]	@ (8005f94 <DMA_SetConfig+0x22c>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d036      	beq.n	8005f38 <DMA_SetConfig+0x1d0>
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a32      	ldr	r2, [pc, #200]	@ (8005f98 <DMA_SetConfig+0x230>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d031      	beq.n	8005f38 <DMA_SetConfig+0x1d0>
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a30      	ldr	r2, [pc, #192]	@ (8005f9c <DMA_SetConfig+0x234>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d02c      	beq.n	8005f38 <DMA_SetConfig+0x1d0>
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a2f      	ldr	r2, [pc, #188]	@ (8005fa0 <DMA_SetConfig+0x238>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d027      	beq.n	8005f38 <DMA_SetConfig+0x1d0>
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a2d      	ldr	r2, [pc, #180]	@ (8005fa4 <DMA_SetConfig+0x23c>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d022      	beq.n	8005f38 <DMA_SetConfig+0x1d0>
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a2c      	ldr	r2, [pc, #176]	@ (8005fa8 <DMA_SetConfig+0x240>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d01d      	beq.n	8005f38 <DMA_SetConfig+0x1d0>
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a2a      	ldr	r2, [pc, #168]	@ (8005fac <DMA_SetConfig+0x244>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d018      	beq.n	8005f38 <DMA_SetConfig+0x1d0>
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a29      	ldr	r2, [pc, #164]	@ (8005fb0 <DMA_SetConfig+0x248>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d013      	beq.n	8005f38 <DMA_SetConfig+0x1d0>
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a27      	ldr	r2, [pc, #156]	@ (8005fb4 <DMA_SetConfig+0x24c>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d00e      	beq.n	8005f38 <DMA_SetConfig+0x1d0>
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a26      	ldr	r2, [pc, #152]	@ (8005fb8 <DMA_SetConfig+0x250>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d009      	beq.n	8005f38 <DMA_SetConfig+0x1d0>
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a24      	ldr	r2, [pc, #144]	@ (8005fbc <DMA_SetConfig+0x254>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d004      	beq.n	8005f38 <DMA_SetConfig+0x1d0>
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a23      	ldr	r2, [pc, #140]	@ (8005fc0 <DMA_SetConfig+0x258>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d101      	bne.n	8005f3c <DMA_SetConfig+0x1d4>
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e000      	b.n	8005f3e <DMA_SetConfig+0x1d6>
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d059      	beq.n	8005ff6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f46:	f003 031f 	and.w	r3, r3, #31
 8005f4a:	223f      	movs	r2, #63	@ 0x3f
 8005f4c:	409a      	lsls	r2, r3
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005f60:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	683a      	ldr	r2, [r7, #0]
 8005f68:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	2b40      	cmp	r3, #64	@ 0x40
 8005f70:	d138      	bne.n	8005fe4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68ba      	ldr	r2, [r7, #8]
 8005f80:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005f82:	e0ae      	b.n	80060e2 <DMA_SetConfig+0x37a>
 8005f84:	40020010 	.word	0x40020010
 8005f88:	40020028 	.word	0x40020028
 8005f8c:	40020040 	.word	0x40020040
 8005f90:	40020058 	.word	0x40020058
 8005f94:	40020070 	.word	0x40020070
 8005f98:	40020088 	.word	0x40020088
 8005f9c:	400200a0 	.word	0x400200a0
 8005fa0:	400200b8 	.word	0x400200b8
 8005fa4:	40020410 	.word	0x40020410
 8005fa8:	40020428 	.word	0x40020428
 8005fac:	40020440 	.word	0x40020440
 8005fb0:	40020458 	.word	0x40020458
 8005fb4:	40020470 	.word	0x40020470
 8005fb8:	40020488 	.word	0x40020488
 8005fbc:	400204a0 	.word	0x400204a0
 8005fc0:	400204b8 	.word	0x400204b8
 8005fc4:	58025408 	.word	0x58025408
 8005fc8:	5802541c 	.word	0x5802541c
 8005fcc:	58025430 	.word	0x58025430
 8005fd0:	58025444 	.word	0x58025444
 8005fd4:	58025458 	.word	0x58025458
 8005fd8:	5802546c 	.word	0x5802546c
 8005fdc:	58025480 	.word	0x58025480
 8005fe0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	68ba      	ldr	r2, [r7, #8]
 8005fea:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	60da      	str	r2, [r3, #12]
}
 8005ff4:	e075      	b.n	80060e2 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a3d      	ldr	r2, [pc, #244]	@ (80060f0 <DMA_SetConfig+0x388>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d04a      	beq.n	8006096 <DMA_SetConfig+0x32e>
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a3b      	ldr	r2, [pc, #236]	@ (80060f4 <DMA_SetConfig+0x38c>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d045      	beq.n	8006096 <DMA_SetConfig+0x32e>
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a3a      	ldr	r2, [pc, #232]	@ (80060f8 <DMA_SetConfig+0x390>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d040      	beq.n	8006096 <DMA_SetConfig+0x32e>
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a38      	ldr	r2, [pc, #224]	@ (80060fc <DMA_SetConfig+0x394>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d03b      	beq.n	8006096 <DMA_SetConfig+0x32e>
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a37      	ldr	r2, [pc, #220]	@ (8006100 <DMA_SetConfig+0x398>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d036      	beq.n	8006096 <DMA_SetConfig+0x32e>
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a35      	ldr	r2, [pc, #212]	@ (8006104 <DMA_SetConfig+0x39c>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d031      	beq.n	8006096 <DMA_SetConfig+0x32e>
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a34      	ldr	r2, [pc, #208]	@ (8006108 <DMA_SetConfig+0x3a0>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d02c      	beq.n	8006096 <DMA_SetConfig+0x32e>
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a32      	ldr	r2, [pc, #200]	@ (800610c <DMA_SetConfig+0x3a4>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d027      	beq.n	8006096 <DMA_SetConfig+0x32e>
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a31      	ldr	r2, [pc, #196]	@ (8006110 <DMA_SetConfig+0x3a8>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d022      	beq.n	8006096 <DMA_SetConfig+0x32e>
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a2f      	ldr	r2, [pc, #188]	@ (8006114 <DMA_SetConfig+0x3ac>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d01d      	beq.n	8006096 <DMA_SetConfig+0x32e>
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a2e      	ldr	r2, [pc, #184]	@ (8006118 <DMA_SetConfig+0x3b0>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d018      	beq.n	8006096 <DMA_SetConfig+0x32e>
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a2c      	ldr	r2, [pc, #176]	@ (800611c <DMA_SetConfig+0x3b4>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d013      	beq.n	8006096 <DMA_SetConfig+0x32e>
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a2b      	ldr	r2, [pc, #172]	@ (8006120 <DMA_SetConfig+0x3b8>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d00e      	beq.n	8006096 <DMA_SetConfig+0x32e>
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a29      	ldr	r2, [pc, #164]	@ (8006124 <DMA_SetConfig+0x3bc>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d009      	beq.n	8006096 <DMA_SetConfig+0x32e>
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a28      	ldr	r2, [pc, #160]	@ (8006128 <DMA_SetConfig+0x3c0>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d004      	beq.n	8006096 <DMA_SetConfig+0x32e>
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a26      	ldr	r2, [pc, #152]	@ (800612c <DMA_SetConfig+0x3c4>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d101      	bne.n	800609a <DMA_SetConfig+0x332>
 8006096:	2301      	movs	r3, #1
 8006098:	e000      	b.n	800609c <DMA_SetConfig+0x334>
 800609a:	2300      	movs	r3, #0
 800609c:	2b00      	cmp	r3, #0
 800609e:	d020      	beq.n	80060e2 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060a4:	f003 031f 	and.w	r3, r3, #31
 80060a8:	2201      	movs	r2, #1
 80060aa:	409a      	lsls	r2, r3
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	683a      	ldr	r2, [r7, #0]
 80060b6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	2b40      	cmp	r3, #64	@ 0x40
 80060be:	d108      	bne.n	80060d2 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	68ba      	ldr	r2, [r7, #8]
 80060ce:	60da      	str	r2, [r3, #12]
}
 80060d0:	e007      	b.n	80060e2 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	68ba      	ldr	r2, [r7, #8]
 80060d8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	60da      	str	r2, [r3, #12]
}
 80060e2:	bf00      	nop
 80060e4:	371c      	adds	r7, #28
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr
 80060ee:	bf00      	nop
 80060f0:	48022c08 	.word	0x48022c08
 80060f4:	48022c1c 	.word	0x48022c1c
 80060f8:	48022c30 	.word	0x48022c30
 80060fc:	48022c44 	.word	0x48022c44
 8006100:	48022c58 	.word	0x48022c58
 8006104:	48022c6c 	.word	0x48022c6c
 8006108:	48022c80 	.word	0x48022c80
 800610c:	48022c94 	.word	0x48022c94
 8006110:	58025408 	.word	0x58025408
 8006114:	5802541c 	.word	0x5802541c
 8006118:	58025430 	.word	0x58025430
 800611c:	58025444 	.word	0x58025444
 8006120:	58025458 	.word	0x58025458
 8006124:	5802546c 	.word	0x5802546c
 8006128:	58025480 	.word	0x58025480
 800612c:	58025494 	.word	0x58025494

08006130 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006130:	b480      	push	{r7}
 8006132:	b085      	sub	sp, #20
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a42      	ldr	r2, [pc, #264]	@ (8006248 <DMA_CalcBaseAndBitshift+0x118>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d04a      	beq.n	80061d8 <DMA_CalcBaseAndBitshift+0xa8>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a41      	ldr	r2, [pc, #260]	@ (800624c <DMA_CalcBaseAndBitshift+0x11c>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d045      	beq.n	80061d8 <DMA_CalcBaseAndBitshift+0xa8>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a3f      	ldr	r2, [pc, #252]	@ (8006250 <DMA_CalcBaseAndBitshift+0x120>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d040      	beq.n	80061d8 <DMA_CalcBaseAndBitshift+0xa8>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a3e      	ldr	r2, [pc, #248]	@ (8006254 <DMA_CalcBaseAndBitshift+0x124>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d03b      	beq.n	80061d8 <DMA_CalcBaseAndBitshift+0xa8>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a3c      	ldr	r2, [pc, #240]	@ (8006258 <DMA_CalcBaseAndBitshift+0x128>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d036      	beq.n	80061d8 <DMA_CalcBaseAndBitshift+0xa8>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a3b      	ldr	r2, [pc, #236]	@ (800625c <DMA_CalcBaseAndBitshift+0x12c>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d031      	beq.n	80061d8 <DMA_CalcBaseAndBitshift+0xa8>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a39      	ldr	r2, [pc, #228]	@ (8006260 <DMA_CalcBaseAndBitshift+0x130>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d02c      	beq.n	80061d8 <DMA_CalcBaseAndBitshift+0xa8>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a38      	ldr	r2, [pc, #224]	@ (8006264 <DMA_CalcBaseAndBitshift+0x134>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d027      	beq.n	80061d8 <DMA_CalcBaseAndBitshift+0xa8>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a36      	ldr	r2, [pc, #216]	@ (8006268 <DMA_CalcBaseAndBitshift+0x138>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d022      	beq.n	80061d8 <DMA_CalcBaseAndBitshift+0xa8>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a35      	ldr	r2, [pc, #212]	@ (800626c <DMA_CalcBaseAndBitshift+0x13c>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d01d      	beq.n	80061d8 <DMA_CalcBaseAndBitshift+0xa8>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a33      	ldr	r2, [pc, #204]	@ (8006270 <DMA_CalcBaseAndBitshift+0x140>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d018      	beq.n	80061d8 <DMA_CalcBaseAndBitshift+0xa8>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a32      	ldr	r2, [pc, #200]	@ (8006274 <DMA_CalcBaseAndBitshift+0x144>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d013      	beq.n	80061d8 <DMA_CalcBaseAndBitshift+0xa8>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a30      	ldr	r2, [pc, #192]	@ (8006278 <DMA_CalcBaseAndBitshift+0x148>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d00e      	beq.n	80061d8 <DMA_CalcBaseAndBitshift+0xa8>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a2f      	ldr	r2, [pc, #188]	@ (800627c <DMA_CalcBaseAndBitshift+0x14c>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d009      	beq.n	80061d8 <DMA_CalcBaseAndBitshift+0xa8>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a2d      	ldr	r2, [pc, #180]	@ (8006280 <DMA_CalcBaseAndBitshift+0x150>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d004      	beq.n	80061d8 <DMA_CalcBaseAndBitshift+0xa8>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a2c      	ldr	r2, [pc, #176]	@ (8006284 <DMA_CalcBaseAndBitshift+0x154>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d101      	bne.n	80061dc <DMA_CalcBaseAndBitshift+0xac>
 80061d8:	2301      	movs	r3, #1
 80061da:	e000      	b.n	80061de <DMA_CalcBaseAndBitshift+0xae>
 80061dc:	2300      	movs	r3, #0
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d024      	beq.n	800622c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	3b10      	subs	r3, #16
 80061ea:	4a27      	ldr	r2, [pc, #156]	@ (8006288 <DMA_CalcBaseAndBitshift+0x158>)
 80061ec:	fba2 2303 	umull	r2, r3, r2, r3
 80061f0:	091b      	lsrs	r3, r3, #4
 80061f2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f003 0307 	and.w	r3, r3, #7
 80061fa:	4a24      	ldr	r2, [pc, #144]	@ (800628c <DMA_CalcBaseAndBitshift+0x15c>)
 80061fc:	5cd3      	ldrb	r3, [r2, r3]
 80061fe:	461a      	mov	r2, r3
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2b03      	cmp	r3, #3
 8006208:	d908      	bls.n	800621c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	461a      	mov	r2, r3
 8006210:	4b1f      	ldr	r3, [pc, #124]	@ (8006290 <DMA_CalcBaseAndBitshift+0x160>)
 8006212:	4013      	ands	r3, r2
 8006214:	1d1a      	adds	r2, r3, #4
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	659a      	str	r2, [r3, #88]	@ 0x58
 800621a:	e00d      	b.n	8006238 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	461a      	mov	r2, r3
 8006222:	4b1b      	ldr	r3, [pc, #108]	@ (8006290 <DMA_CalcBaseAndBitshift+0x160>)
 8006224:	4013      	ands	r3, r2
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	6593      	str	r3, [r2, #88]	@ 0x58
 800622a:	e005      	b.n	8006238 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800623c:	4618      	mov	r0, r3
 800623e:	3714      	adds	r7, #20
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr
 8006248:	40020010 	.word	0x40020010
 800624c:	40020028 	.word	0x40020028
 8006250:	40020040 	.word	0x40020040
 8006254:	40020058 	.word	0x40020058
 8006258:	40020070 	.word	0x40020070
 800625c:	40020088 	.word	0x40020088
 8006260:	400200a0 	.word	0x400200a0
 8006264:	400200b8 	.word	0x400200b8
 8006268:	40020410 	.word	0x40020410
 800626c:	40020428 	.word	0x40020428
 8006270:	40020440 	.word	0x40020440
 8006274:	40020458 	.word	0x40020458
 8006278:	40020470 	.word	0x40020470
 800627c:	40020488 	.word	0x40020488
 8006280:	400204a0 	.word	0x400204a0
 8006284:	400204b8 	.word	0x400204b8
 8006288:	aaaaaaab 	.word	0xaaaaaaab
 800628c:	08012ab0 	.word	0x08012ab0
 8006290:	fffffc00 	.word	0xfffffc00

08006294 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006294:	b480      	push	{r7}
 8006296:	b085      	sub	sp, #20
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800629c:	2300      	movs	r3, #0
 800629e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	699b      	ldr	r3, [r3, #24]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d120      	bne.n	80062ea <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062ac:	2b03      	cmp	r3, #3
 80062ae:	d858      	bhi.n	8006362 <DMA_CheckFifoParam+0xce>
 80062b0:	a201      	add	r2, pc, #4	@ (adr r2, 80062b8 <DMA_CheckFifoParam+0x24>)
 80062b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062b6:	bf00      	nop
 80062b8:	080062c9 	.word	0x080062c9
 80062bc:	080062db 	.word	0x080062db
 80062c0:	080062c9 	.word	0x080062c9
 80062c4:	08006363 	.word	0x08006363
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d048      	beq.n	8006366 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80062d4:	2301      	movs	r3, #1
 80062d6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80062d8:	e045      	b.n	8006366 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062de:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80062e2:	d142      	bne.n	800636a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80062e4:	2301      	movs	r3, #1
 80062e6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80062e8:	e03f      	b.n	800636a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	699b      	ldr	r3, [r3, #24]
 80062ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062f2:	d123      	bne.n	800633c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062f8:	2b03      	cmp	r3, #3
 80062fa:	d838      	bhi.n	800636e <DMA_CheckFifoParam+0xda>
 80062fc:	a201      	add	r2, pc, #4	@ (adr r2, 8006304 <DMA_CheckFifoParam+0x70>)
 80062fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006302:	bf00      	nop
 8006304:	08006315 	.word	0x08006315
 8006308:	0800631b 	.word	0x0800631b
 800630c:	08006315 	.word	0x08006315
 8006310:	0800632d 	.word	0x0800632d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006314:	2301      	movs	r3, #1
 8006316:	73fb      	strb	r3, [r7, #15]
        break;
 8006318:	e030      	b.n	800637c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800631e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006322:	2b00      	cmp	r3, #0
 8006324:	d025      	beq.n	8006372 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800632a:	e022      	b.n	8006372 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006330:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006334:	d11f      	bne.n	8006376 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800633a:	e01c      	b.n	8006376 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006340:	2b02      	cmp	r3, #2
 8006342:	d902      	bls.n	800634a <DMA_CheckFifoParam+0xb6>
 8006344:	2b03      	cmp	r3, #3
 8006346:	d003      	beq.n	8006350 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006348:	e018      	b.n	800637c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	73fb      	strb	r3, [r7, #15]
        break;
 800634e:	e015      	b.n	800637c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006354:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006358:	2b00      	cmp	r3, #0
 800635a:	d00e      	beq.n	800637a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	73fb      	strb	r3, [r7, #15]
    break;
 8006360:	e00b      	b.n	800637a <DMA_CheckFifoParam+0xe6>
        break;
 8006362:	bf00      	nop
 8006364:	e00a      	b.n	800637c <DMA_CheckFifoParam+0xe8>
        break;
 8006366:	bf00      	nop
 8006368:	e008      	b.n	800637c <DMA_CheckFifoParam+0xe8>
        break;
 800636a:	bf00      	nop
 800636c:	e006      	b.n	800637c <DMA_CheckFifoParam+0xe8>
        break;
 800636e:	bf00      	nop
 8006370:	e004      	b.n	800637c <DMA_CheckFifoParam+0xe8>
        break;
 8006372:	bf00      	nop
 8006374:	e002      	b.n	800637c <DMA_CheckFifoParam+0xe8>
        break;
 8006376:	bf00      	nop
 8006378:	e000      	b.n	800637c <DMA_CheckFifoParam+0xe8>
    break;
 800637a:	bf00      	nop
    }
  }

  return status;
 800637c:	7bfb      	ldrb	r3, [r7, #15]
}
 800637e:	4618      	mov	r0, r3
 8006380:	3714      	adds	r7, #20
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr
 800638a:	bf00      	nop

0800638c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800638c:	b480      	push	{r7}
 800638e:	b085      	sub	sp, #20
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a38      	ldr	r2, [pc, #224]	@ (8006480 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d022      	beq.n	80063ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a36      	ldr	r2, [pc, #216]	@ (8006484 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d01d      	beq.n	80063ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a35      	ldr	r2, [pc, #212]	@ (8006488 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d018      	beq.n	80063ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a33      	ldr	r2, [pc, #204]	@ (800648c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d013      	beq.n	80063ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a32      	ldr	r2, [pc, #200]	@ (8006490 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d00e      	beq.n	80063ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a30      	ldr	r2, [pc, #192]	@ (8006494 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d009      	beq.n	80063ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a2f      	ldr	r2, [pc, #188]	@ (8006498 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d004      	beq.n	80063ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a2d      	ldr	r2, [pc, #180]	@ (800649c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d101      	bne.n	80063ee <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80063ea:	2301      	movs	r3, #1
 80063ec:	e000      	b.n	80063f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80063ee:	2300      	movs	r3, #0
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d01a      	beq.n	800642a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	3b08      	subs	r3, #8
 80063fc:	4a28      	ldr	r2, [pc, #160]	@ (80064a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80063fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006402:	091b      	lsrs	r3, r3, #4
 8006404:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	4b26      	ldr	r3, [pc, #152]	@ (80064a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800640a:	4413      	add	r3, r2
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	461a      	mov	r2, r3
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	4a24      	ldr	r2, [pc, #144]	@ (80064a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006418:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f003 031f 	and.w	r3, r3, #31
 8006420:	2201      	movs	r2, #1
 8006422:	409a      	lsls	r2, r3
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006428:	e024      	b.n	8006474 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	b2db      	uxtb	r3, r3
 8006430:	3b10      	subs	r3, #16
 8006432:	4a1e      	ldr	r2, [pc, #120]	@ (80064ac <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006434:	fba2 2303 	umull	r2, r3, r2, r3
 8006438:	091b      	lsrs	r3, r3, #4
 800643a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	4a1c      	ldr	r2, [pc, #112]	@ (80064b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d806      	bhi.n	8006452 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	4a1b      	ldr	r2, [pc, #108]	@ (80064b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d902      	bls.n	8006452 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	3308      	adds	r3, #8
 8006450:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006452:	68fa      	ldr	r2, [r7, #12]
 8006454:	4b18      	ldr	r3, [pc, #96]	@ (80064b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006456:	4413      	add	r3, r2
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	461a      	mov	r2, r3
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	4a16      	ldr	r2, [pc, #88]	@ (80064bc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006464:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f003 031f 	and.w	r3, r3, #31
 800646c:	2201      	movs	r2, #1
 800646e:	409a      	lsls	r2, r3
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006474:	bf00      	nop
 8006476:	3714      	adds	r7, #20
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr
 8006480:	58025408 	.word	0x58025408
 8006484:	5802541c 	.word	0x5802541c
 8006488:	58025430 	.word	0x58025430
 800648c:	58025444 	.word	0x58025444
 8006490:	58025458 	.word	0x58025458
 8006494:	5802546c 	.word	0x5802546c
 8006498:	58025480 	.word	0x58025480
 800649c:	58025494 	.word	0x58025494
 80064a0:	cccccccd 	.word	0xcccccccd
 80064a4:	16009600 	.word	0x16009600
 80064a8:	58025880 	.word	0x58025880
 80064ac:	aaaaaaab 	.word	0xaaaaaaab
 80064b0:	400204b8 	.word	0x400204b8
 80064b4:	4002040f 	.word	0x4002040f
 80064b8:	10008200 	.word	0x10008200
 80064bc:	40020880 	.word	0x40020880

080064c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b085      	sub	sp, #20
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d04a      	beq.n	800656c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2b08      	cmp	r3, #8
 80064da:	d847      	bhi.n	800656c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a25      	ldr	r2, [pc, #148]	@ (8006578 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d022      	beq.n	800652c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a24      	ldr	r2, [pc, #144]	@ (800657c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d01d      	beq.n	800652c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a22      	ldr	r2, [pc, #136]	@ (8006580 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d018      	beq.n	800652c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a21      	ldr	r2, [pc, #132]	@ (8006584 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d013      	beq.n	800652c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a1f      	ldr	r2, [pc, #124]	@ (8006588 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d00e      	beq.n	800652c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a1e      	ldr	r2, [pc, #120]	@ (800658c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d009      	beq.n	800652c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a1c      	ldr	r2, [pc, #112]	@ (8006590 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d004      	beq.n	800652c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a1b      	ldr	r2, [pc, #108]	@ (8006594 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d101      	bne.n	8006530 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800652c:	2301      	movs	r3, #1
 800652e:	e000      	b.n	8006532 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006530:	2300      	movs	r3, #0
 8006532:	2b00      	cmp	r3, #0
 8006534:	d00a      	beq.n	800654c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006536:	68fa      	ldr	r2, [r7, #12]
 8006538:	4b17      	ldr	r3, [pc, #92]	@ (8006598 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800653a:	4413      	add	r3, r2
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	461a      	mov	r2, r3
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	4a15      	ldr	r2, [pc, #84]	@ (800659c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006548:	671a      	str	r2, [r3, #112]	@ 0x70
 800654a:	e009      	b.n	8006560 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800654c:	68fa      	ldr	r2, [r7, #12]
 800654e:	4b14      	ldr	r3, [pc, #80]	@ (80065a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006550:	4413      	add	r3, r2
 8006552:	009b      	lsls	r3, r3, #2
 8006554:	461a      	mov	r2, r3
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4a11      	ldr	r2, [pc, #68]	@ (80065a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800655e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	3b01      	subs	r3, #1
 8006564:	2201      	movs	r2, #1
 8006566:	409a      	lsls	r2, r3
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800656c:	bf00      	nop
 800656e:	3714      	adds	r7, #20
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr
 8006578:	58025408 	.word	0x58025408
 800657c:	5802541c 	.word	0x5802541c
 8006580:	58025430 	.word	0x58025430
 8006584:	58025444 	.word	0x58025444
 8006588:	58025458 	.word	0x58025458
 800658c:	5802546c 	.word	0x5802546c
 8006590:	58025480 	.word	0x58025480
 8006594:	58025494 	.word	0x58025494
 8006598:	1600963f 	.word	0x1600963f
 800659c:	58025940 	.word	0x58025940
 80065a0:	1000823f 	.word	0x1000823f
 80065a4:	40020940 	.word	0x40020940

080065a8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b098      	sub	sp, #96	@ 0x60
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80065b0:	4a84      	ldr	r2, [pc, #528]	@ (80067c4 <HAL_FDCAN_Init+0x21c>)
 80065b2:	f107 030c 	add.w	r3, r7, #12
 80065b6:	4611      	mov	r1, r2
 80065b8:	224c      	movs	r2, #76	@ 0x4c
 80065ba:	4618      	mov	r0, r3
 80065bc:	f00c f8ba 	bl	8012734 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d101      	bne.n	80065ca <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	e1c6      	b.n	8006958 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a7e      	ldr	r2, [pc, #504]	@ (80067c8 <HAL_FDCAN_Init+0x220>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d106      	bne.n	80065e2 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80065dc:	461a      	mov	r2, r3
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d106      	bne.n	80065fc <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2200      	movs	r2, #0
 80065f2:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f7fb fb52 	bl	8001ca0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	699a      	ldr	r2, [r3, #24]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f022 0210 	bic.w	r2, r2, #16
 800660a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800660c:	f7fc ff36 	bl	800347c <HAL_GetTick>
 8006610:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006612:	e014      	b.n	800663e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006614:	f7fc ff32 	bl	800347c <HAL_GetTick>
 8006618:	4602      	mov	r2, r0
 800661a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800661c:	1ad3      	subs	r3, r2, r3
 800661e:	2b0a      	cmp	r3, #10
 8006620:	d90d      	bls.n	800663e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006628:	f043 0201 	orr.w	r2, r3, #1
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2203      	movs	r2, #3
 8006636:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	e18c      	b.n	8006958 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	699b      	ldr	r3, [r3, #24]
 8006644:	f003 0308 	and.w	r3, r3, #8
 8006648:	2b08      	cmp	r3, #8
 800664a:	d0e3      	beq.n	8006614 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	699a      	ldr	r2, [r3, #24]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f042 0201 	orr.w	r2, r2, #1
 800665a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800665c:	f7fc ff0e 	bl	800347c <HAL_GetTick>
 8006660:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006662:	e014      	b.n	800668e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006664:	f7fc ff0a 	bl	800347c <HAL_GetTick>
 8006668:	4602      	mov	r2, r0
 800666a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800666c:	1ad3      	subs	r3, r2, r3
 800666e:	2b0a      	cmp	r3, #10
 8006670:	d90d      	bls.n	800668e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006678:	f043 0201 	orr.w	r2, r3, #1
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2203      	movs	r2, #3
 8006686:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	e164      	b.n	8006958 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	699b      	ldr	r3, [r3, #24]
 8006694:	f003 0301 	and.w	r3, r3, #1
 8006698:	2b00      	cmp	r3, #0
 800669a:	d0e3      	beq.n	8006664 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	699a      	ldr	r2, [r3, #24]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f042 0202 	orr.w	r2, r2, #2
 80066aa:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	7c1b      	ldrb	r3, [r3, #16]
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d108      	bne.n	80066c6 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	699a      	ldr	r2, [r3, #24]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80066c2:	619a      	str	r2, [r3, #24]
 80066c4:	e007      	b.n	80066d6 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	699a      	ldr	r2, [r3, #24]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80066d4:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	7c5b      	ldrb	r3, [r3, #17]
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d108      	bne.n	80066f0 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	699a      	ldr	r2, [r3, #24]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80066ec:	619a      	str	r2, [r3, #24]
 80066ee:	e007      	b.n	8006700 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	699a      	ldr	r2, [r3, #24]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80066fe:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	7c9b      	ldrb	r3, [r3, #18]
 8006704:	2b01      	cmp	r3, #1
 8006706:	d108      	bne.n	800671a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	699a      	ldr	r2, [r3, #24]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006716:	619a      	str	r2, [r3, #24]
 8006718:	e007      	b.n	800672a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	699a      	ldr	r2, [r3, #24]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006728:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	699b      	ldr	r3, [r3, #24]
 8006730:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	689a      	ldr	r2, [r3, #8]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	430a      	orrs	r2, r1
 800673e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	699a      	ldr	r2, [r3, #24]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800674e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	691a      	ldr	r2, [r3, #16]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f022 0210 	bic.w	r2, r2, #16
 800675e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	68db      	ldr	r3, [r3, #12]
 8006764:	2b01      	cmp	r3, #1
 8006766:	d108      	bne.n	800677a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	699a      	ldr	r2, [r3, #24]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f042 0204 	orr.w	r2, r2, #4
 8006776:	619a      	str	r2, [r3, #24]
 8006778:	e030      	b.n	80067dc <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	68db      	ldr	r3, [r3, #12]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d02c      	beq.n	80067dc <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	68db      	ldr	r3, [r3, #12]
 8006786:	2b02      	cmp	r3, #2
 8006788:	d020      	beq.n	80067cc <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	699a      	ldr	r2, [r3, #24]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006798:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	691a      	ldr	r2, [r3, #16]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f042 0210 	orr.w	r2, r2, #16
 80067a8:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	68db      	ldr	r3, [r3, #12]
 80067ae:	2b03      	cmp	r3, #3
 80067b0:	d114      	bne.n	80067dc <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	699a      	ldr	r2, [r3, #24]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f042 0220 	orr.w	r2, r2, #32
 80067c0:	619a      	str	r2, [r3, #24]
 80067c2:	e00b      	b.n	80067dc <HAL_FDCAN_Init+0x234>
 80067c4:	08012a0c 	.word	0x08012a0c
 80067c8:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	699a      	ldr	r2, [r3, #24]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f042 0220 	orr.w	r2, r2, #32
 80067da:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	699b      	ldr	r3, [r3, #24]
 80067e0:	3b01      	subs	r3, #1
 80067e2:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	69db      	ldr	r3, [r3, #28]
 80067e8:	3b01      	subs	r3, #1
 80067ea:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80067ec:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6a1b      	ldr	r3, [r3, #32]
 80067f2:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80067f4:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	695b      	ldr	r3, [r3, #20]
 80067fc:	3b01      	subs	r3, #1
 80067fe:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006804:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006806:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006810:	d115      	bne.n	800683e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006816:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800681c:	3b01      	subs	r3, #1
 800681e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006820:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006826:	3b01      	subs	r3, #1
 8006828:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800682a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006832:	3b01      	subs	r3, #1
 8006834:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800683a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800683c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006842:	2b00      	cmp	r3, #0
 8006844:	d00a      	beq.n	800685c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	430a      	orrs	r2, r1
 8006858:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006864:	4413      	add	r3, r2
 8006866:	2b00      	cmp	r3, #0
 8006868:	d011      	beq.n	800688e <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8006872:	f023 0107 	bic.w	r1, r3, #7
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	3360      	adds	r3, #96	@ 0x60
 800687e:	443b      	add	r3, r7
 8006880:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	430a      	orrs	r2, r1
 800688a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006892:	2b00      	cmp	r3, #0
 8006894:	d011      	beq.n	80068ba <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800689e:	f023 0107 	bic.w	r1, r3, #7
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	3360      	adds	r3, #96	@ 0x60
 80068aa:	443b      	add	r3, r7
 80068ac:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	430a      	orrs	r2, r1
 80068b6:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d012      	beq.n	80068e8 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80068ca:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068d2:	009b      	lsls	r3, r3, #2
 80068d4:	3360      	adds	r3, #96	@ 0x60
 80068d6:	443b      	add	r3, r7
 80068d8:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80068dc:	011a      	lsls	r2, r3, #4
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	430a      	orrs	r2, r1
 80068e4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d012      	beq.n	8006916 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80068f8:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006900:	009b      	lsls	r3, r3, #2
 8006902:	3360      	adds	r3, #96	@ 0x60
 8006904:	443b      	add	r3, r7
 8006906:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800690a:	021a      	lsls	r2, r3, #8
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	430a      	orrs	r2, r1
 8006912:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a11      	ldr	r2, [pc, #68]	@ (8006960 <HAL_FDCAN_Init+0x3b8>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d107      	bne.n	8006930 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	689a      	ldr	r2, [r3, #8]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	f022 0203 	bic.w	r2, r2, #3
 800692e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2201      	movs	r2, #1
 8006944:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f000 f80b 	bl	8006964 <FDCAN_CalcultateRamBlockAddresses>
 800694e:	4603      	mov	r3, r0
 8006950:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8006954:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8006958:	4618      	mov	r0, r3
 800695a:	3760      	adds	r7, #96	@ 0x60
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}
 8006960:	4000a000 	.word	0x4000a000

08006964 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006964:	b480      	push	{r7}
 8006966:	b085      	sub	sp, #20
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006970:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800697a:	4ba7      	ldr	r3, [pc, #668]	@ (8006c18 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800697c:	4013      	ands	r3, r2
 800697e:	68ba      	ldr	r2, [r7, #8]
 8006980:	0091      	lsls	r1, r2, #2
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	6812      	ldr	r2, [r2, #0]
 8006986:	430b      	orrs	r3, r1
 8006988:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006994:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800699c:	041a      	lsls	r2, r3, #16
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	430a      	orrs	r2, r1
 80069a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069ac:	68ba      	ldr	r2, [r7, #8]
 80069ae:	4413      	add	r3, r2
 80069b0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80069ba:	4b97      	ldr	r3, [pc, #604]	@ (8006c18 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80069bc:	4013      	ands	r3, r2
 80069be:	68ba      	ldr	r2, [r7, #8]
 80069c0:	0091      	lsls	r1, r2, #2
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	6812      	ldr	r2, [r2, #0]
 80069c6:	430b      	orrs	r3, r1
 80069c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069d4:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069dc:	041a      	lsls	r2, r3, #16
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	430a      	orrs	r2, r1
 80069e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069ec:	005b      	lsls	r3, r3, #1
 80069ee:	68ba      	ldr	r2, [r7, #8]
 80069f0:	4413      	add	r3, r2
 80069f2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80069fc:	4b86      	ldr	r3, [pc, #536]	@ (8006c18 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80069fe:	4013      	ands	r3, r2
 8006a00:	68ba      	ldr	r2, [r7, #8]
 8006a02:	0091      	lsls	r1, r2, #2
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	6812      	ldr	r2, [r2, #0]
 8006a08:	430b      	orrs	r3, r1
 8006a0a:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006a16:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a1e:	041a      	lsls	r2, r3, #16
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	430a      	orrs	r2, r1
 8006a26:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8006a32:	fb02 f303 	mul.w	r3, r2, r3
 8006a36:	68ba      	ldr	r2, [r7, #8]
 8006a38:	4413      	add	r3, r2
 8006a3a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8006a44:	4b74      	ldr	r3, [pc, #464]	@ (8006c18 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006a46:	4013      	ands	r3, r2
 8006a48:	68ba      	ldr	r2, [r7, #8]
 8006a4a:	0091      	lsls	r1, r2, #2
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	6812      	ldr	r2, [r2, #0]
 8006a50:	430b      	orrs	r3, r1
 8006a52:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006a5e:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a66:	041a      	lsls	r2, r3, #16
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	430a      	orrs	r2, r1
 8006a6e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006a7a:	fb02 f303 	mul.w	r3, r2, r3
 8006a7e:	68ba      	ldr	r2, [r7, #8]
 8006a80:	4413      	add	r3, r2
 8006a82:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8006a8c:	4b62      	ldr	r3, [pc, #392]	@ (8006c18 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006a8e:	4013      	ands	r3, r2
 8006a90:	68ba      	ldr	r2, [r7, #8]
 8006a92:	0091      	lsls	r1, r2, #2
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	6812      	ldr	r2, [r2, #0]
 8006a98:	430b      	orrs	r3, r1
 8006a9a:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8006aa6:	fb02 f303 	mul.w	r3, r2, r3
 8006aaa:	68ba      	ldr	r2, [r7, #8]
 8006aac:	4413      	add	r3, r2
 8006aae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8006ab8:	4b57      	ldr	r3, [pc, #348]	@ (8006c18 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006aba:	4013      	ands	r3, r2
 8006abc:	68ba      	ldr	r2, [r7, #8]
 8006abe:	0091      	lsls	r1, r2, #2
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	6812      	ldr	r2, [r2, #0]
 8006ac4:	430b      	orrs	r3, r1
 8006ac6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ad2:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ada:	041a      	lsls	r2, r3, #16
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	430a      	orrs	r2, r1
 8006ae2:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006aea:	005b      	lsls	r3, r3, #1
 8006aec:	68ba      	ldr	r2, [r7, #8]
 8006aee:	4413      	add	r3, r2
 8006af0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8006afa:	4b47      	ldr	r3, [pc, #284]	@ (8006c18 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006afc:	4013      	ands	r3, r2
 8006afe:	68ba      	ldr	r2, [r7, #8]
 8006b00:	0091      	lsls	r1, r2, #2
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	6812      	ldr	r2, [r2, #0]
 8006b06:	430b      	orrs	r3, r1
 8006b08:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006b14:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b1c:	041a      	lsls	r2, r3, #16
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	430a      	orrs	r2, r1
 8006b24:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006b30:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b38:	061a      	lsls	r2, r3, #24
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	430a      	orrs	r2, r1
 8006b40:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b48:	4b34      	ldr	r3, [pc, #208]	@ (8006c1c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8006b4a:	4413      	add	r3, r2
 8006b4c:	009a      	lsls	r2, r3, #2
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	441a      	add	r2, r3
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b6a:	00db      	lsls	r3, r3, #3
 8006b6c:	441a      	add	r2, r3
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b7a:	6879      	ldr	r1, [r7, #4]
 8006b7c:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8006b7e:	fb01 f303 	mul.w	r3, r1, r3
 8006b82:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8006b84:	441a      	add	r2, r3
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b92:	6879      	ldr	r1, [r7, #4]
 8006b94:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8006b96:	fb01 f303 	mul.w	r3, r1, r3
 8006b9a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8006b9c:	441a      	add	r2, r3
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006baa:	6879      	ldr	r1, [r7, #4]
 8006bac:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8006bae:	fb01 f303 	mul.w	r3, r1, r3
 8006bb2:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8006bb4:	441a      	add	r2, r3
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bc6:	00db      	lsls	r3, r3, #3
 8006bc8:	441a      	add	r2, r3
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bda:	6879      	ldr	r1, [r7, #4]
 8006bdc:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8006bde:	fb01 f303 	mul.w	r3, r1, r3
 8006be2:	009b      	lsls	r3, r3, #2
 8006be4:	441a      	add	r2, r3
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006bf6:	6879      	ldr	r1, [r7, #4]
 8006bf8:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8006bfa:	fb01 f303 	mul.w	r3, r1, r3
 8006bfe:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8006c00:	441a      	add	r2, r3
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c0e:	4a04      	ldr	r2, [pc, #16]	@ (8006c20 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d915      	bls.n	8006c40 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8006c14:	e006      	b.n	8006c24 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8006c16:	bf00      	nop
 8006c18:	ffff0003 	.word	0xffff0003
 8006c1c:	10002b00 	.word	0x10002b00
 8006c20:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006c2a:	f043 0220 	orr.w	r2, r3, #32
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2203      	movs	r2, #3
 8006c38:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	e010      	b.n	8006c62 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c44:	60fb      	str	r3, [r7, #12]
 8006c46:	e005      	b.n	8006c54 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	3304      	adds	r3, #4
 8006c52:	60fb      	str	r3, [r7, #12]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c5a:	68fa      	ldr	r2, [r7, #12]
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d3f3      	bcc.n	8006c48 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8006c60:	2300      	movs	r3, #0
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3714      	adds	r7, #20
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr
 8006c6e:	bf00      	nop

08006c70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b089      	sub	sp, #36	@ 0x24
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006c7e:	4b89      	ldr	r3, [pc, #548]	@ (8006ea4 <HAL_GPIO_Init+0x234>)
 8006c80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006c82:	e194      	b.n	8006fae <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	2101      	movs	r1, #1
 8006c8a:	69fb      	ldr	r3, [r7, #28]
 8006c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8006c90:	4013      	ands	r3, r2
 8006c92:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	f000 8186 	beq.w	8006fa8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	f003 0303 	and.w	r3, r3, #3
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d005      	beq.n	8006cb4 <HAL_GPIO_Init+0x44>
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	f003 0303 	and.w	r3, r3, #3
 8006cb0:	2b02      	cmp	r3, #2
 8006cb2:	d130      	bne.n	8006d16 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	689b      	ldr	r3, [r3, #8]
 8006cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	005b      	lsls	r3, r3, #1
 8006cbe:	2203      	movs	r2, #3
 8006cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8006cc4:	43db      	mvns	r3, r3
 8006cc6:	69ba      	ldr	r2, [r7, #24]
 8006cc8:	4013      	ands	r3, r2
 8006cca:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	68da      	ldr	r2, [r3, #12]
 8006cd0:	69fb      	ldr	r3, [r7, #28]
 8006cd2:	005b      	lsls	r3, r3, #1
 8006cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8006cd8:	69ba      	ldr	r2, [r7, #24]
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	69ba      	ldr	r2, [r7, #24]
 8006ce2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006cea:	2201      	movs	r2, #1
 8006cec:	69fb      	ldr	r3, [r7, #28]
 8006cee:	fa02 f303 	lsl.w	r3, r2, r3
 8006cf2:	43db      	mvns	r3, r3
 8006cf4:	69ba      	ldr	r2, [r7, #24]
 8006cf6:	4013      	ands	r3, r2
 8006cf8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	091b      	lsrs	r3, r3, #4
 8006d00:	f003 0201 	and.w	r2, r3, #1
 8006d04:	69fb      	ldr	r3, [r7, #28]
 8006d06:	fa02 f303 	lsl.w	r3, r2, r3
 8006d0a:	69ba      	ldr	r2, [r7, #24]
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	69ba      	ldr	r2, [r7, #24]
 8006d14:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	f003 0303 	and.w	r3, r3, #3
 8006d1e:	2b03      	cmp	r3, #3
 8006d20:	d017      	beq.n	8006d52 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	68db      	ldr	r3, [r3, #12]
 8006d26:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006d28:	69fb      	ldr	r3, [r7, #28]
 8006d2a:	005b      	lsls	r3, r3, #1
 8006d2c:	2203      	movs	r2, #3
 8006d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d32:	43db      	mvns	r3, r3
 8006d34:	69ba      	ldr	r2, [r7, #24]
 8006d36:	4013      	ands	r3, r2
 8006d38:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	689a      	ldr	r2, [r3, #8]
 8006d3e:	69fb      	ldr	r3, [r7, #28]
 8006d40:	005b      	lsls	r3, r3, #1
 8006d42:	fa02 f303 	lsl.w	r3, r2, r3
 8006d46:	69ba      	ldr	r2, [r7, #24]
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	69ba      	ldr	r2, [r7, #24]
 8006d50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	f003 0303 	and.w	r3, r3, #3
 8006d5a:	2b02      	cmp	r3, #2
 8006d5c:	d123      	bne.n	8006da6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006d5e:	69fb      	ldr	r3, [r7, #28]
 8006d60:	08da      	lsrs	r2, r3, #3
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	3208      	adds	r2, #8
 8006d66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006d6c:	69fb      	ldr	r3, [r7, #28]
 8006d6e:	f003 0307 	and.w	r3, r3, #7
 8006d72:	009b      	lsls	r3, r3, #2
 8006d74:	220f      	movs	r2, #15
 8006d76:	fa02 f303 	lsl.w	r3, r2, r3
 8006d7a:	43db      	mvns	r3, r3
 8006d7c:	69ba      	ldr	r2, [r7, #24]
 8006d7e:	4013      	ands	r3, r2
 8006d80:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	691a      	ldr	r2, [r3, #16]
 8006d86:	69fb      	ldr	r3, [r7, #28]
 8006d88:	f003 0307 	and.w	r3, r3, #7
 8006d8c:	009b      	lsls	r3, r3, #2
 8006d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d92:	69ba      	ldr	r2, [r7, #24]
 8006d94:	4313      	orrs	r3, r2
 8006d96:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006d98:	69fb      	ldr	r3, [r7, #28]
 8006d9a:	08da      	lsrs	r2, r3, #3
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	3208      	adds	r2, #8
 8006da0:	69b9      	ldr	r1, [r7, #24]
 8006da2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006dac:	69fb      	ldr	r3, [r7, #28]
 8006dae:	005b      	lsls	r3, r3, #1
 8006db0:	2203      	movs	r2, #3
 8006db2:	fa02 f303 	lsl.w	r3, r2, r3
 8006db6:	43db      	mvns	r3, r3
 8006db8:	69ba      	ldr	r2, [r7, #24]
 8006dba:	4013      	ands	r3, r2
 8006dbc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	f003 0203 	and.w	r2, r3, #3
 8006dc6:	69fb      	ldr	r3, [r7, #28]
 8006dc8:	005b      	lsls	r3, r3, #1
 8006dca:	fa02 f303 	lsl.w	r3, r2, r3
 8006dce:	69ba      	ldr	r2, [r7, #24]
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	69ba      	ldr	r2, [r7, #24]
 8006dd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	f000 80e0 	beq.w	8006fa8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006de8:	4b2f      	ldr	r3, [pc, #188]	@ (8006ea8 <HAL_GPIO_Init+0x238>)
 8006dea:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8006dee:	4a2e      	ldr	r2, [pc, #184]	@ (8006ea8 <HAL_GPIO_Init+0x238>)
 8006df0:	f043 0302 	orr.w	r3, r3, #2
 8006df4:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8006df8:	4b2b      	ldr	r3, [pc, #172]	@ (8006ea8 <HAL_GPIO_Init+0x238>)
 8006dfa:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8006dfe:	f003 0302 	and.w	r3, r3, #2
 8006e02:	60fb      	str	r3, [r7, #12]
 8006e04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006e06:	4a29      	ldr	r2, [pc, #164]	@ (8006eac <HAL_GPIO_Init+0x23c>)
 8006e08:	69fb      	ldr	r3, [r7, #28]
 8006e0a:	089b      	lsrs	r3, r3, #2
 8006e0c:	3302      	adds	r3, #2
 8006e0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006e14:	69fb      	ldr	r3, [r7, #28]
 8006e16:	f003 0303 	and.w	r3, r3, #3
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	220f      	movs	r2, #15
 8006e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e22:	43db      	mvns	r3, r3
 8006e24:	69ba      	ldr	r2, [r7, #24]
 8006e26:	4013      	ands	r3, r2
 8006e28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	4a20      	ldr	r2, [pc, #128]	@ (8006eb0 <HAL_GPIO_Init+0x240>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d052      	beq.n	8006ed8 <HAL_GPIO_Init+0x268>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	4a1f      	ldr	r2, [pc, #124]	@ (8006eb4 <HAL_GPIO_Init+0x244>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d031      	beq.n	8006e9e <HAL_GPIO_Init+0x22e>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	4a1e      	ldr	r2, [pc, #120]	@ (8006eb8 <HAL_GPIO_Init+0x248>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d02b      	beq.n	8006e9a <HAL_GPIO_Init+0x22a>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4a1d      	ldr	r2, [pc, #116]	@ (8006ebc <HAL_GPIO_Init+0x24c>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d025      	beq.n	8006e96 <HAL_GPIO_Init+0x226>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	4a1c      	ldr	r2, [pc, #112]	@ (8006ec0 <HAL_GPIO_Init+0x250>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d01f      	beq.n	8006e92 <HAL_GPIO_Init+0x222>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	4a1b      	ldr	r2, [pc, #108]	@ (8006ec4 <HAL_GPIO_Init+0x254>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d019      	beq.n	8006e8e <HAL_GPIO_Init+0x21e>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	4a1a      	ldr	r2, [pc, #104]	@ (8006ec8 <HAL_GPIO_Init+0x258>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d013      	beq.n	8006e8a <HAL_GPIO_Init+0x21a>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	4a19      	ldr	r2, [pc, #100]	@ (8006ecc <HAL_GPIO_Init+0x25c>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d00d      	beq.n	8006e86 <HAL_GPIO_Init+0x216>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4a18      	ldr	r2, [pc, #96]	@ (8006ed0 <HAL_GPIO_Init+0x260>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d007      	beq.n	8006e82 <HAL_GPIO_Init+0x212>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	4a17      	ldr	r2, [pc, #92]	@ (8006ed4 <HAL_GPIO_Init+0x264>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d101      	bne.n	8006e7e <HAL_GPIO_Init+0x20e>
 8006e7a:	2309      	movs	r3, #9
 8006e7c:	e02d      	b.n	8006eda <HAL_GPIO_Init+0x26a>
 8006e7e:	230a      	movs	r3, #10
 8006e80:	e02b      	b.n	8006eda <HAL_GPIO_Init+0x26a>
 8006e82:	2308      	movs	r3, #8
 8006e84:	e029      	b.n	8006eda <HAL_GPIO_Init+0x26a>
 8006e86:	2307      	movs	r3, #7
 8006e88:	e027      	b.n	8006eda <HAL_GPIO_Init+0x26a>
 8006e8a:	2306      	movs	r3, #6
 8006e8c:	e025      	b.n	8006eda <HAL_GPIO_Init+0x26a>
 8006e8e:	2305      	movs	r3, #5
 8006e90:	e023      	b.n	8006eda <HAL_GPIO_Init+0x26a>
 8006e92:	2304      	movs	r3, #4
 8006e94:	e021      	b.n	8006eda <HAL_GPIO_Init+0x26a>
 8006e96:	2303      	movs	r3, #3
 8006e98:	e01f      	b.n	8006eda <HAL_GPIO_Init+0x26a>
 8006e9a:	2302      	movs	r3, #2
 8006e9c:	e01d      	b.n	8006eda <HAL_GPIO_Init+0x26a>
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	e01b      	b.n	8006eda <HAL_GPIO_Init+0x26a>
 8006ea2:	bf00      	nop
 8006ea4:	58000080 	.word	0x58000080
 8006ea8:	58024400 	.word	0x58024400
 8006eac:	58000400 	.word	0x58000400
 8006eb0:	58020000 	.word	0x58020000
 8006eb4:	58020400 	.word	0x58020400
 8006eb8:	58020800 	.word	0x58020800
 8006ebc:	58020c00 	.word	0x58020c00
 8006ec0:	58021000 	.word	0x58021000
 8006ec4:	58021400 	.word	0x58021400
 8006ec8:	58021800 	.word	0x58021800
 8006ecc:	58021c00 	.word	0x58021c00
 8006ed0:	58022000 	.word	0x58022000
 8006ed4:	58022400 	.word	0x58022400
 8006ed8:	2300      	movs	r3, #0
 8006eda:	69fa      	ldr	r2, [r7, #28]
 8006edc:	f002 0203 	and.w	r2, r2, #3
 8006ee0:	0092      	lsls	r2, r2, #2
 8006ee2:	4093      	lsls	r3, r2
 8006ee4:	69ba      	ldr	r2, [r7, #24]
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006eea:	4938      	ldr	r1, [pc, #224]	@ (8006fcc <HAL_GPIO_Init+0x35c>)
 8006eec:	69fb      	ldr	r3, [r7, #28]
 8006eee:	089b      	lsrs	r3, r3, #2
 8006ef0:	3302      	adds	r3, #2
 8006ef2:	69ba      	ldr	r2, [r7, #24]
 8006ef4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006ef8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	43db      	mvns	r3, r3
 8006f04:	69ba      	ldr	r2, [r7, #24]
 8006f06:	4013      	ands	r3, r2
 8006f08:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d003      	beq.n	8006f1e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006f16:	69ba      	ldr	r2, [r7, #24]
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006f1e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006f22:	69bb      	ldr	r3, [r7, #24]
 8006f24:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006f26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	43db      	mvns	r3, r3
 8006f32:	69ba      	ldr	r2, [r7, #24]
 8006f34:	4013      	ands	r3, r2
 8006f36:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d003      	beq.n	8006f4c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006f44:	69ba      	ldr	r2, [r7, #24]
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006f4c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006f50:	69bb      	ldr	r3, [r7, #24]
 8006f52:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	43db      	mvns	r3, r3
 8006f5e:	69ba      	ldr	r2, [r7, #24]
 8006f60:	4013      	ands	r3, r2
 8006f62:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d003      	beq.n	8006f78 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006f70:	69ba      	ldr	r2, [r7, #24]
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	4313      	orrs	r3, r2
 8006f76:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	69ba      	ldr	r2, [r7, #24]
 8006f7c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	43db      	mvns	r3, r3
 8006f88:	69ba      	ldr	r2, [r7, #24]
 8006f8a:	4013      	ands	r3, r2
 8006f8c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d003      	beq.n	8006fa2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006f9a:	69ba      	ldr	r2, [r7, #24]
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	69ba      	ldr	r2, [r7, #24]
 8006fa6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006fa8:	69fb      	ldr	r3, [r7, #28]
 8006faa:	3301      	adds	r3, #1
 8006fac:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	69fb      	ldr	r3, [r7, #28]
 8006fb4:	fa22 f303 	lsr.w	r3, r2, r3
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	f47f ae63 	bne.w	8006c84 <HAL_GPIO_Init+0x14>
  }
}
 8006fbe:	bf00      	nop
 8006fc0:	bf00      	nop
 8006fc2:	3724      	adds	r7, #36	@ 0x24
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr
 8006fcc:	58000400 	.word	0x58000400

08006fd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b083      	sub	sp, #12
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	460b      	mov	r3, r1
 8006fda:	807b      	strh	r3, [r7, #2]
 8006fdc:	4613      	mov	r3, r2
 8006fde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006fe0:	787b      	ldrb	r3, [r7, #1]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d003      	beq.n	8006fee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006fe6:	887a      	ldrh	r2, [r7, #2]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006fec:	e003      	b.n	8006ff6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006fee:	887b      	ldrh	r3, [r7, #2]
 8006ff0:	041a      	lsls	r2, r3, #16
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	619a      	str	r2, [r3, #24]
}
 8006ff6:	bf00      	nop
 8006ff8:	370c      	adds	r7, #12
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr
	...

08007004 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b082      	sub	sp, #8
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d101      	bne.n	8007016 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	e08b      	b.n	800712e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800701c:	b2db      	uxtb	r3, r3
 800701e:	2b00      	cmp	r3, #0
 8007020:	d106      	bne.n	8007030 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2200      	movs	r2, #0
 8007026:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f7fa ffa4 	bl	8001f78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2224      	movs	r2, #36	@ 0x24
 8007034:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f022 0201 	bic.w	r2, r2, #1
 8007046:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	685a      	ldr	r2, [r3, #4]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007054:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	689a      	ldr	r2, [r3, #8]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007064:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	68db      	ldr	r3, [r3, #12]
 800706a:	2b01      	cmp	r3, #1
 800706c:	d107      	bne.n	800707e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	689a      	ldr	r2, [r3, #8]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800707a:	609a      	str	r2, [r3, #8]
 800707c:	e006      	b.n	800708c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	689a      	ldr	r2, [r3, #8]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800708a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	68db      	ldr	r3, [r3, #12]
 8007090:	2b02      	cmp	r3, #2
 8007092:	d108      	bne.n	80070a6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	685a      	ldr	r2, [r3, #4]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80070a2:	605a      	str	r2, [r3, #4]
 80070a4:	e007      	b.n	80070b6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	685a      	ldr	r2, [r3, #4]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80070b4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	6859      	ldr	r1, [r3, #4]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	4b1d      	ldr	r3, [pc, #116]	@ (8007138 <HAL_I2C_Init+0x134>)
 80070c2:	430b      	orrs	r3, r1
 80070c4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	68da      	ldr	r2, [r3, #12]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80070d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	691a      	ldr	r2, [r3, #16]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	695b      	ldr	r3, [r3, #20]
 80070de:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	699b      	ldr	r3, [r3, #24]
 80070e6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	430a      	orrs	r2, r1
 80070ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	69d9      	ldr	r1, [r3, #28]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6a1a      	ldr	r2, [r3, #32]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	430a      	orrs	r2, r1
 80070fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	681a      	ldr	r2, [r3, #0]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f042 0201 	orr.w	r2, r2, #1
 800710e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2200      	movs	r2, #0
 8007114:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2220      	movs	r2, #32
 800711a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2200      	movs	r2, #0
 8007122:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2200      	movs	r2, #0
 8007128:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800712c:	2300      	movs	r3, #0
}
 800712e:	4618      	mov	r0, r3
 8007130:	3708      	adds	r7, #8
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
 8007136:	bf00      	nop
 8007138:	02008000 	.word	0x02008000

0800713c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800713c:	b480      	push	{r7}
 800713e:	b083      	sub	sp, #12
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800714c:	b2db      	uxtb	r3, r3
 800714e:	2b20      	cmp	r3, #32
 8007150:	d138      	bne.n	80071c4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007158:	2b01      	cmp	r3, #1
 800715a:	d101      	bne.n	8007160 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800715c:	2302      	movs	r3, #2
 800715e:	e032      	b.n	80071c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2201      	movs	r2, #1
 8007164:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2224      	movs	r2, #36	@ 0x24
 800716c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	681a      	ldr	r2, [r3, #0]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f022 0201 	bic.w	r2, r2, #1
 800717e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800718e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	6819      	ldr	r1, [r3, #0]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	683a      	ldr	r2, [r7, #0]
 800719c:	430a      	orrs	r2, r1
 800719e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f042 0201 	orr.w	r2, r2, #1
 80071ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2220      	movs	r2, #32
 80071b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2200      	movs	r2, #0
 80071bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80071c0:	2300      	movs	r3, #0
 80071c2:	e000      	b.n	80071c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80071c4:	2302      	movs	r3, #2
  }
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	370c      	adds	r7, #12
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr

080071d2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80071d2:	b480      	push	{r7}
 80071d4:	b085      	sub	sp, #20
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	6078      	str	r0, [r7, #4]
 80071da:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	2b20      	cmp	r3, #32
 80071e6:	d139      	bne.n	800725c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d101      	bne.n	80071f6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80071f2:	2302      	movs	r3, #2
 80071f4:	e033      	b.n	800725e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2201      	movs	r2, #1
 80071fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2224      	movs	r2, #36	@ 0x24
 8007202:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f022 0201 	bic.w	r2, r2, #1
 8007214:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007224:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	021b      	lsls	r3, r3, #8
 800722a:	68fa      	ldr	r2, [r7, #12]
 800722c:	4313      	orrs	r3, r2
 800722e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	68fa      	ldr	r2, [r7, #12]
 8007236:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f042 0201 	orr.w	r2, r2, #1
 8007246:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2220      	movs	r2, #32
 800724c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007258:	2300      	movs	r3, #0
 800725a:	e000      	b.n	800725e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800725c:	2302      	movs	r3, #2
  }
}
 800725e:	4618      	mov	r0, r3
 8007260:	3714      	adds	r7, #20
 8007262:	46bd      	mov	sp, r7
 8007264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007268:	4770      	bx	lr
	...

0800726c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b084      	sub	sp, #16
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007274:	4b19      	ldr	r3, [pc, #100]	@ (80072dc <HAL_PWREx_ConfigSupply+0x70>)
 8007276:	68db      	ldr	r3, [r3, #12]
 8007278:	f003 0304 	and.w	r3, r3, #4
 800727c:	2b04      	cmp	r3, #4
 800727e:	d00a      	beq.n	8007296 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007280:	4b16      	ldr	r3, [pc, #88]	@ (80072dc <HAL_PWREx_ConfigSupply+0x70>)
 8007282:	68db      	ldr	r3, [r3, #12]
 8007284:	f003 0307 	and.w	r3, r3, #7
 8007288:	687a      	ldr	r2, [r7, #4]
 800728a:	429a      	cmp	r2, r3
 800728c:	d001      	beq.n	8007292 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	e01f      	b.n	80072d2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007292:	2300      	movs	r3, #0
 8007294:	e01d      	b.n	80072d2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007296:	4b11      	ldr	r3, [pc, #68]	@ (80072dc <HAL_PWREx_ConfigSupply+0x70>)
 8007298:	68db      	ldr	r3, [r3, #12]
 800729a:	f023 0207 	bic.w	r2, r3, #7
 800729e:	490f      	ldr	r1, [pc, #60]	@ (80072dc <HAL_PWREx_ConfigSupply+0x70>)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	4313      	orrs	r3, r2
 80072a4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80072a6:	f7fc f8e9 	bl	800347c <HAL_GetTick>
 80072aa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80072ac:	e009      	b.n	80072c2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80072ae:	f7fc f8e5 	bl	800347c <HAL_GetTick>
 80072b2:	4602      	mov	r2, r0
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	1ad3      	subs	r3, r2, r3
 80072b8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80072bc:	d901      	bls.n	80072c2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80072be:	2301      	movs	r3, #1
 80072c0:	e007      	b.n	80072d2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80072c2:	4b06      	ldr	r3, [pc, #24]	@ (80072dc <HAL_PWREx_ConfigSupply+0x70>)
 80072c4:	685b      	ldr	r3, [r3, #4]
 80072c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80072ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072ce:	d1ee      	bne.n	80072ae <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80072d0:	2300      	movs	r3, #0
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3710      	adds	r7, #16
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}
 80072da:	bf00      	nop
 80072dc:	58024800 	.word	0x58024800

080072e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b08c      	sub	sp, #48	@ 0x30
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d102      	bne.n	80072f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80072ee:	2301      	movs	r3, #1
 80072f0:	f000 bc1f 	b.w	8007b32 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f003 0301 	and.w	r3, r3, #1
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	f000 80b3 	beq.w	8007468 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007302:	4b95      	ldr	r3, [pc, #596]	@ (8007558 <HAL_RCC_OscConfig+0x278>)
 8007304:	691b      	ldr	r3, [r3, #16]
 8007306:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800730a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800730c:	4b92      	ldr	r3, [pc, #584]	@ (8007558 <HAL_RCC_OscConfig+0x278>)
 800730e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007310:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007314:	2b10      	cmp	r3, #16
 8007316:	d007      	beq.n	8007328 <HAL_RCC_OscConfig+0x48>
 8007318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800731a:	2b18      	cmp	r3, #24
 800731c:	d112      	bne.n	8007344 <HAL_RCC_OscConfig+0x64>
 800731e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007320:	f003 0303 	and.w	r3, r3, #3
 8007324:	2b02      	cmp	r3, #2
 8007326:	d10d      	bne.n	8007344 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007328:	4b8b      	ldr	r3, [pc, #556]	@ (8007558 <HAL_RCC_OscConfig+0x278>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007330:	2b00      	cmp	r3, #0
 8007332:	f000 8098 	beq.w	8007466 <HAL_RCC_OscConfig+0x186>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	2b00      	cmp	r3, #0
 800733c:	f040 8093 	bne.w	8007466 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8007340:	2301      	movs	r3, #1
 8007342:	e3f6      	b.n	8007b32 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800734c:	d106      	bne.n	800735c <HAL_RCC_OscConfig+0x7c>
 800734e:	4b82      	ldr	r3, [pc, #520]	@ (8007558 <HAL_RCC_OscConfig+0x278>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a81      	ldr	r2, [pc, #516]	@ (8007558 <HAL_RCC_OscConfig+0x278>)
 8007354:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007358:	6013      	str	r3, [r2, #0]
 800735a:	e058      	b.n	800740e <HAL_RCC_OscConfig+0x12e>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d112      	bne.n	800738a <HAL_RCC_OscConfig+0xaa>
 8007364:	4b7c      	ldr	r3, [pc, #496]	@ (8007558 <HAL_RCC_OscConfig+0x278>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a7b      	ldr	r2, [pc, #492]	@ (8007558 <HAL_RCC_OscConfig+0x278>)
 800736a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800736e:	6013      	str	r3, [r2, #0]
 8007370:	4b79      	ldr	r3, [pc, #484]	@ (8007558 <HAL_RCC_OscConfig+0x278>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a78      	ldr	r2, [pc, #480]	@ (8007558 <HAL_RCC_OscConfig+0x278>)
 8007376:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800737a:	6013      	str	r3, [r2, #0]
 800737c:	4b76      	ldr	r3, [pc, #472]	@ (8007558 <HAL_RCC_OscConfig+0x278>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a75      	ldr	r2, [pc, #468]	@ (8007558 <HAL_RCC_OscConfig+0x278>)
 8007382:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007386:	6013      	str	r3, [r2, #0]
 8007388:	e041      	b.n	800740e <HAL_RCC_OscConfig+0x12e>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007392:	d112      	bne.n	80073ba <HAL_RCC_OscConfig+0xda>
 8007394:	4b70      	ldr	r3, [pc, #448]	@ (8007558 <HAL_RCC_OscConfig+0x278>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a6f      	ldr	r2, [pc, #444]	@ (8007558 <HAL_RCC_OscConfig+0x278>)
 800739a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800739e:	6013      	str	r3, [r2, #0]
 80073a0:	4b6d      	ldr	r3, [pc, #436]	@ (8007558 <HAL_RCC_OscConfig+0x278>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a6c      	ldr	r2, [pc, #432]	@ (8007558 <HAL_RCC_OscConfig+0x278>)
 80073a6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80073aa:	6013      	str	r3, [r2, #0]
 80073ac:	4b6a      	ldr	r3, [pc, #424]	@ (8007558 <HAL_RCC_OscConfig+0x278>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a69      	ldr	r2, [pc, #420]	@ (8007558 <HAL_RCC_OscConfig+0x278>)
 80073b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80073b6:	6013      	str	r3, [r2, #0]
 80073b8:	e029      	b.n	800740e <HAL_RCC_OscConfig+0x12e>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80073c2:	d112      	bne.n	80073ea <HAL_RCC_OscConfig+0x10a>
 80073c4:	4b64      	ldr	r3, [pc, #400]	@ (8007558 <HAL_RCC_OscConfig+0x278>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a63      	ldr	r2, [pc, #396]	@ (8007558 <HAL_RCC_OscConfig+0x278>)
 80073ca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80073ce:	6013      	str	r3, [r2, #0]
 80073d0:	4b61      	ldr	r3, [pc, #388]	@ (8007558 <HAL_RCC_OscConfig+0x278>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a60      	ldr	r2, [pc, #384]	@ (8007558 <HAL_RCC_OscConfig+0x278>)
 80073d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80073da:	6013      	str	r3, [r2, #0]
 80073dc:	4b5e      	ldr	r3, [pc, #376]	@ (8007558 <HAL_RCC_OscConfig+0x278>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a5d      	ldr	r2, [pc, #372]	@ (8007558 <HAL_RCC_OscConfig+0x278>)
 80073e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80073e6:	6013      	str	r3, [r2, #0]
 80073e8:	e011      	b.n	800740e <HAL_RCC_OscConfig+0x12e>
 80073ea:	4b5b      	ldr	r3, [pc, #364]	@ (8007558 <HAL_RCC_OscConfig+0x278>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a5a      	ldr	r2, [pc, #360]	@ (8007558 <HAL_RCC_OscConfig+0x278>)
 80073f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80073f4:	6013      	str	r3, [r2, #0]
 80073f6:	4b58      	ldr	r3, [pc, #352]	@ (8007558 <HAL_RCC_OscConfig+0x278>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a57      	ldr	r2, [pc, #348]	@ (8007558 <HAL_RCC_OscConfig+0x278>)
 80073fc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007400:	6013      	str	r3, [r2, #0]
 8007402:	4b55      	ldr	r3, [pc, #340]	@ (8007558 <HAL_RCC_OscConfig+0x278>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a54      	ldr	r2, [pc, #336]	@ (8007558 <HAL_RCC_OscConfig+0x278>)
 8007408:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800740c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d013      	beq.n	800743e <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007416:	f7fc f831 	bl	800347c <HAL_GetTick>
 800741a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800741c:	e008      	b.n	8007430 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800741e:	f7fc f82d 	bl	800347c <HAL_GetTick>
 8007422:	4602      	mov	r2, r0
 8007424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007426:	1ad3      	subs	r3, r2, r3
 8007428:	2b64      	cmp	r3, #100	@ 0x64
 800742a:	d901      	bls.n	8007430 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800742c:	2303      	movs	r3, #3
 800742e:	e380      	b.n	8007b32 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007430:	4b49      	ldr	r3, [pc, #292]	@ (8007558 <HAL_RCC_OscConfig+0x278>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007438:	2b00      	cmp	r3, #0
 800743a:	d0f0      	beq.n	800741e <HAL_RCC_OscConfig+0x13e>
 800743c:	e014      	b.n	8007468 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800743e:	f7fc f81d 	bl	800347c <HAL_GetTick>
 8007442:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007444:	e008      	b.n	8007458 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007446:	f7fc f819 	bl	800347c <HAL_GetTick>
 800744a:	4602      	mov	r2, r0
 800744c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800744e:	1ad3      	subs	r3, r2, r3
 8007450:	2b64      	cmp	r3, #100	@ 0x64
 8007452:	d901      	bls.n	8007458 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8007454:	2303      	movs	r3, #3
 8007456:	e36c      	b.n	8007b32 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007458:	4b3f      	ldr	r3, [pc, #252]	@ (8007558 <HAL_RCC_OscConfig+0x278>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007460:	2b00      	cmp	r3, #0
 8007462:	d1f0      	bne.n	8007446 <HAL_RCC_OscConfig+0x166>
 8007464:	e000      	b.n	8007468 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007466:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f003 0302 	and.w	r3, r3, #2
 8007470:	2b00      	cmp	r3, #0
 8007472:	f000 808c 	beq.w	800758e <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007476:	4b38      	ldr	r3, [pc, #224]	@ (8007558 <HAL_RCC_OscConfig+0x278>)
 8007478:	691b      	ldr	r3, [r3, #16]
 800747a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800747e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007480:	4b35      	ldr	r3, [pc, #212]	@ (8007558 <HAL_RCC_OscConfig+0x278>)
 8007482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007484:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007486:	6a3b      	ldr	r3, [r7, #32]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d007      	beq.n	800749c <HAL_RCC_OscConfig+0x1bc>
 800748c:	6a3b      	ldr	r3, [r7, #32]
 800748e:	2b18      	cmp	r3, #24
 8007490:	d137      	bne.n	8007502 <HAL_RCC_OscConfig+0x222>
 8007492:	69fb      	ldr	r3, [r7, #28]
 8007494:	f003 0303 	and.w	r3, r3, #3
 8007498:	2b00      	cmp	r3, #0
 800749a:	d132      	bne.n	8007502 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800749c:	4b2e      	ldr	r3, [pc, #184]	@ (8007558 <HAL_RCC_OscConfig+0x278>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f003 0304 	and.w	r3, r3, #4
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d005      	beq.n	80074b4 <HAL_RCC_OscConfig+0x1d4>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	68db      	ldr	r3, [r3, #12]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d101      	bne.n	80074b4 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80074b0:	2301      	movs	r3, #1
 80074b2:	e33e      	b.n	8007b32 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80074b4:	4b28      	ldr	r3, [pc, #160]	@ (8007558 <HAL_RCC_OscConfig+0x278>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f023 0219 	bic.w	r2, r3, #25
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	68db      	ldr	r3, [r3, #12]
 80074c0:	4925      	ldr	r1, [pc, #148]	@ (8007558 <HAL_RCC_OscConfig+0x278>)
 80074c2:	4313      	orrs	r3, r2
 80074c4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074c6:	f7fb ffd9 	bl	800347c <HAL_GetTick>
 80074ca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80074cc:	e008      	b.n	80074e0 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80074ce:	f7fb ffd5 	bl	800347c <HAL_GetTick>
 80074d2:	4602      	mov	r2, r0
 80074d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074d6:	1ad3      	subs	r3, r2, r3
 80074d8:	2b02      	cmp	r3, #2
 80074da:	d901      	bls.n	80074e0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80074dc:	2303      	movs	r3, #3
 80074de:	e328      	b.n	8007b32 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80074e0:	4b1d      	ldr	r3, [pc, #116]	@ (8007558 <HAL_RCC_OscConfig+0x278>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f003 0304 	and.w	r3, r3, #4
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d0f0      	beq.n	80074ce <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074ec:	4b1a      	ldr	r3, [pc, #104]	@ (8007558 <HAL_RCC_OscConfig+0x278>)
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	691b      	ldr	r3, [r3, #16]
 80074f8:	061b      	lsls	r3, r3, #24
 80074fa:	4917      	ldr	r1, [pc, #92]	@ (8007558 <HAL_RCC_OscConfig+0x278>)
 80074fc:	4313      	orrs	r3, r2
 80074fe:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007500:	e045      	b.n	800758e <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	68db      	ldr	r3, [r3, #12]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d028      	beq.n	800755c <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800750a:	4b13      	ldr	r3, [pc, #76]	@ (8007558 <HAL_RCC_OscConfig+0x278>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f023 0219 	bic.w	r2, r3, #25
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	68db      	ldr	r3, [r3, #12]
 8007516:	4910      	ldr	r1, [pc, #64]	@ (8007558 <HAL_RCC_OscConfig+0x278>)
 8007518:	4313      	orrs	r3, r2
 800751a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800751c:	f7fb ffae 	bl	800347c <HAL_GetTick>
 8007520:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007522:	e008      	b.n	8007536 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007524:	f7fb ffaa 	bl	800347c <HAL_GetTick>
 8007528:	4602      	mov	r2, r0
 800752a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800752c:	1ad3      	subs	r3, r2, r3
 800752e:	2b02      	cmp	r3, #2
 8007530:	d901      	bls.n	8007536 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8007532:	2303      	movs	r3, #3
 8007534:	e2fd      	b.n	8007b32 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007536:	4b08      	ldr	r3, [pc, #32]	@ (8007558 <HAL_RCC_OscConfig+0x278>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f003 0304 	and.w	r3, r3, #4
 800753e:	2b00      	cmp	r3, #0
 8007540:	d0f0      	beq.n	8007524 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007542:	4b05      	ldr	r3, [pc, #20]	@ (8007558 <HAL_RCC_OscConfig+0x278>)
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	691b      	ldr	r3, [r3, #16]
 800754e:	061b      	lsls	r3, r3, #24
 8007550:	4901      	ldr	r1, [pc, #4]	@ (8007558 <HAL_RCC_OscConfig+0x278>)
 8007552:	4313      	orrs	r3, r2
 8007554:	604b      	str	r3, [r1, #4]
 8007556:	e01a      	b.n	800758e <HAL_RCC_OscConfig+0x2ae>
 8007558:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800755c:	4b97      	ldr	r3, [pc, #604]	@ (80077bc <HAL_RCC_OscConfig+0x4dc>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a96      	ldr	r2, [pc, #600]	@ (80077bc <HAL_RCC_OscConfig+0x4dc>)
 8007562:	f023 0301 	bic.w	r3, r3, #1
 8007566:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007568:	f7fb ff88 	bl	800347c <HAL_GetTick>
 800756c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800756e:	e008      	b.n	8007582 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007570:	f7fb ff84 	bl	800347c <HAL_GetTick>
 8007574:	4602      	mov	r2, r0
 8007576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007578:	1ad3      	subs	r3, r2, r3
 800757a:	2b02      	cmp	r3, #2
 800757c:	d901      	bls.n	8007582 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800757e:	2303      	movs	r3, #3
 8007580:	e2d7      	b.n	8007b32 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007582:	4b8e      	ldr	r3, [pc, #568]	@ (80077bc <HAL_RCC_OscConfig+0x4dc>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f003 0304 	and.w	r3, r3, #4
 800758a:	2b00      	cmp	r3, #0
 800758c:	d1f0      	bne.n	8007570 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f003 0310 	and.w	r3, r3, #16
 8007596:	2b00      	cmp	r3, #0
 8007598:	d06a      	beq.n	8007670 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800759a:	4b88      	ldr	r3, [pc, #544]	@ (80077bc <HAL_RCC_OscConfig+0x4dc>)
 800759c:	691b      	ldr	r3, [r3, #16]
 800759e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80075a2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80075a4:	4b85      	ldr	r3, [pc, #532]	@ (80077bc <HAL_RCC_OscConfig+0x4dc>)
 80075a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075a8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80075aa:	69bb      	ldr	r3, [r7, #24]
 80075ac:	2b08      	cmp	r3, #8
 80075ae:	d007      	beq.n	80075c0 <HAL_RCC_OscConfig+0x2e0>
 80075b0:	69bb      	ldr	r3, [r7, #24]
 80075b2:	2b18      	cmp	r3, #24
 80075b4:	d11b      	bne.n	80075ee <HAL_RCC_OscConfig+0x30e>
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	f003 0303 	and.w	r3, r3, #3
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d116      	bne.n	80075ee <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80075c0:	4b7e      	ldr	r3, [pc, #504]	@ (80077bc <HAL_RCC_OscConfig+0x4dc>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d005      	beq.n	80075d8 <HAL_RCC_OscConfig+0x2f8>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	69db      	ldr	r3, [r3, #28]
 80075d0:	2b80      	cmp	r3, #128	@ 0x80
 80075d2:	d001      	beq.n	80075d8 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80075d4:	2301      	movs	r3, #1
 80075d6:	e2ac      	b.n	8007b32 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80075d8:	4b78      	ldr	r3, [pc, #480]	@ (80077bc <HAL_RCC_OscConfig+0x4dc>)
 80075da:	68db      	ldr	r3, [r3, #12]
 80075dc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6a1b      	ldr	r3, [r3, #32]
 80075e4:	061b      	lsls	r3, r3, #24
 80075e6:	4975      	ldr	r1, [pc, #468]	@ (80077bc <HAL_RCC_OscConfig+0x4dc>)
 80075e8:	4313      	orrs	r3, r2
 80075ea:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80075ec:	e040      	b.n	8007670 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	69db      	ldr	r3, [r3, #28]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d023      	beq.n	800763e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80075f6:	4b71      	ldr	r3, [pc, #452]	@ (80077bc <HAL_RCC_OscConfig+0x4dc>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a70      	ldr	r2, [pc, #448]	@ (80077bc <HAL_RCC_OscConfig+0x4dc>)
 80075fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007600:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007602:	f7fb ff3b 	bl	800347c <HAL_GetTick>
 8007606:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007608:	e008      	b.n	800761c <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800760a:	f7fb ff37 	bl	800347c <HAL_GetTick>
 800760e:	4602      	mov	r2, r0
 8007610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007612:	1ad3      	subs	r3, r2, r3
 8007614:	2b02      	cmp	r3, #2
 8007616:	d901      	bls.n	800761c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8007618:	2303      	movs	r3, #3
 800761a:	e28a      	b.n	8007b32 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800761c:	4b67      	ldr	r3, [pc, #412]	@ (80077bc <HAL_RCC_OscConfig+0x4dc>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007624:	2b00      	cmp	r3, #0
 8007626:	d0f0      	beq.n	800760a <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007628:	4b64      	ldr	r3, [pc, #400]	@ (80077bc <HAL_RCC_OscConfig+0x4dc>)
 800762a:	68db      	ldr	r3, [r3, #12]
 800762c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6a1b      	ldr	r3, [r3, #32]
 8007634:	061b      	lsls	r3, r3, #24
 8007636:	4961      	ldr	r1, [pc, #388]	@ (80077bc <HAL_RCC_OscConfig+0x4dc>)
 8007638:	4313      	orrs	r3, r2
 800763a:	60cb      	str	r3, [r1, #12]
 800763c:	e018      	b.n	8007670 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800763e:	4b5f      	ldr	r3, [pc, #380]	@ (80077bc <HAL_RCC_OscConfig+0x4dc>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a5e      	ldr	r2, [pc, #376]	@ (80077bc <HAL_RCC_OscConfig+0x4dc>)
 8007644:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007648:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800764a:	f7fb ff17 	bl	800347c <HAL_GetTick>
 800764e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007650:	e008      	b.n	8007664 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007652:	f7fb ff13 	bl	800347c <HAL_GetTick>
 8007656:	4602      	mov	r2, r0
 8007658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800765a:	1ad3      	subs	r3, r2, r3
 800765c:	2b02      	cmp	r3, #2
 800765e:	d901      	bls.n	8007664 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8007660:	2303      	movs	r3, #3
 8007662:	e266      	b.n	8007b32 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007664:	4b55      	ldr	r3, [pc, #340]	@ (80077bc <HAL_RCC_OscConfig+0x4dc>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800766c:	2b00      	cmp	r3, #0
 800766e:	d1f0      	bne.n	8007652 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f003 0308 	and.w	r3, r3, #8
 8007678:	2b00      	cmp	r3, #0
 800767a:	d036      	beq.n	80076ea <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	695b      	ldr	r3, [r3, #20]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d019      	beq.n	80076b8 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007684:	4b4d      	ldr	r3, [pc, #308]	@ (80077bc <HAL_RCC_OscConfig+0x4dc>)
 8007686:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007688:	4a4c      	ldr	r2, [pc, #304]	@ (80077bc <HAL_RCC_OscConfig+0x4dc>)
 800768a:	f043 0301 	orr.w	r3, r3, #1
 800768e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007690:	f7fb fef4 	bl	800347c <HAL_GetTick>
 8007694:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007696:	e008      	b.n	80076aa <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007698:	f7fb fef0 	bl	800347c <HAL_GetTick>
 800769c:	4602      	mov	r2, r0
 800769e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a0:	1ad3      	subs	r3, r2, r3
 80076a2:	2b02      	cmp	r3, #2
 80076a4:	d901      	bls.n	80076aa <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80076a6:	2303      	movs	r3, #3
 80076a8:	e243      	b.n	8007b32 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80076aa:	4b44      	ldr	r3, [pc, #272]	@ (80077bc <HAL_RCC_OscConfig+0x4dc>)
 80076ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076ae:	f003 0302 	and.w	r3, r3, #2
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d0f0      	beq.n	8007698 <HAL_RCC_OscConfig+0x3b8>
 80076b6:	e018      	b.n	80076ea <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80076b8:	4b40      	ldr	r3, [pc, #256]	@ (80077bc <HAL_RCC_OscConfig+0x4dc>)
 80076ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076bc:	4a3f      	ldr	r2, [pc, #252]	@ (80077bc <HAL_RCC_OscConfig+0x4dc>)
 80076be:	f023 0301 	bic.w	r3, r3, #1
 80076c2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076c4:	f7fb feda 	bl	800347c <HAL_GetTick>
 80076c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80076ca:	e008      	b.n	80076de <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80076cc:	f7fb fed6 	bl	800347c <HAL_GetTick>
 80076d0:	4602      	mov	r2, r0
 80076d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076d4:	1ad3      	subs	r3, r2, r3
 80076d6:	2b02      	cmp	r3, #2
 80076d8:	d901      	bls.n	80076de <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80076da:	2303      	movs	r3, #3
 80076dc:	e229      	b.n	8007b32 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80076de:	4b37      	ldr	r3, [pc, #220]	@ (80077bc <HAL_RCC_OscConfig+0x4dc>)
 80076e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076e2:	f003 0302 	and.w	r3, r3, #2
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d1f0      	bne.n	80076cc <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f003 0320 	and.w	r3, r3, #32
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d036      	beq.n	8007764 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	699b      	ldr	r3, [r3, #24]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d019      	beq.n	8007732 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80076fe:	4b2f      	ldr	r3, [pc, #188]	@ (80077bc <HAL_RCC_OscConfig+0x4dc>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a2e      	ldr	r2, [pc, #184]	@ (80077bc <HAL_RCC_OscConfig+0x4dc>)
 8007704:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007708:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800770a:	f7fb feb7 	bl	800347c <HAL_GetTick>
 800770e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007710:	e008      	b.n	8007724 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007712:	f7fb feb3 	bl	800347c <HAL_GetTick>
 8007716:	4602      	mov	r2, r0
 8007718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800771a:	1ad3      	subs	r3, r2, r3
 800771c:	2b02      	cmp	r3, #2
 800771e:	d901      	bls.n	8007724 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8007720:	2303      	movs	r3, #3
 8007722:	e206      	b.n	8007b32 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007724:	4b25      	ldr	r3, [pc, #148]	@ (80077bc <HAL_RCC_OscConfig+0x4dc>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800772c:	2b00      	cmp	r3, #0
 800772e:	d0f0      	beq.n	8007712 <HAL_RCC_OscConfig+0x432>
 8007730:	e018      	b.n	8007764 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007732:	4b22      	ldr	r3, [pc, #136]	@ (80077bc <HAL_RCC_OscConfig+0x4dc>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a21      	ldr	r2, [pc, #132]	@ (80077bc <HAL_RCC_OscConfig+0x4dc>)
 8007738:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800773c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800773e:	f7fb fe9d 	bl	800347c <HAL_GetTick>
 8007742:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007744:	e008      	b.n	8007758 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007746:	f7fb fe99 	bl	800347c <HAL_GetTick>
 800774a:	4602      	mov	r2, r0
 800774c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800774e:	1ad3      	subs	r3, r2, r3
 8007750:	2b02      	cmp	r3, #2
 8007752:	d901      	bls.n	8007758 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8007754:	2303      	movs	r3, #3
 8007756:	e1ec      	b.n	8007b32 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007758:	4b18      	ldr	r3, [pc, #96]	@ (80077bc <HAL_RCC_OscConfig+0x4dc>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007760:	2b00      	cmp	r3, #0
 8007762:	d1f0      	bne.n	8007746 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f003 0304 	and.w	r3, r3, #4
 800776c:	2b00      	cmp	r3, #0
 800776e:	f000 80af 	beq.w	80078d0 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007772:	4b13      	ldr	r3, [pc, #76]	@ (80077c0 <HAL_RCC_OscConfig+0x4e0>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a12      	ldr	r2, [pc, #72]	@ (80077c0 <HAL_RCC_OscConfig+0x4e0>)
 8007778:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800777c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800777e:	f7fb fe7d 	bl	800347c <HAL_GetTick>
 8007782:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007784:	e008      	b.n	8007798 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007786:	f7fb fe79 	bl	800347c <HAL_GetTick>
 800778a:	4602      	mov	r2, r0
 800778c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800778e:	1ad3      	subs	r3, r2, r3
 8007790:	2b64      	cmp	r3, #100	@ 0x64
 8007792:	d901      	bls.n	8007798 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8007794:	2303      	movs	r3, #3
 8007796:	e1cc      	b.n	8007b32 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007798:	4b09      	ldr	r3, [pc, #36]	@ (80077c0 <HAL_RCC_OscConfig+0x4e0>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d0f0      	beq.n	8007786 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	689b      	ldr	r3, [r3, #8]
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d10b      	bne.n	80077c4 <HAL_RCC_OscConfig+0x4e4>
 80077ac:	4b03      	ldr	r3, [pc, #12]	@ (80077bc <HAL_RCC_OscConfig+0x4dc>)
 80077ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077b0:	4a02      	ldr	r2, [pc, #8]	@ (80077bc <HAL_RCC_OscConfig+0x4dc>)
 80077b2:	f043 0301 	orr.w	r3, r3, #1
 80077b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80077b8:	e05b      	b.n	8007872 <HAL_RCC_OscConfig+0x592>
 80077ba:	bf00      	nop
 80077bc:	58024400 	.word	0x58024400
 80077c0:	58024800 	.word	0x58024800
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d112      	bne.n	80077f2 <HAL_RCC_OscConfig+0x512>
 80077cc:	4b9d      	ldr	r3, [pc, #628]	@ (8007a44 <HAL_RCC_OscConfig+0x764>)
 80077ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077d0:	4a9c      	ldr	r2, [pc, #624]	@ (8007a44 <HAL_RCC_OscConfig+0x764>)
 80077d2:	f023 0301 	bic.w	r3, r3, #1
 80077d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80077d8:	4b9a      	ldr	r3, [pc, #616]	@ (8007a44 <HAL_RCC_OscConfig+0x764>)
 80077da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077dc:	4a99      	ldr	r2, [pc, #612]	@ (8007a44 <HAL_RCC_OscConfig+0x764>)
 80077de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80077e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80077e4:	4b97      	ldr	r3, [pc, #604]	@ (8007a44 <HAL_RCC_OscConfig+0x764>)
 80077e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077e8:	4a96      	ldr	r2, [pc, #600]	@ (8007a44 <HAL_RCC_OscConfig+0x764>)
 80077ea:	f023 0304 	bic.w	r3, r3, #4
 80077ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80077f0:	e03f      	b.n	8007872 <HAL_RCC_OscConfig+0x592>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	2b05      	cmp	r3, #5
 80077f8:	d112      	bne.n	8007820 <HAL_RCC_OscConfig+0x540>
 80077fa:	4b92      	ldr	r3, [pc, #584]	@ (8007a44 <HAL_RCC_OscConfig+0x764>)
 80077fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077fe:	4a91      	ldr	r2, [pc, #580]	@ (8007a44 <HAL_RCC_OscConfig+0x764>)
 8007800:	f043 0304 	orr.w	r3, r3, #4
 8007804:	6713      	str	r3, [r2, #112]	@ 0x70
 8007806:	4b8f      	ldr	r3, [pc, #572]	@ (8007a44 <HAL_RCC_OscConfig+0x764>)
 8007808:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800780a:	4a8e      	ldr	r2, [pc, #568]	@ (8007a44 <HAL_RCC_OscConfig+0x764>)
 800780c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007810:	6713      	str	r3, [r2, #112]	@ 0x70
 8007812:	4b8c      	ldr	r3, [pc, #560]	@ (8007a44 <HAL_RCC_OscConfig+0x764>)
 8007814:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007816:	4a8b      	ldr	r2, [pc, #556]	@ (8007a44 <HAL_RCC_OscConfig+0x764>)
 8007818:	f043 0301 	orr.w	r3, r3, #1
 800781c:	6713      	str	r3, [r2, #112]	@ 0x70
 800781e:	e028      	b.n	8007872 <HAL_RCC_OscConfig+0x592>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	2b85      	cmp	r3, #133	@ 0x85
 8007826:	d112      	bne.n	800784e <HAL_RCC_OscConfig+0x56e>
 8007828:	4b86      	ldr	r3, [pc, #536]	@ (8007a44 <HAL_RCC_OscConfig+0x764>)
 800782a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800782c:	4a85      	ldr	r2, [pc, #532]	@ (8007a44 <HAL_RCC_OscConfig+0x764>)
 800782e:	f043 0304 	orr.w	r3, r3, #4
 8007832:	6713      	str	r3, [r2, #112]	@ 0x70
 8007834:	4b83      	ldr	r3, [pc, #524]	@ (8007a44 <HAL_RCC_OscConfig+0x764>)
 8007836:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007838:	4a82      	ldr	r2, [pc, #520]	@ (8007a44 <HAL_RCC_OscConfig+0x764>)
 800783a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800783e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007840:	4b80      	ldr	r3, [pc, #512]	@ (8007a44 <HAL_RCC_OscConfig+0x764>)
 8007842:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007844:	4a7f      	ldr	r2, [pc, #508]	@ (8007a44 <HAL_RCC_OscConfig+0x764>)
 8007846:	f043 0301 	orr.w	r3, r3, #1
 800784a:	6713      	str	r3, [r2, #112]	@ 0x70
 800784c:	e011      	b.n	8007872 <HAL_RCC_OscConfig+0x592>
 800784e:	4b7d      	ldr	r3, [pc, #500]	@ (8007a44 <HAL_RCC_OscConfig+0x764>)
 8007850:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007852:	4a7c      	ldr	r2, [pc, #496]	@ (8007a44 <HAL_RCC_OscConfig+0x764>)
 8007854:	f023 0301 	bic.w	r3, r3, #1
 8007858:	6713      	str	r3, [r2, #112]	@ 0x70
 800785a:	4b7a      	ldr	r3, [pc, #488]	@ (8007a44 <HAL_RCC_OscConfig+0x764>)
 800785c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800785e:	4a79      	ldr	r2, [pc, #484]	@ (8007a44 <HAL_RCC_OscConfig+0x764>)
 8007860:	f023 0304 	bic.w	r3, r3, #4
 8007864:	6713      	str	r3, [r2, #112]	@ 0x70
 8007866:	4b77      	ldr	r3, [pc, #476]	@ (8007a44 <HAL_RCC_OscConfig+0x764>)
 8007868:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800786a:	4a76      	ldr	r2, [pc, #472]	@ (8007a44 <HAL_RCC_OscConfig+0x764>)
 800786c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007870:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	689b      	ldr	r3, [r3, #8]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d015      	beq.n	80078a6 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800787a:	f7fb fdff 	bl	800347c <HAL_GetTick>
 800787e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007880:	e00a      	b.n	8007898 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007882:	f7fb fdfb 	bl	800347c <HAL_GetTick>
 8007886:	4602      	mov	r2, r0
 8007888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800788a:	1ad3      	subs	r3, r2, r3
 800788c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007890:	4293      	cmp	r3, r2
 8007892:	d901      	bls.n	8007898 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8007894:	2303      	movs	r3, #3
 8007896:	e14c      	b.n	8007b32 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007898:	4b6a      	ldr	r3, [pc, #424]	@ (8007a44 <HAL_RCC_OscConfig+0x764>)
 800789a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800789c:	f003 0302 	and.w	r3, r3, #2
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d0ee      	beq.n	8007882 <HAL_RCC_OscConfig+0x5a2>
 80078a4:	e014      	b.n	80078d0 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078a6:	f7fb fde9 	bl	800347c <HAL_GetTick>
 80078aa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80078ac:	e00a      	b.n	80078c4 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078ae:	f7fb fde5 	bl	800347c <HAL_GetTick>
 80078b2:	4602      	mov	r2, r0
 80078b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078b6:	1ad3      	subs	r3, r2, r3
 80078b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80078bc:	4293      	cmp	r3, r2
 80078be:	d901      	bls.n	80078c4 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80078c0:	2303      	movs	r3, #3
 80078c2:	e136      	b.n	8007b32 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80078c4:	4b5f      	ldr	r3, [pc, #380]	@ (8007a44 <HAL_RCC_OscConfig+0x764>)
 80078c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078c8:	f003 0302 	and.w	r3, r3, #2
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d1ee      	bne.n	80078ae <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	f000 812b 	beq.w	8007b30 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80078da:	4b5a      	ldr	r3, [pc, #360]	@ (8007a44 <HAL_RCC_OscConfig+0x764>)
 80078dc:	691b      	ldr	r3, [r3, #16]
 80078de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80078e2:	2b18      	cmp	r3, #24
 80078e4:	f000 80bb 	beq.w	8007a5e <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078ec:	2b02      	cmp	r3, #2
 80078ee:	f040 8095 	bne.w	8007a1c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078f2:	4b54      	ldr	r3, [pc, #336]	@ (8007a44 <HAL_RCC_OscConfig+0x764>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a53      	ldr	r2, [pc, #332]	@ (8007a44 <HAL_RCC_OscConfig+0x764>)
 80078f8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80078fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078fe:	f7fb fdbd 	bl	800347c <HAL_GetTick>
 8007902:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007904:	e008      	b.n	8007918 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007906:	f7fb fdb9 	bl	800347c <HAL_GetTick>
 800790a:	4602      	mov	r2, r0
 800790c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800790e:	1ad3      	subs	r3, r2, r3
 8007910:	2b02      	cmp	r3, #2
 8007912:	d901      	bls.n	8007918 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8007914:	2303      	movs	r3, #3
 8007916:	e10c      	b.n	8007b32 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007918:	4b4a      	ldr	r3, [pc, #296]	@ (8007a44 <HAL_RCC_OscConfig+0x764>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007920:	2b00      	cmp	r3, #0
 8007922:	d1f0      	bne.n	8007906 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007924:	4b47      	ldr	r3, [pc, #284]	@ (8007a44 <HAL_RCC_OscConfig+0x764>)
 8007926:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007928:	4b47      	ldr	r3, [pc, #284]	@ (8007a48 <HAL_RCC_OscConfig+0x768>)
 800792a:	4013      	ands	r3, r2
 800792c:	687a      	ldr	r2, [r7, #4]
 800792e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8007930:	687a      	ldr	r2, [r7, #4]
 8007932:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007934:	0112      	lsls	r2, r2, #4
 8007936:	430a      	orrs	r2, r1
 8007938:	4942      	ldr	r1, [pc, #264]	@ (8007a44 <HAL_RCC_OscConfig+0x764>)
 800793a:	4313      	orrs	r3, r2
 800793c:	628b      	str	r3, [r1, #40]	@ 0x28
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007942:	3b01      	subs	r3, #1
 8007944:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800794c:	3b01      	subs	r3, #1
 800794e:	025b      	lsls	r3, r3, #9
 8007950:	b29b      	uxth	r3, r3
 8007952:	431a      	orrs	r2, r3
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007958:	3b01      	subs	r3, #1
 800795a:	041b      	lsls	r3, r3, #16
 800795c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007960:	431a      	orrs	r2, r3
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007966:	3b01      	subs	r3, #1
 8007968:	061b      	lsls	r3, r3, #24
 800796a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800796e:	4935      	ldr	r1, [pc, #212]	@ (8007a44 <HAL_RCC_OscConfig+0x764>)
 8007970:	4313      	orrs	r3, r2
 8007972:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007974:	4b33      	ldr	r3, [pc, #204]	@ (8007a44 <HAL_RCC_OscConfig+0x764>)
 8007976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007978:	4a32      	ldr	r2, [pc, #200]	@ (8007a44 <HAL_RCC_OscConfig+0x764>)
 800797a:	f023 0301 	bic.w	r3, r3, #1
 800797e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007980:	4b30      	ldr	r3, [pc, #192]	@ (8007a44 <HAL_RCC_OscConfig+0x764>)
 8007982:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007984:	4b31      	ldr	r3, [pc, #196]	@ (8007a4c <HAL_RCC_OscConfig+0x76c>)
 8007986:	4013      	ands	r3, r2
 8007988:	687a      	ldr	r2, [r7, #4]
 800798a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800798c:	00d2      	lsls	r2, r2, #3
 800798e:	492d      	ldr	r1, [pc, #180]	@ (8007a44 <HAL_RCC_OscConfig+0x764>)
 8007990:	4313      	orrs	r3, r2
 8007992:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007994:	4b2b      	ldr	r3, [pc, #172]	@ (8007a44 <HAL_RCC_OscConfig+0x764>)
 8007996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007998:	f023 020c 	bic.w	r2, r3, #12
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079a0:	4928      	ldr	r1, [pc, #160]	@ (8007a44 <HAL_RCC_OscConfig+0x764>)
 80079a2:	4313      	orrs	r3, r2
 80079a4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80079a6:	4b27      	ldr	r3, [pc, #156]	@ (8007a44 <HAL_RCC_OscConfig+0x764>)
 80079a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079aa:	f023 0202 	bic.w	r2, r3, #2
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079b2:	4924      	ldr	r1, [pc, #144]	@ (8007a44 <HAL_RCC_OscConfig+0x764>)
 80079b4:	4313      	orrs	r3, r2
 80079b6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80079b8:	4b22      	ldr	r3, [pc, #136]	@ (8007a44 <HAL_RCC_OscConfig+0x764>)
 80079ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079bc:	4a21      	ldr	r2, [pc, #132]	@ (8007a44 <HAL_RCC_OscConfig+0x764>)
 80079be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80079c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079c4:	4b1f      	ldr	r3, [pc, #124]	@ (8007a44 <HAL_RCC_OscConfig+0x764>)
 80079c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079c8:	4a1e      	ldr	r2, [pc, #120]	@ (8007a44 <HAL_RCC_OscConfig+0x764>)
 80079ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80079ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80079d0:	4b1c      	ldr	r3, [pc, #112]	@ (8007a44 <HAL_RCC_OscConfig+0x764>)
 80079d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079d4:	4a1b      	ldr	r2, [pc, #108]	@ (8007a44 <HAL_RCC_OscConfig+0x764>)
 80079d6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80079da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80079dc:	4b19      	ldr	r3, [pc, #100]	@ (8007a44 <HAL_RCC_OscConfig+0x764>)
 80079de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079e0:	4a18      	ldr	r2, [pc, #96]	@ (8007a44 <HAL_RCC_OscConfig+0x764>)
 80079e2:	f043 0301 	orr.w	r3, r3, #1
 80079e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80079e8:	4b16      	ldr	r3, [pc, #88]	@ (8007a44 <HAL_RCC_OscConfig+0x764>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a15      	ldr	r2, [pc, #84]	@ (8007a44 <HAL_RCC_OscConfig+0x764>)
 80079ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80079f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079f4:	f7fb fd42 	bl	800347c <HAL_GetTick>
 80079f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80079fa:	e008      	b.n	8007a0e <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079fc:	f7fb fd3e 	bl	800347c <HAL_GetTick>
 8007a00:	4602      	mov	r2, r0
 8007a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a04:	1ad3      	subs	r3, r2, r3
 8007a06:	2b02      	cmp	r3, #2
 8007a08:	d901      	bls.n	8007a0e <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8007a0a:	2303      	movs	r3, #3
 8007a0c:	e091      	b.n	8007b32 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8007a44 <HAL_RCC_OscConfig+0x764>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d0f0      	beq.n	80079fc <HAL_RCC_OscConfig+0x71c>
 8007a1a:	e089      	b.n	8007b30 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a1c:	4b09      	ldr	r3, [pc, #36]	@ (8007a44 <HAL_RCC_OscConfig+0x764>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a08      	ldr	r2, [pc, #32]	@ (8007a44 <HAL_RCC_OscConfig+0x764>)
 8007a22:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007a26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a28:	f7fb fd28 	bl	800347c <HAL_GetTick>
 8007a2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007a2e:	e00f      	b.n	8007a50 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a30:	f7fb fd24 	bl	800347c <HAL_GetTick>
 8007a34:	4602      	mov	r2, r0
 8007a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a38:	1ad3      	subs	r3, r2, r3
 8007a3a:	2b02      	cmp	r3, #2
 8007a3c:	d908      	bls.n	8007a50 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8007a3e:	2303      	movs	r3, #3
 8007a40:	e077      	b.n	8007b32 <HAL_RCC_OscConfig+0x852>
 8007a42:	bf00      	nop
 8007a44:	58024400 	.word	0x58024400
 8007a48:	fffffc0c 	.word	0xfffffc0c
 8007a4c:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007a50:	4b3a      	ldr	r3, [pc, #232]	@ (8007b3c <HAL_RCC_OscConfig+0x85c>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d1e9      	bne.n	8007a30 <HAL_RCC_OscConfig+0x750>
 8007a5c:	e068      	b.n	8007b30 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007a5e:	4b37      	ldr	r3, [pc, #220]	@ (8007b3c <HAL_RCC_OscConfig+0x85c>)
 8007a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a62:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007a64:	4b35      	ldr	r3, [pc, #212]	@ (8007b3c <HAL_RCC_OscConfig+0x85c>)
 8007a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a68:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a6e:	2b01      	cmp	r3, #1
 8007a70:	d031      	beq.n	8007ad6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	f003 0203 	and.w	r2, r3, #3
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a7c:	429a      	cmp	r2, r3
 8007a7e:	d12a      	bne.n	8007ad6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	091b      	lsrs	r3, r3, #4
 8007a84:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	d122      	bne.n	8007ad6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a9a:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d11a      	bne.n	8007ad6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	0a5b      	lsrs	r3, r3, #9
 8007aa4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007aac:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	d111      	bne.n	8007ad6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	0c1b      	lsrs	r3, r3, #16
 8007ab6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007abe:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d108      	bne.n	8007ad6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	0e1b      	lsrs	r3, r3, #24
 8007ac8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ad0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	d001      	beq.n	8007ada <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	e02b      	b.n	8007b32 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007ada:	4b18      	ldr	r3, [pc, #96]	@ (8007b3c <HAL_RCC_OscConfig+0x85c>)
 8007adc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ade:	08db      	lsrs	r3, r3, #3
 8007ae0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007ae4:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007aea:	693a      	ldr	r2, [r7, #16]
 8007aec:	429a      	cmp	r2, r3
 8007aee:	d01f      	beq.n	8007b30 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007af0:	4b12      	ldr	r3, [pc, #72]	@ (8007b3c <HAL_RCC_OscConfig+0x85c>)
 8007af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007af4:	4a11      	ldr	r2, [pc, #68]	@ (8007b3c <HAL_RCC_OscConfig+0x85c>)
 8007af6:	f023 0301 	bic.w	r3, r3, #1
 8007afa:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007afc:	f7fb fcbe 	bl	800347c <HAL_GetTick>
 8007b00:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007b02:	bf00      	nop
 8007b04:	f7fb fcba 	bl	800347c <HAL_GetTick>
 8007b08:	4602      	mov	r2, r0
 8007b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d0f9      	beq.n	8007b04 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007b10:	4b0a      	ldr	r3, [pc, #40]	@ (8007b3c <HAL_RCC_OscConfig+0x85c>)
 8007b12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007b14:	4b0a      	ldr	r3, [pc, #40]	@ (8007b40 <HAL_RCC_OscConfig+0x860>)
 8007b16:	4013      	ands	r3, r2
 8007b18:	687a      	ldr	r2, [r7, #4]
 8007b1a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007b1c:	00d2      	lsls	r2, r2, #3
 8007b1e:	4907      	ldr	r1, [pc, #28]	@ (8007b3c <HAL_RCC_OscConfig+0x85c>)
 8007b20:	4313      	orrs	r3, r2
 8007b22:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007b24:	4b05      	ldr	r3, [pc, #20]	@ (8007b3c <HAL_RCC_OscConfig+0x85c>)
 8007b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b28:	4a04      	ldr	r2, [pc, #16]	@ (8007b3c <HAL_RCC_OscConfig+0x85c>)
 8007b2a:	f043 0301 	orr.w	r3, r3, #1
 8007b2e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007b30:	2300      	movs	r3, #0
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3730      	adds	r7, #48	@ 0x30
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}
 8007b3a:	bf00      	nop
 8007b3c:	58024400 	.word	0x58024400
 8007b40:	ffff0007 	.word	0xffff0007

08007b44 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b086      	sub	sp, #24
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d101      	bne.n	8007b58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007b54:	2301      	movs	r3, #1
 8007b56:	e19c      	b.n	8007e92 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007b58:	4b8a      	ldr	r3, [pc, #552]	@ (8007d84 <HAL_RCC_ClockConfig+0x240>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f003 030f 	and.w	r3, r3, #15
 8007b60:	683a      	ldr	r2, [r7, #0]
 8007b62:	429a      	cmp	r2, r3
 8007b64:	d910      	bls.n	8007b88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b66:	4b87      	ldr	r3, [pc, #540]	@ (8007d84 <HAL_RCC_ClockConfig+0x240>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f023 020f 	bic.w	r2, r3, #15
 8007b6e:	4985      	ldr	r1, [pc, #532]	@ (8007d84 <HAL_RCC_ClockConfig+0x240>)
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	4313      	orrs	r3, r2
 8007b74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b76:	4b83      	ldr	r3, [pc, #524]	@ (8007d84 <HAL_RCC_ClockConfig+0x240>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f003 030f 	and.w	r3, r3, #15
 8007b7e:	683a      	ldr	r2, [r7, #0]
 8007b80:	429a      	cmp	r2, r3
 8007b82:	d001      	beq.n	8007b88 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007b84:	2301      	movs	r3, #1
 8007b86:	e184      	b.n	8007e92 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f003 0304 	and.w	r3, r3, #4
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d010      	beq.n	8007bb6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	691a      	ldr	r2, [r3, #16]
 8007b98:	4b7b      	ldr	r3, [pc, #492]	@ (8007d88 <HAL_RCC_ClockConfig+0x244>)
 8007b9a:	699b      	ldr	r3, [r3, #24]
 8007b9c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d908      	bls.n	8007bb6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007ba4:	4b78      	ldr	r3, [pc, #480]	@ (8007d88 <HAL_RCC_ClockConfig+0x244>)
 8007ba6:	699b      	ldr	r3, [r3, #24]
 8007ba8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	691b      	ldr	r3, [r3, #16]
 8007bb0:	4975      	ldr	r1, [pc, #468]	@ (8007d88 <HAL_RCC_ClockConfig+0x244>)
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f003 0308 	and.w	r3, r3, #8
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d010      	beq.n	8007be4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	695a      	ldr	r2, [r3, #20]
 8007bc6:	4b70      	ldr	r3, [pc, #448]	@ (8007d88 <HAL_RCC_ClockConfig+0x244>)
 8007bc8:	69db      	ldr	r3, [r3, #28]
 8007bca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	d908      	bls.n	8007be4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007bd2:	4b6d      	ldr	r3, [pc, #436]	@ (8007d88 <HAL_RCC_ClockConfig+0x244>)
 8007bd4:	69db      	ldr	r3, [r3, #28]
 8007bd6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	695b      	ldr	r3, [r3, #20]
 8007bde:	496a      	ldr	r1, [pc, #424]	@ (8007d88 <HAL_RCC_ClockConfig+0x244>)
 8007be0:	4313      	orrs	r3, r2
 8007be2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f003 0310 	and.w	r3, r3, #16
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d010      	beq.n	8007c12 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	699a      	ldr	r2, [r3, #24]
 8007bf4:	4b64      	ldr	r3, [pc, #400]	@ (8007d88 <HAL_RCC_ClockConfig+0x244>)
 8007bf6:	69db      	ldr	r3, [r3, #28]
 8007bf8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	d908      	bls.n	8007c12 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007c00:	4b61      	ldr	r3, [pc, #388]	@ (8007d88 <HAL_RCC_ClockConfig+0x244>)
 8007c02:	69db      	ldr	r3, [r3, #28]
 8007c04:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	699b      	ldr	r3, [r3, #24]
 8007c0c:	495e      	ldr	r1, [pc, #376]	@ (8007d88 <HAL_RCC_ClockConfig+0x244>)
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f003 0320 	and.w	r3, r3, #32
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d010      	beq.n	8007c40 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	69da      	ldr	r2, [r3, #28]
 8007c22:	4b59      	ldr	r3, [pc, #356]	@ (8007d88 <HAL_RCC_ClockConfig+0x244>)
 8007c24:	6a1b      	ldr	r3, [r3, #32]
 8007c26:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	d908      	bls.n	8007c40 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007c2e:	4b56      	ldr	r3, [pc, #344]	@ (8007d88 <HAL_RCC_ClockConfig+0x244>)
 8007c30:	6a1b      	ldr	r3, [r3, #32]
 8007c32:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	69db      	ldr	r3, [r3, #28]
 8007c3a:	4953      	ldr	r1, [pc, #332]	@ (8007d88 <HAL_RCC_ClockConfig+0x244>)
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f003 0302 	and.w	r3, r3, #2
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d010      	beq.n	8007c6e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	68da      	ldr	r2, [r3, #12]
 8007c50:	4b4d      	ldr	r3, [pc, #308]	@ (8007d88 <HAL_RCC_ClockConfig+0x244>)
 8007c52:	699b      	ldr	r3, [r3, #24]
 8007c54:	f003 030f 	and.w	r3, r3, #15
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	d908      	bls.n	8007c6e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c5c:	4b4a      	ldr	r3, [pc, #296]	@ (8007d88 <HAL_RCC_ClockConfig+0x244>)
 8007c5e:	699b      	ldr	r3, [r3, #24]
 8007c60:	f023 020f 	bic.w	r2, r3, #15
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	68db      	ldr	r3, [r3, #12]
 8007c68:	4947      	ldr	r1, [pc, #284]	@ (8007d88 <HAL_RCC_ClockConfig+0x244>)
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f003 0301 	and.w	r3, r3, #1
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d055      	beq.n	8007d26 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007c7a:	4b43      	ldr	r3, [pc, #268]	@ (8007d88 <HAL_RCC_ClockConfig+0x244>)
 8007c7c:	699b      	ldr	r3, [r3, #24]
 8007c7e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	689b      	ldr	r3, [r3, #8]
 8007c86:	4940      	ldr	r1, [pc, #256]	@ (8007d88 <HAL_RCC_ClockConfig+0x244>)
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	2b02      	cmp	r3, #2
 8007c92:	d107      	bne.n	8007ca4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007c94:	4b3c      	ldr	r3, [pc, #240]	@ (8007d88 <HAL_RCC_ClockConfig+0x244>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d121      	bne.n	8007ce4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	e0f6      	b.n	8007e92 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	2b03      	cmp	r3, #3
 8007caa:	d107      	bne.n	8007cbc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007cac:	4b36      	ldr	r3, [pc, #216]	@ (8007d88 <HAL_RCC_ClockConfig+0x244>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d115      	bne.n	8007ce4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007cb8:	2301      	movs	r3, #1
 8007cba:	e0ea      	b.n	8007e92 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	d107      	bne.n	8007cd4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007cc4:	4b30      	ldr	r3, [pc, #192]	@ (8007d88 <HAL_RCC_ClockConfig+0x244>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d109      	bne.n	8007ce4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	e0de      	b.n	8007e92 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007cd4:	4b2c      	ldr	r3, [pc, #176]	@ (8007d88 <HAL_RCC_ClockConfig+0x244>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f003 0304 	and.w	r3, r3, #4
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d101      	bne.n	8007ce4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	e0d6      	b.n	8007e92 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007ce4:	4b28      	ldr	r3, [pc, #160]	@ (8007d88 <HAL_RCC_ClockConfig+0x244>)
 8007ce6:	691b      	ldr	r3, [r3, #16]
 8007ce8:	f023 0207 	bic.w	r2, r3, #7
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	4925      	ldr	r1, [pc, #148]	@ (8007d88 <HAL_RCC_ClockConfig+0x244>)
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007cf6:	f7fb fbc1 	bl	800347c <HAL_GetTick>
 8007cfa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007cfc:	e00a      	b.n	8007d14 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007cfe:	f7fb fbbd 	bl	800347c <HAL_GetTick>
 8007d02:	4602      	mov	r2, r0
 8007d04:	697b      	ldr	r3, [r7, #20]
 8007d06:	1ad3      	subs	r3, r2, r3
 8007d08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d901      	bls.n	8007d14 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007d10:	2303      	movs	r3, #3
 8007d12:	e0be      	b.n	8007e92 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d14:	4b1c      	ldr	r3, [pc, #112]	@ (8007d88 <HAL_RCC_ClockConfig+0x244>)
 8007d16:	691b      	ldr	r3, [r3, #16]
 8007d18:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	00db      	lsls	r3, r3, #3
 8007d22:	429a      	cmp	r2, r3
 8007d24:	d1eb      	bne.n	8007cfe <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f003 0302 	and.w	r3, r3, #2
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d010      	beq.n	8007d54 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	68da      	ldr	r2, [r3, #12]
 8007d36:	4b14      	ldr	r3, [pc, #80]	@ (8007d88 <HAL_RCC_ClockConfig+0x244>)
 8007d38:	699b      	ldr	r3, [r3, #24]
 8007d3a:	f003 030f 	and.w	r3, r3, #15
 8007d3e:	429a      	cmp	r2, r3
 8007d40:	d208      	bcs.n	8007d54 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d42:	4b11      	ldr	r3, [pc, #68]	@ (8007d88 <HAL_RCC_ClockConfig+0x244>)
 8007d44:	699b      	ldr	r3, [r3, #24]
 8007d46:	f023 020f 	bic.w	r2, r3, #15
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	68db      	ldr	r3, [r3, #12]
 8007d4e:	490e      	ldr	r1, [pc, #56]	@ (8007d88 <HAL_RCC_ClockConfig+0x244>)
 8007d50:	4313      	orrs	r3, r2
 8007d52:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007d54:	4b0b      	ldr	r3, [pc, #44]	@ (8007d84 <HAL_RCC_ClockConfig+0x240>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f003 030f 	and.w	r3, r3, #15
 8007d5c:	683a      	ldr	r2, [r7, #0]
 8007d5e:	429a      	cmp	r2, r3
 8007d60:	d214      	bcs.n	8007d8c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d62:	4b08      	ldr	r3, [pc, #32]	@ (8007d84 <HAL_RCC_ClockConfig+0x240>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f023 020f 	bic.w	r2, r3, #15
 8007d6a:	4906      	ldr	r1, [pc, #24]	@ (8007d84 <HAL_RCC_ClockConfig+0x240>)
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d72:	4b04      	ldr	r3, [pc, #16]	@ (8007d84 <HAL_RCC_ClockConfig+0x240>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f003 030f 	and.w	r3, r3, #15
 8007d7a:	683a      	ldr	r2, [r7, #0]
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	d005      	beq.n	8007d8c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007d80:	2301      	movs	r3, #1
 8007d82:	e086      	b.n	8007e92 <HAL_RCC_ClockConfig+0x34e>
 8007d84:	52002000 	.word	0x52002000
 8007d88:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f003 0304 	and.w	r3, r3, #4
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d010      	beq.n	8007dba <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	691a      	ldr	r2, [r3, #16]
 8007d9c:	4b3f      	ldr	r3, [pc, #252]	@ (8007e9c <HAL_RCC_ClockConfig+0x358>)
 8007d9e:	699b      	ldr	r3, [r3, #24]
 8007da0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007da4:	429a      	cmp	r2, r3
 8007da6:	d208      	bcs.n	8007dba <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007da8:	4b3c      	ldr	r3, [pc, #240]	@ (8007e9c <HAL_RCC_ClockConfig+0x358>)
 8007daa:	699b      	ldr	r3, [r3, #24]
 8007dac:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	691b      	ldr	r3, [r3, #16]
 8007db4:	4939      	ldr	r1, [pc, #228]	@ (8007e9c <HAL_RCC_ClockConfig+0x358>)
 8007db6:	4313      	orrs	r3, r2
 8007db8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f003 0308 	and.w	r3, r3, #8
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d010      	beq.n	8007de8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	695a      	ldr	r2, [r3, #20]
 8007dca:	4b34      	ldr	r3, [pc, #208]	@ (8007e9c <HAL_RCC_ClockConfig+0x358>)
 8007dcc:	69db      	ldr	r3, [r3, #28]
 8007dce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007dd2:	429a      	cmp	r2, r3
 8007dd4:	d208      	bcs.n	8007de8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007dd6:	4b31      	ldr	r3, [pc, #196]	@ (8007e9c <HAL_RCC_ClockConfig+0x358>)
 8007dd8:	69db      	ldr	r3, [r3, #28]
 8007dda:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	695b      	ldr	r3, [r3, #20]
 8007de2:	492e      	ldr	r1, [pc, #184]	@ (8007e9c <HAL_RCC_ClockConfig+0x358>)
 8007de4:	4313      	orrs	r3, r2
 8007de6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f003 0310 	and.w	r3, r3, #16
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d010      	beq.n	8007e16 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	699a      	ldr	r2, [r3, #24]
 8007df8:	4b28      	ldr	r3, [pc, #160]	@ (8007e9c <HAL_RCC_ClockConfig+0x358>)
 8007dfa:	69db      	ldr	r3, [r3, #28]
 8007dfc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007e00:	429a      	cmp	r2, r3
 8007e02:	d208      	bcs.n	8007e16 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007e04:	4b25      	ldr	r3, [pc, #148]	@ (8007e9c <HAL_RCC_ClockConfig+0x358>)
 8007e06:	69db      	ldr	r3, [r3, #28]
 8007e08:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	699b      	ldr	r3, [r3, #24]
 8007e10:	4922      	ldr	r1, [pc, #136]	@ (8007e9c <HAL_RCC_ClockConfig+0x358>)
 8007e12:	4313      	orrs	r3, r2
 8007e14:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f003 0320 	and.w	r3, r3, #32
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d010      	beq.n	8007e44 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	69da      	ldr	r2, [r3, #28]
 8007e26:	4b1d      	ldr	r3, [pc, #116]	@ (8007e9c <HAL_RCC_ClockConfig+0x358>)
 8007e28:	6a1b      	ldr	r3, [r3, #32]
 8007e2a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007e2e:	429a      	cmp	r2, r3
 8007e30:	d208      	bcs.n	8007e44 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007e32:	4b1a      	ldr	r3, [pc, #104]	@ (8007e9c <HAL_RCC_ClockConfig+0x358>)
 8007e34:	6a1b      	ldr	r3, [r3, #32]
 8007e36:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	69db      	ldr	r3, [r3, #28]
 8007e3e:	4917      	ldr	r1, [pc, #92]	@ (8007e9c <HAL_RCC_ClockConfig+0x358>)
 8007e40:	4313      	orrs	r3, r2
 8007e42:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8007e44:	f000 f834 	bl	8007eb0 <HAL_RCC_GetSysClockFreq>
 8007e48:	4602      	mov	r2, r0
 8007e4a:	4b14      	ldr	r3, [pc, #80]	@ (8007e9c <HAL_RCC_ClockConfig+0x358>)
 8007e4c:	699b      	ldr	r3, [r3, #24]
 8007e4e:	0a1b      	lsrs	r3, r3, #8
 8007e50:	f003 030f 	and.w	r3, r3, #15
 8007e54:	4912      	ldr	r1, [pc, #72]	@ (8007ea0 <HAL_RCC_ClockConfig+0x35c>)
 8007e56:	5ccb      	ldrb	r3, [r1, r3]
 8007e58:	f003 031f 	and.w	r3, r3, #31
 8007e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8007e60:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8007e62:	4b0e      	ldr	r3, [pc, #56]	@ (8007e9c <HAL_RCC_ClockConfig+0x358>)
 8007e64:	699b      	ldr	r3, [r3, #24]
 8007e66:	f003 030f 	and.w	r3, r3, #15
 8007e6a:	4a0d      	ldr	r2, [pc, #52]	@ (8007ea0 <HAL_RCC_ClockConfig+0x35c>)
 8007e6c:	5cd3      	ldrb	r3, [r2, r3]
 8007e6e:	f003 031f 	and.w	r3, r3, #31
 8007e72:	693a      	ldr	r2, [r7, #16]
 8007e74:	fa22 f303 	lsr.w	r3, r2, r3
 8007e78:	4a0a      	ldr	r2, [pc, #40]	@ (8007ea4 <HAL_RCC_ClockConfig+0x360>)
 8007e7a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007e7c:	4a0a      	ldr	r2, [pc, #40]	@ (8007ea8 <HAL_RCC_ClockConfig+0x364>)
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007e82:	4b0a      	ldr	r3, [pc, #40]	@ (8007eac <HAL_RCC_ClockConfig+0x368>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4618      	mov	r0, r3
 8007e88:	f7fb faae 	bl	80033e8 <HAL_InitTick>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3718      	adds	r7, #24
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}
 8007e9a:	bf00      	nop
 8007e9c:	58024400 	.word	0x58024400
 8007ea0:	08012aa0 	.word	0x08012aa0
 8007ea4:	2400009c 	.word	0x2400009c
 8007ea8:	24000098 	.word	0x24000098
 8007eac:	240000a0 	.word	0x240000a0

08007eb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b089      	sub	sp, #36	@ 0x24
 8007eb4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007eb6:	4bb3      	ldr	r3, [pc, #716]	@ (8008184 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007eb8:	691b      	ldr	r3, [r3, #16]
 8007eba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007ebe:	2b18      	cmp	r3, #24
 8007ec0:	f200 8155 	bhi.w	800816e <HAL_RCC_GetSysClockFreq+0x2be>
 8007ec4:	a201      	add	r2, pc, #4	@ (adr r2, 8007ecc <HAL_RCC_GetSysClockFreq+0x1c>)
 8007ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eca:	bf00      	nop
 8007ecc:	08007f31 	.word	0x08007f31
 8007ed0:	0800816f 	.word	0x0800816f
 8007ed4:	0800816f 	.word	0x0800816f
 8007ed8:	0800816f 	.word	0x0800816f
 8007edc:	0800816f 	.word	0x0800816f
 8007ee0:	0800816f 	.word	0x0800816f
 8007ee4:	0800816f 	.word	0x0800816f
 8007ee8:	0800816f 	.word	0x0800816f
 8007eec:	08007f57 	.word	0x08007f57
 8007ef0:	0800816f 	.word	0x0800816f
 8007ef4:	0800816f 	.word	0x0800816f
 8007ef8:	0800816f 	.word	0x0800816f
 8007efc:	0800816f 	.word	0x0800816f
 8007f00:	0800816f 	.word	0x0800816f
 8007f04:	0800816f 	.word	0x0800816f
 8007f08:	0800816f 	.word	0x0800816f
 8007f0c:	08007f5d 	.word	0x08007f5d
 8007f10:	0800816f 	.word	0x0800816f
 8007f14:	0800816f 	.word	0x0800816f
 8007f18:	0800816f 	.word	0x0800816f
 8007f1c:	0800816f 	.word	0x0800816f
 8007f20:	0800816f 	.word	0x0800816f
 8007f24:	0800816f 	.word	0x0800816f
 8007f28:	0800816f 	.word	0x0800816f
 8007f2c:	08007f63 	.word	0x08007f63
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f30:	4b94      	ldr	r3, [pc, #592]	@ (8008184 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f003 0320 	and.w	r3, r3, #32
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d009      	beq.n	8007f50 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007f3c:	4b91      	ldr	r3, [pc, #580]	@ (8008184 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	08db      	lsrs	r3, r3, #3
 8007f42:	f003 0303 	and.w	r3, r3, #3
 8007f46:	4a90      	ldr	r2, [pc, #576]	@ (8008188 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007f48:	fa22 f303 	lsr.w	r3, r2, r3
 8007f4c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007f4e:	e111      	b.n	8008174 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007f50:	4b8d      	ldr	r3, [pc, #564]	@ (8008188 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007f52:	61bb      	str	r3, [r7, #24]
      break;
 8007f54:	e10e      	b.n	8008174 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007f56:	4b8d      	ldr	r3, [pc, #564]	@ (800818c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007f58:	61bb      	str	r3, [r7, #24]
      break;
 8007f5a:	e10b      	b.n	8008174 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007f5c:	4b8c      	ldr	r3, [pc, #560]	@ (8008190 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007f5e:	61bb      	str	r3, [r7, #24]
      break;
 8007f60:	e108      	b.n	8008174 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007f62:	4b88      	ldr	r3, [pc, #544]	@ (8008184 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f66:	f003 0303 	and.w	r3, r3, #3
 8007f6a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007f6c:	4b85      	ldr	r3, [pc, #532]	@ (8008184 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f70:	091b      	lsrs	r3, r3, #4
 8007f72:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007f76:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007f78:	4b82      	ldr	r3, [pc, #520]	@ (8008184 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f7c:	f003 0301 	and.w	r3, r3, #1
 8007f80:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007f82:	4b80      	ldr	r3, [pc, #512]	@ (8008184 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f86:	08db      	lsrs	r3, r3, #3
 8007f88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007f8c:	68fa      	ldr	r2, [r7, #12]
 8007f8e:	fb02 f303 	mul.w	r3, r2, r3
 8007f92:	ee07 3a90 	vmov	s15, r3
 8007f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f9a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	f000 80e1 	beq.w	8008168 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	2b02      	cmp	r3, #2
 8007faa:	f000 8083 	beq.w	80080b4 <HAL_RCC_GetSysClockFreq+0x204>
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	2b02      	cmp	r3, #2
 8007fb2:	f200 80a1 	bhi.w	80080f8 <HAL_RCC_GetSysClockFreq+0x248>
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d003      	beq.n	8007fc4 <HAL_RCC_GetSysClockFreq+0x114>
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	2b01      	cmp	r3, #1
 8007fc0:	d056      	beq.n	8008070 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007fc2:	e099      	b.n	80080f8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007fc4:	4b6f      	ldr	r3, [pc, #444]	@ (8008184 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f003 0320 	and.w	r3, r3, #32
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d02d      	beq.n	800802c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007fd0:	4b6c      	ldr	r3, [pc, #432]	@ (8008184 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	08db      	lsrs	r3, r3, #3
 8007fd6:	f003 0303 	and.w	r3, r3, #3
 8007fda:	4a6b      	ldr	r2, [pc, #428]	@ (8008188 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007fdc:	fa22 f303 	lsr.w	r3, r2, r3
 8007fe0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	ee07 3a90 	vmov	s15, r3
 8007fe8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	ee07 3a90 	vmov	s15, r3
 8007ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ff6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ffa:	4b62      	ldr	r3, [pc, #392]	@ (8008184 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ffe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008002:	ee07 3a90 	vmov	s15, r3
 8008006:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800800a:	ed97 6a02 	vldr	s12, [r7, #8]
 800800e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8008194 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008012:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008016:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800801a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800801e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008022:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008026:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800802a:	e087      	b.n	800813c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	ee07 3a90 	vmov	s15, r3
 8008032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008036:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8008198 <HAL_RCC_GetSysClockFreq+0x2e8>
 800803a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800803e:	4b51      	ldr	r3, [pc, #324]	@ (8008184 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008042:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008046:	ee07 3a90 	vmov	s15, r3
 800804a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800804e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008052:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8008194 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008056:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800805a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800805e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008062:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800806a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800806e:	e065      	b.n	800813c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	ee07 3a90 	vmov	s15, r3
 8008076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800807a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800819c <HAL_RCC_GetSysClockFreq+0x2ec>
 800807e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008082:	4b40      	ldr	r3, [pc, #256]	@ (8008184 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008086:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800808a:	ee07 3a90 	vmov	s15, r3
 800808e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008092:	ed97 6a02 	vldr	s12, [r7, #8]
 8008096:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8008194 <HAL_RCC_GetSysClockFreq+0x2e4>
 800809a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800809e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80080a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80080b2:	e043      	b.n	800813c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	ee07 3a90 	vmov	s15, r3
 80080ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080be:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80081a0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80080c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080c6:	4b2f      	ldr	r3, [pc, #188]	@ (8008184 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080ce:	ee07 3a90 	vmov	s15, r3
 80080d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80080da:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8008194 <HAL_RCC_GetSysClockFreq+0x2e4>
 80080de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80080ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80080f6:	e021      	b.n	800813c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	ee07 3a90 	vmov	s15, r3
 80080fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008102:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800819c <HAL_RCC_GetSysClockFreq+0x2ec>
 8008106:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800810a:	4b1e      	ldr	r3, [pc, #120]	@ (8008184 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800810c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800810e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008112:	ee07 3a90 	vmov	s15, r3
 8008116:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800811a:	ed97 6a02 	vldr	s12, [r7, #8]
 800811e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8008194 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008122:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008126:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800812a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800812e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008132:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008136:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800813a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800813c:	4b11      	ldr	r3, [pc, #68]	@ (8008184 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800813e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008140:	0a5b      	lsrs	r3, r3, #9
 8008142:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008146:	3301      	adds	r3, #1
 8008148:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	ee07 3a90 	vmov	s15, r3
 8008150:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008154:	edd7 6a07 	vldr	s13, [r7, #28]
 8008158:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800815c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008160:	ee17 3a90 	vmov	r3, s15
 8008164:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008166:	e005      	b.n	8008174 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008168:	2300      	movs	r3, #0
 800816a:	61bb      	str	r3, [r7, #24]
      break;
 800816c:	e002      	b.n	8008174 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800816e:	4b07      	ldr	r3, [pc, #28]	@ (800818c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008170:	61bb      	str	r3, [r7, #24]
      break;
 8008172:	bf00      	nop
  }

  return sysclockfreq;
 8008174:	69bb      	ldr	r3, [r7, #24]
}
 8008176:	4618      	mov	r0, r3
 8008178:	3724      	adds	r7, #36	@ 0x24
 800817a:	46bd      	mov	sp, r7
 800817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008180:	4770      	bx	lr
 8008182:	bf00      	nop
 8008184:	58024400 	.word	0x58024400
 8008188:	03d09000 	.word	0x03d09000
 800818c:	003d0900 	.word	0x003d0900
 8008190:	016e3600 	.word	0x016e3600
 8008194:	46000000 	.word	0x46000000
 8008198:	4c742400 	.word	0x4c742400
 800819c:	4a742400 	.word	0x4a742400
 80081a0:	4bb71b00 	.word	0x4bb71b00

080081a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b082      	sub	sp, #8
 80081a8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80081aa:	f7ff fe81 	bl	8007eb0 <HAL_RCC_GetSysClockFreq>
 80081ae:	4602      	mov	r2, r0
 80081b0:	4b10      	ldr	r3, [pc, #64]	@ (80081f4 <HAL_RCC_GetHCLKFreq+0x50>)
 80081b2:	699b      	ldr	r3, [r3, #24]
 80081b4:	0a1b      	lsrs	r3, r3, #8
 80081b6:	f003 030f 	and.w	r3, r3, #15
 80081ba:	490f      	ldr	r1, [pc, #60]	@ (80081f8 <HAL_RCC_GetHCLKFreq+0x54>)
 80081bc:	5ccb      	ldrb	r3, [r1, r3]
 80081be:	f003 031f 	and.w	r3, r3, #31
 80081c2:	fa22 f303 	lsr.w	r3, r2, r3
 80081c6:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80081c8:	4b0a      	ldr	r3, [pc, #40]	@ (80081f4 <HAL_RCC_GetHCLKFreq+0x50>)
 80081ca:	699b      	ldr	r3, [r3, #24]
 80081cc:	f003 030f 	and.w	r3, r3, #15
 80081d0:	4a09      	ldr	r2, [pc, #36]	@ (80081f8 <HAL_RCC_GetHCLKFreq+0x54>)
 80081d2:	5cd3      	ldrb	r3, [r2, r3]
 80081d4:	f003 031f 	and.w	r3, r3, #31
 80081d8:	687a      	ldr	r2, [r7, #4]
 80081da:	fa22 f303 	lsr.w	r3, r2, r3
 80081de:	4a07      	ldr	r2, [pc, #28]	@ (80081fc <HAL_RCC_GetHCLKFreq+0x58>)
 80081e0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80081e2:	4a07      	ldr	r2, [pc, #28]	@ (8008200 <HAL_RCC_GetHCLKFreq+0x5c>)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80081e8:	4b04      	ldr	r3, [pc, #16]	@ (80081fc <HAL_RCC_GetHCLKFreq+0x58>)
 80081ea:	681b      	ldr	r3, [r3, #0]
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3708      	adds	r7, #8
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}
 80081f4:	58024400 	.word	0x58024400
 80081f8:	08012aa0 	.word	0x08012aa0
 80081fc:	2400009c 	.word	0x2400009c
 8008200:	24000098 	.word	0x24000098

08008204 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8008208:	f7ff ffcc 	bl	80081a4 <HAL_RCC_GetHCLKFreq>
 800820c:	4602      	mov	r2, r0
 800820e:	4b06      	ldr	r3, [pc, #24]	@ (8008228 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008210:	69db      	ldr	r3, [r3, #28]
 8008212:	091b      	lsrs	r3, r3, #4
 8008214:	f003 0307 	and.w	r3, r3, #7
 8008218:	4904      	ldr	r1, [pc, #16]	@ (800822c <HAL_RCC_GetPCLK1Freq+0x28>)
 800821a:	5ccb      	ldrb	r3, [r1, r3]
 800821c:	f003 031f 	and.w	r3, r3, #31
 8008220:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8008224:	4618      	mov	r0, r3
 8008226:	bd80      	pop	{r7, pc}
 8008228:	58024400 	.word	0x58024400
 800822c:	08012aa0 	.word	0x08012aa0

08008230 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8008234:	f7ff ffb6 	bl	80081a4 <HAL_RCC_GetHCLKFreq>
 8008238:	4602      	mov	r2, r0
 800823a:	4b06      	ldr	r3, [pc, #24]	@ (8008254 <HAL_RCC_GetPCLK2Freq+0x24>)
 800823c:	69db      	ldr	r3, [r3, #28]
 800823e:	0a1b      	lsrs	r3, r3, #8
 8008240:	f003 0307 	and.w	r3, r3, #7
 8008244:	4904      	ldr	r1, [pc, #16]	@ (8008258 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008246:	5ccb      	ldrb	r3, [r1, r3]
 8008248:	f003 031f 	and.w	r3, r3, #31
 800824c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8008250:	4618      	mov	r0, r3
 8008252:	bd80      	pop	{r7, pc}
 8008254:	58024400 	.word	0x58024400
 8008258:	08012aa0 	.word	0x08012aa0

0800825c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800825c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008260:	b0c8      	sub	sp, #288	@ 0x120
 8008262:	af00      	add	r7, sp, #0
 8008264:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008268:	2300      	movs	r3, #0
 800826a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800826e:	2300      	movs	r3, #0
 8008270:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008274:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800827c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8008280:	2500      	movs	r5, #0
 8008282:	ea54 0305 	orrs.w	r3, r4, r5
 8008286:	d049      	beq.n	800831c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008288:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800828c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800828e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008292:	d02f      	beq.n	80082f4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008294:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008298:	d828      	bhi.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0x90>
 800829a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800829e:	d01a      	beq.n	80082d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80082a0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80082a4:	d822      	bhi.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0x90>
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d003      	beq.n	80082b2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80082aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80082ae:	d007      	beq.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80082b0:	e01c      	b.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082b2:	4ba7      	ldr	r3, [pc, #668]	@ (8008550 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80082b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082b6:	4aa6      	ldr	r2, [pc, #664]	@ (8008550 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80082b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80082bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80082be:	e01a      	b.n	80082f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80082c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082c4:	3308      	adds	r3, #8
 80082c6:	2102      	movs	r1, #2
 80082c8:	4618      	mov	r0, r3
 80082ca:	f001 fc43 	bl	8009b54 <RCCEx_PLL2_Config>
 80082ce:	4603      	mov	r3, r0
 80082d0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80082d4:	e00f      	b.n	80082f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80082d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082da:	3328      	adds	r3, #40	@ 0x28
 80082dc:	2102      	movs	r1, #2
 80082de:	4618      	mov	r0, r3
 80082e0:	f001 fcea 	bl	8009cb8 <RCCEx_PLL3_Config>
 80082e4:	4603      	mov	r3, r0
 80082e6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80082ea:	e004      	b.n	80082f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80082ec:	2301      	movs	r3, #1
 80082ee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80082f2:	e000      	b.n	80082f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80082f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082f6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d10a      	bne.n	8008314 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80082fe:	4b94      	ldr	r3, [pc, #592]	@ (8008550 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008300:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008302:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008306:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800830a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800830c:	4a90      	ldr	r2, [pc, #576]	@ (8008550 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800830e:	430b      	orrs	r3, r1
 8008310:	6513      	str	r3, [r2, #80]	@ 0x50
 8008312:	e003      	b.n	800831c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008314:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008318:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800831c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008324:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8008328:	f04f 0900 	mov.w	r9, #0
 800832c:	ea58 0309 	orrs.w	r3, r8, r9
 8008330:	d047      	beq.n	80083c2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008332:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008336:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008338:	2b04      	cmp	r3, #4
 800833a:	d82a      	bhi.n	8008392 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800833c:	a201      	add	r2, pc, #4	@ (adr r2, 8008344 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800833e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008342:	bf00      	nop
 8008344:	08008359 	.word	0x08008359
 8008348:	08008367 	.word	0x08008367
 800834c:	0800837d 	.word	0x0800837d
 8008350:	0800839b 	.word	0x0800839b
 8008354:	0800839b 	.word	0x0800839b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008358:	4b7d      	ldr	r3, [pc, #500]	@ (8008550 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800835a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800835c:	4a7c      	ldr	r2, [pc, #496]	@ (8008550 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800835e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008362:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008364:	e01a      	b.n	800839c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008366:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800836a:	3308      	adds	r3, #8
 800836c:	2100      	movs	r1, #0
 800836e:	4618      	mov	r0, r3
 8008370:	f001 fbf0 	bl	8009b54 <RCCEx_PLL2_Config>
 8008374:	4603      	mov	r3, r0
 8008376:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800837a:	e00f      	b.n	800839c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800837c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008380:	3328      	adds	r3, #40	@ 0x28
 8008382:	2100      	movs	r1, #0
 8008384:	4618      	mov	r0, r3
 8008386:	f001 fc97 	bl	8009cb8 <RCCEx_PLL3_Config>
 800838a:	4603      	mov	r3, r0
 800838c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008390:	e004      	b.n	800839c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008392:	2301      	movs	r3, #1
 8008394:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008398:	e000      	b.n	800839c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800839a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800839c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d10a      	bne.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80083a4:	4b6a      	ldr	r3, [pc, #424]	@ (8008550 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80083a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083a8:	f023 0107 	bic.w	r1, r3, #7
 80083ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083b2:	4a67      	ldr	r2, [pc, #412]	@ (8008550 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80083b4:	430b      	orrs	r3, r1
 80083b6:	6513      	str	r3, [r2, #80]	@ 0x50
 80083b8:	e003      	b.n	80083c2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083ba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80083be:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80083c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ca:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80083ce:	f04f 0b00 	mov.w	fp, #0
 80083d2:	ea5a 030b 	orrs.w	r3, sl, fp
 80083d6:	d054      	beq.n	8008482 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 80083d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80083de:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80083e2:	d036      	beq.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80083e4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80083e8:	d82f      	bhi.n	800844a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80083ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80083ee:	d032      	beq.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80083f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80083f4:	d829      	bhi.n	800844a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80083f6:	2bc0      	cmp	r3, #192	@ 0xc0
 80083f8:	d02f      	beq.n	800845a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 80083fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80083fc:	d825      	bhi.n	800844a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80083fe:	2b80      	cmp	r3, #128	@ 0x80
 8008400:	d018      	beq.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8008402:	2b80      	cmp	r3, #128	@ 0x80
 8008404:	d821      	bhi.n	800844a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008406:	2b00      	cmp	r3, #0
 8008408:	d002      	beq.n	8008410 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800840a:	2b40      	cmp	r3, #64	@ 0x40
 800840c:	d007      	beq.n	800841e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800840e:	e01c      	b.n	800844a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008410:	4b4f      	ldr	r3, [pc, #316]	@ (8008550 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008414:	4a4e      	ldr	r2, [pc, #312]	@ (8008550 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008416:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800841a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800841c:	e01e      	b.n	800845c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800841e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008422:	3308      	adds	r3, #8
 8008424:	2100      	movs	r1, #0
 8008426:	4618      	mov	r0, r3
 8008428:	f001 fb94 	bl	8009b54 <RCCEx_PLL2_Config>
 800842c:	4603      	mov	r3, r0
 800842e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8008432:	e013      	b.n	800845c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008434:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008438:	3328      	adds	r3, #40	@ 0x28
 800843a:	2100      	movs	r1, #0
 800843c:	4618      	mov	r0, r3
 800843e:	f001 fc3b 	bl	8009cb8 <RCCEx_PLL3_Config>
 8008442:	4603      	mov	r3, r0
 8008444:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8008448:	e008      	b.n	800845c <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800844a:	2301      	movs	r3, #1
 800844c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008450:	e004      	b.n	800845c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8008452:	bf00      	nop
 8008454:	e002      	b.n	800845c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8008456:	bf00      	nop
 8008458:	e000      	b.n	800845c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800845a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800845c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008460:	2b00      	cmp	r3, #0
 8008462:	d10a      	bne.n	800847a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8008464:	4b3a      	ldr	r3, [pc, #232]	@ (8008550 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008466:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008468:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800846c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008470:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008472:	4a37      	ldr	r2, [pc, #220]	@ (8008550 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008474:	430b      	orrs	r3, r1
 8008476:	6513      	str	r3, [r2, #80]	@ 0x50
 8008478:	e003      	b.n	8008482 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800847a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800847e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8008482:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800848a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800848e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008492:	2300      	movs	r3, #0
 8008494:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008498:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800849c:	460b      	mov	r3, r1
 800849e:	4313      	orrs	r3, r2
 80084a0:	d05c      	beq.n	800855c <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 80084a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80084a8:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80084ac:	d03b      	beq.n	8008526 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80084ae:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80084b2:	d834      	bhi.n	800851e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80084b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80084b8:	d037      	beq.n	800852a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80084ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80084be:	d82e      	bhi.n	800851e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80084c0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80084c4:	d033      	beq.n	800852e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80084c6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80084ca:	d828      	bhi.n	800851e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80084cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80084d0:	d01a      	beq.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80084d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80084d6:	d822      	bhi.n	800851e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d003      	beq.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0x288>
 80084dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80084e0:	d007      	beq.n	80084f2 <HAL_RCCEx_PeriphCLKConfig+0x296>
 80084e2:	e01c      	b.n	800851e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084e4:	4b1a      	ldr	r3, [pc, #104]	@ (8008550 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80084e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084e8:	4a19      	ldr	r2, [pc, #100]	@ (8008550 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80084ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80084ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80084f0:	e01e      	b.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80084f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084f6:	3308      	adds	r3, #8
 80084f8:	2100      	movs	r1, #0
 80084fa:	4618      	mov	r0, r3
 80084fc:	f001 fb2a 	bl	8009b54 <RCCEx_PLL2_Config>
 8008500:	4603      	mov	r3, r0
 8008502:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8008506:	e013      	b.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008508:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800850c:	3328      	adds	r3, #40	@ 0x28
 800850e:	2100      	movs	r1, #0
 8008510:	4618      	mov	r0, r3
 8008512:	f001 fbd1 	bl	8009cb8 <RCCEx_PLL3_Config>
 8008516:	4603      	mov	r3, r0
 8008518:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800851c:	e008      	b.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800851e:	2301      	movs	r3, #1
 8008520:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008524:	e004      	b.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8008526:	bf00      	nop
 8008528:	e002      	b.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800852a:	bf00      	nop
 800852c:	e000      	b.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800852e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008530:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008534:	2b00      	cmp	r3, #0
 8008536:	d10d      	bne.n	8008554 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8008538:	4b05      	ldr	r3, [pc, #20]	@ (8008550 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800853a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800853c:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8008540:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008544:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008546:	4a02      	ldr	r2, [pc, #8]	@ (8008550 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008548:	430b      	orrs	r3, r1
 800854a:	6513      	str	r3, [r2, #80]	@ 0x50
 800854c:	e006      	b.n	800855c <HAL_RCCEx_PeriphCLKConfig+0x300>
 800854e:	bf00      	nop
 8008550:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008554:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008558:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800855c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008564:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008568:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800856c:	2300      	movs	r3, #0
 800856e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008572:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8008576:	460b      	mov	r3, r1
 8008578:	4313      	orrs	r3, r2
 800857a:	d03a      	beq.n	80085f2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800857c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008582:	2b30      	cmp	r3, #48	@ 0x30
 8008584:	d01f      	beq.n	80085c6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8008586:	2b30      	cmp	r3, #48	@ 0x30
 8008588:	d819      	bhi.n	80085be <HAL_RCCEx_PeriphCLKConfig+0x362>
 800858a:	2b20      	cmp	r3, #32
 800858c:	d00c      	beq.n	80085a8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800858e:	2b20      	cmp	r3, #32
 8008590:	d815      	bhi.n	80085be <HAL_RCCEx_PeriphCLKConfig+0x362>
 8008592:	2b00      	cmp	r3, #0
 8008594:	d019      	beq.n	80085ca <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008596:	2b10      	cmp	r3, #16
 8008598:	d111      	bne.n	80085be <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800859a:	4bae      	ldr	r3, [pc, #696]	@ (8008854 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800859c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800859e:	4aad      	ldr	r2, [pc, #692]	@ (8008854 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80085a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80085a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80085a6:	e011      	b.n	80085cc <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80085a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085ac:	3308      	adds	r3, #8
 80085ae:	2102      	movs	r1, #2
 80085b0:	4618      	mov	r0, r3
 80085b2:	f001 facf 	bl	8009b54 <RCCEx_PLL2_Config>
 80085b6:	4603      	mov	r3, r0
 80085b8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80085bc:	e006      	b.n	80085cc <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80085be:	2301      	movs	r3, #1
 80085c0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80085c4:	e002      	b.n	80085cc <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80085c6:	bf00      	nop
 80085c8:	e000      	b.n	80085cc <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80085ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085cc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d10a      	bne.n	80085ea <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80085d4:	4b9f      	ldr	r3, [pc, #636]	@ (8008854 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80085d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80085d8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80085dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80085e2:	4a9c      	ldr	r2, [pc, #624]	@ (8008854 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80085e4:	430b      	orrs	r3, r1
 80085e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80085e8:	e003      	b.n	80085f2 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085ea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80085ee:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80085f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085fa:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80085fe:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008602:	2300      	movs	r3, #0
 8008604:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008608:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800860c:	460b      	mov	r3, r1
 800860e:	4313      	orrs	r3, r2
 8008610:	d051      	beq.n	80086b6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008612:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008616:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008618:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800861c:	d035      	beq.n	800868a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800861e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008622:	d82e      	bhi.n	8008682 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8008624:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008628:	d031      	beq.n	800868e <HAL_RCCEx_PeriphCLKConfig+0x432>
 800862a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800862e:	d828      	bhi.n	8008682 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8008630:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008634:	d01a      	beq.n	800866c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8008636:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800863a:	d822      	bhi.n	8008682 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800863c:	2b00      	cmp	r3, #0
 800863e:	d003      	beq.n	8008648 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8008640:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008644:	d007      	beq.n	8008656 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8008646:	e01c      	b.n	8008682 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008648:	4b82      	ldr	r3, [pc, #520]	@ (8008854 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800864a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800864c:	4a81      	ldr	r2, [pc, #516]	@ (8008854 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800864e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008652:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008654:	e01c      	b.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008656:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800865a:	3308      	adds	r3, #8
 800865c:	2100      	movs	r1, #0
 800865e:	4618      	mov	r0, r3
 8008660:	f001 fa78 	bl	8009b54 <RCCEx_PLL2_Config>
 8008664:	4603      	mov	r3, r0
 8008666:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800866a:	e011      	b.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800866c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008670:	3328      	adds	r3, #40	@ 0x28
 8008672:	2100      	movs	r1, #0
 8008674:	4618      	mov	r0, r3
 8008676:	f001 fb1f 	bl	8009cb8 <RCCEx_PLL3_Config>
 800867a:	4603      	mov	r3, r0
 800867c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008680:	e006      	b.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008682:	2301      	movs	r3, #1
 8008684:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008688:	e002      	b.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800868a:	bf00      	nop
 800868c:	e000      	b.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800868e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008690:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008694:	2b00      	cmp	r3, #0
 8008696:	d10a      	bne.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008698:	4b6e      	ldr	r3, [pc, #440]	@ (8008854 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800869a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800869c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80086a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80086a6:	4a6b      	ldr	r2, [pc, #428]	@ (8008854 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80086a8:	430b      	orrs	r3, r1
 80086aa:	6513      	str	r3, [r2, #80]	@ 0x50
 80086ac:	e003      	b.n	80086b6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086ae:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80086b2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80086b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086be:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80086c2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80086c6:	2300      	movs	r3, #0
 80086c8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80086cc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80086d0:	460b      	mov	r3, r1
 80086d2:	4313      	orrs	r3, r2
 80086d4:	d053      	beq.n	800877e <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80086d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80086dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80086e0:	d033      	beq.n	800874a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80086e2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80086e6:	d82c      	bhi.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80086e8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80086ec:	d02f      	beq.n	800874e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80086ee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80086f2:	d826      	bhi.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80086f4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80086f8:	d02b      	beq.n	8008752 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80086fa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80086fe:	d820      	bhi.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8008700:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008704:	d012      	beq.n	800872c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8008706:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800870a:	d81a      	bhi.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800870c:	2b00      	cmp	r3, #0
 800870e:	d022      	beq.n	8008756 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8008710:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008714:	d115      	bne.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008716:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800871a:	3308      	adds	r3, #8
 800871c:	2101      	movs	r1, #1
 800871e:	4618      	mov	r0, r3
 8008720:	f001 fa18 	bl	8009b54 <RCCEx_PLL2_Config>
 8008724:	4603      	mov	r3, r0
 8008726:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800872a:	e015      	b.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800872c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008730:	3328      	adds	r3, #40	@ 0x28
 8008732:	2101      	movs	r1, #1
 8008734:	4618      	mov	r0, r3
 8008736:	f001 fabf 	bl	8009cb8 <RCCEx_PLL3_Config>
 800873a:	4603      	mov	r3, r0
 800873c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008740:	e00a      	b.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008742:	2301      	movs	r3, #1
 8008744:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008748:	e006      	b.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800874a:	bf00      	nop
 800874c:	e004      	b.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800874e:	bf00      	nop
 8008750:	e002      	b.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8008752:	bf00      	nop
 8008754:	e000      	b.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8008756:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008758:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800875c:	2b00      	cmp	r3, #0
 800875e:	d10a      	bne.n	8008776 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008760:	4b3c      	ldr	r3, [pc, #240]	@ (8008854 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008762:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008764:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8008768:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800876c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800876e:	4a39      	ldr	r2, [pc, #228]	@ (8008854 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008770:	430b      	orrs	r3, r1
 8008772:	6513      	str	r3, [r2, #80]	@ 0x50
 8008774:	e003      	b.n	800877e <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008776:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800877a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800877e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008786:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800878a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800878e:	2300      	movs	r3, #0
 8008790:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008794:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8008798:	460b      	mov	r3, r1
 800879a:	4313      	orrs	r3, r2
 800879c:	d060      	beq.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800879e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80087a6:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80087aa:	d039      	beq.n	8008820 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 80087ac:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80087b0:	d832      	bhi.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80087b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80087b6:	d035      	beq.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80087b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80087bc:	d82c      	bhi.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80087be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087c2:	d031      	beq.n	8008828 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80087c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087c8:	d826      	bhi.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80087ca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80087ce:	d02d      	beq.n	800882c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80087d0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80087d4:	d820      	bhi.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80087d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087da:	d012      	beq.n	8008802 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80087dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087e0:	d81a      	bhi.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d024      	beq.n	8008830 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80087e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80087ea:	d115      	bne.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80087ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087f0:	3308      	adds	r3, #8
 80087f2:	2101      	movs	r1, #1
 80087f4:	4618      	mov	r0, r3
 80087f6:	f001 f9ad 	bl	8009b54 <RCCEx_PLL2_Config>
 80087fa:	4603      	mov	r3, r0
 80087fc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008800:	e017      	b.n	8008832 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008802:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008806:	3328      	adds	r3, #40	@ 0x28
 8008808:	2101      	movs	r1, #1
 800880a:	4618      	mov	r0, r3
 800880c:	f001 fa54 	bl	8009cb8 <RCCEx_PLL3_Config>
 8008810:	4603      	mov	r3, r0
 8008812:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008816:	e00c      	b.n	8008832 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008818:	2301      	movs	r3, #1
 800881a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800881e:	e008      	b.n	8008832 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008820:	bf00      	nop
 8008822:	e006      	b.n	8008832 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008824:	bf00      	nop
 8008826:	e004      	b.n	8008832 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008828:	bf00      	nop
 800882a:	e002      	b.n	8008832 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800882c:	bf00      	nop
 800882e:	e000      	b.n	8008832 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008830:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008832:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008836:	2b00      	cmp	r3, #0
 8008838:	d10e      	bne.n	8008858 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800883a:	4b06      	ldr	r3, [pc, #24]	@ (8008854 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800883c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800883e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008842:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008846:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800884a:	4a02      	ldr	r2, [pc, #8]	@ (8008854 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800884c:	430b      	orrs	r3, r1
 800884e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008850:	e006      	b.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8008852:	bf00      	nop
 8008854:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008858:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800885c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008860:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008868:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800886c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008870:	2300      	movs	r3, #0
 8008872:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008876:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800887a:	460b      	mov	r3, r1
 800887c:	4313      	orrs	r3, r2
 800887e:	d037      	beq.n	80088f0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008880:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008884:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008886:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800888a:	d00e      	beq.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800888c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008890:	d816      	bhi.n	80088c0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8008892:	2b00      	cmp	r3, #0
 8008894:	d018      	beq.n	80088c8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8008896:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800889a:	d111      	bne.n	80088c0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800889c:	4bc4      	ldr	r3, [pc, #784]	@ (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800889e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088a0:	4ac3      	ldr	r2, [pc, #780]	@ (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80088a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80088a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80088a8:	e00f      	b.n	80088ca <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80088aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088ae:	3308      	adds	r3, #8
 80088b0:	2101      	movs	r1, #1
 80088b2:	4618      	mov	r0, r3
 80088b4:	f001 f94e 	bl	8009b54 <RCCEx_PLL2_Config>
 80088b8:	4603      	mov	r3, r0
 80088ba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80088be:	e004      	b.n	80088ca <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80088c0:	2301      	movs	r3, #1
 80088c2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80088c6:	e000      	b.n	80088ca <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80088c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088ca:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d10a      	bne.n	80088e8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80088d2:	4bb7      	ldr	r3, [pc, #732]	@ (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80088d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088d6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80088da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80088e0:	4ab3      	ldr	r2, [pc, #716]	@ (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80088e2:	430b      	orrs	r3, r1
 80088e4:	6513      	str	r3, [r2, #80]	@ 0x50
 80088e6:	e003      	b.n	80088f0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088e8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80088ec:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80088f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088f8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80088fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008900:	2300      	movs	r3, #0
 8008902:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008906:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800890a:	460b      	mov	r3, r1
 800890c:	4313      	orrs	r3, r2
 800890e:	d039      	beq.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008910:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008914:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008916:	2b03      	cmp	r3, #3
 8008918:	d81c      	bhi.n	8008954 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800891a:	a201      	add	r2, pc, #4	@ (adr r2, 8008920 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800891c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008920:	0800895d 	.word	0x0800895d
 8008924:	08008931 	.word	0x08008931
 8008928:	0800893f 	.word	0x0800893f
 800892c:	0800895d 	.word	0x0800895d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008930:	4b9f      	ldr	r3, [pc, #636]	@ (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008934:	4a9e      	ldr	r2, [pc, #632]	@ (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008936:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800893a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800893c:	e00f      	b.n	800895e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800893e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008942:	3308      	adds	r3, #8
 8008944:	2102      	movs	r1, #2
 8008946:	4618      	mov	r0, r3
 8008948:	f001 f904 	bl	8009b54 <RCCEx_PLL2_Config>
 800894c:	4603      	mov	r3, r0
 800894e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008952:	e004      	b.n	800895e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008954:	2301      	movs	r3, #1
 8008956:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800895a:	e000      	b.n	800895e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800895c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800895e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008962:	2b00      	cmp	r3, #0
 8008964:	d10a      	bne.n	800897c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008966:	4b92      	ldr	r3, [pc, #584]	@ (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008968:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800896a:	f023 0103 	bic.w	r1, r3, #3
 800896e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008972:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008974:	4a8e      	ldr	r2, [pc, #568]	@ (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008976:	430b      	orrs	r3, r1
 8008978:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800897a:	e003      	b.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800897c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008980:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008984:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800898c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008990:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008994:	2300      	movs	r3, #0
 8008996:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800899a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800899e:	460b      	mov	r3, r1
 80089a0:	4313      	orrs	r3, r2
 80089a2:	f000 8099 	beq.w	8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80089a6:	4b83      	ldr	r3, [pc, #524]	@ (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	4a82      	ldr	r2, [pc, #520]	@ (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80089ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80089b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80089b2:	f7fa fd63 	bl	800347c <HAL_GetTick>
 80089b6:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80089ba:	e00b      	b.n	80089d4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80089bc:	f7fa fd5e 	bl	800347c <HAL_GetTick>
 80089c0:	4602      	mov	r2, r0
 80089c2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80089c6:	1ad3      	subs	r3, r2, r3
 80089c8:	2b64      	cmp	r3, #100	@ 0x64
 80089ca:	d903      	bls.n	80089d4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80089cc:	2303      	movs	r3, #3
 80089ce:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80089d2:	e005      	b.n	80089e0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80089d4:	4b77      	ldr	r3, [pc, #476]	@ (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d0ed      	beq.n	80089bc <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80089e0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d173      	bne.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80089e8:	4b71      	ldr	r3, [pc, #452]	@ (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80089ea:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80089ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80089f4:	4053      	eors	r3, r2
 80089f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d015      	beq.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80089fe:	4b6c      	ldr	r3, [pc, #432]	@ (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008a00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008a06:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008a0a:	4b69      	ldr	r3, [pc, #420]	@ (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008a0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a0e:	4a68      	ldr	r2, [pc, #416]	@ (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008a10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008a14:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008a16:	4b66      	ldr	r3, [pc, #408]	@ (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008a18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a1a:	4a65      	ldr	r2, [pc, #404]	@ (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008a1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008a20:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008a22:	4a63      	ldr	r2, [pc, #396]	@ (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008a24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a28:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008a2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a2e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008a32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a36:	d118      	bne.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a38:	f7fa fd20 	bl	800347c <HAL_GetTick>
 8008a3c:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008a40:	e00d      	b.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a42:	f7fa fd1b 	bl	800347c <HAL_GetTick>
 8008a46:	4602      	mov	r2, r0
 8008a48:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8008a4c:	1ad2      	subs	r2, r2, r3
 8008a4e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008a52:	429a      	cmp	r2, r3
 8008a54:	d903      	bls.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8008a56:	2303      	movs	r3, #3
 8008a58:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8008a5c:	e005      	b.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008a5e:	4b54      	ldr	r3, [pc, #336]	@ (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008a60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a62:	f003 0302 	and.w	r3, r3, #2
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d0eb      	beq.n	8008a42 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8008a6a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d129      	bne.n	8008ac6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008a72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a76:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008a7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008a7e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008a82:	d10e      	bne.n	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8008a84:	4b4a      	ldr	r3, [pc, #296]	@ (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008a86:	691b      	ldr	r3, [r3, #16]
 8008a88:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8008a8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a90:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008a94:	091a      	lsrs	r2, r3, #4
 8008a96:	4b48      	ldr	r3, [pc, #288]	@ (8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8008a98:	4013      	ands	r3, r2
 8008a9a:	4a45      	ldr	r2, [pc, #276]	@ (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008a9c:	430b      	orrs	r3, r1
 8008a9e:	6113      	str	r3, [r2, #16]
 8008aa0:	e005      	b.n	8008aae <HAL_RCCEx_PeriphCLKConfig+0x852>
 8008aa2:	4b43      	ldr	r3, [pc, #268]	@ (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008aa4:	691b      	ldr	r3, [r3, #16]
 8008aa6:	4a42      	ldr	r2, [pc, #264]	@ (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008aa8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008aac:	6113      	str	r3, [r2, #16]
 8008aae:	4b40      	ldr	r3, [pc, #256]	@ (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008ab0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8008ab2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ab6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008aba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008abe:	4a3c      	ldr	r2, [pc, #240]	@ (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008ac0:	430b      	orrs	r3, r1
 8008ac2:	6713      	str	r3, [r2, #112]	@ 0x70
 8008ac4:	e008      	b.n	8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008ac6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008aca:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8008ace:	e003      	b.n	8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ad0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008ad4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008ad8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ae0:	f002 0301 	and.w	r3, r2, #1
 8008ae4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008ae8:	2300      	movs	r3, #0
 8008aea:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008aee:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008af2:	460b      	mov	r3, r1
 8008af4:	4313      	orrs	r3, r2
 8008af6:	f000 8090 	beq.w	8008c1a <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8008afa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008afe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b02:	2b28      	cmp	r3, #40	@ 0x28
 8008b04:	d870      	bhi.n	8008be8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8008b06:	a201      	add	r2, pc, #4	@ (adr r2, 8008b0c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8008b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b0c:	08008bf1 	.word	0x08008bf1
 8008b10:	08008be9 	.word	0x08008be9
 8008b14:	08008be9 	.word	0x08008be9
 8008b18:	08008be9 	.word	0x08008be9
 8008b1c:	08008be9 	.word	0x08008be9
 8008b20:	08008be9 	.word	0x08008be9
 8008b24:	08008be9 	.word	0x08008be9
 8008b28:	08008be9 	.word	0x08008be9
 8008b2c:	08008bbd 	.word	0x08008bbd
 8008b30:	08008be9 	.word	0x08008be9
 8008b34:	08008be9 	.word	0x08008be9
 8008b38:	08008be9 	.word	0x08008be9
 8008b3c:	08008be9 	.word	0x08008be9
 8008b40:	08008be9 	.word	0x08008be9
 8008b44:	08008be9 	.word	0x08008be9
 8008b48:	08008be9 	.word	0x08008be9
 8008b4c:	08008bd3 	.word	0x08008bd3
 8008b50:	08008be9 	.word	0x08008be9
 8008b54:	08008be9 	.word	0x08008be9
 8008b58:	08008be9 	.word	0x08008be9
 8008b5c:	08008be9 	.word	0x08008be9
 8008b60:	08008be9 	.word	0x08008be9
 8008b64:	08008be9 	.word	0x08008be9
 8008b68:	08008be9 	.word	0x08008be9
 8008b6c:	08008bf1 	.word	0x08008bf1
 8008b70:	08008be9 	.word	0x08008be9
 8008b74:	08008be9 	.word	0x08008be9
 8008b78:	08008be9 	.word	0x08008be9
 8008b7c:	08008be9 	.word	0x08008be9
 8008b80:	08008be9 	.word	0x08008be9
 8008b84:	08008be9 	.word	0x08008be9
 8008b88:	08008be9 	.word	0x08008be9
 8008b8c:	08008bf1 	.word	0x08008bf1
 8008b90:	08008be9 	.word	0x08008be9
 8008b94:	08008be9 	.word	0x08008be9
 8008b98:	08008be9 	.word	0x08008be9
 8008b9c:	08008be9 	.word	0x08008be9
 8008ba0:	08008be9 	.word	0x08008be9
 8008ba4:	08008be9 	.word	0x08008be9
 8008ba8:	08008be9 	.word	0x08008be9
 8008bac:	08008bf1 	.word	0x08008bf1
 8008bb0:	58024400 	.word	0x58024400
 8008bb4:	58024800 	.word	0x58024800
 8008bb8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008bbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008bc0:	3308      	adds	r3, #8
 8008bc2:	2101      	movs	r1, #1
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f000 ffc5 	bl	8009b54 <RCCEx_PLL2_Config>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008bd0:	e00f      	b.n	8008bf2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008bd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008bd6:	3328      	adds	r3, #40	@ 0x28
 8008bd8:	2101      	movs	r1, #1
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f001 f86c 	bl	8009cb8 <RCCEx_PLL3_Config>
 8008be0:	4603      	mov	r3, r0
 8008be2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008be6:	e004      	b.n	8008bf2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008be8:	2301      	movs	r3, #1
 8008bea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008bee:	e000      	b.n	8008bf2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8008bf0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008bf2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d10b      	bne.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008bfa:	4bc0      	ldr	r3, [pc, #768]	@ (8008efc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008bfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bfe:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8008c02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008c0a:	4abc      	ldr	r2, [pc, #752]	@ (8008efc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008c0c:	430b      	orrs	r3, r1
 8008c0e:	6553      	str	r3, [r2, #84]	@ 0x54
 8008c10:	e003      	b.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c12:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008c16:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008c1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c22:	f002 0302 	and.w	r3, r2, #2
 8008c26:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008c30:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8008c34:	460b      	mov	r3, r1
 8008c36:	4313      	orrs	r3, r2
 8008c38:	d043      	beq.n	8008cc2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008c3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c42:	2b05      	cmp	r3, #5
 8008c44:	d824      	bhi.n	8008c90 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8008c46:	a201      	add	r2, pc, #4	@ (adr r2, 8008c4c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8008c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c4c:	08008c99 	.word	0x08008c99
 8008c50:	08008c65 	.word	0x08008c65
 8008c54:	08008c7b 	.word	0x08008c7b
 8008c58:	08008c99 	.word	0x08008c99
 8008c5c:	08008c99 	.word	0x08008c99
 8008c60:	08008c99 	.word	0x08008c99
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008c64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c68:	3308      	adds	r3, #8
 8008c6a:	2101      	movs	r1, #1
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f000 ff71 	bl	8009b54 <RCCEx_PLL2_Config>
 8008c72:	4603      	mov	r3, r0
 8008c74:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008c78:	e00f      	b.n	8008c9a <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008c7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c7e:	3328      	adds	r3, #40	@ 0x28
 8008c80:	2101      	movs	r1, #1
 8008c82:	4618      	mov	r0, r3
 8008c84:	f001 f818 	bl	8009cb8 <RCCEx_PLL3_Config>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008c8e:	e004      	b.n	8008c9a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c90:	2301      	movs	r3, #1
 8008c92:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008c96:	e000      	b.n	8008c9a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8008c98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c9a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d10b      	bne.n	8008cba <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008ca2:	4b96      	ldr	r3, [pc, #600]	@ (8008efc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008ca4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ca6:	f023 0107 	bic.w	r1, r3, #7
 8008caa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008cb2:	4a92      	ldr	r2, [pc, #584]	@ (8008efc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008cb4:	430b      	orrs	r3, r1
 8008cb6:	6553      	str	r3, [r2, #84]	@ 0x54
 8008cb8:	e003      	b.n	8008cc2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008cbe:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008cc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cca:	f002 0304 	and.w	r3, r2, #4
 8008cce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008cd8:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8008cdc:	460b      	mov	r3, r1
 8008cde:	4313      	orrs	r3, r2
 8008ce0:	d043      	beq.n	8008d6a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008ce2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ce6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008cea:	2b05      	cmp	r3, #5
 8008cec:	d824      	bhi.n	8008d38 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8008cee:	a201      	add	r2, pc, #4	@ (adr r2, 8008cf4 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8008cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cf4:	08008d41 	.word	0x08008d41
 8008cf8:	08008d0d 	.word	0x08008d0d
 8008cfc:	08008d23 	.word	0x08008d23
 8008d00:	08008d41 	.word	0x08008d41
 8008d04:	08008d41 	.word	0x08008d41
 8008d08:	08008d41 	.word	0x08008d41
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008d0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d10:	3308      	adds	r3, #8
 8008d12:	2101      	movs	r1, #1
 8008d14:	4618      	mov	r0, r3
 8008d16:	f000 ff1d 	bl	8009b54 <RCCEx_PLL2_Config>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008d20:	e00f      	b.n	8008d42 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008d22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d26:	3328      	adds	r3, #40	@ 0x28
 8008d28:	2101      	movs	r1, #1
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f000 ffc4 	bl	8009cb8 <RCCEx_PLL3_Config>
 8008d30:	4603      	mov	r3, r0
 8008d32:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008d36:	e004      	b.n	8008d42 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d38:	2301      	movs	r3, #1
 8008d3a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008d3e:	e000      	b.n	8008d42 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8008d40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d42:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d10b      	bne.n	8008d62 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008d4a:	4b6c      	ldr	r3, [pc, #432]	@ (8008efc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008d4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d4e:	f023 0107 	bic.w	r1, r3, #7
 8008d52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d56:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008d5a:	4a68      	ldr	r2, [pc, #416]	@ (8008efc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008d5c:	430b      	orrs	r3, r1
 8008d5e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008d60:	e003      	b.n	8008d6a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d62:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008d66:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008d6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d72:	f002 0320 	and.w	r3, r2, #32
 8008d76:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008d80:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008d84:	460b      	mov	r3, r1
 8008d86:	4313      	orrs	r3, r2
 8008d88:	d055      	beq.n	8008e36 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008d8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008d92:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008d96:	d033      	beq.n	8008e00 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8008d98:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008d9c:	d82c      	bhi.n	8008df8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8008d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008da2:	d02f      	beq.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8008da4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008da8:	d826      	bhi.n	8008df8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8008daa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008dae:	d02b      	beq.n	8008e08 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8008db0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008db4:	d820      	bhi.n	8008df8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8008db6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008dba:	d012      	beq.n	8008de2 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8008dbc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008dc0:	d81a      	bhi.n	8008df8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d022      	beq.n	8008e0c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8008dc6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008dca:	d115      	bne.n	8008df8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008dcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008dd0:	3308      	adds	r3, #8
 8008dd2:	2100      	movs	r1, #0
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f000 febd 	bl	8009b54 <RCCEx_PLL2_Config>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008de0:	e015      	b.n	8008e0e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008de2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008de6:	3328      	adds	r3, #40	@ 0x28
 8008de8:	2102      	movs	r1, #2
 8008dea:	4618      	mov	r0, r3
 8008dec:	f000 ff64 	bl	8009cb8 <RCCEx_PLL3_Config>
 8008df0:	4603      	mov	r3, r0
 8008df2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008df6:	e00a      	b.n	8008e0e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008df8:	2301      	movs	r3, #1
 8008dfa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008dfe:	e006      	b.n	8008e0e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008e00:	bf00      	nop
 8008e02:	e004      	b.n	8008e0e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008e04:	bf00      	nop
 8008e06:	e002      	b.n	8008e0e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008e08:	bf00      	nop
 8008e0a:	e000      	b.n	8008e0e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008e0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e0e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d10b      	bne.n	8008e2e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008e16:	4b39      	ldr	r3, [pc, #228]	@ (8008efc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008e18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e1a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008e1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e22:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008e26:	4a35      	ldr	r2, [pc, #212]	@ (8008efc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008e28:	430b      	orrs	r3, r1
 8008e2a:	6553      	str	r3, [r2, #84]	@ 0x54
 8008e2c:	e003      	b.n	8008e36 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e2e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008e32:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008e36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e3e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008e42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008e46:	2300      	movs	r3, #0
 8008e48:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008e4c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008e50:	460b      	mov	r3, r1
 8008e52:	4313      	orrs	r3, r2
 8008e54:	d058      	beq.n	8008f08 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008e56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e5a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008e5e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008e62:	d033      	beq.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8008e64:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008e68:	d82c      	bhi.n	8008ec4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008e6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e6e:	d02f      	beq.n	8008ed0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8008e70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e74:	d826      	bhi.n	8008ec4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008e76:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008e7a:	d02b      	beq.n	8008ed4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8008e7c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008e80:	d820      	bhi.n	8008ec4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008e82:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e86:	d012      	beq.n	8008eae <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8008e88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e8c:	d81a      	bhi.n	8008ec4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d022      	beq.n	8008ed8 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8008e92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e96:	d115      	bne.n	8008ec4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008e98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e9c:	3308      	adds	r3, #8
 8008e9e:	2100      	movs	r1, #0
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f000 fe57 	bl	8009b54 <RCCEx_PLL2_Config>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008eac:	e015      	b.n	8008eda <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008eae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008eb2:	3328      	adds	r3, #40	@ 0x28
 8008eb4:	2102      	movs	r1, #2
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f000 fefe 	bl	8009cb8 <RCCEx_PLL3_Config>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008ec2:	e00a      	b.n	8008eda <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008eca:	e006      	b.n	8008eda <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008ecc:	bf00      	nop
 8008ece:	e004      	b.n	8008eda <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008ed0:	bf00      	nop
 8008ed2:	e002      	b.n	8008eda <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008ed4:	bf00      	nop
 8008ed6:	e000      	b.n	8008eda <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008ed8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008eda:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d10e      	bne.n	8008f00 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008ee2:	4b06      	ldr	r3, [pc, #24]	@ (8008efc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008ee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ee6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8008eea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008eee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008ef2:	4a02      	ldr	r2, [pc, #8]	@ (8008efc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008ef4:	430b      	orrs	r3, r1
 8008ef6:	6593      	str	r3, [r2, #88]	@ 0x58
 8008ef8:	e006      	b.n	8008f08 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8008efa:	bf00      	nop
 8008efc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f00:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008f04:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008f08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f10:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008f14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008f18:	2300      	movs	r3, #0
 8008f1a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008f1e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008f22:	460b      	mov	r3, r1
 8008f24:	4313      	orrs	r3, r2
 8008f26:	d055      	beq.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008f28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f2c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008f30:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008f34:	d033      	beq.n	8008f9e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8008f36:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008f3a:	d82c      	bhi.n	8008f96 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008f3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008f40:	d02f      	beq.n	8008fa2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8008f42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008f46:	d826      	bhi.n	8008f96 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008f48:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008f4c:	d02b      	beq.n	8008fa6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8008f4e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008f52:	d820      	bhi.n	8008f96 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008f54:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008f58:	d012      	beq.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8008f5a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008f5e:	d81a      	bhi.n	8008f96 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d022      	beq.n	8008faa <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8008f64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008f68:	d115      	bne.n	8008f96 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008f6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f6e:	3308      	adds	r3, #8
 8008f70:	2100      	movs	r1, #0
 8008f72:	4618      	mov	r0, r3
 8008f74:	f000 fdee 	bl	8009b54 <RCCEx_PLL2_Config>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008f7e:	e015      	b.n	8008fac <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008f80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f84:	3328      	adds	r3, #40	@ 0x28
 8008f86:	2102      	movs	r1, #2
 8008f88:	4618      	mov	r0, r3
 8008f8a:	f000 fe95 	bl	8009cb8 <RCCEx_PLL3_Config>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008f94:	e00a      	b.n	8008fac <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f96:	2301      	movs	r3, #1
 8008f98:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008f9c:	e006      	b.n	8008fac <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008f9e:	bf00      	nop
 8008fa0:	e004      	b.n	8008fac <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008fa2:	bf00      	nop
 8008fa4:	e002      	b.n	8008fac <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008fa6:	bf00      	nop
 8008fa8:	e000      	b.n	8008fac <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008faa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008fac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d10b      	bne.n	8008fcc <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008fb4:	4ba1      	ldr	r3, [pc, #644]	@ (800923c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008fb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fb8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008fbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fc0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008fc4:	4a9d      	ldr	r2, [pc, #628]	@ (800923c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008fc6:	430b      	orrs	r3, r1
 8008fc8:	6593      	str	r3, [r2, #88]	@ 0x58
 8008fca:	e003      	b.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fcc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008fd0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008fd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fdc:	f002 0308 	and.w	r3, r2, #8
 8008fe0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008fea:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008fee:	460b      	mov	r3, r1
 8008ff0:	4313      	orrs	r3, r2
 8008ff2:	d01e      	beq.n	8009032 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008ff4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ff8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008ffc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009000:	d10c      	bne.n	800901c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009002:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009006:	3328      	adds	r3, #40	@ 0x28
 8009008:	2102      	movs	r1, #2
 800900a:	4618      	mov	r0, r3
 800900c:	f000 fe54 	bl	8009cb8 <RCCEx_PLL3_Config>
 8009010:	4603      	mov	r3, r0
 8009012:	2b00      	cmp	r3, #0
 8009014:	d002      	beq.n	800901c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8009016:	2301      	movs	r3, #1
 8009018:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800901c:	4b87      	ldr	r3, [pc, #540]	@ (800923c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800901e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009020:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009024:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009028:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800902c:	4a83      	ldr	r2, [pc, #524]	@ (800923c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800902e:	430b      	orrs	r3, r1
 8009030:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009032:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800903a:	f002 0310 	and.w	r3, r2, #16
 800903e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009042:	2300      	movs	r3, #0
 8009044:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009048:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800904c:	460b      	mov	r3, r1
 800904e:	4313      	orrs	r3, r2
 8009050:	d01e      	beq.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009052:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009056:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800905a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800905e:	d10c      	bne.n	800907a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009060:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009064:	3328      	adds	r3, #40	@ 0x28
 8009066:	2102      	movs	r1, #2
 8009068:	4618      	mov	r0, r3
 800906a:	f000 fe25 	bl	8009cb8 <RCCEx_PLL3_Config>
 800906e:	4603      	mov	r3, r0
 8009070:	2b00      	cmp	r3, #0
 8009072:	d002      	beq.n	800907a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8009074:	2301      	movs	r3, #1
 8009076:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800907a:	4b70      	ldr	r3, [pc, #448]	@ (800923c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800907c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800907e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009082:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009086:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800908a:	4a6c      	ldr	r2, [pc, #432]	@ (800923c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800908c:	430b      	orrs	r3, r1
 800908e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009090:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009098:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800909c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80090a0:	2300      	movs	r3, #0
 80090a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80090a6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80090aa:	460b      	mov	r3, r1
 80090ac:	4313      	orrs	r3, r2
 80090ae:	d03e      	beq.n	800912e <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80090b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090b4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80090b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80090bc:	d022      	beq.n	8009104 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 80090be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80090c2:	d81b      	bhi.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d003      	beq.n	80090d0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 80090c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80090cc:	d00b      	beq.n	80090e6 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 80090ce:	e015      	b.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80090d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090d4:	3308      	adds	r3, #8
 80090d6:	2100      	movs	r1, #0
 80090d8:	4618      	mov	r0, r3
 80090da:	f000 fd3b 	bl	8009b54 <RCCEx_PLL2_Config>
 80090de:	4603      	mov	r3, r0
 80090e0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80090e4:	e00f      	b.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80090e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090ea:	3328      	adds	r3, #40	@ 0x28
 80090ec:	2102      	movs	r1, #2
 80090ee:	4618      	mov	r0, r3
 80090f0:	f000 fde2 	bl	8009cb8 <RCCEx_PLL3_Config>
 80090f4:	4603      	mov	r3, r0
 80090f6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80090fa:	e004      	b.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80090fc:	2301      	movs	r3, #1
 80090fe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009102:	e000      	b.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8009104:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009106:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800910a:	2b00      	cmp	r3, #0
 800910c:	d10b      	bne.n	8009126 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800910e:	4b4b      	ldr	r3, [pc, #300]	@ (800923c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009110:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009112:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8009116:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800911a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800911e:	4a47      	ldr	r2, [pc, #284]	@ (800923c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009120:	430b      	orrs	r3, r1
 8009122:	6593      	str	r3, [r2, #88]	@ 0x58
 8009124:	e003      	b.n	800912e <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009126:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800912a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800912e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009136:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800913a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800913c:	2300      	movs	r3, #0
 800913e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009140:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8009144:	460b      	mov	r3, r1
 8009146:	4313      	orrs	r3, r2
 8009148:	d03b      	beq.n	80091c2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800914a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800914e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009152:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009156:	d01f      	beq.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8009158:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800915c:	d818      	bhi.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800915e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009162:	d003      	beq.n	800916c <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8009164:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009168:	d007      	beq.n	800917a <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800916a:	e011      	b.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800916c:	4b33      	ldr	r3, [pc, #204]	@ (800923c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800916e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009170:	4a32      	ldr	r2, [pc, #200]	@ (800923c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009172:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009176:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009178:	e00f      	b.n	800919a <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800917a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800917e:	3328      	adds	r3, #40	@ 0x28
 8009180:	2101      	movs	r1, #1
 8009182:	4618      	mov	r0, r3
 8009184:	f000 fd98 	bl	8009cb8 <RCCEx_PLL3_Config>
 8009188:	4603      	mov	r3, r0
 800918a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800918e:	e004      	b.n	800919a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009190:	2301      	movs	r3, #1
 8009192:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009196:	e000      	b.n	800919a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8009198:	bf00      	nop
    }

    if (ret == HAL_OK)
 800919a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d10b      	bne.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80091a2:	4b26      	ldr	r3, [pc, #152]	@ (800923c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80091a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091a6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80091aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091b2:	4a22      	ldr	r2, [pc, #136]	@ (800923c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80091b4:	430b      	orrs	r3, r1
 80091b6:	6553      	str	r3, [r2, #84]	@ 0x54
 80091b8:	e003      	b.n	80091c2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091ba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80091be:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80091c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ca:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80091ce:	673b      	str	r3, [r7, #112]	@ 0x70
 80091d0:	2300      	movs	r3, #0
 80091d2:	677b      	str	r3, [r7, #116]	@ 0x74
 80091d4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80091d8:	460b      	mov	r3, r1
 80091da:	4313      	orrs	r3, r2
 80091dc:	d034      	beq.n	8009248 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80091de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d003      	beq.n	80091f0 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 80091e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80091ec:	d007      	beq.n	80091fe <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 80091ee:	e011      	b.n	8009214 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091f0:	4b12      	ldr	r3, [pc, #72]	@ (800923c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80091f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091f4:	4a11      	ldr	r2, [pc, #68]	@ (800923c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80091f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80091fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80091fc:	e00e      	b.n	800921c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80091fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009202:	3308      	adds	r3, #8
 8009204:	2102      	movs	r1, #2
 8009206:	4618      	mov	r0, r3
 8009208:	f000 fca4 	bl	8009b54 <RCCEx_PLL2_Config>
 800920c:	4603      	mov	r3, r0
 800920e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009212:	e003      	b.n	800921c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8009214:	2301      	movs	r3, #1
 8009216:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800921a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800921c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009220:	2b00      	cmp	r3, #0
 8009222:	d10d      	bne.n	8009240 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009224:	4b05      	ldr	r3, [pc, #20]	@ (800923c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009226:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009228:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800922c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009230:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009232:	4a02      	ldr	r2, [pc, #8]	@ (800923c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009234:	430b      	orrs	r3, r1
 8009236:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009238:	e006      	b.n	8009248 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800923a:	bf00      	nop
 800923c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009240:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009244:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009248:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800924c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009250:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8009254:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009256:	2300      	movs	r3, #0
 8009258:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800925a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800925e:	460b      	mov	r3, r1
 8009260:	4313      	orrs	r3, r2
 8009262:	d00c      	beq.n	800927e <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009264:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009268:	3328      	adds	r3, #40	@ 0x28
 800926a:	2102      	movs	r1, #2
 800926c:	4618      	mov	r0, r3
 800926e:	f000 fd23 	bl	8009cb8 <RCCEx_PLL3_Config>
 8009272:	4603      	mov	r3, r0
 8009274:	2b00      	cmp	r3, #0
 8009276:	d002      	beq.n	800927e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8009278:	2301      	movs	r3, #1
 800927a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800927e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009286:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800928a:	663b      	str	r3, [r7, #96]	@ 0x60
 800928c:	2300      	movs	r3, #0
 800928e:	667b      	str	r3, [r7, #100]	@ 0x64
 8009290:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8009294:	460b      	mov	r3, r1
 8009296:	4313      	orrs	r3, r2
 8009298:	d038      	beq.n	800930c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800929a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800929e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80092a6:	d018      	beq.n	80092da <HAL_RCCEx_PeriphCLKConfig+0x107e>
 80092a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80092ac:	d811      	bhi.n	80092d2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80092ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80092b2:	d014      	beq.n	80092de <HAL_RCCEx_PeriphCLKConfig+0x1082>
 80092b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80092b8:	d80b      	bhi.n	80092d2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d011      	beq.n	80092e2 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 80092be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80092c2:	d106      	bne.n	80092d2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092c4:	4bc3      	ldr	r3, [pc, #780]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80092c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092c8:	4ac2      	ldr	r2, [pc, #776]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80092ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80092ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80092d0:	e008      	b.n	80092e4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80092d2:	2301      	movs	r3, #1
 80092d4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80092d8:	e004      	b.n	80092e4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80092da:	bf00      	nop
 80092dc:	e002      	b.n	80092e4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80092de:	bf00      	nop
 80092e0:	e000      	b.n	80092e4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80092e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092e4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d10b      	bne.n	8009304 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80092ec:	4bb9      	ldr	r3, [pc, #740]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80092ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092f0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80092f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80092f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092fc:	4ab5      	ldr	r2, [pc, #724]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80092fe:	430b      	orrs	r3, r1
 8009300:	6553      	str	r3, [r2, #84]	@ 0x54
 8009302:	e003      	b.n	800930c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009304:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009308:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800930c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009314:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8009318:	65bb      	str	r3, [r7, #88]	@ 0x58
 800931a:	2300      	movs	r3, #0
 800931c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800931e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8009322:	460b      	mov	r3, r1
 8009324:	4313      	orrs	r3, r2
 8009326:	d009      	beq.n	800933c <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009328:	4baa      	ldr	r3, [pc, #680]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800932a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800932c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009330:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009334:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009336:	4aa7      	ldr	r2, [pc, #668]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009338:	430b      	orrs	r3, r1
 800933a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800933c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009344:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8009348:	653b      	str	r3, [r7, #80]	@ 0x50
 800934a:	2300      	movs	r3, #0
 800934c:	657b      	str	r3, [r7, #84]	@ 0x54
 800934e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8009352:	460b      	mov	r3, r1
 8009354:	4313      	orrs	r3, r2
 8009356:	d009      	beq.n	800936c <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009358:	4b9e      	ldr	r3, [pc, #632]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800935a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800935c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8009360:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009364:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009366:	4a9b      	ldr	r2, [pc, #620]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009368:	430b      	orrs	r3, r1
 800936a:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800936c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009374:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8009378:	64bb      	str	r3, [r7, #72]	@ 0x48
 800937a:	2300      	movs	r3, #0
 800937c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800937e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8009382:	460b      	mov	r3, r1
 8009384:	4313      	orrs	r3, r2
 8009386:	d009      	beq.n	800939c <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8009388:	4b92      	ldr	r3, [pc, #584]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800938a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800938c:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8009390:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009394:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009396:	4a8f      	ldr	r2, [pc, #572]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009398:	430b      	orrs	r3, r1
 800939a:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800939c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80093a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093a4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80093a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80093aa:	2300      	movs	r3, #0
 80093ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80093ae:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80093b2:	460b      	mov	r3, r1
 80093b4:	4313      	orrs	r3, r2
 80093b6:	d00e      	beq.n	80093d6 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80093b8:	4b86      	ldr	r3, [pc, #536]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80093ba:	691b      	ldr	r3, [r3, #16]
 80093bc:	4a85      	ldr	r2, [pc, #532]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80093be:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80093c2:	6113      	str	r3, [r2, #16]
 80093c4:	4b83      	ldr	r3, [pc, #524]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80093c6:	6919      	ldr	r1, [r3, #16]
 80093c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80093cc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80093d0:	4a80      	ldr	r2, [pc, #512]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80093d2:	430b      	orrs	r3, r1
 80093d4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80093d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80093da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093de:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80093e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80093e4:	2300      	movs	r3, #0
 80093e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80093e8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80093ec:	460b      	mov	r3, r1
 80093ee:	4313      	orrs	r3, r2
 80093f0:	d009      	beq.n	8009406 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80093f2:	4b78      	ldr	r3, [pc, #480]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80093f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80093f6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80093fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80093fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009400:	4a74      	ldr	r2, [pc, #464]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009402:	430b      	orrs	r3, r1
 8009404:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009406:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800940a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800940e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8009412:	633b      	str	r3, [r7, #48]	@ 0x30
 8009414:	2300      	movs	r3, #0
 8009416:	637b      	str	r3, [r7, #52]	@ 0x34
 8009418:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800941c:	460b      	mov	r3, r1
 800941e:	4313      	orrs	r3, r2
 8009420:	d00a      	beq.n	8009438 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009422:	4b6c      	ldr	r3, [pc, #432]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009424:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009426:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800942a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800942e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009432:	4a68      	ldr	r2, [pc, #416]	@ (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009434:	430b      	orrs	r3, r1
 8009436:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009438:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800943c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009440:	2100      	movs	r1, #0
 8009442:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009444:	f003 0301 	and.w	r3, r3, #1
 8009448:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800944a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800944e:	460b      	mov	r3, r1
 8009450:	4313      	orrs	r3, r2
 8009452:	d011      	beq.n	8009478 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009454:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009458:	3308      	adds	r3, #8
 800945a:	2100      	movs	r1, #0
 800945c:	4618      	mov	r0, r3
 800945e:	f000 fb79 	bl	8009b54 <RCCEx_PLL2_Config>
 8009462:	4603      	mov	r3, r0
 8009464:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009468:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800946c:	2b00      	cmp	r3, #0
 800946e:	d003      	beq.n	8009478 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009470:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009474:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009478:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800947c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009480:	2100      	movs	r1, #0
 8009482:	6239      	str	r1, [r7, #32]
 8009484:	f003 0302 	and.w	r3, r3, #2
 8009488:	627b      	str	r3, [r7, #36]	@ 0x24
 800948a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800948e:	460b      	mov	r3, r1
 8009490:	4313      	orrs	r3, r2
 8009492:	d011      	beq.n	80094b8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009494:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009498:	3308      	adds	r3, #8
 800949a:	2101      	movs	r1, #1
 800949c:	4618      	mov	r0, r3
 800949e:	f000 fb59 	bl	8009b54 <RCCEx_PLL2_Config>
 80094a2:	4603      	mov	r3, r0
 80094a4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80094a8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d003      	beq.n	80094b8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094b0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80094b4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80094b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c0:	2100      	movs	r1, #0
 80094c2:	61b9      	str	r1, [r7, #24]
 80094c4:	f003 0304 	and.w	r3, r3, #4
 80094c8:	61fb      	str	r3, [r7, #28]
 80094ca:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80094ce:	460b      	mov	r3, r1
 80094d0:	4313      	orrs	r3, r2
 80094d2:	d011      	beq.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80094d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094d8:	3308      	adds	r3, #8
 80094da:	2102      	movs	r1, #2
 80094dc:	4618      	mov	r0, r3
 80094de:	f000 fb39 	bl	8009b54 <RCCEx_PLL2_Config>
 80094e2:	4603      	mov	r3, r0
 80094e4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80094e8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d003      	beq.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094f0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80094f4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80094f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009500:	2100      	movs	r1, #0
 8009502:	6139      	str	r1, [r7, #16]
 8009504:	f003 0308 	and.w	r3, r3, #8
 8009508:	617b      	str	r3, [r7, #20]
 800950a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800950e:	460b      	mov	r3, r1
 8009510:	4313      	orrs	r3, r2
 8009512:	d011      	beq.n	8009538 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009514:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009518:	3328      	adds	r3, #40	@ 0x28
 800951a:	2100      	movs	r1, #0
 800951c:	4618      	mov	r0, r3
 800951e:	f000 fbcb 	bl	8009cb8 <RCCEx_PLL3_Config>
 8009522:	4603      	mov	r3, r0
 8009524:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8009528:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800952c:	2b00      	cmp	r3, #0
 800952e:	d003      	beq.n	8009538 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009530:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009534:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009538:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800953c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009540:	2100      	movs	r1, #0
 8009542:	60b9      	str	r1, [r7, #8]
 8009544:	f003 0310 	and.w	r3, r3, #16
 8009548:	60fb      	str	r3, [r7, #12]
 800954a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800954e:	460b      	mov	r3, r1
 8009550:	4313      	orrs	r3, r2
 8009552:	d011      	beq.n	8009578 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009554:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009558:	3328      	adds	r3, #40	@ 0x28
 800955a:	2101      	movs	r1, #1
 800955c:	4618      	mov	r0, r3
 800955e:	f000 fbab 	bl	8009cb8 <RCCEx_PLL3_Config>
 8009562:	4603      	mov	r3, r0
 8009564:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009568:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800956c:	2b00      	cmp	r3, #0
 800956e:	d003      	beq.n	8009578 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009570:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009574:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009578:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800957c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009580:	2100      	movs	r1, #0
 8009582:	6039      	str	r1, [r7, #0]
 8009584:	f003 0320 	and.w	r3, r3, #32
 8009588:	607b      	str	r3, [r7, #4]
 800958a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800958e:	460b      	mov	r3, r1
 8009590:	4313      	orrs	r3, r2
 8009592:	d011      	beq.n	80095b8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009594:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009598:	3328      	adds	r3, #40	@ 0x28
 800959a:	2102      	movs	r1, #2
 800959c:	4618      	mov	r0, r3
 800959e:	f000 fb8b 	bl	8009cb8 <RCCEx_PLL3_Config>
 80095a2:	4603      	mov	r3, r0
 80095a4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80095a8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d003      	beq.n	80095b8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095b0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80095b4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 80095b8:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d101      	bne.n	80095c4 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 80095c0:	2300      	movs	r3, #0
 80095c2:	e000      	b.n	80095c6 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 80095c4:	2301      	movs	r3, #1
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80095cc:	46bd      	mov	sp, r7
 80095ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80095d2:	bf00      	nop
 80095d4:	58024400 	.word	0x58024400

080095d8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80095dc:	f7fe fde2 	bl	80081a4 <HAL_RCC_GetHCLKFreq>
 80095e0:	4602      	mov	r2, r0
 80095e2:	4b06      	ldr	r3, [pc, #24]	@ (80095fc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80095e4:	6a1b      	ldr	r3, [r3, #32]
 80095e6:	091b      	lsrs	r3, r3, #4
 80095e8:	f003 0307 	and.w	r3, r3, #7
 80095ec:	4904      	ldr	r1, [pc, #16]	@ (8009600 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80095ee:	5ccb      	ldrb	r3, [r1, r3]
 80095f0:	f003 031f 	and.w	r3, r3, #31
 80095f4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	bd80      	pop	{r7, pc}
 80095fc:	58024400 	.word	0x58024400
 8009600:	08012aa0 	.word	0x08012aa0

08009604 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009604:	b480      	push	{r7}
 8009606:	b089      	sub	sp, #36	@ 0x24
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800960c:	4ba1      	ldr	r3, [pc, #644]	@ (8009894 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800960e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009610:	f003 0303 	and.w	r3, r3, #3
 8009614:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009616:	4b9f      	ldr	r3, [pc, #636]	@ (8009894 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009618:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800961a:	0b1b      	lsrs	r3, r3, #12
 800961c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009620:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009622:	4b9c      	ldr	r3, [pc, #624]	@ (8009894 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009626:	091b      	lsrs	r3, r3, #4
 8009628:	f003 0301 	and.w	r3, r3, #1
 800962c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800962e:	4b99      	ldr	r3, [pc, #612]	@ (8009894 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009630:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009632:	08db      	lsrs	r3, r3, #3
 8009634:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009638:	693a      	ldr	r2, [r7, #16]
 800963a:	fb02 f303 	mul.w	r3, r2, r3
 800963e:	ee07 3a90 	vmov	s15, r3
 8009642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009646:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	2b00      	cmp	r3, #0
 800964e:	f000 8111 	beq.w	8009874 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009652:	69bb      	ldr	r3, [r7, #24]
 8009654:	2b02      	cmp	r3, #2
 8009656:	f000 8083 	beq.w	8009760 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800965a:	69bb      	ldr	r3, [r7, #24]
 800965c:	2b02      	cmp	r3, #2
 800965e:	f200 80a1 	bhi.w	80097a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009662:	69bb      	ldr	r3, [r7, #24]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d003      	beq.n	8009670 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009668:	69bb      	ldr	r3, [r7, #24]
 800966a:	2b01      	cmp	r3, #1
 800966c:	d056      	beq.n	800971c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800966e:	e099      	b.n	80097a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009670:	4b88      	ldr	r3, [pc, #544]	@ (8009894 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f003 0320 	and.w	r3, r3, #32
 8009678:	2b00      	cmp	r3, #0
 800967a:	d02d      	beq.n	80096d8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800967c:	4b85      	ldr	r3, [pc, #532]	@ (8009894 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	08db      	lsrs	r3, r3, #3
 8009682:	f003 0303 	and.w	r3, r3, #3
 8009686:	4a84      	ldr	r2, [pc, #528]	@ (8009898 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009688:	fa22 f303 	lsr.w	r3, r2, r3
 800968c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	ee07 3a90 	vmov	s15, r3
 8009694:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009698:	697b      	ldr	r3, [r7, #20]
 800969a:	ee07 3a90 	vmov	s15, r3
 800969e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096a6:	4b7b      	ldr	r3, [pc, #492]	@ (8009894 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80096a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096ae:	ee07 3a90 	vmov	s15, r3
 80096b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80096ba:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800989c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80096be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80096ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096d2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80096d6:	e087      	b.n	80097e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80096d8:	697b      	ldr	r3, [r7, #20]
 80096da:	ee07 3a90 	vmov	s15, r3
 80096de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096e2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80098a0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80096e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096ea:	4b6a      	ldr	r3, [pc, #424]	@ (8009894 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80096ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096f2:	ee07 3a90 	vmov	s15, r3
 80096f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80096fe:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800989c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009702:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009706:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800970a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800970e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009712:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009716:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800971a:	e065      	b.n	80097e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	ee07 3a90 	vmov	s15, r3
 8009722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009726:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80098a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800972a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800972e:	4b59      	ldr	r3, [pc, #356]	@ (8009894 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009730:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009732:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009736:	ee07 3a90 	vmov	s15, r3
 800973a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800973e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009742:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800989c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009746:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800974a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800974e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009752:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800975a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800975e:	e043      	b.n	80097e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	ee07 3a90 	vmov	s15, r3
 8009766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800976a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80098a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800976e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009772:	4b48      	ldr	r3, [pc, #288]	@ (8009894 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009774:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009776:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800977a:	ee07 3a90 	vmov	s15, r3
 800977e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009782:	ed97 6a03 	vldr	s12, [r7, #12]
 8009786:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800989c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800978a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800978e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009792:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009796:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800979a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800979e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80097a2:	e021      	b.n	80097e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	ee07 3a90 	vmov	s15, r3
 80097aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097ae:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80098a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80097b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097b6:	4b37      	ldr	r3, [pc, #220]	@ (8009894 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097be:	ee07 3a90 	vmov	s15, r3
 80097c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80097ca:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800989c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80097ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80097da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80097e6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80097e8:	4b2a      	ldr	r3, [pc, #168]	@ (8009894 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097ec:	0a5b      	lsrs	r3, r3, #9
 80097ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80097f2:	ee07 3a90 	vmov	s15, r3
 80097f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80097fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009802:	edd7 6a07 	vldr	s13, [r7, #28]
 8009806:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800980a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800980e:	ee17 2a90 	vmov	r2, s15
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009816:	4b1f      	ldr	r3, [pc, #124]	@ (8009894 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800981a:	0c1b      	lsrs	r3, r3, #16
 800981c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009820:	ee07 3a90 	vmov	s15, r3
 8009824:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009828:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800982c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009830:	edd7 6a07 	vldr	s13, [r7, #28]
 8009834:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009838:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800983c:	ee17 2a90 	vmov	r2, s15
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009844:	4b13      	ldr	r3, [pc, #76]	@ (8009894 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009848:	0e1b      	lsrs	r3, r3, #24
 800984a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800984e:	ee07 3a90 	vmov	s15, r3
 8009852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009856:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800985a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800985e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009862:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009866:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800986a:	ee17 2a90 	vmov	r2, s15
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009872:	e008      	b.n	8009886 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2200      	movs	r2, #0
 8009878:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2200      	movs	r2, #0
 800987e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2200      	movs	r2, #0
 8009884:	609a      	str	r2, [r3, #8]
}
 8009886:	bf00      	nop
 8009888:	3724      	adds	r7, #36	@ 0x24
 800988a:	46bd      	mov	sp, r7
 800988c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009890:	4770      	bx	lr
 8009892:	bf00      	nop
 8009894:	58024400 	.word	0x58024400
 8009898:	03d09000 	.word	0x03d09000
 800989c:	46000000 	.word	0x46000000
 80098a0:	4c742400 	.word	0x4c742400
 80098a4:	4a742400 	.word	0x4a742400
 80098a8:	4bb71b00 	.word	0x4bb71b00

080098ac <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80098ac:	b480      	push	{r7}
 80098ae:	b089      	sub	sp, #36	@ 0x24
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80098b4:	4ba1      	ldr	r3, [pc, #644]	@ (8009b3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098b8:	f003 0303 	and.w	r3, r3, #3
 80098bc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80098be:	4b9f      	ldr	r3, [pc, #636]	@ (8009b3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098c2:	0d1b      	lsrs	r3, r3, #20
 80098c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80098c8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80098ca:	4b9c      	ldr	r3, [pc, #624]	@ (8009b3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098ce:	0a1b      	lsrs	r3, r3, #8
 80098d0:	f003 0301 	and.w	r3, r3, #1
 80098d4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80098d6:	4b99      	ldr	r3, [pc, #612]	@ (8009b3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098da:	08db      	lsrs	r3, r3, #3
 80098dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80098e0:	693a      	ldr	r2, [r7, #16]
 80098e2:	fb02 f303 	mul.w	r3, r2, r3
 80098e6:	ee07 3a90 	vmov	s15, r3
 80098ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098ee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80098f2:	697b      	ldr	r3, [r7, #20]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	f000 8111 	beq.w	8009b1c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80098fa:	69bb      	ldr	r3, [r7, #24]
 80098fc:	2b02      	cmp	r3, #2
 80098fe:	f000 8083 	beq.w	8009a08 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009902:	69bb      	ldr	r3, [r7, #24]
 8009904:	2b02      	cmp	r3, #2
 8009906:	f200 80a1 	bhi.w	8009a4c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800990a:	69bb      	ldr	r3, [r7, #24]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d003      	beq.n	8009918 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009910:	69bb      	ldr	r3, [r7, #24]
 8009912:	2b01      	cmp	r3, #1
 8009914:	d056      	beq.n	80099c4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009916:	e099      	b.n	8009a4c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009918:	4b88      	ldr	r3, [pc, #544]	@ (8009b3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f003 0320 	and.w	r3, r3, #32
 8009920:	2b00      	cmp	r3, #0
 8009922:	d02d      	beq.n	8009980 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009924:	4b85      	ldr	r3, [pc, #532]	@ (8009b3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	08db      	lsrs	r3, r3, #3
 800992a:	f003 0303 	and.w	r3, r3, #3
 800992e:	4a84      	ldr	r2, [pc, #528]	@ (8009b40 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009930:	fa22 f303 	lsr.w	r3, r2, r3
 8009934:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	ee07 3a90 	vmov	s15, r3
 800993c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009940:	697b      	ldr	r3, [r7, #20]
 8009942:	ee07 3a90 	vmov	s15, r3
 8009946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800994a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800994e:	4b7b      	ldr	r3, [pc, #492]	@ (8009b3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009956:	ee07 3a90 	vmov	s15, r3
 800995a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800995e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009962:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009b44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009966:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800996a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800996e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009972:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800997a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800997e:	e087      	b.n	8009a90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009980:	697b      	ldr	r3, [r7, #20]
 8009982:	ee07 3a90 	vmov	s15, r3
 8009986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800998a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009b48 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800998e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009992:	4b6a      	ldr	r3, [pc, #424]	@ (8009b3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800999a:	ee07 3a90 	vmov	s15, r3
 800999e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80099a6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009b44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80099aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80099b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80099c2:	e065      	b.n	8009a90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	ee07 3a90 	vmov	s15, r3
 80099ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099ce:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009b4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80099d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099d6:	4b59      	ldr	r3, [pc, #356]	@ (8009b3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80099d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099de:	ee07 3a90 	vmov	s15, r3
 80099e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80099ea:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009b44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80099ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80099fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a06:	e043      	b.n	8009a90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	ee07 3a90 	vmov	s15, r3
 8009a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a12:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009b50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009a16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a1a:	4b48      	ldr	r3, [pc, #288]	@ (8009b3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a22:	ee07 3a90 	vmov	s15, r3
 8009a26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a2e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009b44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009a32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009a3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a4a:	e021      	b.n	8009a90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	ee07 3a90 	vmov	s15, r3
 8009a52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a56:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009b4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009a5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a5e:	4b37      	ldr	r3, [pc, #220]	@ (8009b3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a66:	ee07 3a90 	vmov	s15, r3
 8009a6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a72:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009b44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009a76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009a82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a8e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009a90:	4b2a      	ldr	r3, [pc, #168]	@ (8009b3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a94:	0a5b      	lsrs	r3, r3, #9
 8009a96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a9a:	ee07 3a90 	vmov	s15, r3
 8009a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009aa2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009aa6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009aaa:	edd7 6a07 	vldr	s13, [r7, #28]
 8009aae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ab2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ab6:	ee17 2a90 	vmov	r2, s15
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009abe:	4b1f      	ldr	r3, [pc, #124]	@ (8009b3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ac2:	0c1b      	lsrs	r3, r3, #16
 8009ac4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ac8:	ee07 3a90 	vmov	s15, r3
 8009acc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ad0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009ad4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ad8:	edd7 6a07 	vldr	s13, [r7, #28]
 8009adc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ae0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ae4:	ee17 2a90 	vmov	r2, s15
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009aec:	4b13      	ldr	r3, [pc, #76]	@ (8009b3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009af0:	0e1b      	lsrs	r3, r3, #24
 8009af2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009af6:	ee07 3a90 	vmov	s15, r3
 8009afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009afe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009b02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009b06:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b12:	ee17 2a90 	vmov	r2, s15
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009b1a:	e008      	b.n	8009b2e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2200      	movs	r2, #0
 8009b26:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	609a      	str	r2, [r3, #8]
}
 8009b2e:	bf00      	nop
 8009b30:	3724      	adds	r7, #36	@ 0x24
 8009b32:	46bd      	mov	sp, r7
 8009b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b38:	4770      	bx	lr
 8009b3a:	bf00      	nop
 8009b3c:	58024400 	.word	0x58024400
 8009b40:	03d09000 	.word	0x03d09000
 8009b44:	46000000 	.word	0x46000000
 8009b48:	4c742400 	.word	0x4c742400
 8009b4c:	4a742400 	.word	0x4a742400
 8009b50:	4bb71b00 	.word	0x4bb71b00

08009b54 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b084      	sub	sp, #16
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
 8009b5c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009b62:	4b53      	ldr	r3, [pc, #332]	@ (8009cb0 <RCCEx_PLL2_Config+0x15c>)
 8009b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b66:	f003 0303 	and.w	r3, r3, #3
 8009b6a:	2b03      	cmp	r3, #3
 8009b6c:	d101      	bne.n	8009b72 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009b6e:	2301      	movs	r3, #1
 8009b70:	e099      	b.n	8009ca6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009b72:	4b4f      	ldr	r3, [pc, #316]	@ (8009cb0 <RCCEx_PLL2_Config+0x15c>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	4a4e      	ldr	r2, [pc, #312]	@ (8009cb0 <RCCEx_PLL2_Config+0x15c>)
 8009b78:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009b7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b7e:	f7f9 fc7d 	bl	800347c <HAL_GetTick>
 8009b82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009b84:	e008      	b.n	8009b98 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009b86:	f7f9 fc79 	bl	800347c <HAL_GetTick>
 8009b8a:	4602      	mov	r2, r0
 8009b8c:	68bb      	ldr	r3, [r7, #8]
 8009b8e:	1ad3      	subs	r3, r2, r3
 8009b90:	2b02      	cmp	r3, #2
 8009b92:	d901      	bls.n	8009b98 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009b94:	2303      	movs	r3, #3
 8009b96:	e086      	b.n	8009ca6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009b98:	4b45      	ldr	r3, [pc, #276]	@ (8009cb0 <RCCEx_PLL2_Config+0x15c>)
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d1f0      	bne.n	8009b86 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009ba4:	4b42      	ldr	r3, [pc, #264]	@ (8009cb0 <RCCEx_PLL2_Config+0x15c>)
 8009ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ba8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	031b      	lsls	r3, r3, #12
 8009bb2:	493f      	ldr	r1, [pc, #252]	@ (8009cb0 <RCCEx_PLL2_Config+0x15c>)
 8009bb4:	4313      	orrs	r3, r2
 8009bb6:	628b      	str	r3, [r1, #40]	@ 0x28
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	685b      	ldr	r3, [r3, #4]
 8009bbc:	3b01      	subs	r3, #1
 8009bbe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	689b      	ldr	r3, [r3, #8]
 8009bc6:	3b01      	subs	r3, #1
 8009bc8:	025b      	lsls	r3, r3, #9
 8009bca:	b29b      	uxth	r3, r3
 8009bcc:	431a      	orrs	r2, r3
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	68db      	ldr	r3, [r3, #12]
 8009bd2:	3b01      	subs	r3, #1
 8009bd4:	041b      	lsls	r3, r3, #16
 8009bd6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009bda:	431a      	orrs	r2, r3
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	691b      	ldr	r3, [r3, #16]
 8009be0:	3b01      	subs	r3, #1
 8009be2:	061b      	lsls	r3, r3, #24
 8009be4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009be8:	4931      	ldr	r1, [pc, #196]	@ (8009cb0 <RCCEx_PLL2_Config+0x15c>)
 8009bea:	4313      	orrs	r3, r2
 8009bec:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009bee:	4b30      	ldr	r3, [pc, #192]	@ (8009cb0 <RCCEx_PLL2_Config+0x15c>)
 8009bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bf2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	695b      	ldr	r3, [r3, #20]
 8009bfa:	492d      	ldr	r1, [pc, #180]	@ (8009cb0 <RCCEx_PLL2_Config+0x15c>)
 8009bfc:	4313      	orrs	r3, r2
 8009bfe:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009c00:	4b2b      	ldr	r3, [pc, #172]	@ (8009cb0 <RCCEx_PLL2_Config+0x15c>)
 8009c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c04:	f023 0220 	bic.w	r2, r3, #32
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	699b      	ldr	r3, [r3, #24]
 8009c0c:	4928      	ldr	r1, [pc, #160]	@ (8009cb0 <RCCEx_PLL2_Config+0x15c>)
 8009c0e:	4313      	orrs	r3, r2
 8009c10:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009c12:	4b27      	ldr	r3, [pc, #156]	@ (8009cb0 <RCCEx_PLL2_Config+0x15c>)
 8009c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c16:	4a26      	ldr	r2, [pc, #152]	@ (8009cb0 <RCCEx_PLL2_Config+0x15c>)
 8009c18:	f023 0310 	bic.w	r3, r3, #16
 8009c1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009c1e:	4b24      	ldr	r3, [pc, #144]	@ (8009cb0 <RCCEx_PLL2_Config+0x15c>)
 8009c20:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009c22:	4b24      	ldr	r3, [pc, #144]	@ (8009cb4 <RCCEx_PLL2_Config+0x160>)
 8009c24:	4013      	ands	r3, r2
 8009c26:	687a      	ldr	r2, [r7, #4]
 8009c28:	69d2      	ldr	r2, [r2, #28]
 8009c2a:	00d2      	lsls	r2, r2, #3
 8009c2c:	4920      	ldr	r1, [pc, #128]	@ (8009cb0 <RCCEx_PLL2_Config+0x15c>)
 8009c2e:	4313      	orrs	r3, r2
 8009c30:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009c32:	4b1f      	ldr	r3, [pc, #124]	@ (8009cb0 <RCCEx_PLL2_Config+0x15c>)
 8009c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c36:	4a1e      	ldr	r2, [pc, #120]	@ (8009cb0 <RCCEx_PLL2_Config+0x15c>)
 8009c38:	f043 0310 	orr.w	r3, r3, #16
 8009c3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d106      	bne.n	8009c52 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009c44:	4b1a      	ldr	r3, [pc, #104]	@ (8009cb0 <RCCEx_PLL2_Config+0x15c>)
 8009c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c48:	4a19      	ldr	r2, [pc, #100]	@ (8009cb0 <RCCEx_PLL2_Config+0x15c>)
 8009c4a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009c4e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009c50:	e00f      	b.n	8009c72 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	2b01      	cmp	r3, #1
 8009c56:	d106      	bne.n	8009c66 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009c58:	4b15      	ldr	r3, [pc, #84]	@ (8009cb0 <RCCEx_PLL2_Config+0x15c>)
 8009c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c5c:	4a14      	ldr	r2, [pc, #80]	@ (8009cb0 <RCCEx_PLL2_Config+0x15c>)
 8009c5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009c62:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009c64:	e005      	b.n	8009c72 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009c66:	4b12      	ldr	r3, [pc, #72]	@ (8009cb0 <RCCEx_PLL2_Config+0x15c>)
 8009c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c6a:	4a11      	ldr	r2, [pc, #68]	@ (8009cb0 <RCCEx_PLL2_Config+0x15c>)
 8009c6c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009c70:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009c72:	4b0f      	ldr	r3, [pc, #60]	@ (8009cb0 <RCCEx_PLL2_Config+0x15c>)
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	4a0e      	ldr	r2, [pc, #56]	@ (8009cb0 <RCCEx_PLL2_Config+0x15c>)
 8009c78:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009c7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009c7e:	f7f9 fbfd 	bl	800347c <HAL_GetTick>
 8009c82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009c84:	e008      	b.n	8009c98 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009c86:	f7f9 fbf9 	bl	800347c <HAL_GetTick>
 8009c8a:	4602      	mov	r2, r0
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	1ad3      	subs	r3, r2, r3
 8009c90:	2b02      	cmp	r3, #2
 8009c92:	d901      	bls.n	8009c98 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009c94:	2303      	movs	r3, #3
 8009c96:	e006      	b.n	8009ca6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009c98:	4b05      	ldr	r3, [pc, #20]	@ (8009cb0 <RCCEx_PLL2_Config+0x15c>)
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d0f0      	beq.n	8009c86 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3710      	adds	r7, #16
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}
 8009cae:	bf00      	nop
 8009cb0:	58024400 	.word	0x58024400
 8009cb4:	ffff0007 	.word	0xffff0007

08009cb8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b084      	sub	sp, #16
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
 8009cc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009cc6:	4b53      	ldr	r3, [pc, #332]	@ (8009e14 <RCCEx_PLL3_Config+0x15c>)
 8009cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cca:	f003 0303 	and.w	r3, r3, #3
 8009cce:	2b03      	cmp	r3, #3
 8009cd0:	d101      	bne.n	8009cd6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	e099      	b.n	8009e0a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009cd6:	4b4f      	ldr	r3, [pc, #316]	@ (8009e14 <RCCEx_PLL3_Config+0x15c>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	4a4e      	ldr	r2, [pc, #312]	@ (8009e14 <RCCEx_PLL3_Config+0x15c>)
 8009cdc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009ce0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ce2:	f7f9 fbcb 	bl	800347c <HAL_GetTick>
 8009ce6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009ce8:	e008      	b.n	8009cfc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009cea:	f7f9 fbc7 	bl	800347c <HAL_GetTick>
 8009cee:	4602      	mov	r2, r0
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	1ad3      	subs	r3, r2, r3
 8009cf4:	2b02      	cmp	r3, #2
 8009cf6:	d901      	bls.n	8009cfc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009cf8:	2303      	movs	r3, #3
 8009cfa:	e086      	b.n	8009e0a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009cfc:	4b45      	ldr	r3, [pc, #276]	@ (8009e14 <RCCEx_PLL3_Config+0x15c>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d1f0      	bne.n	8009cea <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009d08:	4b42      	ldr	r3, [pc, #264]	@ (8009e14 <RCCEx_PLL3_Config+0x15c>)
 8009d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d0c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	051b      	lsls	r3, r3, #20
 8009d16:	493f      	ldr	r1, [pc, #252]	@ (8009e14 <RCCEx_PLL3_Config+0x15c>)
 8009d18:	4313      	orrs	r3, r2
 8009d1a:	628b      	str	r3, [r1, #40]	@ 0x28
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	685b      	ldr	r3, [r3, #4]
 8009d20:	3b01      	subs	r3, #1
 8009d22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	689b      	ldr	r3, [r3, #8]
 8009d2a:	3b01      	subs	r3, #1
 8009d2c:	025b      	lsls	r3, r3, #9
 8009d2e:	b29b      	uxth	r3, r3
 8009d30:	431a      	orrs	r2, r3
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	68db      	ldr	r3, [r3, #12]
 8009d36:	3b01      	subs	r3, #1
 8009d38:	041b      	lsls	r3, r3, #16
 8009d3a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009d3e:	431a      	orrs	r2, r3
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	691b      	ldr	r3, [r3, #16]
 8009d44:	3b01      	subs	r3, #1
 8009d46:	061b      	lsls	r3, r3, #24
 8009d48:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009d4c:	4931      	ldr	r1, [pc, #196]	@ (8009e14 <RCCEx_PLL3_Config+0x15c>)
 8009d4e:	4313      	orrs	r3, r2
 8009d50:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009d52:	4b30      	ldr	r3, [pc, #192]	@ (8009e14 <RCCEx_PLL3_Config+0x15c>)
 8009d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d56:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	695b      	ldr	r3, [r3, #20]
 8009d5e:	492d      	ldr	r1, [pc, #180]	@ (8009e14 <RCCEx_PLL3_Config+0x15c>)
 8009d60:	4313      	orrs	r3, r2
 8009d62:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009d64:	4b2b      	ldr	r3, [pc, #172]	@ (8009e14 <RCCEx_PLL3_Config+0x15c>)
 8009d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d68:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	699b      	ldr	r3, [r3, #24]
 8009d70:	4928      	ldr	r1, [pc, #160]	@ (8009e14 <RCCEx_PLL3_Config+0x15c>)
 8009d72:	4313      	orrs	r3, r2
 8009d74:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009d76:	4b27      	ldr	r3, [pc, #156]	@ (8009e14 <RCCEx_PLL3_Config+0x15c>)
 8009d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d7a:	4a26      	ldr	r2, [pc, #152]	@ (8009e14 <RCCEx_PLL3_Config+0x15c>)
 8009d7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009d80:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009d82:	4b24      	ldr	r3, [pc, #144]	@ (8009e14 <RCCEx_PLL3_Config+0x15c>)
 8009d84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009d86:	4b24      	ldr	r3, [pc, #144]	@ (8009e18 <RCCEx_PLL3_Config+0x160>)
 8009d88:	4013      	ands	r3, r2
 8009d8a:	687a      	ldr	r2, [r7, #4]
 8009d8c:	69d2      	ldr	r2, [r2, #28]
 8009d8e:	00d2      	lsls	r2, r2, #3
 8009d90:	4920      	ldr	r1, [pc, #128]	@ (8009e14 <RCCEx_PLL3_Config+0x15c>)
 8009d92:	4313      	orrs	r3, r2
 8009d94:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009d96:	4b1f      	ldr	r3, [pc, #124]	@ (8009e14 <RCCEx_PLL3_Config+0x15c>)
 8009d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d9a:	4a1e      	ldr	r2, [pc, #120]	@ (8009e14 <RCCEx_PLL3_Config+0x15c>)
 8009d9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009da0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d106      	bne.n	8009db6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009da8:	4b1a      	ldr	r3, [pc, #104]	@ (8009e14 <RCCEx_PLL3_Config+0x15c>)
 8009daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dac:	4a19      	ldr	r2, [pc, #100]	@ (8009e14 <RCCEx_PLL3_Config+0x15c>)
 8009dae:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009db2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009db4:	e00f      	b.n	8009dd6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	2b01      	cmp	r3, #1
 8009dba:	d106      	bne.n	8009dca <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009dbc:	4b15      	ldr	r3, [pc, #84]	@ (8009e14 <RCCEx_PLL3_Config+0x15c>)
 8009dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dc0:	4a14      	ldr	r2, [pc, #80]	@ (8009e14 <RCCEx_PLL3_Config+0x15c>)
 8009dc2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009dc6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009dc8:	e005      	b.n	8009dd6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009dca:	4b12      	ldr	r3, [pc, #72]	@ (8009e14 <RCCEx_PLL3_Config+0x15c>)
 8009dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dce:	4a11      	ldr	r2, [pc, #68]	@ (8009e14 <RCCEx_PLL3_Config+0x15c>)
 8009dd0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009dd4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009dd6:	4b0f      	ldr	r3, [pc, #60]	@ (8009e14 <RCCEx_PLL3_Config+0x15c>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	4a0e      	ldr	r2, [pc, #56]	@ (8009e14 <RCCEx_PLL3_Config+0x15c>)
 8009ddc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009de0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009de2:	f7f9 fb4b 	bl	800347c <HAL_GetTick>
 8009de6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009de8:	e008      	b.n	8009dfc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009dea:	f7f9 fb47 	bl	800347c <HAL_GetTick>
 8009dee:	4602      	mov	r2, r0
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	1ad3      	subs	r3, r2, r3
 8009df4:	2b02      	cmp	r3, #2
 8009df6:	d901      	bls.n	8009dfc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009df8:	2303      	movs	r3, #3
 8009dfa:	e006      	b.n	8009e0a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009dfc:	4b05      	ldr	r3, [pc, #20]	@ (8009e14 <RCCEx_PLL3_Config+0x15c>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d0f0      	beq.n	8009dea <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3710      	adds	r7, #16
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}
 8009e12:	bf00      	nop
 8009e14:	58024400 	.word	0x58024400
 8009e18:	ffff0007 	.word	0xffff0007

08009e1c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b084      	sub	sp, #16
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d101      	bne.n	8009e2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	e10f      	b.n	800a04e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2200      	movs	r2, #0
 8009e32:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	4a87      	ldr	r2, [pc, #540]	@ (800a058 <HAL_SPI_Init+0x23c>)
 8009e3a:	4293      	cmp	r3, r2
 8009e3c:	d00f      	beq.n	8009e5e <HAL_SPI_Init+0x42>
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	4a86      	ldr	r2, [pc, #536]	@ (800a05c <HAL_SPI_Init+0x240>)
 8009e44:	4293      	cmp	r3, r2
 8009e46:	d00a      	beq.n	8009e5e <HAL_SPI_Init+0x42>
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	4a84      	ldr	r2, [pc, #528]	@ (800a060 <HAL_SPI_Init+0x244>)
 8009e4e:	4293      	cmp	r3, r2
 8009e50:	d005      	beq.n	8009e5e <HAL_SPI_Init+0x42>
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	68db      	ldr	r3, [r3, #12]
 8009e56:	2b0f      	cmp	r3, #15
 8009e58:	d901      	bls.n	8009e5e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	e0f7      	b.n	800a04e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f001 f968 	bl	800b134 <SPI_GetPacketSize>
 8009e64:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	4a7b      	ldr	r2, [pc, #492]	@ (800a058 <HAL_SPI_Init+0x23c>)
 8009e6c:	4293      	cmp	r3, r2
 8009e6e:	d00c      	beq.n	8009e8a <HAL_SPI_Init+0x6e>
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	4a79      	ldr	r2, [pc, #484]	@ (800a05c <HAL_SPI_Init+0x240>)
 8009e76:	4293      	cmp	r3, r2
 8009e78:	d007      	beq.n	8009e8a <HAL_SPI_Init+0x6e>
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	4a78      	ldr	r2, [pc, #480]	@ (800a060 <HAL_SPI_Init+0x244>)
 8009e80:	4293      	cmp	r3, r2
 8009e82:	d002      	beq.n	8009e8a <HAL_SPI_Init+0x6e>
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	2b08      	cmp	r3, #8
 8009e88:	d811      	bhi.n	8009eae <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009e8e:	4a72      	ldr	r2, [pc, #456]	@ (800a058 <HAL_SPI_Init+0x23c>)
 8009e90:	4293      	cmp	r3, r2
 8009e92:	d009      	beq.n	8009ea8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	4a70      	ldr	r2, [pc, #448]	@ (800a05c <HAL_SPI_Init+0x240>)
 8009e9a:	4293      	cmp	r3, r2
 8009e9c:	d004      	beq.n	8009ea8 <HAL_SPI_Init+0x8c>
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	4a6f      	ldr	r2, [pc, #444]	@ (800a060 <HAL_SPI_Init+0x244>)
 8009ea4:	4293      	cmp	r3, r2
 8009ea6:	d104      	bne.n	8009eb2 <HAL_SPI_Init+0x96>
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	2b10      	cmp	r3, #16
 8009eac:	d901      	bls.n	8009eb2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8009eae:	2301      	movs	r3, #1
 8009eb0:	e0cd      	b.n	800a04e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009eb8:	b2db      	uxtb	r3, r3
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d106      	bne.n	8009ecc <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f7f8 faac 	bl	8002424 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2202      	movs	r2, #2
 8009ed0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	681a      	ldr	r2, [r3, #0]
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f022 0201 	bic.w	r2, r2, #1
 8009ee2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	689b      	ldr	r3, [r3, #8]
 8009eea:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8009eee:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	699b      	ldr	r3, [r3, #24]
 8009ef4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009ef8:	d119      	bne.n	8009f2e <HAL_SPI_Init+0x112>
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	685b      	ldr	r3, [r3, #4]
 8009efe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009f02:	d103      	bne.n	8009f0c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d008      	beq.n	8009f1e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d10c      	bne.n	8009f2e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009f18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009f1c:	d107      	bne.n	8009f2e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	681a      	ldr	r2, [r3, #0]
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009f2c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	685b      	ldr	r3, [r3, #4]
 8009f32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d00f      	beq.n	8009f5a <HAL_SPI_Init+0x13e>
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	68db      	ldr	r3, [r3, #12]
 8009f3e:	2b06      	cmp	r3, #6
 8009f40:	d90b      	bls.n	8009f5a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	430a      	orrs	r2, r1
 8009f56:	601a      	str	r2, [r3, #0]
 8009f58:	e007      	b.n	8009f6a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	681a      	ldr	r2, [r3, #0]
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009f68:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	69da      	ldr	r2, [r3, #28]
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f72:	431a      	orrs	r2, r3
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	431a      	orrs	r2, r3
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f7c:	ea42 0103 	orr.w	r1, r2, r3
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	68da      	ldr	r2, [r3, #12]
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	430a      	orrs	r2, r1
 8009f8a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f94:	431a      	orrs	r2, r3
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f9a:	431a      	orrs	r2, r3
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	699b      	ldr	r3, [r3, #24]
 8009fa0:	431a      	orrs	r2, r3
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	691b      	ldr	r3, [r3, #16]
 8009fa6:	431a      	orrs	r2, r3
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	695b      	ldr	r3, [r3, #20]
 8009fac:	431a      	orrs	r2, r3
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6a1b      	ldr	r3, [r3, #32]
 8009fb2:	431a      	orrs	r2, r3
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	685b      	ldr	r3, [r3, #4]
 8009fb8:	431a      	orrs	r2, r3
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009fbe:	431a      	orrs	r2, r3
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	689b      	ldr	r3, [r3, #8]
 8009fc4:	431a      	orrs	r2, r3
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009fca:	ea42 0103 	orr.w	r1, r2, r3
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	430a      	orrs	r2, r1
 8009fd8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	685b      	ldr	r3, [r3, #4]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d113      	bne.n	800a00a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	689b      	ldr	r3, [r3, #8]
 8009fe8:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009ff4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	689b      	ldr	r3, [r3, #8]
 8009ffc:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a008:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f022 0201 	bic.w	r2, r2, #1
 800a018:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	685b      	ldr	r3, [r3, #4]
 800a01e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a022:	2b00      	cmp	r3, #0
 800a024:	d00a      	beq.n	800a03c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	68db      	ldr	r3, [r3, #12]
 800a02c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	430a      	orrs	r2, r1
 800a03a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2200      	movs	r2, #0
 800a040:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2201      	movs	r2, #1
 800a048:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800a04c:	2300      	movs	r3, #0
}
 800a04e:	4618      	mov	r0, r3
 800a050:	3710      	adds	r7, #16
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}
 800a056:	bf00      	nop
 800a058:	40013000 	.word	0x40013000
 800a05c:	40003800 	.word	0x40003800
 800a060:	40003c00 	.word	0x40003c00

0800a064 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b088      	sub	sp, #32
 800a068:	af02      	add	r7, sp, #8
 800a06a:	60f8      	str	r0, [r7, #12]
 800a06c:	60b9      	str	r1, [r7, #8]
 800a06e:	603b      	str	r3, [r7, #0]
 800a070:	4613      	mov	r3, r2
 800a072:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	3320      	adds	r3, #32
 800a07a:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a07c:	f7f9 f9fe 	bl	800347c <HAL_GetTick>
 800a080:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a088:	b2db      	uxtb	r3, r3
 800a08a:	2b01      	cmp	r3, #1
 800a08c:	d001      	beq.n	800a092 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800a08e:	2302      	movs	r3, #2
 800a090:	e1d1      	b.n	800a436 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a092:	68bb      	ldr	r3, [r7, #8]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d002      	beq.n	800a09e <HAL_SPI_Transmit+0x3a>
 800a098:	88fb      	ldrh	r3, [r7, #6]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d101      	bne.n	800a0a2 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800a09e:	2301      	movs	r3, #1
 800a0a0:	e1c9      	b.n	800a436 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a0a8:	2b01      	cmp	r3, #1
 800a0aa:	d101      	bne.n	800a0b0 <HAL_SPI_Transmit+0x4c>
 800a0ac:	2302      	movs	r3, #2
 800a0ae:	e1c2      	b.n	800a436 <HAL_SPI_Transmit+0x3d2>
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	2201      	movs	r2, #1
 800a0b4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	2203      	movs	r2, #3
 800a0bc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	68ba      	ldr	r2, [r7, #8]
 800a0cc:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	88fa      	ldrh	r2, [r7, #6]
 800a0d2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	88fa      	ldrh	r2, [r7, #6]
 800a0da:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	689b      	ldr	r3, [r3, #8]
 800a104:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800a108:	d108      	bne.n	800a11c <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	681a      	ldr	r2, [r3, #0]
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a118:	601a      	str	r2, [r3, #0]
 800a11a:	e009      	b.n	800a130 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	68db      	ldr	r3, [r3, #12]
 800a122:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800a12e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	685a      	ldr	r2, [r3, #4]
 800a136:	4b96      	ldr	r3, [pc, #600]	@ (800a390 <HAL_SPI_Transmit+0x32c>)
 800a138:	4013      	ands	r3, r2
 800a13a:	88f9      	ldrh	r1, [r7, #6]
 800a13c:	68fa      	ldr	r2, [r7, #12]
 800a13e:	6812      	ldr	r2, [r2, #0]
 800a140:	430b      	orrs	r3, r1
 800a142:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	681a      	ldr	r2, [r3, #0]
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f042 0201 	orr.w	r2, r2, #1
 800a152:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	685b      	ldr	r3, [r3, #4]
 800a158:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a15c:	d107      	bne.n	800a16e <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	681a      	ldr	r2, [r3, #0]
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a16c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	68db      	ldr	r3, [r3, #12]
 800a172:	2b0f      	cmp	r3, #15
 800a174:	d947      	bls.n	800a206 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a176:	e03f      	b.n	800a1f8 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	695b      	ldr	r3, [r3, #20]
 800a17e:	f003 0302 	and.w	r3, r3, #2
 800a182:	2b02      	cmp	r3, #2
 800a184:	d114      	bne.n	800a1b0 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	6812      	ldr	r2, [r2, #0]
 800a190:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a196:	1d1a      	adds	r2, r3, #4
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a1a2:	b29b      	uxth	r3, r3
 800a1a4:	3b01      	subs	r3, #1
 800a1a6:	b29a      	uxth	r2, r3
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a1ae:	e023      	b.n	800a1f8 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a1b0:	f7f9 f964 	bl	800347c <HAL_GetTick>
 800a1b4:	4602      	mov	r2, r0
 800a1b6:	693b      	ldr	r3, [r7, #16]
 800a1b8:	1ad3      	subs	r3, r2, r3
 800a1ba:	683a      	ldr	r2, [r7, #0]
 800a1bc:	429a      	cmp	r2, r3
 800a1be:	d803      	bhi.n	800a1c8 <HAL_SPI_Transmit+0x164>
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1c6:	d102      	bne.n	800a1ce <HAL_SPI_Transmit+0x16a>
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d114      	bne.n	800a1f8 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a1ce:	68f8      	ldr	r0, [r7, #12]
 800a1d0:	f000 fee2 	bl	800af98 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a1da:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	2201      	movs	r2, #1
 800a1e8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a1f4:	2303      	movs	r3, #3
 800a1f6:	e11e      	b.n	800a436 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a1fe:	b29b      	uxth	r3, r3
 800a200:	2b00      	cmp	r3, #0
 800a202:	d1b9      	bne.n	800a178 <HAL_SPI_Transmit+0x114>
 800a204:	e0f1      	b.n	800a3ea <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	68db      	ldr	r3, [r3, #12]
 800a20a:	2b07      	cmp	r3, #7
 800a20c:	f240 80e6 	bls.w	800a3dc <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a210:	e05d      	b.n	800a2ce <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	695b      	ldr	r3, [r3, #20]
 800a218:	f003 0302 	and.w	r3, r3, #2
 800a21c:	2b02      	cmp	r3, #2
 800a21e:	d132      	bne.n	800a286 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a226:	b29b      	uxth	r3, r3
 800a228:	2b01      	cmp	r3, #1
 800a22a:	d918      	bls.n	800a25e <HAL_SPI_Transmit+0x1fa>
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a230:	2b00      	cmp	r3, #0
 800a232:	d014      	beq.n	800a25e <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	6812      	ldr	r2, [r2, #0]
 800a23e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a244:	1d1a      	adds	r2, r3, #4
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a250:	b29b      	uxth	r3, r3
 800a252:	3b02      	subs	r3, #2
 800a254:	b29a      	uxth	r2, r3
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a25c:	e037      	b.n	800a2ce <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a262:	881a      	ldrh	r2, [r3, #0]
 800a264:	697b      	ldr	r3, [r7, #20]
 800a266:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a26c:	1c9a      	adds	r2, r3, #2
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a278:	b29b      	uxth	r3, r3
 800a27a:	3b01      	subs	r3, #1
 800a27c:	b29a      	uxth	r2, r3
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a284:	e023      	b.n	800a2ce <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a286:	f7f9 f8f9 	bl	800347c <HAL_GetTick>
 800a28a:	4602      	mov	r2, r0
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	1ad3      	subs	r3, r2, r3
 800a290:	683a      	ldr	r2, [r7, #0]
 800a292:	429a      	cmp	r2, r3
 800a294:	d803      	bhi.n	800a29e <HAL_SPI_Transmit+0x23a>
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a29c:	d102      	bne.n	800a2a4 <HAL_SPI_Transmit+0x240>
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d114      	bne.n	800a2ce <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a2a4:	68f8      	ldr	r0, [r7, #12]
 800a2a6:	f000 fe77 	bl	800af98 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a2b0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	2201      	movs	r2, #1
 800a2be:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a2ca:	2303      	movs	r3, #3
 800a2cc:	e0b3      	b.n	800a436 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a2d4:	b29b      	uxth	r3, r3
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d19b      	bne.n	800a212 <HAL_SPI_Transmit+0x1ae>
 800a2da:	e086      	b.n	800a3ea <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	695b      	ldr	r3, [r3, #20]
 800a2e2:	f003 0302 	and.w	r3, r3, #2
 800a2e6:	2b02      	cmp	r3, #2
 800a2e8:	d154      	bne.n	800a394 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a2f0:	b29b      	uxth	r3, r3
 800a2f2:	2b03      	cmp	r3, #3
 800a2f4:	d918      	bls.n	800a328 <HAL_SPI_Transmit+0x2c4>
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a2fa:	2b40      	cmp	r3, #64	@ 0x40
 800a2fc:	d914      	bls.n	800a328 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	6812      	ldr	r2, [r2, #0]
 800a308:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a30e:	1d1a      	adds	r2, r3, #4
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a31a:	b29b      	uxth	r3, r3
 800a31c:	3b04      	subs	r3, #4
 800a31e:	b29a      	uxth	r2, r3
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a326:	e059      	b.n	800a3dc <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a32e:	b29b      	uxth	r3, r3
 800a330:	2b01      	cmp	r3, #1
 800a332:	d917      	bls.n	800a364 <HAL_SPI_Transmit+0x300>
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d013      	beq.n	800a364 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a340:	881a      	ldrh	r2, [r3, #0]
 800a342:	697b      	ldr	r3, [r7, #20]
 800a344:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a34a:	1c9a      	adds	r2, r3, #2
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a356:	b29b      	uxth	r3, r3
 800a358:	3b02      	subs	r3, #2
 800a35a:	b29a      	uxth	r2, r3
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a362:	e03b      	b.n	800a3dc <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	3320      	adds	r3, #32
 800a36e:	7812      	ldrb	r2, [r2, #0]
 800a370:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a376:	1c5a      	adds	r2, r3, #1
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a382:	b29b      	uxth	r3, r3
 800a384:	3b01      	subs	r3, #1
 800a386:	b29a      	uxth	r2, r3
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a38e:	e025      	b.n	800a3dc <HAL_SPI_Transmit+0x378>
 800a390:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a394:	f7f9 f872 	bl	800347c <HAL_GetTick>
 800a398:	4602      	mov	r2, r0
 800a39a:	693b      	ldr	r3, [r7, #16]
 800a39c:	1ad3      	subs	r3, r2, r3
 800a39e:	683a      	ldr	r2, [r7, #0]
 800a3a0:	429a      	cmp	r2, r3
 800a3a2:	d803      	bhi.n	800a3ac <HAL_SPI_Transmit+0x348>
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3aa:	d102      	bne.n	800a3b2 <HAL_SPI_Transmit+0x34e>
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d114      	bne.n	800a3dc <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a3b2:	68f8      	ldr	r0, [r7, #12]
 800a3b4:	f000 fdf0 	bl	800af98 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a3be:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	2201      	movs	r2, #1
 800a3cc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a3d8:	2303      	movs	r3, #3
 800a3da:	e02c      	b.n	800a436 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a3e2:	b29b      	uxth	r3, r3
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	f47f af79 	bne.w	800a2dc <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800a3ea:	693b      	ldr	r3, [r7, #16]
 800a3ec:	9300      	str	r3, [sp, #0]
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	2108      	movs	r1, #8
 800a3f4:	68f8      	ldr	r0, [r7, #12]
 800a3f6:	f000 fe6f 	bl	800b0d8 <SPI_WaitOnFlagUntilTimeout>
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d007      	beq.n	800a410 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a406:	f043 0220 	orr.w	r2, r3, #32
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a410:	68f8      	ldr	r0, [r7, #12]
 800a412:	f000 fdc1 	bl	800af98 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	2201      	movs	r2, #1
 800a41a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	2200      	movs	r2, #0
 800a422:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d001      	beq.n	800a434 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800a430:	2301      	movs	r3, #1
 800a432:	e000      	b.n	800a436 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800a434:	2300      	movs	r3, #0
  }
}
 800a436:	4618      	mov	r0, r3
 800a438:	3718      	adds	r7, #24
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bd80      	pop	{r7, pc}
 800a43e:	bf00      	nop

0800a440 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b088      	sub	sp, #32
 800a444:	af00      	add	r7, sp, #0
 800a446:	60f8      	str	r0, [r7, #12]
 800a448:	60b9      	str	r1, [r7, #8]
 800a44a:	603b      	str	r3, [r7, #0]
 800a44c:	4613      	mov	r3, r2
 800a44e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a454:	095b      	lsrs	r3, r3, #5
 800a456:	b29b      	uxth	r3, r3
 800a458:	3301      	adds	r3, #1
 800a45a:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	3330      	adds	r3, #48	@ 0x30
 800a462:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a464:	f7f9 f80a 	bl	800347c <HAL_GetTick>
 800a468:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a470:	b2db      	uxtb	r3, r3
 800a472:	2b01      	cmp	r3, #1
 800a474:	d001      	beq.n	800a47a <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800a476:	2302      	movs	r3, #2
 800a478:	e250      	b.n	800a91c <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a47a:	68bb      	ldr	r3, [r7, #8]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d002      	beq.n	800a486 <HAL_SPI_Receive+0x46>
 800a480:	88fb      	ldrh	r3, [r7, #6]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d101      	bne.n	800a48a <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800a486:	2301      	movs	r3, #1
 800a488:	e248      	b.n	800a91c <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a490:	2b01      	cmp	r3, #1
 800a492:	d101      	bne.n	800a498 <HAL_SPI_Receive+0x58>
 800a494:	2302      	movs	r3, #2
 800a496:	e241      	b.n	800a91c <HAL_SPI_Receive+0x4dc>
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	2201      	movs	r2, #1
 800a49c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	2204      	movs	r2, #4
 800a4a4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	68ba      	ldr	r2, [r7, #8]
 800a4b4:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	88fa      	ldrh	r2, [r7, #6]
 800a4ba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	88fa      	ldrh	r2, [r7, #6]
 800a4c2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	2200      	movs	r2, #0
 800a4e0:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	689b      	ldr	r3, [r3, #8]
 800a4ec:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800a4f0:	d108      	bne.n	800a504 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	681a      	ldr	r2, [r3, #0]
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a500:	601a      	str	r2, [r3, #0]
 800a502:	e009      	b.n	800a518 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	68db      	ldr	r3, [r3, #12]
 800a50a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800a516:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	685a      	ldr	r2, [r3, #4]
 800a51e:	4b95      	ldr	r3, [pc, #596]	@ (800a774 <HAL_SPI_Receive+0x334>)
 800a520:	4013      	ands	r3, r2
 800a522:	88f9      	ldrh	r1, [r7, #6]
 800a524:	68fa      	ldr	r2, [r7, #12]
 800a526:	6812      	ldr	r2, [r2, #0]
 800a528:	430b      	orrs	r3, r1
 800a52a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	681a      	ldr	r2, [r3, #0]
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f042 0201 	orr.w	r2, r2, #1
 800a53a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	685b      	ldr	r3, [r3, #4]
 800a540:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a544:	d107      	bne.n	800a556 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	681a      	ldr	r2, [r3, #0]
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a554:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	68db      	ldr	r3, [r3, #12]
 800a55a:	2b0f      	cmp	r3, #15
 800a55c:	d96c      	bls.n	800a638 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800a55e:	e064      	b.n	800a62a <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	695b      	ldr	r3, [r3, #20]
 800a566:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	695b      	ldr	r3, [r3, #20]
 800a56e:	f003 0301 	and.w	r3, r3, #1
 800a572:	2b01      	cmp	r3, #1
 800a574:	d114      	bne.n	800a5a0 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	681a      	ldr	r2, [r3, #0]
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a57e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a580:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a586:	1d1a      	adds	r2, r3, #4
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a592:	b29b      	uxth	r3, r3
 800a594:	3b01      	subs	r3, #1
 800a596:	b29a      	uxth	r2, r3
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a59e:	e044      	b.n	800a62a <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a5a6:	b29b      	uxth	r3, r3
 800a5a8:	8bfa      	ldrh	r2, [r7, #30]
 800a5aa:	429a      	cmp	r2, r3
 800a5ac:	d919      	bls.n	800a5e2 <HAL_SPI_Receive+0x1a2>
 800a5ae:	693b      	ldr	r3, [r7, #16]
 800a5b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d014      	beq.n	800a5e2 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	681a      	ldr	r2, [r3, #0]
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a5c0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a5c2:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a5c8:	1d1a      	adds	r2, r3, #4
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a5d4:	b29b      	uxth	r3, r3
 800a5d6:	3b01      	subs	r3, #1
 800a5d8:	b29a      	uxth	r2, r3
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a5e0:	e023      	b.n	800a62a <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a5e2:	f7f8 ff4b 	bl	800347c <HAL_GetTick>
 800a5e6:	4602      	mov	r2, r0
 800a5e8:	697b      	ldr	r3, [r7, #20]
 800a5ea:	1ad3      	subs	r3, r2, r3
 800a5ec:	683a      	ldr	r2, [r7, #0]
 800a5ee:	429a      	cmp	r2, r3
 800a5f0:	d803      	bhi.n	800a5fa <HAL_SPI_Receive+0x1ba>
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5f8:	d102      	bne.n	800a600 <HAL_SPI_Receive+0x1c0>
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d114      	bne.n	800a62a <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a600:	68f8      	ldr	r0, [r7, #12]
 800a602:	f000 fcc9 	bl	800af98 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a60c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	2201      	movs	r2, #1
 800a61a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	2200      	movs	r2, #0
 800a622:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a626:	2303      	movs	r3, #3
 800a628:	e178      	b.n	800a91c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a630:	b29b      	uxth	r3, r3
 800a632:	2b00      	cmp	r3, #0
 800a634:	d194      	bne.n	800a560 <HAL_SPI_Receive+0x120>
 800a636:	e15e      	b.n	800a8f6 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	68db      	ldr	r3, [r3, #12]
 800a63c:	2b07      	cmp	r3, #7
 800a63e:	f240 8153 	bls.w	800a8e8 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800a642:	e08f      	b.n	800a764 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	695b      	ldr	r3, [r3, #20]
 800a64a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	695b      	ldr	r3, [r3, #20]
 800a652:	f003 0301 	and.w	r3, r3, #1
 800a656:	2b01      	cmp	r3, #1
 800a658:	d114      	bne.n	800a684 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a65e:	69ba      	ldr	r2, [r7, #24]
 800a660:	8812      	ldrh	r2, [r2, #0]
 800a662:	b292      	uxth	r2, r2
 800a664:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a66a:	1c9a      	adds	r2, r3, #2
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a676:	b29b      	uxth	r3, r3
 800a678:	3b01      	subs	r3, #1
 800a67a:	b29a      	uxth	r2, r3
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a682:	e06f      	b.n	800a764 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a68a:	b29b      	uxth	r3, r3
 800a68c:	8bfa      	ldrh	r2, [r7, #30]
 800a68e:	429a      	cmp	r2, r3
 800a690:	d924      	bls.n	800a6dc <HAL_SPI_Receive+0x29c>
 800a692:	693b      	ldr	r3, [r7, #16]
 800a694:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d01f      	beq.n	800a6dc <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a6a0:	69ba      	ldr	r2, [r7, #24]
 800a6a2:	8812      	ldrh	r2, [r2, #0]
 800a6a4:	b292      	uxth	r2, r2
 800a6a6:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a6ac:	1c9a      	adds	r2, r3, #2
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a6b6:	69ba      	ldr	r2, [r7, #24]
 800a6b8:	8812      	ldrh	r2, [r2, #0]
 800a6ba:	b292      	uxth	r2, r2
 800a6bc:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a6c2:	1c9a      	adds	r2, r3, #2
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a6ce:	b29b      	uxth	r3, r3
 800a6d0:	3b02      	subs	r3, #2
 800a6d2:	b29a      	uxth	r2, r3
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a6da:	e043      	b.n	800a764 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a6e2:	b29b      	uxth	r3, r3
 800a6e4:	2b01      	cmp	r3, #1
 800a6e6:	d119      	bne.n	800a71c <HAL_SPI_Receive+0x2dc>
 800a6e8:	693b      	ldr	r3, [r7, #16]
 800a6ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d014      	beq.n	800a71c <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a6f6:	69ba      	ldr	r2, [r7, #24]
 800a6f8:	8812      	ldrh	r2, [r2, #0]
 800a6fa:	b292      	uxth	r2, r2
 800a6fc:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a702:	1c9a      	adds	r2, r3, #2
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a70e:	b29b      	uxth	r3, r3
 800a710:	3b01      	subs	r3, #1
 800a712:	b29a      	uxth	r2, r3
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a71a:	e023      	b.n	800a764 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a71c:	f7f8 feae 	bl	800347c <HAL_GetTick>
 800a720:	4602      	mov	r2, r0
 800a722:	697b      	ldr	r3, [r7, #20]
 800a724:	1ad3      	subs	r3, r2, r3
 800a726:	683a      	ldr	r2, [r7, #0]
 800a728:	429a      	cmp	r2, r3
 800a72a:	d803      	bhi.n	800a734 <HAL_SPI_Receive+0x2f4>
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a732:	d102      	bne.n	800a73a <HAL_SPI_Receive+0x2fa>
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d114      	bne.n	800a764 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a73a:	68f8      	ldr	r0, [r7, #12]
 800a73c:	f000 fc2c 	bl	800af98 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a746:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	2201      	movs	r2, #1
 800a754:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	2200      	movs	r2, #0
 800a75c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a760:	2303      	movs	r3, #3
 800a762:	e0db      	b.n	800a91c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a76a:	b29b      	uxth	r3, r3
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	f47f af69 	bne.w	800a644 <HAL_SPI_Receive+0x204>
 800a772:	e0c0      	b.n	800a8f6 <HAL_SPI_Receive+0x4b6>
 800a774:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	695b      	ldr	r3, [r3, #20]
 800a77e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	695b      	ldr	r3, [r3, #20]
 800a786:	f003 0301 	and.w	r3, r3, #1
 800a78a:	2b01      	cmp	r3, #1
 800a78c:	d117      	bne.n	800a7be <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a79a:	7812      	ldrb	r2, [r2, #0]
 800a79c:	b2d2      	uxtb	r2, r2
 800a79e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a7a4:	1c5a      	adds	r2, r3, #1
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a7b0:	b29b      	uxth	r3, r3
 800a7b2:	3b01      	subs	r3, #1
 800a7b4:	b29a      	uxth	r2, r3
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a7bc:	e094      	b.n	800a8e8 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a7c4:	b29b      	uxth	r3, r3
 800a7c6:	8bfa      	ldrh	r2, [r7, #30]
 800a7c8:	429a      	cmp	r2, r3
 800a7ca:	d946      	bls.n	800a85a <HAL_SPI_Receive+0x41a>
 800a7cc:	693b      	ldr	r3, [r7, #16]
 800a7ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d041      	beq.n	800a85a <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a7e2:	7812      	ldrb	r2, [r2, #0]
 800a7e4:	b2d2      	uxtb	r2, r2
 800a7e6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a7ec:	1c5a      	adds	r2, r3, #1
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a7fe:	7812      	ldrb	r2, [r2, #0]
 800a800:	b2d2      	uxtb	r2, r2
 800a802:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a808:	1c5a      	adds	r2, r3, #1
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a81a:	7812      	ldrb	r2, [r2, #0]
 800a81c:	b2d2      	uxtb	r2, r2
 800a81e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a824:	1c5a      	adds	r2, r3, #1
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a836:	7812      	ldrb	r2, [r2, #0]
 800a838:	b2d2      	uxtb	r2, r2
 800a83a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a840:	1c5a      	adds	r2, r3, #1
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a84c:	b29b      	uxth	r3, r3
 800a84e:	3b04      	subs	r3, #4
 800a850:	b29a      	uxth	r2, r3
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a858:	e046      	b.n	800a8e8 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a860:	b29b      	uxth	r3, r3
 800a862:	2b03      	cmp	r3, #3
 800a864:	d81c      	bhi.n	800a8a0 <HAL_SPI_Receive+0x460>
 800a866:	693b      	ldr	r3, [r7, #16]
 800a868:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d017      	beq.n	800a8a0 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a87c:	7812      	ldrb	r2, [r2, #0]
 800a87e:	b2d2      	uxtb	r2, r2
 800a880:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a886:	1c5a      	adds	r2, r3, #1
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a892:	b29b      	uxth	r3, r3
 800a894:	3b01      	subs	r3, #1
 800a896:	b29a      	uxth	r2, r3
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a89e:	e023      	b.n	800a8e8 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a8a0:	f7f8 fdec 	bl	800347c <HAL_GetTick>
 800a8a4:	4602      	mov	r2, r0
 800a8a6:	697b      	ldr	r3, [r7, #20]
 800a8a8:	1ad3      	subs	r3, r2, r3
 800a8aa:	683a      	ldr	r2, [r7, #0]
 800a8ac:	429a      	cmp	r2, r3
 800a8ae:	d803      	bhi.n	800a8b8 <HAL_SPI_Receive+0x478>
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8b6:	d102      	bne.n	800a8be <HAL_SPI_Receive+0x47e>
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d114      	bne.n	800a8e8 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a8be:	68f8      	ldr	r0, [r7, #12]
 800a8c0:	f000 fb6a 	bl	800af98 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a8ca:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	2201      	movs	r2, #1
 800a8d8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	2200      	movs	r2, #0
 800a8e0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a8e4:	2303      	movs	r3, #3
 800a8e6:	e019      	b.n	800a91c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a8ee:	b29b      	uxth	r3, r3
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	f47f af41 	bne.w	800a778 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a8f6:	68f8      	ldr	r0, [r7, #12]
 800a8f8:	f000 fb4e 	bl	800af98 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	2201      	movs	r2, #1
 800a900:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	2200      	movs	r2, #0
 800a908:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a912:	2b00      	cmp	r3, #0
 800a914:	d001      	beq.n	800a91a <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800a916:	2301      	movs	r3, #1
 800a918:	e000      	b.n	800a91c <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800a91a:	2300      	movs	r3, #0
  }
}
 800a91c:	4618      	mov	r0, r3
 800a91e:	3720      	adds	r7, #32
 800a920:	46bd      	mov	sp, r7
 800a922:	bd80      	pop	{r7, pc}

0800a924 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b08e      	sub	sp, #56	@ 0x38
 800a928:	af02      	add	r7, sp, #8
 800a92a:	60f8      	str	r0, [r7, #12]
 800a92c:	60b9      	str	r1, [r7, #8]
 800a92e:	607a      	str	r2, [r7, #4]
 800a930:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	3320      	adds	r3, #32
 800a938:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	3330      	adds	r3, #48	@ 0x30
 800a940:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a946:	095b      	lsrs	r3, r3, #5
 800a948:	b29b      	uxth	r3, r3
 800a94a:	3301      	adds	r3, #1
 800a94c:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a94e:	f7f8 fd95 	bl	800347c <HAL_GetTick>
 800a952:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 800a954:	887b      	ldrh	r3, [r7, #2]
 800a956:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 800a958:	887b      	ldrh	r3, [r7, #2]
 800a95a:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a962:	b2db      	uxtb	r3, r3
 800a964:	2b01      	cmp	r3, #1
 800a966:	d001      	beq.n	800a96c <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 800a968:	2302      	movs	r3, #2
 800a96a:	e310      	b.n	800af8e <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800a96c:	68bb      	ldr	r3, [r7, #8]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d005      	beq.n	800a97e <HAL_SPI_TransmitReceive+0x5a>
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d002      	beq.n	800a97e <HAL_SPI_TransmitReceive+0x5a>
 800a978:	887b      	ldrh	r3, [r7, #2]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d101      	bne.n	800a982 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 800a97e:	2301      	movs	r3, #1
 800a980:	e305      	b.n	800af8e <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a988:	2b01      	cmp	r3, #1
 800a98a:	d101      	bne.n	800a990 <HAL_SPI_TransmitReceive+0x6c>
 800a98c:	2302      	movs	r3, #2
 800a98e:	e2fe      	b.n	800af8e <HAL_SPI_TransmitReceive+0x66a>
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	2201      	movs	r2, #1
 800a994:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	2205      	movs	r2, #5
 800a99c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	687a      	ldr	r2, [r7, #4]
 800a9ac:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	887a      	ldrh	r2, [r7, #2]
 800a9b2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	887a      	ldrh	r2, [r7, #2]
 800a9ba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	68ba      	ldr	r2, [r7, #8]
 800a9c2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	887a      	ldrh	r2, [r7, #2]
 800a9c8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	887a      	ldrh	r2, [r7, #2]
 800a9d0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	2200      	movs	r2, #0
 800a9de:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	68da      	ldr	r2, [r3, #12]
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800a9ee:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	4a70      	ldr	r2, [pc, #448]	@ (800abb8 <HAL_SPI_TransmitReceive+0x294>)
 800a9f6:	4293      	cmp	r3, r2
 800a9f8:	d009      	beq.n	800aa0e <HAL_SPI_TransmitReceive+0xea>
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	4a6f      	ldr	r2, [pc, #444]	@ (800abbc <HAL_SPI_TransmitReceive+0x298>)
 800aa00:	4293      	cmp	r3, r2
 800aa02:	d004      	beq.n	800aa0e <HAL_SPI_TransmitReceive+0xea>
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	4a6d      	ldr	r2, [pc, #436]	@ (800abc0 <HAL_SPI_TransmitReceive+0x29c>)
 800aa0a:	4293      	cmp	r3, r2
 800aa0c:	d102      	bne.n	800aa14 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800aa0e:	2310      	movs	r3, #16
 800aa10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aa12:	e001      	b.n	800aa18 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 800aa14:	2308      	movs	r3, #8
 800aa16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	685a      	ldr	r2, [r3, #4]
 800aa1e:	4b69      	ldr	r3, [pc, #420]	@ (800abc4 <HAL_SPI_TransmitReceive+0x2a0>)
 800aa20:	4013      	ands	r3, r2
 800aa22:	8879      	ldrh	r1, [r7, #2]
 800aa24:	68fa      	ldr	r2, [r7, #12]
 800aa26:	6812      	ldr	r2, [r2, #0]
 800aa28:	430b      	orrs	r3, r1
 800aa2a:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	681a      	ldr	r2, [r3, #0]
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f042 0201 	orr.w	r2, r2, #1
 800aa3a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	685b      	ldr	r3, [r3, #4]
 800aa40:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800aa44:	d107      	bne.n	800aa56 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	681a      	ldr	r2, [r3, #0]
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aa54:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	68db      	ldr	r3, [r3, #12]
 800aa5a:	2b0f      	cmp	r3, #15
 800aa5c:	f240 80a2 	bls.w	800aba4 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 800aa60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa62:	089b      	lsrs	r3, r3, #2
 800aa64:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800aa66:	e094      	b.n	800ab92 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	695b      	ldr	r3, [r3, #20]
 800aa6e:	f003 0302 	and.w	r3, r3, #2
 800aa72:	2b02      	cmp	r3, #2
 800aa74:	d120      	bne.n	800aab8 <HAL_SPI_TransmitReceive+0x194>
 800aa76:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d01d      	beq.n	800aab8 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800aa7c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800aa7e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800aa80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa82:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800aa84:	429a      	cmp	r2, r3
 800aa86:	d217      	bcs.n	800aab8 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	6812      	ldr	r2, [r2, #0]
 800aa92:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aa98:	1d1a      	adds	r2, r3, #4
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800aaa4:	b29b      	uxth	r3, r3
 800aaa6:	3b01      	subs	r3, #1
 800aaa8:	b29a      	uxth	r2, r3
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800aab6:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	695b      	ldr	r3, [r3, #20]
 800aabe:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800aac0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d065      	beq.n	800ab92 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	695b      	ldr	r3, [r3, #20]
 800aacc:	f003 0301 	and.w	r3, r3, #1
 800aad0:	2b01      	cmp	r3, #1
 800aad2:	d118      	bne.n	800ab06 <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	681a      	ldr	r2, [r3, #0]
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aadc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800aade:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aae4:	1d1a      	adds	r2, r3, #4
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800aaf0:	b29b      	uxth	r3, r3
 800aaf2:	3b01      	subs	r3, #1
 800aaf4:	b29a      	uxth	r2, r3
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ab02:	853b      	strh	r3, [r7, #40]	@ 0x28
 800ab04:	e045      	b.n	800ab92 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800ab06:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800ab08:	8bfb      	ldrh	r3, [r7, #30]
 800ab0a:	429a      	cmp	r2, r3
 800ab0c:	d21d      	bcs.n	800ab4a <HAL_SPI_TransmitReceive+0x226>
 800ab0e:	697b      	ldr	r3, [r7, #20]
 800ab10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d018      	beq.n	800ab4a <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	681a      	ldr	r2, [r3, #0]
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab20:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800ab22:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab28:	1d1a      	adds	r2, r3, #4
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ab34:	b29b      	uxth	r3, r3
 800ab36:	3b01      	subs	r3, #1
 800ab38:	b29a      	uxth	r2, r3
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ab46:	853b      	strh	r3, [r7, #40]	@ 0x28
 800ab48:	e023      	b.n	800ab92 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ab4a:	f7f8 fc97 	bl	800347c <HAL_GetTick>
 800ab4e:	4602      	mov	r2, r0
 800ab50:	69bb      	ldr	r3, [r7, #24]
 800ab52:	1ad3      	subs	r3, r2, r3
 800ab54:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ab56:	429a      	cmp	r2, r3
 800ab58:	d803      	bhi.n	800ab62 <HAL_SPI_TransmitReceive+0x23e>
 800ab5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab60:	d102      	bne.n	800ab68 <HAL_SPI_TransmitReceive+0x244>
 800ab62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d114      	bne.n	800ab92 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800ab68:	68f8      	ldr	r0, [r7, #12]
 800ab6a:	f000 fa15 	bl	800af98 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ab74:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	2201      	movs	r2, #1
 800ab82:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	2200      	movs	r2, #0
 800ab8a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800ab8e:	2303      	movs	r3, #3
 800ab90:	e1fd      	b.n	800af8e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800ab92:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	f47f af67 	bne.w	800aa68 <HAL_SPI_TransmitReceive+0x144>
 800ab9a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	f47f af63 	bne.w	800aa68 <HAL_SPI_TransmitReceive+0x144>
 800aba2:	e1ce      	b.n	800af42 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	68db      	ldr	r3, [r3, #12]
 800aba8:	2b07      	cmp	r3, #7
 800abaa:	f240 81c2 	bls.w	800af32 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800abae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abb0:	085b      	lsrs	r3, r3, #1
 800abb2:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800abb4:	e0c9      	b.n	800ad4a <HAL_SPI_TransmitReceive+0x426>
 800abb6:	bf00      	nop
 800abb8:	40013000 	.word	0x40013000
 800abbc:	40003800 	.word	0x40003800
 800abc0:	40003c00 	.word	0x40003c00
 800abc4:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	695b      	ldr	r3, [r3, #20]
 800abce:	f003 0302 	and.w	r3, r3, #2
 800abd2:	2b02      	cmp	r3, #2
 800abd4:	d11f      	bne.n	800ac16 <HAL_SPI_TransmitReceive+0x2f2>
 800abd6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d01c      	beq.n	800ac16 <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800abdc:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800abde:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800abe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abe2:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800abe4:	429a      	cmp	r2, r3
 800abe6:	d216      	bcs.n	800ac16 <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800abec:	881a      	ldrh	r2, [r3, #0]
 800abee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abf0:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800abf6:	1c9a      	adds	r2, r3, #2
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ac02:	b29b      	uxth	r3, r3
 800ac04:	3b01      	subs	r3, #1
 800ac06:	b29a      	uxth	r2, r3
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ac14:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	695b      	ldr	r3, [r3, #20]
 800ac1c:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800ac1e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	f000 8092 	beq.w	800ad4a <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	695b      	ldr	r3, [r3, #20]
 800ac2c:	f003 0301 	and.w	r3, r3, #1
 800ac30:	2b01      	cmp	r3, #1
 800ac32:	d118      	bne.n	800ac66 <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ac38:	6a3a      	ldr	r2, [r7, #32]
 800ac3a:	8812      	ldrh	r2, [r2, #0]
 800ac3c:	b292      	uxth	r2, r2
 800ac3e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ac44:	1c9a      	adds	r2, r3, #2
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ac50:	b29b      	uxth	r3, r3
 800ac52:	3b01      	subs	r3, #1
 800ac54:	b29a      	uxth	r2, r3
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ac62:	853b      	strh	r3, [r7, #40]	@ 0x28
 800ac64:	e071      	b.n	800ad4a <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800ac66:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800ac68:	8bfb      	ldrh	r3, [r7, #30]
 800ac6a:	429a      	cmp	r2, r3
 800ac6c:	d228      	bcs.n	800acc0 <HAL_SPI_TransmitReceive+0x39c>
 800ac6e:	697b      	ldr	r3, [r7, #20]
 800ac70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d023      	beq.n	800acc0 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ac7c:	6a3a      	ldr	r2, [r7, #32]
 800ac7e:	8812      	ldrh	r2, [r2, #0]
 800ac80:	b292      	uxth	r2, r2
 800ac82:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ac88:	1c9a      	adds	r2, r3, #2
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ac92:	6a3a      	ldr	r2, [r7, #32]
 800ac94:	8812      	ldrh	r2, [r2, #0]
 800ac96:	b292      	uxth	r2, r2
 800ac98:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ac9e:	1c9a      	adds	r2, r3, #2
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800acaa:	b29b      	uxth	r3, r3
 800acac:	3b02      	subs	r3, #2
 800acae:	b29a      	uxth	r2, r3
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800acbc:	853b      	strh	r3, [r7, #40]	@ 0x28
 800acbe:	e044      	b.n	800ad4a <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800acc0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800acc2:	2b01      	cmp	r3, #1
 800acc4:	d11d      	bne.n	800ad02 <HAL_SPI_TransmitReceive+0x3de>
 800acc6:	697b      	ldr	r3, [r7, #20]
 800acc8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800accc:	2b00      	cmp	r3, #0
 800acce:	d018      	beq.n	800ad02 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800acd4:	6a3a      	ldr	r2, [r7, #32]
 800acd6:	8812      	ldrh	r2, [r2, #0]
 800acd8:	b292      	uxth	r2, r2
 800acda:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ace0:	1c9a      	adds	r2, r3, #2
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800acec:	b29b      	uxth	r3, r3
 800acee:	3b01      	subs	r3, #1
 800acf0:	b29a      	uxth	r2, r3
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800acfe:	853b      	strh	r3, [r7, #40]	@ 0x28
 800ad00:	e023      	b.n	800ad4a <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ad02:	f7f8 fbbb 	bl	800347c <HAL_GetTick>
 800ad06:	4602      	mov	r2, r0
 800ad08:	69bb      	ldr	r3, [r7, #24]
 800ad0a:	1ad3      	subs	r3, r2, r3
 800ad0c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ad0e:	429a      	cmp	r2, r3
 800ad10:	d803      	bhi.n	800ad1a <HAL_SPI_TransmitReceive+0x3f6>
 800ad12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad18:	d102      	bne.n	800ad20 <HAL_SPI_TransmitReceive+0x3fc>
 800ad1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d114      	bne.n	800ad4a <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800ad20:	68f8      	ldr	r0, [r7, #12]
 800ad22:	f000 f939 	bl	800af98 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ad2c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	2201      	movs	r2, #1
 800ad3a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	2200      	movs	r2, #0
 800ad42:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800ad46:	2303      	movs	r3, #3
 800ad48:	e121      	b.n	800af8e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800ad4a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	f47f af3b 	bne.w	800abc8 <HAL_SPI_TransmitReceive+0x2a4>
 800ad52:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	f47f af37 	bne.w	800abc8 <HAL_SPI_TransmitReceive+0x2a4>
 800ad5a:	e0f2      	b.n	800af42 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	695b      	ldr	r3, [r3, #20]
 800ad62:	f003 0302 	and.w	r3, r3, #2
 800ad66:	2b02      	cmp	r3, #2
 800ad68:	d121      	bne.n	800adae <HAL_SPI_TransmitReceive+0x48a>
 800ad6a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d01e      	beq.n	800adae <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800ad70:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800ad72:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800ad74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad76:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800ad78:	429a      	cmp	r2, r3
 800ad7a:	d218      	bcs.n	800adae <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	3320      	adds	r3, #32
 800ad86:	7812      	ldrb	r2, [r2, #0]
 800ad88:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ad8e:	1c5a      	adds	r2, r3, #1
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ad9a:	b29b      	uxth	r3, r3
 800ad9c:	3b01      	subs	r3, #1
 800ad9e:	b29a      	uxth	r2, r3
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800adac:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	695b      	ldr	r3, [r3, #20]
 800adb4:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800adb6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800adb8:	2b00      	cmp	r3, #0
 800adba:	f000 80ba 	beq.w	800af32 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	695b      	ldr	r3, [r3, #20]
 800adc4:	f003 0301 	and.w	r3, r3, #1
 800adc8:	2b01      	cmp	r3, #1
 800adca:	d11b      	bne.n	800ae04 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800add8:	7812      	ldrb	r2, [r2, #0]
 800adda:	b2d2      	uxtb	r2, r2
 800addc:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ade2:	1c5a      	adds	r2, r3, #1
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800adee:	b29b      	uxth	r3, r3
 800adf0:	3b01      	subs	r3, #1
 800adf2:	b29a      	uxth	r2, r3
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ae00:	853b      	strh	r3, [r7, #40]	@ 0x28
 800ae02:	e096      	b.n	800af32 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800ae04:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800ae06:	8bfb      	ldrh	r3, [r7, #30]
 800ae08:	429a      	cmp	r2, r3
 800ae0a:	d24a      	bcs.n	800aea2 <HAL_SPI_TransmitReceive+0x57e>
 800ae0c:	697b      	ldr	r3, [r7, #20]
 800ae0e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d045      	beq.n	800aea2 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae22:	7812      	ldrb	r2, [r2, #0]
 800ae24:	b2d2      	uxtb	r2, r2
 800ae26:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae2c:	1c5a      	adds	r2, r3, #1
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae3e:	7812      	ldrb	r2, [r2, #0]
 800ae40:	b2d2      	uxtb	r2, r2
 800ae42:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae48:	1c5a      	adds	r2, r3, #1
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae5a:	7812      	ldrb	r2, [r2, #0]
 800ae5c:	b2d2      	uxtb	r2, r2
 800ae5e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae64:	1c5a      	adds	r2, r3, #1
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae76:	7812      	ldrb	r2, [r2, #0]
 800ae78:	b2d2      	uxtb	r2, r2
 800ae7a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae80:	1c5a      	adds	r2, r3, #1
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ae8c:	b29b      	uxth	r3, r3
 800ae8e:	3b04      	subs	r3, #4
 800ae90:	b29a      	uxth	r2, r3
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ae9e:	853b      	strh	r3, [r7, #40]	@ 0x28
 800aea0:	e047      	b.n	800af32 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800aea2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800aea4:	2b03      	cmp	r3, #3
 800aea6:	d820      	bhi.n	800aeea <HAL_SPI_TransmitReceive+0x5c6>
 800aea8:	697b      	ldr	r3, [r7, #20]
 800aeaa:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d01b      	beq.n	800aeea <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aebe:	7812      	ldrb	r2, [r2, #0]
 800aec0:	b2d2      	uxtb	r2, r2
 800aec2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aec8:	1c5a      	adds	r2, r3, #1
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800aed4:	b29b      	uxth	r3, r3
 800aed6:	3b01      	subs	r3, #1
 800aed8:	b29a      	uxth	r2, r3
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800aee6:	853b      	strh	r3, [r7, #40]	@ 0x28
 800aee8:	e023      	b.n	800af32 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aeea:	f7f8 fac7 	bl	800347c <HAL_GetTick>
 800aeee:	4602      	mov	r2, r0
 800aef0:	69bb      	ldr	r3, [r7, #24]
 800aef2:	1ad3      	subs	r3, r2, r3
 800aef4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800aef6:	429a      	cmp	r2, r3
 800aef8:	d803      	bhi.n	800af02 <HAL_SPI_TransmitReceive+0x5de>
 800aefa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aefc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af00:	d102      	bne.n	800af08 <HAL_SPI_TransmitReceive+0x5e4>
 800af02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af04:	2b00      	cmp	r3, #0
 800af06:	d114      	bne.n	800af32 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800af08:	68f8      	ldr	r0, [r7, #12]
 800af0a:	f000 f845 	bl	800af98 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800af14:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	2201      	movs	r2, #1
 800af22:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	2200      	movs	r2, #0
 800af2a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800af2e:	2303      	movs	r3, #3
 800af30:	e02d      	b.n	800af8e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800af32:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800af34:	2b00      	cmp	r3, #0
 800af36:	f47f af11 	bne.w	800ad5c <HAL_SPI_TransmitReceive+0x438>
 800af3a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	f47f af0d 	bne.w	800ad5c <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800af42:	69bb      	ldr	r3, [r7, #24]
 800af44:	9300      	str	r3, [sp, #0]
 800af46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af48:	2200      	movs	r2, #0
 800af4a:	2108      	movs	r1, #8
 800af4c:	68f8      	ldr	r0, [r7, #12]
 800af4e:	f000 f8c3 	bl	800b0d8 <SPI_WaitOnFlagUntilTimeout>
 800af52:	4603      	mov	r3, r0
 800af54:	2b00      	cmp	r3, #0
 800af56:	d007      	beq.n	800af68 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800af5e:	f043 0220 	orr.w	r2, r3, #32
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800af68:	68f8      	ldr	r0, [r7, #12]
 800af6a:	f000 f815 	bl	800af98 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	2201      	movs	r2, #1
 800af72:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	2200      	movs	r2, #0
 800af7a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800af84:	2b00      	cmp	r3, #0
 800af86:	d001      	beq.n	800af8c <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 800af88:	2301      	movs	r3, #1
 800af8a:	e000      	b.n	800af8e <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 800af8c:	2300      	movs	r3, #0
  }
}
 800af8e:	4618      	mov	r0, r3
 800af90:	3730      	adds	r7, #48	@ 0x30
 800af92:	46bd      	mov	sp, r7
 800af94:	bd80      	pop	{r7, pc}
 800af96:	bf00      	nop

0800af98 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800af98:	b480      	push	{r7}
 800af9a:	b085      	sub	sp, #20
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	695b      	ldr	r3, [r3, #20]
 800afa6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	699a      	ldr	r2, [r3, #24]
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	f042 0208 	orr.w	r2, r2, #8
 800afb6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	699a      	ldr	r2, [r3, #24]
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	f042 0210 	orr.w	r2, r2, #16
 800afc6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	681a      	ldr	r2, [r3, #0]
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	f022 0201 	bic.w	r2, r2, #1
 800afd6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	6919      	ldr	r1, [r3, #16]
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681a      	ldr	r2, [r3, #0]
 800afe2:	4b3c      	ldr	r3, [pc, #240]	@ (800b0d4 <SPI_CloseTransfer+0x13c>)
 800afe4:	400b      	ands	r3, r1
 800afe6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	689a      	ldr	r2, [r3, #8]
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800aff6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800affe:	b2db      	uxtb	r3, r3
 800b000:	2b04      	cmp	r3, #4
 800b002:	d014      	beq.n	800b02e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	f003 0320 	and.w	r3, r3, #32
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d00f      	beq.n	800b02e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b014:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	699a      	ldr	r2, [r3, #24]
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	f042 0220 	orr.w	r2, r2, #32
 800b02c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b034:	b2db      	uxtb	r3, r3
 800b036:	2b03      	cmp	r3, #3
 800b038:	d014      	beq.n	800b064 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b040:	2b00      	cmp	r3, #0
 800b042:	d00f      	beq.n	800b064 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b04a:	f043 0204 	orr.w	r2, r3, #4
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	699a      	ldr	r2, [r3, #24]
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b062:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d00f      	beq.n	800b08e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b074:	f043 0201 	orr.w	r2, r3, #1
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	699a      	ldr	r2, [r3, #24]
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b08c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b094:	2b00      	cmp	r3, #0
 800b096:	d00f      	beq.n	800b0b8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b09e:	f043 0208 	orr.w	r2, r3, #8
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	699a      	ldr	r2, [r3, #24]
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b0b6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800b0c8:	bf00      	nop
 800b0ca:	3714      	adds	r7, #20
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d2:	4770      	bx	lr
 800b0d4:	fffffc90 	.word	0xfffffc90

0800b0d8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b084      	sub	sp, #16
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	60f8      	str	r0, [r7, #12]
 800b0e0:	60b9      	str	r1, [r7, #8]
 800b0e2:	603b      	str	r3, [r7, #0]
 800b0e4:	4613      	mov	r3, r2
 800b0e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b0e8:	e010      	b.n	800b10c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b0ea:	f7f8 f9c7 	bl	800347c <HAL_GetTick>
 800b0ee:	4602      	mov	r2, r0
 800b0f0:	69bb      	ldr	r3, [r7, #24]
 800b0f2:	1ad3      	subs	r3, r2, r3
 800b0f4:	683a      	ldr	r2, [r7, #0]
 800b0f6:	429a      	cmp	r2, r3
 800b0f8:	d803      	bhi.n	800b102 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b100:	d102      	bne.n	800b108 <SPI_WaitOnFlagUntilTimeout+0x30>
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d101      	bne.n	800b10c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800b108:	2303      	movs	r3, #3
 800b10a:	e00f      	b.n	800b12c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	695a      	ldr	r2, [r3, #20]
 800b112:	68bb      	ldr	r3, [r7, #8]
 800b114:	4013      	ands	r3, r2
 800b116:	68ba      	ldr	r2, [r7, #8]
 800b118:	429a      	cmp	r2, r3
 800b11a:	bf0c      	ite	eq
 800b11c:	2301      	moveq	r3, #1
 800b11e:	2300      	movne	r3, #0
 800b120:	b2db      	uxtb	r3, r3
 800b122:	461a      	mov	r2, r3
 800b124:	79fb      	ldrb	r3, [r7, #7]
 800b126:	429a      	cmp	r2, r3
 800b128:	d0df      	beq.n	800b0ea <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800b12a:	2300      	movs	r3, #0
}
 800b12c:	4618      	mov	r0, r3
 800b12e:	3710      	adds	r7, #16
 800b130:	46bd      	mov	sp, r7
 800b132:	bd80      	pop	{r7, pc}

0800b134 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800b134:	b480      	push	{r7}
 800b136:	b085      	sub	sp, #20
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b140:	095b      	lsrs	r3, r3, #5
 800b142:	3301      	adds	r3, #1
 800b144:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	68db      	ldr	r3, [r3, #12]
 800b14a:	3301      	adds	r3, #1
 800b14c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b14e:	68bb      	ldr	r3, [r7, #8]
 800b150:	3307      	adds	r3, #7
 800b152:	08db      	lsrs	r3, r3, #3
 800b154:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b156:	68bb      	ldr	r3, [r7, #8]
 800b158:	68fa      	ldr	r2, [r7, #12]
 800b15a:	fb02 f303 	mul.w	r3, r2, r3
}
 800b15e:	4618      	mov	r0, r3
 800b160:	3714      	adds	r7, #20
 800b162:	46bd      	mov	sp, r7
 800b164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b168:	4770      	bx	lr

0800b16a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b16a:	b580      	push	{r7, lr}
 800b16c:	b082      	sub	sp, #8
 800b16e:	af00      	add	r7, sp, #0
 800b170:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d101      	bne.n	800b17c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b178:	2301      	movs	r3, #1
 800b17a:	e049      	b.n	800b210 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b182:	b2db      	uxtb	r3, r3
 800b184:	2b00      	cmp	r3, #0
 800b186:	d106      	bne.n	800b196 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	2200      	movs	r2, #0
 800b18c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b190:	6878      	ldr	r0, [r7, #4]
 800b192:	f7f7 fd0b 	bl	8002bac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	2202      	movs	r2, #2
 800b19a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681a      	ldr	r2, [r3, #0]
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	3304      	adds	r3, #4
 800b1a6:	4619      	mov	r1, r3
 800b1a8:	4610      	mov	r0, r2
 800b1aa:	f000 fc57 	bl	800ba5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	2201      	movs	r2, #1
 800b1b2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	2201      	movs	r2, #1
 800b1ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	2201      	movs	r2, #1
 800b1c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	2201      	movs	r2, #1
 800b1ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	2201      	movs	r2, #1
 800b1d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	2201      	movs	r2, #1
 800b1da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	2201      	movs	r2, #1
 800b1e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	2201      	movs	r2, #1
 800b1ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	2201      	movs	r2, #1
 800b1f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	2201      	movs	r2, #1
 800b1fa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2201      	movs	r2, #1
 800b202:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	2201      	movs	r2, #1
 800b20a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b20e:	2300      	movs	r3, #0
}
 800b210:	4618      	mov	r0, r3
 800b212:	3708      	adds	r7, #8
 800b214:	46bd      	mov	sp, r7
 800b216:	bd80      	pop	{r7, pc}

0800b218 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b218:	b480      	push	{r7}
 800b21a:	b085      	sub	sp, #20
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b226:	b2db      	uxtb	r3, r3
 800b228:	2b01      	cmp	r3, #1
 800b22a:	d001      	beq.n	800b230 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b22c:	2301      	movs	r3, #1
 800b22e:	e054      	b.n	800b2da <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2202      	movs	r2, #2
 800b234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	68da      	ldr	r2, [r3, #12]
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	f042 0201 	orr.w	r2, r2, #1
 800b246:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	4a26      	ldr	r2, [pc, #152]	@ (800b2e8 <HAL_TIM_Base_Start_IT+0xd0>)
 800b24e:	4293      	cmp	r3, r2
 800b250:	d022      	beq.n	800b298 <HAL_TIM_Base_Start_IT+0x80>
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b25a:	d01d      	beq.n	800b298 <HAL_TIM_Base_Start_IT+0x80>
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	4a22      	ldr	r2, [pc, #136]	@ (800b2ec <HAL_TIM_Base_Start_IT+0xd4>)
 800b262:	4293      	cmp	r3, r2
 800b264:	d018      	beq.n	800b298 <HAL_TIM_Base_Start_IT+0x80>
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	4a21      	ldr	r2, [pc, #132]	@ (800b2f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800b26c:	4293      	cmp	r3, r2
 800b26e:	d013      	beq.n	800b298 <HAL_TIM_Base_Start_IT+0x80>
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	4a1f      	ldr	r2, [pc, #124]	@ (800b2f4 <HAL_TIM_Base_Start_IT+0xdc>)
 800b276:	4293      	cmp	r3, r2
 800b278:	d00e      	beq.n	800b298 <HAL_TIM_Base_Start_IT+0x80>
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	4a1e      	ldr	r2, [pc, #120]	@ (800b2f8 <HAL_TIM_Base_Start_IT+0xe0>)
 800b280:	4293      	cmp	r3, r2
 800b282:	d009      	beq.n	800b298 <HAL_TIM_Base_Start_IT+0x80>
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	4a1c      	ldr	r2, [pc, #112]	@ (800b2fc <HAL_TIM_Base_Start_IT+0xe4>)
 800b28a:	4293      	cmp	r3, r2
 800b28c:	d004      	beq.n	800b298 <HAL_TIM_Base_Start_IT+0x80>
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	4a1b      	ldr	r2, [pc, #108]	@ (800b300 <HAL_TIM_Base_Start_IT+0xe8>)
 800b294:	4293      	cmp	r3, r2
 800b296:	d115      	bne.n	800b2c4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	689a      	ldr	r2, [r3, #8]
 800b29e:	4b19      	ldr	r3, [pc, #100]	@ (800b304 <HAL_TIM_Base_Start_IT+0xec>)
 800b2a0:	4013      	ands	r3, r2
 800b2a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	2b06      	cmp	r3, #6
 800b2a8:	d015      	beq.n	800b2d6 <HAL_TIM_Base_Start_IT+0xbe>
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b2b0:	d011      	beq.n	800b2d6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	681a      	ldr	r2, [r3, #0]
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	f042 0201 	orr.w	r2, r2, #1
 800b2c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b2c2:	e008      	b.n	800b2d6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	681a      	ldr	r2, [r3, #0]
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	f042 0201 	orr.w	r2, r2, #1
 800b2d2:	601a      	str	r2, [r3, #0]
 800b2d4:	e000      	b.n	800b2d8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b2d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b2d8:	2300      	movs	r3, #0
}
 800b2da:	4618      	mov	r0, r3
 800b2dc:	3714      	adds	r7, #20
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e4:	4770      	bx	lr
 800b2e6:	bf00      	nop
 800b2e8:	40010000 	.word	0x40010000
 800b2ec:	40000400 	.word	0x40000400
 800b2f0:	40000800 	.word	0x40000800
 800b2f4:	40000c00 	.word	0x40000c00
 800b2f8:	40010400 	.word	0x40010400
 800b2fc:	40001800 	.word	0x40001800
 800b300:	40014000 	.word	0x40014000
 800b304:	00010007 	.word	0x00010007

0800b308 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b082      	sub	sp, #8
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d101      	bne.n	800b31a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b316:	2301      	movs	r3, #1
 800b318:	e049      	b.n	800b3ae <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b320:	b2db      	uxtb	r3, r3
 800b322:	2b00      	cmp	r3, #0
 800b324:	d106      	bne.n	800b334 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	2200      	movs	r2, #0
 800b32a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b32e:	6878      	ldr	r0, [r7, #4]
 800b330:	f7f7 fbee 	bl	8002b10 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	2202      	movs	r2, #2
 800b338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681a      	ldr	r2, [r3, #0]
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	3304      	adds	r3, #4
 800b344:	4619      	mov	r1, r3
 800b346:	4610      	mov	r0, r2
 800b348:	f000 fb88 	bl	800ba5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2201      	movs	r2, #1
 800b350:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2201      	movs	r2, #1
 800b358:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2201      	movs	r2, #1
 800b360:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2201      	movs	r2, #1
 800b368:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2201      	movs	r2, #1
 800b370:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2201      	movs	r2, #1
 800b378:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2201      	movs	r2, #1
 800b380:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	2201      	movs	r2, #1
 800b388:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2201      	movs	r2, #1
 800b390:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2201      	movs	r2, #1
 800b398:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2201      	movs	r2, #1
 800b3a0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2201      	movs	r2, #1
 800b3a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b3ac:	2300      	movs	r3, #0
}
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	3708      	adds	r7, #8
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}
	...

0800b3b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b084      	sub	sp, #16
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
 800b3c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d109      	bne.n	800b3dc <HAL_TIM_PWM_Start+0x24>
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b3ce:	b2db      	uxtb	r3, r3
 800b3d0:	2b01      	cmp	r3, #1
 800b3d2:	bf14      	ite	ne
 800b3d4:	2301      	movne	r3, #1
 800b3d6:	2300      	moveq	r3, #0
 800b3d8:	b2db      	uxtb	r3, r3
 800b3da:	e03c      	b.n	800b456 <HAL_TIM_PWM_Start+0x9e>
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	2b04      	cmp	r3, #4
 800b3e0:	d109      	bne.n	800b3f6 <HAL_TIM_PWM_Start+0x3e>
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b3e8:	b2db      	uxtb	r3, r3
 800b3ea:	2b01      	cmp	r3, #1
 800b3ec:	bf14      	ite	ne
 800b3ee:	2301      	movne	r3, #1
 800b3f0:	2300      	moveq	r3, #0
 800b3f2:	b2db      	uxtb	r3, r3
 800b3f4:	e02f      	b.n	800b456 <HAL_TIM_PWM_Start+0x9e>
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	2b08      	cmp	r3, #8
 800b3fa:	d109      	bne.n	800b410 <HAL_TIM_PWM_Start+0x58>
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b402:	b2db      	uxtb	r3, r3
 800b404:	2b01      	cmp	r3, #1
 800b406:	bf14      	ite	ne
 800b408:	2301      	movne	r3, #1
 800b40a:	2300      	moveq	r3, #0
 800b40c:	b2db      	uxtb	r3, r3
 800b40e:	e022      	b.n	800b456 <HAL_TIM_PWM_Start+0x9e>
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	2b0c      	cmp	r3, #12
 800b414:	d109      	bne.n	800b42a <HAL_TIM_PWM_Start+0x72>
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b41c:	b2db      	uxtb	r3, r3
 800b41e:	2b01      	cmp	r3, #1
 800b420:	bf14      	ite	ne
 800b422:	2301      	movne	r3, #1
 800b424:	2300      	moveq	r3, #0
 800b426:	b2db      	uxtb	r3, r3
 800b428:	e015      	b.n	800b456 <HAL_TIM_PWM_Start+0x9e>
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	2b10      	cmp	r3, #16
 800b42e:	d109      	bne.n	800b444 <HAL_TIM_PWM_Start+0x8c>
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b436:	b2db      	uxtb	r3, r3
 800b438:	2b01      	cmp	r3, #1
 800b43a:	bf14      	ite	ne
 800b43c:	2301      	movne	r3, #1
 800b43e:	2300      	moveq	r3, #0
 800b440:	b2db      	uxtb	r3, r3
 800b442:	e008      	b.n	800b456 <HAL_TIM_PWM_Start+0x9e>
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b44a:	b2db      	uxtb	r3, r3
 800b44c:	2b01      	cmp	r3, #1
 800b44e:	bf14      	ite	ne
 800b450:	2301      	movne	r3, #1
 800b452:	2300      	moveq	r3, #0
 800b454:	b2db      	uxtb	r3, r3
 800b456:	2b00      	cmp	r3, #0
 800b458:	d001      	beq.n	800b45e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800b45a:	2301      	movs	r3, #1
 800b45c:	e0a1      	b.n	800b5a2 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d104      	bne.n	800b46e <HAL_TIM_PWM_Start+0xb6>
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2202      	movs	r2, #2
 800b468:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b46c:	e023      	b.n	800b4b6 <HAL_TIM_PWM_Start+0xfe>
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	2b04      	cmp	r3, #4
 800b472:	d104      	bne.n	800b47e <HAL_TIM_PWM_Start+0xc6>
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2202      	movs	r2, #2
 800b478:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b47c:	e01b      	b.n	800b4b6 <HAL_TIM_PWM_Start+0xfe>
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	2b08      	cmp	r3, #8
 800b482:	d104      	bne.n	800b48e <HAL_TIM_PWM_Start+0xd6>
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2202      	movs	r2, #2
 800b488:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b48c:	e013      	b.n	800b4b6 <HAL_TIM_PWM_Start+0xfe>
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	2b0c      	cmp	r3, #12
 800b492:	d104      	bne.n	800b49e <HAL_TIM_PWM_Start+0xe6>
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2202      	movs	r2, #2
 800b498:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b49c:	e00b      	b.n	800b4b6 <HAL_TIM_PWM_Start+0xfe>
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	2b10      	cmp	r3, #16
 800b4a2:	d104      	bne.n	800b4ae <HAL_TIM_PWM_Start+0xf6>
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2202      	movs	r2, #2
 800b4a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b4ac:	e003      	b.n	800b4b6 <HAL_TIM_PWM_Start+0xfe>
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	2202      	movs	r2, #2
 800b4b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	2201      	movs	r2, #1
 800b4bc:	6839      	ldr	r1, [r7, #0]
 800b4be:	4618      	mov	r0, r3
 800b4c0:	f000 fe48 	bl	800c154 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	4a38      	ldr	r2, [pc, #224]	@ (800b5ac <HAL_TIM_PWM_Start+0x1f4>)
 800b4ca:	4293      	cmp	r3, r2
 800b4cc:	d013      	beq.n	800b4f6 <HAL_TIM_PWM_Start+0x13e>
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	4a37      	ldr	r2, [pc, #220]	@ (800b5b0 <HAL_TIM_PWM_Start+0x1f8>)
 800b4d4:	4293      	cmp	r3, r2
 800b4d6:	d00e      	beq.n	800b4f6 <HAL_TIM_PWM_Start+0x13e>
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	4a35      	ldr	r2, [pc, #212]	@ (800b5b4 <HAL_TIM_PWM_Start+0x1fc>)
 800b4de:	4293      	cmp	r3, r2
 800b4e0:	d009      	beq.n	800b4f6 <HAL_TIM_PWM_Start+0x13e>
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	4a34      	ldr	r2, [pc, #208]	@ (800b5b8 <HAL_TIM_PWM_Start+0x200>)
 800b4e8:	4293      	cmp	r3, r2
 800b4ea:	d004      	beq.n	800b4f6 <HAL_TIM_PWM_Start+0x13e>
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	4a32      	ldr	r2, [pc, #200]	@ (800b5bc <HAL_TIM_PWM_Start+0x204>)
 800b4f2:	4293      	cmp	r3, r2
 800b4f4:	d101      	bne.n	800b4fa <HAL_TIM_PWM_Start+0x142>
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	e000      	b.n	800b4fc <HAL_TIM_PWM_Start+0x144>
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d007      	beq.n	800b510 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b50e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	4a25      	ldr	r2, [pc, #148]	@ (800b5ac <HAL_TIM_PWM_Start+0x1f4>)
 800b516:	4293      	cmp	r3, r2
 800b518:	d022      	beq.n	800b560 <HAL_TIM_PWM_Start+0x1a8>
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b522:	d01d      	beq.n	800b560 <HAL_TIM_PWM_Start+0x1a8>
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	4a25      	ldr	r2, [pc, #148]	@ (800b5c0 <HAL_TIM_PWM_Start+0x208>)
 800b52a:	4293      	cmp	r3, r2
 800b52c:	d018      	beq.n	800b560 <HAL_TIM_PWM_Start+0x1a8>
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	4a24      	ldr	r2, [pc, #144]	@ (800b5c4 <HAL_TIM_PWM_Start+0x20c>)
 800b534:	4293      	cmp	r3, r2
 800b536:	d013      	beq.n	800b560 <HAL_TIM_PWM_Start+0x1a8>
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	4a22      	ldr	r2, [pc, #136]	@ (800b5c8 <HAL_TIM_PWM_Start+0x210>)
 800b53e:	4293      	cmp	r3, r2
 800b540:	d00e      	beq.n	800b560 <HAL_TIM_PWM_Start+0x1a8>
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	4a1a      	ldr	r2, [pc, #104]	@ (800b5b0 <HAL_TIM_PWM_Start+0x1f8>)
 800b548:	4293      	cmp	r3, r2
 800b54a:	d009      	beq.n	800b560 <HAL_TIM_PWM_Start+0x1a8>
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	4a1e      	ldr	r2, [pc, #120]	@ (800b5cc <HAL_TIM_PWM_Start+0x214>)
 800b552:	4293      	cmp	r3, r2
 800b554:	d004      	beq.n	800b560 <HAL_TIM_PWM_Start+0x1a8>
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	4a16      	ldr	r2, [pc, #88]	@ (800b5b4 <HAL_TIM_PWM_Start+0x1fc>)
 800b55c:	4293      	cmp	r3, r2
 800b55e:	d115      	bne.n	800b58c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	689a      	ldr	r2, [r3, #8]
 800b566:	4b1a      	ldr	r3, [pc, #104]	@ (800b5d0 <HAL_TIM_PWM_Start+0x218>)
 800b568:	4013      	ands	r3, r2
 800b56a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	2b06      	cmp	r3, #6
 800b570:	d015      	beq.n	800b59e <HAL_TIM_PWM_Start+0x1e6>
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b578:	d011      	beq.n	800b59e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	681a      	ldr	r2, [r3, #0]
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	f042 0201 	orr.w	r2, r2, #1
 800b588:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b58a:	e008      	b.n	800b59e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	681a      	ldr	r2, [r3, #0]
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	f042 0201 	orr.w	r2, r2, #1
 800b59a:	601a      	str	r2, [r3, #0]
 800b59c:	e000      	b.n	800b5a0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b59e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b5a0:	2300      	movs	r3, #0
}
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	3710      	adds	r7, #16
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	bd80      	pop	{r7, pc}
 800b5aa:	bf00      	nop
 800b5ac:	40010000 	.word	0x40010000
 800b5b0:	40010400 	.word	0x40010400
 800b5b4:	40014000 	.word	0x40014000
 800b5b8:	40014400 	.word	0x40014400
 800b5bc:	40014800 	.word	0x40014800
 800b5c0:	40000400 	.word	0x40000400
 800b5c4:	40000800 	.word	0x40000800
 800b5c8:	40000c00 	.word	0x40000c00
 800b5cc:	40001800 	.word	0x40001800
 800b5d0:	00010007 	.word	0x00010007

0800b5d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b084      	sub	sp, #16
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	68db      	ldr	r3, [r3, #12]
 800b5e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	691b      	ldr	r3, [r3, #16]
 800b5ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b5ec:	68bb      	ldr	r3, [r7, #8]
 800b5ee:	f003 0302 	and.w	r3, r3, #2
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d020      	beq.n	800b638 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	f003 0302 	and.w	r3, r3, #2
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d01b      	beq.n	800b638 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	f06f 0202 	mvn.w	r2, #2
 800b608:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	2201      	movs	r2, #1
 800b60e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	699b      	ldr	r3, [r3, #24]
 800b616:	f003 0303 	and.w	r3, r3, #3
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d003      	beq.n	800b626 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b61e:	6878      	ldr	r0, [r7, #4]
 800b620:	f000 f9fe 	bl	800ba20 <HAL_TIM_IC_CaptureCallback>
 800b624:	e005      	b.n	800b632 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b626:	6878      	ldr	r0, [r7, #4]
 800b628:	f000 f9f0 	bl	800ba0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b62c:	6878      	ldr	r0, [r7, #4]
 800b62e:	f000 fa01 	bl	800ba34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	2200      	movs	r2, #0
 800b636:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b638:	68bb      	ldr	r3, [r7, #8]
 800b63a:	f003 0304 	and.w	r3, r3, #4
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d020      	beq.n	800b684 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	f003 0304 	and.w	r3, r3, #4
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d01b      	beq.n	800b684 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	f06f 0204 	mvn.w	r2, #4
 800b654:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	2202      	movs	r2, #2
 800b65a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	699b      	ldr	r3, [r3, #24]
 800b662:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b666:	2b00      	cmp	r3, #0
 800b668:	d003      	beq.n	800b672 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b66a:	6878      	ldr	r0, [r7, #4]
 800b66c:	f000 f9d8 	bl	800ba20 <HAL_TIM_IC_CaptureCallback>
 800b670:	e005      	b.n	800b67e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b672:	6878      	ldr	r0, [r7, #4]
 800b674:	f000 f9ca 	bl	800ba0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b678:	6878      	ldr	r0, [r7, #4]
 800b67a:	f000 f9db 	bl	800ba34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	2200      	movs	r2, #0
 800b682:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b684:	68bb      	ldr	r3, [r7, #8]
 800b686:	f003 0308 	and.w	r3, r3, #8
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d020      	beq.n	800b6d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	f003 0308 	and.w	r3, r3, #8
 800b694:	2b00      	cmp	r3, #0
 800b696:	d01b      	beq.n	800b6d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	f06f 0208 	mvn.w	r2, #8
 800b6a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	2204      	movs	r2, #4
 800b6a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	69db      	ldr	r3, [r3, #28]
 800b6ae:	f003 0303 	and.w	r3, r3, #3
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d003      	beq.n	800b6be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b6b6:	6878      	ldr	r0, [r7, #4]
 800b6b8:	f000 f9b2 	bl	800ba20 <HAL_TIM_IC_CaptureCallback>
 800b6bc:	e005      	b.n	800b6ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b6be:	6878      	ldr	r0, [r7, #4]
 800b6c0:	f000 f9a4 	bl	800ba0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b6c4:	6878      	ldr	r0, [r7, #4]
 800b6c6:	f000 f9b5 	bl	800ba34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b6d0:	68bb      	ldr	r3, [r7, #8]
 800b6d2:	f003 0310 	and.w	r3, r3, #16
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d020      	beq.n	800b71c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	f003 0310 	and.w	r3, r3, #16
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d01b      	beq.n	800b71c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	f06f 0210 	mvn.w	r2, #16
 800b6ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	2208      	movs	r2, #8
 800b6f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	69db      	ldr	r3, [r3, #28]
 800b6fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d003      	beq.n	800b70a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b702:	6878      	ldr	r0, [r7, #4]
 800b704:	f000 f98c 	bl	800ba20 <HAL_TIM_IC_CaptureCallback>
 800b708:	e005      	b.n	800b716 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	f000 f97e 	bl	800ba0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b710:	6878      	ldr	r0, [r7, #4]
 800b712:	f000 f98f 	bl	800ba34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2200      	movs	r2, #0
 800b71a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b71c:	68bb      	ldr	r3, [r7, #8]
 800b71e:	f003 0301 	and.w	r3, r3, #1
 800b722:	2b00      	cmp	r3, #0
 800b724:	d00c      	beq.n	800b740 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	f003 0301 	and.w	r3, r3, #1
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d007      	beq.n	800b740 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	f06f 0201 	mvn.w	r2, #1
 800b738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b73a:	6878      	ldr	r0, [r7, #4]
 800b73c:	f7f6 fd76 	bl	800222c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b740:	68bb      	ldr	r3, [r7, #8]
 800b742:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b746:	2b00      	cmp	r3, #0
 800b748:	d104      	bne.n	800b754 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b74a:	68bb      	ldr	r3, [r7, #8]
 800b74c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b750:	2b00      	cmp	r3, #0
 800b752:	d00c      	beq.n	800b76e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d007      	beq.n	800b76e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800b766:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b768:	6878      	ldr	r0, [r7, #4]
 800b76a:	f000 fdb1 	bl	800c2d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b76e:	68bb      	ldr	r3, [r7, #8]
 800b770:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b774:	2b00      	cmp	r3, #0
 800b776:	d00c      	beq.n	800b792 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d007      	beq.n	800b792 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b78a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b78c:	6878      	ldr	r0, [r7, #4]
 800b78e:	f000 fda9 	bl	800c2e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b792:	68bb      	ldr	r3, [r7, #8]
 800b794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d00c      	beq.n	800b7b6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d007      	beq.n	800b7b6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b7ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b7b0:	6878      	ldr	r0, [r7, #4]
 800b7b2:	f000 f949 	bl	800ba48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b7b6:	68bb      	ldr	r3, [r7, #8]
 800b7b8:	f003 0320 	and.w	r3, r3, #32
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d00c      	beq.n	800b7da <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	f003 0320 	and.w	r3, r3, #32
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d007      	beq.n	800b7da <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	f06f 0220 	mvn.w	r2, #32
 800b7d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b7d4:	6878      	ldr	r0, [r7, #4]
 800b7d6:	f000 fd71 	bl	800c2bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b7da:	bf00      	nop
 800b7dc:	3710      	adds	r7, #16
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	bd80      	pop	{r7, pc}
	...

0800b7e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b086      	sub	sp, #24
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	60f8      	str	r0, [r7, #12]
 800b7ec:	60b9      	str	r1, [r7, #8]
 800b7ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b7fa:	2b01      	cmp	r3, #1
 800b7fc:	d101      	bne.n	800b802 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b7fe:	2302      	movs	r3, #2
 800b800:	e0ff      	b.n	800ba02 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	2201      	movs	r2, #1
 800b806:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	2b14      	cmp	r3, #20
 800b80e:	f200 80f0 	bhi.w	800b9f2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b812:	a201      	add	r2, pc, #4	@ (adr r2, 800b818 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b818:	0800b86d 	.word	0x0800b86d
 800b81c:	0800b9f3 	.word	0x0800b9f3
 800b820:	0800b9f3 	.word	0x0800b9f3
 800b824:	0800b9f3 	.word	0x0800b9f3
 800b828:	0800b8ad 	.word	0x0800b8ad
 800b82c:	0800b9f3 	.word	0x0800b9f3
 800b830:	0800b9f3 	.word	0x0800b9f3
 800b834:	0800b9f3 	.word	0x0800b9f3
 800b838:	0800b8ef 	.word	0x0800b8ef
 800b83c:	0800b9f3 	.word	0x0800b9f3
 800b840:	0800b9f3 	.word	0x0800b9f3
 800b844:	0800b9f3 	.word	0x0800b9f3
 800b848:	0800b92f 	.word	0x0800b92f
 800b84c:	0800b9f3 	.word	0x0800b9f3
 800b850:	0800b9f3 	.word	0x0800b9f3
 800b854:	0800b9f3 	.word	0x0800b9f3
 800b858:	0800b971 	.word	0x0800b971
 800b85c:	0800b9f3 	.word	0x0800b9f3
 800b860:	0800b9f3 	.word	0x0800b9f3
 800b864:	0800b9f3 	.word	0x0800b9f3
 800b868:	0800b9b1 	.word	0x0800b9b1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	68b9      	ldr	r1, [r7, #8]
 800b872:	4618      	mov	r0, r3
 800b874:	f000 f998 	bl	800bba8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	699a      	ldr	r2, [r3, #24]
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	f042 0208 	orr.w	r2, r2, #8
 800b886:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	699a      	ldr	r2, [r3, #24]
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	f022 0204 	bic.w	r2, r2, #4
 800b896:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	6999      	ldr	r1, [r3, #24]
 800b89e:	68bb      	ldr	r3, [r7, #8]
 800b8a0:	691a      	ldr	r2, [r3, #16]
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	430a      	orrs	r2, r1
 800b8a8:	619a      	str	r2, [r3, #24]
      break;
 800b8aa:	e0a5      	b.n	800b9f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	68b9      	ldr	r1, [r7, #8]
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	f000 fa08 	bl	800bcc8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	699a      	ldr	r2, [r3, #24]
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b8c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	699a      	ldr	r2, [r3, #24]
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b8d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	6999      	ldr	r1, [r3, #24]
 800b8de:	68bb      	ldr	r3, [r7, #8]
 800b8e0:	691b      	ldr	r3, [r3, #16]
 800b8e2:	021a      	lsls	r2, r3, #8
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	430a      	orrs	r2, r1
 800b8ea:	619a      	str	r2, [r3, #24]
      break;
 800b8ec:	e084      	b.n	800b9f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	68b9      	ldr	r1, [r7, #8]
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	f000 fa71 	bl	800bddc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	69da      	ldr	r2, [r3, #28]
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	f042 0208 	orr.w	r2, r2, #8
 800b908:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	69da      	ldr	r2, [r3, #28]
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	f022 0204 	bic.w	r2, r2, #4
 800b918:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	69d9      	ldr	r1, [r3, #28]
 800b920:	68bb      	ldr	r3, [r7, #8]
 800b922:	691a      	ldr	r2, [r3, #16]
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	430a      	orrs	r2, r1
 800b92a:	61da      	str	r2, [r3, #28]
      break;
 800b92c:	e064      	b.n	800b9f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	68b9      	ldr	r1, [r7, #8]
 800b934:	4618      	mov	r0, r3
 800b936:	f000 fad9 	bl	800beec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	69da      	ldr	r2, [r3, #28]
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b948:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	69da      	ldr	r2, [r3, #28]
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b958:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	69d9      	ldr	r1, [r3, #28]
 800b960:	68bb      	ldr	r3, [r7, #8]
 800b962:	691b      	ldr	r3, [r3, #16]
 800b964:	021a      	lsls	r2, r3, #8
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	430a      	orrs	r2, r1
 800b96c:	61da      	str	r2, [r3, #28]
      break;
 800b96e:	e043      	b.n	800b9f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	68b9      	ldr	r1, [r7, #8]
 800b976:	4618      	mov	r0, r3
 800b978:	f000 fb22 	bl	800bfc0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	f042 0208 	orr.w	r2, r2, #8
 800b98a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	f022 0204 	bic.w	r2, r2, #4
 800b99a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b9a2:	68bb      	ldr	r3, [r7, #8]
 800b9a4:	691a      	ldr	r2, [r3, #16]
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	430a      	orrs	r2, r1
 800b9ac:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b9ae:	e023      	b.n	800b9f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	68b9      	ldr	r1, [r7, #8]
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	f000 fb66 	bl	800c088 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b9ca:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b9da:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b9e2:	68bb      	ldr	r3, [r7, #8]
 800b9e4:	691b      	ldr	r3, [r3, #16]
 800b9e6:	021a      	lsls	r2, r3, #8
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	430a      	orrs	r2, r1
 800b9ee:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b9f0:	e002      	b.n	800b9f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b9f2:	2301      	movs	r3, #1
 800b9f4:	75fb      	strb	r3, [r7, #23]
      break;
 800b9f6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ba00:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba02:	4618      	mov	r0, r3
 800ba04:	3718      	adds	r7, #24
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd80      	pop	{r7, pc}
 800ba0a:	bf00      	nop

0800ba0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ba0c:	b480      	push	{r7}
 800ba0e:	b083      	sub	sp, #12
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ba14:	bf00      	nop
 800ba16:	370c      	adds	r7, #12
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1e:	4770      	bx	lr

0800ba20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ba20:	b480      	push	{r7}
 800ba22:	b083      	sub	sp, #12
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ba28:	bf00      	nop
 800ba2a:	370c      	adds	r7, #12
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba32:	4770      	bx	lr

0800ba34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ba34:	b480      	push	{r7}
 800ba36:	b083      	sub	sp, #12
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ba3c:	bf00      	nop
 800ba3e:	370c      	adds	r7, #12
 800ba40:	46bd      	mov	sp, r7
 800ba42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba46:	4770      	bx	lr

0800ba48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ba48:	b480      	push	{r7}
 800ba4a:	b083      	sub	sp, #12
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ba50:	bf00      	nop
 800ba52:	370c      	adds	r7, #12
 800ba54:	46bd      	mov	sp, r7
 800ba56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5a:	4770      	bx	lr

0800ba5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ba5c:	b480      	push	{r7}
 800ba5e:	b085      	sub	sp, #20
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
 800ba64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	4a46      	ldr	r2, [pc, #280]	@ (800bb88 <TIM_Base_SetConfig+0x12c>)
 800ba70:	4293      	cmp	r3, r2
 800ba72:	d013      	beq.n	800ba9c <TIM_Base_SetConfig+0x40>
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ba7a:	d00f      	beq.n	800ba9c <TIM_Base_SetConfig+0x40>
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	4a43      	ldr	r2, [pc, #268]	@ (800bb8c <TIM_Base_SetConfig+0x130>)
 800ba80:	4293      	cmp	r3, r2
 800ba82:	d00b      	beq.n	800ba9c <TIM_Base_SetConfig+0x40>
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	4a42      	ldr	r2, [pc, #264]	@ (800bb90 <TIM_Base_SetConfig+0x134>)
 800ba88:	4293      	cmp	r3, r2
 800ba8a:	d007      	beq.n	800ba9c <TIM_Base_SetConfig+0x40>
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	4a41      	ldr	r2, [pc, #260]	@ (800bb94 <TIM_Base_SetConfig+0x138>)
 800ba90:	4293      	cmp	r3, r2
 800ba92:	d003      	beq.n	800ba9c <TIM_Base_SetConfig+0x40>
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	4a40      	ldr	r2, [pc, #256]	@ (800bb98 <TIM_Base_SetConfig+0x13c>)
 800ba98:	4293      	cmp	r3, r2
 800ba9a:	d108      	bne.n	800baae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800baa2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800baa4:	683b      	ldr	r3, [r7, #0]
 800baa6:	685b      	ldr	r3, [r3, #4]
 800baa8:	68fa      	ldr	r2, [r7, #12]
 800baaa:	4313      	orrs	r3, r2
 800baac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	4a35      	ldr	r2, [pc, #212]	@ (800bb88 <TIM_Base_SetConfig+0x12c>)
 800bab2:	4293      	cmp	r3, r2
 800bab4:	d01f      	beq.n	800baf6 <TIM_Base_SetConfig+0x9a>
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800babc:	d01b      	beq.n	800baf6 <TIM_Base_SetConfig+0x9a>
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	4a32      	ldr	r2, [pc, #200]	@ (800bb8c <TIM_Base_SetConfig+0x130>)
 800bac2:	4293      	cmp	r3, r2
 800bac4:	d017      	beq.n	800baf6 <TIM_Base_SetConfig+0x9a>
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	4a31      	ldr	r2, [pc, #196]	@ (800bb90 <TIM_Base_SetConfig+0x134>)
 800baca:	4293      	cmp	r3, r2
 800bacc:	d013      	beq.n	800baf6 <TIM_Base_SetConfig+0x9a>
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	4a30      	ldr	r2, [pc, #192]	@ (800bb94 <TIM_Base_SetConfig+0x138>)
 800bad2:	4293      	cmp	r3, r2
 800bad4:	d00f      	beq.n	800baf6 <TIM_Base_SetConfig+0x9a>
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	4a2f      	ldr	r2, [pc, #188]	@ (800bb98 <TIM_Base_SetConfig+0x13c>)
 800bada:	4293      	cmp	r3, r2
 800badc:	d00b      	beq.n	800baf6 <TIM_Base_SetConfig+0x9a>
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	4a2e      	ldr	r2, [pc, #184]	@ (800bb9c <TIM_Base_SetConfig+0x140>)
 800bae2:	4293      	cmp	r3, r2
 800bae4:	d007      	beq.n	800baf6 <TIM_Base_SetConfig+0x9a>
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	4a2d      	ldr	r2, [pc, #180]	@ (800bba0 <TIM_Base_SetConfig+0x144>)
 800baea:	4293      	cmp	r3, r2
 800baec:	d003      	beq.n	800baf6 <TIM_Base_SetConfig+0x9a>
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	4a2c      	ldr	r2, [pc, #176]	@ (800bba4 <TIM_Base_SetConfig+0x148>)
 800baf2:	4293      	cmp	r3, r2
 800baf4:	d108      	bne.n	800bb08 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bafc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bafe:	683b      	ldr	r3, [r7, #0]
 800bb00:	68db      	ldr	r3, [r3, #12]
 800bb02:	68fa      	ldr	r2, [r7, #12]
 800bb04:	4313      	orrs	r3, r2
 800bb06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bb0e:	683b      	ldr	r3, [r7, #0]
 800bb10:	695b      	ldr	r3, [r3, #20]
 800bb12:	4313      	orrs	r3, r2
 800bb14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	68fa      	ldr	r2, [r7, #12]
 800bb1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bb1c:	683b      	ldr	r3, [r7, #0]
 800bb1e:	689a      	ldr	r2, [r3, #8]
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bb24:	683b      	ldr	r3, [r7, #0]
 800bb26:	681a      	ldr	r2, [r3, #0]
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	4a16      	ldr	r2, [pc, #88]	@ (800bb88 <TIM_Base_SetConfig+0x12c>)
 800bb30:	4293      	cmp	r3, r2
 800bb32:	d00f      	beq.n	800bb54 <TIM_Base_SetConfig+0xf8>
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	4a18      	ldr	r2, [pc, #96]	@ (800bb98 <TIM_Base_SetConfig+0x13c>)
 800bb38:	4293      	cmp	r3, r2
 800bb3a:	d00b      	beq.n	800bb54 <TIM_Base_SetConfig+0xf8>
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	4a17      	ldr	r2, [pc, #92]	@ (800bb9c <TIM_Base_SetConfig+0x140>)
 800bb40:	4293      	cmp	r3, r2
 800bb42:	d007      	beq.n	800bb54 <TIM_Base_SetConfig+0xf8>
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	4a16      	ldr	r2, [pc, #88]	@ (800bba0 <TIM_Base_SetConfig+0x144>)
 800bb48:	4293      	cmp	r3, r2
 800bb4a:	d003      	beq.n	800bb54 <TIM_Base_SetConfig+0xf8>
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	4a15      	ldr	r2, [pc, #84]	@ (800bba4 <TIM_Base_SetConfig+0x148>)
 800bb50:	4293      	cmp	r3, r2
 800bb52:	d103      	bne.n	800bb5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	691a      	ldr	r2, [r3, #16]
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	2201      	movs	r2, #1
 800bb60:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	691b      	ldr	r3, [r3, #16]
 800bb66:	f003 0301 	and.w	r3, r3, #1
 800bb6a:	2b01      	cmp	r3, #1
 800bb6c:	d105      	bne.n	800bb7a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	691b      	ldr	r3, [r3, #16]
 800bb72:	f023 0201 	bic.w	r2, r3, #1
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	611a      	str	r2, [r3, #16]
  }
}
 800bb7a:	bf00      	nop
 800bb7c:	3714      	adds	r7, #20
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb84:	4770      	bx	lr
 800bb86:	bf00      	nop
 800bb88:	40010000 	.word	0x40010000
 800bb8c:	40000400 	.word	0x40000400
 800bb90:	40000800 	.word	0x40000800
 800bb94:	40000c00 	.word	0x40000c00
 800bb98:	40010400 	.word	0x40010400
 800bb9c:	40014000 	.word	0x40014000
 800bba0:	40014400 	.word	0x40014400
 800bba4:	40014800 	.word	0x40014800

0800bba8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bba8:	b480      	push	{r7}
 800bbaa:	b087      	sub	sp, #28
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
 800bbb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	6a1b      	ldr	r3, [r3, #32]
 800bbb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	6a1b      	ldr	r3, [r3, #32]
 800bbbc:	f023 0201 	bic.w	r2, r3, #1
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	685b      	ldr	r3, [r3, #4]
 800bbc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	699b      	ldr	r3, [r3, #24]
 800bbce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bbd0:	68fa      	ldr	r2, [r7, #12]
 800bbd2:	4b37      	ldr	r3, [pc, #220]	@ (800bcb0 <TIM_OC1_SetConfig+0x108>)
 800bbd4:	4013      	ands	r3, r2
 800bbd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	f023 0303 	bic.w	r3, r3, #3
 800bbde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bbe0:	683b      	ldr	r3, [r7, #0]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	68fa      	ldr	r2, [r7, #12]
 800bbe6:	4313      	orrs	r3, r2
 800bbe8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bbea:	697b      	ldr	r3, [r7, #20]
 800bbec:	f023 0302 	bic.w	r3, r3, #2
 800bbf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bbf2:	683b      	ldr	r3, [r7, #0]
 800bbf4:	689b      	ldr	r3, [r3, #8]
 800bbf6:	697a      	ldr	r2, [r7, #20]
 800bbf8:	4313      	orrs	r3, r2
 800bbfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	4a2d      	ldr	r2, [pc, #180]	@ (800bcb4 <TIM_OC1_SetConfig+0x10c>)
 800bc00:	4293      	cmp	r3, r2
 800bc02:	d00f      	beq.n	800bc24 <TIM_OC1_SetConfig+0x7c>
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	4a2c      	ldr	r2, [pc, #176]	@ (800bcb8 <TIM_OC1_SetConfig+0x110>)
 800bc08:	4293      	cmp	r3, r2
 800bc0a:	d00b      	beq.n	800bc24 <TIM_OC1_SetConfig+0x7c>
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	4a2b      	ldr	r2, [pc, #172]	@ (800bcbc <TIM_OC1_SetConfig+0x114>)
 800bc10:	4293      	cmp	r3, r2
 800bc12:	d007      	beq.n	800bc24 <TIM_OC1_SetConfig+0x7c>
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	4a2a      	ldr	r2, [pc, #168]	@ (800bcc0 <TIM_OC1_SetConfig+0x118>)
 800bc18:	4293      	cmp	r3, r2
 800bc1a:	d003      	beq.n	800bc24 <TIM_OC1_SetConfig+0x7c>
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	4a29      	ldr	r2, [pc, #164]	@ (800bcc4 <TIM_OC1_SetConfig+0x11c>)
 800bc20:	4293      	cmp	r3, r2
 800bc22:	d10c      	bne.n	800bc3e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bc24:	697b      	ldr	r3, [r7, #20]
 800bc26:	f023 0308 	bic.w	r3, r3, #8
 800bc2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	68db      	ldr	r3, [r3, #12]
 800bc30:	697a      	ldr	r2, [r7, #20]
 800bc32:	4313      	orrs	r3, r2
 800bc34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bc36:	697b      	ldr	r3, [r7, #20]
 800bc38:	f023 0304 	bic.w	r3, r3, #4
 800bc3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	4a1c      	ldr	r2, [pc, #112]	@ (800bcb4 <TIM_OC1_SetConfig+0x10c>)
 800bc42:	4293      	cmp	r3, r2
 800bc44:	d00f      	beq.n	800bc66 <TIM_OC1_SetConfig+0xbe>
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	4a1b      	ldr	r2, [pc, #108]	@ (800bcb8 <TIM_OC1_SetConfig+0x110>)
 800bc4a:	4293      	cmp	r3, r2
 800bc4c:	d00b      	beq.n	800bc66 <TIM_OC1_SetConfig+0xbe>
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	4a1a      	ldr	r2, [pc, #104]	@ (800bcbc <TIM_OC1_SetConfig+0x114>)
 800bc52:	4293      	cmp	r3, r2
 800bc54:	d007      	beq.n	800bc66 <TIM_OC1_SetConfig+0xbe>
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	4a19      	ldr	r2, [pc, #100]	@ (800bcc0 <TIM_OC1_SetConfig+0x118>)
 800bc5a:	4293      	cmp	r3, r2
 800bc5c:	d003      	beq.n	800bc66 <TIM_OC1_SetConfig+0xbe>
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	4a18      	ldr	r2, [pc, #96]	@ (800bcc4 <TIM_OC1_SetConfig+0x11c>)
 800bc62:	4293      	cmp	r3, r2
 800bc64:	d111      	bne.n	800bc8a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bc66:	693b      	ldr	r3, [r7, #16]
 800bc68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bc6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bc6e:	693b      	ldr	r3, [r7, #16]
 800bc70:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bc74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bc76:	683b      	ldr	r3, [r7, #0]
 800bc78:	695b      	ldr	r3, [r3, #20]
 800bc7a:	693a      	ldr	r2, [r7, #16]
 800bc7c:	4313      	orrs	r3, r2
 800bc7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	699b      	ldr	r3, [r3, #24]
 800bc84:	693a      	ldr	r2, [r7, #16]
 800bc86:	4313      	orrs	r3, r2
 800bc88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	693a      	ldr	r2, [r7, #16]
 800bc8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	68fa      	ldr	r2, [r7, #12]
 800bc94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bc96:	683b      	ldr	r3, [r7, #0]
 800bc98:	685a      	ldr	r2, [r3, #4]
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	697a      	ldr	r2, [r7, #20]
 800bca2:	621a      	str	r2, [r3, #32]
}
 800bca4:	bf00      	nop
 800bca6:	371c      	adds	r7, #28
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcae:	4770      	bx	lr
 800bcb0:	fffeff8f 	.word	0xfffeff8f
 800bcb4:	40010000 	.word	0x40010000
 800bcb8:	40010400 	.word	0x40010400
 800bcbc:	40014000 	.word	0x40014000
 800bcc0:	40014400 	.word	0x40014400
 800bcc4:	40014800 	.word	0x40014800

0800bcc8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bcc8:	b480      	push	{r7}
 800bcca:	b087      	sub	sp, #28
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
 800bcd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	6a1b      	ldr	r3, [r3, #32]
 800bcd6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	6a1b      	ldr	r3, [r3, #32]
 800bcdc:	f023 0210 	bic.w	r2, r3, #16
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	685b      	ldr	r3, [r3, #4]
 800bce8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	699b      	ldr	r3, [r3, #24]
 800bcee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bcf0:	68fa      	ldr	r2, [r7, #12]
 800bcf2:	4b34      	ldr	r3, [pc, #208]	@ (800bdc4 <TIM_OC2_SetConfig+0xfc>)
 800bcf4:	4013      	ands	r3, r2
 800bcf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bcfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	021b      	lsls	r3, r3, #8
 800bd06:	68fa      	ldr	r2, [r7, #12]
 800bd08:	4313      	orrs	r3, r2
 800bd0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bd0c:	697b      	ldr	r3, [r7, #20]
 800bd0e:	f023 0320 	bic.w	r3, r3, #32
 800bd12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	689b      	ldr	r3, [r3, #8]
 800bd18:	011b      	lsls	r3, r3, #4
 800bd1a:	697a      	ldr	r2, [r7, #20]
 800bd1c:	4313      	orrs	r3, r2
 800bd1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	4a29      	ldr	r2, [pc, #164]	@ (800bdc8 <TIM_OC2_SetConfig+0x100>)
 800bd24:	4293      	cmp	r3, r2
 800bd26:	d003      	beq.n	800bd30 <TIM_OC2_SetConfig+0x68>
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	4a28      	ldr	r2, [pc, #160]	@ (800bdcc <TIM_OC2_SetConfig+0x104>)
 800bd2c:	4293      	cmp	r3, r2
 800bd2e:	d10d      	bne.n	800bd4c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bd30:	697b      	ldr	r3, [r7, #20]
 800bd32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bd36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	68db      	ldr	r3, [r3, #12]
 800bd3c:	011b      	lsls	r3, r3, #4
 800bd3e:	697a      	ldr	r2, [r7, #20]
 800bd40:	4313      	orrs	r3, r2
 800bd42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bd44:	697b      	ldr	r3, [r7, #20]
 800bd46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bd4a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	4a1e      	ldr	r2, [pc, #120]	@ (800bdc8 <TIM_OC2_SetConfig+0x100>)
 800bd50:	4293      	cmp	r3, r2
 800bd52:	d00f      	beq.n	800bd74 <TIM_OC2_SetConfig+0xac>
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	4a1d      	ldr	r2, [pc, #116]	@ (800bdcc <TIM_OC2_SetConfig+0x104>)
 800bd58:	4293      	cmp	r3, r2
 800bd5a:	d00b      	beq.n	800bd74 <TIM_OC2_SetConfig+0xac>
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	4a1c      	ldr	r2, [pc, #112]	@ (800bdd0 <TIM_OC2_SetConfig+0x108>)
 800bd60:	4293      	cmp	r3, r2
 800bd62:	d007      	beq.n	800bd74 <TIM_OC2_SetConfig+0xac>
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	4a1b      	ldr	r2, [pc, #108]	@ (800bdd4 <TIM_OC2_SetConfig+0x10c>)
 800bd68:	4293      	cmp	r3, r2
 800bd6a:	d003      	beq.n	800bd74 <TIM_OC2_SetConfig+0xac>
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	4a1a      	ldr	r2, [pc, #104]	@ (800bdd8 <TIM_OC2_SetConfig+0x110>)
 800bd70:	4293      	cmp	r3, r2
 800bd72:	d113      	bne.n	800bd9c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bd74:	693b      	ldr	r3, [r7, #16]
 800bd76:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bd7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bd7c:	693b      	ldr	r3, [r7, #16]
 800bd7e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bd82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bd84:	683b      	ldr	r3, [r7, #0]
 800bd86:	695b      	ldr	r3, [r3, #20]
 800bd88:	009b      	lsls	r3, r3, #2
 800bd8a:	693a      	ldr	r2, [r7, #16]
 800bd8c:	4313      	orrs	r3, r2
 800bd8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	699b      	ldr	r3, [r3, #24]
 800bd94:	009b      	lsls	r3, r3, #2
 800bd96:	693a      	ldr	r2, [r7, #16]
 800bd98:	4313      	orrs	r3, r2
 800bd9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	693a      	ldr	r2, [r7, #16]
 800bda0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	68fa      	ldr	r2, [r7, #12]
 800bda6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bda8:	683b      	ldr	r3, [r7, #0]
 800bdaa:	685a      	ldr	r2, [r3, #4]
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	697a      	ldr	r2, [r7, #20]
 800bdb4:	621a      	str	r2, [r3, #32]
}
 800bdb6:	bf00      	nop
 800bdb8:	371c      	adds	r7, #28
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc0:	4770      	bx	lr
 800bdc2:	bf00      	nop
 800bdc4:	feff8fff 	.word	0xfeff8fff
 800bdc8:	40010000 	.word	0x40010000
 800bdcc:	40010400 	.word	0x40010400
 800bdd0:	40014000 	.word	0x40014000
 800bdd4:	40014400 	.word	0x40014400
 800bdd8:	40014800 	.word	0x40014800

0800bddc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bddc:	b480      	push	{r7}
 800bdde:	b087      	sub	sp, #28
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
 800bde4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	6a1b      	ldr	r3, [r3, #32]
 800bdea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	6a1b      	ldr	r3, [r3, #32]
 800bdf0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	685b      	ldr	r3, [r3, #4]
 800bdfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	69db      	ldr	r3, [r3, #28]
 800be02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800be04:	68fa      	ldr	r2, [r7, #12]
 800be06:	4b33      	ldr	r3, [pc, #204]	@ (800bed4 <TIM_OC3_SetConfig+0xf8>)
 800be08:	4013      	ands	r3, r2
 800be0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	f023 0303 	bic.w	r3, r3, #3
 800be12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	68fa      	ldr	r2, [r7, #12]
 800be1a:	4313      	orrs	r3, r2
 800be1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800be1e:	697b      	ldr	r3, [r7, #20]
 800be20:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800be24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800be26:	683b      	ldr	r3, [r7, #0]
 800be28:	689b      	ldr	r3, [r3, #8]
 800be2a:	021b      	lsls	r3, r3, #8
 800be2c:	697a      	ldr	r2, [r7, #20]
 800be2e:	4313      	orrs	r3, r2
 800be30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	4a28      	ldr	r2, [pc, #160]	@ (800bed8 <TIM_OC3_SetConfig+0xfc>)
 800be36:	4293      	cmp	r3, r2
 800be38:	d003      	beq.n	800be42 <TIM_OC3_SetConfig+0x66>
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	4a27      	ldr	r2, [pc, #156]	@ (800bedc <TIM_OC3_SetConfig+0x100>)
 800be3e:	4293      	cmp	r3, r2
 800be40:	d10d      	bne.n	800be5e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800be42:	697b      	ldr	r3, [r7, #20]
 800be44:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800be48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800be4a:	683b      	ldr	r3, [r7, #0]
 800be4c:	68db      	ldr	r3, [r3, #12]
 800be4e:	021b      	lsls	r3, r3, #8
 800be50:	697a      	ldr	r2, [r7, #20]
 800be52:	4313      	orrs	r3, r2
 800be54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800be56:	697b      	ldr	r3, [r7, #20]
 800be58:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800be5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	4a1d      	ldr	r2, [pc, #116]	@ (800bed8 <TIM_OC3_SetConfig+0xfc>)
 800be62:	4293      	cmp	r3, r2
 800be64:	d00f      	beq.n	800be86 <TIM_OC3_SetConfig+0xaa>
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	4a1c      	ldr	r2, [pc, #112]	@ (800bedc <TIM_OC3_SetConfig+0x100>)
 800be6a:	4293      	cmp	r3, r2
 800be6c:	d00b      	beq.n	800be86 <TIM_OC3_SetConfig+0xaa>
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	4a1b      	ldr	r2, [pc, #108]	@ (800bee0 <TIM_OC3_SetConfig+0x104>)
 800be72:	4293      	cmp	r3, r2
 800be74:	d007      	beq.n	800be86 <TIM_OC3_SetConfig+0xaa>
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	4a1a      	ldr	r2, [pc, #104]	@ (800bee4 <TIM_OC3_SetConfig+0x108>)
 800be7a:	4293      	cmp	r3, r2
 800be7c:	d003      	beq.n	800be86 <TIM_OC3_SetConfig+0xaa>
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	4a19      	ldr	r2, [pc, #100]	@ (800bee8 <TIM_OC3_SetConfig+0x10c>)
 800be82:	4293      	cmp	r3, r2
 800be84:	d113      	bne.n	800beae <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800be86:	693b      	ldr	r3, [r7, #16]
 800be88:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800be8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800be8e:	693b      	ldr	r3, [r7, #16]
 800be90:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800be94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800be96:	683b      	ldr	r3, [r7, #0]
 800be98:	695b      	ldr	r3, [r3, #20]
 800be9a:	011b      	lsls	r3, r3, #4
 800be9c:	693a      	ldr	r2, [r7, #16]
 800be9e:	4313      	orrs	r3, r2
 800bea0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bea2:	683b      	ldr	r3, [r7, #0]
 800bea4:	699b      	ldr	r3, [r3, #24]
 800bea6:	011b      	lsls	r3, r3, #4
 800bea8:	693a      	ldr	r2, [r7, #16]
 800beaa:	4313      	orrs	r3, r2
 800beac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	693a      	ldr	r2, [r7, #16]
 800beb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	68fa      	ldr	r2, [r7, #12]
 800beb8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	685a      	ldr	r2, [r3, #4]
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	697a      	ldr	r2, [r7, #20]
 800bec6:	621a      	str	r2, [r3, #32]
}
 800bec8:	bf00      	nop
 800beca:	371c      	adds	r7, #28
 800becc:	46bd      	mov	sp, r7
 800bece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed2:	4770      	bx	lr
 800bed4:	fffeff8f 	.word	0xfffeff8f
 800bed8:	40010000 	.word	0x40010000
 800bedc:	40010400 	.word	0x40010400
 800bee0:	40014000 	.word	0x40014000
 800bee4:	40014400 	.word	0x40014400
 800bee8:	40014800 	.word	0x40014800

0800beec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800beec:	b480      	push	{r7}
 800beee:	b087      	sub	sp, #28
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
 800bef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	6a1b      	ldr	r3, [r3, #32]
 800befa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	6a1b      	ldr	r3, [r3, #32]
 800bf00:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	685b      	ldr	r3, [r3, #4]
 800bf0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	69db      	ldr	r3, [r3, #28]
 800bf12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bf14:	68fa      	ldr	r2, [r7, #12]
 800bf16:	4b24      	ldr	r3, [pc, #144]	@ (800bfa8 <TIM_OC4_SetConfig+0xbc>)
 800bf18:	4013      	ands	r3, r2
 800bf1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bf22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bf24:	683b      	ldr	r3, [r7, #0]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	021b      	lsls	r3, r3, #8
 800bf2a:	68fa      	ldr	r2, [r7, #12]
 800bf2c:	4313      	orrs	r3, r2
 800bf2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bf30:	693b      	ldr	r3, [r7, #16]
 800bf32:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800bf36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bf38:	683b      	ldr	r3, [r7, #0]
 800bf3a:	689b      	ldr	r3, [r3, #8]
 800bf3c:	031b      	lsls	r3, r3, #12
 800bf3e:	693a      	ldr	r2, [r7, #16]
 800bf40:	4313      	orrs	r3, r2
 800bf42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	4a19      	ldr	r2, [pc, #100]	@ (800bfac <TIM_OC4_SetConfig+0xc0>)
 800bf48:	4293      	cmp	r3, r2
 800bf4a:	d00f      	beq.n	800bf6c <TIM_OC4_SetConfig+0x80>
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	4a18      	ldr	r2, [pc, #96]	@ (800bfb0 <TIM_OC4_SetConfig+0xc4>)
 800bf50:	4293      	cmp	r3, r2
 800bf52:	d00b      	beq.n	800bf6c <TIM_OC4_SetConfig+0x80>
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	4a17      	ldr	r2, [pc, #92]	@ (800bfb4 <TIM_OC4_SetConfig+0xc8>)
 800bf58:	4293      	cmp	r3, r2
 800bf5a:	d007      	beq.n	800bf6c <TIM_OC4_SetConfig+0x80>
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	4a16      	ldr	r2, [pc, #88]	@ (800bfb8 <TIM_OC4_SetConfig+0xcc>)
 800bf60:	4293      	cmp	r3, r2
 800bf62:	d003      	beq.n	800bf6c <TIM_OC4_SetConfig+0x80>
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	4a15      	ldr	r2, [pc, #84]	@ (800bfbc <TIM_OC4_SetConfig+0xd0>)
 800bf68:	4293      	cmp	r3, r2
 800bf6a:	d109      	bne.n	800bf80 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bf6c:	697b      	ldr	r3, [r7, #20]
 800bf6e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bf72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bf74:	683b      	ldr	r3, [r7, #0]
 800bf76:	695b      	ldr	r3, [r3, #20]
 800bf78:	019b      	lsls	r3, r3, #6
 800bf7a:	697a      	ldr	r2, [r7, #20]
 800bf7c:	4313      	orrs	r3, r2
 800bf7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	697a      	ldr	r2, [r7, #20]
 800bf84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	68fa      	ldr	r2, [r7, #12]
 800bf8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bf8c:	683b      	ldr	r3, [r7, #0]
 800bf8e:	685a      	ldr	r2, [r3, #4]
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	693a      	ldr	r2, [r7, #16]
 800bf98:	621a      	str	r2, [r3, #32]
}
 800bf9a:	bf00      	nop
 800bf9c:	371c      	adds	r7, #28
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa4:	4770      	bx	lr
 800bfa6:	bf00      	nop
 800bfa8:	feff8fff 	.word	0xfeff8fff
 800bfac:	40010000 	.word	0x40010000
 800bfb0:	40010400 	.word	0x40010400
 800bfb4:	40014000 	.word	0x40014000
 800bfb8:	40014400 	.word	0x40014400
 800bfbc:	40014800 	.word	0x40014800

0800bfc0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bfc0:	b480      	push	{r7}
 800bfc2:	b087      	sub	sp, #28
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
 800bfc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	6a1b      	ldr	r3, [r3, #32]
 800bfce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	6a1b      	ldr	r3, [r3, #32]
 800bfd4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	685b      	ldr	r3, [r3, #4]
 800bfe0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bfe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bfe8:	68fa      	ldr	r2, [r7, #12]
 800bfea:	4b21      	ldr	r3, [pc, #132]	@ (800c070 <TIM_OC5_SetConfig+0xb0>)
 800bfec:	4013      	ands	r3, r2
 800bfee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bff0:	683b      	ldr	r3, [r7, #0]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	68fa      	ldr	r2, [r7, #12]
 800bff6:	4313      	orrs	r3, r2
 800bff8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800bffa:	693b      	ldr	r3, [r7, #16]
 800bffc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800c000:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c002:	683b      	ldr	r3, [r7, #0]
 800c004:	689b      	ldr	r3, [r3, #8]
 800c006:	041b      	lsls	r3, r3, #16
 800c008:	693a      	ldr	r2, [r7, #16]
 800c00a:	4313      	orrs	r3, r2
 800c00c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	4a18      	ldr	r2, [pc, #96]	@ (800c074 <TIM_OC5_SetConfig+0xb4>)
 800c012:	4293      	cmp	r3, r2
 800c014:	d00f      	beq.n	800c036 <TIM_OC5_SetConfig+0x76>
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	4a17      	ldr	r2, [pc, #92]	@ (800c078 <TIM_OC5_SetConfig+0xb8>)
 800c01a:	4293      	cmp	r3, r2
 800c01c:	d00b      	beq.n	800c036 <TIM_OC5_SetConfig+0x76>
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	4a16      	ldr	r2, [pc, #88]	@ (800c07c <TIM_OC5_SetConfig+0xbc>)
 800c022:	4293      	cmp	r3, r2
 800c024:	d007      	beq.n	800c036 <TIM_OC5_SetConfig+0x76>
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	4a15      	ldr	r2, [pc, #84]	@ (800c080 <TIM_OC5_SetConfig+0xc0>)
 800c02a:	4293      	cmp	r3, r2
 800c02c:	d003      	beq.n	800c036 <TIM_OC5_SetConfig+0x76>
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	4a14      	ldr	r2, [pc, #80]	@ (800c084 <TIM_OC5_SetConfig+0xc4>)
 800c032:	4293      	cmp	r3, r2
 800c034:	d109      	bne.n	800c04a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c036:	697b      	ldr	r3, [r7, #20]
 800c038:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c03c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c03e:	683b      	ldr	r3, [r7, #0]
 800c040:	695b      	ldr	r3, [r3, #20]
 800c042:	021b      	lsls	r3, r3, #8
 800c044:	697a      	ldr	r2, [r7, #20]
 800c046:	4313      	orrs	r3, r2
 800c048:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	697a      	ldr	r2, [r7, #20]
 800c04e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	68fa      	ldr	r2, [r7, #12]
 800c054:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c056:	683b      	ldr	r3, [r7, #0]
 800c058:	685a      	ldr	r2, [r3, #4]
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	693a      	ldr	r2, [r7, #16]
 800c062:	621a      	str	r2, [r3, #32]
}
 800c064:	bf00      	nop
 800c066:	371c      	adds	r7, #28
 800c068:	46bd      	mov	sp, r7
 800c06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06e:	4770      	bx	lr
 800c070:	fffeff8f 	.word	0xfffeff8f
 800c074:	40010000 	.word	0x40010000
 800c078:	40010400 	.word	0x40010400
 800c07c:	40014000 	.word	0x40014000
 800c080:	40014400 	.word	0x40014400
 800c084:	40014800 	.word	0x40014800

0800c088 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c088:	b480      	push	{r7}
 800c08a:	b087      	sub	sp, #28
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
 800c090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	6a1b      	ldr	r3, [r3, #32]
 800c096:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	6a1b      	ldr	r3, [r3, #32]
 800c09c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	685b      	ldr	r3, [r3, #4]
 800c0a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c0ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c0b0:	68fa      	ldr	r2, [r7, #12]
 800c0b2:	4b22      	ldr	r3, [pc, #136]	@ (800c13c <TIM_OC6_SetConfig+0xb4>)
 800c0b4:	4013      	ands	r3, r2
 800c0b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c0b8:	683b      	ldr	r3, [r7, #0]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	021b      	lsls	r3, r3, #8
 800c0be:	68fa      	ldr	r2, [r7, #12]
 800c0c0:	4313      	orrs	r3, r2
 800c0c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c0c4:	693b      	ldr	r3, [r7, #16]
 800c0c6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c0ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c0cc:	683b      	ldr	r3, [r7, #0]
 800c0ce:	689b      	ldr	r3, [r3, #8]
 800c0d0:	051b      	lsls	r3, r3, #20
 800c0d2:	693a      	ldr	r2, [r7, #16]
 800c0d4:	4313      	orrs	r3, r2
 800c0d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	4a19      	ldr	r2, [pc, #100]	@ (800c140 <TIM_OC6_SetConfig+0xb8>)
 800c0dc:	4293      	cmp	r3, r2
 800c0de:	d00f      	beq.n	800c100 <TIM_OC6_SetConfig+0x78>
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	4a18      	ldr	r2, [pc, #96]	@ (800c144 <TIM_OC6_SetConfig+0xbc>)
 800c0e4:	4293      	cmp	r3, r2
 800c0e6:	d00b      	beq.n	800c100 <TIM_OC6_SetConfig+0x78>
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	4a17      	ldr	r2, [pc, #92]	@ (800c148 <TIM_OC6_SetConfig+0xc0>)
 800c0ec:	4293      	cmp	r3, r2
 800c0ee:	d007      	beq.n	800c100 <TIM_OC6_SetConfig+0x78>
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	4a16      	ldr	r2, [pc, #88]	@ (800c14c <TIM_OC6_SetConfig+0xc4>)
 800c0f4:	4293      	cmp	r3, r2
 800c0f6:	d003      	beq.n	800c100 <TIM_OC6_SetConfig+0x78>
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	4a15      	ldr	r2, [pc, #84]	@ (800c150 <TIM_OC6_SetConfig+0xc8>)
 800c0fc:	4293      	cmp	r3, r2
 800c0fe:	d109      	bne.n	800c114 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c100:	697b      	ldr	r3, [r7, #20]
 800c102:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c106:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c108:	683b      	ldr	r3, [r7, #0]
 800c10a:	695b      	ldr	r3, [r3, #20]
 800c10c:	029b      	lsls	r3, r3, #10
 800c10e:	697a      	ldr	r2, [r7, #20]
 800c110:	4313      	orrs	r3, r2
 800c112:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	697a      	ldr	r2, [r7, #20]
 800c118:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	68fa      	ldr	r2, [r7, #12]
 800c11e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c120:	683b      	ldr	r3, [r7, #0]
 800c122:	685a      	ldr	r2, [r3, #4]
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	693a      	ldr	r2, [r7, #16]
 800c12c:	621a      	str	r2, [r3, #32]
}
 800c12e:	bf00      	nop
 800c130:	371c      	adds	r7, #28
 800c132:	46bd      	mov	sp, r7
 800c134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c138:	4770      	bx	lr
 800c13a:	bf00      	nop
 800c13c:	feff8fff 	.word	0xfeff8fff
 800c140:	40010000 	.word	0x40010000
 800c144:	40010400 	.word	0x40010400
 800c148:	40014000 	.word	0x40014000
 800c14c:	40014400 	.word	0x40014400
 800c150:	40014800 	.word	0x40014800

0800c154 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c154:	b480      	push	{r7}
 800c156:	b087      	sub	sp, #28
 800c158:	af00      	add	r7, sp, #0
 800c15a:	60f8      	str	r0, [r7, #12]
 800c15c:	60b9      	str	r1, [r7, #8]
 800c15e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c160:	68bb      	ldr	r3, [r7, #8]
 800c162:	f003 031f 	and.w	r3, r3, #31
 800c166:	2201      	movs	r2, #1
 800c168:	fa02 f303 	lsl.w	r3, r2, r3
 800c16c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	6a1a      	ldr	r2, [r3, #32]
 800c172:	697b      	ldr	r3, [r7, #20]
 800c174:	43db      	mvns	r3, r3
 800c176:	401a      	ands	r2, r3
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	6a1a      	ldr	r2, [r3, #32]
 800c180:	68bb      	ldr	r3, [r7, #8]
 800c182:	f003 031f 	and.w	r3, r3, #31
 800c186:	6879      	ldr	r1, [r7, #4]
 800c188:	fa01 f303 	lsl.w	r3, r1, r3
 800c18c:	431a      	orrs	r2, r3
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	621a      	str	r2, [r3, #32]
}
 800c192:	bf00      	nop
 800c194:	371c      	adds	r7, #28
 800c196:	46bd      	mov	sp, r7
 800c198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19c:	4770      	bx	lr
	...

0800c1a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c1a0:	b480      	push	{r7}
 800c1a2:	b085      	sub	sp, #20
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
 800c1a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c1b0:	2b01      	cmp	r3, #1
 800c1b2:	d101      	bne.n	800c1b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c1b4:	2302      	movs	r3, #2
 800c1b6:	e06d      	b.n	800c294 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	2201      	movs	r2, #1
 800c1bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	2202      	movs	r2, #2
 800c1c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	685b      	ldr	r3, [r3, #4]
 800c1ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	689b      	ldr	r3, [r3, #8]
 800c1d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	4a30      	ldr	r2, [pc, #192]	@ (800c2a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c1de:	4293      	cmp	r3, r2
 800c1e0:	d004      	beq.n	800c1ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	4a2f      	ldr	r2, [pc, #188]	@ (800c2a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c1e8:	4293      	cmp	r3, r2
 800c1ea:	d108      	bne.n	800c1fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c1f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	685b      	ldr	r3, [r3, #4]
 800c1f8:	68fa      	ldr	r2, [r7, #12]
 800c1fa:	4313      	orrs	r3, r2
 800c1fc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c204:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c206:	683b      	ldr	r3, [r7, #0]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	68fa      	ldr	r2, [r7, #12]
 800c20c:	4313      	orrs	r3, r2
 800c20e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	68fa      	ldr	r2, [r7, #12]
 800c216:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	4a20      	ldr	r2, [pc, #128]	@ (800c2a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c21e:	4293      	cmp	r3, r2
 800c220:	d022      	beq.n	800c268 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c22a:	d01d      	beq.n	800c268 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	4a1d      	ldr	r2, [pc, #116]	@ (800c2a8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c232:	4293      	cmp	r3, r2
 800c234:	d018      	beq.n	800c268 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	4a1c      	ldr	r2, [pc, #112]	@ (800c2ac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c23c:	4293      	cmp	r3, r2
 800c23e:	d013      	beq.n	800c268 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	4a1a      	ldr	r2, [pc, #104]	@ (800c2b0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c246:	4293      	cmp	r3, r2
 800c248:	d00e      	beq.n	800c268 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	4a15      	ldr	r2, [pc, #84]	@ (800c2a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c250:	4293      	cmp	r3, r2
 800c252:	d009      	beq.n	800c268 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	4a16      	ldr	r2, [pc, #88]	@ (800c2b4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c25a:	4293      	cmp	r3, r2
 800c25c:	d004      	beq.n	800c268 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	4a15      	ldr	r2, [pc, #84]	@ (800c2b8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c264:	4293      	cmp	r3, r2
 800c266:	d10c      	bne.n	800c282 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c268:	68bb      	ldr	r3, [r7, #8]
 800c26a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c26e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	689b      	ldr	r3, [r3, #8]
 800c274:	68ba      	ldr	r2, [r7, #8]
 800c276:	4313      	orrs	r3, r2
 800c278:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	68ba      	ldr	r2, [r7, #8]
 800c280:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	2201      	movs	r2, #1
 800c286:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	2200      	movs	r2, #0
 800c28e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c292:	2300      	movs	r3, #0
}
 800c294:	4618      	mov	r0, r3
 800c296:	3714      	adds	r7, #20
 800c298:	46bd      	mov	sp, r7
 800c29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29e:	4770      	bx	lr
 800c2a0:	40010000 	.word	0x40010000
 800c2a4:	40010400 	.word	0x40010400
 800c2a8:	40000400 	.word	0x40000400
 800c2ac:	40000800 	.word	0x40000800
 800c2b0:	40000c00 	.word	0x40000c00
 800c2b4:	40001800 	.word	0x40001800
 800c2b8:	40014000 	.word	0x40014000

0800c2bc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c2bc:	b480      	push	{r7}
 800c2be:	b083      	sub	sp, #12
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c2c4:	bf00      	nop
 800c2c6:	370c      	adds	r7, #12
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ce:	4770      	bx	lr

0800c2d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c2d0:	b480      	push	{r7}
 800c2d2:	b083      	sub	sp, #12
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c2d8:	bf00      	nop
 800c2da:	370c      	adds	r7, #12
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e2:	4770      	bx	lr

0800c2e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c2e4:	b480      	push	{r7}
 800c2e6:	b083      	sub	sp, #12
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c2ec:	bf00      	nop
 800c2ee:	370c      	adds	r7, #12
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f6:	4770      	bx	lr

0800c2f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b082      	sub	sp, #8
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d101      	bne.n	800c30a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c306:	2301      	movs	r3, #1
 800c308:	e042      	b.n	800c390 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c310:	2b00      	cmp	r3, #0
 800c312:	d106      	bne.n	800c322 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	2200      	movs	r2, #0
 800c318:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c31c:	6878      	ldr	r0, [r7, #4]
 800c31e:	f7f6 fe63 	bl	8002fe8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	2224      	movs	r2, #36	@ 0x24
 800c326:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	681a      	ldr	r2, [r3, #0]
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	f022 0201 	bic.w	r2, r2, #1
 800c338:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d002      	beq.n	800c348 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800c342:	6878      	ldr	r0, [r7, #4]
 800c344:	f001 fac4 	bl	800d8d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c348:	6878      	ldr	r0, [r7, #4]
 800c34a:	f000 fc55 	bl	800cbf8 <UART_SetConfig>
 800c34e:	4603      	mov	r3, r0
 800c350:	2b01      	cmp	r3, #1
 800c352:	d101      	bne.n	800c358 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800c354:	2301      	movs	r3, #1
 800c356:	e01b      	b.n	800c390 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	685a      	ldr	r2, [r3, #4]
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c366:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	689a      	ldr	r2, [r3, #8]
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c376:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	681a      	ldr	r2, [r3, #0]
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	f042 0201 	orr.w	r2, r2, #1
 800c386:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c388:	6878      	ldr	r0, [r7, #4]
 800c38a:	f001 fb43 	bl	800da14 <UART_CheckIdleState>
 800c38e:	4603      	mov	r3, r0
}
 800c390:	4618      	mov	r0, r3
 800c392:	3708      	adds	r7, #8
 800c394:	46bd      	mov	sp, r7
 800c396:	bd80      	pop	{r7, pc}

0800c398 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b08a      	sub	sp, #40	@ 0x28
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	60f8      	str	r0, [r7, #12]
 800c3a0:	60b9      	str	r1, [r7, #8]
 800c3a2:	4613      	mov	r3, r2
 800c3a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c3ac:	2b20      	cmp	r3, #32
 800c3ae:	d137      	bne.n	800c420 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800c3b0:	68bb      	ldr	r3, [r7, #8]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d002      	beq.n	800c3bc <HAL_UART_Receive_DMA+0x24>
 800c3b6:	88fb      	ldrh	r3, [r7, #6]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d101      	bne.n	800c3c0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800c3bc:	2301      	movs	r3, #1
 800c3be:	e030      	b.n	800c422 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	4a18      	ldr	r2, [pc, #96]	@ (800c42c <HAL_UART_Receive_DMA+0x94>)
 800c3cc:	4293      	cmp	r3, r2
 800c3ce:	d01f      	beq.n	800c410 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	685b      	ldr	r3, [r3, #4]
 800c3d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d018      	beq.n	800c410 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3e4:	697b      	ldr	r3, [r7, #20]
 800c3e6:	e853 3f00 	ldrex	r3, [r3]
 800c3ea:	613b      	str	r3, [r7, #16]
   return(result);
 800c3ec:	693b      	ldr	r3, [r7, #16]
 800c3ee:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c3f2:	627b      	str	r3, [r7, #36]	@ 0x24
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	461a      	mov	r2, r3
 800c3fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3fc:	623b      	str	r3, [r7, #32]
 800c3fe:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c400:	69f9      	ldr	r1, [r7, #28]
 800c402:	6a3a      	ldr	r2, [r7, #32]
 800c404:	e841 2300 	strex	r3, r2, [r1]
 800c408:	61bb      	str	r3, [r7, #24]
   return(result);
 800c40a:	69bb      	ldr	r3, [r7, #24]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d1e6      	bne.n	800c3de <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c410:	88fb      	ldrh	r3, [r7, #6]
 800c412:	461a      	mov	r2, r3
 800c414:	68b9      	ldr	r1, [r7, #8]
 800c416:	68f8      	ldr	r0, [r7, #12]
 800c418:	f001 fc14 	bl	800dc44 <UART_Start_Receive_DMA>
 800c41c:	4603      	mov	r3, r0
 800c41e:	e000      	b.n	800c422 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c420:	2302      	movs	r3, #2
  }
}
 800c422:	4618      	mov	r0, r3
 800c424:	3728      	adds	r7, #40	@ 0x28
 800c426:	46bd      	mov	sp, r7
 800c428:	bd80      	pop	{r7, pc}
 800c42a:	bf00      	nop
 800c42c:	58000c00 	.word	0x58000c00

0800c430 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b0ba      	sub	sp, #232	@ 0xe8
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	69db      	ldr	r3, [r3, #28]
 800c43e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	689b      	ldr	r3, [r3, #8]
 800c452:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c456:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800c45a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800c45e:	4013      	ands	r3, r2
 800c460:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800c464:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d11b      	bne.n	800c4a4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c46c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c470:	f003 0320 	and.w	r3, r3, #32
 800c474:	2b00      	cmp	r3, #0
 800c476:	d015      	beq.n	800c4a4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c478:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c47c:	f003 0320 	and.w	r3, r3, #32
 800c480:	2b00      	cmp	r3, #0
 800c482:	d105      	bne.n	800c490 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c484:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c488:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d009      	beq.n	800c4a4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c494:	2b00      	cmp	r3, #0
 800c496:	f000 8377 	beq.w	800cb88 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c49e:	6878      	ldr	r0, [r7, #4]
 800c4a0:	4798      	blx	r3
      }
      return;
 800c4a2:	e371      	b.n	800cb88 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c4a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	f000 8123 	beq.w	800c6f4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c4ae:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c4b2:	4b8d      	ldr	r3, [pc, #564]	@ (800c6e8 <HAL_UART_IRQHandler+0x2b8>)
 800c4b4:	4013      	ands	r3, r2
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d106      	bne.n	800c4c8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c4ba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800c4be:	4b8b      	ldr	r3, [pc, #556]	@ (800c6ec <HAL_UART_IRQHandler+0x2bc>)
 800c4c0:	4013      	ands	r3, r2
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	f000 8116 	beq.w	800c6f4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c4c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c4cc:	f003 0301 	and.w	r3, r3, #1
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d011      	beq.n	800c4f8 <HAL_UART_IRQHandler+0xc8>
 800c4d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c4d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d00b      	beq.n	800c4f8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	2201      	movs	r2, #1
 800c4e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c4ee:	f043 0201 	orr.w	r2, r3, #1
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c4f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c4fc:	f003 0302 	and.w	r3, r3, #2
 800c500:	2b00      	cmp	r3, #0
 800c502:	d011      	beq.n	800c528 <HAL_UART_IRQHandler+0xf8>
 800c504:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c508:	f003 0301 	and.w	r3, r3, #1
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d00b      	beq.n	800c528 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	2202      	movs	r2, #2
 800c516:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c51e:	f043 0204 	orr.w	r2, r3, #4
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c528:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c52c:	f003 0304 	and.w	r3, r3, #4
 800c530:	2b00      	cmp	r3, #0
 800c532:	d011      	beq.n	800c558 <HAL_UART_IRQHandler+0x128>
 800c534:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c538:	f003 0301 	and.w	r3, r3, #1
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d00b      	beq.n	800c558 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	2204      	movs	r2, #4
 800c546:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c54e:	f043 0202 	orr.w	r2, r3, #2
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c558:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c55c:	f003 0308 	and.w	r3, r3, #8
 800c560:	2b00      	cmp	r3, #0
 800c562:	d017      	beq.n	800c594 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c564:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c568:	f003 0320 	and.w	r3, r3, #32
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d105      	bne.n	800c57c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c570:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c574:	4b5c      	ldr	r3, [pc, #368]	@ (800c6e8 <HAL_UART_IRQHandler+0x2b8>)
 800c576:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d00b      	beq.n	800c594 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	2208      	movs	r2, #8
 800c582:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c58a:	f043 0208 	orr.w	r2, r3, #8
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c594:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c598:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d012      	beq.n	800c5c6 <HAL_UART_IRQHandler+0x196>
 800c5a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c5a4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d00c      	beq.n	800c5c6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c5b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c5bc:	f043 0220 	orr.w	r2, r3, #32
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	f000 82dd 	beq.w	800cb8c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c5d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c5d6:	f003 0320 	and.w	r3, r3, #32
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d013      	beq.n	800c606 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c5de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c5e2:	f003 0320 	and.w	r3, r3, #32
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d105      	bne.n	800c5f6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c5ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c5ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d007      	beq.n	800c606 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d003      	beq.n	800c606 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c602:	6878      	ldr	r0, [r7, #4]
 800c604:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c60c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	689b      	ldr	r3, [r3, #8]
 800c616:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c61a:	2b40      	cmp	r3, #64	@ 0x40
 800c61c:	d005      	beq.n	800c62a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c61e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c622:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c626:	2b00      	cmp	r3, #0
 800c628:	d054      	beq.n	800c6d4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c62a:	6878      	ldr	r0, [r7, #4]
 800c62c:	f001 fbf2 	bl	800de14 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	689b      	ldr	r3, [r3, #8]
 800c636:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c63a:	2b40      	cmp	r3, #64	@ 0x40
 800c63c:	d146      	bne.n	800c6cc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	3308      	adds	r3, #8
 800c644:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c648:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c64c:	e853 3f00 	ldrex	r3, [r3]
 800c650:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c654:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c658:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c65c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	3308      	adds	r3, #8
 800c666:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c66a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c66e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c672:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c676:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c67a:	e841 2300 	strex	r3, r2, [r1]
 800c67e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c682:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c686:	2b00      	cmp	r3, #0
 800c688:	d1d9      	bne.n	800c63e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c690:	2b00      	cmp	r3, #0
 800c692:	d017      	beq.n	800c6c4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c69a:	4a15      	ldr	r2, [pc, #84]	@ (800c6f0 <HAL_UART_IRQHandler+0x2c0>)
 800c69c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	f7f8 f9b7 	bl	8004a18 <HAL_DMA_Abort_IT>
 800c6aa:	4603      	mov	r3, r0
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d019      	beq.n	800c6e4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c6b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c6b8:	687a      	ldr	r2, [r7, #4]
 800c6ba:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800c6be:	4610      	mov	r0, r2
 800c6c0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c6c2:	e00f      	b.n	800c6e4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c6c4:	6878      	ldr	r0, [r7, #4]
 800c6c6:	f000 fa81 	bl	800cbcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c6ca:	e00b      	b.n	800c6e4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c6cc:	6878      	ldr	r0, [r7, #4]
 800c6ce:	f000 fa7d 	bl	800cbcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c6d2:	e007      	b.n	800c6e4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c6d4:	6878      	ldr	r0, [r7, #4]
 800c6d6:	f000 fa79 	bl	800cbcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	2200      	movs	r2, #0
 800c6de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800c6e2:	e253      	b.n	800cb8c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c6e4:	bf00      	nop
    return;
 800c6e6:	e251      	b.n	800cb8c <HAL_UART_IRQHandler+0x75c>
 800c6e8:	10000001 	.word	0x10000001
 800c6ec:	04000120 	.word	0x04000120
 800c6f0:	0800e0c7 	.word	0x0800e0c7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c6f8:	2b01      	cmp	r3, #1
 800c6fa:	f040 81e7 	bne.w	800cacc <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c6fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c702:	f003 0310 	and.w	r3, r3, #16
 800c706:	2b00      	cmp	r3, #0
 800c708:	f000 81e0 	beq.w	800cacc <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c70c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c710:	f003 0310 	and.w	r3, r3, #16
 800c714:	2b00      	cmp	r3, #0
 800c716:	f000 81d9 	beq.w	800cacc <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	2210      	movs	r2, #16
 800c720:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	689b      	ldr	r3, [r3, #8]
 800c728:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c72c:	2b40      	cmp	r3, #64	@ 0x40
 800c72e:	f040 8151 	bne.w	800c9d4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	4a96      	ldr	r2, [pc, #600]	@ (800c994 <HAL_UART_IRQHandler+0x564>)
 800c73c:	4293      	cmp	r3, r2
 800c73e:	d068      	beq.n	800c812 <HAL_UART_IRQHandler+0x3e2>
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	4a93      	ldr	r2, [pc, #588]	@ (800c998 <HAL_UART_IRQHandler+0x568>)
 800c74a:	4293      	cmp	r3, r2
 800c74c:	d061      	beq.n	800c812 <HAL_UART_IRQHandler+0x3e2>
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	4a91      	ldr	r2, [pc, #580]	@ (800c99c <HAL_UART_IRQHandler+0x56c>)
 800c758:	4293      	cmp	r3, r2
 800c75a:	d05a      	beq.n	800c812 <HAL_UART_IRQHandler+0x3e2>
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	4a8e      	ldr	r2, [pc, #568]	@ (800c9a0 <HAL_UART_IRQHandler+0x570>)
 800c766:	4293      	cmp	r3, r2
 800c768:	d053      	beq.n	800c812 <HAL_UART_IRQHandler+0x3e2>
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	4a8c      	ldr	r2, [pc, #560]	@ (800c9a4 <HAL_UART_IRQHandler+0x574>)
 800c774:	4293      	cmp	r3, r2
 800c776:	d04c      	beq.n	800c812 <HAL_UART_IRQHandler+0x3e2>
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	4a89      	ldr	r2, [pc, #548]	@ (800c9a8 <HAL_UART_IRQHandler+0x578>)
 800c782:	4293      	cmp	r3, r2
 800c784:	d045      	beq.n	800c812 <HAL_UART_IRQHandler+0x3e2>
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	4a87      	ldr	r2, [pc, #540]	@ (800c9ac <HAL_UART_IRQHandler+0x57c>)
 800c790:	4293      	cmp	r3, r2
 800c792:	d03e      	beq.n	800c812 <HAL_UART_IRQHandler+0x3e2>
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	4a84      	ldr	r2, [pc, #528]	@ (800c9b0 <HAL_UART_IRQHandler+0x580>)
 800c79e:	4293      	cmp	r3, r2
 800c7a0:	d037      	beq.n	800c812 <HAL_UART_IRQHandler+0x3e2>
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	4a82      	ldr	r2, [pc, #520]	@ (800c9b4 <HAL_UART_IRQHandler+0x584>)
 800c7ac:	4293      	cmp	r3, r2
 800c7ae:	d030      	beq.n	800c812 <HAL_UART_IRQHandler+0x3e2>
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	4a7f      	ldr	r2, [pc, #508]	@ (800c9b8 <HAL_UART_IRQHandler+0x588>)
 800c7ba:	4293      	cmp	r3, r2
 800c7bc:	d029      	beq.n	800c812 <HAL_UART_IRQHandler+0x3e2>
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	4a7d      	ldr	r2, [pc, #500]	@ (800c9bc <HAL_UART_IRQHandler+0x58c>)
 800c7c8:	4293      	cmp	r3, r2
 800c7ca:	d022      	beq.n	800c812 <HAL_UART_IRQHandler+0x3e2>
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	4a7a      	ldr	r2, [pc, #488]	@ (800c9c0 <HAL_UART_IRQHandler+0x590>)
 800c7d6:	4293      	cmp	r3, r2
 800c7d8:	d01b      	beq.n	800c812 <HAL_UART_IRQHandler+0x3e2>
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	4a78      	ldr	r2, [pc, #480]	@ (800c9c4 <HAL_UART_IRQHandler+0x594>)
 800c7e4:	4293      	cmp	r3, r2
 800c7e6:	d014      	beq.n	800c812 <HAL_UART_IRQHandler+0x3e2>
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	4a75      	ldr	r2, [pc, #468]	@ (800c9c8 <HAL_UART_IRQHandler+0x598>)
 800c7f2:	4293      	cmp	r3, r2
 800c7f4:	d00d      	beq.n	800c812 <HAL_UART_IRQHandler+0x3e2>
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	4a73      	ldr	r2, [pc, #460]	@ (800c9cc <HAL_UART_IRQHandler+0x59c>)
 800c800:	4293      	cmp	r3, r2
 800c802:	d006      	beq.n	800c812 <HAL_UART_IRQHandler+0x3e2>
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	4a70      	ldr	r2, [pc, #448]	@ (800c9d0 <HAL_UART_IRQHandler+0x5a0>)
 800c80e:	4293      	cmp	r3, r2
 800c810:	d106      	bne.n	800c820 <HAL_UART_IRQHandler+0x3f0>
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	685b      	ldr	r3, [r3, #4]
 800c81c:	b29b      	uxth	r3, r3
 800c81e:	e005      	b.n	800c82c <HAL_UART_IRQHandler+0x3fc>
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	685b      	ldr	r3, [r3, #4]
 800c82a:	b29b      	uxth	r3, r3
 800c82c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c830:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c834:	2b00      	cmp	r3, #0
 800c836:	f000 81ab 	beq.w	800cb90 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c840:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c844:	429a      	cmp	r2, r3
 800c846:	f080 81a3 	bcs.w	800cb90 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c850:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c85a:	69db      	ldr	r3, [r3, #28]
 800c85c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c860:	f000 8087 	beq.w	800c972 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c86c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c870:	e853 3f00 	ldrex	r3, [r3]
 800c874:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c878:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c87c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c880:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	461a      	mov	r2, r3
 800c88a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c88e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c892:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c896:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c89a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c89e:	e841 2300 	strex	r3, r2, [r1]
 800c8a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c8a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d1da      	bne.n	800c864 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	3308      	adds	r3, #8
 800c8b4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c8b8:	e853 3f00 	ldrex	r3, [r3]
 800c8bc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c8be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c8c0:	f023 0301 	bic.w	r3, r3, #1
 800c8c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	3308      	adds	r3, #8
 800c8ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c8d2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c8d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8d8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c8da:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c8de:	e841 2300 	strex	r3, r2, [r1]
 800c8e2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c8e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d1e1      	bne.n	800c8ae <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	3308      	adds	r3, #8
 800c8f0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c8f4:	e853 3f00 	ldrex	r3, [r3]
 800c8f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c8fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c8fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c900:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	3308      	adds	r3, #8
 800c90a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c90e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c910:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c912:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c914:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c916:	e841 2300 	strex	r3, r2, [r1]
 800c91a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c91c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d1e3      	bne.n	800c8ea <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	2220      	movs	r2, #32
 800c926:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	2200      	movs	r2, #0
 800c92e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c936:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c938:	e853 3f00 	ldrex	r3, [r3]
 800c93c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c93e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c940:	f023 0310 	bic.w	r3, r3, #16
 800c944:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	461a      	mov	r2, r3
 800c94e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c952:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c954:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c956:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c958:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c95a:	e841 2300 	strex	r3, r2, [r1]
 800c95e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c960:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c962:	2b00      	cmp	r3, #0
 800c964:	d1e4      	bne.n	800c930 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c96c:	4618      	mov	r0, r3
 800c96e:	f7f7 fd35 	bl	80043dc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	2202      	movs	r2, #2
 800c976:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c984:	b29b      	uxth	r3, r3
 800c986:	1ad3      	subs	r3, r2, r3
 800c988:	b29b      	uxth	r3, r3
 800c98a:	4619      	mov	r1, r3
 800c98c:	6878      	ldr	r0, [r7, #4]
 800c98e:	f000 f927 	bl	800cbe0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c992:	e0fd      	b.n	800cb90 <HAL_UART_IRQHandler+0x760>
 800c994:	40020010 	.word	0x40020010
 800c998:	40020028 	.word	0x40020028
 800c99c:	40020040 	.word	0x40020040
 800c9a0:	40020058 	.word	0x40020058
 800c9a4:	40020070 	.word	0x40020070
 800c9a8:	40020088 	.word	0x40020088
 800c9ac:	400200a0 	.word	0x400200a0
 800c9b0:	400200b8 	.word	0x400200b8
 800c9b4:	40020410 	.word	0x40020410
 800c9b8:	40020428 	.word	0x40020428
 800c9bc:	40020440 	.word	0x40020440
 800c9c0:	40020458 	.word	0x40020458
 800c9c4:	40020470 	.word	0x40020470
 800c9c8:	40020488 	.word	0x40020488
 800c9cc:	400204a0 	.word	0x400204a0
 800c9d0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c9e0:	b29b      	uxth	r3, r3
 800c9e2:	1ad3      	subs	r3, r2, r3
 800c9e4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c9ee:	b29b      	uxth	r3, r3
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	f000 80cf 	beq.w	800cb94 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800c9f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	f000 80ca 	beq.w	800cb94 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca08:	e853 3f00 	ldrex	r3, [r3]
 800ca0c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ca0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca10:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ca14:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	461a      	mov	r2, r3
 800ca1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ca22:	647b      	str	r3, [r7, #68]	@ 0x44
 800ca24:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca26:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ca28:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ca2a:	e841 2300 	strex	r3, r2, [r1]
 800ca2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ca30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d1e4      	bne.n	800ca00 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	3308      	adds	r3, #8
 800ca3c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca40:	e853 3f00 	ldrex	r3, [r3]
 800ca44:	623b      	str	r3, [r7, #32]
   return(result);
 800ca46:	6a3a      	ldr	r2, [r7, #32]
 800ca48:	4b55      	ldr	r3, [pc, #340]	@ (800cba0 <HAL_UART_IRQHandler+0x770>)
 800ca4a:	4013      	ands	r3, r2
 800ca4c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	3308      	adds	r3, #8
 800ca56:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800ca5a:	633a      	str	r2, [r7, #48]	@ 0x30
 800ca5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ca60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ca62:	e841 2300 	strex	r3, r2, [r1]
 800ca66:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ca68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d1e3      	bne.n	800ca36 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	2220      	movs	r2, #32
 800ca72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	2200      	movs	r2, #0
 800ca7a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	2200      	movs	r2, #0
 800ca80:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca88:	693b      	ldr	r3, [r7, #16]
 800ca8a:	e853 3f00 	ldrex	r3, [r3]
 800ca8e:	60fb      	str	r3, [r7, #12]
   return(result);
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	f023 0310 	bic.w	r3, r3, #16
 800ca96:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	461a      	mov	r2, r3
 800caa0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800caa4:	61fb      	str	r3, [r7, #28]
 800caa6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caa8:	69b9      	ldr	r1, [r7, #24]
 800caaa:	69fa      	ldr	r2, [r7, #28]
 800caac:	e841 2300 	strex	r3, r2, [r1]
 800cab0:	617b      	str	r3, [r7, #20]
   return(result);
 800cab2:	697b      	ldr	r3, [r7, #20]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d1e4      	bne.n	800ca82 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	2202      	movs	r2, #2
 800cabc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800cabe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800cac2:	4619      	mov	r1, r3
 800cac4:	6878      	ldr	r0, [r7, #4]
 800cac6:	f000 f88b 	bl	800cbe0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800caca:	e063      	b.n	800cb94 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800cacc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cad0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d00e      	beq.n	800caf6 <HAL_UART_IRQHandler+0x6c6>
 800cad8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cadc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d008      	beq.n	800caf6 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800caec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800caee:	6878      	ldr	r0, [r7, #4]
 800caf0:	f001 fb2a 	bl	800e148 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800caf4:	e051      	b.n	800cb9a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800caf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cafa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d014      	beq.n	800cb2c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800cb02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cb06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d105      	bne.n	800cb1a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800cb0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cb12:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d008      	beq.n	800cb2c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d03a      	beq.n	800cb98 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cb26:	6878      	ldr	r0, [r7, #4]
 800cb28:	4798      	blx	r3
    }
    return;
 800cb2a:	e035      	b.n	800cb98 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800cb2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cb30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d009      	beq.n	800cb4c <HAL_UART_IRQHandler+0x71c>
 800cb38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cb3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d003      	beq.n	800cb4c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800cb44:	6878      	ldr	r0, [r7, #4]
 800cb46:	f001 fad4 	bl	800e0f2 <UART_EndTransmit_IT>
    return;
 800cb4a:	e026      	b.n	800cb9a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800cb4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cb50:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d009      	beq.n	800cb6c <HAL_UART_IRQHandler+0x73c>
 800cb58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cb5c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d003      	beq.n	800cb6c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800cb64:	6878      	ldr	r0, [r7, #4]
 800cb66:	f001 fb03 	bl	800e170 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cb6a:	e016      	b.n	800cb9a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800cb6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cb70:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d010      	beq.n	800cb9a <HAL_UART_IRQHandler+0x76a>
 800cb78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	da0c      	bge.n	800cb9a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800cb80:	6878      	ldr	r0, [r7, #4]
 800cb82:	f001 faeb 	bl	800e15c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cb86:	e008      	b.n	800cb9a <HAL_UART_IRQHandler+0x76a>
      return;
 800cb88:	bf00      	nop
 800cb8a:	e006      	b.n	800cb9a <HAL_UART_IRQHandler+0x76a>
    return;
 800cb8c:	bf00      	nop
 800cb8e:	e004      	b.n	800cb9a <HAL_UART_IRQHandler+0x76a>
      return;
 800cb90:	bf00      	nop
 800cb92:	e002      	b.n	800cb9a <HAL_UART_IRQHandler+0x76a>
      return;
 800cb94:	bf00      	nop
 800cb96:	e000      	b.n	800cb9a <HAL_UART_IRQHandler+0x76a>
    return;
 800cb98:	bf00      	nop
  }
}
 800cb9a:	37e8      	adds	r7, #232	@ 0xe8
 800cb9c:	46bd      	mov	sp, r7
 800cb9e:	bd80      	pop	{r7, pc}
 800cba0:	effffffe 	.word	0xeffffffe

0800cba4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cba4:	b480      	push	{r7}
 800cba6:	b083      	sub	sp, #12
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800cbac:	bf00      	nop
 800cbae:	370c      	adds	r7, #12
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb6:	4770      	bx	lr

0800cbb8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cbb8:	b480      	push	{r7}
 800cbba:	b083      	sub	sp, #12
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800cbc0:	bf00      	nop
 800cbc2:	370c      	adds	r7, #12
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbca:	4770      	bx	lr

0800cbcc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cbcc:	b480      	push	{r7}
 800cbce:	b083      	sub	sp, #12
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800cbd4:	bf00      	nop
 800cbd6:	370c      	adds	r7, #12
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbde:	4770      	bx	lr

0800cbe0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cbe0:	b480      	push	{r7}
 800cbe2:	b083      	sub	sp, #12
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
 800cbe8:	460b      	mov	r3, r1
 800cbea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cbec:	bf00      	nop
 800cbee:	370c      	adds	r7, #12
 800cbf0:	46bd      	mov	sp, r7
 800cbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf6:	4770      	bx	lr

0800cbf8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cbf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cbfc:	b092      	sub	sp, #72	@ 0x48
 800cbfe:	af00      	add	r7, sp, #0
 800cc00:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cc02:	2300      	movs	r3, #0
 800cc04:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cc08:	697b      	ldr	r3, [r7, #20]
 800cc0a:	689a      	ldr	r2, [r3, #8]
 800cc0c:	697b      	ldr	r3, [r7, #20]
 800cc0e:	691b      	ldr	r3, [r3, #16]
 800cc10:	431a      	orrs	r2, r3
 800cc12:	697b      	ldr	r3, [r7, #20]
 800cc14:	695b      	ldr	r3, [r3, #20]
 800cc16:	431a      	orrs	r2, r3
 800cc18:	697b      	ldr	r3, [r7, #20]
 800cc1a:	69db      	ldr	r3, [r3, #28]
 800cc1c:	4313      	orrs	r3, r2
 800cc1e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cc20:	697b      	ldr	r3, [r7, #20]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	681a      	ldr	r2, [r3, #0]
 800cc26:	4bbe      	ldr	r3, [pc, #760]	@ (800cf20 <UART_SetConfig+0x328>)
 800cc28:	4013      	ands	r3, r2
 800cc2a:	697a      	ldr	r2, [r7, #20]
 800cc2c:	6812      	ldr	r2, [r2, #0]
 800cc2e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800cc30:	430b      	orrs	r3, r1
 800cc32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cc34:	697b      	ldr	r3, [r7, #20]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	685b      	ldr	r3, [r3, #4]
 800cc3a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800cc3e:	697b      	ldr	r3, [r7, #20]
 800cc40:	68da      	ldr	r2, [r3, #12]
 800cc42:	697b      	ldr	r3, [r7, #20]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	430a      	orrs	r2, r1
 800cc48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cc4a:	697b      	ldr	r3, [r7, #20]
 800cc4c:	699b      	ldr	r3, [r3, #24]
 800cc4e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cc50:	697b      	ldr	r3, [r7, #20]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	4ab3      	ldr	r2, [pc, #716]	@ (800cf24 <UART_SetConfig+0x32c>)
 800cc56:	4293      	cmp	r3, r2
 800cc58:	d004      	beq.n	800cc64 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cc5a:	697b      	ldr	r3, [r7, #20]
 800cc5c:	6a1b      	ldr	r3, [r3, #32]
 800cc5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cc60:	4313      	orrs	r3, r2
 800cc62:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cc64:	697b      	ldr	r3, [r7, #20]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	689a      	ldr	r2, [r3, #8]
 800cc6a:	4baf      	ldr	r3, [pc, #700]	@ (800cf28 <UART_SetConfig+0x330>)
 800cc6c:	4013      	ands	r3, r2
 800cc6e:	697a      	ldr	r2, [r7, #20]
 800cc70:	6812      	ldr	r2, [r2, #0]
 800cc72:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800cc74:	430b      	orrs	r3, r1
 800cc76:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cc78:	697b      	ldr	r3, [r7, #20]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc7e:	f023 010f 	bic.w	r1, r3, #15
 800cc82:	697b      	ldr	r3, [r7, #20]
 800cc84:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cc86:	697b      	ldr	r3, [r7, #20]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	430a      	orrs	r2, r1
 800cc8c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cc8e:	697b      	ldr	r3, [r7, #20]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	4aa6      	ldr	r2, [pc, #664]	@ (800cf2c <UART_SetConfig+0x334>)
 800cc94:	4293      	cmp	r3, r2
 800cc96:	d177      	bne.n	800cd88 <UART_SetConfig+0x190>
 800cc98:	4ba5      	ldr	r3, [pc, #660]	@ (800cf30 <UART_SetConfig+0x338>)
 800cc9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cc9c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cca0:	2b28      	cmp	r3, #40	@ 0x28
 800cca2:	d86d      	bhi.n	800cd80 <UART_SetConfig+0x188>
 800cca4:	a201      	add	r2, pc, #4	@ (adr r2, 800ccac <UART_SetConfig+0xb4>)
 800cca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccaa:	bf00      	nop
 800ccac:	0800cd51 	.word	0x0800cd51
 800ccb0:	0800cd81 	.word	0x0800cd81
 800ccb4:	0800cd81 	.word	0x0800cd81
 800ccb8:	0800cd81 	.word	0x0800cd81
 800ccbc:	0800cd81 	.word	0x0800cd81
 800ccc0:	0800cd81 	.word	0x0800cd81
 800ccc4:	0800cd81 	.word	0x0800cd81
 800ccc8:	0800cd81 	.word	0x0800cd81
 800cccc:	0800cd59 	.word	0x0800cd59
 800ccd0:	0800cd81 	.word	0x0800cd81
 800ccd4:	0800cd81 	.word	0x0800cd81
 800ccd8:	0800cd81 	.word	0x0800cd81
 800ccdc:	0800cd81 	.word	0x0800cd81
 800cce0:	0800cd81 	.word	0x0800cd81
 800cce4:	0800cd81 	.word	0x0800cd81
 800cce8:	0800cd81 	.word	0x0800cd81
 800ccec:	0800cd61 	.word	0x0800cd61
 800ccf0:	0800cd81 	.word	0x0800cd81
 800ccf4:	0800cd81 	.word	0x0800cd81
 800ccf8:	0800cd81 	.word	0x0800cd81
 800ccfc:	0800cd81 	.word	0x0800cd81
 800cd00:	0800cd81 	.word	0x0800cd81
 800cd04:	0800cd81 	.word	0x0800cd81
 800cd08:	0800cd81 	.word	0x0800cd81
 800cd0c:	0800cd69 	.word	0x0800cd69
 800cd10:	0800cd81 	.word	0x0800cd81
 800cd14:	0800cd81 	.word	0x0800cd81
 800cd18:	0800cd81 	.word	0x0800cd81
 800cd1c:	0800cd81 	.word	0x0800cd81
 800cd20:	0800cd81 	.word	0x0800cd81
 800cd24:	0800cd81 	.word	0x0800cd81
 800cd28:	0800cd81 	.word	0x0800cd81
 800cd2c:	0800cd71 	.word	0x0800cd71
 800cd30:	0800cd81 	.word	0x0800cd81
 800cd34:	0800cd81 	.word	0x0800cd81
 800cd38:	0800cd81 	.word	0x0800cd81
 800cd3c:	0800cd81 	.word	0x0800cd81
 800cd40:	0800cd81 	.word	0x0800cd81
 800cd44:	0800cd81 	.word	0x0800cd81
 800cd48:	0800cd81 	.word	0x0800cd81
 800cd4c:	0800cd79 	.word	0x0800cd79
 800cd50:	2301      	movs	r3, #1
 800cd52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd56:	e326      	b.n	800d3a6 <UART_SetConfig+0x7ae>
 800cd58:	2304      	movs	r3, #4
 800cd5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd5e:	e322      	b.n	800d3a6 <UART_SetConfig+0x7ae>
 800cd60:	2308      	movs	r3, #8
 800cd62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd66:	e31e      	b.n	800d3a6 <UART_SetConfig+0x7ae>
 800cd68:	2310      	movs	r3, #16
 800cd6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd6e:	e31a      	b.n	800d3a6 <UART_SetConfig+0x7ae>
 800cd70:	2320      	movs	r3, #32
 800cd72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd76:	e316      	b.n	800d3a6 <UART_SetConfig+0x7ae>
 800cd78:	2340      	movs	r3, #64	@ 0x40
 800cd7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd7e:	e312      	b.n	800d3a6 <UART_SetConfig+0x7ae>
 800cd80:	2380      	movs	r3, #128	@ 0x80
 800cd82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd86:	e30e      	b.n	800d3a6 <UART_SetConfig+0x7ae>
 800cd88:	697b      	ldr	r3, [r7, #20]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	4a69      	ldr	r2, [pc, #420]	@ (800cf34 <UART_SetConfig+0x33c>)
 800cd8e:	4293      	cmp	r3, r2
 800cd90:	d130      	bne.n	800cdf4 <UART_SetConfig+0x1fc>
 800cd92:	4b67      	ldr	r3, [pc, #412]	@ (800cf30 <UART_SetConfig+0x338>)
 800cd94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cd96:	f003 0307 	and.w	r3, r3, #7
 800cd9a:	2b05      	cmp	r3, #5
 800cd9c:	d826      	bhi.n	800cdec <UART_SetConfig+0x1f4>
 800cd9e:	a201      	add	r2, pc, #4	@ (adr r2, 800cda4 <UART_SetConfig+0x1ac>)
 800cda0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cda4:	0800cdbd 	.word	0x0800cdbd
 800cda8:	0800cdc5 	.word	0x0800cdc5
 800cdac:	0800cdcd 	.word	0x0800cdcd
 800cdb0:	0800cdd5 	.word	0x0800cdd5
 800cdb4:	0800cddd 	.word	0x0800cddd
 800cdb8:	0800cde5 	.word	0x0800cde5
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdc2:	e2f0      	b.n	800d3a6 <UART_SetConfig+0x7ae>
 800cdc4:	2304      	movs	r3, #4
 800cdc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdca:	e2ec      	b.n	800d3a6 <UART_SetConfig+0x7ae>
 800cdcc:	2308      	movs	r3, #8
 800cdce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdd2:	e2e8      	b.n	800d3a6 <UART_SetConfig+0x7ae>
 800cdd4:	2310      	movs	r3, #16
 800cdd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdda:	e2e4      	b.n	800d3a6 <UART_SetConfig+0x7ae>
 800cddc:	2320      	movs	r3, #32
 800cdde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cde2:	e2e0      	b.n	800d3a6 <UART_SetConfig+0x7ae>
 800cde4:	2340      	movs	r3, #64	@ 0x40
 800cde6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdea:	e2dc      	b.n	800d3a6 <UART_SetConfig+0x7ae>
 800cdec:	2380      	movs	r3, #128	@ 0x80
 800cdee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdf2:	e2d8      	b.n	800d3a6 <UART_SetConfig+0x7ae>
 800cdf4:	697b      	ldr	r3, [r7, #20]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	4a4f      	ldr	r2, [pc, #316]	@ (800cf38 <UART_SetConfig+0x340>)
 800cdfa:	4293      	cmp	r3, r2
 800cdfc:	d130      	bne.n	800ce60 <UART_SetConfig+0x268>
 800cdfe:	4b4c      	ldr	r3, [pc, #304]	@ (800cf30 <UART_SetConfig+0x338>)
 800ce00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce02:	f003 0307 	and.w	r3, r3, #7
 800ce06:	2b05      	cmp	r3, #5
 800ce08:	d826      	bhi.n	800ce58 <UART_SetConfig+0x260>
 800ce0a:	a201      	add	r2, pc, #4	@ (adr r2, 800ce10 <UART_SetConfig+0x218>)
 800ce0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce10:	0800ce29 	.word	0x0800ce29
 800ce14:	0800ce31 	.word	0x0800ce31
 800ce18:	0800ce39 	.word	0x0800ce39
 800ce1c:	0800ce41 	.word	0x0800ce41
 800ce20:	0800ce49 	.word	0x0800ce49
 800ce24:	0800ce51 	.word	0x0800ce51
 800ce28:	2300      	movs	r3, #0
 800ce2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce2e:	e2ba      	b.n	800d3a6 <UART_SetConfig+0x7ae>
 800ce30:	2304      	movs	r3, #4
 800ce32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce36:	e2b6      	b.n	800d3a6 <UART_SetConfig+0x7ae>
 800ce38:	2308      	movs	r3, #8
 800ce3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce3e:	e2b2      	b.n	800d3a6 <UART_SetConfig+0x7ae>
 800ce40:	2310      	movs	r3, #16
 800ce42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce46:	e2ae      	b.n	800d3a6 <UART_SetConfig+0x7ae>
 800ce48:	2320      	movs	r3, #32
 800ce4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce4e:	e2aa      	b.n	800d3a6 <UART_SetConfig+0x7ae>
 800ce50:	2340      	movs	r3, #64	@ 0x40
 800ce52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce56:	e2a6      	b.n	800d3a6 <UART_SetConfig+0x7ae>
 800ce58:	2380      	movs	r3, #128	@ 0x80
 800ce5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce5e:	e2a2      	b.n	800d3a6 <UART_SetConfig+0x7ae>
 800ce60:	697b      	ldr	r3, [r7, #20]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	4a35      	ldr	r2, [pc, #212]	@ (800cf3c <UART_SetConfig+0x344>)
 800ce66:	4293      	cmp	r3, r2
 800ce68:	d130      	bne.n	800cecc <UART_SetConfig+0x2d4>
 800ce6a:	4b31      	ldr	r3, [pc, #196]	@ (800cf30 <UART_SetConfig+0x338>)
 800ce6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce6e:	f003 0307 	and.w	r3, r3, #7
 800ce72:	2b05      	cmp	r3, #5
 800ce74:	d826      	bhi.n	800cec4 <UART_SetConfig+0x2cc>
 800ce76:	a201      	add	r2, pc, #4	@ (adr r2, 800ce7c <UART_SetConfig+0x284>)
 800ce78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce7c:	0800ce95 	.word	0x0800ce95
 800ce80:	0800ce9d 	.word	0x0800ce9d
 800ce84:	0800cea5 	.word	0x0800cea5
 800ce88:	0800cead 	.word	0x0800cead
 800ce8c:	0800ceb5 	.word	0x0800ceb5
 800ce90:	0800cebd 	.word	0x0800cebd
 800ce94:	2300      	movs	r3, #0
 800ce96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce9a:	e284      	b.n	800d3a6 <UART_SetConfig+0x7ae>
 800ce9c:	2304      	movs	r3, #4
 800ce9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cea2:	e280      	b.n	800d3a6 <UART_SetConfig+0x7ae>
 800cea4:	2308      	movs	r3, #8
 800cea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ceaa:	e27c      	b.n	800d3a6 <UART_SetConfig+0x7ae>
 800ceac:	2310      	movs	r3, #16
 800ceae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ceb2:	e278      	b.n	800d3a6 <UART_SetConfig+0x7ae>
 800ceb4:	2320      	movs	r3, #32
 800ceb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ceba:	e274      	b.n	800d3a6 <UART_SetConfig+0x7ae>
 800cebc:	2340      	movs	r3, #64	@ 0x40
 800cebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cec2:	e270      	b.n	800d3a6 <UART_SetConfig+0x7ae>
 800cec4:	2380      	movs	r3, #128	@ 0x80
 800cec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ceca:	e26c      	b.n	800d3a6 <UART_SetConfig+0x7ae>
 800cecc:	697b      	ldr	r3, [r7, #20]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	4a1b      	ldr	r2, [pc, #108]	@ (800cf40 <UART_SetConfig+0x348>)
 800ced2:	4293      	cmp	r3, r2
 800ced4:	d142      	bne.n	800cf5c <UART_SetConfig+0x364>
 800ced6:	4b16      	ldr	r3, [pc, #88]	@ (800cf30 <UART_SetConfig+0x338>)
 800ced8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ceda:	f003 0307 	and.w	r3, r3, #7
 800cede:	2b05      	cmp	r3, #5
 800cee0:	d838      	bhi.n	800cf54 <UART_SetConfig+0x35c>
 800cee2:	a201      	add	r2, pc, #4	@ (adr r2, 800cee8 <UART_SetConfig+0x2f0>)
 800cee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cee8:	0800cf01 	.word	0x0800cf01
 800ceec:	0800cf09 	.word	0x0800cf09
 800cef0:	0800cf11 	.word	0x0800cf11
 800cef4:	0800cf19 	.word	0x0800cf19
 800cef8:	0800cf45 	.word	0x0800cf45
 800cefc:	0800cf4d 	.word	0x0800cf4d
 800cf00:	2300      	movs	r3, #0
 800cf02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf06:	e24e      	b.n	800d3a6 <UART_SetConfig+0x7ae>
 800cf08:	2304      	movs	r3, #4
 800cf0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf0e:	e24a      	b.n	800d3a6 <UART_SetConfig+0x7ae>
 800cf10:	2308      	movs	r3, #8
 800cf12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf16:	e246      	b.n	800d3a6 <UART_SetConfig+0x7ae>
 800cf18:	2310      	movs	r3, #16
 800cf1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf1e:	e242      	b.n	800d3a6 <UART_SetConfig+0x7ae>
 800cf20:	cfff69f3 	.word	0xcfff69f3
 800cf24:	58000c00 	.word	0x58000c00
 800cf28:	11fff4ff 	.word	0x11fff4ff
 800cf2c:	40011000 	.word	0x40011000
 800cf30:	58024400 	.word	0x58024400
 800cf34:	40004400 	.word	0x40004400
 800cf38:	40004800 	.word	0x40004800
 800cf3c:	40004c00 	.word	0x40004c00
 800cf40:	40005000 	.word	0x40005000
 800cf44:	2320      	movs	r3, #32
 800cf46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf4a:	e22c      	b.n	800d3a6 <UART_SetConfig+0x7ae>
 800cf4c:	2340      	movs	r3, #64	@ 0x40
 800cf4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf52:	e228      	b.n	800d3a6 <UART_SetConfig+0x7ae>
 800cf54:	2380      	movs	r3, #128	@ 0x80
 800cf56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf5a:	e224      	b.n	800d3a6 <UART_SetConfig+0x7ae>
 800cf5c:	697b      	ldr	r3, [r7, #20]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	4ab1      	ldr	r2, [pc, #708]	@ (800d228 <UART_SetConfig+0x630>)
 800cf62:	4293      	cmp	r3, r2
 800cf64:	d176      	bne.n	800d054 <UART_SetConfig+0x45c>
 800cf66:	4bb1      	ldr	r3, [pc, #708]	@ (800d22c <UART_SetConfig+0x634>)
 800cf68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cf6a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cf6e:	2b28      	cmp	r3, #40	@ 0x28
 800cf70:	d86c      	bhi.n	800d04c <UART_SetConfig+0x454>
 800cf72:	a201      	add	r2, pc, #4	@ (adr r2, 800cf78 <UART_SetConfig+0x380>)
 800cf74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf78:	0800d01d 	.word	0x0800d01d
 800cf7c:	0800d04d 	.word	0x0800d04d
 800cf80:	0800d04d 	.word	0x0800d04d
 800cf84:	0800d04d 	.word	0x0800d04d
 800cf88:	0800d04d 	.word	0x0800d04d
 800cf8c:	0800d04d 	.word	0x0800d04d
 800cf90:	0800d04d 	.word	0x0800d04d
 800cf94:	0800d04d 	.word	0x0800d04d
 800cf98:	0800d025 	.word	0x0800d025
 800cf9c:	0800d04d 	.word	0x0800d04d
 800cfa0:	0800d04d 	.word	0x0800d04d
 800cfa4:	0800d04d 	.word	0x0800d04d
 800cfa8:	0800d04d 	.word	0x0800d04d
 800cfac:	0800d04d 	.word	0x0800d04d
 800cfb0:	0800d04d 	.word	0x0800d04d
 800cfb4:	0800d04d 	.word	0x0800d04d
 800cfb8:	0800d02d 	.word	0x0800d02d
 800cfbc:	0800d04d 	.word	0x0800d04d
 800cfc0:	0800d04d 	.word	0x0800d04d
 800cfc4:	0800d04d 	.word	0x0800d04d
 800cfc8:	0800d04d 	.word	0x0800d04d
 800cfcc:	0800d04d 	.word	0x0800d04d
 800cfd0:	0800d04d 	.word	0x0800d04d
 800cfd4:	0800d04d 	.word	0x0800d04d
 800cfd8:	0800d035 	.word	0x0800d035
 800cfdc:	0800d04d 	.word	0x0800d04d
 800cfe0:	0800d04d 	.word	0x0800d04d
 800cfe4:	0800d04d 	.word	0x0800d04d
 800cfe8:	0800d04d 	.word	0x0800d04d
 800cfec:	0800d04d 	.word	0x0800d04d
 800cff0:	0800d04d 	.word	0x0800d04d
 800cff4:	0800d04d 	.word	0x0800d04d
 800cff8:	0800d03d 	.word	0x0800d03d
 800cffc:	0800d04d 	.word	0x0800d04d
 800d000:	0800d04d 	.word	0x0800d04d
 800d004:	0800d04d 	.word	0x0800d04d
 800d008:	0800d04d 	.word	0x0800d04d
 800d00c:	0800d04d 	.word	0x0800d04d
 800d010:	0800d04d 	.word	0x0800d04d
 800d014:	0800d04d 	.word	0x0800d04d
 800d018:	0800d045 	.word	0x0800d045
 800d01c:	2301      	movs	r3, #1
 800d01e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d022:	e1c0      	b.n	800d3a6 <UART_SetConfig+0x7ae>
 800d024:	2304      	movs	r3, #4
 800d026:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d02a:	e1bc      	b.n	800d3a6 <UART_SetConfig+0x7ae>
 800d02c:	2308      	movs	r3, #8
 800d02e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d032:	e1b8      	b.n	800d3a6 <UART_SetConfig+0x7ae>
 800d034:	2310      	movs	r3, #16
 800d036:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d03a:	e1b4      	b.n	800d3a6 <UART_SetConfig+0x7ae>
 800d03c:	2320      	movs	r3, #32
 800d03e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d042:	e1b0      	b.n	800d3a6 <UART_SetConfig+0x7ae>
 800d044:	2340      	movs	r3, #64	@ 0x40
 800d046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d04a:	e1ac      	b.n	800d3a6 <UART_SetConfig+0x7ae>
 800d04c:	2380      	movs	r3, #128	@ 0x80
 800d04e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d052:	e1a8      	b.n	800d3a6 <UART_SetConfig+0x7ae>
 800d054:	697b      	ldr	r3, [r7, #20]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	4a75      	ldr	r2, [pc, #468]	@ (800d230 <UART_SetConfig+0x638>)
 800d05a:	4293      	cmp	r3, r2
 800d05c:	d130      	bne.n	800d0c0 <UART_SetConfig+0x4c8>
 800d05e:	4b73      	ldr	r3, [pc, #460]	@ (800d22c <UART_SetConfig+0x634>)
 800d060:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d062:	f003 0307 	and.w	r3, r3, #7
 800d066:	2b05      	cmp	r3, #5
 800d068:	d826      	bhi.n	800d0b8 <UART_SetConfig+0x4c0>
 800d06a:	a201      	add	r2, pc, #4	@ (adr r2, 800d070 <UART_SetConfig+0x478>)
 800d06c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d070:	0800d089 	.word	0x0800d089
 800d074:	0800d091 	.word	0x0800d091
 800d078:	0800d099 	.word	0x0800d099
 800d07c:	0800d0a1 	.word	0x0800d0a1
 800d080:	0800d0a9 	.word	0x0800d0a9
 800d084:	0800d0b1 	.word	0x0800d0b1
 800d088:	2300      	movs	r3, #0
 800d08a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d08e:	e18a      	b.n	800d3a6 <UART_SetConfig+0x7ae>
 800d090:	2304      	movs	r3, #4
 800d092:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d096:	e186      	b.n	800d3a6 <UART_SetConfig+0x7ae>
 800d098:	2308      	movs	r3, #8
 800d09a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d09e:	e182      	b.n	800d3a6 <UART_SetConfig+0x7ae>
 800d0a0:	2310      	movs	r3, #16
 800d0a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0a6:	e17e      	b.n	800d3a6 <UART_SetConfig+0x7ae>
 800d0a8:	2320      	movs	r3, #32
 800d0aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0ae:	e17a      	b.n	800d3a6 <UART_SetConfig+0x7ae>
 800d0b0:	2340      	movs	r3, #64	@ 0x40
 800d0b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0b6:	e176      	b.n	800d3a6 <UART_SetConfig+0x7ae>
 800d0b8:	2380      	movs	r3, #128	@ 0x80
 800d0ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0be:	e172      	b.n	800d3a6 <UART_SetConfig+0x7ae>
 800d0c0:	697b      	ldr	r3, [r7, #20]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	4a5b      	ldr	r2, [pc, #364]	@ (800d234 <UART_SetConfig+0x63c>)
 800d0c6:	4293      	cmp	r3, r2
 800d0c8:	d130      	bne.n	800d12c <UART_SetConfig+0x534>
 800d0ca:	4b58      	ldr	r3, [pc, #352]	@ (800d22c <UART_SetConfig+0x634>)
 800d0cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d0ce:	f003 0307 	and.w	r3, r3, #7
 800d0d2:	2b05      	cmp	r3, #5
 800d0d4:	d826      	bhi.n	800d124 <UART_SetConfig+0x52c>
 800d0d6:	a201      	add	r2, pc, #4	@ (adr r2, 800d0dc <UART_SetConfig+0x4e4>)
 800d0d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0dc:	0800d0f5 	.word	0x0800d0f5
 800d0e0:	0800d0fd 	.word	0x0800d0fd
 800d0e4:	0800d105 	.word	0x0800d105
 800d0e8:	0800d10d 	.word	0x0800d10d
 800d0ec:	0800d115 	.word	0x0800d115
 800d0f0:	0800d11d 	.word	0x0800d11d
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0fa:	e154      	b.n	800d3a6 <UART_SetConfig+0x7ae>
 800d0fc:	2304      	movs	r3, #4
 800d0fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d102:	e150      	b.n	800d3a6 <UART_SetConfig+0x7ae>
 800d104:	2308      	movs	r3, #8
 800d106:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d10a:	e14c      	b.n	800d3a6 <UART_SetConfig+0x7ae>
 800d10c:	2310      	movs	r3, #16
 800d10e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d112:	e148      	b.n	800d3a6 <UART_SetConfig+0x7ae>
 800d114:	2320      	movs	r3, #32
 800d116:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d11a:	e144      	b.n	800d3a6 <UART_SetConfig+0x7ae>
 800d11c:	2340      	movs	r3, #64	@ 0x40
 800d11e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d122:	e140      	b.n	800d3a6 <UART_SetConfig+0x7ae>
 800d124:	2380      	movs	r3, #128	@ 0x80
 800d126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d12a:	e13c      	b.n	800d3a6 <UART_SetConfig+0x7ae>
 800d12c:	697b      	ldr	r3, [r7, #20]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	4a41      	ldr	r2, [pc, #260]	@ (800d238 <UART_SetConfig+0x640>)
 800d132:	4293      	cmp	r3, r2
 800d134:	f040 8082 	bne.w	800d23c <UART_SetConfig+0x644>
 800d138:	4b3c      	ldr	r3, [pc, #240]	@ (800d22c <UART_SetConfig+0x634>)
 800d13a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d13c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d140:	2b28      	cmp	r3, #40	@ 0x28
 800d142:	d86d      	bhi.n	800d220 <UART_SetConfig+0x628>
 800d144:	a201      	add	r2, pc, #4	@ (adr r2, 800d14c <UART_SetConfig+0x554>)
 800d146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d14a:	bf00      	nop
 800d14c:	0800d1f1 	.word	0x0800d1f1
 800d150:	0800d221 	.word	0x0800d221
 800d154:	0800d221 	.word	0x0800d221
 800d158:	0800d221 	.word	0x0800d221
 800d15c:	0800d221 	.word	0x0800d221
 800d160:	0800d221 	.word	0x0800d221
 800d164:	0800d221 	.word	0x0800d221
 800d168:	0800d221 	.word	0x0800d221
 800d16c:	0800d1f9 	.word	0x0800d1f9
 800d170:	0800d221 	.word	0x0800d221
 800d174:	0800d221 	.word	0x0800d221
 800d178:	0800d221 	.word	0x0800d221
 800d17c:	0800d221 	.word	0x0800d221
 800d180:	0800d221 	.word	0x0800d221
 800d184:	0800d221 	.word	0x0800d221
 800d188:	0800d221 	.word	0x0800d221
 800d18c:	0800d201 	.word	0x0800d201
 800d190:	0800d221 	.word	0x0800d221
 800d194:	0800d221 	.word	0x0800d221
 800d198:	0800d221 	.word	0x0800d221
 800d19c:	0800d221 	.word	0x0800d221
 800d1a0:	0800d221 	.word	0x0800d221
 800d1a4:	0800d221 	.word	0x0800d221
 800d1a8:	0800d221 	.word	0x0800d221
 800d1ac:	0800d209 	.word	0x0800d209
 800d1b0:	0800d221 	.word	0x0800d221
 800d1b4:	0800d221 	.word	0x0800d221
 800d1b8:	0800d221 	.word	0x0800d221
 800d1bc:	0800d221 	.word	0x0800d221
 800d1c0:	0800d221 	.word	0x0800d221
 800d1c4:	0800d221 	.word	0x0800d221
 800d1c8:	0800d221 	.word	0x0800d221
 800d1cc:	0800d211 	.word	0x0800d211
 800d1d0:	0800d221 	.word	0x0800d221
 800d1d4:	0800d221 	.word	0x0800d221
 800d1d8:	0800d221 	.word	0x0800d221
 800d1dc:	0800d221 	.word	0x0800d221
 800d1e0:	0800d221 	.word	0x0800d221
 800d1e4:	0800d221 	.word	0x0800d221
 800d1e8:	0800d221 	.word	0x0800d221
 800d1ec:	0800d219 	.word	0x0800d219
 800d1f0:	2301      	movs	r3, #1
 800d1f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1f6:	e0d6      	b.n	800d3a6 <UART_SetConfig+0x7ae>
 800d1f8:	2304      	movs	r3, #4
 800d1fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1fe:	e0d2      	b.n	800d3a6 <UART_SetConfig+0x7ae>
 800d200:	2308      	movs	r3, #8
 800d202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d206:	e0ce      	b.n	800d3a6 <UART_SetConfig+0x7ae>
 800d208:	2310      	movs	r3, #16
 800d20a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d20e:	e0ca      	b.n	800d3a6 <UART_SetConfig+0x7ae>
 800d210:	2320      	movs	r3, #32
 800d212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d216:	e0c6      	b.n	800d3a6 <UART_SetConfig+0x7ae>
 800d218:	2340      	movs	r3, #64	@ 0x40
 800d21a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d21e:	e0c2      	b.n	800d3a6 <UART_SetConfig+0x7ae>
 800d220:	2380      	movs	r3, #128	@ 0x80
 800d222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d226:	e0be      	b.n	800d3a6 <UART_SetConfig+0x7ae>
 800d228:	40011400 	.word	0x40011400
 800d22c:	58024400 	.word	0x58024400
 800d230:	40007800 	.word	0x40007800
 800d234:	40007c00 	.word	0x40007c00
 800d238:	40011800 	.word	0x40011800
 800d23c:	697b      	ldr	r3, [r7, #20]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	4aad      	ldr	r2, [pc, #692]	@ (800d4f8 <UART_SetConfig+0x900>)
 800d242:	4293      	cmp	r3, r2
 800d244:	d176      	bne.n	800d334 <UART_SetConfig+0x73c>
 800d246:	4bad      	ldr	r3, [pc, #692]	@ (800d4fc <UART_SetConfig+0x904>)
 800d248:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d24a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d24e:	2b28      	cmp	r3, #40	@ 0x28
 800d250:	d86c      	bhi.n	800d32c <UART_SetConfig+0x734>
 800d252:	a201      	add	r2, pc, #4	@ (adr r2, 800d258 <UART_SetConfig+0x660>)
 800d254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d258:	0800d2fd 	.word	0x0800d2fd
 800d25c:	0800d32d 	.word	0x0800d32d
 800d260:	0800d32d 	.word	0x0800d32d
 800d264:	0800d32d 	.word	0x0800d32d
 800d268:	0800d32d 	.word	0x0800d32d
 800d26c:	0800d32d 	.word	0x0800d32d
 800d270:	0800d32d 	.word	0x0800d32d
 800d274:	0800d32d 	.word	0x0800d32d
 800d278:	0800d305 	.word	0x0800d305
 800d27c:	0800d32d 	.word	0x0800d32d
 800d280:	0800d32d 	.word	0x0800d32d
 800d284:	0800d32d 	.word	0x0800d32d
 800d288:	0800d32d 	.word	0x0800d32d
 800d28c:	0800d32d 	.word	0x0800d32d
 800d290:	0800d32d 	.word	0x0800d32d
 800d294:	0800d32d 	.word	0x0800d32d
 800d298:	0800d30d 	.word	0x0800d30d
 800d29c:	0800d32d 	.word	0x0800d32d
 800d2a0:	0800d32d 	.word	0x0800d32d
 800d2a4:	0800d32d 	.word	0x0800d32d
 800d2a8:	0800d32d 	.word	0x0800d32d
 800d2ac:	0800d32d 	.word	0x0800d32d
 800d2b0:	0800d32d 	.word	0x0800d32d
 800d2b4:	0800d32d 	.word	0x0800d32d
 800d2b8:	0800d315 	.word	0x0800d315
 800d2bc:	0800d32d 	.word	0x0800d32d
 800d2c0:	0800d32d 	.word	0x0800d32d
 800d2c4:	0800d32d 	.word	0x0800d32d
 800d2c8:	0800d32d 	.word	0x0800d32d
 800d2cc:	0800d32d 	.word	0x0800d32d
 800d2d0:	0800d32d 	.word	0x0800d32d
 800d2d4:	0800d32d 	.word	0x0800d32d
 800d2d8:	0800d31d 	.word	0x0800d31d
 800d2dc:	0800d32d 	.word	0x0800d32d
 800d2e0:	0800d32d 	.word	0x0800d32d
 800d2e4:	0800d32d 	.word	0x0800d32d
 800d2e8:	0800d32d 	.word	0x0800d32d
 800d2ec:	0800d32d 	.word	0x0800d32d
 800d2f0:	0800d32d 	.word	0x0800d32d
 800d2f4:	0800d32d 	.word	0x0800d32d
 800d2f8:	0800d325 	.word	0x0800d325
 800d2fc:	2301      	movs	r3, #1
 800d2fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d302:	e050      	b.n	800d3a6 <UART_SetConfig+0x7ae>
 800d304:	2304      	movs	r3, #4
 800d306:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d30a:	e04c      	b.n	800d3a6 <UART_SetConfig+0x7ae>
 800d30c:	2308      	movs	r3, #8
 800d30e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d312:	e048      	b.n	800d3a6 <UART_SetConfig+0x7ae>
 800d314:	2310      	movs	r3, #16
 800d316:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d31a:	e044      	b.n	800d3a6 <UART_SetConfig+0x7ae>
 800d31c:	2320      	movs	r3, #32
 800d31e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d322:	e040      	b.n	800d3a6 <UART_SetConfig+0x7ae>
 800d324:	2340      	movs	r3, #64	@ 0x40
 800d326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d32a:	e03c      	b.n	800d3a6 <UART_SetConfig+0x7ae>
 800d32c:	2380      	movs	r3, #128	@ 0x80
 800d32e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d332:	e038      	b.n	800d3a6 <UART_SetConfig+0x7ae>
 800d334:	697b      	ldr	r3, [r7, #20]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	4a71      	ldr	r2, [pc, #452]	@ (800d500 <UART_SetConfig+0x908>)
 800d33a:	4293      	cmp	r3, r2
 800d33c:	d130      	bne.n	800d3a0 <UART_SetConfig+0x7a8>
 800d33e:	4b6f      	ldr	r3, [pc, #444]	@ (800d4fc <UART_SetConfig+0x904>)
 800d340:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d342:	f003 0307 	and.w	r3, r3, #7
 800d346:	2b05      	cmp	r3, #5
 800d348:	d826      	bhi.n	800d398 <UART_SetConfig+0x7a0>
 800d34a:	a201      	add	r2, pc, #4	@ (adr r2, 800d350 <UART_SetConfig+0x758>)
 800d34c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d350:	0800d369 	.word	0x0800d369
 800d354:	0800d371 	.word	0x0800d371
 800d358:	0800d379 	.word	0x0800d379
 800d35c:	0800d381 	.word	0x0800d381
 800d360:	0800d389 	.word	0x0800d389
 800d364:	0800d391 	.word	0x0800d391
 800d368:	2302      	movs	r3, #2
 800d36a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d36e:	e01a      	b.n	800d3a6 <UART_SetConfig+0x7ae>
 800d370:	2304      	movs	r3, #4
 800d372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d376:	e016      	b.n	800d3a6 <UART_SetConfig+0x7ae>
 800d378:	2308      	movs	r3, #8
 800d37a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d37e:	e012      	b.n	800d3a6 <UART_SetConfig+0x7ae>
 800d380:	2310      	movs	r3, #16
 800d382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d386:	e00e      	b.n	800d3a6 <UART_SetConfig+0x7ae>
 800d388:	2320      	movs	r3, #32
 800d38a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d38e:	e00a      	b.n	800d3a6 <UART_SetConfig+0x7ae>
 800d390:	2340      	movs	r3, #64	@ 0x40
 800d392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d396:	e006      	b.n	800d3a6 <UART_SetConfig+0x7ae>
 800d398:	2380      	movs	r3, #128	@ 0x80
 800d39a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d39e:	e002      	b.n	800d3a6 <UART_SetConfig+0x7ae>
 800d3a0:	2380      	movs	r3, #128	@ 0x80
 800d3a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d3a6:	697b      	ldr	r3, [r7, #20]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	4a55      	ldr	r2, [pc, #340]	@ (800d500 <UART_SetConfig+0x908>)
 800d3ac:	4293      	cmp	r3, r2
 800d3ae:	f040 80f8 	bne.w	800d5a2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d3b2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d3b6:	2b20      	cmp	r3, #32
 800d3b8:	dc46      	bgt.n	800d448 <UART_SetConfig+0x850>
 800d3ba:	2b02      	cmp	r3, #2
 800d3bc:	db75      	blt.n	800d4aa <UART_SetConfig+0x8b2>
 800d3be:	3b02      	subs	r3, #2
 800d3c0:	2b1e      	cmp	r3, #30
 800d3c2:	d872      	bhi.n	800d4aa <UART_SetConfig+0x8b2>
 800d3c4:	a201      	add	r2, pc, #4	@ (adr r2, 800d3cc <UART_SetConfig+0x7d4>)
 800d3c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3ca:	bf00      	nop
 800d3cc:	0800d44f 	.word	0x0800d44f
 800d3d0:	0800d4ab 	.word	0x0800d4ab
 800d3d4:	0800d457 	.word	0x0800d457
 800d3d8:	0800d4ab 	.word	0x0800d4ab
 800d3dc:	0800d4ab 	.word	0x0800d4ab
 800d3e0:	0800d4ab 	.word	0x0800d4ab
 800d3e4:	0800d467 	.word	0x0800d467
 800d3e8:	0800d4ab 	.word	0x0800d4ab
 800d3ec:	0800d4ab 	.word	0x0800d4ab
 800d3f0:	0800d4ab 	.word	0x0800d4ab
 800d3f4:	0800d4ab 	.word	0x0800d4ab
 800d3f8:	0800d4ab 	.word	0x0800d4ab
 800d3fc:	0800d4ab 	.word	0x0800d4ab
 800d400:	0800d4ab 	.word	0x0800d4ab
 800d404:	0800d477 	.word	0x0800d477
 800d408:	0800d4ab 	.word	0x0800d4ab
 800d40c:	0800d4ab 	.word	0x0800d4ab
 800d410:	0800d4ab 	.word	0x0800d4ab
 800d414:	0800d4ab 	.word	0x0800d4ab
 800d418:	0800d4ab 	.word	0x0800d4ab
 800d41c:	0800d4ab 	.word	0x0800d4ab
 800d420:	0800d4ab 	.word	0x0800d4ab
 800d424:	0800d4ab 	.word	0x0800d4ab
 800d428:	0800d4ab 	.word	0x0800d4ab
 800d42c:	0800d4ab 	.word	0x0800d4ab
 800d430:	0800d4ab 	.word	0x0800d4ab
 800d434:	0800d4ab 	.word	0x0800d4ab
 800d438:	0800d4ab 	.word	0x0800d4ab
 800d43c:	0800d4ab 	.word	0x0800d4ab
 800d440:	0800d4ab 	.word	0x0800d4ab
 800d444:	0800d49d 	.word	0x0800d49d
 800d448:	2b40      	cmp	r3, #64	@ 0x40
 800d44a:	d02a      	beq.n	800d4a2 <UART_SetConfig+0x8aa>
 800d44c:	e02d      	b.n	800d4aa <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d44e:	f7fc f8c3 	bl	80095d8 <HAL_RCCEx_GetD3PCLK1Freq>
 800d452:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d454:	e02f      	b.n	800d4b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d456:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d45a:	4618      	mov	r0, r3
 800d45c:	f7fc f8d2 	bl	8009604 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d462:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d464:	e027      	b.n	800d4b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d466:	f107 0318 	add.w	r3, r7, #24
 800d46a:	4618      	mov	r0, r3
 800d46c:	f7fc fa1e 	bl	80098ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d470:	69fb      	ldr	r3, [r7, #28]
 800d472:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d474:	e01f      	b.n	800d4b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d476:	4b21      	ldr	r3, [pc, #132]	@ (800d4fc <UART_SetConfig+0x904>)
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	f003 0320 	and.w	r3, r3, #32
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d009      	beq.n	800d496 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d482:	4b1e      	ldr	r3, [pc, #120]	@ (800d4fc <UART_SetConfig+0x904>)
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	08db      	lsrs	r3, r3, #3
 800d488:	f003 0303 	and.w	r3, r3, #3
 800d48c:	4a1d      	ldr	r2, [pc, #116]	@ (800d504 <UART_SetConfig+0x90c>)
 800d48e:	fa22 f303 	lsr.w	r3, r2, r3
 800d492:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d494:	e00f      	b.n	800d4b6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d496:	4b1b      	ldr	r3, [pc, #108]	@ (800d504 <UART_SetConfig+0x90c>)
 800d498:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d49a:	e00c      	b.n	800d4b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d49c:	4b1a      	ldr	r3, [pc, #104]	@ (800d508 <UART_SetConfig+0x910>)
 800d49e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d4a0:	e009      	b.n	800d4b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d4a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d4a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d4a8:	e005      	b.n	800d4b6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d4ae:	2301      	movs	r3, #1
 800d4b0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d4b4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d4b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	f000 81ee 	beq.w	800d89a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d4be:	697b      	ldr	r3, [r7, #20]
 800d4c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4c2:	4a12      	ldr	r2, [pc, #72]	@ (800d50c <UART_SetConfig+0x914>)
 800d4c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d4c8:	461a      	mov	r2, r3
 800d4ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4cc:	fbb3 f3f2 	udiv	r3, r3, r2
 800d4d0:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d4d2:	697b      	ldr	r3, [r7, #20]
 800d4d4:	685a      	ldr	r2, [r3, #4]
 800d4d6:	4613      	mov	r3, r2
 800d4d8:	005b      	lsls	r3, r3, #1
 800d4da:	4413      	add	r3, r2
 800d4dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d4de:	429a      	cmp	r2, r3
 800d4e0:	d305      	bcc.n	800d4ee <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d4e2:	697b      	ldr	r3, [r7, #20]
 800d4e4:	685b      	ldr	r3, [r3, #4]
 800d4e6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d4e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d4ea:	429a      	cmp	r2, r3
 800d4ec:	d910      	bls.n	800d510 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800d4ee:	2301      	movs	r3, #1
 800d4f0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d4f4:	e1d1      	b.n	800d89a <UART_SetConfig+0xca2>
 800d4f6:	bf00      	nop
 800d4f8:	40011c00 	.word	0x40011c00
 800d4fc:	58024400 	.word	0x58024400
 800d500:	58000c00 	.word	0x58000c00
 800d504:	03d09000 	.word	0x03d09000
 800d508:	003d0900 	.word	0x003d0900
 800d50c:	08012ab8 	.word	0x08012ab8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d510:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d512:	2200      	movs	r2, #0
 800d514:	60bb      	str	r3, [r7, #8]
 800d516:	60fa      	str	r2, [r7, #12]
 800d518:	697b      	ldr	r3, [r7, #20]
 800d51a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d51c:	4ac0      	ldr	r2, [pc, #768]	@ (800d820 <UART_SetConfig+0xc28>)
 800d51e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d522:	b29b      	uxth	r3, r3
 800d524:	2200      	movs	r2, #0
 800d526:	603b      	str	r3, [r7, #0]
 800d528:	607a      	str	r2, [r7, #4]
 800d52a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d52e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d532:	f7f2 ff2d 	bl	8000390 <__aeabi_uldivmod>
 800d536:	4602      	mov	r2, r0
 800d538:	460b      	mov	r3, r1
 800d53a:	4610      	mov	r0, r2
 800d53c:	4619      	mov	r1, r3
 800d53e:	f04f 0200 	mov.w	r2, #0
 800d542:	f04f 0300 	mov.w	r3, #0
 800d546:	020b      	lsls	r3, r1, #8
 800d548:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d54c:	0202      	lsls	r2, r0, #8
 800d54e:	6979      	ldr	r1, [r7, #20]
 800d550:	6849      	ldr	r1, [r1, #4]
 800d552:	0849      	lsrs	r1, r1, #1
 800d554:	2000      	movs	r0, #0
 800d556:	460c      	mov	r4, r1
 800d558:	4605      	mov	r5, r0
 800d55a:	eb12 0804 	adds.w	r8, r2, r4
 800d55e:	eb43 0905 	adc.w	r9, r3, r5
 800d562:	697b      	ldr	r3, [r7, #20]
 800d564:	685b      	ldr	r3, [r3, #4]
 800d566:	2200      	movs	r2, #0
 800d568:	469a      	mov	sl, r3
 800d56a:	4693      	mov	fp, r2
 800d56c:	4652      	mov	r2, sl
 800d56e:	465b      	mov	r3, fp
 800d570:	4640      	mov	r0, r8
 800d572:	4649      	mov	r1, r9
 800d574:	f7f2 ff0c 	bl	8000390 <__aeabi_uldivmod>
 800d578:	4602      	mov	r2, r0
 800d57a:	460b      	mov	r3, r1
 800d57c:	4613      	mov	r3, r2
 800d57e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d582:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d586:	d308      	bcc.n	800d59a <UART_SetConfig+0x9a2>
 800d588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d58a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d58e:	d204      	bcs.n	800d59a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800d590:	697b      	ldr	r3, [r7, #20]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d596:	60da      	str	r2, [r3, #12]
 800d598:	e17f      	b.n	800d89a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800d59a:	2301      	movs	r3, #1
 800d59c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d5a0:	e17b      	b.n	800d89a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d5a2:	697b      	ldr	r3, [r7, #20]
 800d5a4:	69db      	ldr	r3, [r3, #28]
 800d5a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d5aa:	f040 80bd 	bne.w	800d728 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800d5ae:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d5b2:	2b20      	cmp	r3, #32
 800d5b4:	dc48      	bgt.n	800d648 <UART_SetConfig+0xa50>
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	db7b      	blt.n	800d6b2 <UART_SetConfig+0xaba>
 800d5ba:	2b20      	cmp	r3, #32
 800d5bc:	d879      	bhi.n	800d6b2 <UART_SetConfig+0xaba>
 800d5be:	a201      	add	r2, pc, #4	@ (adr r2, 800d5c4 <UART_SetConfig+0x9cc>)
 800d5c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5c4:	0800d64f 	.word	0x0800d64f
 800d5c8:	0800d657 	.word	0x0800d657
 800d5cc:	0800d6b3 	.word	0x0800d6b3
 800d5d0:	0800d6b3 	.word	0x0800d6b3
 800d5d4:	0800d65f 	.word	0x0800d65f
 800d5d8:	0800d6b3 	.word	0x0800d6b3
 800d5dc:	0800d6b3 	.word	0x0800d6b3
 800d5e0:	0800d6b3 	.word	0x0800d6b3
 800d5e4:	0800d66f 	.word	0x0800d66f
 800d5e8:	0800d6b3 	.word	0x0800d6b3
 800d5ec:	0800d6b3 	.word	0x0800d6b3
 800d5f0:	0800d6b3 	.word	0x0800d6b3
 800d5f4:	0800d6b3 	.word	0x0800d6b3
 800d5f8:	0800d6b3 	.word	0x0800d6b3
 800d5fc:	0800d6b3 	.word	0x0800d6b3
 800d600:	0800d6b3 	.word	0x0800d6b3
 800d604:	0800d67f 	.word	0x0800d67f
 800d608:	0800d6b3 	.word	0x0800d6b3
 800d60c:	0800d6b3 	.word	0x0800d6b3
 800d610:	0800d6b3 	.word	0x0800d6b3
 800d614:	0800d6b3 	.word	0x0800d6b3
 800d618:	0800d6b3 	.word	0x0800d6b3
 800d61c:	0800d6b3 	.word	0x0800d6b3
 800d620:	0800d6b3 	.word	0x0800d6b3
 800d624:	0800d6b3 	.word	0x0800d6b3
 800d628:	0800d6b3 	.word	0x0800d6b3
 800d62c:	0800d6b3 	.word	0x0800d6b3
 800d630:	0800d6b3 	.word	0x0800d6b3
 800d634:	0800d6b3 	.word	0x0800d6b3
 800d638:	0800d6b3 	.word	0x0800d6b3
 800d63c:	0800d6b3 	.word	0x0800d6b3
 800d640:	0800d6b3 	.word	0x0800d6b3
 800d644:	0800d6a5 	.word	0x0800d6a5
 800d648:	2b40      	cmp	r3, #64	@ 0x40
 800d64a:	d02e      	beq.n	800d6aa <UART_SetConfig+0xab2>
 800d64c:	e031      	b.n	800d6b2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d64e:	f7fa fdd9 	bl	8008204 <HAL_RCC_GetPCLK1Freq>
 800d652:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d654:	e033      	b.n	800d6be <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d656:	f7fa fdeb 	bl	8008230 <HAL_RCC_GetPCLK2Freq>
 800d65a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d65c:	e02f      	b.n	800d6be <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d65e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d662:	4618      	mov	r0, r3
 800d664:	f7fb ffce 	bl	8009604 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d66a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d66c:	e027      	b.n	800d6be <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d66e:	f107 0318 	add.w	r3, r7, #24
 800d672:	4618      	mov	r0, r3
 800d674:	f7fc f91a 	bl	80098ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d678:	69fb      	ldr	r3, [r7, #28]
 800d67a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d67c:	e01f      	b.n	800d6be <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d67e:	4b69      	ldr	r3, [pc, #420]	@ (800d824 <UART_SetConfig+0xc2c>)
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	f003 0320 	and.w	r3, r3, #32
 800d686:	2b00      	cmp	r3, #0
 800d688:	d009      	beq.n	800d69e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d68a:	4b66      	ldr	r3, [pc, #408]	@ (800d824 <UART_SetConfig+0xc2c>)
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	08db      	lsrs	r3, r3, #3
 800d690:	f003 0303 	and.w	r3, r3, #3
 800d694:	4a64      	ldr	r2, [pc, #400]	@ (800d828 <UART_SetConfig+0xc30>)
 800d696:	fa22 f303 	lsr.w	r3, r2, r3
 800d69a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d69c:	e00f      	b.n	800d6be <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800d69e:	4b62      	ldr	r3, [pc, #392]	@ (800d828 <UART_SetConfig+0xc30>)
 800d6a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d6a2:	e00c      	b.n	800d6be <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d6a4:	4b61      	ldr	r3, [pc, #388]	@ (800d82c <UART_SetConfig+0xc34>)
 800d6a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d6a8:	e009      	b.n	800d6be <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d6aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d6ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d6b0:	e005      	b.n	800d6be <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d6b6:	2301      	movs	r3, #1
 800d6b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d6bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d6be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	f000 80ea 	beq.w	800d89a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d6c6:	697b      	ldr	r3, [r7, #20]
 800d6c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d6ca:	4a55      	ldr	r2, [pc, #340]	@ (800d820 <UART_SetConfig+0xc28>)
 800d6cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d6d0:	461a      	mov	r2, r3
 800d6d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d6d4:	fbb3 f3f2 	udiv	r3, r3, r2
 800d6d8:	005a      	lsls	r2, r3, #1
 800d6da:	697b      	ldr	r3, [r7, #20]
 800d6dc:	685b      	ldr	r3, [r3, #4]
 800d6de:	085b      	lsrs	r3, r3, #1
 800d6e0:	441a      	add	r2, r3
 800d6e2:	697b      	ldr	r3, [r7, #20]
 800d6e4:	685b      	ldr	r3, [r3, #4]
 800d6e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d6ea:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d6ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6ee:	2b0f      	cmp	r3, #15
 800d6f0:	d916      	bls.n	800d720 <UART_SetConfig+0xb28>
 800d6f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d6f8:	d212      	bcs.n	800d720 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d6fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6fc:	b29b      	uxth	r3, r3
 800d6fe:	f023 030f 	bic.w	r3, r3, #15
 800d702:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d706:	085b      	lsrs	r3, r3, #1
 800d708:	b29b      	uxth	r3, r3
 800d70a:	f003 0307 	and.w	r3, r3, #7
 800d70e:	b29a      	uxth	r2, r3
 800d710:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d712:	4313      	orrs	r3, r2
 800d714:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800d716:	697b      	ldr	r3, [r7, #20]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800d71c:	60da      	str	r2, [r3, #12]
 800d71e:	e0bc      	b.n	800d89a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800d720:	2301      	movs	r3, #1
 800d722:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d726:	e0b8      	b.n	800d89a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d728:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d72c:	2b20      	cmp	r3, #32
 800d72e:	dc4b      	bgt.n	800d7c8 <UART_SetConfig+0xbd0>
 800d730:	2b00      	cmp	r3, #0
 800d732:	f2c0 8087 	blt.w	800d844 <UART_SetConfig+0xc4c>
 800d736:	2b20      	cmp	r3, #32
 800d738:	f200 8084 	bhi.w	800d844 <UART_SetConfig+0xc4c>
 800d73c:	a201      	add	r2, pc, #4	@ (adr r2, 800d744 <UART_SetConfig+0xb4c>)
 800d73e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d742:	bf00      	nop
 800d744:	0800d7cf 	.word	0x0800d7cf
 800d748:	0800d7d7 	.word	0x0800d7d7
 800d74c:	0800d845 	.word	0x0800d845
 800d750:	0800d845 	.word	0x0800d845
 800d754:	0800d7df 	.word	0x0800d7df
 800d758:	0800d845 	.word	0x0800d845
 800d75c:	0800d845 	.word	0x0800d845
 800d760:	0800d845 	.word	0x0800d845
 800d764:	0800d7ef 	.word	0x0800d7ef
 800d768:	0800d845 	.word	0x0800d845
 800d76c:	0800d845 	.word	0x0800d845
 800d770:	0800d845 	.word	0x0800d845
 800d774:	0800d845 	.word	0x0800d845
 800d778:	0800d845 	.word	0x0800d845
 800d77c:	0800d845 	.word	0x0800d845
 800d780:	0800d845 	.word	0x0800d845
 800d784:	0800d7ff 	.word	0x0800d7ff
 800d788:	0800d845 	.word	0x0800d845
 800d78c:	0800d845 	.word	0x0800d845
 800d790:	0800d845 	.word	0x0800d845
 800d794:	0800d845 	.word	0x0800d845
 800d798:	0800d845 	.word	0x0800d845
 800d79c:	0800d845 	.word	0x0800d845
 800d7a0:	0800d845 	.word	0x0800d845
 800d7a4:	0800d845 	.word	0x0800d845
 800d7a8:	0800d845 	.word	0x0800d845
 800d7ac:	0800d845 	.word	0x0800d845
 800d7b0:	0800d845 	.word	0x0800d845
 800d7b4:	0800d845 	.word	0x0800d845
 800d7b8:	0800d845 	.word	0x0800d845
 800d7bc:	0800d845 	.word	0x0800d845
 800d7c0:	0800d845 	.word	0x0800d845
 800d7c4:	0800d837 	.word	0x0800d837
 800d7c8:	2b40      	cmp	r3, #64	@ 0x40
 800d7ca:	d037      	beq.n	800d83c <UART_SetConfig+0xc44>
 800d7cc:	e03a      	b.n	800d844 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d7ce:	f7fa fd19 	bl	8008204 <HAL_RCC_GetPCLK1Freq>
 800d7d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d7d4:	e03c      	b.n	800d850 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d7d6:	f7fa fd2b 	bl	8008230 <HAL_RCC_GetPCLK2Freq>
 800d7da:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d7dc:	e038      	b.n	800d850 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d7de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	f7fb ff0e 	bl	8009604 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d7e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d7ec:	e030      	b.n	800d850 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d7ee:	f107 0318 	add.w	r3, r7, #24
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	f7fc f85a 	bl	80098ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d7f8:	69fb      	ldr	r3, [r7, #28]
 800d7fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d7fc:	e028      	b.n	800d850 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d7fe:	4b09      	ldr	r3, [pc, #36]	@ (800d824 <UART_SetConfig+0xc2c>)
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	f003 0320 	and.w	r3, r3, #32
 800d806:	2b00      	cmp	r3, #0
 800d808:	d012      	beq.n	800d830 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d80a:	4b06      	ldr	r3, [pc, #24]	@ (800d824 <UART_SetConfig+0xc2c>)
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	08db      	lsrs	r3, r3, #3
 800d810:	f003 0303 	and.w	r3, r3, #3
 800d814:	4a04      	ldr	r2, [pc, #16]	@ (800d828 <UART_SetConfig+0xc30>)
 800d816:	fa22 f303 	lsr.w	r3, r2, r3
 800d81a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d81c:	e018      	b.n	800d850 <UART_SetConfig+0xc58>
 800d81e:	bf00      	nop
 800d820:	08012ab8 	.word	0x08012ab8
 800d824:	58024400 	.word	0x58024400
 800d828:	03d09000 	.word	0x03d09000
 800d82c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800d830:	4b24      	ldr	r3, [pc, #144]	@ (800d8c4 <UART_SetConfig+0xccc>)
 800d832:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d834:	e00c      	b.n	800d850 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d836:	4b24      	ldr	r3, [pc, #144]	@ (800d8c8 <UART_SetConfig+0xcd0>)
 800d838:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d83a:	e009      	b.n	800d850 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d83c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d840:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d842:	e005      	b.n	800d850 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800d844:	2300      	movs	r3, #0
 800d846:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d848:	2301      	movs	r3, #1
 800d84a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d84e:	bf00      	nop
    }

    if (pclk != 0U)
 800d850:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d852:	2b00      	cmp	r3, #0
 800d854:	d021      	beq.n	800d89a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d856:	697b      	ldr	r3, [r7, #20]
 800d858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d85a:	4a1c      	ldr	r2, [pc, #112]	@ (800d8cc <UART_SetConfig+0xcd4>)
 800d85c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d860:	461a      	mov	r2, r3
 800d862:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d864:	fbb3 f2f2 	udiv	r2, r3, r2
 800d868:	697b      	ldr	r3, [r7, #20]
 800d86a:	685b      	ldr	r3, [r3, #4]
 800d86c:	085b      	lsrs	r3, r3, #1
 800d86e:	441a      	add	r2, r3
 800d870:	697b      	ldr	r3, [r7, #20]
 800d872:	685b      	ldr	r3, [r3, #4]
 800d874:	fbb2 f3f3 	udiv	r3, r2, r3
 800d878:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d87a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d87c:	2b0f      	cmp	r3, #15
 800d87e:	d909      	bls.n	800d894 <UART_SetConfig+0xc9c>
 800d880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d882:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d886:	d205      	bcs.n	800d894 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d88a:	b29a      	uxth	r2, r3
 800d88c:	697b      	ldr	r3, [r7, #20]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	60da      	str	r2, [r3, #12]
 800d892:	e002      	b.n	800d89a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800d894:	2301      	movs	r3, #1
 800d896:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d89a:	697b      	ldr	r3, [r7, #20]
 800d89c:	2201      	movs	r2, #1
 800d89e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d8a2:	697b      	ldr	r3, [r7, #20]
 800d8a4:	2201      	movs	r2, #1
 800d8a6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d8aa:	697b      	ldr	r3, [r7, #20]
 800d8ac:	2200      	movs	r2, #0
 800d8ae:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d8b0:	697b      	ldr	r3, [r7, #20]
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d8b6:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	3748      	adds	r7, #72	@ 0x48
 800d8be:	46bd      	mov	sp, r7
 800d8c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d8c4:	03d09000 	.word	0x03d09000
 800d8c8:	003d0900 	.word	0x003d0900
 800d8cc:	08012ab8 	.word	0x08012ab8

0800d8d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d8d0:	b480      	push	{r7}
 800d8d2:	b083      	sub	sp, #12
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8dc:	f003 0308 	and.w	r3, r3, #8
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d00a      	beq.n	800d8fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	685b      	ldr	r3, [r3, #4]
 800d8ea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	430a      	orrs	r2, r1
 800d8f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8fe:	f003 0301 	and.w	r3, r3, #1
 800d902:	2b00      	cmp	r3, #0
 800d904:	d00a      	beq.n	800d91c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	685b      	ldr	r3, [r3, #4]
 800d90c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	430a      	orrs	r2, r1
 800d91a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d920:	f003 0302 	and.w	r3, r3, #2
 800d924:	2b00      	cmp	r3, #0
 800d926:	d00a      	beq.n	800d93e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	685b      	ldr	r3, [r3, #4]
 800d92e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	430a      	orrs	r2, r1
 800d93c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d942:	f003 0304 	and.w	r3, r3, #4
 800d946:	2b00      	cmp	r3, #0
 800d948:	d00a      	beq.n	800d960 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	685b      	ldr	r3, [r3, #4]
 800d950:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	430a      	orrs	r2, r1
 800d95e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d964:	f003 0310 	and.w	r3, r3, #16
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d00a      	beq.n	800d982 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	689b      	ldr	r3, [r3, #8]
 800d972:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	430a      	orrs	r2, r1
 800d980:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d986:	f003 0320 	and.w	r3, r3, #32
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d00a      	beq.n	800d9a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	689b      	ldr	r3, [r3, #8]
 800d994:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	430a      	orrs	r2, r1
 800d9a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d9a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d01a      	beq.n	800d9e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	685b      	ldr	r3, [r3, #4]
 800d9b6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	430a      	orrs	r2, r1
 800d9c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d9ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d9ce:	d10a      	bne.n	800d9e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	685b      	ldr	r3, [r3, #4]
 800d9d6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	430a      	orrs	r2, r1
 800d9e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d9ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d00a      	beq.n	800da08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	685b      	ldr	r3, [r3, #4]
 800d9f8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	430a      	orrs	r2, r1
 800da06:	605a      	str	r2, [r3, #4]
  }
}
 800da08:	bf00      	nop
 800da0a:	370c      	adds	r7, #12
 800da0c:	46bd      	mov	sp, r7
 800da0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da12:	4770      	bx	lr

0800da14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800da14:	b580      	push	{r7, lr}
 800da16:	b098      	sub	sp, #96	@ 0x60
 800da18:	af02      	add	r7, sp, #8
 800da1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	2200      	movs	r2, #0
 800da20:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800da24:	f7f5 fd2a 	bl	800347c <HAL_GetTick>
 800da28:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	f003 0308 	and.w	r3, r3, #8
 800da34:	2b08      	cmp	r3, #8
 800da36:	d12f      	bne.n	800da98 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800da38:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800da3c:	9300      	str	r3, [sp, #0]
 800da3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da40:	2200      	movs	r2, #0
 800da42:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800da46:	6878      	ldr	r0, [r7, #4]
 800da48:	f000 f88e 	bl	800db68 <UART_WaitOnFlagUntilTimeout>
 800da4c:	4603      	mov	r3, r0
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d022      	beq.n	800da98 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da5a:	e853 3f00 	ldrex	r3, [r3]
 800da5e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800da60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800da66:	653b      	str	r3, [r7, #80]	@ 0x50
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	461a      	mov	r2, r3
 800da6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800da70:	647b      	str	r3, [r7, #68]	@ 0x44
 800da72:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da74:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800da76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800da78:	e841 2300 	strex	r3, r2, [r1]
 800da7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800da7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da80:	2b00      	cmp	r3, #0
 800da82:	d1e6      	bne.n	800da52 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	2220      	movs	r2, #32
 800da88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	2200      	movs	r2, #0
 800da90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800da94:	2303      	movs	r3, #3
 800da96:	e063      	b.n	800db60 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	f003 0304 	and.w	r3, r3, #4
 800daa2:	2b04      	cmp	r3, #4
 800daa4:	d149      	bne.n	800db3a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800daa6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800daaa:	9300      	str	r3, [sp, #0]
 800daac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800daae:	2200      	movs	r2, #0
 800dab0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800dab4:	6878      	ldr	r0, [r7, #4]
 800dab6:	f000 f857 	bl	800db68 <UART_WaitOnFlagUntilTimeout>
 800daba:	4603      	mov	r3, r0
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d03c      	beq.n	800db3a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dac8:	e853 3f00 	ldrex	r3, [r3]
 800dacc:	623b      	str	r3, [r7, #32]
   return(result);
 800dace:	6a3b      	ldr	r3, [r7, #32]
 800dad0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dad4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	461a      	mov	r2, r3
 800dadc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dade:	633b      	str	r3, [r7, #48]	@ 0x30
 800dae0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dae2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800dae4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dae6:	e841 2300 	strex	r3, r2, [r1]
 800daea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800daec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d1e6      	bne.n	800dac0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	3308      	adds	r3, #8
 800daf8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dafa:	693b      	ldr	r3, [r7, #16]
 800dafc:	e853 3f00 	ldrex	r3, [r3]
 800db00:	60fb      	str	r3, [r7, #12]
   return(result);
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	f023 0301 	bic.w	r3, r3, #1
 800db08:	64bb      	str	r3, [r7, #72]	@ 0x48
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	3308      	adds	r3, #8
 800db10:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800db12:	61fa      	str	r2, [r7, #28]
 800db14:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db16:	69b9      	ldr	r1, [r7, #24]
 800db18:	69fa      	ldr	r2, [r7, #28]
 800db1a:	e841 2300 	strex	r3, r2, [r1]
 800db1e:	617b      	str	r3, [r7, #20]
   return(result);
 800db20:	697b      	ldr	r3, [r7, #20]
 800db22:	2b00      	cmp	r3, #0
 800db24:	d1e5      	bne.n	800daf2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	2220      	movs	r2, #32
 800db2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	2200      	movs	r2, #0
 800db32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800db36:	2303      	movs	r3, #3
 800db38:	e012      	b.n	800db60 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	2220      	movs	r2, #32
 800db3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	2220      	movs	r2, #32
 800db46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	2200      	movs	r2, #0
 800db4e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	2200      	movs	r2, #0
 800db54:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	2200      	movs	r2, #0
 800db5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800db5e:	2300      	movs	r3, #0
}
 800db60:	4618      	mov	r0, r3
 800db62:	3758      	adds	r7, #88	@ 0x58
 800db64:	46bd      	mov	sp, r7
 800db66:	bd80      	pop	{r7, pc}

0800db68 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	b084      	sub	sp, #16
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	60f8      	str	r0, [r7, #12]
 800db70:	60b9      	str	r1, [r7, #8]
 800db72:	603b      	str	r3, [r7, #0]
 800db74:	4613      	mov	r3, r2
 800db76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800db78:	e04f      	b.n	800dc1a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800db7a:	69bb      	ldr	r3, [r7, #24]
 800db7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db80:	d04b      	beq.n	800dc1a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800db82:	f7f5 fc7b 	bl	800347c <HAL_GetTick>
 800db86:	4602      	mov	r2, r0
 800db88:	683b      	ldr	r3, [r7, #0]
 800db8a:	1ad3      	subs	r3, r2, r3
 800db8c:	69ba      	ldr	r2, [r7, #24]
 800db8e:	429a      	cmp	r2, r3
 800db90:	d302      	bcc.n	800db98 <UART_WaitOnFlagUntilTimeout+0x30>
 800db92:	69bb      	ldr	r3, [r7, #24]
 800db94:	2b00      	cmp	r3, #0
 800db96:	d101      	bne.n	800db9c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800db98:	2303      	movs	r3, #3
 800db9a:	e04e      	b.n	800dc3a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	f003 0304 	and.w	r3, r3, #4
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d037      	beq.n	800dc1a <UART_WaitOnFlagUntilTimeout+0xb2>
 800dbaa:	68bb      	ldr	r3, [r7, #8]
 800dbac:	2b80      	cmp	r3, #128	@ 0x80
 800dbae:	d034      	beq.n	800dc1a <UART_WaitOnFlagUntilTimeout+0xb2>
 800dbb0:	68bb      	ldr	r3, [r7, #8]
 800dbb2:	2b40      	cmp	r3, #64	@ 0x40
 800dbb4:	d031      	beq.n	800dc1a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	69db      	ldr	r3, [r3, #28]
 800dbbc:	f003 0308 	and.w	r3, r3, #8
 800dbc0:	2b08      	cmp	r3, #8
 800dbc2:	d110      	bne.n	800dbe6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	2208      	movs	r2, #8
 800dbca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800dbcc:	68f8      	ldr	r0, [r7, #12]
 800dbce:	f000 f921 	bl	800de14 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	2208      	movs	r2, #8
 800dbd6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	2200      	movs	r2, #0
 800dbde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800dbe2:	2301      	movs	r3, #1
 800dbe4:	e029      	b.n	800dc3a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	69db      	ldr	r3, [r3, #28]
 800dbec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800dbf0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800dbf4:	d111      	bne.n	800dc1a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800dbfe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800dc00:	68f8      	ldr	r0, [r7, #12]
 800dc02:	f000 f907 	bl	800de14 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	2220      	movs	r2, #32
 800dc0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	2200      	movs	r2, #0
 800dc12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800dc16:	2303      	movs	r3, #3
 800dc18:	e00f      	b.n	800dc3a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	69da      	ldr	r2, [r3, #28]
 800dc20:	68bb      	ldr	r3, [r7, #8]
 800dc22:	4013      	ands	r3, r2
 800dc24:	68ba      	ldr	r2, [r7, #8]
 800dc26:	429a      	cmp	r2, r3
 800dc28:	bf0c      	ite	eq
 800dc2a:	2301      	moveq	r3, #1
 800dc2c:	2300      	movne	r3, #0
 800dc2e:	b2db      	uxtb	r3, r3
 800dc30:	461a      	mov	r2, r3
 800dc32:	79fb      	ldrb	r3, [r7, #7]
 800dc34:	429a      	cmp	r2, r3
 800dc36:	d0a0      	beq.n	800db7a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800dc38:	2300      	movs	r3, #0
}
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	3710      	adds	r7, #16
 800dc3e:	46bd      	mov	sp, r7
 800dc40:	bd80      	pop	{r7, pc}
	...

0800dc44 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dc44:	b580      	push	{r7, lr}
 800dc46:	b096      	sub	sp, #88	@ 0x58
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	60f8      	str	r0, [r7, #12]
 800dc4c:	60b9      	str	r1, [r7, #8]
 800dc4e:	4613      	mov	r3, r2
 800dc50:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	68ba      	ldr	r2, [r7, #8]
 800dc56:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	88fa      	ldrh	r2, [r7, #6]
 800dc5c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	2200      	movs	r2, #0
 800dc64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	2222      	movs	r2, #34	@ 0x22
 800dc6c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d02d      	beq.n	800dcd6 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dc80:	4a40      	ldr	r2, [pc, #256]	@ (800dd84 <UART_Start_Receive_DMA+0x140>)
 800dc82:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dc8a:	4a3f      	ldr	r2, [pc, #252]	@ (800dd88 <UART_Start_Receive_DMA+0x144>)
 800dc8c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dc94:	4a3d      	ldr	r2, [pc, #244]	@ (800dd8c <UART_Start_Receive_DMA+0x148>)
 800dc96:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dc9e:	2200      	movs	r2, #0
 800dca0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	3324      	adds	r3, #36	@ 0x24
 800dcae:	4619      	mov	r1, r3
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dcb4:	461a      	mov	r2, r3
 800dcb6:	88fb      	ldrh	r3, [r7, #6]
 800dcb8:	f7f6 f926 	bl	8003f08 <HAL_DMA_Start_IT>
 800dcbc:	4603      	mov	r3, r0
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d009      	beq.n	800dcd6 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	2210      	movs	r2, #16
 800dcc6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	2220      	movs	r2, #32
 800dcce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800dcd2:	2301      	movs	r3, #1
 800dcd4:	e051      	b.n	800dd7a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	691b      	ldr	r3, [r3, #16]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d018      	beq.n	800dd10 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dce4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dce6:	e853 3f00 	ldrex	r3, [r3]
 800dcea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800dcec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800dcf2:	657b      	str	r3, [r7, #84]	@ 0x54
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	461a      	mov	r2, r3
 800dcfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dcfc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dcfe:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd00:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800dd02:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dd04:	e841 2300 	strex	r3, r2, [r1]
 800dd08:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800dd0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d1e6      	bne.n	800dcde <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	3308      	adds	r3, #8
 800dd16:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd1a:	e853 3f00 	ldrex	r3, [r3]
 800dd1e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800dd20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd22:	f043 0301 	orr.w	r3, r3, #1
 800dd26:	653b      	str	r3, [r7, #80]	@ 0x50
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	3308      	adds	r3, #8
 800dd2e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800dd30:	637a      	str	r2, [r7, #52]	@ 0x34
 800dd32:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd34:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800dd36:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dd38:	e841 2300 	strex	r3, r2, [r1]
 800dd3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800dd3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d1e5      	bne.n	800dd10 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	3308      	adds	r3, #8
 800dd4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd4c:	697b      	ldr	r3, [r7, #20]
 800dd4e:	e853 3f00 	ldrex	r3, [r3]
 800dd52:	613b      	str	r3, [r7, #16]
   return(result);
 800dd54:	693b      	ldr	r3, [r7, #16]
 800dd56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dd5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	3308      	adds	r3, #8
 800dd62:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800dd64:	623a      	str	r2, [r7, #32]
 800dd66:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd68:	69f9      	ldr	r1, [r7, #28]
 800dd6a:	6a3a      	ldr	r2, [r7, #32]
 800dd6c:	e841 2300 	strex	r3, r2, [r1]
 800dd70:	61bb      	str	r3, [r7, #24]
   return(result);
 800dd72:	69bb      	ldr	r3, [r7, #24]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d1e5      	bne.n	800dd44 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800dd78:	2300      	movs	r3, #0
}
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	3758      	adds	r7, #88	@ 0x58
 800dd7e:	46bd      	mov	sp, r7
 800dd80:	bd80      	pop	{r7, pc}
 800dd82:	bf00      	nop
 800dd84:	0800dee1 	.word	0x0800dee1
 800dd88:	0800e009 	.word	0x0800e009
 800dd8c:	0800e047 	.word	0x0800e047

0800dd90 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800dd90:	b480      	push	{r7}
 800dd92:	b08f      	sub	sp, #60	@ 0x3c
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd9e:	6a3b      	ldr	r3, [r7, #32]
 800dda0:	e853 3f00 	ldrex	r3, [r3]
 800dda4:	61fb      	str	r3, [r7, #28]
   return(result);
 800dda6:	69fb      	ldr	r3, [r7, #28]
 800dda8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800ddac:	637b      	str	r3, [r7, #52]	@ 0x34
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	461a      	mov	r2, r3
 800ddb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ddb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ddb8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ddbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ddbe:	e841 2300 	strex	r3, r2, [r1]
 800ddc2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ddc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d1e6      	bne.n	800dd98 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	3308      	adds	r3, #8
 800ddd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	e853 3f00 	ldrex	r3, [r3]
 800ddd8:	60bb      	str	r3, [r7, #8]
   return(result);
 800ddda:	68bb      	ldr	r3, [r7, #8]
 800dddc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800dde0:	633b      	str	r3, [r7, #48]	@ 0x30
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	3308      	adds	r3, #8
 800dde8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ddea:	61ba      	str	r2, [r7, #24]
 800ddec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddee:	6979      	ldr	r1, [r7, #20]
 800ddf0:	69ba      	ldr	r2, [r7, #24]
 800ddf2:	e841 2300 	strex	r3, r2, [r1]
 800ddf6:	613b      	str	r3, [r7, #16]
   return(result);
 800ddf8:	693b      	ldr	r3, [r7, #16]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d1e5      	bne.n	800ddca <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	2220      	movs	r2, #32
 800de02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800de06:	bf00      	nop
 800de08:	373c      	adds	r7, #60	@ 0x3c
 800de0a:	46bd      	mov	sp, r7
 800de0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de10:	4770      	bx	lr
	...

0800de14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800de14:	b480      	push	{r7}
 800de16:	b095      	sub	sp, #84	@ 0x54
 800de18:	af00      	add	r7, sp, #0
 800de1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de24:	e853 3f00 	ldrex	r3, [r3]
 800de28:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800de2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de2c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800de30:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	461a      	mov	r2, r3
 800de38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800de3a:	643b      	str	r3, [r7, #64]	@ 0x40
 800de3c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de3e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800de40:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800de42:	e841 2300 	strex	r3, r2, [r1]
 800de46:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800de48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d1e6      	bne.n	800de1c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	3308      	adds	r3, #8
 800de54:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de56:	6a3b      	ldr	r3, [r7, #32]
 800de58:	e853 3f00 	ldrex	r3, [r3]
 800de5c:	61fb      	str	r3, [r7, #28]
   return(result);
 800de5e:	69fa      	ldr	r2, [r7, #28]
 800de60:	4b1e      	ldr	r3, [pc, #120]	@ (800dedc <UART_EndRxTransfer+0xc8>)
 800de62:	4013      	ands	r3, r2
 800de64:	64bb      	str	r3, [r7, #72]	@ 0x48
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	3308      	adds	r3, #8
 800de6c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800de6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800de70:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de72:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800de74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800de76:	e841 2300 	strex	r3, r2, [r1]
 800de7a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800de7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d1e5      	bne.n	800de4e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800de86:	2b01      	cmp	r3, #1
 800de88:	d118      	bne.n	800debc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	e853 3f00 	ldrex	r3, [r3]
 800de96:	60bb      	str	r3, [r7, #8]
   return(result);
 800de98:	68bb      	ldr	r3, [r7, #8]
 800de9a:	f023 0310 	bic.w	r3, r3, #16
 800de9e:	647b      	str	r3, [r7, #68]	@ 0x44
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	461a      	mov	r2, r3
 800dea6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dea8:	61bb      	str	r3, [r7, #24]
 800deaa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800deac:	6979      	ldr	r1, [r7, #20]
 800deae:	69ba      	ldr	r2, [r7, #24]
 800deb0:	e841 2300 	strex	r3, r2, [r1]
 800deb4:	613b      	str	r3, [r7, #16]
   return(result);
 800deb6:	693b      	ldr	r3, [r7, #16]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d1e6      	bne.n	800de8a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	2220      	movs	r2, #32
 800dec0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	2200      	movs	r2, #0
 800dec8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	2200      	movs	r2, #0
 800dece:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ded0:	bf00      	nop
 800ded2:	3754      	adds	r7, #84	@ 0x54
 800ded4:	46bd      	mov	sp, r7
 800ded6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deda:	4770      	bx	lr
 800dedc:	effffffe 	.word	0xeffffffe

0800dee0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800dee0:	b580      	push	{r7, lr}
 800dee2:	b09c      	sub	sp, #112	@ 0x70
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800deec:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	69db      	ldr	r3, [r3, #28]
 800def2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800def6:	d071      	beq.n	800dfdc <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800def8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800defa:	2200      	movs	r2, #0
 800defc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800df00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800df08:	e853 3f00 	ldrex	r3, [r3]
 800df0c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800df0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800df10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800df14:	66bb      	str	r3, [r7, #104]	@ 0x68
 800df16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	461a      	mov	r2, r3
 800df1c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800df1e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800df20:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df22:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800df24:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800df26:	e841 2300 	strex	r3, r2, [r1]
 800df2a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800df2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d1e6      	bne.n	800df00 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800df32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	3308      	adds	r3, #8
 800df38:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df3c:	e853 3f00 	ldrex	r3, [r3]
 800df40:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800df42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df44:	f023 0301 	bic.w	r3, r3, #1
 800df48:	667b      	str	r3, [r7, #100]	@ 0x64
 800df4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	3308      	adds	r3, #8
 800df50:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800df52:	647a      	str	r2, [r7, #68]	@ 0x44
 800df54:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df56:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800df58:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800df5a:	e841 2300 	strex	r3, r2, [r1]
 800df5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800df60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df62:	2b00      	cmp	r3, #0
 800df64:	d1e5      	bne.n	800df32 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800df66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	3308      	adds	r3, #8
 800df6c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df70:	e853 3f00 	ldrex	r3, [r3]
 800df74:	623b      	str	r3, [r7, #32]
   return(result);
 800df76:	6a3b      	ldr	r3, [r7, #32]
 800df78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800df7c:	663b      	str	r3, [r7, #96]	@ 0x60
 800df7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	3308      	adds	r3, #8
 800df84:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800df86:	633a      	str	r2, [r7, #48]	@ 0x30
 800df88:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800df8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800df8e:	e841 2300 	strex	r3, r2, [r1]
 800df92:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800df94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df96:	2b00      	cmp	r3, #0
 800df98:	d1e5      	bne.n	800df66 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800df9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800df9c:	2220      	movs	r2, #32
 800df9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dfa2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dfa4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dfa6:	2b01      	cmp	r3, #1
 800dfa8:	d118      	bne.n	800dfdc <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dfaa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfb0:	693b      	ldr	r3, [r7, #16]
 800dfb2:	e853 3f00 	ldrex	r3, [r3]
 800dfb6:	60fb      	str	r3, [r7, #12]
   return(result);
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	f023 0310 	bic.w	r3, r3, #16
 800dfbe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800dfc0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	461a      	mov	r2, r3
 800dfc6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dfc8:	61fb      	str	r3, [r7, #28]
 800dfca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfcc:	69b9      	ldr	r1, [r7, #24]
 800dfce:	69fa      	ldr	r2, [r7, #28]
 800dfd0:	e841 2300 	strex	r3, r2, [r1]
 800dfd4:	617b      	str	r3, [r7, #20]
   return(result);
 800dfd6:	697b      	ldr	r3, [r7, #20]
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d1e6      	bne.n	800dfaa <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dfdc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dfde:	2200      	movs	r2, #0
 800dfe0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dfe2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dfe4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dfe6:	2b01      	cmp	r3, #1
 800dfe8:	d107      	bne.n	800dffa <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dfea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dfec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800dff0:	4619      	mov	r1, r3
 800dff2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800dff4:	f7fe fdf4 	bl	800cbe0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800dff8:	e002      	b.n	800e000 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800dffa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800dffc:	f7f4 f8f8 	bl	80021f0 <HAL_UART_RxCpltCallback>
}
 800e000:	bf00      	nop
 800e002:	3770      	adds	r7, #112	@ 0x70
 800e004:	46bd      	mov	sp, r7
 800e006:	bd80      	pop	{r7, pc}

0800e008 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e008:	b580      	push	{r7, lr}
 800e00a:	b084      	sub	sp, #16
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e014:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	2201      	movs	r2, #1
 800e01a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e020:	2b01      	cmp	r3, #1
 800e022:	d109      	bne.n	800e038 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e02a:	085b      	lsrs	r3, r3, #1
 800e02c:	b29b      	uxth	r3, r3
 800e02e:	4619      	mov	r1, r3
 800e030:	68f8      	ldr	r0, [r7, #12]
 800e032:	f7fe fdd5 	bl	800cbe0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e036:	e002      	b.n	800e03e <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800e038:	68f8      	ldr	r0, [r7, #12]
 800e03a:	f7fe fdbd 	bl	800cbb8 <HAL_UART_RxHalfCpltCallback>
}
 800e03e:	bf00      	nop
 800e040:	3710      	adds	r7, #16
 800e042:	46bd      	mov	sp, r7
 800e044:	bd80      	pop	{r7, pc}

0800e046 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e046:	b580      	push	{r7, lr}
 800e048:	b086      	sub	sp, #24
 800e04a:	af00      	add	r7, sp, #0
 800e04c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e052:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e054:	697b      	ldr	r3, [r7, #20]
 800e056:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e05a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e05c:	697b      	ldr	r3, [r7, #20]
 800e05e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e062:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e064:	697b      	ldr	r3, [r7, #20]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	689b      	ldr	r3, [r3, #8]
 800e06a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e06e:	2b80      	cmp	r3, #128	@ 0x80
 800e070:	d109      	bne.n	800e086 <UART_DMAError+0x40>
 800e072:	693b      	ldr	r3, [r7, #16]
 800e074:	2b21      	cmp	r3, #33	@ 0x21
 800e076:	d106      	bne.n	800e086 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e078:	697b      	ldr	r3, [r7, #20]
 800e07a:	2200      	movs	r2, #0
 800e07c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800e080:	6978      	ldr	r0, [r7, #20]
 800e082:	f7ff fe85 	bl	800dd90 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e086:	697b      	ldr	r3, [r7, #20]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	689b      	ldr	r3, [r3, #8]
 800e08c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e090:	2b40      	cmp	r3, #64	@ 0x40
 800e092:	d109      	bne.n	800e0a8 <UART_DMAError+0x62>
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	2b22      	cmp	r3, #34	@ 0x22
 800e098:	d106      	bne.n	800e0a8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e09a:	697b      	ldr	r3, [r7, #20]
 800e09c:	2200      	movs	r2, #0
 800e09e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800e0a2:	6978      	ldr	r0, [r7, #20]
 800e0a4:	f7ff feb6 	bl	800de14 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e0a8:	697b      	ldr	r3, [r7, #20]
 800e0aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e0ae:	f043 0210 	orr.w	r2, r3, #16
 800e0b2:	697b      	ldr	r3, [r7, #20]
 800e0b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e0b8:	6978      	ldr	r0, [r7, #20]
 800e0ba:	f7fe fd87 	bl	800cbcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e0be:	bf00      	nop
 800e0c0:	3718      	adds	r7, #24
 800e0c2:	46bd      	mov	sp, r7
 800e0c4:	bd80      	pop	{r7, pc}

0800e0c6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e0c6:	b580      	push	{r7, lr}
 800e0c8:	b084      	sub	sp, #16
 800e0ca:	af00      	add	r7, sp, #0
 800e0cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e0d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	2200      	movs	r2, #0
 800e0d8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	2200      	movs	r2, #0
 800e0e0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e0e4:	68f8      	ldr	r0, [r7, #12]
 800e0e6:	f7fe fd71 	bl	800cbcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e0ea:	bf00      	nop
 800e0ec:	3710      	adds	r7, #16
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	bd80      	pop	{r7, pc}

0800e0f2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e0f2:	b580      	push	{r7, lr}
 800e0f4:	b088      	sub	sp, #32
 800e0f6:	af00      	add	r7, sp, #0
 800e0f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	e853 3f00 	ldrex	r3, [r3]
 800e106:	60bb      	str	r3, [r7, #8]
   return(result);
 800e108:	68bb      	ldr	r3, [r7, #8]
 800e10a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e10e:	61fb      	str	r3, [r7, #28]
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	461a      	mov	r2, r3
 800e116:	69fb      	ldr	r3, [r7, #28]
 800e118:	61bb      	str	r3, [r7, #24]
 800e11a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e11c:	6979      	ldr	r1, [r7, #20]
 800e11e:	69ba      	ldr	r2, [r7, #24]
 800e120:	e841 2300 	strex	r3, r2, [r1]
 800e124:	613b      	str	r3, [r7, #16]
   return(result);
 800e126:	693b      	ldr	r3, [r7, #16]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d1e6      	bne.n	800e0fa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	2220      	movs	r2, #32
 800e130:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	2200      	movs	r2, #0
 800e138:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e13a:	6878      	ldr	r0, [r7, #4]
 800e13c:	f7fe fd32 	bl	800cba4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e140:	bf00      	nop
 800e142:	3720      	adds	r7, #32
 800e144:	46bd      	mov	sp, r7
 800e146:	bd80      	pop	{r7, pc}

0800e148 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e148:	b480      	push	{r7}
 800e14a:	b083      	sub	sp, #12
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e150:	bf00      	nop
 800e152:	370c      	adds	r7, #12
 800e154:	46bd      	mov	sp, r7
 800e156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e15a:	4770      	bx	lr

0800e15c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e15c:	b480      	push	{r7}
 800e15e:	b083      	sub	sp, #12
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e164:	bf00      	nop
 800e166:	370c      	adds	r7, #12
 800e168:	46bd      	mov	sp, r7
 800e16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e16e:	4770      	bx	lr

0800e170 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e170:	b480      	push	{r7}
 800e172:	b083      	sub	sp, #12
 800e174:	af00      	add	r7, sp, #0
 800e176:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e178:	bf00      	nop
 800e17a:	370c      	adds	r7, #12
 800e17c:	46bd      	mov	sp, r7
 800e17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e182:	4770      	bx	lr

0800e184 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e184:	b480      	push	{r7}
 800e186:	b085      	sub	sp, #20
 800e188:	af00      	add	r7, sp, #0
 800e18a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e192:	2b01      	cmp	r3, #1
 800e194:	d101      	bne.n	800e19a <HAL_UARTEx_DisableFifoMode+0x16>
 800e196:	2302      	movs	r3, #2
 800e198:	e027      	b.n	800e1ea <HAL_UARTEx_DisableFifoMode+0x66>
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	2201      	movs	r2, #1
 800e19e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	2224      	movs	r2, #36	@ 0x24
 800e1a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	681a      	ldr	r2, [r3, #0]
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	f022 0201 	bic.w	r2, r2, #1
 800e1c0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800e1c8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	2200      	movs	r2, #0
 800e1ce:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	68fa      	ldr	r2, [r7, #12]
 800e1d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	2220      	movs	r2, #32
 800e1dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	2200      	movs	r2, #0
 800e1e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e1e8:	2300      	movs	r3, #0
}
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	3714      	adds	r7, #20
 800e1ee:	46bd      	mov	sp, r7
 800e1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f4:	4770      	bx	lr

0800e1f6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e1f6:	b580      	push	{r7, lr}
 800e1f8:	b084      	sub	sp, #16
 800e1fa:	af00      	add	r7, sp, #0
 800e1fc:	6078      	str	r0, [r7, #4]
 800e1fe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e206:	2b01      	cmp	r3, #1
 800e208:	d101      	bne.n	800e20e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e20a:	2302      	movs	r3, #2
 800e20c:	e02d      	b.n	800e26a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	2201      	movs	r2, #1
 800e212:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	2224      	movs	r2, #36	@ 0x24
 800e21a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	681a      	ldr	r2, [r3, #0]
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	f022 0201 	bic.w	r2, r2, #1
 800e234:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	689b      	ldr	r3, [r3, #8]
 800e23c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	683a      	ldr	r2, [r7, #0]
 800e246:	430a      	orrs	r2, r1
 800e248:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e24a:	6878      	ldr	r0, [r7, #4]
 800e24c:	f000 f850 	bl	800e2f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	68fa      	ldr	r2, [r7, #12]
 800e256:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	2220      	movs	r2, #32
 800e25c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	2200      	movs	r2, #0
 800e264:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e268:	2300      	movs	r3, #0
}
 800e26a:	4618      	mov	r0, r3
 800e26c:	3710      	adds	r7, #16
 800e26e:	46bd      	mov	sp, r7
 800e270:	bd80      	pop	{r7, pc}

0800e272 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e272:	b580      	push	{r7, lr}
 800e274:	b084      	sub	sp, #16
 800e276:	af00      	add	r7, sp, #0
 800e278:	6078      	str	r0, [r7, #4]
 800e27a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e282:	2b01      	cmp	r3, #1
 800e284:	d101      	bne.n	800e28a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e286:	2302      	movs	r3, #2
 800e288:	e02d      	b.n	800e2e6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	2201      	movs	r2, #1
 800e28e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	2224      	movs	r2, #36	@ 0x24
 800e296:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	681a      	ldr	r2, [r3, #0]
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	f022 0201 	bic.w	r2, r2, #1
 800e2b0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	689b      	ldr	r3, [r3, #8]
 800e2b8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	683a      	ldr	r2, [r7, #0]
 800e2c2:	430a      	orrs	r2, r1
 800e2c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e2c6:	6878      	ldr	r0, [r7, #4]
 800e2c8:	f000 f812 	bl	800e2f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	68fa      	ldr	r2, [r7, #12]
 800e2d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	2220      	movs	r2, #32
 800e2d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	2200      	movs	r2, #0
 800e2e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e2e4:	2300      	movs	r3, #0
}
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	3710      	adds	r7, #16
 800e2ea:	46bd      	mov	sp, r7
 800e2ec:	bd80      	pop	{r7, pc}
	...

0800e2f0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e2f0:	b480      	push	{r7}
 800e2f2:	b085      	sub	sp, #20
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d108      	bne.n	800e312 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	2201      	movs	r2, #1
 800e304:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	2201      	movs	r2, #1
 800e30c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e310:	e031      	b.n	800e376 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e312:	2310      	movs	r3, #16
 800e314:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e316:	2310      	movs	r3, #16
 800e318:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	689b      	ldr	r3, [r3, #8]
 800e320:	0e5b      	lsrs	r3, r3, #25
 800e322:	b2db      	uxtb	r3, r3
 800e324:	f003 0307 	and.w	r3, r3, #7
 800e328:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	689b      	ldr	r3, [r3, #8]
 800e330:	0f5b      	lsrs	r3, r3, #29
 800e332:	b2db      	uxtb	r3, r3
 800e334:	f003 0307 	and.w	r3, r3, #7
 800e338:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e33a:	7bbb      	ldrb	r3, [r7, #14]
 800e33c:	7b3a      	ldrb	r2, [r7, #12]
 800e33e:	4911      	ldr	r1, [pc, #68]	@ (800e384 <UARTEx_SetNbDataToProcess+0x94>)
 800e340:	5c8a      	ldrb	r2, [r1, r2]
 800e342:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e346:	7b3a      	ldrb	r2, [r7, #12]
 800e348:	490f      	ldr	r1, [pc, #60]	@ (800e388 <UARTEx_SetNbDataToProcess+0x98>)
 800e34a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e34c:	fb93 f3f2 	sdiv	r3, r3, r2
 800e350:	b29a      	uxth	r2, r3
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e358:	7bfb      	ldrb	r3, [r7, #15]
 800e35a:	7b7a      	ldrb	r2, [r7, #13]
 800e35c:	4909      	ldr	r1, [pc, #36]	@ (800e384 <UARTEx_SetNbDataToProcess+0x94>)
 800e35e:	5c8a      	ldrb	r2, [r1, r2]
 800e360:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e364:	7b7a      	ldrb	r2, [r7, #13]
 800e366:	4908      	ldr	r1, [pc, #32]	@ (800e388 <UARTEx_SetNbDataToProcess+0x98>)
 800e368:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e36a:	fb93 f3f2 	sdiv	r3, r3, r2
 800e36e:	b29a      	uxth	r2, r3
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800e376:	bf00      	nop
 800e378:	3714      	adds	r7, #20
 800e37a:	46bd      	mov	sp, r7
 800e37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e380:	4770      	bx	lr
 800e382:	bf00      	nop
 800e384:	08012ad0 	.word	0x08012ad0
 800e388:	08012ad8 	.word	0x08012ad8

0800e38c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800e38c:	b580      	push	{r7, lr}
 800e38e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800e390:	4904      	ldr	r1, [pc, #16]	@ (800e3a4 <MX_FATFS_Init+0x18>)
 800e392:	4805      	ldr	r0, [pc, #20]	@ (800e3a8 <MX_FATFS_Init+0x1c>)
 800e394:	f004 f8c6 	bl	8012524 <FATFS_LinkDriver>
 800e398:	4603      	mov	r3, r0
 800e39a:	461a      	mov	r2, r3
 800e39c:	4b03      	ldr	r3, [pc, #12]	@ (800e3ac <MX_FATFS_Init+0x20>)
 800e39e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800e3a0:	bf00      	nop
 800e3a2:	bd80      	pop	{r7, pc}
 800e3a4:	2400284c 	.word	0x2400284c
 800e3a8:	240000a8 	.word	0x240000a8
 800e3ac:	24002848 	.word	0x24002848

0800e3b0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800e3b0:	b480      	push	{r7}
 800e3b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800e3b4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800e3b6:	4618      	mov	r0, r3
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3be:	4770      	bx	lr

0800e3c0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800e3c0:	b580      	push	{r7, lr}
 800e3c2:	b082      	sub	sp, #8
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	4603      	mov	r3, r0
 800e3c8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 800e3ca:	79fb      	ldrb	r3, [r7, #7]
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	f000 f9fd 	bl	800e7cc <SD_disk_initialize>
 800e3d2:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	3708      	adds	r7, #8
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	bd80      	pop	{r7, pc}

0800e3dc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800e3dc:	b580      	push	{r7, lr}
 800e3de:	b082      	sub	sp, #8
 800e3e0:	af00      	add	r7, sp, #0
 800e3e2:	4603      	mov	r3, r0
 800e3e4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 800e3e6:	79fb      	ldrb	r3, [r7, #7]
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	f000 fad5 	bl	800e998 <SD_disk_status>
 800e3ee:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	3708      	adds	r7, #8
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	bd80      	pop	{r7, pc}

0800e3f8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800e3f8:	b580      	push	{r7, lr}
 800e3fa:	b084      	sub	sp, #16
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	60b9      	str	r1, [r7, #8]
 800e400:	607a      	str	r2, [r7, #4]
 800e402:	603b      	str	r3, [r7, #0]
 800e404:	4603      	mov	r3, r0
 800e406:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 800e408:	7bf8      	ldrb	r0, [r7, #15]
 800e40a:	683b      	ldr	r3, [r7, #0]
 800e40c:	687a      	ldr	r2, [r7, #4]
 800e40e:	68b9      	ldr	r1, [r7, #8]
 800e410:	f000 fad8 	bl	800e9c4 <SD_disk_read>
 800e414:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800e416:	4618      	mov	r0, r3
 800e418:	3710      	adds	r7, #16
 800e41a:	46bd      	mov	sp, r7
 800e41c:	bd80      	pop	{r7, pc}

0800e41e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800e41e:	b580      	push	{r7, lr}
 800e420:	b084      	sub	sp, #16
 800e422:	af00      	add	r7, sp, #0
 800e424:	60b9      	str	r1, [r7, #8]
 800e426:	607a      	str	r2, [r7, #4]
 800e428:	603b      	str	r3, [r7, #0]
 800e42a:	4603      	mov	r3, r0
 800e42c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 800e42e:	7bf8      	ldrb	r0, [r7, #15]
 800e430:	683b      	ldr	r3, [r7, #0]
 800e432:	687a      	ldr	r2, [r7, #4]
 800e434:	68b9      	ldr	r1, [r7, #8]
 800e436:	f000 fb2f 	bl	800ea98 <SD_disk_write>
 800e43a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800e43c:	4618      	mov	r0, r3
 800e43e:	3710      	adds	r7, #16
 800e440:	46bd      	mov	sp, r7
 800e442:	bd80      	pop	{r7, pc}

0800e444 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800e444:	b580      	push	{r7, lr}
 800e446:	b082      	sub	sp, #8
 800e448:	af00      	add	r7, sp, #0
 800e44a:	4603      	mov	r3, r0
 800e44c:	603a      	str	r2, [r7, #0]
 800e44e:	71fb      	strb	r3, [r7, #7]
 800e450:	460b      	mov	r3, r1
 800e452:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 800e454:	79b9      	ldrb	r1, [r7, #6]
 800e456:	79fb      	ldrb	r3, [r7, #7]
 800e458:	683a      	ldr	r2, [r7, #0]
 800e45a:	4618      	mov	r0, r3
 800e45c:	f000 fba0 	bl	800eba0 <SD_disk_ioctl>
 800e460:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800e462:	4618      	mov	r0, r3
 800e464:	3708      	adds	r7, #8
 800e466:	46bd      	mov	sp, r7
 800e468:	bd80      	pop	{r7, pc}
	...

0800e46c <SELECT>:

//-----[ SPI Functions ]-----

/* slave select */
static void SELECT(void)
{
 800e46c:	b580      	push	{r7, lr}
 800e46e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800e470:	2200      	movs	r2, #0
 800e472:	2110      	movs	r1, #16
 800e474:	4802      	ldr	r0, [pc, #8]	@ (800e480 <SELECT+0x14>)
 800e476:	f7f8 fdab 	bl	8006fd0 <HAL_GPIO_WritePin>
}
 800e47a:	bf00      	nop
 800e47c:	bd80      	pop	{r7, pc}
 800e47e:	bf00      	nop
 800e480:	58020000 	.word	0x58020000

0800e484 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 800e484:	b580      	push	{r7, lr}
 800e486:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800e488:	2201      	movs	r2, #1
 800e48a:	2110      	movs	r1, #16
 800e48c:	4802      	ldr	r0, [pc, #8]	@ (800e498 <DESELECT+0x14>)
 800e48e:	f7f8 fd9f 	bl	8006fd0 <HAL_GPIO_WritePin>
}
 800e492:	bf00      	nop
 800e494:	bd80      	pop	{r7, pc}
 800e496:	bf00      	nop
 800e498:	58020000 	.word	0x58020000

0800e49c <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 800e49c:	b580      	push	{r7, lr}
 800e49e:	b082      	sub	sp, #8
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	4603      	mov	r3, r0
 800e4a4:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800e4a6:	bf00      	nop
 800e4a8:	4b08      	ldr	r3, [pc, #32]	@ (800e4cc <SPI_TxByte+0x30>)
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	695b      	ldr	r3, [r3, #20]
 800e4ae:	f003 0302 	and.w	r3, r3, #2
 800e4b2:	2b02      	cmp	r3, #2
 800e4b4:	d1f8      	bne.n	800e4a8 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800e4b6:	1df9      	adds	r1, r7, #7
 800e4b8:	2364      	movs	r3, #100	@ 0x64
 800e4ba:	2201      	movs	r2, #1
 800e4bc:	4803      	ldr	r0, [pc, #12]	@ (800e4cc <SPI_TxByte+0x30>)
 800e4be:	f7fb fdd1 	bl	800a064 <HAL_SPI_Transmit>
}
 800e4c2:	bf00      	nop
 800e4c4:	3708      	adds	r7, #8
 800e4c6:	46bd      	mov	sp, r7
 800e4c8:	bd80      	pop	{r7, pc}
 800e4ca:	bf00      	nop
 800e4cc:	240022f0 	.word	0x240022f0

0800e4d0 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 800e4d0:	b580      	push	{r7, lr}
 800e4d2:	b082      	sub	sp, #8
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	6078      	str	r0, [r7, #4]
 800e4d8:	460b      	mov	r3, r1
 800e4da:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800e4dc:	bf00      	nop
 800e4de:	4b08      	ldr	r3, [pc, #32]	@ (800e500 <SPI_TxBuffer+0x30>)
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	695b      	ldr	r3, [r3, #20]
 800e4e4:	f003 0302 	and.w	r3, r3, #2
 800e4e8:	2b02      	cmp	r3, #2
 800e4ea:	d1f8      	bne.n	800e4de <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800e4ec:	887a      	ldrh	r2, [r7, #2]
 800e4ee:	2364      	movs	r3, #100	@ 0x64
 800e4f0:	6879      	ldr	r1, [r7, #4]
 800e4f2:	4803      	ldr	r0, [pc, #12]	@ (800e500 <SPI_TxBuffer+0x30>)
 800e4f4:	f7fb fdb6 	bl	800a064 <HAL_SPI_Transmit>
}
 800e4f8:	bf00      	nop
 800e4fa:	3708      	adds	r7, #8
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	bd80      	pop	{r7, pc}
 800e500:	240022f0 	.word	0x240022f0

0800e504 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800e504:	b580      	push	{r7, lr}
 800e506:	b084      	sub	sp, #16
 800e508:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 800e50a:	23ff      	movs	r3, #255	@ 0xff
 800e50c:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800e50e:	bf00      	nop
 800e510:	4b09      	ldr	r3, [pc, #36]	@ (800e538 <SPI_RxByte+0x34>)
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	695b      	ldr	r3, [r3, #20]
 800e516:	f003 0302 	and.w	r3, r3, #2
 800e51a:	2b02      	cmp	r3, #2
 800e51c:	d1f8      	bne.n	800e510 <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800e51e:	1dba      	adds	r2, r7, #6
 800e520:	1df9      	adds	r1, r7, #7
 800e522:	2364      	movs	r3, #100	@ 0x64
 800e524:	9300      	str	r3, [sp, #0]
 800e526:	2301      	movs	r3, #1
 800e528:	4803      	ldr	r0, [pc, #12]	@ (800e538 <SPI_RxByte+0x34>)
 800e52a:	f7fc f9fb 	bl	800a924 <HAL_SPI_TransmitReceive>
  return data;
 800e52e:	79bb      	ldrb	r3, [r7, #6]
}
 800e530:	4618      	mov	r0, r3
 800e532:	3708      	adds	r7, #8
 800e534:	46bd      	mov	sp, r7
 800e536:	bd80      	pop	{r7, pc}
 800e538:	240022f0 	.word	0x240022f0

0800e53c <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 800e53c:	b580      	push	{r7, lr}
 800e53e:	b082      	sub	sp, #8
 800e540:	af00      	add	r7, sp, #0
 800e542:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 800e544:	f7ff ffde 	bl	800e504 <SPI_RxByte>
 800e548:	4603      	mov	r3, r0
 800e54a:	461a      	mov	r2, r3
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	701a      	strb	r2, [r3, #0]
}
 800e550:	bf00      	nop
 800e552:	3708      	adds	r7, #8
 800e554:	46bd      	mov	sp, r7
 800e556:	bd80      	pop	{r7, pc}

0800e558 <SD_ReadyWait>:

//-----[ SD Card Functions ]-----

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 800e558:	b580      	push	{r7, lr}
 800e55a:	b082      	sub	sp, #8
 800e55c:	af00      	add	r7, sp, #0
  uint8_t res;
  /* timeout 500ms */
  Timer2 = 500;
 800e55e:	4b0a      	ldr	r3, [pc, #40]	@ (800e588 <SD_ReadyWait+0x30>)
 800e560:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800e564:	801a      	strh	r2, [r3, #0]
  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 800e566:	f7ff ffcd 	bl	800e504 <SPI_RxByte>
 800e56a:	4603      	mov	r3, r0
 800e56c:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 800e56e:	79fb      	ldrb	r3, [r7, #7]
 800e570:	2bff      	cmp	r3, #255	@ 0xff
 800e572:	d003      	beq.n	800e57c <SD_ReadyWait+0x24>
 800e574:	4b04      	ldr	r3, [pc, #16]	@ (800e588 <SD_ReadyWait+0x30>)
 800e576:	881b      	ldrh	r3, [r3, #0]
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d1f4      	bne.n	800e566 <SD_ReadyWait+0xe>
  return res;
 800e57c:	79fb      	ldrb	r3, [r7, #7]
}
 800e57e:	4618      	mov	r0, r3
 800e580:	3708      	adds	r7, #8
 800e582:	46bd      	mov	sp, r7
 800e584:	bd80      	pop	{r7, pc}
 800e586:	bf00      	nop
 800e588:	24002852 	.word	0x24002852

0800e58c <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b084      	sub	sp, #16
 800e590:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 800e592:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800e596:	60fb      	str	r3, [r7, #12]
  /* transmit bytes to wake up */
  DESELECT();
 800e598:	f7ff ff74 	bl	800e484 <DESELECT>
  for(int i = 0; i < 10; i++)
 800e59c:	2300      	movs	r3, #0
 800e59e:	60bb      	str	r3, [r7, #8]
 800e5a0:	e005      	b.n	800e5ae <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 800e5a2:	20ff      	movs	r0, #255	@ 0xff
 800e5a4:	f7ff ff7a 	bl	800e49c <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 800e5a8:	68bb      	ldr	r3, [r7, #8]
 800e5aa:	3301      	adds	r3, #1
 800e5ac:	60bb      	str	r3, [r7, #8]
 800e5ae:	68bb      	ldr	r3, [r7, #8]
 800e5b0:	2b09      	cmp	r3, #9
 800e5b2:	ddf6      	ble.n	800e5a2 <SD_PowerOn+0x16>
  }
  /* slave select */
  SELECT();
 800e5b4:	f7ff ff5a 	bl	800e46c <SELECT>
  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 800e5b8:	2340      	movs	r3, #64	@ 0x40
 800e5ba:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 800e5bc:	2300      	movs	r3, #0
 800e5be:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 800e5c0:	2300      	movs	r3, #0
 800e5c2:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 800e5c4:	2300      	movs	r3, #0
 800e5c6:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 800e5c8:	2300      	movs	r3, #0
 800e5ca:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;
 800e5cc:	2395      	movs	r3, #149	@ 0x95
 800e5ce:	717b      	strb	r3, [r7, #5]
  SPI_TxBuffer(args, sizeof(args));
 800e5d0:	463b      	mov	r3, r7
 800e5d2:	2106      	movs	r1, #6
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	f7ff ff7b 	bl	800e4d0 <SPI_TxBuffer>
  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 800e5da:	e002      	b.n	800e5e2 <SD_PowerOn+0x56>
  {
    cnt--;
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	3b01      	subs	r3, #1
 800e5e0:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 800e5e2:	f7ff ff8f 	bl	800e504 <SPI_RxByte>
 800e5e6:	4603      	mov	r3, r0
 800e5e8:	2b01      	cmp	r3, #1
 800e5ea:	d002      	beq.n	800e5f2 <SD_PowerOn+0x66>
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d1f4      	bne.n	800e5dc <SD_PowerOn+0x50>
  }
  DESELECT();
 800e5f2:	f7ff ff47 	bl	800e484 <DESELECT>
  SPI_TxByte(0XFF);
 800e5f6:	20ff      	movs	r0, #255	@ 0xff
 800e5f8:	f7ff ff50 	bl	800e49c <SPI_TxByte>
  PowerFlag = 1;
 800e5fc:	4b03      	ldr	r3, [pc, #12]	@ (800e60c <SD_PowerOn+0x80>)
 800e5fe:	2201      	movs	r2, #1
 800e600:	701a      	strb	r2, [r3, #0]
}
 800e602:	bf00      	nop
 800e604:	3710      	adds	r7, #16
 800e606:	46bd      	mov	sp, r7
 800e608:	bd80      	pop	{r7, pc}
 800e60a:	bf00      	nop
 800e60c:	24002855 	.word	0x24002855

0800e610 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 800e610:	b480      	push	{r7}
 800e612:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 800e614:	4b03      	ldr	r3, [pc, #12]	@ (800e624 <SD_PowerOff+0x14>)
 800e616:	2200      	movs	r2, #0
 800e618:	701a      	strb	r2, [r3, #0]
}
 800e61a:	bf00      	nop
 800e61c:	46bd      	mov	sp, r7
 800e61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e622:	4770      	bx	lr
 800e624:	24002855 	.word	0x24002855

0800e628 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 800e628:	b480      	push	{r7}
 800e62a:	af00      	add	r7, sp, #0
  return PowerFlag;
 800e62c:	4b03      	ldr	r3, [pc, #12]	@ (800e63c <SD_CheckPower+0x14>)
 800e62e:	781b      	ldrb	r3, [r3, #0]
}
 800e630:	4618      	mov	r0, r3
 800e632:	46bd      	mov	sp, r7
 800e634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e638:	4770      	bx	lr
 800e63a:	bf00      	nop
 800e63c:	24002855 	.word	0x24002855

0800e640 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 800e640:	b580      	push	{r7, lr}
 800e642:	b084      	sub	sp, #16
 800e644:	af00      	add	r7, sp, #0
 800e646:	6078      	str	r0, [r7, #4]
 800e648:	6039      	str	r1, [r7, #0]
  uint8_t token;
  /* timeout 200ms */
  Timer1 = 200;
 800e64a:	4b13      	ldr	r3, [pc, #76]	@ (800e698 <SD_RxDataBlock+0x58>)
 800e64c:	22c8      	movs	r2, #200	@ 0xc8
 800e64e:	801a      	strh	r2, [r3, #0]
  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 800e650:	f7ff ff58 	bl	800e504 <SPI_RxByte>
 800e654:	4603      	mov	r3, r0
 800e656:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 800e658:	7bfb      	ldrb	r3, [r7, #15]
 800e65a:	2bff      	cmp	r3, #255	@ 0xff
 800e65c:	d103      	bne.n	800e666 <SD_RxDataBlock+0x26>
 800e65e:	4b0e      	ldr	r3, [pc, #56]	@ (800e698 <SD_RxDataBlock+0x58>)
 800e660:	881b      	ldrh	r3, [r3, #0]
 800e662:	2b00      	cmp	r3, #0
 800e664:	d1f4      	bne.n	800e650 <SD_RxDataBlock+0x10>
  /* invalid response */
  if(token != 0xFE) return FALSE;
 800e666:	7bfb      	ldrb	r3, [r7, #15]
 800e668:	2bfe      	cmp	r3, #254	@ 0xfe
 800e66a:	d001      	beq.n	800e670 <SD_RxDataBlock+0x30>
 800e66c:	2300      	movs	r3, #0
 800e66e:	e00f      	b.n	800e690 <SD_RxDataBlock+0x50>
  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	1c5a      	adds	r2, r3, #1
 800e674:	607a      	str	r2, [r7, #4]
 800e676:	4618      	mov	r0, r3
 800e678:	f7ff ff60 	bl	800e53c <SPI_RxBytePtr>
  } while(len--);
 800e67c:	683b      	ldr	r3, [r7, #0]
 800e67e:	1e5a      	subs	r2, r3, #1
 800e680:	603a      	str	r2, [r7, #0]
 800e682:	2b00      	cmp	r3, #0
 800e684:	d1f4      	bne.n	800e670 <SD_RxDataBlock+0x30>
  /* discard CRC */
  SPI_RxByte();
 800e686:	f7ff ff3d 	bl	800e504 <SPI_RxByte>
  SPI_RxByte();
 800e68a:	f7ff ff3b 	bl	800e504 <SPI_RxByte>
  return TRUE;
 800e68e:	2301      	movs	r3, #1
}
 800e690:	4618      	mov	r0, r3
 800e692:	3710      	adds	r7, #16
 800e694:	46bd      	mov	sp, r7
 800e696:	bd80      	pop	{r7, pc}
 800e698:	24002850 	.word	0x24002850

0800e69c <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 800e69c:	b580      	push	{r7, lr}
 800e69e:	b084      	sub	sp, #16
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	6078      	str	r0, [r7, #4]
 800e6a4:	460b      	mov	r3, r1
 800e6a6:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 800e6a8:	2300      	movs	r3, #0
 800e6aa:	73bb      	strb	r3, [r7, #14]
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 800e6ac:	f7ff ff54 	bl	800e558 <SD_ReadyWait>
 800e6b0:	4603      	mov	r3, r0
 800e6b2:	2bff      	cmp	r3, #255	@ 0xff
 800e6b4:	d001      	beq.n	800e6ba <SD_TxDataBlock+0x1e>
 800e6b6:	2300      	movs	r3, #0
 800e6b8:	e02f      	b.n	800e71a <SD_TxDataBlock+0x7e>
  /* transmit token */
  SPI_TxByte(token);
 800e6ba:	78fb      	ldrb	r3, [r7, #3]
 800e6bc:	4618      	mov	r0, r3
 800e6be:	f7ff feed 	bl	800e49c <SPI_TxByte>
  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 800e6c2:	78fb      	ldrb	r3, [r7, #3]
 800e6c4:	2bfd      	cmp	r3, #253	@ 0xfd
 800e6c6:	d020      	beq.n	800e70a <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 800e6c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800e6cc:	6878      	ldr	r0, [r7, #4]
 800e6ce:	f7ff feff 	bl	800e4d0 <SPI_TxBuffer>
    /* discard CRC */
    SPI_RxByte();
 800e6d2:	f7ff ff17 	bl	800e504 <SPI_RxByte>
    SPI_RxByte();
 800e6d6:	f7ff ff15 	bl	800e504 <SPI_RxByte>
    /* receive response */
    while (i <= 64)
 800e6da:	e00b      	b.n	800e6f4 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 800e6dc:	f7ff ff12 	bl	800e504 <SPI_RxByte>
 800e6e0:	4603      	mov	r3, r0
 800e6e2:	73fb      	strb	r3, [r7, #15]
      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 800e6e4:	7bfb      	ldrb	r3, [r7, #15]
 800e6e6:	f003 031f 	and.w	r3, r3, #31
 800e6ea:	2b05      	cmp	r3, #5
 800e6ec:	d006      	beq.n	800e6fc <SD_TxDataBlock+0x60>
      i++;
 800e6ee:	7bbb      	ldrb	r3, [r7, #14]
 800e6f0:	3301      	adds	r3, #1
 800e6f2:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 800e6f4:	7bbb      	ldrb	r3, [r7, #14]
 800e6f6:	2b40      	cmp	r3, #64	@ 0x40
 800e6f8:	d9f0      	bls.n	800e6dc <SD_TxDataBlock+0x40>
 800e6fa:	e000      	b.n	800e6fe <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 800e6fc:	bf00      	nop
    }
    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 800e6fe:	bf00      	nop
 800e700:	f7ff ff00 	bl	800e504 <SPI_RxByte>
 800e704:	4603      	mov	r3, r0
 800e706:	2b00      	cmp	r3, #0
 800e708:	d0fa      	beq.n	800e700 <SD_TxDataBlock+0x64>
  }
  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 800e70a:	7bfb      	ldrb	r3, [r7, #15]
 800e70c:	f003 031f 	and.w	r3, r3, #31
 800e710:	2b05      	cmp	r3, #5
 800e712:	d101      	bne.n	800e718 <SD_TxDataBlock+0x7c>
 800e714:	2301      	movs	r3, #1
 800e716:	e000      	b.n	800e71a <SD_TxDataBlock+0x7e>

  return FALSE;
 800e718:	2300      	movs	r3, #0
}
 800e71a:	4618      	mov	r0, r3
 800e71c:	3710      	adds	r7, #16
 800e71e:	46bd      	mov	sp, r7
 800e720:	bd80      	pop	{r7, pc}

0800e722 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800e722:	b580      	push	{r7, lr}
 800e724:	b084      	sub	sp, #16
 800e726:	af00      	add	r7, sp, #0
 800e728:	4603      	mov	r3, r0
 800e72a:	6039      	str	r1, [r7, #0]
 800e72c:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 800e72e:	f7ff ff13 	bl	800e558 <SD_ReadyWait>
 800e732:	4603      	mov	r3, r0
 800e734:	2bff      	cmp	r3, #255	@ 0xff
 800e736:	d001      	beq.n	800e73c <SD_SendCmd+0x1a>
 800e738:	23ff      	movs	r3, #255	@ 0xff
 800e73a:	e042      	b.n	800e7c2 <SD_SendCmd+0xa0>
  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 800e73c:	79fb      	ldrb	r3, [r7, #7]
 800e73e:	4618      	mov	r0, r3
 800e740:	f7ff feac 	bl	800e49c <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 800e744:	683b      	ldr	r3, [r7, #0]
 800e746:	0e1b      	lsrs	r3, r3, #24
 800e748:	b2db      	uxtb	r3, r3
 800e74a:	4618      	mov	r0, r3
 800e74c:	f7ff fea6 	bl	800e49c <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 800e750:	683b      	ldr	r3, [r7, #0]
 800e752:	0c1b      	lsrs	r3, r3, #16
 800e754:	b2db      	uxtb	r3, r3
 800e756:	4618      	mov	r0, r3
 800e758:	f7ff fea0 	bl	800e49c <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 800e75c:	683b      	ldr	r3, [r7, #0]
 800e75e:	0a1b      	lsrs	r3, r3, #8
 800e760:	b2db      	uxtb	r3, r3
 800e762:	4618      	mov	r0, r3
 800e764:	f7ff fe9a 	bl	800e49c <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 800e768:	683b      	ldr	r3, [r7, #0]
 800e76a:	b2db      	uxtb	r3, r3
 800e76c:	4618      	mov	r0, r3
 800e76e:	f7ff fe95 	bl	800e49c <SPI_TxByte>
  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 800e772:	79fb      	ldrb	r3, [r7, #7]
 800e774:	2b40      	cmp	r3, #64	@ 0x40
 800e776:	d102      	bne.n	800e77e <SD_SendCmd+0x5c>
 800e778:	2395      	movs	r3, #149	@ 0x95
 800e77a:	73fb      	strb	r3, [r7, #15]
 800e77c:	e007      	b.n	800e78e <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 800e77e:	79fb      	ldrb	r3, [r7, #7]
 800e780:	2b48      	cmp	r3, #72	@ 0x48
 800e782:	d102      	bne.n	800e78a <SD_SendCmd+0x68>
 800e784:	2387      	movs	r3, #135	@ 0x87
 800e786:	73fb      	strb	r3, [r7, #15]
 800e788:	e001      	b.n	800e78e <SD_SendCmd+0x6c>
  else crc = 1;
 800e78a:	2301      	movs	r3, #1
 800e78c:	73fb      	strb	r3, [r7, #15]
  /* transmit CRC */
  SPI_TxByte(crc);
 800e78e:	7bfb      	ldrb	r3, [r7, #15]
 800e790:	4618      	mov	r0, r3
 800e792:	f7ff fe83 	bl	800e49c <SPI_TxByte>
  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 800e796:	79fb      	ldrb	r3, [r7, #7]
 800e798:	2b4c      	cmp	r3, #76	@ 0x4c
 800e79a:	d101      	bne.n	800e7a0 <SD_SendCmd+0x7e>
 800e79c:	f7ff feb2 	bl	800e504 <SPI_RxByte>
  /* receive response */
  uint8_t n = 10;
 800e7a0:	230a      	movs	r3, #10
 800e7a2:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 800e7a4:	f7ff feae 	bl	800e504 <SPI_RxByte>
 800e7a8:	4603      	mov	r3, r0
 800e7aa:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 800e7ac:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	da05      	bge.n	800e7c0 <SD_SendCmd+0x9e>
 800e7b4:	7bbb      	ldrb	r3, [r7, #14]
 800e7b6:	3b01      	subs	r3, #1
 800e7b8:	73bb      	strb	r3, [r7, #14]
 800e7ba:	7bbb      	ldrb	r3, [r7, #14]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d1f1      	bne.n	800e7a4 <SD_SendCmd+0x82>

  return res;
 800e7c0:	7b7b      	ldrb	r3, [r7, #13]
}
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	3710      	adds	r7, #16
 800e7c6:	46bd      	mov	sp, r7
 800e7c8:	bd80      	pop	{r7, pc}
	...

0800e7cc <SD_disk_initialize>:

//-----[ user_diskio.c Functions ]-----

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 800e7cc:	b590      	push	{r4, r7, lr}
 800e7ce:	b085      	sub	sp, #20
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	4603      	mov	r3, r0
 800e7d4:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 800e7d6:	79fb      	ldrb	r3, [r7, #7]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d001      	beq.n	800e7e0 <SD_disk_initialize+0x14>
 800e7dc:	2301      	movs	r3, #1
 800e7de:	e0d1      	b.n	800e984 <SD_disk_initialize+0x1b8>
  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 800e7e0:	4b6a      	ldr	r3, [pc, #424]	@ (800e98c <SD_disk_initialize+0x1c0>)
 800e7e2:	781b      	ldrb	r3, [r3, #0]
 800e7e4:	b2db      	uxtb	r3, r3
 800e7e6:	f003 0302 	and.w	r3, r3, #2
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d003      	beq.n	800e7f6 <SD_disk_initialize+0x2a>
 800e7ee:	4b67      	ldr	r3, [pc, #412]	@ (800e98c <SD_disk_initialize+0x1c0>)
 800e7f0:	781b      	ldrb	r3, [r3, #0]
 800e7f2:	b2db      	uxtb	r3, r3
 800e7f4:	e0c6      	b.n	800e984 <SD_disk_initialize+0x1b8>
  /* power on */
  SD_PowerOn();
 800e7f6:	f7ff fec9 	bl	800e58c <SD_PowerOn>
  /* slave select */
  SELECT();
 800e7fa:	f7ff fe37 	bl	800e46c <SELECT>
  /* check disk type */
  type = 0;
 800e7fe:	2300      	movs	r3, #0
 800e800:	73bb      	strb	r3, [r7, #14]
  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 800e802:	2100      	movs	r1, #0
 800e804:	2040      	movs	r0, #64	@ 0x40
 800e806:	f7ff ff8c 	bl	800e722 <SD_SendCmd>
 800e80a:	4603      	mov	r3, r0
 800e80c:	2b01      	cmp	r3, #1
 800e80e:	f040 80a1 	bne.w	800e954 <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 800e812:	4b5f      	ldr	r3, [pc, #380]	@ (800e990 <SD_disk_initialize+0x1c4>)
 800e814:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800e818:	801a      	strh	r2, [r3, #0]
    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800e81a:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800e81e:	2048      	movs	r0, #72	@ 0x48
 800e820:	f7ff ff7f 	bl	800e722 <SD_SendCmd>
 800e824:	4603      	mov	r3, r0
 800e826:	2b01      	cmp	r3, #1
 800e828:	d155      	bne.n	800e8d6 <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 800e82a:	2300      	movs	r3, #0
 800e82c:	73fb      	strb	r3, [r7, #15]
 800e82e:	e00c      	b.n	800e84a <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 800e830:	7bfc      	ldrb	r4, [r7, #15]
 800e832:	f7ff fe67 	bl	800e504 <SPI_RxByte>
 800e836:	4603      	mov	r3, r0
 800e838:	461a      	mov	r2, r3
 800e83a:	f104 0310 	add.w	r3, r4, #16
 800e83e:	443b      	add	r3, r7
 800e840:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 800e844:	7bfb      	ldrb	r3, [r7, #15]
 800e846:	3301      	adds	r3, #1
 800e848:	73fb      	strb	r3, [r7, #15]
 800e84a:	7bfb      	ldrb	r3, [r7, #15]
 800e84c:	2b03      	cmp	r3, #3
 800e84e:	d9ef      	bls.n	800e830 <SD_disk_initialize+0x64>
      }
      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800e850:	7abb      	ldrb	r3, [r7, #10]
 800e852:	2b01      	cmp	r3, #1
 800e854:	d17e      	bne.n	800e954 <SD_disk_initialize+0x188>
 800e856:	7afb      	ldrb	r3, [r7, #11]
 800e858:	2baa      	cmp	r3, #170	@ 0xaa
 800e85a:	d17b      	bne.n	800e954 <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800e85c:	2100      	movs	r1, #0
 800e85e:	2077      	movs	r0, #119	@ 0x77
 800e860:	f7ff ff5f 	bl	800e722 <SD_SendCmd>
 800e864:	4603      	mov	r3, r0
 800e866:	2b01      	cmp	r3, #1
 800e868:	d807      	bhi.n	800e87a <SD_disk_initialize+0xae>
 800e86a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800e86e:	2069      	movs	r0, #105	@ 0x69
 800e870:	f7ff ff57 	bl	800e722 <SD_SendCmd>
 800e874:	4603      	mov	r3, r0
 800e876:	2b00      	cmp	r3, #0
 800e878:	d004      	beq.n	800e884 <SD_disk_initialize+0xb8>
        } while (Timer1);
 800e87a:	4b45      	ldr	r3, [pc, #276]	@ (800e990 <SD_disk_initialize+0x1c4>)
 800e87c:	881b      	ldrh	r3, [r3, #0]
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d1ec      	bne.n	800e85c <SD_disk_initialize+0x90>
 800e882:	e000      	b.n	800e886 <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800e884:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800e886:	4b42      	ldr	r3, [pc, #264]	@ (800e990 <SD_disk_initialize+0x1c4>)
 800e888:	881b      	ldrh	r3, [r3, #0]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d062      	beq.n	800e954 <SD_disk_initialize+0x188>
 800e88e:	2100      	movs	r1, #0
 800e890:	207a      	movs	r0, #122	@ 0x7a
 800e892:	f7ff ff46 	bl	800e722 <SD_SendCmd>
 800e896:	4603      	mov	r3, r0
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d15b      	bne.n	800e954 <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 800e89c:	2300      	movs	r3, #0
 800e89e:	73fb      	strb	r3, [r7, #15]
 800e8a0:	e00c      	b.n	800e8bc <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 800e8a2:	7bfc      	ldrb	r4, [r7, #15]
 800e8a4:	f7ff fe2e 	bl	800e504 <SPI_RxByte>
 800e8a8:	4603      	mov	r3, r0
 800e8aa:	461a      	mov	r2, r3
 800e8ac:	f104 0310 	add.w	r3, r4, #16
 800e8b0:	443b      	add	r3, r7
 800e8b2:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 800e8b6:	7bfb      	ldrb	r3, [r7, #15]
 800e8b8:	3301      	adds	r3, #1
 800e8ba:	73fb      	strb	r3, [r7, #15]
 800e8bc:	7bfb      	ldrb	r3, [r7, #15]
 800e8be:	2b03      	cmp	r3, #3
 800e8c0:	d9ef      	bls.n	800e8a2 <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800e8c2:	7a3b      	ldrb	r3, [r7, #8]
 800e8c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d001      	beq.n	800e8d0 <SD_disk_initialize+0x104>
 800e8cc:	230c      	movs	r3, #12
 800e8ce:	e000      	b.n	800e8d2 <SD_disk_initialize+0x106>
 800e8d0:	2304      	movs	r3, #4
 800e8d2:	73bb      	strb	r3, [r7, #14]
 800e8d4:	e03e      	b.n	800e954 <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800e8d6:	2100      	movs	r1, #0
 800e8d8:	2077      	movs	r0, #119	@ 0x77
 800e8da:	f7ff ff22 	bl	800e722 <SD_SendCmd>
 800e8de:	4603      	mov	r3, r0
 800e8e0:	2b01      	cmp	r3, #1
 800e8e2:	d808      	bhi.n	800e8f6 <SD_disk_initialize+0x12a>
 800e8e4:	2100      	movs	r1, #0
 800e8e6:	2069      	movs	r0, #105	@ 0x69
 800e8e8:	f7ff ff1b 	bl	800e722 <SD_SendCmd>
 800e8ec:	4603      	mov	r3, r0
 800e8ee:	2b01      	cmp	r3, #1
 800e8f0:	d801      	bhi.n	800e8f6 <SD_disk_initialize+0x12a>
 800e8f2:	2302      	movs	r3, #2
 800e8f4:	e000      	b.n	800e8f8 <SD_disk_initialize+0x12c>
 800e8f6:	2301      	movs	r3, #1
 800e8f8:	73bb      	strb	r3, [r7, #14]
      do
      {
        if (type == CT_SD1)
 800e8fa:	7bbb      	ldrb	r3, [r7, #14]
 800e8fc:	2b02      	cmp	r3, #2
 800e8fe:	d10e      	bne.n	800e91e <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800e900:	2100      	movs	r1, #0
 800e902:	2077      	movs	r0, #119	@ 0x77
 800e904:	f7ff ff0d 	bl	800e722 <SD_SendCmd>
 800e908:	4603      	mov	r3, r0
 800e90a:	2b01      	cmp	r3, #1
 800e90c:	d80e      	bhi.n	800e92c <SD_disk_initialize+0x160>
 800e90e:	2100      	movs	r1, #0
 800e910:	2069      	movs	r0, #105	@ 0x69
 800e912:	f7ff ff06 	bl	800e722 <SD_SendCmd>
 800e916:	4603      	mov	r3, r0
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d107      	bne.n	800e92c <SD_disk_initialize+0x160>
 800e91c:	e00c      	b.n	800e938 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800e91e:	2100      	movs	r1, #0
 800e920:	2041      	movs	r0, #65	@ 0x41
 800e922:	f7ff fefe 	bl	800e722 <SD_SendCmd>
 800e926:	4603      	mov	r3, r0
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d004      	beq.n	800e936 <SD_disk_initialize+0x16a>
        }
      } while (Timer1);
 800e92c:	4b18      	ldr	r3, [pc, #96]	@ (800e990 <SD_disk_initialize+0x1c4>)
 800e92e:	881b      	ldrh	r3, [r3, #0]
 800e930:	2b00      	cmp	r3, #0
 800e932:	d1e2      	bne.n	800e8fa <SD_disk_initialize+0x12e>
 800e934:	e000      	b.n	800e938 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800e936:	bf00      	nop
      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 800e938:	4b15      	ldr	r3, [pc, #84]	@ (800e990 <SD_disk_initialize+0x1c4>)
 800e93a:	881b      	ldrh	r3, [r3, #0]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d007      	beq.n	800e950 <SD_disk_initialize+0x184>
 800e940:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800e944:	2050      	movs	r0, #80	@ 0x50
 800e946:	f7ff feec 	bl	800e722 <SD_SendCmd>
 800e94a:	4603      	mov	r3, r0
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d001      	beq.n	800e954 <SD_disk_initialize+0x188>
 800e950:	2300      	movs	r3, #0
 800e952:	73bb      	strb	r3, [r7, #14]
    }
  }
  CardType = type;
 800e954:	4a0f      	ldr	r2, [pc, #60]	@ (800e994 <SD_disk_initialize+0x1c8>)
 800e956:	7bbb      	ldrb	r3, [r7, #14]
 800e958:	7013      	strb	r3, [r2, #0]
  /* Idle */
  DESELECT();
 800e95a:	f7ff fd93 	bl	800e484 <DESELECT>
  SPI_RxByte();
 800e95e:	f7ff fdd1 	bl	800e504 <SPI_RxByte>
  /* Clear STA_NOINIT */
  if (type)
 800e962:	7bbb      	ldrb	r3, [r7, #14]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d008      	beq.n	800e97a <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 800e968:	4b08      	ldr	r3, [pc, #32]	@ (800e98c <SD_disk_initialize+0x1c0>)
 800e96a:	781b      	ldrb	r3, [r3, #0]
 800e96c:	b2db      	uxtb	r3, r3
 800e96e:	f023 0301 	bic.w	r3, r3, #1
 800e972:	b2da      	uxtb	r2, r3
 800e974:	4b05      	ldr	r3, [pc, #20]	@ (800e98c <SD_disk_initialize+0x1c0>)
 800e976:	701a      	strb	r2, [r3, #0]
 800e978:	e001      	b.n	800e97e <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 800e97a:	f7ff fe49 	bl	800e610 <SD_PowerOff>
  }
  return Stat;
 800e97e:	4b03      	ldr	r3, [pc, #12]	@ (800e98c <SD_disk_initialize+0x1c0>)
 800e980:	781b      	ldrb	r3, [r3, #0]
 800e982:	b2db      	uxtb	r3, r3
}
 800e984:	4618      	mov	r0, r3
 800e986:	3714      	adds	r7, #20
 800e988:	46bd      	mov	sp, r7
 800e98a:	bd90      	pop	{r4, r7, pc}
 800e98c:	240000bc 	.word	0x240000bc
 800e990:	24002850 	.word	0x24002850
 800e994:	24002854 	.word	0x24002854

0800e998 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 800e998:	b480      	push	{r7}
 800e99a:	b083      	sub	sp, #12
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	4603      	mov	r3, r0
 800e9a0:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 800e9a2:	79fb      	ldrb	r3, [r7, #7]
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d001      	beq.n	800e9ac <SD_disk_status+0x14>
 800e9a8:	2301      	movs	r3, #1
 800e9aa:	e002      	b.n	800e9b2 <SD_disk_status+0x1a>
  return Stat;
 800e9ac:	4b04      	ldr	r3, [pc, #16]	@ (800e9c0 <SD_disk_status+0x28>)
 800e9ae:	781b      	ldrb	r3, [r3, #0]
 800e9b0:	b2db      	uxtb	r3, r3
}
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	370c      	adds	r7, #12
 800e9b6:	46bd      	mov	sp, r7
 800e9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9bc:	4770      	bx	lr
 800e9be:	bf00      	nop
 800e9c0:	240000bc 	.word	0x240000bc

0800e9c4 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 800e9c4:	b580      	push	{r7, lr}
 800e9c6:	b084      	sub	sp, #16
 800e9c8:	af00      	add	r7, sp, #0
 800e9ca:	60b9      	str	r1, [r7, #8]
 800e9cc:	607a      	str	r2, [r7, #4]
 800e9ce:	603b      	str	r3, [r7, #0]
 800e9d0:	4603      	mov	r3, r0
 800e9d2:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 800e9d4:	7bfb      	ldrb	r3, [r7, #15]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d102      	bne.n	800e9e0 <SD_disk_read+0x1c>
 800e9da:	683b      	ldr	r3, [r7, #0]
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d101      	bne.n	800e9e4 <SD_disk_read+0x20>
 800e9e0:	2304      	movs	r3, #4
 800e9e2:	e051      	b.n	800ea88 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800e9e4:	4b2a      	ldr	r3, [pc, #168]	@ (800ea90 <SD_disk_read+0xcc>)
 800e9e6:	781b      	ldrb	r3, [r3, #0]
 800e9e8:	b2db      	uxtb	r3, r3
 800e9ea:	f003 0301 	and.w	r3, r3, #1
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d001      	beq.n	800e9f6 <SD_disk_read+0x32>
 800e9f2:	2303      	movs	r3, #3
 800e9f4:	e048      	b.n	800ea88 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 800e9f6:	4b27      	ldr	r3, [pc, #156]	@ (800ea94 <SD_disk_read+0xd0>)
 800e9f8:	781b      	ldrb	r3, [r3, #0]
 800e9fa:	f003 0304 	and.w	r3, r3, #4
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d102      	bne.n	800ea08 <SD_disk_read+0x44>
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	025b      	lsls	r3, r3, #9
 800ea06:	607b      	str	r3, [r7, #4]

  SELECT();
 800ea08:	f7ff fd30 	bl	800e46c <SELECT>

  if (count == 1)
 800ea0c:	683b      	ldr	r3, [r7, #0]
 800ea0e:	2b01      	cmp	r3, #1
 800ea10:	d111      	bne.n	800ea36 <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800ea12:	6879      	ldr	r1, [r7, #4]
 800ea14:	2051      	movs	r0, #81	@ 0x51
 800ea16:	f7ff fe84 	bl	800e722 <SD_SendCmd>
 800ea1a:	4603      	mov	r3, r0
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d129      	bne.n	800ea74 <SD_disk_read+0xb0>
 800ea20:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800ea24:	68b8      	ldr	r0, [r7, #8]
 800ea26:	f7ff fe0b 	bl	800e640 <SD_RxDataBlock>
 800ea2a:	4603      	mov	r3, r0
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d021      	beq.n	800ea74 <SD_disk_read+0xb0>
 800ea30:	2300      	movs	r3, #0
 800ea32:	603b      	str	r3, [r7, #0]
 800ea34:	e01e      	b.n	800ea74 <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 800ea36:	6879      	ldr	r1, [r7, #4]
 800ea38:	2052      	movs	r0, #82	@ 0x52
 800ea3a:	f7ff fe72 	bl	800e722 <SD_SendCmd>
 800ea3e:	4603      	mov	r3, r0
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d117      	bne.n	800ea74 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 800ea44:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800ea48:	68b8      	ldr	r0, [r7, #8]
 800ea4a:	f7ff fdf9 	bl	800e640 <SD_RxDataBlock>
 800ea4e:	4603      	mov	r3, r0
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d00a      	beq.n	800ea6a <SD_disk_read+0xa6>
        buff += 512;
 800ea54:	68bb      	ldr	r3, [r7, #8]
 800ea56:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800ea5a:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800ea5c:	683b      	ldr	r3, [r7, #0]
 800ea5e:	3b01      	subs	r3, #1
 800ea60:	603b      	str	r3, [r7, #0]
 800ea62:	683b      	ldr	r3, [r7, #0]
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d1ed      	bne.n	800ea44 <SD_disk_read+0x80>
 800ea68:	e000      	b.n	800ea6c <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 800ea6a:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 800ea6c:	2100      	movs	r1, #0
 800ea6e:	204c      	movs	r0, #76	@ 0x4c
 800ea70:	f7ff fe57 	bl	800e722 <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 800ea74:	f7ff fd06 	bl	800e484 <DESELECT>
  SPI_RxByte();
 800ea78:	f7ff fd44 	bl	800e504 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 800ea7c:	683b      	ldr	r3, [r7, #0]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	bf14      	ite	ne
 800ea82:	2301      	movne	r3, #1
 800ea84:	2300      	moveq	r3, #0
 800ea86:	b2db      	uxtb	r3, r3
}
 800ea88:	4618      	mov	r0, r3
 800ea8a:	3710      	adds	r7, #16
 800ea8c:	46bd      	mov	sp, r7
 800ea8e:	bd80      	pop	{r7, pc}
 800ea90:	240000bc 	.word	0x240000bc
 800ea94:	24002854 	.word	0x24002854

0800ea98 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b084      	sub	sp, #16
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	60b9      	str	r1, [r7, #8]
 800eaa0:	607a      	str	r2, [r7, #4]
 800eaa2:	603b      	str	r3, [r7, #0]
 800eaa4:	4603      	mov	r3, r0
 800eaa6:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 800eaa8:	7bfb      	ldrb	r3, [r7, #15]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d102      	bne.n	800eab4 <SD_disk_write+0x1c>
 800eaae:	683b      	ldr	r3, [r7, #0]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d101      	bne.n	800eab8 <SD_disk_write+0x20>
 800eab4:	2304      	movs	r3, #4
 800eab6:	e06b      	b.n	800eb90 <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800eab8:	4b37      	ldr	r3, [pc, #220]	@ (800eb98 <SD_disk_write+0x100>)
 800eaba:	781b      	ldrb	r3, [r3, #0]
 800eabc:	b2db      	uxtb	r3, r3
 800eabe:	f003 0301 	and.w	r3, r3, #1
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d001      	beq.n	800eaca <SD_disk_write+0x32>
 800eac6:	2303      	movs	r3, #3
 800eac8:	e062      	b.n	800eb90 <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 800eaca:	4b33      	ldr	r3, [pc, #204]	@ (800eb98 <SD_disk_write+0x100>)
 800eacc:	781b      	ldrb	r3, [r3, #0]
 800eace:	b2db      	uxtb	r3, r3
 800ead0:	f003 0304 	and.w	r3, r3, #4
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d001      	beq.n	800eadc <SD_disk_write+0x44>
 800ead8:	2302      	movs	r3, #2
 800eada:	e059      	b.n	800eb90 <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 800eadc:	4b2f      	ldr	r3, [pc, #188]	@ (800eb9c <SD_disk_write+0x104>)
 800eade:	781b      	ldrb	r3, [r3, #0]
 800eae0:	f003 0304 	and.w	r3, r3, #4
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d102      	bne.n	800eaee <SD_disk_write+0x56>
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	025b      	lsls	r3, r3, #9
 800eaec:	607b      	str	r3, [r7, #4]

  SELECT();
 800eaee:	f7ff fcbd 	bl	800e46c <SELECT>

  if (count == 1)
 800eaf2:	683b      	ldr	r3, [r7, #0]
 800eaf4:	2b01      	cmp	r3, #1
 800eaf6:	d110      	bne.n	800eb1a <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800eaf8:	6879      	ldr	r1, [r7, #4]
 800eafa:	2058      	movs	r0, #88	@ 0x58
 800eafc:	f7ff fe11 	bl	800e722 <SD_SendCmd>
 800eb00:	4603      	mov	r3, r0
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d13a      	bne.n	800eb7c <SD_disk_write+0xe4>
 800eb06:	21fe      	movs	r1, #254	@ 0xfe
 800eb08:	68b8      	ldr	r0, [r7, #8]
 800eb0a:	f7ff fdc7 	bl	800e69c <SD_TxDataBlock>
 800eb0e:	4603      	mov	r3, r0
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d033      	beq.n	800eb7c <SD_disk_write+0xe4>
      count = 0;
 800eb14:	2300      	movs	r3, #0
 800eb16:	603b      	str	r3, [r7, #0]
 800eb18:	e030      	b.n	800eb7c <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 800eb1a:	4b20      	ldr	r3, [pc, #128]	@ (800eb9c <SD_disk_write+0x104>)
 800eb1c:	781b      	ldrb	r3, [r3, #0]
 800eb1e:	f003 0302 	and.w	r3, r3, #2
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d007      	beq.n	800eb36 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 800eb26:	2100      	movs	r1, #0
 800eb28:	2077      	movs	r0, #119	@ 0x77
 800eb2a:	f7ff fdfa 	bl	800e722 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 800eb2e:	6839      	ldr	r1, [r7, #0]
 800eb30:	2057      	movs	r0, #87	@ 0x57
 800eb32:	f7ff fdf6 	bl	800e722 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 800eb36:	6879      	ldr	r1, [r7, #4]
 800eb38:	2059      	movs	r0, #89	@ 0x59
 800eb3a:	f7ff fdf2 	bl	800e722 <SD_SendCmd>
 800eb3e:	4603      	mov	r3, r0
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d11b      	bne.n	800eb7c <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 800eb44:	21fc      	movs	r1, #252	@ 0xfc
 800eb46:	68b8      	ldr	r0, [r7, #8]
 800eb48:	f7ff fda8 	bl	800e69c <SD_TxDataBlock>
 800eb4c:	4603      	mov	r3, r0
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d00a      	beq.n	800eb68 <SD_disk_write+0xd0>
        buff += 512;
 800eb52:	68bb      	ldr	r3, [r7, #8]
 800eb54:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800eb58:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800eb5a:	683b      	ldr	r3, [r7, #0]
 800eb5c:	3b01      	subs	r3, #1
 800eb5e:	603b      	str	r3, [r7, #0]
 800eb60:	683b      	ldr	r3, [r7, #0]
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d1ee      	bne.n	800eb44 <SD_disk_write+0xac>
 800eb66:	e000      	b.n	800eb6a <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 800eb68:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 800eb6a:	21fd      	movs	r1, #253	@ 0xfd
 800eb6c:	2000      	movs	r0, #0
 800eb6e:	f7ff fd95 	bl	800e69c <SD_TxDataBlock>
 800eb72:	4603      	mov	r3, r0
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d101      	bne.n	800eb7c <SD_disk_write+0xe4>
      {
        count = 1;
 800eb78:	2301      	movs	r3, #1
 800eb7a:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 800eb7c:	f7ff fc82 	bl	800e484 <DESELECT>
  SPI_RxByte();
 800eb80:	f7ff fcc0 	bl	800e504 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 800eb84:	683b      	ldr	r3, [r7, #0]
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	bf14      	ite	ne
 800eb8a:	2301      	movne	r3, #1
 800eb8c:	2300      	moveq	r3, #0
 800eb8e:	b2db      	uxtb	r3, r3
}
 800eb90:	4618      	mov	r0, r3
 800eb92:	3710      	adds	r7, #16
 800eb94:	46bd      	mov	sp, r7
 800eb96:	bd80      	pop	{r7, pc}
 800eb98:	240000bc 	.word	0x240000bc
 800eb9c:	24002854 	.word	0x24002854

0800eba0 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 800eba0:	b590      	push	{r4, r7, lr}
 800eba2:	b08b      	sub	sp, #44	@ 0x2c
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	4603      	mov	r3, r0
 800eba8:	603a      	str	r2, [r7, #0]
 800ebaa:	71fb      	strb	r3, [r7, #7]
 800ebac:	460b      	mov	r3, r1
 800ebae:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 800ebb0:	683b      	ldr	r3, [r7, #0]
 800ebb2:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 800ebb4:	79fb      	ldrb	r3, [r7, #7]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d001      	beq.n	800ebbe <SD_disk_ioctl+0x1e>
 800ebba:	2304      	movs	r3, #4
 800ebbc:	e113      	b.n	800ede6 <SD_disk_ioctl+0x246>
  res = RES_ERROR;
 800ebbe:	2301      	movs	r3, #1
 800ebc0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 800ebc4:	79bb      	ldrb	r3, [r7, #6]
 800ebc6:	2b05      	cmp	r3, #5
 800ebc8:	d124      	bne.n	800ec14 <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 800ebca:	6a3b      	ldr	r3, [r7, #32]
 800ebcc:	781b      	ldrb	r3, [r3, #0]
 800ebce:	2b02      	cmp	r3, #2
 800ebd0:	d012      	beq.n	800ebf8 <SD_disk_ioctl+0x58>
 800ebd2:	2b02      	cmp	r3, #2
 800ebd4:	dc1a      	bgt.n	800ec0c <SD_disk_ioctl+0x6c>
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d002      	beq.n	800ebe0 <SD_disk_ioctl+0x40>
 800ebda:	2b01      	cmp	r3, #1
 800ebdc:	d006      	beq.n	800ebec <SD_disk_ioctl+0x4c>
 800ebde:	e015      	b.n	800ec0c <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 800ebe0:	f7ff fd16 	bl	800e610 <SD_PowerOff>
      res = RES_OK;
 800ebe4:	2300      	movs	r3, #0
 800ebe6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800ebea:	e0fa      	b.n	800ede2 <SD_disk_ioctl+0x242>
    case 1:
      SD_PowerOn();   /* Power On */
 800ebec:	f7ff fcce 	bl	800e58c <SD_PowerOn>
      res = RES_OK;
 800ebf0:	2300      	movs	r3, #0
 800ebf2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800ebf6:	e0f4      	b.n	800ede2 <SD_disk_ioctl+0x242>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 800ebf8:	6a3b      	ldr	r3, [r7, #32]
 800ebfa:	1c5c      	adds	r4, r3, #1
 800ebfc:	f7ff fd14 	bl	800e628 <SD_CheckPower>
 800ec00:	4603      	mov	r3, r0
 800ec02:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 800ec04:	2300      	movs	r3, #0
 800ec06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800ec0a:	e0ea      	b.n	800ede2 <SD_disk_ioctl+0x242>
    default:
      res = RES_PARERR;
 800ec0c:	2304      	movs	r3, #4
 800ec0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ec12:	e0e6      	b.n	800ede2 <SD_disk_ioctl+0x242>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT){
 800ec14:	4b76      	ldr	r3, [pc, #472]	@ (800edf0 <SD_disk_ioctl+0x250>)
 800ec16:	781b      	ldrb	r3, [r3, #0]
 800ec18:	b2db      	uxtb	r3, r3
 800ec1a:	f003 0301 	and.w	r3, r3, #1
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d001      	beq.n	800ec26 <SD_disk_ioctl+0x86>
    	return RES_NOTRDY;
 800ec22:	2303      	movs	r3, #3
 800ec24:	e0df      	b.n	800ede6 <SD_disk_ioctl+0x246>
    }
    SELECT();
 800ec26:	f7ff fc21 	bl	800e46c <SELECT>
    switch (ctrl)
 800ec2a:	79bb      	ldrb	r3, [r7, #6]
 800ec2c:	2b0d      	cmp	r3, #13
 800ec2e:	f200 80c9 	bhi.w	800edc4 <SD_disk_ioctl+0x224>
 800ec32:	a201      	add	r2, pc, #4	@ (adr r2, 800ec38 <SD_disk_ioctl+0x98>)
 800ec34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec38:	0800ed2f 	.word	0x0800ed2f
 800ec3c:	0800ec71 	.word	0x0800ec71
 800ec40:	0800ed1f 	.word	0x0800ed1f
 800ec44:	0800edc5 	.word	0x0800edc5
 800ec48:	0800edc5 	.word	0x0800edc5
 800ec4c:	0800edc5 	.word	0x0800edc5
 800ec50:	0800edc5 	.word	0x0800edc5
 800ec54:	0800edc5 	.word	0x0800edc5
 800ec58:	0800edc5 	.word	0x0800edc5
 800ec5c:	0800edc5 	.word	0x0800edc5
 800ec60:	0800edc5 	.word	0x0800edc5
 800ec64:	0800ed41 	.word	0x0800ed41
 800ec68:	0800ed65 	.word	0x0800ed65
 800ec6c:	0800ed89 	.word	0x0800ed89
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800ec70:	2100      	movs	r1, #0
 800ec72:	2049      	movs	r0, #73	@ 0x49
 800ec74:	f7ff fd55 	bl	800e722 <SD_SendCmd>
 800ec78:	4603      	mov	r3, r0
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	f040 80a6 	bne.w	800edcc <SD_disk_ioctl+0x22c>
 800ec80:	f107 030c 	add.w	r3, r7, #12
 800ec84:	2110      	movs	r1, #16
 800ec86:	4618      	mov	r0, r3
 800ec88:	f7ff fcda 	bl	800e640 <SD_RxDataBlock>
 800ec8c:	4603      	mov	r3, r0
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	f000 809c 	beq.w	800edcc <SD_disk_ioctl+0x22c>
      {
        if ((csd[0] >> 6) == 1)
 800ec94:	7b3b      	ldrb	r3, [r7, #12]
 800ec96:	099b      	lsrs	r3, r3, #6
 800ec98:	b2db      	uxtb	r3, r3
 800ec9a:	2b01      	cmp	r3, #1
 800ec9c:	d10d      	bne.n	800ecba <SD_disk_ioctl+0x11a>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800ec9e:	7d7b      	ldrb	r3, [r7, #21]
 800eca0:	461a      	mov	r2, r3
 800eca2:	7d3b      	ldrb	r3, [r7, #20]
 800eca4:	021b      	lsls	r3, r3, #8
 800eca6:	b29b      	uxth	r3, r3
 800eca8:	4413      	add	r3, r2
 800ecaa:	b29b      	uxth	r3, r3
 800ecac:	3301      	adds	r3, #1
 800ecae:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 800ecb0:	8bfb      	ldrh	r3, [r7, #30]
 800ecb2:	029a      	lsls	r2, r3, #10
 800ecb4:	683b      	ldr	r3, [r7, #0]
 800ecb6:	601a      	str	r2, [r3, #0]
 800ecb8:	e02d      	b.n	800ed16 <SD_disk_ioctl+0x176>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800ecba:	7c7b      	ldrb	r3, [r7, #17]
 800ecbc:	f003 030f 	and.w	r3, r3, #15
 800ecc0:	b2da      	uxtb	r2, r3
 800ecc2:	7dbb      	ldrb	r3, [r7, #22]
 800ecc4:	09db      	lsrs	r3, r3, #7
 800ecc6:	b2db      	uxtb	r3, r3
 800ecc8:	4413      	add	r3, r2
 800ecca:	b2da      	uxtb	r2, r3
 800eccc:	7d7b      	ldrb	r3, [r7, #21]
 800ecce:	005b      	lsls	r3, r3, #1
 800ecd0:	b2db      	uxtb	r3, r3
 800ecd2:	f003 0306 	and.w	r3, r3, #6
 800ecd6:	b2db      	uxtb	r3, r3
 800ecd8:	4413      	add	r3, r2
 800ecda:	b2db      	uxtb	r3, r3
 800ecdc:	3302      	adds	r3, #2
 800ecde:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800ece2:	7d3b      	ldrb	r3, [r7, #20]
 800ece4:	099b      	lsrs	r3, r3, #6
 800ece6:	b2db      	uxtb	r3, r3
 800ece8:	461a      	mov	r2, r3
 800ecea:	7cfb      	ldrb	r3, [r7, #19]
 800ecec:	009b      	lsls	r3, r3, #2
 800ecee:	b29b      	uxth	r3, r3
 800ecf0:	4413      	add	r3, r2
 800ecf2:	b29a      	uxth	r2, r3
 800ecf4:	7cbb      	ldrb	r3, [r7, #18]
 800ecf6:	029b      	lsls	r3, r3, #10
 800ecf8:	b29b      	uxth	r3, r3
 800ecfa:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800ecfe:	b29b      	uxth	r3, r3
 800ed00:	4413      	add	r3, r2
 800ed02:	b29b      	uxth	r3, r3
 800ed04:	3301      	adds	r3, #1
 800ed06:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 800ed08:	8bfa      	ldrh	r2, [r7, #30]
 800ed0a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ed0e:	3b09      	subs	r3, #9
 800ed10:	409a      	lsls	r2, r3
 800ed12:	683b      	ldr	r3, [r7, #0]
 800ed14:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 800ed16:	2300      	movs	r3, #0
 800ed18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 800ed1c:	e056      	b.n	800edcc <SD_disk_ioctl+0x22c>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 800ed1e:	683b      	ldr	r3, [r7, #0]
 800ed20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ed24:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 800ed26:	2300      	movs	r3, #0
 800ed28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800ed2c:	e055      	b.n	800edda <SD_disk_ioctl+0x23a>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800ed2e:	f7ff fc13 	bl	800e558 <SD_ReadyWait>
 800ed32:	4603      	mov	r3, r0
 800ed34:	2bff      	cmp	r3, #255	@ 0xff
 800ed36:	d14b      	bne.n	800edd0 <SD_disk_ioctl+0x230>
 800ed38:	2300      	movs	r3, #0
 800ed3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800ed3e:	e047      	b.n	800edd0 <SD_disk_ioctl+0x230>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800ed40:	2100      	movs	r1, #0
 800ed42:	2049      	movs	r0, #73	@ 0x49
 800ed44:	f7ff fced 	bl	800e722 <SD_SendCmd>
 800ed48:	4603      	mov	r3, r0
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d142      	bne.n	800edd4 <SD_disk_ioctl+0x234>
 800ed4e:	2110      	movs	r1, #16
 800ed50:	6a38      	ldr	r0, [r7, #32]
 800ed52:	f7ff fc75 	bl	800e640 <SD_RxDataBlock>
 800ed56:	4603      	mov	r3, r0
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d03b      	beq.n	800edd4 <SD_disk_ioctl+0x234>
 800ed5c:	2300      	movs	r3, #0
 800ed5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800ed62:	e037      	b.n	800edd4 <SD_disk_ioctl+0x234>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800ed64:	2100      	movs	r1, #0
 800ed66:	204a      	movs	r0, #74	@ 0x4a
 800ed68:	f7ff fcdb 	bl	800e722 <SD_SendCmd>
 800ed6c:	4603      	mov	r3, r0
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d132      	bne.n	800edd8 <SD_disk_ioctl+0x238>
 800ed72:	2110      	movs	r1, #16
 800ed74:	6a38      	ldr	r0, [r7, #32]
 800ed76:	f7ff fc63 	bl	800e640 <SD_RxDataBlock>
 800ed7a:	4603      	mov	r3, r0
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d02b      	beq.n	800edd8 <SD_disk_ioctl+0x238>
 800ed80:	2300      	movs	r3, #0
 800ed82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800ed86:	e027      	b.n	800edd8 <SD_disk_ioctl+0x238>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 800ed88:	2100      	movs	r1, #0
 800ed8a:	207a      	movs	r0, #122	@ 0x7a
 800ed8c:	f7ff fcc9 	bl	800e722 <SD_SendCmd>
 800ed90:	4603      	mov	r3, r0
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d116      	bne.n	800edc4 <SD_disk_ioctl+0x224>
      {
        for (n = 0; n < 4; n++)
 800ed96:	2300      	movs	r3, #0
 800ed98:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800ed9c:	e00b      	b.n	800edb6 <SD_disk_ioctl+0x216>
        {
          *ptr++ = SPI_RxByte();
 800ed9e:	6a3c      	ldr	r4, [r7, #32]
 800eda0:	1c63      	adds	r3, r4, #1
 800eda2:	623b      	str	r3, [r7, #32]
 800eda4:	f7ff fbae 	bl	800e504 <SPI_RxByte>
 800eda8:	4603      	mov	r3, r0
 800edaa:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 800edac:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800edb0:	3301      	adds	r3, #1
 800edb2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800edb6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800edba:	2b03      	cmp	r3, #3
 800edbc:	d9ef      	bls.n	800ed9e <SD_disk_ioctl+0x1fe>
        }
        res = RES_OK;
 800edbe:	2300      	movs	r3, #0
 800edc0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
    default:
      res = RES_PARERR;
 800edc4:	2304      	movs	r3, #4
 800edc6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800edca:	e006      	b.n	800edda <SD_disk_ioctl+0x23a>
      break;
 800edcc:	bf00      	nop
 800edce:	e004      	b.n	800edda <SD_disk_ioctl+0x23a>
      break;
 800edd0:	bf00      	nop
 800edd2:	e002      	b.n	800edda <SD_disk_ioctl+0x23a>
      break;
 800edd4:	bf00      	nop
 800edd6:	e000      	b.n	800edda <SD_disk_ioctl+0x23a>
      break;
 800edd8:	bf00      	nop
    }
    DESELECT();
 800edda:	f7ff fb53 	bl	800e484 <DESELECT>
    SPI_RxByte();
 800edde:	f7ff fb91 	bl	800e504 <SPI_RxByte>
  }
  return res;
 800ede2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800ede6:	4618      	mov	r0, r3
 800ede8:	372c      	adds	r7, #44	@ 0x2c
 800edea:	46bd      	mov	sp, r7
 800edec:	bd90      	pop	{r4, r7, pc}
 800edee:	bf00      	nop
 800edf0:	240000bc 	.word	0x240000bc

0800edf4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800edf4:	b580      	push	{r7, lr}
 800edf6:	b084      	sub	sp, #16
 800edf8:	af00      	add	r7, sp, #0
 800edfa:	4603      	mov	r3, r0
 800edfc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800edfe:	79fb      	ldrb	r3, [r7, #7]
 800ee00:	4a08      	ldr	r2, [pc, #32]	@ (800ee24 <disk_status+0x30>)
 800ee02:	009b      	lsls	r3, r3, #2
 800ee04:	4413      	add	r3, r2
 800ee06:	685b      	ldr	r3, [r3, #4]
 800ee08:	685b      	ldr	r3, [r3, #4]
 800ee0a:	79fa      	ldrb	r2, [r7, #7]
 800ee0c:	4905      	ldr	r1, [pc, #20]	@ (800ee24 <disk_status+0x30>)
 800ee0e:	440a      	add	r2, r1
 800ee10:	7a12      	ldrb	r2, [r2, #8]
 800ee12:	4610      	mov	r0, r2
 800ee14:	4798      	blx	r3
 800ee16:	4603      	mov	r3, r0
 800ee18:	73fb      	strb	r3, [r7, #15]
  return stat;
 800ee1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee1c:	4618      	mov	r0, r3
 800ee1e:	3710      	adds	r7, #16
 800ee20:	46bd      	mov	sp, r7
 800ee22:	bd80      	pop	{r7, pc}
 800ee24:	24002a80 	.word	0x24002a80

0800ee28 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800ee28:	b580      	push	{r7, lr}
 800ee2a:	b084      	sub	sp, #16
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	4603      	mov	r3, r0
 800ee30:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800ee32:	2300      	movs	r3, #0
 800ee34:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800ee36:	79fb      	ldrb	r3, [r7, #7]
 800ee38:	4a0e      	ldr	r2, [pc, #56]	@ (800ee74 <disk_initialize+0x4c>)
 800ee3a:	5cd3      	ldrb	r3, [r2, r3]
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d114      	bne.n	800ee6a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ee40:	79fb      	ldrb	r3, [r7, #7]
 800ee42:	4a0c      	ldr	r2, [pc, #48]	@ (800ee74 <disk_initialize+0x4c>)
 800ee44:	009b      	lsls	r3, r3, #2
 800ee46:	4413      	add	r3, r2
 800ee48:	685b      	ldr	r3, [r3, #4]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	79fa      	ldrb	r2, [r7, #7]
 800ee4e:	4909      	ldr	r1, [pc, #36]	@ (800ee74 <disk_initialize+0x4c>)
 800ee50:	440a      	add	r2, r1
 800ee52:	7a12      	ldrb	r2, [r2, #8]
 800ee54:	4610      	mov	r0, r2
 800ee56:	4798      	blx	r3
 800ee58:	4603      	mov	r3, r0
 800ee5a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800ee5c:	7bfb      	ldrb	r3, [r7, #15]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d103      	bne.n	800ee6a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800ee62:	79fb      	ldrb	r3, [r7, #7]
 800ee64:	4a03      	ldr	r2, [pc, #12]	@ (800ee74 <disk_initialize+0x4c>)
 800ee66:	2101      	movs	r1, #1
 800ee68:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800ee6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	3710      	adds	r7, #16
 800ee70:	46bd      	mov	sp, r7
 800ee72:	bd80      	pop	{r7, pc}
 800ee74:	24002a80 	.word	0x24002a80

0800ee78 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800ee78:	b590      	push	{r4, r7, lr}
 800ee7a:	b087      	sub	sp, #28
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	60b9      	str	r1, [r7, #8]
 800ee80:	607a      	str	r2, [r7, #4]
 800ee82:	603b      	str	r3, [r7, #0]
 800ee84:	4603      	mov	r3, r0
 800ee86:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800ee88:	7bfb      	ldrb	r3, [r7, #15]
 800ee8a:	4a0a      	ldr	r2, [pc, #40]	@ (800eeb4 <disk_read+0x3c>)
 800ee8c:	009b      	lsls	r3, r3, #2
 800ee8e:	4413      	add	r3, r2
 800ee90:	685b      	ldr	r3, [r3, #4]
 800ee92:	689c      	ldr	r4, [r3, #8]
 800ee94:	7bfb      	ldrb	r3, [r7, #15]
 800ee96:	4a07      	ldr	r2, [pc, #28]	@ (800eeb4 <disk_read+0x3c>)
 800ee98:	4413      	add	r3, r2
 800ee9a:	7a18      	ldrb	r0, [r3, #8]
 800ee9c:	683b      	ldr	r3, [r7, #0]
 800ee9e:	687a      	ldr	r2, [r7, #4]
 800eea0:	68b9      	ldr	r1, [r7, #8]
 800eea2:	47a0      	blx	r4
 800eea4:	4603      	mov	r3, r0
 800eea6:	75fb      	strb	r3, [r7, #23]
  return res;
 800eea8:	7dfb      	ldrb	r3, [r7, #23]
}
 800eeaa:	4618      	mov	r0, r3
 800eeac:	371c      	adds	r7, #28
 800eeae:	46bd      	mov	sp, r7
 800eeb0:	bd90      	pop	{r4, r7, pc}
 800eeb2:	bf00      	nop
 800eeb4:	24002a80 	.word	0x24002a80

0800eeb8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800eeb8:	b590      	push	{r4, r7, lr}
 800eeba:	b087      	sub	sp, #28
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	60b9      	str	r1, [r7, #8]
 800eec0:	607a      	str	r2, [r7, #4]
 800eec2:	603b      	str	r3, [r7, #0]
 800eec4:	4603      	mov	r3, r0
 800eec6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800eec8:	7bfb      	ldrb	r3, [r7, #15]
 800eeca:	4a0a      	ldr	r2, [pc, #40]	@ (800eef4 <disk_write+0x3c>)
 800eecc:	009b      	lsls	r3, r3, #2
 800eece:	4413      	add	r3, r2
 800eed0:	685b      	ldr	r3, [r3, #4]
 800eed2:	68dc      	ldr	r4, [r3, #12]
 800eed4:	7bfb      	ldrb	r3, [r7, #15]
 800eed6:	4a07      	ldr	r2, [pc, #28]	@ (800eef4 <disk_write+0x3c>)
 800eed8:	4413      	add	r3, r2
 800eeda:	7a18      	ldrb	r0, [r3, #8]
 800eedc:	683b      	ldr	r3, [r7, #0]
 800eede:	687a      	ldr	r2, [r7, #4]
 800eee0:	68b9      	ldr	r1, [r7, #8]
 800eee2:	47a0      	blx	r4
 800eee4:	4603      	mov	r3, r0
 800eee6:	75fb      	strb	r3, [r7, #23]
  return res;
 800eee8:	7dfb      	ldrb	r3, [r7, #23]
}
 800eeea:	4618      	mov	r0, r3
 800eeec:	371c      	adds	r7, #28
 800eeee:	46bd      	mov	sp, r7
 800eef0:	bd90      	pop	{r4, r7, pc}
 800eef2:	bf00      	nop
 800eef4:	24002a80 	.word	0x24002a80

0800eef8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800eef8:	b580      	push	{r7, lr}
 800eefa:	b084      	sub	sp, #16
 800eefc:	af00      	add	r7, sp, #0
 800eefe:	4603      	mov	r3, r0
 800ef00:	603a      	str	r2, [r7, #0]
 800ef02:	71fb      	strb	r3, [r7, #7]
 800ef04:	460b      	mov	r3, r1
 800ef06:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800ef08:	79fb      	ldrb	r3, [r7, #7]
 800ef0a:	4a09      	ldr	r2, [pc, #36]	@ (800ef30 <disk_ioctl+0x38>)
 800ef0c:	009b      	lsls	r3, r3, #2
 800ef0e:	4413      	add	r3, r2
 800ef10:	685b      	ldr	r3, [r3, #4]
 800ef12:	691b      	ldr	r3, [r3, #16]
 800ef14:	79fa      	ldrb	r2, [r7, #7]
 800ef16:	4906      	ldr	r1, [pc, #24]	@ (800ef30 <disk_ioctl+0x38>)
 800ef18:	440a      	add	r2, r1
 800ef1a:	7a10      	ldrb	r0, [r2, #8]
 800ef1c:	79b9      	ldrb	r1, [r7, #6]
 800ef1e:	683a      	ldr	r2, [r7, #0]
 800ef20:	4798      	blx	r3
 800ef22:	4603      	mov	r3, r0
 800ef24:	73fb      	strb	r3, [r7, #15]
  return res;
 800ef26:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef28:	4618      	mov	r0, r3
 800ef2a:	3710      	adds	r7, #16
 800ef2c:	46bd      	mov	sp, r7
 800ef2e:	bd80      	pop	{r7, pc}
 800ef30:	24002a80 	.word	0x24002a80

0800ef34 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800ef34:	b480      	push	{r7}
 800ef36:	b085      	sub	sp, #20
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	3301      	adds	r3, #1
 800ef40:	781b      	ldrb	r3, [r3, #0]
 800ef42:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800ef44:	89fb      	ldrh	r3, [r7, #14]
 800ef46:	021b      	lsls	r3, r3, #8
 800ef48:	b21a      	sxth	r2, r3
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	781b      	ldrb	r3, [r3, #0]
 800ef4e:	b21b      	sxth	r3, r3
 800ef50:	4313      	orrs	r3, r2
 800ef52:	b21b      	sxth	r3, r3
 800ef54:	81fb      	strh	r3, [r7, #14]
	return rv;
 800ef56:	89fb      	ldrh	r3, [r7, #14]
}
 800ef58:	4618      	mov	r0, r3
 800ef5a:	3714      	adds	r7, #20
 800ef5c:	46bd      	mov	sp, r7
 800ef5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef62:	4770      	bx	lr

0800ef64 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800ef64:	b480      	push	{r7}
 800ef66:	b085      	sub	sp, #20
 800ef68:	af00      	add	r7, sp, #0
 800ef6a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	3303      	adds	r3, #3
 800ef70:	781b      	ldrb	r3, [r3, #0]
 800ef72:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	021b      	lsls	r3, r3, #8
 800ef78:	687a      	ldr	r2, [r7, #4]
 800ef7a:	3202      	adds	r2, #2
 800ef7c:	7812      	ldrb	r2, [r2, #0]
 800ef7e:	4313      	orrs	r3, r2
 800ef80:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	021b      	lsls	r3, r3, #8
 800ef86:	687a      	ldr	r2, [r7, #4]
 800ef88:	3201      	adds	r2, #1
 800ef8a:	7812      	ldrb	r2, [r2, #0]
 800ef8c:	4313      	orrs	r3, r2
 800ef8e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	021b      	lsls	r3, r3, #8
 800ef94:	687a      	ldr	r2, [r7, #4]
 800ef96:	7812      	ldrb	r2, [r2, #0]
 800ef98:	4313      	orrs	r3, r2
 800ef9a:	60fb      	str	r3, [r7, #12]
	return rv;
 800ef9c:	68fb      	ldr	r3, [r7, #12]
}
 800ef9e:	4618      	mov	r0, r3
 800efa0:	3714      	adds	r7, #20
 800efa2:	46bd      	mov	sp, r7
 800efa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa8:	4770      	bx	lr

0800efaa <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800efaa:	b480      	push	{r7}
 800efac:	b083      	sub	sp, #12
 800efae:	af00      	add	r7, sp, #0
 800efb0:	6078      	str	r0, [r7, #4]
 800efb2:	460b      	mov	r3, r1
 800efb4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	1c5a      	adds	r2, r3, #1
 800efba:	607a      	str	r2, [r7, #4]
 800efbc:	887a      	ldrh	r2, [r7, #2]
 800efbe:	b2d2      	uxtb	r2, r2
 800efc0:	701a      	strb	r2, [r3, #0]
 800efc2:	887b      	ldrh	r3, [r7, #2]
 800efc4:	0a1b      	lsrs	r3, r3, #8
 800efc6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	1c5a      	adds	r2, r3, #1
 800efcc:	607a      	str	r2, [r7, #4]
 800efce:	887a      	ldrh	r2, [r7, #2]
 800efd0:	b2d2      	uxtb	r2, r2
 800efd2:	701a      	strb	r2, [r3, #0]
}
 800efd4:	bf00      	nop
 800efd6:	370c      	adds	r7, #12
 800efd8:	46bd      	mov	sp, r7
 800efda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efde:	4770      	bx	lr

0800efe0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800efe0:	b480      	push	{r7}
 800efe2:	b083      	sub	sp, #12
 800efe4:	af00      	add	r7, sp, #0
 800efe6:	6078      	str	r0, [r7, #4]
 800efe8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	1c5a      	adds	r2, r3, #1
 800efee:	607a      	str	r2, [r7, #4]
 800eff0:	683a      	ldr	r2, [r7, #0]
 800eff2:	b2d2      	uxtb	r2, r2
 800eff4:	701a      	strb	r2, [r3, #0]
 800eff6:	683b      	ldr	r3, [r7, #0]
 800eff8:	0a1b      	lsrs	r3, r3, #8
 800effa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	1c5a      	adds	r2, r3, #1
 800f000:	607a      	str	r2, [r7, #4]
 800f002:	683a      	ldr	r2, [r7, #0]
 800f004:	b2d2      	uxtb	r2, r2
 800f006:	701a      	strb	r2, [r3, #0]
 800f008:	683b      	ldr	r3, [r7, #0]
 800f00a:	0a1b      	lsrs	r3, r3, #8
 800f00c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	1c5a      	adds	r2, r3, #1
 800f012:	607a      	str	r2, [r7, #4]
 800f014:	683a      	ldr	r2, [r7, #0]
 800f016:	b2d2      	uxtb	r2, r2
 800f018:	701a      	strb	r2, [r3, #0]
 800f01a:	683b      	ldr	r3, [r7, #0]
 800f01c:	0a1b      	lsrs	r3, r3, #8
 800f01e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	1c5a      	adds	r2, r3, #1
 800f024:	607a      	str	r2, [r7, #4]
 800f026:	683a      	ldr	r2, [r7, #0]
 800f028:	b2d2      	uxtb	r2, r2
 800f02a:	701a      	strb	r2, [r3, #0]
}
 800f02c:	bf00      	nop
 800f02e:	370c      	adds	r7, #12
 800f030:	46bd      	mov	sp, r7
 800f032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f036:	4770      	bx	lr

0800f038 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800f038:	b480      	push	{r7}
 800f03a:	b087      	sub	sp, #28
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	60f8      	str	r0, [r7, #12]
 800f040:	60b9      	str	r1, [r7, #8]
 800f042:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800f048:	68bb      	ldr	r3, [r7, #8]
 800f04a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d00d      	beq.n	800f06e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800f052:	693a      	ldr	r2, [r7, #16]
 800f054:	1c53      	adds	r3, r2, #1
 800f056:	613b      	str	r3, [r7, #16]
 800f058:	697b      	ldr	r3, [r7, #20]
 800f05a:	1c59      	adds	r1, r3, #1
 800f05c:	6179      	str	r1, [r7, #20]
 800f05e:	7812      	ldrb	r2, [r2, #0]
 800f060:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	3b01      	subs	r3, #1
 800f066:	607b      	str	r3, [r7, #4]
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d1f1      	bne.n	800f052 <mem_cpy+0x1a>
	}
}
 800f06e:	bf00      	nop
 800f070:	371c      	adds	r7, #28
 800f072:	46bd      	mov	sp, r7
 800f074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f078:	4770      	bx	lr

0800f07a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800f07a:	b480      	push	{r7}
 800f07c:	b087      	sub	sp, #28
 800f07e:	af00      	add	r7, sp, #0
 800f080:	60f8      	str	r0, [r7, #12]
 800f082:	60b9      	str	r1, [r7, #8]
 800f084:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800f08a:	697b      	ldr	r3, [r7, #20]
 800f08c:	1c5a      	adds	r2, r3, #1
 800f08e:	617a      	str	r2, [r7, #20]
 800f090:	68ba      	ldr	r2, [r7, #8]
 800f092:	b2d2      	uxtb	r2, r2
 800f094:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	3b01      	subs	r3, #1
 800f09a:	607b      	str	r3, [r7, #4]
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d1f3      	bne.n	800f08a <mem_set+0x10>
}
 800f0a2:	bf00      	nop
 800f0a4:	bf00      	nop
 800f0a6:	371c      	adds	r7, #28
 800f0a8:	46bd      	mov	sp, r7
 800f0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ae:	4770      	bx	lr

0800f0b0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800f0b0:	b480      	push	{r7}
 800f0b2:	b089      	sub	sp, #36	@ 0x24
 800f0b4:	af00      	add	r7, sp, #0
 800f0b6:	60f8      	str	r0, [r7, #12]
 800f0b8:	60b9      	str	r1, [r7, #8]
 800f0ba:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	61fb      	str	r3, [r7, #28]
 800f0c0:	68bb      	ldr	r3, [r7, #8]
 800f0c2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800f0c4:	2300      	movs	r3, #0
 800f0c6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800f0c8:	69fb      	ldr	r3, [r7, #28]
 800f0ca:	1c5a      	adds	r2, r3, #1
 800f0cc:	61fa      	str	r2, [r7, #28]
 800f0ce:	781b      	ldrb	r3, [r3, #0]
 800f0d0:	4619      	mov	r1, r3
 800f0d2:	69bb      	ldr	r3, [r7, #24]
 800f0d4:	1c5a      	adds	r2, r3, #1
 800f0d6:	61ba      	str	r2, [r7, #24]
 800f0d8:	781b      	ldrb	r3, [r3, #0]
 800f0da:	1acb      	subs	r3, r1, r3
 800f0dc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	3b01      	subs	r3, #1
 800f0e2:	607b      	str	r3, [r7, #4]
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d002      	beq.n	800f0f0 <mem_cmp+0x40>
 800f0ea:	697b      	ldr	r3, [r7, #20]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d0eb      	beq.n	800f0c8 <mem_cmp+0x18>

	return r;
 800f0f0:	697b      	ldr	r3, [r7, #20]
}
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	3724      	adds	r7, #36	@ 0x24
 800f0f6:	46bd      	mov	sp, r7
 800f0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0fc:	4770      	bx	lr

0800f0fe <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800f0fe:	b480      	push	{r7}
 800f100:	b083      	sub	sp, #12
 800f102:	af00      	add	r7, sp, #0
 800f104:	6078      	str	r0, [r7, #4]
 800f106:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800f108:	e002      	b.n	800f110 <chk_chr+0x12>
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	3301      	adds	r3, #1
 800f10e:	607b      	str	r3, [r7, #4]
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	781b      	ldrb	r3, [r3, #0]
 800f114:	2b00      	cmp	r3, #0
 800f116:	d005      	beq.n	800f124 <chk_chr+0x26>
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	781b      	ldrb	r3, [r3, #0]
 800f11c:	461a      	mov	r2, r3
 800f11e:	683b      	ldr	r3, [r7, #0]
 800f120:	4293      	cmp	r3, r2
 800f122:	d1f2      	bne.n	800f10a <chk_chr+0xc>
	return *str;
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	781b      	ldrb	r3, [r3, #0]
}
 800f128:	4618      	mov	r0, r3
 800f12a:	370c      	adds	r7, #12
 800f12c:	46bd      	mov	sp, r7
 800f12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f132:	4770      	bx	lr

0800f134 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f134:	b480      	push	{r7}
 800f136:	b085      	sub	sp, #20
 800f138:	af00      	add	r7, sp, #0
 800f13a:	6078      	str	r0, [r7, #4]
 800f13c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f13e:	2300      	movs	r3, #0
 800f140:	60bb      	str	r3, [r7, #8]
 800f142:	68bb      	ldr	r3, [r7, #8]
 800f144:	60fb      	str	r3, [r7, #12]
 800f146:	e029      	b.n	800f19c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800f148:	4a27      	ldr	r2, [pc, #156]	@ (800f1e8 <chk_lock+0xb4>)
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	011b      	lsls	r3, r3, #4
 800f14e:	4413      	add	r3, r2
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	2b00      	cmp	r3, #0
 800f154:	d01d      	beq.n	800f192 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f156:	4a24      	ldr	r2, [pc, #144]	@ (800f1e8 <chk_lock+0xb4>)
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	011b      	lsls	r3, r3, #4
 800f15c:	4413      	add	r3, r2
 800f15e:	681a      	ldr	r2, [r3, #0]
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	429a      	cmp	r2, r3
 800f166:	d116      	bne.n	800f196 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800f168:	4a1f      	ldr	r2, [pc, #124]	@ (800f1e8 <chk_lock+0xb4>)
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	011b      	lsls	r3, r3, #4
 800f16e:	4413      	add	r3, r2
 800f170:	3304      	adds	r3, #4
 800f172:	681a      	ldr	r2, [r3, #0]
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f178:	429a      	cmp	r2, r3
 800f17a:	d10c      	bne.n	800f196 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f17c:	4a1a      	ldr	r2, [pc, #104]	@ (800f1e8 <chk_lock+0xb4>)
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	011b      	lsls	r3, r3, #4
 800f182:	4413      	add	r3, r2
 800f184:	3308      	adds	r3, #8
 800f186:	681a      	ldr	r2, [r3, #0]
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800f18c:	429a      	cmp	r2, r3
 800f18e:	d102      	bne.n	800f196 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f190:	e007      	b.n	800f1a2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800f192:	2301      	movs	r3, #1
 800f194:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	3301      	adds	r3, #1
 800f19a:	60fb      	str	r3, [r7, #12]
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	2b01      	cmp	r3, #1
 800f1a0:	d9d2      	bls.n	800f148 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	2b02      	cmp	r3, #2
 800f1a6:	d109      	bne.n	800f1bc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800f1a8:	68bb      	ldr	r3, [r7, #8]
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d102      	bne.n	800f1b4 <chk_lock+0x80>
 800f1ae:	683b      	ldr	r3, [r7, #0]
 800f1b0:	2b02      	cmp	r3, #2
 800f1b2:	d101      	bne.n	800f1b8 <chk_lock+0x84>
 800f1b4:	2300      	movs	r3, #0
 800f1b6:	e010      	b.n	800f1da <chk_lock+0xa6>
 800f1b8:	2312      	movs	r3, #18
 800f1ba:	e00e      	b.n	800f1da <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800f1bc:	683b      	ldr	r3, [r7, #0]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d108      	bne.n	800f1d4 <chk_lock+0xa0>
 800f1c2:	4a09      	ldr	r2, [pc, #36]	@ (800f1e8 <chk_lock+0xb4>)
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	011b      	lsls	r3, r3, #4
 800f1c8:	4413      	add	r3, r2
 800f1ca:	330c      	adds	r3, #12
 800f1cc:	881b      	ldrh	r3, [r3, #0]
 800f1ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f1d2:	d101      	bne.n	800f1d8 <chk_lock+0xa4>
 800f1d4:	2310      	movs	r3, #16
 800f1d6:	e000      	b.n	800f1da <chk_lock+0xa6>
 800f1d8:	2300      	movs	r3, #0
}
 800f1da:	4618      	mov	r0, r3
 800f1dc:	3714      	adds	r7, #20
 800f1de:	46bd      	mov	sp, r7
 800f1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e4:	4770      	bx	lr
 800f1e6:	bf00      	nop
 800f1e8:	24002860 	.word	0x24002860

0800f1ec <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800f1ec:	b480      	push	{r7}
 800f1ee:	b083      	sub	sp, #12
 800f1f0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	607b      	str	r3, [r7, #4]
 800f1f6:	e002      	b.n	800f1fe <enq_lock+0x12>
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	3301      	adds	r3, #1
 800f1fc:	607b      	str	r3, [r7, #4]
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	2b01      	cmp	r3, #1
 800f202:	d806      	bhi.n	800f212 <enq_lock+0x26>
 800f204:	4a09      	ldr	r2, [pc, #36]	@ (800f22c <enq_lock+0x40>)
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	011b      	lsls	r3, r3, #4
 800f20a:	4413      	add	r3, r2
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d1f2      	bne.n	800f1f8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	2b02      	cmp	r3, #2
 800f216:	bf14      	ite	ne
 800f218:	2301      	movne	r3, #1
 800f21a:	2300      	moveq	r3, #0
 800f21c:	b2db      	uxtb	r3, r3
}
 800f21e:	4618      	mov	r0, r3
 800f220:	370c      	adds	r7, #12
 800f222:	46bd      	mov	sp, r7
 800f224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f228:	4770      	bx	lr
 800f22a:	bf00      	nop
 800f22c:	24002860 	.word	0x24002860

0800f230 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f230:	b480      	push	{r7}
 800f232:	b085      	sub	sp, #20
 800f234:	af00      	add	r7, sp, #0
 800f236:	6078      	str	r0, [r7, #4]
 800f238:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f23a:	2300      	movs	r3, #0
 800f23c:	60fb      	str	r3, [r7, #12]
 800f23e:	e01f      	b.n	800f280 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800f240:	4a41      	ldr	r2, [pc, #260]	@ (800f348 <inc_lock+0x118>)
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	011b      	lsls	r3, r3, #4
 800f246:	4413      	add	r3, r2
 800f248:	681a      	ldr	r2, [r3, #0]
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	429a      	cmp	r2, r3
 800f250:	d113      	bne.n	800f27a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800f252:	4a3d      	ldr	r2, [pc, #244]	@ (800f348 <inc_lock+0x118>)
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	011b      	lsls	r3, r3, #4
 800f258:	4413      	add	r3, r2
 800f25a:	3304      	adds	r3, #4
 800f25c:	681a      	ldr	r2, [r3, #0]
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800f262:	429a      	cmp	r2, r3
 800f264:	d109      	bne.n	800f27a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800f266:	4a38      	ldr	r2, [pc, #224]	@ (800f348 <inc_lock+0x118>)
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	011b      	lsls	r3, r3, #4
 800f26c:	4413      	add	r3, r2
 800f26e:	3308      	adds	r3, #8
 800f270:	681a      	ldr	r2, [r3, #0]
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800f276:	429a      	cmp	r2, r3
 800f278:	d006      	beq.n	800f288 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	3301      	adds	r3, #1
 800f27e:	60fb      	str	r3, [r7, #12]
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	2b01      	cmp	r3, #1
 800f284:	d9dc      	bls.n	800f240 <inc_lock+0x10>
 800f286:	e000      	b.n	800f28a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800f288:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	2b02      	cmp	r3, #2
 800f28e:	d132      	bne.n	800f2f6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f290:	2300      	movs	r3, #0
 800f292:	60fb      	str	r3, [r7, #12]
 800f294:	e002      	b.n	800f29c <inc_lock+0x6c>
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	3301      	adds	r3, #1
 800f29a:	60fb      	str	r3, [r7, #12]
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	2b01      	cmp	r3, #1
 800f2a0:	d806      	bhi.n	800f2b0 <inc_lock+0x80>
 800f2a2:	4a29      	ldr	r2, [pc, #164]	@ (800f348 <inc_lock+0x118>)
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	011b      	lsls	r3, r3, #4
 800f2a8:	4413      	add	r3, r2
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d1f2      	bne.n	800f296 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	2b02      	cmp	r3, #2
 800f2b4:	d101      	bne.n	800f2ba <inc_lock+0x8a>
 800f2b6:	2300      	movs	r3, #0
 800f2b8:	e040      	b.n	800f33c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	681a      	ldr	r2, [r3, #0]
 800f2be:	4922      	ldr	r1, [pc, #136]	@ (800f348 <inc_lock+0x118>)
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	011b      	lsls	r3, r3, #4
 800f2c4:	440b      	add	r3, r1
 800f2c6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	689a      	ldr	r2, [r3, #8]
 800f2cc:	491e      	ldr	r1, [pc, #120]	@ (800f348 <inc_lock+0x118>)
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	011b      	lsls	r3, r3, #4
 800f2d2:	440b      	add	r3, r1
 800f2d4:	3304      	adds	r3, #4
 800f2d6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	695a      	ldr	r2, [r3, #20]
 800f2dc:	491a      	ldr	r1, [pc, #104]	@ (800f348 <inc_lock+0x118>)
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	011b      	lsls	r3, r3, #4
 800f2e2:	440b      	add	r3, r1
 800f2e4:	3308      	adds	r3, #8
 800f2e6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800f2e8:	4a17      	ldr	r2, [pc, #92]	@ (800f348 <inc_lock+0x118>)
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	011b      	lsls	r3, r3, #4
 800f2ee:	4413      	add	r3, r2
 800f2f0:	330c      	adds	r3, #12
 800f2f2:	2200      	movs	r2, #0
 800f2f4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800f2f6:	683b      	ldr	r3, [r7, #0]
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d009      	beq.n	800f310 <inc_lock+0xe0>
 800f2fc:	4a12      	ldr	r2, [pc, #72]	@ (800f348 <inc_lock+0x118>)
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	011b      	lsls	r3, r3, #4
 800f302:	4413      	add	r3, r2
 800f304:	330c      	adds	r3, #12
 800f306:	881b      	ldrh	r3, [r3, #0]
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d001      	beq.n	800f310 <inc_lock+0xe0>
 800f30c:	2300      	movs	r3, #0
 800f30e:	e015      	b.n	800f33c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800f310:	683b      	ldr	r3, [r7, #0]
 800f312:	2b00      	cmp	r3, #0
 800f314:	d108      	bne.n	800f328 <inc_lock+0xf8>
 800f316:	4a0c      	ldr	r2, [pc, #48]	@ (800f348 <inc_lock+0x118>)
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	011b      	lsls	r3, r3, #4
 800f31c:	4413      	add	r3, r2
 800f31e:	330c      	adds	r3, #12
 800f320:	881b      	ldrh	r3, [r3, #0]
 800f322:	3301      	adds	r3, #1
 800f324:	b29a      	uxth	r2, r3
 800f326:	e001      	b.n	800f32c <inc_lock+0xfc>
 800f328:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800f32c:	4906      	ldr	r1, [pc, #24]	@ (800f348 <inc_lock+0x118>)
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	011b      	lsls	r3, r3, #4
 800f332:	440b      	add	r3, r1
 800f334:	330c      	adds	r3, #12
 800f336:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	3301      	adds	r3, #1
}
 800f33c:	4618      	mov	r0, r3
 800f33e:	3714      	adds	r7, #20
 800f340:	46bd      	mov	sp, r7
 800f342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f346:	4770      	bx	lr
 800f348:	24002860 	.word	0x24002860

0800f34c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800f34c:	b480      	push	{r7}
 800f34e:	b085      	sub	sp, #20
 800f350:	af00      	add	r7, sp, #0
 800f352:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	3b01      	subs	r3, #1
 800f358:	607b      	str	r3, [r7, #4]
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	2b01      	cmp	r3, #1
 800f35e:	d825      	bhi.n	800f3ac <dec_lock+0x60>
		n = Files[i].ctr;
 800f360:	4a17      	ldr	r2, [pc, #92]	@ (800f3c0 <dec_lock+0x74>)
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	011b      	lsls	r3, r3, #4
 800f366:	4413      	add	r3, r2
 800f368:	330c      	adds	r3, #12
 800f36a:	881b      	ldrh	r3, [r3, #0]
 800f36c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800f36e:	89fb      	ldrh	r3, [r7, #14]
 800f370:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f374:	d101      	bne.n	800f37a <dec_lock+0x2e>
 800f376:	2300      	movs	r3, #0
 800f378:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800f37a:	89fb      	ldrh	r3, [r7, #14]
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d002      	beq.n	800f386 <dec_lock+0x3a>
 800f380:	89fb      	ldrh	r3, [r7, #14]
 800f382:	3b01      	subs	r3, #1
 800f384:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800f386:	4a0e      	ldr	r2, [pc, #56]	@ (800f3c0 <dec_lock+0x74>)
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	011b      	lsls	r3, r3, #4
 800f38c:	4413      	add	r3, r2
 800f38e:	330c      	adds	r3, #12
 800f390:	89fa      	ldrh	r2, [r7, #14]
 800f392:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800f394:	89fb      	ldrh	r3, [r7, #14]
 800f396:	2b00      	cmp	r3, #0
 800f398:	d105      	bne.n	800f3a6 <dec_lock+0x5a>
 800f39a:	4a09      	ldr	r2, [pc, #36]	@ (800f3c0 <dec_lock+0x74>)
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	011b      	lsls	r3, r3, #4
 800f3a0:	4413      	add	r3, r2
 800f3a2:	2200      	movs	r2, #0
 800f3a4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800f3a6:	2300      	movs	r3, #0
 800f3a8:	737b      	strb	r3, [r7, #13]
 800f3aa:	e001      	b.n	800f3b0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800f3ac:	2302      	movs	r3, #2
 800f3ae:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800f3b0:	7b7b      	ldrb	r3, [r7, #13]
}
 800f3b2:	4618      	mov	r0, r3
 800f3b4:	3714      	adds	r7, #20
 800f3b6:	46bd      	mov	sp, r7
 800f3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3bc:	4770      	bx	lr
 800f3be:	bf00      	nop
 800f3c0:	24002860 	.word	0x24002860

0800f3c4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800f3c4:	b480      	push	{r7}
 800f3c6:	b085      	sub	sp, #20
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800f3cc:	2300      	movs	r3, #0
 800f3ce:	60fb      	str	r3, [r7, #12]
 800f3d0:	e010      	b.n	800f3f4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f3d2:	4a0d      	ldr	r2, [pc, #52]	@ (800f408 <clear_lock+0x44>)
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	011b      	lsls	r3, r3, #4
 800f3d8:	4413      	add	r3, r2
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	687a      	ldr	r2, [r7, #4]
 800f3de:	429a      	cmp	r2, r3
 800f3e0:	d105      	bne.n	800f3ee <clear_lock+0x2a>
 800f3e2:	4a09      	ldr	r2, [pc, #36]	@ (800f408 <clear_lock+0x44>)
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	011b      	lsls	r3, r3, #4
 800f3e8:	4413      	add	r3, r2
 800f3ea:	2200      	movs	r2, #0
 800f3ec:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	3301      	adds	r3, #1
 800f3f2:	60fb      	str	r3, [r7, #12]
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	2b01      	cmp	r3, #1
 800f3f8:	d9eb      	bls.n	800f3d2 <clear_lock+0xe>
	}
}
 800f3fa:	bf00      	nop
 800f3fc:	bf00      	nop
 800f3fe:	3714      	adds	r7, #20
 800f400:	46bd      	mov	sp, r7
 800f402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f406:	4770      	bx	lr
 800f408:	24002860 	.word	0x24002860

0800f40c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800f40c:	b580      	push	{r7, lr}
 800f40e:	b086      	sub	sp, #24
 800f410:	af00      	add	r7, sp, #0
 800f412:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800f414:	2300      	movs	r3, #0
 800f416:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	78db      	ldrb	r3, [r3, #3]
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d034      	beq.n	800f48a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f424:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	7858      	ldrb	r0, [r3, #1]
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800f430:	2301      	movs	r3, #1
 800f432:	697a      	ldr	r2, [r7, #20]
 800f434:	f7ff fd40 	bl	800eeb8 <disk_write>
 800f438:	4603      	mov	r3, r0
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d002      	beq.n	800f444 <sync_window+0x38>
			res = FR_DISK_ERR;
 800f43e:	2301      	movs	r3, #1
 800f440:	73fb      	strb	r3, [r7, #15]
 800f442:	e022      	b.n	800f48a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	2200      	movs	r2, #0
 800f448:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f44e:	697a      	ldr	r2, [r7, #20]
 800f450:	1ad2      	subs	r2, r2, r3
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f456:	429a      	cmp	r2, r3
 800f458:	d217      	bcs.n	800f48a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	789b      	ldrb	r3, [r3, #2]
 800f45e:	613b      	str	r3, [r7, #16]
 800f460:	e010      	b.n	800f484 <sync_window+0x78>
					wsect += fs->fsize;
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f466:	697a      	ldr	r2, [r7, #20]
 800f468:	4413      	add	r3, r2
 800f46a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	7858      	ldrb	r0, [r3, #1]
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800f476:	2301      	movs	r3, #1
 800f478:	697a      	ldr	r2, [r7, #20]
 800f47a:	f7ff fd1d 	bl	800eeb8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f47e:	693b      	ldr	r3, [r7, #16]
 800f480:	3b01      	subs	r3, #1
 800f482:	613b      	str	r3, [r7, #16]
 800f484:	693b      	ldr	r3, [r7, #16]
 800f486:	2b01      	cmp	r3, #1
 800f488:	d8eb      	bhi.n	800f462 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800f48a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f48c:	4618      	mov	r0, r3
 800f48e:	3718      	adds	r7, #24
 800f490:	46bd      	mov	sp, r7
 800f492:	bd80      	pop	{r7, pc}

0800f494 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800f494:	b580      	push	{r7, lr}
 800f496:	b084      	sub	sp, #16
 800f498:	af00      	add	r7, sp, #0
 800f49a:	6078      	str	r0, [r7, #4]
 800f49c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800f49e:	2300      	movs	r3, #0
 800f4a0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f4a6:	683a      	ldr	r2, [r7, #0]
 800f4a8:	429a      	cmp	r2, r3
 800f4aa:	d01b      	beq.n	800f4e4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800f4ac:	6878      	ldr	r0, [r7, #4]
 800f4ae:	f7ff ffad 	bl	800f40c <sync_window>
 800f4b2:	4603      	mov	r3, r0
 800f4b4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800f4b6:	7bfb      	ldrb	r3, [r7, #15]
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d113      	bne.n	800f4e4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	7858      	ldrb	r0, [r3, #1]
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800f4c6:	2301      	movs	r3, #1
 800f4c8:	683a      	ldr	r2, [r7, #0]
 800f4ca:	f7ff fcd5 	bl	800ee78 <disk_read>
 800f4ce:	4603      	mov	r3, r0
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d004      	beq.n	800f4de <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800f4d4:	f04f 33ff 	mov.w	r3, #4294967295
 800f4d8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800f4da:	2301      	movs	r3, #1
 800f4dc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	683a      	ldr	r2, [r7, #0]
 800f4e2:	639a      	str	r2, [r3, #56]	@ 0x38
		}
	}
	return res;
 800f4e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	3710      	adds	r7, #16
 800f4ea:	46bd      	mov	sp, r7
 800f4ec:	bd80      	pop	{r7, pc}
	...

0800f4f0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800f4f0:	b580      	push	{r7, lr}
 800f4f2:	b084      	sub	sp, #16
 800f4f4:	af00      	add	r7, sp, #0
 800f4f6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800f4f8:	6878      	ldr	r0, [r7, #4]
 800f4fa:	f7ff ff87 	bl	800f40c <sync_window>
 800f4fe:	4603      	mov	r3, r0
 800f500:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f502:	7bfb      	ldrb	r3, [r7, #15]
 800f504:	2b00      	cmp	r3, #0
 800f506:	d159      	bne.n	800f5bc <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	781b      	ldrb	r3, [r3, #0]
 800f50c:	2b03      	cmp	r3, #3
 800f50e:	d149      	bne.n	800f5a4 <sync_fs+0xb4>
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	791b      	ldrb	r3, [r3, #4]
 800f514:	2b01      	cmp	r3, #1
 800f516:	d145      	bne.n	800f5a4 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	899b      	ldrh	r3, [r3, #12]
 800f522:	461a      	mov	r2, r3
 800f524:	2100      	movs	r1, #0
 800f526:	f7ff fda8 	bl	800f07a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	333c      	adds	r3, #60	@ 0x3c
 800f52e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800f532:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800f536:	4618      	mov	r0, r3
 800f538:	f7ff fd37 	bl	800efaa <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	333c      	adds	r3, #60	@ 0x3c
 800f540:	4921      	ldr	r1, [pc, #132]	@ (800f5c8 <sync_fs+0xd8>)
 800f542:	4618      	mov	r0, r3
 800f544:	f7ff fd4c 	bl	800efe0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	333c      	adds	r3, #60	@ 0x3c
 800f54c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800f550:	491e      	ldr	r1, [pc, #120]	@ (800f5cc <sync_fs+0xdc>)
 800f552:	4618      	mov	r0, r3
 800f554:	f7ff fd44 	bl	800efe0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	333c      	adds	r3, #60	@ 0x3c
 800f55c:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	699b      	ldr	r3, [r3, #24]
 800f564:	4619      	mov	r1, r3
 800f566:	4610      	mov	r0, r2
 800f568:	f7ff fd3a 	bl	800efe0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	333c      	adds	r3, #60	@ 0x3c
 800f570:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	695b      	ldr	r3, [r3, #20]
 800f578:	4619      	mov	r1, r3
 800f57a:	4610      	mov	r0, r2
 800f57c:	f7ff fd30 	bl	800efe0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f584:	1c5a      	adds	r2, r3, #1
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	639a      	str	r2, [r3, #56]	@ 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	7858      	ldrb	r0, [r3, #1]
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f598:	2301      	movs	r3, #1
 800f59a:	f7ff fc8d 	bl	800eeb8 <disk_write>
			fs->fsi_flag = 0;
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	2200      	movs	r2, #0
 800f5a2:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	785b      	ldrb	r3, [r3, #1]
 800f5a8:	2200      	movs	r2, #0
 800f5aa:	2100      	movs	r1, #0
 800f5ac:	4618      	mov	r0, r3
 800f5ae:	f7ff fca3 	bl	800eef8 <disk_ioctl>
 800f5b2:	4603      	mov	r3, r0
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d001      	beq.n	800f5bc <sync_fs+0xcc>
 800f5b8:	2301      	movs	r3, #1
 800f5ba:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800f5bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5be:	4618      	mov	r0, r3
 800f5c0:	3710      	adds	r7, #16
 800f5c2:	46bd      	mov	sp, r7
 800f5c4:	bd80      	pop	{r7, pc}
 800f5c6:	bf00      	nop
 800f5c8:	41615252 	.word	0x41615252
 800f5cc:	61417272 	.word	0x61417272

0800f5d0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800f5d0:	b480      	push	{r7}
 800f5d2:	b083      	sub	sp, #12
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	6078      	str	r0, [r7, #4]
 800f5d8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800f5da:	683b      	ldr	r3, [r7, #0]
 800f5dc:	3b02      	subs	r3, #2
 800f5de:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	6a1b      	ldr	r3, [r3, #32]
 800f5e4:	3b02      	subs	r3, #2
 800f5e6:	683a      	ldr	r2, [r7, #0]
 800f5e8:	429a      	cmp	r2, r3
 800f5ea:	d301      	bcc.n	800f5f0 <clust2sect+0x20>
 800f5ec:	2300      	movs	r3, #0
 800f5ee:	e008      	b.n	800f602 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	895b      	ldrh	r3, [r3, #10]
 800f5f4:	461a      	mov	r2, r3
 800f5f6:	683b      	ldr	r3, [r7, #0]
 800f5f8:	fb03 f202 	mul.w	r2, r3, r2
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f600:	4413      	add	r3, r2
}
 800f602:	4618      	mov	r0, r3
 800f604:	370c      	adds	r7, #12
 800f606:	46bd      	mov	sp, r7
 800f608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f60c:	4770      	bx	lr

0800f60e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800f60e:	b580      	push	{r7, lr}
 800f610:	b086      	sub	sp, #24
 800f612:	af00      	add	r7, sp, #0
 800f614:	6078      	str	r0, [r7, #4]
 800f616:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800f61e:	683b      	ldr	r3, [r7, #0]
 800f620:	2b01      	cmp	r3, #1
 800f622:	d904      	bls.n	800f62e <get_fat+0x20>
 800f624:	693b      	ldr	r3, [r7, #16]
 800f626:	6a1b      	ldr	r3, [r3, #32]
 800f628:	683a      	ldr	r2, [r7, #0]
 800f62a:	429a      	cmp	r2, r3
 800f62c:	d302      	bcc.n	800f634 <get_fat+0x26>
		val = 1;	/* Internal error */
 800f62e:	2301      	movs	r3, #1
 800f630:	617b      	str	r3, [r7, #20]
 800f632:	e0ba      	b.n	800f7aa <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800f634:	f04f 33ff 	mov.w	r3, #4294967295
 800f638:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800f63a:	693b      	ldr	r3, [r7, #16]
 800f63c:	781b      	ldrb	r3, [r3, #0]
 800f63e:	2b03      	cmp	r3, #3
 800f640:	f000 8082 	beq.w	800f748 <get_fat+0x13a>
 800f644:	2b03      	cmp	r3, #3
 800f646:	f300 80a6 	bgt.w	800f796 <get_fat+0x188>
 800f64a:	2b01      	cmp	r3, #1
 800f64c:	d002      	beq.n	800f654 <get_fat+0x46>
 800f64e:	2b02      	cmp	r3, #2
 800f650:	d055      	beq.n	800f6fe <get_fat+0xf0>
 800f652:	e0a0      	b.n	800f796 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800f654:	683b      	ldr	r3, [r7, #0]
 800f656:	60fb      	str	r3, [r7, #12]
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	085b      	lsrs	r3, r3, #1
 800f65c:	68fa      	ldr	r2, [r7, #12]
 800f65e:	4413      	add	r3, r2
 800f660:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f662:	693b      	ldr	r3, [r7, #16]
 800f664:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f666:	693b      	ldr	r3, [r7, #16]
 800f668:	899b      	ldrh	r3, [r3, #12]
 800f66a:	4619      	mov	r1, r3
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	fbb3 f3f1 	udiv	r3, r3, r1
 800f672:	4413      	add	r3, r2
 800f674:	4619      	mov	r1, r3
 800f676:	6938      	ldr	r0, [r7, #16]
 800f678:	f7ff ff0c 	bl	800f494 <move_window>
 800f67c:	4603      	mov	r3, r0
 800f67e:	2b00      	cmp	r3, #0
 800f680:	f040 808c 	bne.w	800f79c <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	1c5a      	adds	r2, r3, #1
 800f688:	60fa      	str	r2, [r7, #12]
 800f68a:	693a      	ldr	r2, [r7, #16]
 800f68c:	8992      	ldrh	r2, [r2, #12]
 800f68e:	fbb3 f1f2 	udiv	r1, r3, r2
 800f692:	fb01 f202 	mul.w	r2, r1, r2
 800f696:	1a9b      	subs	r3, r3, r2
 800f698:	693a      	ldr	r2, [r7, #16]
 800f69a:	4413      	add	r3, r2
 800f69c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f6a0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f6a2:	693b      	ldr	r3, [r7, #16]
 800f6a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f6a6:	693b      	ldr	r3, [r7, #16]
 800f6a8:	899b      	ldrh	r3, [r3, #12]
 800f6aa:	4619      	mov	r1, r3
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	fbb3 f3f1 	udiv	r3, r3, r1
 800f6b2:	4413      	add	r3, r2
 800f6b4:	4619      	mov	r1, r3
 800f6b6:	6938      	ldr	r0, [r7, #16]
 800f6b8:	f7ff feec 	bl	800f494 <move_window>
 800f6bc:	4603      	mov	r3, r0
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d16e      	bne.n	800f7a0 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 800f6c2:	693b      	ldr	r3, [r7, #16]
 800f6c4:	899b      	ldrh	r3, [r3, #12]
 800f6c6:	461a      	mov	r2, r3
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	fbb3 f1f2 	udiv	r1, r3, r2
 800f6ce:	fb01 f202 	mul.w	r2, r1, r2
 800f6d2:	1a9b      	subs	r3, r3, r2
 800f6d4:	693a      	ldr	r2, [r7, #16]
 800f6d6:	4413      	add	r3, r2
 800f6d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f6dc:	021b      	lsls	r3, r3, #8
 800f6de:	68ba      	ldr	r2, [r7, #8]
 800f6e0:	4313      	orrs	r3, r2
 800f6e2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800f6e4:	683b      	ldr	r3, [r7, #0]
 800f6e6:	f003 0301 	and.w	r3, r3, #1
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d002      	beq.n	800f6f4 <get_fat+0xe6>
 800f6ee:	68bb      	ldr	r3, [r7, #8]
 800f6f0:	091b      	lsrs	r3, r3, #4
 800f6f2:	e002      	b.n	800f6fa <get_fat+0xec>
 800f6f4:	68bb      	ldr	r3, [r7, #8]
 800f6f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f6fa:	617b      	str	r3, [r7, #20]
			break;
 800f6fc:	e055      	b.n	800f7aa <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f6fe:	693b      	ldr	r3, [r7, #16]
 800f700:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f702:	693b      	ldr	r3, [r7, #16]
 800f704:	899b      	ldrh	r3, [r3, #12]
 800f706:	085b      	lsrs	r3, r3, #1
 800f708:	b29b      	uxth	r3, r3
 800f70a:	4619      	mov	r1, r3
 800f70c:	683b      	ldr	r3, [r7, #0]
 800f70e:	fbb3 f3f1 	udiv	r3, r3, r1
 800f712:	4413      	add	r3, r2
 800f714:	4619      	mov	r1, r3
 800f716:	6938      	ldr	r0, [r7, #16]
 800f718:	f7ff febc 	bl	800f494 <move_window>
 800f71c:	4603      	mov	r3, r0
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d140      	bne.n	800f7a4 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800f722:	693b      	ldr	r3, [r7, #16]
 800f724:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800f728:	683b      	ldr	r3, [r7, #0]
 800f72a:	005b      	lsls	r3, r3, #1
 800f72c:	693a      	ldr	r2, [r7, #16]
 800f72e:	8992      	ldrh	r2, [r2, #12]
 800f730:	fbb3 f0f2 	udiv	r0, r3, r2
 800f734:	fb00 f202 	mul.w	r2, r0, r2
 800f738:	1a9b      	subs	r3, r3, r2
 800f73a:	440b      	add	r3, r1
 800f73c:	4618      	mov	r0, r3
 800f73e:	f7ff fbf9 	bl	800ef34 <ld_word>
 800f742:	4603      	mov	r3, r0
 800f744:	617b      	str	r3, [r7, #20]
			break;
 800f746:	e030      	b.n	800f7aa <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f748:	693b      	ldr	r3, [r7, #16]
 800f74a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f74c:	693b      	ldr	r3, [r7, #16]
 800f74e:	899b      	ldrh	r3, [r3, #12]
 800f750:	089b      	lsrs	r3, r3, #2
 800f752:	b29b      	uxth	r3, r3
 800f754:	4619      	mov	r1, r3
 800f756:	683b      	ldr	r3, [r7, #0]
 800f758:	fbb3 f3f1 	udiv	r3, r3, r1
 800f75c:	4413      	add	r3, r2
 800f75e:	4619      	mov	r1, r3
 800f760:	6938      	ldr	r0, [r7, #16]
 800f762:	f7ff fe97 	bl	800f494 <move_window>
 800f766:	4603      	mov	r3, r0
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d11d      	bne.n	800f7a8 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800f76c:	693b      	ldr	r3, [r7, #16]
 800f76e:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800f772:	683b      	ldr	r3, [r7, #0]
 800f774:	009b      	lsls	r3, r3, #2
 800f776:	693a      	ldr	r2, [r7, #16]
 800f778:	8992      	ldrh	r2, [r2, #12]
 800f77a:	fbb3 f0f2 	udiv	r0, r3, r2
 800f77e:	fb00 f202 	mul.w	r2, r0, r2
 800f782:	1a9b      	subs	r3, r3, r2
 800f784:	440b      	add	r3, r1
 800f786:	4618      	mov	r0, r3
 800f788:	f7ff fbec 	bl	800ef64 <ld_dword>
 800f78c:	4603      	mov	r3, r0
 800f78e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800f792:	617b      	str	r3, [r7, #20]
			break;
 800f794:	e009      	b.n	800f7aa <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800f796:	2301      	movs	r3, #1
 800f798:	617b      	str	r3, [r7, #20]
 800f79a:	e006      	b.n	800f7aa <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f79c:	bf00      	nop
 800f79e:	e004      	b.n	800f7aa <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f7a0:	bf00      	nop
 800f7a2:	e002      	b.n	800f7aa <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f7a4:	bf00      	nop
 800f7a6:	e000      	b.n	800f7aa <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f7a8:	bf00      	nop
		}
	}

	return val;
 800f7aa:	697b      	ldr	r3, [r7, #20]
}
 800f7ac:	4618      	mov	r0, r3
 800f7ae:	3718      	adds	r7, #24
 800f7b0:	46bd      	mov	sp, r7
 800f7b2:	bd80      	pop	{r7, pc}

0800f7b4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800f7b4:	b590      	push	{r4, r7, lr}
 800f7b6:	b089      	sub	sp, #36	@ 0x24
 800f7b8:	af00      	add	r7, sp, #0
 800f7ba:	60f8      	str	r0, [r7, #12]
 800f7bc:	60b9      	str	r1, [r7, #8]
 800f7be:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800f7c0:	2302      	movs	r3, #2
 800f7c2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800f7c4:	68bb      	ldr	r3, [r7, #8]
 800f7c6:	2b01      	cmp	r3, #1
 800f7c8:	f240 8109 	bls.w	800f9de <put_fat+0x22a>
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	6a1b      	ldr	r3, [r3, #32]
 800f7d0:	68ba      	ldr	r2, [r7, #8]
 800f7d2:	429a      	cmp	r2, r3
 800f7d4:	f080 8103 	bcs.w	800f9de <put_fat+0x22a>
		switch (fs->fs_type) {
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	781b      	ldrb	r3, [r3, #0]
 800f7dc:	2b03      	cmp	r3, #3
 800f7de:	f000 80b6 	beq.w	800f94e <put_fat+0x19a>
 800f7e2:	2b03      	cmp	r3, #3
 800f7e4:	f300 80fb 	bgt.w	800f9de <put_fat+0x22a>
 800f7e8:	2b01      	cmp	r3, #1
 800f7ea:	d003      	beq.n	800f7f4 <put_fat+0x40>
 800f7ec:	2b02      	cmp	r3, #2
 800f7ee:	f000 8083 	beq.w	800f8f8 <put_fat+0x144>
 800f7f2:	e0f4      	b.n	800f9de <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800f7f4:	68bb      	ldr	r3, [r7, #8]
 800f7f6:	61bb      	str	r3, [r7, #24]
 800f7f8:	69bb      	ldr	r3, [r7, #24]
 800f7fa:	085b      	lsrs	r3, r3, #1
 800f7fc:	69ba      	ldr	r2, [r7, #24]
 800f7fe:	4413      	add	r3, r2
 800f800:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	899b      	ldrh	r3, [r3, #12]
 800f80a:	4619      	mov	r1, r3
 800f80c:	69bb      	ldr	r3, [r7, #24]
 800f80e:	fbb3 f3f1 	udiv	r3, r3, r1
 800f812:	4413      	add	r3, r2
 800f814:	4619      	mov	r1, r3
 800f816:	68f8      	ldr	r0, [r7, #12]
 800f818:	f7ff fe3c 	bl	800f494 <move_window>
 800f81c:	4603      	mov	r3, r0
 800f81e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f820:	7ffb      	ldrb	r3, [r7, #31]
 800f822:	2b00      	cmp	r3, #0
 800f824:	f040 80d4 	bne.w	800f9d0 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800f82e:	69bb      	ldr	r3, [r7, #24]
 800f830:	1c5a      	adds	r2, r3, #1
 800f832:	61ba      	str	r2, [r7, #24]
 800f834:	68fa      	ldr	r2, [r7, #12]
 800f836:	8992      	ldrh	r2, [r2, #12]
 800f838:	fbb3 f0f2 	udiv	r0, r3, r2
 800f83c:	fb00 f202 	mul.w	r2, r0, r2
 800f840:	1a9b      	subs	r3, r3, r2
 800f842:	440b      	add	r3, r1
 800f844:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800f846:	68bb      	ldr	r3, [r7, #8]
 800f848:	f003 0301 	and.w	r3, r3, #1
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d00d      	beq.n	800f86c <put_fat+0xb8>
 800f850:	697b      	ldr	r3, [r7, #20]
 800f852:	781b      	ldrb	r3, [r3, #0]
 800f854:	b25b      	sxtb	r3, r3
 800f856:	f003 030f 	and.w	r3, r3, #15
 800f85a:	b25a      	sxtb	r2, r3
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	b2db      	uxtb	r3, r3
 800f860:	011b      	lsls	r3, r3, #4
 800f862:	b25b      	sxtb	r3, r3
 800f864:	4313      	orrs	r3, r2
 800f866:	b25b      	sxtb	r3, r3
 800f868:	b2db      	uxtb	r3, r3
 800f86a:	e001      	b.n	800f870 <put_fat+0xbc>
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	b2db      	uxtb	r3, r3
 800f870:	697a      	ldr	r2, [r7, #20]
 800f872:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	2201      	movs	r2, #1
 800f878:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	899b      	ldrh	r3, [r3, #12]
 800f882:	4619      	mov	r1, r3
 800f884:	69bb      	ldr	r3, [r7, #24]
 800f886:	fbb3 f3f1 	udiv	r3, r3, r1
 800f88a:	4413      	add	r3, r2
 800f88c:	4619      	mov	r1, r3
 800f88e:	68f8      	ldr	r0, [r7, #12]
 800f890:	f7ff fe00 	bl	800f494 <move_window>
 800f894:	4603      	mov	r3, r0
 800f896:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f898:	7ffb      	ldrb	r3, [r7, #31]
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	f040 809a 	bne.w	800f9d4 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	899b      	ldrh	r3, [r3, #12]
 800f8aa:	461a      	mov	r2, r3
 800f8ac:	69bb      	ldr	r3, [r7, #24]
 800f8ae:	fbb3 f0f2 	udiv	r0, r3, r2
 800f8b2:	fb00 f202 	mul.w	r2, r0, r2
 800f8b6:	1a9b      	subs	r3, r3, r2
 800f8b8:	440b      	add	r3, r1
 800f8ba:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800f8bc:	68bb      	ldr	r3, [r7, #8]
 800f8be:	f003 0301 	and.w	r3, r3, #1
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d003      	beq.n	800f8ce <put_fat+0x11a>
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	091b      	lsrs	r3, r3, #4
 800f8ca:	b2db      	uxtb	r3, r3
 800f8cc:	e00e      	b.n	800f8ec <put_fat+0x138>
 800f8ce:	697b      	ldr	r3, [r7, #20]
 800f8d0:	781b      	ldrb	r3, [r3, #0]
 800f8d2:	b25b      	sxtb	r3, r3
 800f8d4:	f023 030f 	bic.w	r3, r3, #15
 800f8d8:	b25a      	sxtb	r2, r3
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	0a1b      	lsrs	r3, r3, #8
 800f8de:	b25b      	sxtb	r3, r3
 800f8e0:	f003 030f 	and.w	r3, r3, #15
 800f8e4:	b25b      	sxtb	r3, r3
 800f8e6:	4313      	orrs	r3, r2
 800f8e8:	b25b      	sxtb	r3, r3
 800f8ea:	b2db      	uxtb	r3, r3
 800f8ec:	697a      	ldr	r2, [r7, #20]
 800f8ee:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	2201      	movs	r2, #1
 800f8f4:	70da      	strb	r2, [r3, #3]
			break;
 800f8f6:	e072      	b.n	800f9de <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	899b      	ldrh	r3, [r3, #12]
 800f900:	085b      	lsrs	r3, r3, #1
 800f902:	b29b      	uxth	r3, r3
 800f904:	4619      	mov	r1, r3
 800f906:	68bb      	ldr	r3, [r7, #8]
 800f908:	fbb3 f3f1 	udiv	r3, r3, r1
 800f90c:	4413      	add	r3, r2
 800f90e:	4619      	mov	r1, r3
 800f910:	68f8      	ldr	r0, [r7, #12]
 800f912:	f7ff fdbf 	bl	800f494 <move_window>
 800f916:	4603      	mov	r3, r0
 800f918:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f91a:	7ffb      	ldrb	r3, [r7, #31]
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d15b      	bne.n	800f9d8 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800f926:	68bb      	ldr	r3, [r7, #8]
 800f928:	005b      	lsls	r3, r3, #1
 800f92a:	68fa      	ldr	r2, [r7, #12]
 800f92c:	8992      	ldrh	r2, [r2, #12]
 800f92e:	fbb3 f0f2 	udiv	r0, r3, r2
 800f932:	fb00 f202 	mul.w	r2, r0, r2
 800f936:	1a9b      	subs	r3, r3, r2
 800f938:	440b      	add	r3, r1
 800f93a:	687a      	ldr	r2, [r7, #4]
 800f93c:	b292      	uxth	r2, r2
 800f93e:	4611      	mov	r1, r2
 800f940:	4618      	mov	r0, r3
 800f942:	f7ff fb32 	bl	800efaa <st_word>
			fs->wflag = 1;
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	2201      	movs	r2, #1
 800f94a:	70da      	strb	r2, [r3, #3]
			break;
 800f94c:	e047      	b.n	800f9de <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	899b      	ldrh	r3, [r3, #12]
 800f956:	089b      	lsrs	r3, r3, #2
 800f958:	b29b      	uxth	r3, r3
 800f95a:	4619      	mov	r1, r3
 800f95c:	68bb      	ldr	r3, [r7, #8]
 800f95e:	fbb3 f3f1 	udiv	r3, r3, r1
 800f962:	4413      	add	r3, r2
 800f964:	4619      	mov	r1, r3
 800f966:	68f8      	ldr	r0, [r7, #12]
 800f968:	f7ff fd94 	bl	800f494 <move_window>
 800f96c:	4603      	mov	r3, r0
 800f96e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f970:	7ffb      	ldrb	r3, [r7, #31]
 800f972:	2b00      	cmp	r3, #0
 800f974:	d132      	bne.n	800f9dc <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800f982:	68bb      	ldr	r3, [r7, #8]
 800f984:	009b      	lsls	r3, r3, #2
 800f986:	68fa      	ldr	r2, [r7, #12]
 800f988:	8992      	ldrh	r2, [r2, #12]
 800f98a:	fbb3 f0f2 	udiv	r0, r3, r2
 800f98e:	fb00 f202 	mul.w	r2, r0, r2
 800f992:	1a9b      	subs	r3, r3, r2
 800f994:	440b      	add	r3, r1
 800f996:	4618      	mov	r0, r3
 800f998:	f7ff fae4 	bl	800ef64 <ld_dword>
 800f99c:	4603      	mov	r3, r0
 800f99e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800f9a2:	4323      	orrs	r3, r4
 800f9a4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800f9ac:	68bb      	ldr	r3, [r7, #8]
 800f9ae:	009b      	lsls	r3, r3, #2
 800f9b0:	68fa      	ldr	r2, [r7, #12]
 800f9b2:	8992      	ldrh	r2, [r2, #12]
 800f9b4:	fbb3 f0f2 	udiv	r0, r3, r2
 800f9b8:	fb00 f202 	mul.w	r2, r0, r2
 800f9bc:	1a9b      	subs	r3, r3, r2
 800f9be:	440b      	add	r3, r1
 800f9c0:	6879      	ldr	r1, [r7, #4]
 800f9c2:	4618      	mov	r0, r3
 800f9c4:	f7ff fb0c 	bl	800efe0 <st_dword>
			fs->wflag = 1;
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	2201      	movs	r2, #1
 800f9cc:	70da      	strb	r2, [r3, #3]
			break;
 800f9ce:	e006      	b.n	800f9de <put_fat+0x22a>
			if (res != FR_OK) break;
 800f9d0:	bf00      	nop
 800f9d2:	e004      	b.n	800f9de <put_fat+0x22a>
			if (res != FR_OK) break;
 800f9d4:	bf00      	nop
 800f9d6:	e002      	b.n	800f9de <put_fat+0x22a>
			if (res != FR_OK) break;
 800f9d8:	bf00      	nop
 800f9da:	e000      	b.n	800f9de <put_fat+0x22a>
			if (res != FR_OK) break;
 800f9dc:	bf00      	nop
		}
	}
	return res;
 800f9de:	7ffb      	ldrb	r3, [r7, #31]
}
 800f9e0:	4618      	mov	r0, r3
 800f9e2:	3724      	adds	r7, #36	@ 0x24
 800f9e4:	46bd      	mov	sp, r7
 800f9e6:	bd90      	pop	{r4, r7, pc}

0800f9e8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800f9e8:	b580      	push	{r7, lr}
 800f9ea:	b088      	sub	sp, #32
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	60f8      	str	r0, [r7, #12]
 800f9f0:	60b9      	str	r1, [r7, #8]
 800f9f2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800f9f4:	2300      	movs	r3, #0
 800f9f6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800f9fe:	68bb      	ldr	r3, [r7, #8]
 800fa00:	2b01      	cmp	r3, #1
 800fa02:	d904      	bls.n	800fa0e <remove_chain+0x26>
 800fa04:	69bb      	ldr	r3, [r7, #24]
 800fa06:	6a1b      	ldr	r3, [r3, #32]
 800fa08:	68ba      	ldr	r2, [r7, #8]
 800fa0a:	429a      	cmp	r2, r3
 800fa0c:	d301      	bcc.n	800fa12 <remove_chain+0x2a>
 800fa0e:	2302      	movs	r3, #2
 800fa10:	e04b      	b.n	800faaa <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d00c      	beq.n	800fa32 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800fa18:	f04f 32ff 	mov.w	r2, #4294967295
 800fa1c:	6879      	ldr	r1, [r7, #4]
 800fa1e:	69b8      	ldr	r0, [r7, #24]
 800fa20:	f7ff fec8 	bl	800f7b4 <put_fat>
 800fa24:	4603      	mov	r3, r0
 800fa26:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800fa28:	7ffb      	ldrb	r3, [r7, #31]
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d001      	beq.n	800fa32 <remove_chain+0x4a>
 800fa2e:	7ffb      	ldrb	r3, [r7, #31]
 800fa30:	e03b      	b.n	800faaa <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800fa32:	68b9      	ldr	r1, [r7, #8]
 800fa34:	68f8      	ldr	r0, [r7, #12]
 800fa36:	f7ff fdea 	bl	800f60e <get_fat>
 800fa3a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800fa3c:	697b      	ldr	r3, [r7, #20]
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d031      	beq.n	800faa6 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800fa42:	697b      	ldr	r3, [r7, #20]
 800fa44:	2b01      	cmp	r3, #1
 800fa46:	d101      	bne.n	800fa4c <remove_chain+0x64>
 800fa48:	2302      	movs	r3, #2
 800fa4a:	e02e      	b.n	800faaa <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800fa4c:	697b      	ldr	r3, [r7, #20]
 800fa4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa52:	d101      	bne.n	800fa58 <remove_chain+0x70>
 800fa54:	2301      	movs	r3, #1
 800fa56:	e028      	b.n	800faaa <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800fa58:	2200      	movs	r2, #0
 800fa5a:	68b9      	ldr	r1, [r7, #8]
 800fa5c:	69b8      	ldr	r0, [r7, #24]
 800fa5e:	f7ff fea9 	bl	800f7b4 <put_fat>
 800fa62:	4603      	mov	r3, r0
 800fa64:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800fa66:	7ffb      	ldrb	r3, [r7, #31]
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d001      	beq.n	800fa70 <remove_chain+0x88>
 800fa6c:	7ffb      	ldrb	r3, [r7, #31]
 800fa6e:	e01c      	b.n	800faaa <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800fa70:	69bb      	ldr	r3, [r7, #24]
 800fa72:	699a      	ldr	r2, [r3, #24]
 800fa74:	69bb      	ldr	r3, [r7, #24]
 800fa76:	6a1b      	ldr	r3, [r3, #32]
 800fa78:	3b02      	subs	r3, #2
 800fa7a:	429a      	cmp	r2, r3
 800fa7c:	d20b      	bcs.n	800fa96 <remove_chain+0xae>
			fs->free_clst++;
 800fa7e:	69bb      	ldr	r3, [r7, #24]
 800fa80:	699b      	ldr	r3, [r3, #24]
 800fa82:	1c5a      	adds	r2, r3, #1
 800fa84:	69bb      	ldr	r3, [r7, #24]
 800fa86:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800fa88:	69bb      	ldr	r3, [r7, #24]
 800fa8a:	791b      	ldrb	r3, [r3, #4]
 800fa8c:	f043 0301 	orr.w	r3, r3, #1
 800fa90:	b2da      	uxtb	r2, r3
 800fa92:	69bb      	ldr	r3, [r7, #24]
 800fa94:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800fa96:	697b      	ldr	r3, [r7, #20]
 800fa98:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800fa9a:	69bb      	ldr	r3, [r7, #24]
 800fa9c:	6a1b      	ldr	r3, [r3, #32]
 800fa9e:	68ba      	ldr	r2, [r7, #8]
 800faa0:	429a      	cmp	r2, r3
 800faa2:	d3c6      	bcc.n	800fa32 <remove_chain+0x4a>
 800faa4:	e000      	b.n	800faa8 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800faa6:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800faa8:	2300      	movs	r3, #0
}
 800faaa:	4618      	mov	r0, r3
 800faac:	3720      	adds	r7, #32
 800faae:	46bd      	mov	sp, r7
 800fab0:	bd80      	pop	{r7, pc}

0800fab2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800fab2:	b580      	push	{r7, lr}
 800fab4:	b088      	sub	sp, #32
 800fab6:	af00      	add	r7, sp, #0
 800fab8:	6078      	str	r0, [r7, #4]
 800faba:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800fac2:	683b      	ldr	r3, [r7, #0]
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d10d      	bne.n	800fae4 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800fac8:	693b      	ldr	r3, [r7, #16]
 800faca:	695b      	ldr	r3, [r3, #20]
 800facc:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800face:	69bb      	ldr	r3, [r7, #24]
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d004      	beq.n	800fade <create_chain+0x2c>
 800fad4:	693b      	ldr	r3, [r7, #16]
 800fad6:	6a1b      	ldr	r3, [r3, #32]
 800fad8:	69ba      	ldr	r2, [r7, #24]
 800fada:	429a      	cmp	r2, r3
 800fadc:	d31b      	bcc.n	800fb16 <create_chain+0x64>
 800fade:	2301      	movs	r3, #1
 800fae0:	61bb      	str	r3, [r7, #24]
 800fae2:	e018      	b.n	800fb16 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800fae4:	6839      	ldr	r1, [r7, #0]
 800fae6:	6878      	ldr	r0, [r7, #4]
 800fae8:	f7ff fd91 	bl	800f60e <get_fat>
 800faec:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	2b01      	cmp	r3, #1
 800faf2:	d801      	bhi.n	800faf8 <create_chain+0x46>
 800faf4:	2301      	movs	r3, #1
 800faf6:	e070      	b.n	800fbda <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fafe:	d101      	bne.n	800fb04 <create_chain+0x52>
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	e06a      	b.n	800fbda <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800fb04:	693b      	ldr	r3, [r7, #16]
 800fb06:	6a1b      	ldr	r3, [r3, #32]
 800fb08:	68fa      	ldr	r2, [r7, #12]
 800fb0a:	429a      	cmp	r2, r3
 800fb0c:	d201      	bcs.n	800fb12 <create_chain+0x60>
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	e063      	b.n	800fbda <create_chain+0x128>
		scl = clst;
 800fb12:	683b      	ldr	r3, [r7, #0]
 800fb14:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800fb16:	69bb      	ldr	r3, [r7, #24]
 800fb18:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800fb1a:	69fb      	ldr	r3, [r7, #28]
 800fb1c:	3301      	adds	r3, #1
 800fb1e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800fb20:	693b      	ldr	r3, [r7, #16]
 800fb22:	6a1b      	ldr	r3, [r3, #32]
 800fb24:	69fa      	ldr	r2, [r7, #28]
 800fb26:	429a      	cmp	r2, r3
 800fb28:	d307      	bcc.n	800fb3a <create_chain+0x88>
				ncl = 2;
 800fb2a:	2302      	movs	r3, #2
 800fb2c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800fb2e:	69fa      	ldr	r2, [r7, #28]
 800fb30:	69bb      	ldr	r3, [r7, #24]
 800fb32:	429a      	cmp	r2, r3
 800fb34:	d901      	bls.n	800fb3a <create_chain+0x88>
 800fb36:	2300      	movs	r3, #0
 800fb38:	e04f      	b.n	800fbda <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800fb3a:	69f9      	ldr	r1, [r7, #28]
 800fb3c:	6878      	ldr	r0, [r7, #4]
 800fb3e:	f7ff fd66 	bl	800f60e <get_fat>
 800fb42:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d00e      	beq.n	800fb68 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	2b01      	cmp	r3, #1
 800fb4e:	d003      	beq.n	800fb58 <create_chain+0xa6>
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb56:	d101      	bne.n	800fb5c <create_chain+0xaa>
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	e03e      	b.n	800fbda <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800fb5c:	69fa      	ldr	r2, [r7, #28]
 800fb5e:	69bb      	ldr	r3, [r7, #24]
 800fb60:	429a      	cmp	r2, r3
 800fb62:	d1da      	bne.n	800fb1a <create_chain+0x68>
 800fb64:	2300      	movs	r3, #0
 800fb66:	e038      	b.n	800fbda <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800fb68:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800fb6a:	f04f 32ff 	mov.w	r2, #4294967295
 800fb6e:	69f9      	ldr	r1, [r7, #28]
 800fb70:	6938      	ldr	r0, [r7, #16]
 800fb72:	f7ff fe1f 	bl	800f7b4 <put_fat>
 800fb76:	4603      	mov	r3, r0
 800fb78:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800fb7a:	7dfb      	ldrb	r3, [r7, #23]
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d109      	bne.n	800fb94 <create_chain+0xe2>
 800fb80:	683b      	ldr	r3, [r7, #0]
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d006      	beq.n	800fb94 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800fb86:	69fa      	ldr	r2, [r7, #28]
 800fb88:	6839      	ldr	r1, [r7, #0]
 800fb8a:	6938      	ldr	r0, [r7, #16]
 800fb8c:	f7ff fe12 	bl	800f7b4 <put_fat>
 800fb90:	4603      	mov	r3, r0
 800fb92:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800fb94:	7dfb      	ldrb	r3, [r7, #23]
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d116      	bne.n	800fbc8 <create_chain+0x116>
		fs->last_clst = ncl;
 800fb9a:	693b      	ldr	r3, [r7, #16]
 800fb9c:	69fa      	ldr	r2, [r7, #28]
 800fb9e:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800fba0:	693b      	ldr	r3, [r7, #16]
 800fba2:	699a      	ldr	r2, [r3, #24]
 800fba4:	693b      	ldr	r3, [r7, #16]
 800fba6:	6a1b      	ldr	r3, [r3, #32]
 800fba8:	3b02      	subs	r3, #2
 800fbaa:	429a      	cmp	r2, r3
 800fbac:	d804      	bhi.n	800fbb8 <create_chain+0x106>
 800fbae:	693b      	ldr	r3, [r7, #16]
 800fbb0:	699b      	ldr	r3, [r3, #24]
 800fbb2:	1e5a      	subs	r2, r3, #1
 800fbb4:	693b      	ldr	r3, [r7, #16]
 800fbb6:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800fbb8:	693b      	ldr	r3, [r7, #16]
 800fbba:	791b      	ldrb	r3, [r3, #4]
 800fbbc:	f043 0301 	orr.w	r3, r3, #1
 800fbc0:	b2da      	uxtb	r2, r3
 800fbc2:	693b      	ldr	r3, [r7, #16]
 800fbc4:	711a      	strb	r2, [r3, #4]
 800fbc6:	e007      	b.n	800fbd8 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800fbc8:	7dfb      	ldrb	r3, [r7, #23]
 800fbca:	2b01      	cmp	r3, #1
 800fbcc:	d102      	bne.n	800fbd4 <create_chain+0x122>
 800fbce:	f04f 33ff 	mov.w	r3, #4294967295
 800fbd2:	e000      	b.n	800fbd6 <create_chain+0x124>
 800fbd4:	2301      	movs	r3, #1
 800fbd6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800fbd8:	69fb      	ldr	r3, [r7, #28]
}
 800fbda:	4618      	mov	r0, r3
 800fbdc:	3720      	adds	r7, #32
 800fbde:	46bd      	mov	sp, r7
 800fbe0:	bd80      	pop	{r7, pc}

0800fbe2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800fbe2:	b480      	push	{r7}
 800fbe4:	b087      	sub	sp, #28
 800fbe6:	af00      	add	r7, sp, #0
 800fbe8:	6078      	str	r0, [r7, #4]
 800fbea:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fbf6:	3304      	adds	r3, #4
 800fbf8:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	899b      	ldrh	r3, [r3, #12]
 800fbfe:	461a      	mov	r2, r3
 800fc00:	683b      	ldr	r3, [r7, #0]
 800fc02:	fbb3 f3f2 	udiv	r3, r3, r2
 800fc06:	68fa      	ldr	r2, [r7, #12]
 800fc08:	8952      	ldrh	r2, [r2, #10]
 800fc0a:	fbb3 f3f2 	udiv	r3, r3, r2
 800fc0e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800fc10:	693b      	ldr	r3, [r7, #16]
 800fc12:	1d1a      	adds	r2, r3, #4
 800fc14:	613a      	str	r2, [r7, #16]
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800fc1a:	68bb      	ldr	r3, [r7, #8]
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d101      	bne.n	800fc24 <clmt_clust+0x42>
 800fc20:	2300      	movs	r3, #0
 800fc22:	e010      	b.n	800fc46 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800fc24:	697a      	ldr	r2, [r7, #20]
 800fc26:	68bb      	ldr	r3, [r7, #8]
 800fc28:	429a      	cmp	r2, r3
 800fc2a:	d307      	bcc.n	800fc3c <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800fc2c:	697a      	ldr	r2, [r7, #20]
 800fc2e:	68bb      	ldr	r3, [r7, #8]
 800fc30:	1ad3      	subs	r3, r2, r3
 800fc32:	617b      	str	r3, [r7, #20]
 800fc34:	693b      	ldr	r3, [r7, #16]
 800fc36:	3304      	adds	r3, #4
 800fc38:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800fc3a:	e7e9      	b.n	800fc10 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800fc3c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800fc3e:	693b      	ldr	r3, [r7, #16]
 800fc40:	681a      	ldr	r2, [r3, #0]
 800fc42:	697b      	ldr	r3, [r7, #20]
 800fc44:	4413      	add	r3, r2
}
 800fc46:	4618      	mov	r0, r3
 800fc48:	371c      	adds	r7, #28
 800fc4a:	46bd      	mov	sp, r7
 800fc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc50:	4770      	bx	lr

0800fc52 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800fc52:	b580      	push	{r7, lr}
 800fc54:	b086      	sub	sp, #24
 800fc56:	af00      	add	r7, sp, #0
 800fc58:	6078      	str	r0, [r7, #4]
 800fc5a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800fc62:	683b      	ldr	r3, [r7, #0]
 800fc64:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800fc68:	d204      	bcs.n	800fc74 <dir_sdi+0x22>
 800fc6a:	683b      	ldr	r3, [r7, #0]
 800fc6c:	f003 031f 	and.w	r3, r3, #31
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d001      	beq.n	800fc78 <dir_sdi+0x26>
		return FR_INT_ERR;
 800fc74:	2302      	movs	r3, #2
 800fc76:	e071      	b.n	800fd5c <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	683a      	ldr	r2, [r7, #0]
 800fc7c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	689b      	ldr	r3, [r3, #8]
 800fc82:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800fc84:	697b      	ldr	r3, [r7, #20]
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d106      	bne.n	800fc98 <dir_sdi+0x46>
 800fc8a:	693b      	ldr	r3, [r7, #16]
 800fc8c:	781b      	ldrb	r3, [r3, #0]
 800fc8e:	2b02      	cmp	r3, #2
 800fc90:	d902      	bls.n	800fc98 <dir_sdi+0x46>
		clst = fs->dirbase;
 800fc92:	693b      	ldr	r3, [r7, #16]
 800fc94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fc96:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800fc98:	697b      	ldr	r3, [r7, #20]
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d10c      	bne.n	800fcb8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800fc9e:	683b      	ldr	r3, [r7, #0]
 800fca0:	095b      	lsrs	r3, r3, #5
 800fca2:	693a      	ldr	r2, [r7, #16]
 800fca4:	8912      	ldrh	r2, [r2, #8]
 800fca6:	4293      	cmp	r3, r2
 800fca8:	d301      	bcc.n	800fcae <dir_sdi+0x5c>
 800fcaa:	2302      	movs	r3, #2
 800fcac:	e056      	b.n	800fd5c <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800fcae:	693b      	ldr	r3, [r7, #16]
 800fcb0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	61da      	str	r2, [r3, #28]
 800fcb6:	e02d      	b.n	800fd14 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800fcb8:	693b      	ldr	r3, [r7, #16]
 800fcba:	895b      	ldrh	r3, [r3, #10]
 800fcbc:	461a      	mov	r2, r3
 800fcbe:	693b      	ldr	r3, [r7, #16]
 800fcc0:	899b      	ldrh	r3, [r3, #12]
 800fcc2:	fb02 f303 	mul.w	r3, r2, r3
 800fcc6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800fcc8:	e019      	b.n	800fcfe <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	6979      	ldr	r1, [r7, #20]
 800fcce:	4618      	mov	r0, r3
 800fcd0:	f7ff fc9d 	bl	800f60e <get_fat>
 800fcd4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800fcd6:	697b      	ldr	r3, [r7, #20]
 800fcd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fcdc:	d101      	bne.n	800fce2 <dir_sdi+0x90>
 800fcde:	2301      	movs	r3, #1
 800fce0:	e03c      	b.n	800fd5c <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800fce2:	697b      	ldr	r3, [r7, #20]
 800fce4:	2b01      	cmp	r3, #1
 800fce6:	d904      	bls.n	800fcf2 <dir_sdi+0xa0>
 800fce8:	693b      	ldr	r3, [r7, #16]
 800fcea:	6a1b      	ldr	r3, [r3, #32]
 800fcec:	697a      	ldr	r2, [r7, #20]
 800fcee:	429a      	cmp	r2, r3
 800fcf0:	d301      	bcc.n	800fcf6 <dir_sdi+0xa4>
 800fcf2:	2302      	movs	r3, #2
 800fcf4:	e032      	b.n	800fd5c <dir_sdi+0x10a>
			ofs -= csz;
 800fcf6:	683a      	ldr	r2, [r7, #0]
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	1ad3      	subs	r3, r2, r3
 800fcfc:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800fcfe:	683a      	ldr	r2, [r7, #0]
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	429a      	cmp	r2, r3
 800fd04:	d2e1      	bcs.n	800fcca <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800fd06:	6979      	ldr	r1, [r7, #20]
 800fd08:	6938      	ldr	r0, [r7, #16]
 800fd0a:	f7ff fc61 	bl	800f5d0 <clust2sect>
 800fd0e:	4602      	mov	r2, r0
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	697a      	ldr	r2, [r7, #20]
 800fd18:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	69db      	ldr	r3, [r3, #28]
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d101      	bne.n	800fd26 <dir_sdi+0xd4>
 800fd22:	2302      	movs	r3, #2
 800fd24:	e01a      	b.n	800fd5c <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	69da      	ldr	r2, [r3, #28]
 800fd2a:	693b      	ldr	r3, [r7, #16]
 800fd2c:	899b      	ldrh	r3, [r3, #12]
 800fd2e:	4619      	mov	r1, r3
 800fd30:	683b      	ldr	r3, [r7, #0]
 800fd32:	fbb3 f3f1 	udiv	r3, r3, r1
 800fd36:	441a      	add	r2, r3
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800fd3c:	693b      	ldr	r3, [r7, #16]
 800fd3e:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800fd42:	693b      	ldr	r3, [r7, #16]
 800fd44:	899b      	ldrh	r3, [r3, #12]
 800fd46:	461a      	mov	r2, r3
 800fd48:	683b      	ldr	r3, [r7, #0]
 800fd4a:	fbb3 f0f2 	udiv	r0, r3, r2
 800fd4e:	fb00 f202 	mul.w	r2, r0, r2
 800fd52:	1a9b      	subs	r3, r3, r2
 800fd54:	18ca      	adds	r2, r1, r3
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800fd5a:	2300      	movs	r3, #0
}
 800fd5c:	4618      	mov	r0, r3
 800fd5e:	3718      	adds	r7, #24
 800fd60:	46bd      	mov	sp, r7
 800fd62:	bd80      	pop	{r7, pc}

0800fd64 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800fd64:	b580      	push	{r7, lr}
 800fd66:	b086      	sub	sp, #24
 800fd68:	af00      	add	r7, sp, #0
 800fd6a:	6078      	str	r0, [r7, #4]
 800fd6c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	695b      	ldr	r3, [r3, #20]
 800fd78:	3320      	adds	r3, #32
 800fd7a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	69db      	ldr	r3, [r3, #28]
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d003      	beq.n	800fd8c <dir_next+0x28>
 800fd84:	68bb      	ldr	r3, [r7, #8]
 800fd86:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800fd8a:	d301      	bcc.n	800fd90 <dir_next+0x2c>
 800fd8c:	2304      	movs	r3, #4
 800fd8e:	e0bb      	b.n	800ff08 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	899b      	ldrh	r3, [r3, #12]
 800fd94:	461a      	mov	r2, r3
 800fd96:	68bb      	ldr	r3, [r7, #8]
 800fd98:	fbb3 f1f2 	udiv	r1, r3, r2
 800fd9c:	fb01 f202 	mul.w	r2, r1, r2
 800fda0:	1a9b      	subs	r3, r3, r2
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	f040 809d 	bne.w	800fee2 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	69db      	ldr	r3, [r3, #28]
 800fdac:	1c5a      	adds	r2, r3, #1
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	699b      	ldr	r3, [r3, #24]
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d10b      	bne.n	800fdd2 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800fdba:	68bb      	ldr	r3, [r7, #8]
 800fdbc:	095b      	lsrs	r3, r3, #5
 800fdbe:	68fa      	ldr	r2, [r7, #12]
 800fdc0:	8912      	ldrh	r2, [r2, #8]
 800fdc2:	4293      	cmp	r3, r2
 800fdc4:	f0c0 808d 	bcc.w	800fee2 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	2200      	movs	r2, #0
 800fdcc:	61da      	str	r2, [r3, #28]
 800fdce:	2304      	movs	r3, #4
 800fdd0:	e09a      	b.n	800ff08 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	899b      	ldrh	r3, [r3, #12]
 800fdd6:	461a      	mov	r2, r3
 800fdd8:	68bb      	ldr	r3, [r7, #8]
 800fdda:	fbb3 f3f2 	udiv	r3, r3, r2
 800fdde:	68fa      	ldr	r2, [r7, #12]
 800fde0:	8952      	ldrh	r2, [r2, #10]
 800fde2:	3a01      	subs	r2, #1
 800fde4:	4013      	ands	r3, r2
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d17b      	bne.n	800fee2 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800fdea:	687a      	ldr	r2, [r7, #4]
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	699b      	ldr	r3, [r3, #24]
 800fdf0:	4619      	mov	r1, r3
 800fdf2:	4610      	mov	r0, r2
 800fdf4:	f7ff fc0b 	bl	800f60e <get_fat>
 800fdf8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800fdfa:	697b      	ldr	r3, [r7, #20]
 800fdfc:	2b01      	cmp	r3, #1
 800fdfe:	d801      	bhi.n	800fe04 <dir_next+0xa0>
 800fe00:	2302      	movs	r3, #2
 800fe02:	e081      	b.n	800ff08 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800fe04:	697b      	ldr	r3, [r7, #20]
 800fe06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe0a:	d101      	bne.n	800fe10 <dir_next+0xac>
 800fe0c:	2301      	movs	r3, #1
 800fe0e:	e07b      	b.n	800ff08 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	6a1b      	ldr	r3, [r3, #32]
 800fe14:	697a      	ldr	r2, [r7, #20]
 800fe16:	429a      	cmp	r2, r3
 800fe18:	d359      	bcc.n	800fece <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800fe1a:	683b      	ldr	r3, [r7, #0]
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d104      	bne.n	800fe2a <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	2200      	movs	r2, #0
 800fe24:	61da      	str	r2, [r3, #28]
 800fe26:	2304      	movs	r3, #4
 800fe28:	e06e      	b.n	800ff08 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800fe2a:	687a      	ldr	r2, [r7, #4]
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	699b      	ldr	r3, [r3, #24]
 800fe30:	4619      	mov	r1, r3
 800fe32:	4610      	mov	r0, r2
 800fe34:	f7ff fe3d 	bl	800fab2 <create_chain>
 800fe38:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800fe3a:	697b      	ldr	r3, [r7, #20]
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d101      	bne.n	800fe44 <dir_next+0xe0>
 800fe40:	2307      	movs	r3, #7
 800fe42:	e061      	b.n	800ff08 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800fe44:	697b      	ldr	r3, [r7, #20]
 800fe46:	2b01      	cmp	r3, #1
 800fe48:	d101      	bne.n	800fe4e <dir_next+0xea>
 800fe4a:	2302      	movs	r3, #2
 800fe4c:	e05c      	b.n	800ff08 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800fe4e:	697b      	ldr	r3, [r7, #20]
 800fe50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe54:	d101      	bne.n	800fe5a <dir_next+0xf6>
 800fe56:	2301      	movs	r3, #1
 800fe58:	e056      	b.n	800ff08 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800fe5a:	68f8      	ldr	r0, [r7, #12]
 800fe5c:	f7ff fad6 	bl	800f40c <sync_window>
 800fe60:	4603      	mov	r3, r0
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d001      	beq.n	800fe6a <dir_next+0x106>
 800fe66:	2301      	movs	r3, #1
 800fe68:	e04e      	b.n	800ff08 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	899b      	ldrh	r3, [r3, #12]
 800fe74:	461a      	mov	r2, r3
 800fe76:	2100      	movs	r1, #0
 800fe78:	f7ff f8ff 	bl	800f07a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800fe7c:	2300      	movs	r3, #0
 800fe7e:	613b      	str	r3, [r7, #16]
 800fe80:	6979      	ldr	r1, [r7, #20]
 800fe82:	68f8      	ldr	r0, [r7, #12]
 800fe84:	f7ff fba4 	bl	800f5d0 <clust2sect>
 800fe88:	4602      	mov	r2, r0
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	639a      	str	r2, [r3, #56]	@ 0x38
 800fe8e:	e012      	b.n	800feb6 <dir_next+0x152>
						fs->wflag = 1;
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	2201      	movs	r2, #1
 800fe94:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800fe96:	68f8      	ldr	r0, [r7, #12]
 800fe98:	f7ff fab8 	bl	800f40c <sync_window>
 800fe9c:	4603      	mov	r3, r0
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d001      	beq.n	800fea6 <dir_next+0x142>
 800fea2:	2301      	movs	r3, #1
 800fea4:	e030      	b.n	800ff08 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800fea6:	693b      	ldr	r3, [r7, #16]
 800fea8:	3301      	adds	r3, #1
 800feaa:	613b      	str	r3, [r7, #16]
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800feb0:	1c5a      	adds	r2, r3, #1
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	639a      	str	r2, [r3, #56]	@ 0x38
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	895b      	ldrh	r3, [r3, #10]
 800feba:	461a      	mov	r2, r3
 800febc:	693b      	ldr	r3, [r7, #16]
 800febe:	4293      	cmp	r3, r2
 800fec0:	d3e6      	bcc.n	800fe90 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fec6:	693b      	ldr	r3, [r7, #16]
 800fec8:	1ad2      	subs	r2, r2, r3
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	639a      	str	r2, [r3, #56]	@ 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	697a      	ldr	r2, [r7, #20]
 800fed2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800fed4:	6979      	ldr	r1, [r7, #20]
 800fed6:	68f8      	ldr	r0, [r7, #12]
 800fed8:	f7ff fb7a 	bl	800f5d0 <clust2sect>
 800fedc:	4602      	mov	r2, r0
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	68ba      	ldr	r2, [r7, #8]
 800fee6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	899b      	ldrh	r3, [r3, #12]
 800fef2:	461a      	mov	r2, r3
 800fef4:	68bb      	ldr	r3, [r7, #8]
 800fef6:	fbb3 f0f2 	udiv	r0, r3, r2
 800fefa:	fb00 f202 	mul.w	r2, r0, r2
 800fefe:	1a9b      	subs	r3, r3, r2
 800ff00:	18ca      	adds	r2, r1, r3
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ff06:	2300      	movs	r3, #0
}
 800ff08:	4618      	mov	r0, r3
 800ff0a:	3718      	adds	r7, #24
 800ff0c:	46bd      	mov	sp, r7
 800ff0e:	bd80      	pop	{r7, pc}

0800ff10 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800ff10:	b580      	push	{r7, lr}
 800ff12:	b086      	sub	sp, #24
 800ff14:	af00      	add	r7, sp, #0
 800ff16:	6078      	str	r0, [r7, #4]
 800ff18:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ff20:	2100      	movs	r1, #0
 800ff22:	6878      	ldr	r0, [r7, #4]
 800ff24:	f7ff fe95 	bl	800fc52 <dir_sdi>
 800ff28:	4603      	mov	r3, r0
 800ff2a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ff2c:	7dfb      	ldrb	r3, [r7, #23]
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d12b      	bne.n	800ff8a <dir_alloc+0x7a>
		n = 0;
 800ff32:	2300      	movs	r3, #0
 800ff34:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	69db      	ldr	r3, [r3, #28]
 800ff3a:	4619      	mov	r1, r3
 800ff3c:	68f8      	ldr	r0, [r7, #12]
 800ff3e:	f7ff faa9 	bl	800f494 <move_window>
 800ff42:	4603      	mov	r3, r0
 800ff44:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ff46:	7dfb      	ldrb	r3, [r7, #23]
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d11d      	bne.n	800ff88 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	6a1b      	ldr	r3, [r3, #32]
 800ff50:	781b      	ldrb	r3, [r3, #0]
 800ff52:	2be5      	cmp	r3, #229	@ 0xe5
 800ff54:	d004      	beq.n	800ff60 <dir_alloc+0x50>
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	6a1b      	ldr	r3, [r3, #32]
 800ff5a:	781b      	ldrb	r3, [r3, #0]
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d107      	bne.n	800ff70 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ff60:	693b      	ldr	r3, [r7, #16]
 800ff62:	3301      	adds	r3, #1
 800ff64:	613b      	str	r3, [r7, #16]
 800ff66:	693a      	ldr	r2, [r7, #16]
 800ff68:	683b      	ldr	r3, [r7, #0]
 800ff6a:	429a      	cmp	r2, r3
 800ff6c:	d102      	bne.n	800ff74 <dir_alloc+0x64>
 800ff6e:	e00c      	b.n	800ff8a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ff70:	2300      	movs	r3, #0
 800ff72:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ff74:	2101      	movs	r1, #1
 800ff76:	6878      	ldr	r0, [r7, #4]
 800ff78:	f7ff fef4 	bl	800fd64 <dir_next>
 800ff7c:	4603      	mov	r3, r0
 800ff7e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ff80:	7dfb      	ldrb	r3, [r7, #23]
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d0d7      	beq.n	800ff36 <dir_alloc+0x26>
 800ff86:	e000      	b.n	800ff8a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800ff88:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ff8a:	7dfb      	ldrb	r3, [r7, #23]
 800ff8c:	2b04      	cmp	r3, #4
 800ff8e:	d101      	bne.n	800ff94 <dir_alloc+0x84>
 800ff90:	2307      	movs	r3, #7
 800ff92:	75fb      	strb	r3, [r7, #23]
	return res;
 800ff94:	7dfb      	ldrb	r3, [r7, #23]
}
 800ff96:	4618      	mov	r0, r3
 800ff98:	3718      	adds	r7, #24
 800ff9a:	46bd      	mov	sp, r7
 800ff9c:	bd80      	pop	{r7, pc}

0800ff9e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800ff9e:	b580      	push	{r7, lr}
 800ffa0:	b084      	sub	sp, #16
 800ffa2:	af00      	add	r7, sp, #0
 800ffa4:	6078      	str	r0, [r7, #4]
 800ffa6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800ffa8:	683b      	ldr	r3, [r7, #0]
 800ffaa:	331a      	adds	r3, #26
 800ffac:	4618      	mov	r0, r3
 800ffae:	f7fe ffc1 	bl	800ef34 <ld_word>
 800ffb2:	4603      	mov	r3, r0
 800ffb4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	781b      	ldrb	r3, [r3, #0]
 800ffba:	2b03      	cmp	r3, #3
 800ffbc:	d109      	bne.n	800ffd2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ffbe:	683b      	ldr	r3, [r7, #0]
 800ffc0:	3314      	adds	r3, #20
 800ffc2:	4618      	mov	r0, r3
 800ffc4:	f7fe ffb6 	bl	800ef34 <ld_word>
 800ffc8:	4603      	mov	r3, r0
 800ffca:	041b      	lsls	r3, r3, #16
 800ffcc:	68fa      	ldr	r2, [r7, #12]
 800ffce:	4313      	orrs	r3, r2
 800ffd0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800ffd2:	68fb      	ldr	r3, [r7, #12]
}
 800ffd4:	4618      	mov	r0, r3
 800ffd6:	3710      	adds	r7, #16
 800ffd8:	46bd      	mov	sp, r7
 800ffda:	bd80      	pop	{r7, pc}

0800ffdc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ffdc:	b580      	push	{r7, lr}
 800ffde:	b084      	sub	sp, #16
 800ffe0:	af00      	add	r7, sp, #0
 800ffe2:	60f8      	str	r0, [r7, #12]
 800ffe4:	60b9      	str	r1, [r7, #8]
 800ffe6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ffe8:	68bb      	ldr	r3, [r7, #8]
 800ffea:	331a      	adds	r3, #26
 800ffec:	687a      	ldr	r2, [r7, #4]
 800ffee:	b292      	uxth	r2, r2
 800fff0:	4611      	mov	r1, r2
 800fff2:	4618      	mov	r0, r3
 800fff4:	f7fe ffd9 	bl	800efaa <st_word>
	if (fs->fs_type == FS_FAT32) {
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	781b      	ldrb	r3, [r3, #0]
 800fffc:	2b03      	cmp	r3, #3
 800fffe:	d109      	bne.n	8010014 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8010000:	68bb      	ldr	r3, [r7, #8]
 8010002:	f103 0214 	add.w	r2, r3, #20
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	0c1b      	lsrs	r3, r3, #16
 801000a:	b29b      	uxth	r3, r3
 801000c:	4619      	mov	r1, r3
 801000e:	4610      	mov	r0, r2
 8010010:	f7fe ffcb 	bl	800efaa <st_word>
	}
}
 8010014:	bf00      	nop
 8010016:	3710      	adds	r7, #16
 8010018:	46bd      	mov	sp, r7
 801001a:	bd80      	pop	{r7, pc}

0801001c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 801001c:	b590      	push	{r4, r7, lr}
 801001e:	b087      	sub	sp, #28
 8010020:	af00      	add	r7, sp, #0
 8010022:	6078      	str	r0, [r7, #4]
 8010024:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8010026:	683b      	ldr	r3, [r7, #0]
 8010028:	331a      	adds	r3, #26
 801002a:	4618      	mov	r0, r3
 801002c:	f7fe ff82 	bl	800ef34 <ld_word>
 8010030:	4603      	mov	r3, r0
 8010032:	2b00      	cmp	r3, #0
 8010034:	d001      	beq.n	801003a <cmp_lfn+0x1e>
 8010036:	2300      	movs	r3, #0
 8010038:	e059      	b.n	80100ee <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801003a:	683b      	ldr	r3, [r7, #0]
 801003c:	781b      	ldrb	r3, [r3, #0]
 801003e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010042:	1e5a      	subs	r2, r3, #1
 8010044:	4613      	mov	r3, r2
 8010046:	005b      	lsls	r3, r3, #1
 8010048:	4413      	add	r3, r2
 801004a:	009b      	lsls	r3, r3, #2
 801004c:	4413      	add	r3, r2
 801004e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8010050:	2301      	movs	r3, #1
 8010052:	81fb      	strh	r3, [r7, #14]
 8010054:	2300      	movs	r3, #0
 8010056:	613b      	str	r3, [r7, #16]
 8010058:	e033      	b.n	80100c2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801005a:	4a27      	ldr	r2, [pc, #156]	@ (80100f8 <cmp_lfn+0xdc>)
 801005c:	693b      	ldr	r3, [r7, #16]
 801005e:	4413      	add	r3, r2
 8010060:	781b      	ldrb	r3, [r3, #0]
 8010062:	461a      	mov	r2, r3
 8010064:	683b      	ldr	r3, [r7, #0]
 8010066:	4413      	add	r3, r2
 8010068:	4618      	mov	r0, r3
 801006a:	f7fe ff63 	bl	800ef34 <ld_word>
 801006e:	4603      	mov	r3, r0
 8010070:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8010072:	89fb      	ldrh	r3, [r7, #14]
 8010074:	2b00      	cmp	r3, #0
 8010076:	d01a      	beq.n	80100ae <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8010078:	697b      	ldr	r3, [r7, #20]
 801007a:	2bfe      	cmp	r3, #254	@ 0xfe
 801007c:	d812      	bhi.n	80100a4 <cmp_lfn+0x88>
 801007e:	89bb      	ldrh	r3, [r7, #12]
 8010080:	4618      	mov	r0, r3
 8010082:	f002 fa9b 	bl	80125bc <ff_wtoupper>
 8010086:	4603      	mov	r3, r0
 8010088:	461c      	mov	r4, r3
 801008a:	697b      	ldr	r3, [r7, #20]
 801008c:	1c5a      	adds	r2, r3, #1
 801008e:	617a      	str	r2, [r7, #20]
 8010090:	005b      	lsls	r3, r3, #1
 8010092:	687a      	ldr	r2, [r7, #4]
 8010094:	4413      	add	r3, r2
 8010096:	881b      	ldrh	r3, [r3, #0]
 8010098:	4618      	mov	r0, r3
 801009a:	f002 fa8f 	bl	80125bc <ff_wtoupper>
 801009e:	4603      	mov	r3, r0
 80100a0:	429c      	cmp	r4, r3
 80100a2:	d001      	beq.n	80100a8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80100a4:	2300      	movs	r3, #0
 80100a6:	e022      	b.n	80100ee <cmp_lfn+0xd2>
			}
			wc = uc;
 80100a8:	89bb      	ldrh	r3, [r7, #12]
 80100aa:	81fb      	strh	r3, [r7, #14]
 80100ac:	e006      	b.n	80100bc <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80100ae:	89bb      	ldrh	r3, [r7, #12]
 80100b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80100b4:	4293      	cmp	r3, r2
 80100b6:	d001      	beq.n	80100bc <cmp_lfn+0xa0>
 80100b8:	2300      	movs	r3, #0
 80100ba:	e018      	b.n	80100ee <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80100bc:	693b      	ldr	r3, [r7, #16]
 80100be:	3301      	adds	r3, #1
 80100c0:	613b      	str	r3, [r7, #16]
 80100c2:	693b      	ldr	r3, [r7, #16]
 80100c4:	2b0c      	cmp	r3, #12
 80100c6:	d9c8      	bls.n	801005a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80100c8:	683b      	ldr	r3, [r7, #0]
 80100ca:	781b      	ldrb	r3, [r3, #0]
 80100cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d00b      	beq.n	80100ec <cmp_lfn+0xd0>
 80100d4:	89fb      	ldrh	r3, [r7, #14]
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d008      	beq.n	80100ec <cmp_lfn+0xd0>
 80100da:	697b      	ldr	r3, [r7, #20]
 80100dc:	005b      	lsls	r3, r3, #1
 80100de:	687a      	ldr	r2, [r7, #4]
 80100e0:	4413      	add	r3, r2
 80100e2:	881b      	ldrh	r3, [r3, #0]
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d001      	beq.n	80100ec <cmp_lfn+0xd0>
 80100e8:	2300      	movs	r3, #0
 80100ea:	e000      	b.n	80100ee <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80100ec:	2301      	movs	r3, #1
}
 80100ee:	4618      	mov	r0, r3
 80100f0:	371c      	adds	r7, #28
 80100f2:	46bd      	mov	sp, r7
 80100f4:	bd90      	pop	{r4, r7, pc}
 80100f6:	bf00      	nop
 80100f8:	08012b60 	.word	0x08012b60

080100fc <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80100fc:	b580      	push	{r7, lr}
 80100fe:	b088      	sub	sp, #32
 8010100:	af00      	add	r7, sp, #0
 8010102:	60f8      	str	r0, [r7, #12]
 8010104:	60b9      	str	r1, [r7, #8]
 8010106:	4611      	mov	r1, r2
 8010108:	461a      	mov	r2, r3
 801010a:	460b      	mov	r3, r1
 801010c:	71fb      	strb	r3, [r7, #7]
 801010e:	4613      	mov	r3, r2
 8010110:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8010112:	68bb      	ldr	r3, [r7, #8]
 8010114:	330d      	adds	r3, #13
 8010116:	79ba      	ldrb	r2, [r7, #6]
 8010118:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 801011a:	68bb      	ldr	r3, [r7, #8]
 801011c:	330b      	adds	r3, #11
 801011e:	220f      	movs	r2, #15
 8010120:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8010122:	68bb      	ldr	r3, [r7, #8]
 8010124:	330c      	adds	r3, #12
 8010126:	2200      	movs	r2, #0
 8010128:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 801012a:	68bb      	ldr	r3, [r7, #8]
 801012c:	331a      	adds	r3, #26
 801012e:	2100      	movs	r1, #0
 8010130:	4618      	mov	r0, r3
 8010132:	f7fe ff3a 	bl	800efaa <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8010136:	79fb      	ldrb	r3, [r7, #7]
 8010138:	1e5a      	subs	r2, r3, #1
 801013a:	4613      	mov	r3, r2
 801013c:	005b      	lsls	r3, r3, #1
 801013e:	4413      	add	r3, r2
 8010140:	009b      	lsls	r3, r3, #2
 8010142:	4413      	add	r3, r2
 8010144:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8010146:	2300      	movs	r3, #0
 8010148:	82fb      	strh	r3, [r7, #22]
 801014a:	2300      	movs	r3, #0
 801014c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801014e:	8afb      	ldrh	r3, [r7, #22]
 8010150:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010154:	4293      	cmp	r3, r2
 8010156:	d007      	beq.n	8010168 <put_lfn+0x6c>
 8010158:	69fb      	ldr	r3, [r7, #28]
 801015a:	1c5a      	adds	r2, r3, #1
 801015c:	61fa      	str	r2, [r7, #28]
 801015e:	005b      	lsls	r3, r3, #1
 8010160:	68fa      	ldr	r2, [r7, #12]
 8010162:	4413      	add	r3, r2
 8010164:	881b      	ldrh	r3, [r3, #0]
 8010166:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8010168:	4a17      	ldr	r2, [pc, #92]	@ (80101c8 <put_lfn+0xcc>)
 801016a:	69bb      	ldr	r3, [r7, #24]
 801016c:	4413      	add	r3, r2
 801016e:	781b      	ldrb	r3, [r3, #0]
 8010170:	461a      	mov	r2, r3
 8010172:	68bb      	ldr	r3, [r7, #8]
 8010174:	4413      	add	r3, r2
 8010176:	8afa      	ldrh	r2, [r7, #22]
 8010178:	4611      	mov	r1, r2
 801017a:	4618      	mov	r0, r3
 801017c:	f7fe ff15 	bl	800efaa <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8010180:	8afb      	ldrh	r3, [r7, #22]
 8010182:	2b00      	cmp	r3, #0
 8010184:	d102      	bne.n	801018c <put_lfn+0x90>
 8010186:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801018a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 801018c:	69bb      	ldr	r3, [r7, #24]
 801018e:	3301      	adds	r3, #1
 8010190:	61bb      	str	r3, [r7, #24]
 8010192:	69bb      	ldr	r3, [r7, #24]
 8010194:	2b0c      	cmp	r3, #12
 8010196:	d9da      	bls.n	801014e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8010198:	8afb      	ldrh	r3, [r7, #22]
 801019a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801019e:	4293      	cmp	r3, r2
 80101a0:	d006      	beq.n	80101b0 <put_lfn+0xb4>
 80101a2:	69fb      	ldr	r3, [r7, #28]
 80101a4:	005b      	lsls	r3, r3, #1
 80101a6:	68fa      	ldr	r2, [r7, #12]
 80101a8:	4413      	add	r3, r2
 80101aa:	881b      	ldrh	r3, [r3, #0]
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d103      	bne.n	80101b8 <put_lfn+0xbc>
 80101b0:	79fb      	ldrb	r3, [r7, #7]
 80101b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80101b6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80101b8:	68bb      	ldr	r3, [r7, #8]
 80101ba:	79fa      	ldrb	r2, [r7, #7]
 80101bc:	701a      	strb	r2, [r3, #0]
}
 80101be:	bf00      	nop
 80101c0:	3720      	adds	r7, #32
 80101c2:	46bd      	mov	sp, r7
 80101c4:	bd80      	pop	{r7, pc}
 80101c6:	bf00      	nop
 80101c8:	08012b60 	.word	0x08012b60

080101cc <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80101cc:	b580      	push	{r7, lr}
 80101ce:	b08c      	sub	sp, #48	@ 0x30
 80101d0:	af00      	add	r7, sp, #0
 80101d2:	60f8      	str	r0, [r7, #12]
 80101d4:	60b9      	str	r1, [r7, #8]
 80101d6:	607a      	str	r2, [r7, #4]
 80101d8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80101da:	220b      	movs	r2, #11
 80101dc:	68b9      	ldr	r1, [r7, #8]
 80101de:	68f8      	ldr	r0, [r7, #12]
 80101e0:	f7fe ff2a 	bl	800f038 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80101e4:	683b      	ldr	r3, [r7, #0]
 80101e6:	2b05      	cmp	r3, #5
 80101e8:	d929      	bls.n	801023e <gen_numname+0x72>
		sr = seq;
 80101ea:	683b      	ldr	r3, [r7, #0]
 80101ec:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80101ee:	e020      	b.n	8010232 <gen_numname+0x66>
			wc = *lfn++;
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	1c9a      	adds	r2, r3, #2
 80101f4:	607a      	str	r2, [r7, #4]
 80101f6:	881b      	ldrh	r3, [r3, #0]
 80101f8:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 80101fa:	2300      	movs	r3, #0
 80101fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80101fe:	e015      	b.n	801022c <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 8010200:	69fb      	ldr	r3, [r7, #28]
 8010202:	005a      	lsls	r2, r3, #1
 8010204:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010206:	f003 0301 	and.w	r3, r3, #1
 801020a:	4413      	add	r3, r2
 801020c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 801020e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010210:	085b      	lsrs	r3, r3, #1
 8010212:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8010214:	69fb      	ldr	r3, [r7, #28]
 8010216:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801021a:	2b00      	cmp	r3, #0
 801021c:	d003      	beq.n	8010226 <gen_numname+0x5a>
 801021e:	69fa      	ldr	r2, [r7, #28]
 8010220:	4b30      	ldr	r3, [pc, #192]	@ (80102e4 <gen_numname+0x118>)
 8010222:	4053      	eors	r3, r2
 8010224:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8010226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010228:	3301      	adds	r3, #1
 801022a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801022c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801022e:	2b0f      	cmp	r3, #15
 8010230:	d9e6      	bls.n	8010200 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	881b      	ldrh	r3, [r3, #0]
 8010236:	2b00      	cmp	r3, #0
 8010238:	d1da      	bne.n	80101f0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 801023a:	69fb      	ldr	r3, [r7, #28]
 801023c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 801023e:	2307      	movs	r3, #7
 8010240:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8010242:	683b      	ldr	r3, [r7, #0]
 8010244:	b2db      	uxtb	r3, r3
 8010246:	f003 030f 	and.w	r3, r3, #15
 801024a:	b2db      	uxtb	r3, r3
 801024c:	3330      	adds	r3, #48	@ 0x30
 801024e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8010252:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010256:	2b39      	cmp	r3, #57	@ 0x39
 8010258:	d904      	bls.n	8010264 <gen_numname+0x98>
 801025a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801025e:	3307      	adds	r3, #7
 8010260:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8010264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010266:	1e5a      	subs	r2, r3, #1
 8010268:	62ba      	str	r2, [r7, #40]	@ 0x28
 801026a:	3330      	adds	r3, #48	@ 0x30
 801026c:	443b      	add	r3, r7
 801026e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8010272:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8010276:	683b      	ldr	r3, [r7, #0]
 8010278:	091b      	lsrs	r3, r3, #4
 801027a:	603b      	str	r3, [r7, #0]
	} while (seq);
 801027c:	683b      	ldr	r3, [r7, #0]
 801027e:	2b00      	cmp	r3, #0
 8010280:	d1df      	bne.n	8010242 <gen_numname+0x76>
	ns[i] = '~';
 8010282:	f107 0214 	add.w	r2, r7, #20
 8010286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010288:	4413      	add	r3, r2
 801028a:	227e      	movs	r2, #126	@ 0x7e
 801028c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801028e:	2300      	movs	r3, #0
 8010290:	627b      	str	r3, [r7, #36]	@ 0x24
 8010292:	e002      	b.n	801029a <gen_numname+0xce>
 8010294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010296:	3301      	adds	r3, #1
 8010298:	627b      	str	r3, [r7, #36]	@ 0x24
 801029a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801029c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801029e:	429a      	cmp	r2, r3
 80102a0:	d205      	bcs.n	80102ae <gen_numname+0xe2>
 80102a2:	68fa      	ldr	r2, [r7, #12]
 80102a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102a6:	4413      	add	r3, r2
 80102a8:	781b      	ldrb	r3, [r3, #0]
 80102aa:	2b20      	cmp	r3, #32
 80102ac:	d1f2      	bne.n	8010294 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80102ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102b0:	2b07      	cmp	r3, #7
 80102b2:	d807      	bhi.n	80102c4 <gen_numname+0xf8>
 80102b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102b6:	1c5a      	adds	r2, r3, #1
 80102b8:	62ba      	str	r2, [r7, #40]	@ 0x28
 80102ba:	3330      	adds	r3, #48	@ 0x30
 80102bc:	443b      	add	r3, r7
 80102be:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80102c2:	e000      	b.n	80102c6 <gen_numname+0xfa>
 80102c4:	2120      	movs	r1, #32
 80102c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102c8:	1c5a      	adds	r2, r3, #1
 80102ca:	627a      	str	r2, [r7, #36]	@ 0x24
 80102cc:	68fa      	ldr	r2, [r7, #12]
 80102ce:	4413      	add	r3, r2
 80102d0:	460a      	mov	r2, r1
 80102d2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80102d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102d6:	2b07      	cmp	r3, #7
 80102d8:	d9e9      	bls.n	80102ae <gen_numname+0xe2>
}
 80102da:	bf00      	nop
 80102dc:	bf00      	nop
 80102de:	3730      	adds	r7, #48	@ 0x30
 80102e0:	46bd      	mov	sp, r7
 80102e2:	bd80      	pop	{r7, pc}
 80102e4:	00011021 	.word	0x00011021

080102e8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80102e8:	b480      	push	{r7}
 80102ea:	b085      	sub	sp, #20
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80102f0:	2300      	movs	r3, #0
 80102f2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80102f4:	230b      	movs	r3, #11
 80102f6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80102f8:	7bfb      	ldrb	r3, [r7, #15]
 80102fa:	b2da      	uxtb	r2, r3
 80102fc:	0852      	lsrs	r2, r2, #1
 80102fe:	01db      	lsls	r3, r3, #7
 8010300:	4313      	orrs	r3, r2
 8010302:	b2da      	uxtb	r2, r3
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	1c59      	adds	r1, r3, #1
 8010308:	6079      	str	r1, [r7, #4]
 801030a:	781b      	ldrb	r3, [r3, #0]
 801030c:	4413      	add	r3, r2
 801030e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8010310:	68bb      	ldr	r3, [r7, #8]
 8010312:	3b01      	subs	r3, #1
 8010314:	60bb      	str	r3, [r7, #8]
 8010316:	68bb      	ldr	r3, [r7, #8]
 8010318:	2b00      	cmp	r3, #0
 801031a:	d1ed      	bne.n	80102f8 <sum_sfn+0x10>
	return sum;
 801031c:	7bfb      	ldrb	r3, [r7, #15]
}
 801031e:	4618      	mov	r0, r3
 8010320:	3714      	adds	r7, #20
 8010322:	46bd      	mov	sp, r7
 8010324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010328:	4770      	bx	lr

0801032a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801032a:	b580      	push	{r7, lr}
 801032c:	b086      	sub	sp, #24
 801032e:	af00      	add	r7, sp, #0
 8010330:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8010338:	2100      	movs	r1, #0
 801033a:	6878      	ldr	r0, [r7, #4]
 801033c:	f7ff fc89 	bl	800fc52 <dir_sdi>
 8010340:	4603      	mov	r3, r0
 8010342:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8010344:	7dfb      	ldrb	r3, [r7, #23]
 8010346:	2b00      	cmp	r3, #0
 8010348:	d001      	beq.n	801034e <dir_find+0x24>
 801034a:	7dfb      	ldrb	r3, [r7, #23]
 801034c:	e0a9      	b.n	80104a2 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801034e:	23ff      	movs	r3, #255	@ 0xff
 8010350:	753b      	strb	r3, [r7, #20]
 8010352:	7d3b      	ldrb	r3, [r7, #20]
 8010354:	757b      	strb	r3, [r7, #21]
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	f04f 32ff 	mov.w	r2, #4294967295
 801035c:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	69db      	ldr	r3, [r3, #28]
 8010362:	4619      	mov	r1, r3
 8010364:	6938      	ldr	r0, [r7, #16]
 8010366:	f7ff f895 	bl	800f494 <move_window>
 801036a:	4603      	mov	r3, r0
 801036c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801036e:	7dfb      	ldrb	r3, [r7, #23]
 8010370:	2b00      	cmp	r3, #0
 8010372:	f040 8090 	bne.w	8010496 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	6a1b      	ldr	r3, [r3, #32]
 801037a:	781b      	ldrb	r3, [r3, #0]
 801037c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801037e:	7dbb      	ldrb	r3, [r7, #22]
 8010380:	2b00      	cmp	r3, #0
 8010382:	d102      	bne.n	801038a <dir_find+0x60>
 8010384:	2304      	movs	r3, #4
 8010386:	75fb      	strb	r3, [r7, #23]
 8010388:	e08a      	b.n	80104a0 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	6a1b      	ldr	r3, [r3, #32]
 801038e:	330b      	adds	r3, #11
 8010390:	781b      	ldrb	r3, [r3, #0]
 8010392:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010396:	73fb      	strb	r3, [r7, #15]
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	7bfa      	ldrb	r2, [r7, #15]
 801039c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 801039e:	7dbb      	ldrb	r3, [r7, #22]
 80103a0:	2be5      	cmp	r3, #229	@ 0xe5
 80103a2:	d007      	beq.n	80103b4 <dir_find+0x8a>
 80103a4:	7bfb      	ldrb	r3, [r7, #15]
 80103a6:	f003 0308 	and.w	r3, r3, #8
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d009      	beq.n	80103c2 <dir_find+0x98>
 80103ae:	7bfb      	ldrb	r3, [r7, #15]
 80103b0:	2b0f      	cmp	r3, #15
 80103b2:	d006      	beq.n	80103c2 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80103b4:	23ff      	movs	r3, #255	@ 0xff
 80103b6:	757b      	strb	r3, [r7, #21]
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	f04f 32ff 	mov.w	r2, #4294967295
 80103be:	631a      	str	r2, [r3, #48]	@ 0x30
 80103c0:	e05e      	b.n	8010480 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80103c2:	7bfb      	ldrb	r3, [r7, #15]
 80103c4:	2b0f      	cmp	r3, #15
 80103c6:	d136      	bne.n	8010436 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80103ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d154      	bne.n	8010480 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80103d6:	7dbb      	ldrb	r3, [r7, #22]
 80103d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d00d      	beq.n	80103fc <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	6a1b      	ldr	r3, [r3, #32]
 80103e4:	7b5b      	ldrb	r3, [r3, #13]
 80103e6:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80103e8:	7dbb      	ldrb	r3, [r7, #22]
 80103ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80103ee:	75bb      	strb	r3, [r7, #22]
 80103f0:	7dbb      	ldrb	r3, [r7, #22]
 80103f2:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	695a      	ldr	r2, [r3, #20]
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80103fc:	7dba      	ldrb	r2, [r7, #22]
 80103fe:	7d7b      	ldrb	r3, [r7, #21]
 8010400:	429a      	cmp	r2, r3
 8010402:	d115      	bne.n	8010430 <dir_find+0x106>
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	6a1b      	ldr	r3, [r3, #32]
 8010408:	330d      	adds	r3, #13
 801040a:	781b      	ldrb	r3, [r3, #0]
 801040c:	7d3a      	ldrb	r2, [r7, #20]
 801040e:	429a      	cmp	r2, r3
 8010410:	d10e      	bne.n	8010430 <dir_find+0x106>
 8010412:	693b      	ldr	r3, [r7, #16]
 8010414:	691a      	ldr	r2, [r3, #16]
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	6a1b      	ldr	r3, [r3, #32]
 801041a:	4619      	mov	r1, r3
 801041c:	4610      	mov	r0, r2
 801041e:	f7ff fdfd 	bl	801001c <cmp_lfn>
 8010422:	4603      	mov	r3, r0
 8010424:	2b00      	cmp	r3, #0
 8010426:	d003      	beq.n	8010430 <dir_find+0x106>
 8010428:	7d7b      	ldrb	r3, [r7, #21]
 801042a:	3b01      	subs	r3, #1
 801042c:	b2db      	uxtb	r3, r3
 801042e:	e000      	b.n	8010432 <dir_find+0x108>
 8010430:	23ff      	movs	r3, #255	@ 0xff
 8010432:	757b      	strb	r3, [r7, #21]
 8010434:	e024      	b.n	8010480 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8010436:	7d7b      	ldrb	r3, [r7, #21]
 8010438:	2b00      	cmp	r3, #0
 801043a:	d109      	bne.n	8010450 <dir_find+0x126>
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	6a1b      	ldr	r3, [r3, #32]
 8010440:	4618      	mov	r0, r3
 8010442:	f7ff ff51 	bl	80102e8 <sum_sfn>
 8010446:	4603      	mov	r3, r0
 8010448:	461a      	mov	r2, r3
 801044a:	7d3b      	ldrb	r3, [r7, #20]
 801044c:	4293      	cmp	r3, r2
 801044e:	d024      	beq.n	801049a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8010456:	f003 0301 	and.w	r3, r3, #1
 801045a:	2b00      	cmp	r3, #0
 801045c:	d10a      	bne.n	8010474 <dir_find+0x14a>
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	6a18      	ldr	r0, [r3, #32]
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	3324      	adds	r3, #36	@ 0x24
 8010466:	220b      	movs	r2, #11
 8010468:	4619      	mov	r1, r3
 801046a:	f7fe fe21 	bl	800f0b0 <mem_cmp>
 801046e:	4603      	mov	r3, r0
 8010470:	2b00      	cmp	r3, #0
 8010472:	d014      	beq.n	801049e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8010474:	23ff      	movs	r3, #255	@ 0xff
 8010476:	757b      	strb	r3, [r7, #21]
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	f04f 32ff 	mov.w	r2, #4294967295
 801047e:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8010480:	2100      	movs	r1, #0
 8010482:	6878      	ldr	r0, [r7, #4]
 8010484:	f7ff fc6e 	bl	800fd64 <dir_next>
 8010488:	4603      	mov	r3, r0
 801048a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801048c:	7dfb      	ldrb	r3, [r7, #23]
 801048e:	2b00      	cmp	r3, #0
 8010490:	f43f af65 	beq.w	801035e <dir_find+0x34>
 8010494:	e004      	b.n	80104a0 <dir_find+0x176>
		if (res != FR_OK) break;
 8010496:	bf00      	nop
 8010498:	e002      	b.n	80104a0 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801049a:	bf00      	nop
 801049c:	e000      	b.n	80104a0 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801049e:	bf00      	nop

	return res;
 80104a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80104a2:	4618      	mov	r0, r3
 80104a4:	3718      	adds	r7, #24
 80104a6:	46bd      	mov	sp, r7
 80104a8:	bd80      	pop	{r7, pc}
	...

080104ac <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80104ac:	b580      	push	{r7, lr}
 80104ae:	b08c      	sub	sp, #48	@ 0x30
 80104b0:	af00      	add	r7, sp, #0
 80104b2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80104c0:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d001      	beq.n	80104cc <dir_register+0x20>
 80104c8:	2306      	movs	r3, #6
 80104ca:	e0e0      	b.n	801068e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80104cc:	2300      	movs	r3, #0
 80104ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80104d0:	e002      	b.n	80104d8 <dir_register+0x2c>
 80104d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104d4:	3301      	adds	r3, #1
 80104d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80104d8:	69fb      	ldr	r3, [r7, #28]
 80104da:	691a      	ldr	r2, [r3, #16]
 80104dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104de:	005b      	lsls	r3, r3, #1
 80104e0:	4413      	add	r3, r2
 80104e2:	881b      	ldrh	r3, [r3, #0]
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d1f4      	bne.n	80104d2 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 80104ee:	f107 030c 	add.w	r3, r7, #12
 80104f2:	220c      	movs	r2, #12
 80104f4:	4618      	mov	r0, r3
 80104f6:	f7fe fd9f 	bl	800f038 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80104fa:	7dfb      	ldrb	r3, [r7, #23]
 80104fc:	f003 0301 	and.w	r3, r3, #1
 8010500:	2b00      	cmp	r3, #0
 8010502:	d032      	beq.n	801056a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	2240      	movs	r2, #64	@ 0x40
 8010508:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 801050c:	2301      	movs	r3, #1
 801050e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010510:	e016      	b.n	8010540 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8010518:	69fb      	ldr	r3, [r7, #28]
 801051a:	691a      	ldr	r2, [r3, #16]
 801051c:	f107 010c 	add.w	r1, r7, #12
 8010520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010522:	f7ff fe53 	bl	80101cc <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8010526:	6878      	ldr	r0, [r7, #4]
 8010528:	f7ff feff 	bl	801032a <dir_find>
 801052c:	4603      	mov	r3, r0
 801052e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8010532:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010536:	2b00      	cmp	r3, #0
 8010538:	d106      	bne.n	8010548 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 801053a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801053c:	3301      	adds	r3, #1
 801053e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010542:	2b63      	cmp	r3, #99	@ 0x63
 8010544:	d9e5      	bls.n	8010512 <dir_register+0x66>
 8010546:	e000      	b.n	801054a <dir_register+0x9e>
			if (res != FR_OK) break;
 8010548:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 801054a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801054c:	2b64      	cmp	r3, #100	@ 0x64
 801054e:	d101      	bne.n	8010554 <dir_register+0xa8>
 8010550:	2307      	movs	r3, #7
 8010552:	e09c      	b.n	801068e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8010554:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010558:	2b04      	cmp	r3, #4
 801055a:	d002      	beq.n	8010562 <dir_register+0xb6>
 801055c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010560:	e095      	b.n	801068e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8010562:	7dfa      	ldrb	r2, [r7, #23]
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 801056a:	7dfb      	ldrb	r3, [r7, #23]
 801056c:	f003 0302 	and.w	r3, r3, #2
 8010570:	2b00      	cmp	r3, #0
 8010572:	d007      	beq.n	8010584 <dir_register+0xd8>
 8010574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010576:	330c      	adds	r3, #12
 8010578:	4a47      	ldr	r2, [pc, #284]	@ (8010698 <dir_register+0x1ec>)
 801057a:	fba2 2303 	umull	r2, r3, r2, r3
 801057e:	089b      	lsrs	r3, r3, #2
 8010580:	3301      	adds	r3, #1
 8010582:	e000      	b.n	8010586 <dir_register+0xda>
 8010584:	2301      	movs	r3, #1
 8010586:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8010588:	6a39      	ldr	r1, [r7, #32]
 801058a:	6878      	ldr	r0, [r7, #4]
 801058c:	f7ff fcc0 	bl	800ff10 <dir_alloc>
 8010590:	4603      	mov	r3, r0
 8010592:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8010596:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801059a:	2b00      	cmp	r3, #0
 801059c:	d148      	bne.n	8010630 <dir_register+0x184>
 801059e:	6a3b      	ldr	r3, [r7, #32]
 80105a0:	3b01      	subs	r3, #1
 80105a2:	623b      	str	r3, [r7, #32]
 80105a4:	6a3b      	ldr	r3, [r7, #32]
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d042      	beq.n	8010630 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	695a      	ldr	r2, [r3, #20]
 80105ae:	6a3b      	ldr	r3, [r7, #32]
 80105b0:	015b      	lsls	r3, r3, #5
 80105b2:	1ad3      	subs	r3, r2, r3
 80105b4:	4619      	mov	r1, r3
 80105b6:	6878      	ldr	r0, [r7, #4]
 80105b8:	f7ff fb4b 	bl	800fc52 <dir_sdi>
 80105bc:	4603      	mov	r3, r0
 80105be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 80105c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d132      	bne.n	8010630 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	3324      	adds	r3, #36	@ 0x24
 80105ce:	4618      	mov	r0, r3
 80105d0:	f7ff fe8a 	bl	80102e8 <sum_sfn>
 80105d4:	4603      	mov	r3, r0
 80105d6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	69db      	ldr	r3, [r3, #28]
 80105dc:	4619      	mov	r1, r3
 80105de:	69f8      	ldr	r0, [r7, #28]
 80105e0:	f7fe ff58 	bl	800f494 <move_window>
 80105e4:	4603      	mov	r3, r0
 80105e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 80105ea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d11d      	bne.n	801062e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80105f2:	69fb      	ldr	r3, [r7, #28]
 80105f4:	6918      	ldr	r0, [r3, #16]
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	6a19      	ldr	r1, [r3, #32]
 80105fa:	6a3b      	ldr	r3, [r7, #32]
 80105fc:	b2da      	uxtb	r2, r3
 80105fe:	7efb      	ldrb	r3, [r7, #27]
 8010600:	f7ff fd7c 	bl	80100fc <put_lfn>
				fs->wflag = 1;
 8010604:	69fb      	ldr	r3, [r7, #28]
 8010606:	2201      	movs	r2, #1
 8010608:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 801060a:	2100      	movs	r1, #0
 801060c:	6878      	ldr	r0, [r7, #4]
 801060e:	f7ff fba9 	bl	800fd64 <dir_next>
 8010612:	4603      	mov	r3, r0
 8010614:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8010618:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801061c:	2b00      	cmp	r3, #0
 801061e:	d107      	bne.n	8010630 <dir_register+0x184>
 8010620:	6a3b      	ldr	r3, [r7, #32]
 8010622:	3b01      	subs	r3, #1
 8010624:	623b      	str	r3, [r7, #32]
 8010626:	6a3b      	ldr	r3, [r7, #32]
 8010628:	2b00      	cmp	r3, #0
 801062a:	d1d5      	bne.n	80105d8 <dir_register+0x12c>
 801062c:	e000      	b.n	8010630 <dir_register+0x184>
				if (res != FR_OK) break;
 801062e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8010630:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010634:	2b00      	cmp	r3, #0
 8010636:	d128      	bne.n	801068a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	69db      	ldr	r3, [r3, #28]
 801063c:	4619      	mov	r1, r3
 801063e:	69f8      	ldr	r0, [r7, #28]
 8010640:	f7fe ff28 	bl	800f494 <move_window>
 8010644:	4603      	mov	r3, r0
 8010646:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 801064a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801064e:	2b00      	cmp	r3, #0
 8010650:	d11b      	bne.n	801068a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	6a1b      	ldr	r3, [r3, #32]
 8010656:	2220      	movs	r2, #32
 8010658:	2100      	movs	r1, #0
 801065a:	4618      	mov	r0, r3
 801065c:	f7fe fd0d 	bl	800f07a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	6a18      	ldr	r0, [r3, #32]
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	3324      	adds	r3, #36	@ 0x24
 8010668:	220b      	movs	r2, #11
 801066a:	4619      	mov	r1, r3
 801066c:	f7fe fce4 	bl	800f038 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	6a1b      	ldr	r3, [r3, #32]
 801067a:	330c      	adds	r3, #12
 801067c:	f002 0218 	and.w	r2, r2, #24
 8010680:	b2d2      	uxtb	r2, r2
 8010682:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8010684:	69fb      	ldr	r3, [r7, #28]
 8010686:	2201      	movs	r2, #1
 8010688:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801068a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 801068e:	4618      	mov	r0, r3
 8010690:	3730      	adds	r7, #48	@ 0x30
 8010692:	46bd      	mov	sp, r7
 8010694:	bd80      	pop	{r7, pc}
 8010696:	bf00      	nop
 8010698:	4ec4ec4f 	.word	0x4ec4ec4f

0801069c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801069c:	b580      	push	{r7, lr}
 801069e:	b08a      	sub	sp, #40	@ 0x28
 80106a0:	af00      	add	r7, sp, #0
 80106a2:	6078      	str	r0, [r7, #4]
 80106a4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80106a6:	683b      	ldr	r3, [r7, #0]
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	613b      	str	r3, [r7, #16]
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	691b      	ldr	r3, [r3, #16]
 80106b2:	60fb      	str	r3, [r7, #12]
 80106b4:	2300      	movs	r3, #0
 80106b6:	617b      	str	r3, [r7, #20]
 80106b8:	697b      	ldr	r3, [r7, #20]
 80106ba:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80106bc:	69bb      	ldr	r3, [r7, #24]
 80106be:	1c5a      	adds	r2, r3, #1
 80106c0:	61ba      	str	r2, [r7, #24]
 80106c2:	693a      	ldr	r2, [r7, #16]
 80106c4:	4413      	add	r3, r2
 80106c6:	781b      	ldrb	r3, [r3, #0]
 80106c8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80106ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80106cc:	2b1f      	cmp	r3, #31
 80106ce:	d940      	bls.n	8010752 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80106d0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80106d2:	2b2f      	cmp	r3, #47	@ 0x2f
 80106d4:	d006      	beq.n	80106e4 <create_name+0x48>
 80106d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80106d8:	2b5c      	cmp	r3, #92	@ 0x5c
 80106da:	d110      	bne.n	80106fe <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80106dc:	e002      	b.n	80106e4 <create_name+0x48>
 80106de:	69bb      	ldr	r3, [r7, #24]
 80106e0:	3301      	adds	r3, #1
 80106e2:	61bb      	str	r3, [r7, #24]
 80106e4:	693a      	ldr	r2, [r7, #16]
 80106e6:	69bb      	ldr	r3, [r7, #24]
 80106e8:	4413      	add	r3, r2
 80106ea:	781b      	ldrb	r3, [r3, #0]
 80106ec:	2b2f      	cmp	r3, #47	@ 0x2f
 80106ee:	d0f6      	beq.n	80106de <create_name+0x42>
 80106f0:	693a      	ldr	r2, [r7, #16]
 80106f2:	69bb      	ldr	r3, [r7, #24]
 80106f4:	4413      	add	r3, r2
 80106f6:	781b      	ldrb	r3, [r3, #0]
 80106f8:	2b5c      	cmp	r3, #92	@ 0x5c
 80106fa:	d0f0      	beq.n	80106de <create_name+0x42>
			break;
 80106fc:	e02a      	b.n	8010754 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80106fe:	697b      	ldr	r3, [r7, #20]
 8010700:	2bfe      	cmp	r3, #254	@ 0xfe
 8010702:	d901      	bls.n	8010708 <create_name+0x6c>
 8010704:	2306      	movs	r3, #6
 8010706:	e1ca      	b.n	8010a9e <create_name+0x402>
#if !_LFN_UNICODE
		w &= 0xFF;
 8010708:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801070a:	b2db      	uxtb	r3, r3
 801070c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801070e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010710:	2101      	movs	r1, #1
 8010712:	4618      	mov	r0, r3
 8010714:	f001 ff16 	bl	8012544 <ff_convert>
 8010718:	4603      	mov	r3, r0
 801071a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 801071c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801071e:	2b00      	cmp	r3, #0
 8010720:	d101      	bne.n	8010726 <create_name+0x8a>
 8010722:	2306      	movs	r3, #6
 8010724:	e1bb      	b.n	8010a9e <create_name+0x402>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8010726:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010728:	2b7f      	cmp	r3, #127	@ 0x7f
 801072a:	d809      	bhi.n	8010740 <create_name+0xa4>
 801072c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801072e:	4619      	mov	r1, r3
 8010730:	489e      	ldr	r0, [pc, #632]	@ (80109ac <create_name+0x310>)
 8010732:	f7fe fce4 	bl	800f0fe <chk_chr>
 8010736:	4603      	mov	r3, r0
 8010738:	2b00      	cmp	r3, #0
 801073a:	d001      	beq.n	8010740 <create_name+0xa4>
 801073c:	2306      	movs	r3, #6
 801073e:	e1ae      	b.n	8010a9e <create_name+0x402>
		lfn[di++] = w;					/* Store the Unicode character */
 8010740:	697b      	ldr	r3, [r7, #20]
 8010742:	1c5a      	adds	r2, r3, #1
 8010744:	617a      	str	r2, [r7, #20]
 8010746:	005b      	lsls	r3, r3, #1
 8010748:	68fa      	ldr	r2, [r7, #12]
 801074a:	4413      	add	r3, r2
 801074c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801074e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8010750:	e7b4      	b.n	80106bc <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8010752:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8010754:	693a      	ldr	r2, [r7, #16]
 8010756:	69bb      	ldr	r3, [r7, #24]
 8010758:	441a      	add	r2, r3
 801075a:	683b      	ldr	r3, [r7, #0]
 801075c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801075e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010760:	2b1f      	cmp	r3, #31
 8010762:	d801      	bhi.n	8010768 <create_name+0xcc>
 8010764:	2304      	movs	r3, #4
 8010766:	e000      	b.n	801076a <create_name+0xce>
 8010768:	2300      	movs	r3, #0
 801076a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if _FS_RPATH != 0
	if ((di == 1 && lfn[di - 1] == '.') ||
 801076e:	697b      	ldr	r3, [r7, #20]
 8010770:	2b01      	cmp	r3, #1
 8010772:	d109      	bne.n	8010788 <create_name+0xec>
 8010774:	697a      	ldr	r2, [r7, #20]
 8010776:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801077a:	4413      	add	r3, r2
 801077c:	005b      	lsls	r3, r3, #1
 801077e:	68fa      	ldr	r2, [r7, #12]
 8010780:	4413      	add	r3, r2
 8010782:	881b      	ldrh	r3, [r3, #0]
 8010784:	2b2e      	cmp	r3, #46	@ 0x2e
 8010786:	d015      	beq.n	80107b4 <create_name+0x118>
 8010788:	697b      	ldr	r3, [r7, #20]
 801078a:	2b02      	cmp	r3, #2
 801078c:	d14d      	bne.n	801082a <create_name+0x18e>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 801078e:	697a      	ldr	r2, [r7, #20]
 8010790:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010794:	4413      	add	r3, r2
 8010796:	005b      	lsls	r3, r3, #1
 8010798:	68fa      	ldr	r2, [r7, #12]
 801079a:	4413      	add	r3, r2
 801079c:	881b      	ldrh	r3, [r3, #0]
 801079e:	2b2e      	cmp	r3, #46	@ 0x2e
 80107a0:	d143      	bne.n	801082a <create_name+0x18e>
 80107a2:	697a      	ldr	r2, [r7, #20]
 80107a4:	4b82      	ldr	r3, [pc, #520]	@ (80109b0 <create_name+0x314>)
 80107a6:	4413      	add	r3, r2
 80107a8:	005b      	lsls	r3, r3, #1
 80107aa:	68fa      	ldr	r2, [r7, #12]
 80107ac:	4413      	add	r3, r2
 80107ae:	881b      	ldrh	r3, [r3, #0]
 80107b0:	2b2e      	cmp	r3, #46	@ 0x2e
 80107b2:	d13a      	bne.n	801082a <create_name+0x18e>
		lfn[di] = 0;
 80107b4:	697b      	ldr	r3, [r7, #20]
 80107b6:	005b      	lsls	r3, r3, #1
 80107b8:	68fa      	ldr	r2, [r7, #12]
 80107ba:	4413      	add	r3, r2
 80107bc:	2200      	movs	r2, #0
 80107be:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 80107c0:	2300      	movs	r3, #0
 80107c2:	623b      	str	r3, [r7, #32]
 80107c4:	e00f      	b.n	80107e6 <create_name+0x14a>
			dp->fn[i] = (i < di) ? '.' : ' ';
 80107c6:	6a3a      	ldr	r2, [r7, #32]
 80107c8:	697b      	ldr	r3, [r7, #20]
 80107ca:	429a      	cmp	r2, r3
 80107cc:	d201      	bcs.n	80107d2 <create_name+0x136>
 80107ce:	212e      	movs	r1, #46	@ 0x2e
 80107d0:	e000      	b.n	80107d4 <create_name+0x138>
 80107d2:	2120      	movs	r1, #32
 80107d4:	687a      	ldr	r2, [r7, #4]
 80107d6:	6a3b      	ldr	r3, [r7, #32]
 80107d8:	4413      	add	r3, r2
 80107da:	3324      	adds	r3, #36	@ 0x24
 80107dc:	460a      	mov	r2, r1
 80107de:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 80107e0:	6a3b      	ldr	r3, [r7, #32]
 80107e2:	3301      	adds	r3, #1
 80107e4:	623b      	str	r3, [r7, #32]
 80107e6:	6a3b      	ldr	r3, [r7, #32]
 80107e8:	2b0a      	cmp	r3, #10
 80107ea:	d9ec      	bls.n	80107c6 <create_name+0x12a>
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 80107ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80107f0:	f043 0320 	orr.w	r3, r3, #32
 80107f4:	b2d9      	uxtb	r1, r3
 80107f6:	687a      	ldr	r2, [r7, #4]
 80107f8:	6a3b      	ldr	r3, [r7, #32]
 80107fa:	4413      	add	r3, r2
 80107fc:	3324      	adds	r3, #36	@ 0x24
 80107fe:	460a      	mov	r2, r1
 8010800:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8010802:	2300      	movs	r3, #0
 8010804:	e14b      	b.n	8010a9e <create_name+0x402>
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
		w = lfn[di - 1];
 8010806:	697a      	ldr	r2, [r7, #20]
 8010808:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801080c:	4413      	add	r3, r2
 801080e:	005b      	lsls	r3, r3, #1
 8010810:	68fa      	ldr	r2, [r7, #12]
 8010812:	4413      	add	r3, r2
 8010814:	881b      	ldrh	r3, [r3, #0]
 8010816:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8010818:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801081a:	2b20      	cmp	r3, #32
 801081c:	d002      	beq.n	8010824 <create_name+0x188>
 801081e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010820:	2b2e      	cmp	r3, #46	@ 0x2e
 8010822:	d106      	bne.n	8010832 <create_name+0x196>
		di--;
 8010824:	697b      	ldr	r3, [r7, #20]
 8010826:	3b01      	subs	r3, #1
 8010828:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801082a:	697b      	ldr	r3, [r7, #20]
 801082c:	2b00      	cmp	r3, #0
 801082e:	d1ea      	bne.n	8010806 <create_name+0x16a>
 8010830:	e000      	b.n	8010834 <create_name+0x198>
		if (w != ' ' && w != '.') break;
 8010832:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8010834:	697b      	ldr	r3, [r7, #20]
 8010836:	005b      	lsls	r3, r3, #1
 8010838:	68fa      	ldr	r2, [r7, #12]
 801083a:	4413      	add	r3, r2
 801083c:	2200      	movs	r2, #0
 801083e:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8010840:	697b      	ldr	r3, [r7, #20]
 8010842:	2b00      	cmp	r3, #0
 8010844:	d101      	bne.n	801084a <create_name+0x1ae>
 8010846:	2306      	movs	r3, #6
 8010848:	e129      	b.n	8010a9e <create_name+0x402>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	3324      	adds	r3, #36	@ 0x24
 801084e:	220b      	movs	r2, #11
 8010850:	2120      	movs	r1, #32
 8010852:	4618      	mov	r0, r3
 8010854:	f7fe fc11 	bl	800f07a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8010858:	2300      	movs	r3, #0
 801085a:	61bb      	str	r3, [r7, #24]
 801085c:	e002      	b.n	8010864 <create_name+0x1c8>
 801085e:	69bb      	ldr	r3, [r7, #24]
 8010860:	3301      	adds	r3, #1
 8010862:	61bb      	str	r3, [r7, #24]
 8010864:	69bb      	ldr	r3, [r7, #24]
 8010866:	005b      	lsls	r3, r3, #1
 8010868:	68fa      	ldr	r2, [r7, #12]
 801086a:	4413      	add	r3, r2
 801086c:	881b      	ldrh	r3, [r3, #0]
 801086e:	2b20      	cmp	r3, #32
 8010870:	d0f5      	beq.n	801085e <create_name+0x1c2>
 8010872:	69bb      	ldr	r3, [r7, #24]
 8010874:	005b      	lsls	r3, r3, #1
 8010876:	68fa      	ldr	r2, [r7, #12]
 8010878:	4413      	add	r3, r2
 801087a:	881b      	ldrh	r3, [r3, #0]
 801087c:	2b2e      	cmp	r3, #46	@ 0x2e
 801087e:	d0ee      	beq.n	801085e <create_name+0x1c2>
	if (si) cf |= NS_LOSS | NS_LFN;
 8010880:	69bb      	ldr	r3, [r7, #24]
 8010882:	2b00      	cmp	r3, #0
 8010884:	d009      	beq.n	801089a <create_name+0x1fe>
 8010886:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801088a:	f043 0303 	orr.w	r3, r3, #3
 801088e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8010892:	e002      	b.n	801089a <create_name+0x1fe>
 8010894:	697b      	ldr	r3, [r7, #20]
 8010896:	3b01      	subs	r3, #1
 8010898:	617b      	str	r3, [r7, #20]
 801089a:	697b      	ldr	r3, [r7, #20]
 801089c:	2b00      	cmp	r3, #0
 801089e:	d009      	beq.n	80108b4 <create_name+0x218>
 80108a0:	697a      	ldr	r2, [r7, #20]
 80108a2:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80108a6:	4413      	add	r3, r2
 80108a8:	005b      	lsls	r3, r3, #1
 80108aa:	68fa      	ldr	r2, [r7, #12]
 80108ac:	4413      	add	r3, r2
 80108ae:	881b      	ldrh	r3, [r3, #0]
 80108b0:	2b2e      	cmp	r3, #46	@ 0x2e
 80108b2:	d1ef      	bne.n	8010894 <create_name+0x1f8>

	i = b = 0; ni = 8;
 80108b4:	2300      	movs	r3, #0
 80108b6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80108ba:	2300      	movs	r3, #0
 80108bc:	623b      	str	r3, [r7, #32]
 80108be:	2308      	movs	r3, #8
 80108c0:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80108c2:	69bb      	ldr	r3, [r7, #24]
 80108c4:	1c5a      	adds	r2, r3, #1
 80108c6:	61ba      	str	r2, [r7, #24]
 80108c8:	005b      	lsls	r3, r3, #1
 80108ca:	68fa      	ldr	r2, [r7, #12]
 80108cc:	4413      	add	r3, r2
 80108ce:	881b      	ldrh	r3, [r3, #0]
 80108d0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 80108d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	f000 8098 	beq.w	8010a0a <create_name+0x36e>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80108da:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80108dc:	2b20      	cmp	r3, #32
 80108de:	d006      	beq.n	80108ee <create_name+0x252>
 80108e0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80108e2:	2b2e      	cmp	r3, #46	@ 0x2e
 80108e4:	d10a      	bne.n	80108fc <create_name+0x260>
 80108e6:	69ba      	ldr	r2, [r7, #24]
 80108e8:	697b      	ldr	r3, [r7, #20]
 80108ea:	429a      	cmp	r2, r3
 80108ec:	d006      	beq.n	80108fc <create_name+0x260>
			cf |= NS_LOSS | NS_LFN; continue;
 80108ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80108f2:	f043 0303 	orr.w	r3, r3, #3
 80108f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80108fa:	e085      	b.n	8010a08 <create_name+0x36c>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80108fc:	6a3a      	ldr	r2, [r7, #32]
 80108fe:	69fb      	ldr	r3, [r7, #28]
 8010900:	429a      	cmp	r2, r3
 8010902:	d203      	bcs.n	801090c <create_name+0x270>
 8010904:	69ba      	ldr	r2, [r7, #24]
 8010906:	697b      	ldr	r3, [r7, #20]
 8010908:	429a      	cmp	r2, r3
 801090a:	d123      	bne.n	8010954 <create_name+0x2b8>
			if (ni == 11) {				/* Long extension */
 801090c:	69fb      	ldr	r3, [r7, #28]
 801090e:	2b0b      	cmp	r3, #11
 8010910:	d106      	bne.n	8010920 <create_name+0x284>
				cf |= NS_LOSS | NS_LFN; break;
 8010912:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010916:	f043 0303 	orr.w	r3, r3, #3
 801091a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801091e:	e077      	b.n	8010a10 <create_name+0x374>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8010920:	69ba      	ldr	r2, [r7, #24]
 8010922:	697b      	ldr	r3, [r7, #20]
 8010924:	429a      	cmp	r2, r3
 8010926:	d005      	beq.n	8010934 <create_name+0x298>
 8010928:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801092c:	f043 0303 	orr.w	r3, r3, #3
 8010930:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8010934:	69ba      	ldr	r2, [r7, #24]
 8010936:	697b      	ldr	r3, [r7, #20]
 8010938:	429a      	cmp	r2, r3
 801093a:	d868      	bhi.n	8010a0e <create_name+0x372>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 801093c:	697b      	ldr	r3, [r7, #20]
 801093e:	61bb      	str	r3, [r7, #24]
 8010940:	2308      	movs	r3, #8
 8010942:	623b      	str	r3, [r7, #32]
 8010944:	230b      	movs	r3, #11
 8010946:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8010948:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801094c:	009b      	lsls	r3, r3, #2
 801094e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8010952:	e059      	b.n	8010a08 <create_name+0x36c>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8010954:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010956:	2b7f      	cmp	r3, #127	@ 0x7f
 8010958:	d914      	bls.n	8010984 <create_name+0x2e8>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 801095a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801095c:	2100      	movs	r1, #0
 801095e:	4618      	mov	r0, r3
 8010960:	f001 fdf0 	bl	8012544 <ff_convert>
 8010964:	4603      	mov	r3, r0
 8010966:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8010968:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801096a:	2b00      	cmp	r3, #0
 801096c:	d004      	beq.n	8010978 <create_name+0x2dc>
 801096e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010970:	3b80      	subs	r3, #128	@ 0x80
 8010972:	4a10      	ldr	r2, [pc, #64]	@ (80109b4 <create_name+0x318>)
 8010974:	5cd3      	ldrb	r3, [r2, r3]
 8010976:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8010978:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801097c:	f043 0302 	orr.w	r3, r3, #2
 8010980:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8010984:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010986:	2b00      	cmp	r3, #0
 8010988:	d007      	beq.n	801099a <create_name+0x2fe>
 801098a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801098c:	4619      	mov	r1, r3
 801098e:	480a      	ldr	r0, [pc, #40]	@ (80109b8 <create_name+0x31c>)
 8010990:	f7fe fbb5 	bl	800f0fe <chk_chr>
 8010994:	4603      	mov	r3, r0
 8010996:	2b00      	cmp	r3, #0
 8010998:	d010      	beq.n	80109bc <create_name+0x320>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 801099a:	235f      	movs	r3, #95	@ 0x5f
 801099c:	84bb      	strh	r3, [r7, #36]	@ 0x24
 801099e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80109a2:	f043 0303 	orr.w	r3, r3, #3
 80109a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80109aa:	e023      	b.n	80109f4 <create_name+0x358>
 80109ac:	08012a58 	.word	0x08012a58
 80109b0:	7ffffffe 	.word	0x7ffffffe
 80109b4:	08012ae0 	.word	0x08012ae0
 80109b8:	08012a64 	.word	0x08012a64
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80109bc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80109be:	2b40      	cmp	r3, #64	@ 0x40
 80109c0:	d909      	bls.n	80109d6 <create_name+0x33a>
 80109c2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80109c4:	2b5a      	cmp	r3, #90	@ 0x5a
 80109c6:	d806      	bhi.n	80109d6 <create_name+0x33a>
					b |= 2;
 80109c8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80109cc:	f043 0302 	orr.w	r3, r3, #2
 80109d0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80109d4:	e00e      	b.n	80109f4 <create_name+0x358>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80109d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80109d8:	2b60      	cmp	r3, #96	@ 0x60
 80109da:	d90b      	bls.n	80109f4 <create_name+0x358>
 80109dc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80109de:	2b7a      	cmp	r3, #122	@ 0x7a
 80109e0:	d808      	bhi.n	80109f4 <create_name+0x358>
						b |= 1; w -= 0x20;
 80109e2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80109e6:	f043 0301 	orr.w	r3, r3, #1
 80109ea:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80109ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80109f0:	3b20      	subs	r3, #32
 80109f2:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80109f4:	6a3b      	ldr	r3, [r7, #32]
 80109f6:	1c5a      	adds	r2, r3, #1
 80109f8:	623a      	str	r2, [r7, #32]
 80109fa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80109fc:	b2d1      	uxtb	r1, r2
 80109fe:	687a      	ldr	r2, [r7, #4]
 8010a00:	4413      	add	r3, r2
 8010a02:	460a      	mov	r2, r1
 8010a04:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8010a08:	e75b      	b.n	80108c2 <create_name+0x226>
		if (!w) break;					/* Break on end of the LFN */
 8010a0a:	bf00      	nop
 8010a0c:	e000      	b.n	8010a10 <create_name+0x374>
			if (si > di) break;			/* No extension */
 8010a0e:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8010a16:	2be5      	cmp	r3, #229	@ 0xe5
 8010a18:	d103      	bne.n	8010a22 <create_name+0x386>
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	2205      	movs	r2, #5
 8010a1e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8010a22:	69fb      	ldr	r3, [r7, #28]
 8010a24:	2b08      	cmp	r3, #8
 8010a26:	d104      	bne.n	8010a32 <create_name+0x396>
 8010a28:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010a2c:	009b      	lsls	r3, r3, #2
 8010a2e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8010a32:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010a36:	f003 030c 	and.w	r3, r3, #12
 8010a3a:	2b0c      	cmp	r3, #12
 8010a3c:	d005      	beq.n	8010a4a <create_name+0x3ae>
 8010a3e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010a42:	f003 0303 	and.w	r3, r3, #3
 8010a46:	2b03      	cmp	r3, #3
 8010a48:	d105      	bne.n	8010a56 <create_name+0x3ba>
 8010a4a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010a4e:	f043 0302 	orr.w	r3, r3, #2
 8010a52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8010a56:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010a5a:	f003 0302 	and.w	r3, r3, #2
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d117      	bne.n	8010a92 <create_name+0x3f6>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8010a62:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010a66:	f003 0303 	and.w	r3, r3, #3
 8010a6a:	2b01      	cmp	r3, #1
 8010a6c:	d105      	bne.n	8010a7a <create_name+0x3de>
 8010a6e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010a72:	f043 0310 	orr.w	r3, r3, #16
 8010a76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8010a7a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010a7e:	f003 030c 	and.w	r3, r3, #12
 8010a82:	2b04      	cmp	r3, #4
 8010a84:	d105      	bne.n	8010a92 <create_name+0x3f6>
 8010a86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010a8a:	f043 0308 	orr.w	r3, r3, #8
 8010a8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8010a98:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8010a9c:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8010a9e:	4618      	mov	r0, r3
 8010aa0:	3728      	adds	r7, #40	@ 0x28
 8010aa2:	46bd      	mov	sp, r7
 8010aa4:	bd80      	pop	{r7, pc}
 8010aa6:	bf00      	nop

08010aa8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8010aa8:	b580      	push	{r7, lr}
 8010aaa:	b086      	sub	sp, #24
 8010aac:	af00      	add	r7, sp, #0
 8010aae:	6078      	str	r0, [r7, #4]
 8010ab0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8010ab6:	693b      	ldr	r3, [r7, #16]
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 8010abc:	683b      	ldr	r3, [r7, #0]
 8010abe:	781b      	ldrb	r3, [r3, #0]
 8010ac0:	2b2f      	cmp	r3, #47	@ 0x2f
 8010ac2:	d00b      	beq.n	8010adc <follow_path+0x34>
 8010ac4:	683b      	ldr	r3, [r7, #0]
 8010ac6:	781b      	ldrb	r3, [r3, #0]
 8010ac8:	2b5c      	cmp	r3, #92	@ 0x5c
 8010aca:	d007      	beq.n	8010adc <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	69da      	ldr	r2, [r3, #28]
 8010ad0:	693b      	ldr	r3, [r7, #16]
 8010ad2:	609a      	str	r2, [r3, #8]
 8010ad4:	e00d      	b.n	8010af2 <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8010ad6:	683b      	ldr	r3, [r7, #0]
 8010ad8:	3301      	adds	r3, #1
 8010ada:	603b      	str	r3, [r7, #0]
 8010adc:	683b      	ldr	r3, [r7, #0]
 8010ade:	781b      	ldrb	r3, [r3, #0]
 8010ae0:	2b2f      	cmp	r3, #47	@ 0x2f
 8010ae2:	d0f8      	beq.n	8010ad6 <follow_path+0x2e>
 8010ae4:	683b      	ldr	r3, [r7, #0]
 8010ae6:	781b      	ldrb	r3, [r3, #0]
 8010ae8:	2b5c      	cmp	r3, #92	@ 0x5c
 8010aea:	d0f4      	beq.n	8010ad6 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 8010aec:	693b      	ldr	r3, [r7, #16]
 8010aee:	2200      	movs	r2, #0
 8010af0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8010af2:	683b      	ldr	r3, [r7, #0]
 8010af4:	781b      	ldrb	r3, [r3, #0]
 8010af6:	2b1f      	cmp	r3, #31
 8010af8:	d80a      	bhi.n	8010b10 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	2280      	movs	r2, #128	@ 0x80
 8010afe:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8010b02:	2100      	movs	r1, #0
 8010b04:	6878      	ldr	r0, [r7, #4]
 8010b06:	f7ff f8a4 	bl	800fc52 <dir_sdi>
 8010b0a:	4603      	mov	r3, r0
 8010b0c:	75fb      	strb	r3, [r7, #23]
 8010b0e:	e05b      	b.n	8010bc8 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010b10:	463b      	mov	r3, r7
 8010b12:	4619      	mov	r1, r3
 8010b14:	6878      	ldr	r0, [r7, #4]
 8010b16:	f7ff fdc1 	bl	801069c <create_name>
 8010b1a:	4603      	mov	r3, r0
 8010b1c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8010b1e:	7dfb      	ldrb	r3, [r7, #23]
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d14c      	bne.n	8010bbe <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 8010b24:	6878      	ldr	r0, [r7, #4]
 8010b26:	f7ff fc00 	bl	801032a <dir_find>
 8010b2a:	4603      	mov	r3, r0
 8010b2c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8010b34:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8010b36:	7dfb      	ldrb	r3, [r7, #23]
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d01b      	beq.n	8010b74 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8010b3c:	7dfb      	ldrb	r3, [r7, #23]
 8010b3e:	2b04      	cmp	r3, #4
 8010b40:	d13f      	bne.n	8010bc2 <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 8010b42:	7afb      	ldrb	r3, [r7, #11]
 8010b44:	f003 0320 	and.w	r3, r3, #32
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d00b      	beq.n	8010b64 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8010b4c:	7afb      	ldrb	r3, [r7, #11]
 8010b4e:	f003 0304 	and.w	r3, r3, #4
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d031      	beq.n	8010bba <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	2280      	movs	r2, #128	@ 0x80
 8010b5a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
						res = FR_OK;
 8010b5e:	2300      	movs	r3, #0
 8010b60:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 8010b62:	e02e      	b.n	8010bc2 <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8010b64:	7afb      	ldrb	r3, [r7, #11]
 8010b66:	f003 0304 	and.w	r3, r3, #4
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d129      	bne.n	8010bc2 <follow_path+0x11a>
 8010b6e:	2305      	movs	r3, #5
 8010b70:	75fb      	strb	r3, [r7, #23]
				break;
 8010b72:	e026      	b.n	8010bc2 <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010b74:	7afb      	ldrb	r3, [r7, #11]
 8010b76:	f003 0304 	and.w	r3, r3, #4
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d123      	bne.n	8010bc6 <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8010b7e:	693b      	ldr	r3, [r7, #16]
 8010b80:	799b      	ldrb	r3, [r3, #6]
 8010b82:	f003 0310 	and.w	r3, r3, #16
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d102      	bne.n	8010b90 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 8010b8a:	2305      	movs	r3, #5
 8010b8c:	75fb      	strb	r3, [r7, #23]
 8010b8e:	e01b      	b.n	8010bc8 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	695b      	ldr	r3, [r3, #20]
 8010b9a:	68fa      	ldr	r2, [r7, #12]
 8010b9c:	8992      	ldrh	r2, [r2, #12]
 8010b9e:	fbb3 f0f2 	udiv	r0, r3, r2
 8010ba2:	fb00 f202 	mul.w	r2, r0, r2
 8010ba6:	1a9b      	subs	r3, r3, r2
 8010ba8:	440b      	add	r3, r1
 8010baa:	4619      	mov	r1, r3
 8010bac:	68f8      	ldr	r0, [r7, #12]
 8010bae:	f7ff f9f6 	bl	800ff9e <ld_clust>
 8010bb2:	4602      	mov	r2, r0
 8010bb4:	693b      	ldr	r3, [r7, #16]
 8010bb6:	609a      	str	r2, [r3, #8]
 8010bb8:	e7aa      	b.n	8010b10 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8010bba:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010bbc:	e7a8      	b.n	8010b10 <follow_path+0x68>
			if (res != FR_OK) break;
 8010bbe:	bf00      	nop
 8010bc0:	e002      	b.n	8010bc8 <follow_path+0x120>
				break;
 8010bc2:	bf00      	nop
 8010bc4:	e000      	b.n	8010bc8 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010bc6:	bf00      	nop
			}
		}
	}

	return res;
 8010bc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8010bca:	4618      	mov	r0, r3
 8010bcc:	3718      	adds	r7, #24
 8010bce:	46bd      	mov	sp, r7
 8010bd0:	bd80      	pop	{r7, pc}

08010bd2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8010bd2:	b480      	push	{r7}
 8010bd4:	b087      	sub	sp, #28
 8010bd6:	af00      	add	r7, sp, #0
 8010bd8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8010bda:	f04f 33ff 	mov.w	r3, #4294967295
 8010bde:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d031      	beq.n	8010c4c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	617b      	str	r3, [r7, #20]
 8010bee:	e002      	b.n	8010bf6 <get_ldnumber+0x24>
 8010bf0:	697b      	ldr	r3, [r7, #20]
 8010bf2:	3301      	adds	r3, #1
 8010bf4:	617b      	str	r3, [r7, #20]
 8010bf6:	697b      	ldr	r3, [r7, #20]
 8010bf8:	781b      	ldrb	r3, [r3, #0]
 8010bfa:	2b1f      	cmp	r3, #31
 8010bfc:	d903      	bls.n	8010c06 <get_ldnumber+0x34>
 8010bfe:	697b      	ldr	r3, [r7, #20]
 8010c00:	781b      	ldrb	r3, [r3, #0]
 8010c02:	2b3a      	cmp	r3, #58	@ 0x3a
 8010c04:	d1f4      	bne.n	8010bf0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8010c06:	697b      	ldr	r3, [r7, #20]
 8010c08:	781b      	ldrb	r3, [r3, #0]
 8010c0a:	2b3a      	cmp	r3, #58	@ 0x3a
 8010c0c:	d11c      	bne.n	8010c48 <get_ldnumber+0x76>
			tp = *path;
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	1c5a      	adds	r2, r3, #1
 8010c18:	60fa      	str	r2, [r7, #12]
 8010c1a:	781b      	ldrb	r3, [r3, #0]
 8010c1c:	3b30      	subs	r3, #48	@ 0x30
 8010c1e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8010c20:	68bb      	ldr	r3, [r7, #8]
 8010c22:	2b09      	cmp	r3, #9
 8010c24:	d80e      	bhi.n	8010c44 <get_ldnumber+0x72>
 8010c26:	68fa      	ldr	r2, [r7, #12]
 8010c28:	697b      	ldr	r3, [r7, #20]
 8010c2a:	429a      	cmp	r2, r3
 8010c2c:	d10a      	bne.n	8010c44 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8010c2e:	68bb      	ldr	r3, [r7, #8]
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d107      	bne.n	8010c44 <get_ldnumber+0x72>
					vol = (int)i;
 8010c34:	68bb      	ldr	r3, [r7, #8]
 8010c36:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8010c38:	697b      	ldr	r3, [r7, #20]
 8010c3a:	3301      	adds	r3, #1
 8010c3c:	617b      	str	r3, [r7, #20]
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	697a      	ldr	r2, [r7, #20]
 8010c42:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8010c44:	693b      	ldr	r3, [r7, #16]
 8010c46:	e002      	b.n	8010c4e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8010c48:	2300      	movs	r3, #0
 8010c4a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8010c4c:	693b      	ldr	r3, [r7, #16]
}
 8010c4e:	4618      	mov	r0, r3
 8010c50:	371c      	adds	r7, #28
 8010c52:	46bd      	mov	sp, r7
 8010c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c58:	4770      	bx	lr
	...

08010c5c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8010c5c:	b580      	push	{r7, lr}
 8010c5e:	b082      	sub	sp, #8
 8010c60:	af00      	add	r7, sp, #0
 8010c62:	6078      	str	r0, [r7, #4]
 8010c64:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	2200      	movs	r2, #0
 8010c6a:	70da      	strb	r2, [r3, #3]
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	f04f 32ff 	mov.w	r2, #4294967295
 8010c72:	639a      	str	r2, [r3, #56]	@ 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8010c74:	6839      	ldr	r1, [r7, #0]
 8010c76:	6878      	ldr	r0, [r7, #4]
 8010c78:	f7fe fc0c 	bl	800f494 <move_window>
 8010c7c:	4603      	mov	r3, r0
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d001      	beq.n	8010c86 <check_fs+0x2a>
 8010c82:	2304      	movs	r3, #4
 8010c84:	e038      	b.n	8010cf8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	333c      	adds	r3, #60	@ 0x3c
 8010c8a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8010c8e:	4618      	mov	r0, r3
 8010c90:	f7fe f950 	bl	800ef34 <ld_word>
 8010c94:	4603      	mov	r3, r0
 8010c96:	461a      	mov	r2, r3
 8010c98:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8010c9c:	429a      	cmp	r2, r3
 8010c9e:	d001      	beq.n	8010ca4 <check_fs+0x48>
 8010ca0:	2303      	movs	r3, #3
 8010ca2:	e029      	b.n	8010cf8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010caa:	2be9      	cmp	r3, #233	@ 0xe9
 8010cac:	d009      	beq.n	8010cc2 <check_fs+0x66>
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010cb4:	2beb      	cmp	r3, #235	@ 0xeb
 8010cb6:	d11e      	bne.n	8010cf6 <check_fs+0x9a>
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8010cbe:	2b90      	cmp	r3, #144	@ 0x90
 8010cc0:	d119      	bne.n	8010cf6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	333c      	adds	r3, #60	@ 0x3c
 8010cc6:	3336      	adds	r3, #54	@ 0x36
 8010cc8:	4618      	mov	r0, r3
 8010cca:	f7fe f94b 	bl	800ef64 <ld_dword>
 8010cce:	4603      	mov	r3, r0
 8010cd0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8010cd4:	4a0a      	ldr	r2, [pc, #40]	@ (8010d00 <check_fs+0xa4>)
 8010cd6:	4293      	cmp	r3, r2
 8010cd8:	d101      	bne.n	8010cde <check_fs+0x82>
 8010cda:	2300      	movs	r3, #0
 8010cdc:	e00c      	b.n	8010cf8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	333c      	adds	r3, #60	@ 0x3c
 8010ce2:	3352      	adds	r3, #82	@ 0x52
 8010ce4:	4618      	mov	r0, r3
 8010ce6:	f7fe f93d 	bl	800ef64 <ld_dword>
 8010cea:	4603      	mov	r3, r0
 8010cec:	4a05      	ldr	r2, [pc, #20]	@ (8010d04 <check_fs+0xa8>)
 8010cee:	4293      	cmp	r3, r2
 8010cf0:	d101      	bne.n	8010cf6 <check_fs+0x9a>
 8010cf2:	2300      	movs	r3, #0
 8010cf4:	e000      	b.n	8010cf8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8010cf6:	2302      	movs	r3, #2
}
 8010cf8:	4618      	mov	r0, r3
 8010cfa:	3708      	adds	r7, #8
 8010cfc:	46bd      	mov	sp, r7
 8010cfe:	bd80      	pop	{r7, pc}
 8010d00:	00544146 	.word	0x00544146
 8010d04:	33544146 	.word	0x33544146

08010d08 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8010d08:	b580      	push	{r7, lr}
 8010d0a:	b096      	sub	sp, #88	@ 0x58
 8010d0c:	af00      	add	r7, sp, #0
 8010d0e:	60f8      	str	r0, [r7, #12]
 8010d10:	60b9      	str	r1, [r7, #8]
 8010d12:	4613      	mov	r3, r2
 8010d14:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8010d16:	68bb      	ldr	r3, [r7, #8]
 8010d18:	2200      	movs	r2, #0
 8010d1a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8010d1c:	68f8      	ldr	r0, [r7, #12]
 8010d1e:	f7ff ff58 	bl	8010bd2 <get_ldnumber>
 8010d22:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8010d24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	da01      	bge.n	8010d2e <find_volume+0x26>
 8010d2a:	230b      	movs	r3, #11
 8010d2c:	e268      	b.n	8011200 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8010d2e:	4a9f      	ldr	r2, [pc, #636]	@ (8010fac <find_volume+0x2a4>)
 8010d30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010d36:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8010d38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d101      	bne.n	8010d42 <find_volume+0x3a>
 8010d3e:	230c      	movs	r3, #12
 8010d40:	e25e      	b.n	8011200 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8010d42:	68bb      	ldr	r3, [r7, #8]
 8010d44:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010d46:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8010d48:	79fb      	ldrb	r3, [r7, #7]
 8010d4a:	f023 0301 	bic.w	r3, r3, #1
 8010d4e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8010d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d52:	781b      	ldrb	r3, [r3, #0]
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d01a      	beq.n	8010d8e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8010d58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d5a:	785b      	ldrb	r3, [r3, #1]
 8010d5c:	4618      	mov	r0, r3
 8010d5e:	f7fe f849 	bl	800edf4 <disk_status>
 8010d62:	4603      	mov	r3, r0
 8010d64:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8010d68:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010d6c:	f003 0301 	and.w	r3, r3, #1
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d10c      	bne.n	8010d8e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8010d74:	79fb      	ldrb	r3, [r7, #7]
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d007      	beq.n	8010d8a <find_volume+0x82>
 8010d7a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010d7e:	f003 0304 	and.w	r3, r3, #4
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d001      	beq.n	8010d8a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8010d86:	230a      	movs	r3, #10
 8010d88:	e23a      	b.n	8011200 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8010d8a:	2300      	movs	r3, #0
 8010d8c:	e238      	b.n	8011200 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8010d8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d90:	2200      	movs	r2, #0
 8010d92:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8010d94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010d96:	b2da      	uxtb	r2, r3
 8010d98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d9a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8010d9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d9e:	785b      	ldrb	r3, [r3, #1]
 8010da0:	4618      	mov	r0, r3
 8010da2:	f7fe f841 	bl	800ee28 <disk_initialize>
 8010da6:	4603      	mov	r3, r0
 8010da8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8010dac:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010db0:	f003 0301 	and.w	r3, r3, #1
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d001      	beq.n	8010dbc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8010db8:	2303      	movs	r3, #3
 8010dba:	e221      	b.n	8011200 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8010dbc:	79fb      	ldrb	r3, [r7, #7]
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d007      	beq.n	8010dd2 <find_volume+0xca>
 8010dc2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010dc6:	f003 0304 	and.w	r3, r3, #4
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d001      	beq.n	8010dd2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8010dce:	230a      	movs	r3, #10
 8010dd0:	e216      	b.n	8011200 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8010dd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010dd4:	7858      	ldrb	r0, [r3, #1]
 8010dd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010dd8:	330c      	adds	r3, #12
 8010dda:	461a      	mov	r2, r3
 8010ddc:	2102      	movs	r1, #2
 8010dde:	f7fe f88b 	bl	800eef8 <disk_ioctl>
 8010de2:	4603      	mov	r3, r0
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d001      	beq.n	8010dec <find_volume+0xe4>
 8010de8:	2301      	movs	r3, #1
 8010dea:	e209      	b.n	8011200 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8010dec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010dee:	899b      	ldrh	r3, [r3, #12]
 8010df0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010df4:	d80d      	bhi.n	8010e12 <find_volume+0x10a>
 8010df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010df8:	899b      	ldrh	r3, [r3, #12]
 8010dfa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010dfe:	d308      	bcc.n	8010e12 <find_volume+0x10a>
 8010e00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e02:	899b      	ldrh	r3, [r3, #12]
 8010e04:	461a      	mov	r2, r3
 8010e06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e08:	899b      	ldrh	r3, [r3, #12]
 8010e0a:	3b01      	subs	r3, #1
 8010e0c:	4013      	ands	r3, r2
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d001      	beq.n	8010e16 <find_volume+0x10e>
 8010e12:	2301      	movs	r3, #1
 8010e14:	e1f4      	b.n	8011200 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8010e16:	2300      	movs	r3, #0
 8010e18:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8010e1a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010e1c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010e1e:	f7ff ff1d 	bl	8010c5c <check_fs>
 8010e22:	4603      	mov	r3, r0
 8010e24:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8010e28:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010e2c:	2b02      	cmp	r3, #2
 8010e2e:	d149      	bne.n	8010ec4 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010e30:	2300      	movs	r3, #0
 8010e32:	643b      	str	r3, [r7, #64]	@ 0x40
 8010e34:	e01e      	b.n	8010e74 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8010e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e38:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8010e3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010e3e:	011b      	lsls	r3, r3, #4
 8010e40:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8010e44:	4413      	add	r3, r2
 8010e46:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8010e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e4a:	3304      	adds	r3, #4
 8010e4c:	781b      	ldrb	r3, [r3, #0]
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d006      	beq.n	8010e60 <find_volume+0x158>
 8010e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e54:	3308      	adds	r3, #8
 8010e56:	4618      	mov	r0, r3
 8010e58:	f7fe f884 	bl	800ef64 <ld_dword>
 8010e5c:	4602      	mov	r2, r0
 8010e5e:	e000      	b.n	8010e62 <find_volume+0x15a>
 8010e60:	2200      	movs	r2, #0
 8010e62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010e64:	009b      	lsls	r3, r3, #2
 8010e66:	3358      	adds	r3, #88	@ 0x58
 8010e68:	443b      	add	r3, r7
 8010e6a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010e6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010e70:	3301      	adds	r3, #1
 8010e72:	643b      	str	r3, [r7, #64]	@ 0x40
 8010e74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010e76:	2b03      	cmp	r3, #3
 8010e78:	d9dd      	bls.n	8010e36 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8010e7a:	2300      	movs	r3, #0
 8010e7c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8010e7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d002      	beq.n	8010e8a <find_volume+0x182>
 8010e84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010e86:	3b01      	subs	r3, #1
 8010e88:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8010e8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010e8c:	009b      	lsls	r3, r3, #2
 8010e8e:	3358      	adds	r3, #88	@ 0x58
 8010e90:	443b      	add	r3, r7
 8010e92:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8010e96:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8010e98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d005      	beq.n	8010eaa <find_volume+0x1a2>
 8010e9e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010ea0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010ea2:	f7ff fedb 	bl	8010c5c <check_fs>
 8010ea6:	4603      	mov	r3, r0
 8010ea8:	e000      	b.n	8010eac <find_volume+0x1a4>
 8010eaa:	2303      	movs	r3, #3
 8010eac:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8010eb0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010eb4:	2b01      	cmp	r3, #1
 8010eb6:	d905      	bls.n	8010ec4 <find_volume+0x1bc>
 8010eb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010eba:	3301      	adds	r3, #1
 8010ebc:	643b      	str	r3, [r7, #64]	@ 0x40
 8010ebe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010ec0:	2b03      	cmp	r3, #3
 8010ec2:	d9e2      	bls.n	8010e8a <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8010ec4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010ec8:	2b04      	cmp	r3, #4
 8010eca:	d101      	bne.n	8010ed0 <find_volume+0x1c8>
 8010ecc:	2301      	movs	r3, #1
 8010ece:	e197      	b.n	8011200 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8010ed0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010ed4:	2b01      	cmp	r3, #1
 8010ed6:	d901      	bls.n	8010edc <find_volume+0x1d4>
 8010ed8:	230d      	movs	r3, #13
 8010eda:	e191      	b.n	8011200 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8010edc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ede:	333c      	adds	r3, #60	@ 0x3c
 8010ee0:	330b      	adds	r3, #11
 8010ee2:	4618      	mov	r0, r3
 8010ee4:	f7fe f826 	bl	800ef34 <ld_word>
 8010ee8:	4603      	mov	r3, r0
 8010eea:	461a      	mov	r2, r3
 8010eec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010eee:	899b      	ldrh	r3, [r3, #12]
 8010ef0:	429a      	cmp	r2, r3
 8010ef2:	d001      	beq.n	8010ef8 <find_volume+0x1f0>
 8010ef4:	230d      	movs	r3, #13
 8010ef6:	e183      	b.n	8011200 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8010ef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010efa:	333c      	adds	r3, #60	@ 0x3c
 8010efc:	3316      	adds	r3, #22
 8010efe:	4618      	mov	r0, r3
 8010f00:	f7fe f818 	bl	800ef34 <ld_word>
 8010f04:	4603      	mov	r3, r0
 8010f06:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8010f08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d106      	bne.n	8010f1c <find_volume+0x214>
 8010f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f10:	333c      	adds	r3, #60	@ 0x3c
 8010f12:	3324      	adds	r3, #36	@ 0x24
 8010f14:	4618      	mov	r0, r3
 8010f16:	f7fe f825 	bl	800ef64 <ld_dword>
 8010f1a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8010f1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f1e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010f20:	625a      	str	r2, [r3, #36]	@ 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8010f22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f24:	f893 204c 	ldrb.w	r2, [r3, #76]	@ 0x4c
 8010f28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f2a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8010f2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f2e:	789b      	ldrb	r3, [r3, #2]
 8010f30:	2b01      	cmp	r3, #1
 8010f32:	d005      	beq.n	8010f40 <find_volume+0x238>
 8010f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f36:	789b      	ldrb	r3, [r3, #2]
 8010f38:	2b02      	cmp	r3, #2
 8010f3a:	d001      	beq.n	8010f40 <find_volume+0x238>
 8010f3c:	230d      	movs	r3, #13
 8010f3e:	e15f      	b.n	8011200 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8010f40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f42:	789b      	ldrb	r3, [r3, #2]
 8010f44:	461a      	mov	r2, r3
 8010f46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010f48:	fb02 f303 	mul.w	r3, r2, r3
 8010f4c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8010f4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f50:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8010f54:	461a      	mov	r2, r3
 8010f56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f58:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8010f5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f5c:	895b      	ldrh	r3, [r3, #10]
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d008      	beq.n	8010f74 <find_volume+0x26c>
 8010f62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f64:	895b      	ldrh	r3, [r3, #10]
 8010f66:	461a      	mov	r2, r3
 8010f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f6a:	895b      	ldrh	r3, [r3, #10]
 8010f6c:	3b01      	subs	r3, #1
 8010f6e:	4013      	ands	r3, r2
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d001      	beq.n	8010f78 <find_volume+0x270>
 8010f74:	230d      	movs	r3, #13
 8010f76:	e143      	b.n	8011200 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8010f78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f7a:	333c      	adds	r3, #60	@ 0x3c
 8010f7c:	3311      	adds	r3, #17
 8010f7e:	4618      	mov	r0, r3
 8010f80:	f7fd ffd8 	bl	800ef34 <ld_word>
 8010f84:	4603      	mov	r3, r0
 8010f86:	461a      	mov	r2, r3
 8010f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f8a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8010f8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f8e:	891b      	ldrh	r3, [r3, #8]
 8010f90:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010f92:	8992      	ldrh	r2, [r2, #12]
 8010f94:	0952      	lsrs	r2, r2, #5
 8010f96:	b292      	uxth	r2, r2
 8010f98:	fbb3 f1f2 	udiv	r1, r3, r2
 8010f9c:	fb01 f202 	mul.w	r2, r1, r2
 8010fa0:	1a9b      	subs	r3, r3, r2
 8010fa2:	b29b      	uxth	r3, r3
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d003      	beq.n	8010fb0 <find_volume+0x2a8>
 8010fa8:	230d      	movs	r3, #13
 8010faa:	e129      	b.n	8011200 <find_volume+0x4f8>
 8010fac:	24002858 	.word	0x24002858

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8010fb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fb2:	333c      	adds	r3, #60	@ 0x3c
 8010fb4:	3313      	adds	r3, #19
 8010fb6:	4618      	mov	r0, r3
 8010fb8:	f7fd ffbc 	bl	800ef34 <ld_word>
 8010fbc:	4603      	mov	r3, r0
 8010fbe:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8010fc0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d106      	bne.n	8010fd4 <find_volume+0x2cc>
 8010fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fc8:	333c      	adds	r3, #60	@ 0x3c
 8010fca:	3320      	adds	r3, #32
 8010fcc:	4618      	mov	r0, r3
 8010fce:	f7fd ffc9 	bl	800ef64 <ld_dword>
 8010fd2:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8010fd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fd6:	333c      	adds	r3, #60	@ 0x3c
 8010fd8:	330e      	adds	r3, #14
 8010fda:	4618      	mov	r0, r3
 8010fdc:	f7fd ffaa 	bl	800ef34 <ld_word>
 8010fe0:	4603      	mov	r3, r0
 8010fe2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8010fe4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d101      	bne.n	8010fee <find_volume+0x2e6>
 8010fea:	230d      	movs	r3, #13
 8010fec:	e108      	b.n	8011200 <find_volume+0x4f8>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8010fee:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8010ff0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010ff2:	4413      	add	r3, r2
 8010ff4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010ff6:	8911      	ldrh	r1, [r2, #8]
 8010ff8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010ffa:	8992      	ldrh	r2, [r2, #12]
 8010ffc:	0952      	lsrs	r2, r2, #5
 8010ffe:	b292      	uxth	r2, r2
 8011000:	fbb1 f2f2 	udiv	r2, r1, r2
 8011004:	b292      	uxth	r2, r2
 8011006:	4413      	add	r3, r2
 8011008:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801100a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801100c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801100e:	429a      	cmp	r2, r3
 8011010:	d201      	bcs.n	8011016 <find_volume+0x30e>
 8011012:	230d      	movs	r3, #13
 8011014:	e0f4      	b.n	8011200 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8011016:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801101a:	1ad3      	subs	r3, r2, r3
 801101c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801101e:	8952      	ldrh	r2, [r2, #10]
 8011020:	fbb3 f3f2 	udiv	r3, r3, r2
 8011024:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8011026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011028:	2b00      	cmp	r3, #0
 801102a:	d101      	bne.n	8011030 <find_volume+0x328>
 801102c:	230d      	movs	r3, #13
 801102e:	e0e7      	b.n	8011200 <find_volume+0x4f8>
		fmt = FS_FAT32;
 8011030:	2303      	movs	r3, #3
 8011032:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8011036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011038:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 801103c:	4293      	cmp	r3, r2
 801103e:	d802      	bhi.n	8011046 <find_volume+0x33e>
 8011040:	2302      	movs	r3, #2
 8011042:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8011046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011048:	f640 72f5 	movw	r2, #4085	@ 0xff5
 801104c:	4293      	cmp	r3, r2
 801104e:	d802      	bhi.n	8011056 <find_volume+0x34e>
 8011050:	2301      	movs	r3, #1
 8011052:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8011056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011058:	1c9a      	adds	r2, r3, #2
 801105a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801105c:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 801105e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011060:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011062:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8011064:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8011066:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011068:	441a      	add	r2, r3
 801106a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801106c:	62da      	str	r2, [r3, #44]	@ 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 801106e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011072:	441a      	add	r2, r3
 8011074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011076:	635a      	str	r2, [r3, #52]	@ 0x34
		if (fmt == FS_FAT32) {
 8011078:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801107c:	2b03      	cmp	r3, #3
 801107e:	d11e      	bne.n	80110be <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8011080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011082:	333c      	adds	r3, #60	@ 0x3c
 8011084:	332a      	adds	r3, #42	@ 0x2a
 8011086:	4618      	mov	r0, r3
 8011088:	f7fd ff54 	bl	800ef34 <ld_word>
 801108c:	4603      	mov	r3, r0
 801108e:	2b00      	cmp	r3, #0
 8011090:	d001      	beq.n	8011096 <find_volume+0x38e>
 8011092:	230d      	movs	r3, #13
 8011094:	e0b4      	b.n	8011200 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8011096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011098:	891b      	ldrh	r3, [r3, #8]
 801109a:	2b00      	cmp	r3, #0
 801109c:	d001      	beq.n	80110a2 <find_volume+0x39a>
 801109e:	230d      	movs	r3, #13
 80110a0:	e0ae      	b.n	8011200 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80110a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110a4:	333c      	adds	r3, #60	@ 0x3c
 80110a6:	332c      	adds	r3, #44	@ 0x2c
 80110a8:	4618      	mov	r0, r3
 80110aa:	f7fd ff5b 	bl	800ef64 <ld_dword>
 80110ae:	4602      	mov	r2, r0
 80110b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110b2:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80110b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110b6:	6a1b      	ldr	r3, [r3, #32]
 80110b8:	009b      	lsls	r3, r3, #2
 80110ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80110bc:	e01f      	b.n	80110fe <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80110be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110c0:	891b      	ldrh	r3, [r3, #8]
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d101      	bne.n	80110ca <find_volume+0x3c2>
 80110c6:	230d      	movs	r3, #13
 80110c8:	e09a      	b.n	8011200 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80110ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80110ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80110d0:	441a      	add	r2, r3
 80110d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110d4:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80110d6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80110da:	2b02      	cmp	r3, #2
 80110dc:	d103      	bne.n	80110e6 <find_volume+0x3de>
 80110de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110e0:	6a1b      	ldr	r3, [r3, #32]
 80110e2:	005b      	lsls	r3, r3, #1
 80110e4:	e00a      	b.n	80110fc <find_volume+0x3f4>
 80110e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110e8:	6a1a      	ldr	r2, [r3, #32]
 80110ea:	4613      	mov	r3, r2
 80110ec:	005b      	lsls	r3, r3, #1
 80110ee:	4413      	add	r3, r2
 80110f0:	085a      	lsrs	r2, r3, #1
 80110f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110f4:	6a1b      	ldr	r3, [r3, #32]
 80110f6:	f003 0301 	and.w	r3, r3, #1
 80110fa:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80110fc:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80110fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011100:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011104:	899b      	ldrh	r3, [r3, #12]
 8011106:	4619      	mov	r1, r3
 8011108:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801110a:	440b      	add	r3, r1
 801110c:	3b01      	subs	r3, #1
 801110e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011110:	8989      	ldrh	r1, [r1, #12]
 8011112:	fbb3 f3f1 	udiv	r3, r3, r1
 8011116:	429a      	cmp	r2, r3
 8011118:	d201      	bcs.n	801111e <find_volume+0x416>
 801111a:	230d      	movs	r3, #13
 801111c:	e070      	b.n	8011200 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801111e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011120:	f04f 32ff 	mov.w	r2, #4294967295
 8011124:	619a      	str	r2, [r3, #24]
 8011126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011128:	699a      	ldr	r2, [r3, #24]
 801112a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801112c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 801112e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011130:	2280      	movs	r2, #128	@ 0x80
 8011132:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8011134:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011138:	2b03      	cmp	r3, #3
 801113a:	d149      	bne.n	80111d0 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801113c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801113e:	333c      	adds	r3, #60	@ 0x3c
 8011140:	3330      	adds	r3, #48	@ 0x30
 8011142:	4618      	mov	r0, r3
 8011144:	f7fd fef6 	bl	800ef34 <ld_word>
 8011148:	4603      	mov	r3, r0
 801114a:	2b01      	cmp	r3, #1
 801114c:	d140      	bne.n	80111d0 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 801114e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011150:	3301      	adds	r3, #1
 8011152:	4619      	mov	r1, r3
 8011154:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8011156:	f7fe f99d 	bl	800f494 <move_window>
 801115a:	4603      	mov	r3, r0
 801115c:	2b00      	cmp	r3, #0
 801115e:	d137      	bne.n	80111d0 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8011160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011162:	2200      	movs	r2, #0
 8011164:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8011166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011168:	333c      	adds	r3, #60	@ 0x3c
 801116a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801116e:	4618      	mov	r0, r3
 8011170:	f7fd fee0 	bl	800ef34 <ld_word>
 8011174:	4603      	mov	r3, r0
 8011176:	461a      	mov	r2, r3
 8011178:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801117c:	429a      	cmp	r2, r3
 801117e:	d127      	bne.n	80111d0 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8011180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011182:	333c      	adds	r3, #60	@ 0x3c
 8011184:	4618      	mov	r0, r3
 8011186:	f7fd feed 	bl	800ef64 <ld_dword>
 801118a:	4603      	mov	r3, r0
 801118c:	4a1e      	ldr	r2, [pc, #120]	@ (8011208 <find_volume+0x500>)
 801118e:	4293      	cmp	r3, r2
 8011190:	d11e      	bne.n	80111d0 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8011192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011194:	333c      	adds	r3, #60	@ 0x3c
 8011196:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801119a:	4618      	mov	r0, r3
 801119c:	f7fd fee2 	bl	800ef64 <ld_dword>
 80111a0:	4603      	mov	r3, r0
 80111a2:	4a1a      	ldr	r2, [pc, #104]	@ (801120c <find_volume+0x504>)
 80111a4:	4293      	cmp	r3, r2
 80111a6:	d113      	bne.n	80111d0 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80111a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111aa:	333c      	adds	r3, #60	@ 0x3c
 80111ac:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80111b0:	4618      	mov	r0, r3
 80111b2:	f7fd fed7 	bl	800ef64 <ld_dword>
 80111b6:	4602      	mov	r2, r0
 80111b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111ba:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80111bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111be:	333c      	adds	r3, #60	@ 0x3c
 80111c0:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80111c4:	4618      	mov	r0, r3
 80111c6:	f7fd fecd 	bl	800ef64 <ld_dword>
 80111ca:	4602      	mov	r2, r0
 80111cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111ce:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80111d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111d2:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80111d6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80111d8:	4b0d      	ldr	r3, [pc, #52]	@ (8011210 <find_volume+0x508>)
 80111da:	881b      	ldrh	r3, [r3, #0]
 80111dc:	3301      	adds	r3, #1
 80111de:	b29a      	uxth	r2, r3
 80111e0:	4b0b      	ldr	r3, [pc, #44]	@ (8011210 <find_volume+0x508>)
 80111e2:	801a      	strh	r2, [r3, #0]
 80111e4:	4b0a      	ldr	r3, [pc, #40]	@ (8011210 <find_volume+0x508>)
 80111e6:	881a      	ldrh	r2, [r3, #0]
 80111e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111ea:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80111ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111ee:	4a09      	ldr	r2, [pc, #36]	@ (8011214 <find_volume+0x50c>)
 80111f0:	611a      	str	r2, [r3, #16]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 80111f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111f4:	2200      	movs	r2, #0
 80111f6:	61da      	str	r2, [r3, #28]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80111f8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80111fa:	f7fe f8e3 	bl	800f3c4 <clear_lock>
#endif
	return FR_OK;
 80111fe:	2300      	movs	r3, #0
}
 8011200:	4618      	mov	r0, r3
 8011202:	3758      	adds	r7, #88	@ 0x58
 8011204:	46bd      	mov	sp, r7
 8011206:	bd80      	pop	{r7, pc}
 8011208:	41615252 	.word	0x41615252
 801120c:	61417272 	.word	0x61417272
 8011210:	2400285c 	.word	0x2400285c
 8011214:	24002880 	.word	0x24002880

08011218 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8011218:	b580      	push	{r7, lr}
 801121a:	b084      	sub	sp, #16
 801121c:	af00      	add	r7, sp, #0
 801121e:	6078      	str	r0, [r7, #4]
 8011220:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8011222:	2309      	movs	r3, #9
 8011224:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	2b00      	cmp	r3, #0
 801122a:	d01c      	beq.n	8011266 <validate+0x4e>
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	2b00      	cmp	r3, #0
 8011232:	d018      	beq.n	8011266 <validate+0x4e>
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	781b      	ldrb	r3, [r3, #0]
 801123a:	2b00      	cmp	r3, #0
 801123c:	d013      	beq.n	8011266 <validate+0x4e>
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	889a      	ldrh	r2, [r3, #4]
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	88db      	ldrh	r3, [r3, #6]
 8011248:	429a      	cmp	r2, r3
 801124a:	d10c      	bne.n	8011266 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	681b      	ldr	r3, [r3, #0]
 8011250:	785b      	ldrb	r3, [r3, #1]
 8011252:	4618      	mov	r0, r3
 8011254:	f7fd fdce 	bl	800edf4 <disk_status>
 8011258:	4603      	mov	r3, r0
 801125a:	f003 0301 	and.w	r3, r3, #1
 801125e:	2b00      	cmp	r3, #0
 8011260:	d101      	bne.n	8011266 <validate+0x4e>
			res = FR_OK;
 8011262:	2300      	movs	r3, #0
 8011264:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8011266:	7bfb      	ldrb	r3, [r7, #15]
 8011268:	2b00      	cmp	r3, #0
 801126a:	d102      	bne.n	8011272 <validate+0x5a>
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	e000      	b.n	8011274 <validate+0x5c>
 8011272:	2300      	movs	r3, #0
 8011274:	683a      	ldr	r2, [r7, #0]
 8011276:	6013      	str	r3, [r2, #0]
	return res;
 8011278:	7bfb      	ldrb	r3, [r7, #15]
}
 801127a:	4618      	mov	r0, r3
 801127c:	3710      	adds	r7, #16
 801127e:	46bd      	mov	sp, r7
 8011280:	bd80      	pop	{r7, pc}
	...

08011284 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8011284:	b580      	push	{r7, lr}
 8011286:	b088      	sub	sp, #32
 8011288:	af00      	add	r7, sp, #0
 801128a:	60f8      	str	r0, [r7, #12]
 801128c:	60b9      	str	r1, [r7, #8]
 801128e:	4613      	mov	r3, r2
 8011290:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8011292:	68bb      	ldr	r3, [r7, #8]
 8011294:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8011296:	f107 0310 	add.w	r3, r7, #16
 801129a:	4618      	mov	r0, r3
 801129c:	f7ff fc99 	bl	8010bd2 <get_ldnumber>
 80112a0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80112a2:	69fb      	ldr	r3, [r7, #28]
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	da01      	bge.n	80112ac <f_mount+0x28>
 80112a8:	230b      	movs	r3, #11
 80112aa:	e02b      	b.n	8011304 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80112ac:	4a17      	ldr	r2, [pc, #92]	@ (801130c <f_mount+0x88>)
 80112ae:	69fb      	ldr	r3, [r7, #28]
 80112b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80112b4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80112b6:	69bb      	ldr	r3, [r7, #24]
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d005      	beq.n	80112c8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80112bc:	69b8      	ldr	r0, [r7, #24]
 80112be:	f7fe f881 	bl	800f3c4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80112c2:	69bb      	ldr	r3, [r7, #24]
 80112c4:	2200      	movs	r2, #0
 80112c6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d002      	beq.n	80112d4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	2200      	movs	r2, #0
 80112d2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80112d4:	68fa      	ldr	r2, [r7, #12]
 80112d6:	490d      	ldr	r1, [pc, #52]	@ (801130c <f_mount+0x88>)
 80112d8:	69fb      	ldr	r3, [r7, #28]
 80112da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d002      	beq.n	80112ea <f_mount+0x66>
 80112e4:	79fb      	ldrb	r3, [r7, #7]
 80112e6:	2b01      	cmp	r3, #1
 80112e8:	d001      	beq.n	80112ee <f_mount+0x6a>
 80112ea:	2300      	movs	r3, #0
 80112ec:	e00a      	b.n	8011304 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80112ee:	f107 010c 	add.w	r1, r7, #12
 80112f2:	f107 0308 	add.w	r3, r7, #8
 80112f6:	2200      	movs	r2, #0
 80112f8:	4618      	mov	r0, r3
 80112fa:	f7ff fd05 	bl	8010d08 <find_volume>
 80112fe:	4603      	mov	r3, r0
 8011300:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8011302:	7dfb      	ldrb	r3, [r7, #23]
}
 8011304:	4618      	mov	r0, r3
 8011306:	3720      	adds	r7, #32
 8011308:	46bd      	mov	sp, r7
 801130a:	bd80      	pop	{r7, pc}
 801130c:	24002858 	.word	0x24002858

08011310 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8011310:	b580      	push	{r7, lr}
 8011312:	b09a      	sub	sp, #104	@ 0x68
 8011314:	af00      	add	r7, sp, #0
 8011316:	60f8      	str	r0, [r7, #12]
 8011318:	60b9      	str	r1, [r7, #8]
 801131a:	4613      	mov	r3, r2
 801131c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801131e:	68fb      	ldr	r3, [r7, #12]
 8011320:	2b00      	cmp	r3, #0
 8011322:	d101      	bne.n	8011328 <f_open+0x18>
 8011324:	2309      	movs	r3, #9
 8011326:	e1b7      	b.n	8011698 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8011328:	79fb      	ldrb	r3, [r7, #7]
 801132a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801132e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8011330:	79fa      	ldrb	r2, [r7, #7]
 8011332:	f107 0114 	add.w	r1, r7, #20
 8011336:	f107 0308 	add.w	r3, r7, #8
 801133a:	4618      	mov	r0, r3
 801133c:	f7ff fce4 	bl	8010d08 <find_volume>
 8011340:	4603      	mov	r3, r0
 8011342:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8011346:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801134a:	2b00      	cmp	r3, #0
 801134c:	f040 819b 	bne.w	8011686 <f_open+0x376>
		dj.obj.fs = fs;
 8011350:	697b      	ldr	r3, [r7, #20]
 8011352:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8011354:	68ba      	ldr	r2, [r7, #8]
 8011356:	f107 0318 	add.w	r3, r7, #24
 801135a:	4611      	mov	r1, r2
 801135c:	4618      	mov	r0, r3
 801135e:	f7ff fba3 	bl	8010aa8 <follow_path>
 8011362:	4603      	mov	r3, r0
 8011364:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8011368:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801136c:	2b00      	cmp	r3, #0
 801136e:	d118      	bne.n	80113a2 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8011370:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8011374:	b25b      	sxtb	r3, r3
 8011376:	2b00      	cmp	r3, #0
 8011378:	da03      	bge.n	8011382 <f_open+0x72>
				res = FR_INVALID_NAME;
 801137a:	2306      	movs	r3, #6
 801137c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8011380:	e00f      	b.n	80113a2 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011382:	79fb      	ldrb	r3, [r7, #7]
 8011384:	2b01      	cmp	r3, #1
 8011386:	bf8c      	ite	hi
 8011388:	2301      	movhi	r3, #1
 801138a:	2300      	movls	r3, #0
 801138c:	b2db      	uxtb	r3, r3
 801138e:	461a      	mov	r2, r3
 8011390:	f107 0318 	add.w	r3, r7, #24
 8011394:	4611      	mov	r1, r2
 8011396:	4618      	mov	r0, r3
 8011398:	f7fd fecc 	bl	800f134 <chk_lock>
 801139c:	4603      	mov	r3, r0
 801139e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80113a2:	79fb      	ldrb	r3, [r7, #7]
 80113a4:	f003 031c 	and.w	r3, r3, #28
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d07f      	beq.n	80114ac <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 80113ac:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d017      	beq.n	80113e4 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80113b4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80113b8:	2b04      	cmp	r3, #4
 80113ba:	d10e      	bne.n	80113da <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80113bc:	f7fd ff16 	bl	800f1ec <enq_lock>
 80113c0:	4603      	mov	r3, r0
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d006      	beq.n	80113d4 <f_open+0xc4>
 80113c6:	f107 0318 	add.w	r3, r7, #24
 80113ca:	4618      	mov	r0, r3
 80113cc:	f7ff f86e 	bl	80104ac <dir_register>
 80113d0:	4603      	mov	r3, r0
 80113d2:	e000      	b.n	80113d6 <f_open+0xc6>
 80113d4:	2312      	movs	r3, #18
 80113d6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80113da:	79fb      	ldrb	r3, [r7, #7]
 80113dc:	f043 0308 	orr.w	r3, r3, #8
 80113e0:	71fb      	strb	r3, [r7, #7]
 80113e2:	e010      	b.n	8011406 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80113e4:	7fbb      	ldrb	r3, [r7, #30]
 80113e6:	f003 0311 	and.w	r3, r3, #17
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d003      	beq.n	80113f6 <f_open+0xe6>
					res = FR_DENIED;
 80113ee:	2307      	movs	r3, #7
 80113f0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80113f4:	e007      	b.n	8011406 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80113f6:	79fb      	ldrb	r3, [r7, #7]
 80113f8:	f003 0304 	and.w	r3, r3, #4
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d002      	beq.n	8011406 <f_open+0xf6>
 8011400:	2308      	movs	r3, #8
 8011402:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8011406:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801140a:	2b00      	cmp	r3, #0
 801140c:	d168      	bne.n	80114e0 <f_open+0x1d0>
 801140e:	79fb      	ldrb	r3, [r7, #7]
 8011410:	f003 0308 	and.w	r3, r3, #8
 8011414:	2b00      	cmp	r3, #0
 8011416:	d063      	beq.n	80114e0 <f_open+0x1d0>
				dw = GET_FATTIME();
 8011418:	f7fc ffca 	bl	800e3b0 <get_fattime>
 801141c:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801141e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011420:	330e      	adds	r3, #14
 8011422:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8011424:	4618      	mov	r0, r3
 8011426:	f7fd fddb 	bl	800efe0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801142a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801142c:	3316      	adds	r3, #22
 801142e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8011430:	4618      	mov	r0, r3
 8011432:	f7fd fdd5 	bl	800efe0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8011436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011438:	330b      	adds	r3, #11
 801143a:	2220      	movs	r2, #32
 801143c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801143e:	697b      	ldr	r3, [r7, #20]
 8011440:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011442:	4611      	mov	r1, r2
 8011444:	4618      	mov	r0, r3
 8011446:	f7fe fdaa 	bl	800ff9e <ld_clust>
 801144a:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801144c:	697b      	ldr	r3, [r7, #20]
 801144e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011450:	2200      	movs	r2, #0
 8011452:	4618      	mov	r0, r3
 8011454:	f7fe fdc2 	bl	800ffdc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8011458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801145a:	331c      	adds	r3, #28
 801145c:	2100      	movs	r1, #0
 801145e:	4618      	mov	r0, r3
 8011460:	f7fd fdbe 	bl	800efe0 <st_dword>
					fs->wflag = 1;
 8011464:	697b      	ldr	r3, [r7, #20]
 8011466:	2201      	movs	r2, #1
 8011468:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801146a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801146c:	2b00      	cmp	r3, #0
 801146e:	d037      	beq.n	80114e0 <f_open+0x1d0>
						dw = fs->winsect;
 8011470:	697b      	ldr	r3, [r7, #20]
 8011472:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011474:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8011476:	f107 0318 	add.w	r3, r7, #24
 801147a:	2200      	movs	r2, #0
 801147c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801147e:	4618      	mov	r0, r3
 8011480:	f7fe fab2 	bl	800f9e8 <remove_chain>
 8011484:	4603      	mov	r3, r0
 8011486:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 801148a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801148e:	2b00      	cmp	r3, #0
 8011490:	d126      	bne.n	80114e0 <f_open+0x1d0>
							res = move_window(fs, dw);
 8011492:	697b      	ldr	r3, [r7, #20]
 8011494:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8011496:	4618      	mov	r0, r3
 8011498:	f7fd fffc 	bl	800f494 <move_window>
 801149c:	4603      	mov	r3, r0
 801149e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80114a2:	697b      	ldr	r3, [r7, #20]
 80114a4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80114a6:	3a01      	subs	r2, #1
 80114a8:	615a      	str	r2, [r3, #20]
 80114aa:	e019      	b.n	80114e0 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80114ac:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	d115      	bne.n	80114e0 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80114b4:	7fbb      	ldrb	r3, [r7, #30]
 80114b6:	f003 0310 	and.w	r3, r3, #16
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d003      	beq.n	80114c6 <f_open+0x1b6>
					res = FR_NO_FILE;
 80114be:	2304      	movs	r3, #4
 80114c0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80114c4:	e00c      	b.n	80114e0 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80114c6:	79fb      	ldrb	r3, [r7, #7]
 80114c8:	f003 0302 	and.w	r3, r3, #2
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d007      	beq.n	80114e0 <f_open+0x1d0>
 80114d0:	7fbb      	ldrb	r3, [r7, #30]
 80114d2:	f003 0301 	and.w	r3, r3, #1
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d002      	beq.n	80114e0 <f_open+0x1d0>
						res = FR_DENIED;
 80114da:	2307      	movs	r3, #7
 80114dc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80114e0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d126      	bne.n	8011536 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80114e8:	79fb      	ldrb	r3, [r7, #7]
 80114ea:	f003 0308 	and.w	r3, r3, #8
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	d003      	beq.n	80114fa <f_open+0x1ea>
				mode |= FA_MODIFIED;
 80114f2:	79fb      	ldrb	r3, [r7, #7]
 80114f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80114f8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80114fa:	697b      	ldr	r3, [r7, #20]
 80114fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8011502:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011508:	79fb      	ldrb	r3, [r7, #7]
 801150a:	2b01      	cmp	r3, #1
 801150c:	bf8c      	ite	hi
 801150e:	2301      	movhi	r3, #1
 8011510:	2300      	movls	r3, #0
 8011512:	b2db      	uxtb	r3, r3
 8011514:	461a      	mov	r2, r3
 8011516:	f107 0318 	add.w	r3, r7, #24
 801151a:	4611      	mov	r1, r2
 801151c:	4618      	mov	r0, r3
 801151e:	f7fd fe87 	bl	800f230 <inc_lock>
 8011522:	4602      	mov	r2, r0
 8011524:	68fb      	ldr	r3, [r7, #12]
 8011526:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8011528:	68fb      	ldr	r3, [r7, #12]
 801152a:	691b      	ldr	r3, [r3, #16]
 801152c:	2b00      	cmp	r3, #0
 801152e:	d102      	bne.n	8011536 <f_open+0x226>
 8011530:	2302      	movs	r3, #2
 8011532:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8011536:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801153a:	2b00      	cmp	r3, #0
 801153c:	f040 80a3 	bne.w	8011686 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8011540:	697b      	ldr	r3, [r7, #20]
 8011542:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011544:	4611      	mov	r1, r2
 8011546:	4618      	mov	r0, r3
 8011548:	f7fe fd29 	bl	800ff9e <ld_clust>
 801154c:	4602      	mov	r2, r0
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8011552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011554:	331c      	adds	r3, #28
 8011556:	4618      	mov	r0, r3
 8011558:	f7fd fd04 	bl	800ef64 <ld_dword>
 801155c:	4602      	mov	r2, r0
 801155e:	68fb      	ldr	r3, [r7, #12]
 8011560:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8011562:	68fb      	ldr	r3, [r7, #12]
 8011564:	2200      	movs	r2, #0
 8011566:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8011568:	697a      	ldr	r2, [r7, #20]
 801156a:	68fb      	ldr	r3, [r7, #12]
 801156c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801156e:	697b      	ldr	r3, [r7, #20]
 8011570:	88da      	ldrh	r2, [r3, #6]
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8011576:	68fb      	ldr	r3, [r7, #12]
 8011578:	79fa      	ldrb	r2, [r7, #7]
 801157a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801157c:	68fb      	ldr	r3, [r7, #12]
 801157e:	2200      	movs	r2, #0
 8011580:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8011582:	68fb      	ldr	r3, [r7, #12]
 8011584:	2200      	movs	r2, #0
 8011586:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	2200      	movs	r2, #0
 801158c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801158e:	68fb      	ldr	r3, [r7, #12]
 8011590:	3330      	adds	r3, #48	@ 0x30
 8011592:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8011596:	2100      	movs	r1, #0
 8011598:	4618      	mov	r0, r3
 801159a:	f7fd fd6e 	bl	800f07a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801159e:	79fb      	ldrb	r3, [r7, #7]
 80115a0:	f003 0320 	and.w	r3, r3, #32
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	d06e      	beq.n	8011686 <f_open+0x376>
 80115a8:	68fb      	ldr	r3, [r7, #12]
 80115aa:	68db      	ldr	r3, [r3, #12]
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d06a      	beq.n	8011686 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80115b0:	68fb      	ldr	r3, [r7, #12]
 80115b2:	68da      	ldr	r2, [r3, #12]
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80115b8:	697b      	ldr	r3, [r7, #20]
 80115ba:	895b      	ldrh	r3, [r3, #10]
 80115bc:	461a      	mov	r2, r3
 80115be:	697b      	ldr	r3, [r7, #20]
 80115c0:	899b      	ldrh	r3, [r3, #12]
 80115c2:	fb02 f303 	mul.w	r3, r2, r3
 80115c6:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	689b      	ldr	r3, [r3, #8]
 80115cc:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80115ce:	68fb      	ldr	r3, [r7, #12]
 80115d0:	68db      	ldr	r3, [r3, #12]
 80115d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80115d4:	e016      	b.n	8011604 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80115da:	4618      	mov	r0, r3
 80115dc:	f7fe f817 	bl	800f60e <get_fat>
 80115e0:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80115e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80115e4:	2b01      	cmp	r3, #1
 80115e6:	d802      	bhi.n	80115ee <f_open+0x2de>
 80115e8:	2302      	movs	r3, #2
 80115ea:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80115ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80115f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115f4:	d102      	bne.n	80115fc <f_open+0x2ec>
 80115f6:	2301      	movs	r3, #1
 80115f8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80115fc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80115fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011600:	1ad3      	subs	r3, r2, r3
 8011602:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011604:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011608:	2b00      	cmp	r3, #0
 801160a:	d103      	bne.n	8011614 <f_open+0x304>
 801160c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801160e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011610:	429a      	cmp	r2, r3
 8011612:	d8e0      	bhi.n	80115d6 <f_open+0x2c6>
				}
				fp->clust = clst;
 8011614:	68fb      	ldr	r3, [r7, #12]
 8011616:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8011618:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801161a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801161e:	2b00      	cmp	r3, #0
 8011620:	d131      	bne.n	8011686 <f_open+0x376>
 8011622:	697b      	ldr	r3, [r7, #20]
 8011624:	899b      	ldrh	r3, [r3, #12]
 8011626:	461a      	mov	r2, r3
 8011628:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801162a:	fbb3 f1f2 	udiv	r1, r3, r2
 801162e:	fb01 f202 	mul.w	r2, r1, r2
 8011632:	1a9b      	subs	r3, r3, r2
 8011634:	2b00      	cmp	r3, #0
 8011636:	d026      	beq.n	8011686 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8011638:	697b      	ldr	r3, [r7, #20]
 801163a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801163c:	4618      	mov	r0, r3
 801163e:	f7fd ffc7 	bl	800f5d0 <clust2sect>
 8011642:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8011644:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011646:	2b00      	cmp	r3, #0
 8011648:	d103      	bne.n	8011652 <f_open+0x342>
						res = FR_INT_ERR;
 801164a:	2302      	movs	r3, #2
 801164c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8011650:	e019      	b.n	8011686 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8011652:	697b      	ldr	r3, [r7, #20]
 8011654:	899b      	ldrh	r3, [r3, #12]
 8011656:	461a      	mov	r2, r3
 8011658:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801165a:	fbb3 f2f2 	udiv	r2, r3, r2
 801165e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011660:	441a      	add	r2, r3
 8011662:	68fb      	ldr	r3, [r7, #12]
 8011664:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8011666:	697b      	ldr	r3, [r7, #20]
 8011668:	7858      	ldrb	r0, [r3, #1]
 801166a:	68fb      	ldr	r3, [r7, #12]
 801166c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011670:	68fb      	ldr	r3, [r7, #12]
 8011672:	6a1a      	ldr	r2, [r3, #32]
 8011674:	2301      	movs	r3, #1
 8011676:	f7fd fbff 	bl	800ee78 <disk_read>
 801167a:	4603      	mov	r3, r0
 801167c:	2b00      	cmp	r3, #0
 801167e:	d002      	beq.n	8011686 <f_open+0x376>
 8011680:	2301      	movs	r3, #1
 8011682:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8011686:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801168a:	2b00      	cmp	r3, #0
 801168c:	d002      	beq.n	8011694 <f_open+0x384>
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	2200      	movs	r2, #0
 8011692:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8011694:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8011698:	4618      	mov	r0, r3
 801169a:	3768      	adds	r7, #104	@ 0x68
 801169c:	46bd      	mov	sp, r7
 801169e:	bd80      	pop	{r7, pc}

080116a0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80116a0:	b580      	push	{r7, lr}
 80116a2:	b08c      	sub	sp, #48	@ 0x30
 80116a4:	af00      	add	r7, sp, #0
 80116a6:	60f8      	str	r0, [r7, #12]
 80116a8:	60b9      	str	r1, [r7, #8]
 80116aa:	607a      	str	r2, [r7, #4]
 80116ac:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80116ae:	68bb      	ldr	r3, [r7, #8]
 80116b0:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80116b2:	683b      	ldr	r3, [r7, #0]
 80116b4:	2200      	movs	r2, #0
 80116b6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80116b8:	68fb      	ldr	r3, [r7, #12]
 80116ba:	f107 0210 	add.w	r2, r7, #16
 80116be:	4611      	mov	r1, r2
 80116c0:	4618      	mov	r0, r3
 80116c2:	f7ff fda9 	bl	8011218 <validate>
 80116c6:	4603      	mov	r3, r0
 80116c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80116cc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d107      	bne.n	80116e4 <f_write+0x44>
 80116d4:	68fb      	ldr	r3, [r7, #12]
 80116d6:	7d5b      	ldrb	r3, [r3, #21]
 80116d8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80116dc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d002      	beq.n	80116ea <f_write+0x4a>
 80116e4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80116e8:	e16a      	b.n	80119c0 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	7d1b      	ldrb	r3, [r3, #20]
 80116ee:	f003 0302 	and.w	r3, r3, #2
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	d101      	bne.n	80116fa <f_write+0x5a>
 80116f6:	2307      	movs	r3, #7
 80116f8:	e162      	b.n	80119c0 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80116fa:	68fb      	ldr	r3, [r7, #12]
 80116fc:	699a      	ldr	r2, [r3, #24]
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	441a      	add	r2, r3
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	699b      	ldr	r3, [r3, #24]
 8011706:	429a      	cmp	r2, r3
 8011708:	f080 814c 	bcs.w	80119a4 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801170c:	68fb      	ldr	r3, [r7, #12]
 801170e:	699b      	ldr	r3, [r3, #24]
 8011710:	43db      	mvns	r3, r3
 8011712:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8011714:	e146      	b.n	80119a4 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8011716:	68fb      	ldr	r3, [r7, #12]
 8011718:	699b      	ldr	r3, [r3, #24]
 801171a:	693a      	ldr	r2, [r7, #16]
 801171c:	8992      	ldrh	r2, [r2, #12]
 801171e:	fbb3 f1f2 	udiv	r1, r3, r2
 8011722:	fb01 f202 	mul.w	r2, r1, r2
 8011726:	1a9b      	subs	r3, r3, r2
 8011728:	2b00      	cmp	r3, #0
 801172a:	f040 80f1 	bne.w	8011910 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	699b      	ldr	r3, [r3, #24]
 8011732:	693a      	ldr	r2, [r7, #16]
 8011734:	8992      	ldrh	r2, [r2, #12]
 8011736:	fbb3 f3f2 	udiv	r3, r3, r2
 801173a:	693a      	ldr	r2, [r7, #16]
 801173c:	8952      	ldrh	r2, [r2, #10]
 801173e:	3a01      	subs	r2, #1
 8011740:	4013      	ands	r3, r2
 8011742:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8011744:	69bb      	ldr	r3, [r7, #24]
 8011746:	2b00      	cmp	r3, #0
 8011748:	d143      	bne.n	80117d2 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801174a:	68fb      	ldr	r3, [r7, #12]
 801174c:	699b      	ldr	r3, [r3, #24]
 801174e:	2b00      	cmp	r3, #0
 8011750:	d10c      	bne.n	801176c <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8011752:	68fb      	ldr	r3, [r7, #12]
 8011754:	689b      	ldr	r3, [r3, #8]
 8011756:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8011758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801175a:	2b00      	cmp	r3, #0
 801175c:	d11a      	bne.n	8011794 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801175e:	68fb      	ldr	r3, [r7, #12]
 8011760:	2100      	movs	r1, #0
 8011762:	4618      	mov	r0, r3
 8011764:	f7fe f9a5 	bl	800fab2 <create_chain>
 8011768:	62b8      	str	r0, [r7, #40]	@ 0x28
 801176a:	e013      	b.n	8011794 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011770:	2b00      	cmp	r3, #0
 8011772:	d007      	beq.n	8011784 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8011774:	68fb      	ldr	r3, [r7, #12]
 8011776:	699b      	ldr	r3, [r3, #24]
 8011778:	4619      	mov	r1, r3
 801177a:	68f8      	ldr	r0, [r7, #12]
 801177c:	f7fe fa31 	bl	800fbe2 <clmt_clust>
 8011780:	62b8      	str	r0, [r7, #40]	@ 0x28
 8011782:	e007      	b.n	8011794 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8011784:	68fa      	ldr	r2, [r7, #12]
 8011786:	68fb      	ldr	r3, [r7, #12]
 8011788:	69db      	ldr	r3, [r3, #28]
 801178a:	4619      	mov	r1, r3
 801178c:	4610      	mov	r0, r2
 801178e:	f7fe f990 	bl	800fab2 <create_chain>
 8011792:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011796:	2b00      	cmp	r3, #0
 8011798:	f000 8109 	beq.w	80119ae <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801179c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801179e:	2b01      	cmp	r3, #1
 80117a0:	d104      	bne.n	80117ac <f_write+0x10c>
 80117a2:	68fb      	ldr	r3, [r7, #12]
 80117a4:	2202      	movs	r2, #2
 80117a6:	755a      	strb	r2, [r3, #21]
 80117a8:	2302      	movs	r3, #2
 80117aa:	e109      	b.n	80119c0 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80117ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80117ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117b2:	d104      	bne.n	80117be <f_write+0x11e>
 80117b4:	68fb      	ldr	r3, [r7, #12]
 80117b6:	2201      	movs	r2, #1
 80117b8:	755a      	strb	r2, [r3, #21]
 80117ba:	2301      	movs	r3, #1
 80117bc:	e100      	b.n	80119c0 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80117c2:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80117c4:	68fb      	ldr	r3, [r7, #12]
 80117c6:	689b      	ldr	r3, [r3, #8]
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d102      	bne.n	80117d2 <f_write+0x132>
 80117cc:	68fb      	ldr	r3, [r7, #12]
 80117ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80117d0:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80117d2:	68fb      	ldr	r3, [r7, #12]
 80117d4:	7d1b      	ldrb	r3, [r3, #20]
 80117d6:	b25b      	sxtb	r3, r3
 80117d8:	2b00      	cmp	r3, #0
 80117da:	da18      	bge.n	801180e <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80117dc:	693b      	ldr	r3, [r7, #16]
 80117de:	7858      	ldrb	r0, [r3, #1]
 80117e0:	68fb      	ldr	r3, [r7, #12]
 80117e2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80117e6:	68fb      	ldr	r3, [r7, #12]
 80117e8:	6a1a      	ldr	r2, [r3, #32]
 80117ea:	2301      	movs	r3, #1
 80117ec:	f7fd fb64 	bl	800eeb8 <disk_write>
 80117f0:	4603      	mov	r3, r0
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d004      	beq.n	8011800 <f_write+0x160>
 80117f6:	68fb      	ldr	r3, [r7, #12]
 80117f8:	2201      	movs	r2, #1
 80117fa:	755a      	strb	r2, [r3, #21]
 80117fc:	2301      	movs	r3, #1
 80117fe:	e0df      	b.n	80119c0 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011800:	68fb      	ldr	r3, [r7, #12]
 8011802:	7d1b      	ldrb	r3, [r3, #20]
 8011804:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011808:	b2da      	uxtb	r2, r3
 801180a:	68fb      	ldr	r3, [r7, #12]
 801180c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801180e:	693a      	ldr	r2, [r7, #16]
 8011810:	68fb      	ldr	r3, [r7, #12]
 8011812:	69db      	ldr	r3, [r3, #28]
 8011814:	4619      	mov	r1, r3
 8011816:	4610      	mov	r0, r2
 8011818:	f7fd feda 	bl	800f5d0 <clust2sect>
 801181c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801181e:	697b      	ldr	r3, [r7, #20]
 8011820:	2b00      	cmp	r3, #0
 8011822:	d104      	bne.n	801182e <f_write+0x18e>
 8011824:	68fb      	ldr	r3, [r7, #12]
 8011826:	2202      	movs	r2, #2
 8011828:	755a      	strb	r2, [r3, #21]
 801182a:	2302      	movs	r3, #2
 801182c:	e0c8      	b.n	80119c0 <f_write+0x320>
			sect += csect;
 801182e:	697a      	ldr	r2, [r7, #20]
 8011830:	69bb      	ldr	r3, [r7, #24]
 8011832:	4413      	add	r3, r2
 8011834:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8011836:	693b      	ldr	r3, [r7, #16]
 8011838:	899b      	ldrh	r3, [r3, #12]
 801183a:	461a      	mov	r2, r3
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	fbb3 f3f2 	udiv	r3, r3, r2
 8011842:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8011844:	6a3b      	ldr	r3, [r7, #32]
 8011846:	2b00      	cmp	r3, #0
 8011848:	d043      	beq.n	80118d2 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801184a:	69ba      	ldr	r2, [r7, #24]
 801184c:	6a3b      	ldr	r3, [r7, #32]
 801184e:	4413      	add	r3, r2
 8011850:	693a      	ldr	r2, [r7, #16]
 8011852:	8952      	ldrh	r2, [r2, #10]
 8011854:	4293      	cmp	r3, r2
 8011856:	d905      	bls.n	8011864 <f_write+0x1c4>
					cc = fs->csize - csect;
 8011858:	693b      	ldr	r3, [r7, #16]
 801185a:	895b      	ldrh	r3, [r3, #10]
 801185c:	461a      	mov	r2, r3
 801185e:	69bb      	ldr	r3, [r7, #24]
 8011860:	1ad3      	subs	r3, r2, r3
 8011862:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011864:	693b      	ldr	r3, [r7, #16]
 8011866:	7858      	ldrb	r0, [r3, #1]
 8011868:	6a3b      	ldr	r3, [r7, #32]
 801186a:	697a      	ldr	r2, [r7, #20]
 801186c:	69f9      	ldr	r1, [r7, #28]
 801186e:	f7fd fb23 	bl	800eeb8 <disk_write>
 8011872:	4603      	mov	r3, r0
 8011874:	2b00      	cmp	r3, #0
 8011876:	d004      	beq.n	8011882 <f_write+0x1e2>
 8011878:	68fb      	ldr	r3, [r7, #12]
 801187a:	2201      	movs	r2, #1
 801187c:	755a      	strb	r2, [r3, #21]
 801187e:	2301      	movs	r3, #1
 8011880:	e09e      	b.n	80119c0 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8011882:	68fb      	ldr	r3, [r7, #12]
 8011884:	6a1a      	ldr	r2, [r3, #32]
 8011886:	697b      	ldr	r3, [r7, #20]
 8011888:	1ad3      	subs	r3, r2, r3
 801188a:	6a3a      	ldr	r2, [r7, #32]
 801188c:	429a      	cmp	r2, r3
 801188e:	d918      	bls.n	80118c2 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8011890:	68fb      	ldr	r3, [r7, #12]
 8011892:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8011896:	68fb      	ldr	r3, [r7, #12]
 8011898:	6a1a      	ldr	r2, [r3, #32]
 801189a:	697b      	ldr	r3, [r7, #20]
 801189c:	1ad3      	subs	r3, r2, r3
 801189e:	693a      	ldr	r2, [r7, #16]
 80118a0:	8992      	ldrh	r2, [r2, #12]
 80118a2:	fb02 f303 	mul.w	r3, r2, r3
 80118a6:	69fa      	ldr	r2, [r7, #28]
 80118a8:	18d1      	adds	r1, r2, r3
 80118aa:	693b      	ldr	r3, [r7, #16]
 80118ac:	899b      	ldrh	r3, [r3, #12]
 80118ae:	461a      	mov	r2, r3
 80118b0:	f7fd fbc2 	bl	800f038 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80118b4:	68fb      	ldr	r3, [r7, #12]
 80118b6:	7d1b      	ldrb	r3, [r3, #20]
 80118b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80118bc:	b2da      	uxtb	r2, r3
 80118be:	68fb      	ldr	r3, [r7, #12]
 80118c0:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80118c2:	693b      	ldr	r3, [r7, #16]
 80118c4:	899b      	ldrh	r3, [r3, #12]
 80118c6:	461a      	mov	r2, r3
 80118c8:	6a3b      	ldr	r3, [r7, #32]
 80118ca:	fb02 f303 	mul.w	r3, r2, r3
 80118ce:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 80118d0:	e04b      	b.n	801196a <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80118d2:	68fb      	ldr	r3, [r7, #12]
 80118d4:	6a1b      	ldr	r3, [r3, #32]
 80118d6:	697a      	ldr	r2, [r7, #20]
 80118d8:	429a      	cmp	r2, r3
 80118da:	d016      	beq.n	801190a <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 80118dc:	68fb      	ldr	r3, [r7, #12]
 80118de:	699a      	ldr	r2, [r3, #24]
 80118e0:	68fb      	ldr	r3, [r7, #12]
 80118e2:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80118e4:	429a      	cmp	r2, r3
 80118e6:	d210      	bcs.n	801190a <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80118e8:	693b      	ldr	r3, [r7, #16]
 80118ea:	7858      	ldrb	r0, [r3, #1]
 80118ec:	68fb      	ldr	r3, [r7, #12]
 80118ee:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80118f2:	2301      	movs	r3, #1
 80118f4:	697a      	ldr	r2, [r7, #20]
 80118f6:	f7fd fabf 	bl	800ee78 <disk_read>
 80118fa:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d004      	beq.n	801190a <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	2201      	movs	r2, #1
 8011904:	755a      	strb	r2, [r3, #21]
 8011906:	2301      	movs	r3, #1
 8011908:	e05a      	b.n	80119c0 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 801190a:	68fb      	ldr	r3, [r7, #12]
 801190c:	697a      	ldr	r2, [r7, #20]
 801190e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8011910:	693b      	ldr	r3, [r7, #16]
 8011912:	899b      	ldrh	r3, [r3, #12]
 8011914:	4618      	mov	r0, r3
 8011916:	68fb      	ldr	r3, [r7, #12]
 8011918:	699b      	ldr	r3, [r3, #24]
 801191a:	693a      	ldr	r2, [r7, #16]
 801191c:	8992      	ldrh	r2, [r2, #12]
 801191e:	fbb3 f1f2 	udiv	r1, r3, r2
 8011922:	fb01 f202 	mul.w	r2, r1, r2
 8011926:	1a9b      	subs	r3, r3, r2
 8011928:	1ac3      	subs	r3, r0, r3
 801192a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801192c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	429a      	cmp	r2, r3
 8011932:	d901      	bls.n	8011938 <f_write+0x298>
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8011938:	68fb      	ldr	r3, [r7, #12]
 801193a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801193e:	68fb      	ldr	r3, [r7, #12]
 8011940:	699b      	ldr	r3, [r3, #24]
 8011942:	693a      	ldr	r2, [r7, #16]
 8011944:	8992      	ldrh	r2, [r2, #12]
 8011946:	fbb3 f0f2 	udiv	r0, r3, r2
 801194a:	fb00 f202 	mul.w	r2, r0, r2
 801194e:	1a9b      	subs	r3, r3, r2
 8011950:	440b      	add	r3, r1
 8011952:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011954:	69f9      	ldr	r1, [r7, #28]
 8011956:	4618      	mov	r0, r3
 8011958:	f7fd fb6e 	bl	800f038 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801195c:	68fb      	ldr	r3, [r7, #12]
 801195e:	7d1b      	ldrb	r3, [r3, #20]
 8011960:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8011964:	b2da      	uxtb	r2, r3
 8011966:	68fb      	ldr	r3, [r7, #12]
 8011968:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801196a:	69fa      	ldr	r2, [r7, #28]
 801196c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801196e:	4413      	add	r3, r2
 8011970:	61fb      	str	r3, [r7, #28]
 8011972:	68fb      	ldr	r3, [r7, #12]
 8011974:	699a      	ldr	r2, [r3, #24]
 8011976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011978:	441a      	add	r2, r3
 801197a:	68fb      	ldr	r3, [r7, #12]
 801197c:	619a      	str	r2, [r3, #24]
 801197e:	68fb      	ldr	r3, [r7, #12]
 8011980:	68da      	ldr	r2, [r3, #12]
 8011982:	68fb      	ldr	r3, [r7, #12]
 8011984:	699b      	ldr	r3, [r3, #24]
 8011986:	429a      	cmp	r2, r3
 8011988:	bf38      	it	cc
 801198a:	461a      	movcc	r2, r3
 801198c:	68fb      	ldr	r3, [r7, #12]
 801198e:	60da      	str	r2, [r3, #12]
 8011990:	683b      	ldr	r3, [r7, #0]
 8011992:	681a      	ldr	r2, [r3, #0]
 8011994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011996:	441a      	add	r2, r3
 8011998:	683b      	ldr	r3, [r7, #0]
 801199a:	601a      	str	r2, [r3, #0]
 801199c:	687a      	ldr	r2, [r7, #4]
 801199e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119a0:	1ad3      	subs	r3, r2, r3
 80119a2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	f47f aeb5 	bne.w	8011716 <f_write+0x76>
 80119ac:	e000      	b.n	80119b0 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80119ae:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80119b0:	68fb      	ldr	r3, [r7, #12]
 80119b2:	7d1b      	ldrb	r3, [r3, #20]
 80119b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80119b8:	b2da      	uxtb	r2, r3
 80119ba:	68fb      	ldr	r3, [r7, #12]
 80119bc:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80119be:	2300      	movs	r3, #0
}
 80119c0:	4618      	mov	r0, r3
 80119c2:	3730      	adds	r7, #48	@ 0x30
 80119c4:	46bd      	mov	sp, r7
 80119c6:	bd80      	pop	{r7, pc}

080119c8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80119c8:	b580      	push	{r7, lr}
 80119ca:	b086      	sub	sp, #24
 80119cc:	af00      	add	r7, sp, #0
 80119ce:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	f107 0208 	add.w	r2, r7, #8
 80119d6:	4611      	mov	r1, r2
 80119d8:	4618      	mov	r0, r3
 80119da:	f7ff fc1d 	bl	8011218 <validate>
 80119de:	4603      	mov	r3, r0
 80119e0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80119e2:	7dfb      	ldrb	r3, [r7, #23]
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d168      	bne.n	8011aba <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	7d1b      	ldrb	r3, [r3, #20]
 80119ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d062      	beq.n	8011aba <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	7d1b      	ldrb	r3, [r3, #20]
 80119f8:	b25b      	sxtb	r3, r3
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	da15      	bge.n	8011a2a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80119fe:	68bb      	ldr	r3, [r7, #8]
 8011a00:	7858      	ldrb	r0, [r3, #1]
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	6a1a      	ldr	r2, [r3, #32]
 8011a0c:	2301      	movs	r3, #1
 8011a0e:	f7fd fa53 	bl	800eeb8 <disk_write>
 8011a12:	4603      	mov	r3, r0
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	d001      	beq.n	8011a1c <f_sync+0x54>
 8011a18:	2301      	movs	r3, #1
 8011a1a:	e04f      	b.n	8011abc <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	7d1b      	ldrb	r3, [r3, #20]
 8011a20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011a24:	b2da      	uxtb	r2, r3
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8011a2a:	f7fc fcc1 	bl	800e3b0 <get_fattime>
 8011a2e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8011a30:	68ba      	ldr	r2, [r7, #8]
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011a36:	4619      	mov	r1, r3
 8011a38:	4610      	mov	r0, r2
 8011a3a:	f7fd fd2b 	bl	800f494 <move_window>
 8011a3e:	4603      	mov	r3, r0
 8011a40:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8011a42:	7dfb      	ldrb	r3, [r7, #23]
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d138      	bne.n	8011aba <f_sync+0xf2>
					dir = fp->dir_ptr;
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011a4c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8011a4e:	68fb      	ldr	r3, [r7, #12]
 8011a50:	330b      	adds	r3, #11
 8011a52:	781a      	ldrb	r2, [r3, #0]
 8011a54:	68fb      	ldr	r3, [r7, #12]
 8011a56:	330b      	adds	r3, #11
 8011a58:	f042 0220 	orr.w	r2, r2, #32
 8011a5c:	b2d2      	uxtb	r2, r2
 8011a5e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	6818      	ldr	r0, [r3, #0]
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	689b      	ldr	r3, [r3, #8]
 8011a68:	461a      	mov	r2, r3
 8011a6a:	68f9      	ldr	r1, [r7, #12]
 8011a6c:	f7fe fab6 	bl	800ffdc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8011a70:	68fb      	ldr	r3, [r7, #12]
 8011a72:	f103 021c 	add.w	r2, r3, #28
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	68db      	ldr	r3, [r3, #12]
 8011a7a:	4619      	mov	r1, r3
 8011a7c:	4610      	mov	r0, r2
 8011a7e:	f7fd faaf 	bl	800efe0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8011a82:	68fb      	ldr	r3, [r7, #12]
 8011a84:	3316      	adds	r3, #22
 8011a86:	6939      	ldr	r1, [r7, #16]
 8011a88:	4618      	mov	r0, r3
 8011a8a:	f7fd faa9 	bl	800efe0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8011a8e:	68fb      	ldr	r3, [r7, #12]
 8011a90:	3312      	adds	r3, #18
 8011a92:	2100      	movs	r1, #0
 8011a94:	4618      	mov	r0, r3
 8011a96:	f7fd fa88 	bl	800efaa <st_word>
					fs->wflag = 1;
 8011a9a:	68bb      	ldr	r3, [r7, #8]
 8011a9c:	2201      	movs	r2, #1
 8011a9e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8011aa0:	68bb      	ldr	r3, [r7, #8]
 8011aa2:	4618      	mov	r0, r3
 8011aa4:	f7fd fd24 	bl	800f4f0 <sync_fs>
 8011aa8:	4603      	mov	r3, r0
 8011aaa:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	7d1b      	ldrb	r3, [r3, #20]
 8011ab0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011ab4:	b2da      	uxtb	r2, r3
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8011aba:	7dfb      	ldrb	r3, [r7, #23]
}
 8011abc:	4618      	mov	r0, r3
 8011abe:	3718      	adds	r7, #24
 8011ac0:	46bd      	mov	sp, r7
 8011ac2:	bd80      	pop	{r7, pc}

08011ac4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8011ac4:	b580      	push	{r7, lr}
 8011ac6:	b084      	sub	sp, #16
 8011ac8:	af00      	add	r7, sp, #0
 8011aca:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8011acc:	6878      	ldr	r0, [r7, #4]
 8011ace:	f7ff ff7b 	bl	80119c8 <f_sync>
 8011ad2:	4603      	mov	r3, r0
 8011ad4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8011ad6:	7bfb      	ldrb	r3, [r7, #15]
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d118      	bne.n	8011b0e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	f107 0208 	add.w	r2, r7, #8
 8011ae2:	4611      	mov	r1, r2
 8011ae4:	4618      	mov	r0, r3
 8011ae6:	f7ff fb97 	bl	8011218 <validate>
 8011aea:	4603      	mov	r3, r0
 8011aec:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011aee:	7bfb      	ldrb	r3, [r7, #15]
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	d10c      	bne.n	8011b0e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	691b      	ldr	r3, [r3, #16]
 8011af8:	4618      	mov	r0, r3
 8011afa:	f7fd fc27 	bl	800f34c <dec_lock>
 8011afe:	4603      	mov	r3, r0
 8011b00:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8011b02:	7bfb      	ldrb	r3, [r7, #15]
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d102      	bne.n	8011b0e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	2200      	movs	r2, #0
 8011b0c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8011b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b10:	4618      	mov	r0, r3
 8011b12:	3710      	adds	r7, #16
 8011b14:	46bd      	mov	sp, r7
 8011b16:	bd80      	pop	{r7, pc}

08011b18 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8011b18:	b580      	push	{r7, lr}
 8011b1a:	b090      	sub	sp, #64	@ 0x40
 8011b1c:	af00      	add	r7, sp, #0
 8011b1e:	6078      	str	r0, [r7, #4]
 8011b20:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	f107 0208 	add.w	r2, r7, #8
 8011b28:	4611      	mov	r1, r2
 8011b2a:	4618      	mov	r0, r3
 8011b2c:	f7ff fb74 	bl	8011218 <validate>
 8011b30:	4603      	mov	r3, r0
 8011b32:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8011b36:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d103      	bne.n	8011b46 <f_lseek+0x2e>
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	7d5b      	ldrb	r3, [r3, #21]
 8011b42:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8011b46:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d002      	beq.n	8011b54 <f_lseek+0x3c>
 8011b4e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8011b52:	e201      	b.n	8011f58 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	f000 80d9 	beq.w	8011d10 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8011b5e:	683b      	ldr	r3, [r7, #0]
 8011b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b64:	d15a      	bne.n	8011c1c <f_lseek+0x104>
			tbl = fp->cltbl;
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011b6a:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8011b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b6e:	1d1a      	adds	r2, r3, #4
 8011b70:	627a      	str	r2, [r7, #36]	@ 0x24
 8011b72:	681b      	ldr	r3, [r3, #0]
 8011b74:	617b      	str	r3, [r7, #20]
 8011b76:	2302      	movs	r3, #2
 8011b78:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	689b      	ldr	r3, [r3, #8]
 8011b7e:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8011b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d03a      	beq.n	8011bfc <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8011b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b88:	613b      	str	r3, [r7, #16]
 8011b8a:	2300      	movs	r3, #0
 8011b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b90:	3302      	adds	r3, #2
 8011b92:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8011b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b96:	60fb      	str	r3, [r7, #12]
 8011b98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b9a:	3301      	adds	r3, #1
 8011b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011ba2:	4618      	mov	r0, r3
 8011ba4:	f7fd fd33 	bl	800f60e <get_fat>
 8011ba8:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8011baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011bac:	2b01      	cmp	r3, #1
 8011bae:	d804      	bhi.n	8011bba <f_lseek+0xa2>
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	2202      	movs	r2, #2
 8011bb4:	755a      	strb	r2, [r3, #21]
 8011bb6:	2302      	movs	r3, #2
 8011bb8:	e1ce      	b.n	8011f58 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011bc0:	d104      	bne.n	8011bcc <f_lseek+0xb4>
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	2201      	movs	r2, #1
 8011bc6:	755a      	strb	r2, [r3, #21]
 8011bc8:	2301      	movs	r3, #1
 8011bca:	e1c5      	b.n	8011f58 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8011bcc:	68fb      	ldr	r3, [r7, #12]
 8011bce:	3301      	adds	r3, #1
 8011bd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011bd2:	429a      	cmp	r2, r3
 8011bd4:	d0de      	beq.n	8011b94 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8011bd6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011bd8:	697b      	ldr	r3, [r7, #20]
 8011bda:	429a      	cmp	r2, r3
 8011bdc:	d809      	bhi.n	8011bf2 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8011bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011be0:	1d1a      	adds	r2, r3, #4
 8011be2:	627a      	str	r2, [r7, #36]	@ 0x24
 8011be4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011be6:	601a      	str	r2, [r3, #0]
 8011be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bea:	1d1a      	adds	r2, r3, #4
 8011bec:	627a      	str	r2, [r7, #36]	@ 0x24
 8011bee:	693a      	ldr	r2, [r7, #16]
 8011bf0:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8011bf2:	68bb      	ldr	r3, [r7, #8]
 8011bf4:	6a1b      	ldr	r3, [r3, #32]
 8011bf6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011bf8:	429a      	cmp	r2, r3
 8011bfa:	d3c4      	bcc.n	8011b86 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011c00:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011c02:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8011c04:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011c06:	697b      	ldr	r3, [r7, #20]
 8011c08:	429a      	cmp	r2, r3
 8011c0a:	d803      	bhi.n	8011c14 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8011c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c0e:	2200      	movs	r2, #0
 8011c10:	601a      	str	r2, [r3, #0]
 8011c12:	e19f      	b.n	8011f54 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8011c14:	2311      	movs	r3, #17
 8011c16:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8011c1a:	e19b      	b.n	8011f54 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	68db      	ldr	r3, [r3, #12]
 8011c20:	683a      	ldr	r2, [r7, #0]
 8011c22:	429a      	cmp	r2, r3
 8011c24:	d902      	bls.n	8011c2c <f_lseek+0x114>
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	68db      	ldr	r3, [r3, #12]
 8011c2a:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	683a      	ldr	r2, [r7, #0]
 8011c30:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8011c32:	683b      	ldr	r3, [r7, #0]
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	f000 818d 	beq.w	8011f54 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8011c3a:	683b      	ldr	r3, [r7, #0]
 8011c3c:	3b01      	subs	r3, #1
 8011c3e:	4619      	mov	r1, r3
 8011c40:	6878      	ldr	r0, [r7, #4]
 8011c42:	f7fd ffce 	bl	800fbe2 <clmt_clust>
 8011c46:	4602      	mov	r2, r0
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8011c4c:	68ba      	ldr	r2, [r7, #8]
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	69db      	ldr	r3, [r3, #28]
 8011c52:	4619      	mov	r1, r3
 8011c54:	4610      	mov	r0, r2
 8011c56:	f7fd fcbb 	bl	800f5d0 <clust2sect>
 8011c5a:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8011c5c:	69bb      	ldr	r3, [r7, #24]
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d104      	bne.n	8011c6c <f_lseek+0x154>
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	2202      	movs	r2, #2
 8011c66:	755a      	strb	r2, [r3, #21]
 8011c68:	2302      	movs	r3, #2
 8011c6a:	e175      	b.n	8011f58 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8011c6c:	683b      	ldr	r3, [r7, #0]
 8011c6e:	3b01      	subs	r3, #1
 8011c70:	68ba      	ldr	r2, [r7, #8]
 8011c72:	8992      	ldrh	r2, [r2, #12]
 8011c74:	fbb3 f3f2 	udiv	r3, r3, r2
 8011c78:	68ba      	ldr	r2, [r7, #8]
 8011c7a:	8952      	ldrh	r2, [r2, #10]
 8011c7c:	3a01      	subs	r2, #1
 8011c7e:	4013      	ands	r3, r2
 8011c80:	69ba      	ldr	r2, [r7, #24]
 8011c82:	4413      	add	r3, r2
 8011c84:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	699b      	ldr	r3, [r3, #24]
 8011c8a:	68ba      	ldr	r2, [r7, #8]
 8011c8c:	8992      	ldrh	r2, [r2, #12]
 8011c8e:	fbb3 f1f2 	udiv	r1, r3, r2
 8011c92:	fb01 f202 	mul.w	r2, r1, r2
 8011c96:	1a9b      	subs	r3, r3, r2
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	f000 815b 	beq.w	8011f54 <f_lseek+0x43c>
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	6a1b      	ldr	r3, [r3, #32]
 8011ca2:	69ba      	ldr	r2, [r7, #24]
 8011ca4:	429a      	cmp	r2, r3
 8011ca6:	f000 8155 	beq.w	8011f54 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	7d1b      	ldrb	r3, [r3, #20]
 8011cae:	b25b      	sxtb	r3, r3
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	da18      	bge.n	8011ce6 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011cb4:	68bb      	ldr	r3, [r7, #8]
 8011cb6:	7858      	ldrb	r0, [r3, #1]
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	6a1a      	ldr	r2, [r3, #32]
 8011cc2:	2301      	movs	r3, #1
 8011cc4:	f7fd f8f8 	bl	800eeb8 <disk_write>
 8011cc8:	4603      	mov	r3, r0
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d004      	beq.n	8011cd8 <f_lseek+0x1c0>
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	2201      	movs	r2, #1
 8011cd2:	755a      	strb	r2, [r3, #21]
 8011cd4:	2301      	movs	r3, #1
 8011cd6:	e13f      	b.n	8011f58 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	7d1b      	ldrb	r3, [r3, #20]
 8011cdc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011ce0:	b2da      	uxtb	r2, r3
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8011ce6:	68bb      	ldr	r3, [r7, #8]
 8011ce8:	7858      	ldrb	r0, [r3, #1]
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011cf0:	2301      	movs	r3, #1
 8011cf2:	69ba      	ldr	r2, [r7, #24]
 8011cf4:	f7fd f8c0 	bl	800ee78 <disk_read>
 8011cf8:	4603      	mov	r3, r0
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d004      	beq.n	8011d08 <f_lseek+0x1f0>
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	2201      	movs	r2, #1
 8011d02:	755a      	strb	r2, [r3, #21]
 8011d04:	2301      	movs	r3, #1
 8011d06:	e127      	b.n	8011f58 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	69ba      	ldr	r2, [r7, #24]
 8011d0c:	621a      	str	r2, [r3, #32]
 8011d0e:	e121      	b.n	8011f54 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	68db      	ldr	r3, [r3, #12]
 8011d14:	683a      	ldr	r2, [r7, #0]
 8011d16:	429a      	cmp	r2, r3
 8011d18:	d908      	bls.n	8011d2c <f_lseek+0x214>
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	7d1b      	ldrb	r3, [r3, #20]
 8011d1e:	f003 0302 	and.w	r3, r3, #2
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	d102      	bne.n	8011d2c <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	68db      	ldr	r3, [r3, #12]
 8011d2a:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	699b      	ldr	r3, [r3, #24]
 8011d30:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8011d32:	2300      	movs	r3, #0
 8011d34:	637b      	str	r3, [r7, #52]	@ 0x34
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011d3a:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8011d3c:	683b      	ldr	r3, [r7, #0]
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	f000 80b5 	beq.w	8011eae <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8011d44:	68bb      	ldr	r3, [r7, #8]
 8011d46:	895b      	ldrh	r3, [r3, #10]
 8011d48:	461a      	mov	r2, r3
 8011d4a:	68bb      	ldr	r3, [r7, #8]
 8011d4c:	899b      	ldrh	r3, [r3, #12]
 8011d4e:	fb02 f303 	mul.w	r3, r2, r3
 8011d52:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8011d54:	6a3b      	ldr	r3, [r7, #32]
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d01b      	beq.n	8011d92 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8011d5a:	683b      	ldr	r3, [r7, #0]
 8011d5c:	1e5a      	subs	r2, r3, #1
 8011d5e:	69fb      	ldr	r3, [r7, #28]
 8011d60:	fbb2 f2f3 	udiv	r2, r2, r3
 8011d64:	6a3b      	ldr	r3, [r7, #32]
 8011d66:	1e59      	subs	r1, r3, #1
 8011d68:	69fb      	ldr	r3, [r7, #28]
 8011d6a:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8011d6e:	429a      	cmp	r2, r3
 8011d70:	d30f      	bcc.n	8011d92 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8011d72:	6a3b      	ldr	r3, [r7, #32]
 8011d74:	1e5a      	subs	r2, r3, #1
 8011d76:	69fb      	ldr	r3, [r7, #28]
 8011d78:	425b      	negs	r3, r3
 8011d7a:	401a      	ands	r2, r3
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	699b      	ldr	r3, [r3, #24]
 8011d84:	683a      	ldr	r2, [r7, #0]
 8011d86:	1ad3      	subs	r3, r2, r3
 8011d88:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	69db      	ldr	r3, [r3, #28]
 8011d8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011d90:	e022      	b.n	8011dd8 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	689b      	ldr	r3, [r3, #8]
 8011d96:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8011d98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d119      	bne.n	8011dd2 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	2100      	movs	r1, #0
 8011da2:	4618      	mov	r0, r3
 8011da4:	f7fd fe85 	bl	800fab2 <create_chain>
 8011da8:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011daa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011dac:	2b01      	cmp	r3, #1
 8011dae:	d104      	bne.n	8011dba <f_lseek+0x2a2>
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	2202      	movs	r2, #2
 8011db4:	755a      	strb	r2, [r3, #21]
 8011db6:	2302      	movs	r3, #2
 8011db8:	e0ce      	b.n	8011f58 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011dba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011dc0:	d104      	bne.n	8011dcc <f_lseek+0x2b4>
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	2201      	movs	r2, #1
 8011dc6:	755a      	strb	r2, [r3, #21]
 8011dc8:	2301      	movs	r3, #1
 8011dca:	e0c5      	b.n	8011f58 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011dd0:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011dd6:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8011dd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d067      	beq.n	8011eae <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8011dde:	e03a      	b.n	8011e56 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8011de0:	683a      	ldr	r2, [r7, #0]
 8011de2:	69fb      	ldr	r3, [r7, #28]
 8011de4:	1ad3      	subs	r3, r2, r3
 8011de6:	603b      	str	r3, [r7, #0]
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	699a      	ldr	r2, [r3, #24]
 8011dec:	69fb      	ldr	r3, [r7, #28]
 8011dee:	441a      	add	r2, r3
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	7d1b      	ldrb	r3, [r3, #20]
 8011df8:	f003 0302 	and.w	r3, r3, #2
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d00b      	beq.n	8011e18 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011e04:	4618      	mov	r0, r3
 8011e06:	f7fd fe54 	bl	800fab2 <create_chain>
 8011e0a:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8011e0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d108      	bne.n	8011e24 <f_lseek+0x30c>
							ofs = 0; break;
 8011e12:	2300      	movs	r3, #0
 8011e14:	603b      	str	r3, [r7, #0]
 8011e16:	e022      	b.n	8011e5e <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011e1c:	4618      	mov	r0, r3
 8011e1e:	f7fd fbf6 	bl	800f60e <get_fat>
 8011e22:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011e24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e2a:	d104      	bne.n	8011e36 <f_lseek+0x31e>
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	2201      	movs	r2, #1
 8011e30:	755a      	strb	r2, [r3, #21]
 8011e32:	2301      	movs	r3, #1
 8011e34:	e090      	b.n	8011f58 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8011e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011e38:	2b01      	cmp	r3, #1
 8011e3a:	d904      	bls.n	8011e46 <f_lseek+0x32e>
 8011e3c:	68bb      	ldr	r3, [r7, #8]
 8011e3e:	6a1b      	ldr	r3, [r3, #32]
 8011e40:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011e42:	429a      	cmp	r2, r3
 8011e44:	d304      	bcc.n	8011e50 <f_lseek+0x338>
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	2202      	movs	r2, #2
 8011e4a:	755a      	strb	r2, [r3, #21]
 8011e4c:	2302      	movs	r3, #2
 8011e4e:	e083      	b.n	8011f58 <f_lseek+0x440>
					fp->clust = clst;
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011e54:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8011e56:	683a      	ldr	r2, [r7, #0]
 8011e58:	69fb      	ldr	r3, [r7, #28]
 8011e5a:	429a      	cmp	r2, r3
 8011e5c:	d8c0      	bhi.n	8011de0 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	699a      	ldr	r2, [r3, #24]
 8011e62:	683b      	ldr	r3, [r7, #0]
 8011e64:	441a      	add	r2, r3
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8011e6a:	68bb      	ldr	r3, [r7, #8]
 8011e6c:	899b      	ldrh	r3, [r3, #12]
 8011e6e:	461a      	mov	r2, r3
 8011e70:	683b      	ldr	r3, [r7, #0]
 8011e72:	fbb3 f1f2 	udiv	r1, r3, r2
 8011e76:	fb01 f202 	mul.w	r2, r1, r2
 8011e7a:	1a9b      	subs	r3, r3, r2
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d016      	beq.n	8011eae <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8011e80:	68bb      	ldr	r3, [r7, #8]
 8011e82:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011e84:	4618      	mov	r0, r3
 8011e86:	f7fd fba3 	bl	800f5d0 <clust2sect>
 8011e8a:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8011e8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d104      	bne.n	8011e9c <f_lseek+0x384>
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	2202      	movs	r2, #2
 8011e96:	755a      	strb	r2, [r3, #21]
 8011e98:	2302      	movs	r3, #2
 8011e9a:	e05d      	b.n	8011f58 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8011e9c:	68bb      	ldr	r3, [r7, #8]
 8011e9e:	899b      	ldrh	r3, [r3, #12]
 8011ea0:	461a      	mov	r2, r3
 8011ea2:	683b      	ldr	r3, [r7, #0]
 8011ea4:	fbb3 f3f2 	udiv	r3, r3, r2
 8011ea8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011eaa:	4413      	add	r3, r2
 8011eac:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	699a      	ldr	r2, [r3, #24]
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	68db      	ldr	r3, [r3, #12]
 8011eb6:	429a      	cmp	r2, r3
 8011eb8:	d90a      	bls.n	8011ed0 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	699a      	ldr	r2, [r3, #24]
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	7d1b      	ldrb	r3, [r3, #20]
 8011ec6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011eca:	b2da      	uxtb	r2, r3
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	699b      	ldr	r3, [r3, #24]
 8011ed4:	68ba      	ldr	r2, [r7, #8]
 8011ed6:	8992      	ldrh	r2, [r2, #12]
 8011ed8:	fbb3 f1f2 	udiv	r1, r3, r2
 8011edc:	fb01 f202 	mul.w	r2, r1, r2
 8011ee0:	1a9b      	subs	r3, r3, r2
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d036      	beq.n	8011f54 <f_lseek+0x43c>
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	6a1b      	ldr	r3, [r3, #32]
 8011eea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011eec:	429a      	cmp	r2, r3
 8011eee:	d031      	beq.n	8011f54 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	7d1b      	ldrb	r3, [r3, #20]
 8011ef4:	b25b      	sxtb	r3, r3
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	da18      	bge.n	8011f2c <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011efa:	68bb      	ldr	r3, [r7, #8]
 8011efc:	7858      	ldrb	r0, [r3, #1]
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	6a1a      	ldr	r2, [r3, #32]
 8011f08:	2301      	movs	r3, #1
 8011f0a:	f7fc ffd5 	bl	800eeb8 <disk_write>
 8011f0e:	4603      	mov	r3, r0
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	d004      	beq.n	8011f1e <f_lseek+0x406>
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	2201      	movs	r2, #1
 8011f18:	755a      	strb	r2, [r3, #21]
 8011f1a:	2301      	movs	r3, #1
 8011f1c:	e01c      	b.n	8011f58 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	7d1b      	ldrb	r3, [r3, #20]
 8011f22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011f26:	b2da      	uxtb	r2, r3
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8011f2c:	68bb      	ldr	r3, [r7, #8]
 8011f2e:	7858      	ldrb	r0, [r3, #1]
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011f36:	2301      	movs	r3, #1
 8011f38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011f3a:	f7fc ff9d 	bl	800ee78 <disk_read>
 8011f3e:	4603      	mov	r3, r0
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d004      	beq.n	8011f4e <f_lseek+0x436>
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	2201      	movs	r2, #1
 8011f48:	755a      	strb	r2, [r3, #21]
 8011f4a:	2301      	movs	r3, #1
 8011f4c:	e004      	b.n	8011f58 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011f52:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8011f54:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8011f58:	4618      	mov	r0, r3
 8011f5a:	3740      	adds	r7, #64	@ 0x40
 8011f5c:	46bd      	mov	sp, r7
 8011f5e:	bd80      	pop	{r7, pc}

08011f60 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8011f60:	b580      	push	{r7, lr}
 8011f62:	b084      	sub	sp, #16
 8011f64:	af00      	add	r7, sp, #0
 8011f66:	6078      	str	r0, [r7, #4]
 8011f68:	460b      	mov	r3, r1
 8011f6a:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8011f6c:	78fb      	ldrb	r3, [r7, #3]
 8011f6e:	2b0a      	cmp	r3, #10
 8011f70:	d103      	bne.n	8011f7a <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8011f72:	210d      	movs	r1, #13
 8011f74:	6878      	ldr	r0, [r7, #4]
 8011f76:	f7ff fff3 	bl	8011f60 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	685b      	ldr	r3, [r3, #4]
 8011f7e:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8011f80:	68fb      	ldr	r3, [r7, #12]
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	db25      	blt.n	8011fd2 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8011f86:	68fb      	ldr	r3, [r7, #12]
 8011f88:	1c5a      	adds	r2, r3, #1
 8011f8a:	60fa      	str	r2, [r7, #12]
 8011f8c:	687a      	ldr	r2, [r7, #4]
 8011f8e:	4413      	add	r3, r2
 8011f90:	78fa      	ldrb	r2, [r7, #3]
 8011f92:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8011f94:	68fb      	ldr	r3, [r7, #12]
 8011f96:	2b3c      	cmp	r3, #60	@ 0x3c
 8011f98:	dd12      	ble.n	8011fc0 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	6818      	ldr	r0, [r3, #0]
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	f103 010c 	add.w	r1, r3, #12
 8011fa4:	68fa      	ldr	r2, [r7, #12]
 8011fa6:	f107 0308 	add.w	r3, r7, #8
 8011faa:	f7ff fb79 	bl	80116a0 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8011fae:	68ba      	ldr	r2, [r7, #8]
 8011fb0:	68fb      	ldr	r3, [r7, #12]
 8011fb2:	429a      	cmp	r2, r3
 8011fb4:	d101      	bne.n	8011fba <putc_bfd+0x5a>
 8011fb6:	2300      	movs	r3, #0
 8011fb8:	e001      	b.n	8011fbe <putc_bfd+0x5e>
 8011fba:	f04f 33ff 	mov.w	r3, #4294967295
 8011fbe:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	68fa      	ldr	r2, [r7, #12]
 8011fc4:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	689b      	ldr	r3, [r3, #8]
 8011fca:	1c5a      	adds	r2, r3, #1
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	609a      	str	r2, [r3, #8]
 8011fd0:	e000      	b.n	8011fd4 <putc_bfd+0x74>
	if (i < 0) return;
 8011fd2:	bf00      	nop
}
 8011fd4:	3710      	adds	r7, #16
 8011fd6:	46bd      	mov	sp, r7
 8011fd8:	bd80      	pop	{r7, pc}

08011fda <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8011fda:	b580      	push	{r7, lr}
 8011fdc:	b084      	sub	sp, #16
 8011fde:	af00      	add	r7, sp, #0
 8011fe0:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	685b      	ldr	r3, [r3, #4]
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	db16      	blt.n	8012018 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	6818      	ldr	r0, [r3, #0]
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	f103 010c 	add.w	r1, r3, #12
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	685b      	ldr	r3, [r3, #4]
 8011ff8:	461a      	mov	r2, r3
 8011ffa:	f107 030c 	add.w	r3, r7, #12
 8011ffe:	f7ff fb4f 	bl	80116a0 <f_write>
 8012002:	4603      	mov	r3, r0
 8012004:	2b00      	cmp	r3, #0
 8012006:	d107      	bne.n	8012018 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	685b      	ldr	r3, [r3, #4]
 801200c:	68fa      	ldr	r2, [r7, #12]
 801200e:	4293      	cmp	r3, r2
 8012010:	d102      	bne.n	8012018 <putc_flush+0x3e>
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	689b      	ldr	r3, [r3, #8]
 8012016:	e001      	b.n	801201c <putc_flush+0x42>
	return EOF;
 8012018:	f04f 33ff 	mov.w	r3, #4294967295
}
 801201c:	4618      	mov	r0, r3
 801201e:	3710      	adds	r7, #16
 8012020:	46bd      	mov	sp, r7
 8012022:	bd80      	pop	{r7, pc}

08012024 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8012024:	b480      	push	{r7}
 8012026:	b083      	sub	sp, #12
 8012028:	af00      	add	r7, sp, #0
 801202a:	6078      	str	r0, [r7, #4]
 801202c:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	683a      	ldr	r2, [r7, #0]
 8012032:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	2200      	movs	r2, #0
 8012038:	605a      	str	r2, [r3, #4]
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	685a      	ldr	r2, [r3, #4]
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	609a      	str	r2, [r3, #8]
}
 8012042:	bf00      	nop
 8012044:	370c      	adds	r7, #12
 8012046:	46bd      	mov	sp, r7
 8012048:	f85d 7b04 	ldr.w	r7, [sp], #4
 801204c:	4770      	bx	lr
	...

08012050 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 8012050:	b40e      	push	{r1, r2, r3}
 8012052:	b580      	push	{r7, lr}
 8012054:	b0a7      	sub	sp, #156	@ 0x9c
 8012056:	af00      	add	r7, sp, #0
 8012058:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 801205a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801205e:	6879      	ldr	r1, [r7, #4]
 8012060:	4618      	mov	r0, r3
 8012062:	f7ff ffdf 	bl	8012024 <putc_init>

	va_start(arp, fmt);
 8012066:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 801206a:	67bb      	str	r3, [r7, #120]	@ 0x78

	for (;;) {
		c = *fmt++;
 801206c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012070:	1c5a      	adds	r2, r3, #1
 8012072:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8012076:	781b      	ldrb	r3, [r3, #0]
 8012078:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == 0) break;			/* End of string */
 801207c:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8012080:	2b00      	cmp	r3, #0
 8012082:	f000 81f2 	beq.w	801246a <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 8012086:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 801208a:	2b25      	cmp	r3, #37	@ 0x25
 801208c:	d008      	beq.n	80120a0 <f_printf+0x50>
			putc_bfd(&pb, c);
 801208e:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 8012092:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012096:	4611      	mov	r1, r2
 8012098:	4618      	mov	r0, r3
 801209a:	f7ff ff61 	bl	8011f60 <putc_bfd>
			continue;
 801209e:	e1e3      	b.n	8012468 <f_printf+0x418>
		}
		w = f = 0;
 80120a0:	2300      	movs	r3, #0
 80120a2:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 80120a6:	2300      	movs	r3, #0
 80120a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
		c = *fmt++;
 80120ac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80120b0:	1c5a      	adds	r2, r3, #1
 80120b2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80120b6:	781b      	ldrb	r3, [r3, #0]
 80120b8:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == '0') {				/* Flag: '0' padding */
 80120bc:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80120c0:	2b30      	cmp	r3, #48	@ 0x30
 80120c2:	d10b      	bne.n	80120dc <f_printf+0x8c>
			f = 1; c = *fmt++;
 80120c4:	2301      	movs	r3, #1
 80120c6:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 80120ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80120ce:	1c5a      	adds	r2, r3, #1
 80120d0:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80120d4:	781b      	ldrb	r3, [r3, #0]
 80120d6:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 80120da:	e024      	b.n	8012126 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 80120dc:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80120e0:	2b2d      	cmp	r3, #45	@ 0x2d
 80120e2:	d120      	bne.n	8012126 <f_printf+0xd6>
				f = 2; c = *fmt++;
 80120e4:	2302      	movs	r3, #2
 80120e6:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 80120ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80120ee:	1c5a      	adds	r2, r3, #1
 80120f0:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80120f4:	781b      	ldrb	r3, [r3, #0]
 80120f6:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 80120fa:	e014      	b.n	8012126 <f_printf+0xd6>
			w = w * 10 + c - '0';
 80120fc:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8012100:	4613      	mov	r3, r2
 8012102:	009b      	lsls	r3, r3, #2
 8012104:	4413      	add	r3, r2
 8012106:	005b      	lsls	r3, r3, #1
 8012108:	461a      	mov	r2, r3
 801210a:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 801210e:	4413      	add	r3, r2
 8012110:	3b30      	subs	r3, #48	@ 0x30
 8012112:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			c = *fmt++;
 8012116:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801211a:	1c5a      	adds	r2, r3, #1
 801211c:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8012120:	781b      	ldrb	r3, [r3, #0]
 8012122:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		while (IsDigit(c)) {		/* Precision */
 8012126:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 801212a:	2b2f      	cmp	r3, #47	@ 0x2f
 801212c:	d903      	bls.n	8012136 <f_printf+0xe6>
 801212e:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8012132:	2b39      	cmp	r3, #57	@ 0x39
 8012134:	d9e2      	bls.n	80120fc <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 8012136:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 801213a:	2b6c      	cmp	r3, #108	@ 0x6c
 801213c:	d003      	beq.n	8012146 <f_printf+0xf6>
 801213e:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8012142:	2b4c      	cmp	r3, #76	@ 0x4c
 8012144:	d10d      	bne.n	8012162 <f_printf+0x112>
			f |= 4; c = *fmt++;
 8012146:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 801214a:	f043 0304 	orr.w	r3, r3, #4
 801214e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8012152:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012156:	1c5a      	adds	r2, r3, #1
 8012158:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 801215c:	781b      	ldrb	r3, [r3, #0]
 801215e:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		}
		if (!c) break;
 8012162:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8012166:	2b00      	cmp	r3, #0
 8012168:	f000 8181 	beq.w	801246e <f_printf+0x41e>
		d = c;
 801216c:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8012170:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		if (IsLower(d)) d -= 0x20;
 8012174:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8012178:	2b60      	cmp	r3, #96	@ 0x60
 801217a:	d908      	bls.n	801218e <f_printf+0x13e>
 801217c:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8012180:	2b7a      	cmp	r3, #122	@ 0x7a
 8012182:	d804      	bhi.n	801218e <f_printf+0x13e>
 8012184:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8012188:	3b20      	subs	r3, #32
 801218a:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		switch (d) {				/* Type is... */
 801218e:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8012192:	3b42      	subs	r3, #66	@ 0x42
 8012194:	2b16      	cmp	r3, #22
 8012196:	f200 8098 	bhi.w	80122ca <f_printf+0x27a>
 801219a:	a201      	add	r2, pc, #4	@ (adr r2, 80121a0 <f_printf+0x150>)
 801219c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80121a0:	080122ab 	.word	0x080122ab
 80121a4:	08012293 	.word	0x08012293
 80121a8:	080122bb 	.word	0x080122bb
 80121ac:	080122cb 	.word	0x080122cb
 80121b0:	080122cb 	.word	0x080122cb
 80121b4:	080122cb 	.word	0x080122cb
 80121b8:	080122cb 	.word	0x080122cb
 80121bc:	080122cb 	.word	0x080122cb
 80121c0:	080122cb 	.word	0x080122cb
 80121c4:	080122cb 	.word	0x080122cb
 80121c8:	080122cb 	.word	0x080122cb
 80121cc:	080122cb 	.word	0x080122cb
 80121d0:	080122cb 	.word	0x080122cb
 80121d4:	080122b3 	.word	0x080122b3
 80121d8:	080122cb 	.word	0x080122cb
 80121dc:	080122cb 	.word	0x080122cb
 80121e0:	080122cb 	.word	0x080122cb
 80121e4:	080121fd 	.word	0x080121fd
 80121e8:	080122cb 	.word	0x080122cb
 80121ec:	080122bb 	.word	0x080122bb
 80121f0:	080122cb 	.word	0x080122cb
 80121f4:	080122cb 	.word	0x080122cb
 80121f8:	080122c3 	.word	0x080122c3
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 80121fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80121fe:	1d1a      	adds	r2, r3, #4
 8012200:	67ba      	str	r2, [r7, #120]	@ 0x78
 8012202:	681b      	ldr	r3, [r3, #0]
 8012204:	67fb      	str	r3, [r7, #124]	@ 0x7c
			for (j = 0; p[j]; j++) ;
 8012206:	2300      	movs	r3, #0
 8012208:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801220c:	e004      	b.n	8012218 <f_printf+0x1c8>
 801220e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012212:	3301      	adds	r3, #1
 8012214:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8012218:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801221a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801221e:	4413      	add	r3, r2
 8012220:	781b      	ldrb	r3, [r3, #0]
 8012222:	2b00      	cmp	r3, #0
 8012224:	d1f3      	bne.n	801220e <f_printf+0x1be>
			if (!(f & 2)) {
 8012226:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 801222a:	f003 0302 	and.w	r3, r3, #2
 801222e:	2b00      	cmp	r3, #0
 8012230:	d11a      	bne.n	8012268 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 8012232:	e005      	b.n	8012240 <f_printf+0x1f0>
 8012234:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012238:	2120      	movs	r1, #32
 801223a:	4618      	mov	r0, r3
 801223c:	f7ff fe90 	bl	8011f60 <putc_bfd>
 8012240:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012244:	1c5a      	adds	r2, r3, #1
 8012246:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 801224a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801224e:	429a      	cmp	r2, r3
 8012250:	d8f0      	bhi.n	8012234 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 8012252:	e009      	b.n	8012268 <f_printf+0x218>
 8012254:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8012256:	1c5a      	adds	r2, r3, #1
 8012258:	67fa      	str	r2, [r7, #124]	@ 0x7c
 801225a:	781a      	ldrb	r2, [r3, #0]
 801225c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012260:	4611      	mov	r1, r2
 8012262:	4618      	mov	r0, r3
 8012264:	f7ff fe7c 	bl	8011f60 <putc_bfd>
 8012268:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801226a:	781b      	ldrb	r3, [r3, #0]
 801226c:	2b00      	cmp	r3, #0
 801226e:	d1f1      	bne.n	8012254 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 8012270:	e005      	b.n	801227e <f_printf+0x22e>
 8012272:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012276:	2120      	movs	r1, #32
 8012278:	4618      	mov	r0, r3
 801227a:	f7ff fe71 	bl	8011f60 <putc_bfd>
 801227e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012282:	1c5a      	adds	r2, r3, #1
 8012284:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8012288:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801228c:	429a      	cmp	r2, r3
 801228e:	d8f0      	bhi.n	8012272 <f_printf+0x222>
			continue;
 8012290:	e0ea      	b.n	8012468 <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 8012292:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012294:	1d1a      	adds	r2, r3, #4
 8012296:	67ba      	str	r2, [r7, #120]	@ 0x78
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	b2da      	uxtb	r2, r3
 801229c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80122a0:	4611      	mov	r1, r2
 80122a2:	4618      	mov	r0, r3
 80122a4:	f7ff fe5c 	bl	8011f60 <putc_bfd>
 80122a8:	e0de      	b.n	8012468 <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 80122aa:	2302      	movs	r3, #2
 80122ac:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 80122b0:	e014      	b.n	80122dc <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 80122b2:	2308      	movs	r3, #8
 80122b4:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 80122b8:	e010      	b.n	80122dc <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 80122ba:	230a      	movs	r3, #10
 80122bc:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 80122c0:	e00c      	b.n	80122dc <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 80122c2:	2310      	movs	r3, #16
 80122c4:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 80122c8:	e008      	b.n	80122dc <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 80122ca:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 80122ce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80122d2:	4611      	mov	r1, r2
 80122d4:	4618      	mov	r0, r3
 80122d6:	f7ff fe43 	bl	8011f60 <putc_bfd>
 80122da:	e0c5      	b.n	8012468 <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 80122dc:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80122e0:	f003 0304 	and.w	r3, r3, #4
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d004      	beq.n	80122f2 <f_printf+0x2a2>
 80122e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80122ea:	1d1a      	adds	r2, r3, #4
 80122ec:	67ba      	str	r2, [r7, #120]	@ 0x78
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	e00c      	b.n	801230c <f_printf+0x2bc>
 80122f2:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 80122f6:	2b44      	cmp	r3, #68	@ 0x44
 80122f8:	d104      	bne.n	8012304 <f_printf+0x2b4>
 80122fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80122fc:	1d1a      	adds	r2, r3, #4
 80122fe:	67ba      	str	r2, [r7, #120]	@ 0x78
 8012300:	681b      	ldr	r3, [r3, #0]
 8012302:	e003      	b.n	801230c <f_printf+0x2bc>
 8012304:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012306:	1d1a      	adds	r2, r3, #4
 8012308:	67ba      	str	r2, [r7, #120]	@ 0x78
 801230a:	681b      	ldr	r3, [r3, #0]
 801230c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		if (d == 'D' && (v & 0x80000000)) {
 8012310:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8012314:	2b44      	cmp	r3, #68	@ 0x44
 8012316:	d10e      	bne.n	8012336 <f_printf+0x2e6>
 8012318:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801231c:	2b00      	cmp	r3, #0
 801231e:	da0a      	bge.n	8012336 <f_printf+0x2e6>
			v = 0 - v;
 8012320:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8012324:	425b      	negs	r3, r3
 8012326:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			f |= 8;
 801232a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 801232e:	f043 0308 	orr.w	r3, r3, #8
 8012332:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		}
		i = 0;
 8012336:	2300      	movs	r3, #0
 8012338:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 801233c:	f897 2096 	ldrb.w	r2, [r7, #150]	@ 0x96
 8012340:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8012344:	fbb3 f1f2 	udiv	r1, r3, r2
 8012348:	fb01 f202 	mul.w	r2, r1, r2
 801234c:	1a9b      	subs	r3, r3, r2
 801234e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
 8012352:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8012356:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801235a:	fbb2 f3f3 	udiv	r3, r2, r3
 801235e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8012362:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8012366:	2b09      	cmp	r3, #9
 8012368:	d90b      	bls.n	8012382 <f_printf+0x332>
 801236a:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 801236e:	2b78      	cmp	r3, #120	@ 0x78
 8012370:	d101      	bne.n	8012376 <f_printf+0x326>
 8012372:	2227      	movs	r2, #39	@ 0x27
 8012374:	e000      	b.n	8012378 <f_printf+0x328>
 8012376:	2207      	movs	r2, #7
 8012378:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 801237c:	4413      	add	r3, r2
 801237e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
			str[i++] = d + '0';
 8012382:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8012386:	1c5a      	adds	r2, r3, #1
 8012388:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 801238c:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 8012390:	3230      	adds	r2, #48	@ 0x30
 8012392:	b2d2      	uxtb	r2, r2
 8012394:	3398      	adds	r3, #152	@ 0x98
 8012396:	443b      	add	r3, r7
 8012398:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 801239c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d003      	beq.n	80123ac <f_printf+0x35c>
 80123a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80123a8:	2b1f      	cmp	r3, #31
 80123aa:	d9c7      	bls.n	801233c <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 80123ac:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80123b0:	f003 0308 	and.w	r3, r3, #8
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	d009      	beq.n	80123cc <f_printf+0x37c>
 80123b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80123bc:	1c5a      	adds	r2, r3, #1
 80123be:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80123c2:	3398      	adds	r3, #152	@ 0x98
 80123c4:	443b      	add	r3, r7
 80123c6:	222d      	movs	r2, #45	@ 0x2d
 80123c8:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 80123cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80123d0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80123d4:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80123d8:	f003 0301 	and.w	r3, r3, #1
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d001      	beq.n	80123e4 <f_printf+0x394>
 80123e0:	2330      	movs	r3, #48	@ 0x30
 80123e2:	e000      	b.n	80123e6 <f_printf+0x396>
 80123e4:	2320      	movs	r3, #32
 80123e6:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 80123ea:	e007      	b.n	80123fc <f_printf+0x3ac>
 80123ec:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 80123f0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80123f4:	4611      	mov	r1, r2
 80123f6:	4618      	mov	r0, r3
 80123f8:	f7ff fdb2 	bl	8011f60 <putc_bfd>
 80123fc:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8012400:	f003 0302 	and.w	r3, r3, #2
 8012404:	2b00      	cmp	r3, #0
 8012406:	d108      	bne.n	801241a <f_printf+0x3ca>
 8012408:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801240c:	1c5a      	adds	r2, r3, #1
 801240e:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8012412:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8012416:	429a      	cmp	r2, r3
 8012418:	d8e8      	bhi.n	80123ec <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 801241a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801241e:	3b01      	subs	r3, #1
 8012420:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8012424:	f107 020c 	add.w	r2, r7, #12
 8012428:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801242c:	4413      	add	r3, r2
 801242e:	781a      	ldrb	r2, [r3, #0]
 8012430:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012434:	4611      	mov	r1, r2
 8012436:	4618      	mov	r0, r3
 8012438:	f7ff fd92 	bl	8011f60 <putc_bfd>
		} while (i);
 801243c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8012440:	2b00      	cmp	r3, #0
 8012442:	d1ea      	bne.n	801241a <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 8012444:	e007      	b.n	8012456 <f_printf+0x406>
 8012446:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 801244a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801244e:	4611      	mov	r1, r2
 8012450:	4618      	mov	r0, r3
 8012452:	f7ff fd85 	bl	8011f60 <putc_bfd>
 8012456:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801245a:	1c5a      	adds	r2, r3, #1
 801245c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8012460:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8012464:	429a      	cmp	r2, r3
 8012466:	d8ee      	bhi.n	8012446 <f_printf+0x3f6>
		c = *fmt++;
 8012468:	e600      	b.n	801206c <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 801246a:	bf00      	nop
 801246c:	e000      	b.n	8012470 <f_printf+0x420>
		if (!c) break;
 801246e:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 8012470:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012474:	4618      	mov	r0, r3
 8012476:	f7ff fdb0 	bl	8011fda <putc_flush>
 801247a:	4603      	mov	r3, r0
}
 801247c:	4618      	mov	r0, r3
 801247e:	379c      	adds	r7, #156	@ 0x9c
 8012480:	46bd      	mov	sp, r7
 8012482:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012486:	b003      	add	sp, #12
 8012488:	4770      	bx	lr
 801248a:	bf00      	nop

0801248c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801248c:	b480      	push	{r7}
 801248e:	b087      	sub	sp, #28
 8012490:	af00      	add	r7, sp, #0
 8012492:	60f8      	str	r0, [r7, #12]
 8012494:	60b9      	str	r1, [r7, #8]
 8012496:	4613      	mov	r3, r2
 8012498:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801249a:	2301      	movs	r3, #1
 801249c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801249e:	2300      	movs	r3, #0
 80124a0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80124a2:	4b1f      	ldr	r3, [pc, #124]	@ (8012520 <FATFS_LinkDriverEx+0x94>)
 80124a4:	7a5b      	ldrb	r3, [r3, #9]
 80124a6:	b2db      	uxtb	r3, r3
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d131      	bne.n	8012510 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80124ac:	4b1c      	ldr	r3, [pc, #112]	@ (8012520 <FATFS_LinkDriverEx+0x94>)
 80124ae:	7a5b      	ldrb	r3, [r3, #9]
 80124b0:	b2db      	uxtb	r3, r3
 80124b2:	461a      	mov	r2, r3
 80124b4:	4b1a      	ldr	r3, [pc, #104]	@ (8012520 <FATFS_LinkDriverEx+0x94>)
 80124b6:	2100      	movs	r1, #0
 80124b8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80124ba:	4b19      	ldr	r3, [pc, #100]	@ (8012520 <FATFS_LinkDriverEx+0x94>)
 80124bc:	7a5b      	ldrb	r3, [r3, #9]
 80124be:	b2db      	uxtb	r3, r3
 80124c0:	4a17      	ldr	r2, [pc, #92]	@ (8012520 <FATFS_LinkDriverEx+0x94>)
 80124c2:	009b      	lsls	r3, r3, #2
 80124c4:	4413      	add	r3, r2
 80124c6:	68fa      	ldr	r2, [r7, #12]
 80124c8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80124ca:	4b15      	ldr	r3, [pc, #84]	@ (8012520 <FATFS_LinkDriverEx+0x94>)
 80124cc:	7a5b      	ldrb	r3, [r3, #9]
 80124ce:	b2db      	uxtb	r3, r3
 80124d0:	461a      	mov	r2, r3
 80124d2:	4b13      	ldr	r3, [pc, #76]	@ (8012520 <FATFS_LinkDriverEx+0x94>)
 80124d4:	4413      	add	r3, r2
 80124d6:	79fa      	ldrb	r2, [r7, #7]
 80124d8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80124da:	4b11      	ldr	r3, [pc, #68]	@ (8012520 <FATFS_LinkDriverEx+0x94>)
 80124dc:	7a5b      	ldrb	r3, [r3, #9]
 80124de:	b2db      	uxtb	r3, r3
 80124e0:	1c5a      	adds	r2, r3, #1
 80124e2:	b2d1      	uxtb	r1, r2
 80124e4:	4a0e      	ldr	r2, [pc, #56]	@ (8012520 <FATFS_LinkDriverEx+0x94>)
 80124e6:	7251      	strb	r1, [r2, #9]
 80124e8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80124ea:	7dbb      	ldrb	r3, [r7, #22]
 80124ec:	3330      	adds	r3, #48	@ 0x30
 80124ee:	b2da      	uxtb	r2, r3
 80124f0:	68bb      	ldr	r3, [r7, #8]
 80124f2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80124f4:	68bb      	ldr	r3, [r7, #8]
 80124f6:	3301      	adds	r3, #1
 80124f8:	223a      	movs	r2, #58	@ 0x3a
 80124fa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80124fc:	68bb      	ldr	r3, [r7, #8]
 80124fe:	3302      	adds	r3, #2
 8012500:	222f      	movs	r2, #47	@ 0x2f
 8012502:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8012504:	68bb      	ldr	r3, [r7, #8]
 8012506:	3303      	adds	r3, #3
 8012508:	2200      	movs	r2, #0
 801250a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801250c:	2300      	movs	r3, #0
 801250e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8012510:	7dfb      	ldrb	r3, [r7, #23]
}
 8012512:	4618      	mov	r0, r3
 8012514:	371c      	adds	r7, #28
 8012516:	46bd      	mov	sp, r7
 8012518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801251c:	4770      	bx	lr
 801251e:	bf00      	nop
 8012520:	24002a80 	.word	0x24002a80

08012524 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8012524:	b580      	push	{r7, lr}
 8012526:	b082      	sub	sp, #8
 8012528:	af00      	add	r7, sp, #0
 801252a:	6078      	str	r0, [r7, #4]
 801252c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801252e:	2200      	movs	r2, #0
 8012530:	6839      	ldr	r1, [r7, #0]
 8012532:	6878      	ldr	r0, [r7, #4]
 8012534:	f7ff ffaa 	bl	801248c <FATFS_LinkDriverEx>
 8012538:	4603      	mov	r3, r0
}
 801253a:	4618      	mov	r0, r3
 801253c:	3708      	adds	r7, #8
 801253e:	46bd      	mov	sp, r7
 8012540:	bd80      	pop	{r7, pc}
	...

08012544 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8012544:	b480      	push	{r7}
 8012546:	b085      	sub	sp, #20
 8012548:	af00      	add	r7, sp, #0
 801254a:	4603      	mov	r3, r0
 801254c:	6039      	str	r1, [r7, #0]
 801254e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8012550:	88fb      	ldrh	r3, [r7, #6]
 8012552:	2b7f      	cmp	r3, #127	@ 0x7f
 8012554:	d802      	bhi.n	801255c <ff_convert+0x18>
		c = chr;
 8012556:	88fb      	ldrh	r3, [r7, #6]
 8012558:	81fb      	strh	r3, [r7, #14]
 801255a:	e025      	b.n	80125a8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 801255c:	683b      	ldr	r3, [r7, #0]
 801255e:	2b00      	cmp	r3, #0
 8012560:	d00b      	beq.n	801257a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8012562:	88fb      	ldrh	r3, [r7, #6]
 8012564:	2bff      	cmp	r3, #255	@ 0xff
 8012566:	d805      	bhi.n	8012574 <ff_convert+0x30>
 8012568:	88fb      	ldrh	r3, [r7, #6]
 801256a:	3b80      	subs	r3, #128	@ 0x80
 801256c:	4a12      	ldr	r2, [pc, #72]	@ (80125b8 <ff_convert+0x74>)
 801256e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012572:	e000      	b.n	8012576 <ff_convert+0x32>
 8012574:	2300      	movs	r3, #0
 8012576:	81fb      	strh	r3, [r7, #14]
 8012578:	e016      	b.n	80125a8 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801257a:	2300      	movs	r3, #0
 801257c:	81fb      	strh	r3, [r7, #14]
 801257e:	e009      	b.n	8012594 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8012580:	89fb      	ldrh	r3, [r7, #14]
 8012582:	4a0d      	ldr	r2, [pc, #52]	@ (80125b8 <ff_convert+0x74>)
 8012584:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012588:	88fa      	ldrh	r2, [r7, #6]
 801258a:	429a      	cmp	r2, r3
 801258c:	d006      	beq.n	801259c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801258e:	89fb      	ldrh	r3, [r7, #14]
 8012590:	3301      	adds	r3, #1
 8012592:	81fb      	strh	r3, [r7, #14]
 8012594:	89fb      	ldrh	r3, [r7, #14]
 8012596:	2b7f      	cmp	r3, #127	@ 0x7f
 8012598:	d9f2      	bls.n	8012580 <ff_convert+0x3c>
 801259a:	e000      	b.n	801259e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 801259c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801259e:	89fb      	ldrh	r3, [r7, #14]
 80125a0:	3380      	adds	r3, #128	@ 0x80
 80125a2:	b29b      	uxth	r3, r3
 80125a4:	b2db      	uxtb	r3, r3
 80125a6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80125a8:	89fb      	ldrh	r3, [r7, #14]
}
 80125aa:	4618      	mov	r0, r3
 80125ac:	3714      	adds	r7, #20
 80125ae:	46bd      	mov	sp, r7
 80125b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125b4:	4770      	bx	lr
 80125b6:	bf00      	nop
 80125b8:	08012b70 	.word	0x08012b70

080125bc <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80125bc:	b480      	push	{r7}
 80125be:	b087      	sub	sp, #28
 80125c0:	af00      	add	r7, sp, #0
 80125c2:	4603      	mov	r3, r0
 80125c4:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80125c6:	88fb      	ldrh	r3, [r7, #6]
 80125c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80125cc:	d201      	bcs.n	80125d2 <ff_wtoupper+0x16>
 80125ce:	4b3e      	ldr	r3, [pc, #248]	@ (80126c8 <ff_wtoupper+0x10c>)
 80125d0:	e000      	b.n	80125d4 <ff_wtoupper+0x18>
 80125d2:	4b3e      	ldr	r3, [pc, #248]	@ (80126cc <ff_wtoupper+0x110>)
 80125d4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80125d6:	697b      	ldr	r3, [r7, #20]
 80125d8:	1c9a      	adds	r2, r3, #2
 80125da:	617a      	str	r2, [r7, #20]
 80125dc:	881b      	ldrh	r3, [r3, #0]
 80125de:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80125e0:	8a7b      	ldrh	r3, [r7, #18]
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d068      	beq.n	80126b8 <ff_wtoupper+0xfc>
 80125e6:	88fa      	ldrh	r2, [r7, #6]
 80125e8:	8a7b      	ldrh	r3, [r7, #18]
 80125ea:	429a      	cmp	r2, r3
 80125ec:	d364      	bcc.n	80126b8 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80125ee:	697b      	ldr	r3, [r7, #20]
 80125f0:	1c9a      	adds	r2, r3, #2
 80125f2:	617a      	str	r2, [r7, #20]
 80125f4:	881b      	ldrh	r3, [r3, #0]
 80125f6:	823b      	strh	r3, [r7, #16]
 80125f8:	8a3b      	ldrh	r3, [r7, #16]
 80125fa:	0a1b      	lsrs	r3, r3, #8
 80125fc:	81fb      	strh	r3, [r7, #14]
 80125fe:	8a3b      	ldrh	r3, [r7, #16]
 8012600:	b2db      	uxtb	r3, r3
 8012602:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8012604:	88fa      	ldrh	r2, [r7, #6]
 8012606:	8a79      	ldrh	r1, [r7, #18]
 8012608:	8a3b      	ldrh	r3, [r7, #16]
 801260a:	440b      	add	r3, r1
 801260c:	429a      	cmp	r2, r3
 801260e:	da49      	bge.n	80126a4 <ff_wtoupper+0xe8>
			switch (cmd) {
 8012610:	89fb      	ldrh	r3, [r7, #14]
 8012612:	2b08      	cmp	r3, #8
 8012614:	d84f      	bhi.n	80126b6 <ff_wtoupper+0xfa>
 8012616:	a201      	add	r2, pc, #4	@ (adr r2, 801261c <ff_wtoupper+0x60>)
 8012618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801261c:	08012641 	.word	0x08012641
 8012620:	08012653 	.word	0x08012653
 8012624:	08012669 	.word	0x08012669
 8012628:	08012671 	.word	0x08012671
 801262c:	08012679 	.word	0x08012679
 8012630:	08012681 	.word	0x08012681
 8012634:	08012689 	.word	0x08012689
 8012638:	08012691 	.word	0x08012691
 801263c:	08012699 	.word	0x08012699
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8012640:	88fa      	ldrh	r2, [r7, #6]
 8012642:	8a7b      	ldrh	r3, [r7, #18]
 8012644:	1ad3      	subs	r3, r2, r3
 8012646:	005b      	lsls	r3, r3, #1
 8012648:	697a      	ldr	r2, [r7, #20]
 801264a:	4413      	add	r3, r2
 801264c:	881b      	ldrh	r3, [r3, #0]
 801264e:	80fb      	strh	r3, [r7, #6]
 8012650:	e027      	b.n	80126a2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8012652:	88fa      	ldrh	r2, [r7, #6]
 8012654:	8a7b      	ldrh	r3, [r7, #18]
 8012656:	1ad3      	subs	r3, r2, r3
 8012658:	b29b      	uxth	r3, r3
 801265a:	f003 0301 	and.w	r3, r3, #1
 801265e:	b29b      	uxth	r3, r3
 8012660:	88fa      	ldrh	r2, [r7, #6]
 8012662:	1ad3      	subs	r3, r2, r3
 8012664:	80fb      	strh	r3, [r7, #6]
 8012666:	e01c      	b.n	80126a2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8012668:	88fb      	ldrh	r3, [r7, #6]
 801266a:	3b10      	subs	r3, #16
 801266c:	80fb      	strh	r3, [r7, #6]
 801266e:	e018      	b.n	80126a2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8012670:	88fb      	ldrh	r3, [r7, #6]
 8012672:	3b20      	subs	r3, #32
 8012674:	80fb      	strh	r3, [r7, #6]
 8012676:	e014      	b.n	80126a2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8012678:	88fb      	ldrh	r3, [r7, #6]
 801267a:	3b30      	subs	r3, #48	@ 0x30
 801267c:	80fb      	strh	r3, [r7, #6]
 801267e:	e010      	b.n	80126a2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8012680:	88fb      	ldrh	r3, [r7, #6]
 8012682:	3b1a      	subs	r3, #26
 8012684:	80fb      	strh	r3, [r7, #6]
 8012686:	e00c      	b.n	80126a2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8012688:	88fb      	ldrh	r3, [r7, #6]
 801268a:	3308      	adds	r3, #8
 801268c:	80fb      	strh	r3, [r7, #6]
 801268e:	e008      	b.n	80126a2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8012690:	88fb      	ldrh	r3, [r7, #6]
 8012692:	3b50      	subs	r3, #80	@ 0x50
 8012694:	80fb      	strh	r3, [r7, #6]
 8012696:	e004      	b.n	80126a2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8012698:	88fb      	ldrh	r3, [r7, #6]
 801269a:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 801269e:	80fb      	strh	r3, [r7, #6]
 80126a0:	bf00      	nop
			}
			break;
 80126a2:	e008      	b.n	80126b6 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80126a4:	89fb      	ldrh	r3, [r7, #14]
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	d195      	bne.n	80125d6 <ff_wtoupper+0x1a>
 80126aa:	8a3b      	ldrh	r3, [r7, #16]
 80126ac:	005b      	lsls	r3, r3, #1
 80126ae:	697a      	ldr	r2, [r7, #20]
 80126b0:	4413      	add	r3, r2
 80126b2:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80126b4:	e78f      	b.n	80125d6 <ff_wtoupper+0x1a>
			break;
 80126b6:	bf00      	nop
	}

	return chr;
 80126b8:	88fb      	ldrh	r3, [r7, #6]
}
 80126ba:	4618      	mov	r0, r3
 80126bc:	371c      	adds	r7, #28
 80126be:	46bd      	mov	sp, r7
 80126c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126c4:	4770      	bx	lr
 80126c6:	bf00      	nop
 80126c8:	08012c70 	.word	0x08012c70
 80126cc:	08012e64 	.word	0x08012e64

080126d0 <memset>:
 80126d0:	4402      	add	r2, r0
 80126d2:	4603      	mov	r3, r0
 80126d4:	4293      	cmp	r3, r2
 80126d6:	d100      	bne.n	80126da <memset+0xa>
 80126d8:	4770      	bx	lr
 80126da:	f803 1b01 	strb.w	r1, [r3], #1
 80126de:	e7f9      	b.n	80126d4 <memset+0x4>

080126e0 <__errno>:
 80126e0:	4b01      	ldr	r3, [pc, #4]	@ (80126e8 <__errno+0x8>)
 80126e2:	6818      	ldr	r0, [r3, #0]
 80126e4:	4770      	bx	lr
 80126e6:	bf00      	nop
 80126e8:	240000c0 	.word	0x240000c0

080126ec <__libc_init_array>:
 80126ec:	b570      	push	{r4, r5, r6, lr}
 80126ee:	4d0d      	ldr	r5, [pc, #52]	@ (8012724 <__libc_init_array+0x38>)
 80126f0:	4c0d      	ldr	r4, [pc, #52]	@ (8012728 <__libc_init_array+0x3c>)
 80126f2:	1b64      	subs	r4, r4, r5
 80126f4:	10a4      	asrs	r4, r4, #2
 80126f6:	2600      	movs	r6, #0
 80126f8:	42a6      	cmp	r6, r4
 80126fa:	d109      	bne.n	8012710 <__libc_init_array+0x24>
 80126fc:	4d0b      	ldr	r5, [pc, #44]	@ (801272c <__libc_init_array+0x40>)
 80126fe:	4c0c      	ldr	r4, [pc, #48]	@ (8012730 <__libc_init_array+0x44>)
 8012700:	f000 f952 	bl	80129a8 <_init>
 8012704:	1b64      	subs	r4, r4, r5
 8012706:	10a4      	asrs	r4, r4, #2
 8012708:	2600      	movs	r6, #0
 801270a:	42a6      	cmp	r6, r4
 801270c:	d105      	bne.n	801271a <__libc_init_array+0x2e>
 801270e:	bd70      	pop	{r4, r5, r6, pc}
 8012710:	f855 3b04 	ldr.w	r3, [r5], #4
 8012714:	4798      	blx	r3
 8012716:	3601      	adds	r6, #1
 8012718:	e7ee      	b.n	80126f8 <__libc_init_array+0xc>
 801271a:	f855 3b04 	ldr.w	r3, [r5], #4
 801271e:	4798      	blx	r3
 8012720:	3601      	adds	r6, #1
 8012722:	e7f2      	b.n	801270a <__libc_init_array+0x1e>
 8012724:	080137b8 	.word	0x080137b8
 8012728:	080137b8 	.word	0x080137b8
 801272c:	080137b8 	.word	0x080137b8
 8012730:	080137bc 	.word	0x080137bc

08012734 <memcpy>:
 8012734:	440a      	add	r2, r1
 8012736:	4291      	cmp	r1, r2
 8012738:	f100 33ff 	add.w	r3, r0, #4294967295
 801273c:	d100      	bne.n	8012740 <memcpy+0xc>
 801273e:	4770      	bx	lr
 8012740:	b510      	push	{r4, lr}
 8012742:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012746:	f803 4f01 	strb.w	r4, [r3, #1]!
 801274a:	4291      	cmp	r1, r2
 801274c:	d1f9      	bne.n	8012742 <memcpy+0xe>
 801274e:	bd10      	pop	{r4, pc}

08012750 <log>:
 8012750:	b4f0      	push	{r4, r5, r6, r7}
 8012752:	ee10 0a90 	vmov	r0, s1
 8012756:	ee10 3a10 	vmov	r3, s0
 801275a:	f04f 34ff 	mov.w	r4, #4294967295
 801275e:	429c      	cmp	r4, r3
 8012760:	f100 4140 	add.w	r1, r0, #3221225472	@ 0xc0000000
 8012764:	4c70      	ldr	r4, [pc, #448]	@ (8012928 <log+0x1d8>)
 8012766:	f501 1190 	add.w	r1, r1, #1179648	@ 0x120000
 801276a:	418c      	sbcs	r4, r1
 801276c:	ed2d 8b02 	vpush	{d8}
 8012770:	ea4f 4210 	mov.w	r2, r0, lsr #16
 8012774:	d35a      	bcc.n	801282c <log+0xdc>
 8012776:	4a6d      	ldr	r2, [pc, #436]	@ (801292c <log+0x1dc>)
 8012778:	4290      	cmp	r0, r2
 801277a:	bf08      	it	eq
 801277c:	2b00      	cmpeq	r3, #0
 801277e:	f000 80c4 	beq.w	801290a <log+0x1ba>
 8012782:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 8012786:	ee30 0b47 	vsub.f64	d0, d0, d7
 801278a:	4b69      	ldr	r3, [pc, #420]	@ (8012930 <log+0x1e0>)
 801278c:	ee20 2b00 	vmul.f64	d2, d0, d0
 8012790:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 8012794:	ee20 4b02 	vmul.f64	d4, d0, d2
 8012798:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 801279c:	eea6 7b00 	vfma.f64	d7, d6, d0
 80127a0:	ed93 6b14 	vldr	d6, [r3, #80]	@ 0x50
 80127a4:	ed93 5b18 	vldr	d5, [r3, #96]	@ 0x60
 80127a8:	eea6 7b02 	vfma.f64	d7, d6, d2
 80127ac:	ed93 6b16 	vldr	d6, [r3, #88]	@ 0x58
 80127b0:	eea5 6b00 	vfma.f64	d6, d5, d0
 80127b4:	ed93 5b1a 	vldr	d5, [r3, #104]	@ 0x68
 80127b8:	ed93 3b1e 	vldr	d3, [r3, #120]	@ 0x78
 80127bc:	eea5 6b02 	vfma.f64	d6, d5, d2
 80127c0:	ed93 5b1c 	vldr	d5, [r3, #112]	@ 0x70
 80127c4:	eea3 5b00 	vfma.f64	d5, d3, d0
 80127c8:	ed93 3b20 	vldr	d3, [r3, #128]	@ 0x80
 80127cc:	eea3 5b02 	vfma.f64	d5, d3, d2
 80127d0:	ed93 3b22 	vldr	d3, [r3, #136]	@ 0x88
 80127d4:	eea3 5b04 	vfma.f64	d5, d3, d4
 80127d8:	eea5 6b04 	vfma.f64	d6, d5, d4
 80127dc:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 80127e0:	eea6 7b04 	vfma.f64	d7, d6, d4
 80127e4:	eeb0 2b47 	vmov.f64	d2, d7
 80127e8:	ed9f 7b49 	vldr	d7, [pc, #292]	@ 8012910 <log+0x1c0>
 80127ec:	eeb0 6b40 	vmov.f64	d6, d0
 80127f0:	eeb0 3b40 	vmov.f64	d3, d0
 80127f4:	eea0 6b07 	vfma.f64	d6, d0, d7
 80127f8:	eea0 6b47 	vfms.f64	d6, d0, d7
 80127fc:	ee30 8b46 	vsub.f64	d8, d0, d6
 8012800:	ee26 1b06 	vmul.f64	d1, d6, d6
 8012804:	eea1 3b05 	vfma.f64	d3, d1, d5
 8012808:	ee30 7b43 	vsub.f64	d7, d0, d3
 801280c:	ee30 0b06 	vadd.f64	d0, d0, d6
 8012810:	eea1 7b05 	vfma.f64	d7, d1, d5
 8012814:	ee25 5b08 	vmul.f64	d5, d5, d8
 8012818:	eea5 7b00 	vfma.f64	d7, d5, d0
 801281c:	eea2 7b04 	vfma.f64	d7, d2, d4
 8012820:	ee33 0b07 	vadd.f64	d0, d3, d7
 8012824:	ecbd 8b02 	vpop	{d8}
 8012828:	bcf0      	pop	{r4, r5, r6, r7}
 801282a:	4770      	bx	lr
 801282c:	f1a2 0410 	sub.w	r4, r2, #16
 8012830:	f647 71df 	movw	r1, #32735	@ 0x7fdf
 8012834:	428c      	cmp	r4, r1
 8012836:	d923      	bls.n	8012880 <log+0x130>
 8012838:	18d9      	adds	r1, r3, r3
 801283a:	eb40 0400 	adc.w	r4, r0, r0
 801283e:	4321      	orrs	r1, r4
 8012840:	d105      	bne.n	801284e <log+0xfe>
 8012842:	ecbd 8b02 	vpop	{d8}
 8012846:	2001      	movs	r0, #1
 8012848:	bcf0      	pop	{r4, r5, r6, r7}
 801284a:	f000 b885 	b.w	8012958 <__math_divzero>
 801284e:	4939      	ldr	r1, [pc, #228]	@ (8012934 <log+0x1e4>)
 8012850:	4288      	cmp	r0, r1
 8012852:	bf08      	it	eq
 8012854:	2b00      	cmpeq	r3, #0
 8012856:	d0e5      	beq.n	8012824 <log+0xd4>
 8012858:	0413      	lsls	r3, r2, #16
 801285a:	d403      	bmi.n	8012864 <log+0x114>
 801285c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8012860:	4393      	bics	r3, r2
 8012862:	d104      	bne.n	801286e <log+0x11e>
 8012864:	ecbd 8b02 	vpop	{d8}
 8012868:	bcf0      	pop	{r4, r5, r6, r7}
 801286a:	f000 b88d 	b.w	8012988 <__math_invalid>
 801286e:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8012918 <log+0x1c8>
 8012872:	ee20 7b07 	vmul.f64	d7, d0, d7
 8012876:	ec53 2b17 	vmov	r2, r3, d7
 801287a:	f1a3 7050 	sub.w	r0, r3, #54525952	@ 0x3400000
 801287e:	4613      	mov	r3, r2
 8012880:	f100 4240 	add.w	r2, r0, #3221225472	@ 0xc0000000
 8012884:	492a      	ldr	r1, [pc, #168]	@ (8012930 <log+0x1e0>)
 8012886:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 801288a:	f502 12d0 	add.w	r2, r2, #1703936	@ 0x1a0000
 801288e:	f3c2 3446 	ubfx	r4, r2, #13, #7
 8012892:	0d15      	lsrs	r5, r2, #20
 8012894:	eb01 1c04 	add.w	ip, r1, r4, lsl #4
 8012898:	052d      	lsls	r5, r5, #20
 801289a:	ed9c 7b24 	vldr	d7, [ip, #144]	@ 0x90
 801289e:	1e1e      	subs	r6, r3, #0
 80128a0:	1b47      	subs	r7, r0, r5
 80128a2:	ec47 6b16 	vmov	d6, r6, r7
 80128a6:	1512      	asrs	r2, r2, #20
 80128a8:	eea7 5b06 	vfma.f64	d5, d7, d6
 80128ac:	ee07 2a90 	vmov	s15, r2
 80128b0:	ee25 2b05 	vmul.f64	d2, d5, d5
 80128b4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80128b8:	ed91 4b00 	vldr	d4, [r1]
 80128bc:	ee25 1b02 	vmul.f64	d1, d5, d2
 80128c0:	ed9c 7b26 	vldr	d7, [ip, #152]	@ 0x98
 80128c4:	eea4 7b06 	vfma.f64	d7, d4, d6
 80128c8:	ee35 4b07 	vadd.f64	d4, d5, d7
 80128cc:	ee37 0b44 	vsub.f64	d0, d7, d4
 80128d0:	ed91 7b02 	vldr	d7, [r1, #8]
 80128d4:	ee30 0b05 	vadd.f64	d0, d0, d5
 80128d8:	eea7 0b06 	vfma.f64	d0, d7, d6
 80128dc:	ed91 7b04 	vldr	d7, [r1, #16]
 80128e0:	ed91 6b08 	vldr	d6, [r1, #32]
 80128e4:	eea7 0b02 	vfma.f64	d0, d7, d2
 80128e8:	ed91 7b06 	vldr	d7, [r1, #24]
 80128ec:	ed91 3b0c 	vldr	d3, [r1, #48]	@ 0x30
 80128f0:	eea6 7b05 	vfma.f64	d7, d6, d5
 80128f4:	ed91 6b0a 	vldr	d6, [r1, #40]	@ 0x28
 80128f8:	eea3 6b05 	vfma.f64	d6, d3, d5
 80128fc:	eea6 7b02 	vfma.f64	d7, d6, d2
 8012900:	eea1 0b07 	vfma.f64	d0, d1, d7
 8012904:	ee30 0b04 	vadd.f64	d0, d0, d4
 8012908:	e78c      	b.n	8012824 <log+0xd4>
 801290a:	ed9f 0b05 	vldr	d0, [pc, #20]	@ 8012920 <log+0x1d0>
 801290e:	e789      	b.n	8012824 <log+0xd4>
 8012910:	00000000 	.word	0x00000000
 8012914:	41a00000 	.word	0x41a00000
 8012918:	00000000 	.word	0x00000000
 801291c:	43300000 	.word	0x43300000
	...
 8012928:	000308ff 	.word	0x000308ff
 801292c:	3ff00000 	.word	0x3ff00000
 8012930:	08012f20 	.word	0x08012f20
 8012934:	7ff00000 	.word	0x7ff00000

08012938 <with_errno>:
 8012938:	b510      	push	{r4, lr}
 801293a:	ed2d 8b02 	vpush	{d8}
 801293e:	eeb0 8b40 	vmov.f64	d8, d0
 8012942:	4604      	mov	r4, r0
 8012944:	f7ff fecc 	bl	80126e0 <__errno>
 8012948:	eeb0 0b48 	vmov.f64	d0, d8
 801294c:	ecbd 8b02 	vpop	{d8}
 8012950:	6004      	str	r4, [r0, #0]
 8012952:	bd10      	pop	{r4, pc}
 8012954:	0000      	movs	r0, r0
	...

08012958 <__math_divzero>:
 8012958:	b082      	sub	sp, #8
 801295a:	2800      	cmp	r0, #0
 801295c:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8012960:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 8012964:	fe07 7b06 	vseleq.f64	d7, d7, d6
 8012968:	ed8d 7b00 	vstr	d7, [sp]
 801296c:	ed9d 0b00 	vldr	d0, [sp]
 8012970:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 8012980 <__math_divzero+0x28>
 8012974:	2022      	movs	r0, #34	@ 0x22
 8012976:	ee80 0b07 	vdiv.f64	d0, d0, d7
 801297a:	b002      	add	sp, #8
 801297c:	f7ff bfdc 	b.w	8012938 <with_errno>
	...

08012988 <__math_invalid>:
 8012988:	eeb0 7b40 	vmov.f64	d7, d0
 801298c:	eeb4 7b47 	vcmp.f64	d7, d7
 8012990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012994:	ee30 6b40 	vsub.f64	d6, d0, d0
 8012998:	ee86 0b06 	vdiv.f64	d0, d6, d6
 801299c:	d602      	bvs.n	80129a4 <__math_invalid+0x1c>
 801299e:	2021      	movs	r0, #33	@ 0x21
 80129a0:	f7ff bfca 	b.w	8012938 <with_errno>
 80129a4:	4770      	bx	lr
	...

080129a8 <_init>:
 80129a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129aa:	bf00      	nop
 80129ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80129ae:	bc08      	pop	{r3}
 80129b0:	469e      	mov	lr, r3
 80129b2:	4770      	bx	lr

080129b4 <_fini>:
 80129b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129b6:	bf00      	nop
 80129b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80129ba:	bc08      	pop	{r3}
 80129bc:	469e      	mov	lr, r3
 80129be:	4770      	bx	lr
