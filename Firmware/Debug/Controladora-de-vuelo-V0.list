
Controladora-de-vuelo-V0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019a20  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d90  08019cd0  08019cd0  0001acd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801aa60  0801aa60  0001ba60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801aa68  0801aa68  0001ba68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801aa6c  0801aa6c  0001ba6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000290  24000000  0801aa70  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000065ec  24000290  0801ad00  0001c290  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400687c  0801ad00  0001c87c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001c290  2**0
                  CONTENTS, READONLY
 10 .debug_info   000358a1  00000000  00000000  0001c2be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00007e56  00000000  00000000  00051b5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000029a8  00000000  00000000  000599b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00002007  00000000  00000000  0005c360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003dc4b  00000000  00000000  0005e367  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00042236  00000000  00000000  0009bfb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016185d  00000000  00000000  000de1e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0023fa45  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000bcb0  00000000  00000000  0023fa88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006a  00000000  00000000  0024b738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000290 	.word	0x24000290
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08019cb8 	.word	0x08019cb8

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000294 	.word	0x24000294
 80002ec:	08019cb8 	.word	0x08019cb8

080002f0 <strcmp>:
 80002f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002f8:	2a01      	cmp	r2, #1
 80002fa:	bf28      	it	cs
 80002fc:	429a      	cmpcs	r2, r3
 80002fe:	d0f7      	beq.n	80002f0 <strcmp>
 8000300:	1ad0      	subs	r0, r2, r3
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	@ 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_ldivmod>:
 8000728:	b97b      	cbnz	r3, 800074a <__aeabi_ldivmod+0x22>
 800072a:	b972      	cbnz	r2, 800074a <__aeabi_ldivmod+0x22>
 800072c:	2900      	cmp	r1, #0
 800072e:	bfbe      	ittt	lt
 8000730:	2000      	movlt	r0, #0
 8000732:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000736:	e006      	blt.n	8000746 <__aeabi_ldivmod+0x1e>
 8000738:	bf08      	it	eq
 800073a:	2800      	cmpeq	r0, #0
 800073c:	bf1c      	itt	ne
 800073e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000742:	f04f 30ff 	movne.w	r0, #4294967295
 8000746:	f000 b9ed 	b.w	8000b24 <__aeabi_idiv0>
 800074a:	f1ad 0c08 	sub.w	ip, sp, #8
 800074e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000752:	2900      	cmp	r1, #0
 8000754:	db09      	blt.n	800076a <__aeabi_ldivmod+0x42>
 8000756:	2b00      	cmp	r3, #0
 8000758:	db1a      	blt.n	8000790 <__aeabi_ldivmod+0x68>
 800075a:	f000 f885 	bl	8000868 <__udivmoddi4>
 800075e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000762:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000766:	b004      	add	sp, #16
 8000768:	4770      	bx	lr
 800076a:	4240      	negs	r0, r0
 800076c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000770:	2b00      	cmp	r3, #0
 8000772:	db1b      	blt.n	80007ac <__aeabi_ldivmod+0x84>
 8000774:	f000 f878 	bl	8000868 <__udivmoddi4>
 8000778:	f8dd e004 	ldr.w	lr, [sp, #4]
 800077c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000780:	b004      	add	sp, #16
 8000782:	4240      	negs	r0, r0
 8000784:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000788:	4252      	negs	r2, r2
 800078a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800078e:	4770      	bx	lr
 8000790:	4252      	negs	r2, r2
 8000792:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000796:	f000 f867 	bl	8000868 <__udivmoddi4>
 800079a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800079e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007a2:	b004      	add	sp, #16
 80007a4:	4240      	negs	r0, r0
 80007a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007aa:	4770      	bx	lr
 80007ac:	4252      	negs	r2, r2
 80007ae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007b2:	f000 f859 	bl	8000868 <__udivmoddi4>
 80007b6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007be:	b004      	add	sp, #16
 80007c0:	4252      	negs	r2, r2
 80007c2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007c6:	4770      	bx	lr

080007c8 <__aeabi_uldivmod>:
 80007c8:	b953      	cbnz	r3, 80007e0 <__aeabi_uldivmod+0x18>
 80007ca:	b94a      	cbnz	r2, 80007e0 <__aeabi_uldivmod+0x18>
 80007cc:	2900      	cmp	r1, #0
 80007ce:	bf08      	it	eq
 80007d0:	2800      	cmpeq	r0, #0
 80007d2:	bf1c      	itt	ne
 80007d4:	f04f 31ff 	movne.w	r1, #4294967295
 80007d8:	f04f 30ff 	movne.w	r0, #4294967295
 80007dc:	f000 b9a2 	b.w	8000b24 <__aeabi_idiv0>
 80007e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80007e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007e8:	f000 f83e 	bl	8000868 <__udivmoddi4>
 80007ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007f4:	b004      	add	sp, #16
 80007f6:	4770      	bx	lr

080007f8 <__aeabi_d2lz>:
 80007f8:	b508      	push	{r3, lr}
 80007fa:	4602      	mov	r2, r0
 80007fc:	460b      	mov	r3, r1
 80007fe:	ec43 2b17 	vmov	d7, r2, r3
 8000802:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800080a:	d403      	bmi.n	8000814 <__aeabi_d2lz+0x1c>
 800080c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000810:	f000 b80a 	b.w	8000828 <__aeabi_d2ulz>
 8000814:	eeb1 7b47 	vneg.f64	d7, d7
 8000818:	ec51 0b17 	vmov	r0, r1, d7
 800081c:	f000 f804 	bl	8000828 <__aeabi_d2ulz>
 8000820:	4240      	negs	r0, r0
 8000822:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000826:	bd08      	pop	{r3, pc}

08000828 <__aeabi_d2ulz>:
 8000828:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000858 <__aeabi_d2ulz+0x30>
 800082c:	ec41 0b17 	vmov	d7, r0, r1
 8000830:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 8000860 <__aeabi_d2ulz+0x38>
 8000834:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000838:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800083c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000840:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000844:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000848:	ee16 1a10 	vmov	r1, s12
 800084c:	ee17 0a90 	vmov	r0, s15
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	f3af 8000 	nop.w
 8000858:	00000000 	.word	0x00000000
 800085c:	3df00000 	.word	0x3df00000
 8000860:	00000000 	.word	0x00000000
 8000864:	41f00000 	.word	0x41f00000

08000868 <__udivmoddi4>:
 8000868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800086c:	9d08      	ldr	r5, [sp, #32]
 800086e:	460c      	mov	r4, r1
 8000870:	2b00      	cmp	r3, #0
 8000872:	d14e      	bne.n	8000912 <__udivmoddi4+0xaa>
 8000874:	4694      	mov	ip, r2
 8000876:	458c      	cmp	ip, r1
 8000878:	4686      	mov	lr, r0
 800087a:	fab2 f282 	clz	r2, r2
 800087e:	d962      	bls.n	8000946 <__udivmoddi4+0xde>
 8000880:	b14a      	cbz	r2, 8000896 <__udivmoddi4+0x2e>
 8000882:	f1c2 0320 	rsb	r3, r2, #32
 8000886:	4091      	lsls	r1, r2
 8000888:	fa20 f303 	lsr.w	r3, r0, r3
 800088c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000890:	4319      	orrs	r1, r3
 8000892:	fa00 fe02 	lsl.w	lr, r0, r2
 8000896:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800089a:	fa1f f68c 	uxth.w	r6, ip
 800089e:	fbb1 f4f7 	udiv	r4, r1, r7
 80008a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008a6:	fb07 1114 	mls	r1, r7, r4, r1
 80008aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008ae:	fb04 f106 	mul.w	r1, r4, r6
 80008b2:	4299      	cmp	r1, r3
 80008b4:	d90a      	bls.n	80008cc <__udivmoddi4+0x64>
 80008b6:	eb1c 0303 	adds.w	r3, ip, r3
 80008ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80008be:	f080 8112 	bcs.w	8000ae6 <__udivmoddi4+0x27e>
 80008c2:	4299      	cmp	r1, r3
 80008c4:	f240 810f 	bls.w	8000ae6 <__udivmoddi4+0x27e>
 80008c8:	3c02      	subs	r4, #2
 80008ca:	4463      	add	r3, ip
 80008cc:	1a59      	subs	r1, r3, r1
 80008ce:	fa1f f38e 	uxth.w	r3, lr
 80008d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80008d6:	fb07 1110 	mls	r1, r7, r0, r1
 80008da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008de:	fb00 f606 	mul.w	r6, r0, r6
 80008e2:	429e      	cmp	r6, r3
 80008e4:	d90a      	bls.n	80008fc <__udivmoddi4+0x94>
 80008e6:	eb1c 0303 	adds.w	r3, ip, r3
 80008ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80008ee:	f080 80fc 	bcs.w	8000aea <__udivmoddi4+0x282>
 80008f2:	429e      	cmp	r6, r3
 80008f4:	f240 80f9 	bls.w	8000aea <__udivmoddi4+0x282>
 80008f8:	4463      	add	r3, ip
 80008fa:	3802      	subs	r0, #2
 80008fc:	1b9b      	subs	r3, r3, r6
 80008fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000902:	2100      	movs	r1, #0
 8000904:	b11d      	cbz	r5, 800090e <__udivmoddi4+0xa6>
 8000906:	40d3      	lsrs	r3, r2
 8000908:	2200      	movs	r2, #0
 800090a:	e9c5 3200 	strd	r3, r2, [r5]
 800090e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000912:	428b      	cmp	r3, r1
 8000914:	d905      	bls.n	8000922 <__udivmoddi4+0xba>
 8000916:	b10d      	cbz	r5, 800091c <__udivmoddi4+0xb4>
 8000918:	e9c5 0100 	strd	r0, r1, [r5]
 800091c:	2100      	movs	r1, #0
 800091e:	4608      	mov	r0, r1
 8000920:	e7f5      	b.n	800090e <__udivmoddi4+0xa6>
 8000922:	fab3 f183 	clz	r1, r3
 8000926:	2900      	cmp	r1, #0
 8000928:	d146      	bne.n	80009b8 <__udivmoddi4+0x150>
 800092a:	42a3      	cmp	r3, r4
 800092c:	d302      	bcc.n	8000934 <__udivmoddi4+0xcc>
 800092e:	4290      	cmp	r0, r2
 8000930:	f0c0 80f0 	bcc.w	8000b14 <__udivmoddi4+0x2ac>
 8000934:	1a86      	subs	r6, r0, r2
 8000936:	eb64 0303 	sbc.w	r3, r4, r3
 800093a:	2001      	movs	r0, #1
 800093c:	2d00      	cmp	r5, #0
 800093e:	d0e6      	beq.n	800090e <__udivmoddi4+0xa6>
 8000940:	e9c5 6300 	strd	r6, r3, [r5]
 8000944:	e7e3      	b.n	800090e <__udivmoddi4+0xa6>
 8000946:	2a00      	cmp	r2, #0
 8000948:	f040 8090 	bne.w	8000a6c <__udivmoddi4+0x204>
 800094c:	eba1 040c 	sub.w	r4, r1, ip
 8000950:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000954:	fa1f f78c 	uxth.w	r7, ip
 8000958:	2101      	movs	r1, #1
 800095a:	fbb4 f6f8 	udiv	r6, r4, r8
 800095e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000962:	fb08 4416 	mls	r4, r8, r6, r4
 8000966:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800096a:	fb07 f006 	mul.w	r0, r7, r6
 800096e:	4298      	cmp	r0, r3
 8000970:	d908      	bls.n	8000984 <__udivmoddi4+0x11c>
 8000972:	eb1c 0303 	adds.w	r3, ip, r3
 8000976:	f106 34ff 	add.w	r4, r6, #4294967295
 800097a:	d202      	bcs.n	8000982 <__udivmoddi4+0x11a>
 800097c:	4298      	cmp	r0, r3
 800097e:	f200 80cd 	bhi.w	8000b1c <__udivmoddi4+0x2b4>
 8000982:	4626      	mov	r6, r4
 8000984:	1a1c      	subs	r4, r3, r0
 8000986:	fa1f f38e 	uxth.w	r3, lr
 800098a:	fbb4 f0f8 	udiv	r0, r4, r8
 800098e:	fb08 4410 	mls	r4, r8, r0, r4
 8000992:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000996:	fb00 f707 	mul.w	r7, r0, r7
 800099a:	429f      	cmp	r7, r3
 800099c:	d908      	bls.n	80009b0 <__udivmoddi4+0x148>
 800099e:	eb1c 0303 	adds.w	r3, ip, r3
 80009a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80009a6:	d202      	bcs.n	80009ae <__udivmoddi4+0x146>
 80009a8:	429f      	cmp	r7, r3
 80009aa:	f200 80b0 	bhi.w	8000b0e <__udivmoddi4+0x2a6>
 80009ae:	4620      	mov	r0, r4
 80009b0:	1bdb      	subs	r3, r3, r7
 80009b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009b6:	e7a5      	b.n	8000904 <__udivmoddi4+0x9c>
 80009b8:	f1c1 0620 	rsb	r6, r1, #32
 80009bc:	408b      	lsls	r3, r1
 80009be:	fa22 f706 	lsr.w	r7, r2, r6
 80009c2:	431f      	orrs	r7, r3
 80009c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80009c8:	fa04 f301 	lsl.w	r3, r4, r1
 80009cc:	ea43 030c 	orr.w	r3, r3, ip
 80009d0:	40f4      	lsrs	r4, r6
 80009d2:	fa00 f801 	lsl.w	r8, r0, r1
 80009d6:	0c38      	lsrs	r0, r7, #16
 80009d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80009dc:	fbb4 fef0 	udiv	lr, r4, r0
 80009e0:	fa1f fc87 	uxth.w	ip, r7
 80009e4:	fb00 441e 	mls	r4, r0, lr, r4
 80009e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009ec:	fb0e f90c 	mul.w	r9, lr, ip
 80009f0:	45a1      	cmp	r9, r4
 80009f2:	fa02 f201 	lsl.w	r2, r2, r1
 80009f6:	d90a      	bls.n	8000a0e <__udivmoddi4+0x1a6>
 80009f8:	193c      	adds	r4, r7, r4
 80009fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80009fe:	f080 8084 	bcs.w	8000b0a <__udivmoddi4+0x2a2>
 8000a02:	45a1      	cmp	r9, r4
 8000a04:	f240 8081 	bls.w	8000b0a <__udivmoddi4+0x2a2>
 8000a08:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a0c:	443c      	add	r4, r7
 8000a0e:	eba4 0409 	sub.w	r4, r4, r9
 8000a12:	fa1f f983 	uxth.w	r9, r3
 8000a16:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a1a:	fb00 4413 	mls	r4, r0, r3, r4
 8000a1e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a22:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a26:	45a4      	cmp	ip, r4
 8000a28:	d907      	bls.n	8000a3a <__udivmoddi4+0x1d2>
 8000a2a:	193c      	adds	r4, r7, r4
 8000a2c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a30:	d267      	bcs.n	8000b02 <__udivmoddi4+0x29a>
 8000a32:	45a4      	cmp	ip, r4
 8000a34:	d965      	bls.n	8000b02 <__udivmoddi4+0x29a>
 8000a36:	3b02      	subs	r3, #2
 8000a38:	443c      	add	r4, r7
 8000a3a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a3e:	fba0 9302 	umull	r9, r3, r0, r2
 8000a42:	eba4 040c 	sub.w	r4, r4, ip
 8000a46:	429c      	cmp	r4, r3
 8000a48:	46ce      	mov	lr, r9
 8000a4a:	469c      	mov	ip, r3
 8000a4c:	d351      	bcc.n	8000af2 <__udivmoddi4+0x28a>
 8000a4e:	d04e      	beq.n	8000aee <__udivmoddi4+0x286>
 8000a50:	b155      	cbz	r5, 8000a68 <__udivmoddi4+0x200>
 8000a52:	ebb8 030e 	subs.w	r3, r8, lr
 8000a56:	eb64 040c 	sbc.w	r4, r4, ip
 8000a5a:	fa04 f606 	lsl.w	r6, r4, r6
 8000a5e:	40cb      	lsrs	r3, r1
 8000a60:	431e      	orrs	r6, r3
 8000a62:	40cc      	lsrs	r4, r1
 8000a64:	e9c5 6400 	strd	r6, r4, [r5]
 8000a68:	2100      	movs	r1, #0
 8000a6a:	e750      	b.n	800090e <__udivmoddi4+0xa6>
 8000a6c:	f1c2 0320 	rsb	r3, r2, #32
 8000a70:	fa20 f103 	lsr.w	r1, r0, r3
 8000a74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a78:	fa24 f303 	lsr.w	r3, r4, r3
 8000a7c:	4094      	lsls	r4, r2
 8000a7e:	430c      	orrs	r4, r1
 8000a80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a84:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a88:	fa1f f78c 	uxth.w	r7, ip
 8000a8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a90:	fb08 3110 	mls	r1, r8, r0, r3
 8000a94:	0c23      	lsrs	r3, r4, #16
 8000a96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a9a:	fb00 f107 	mul.w	r1, r0, r7
 8000a9e:	4299      	cmp	r1, r3
 8000aa0:	d908      	bls.n	8000ab4 <__udivmoddi4+0x24c>
 8000aa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000aa6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000aaa:	d22c      	bcs.n	8000b06 <__udivmoddi4+0x29e>
 8000aac:	4299      	cmp	r1, r3
 8000aae:	d92a      	bls.n	8000b06 <__udivmoddi4+0x29e>
 8000ab0:	3802      	subs	r0, #2
 8000ab2:	4463      	add	r3, ip
 8000ab4:	1a5b      	subs	r3, r3, r1
 8000ab6:	b2a4      	uxth	r4, r4
 8000ab8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000abc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ac0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ac4:	fb01 f307 	mul.w	r3, r1, r7
 8000ac8:	42a3      	cmp	r3, r4
 8000aca:	d908      	bls.n	8000ade <__udivmoddi4+0x276>
 8000acc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ad0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ad4:	d213      	bcs.n	8000afe <__udivmoddi4+0x296>
 8000ad6:	42a3      	cmp	r3, r4
 8000ad8:	d911      	bls.n	8000afe <__udivmoddi4+0x296>
 8000ada:	3902      	subs	r1, #2
 8000adc:	4464      	add	r4, ip
 8000ade:	1ae4      	subs	r4, r4, r3
 8000ae0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ae4:	e739      	b.n	800095a <__udivmoddi4+0xf2>
 8000ae6:	4604      	mov	r4, r0
 8000ae8:	e6f0      	b.n	80008cc <__udivmoddi4+0x64>
 8000aea:	4608      	mov	r0, r1
 8000aec:	e706      	b.n	80008fc <__udivmoddi4+0x94>
 8000aee:	45c8      	cmp	r8, r9
 8000af0:	d2ae      	bcs.n	8000a50 <__udivmoddi4+0x1e8>
 8000af2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000af6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000afa:	3801      	subs	r0, #1
 8000afc:	e7a8      	b.n	8000a50 <__udivmoddi4+0x1e8>
 8000afe:	4631      	mov	r1, r6
 8000b00:	e7ed      	b.n	8000ade <__udivmoddi4+0x276>
 8000b02:	4603      	mov	r3, r0
 8000b04:	e799      	b.n	8000a3a <__udivmoddi4+0x1d2>
 8000b06:	4630      	mov	r0, r6
 8000b08:	e7d4      	b.n	8000ab4 <__udivmoddi4+0x24c>
 8000b0a:	46d6      	mov	lr, sl
 8000b0c:	e77f      	b.n	8000a0e <__udivmoddi4+0x1a6>
 8000b0e:	4463      	add	r3, ip
 8000b10:	3802      	subs	r0, #2
 8000b12:	e74d      	b.n	80009b0 <__udivmoddi4+0x148>
 8000b14:	4606      	mov	r6, r0
 8000b16:	4623      	mov	r3, r4
 8000b18:	4608      	mov	r0, r1
 8000b1a:	e70f      	b.n	800093c <__udivmoddi4+0xd4>
 8000b1c:	3e02      	subs	r6, #2
 8000b1e:	4463      	add	r3, ip
 8000b20:	e730      	b.n	8000984 <__udivmoddi4+0x11c>
 8000b22:	bf00      	nop

08000b24 <__aeabi_idiv0>:
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <init_PIDs>:
float theta_ref , phi_ref;
float error_phi ,  error_theta ;
float u_phi, u_theta ;

void init_PIDs(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
	//para inicializacion del roll

	pid_roll.Kp = KP_roll;
 8000b2c:	4b13      	ldr	r3, [pc, #76]	@ (8000b7c <init_PIDs+0x54>)
 8000b2e:	4a14      	ldr	r2, [pc, #80]	@ (8000b80 <init_PIDs+0x58>)
 8000b30:	601a      	str	r2, [r3, #0]
	pid_roll.Ki = KI_roll;
 8000b32:	4b12      	ldr	r3, [pc, #72]	@ (8000b7c <init_PIDs+0x54>)
 8000b34:	f04f 0200 	mov.w	r2, #0
 8000b38:	605a      	str	r2, [r3, #4]
	pid_roll.integrator = 0.0f;
 8000b3a:	4b10      	ldr	r3, [pc, #64]	@ (8000b7c <init_PIDs+0x54>)
 8000b3c:	f04f 0200 	mov.w	r2, #0
 8000b40:	609a      	str	r2, [r3, #8]
	pid_roll.out_min = -1.0f;
 8000b42:	4b0e      	ldr	r3, [pc, #56]	@ (8000b7c <init_PIDs+0x54>)
 8000b44:	4a0f      	ldr	r2, [pc, #60]	@ (8000b84 <init_PIDs+0x5c>)
 8000b46:	60da      	str	r2, [r3, #12]
	pid_roll.out_max = 1.0f;
 8000b48:	4b0c      	ldr	r3, [pc, #48]	@ (8000b7c <init_PIDs+0x54>)
 8000b4a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000b4e:	611a      	str	r2, [r3, #16]

	pid_pitch.Kp = KP_pitch;
 8000b50:	4b0d      	ldr	r3, [pc, #52]	@ (8000b88 <init_PIDs+0x60>)
 8000b52:	4a0e      	ldr	r2, [pc, #56]	@ (8000b8c <init_PIDs+0x64>)
 8000b54:	601a      	str	r2, [r3, #0]
	pid_pitch.Ki = KI_pitch;
 8000b56:	4b0c      	ldr	r3, [pc, #48]	@ (8000b88 <init_PIDs+0x60>)
 8000b58:	4a0d      	ldr	r2, [pc, #52]	@ (8000b90 <init_PIDs+0x68>)
 8000b5a:	605a      	str	r2, [r3, #4]
	pid_pitch.integrator = 0.0f;
 8000b5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b88 <init_PIDs+0x60>)
 8000b5e:	f04f 0200 	mov.w	r2, #0
 8000b62:	609a      	str	r2, [r3, #8]
	pid_pitch.out_min = -1.0f;
 8000b64:	4b08      	ldr	r3, [pc, #32]	@ (8000b88 <init_PIDs+0x60>)
 8000b66:	4a07      	ldr	r2, [pc, #28]	@ (8000b84 <init_PIDs+0x5c>)
 8000b68:	60da      	str	r2, [r3, #12]
	pid_pitch.out_max = 1.0f;
 8000b6a:	4b07      	ldr	r3, [pc, #28]	@ (8000b88 <init_PIDs+0x60>)
 8000b6c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000b70:	611a      	str	r2, [r3, #16]
}
 8000b72:	bf00      	nop
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	240002ac 	.word	0x240002ac
 8000b80:	33d6bf95 	.word	0x33d6bf95
 8000b84:	bf800000 	.word	0xbf800000
 8000b88:	240002c0 	.word	0x240002c0
 8000b8c:	3c23d70a 	.word	0x3c23d70a
 8000b90:	358637bd 	.word	0x358637bd

08000b94 <attitude_hold_control>:

Cmd_s attitude_hold_control(Cmd_s inputs_norms, Att_s actual_atts , Gyro_s actual_gyro, Cmd_s K)
{
 8000b94:	b590      	push	{r4, r7, lr}
 8000b96:	b09b      	sub	sp, #108	@ 0x6c
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	eef0 6a45 	vmov.f32	s13, s10
 8000b9e:	eeb0 7a65 	vmov.f32	s14, s11
 8000ba2:	eef0 7a46 	vmov.f32	s15, s12
 8000ba6:	ed87 0a0e 	vstr	s0, [r7, #56]	@ 0x38
 8000baa:	edc7 0a0f 	vstr	s1, [r7, #60]	@ 0x3c
 8000bae:	ed87 1a10 	vstr	s2, [r7, #64]	@ 0x40
 8000bb2:	edc7 1a11 	vstr	s3, [r7, #68]	@ 0x44
 8000bb6:	ed87 2a0c 	vstr	s4, [r7, #48]	@ 0x30
 8000bba:	edc7 2a0d 	vstr	s5, [r7, #52]	@ 0x34
 8000bbe:	ed87 3a09 	vstr	s6, [r7, #36]	@ 0x24
 8000bc2:	edc7 3a0a 	vstr	s7, [r7, #40]	@ 0x28
 8000bc6:	ed87 4a0b 	vstr	s8, [r7, #44]	@ 0x2c
 8000bca:	edc7 4a05 	vstr	s9, [r7, #20]
 8000bce:	edc7 6a06 	vstr	s13, [r7, #24]
 8000bd2:	ed87 7a07 	vstr	s14, [r7, #28]
 8000bd6:	edc7 7a08 	vstr	s15, [r7, #32]
	//
	Cmd_s Outs;
	// Attitude reference
	theta_ref = inputs_norms.pitch * pitch_sat ;
 8000bda:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8000bde:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8000be2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000be6:	4b42      	ldr	r3, [pc, #264]	@ (8000cf0 <attitude_hold_control+0x15c>)
 8000be8:	edc3 7a00 	vstr	s15, [r3]
	phi_ref   = inputs_norms.roll  * roll_sat  ;
 8000bec:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8000bf0:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8000cf4 <attitude_hold_control+0x160>
 8000bf4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bf8:	4b3f      	ldr	r3, [pc, #252]	@ (8000cf8 <attitude_hold_control+0x164>)
 8000bfa:	edc3 7a00 	vstr	s15, [r3]

	// Attitude Error
	error_phi 	= phi_ref 	- actual_atts.roll ;
 8000bfe:	4b3e      	ldr	r3, [pc, #248]	@ (8000cf8 <attitude_hold_control+0x164>)
 8000c00:	ed93 7a00 	vldr	s14, [r3]
 8000c04:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8000c08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c0c:	4b3b      	ldr	r3, [pc, #236]	@ (8000cfc <attitude_hold_control+0x168>)
 8000c0e:	edc3 7a00 	vstr	s15, [r3]
	error_theta = theta_ref - actual_atts.pitch ;
 8000c12:	4b37      	ldr	r3, [pc, #220]	@ (8000cf0 <attitude_hold_control+0x15c>)
 8000c14:	ed93 7a00 	vldr	s14, [r3]
 8000c18:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000c1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c20:	4b37      	ldr	r3, [pc, #220]	@ (8000d00 <attitude_hold_control+0x16c>)
 8000c22:	edc3 7a00 	vstr	s15, [r3]

	// Ejecucion del PID
	u_phi 	=  PI_Compute(&pid_roll,  error_phi  , SAMPLE_ATT ) ;
 8000c26:	4b35      	ldr	r3, [pc, #212]	@ (8000cfc <attitude_hold_control+0x168>)
 8000c28:	edd3 7a00 	vldr	s15, [r3]
 8000c2c:	eddf 0a35 	vldr	s1, [pc, #212]	@ 8000d04 <attitude_hold_control+0x170>
 8000c30:	eeb0 0a67 	vmov.f32	s0, s15
 8000c34:	4834      	ldr	r0, [pc, #208]	@ (8000d08 <attitude_hold_control+0x174>)
 8000c36:	f000 fc69 	bl	800150c <PI_Compute>
 8000c3a:	eef0 7a40 	vmov.f32	s15, s0
 8000c3e:	4b33      	ldr	r3, [pc, #204]	@ (8000d0c <attitude_hold_control+0x178>)
 8000c40:	edc3 7a00 	vstr	s15, [r3]
	u_theta =  PI_Compute(&pid_pitch, error_theta, SAMPLE_ATT ) ;
 8000c44:	4b2e      	ldr	r3, [pc, #184]	@ (8000d00 <attitude_hold_control+0x16c>)
 8000c46:	edd3 7a00 	vldr	s15, [r3]
 8000c4a:	eddf 0a2e 	vldr	s1, [pc, #184]	@ 8000d04 <attitude_hold_control+0x170>
 8000c4e:	eeb0 0a67 	vmov.f32	s0, s15
 8000c52:	482f      	ldr	r0, [pc, #188]	@ (8000d10 <attitude_hold_control+0x17c>)
 8000c54:	f000 fc5a 	bl	800150c <PI_Compute>
 8000c58:	eef0 7a40 	vmov.f32	s15, s0
 8000c5c:	4b2d      	ldr	r3, [pc, #180]	@ (8000d14 <attitude_hold_control+0x180>)
 8000c5e:	edc3 7a00 	vstr	s15, [r3]

	Outs.roll   = u_phi   -  actual_gyro.roll * K.roll  ;
 8000c62:	4b2a      	ldr	r3, [pc, #168]	@ (8000d0c <attitude_hold_control+0x178>)
 8000c64:	ed93 7a00 	vldr	s14, [r3]
 8000c68:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8000c6c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c78:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
	Outs.pitch  = u_theta -  actual_gyro.pitch* K.pitch ;
 8000c7c:	4b25      	ldr	r3, [pc, #148]	@ (8000d14 <attitude_hold_control+0x180>)
 8000c7e:	ed93 7a00 	vldr	s14, [r3]
 8000c82:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8000c86:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c92:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c

	//Yaw Damping
	Outs.yaw    = inputs_norms.yaw   -  actual_gyro.yaw  * K.yaw ;
 8000c96:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8000c9a:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8000c9e:	edd7 7a07 	vldr	s15, [r7, #28]
 8000ca2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ca6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000caa:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
	//Feedforwa
	Outs.thrust = inputs_norms.thrust ;
 8000cae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000cb0:	657b      	str	r3, [r7, #84]	@ 0x54

	return Outs;
 8000cb2:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8000cb6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000cba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cbc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000cc0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8000cc2:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8000cc4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000cc6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000cc8:	ee06 0a10 	vmov	s12, r0
 8000ccc:	ee06 1a90 	vmov	s13, r1
 8000cd0:	ee07 2a10 	vmov	s14, r2
 8000cd4:	ee07 3a90 	vmov	s15, r3
}
 8000cd8:	eeb0 0a46 	vmov.f32	s0, s12
 8000cdc:	eef0 0a66 	vmov.f32	s1, s13
 8000ce0:	eeb0 1a47 	vmov.f32	s2, s14
 8000ce4:	eef0 1a67 	vmov.f32	s3, s15
 8000ce8:	376c      	adds	r7, #108	@ 0x6c
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd90      	pop	{r4, r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	240002d4 	.word	0x240002d4
 8000cf4:	42200000 	.word	0x42200000
 8000cf8:	240002d8 	.word	0x240002d8
 8000cfc:	240002dc 	.word	0x240002dc
 8000d00:	240002e0 	.word	0x240002e0
 8000d04:	3c23d70a 	.word	0x3c23d70a
 8000d08:	240002ac 	.word	0x240002ac
 8000d0c:	240002e4 	.word	0x240002e4
 8000d10:	240002c0 	.word	0x240002c0
 8000d14:	240002e8 	.word	0x240002e8

08000d18 <command_filtering>:
Servo_mgmt_s servo_outs ;
FilterState filters[4] = {{0.0f}, {0.0f}, {0.0f}, {0.0f}};


void command_filtering(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
	//
	commands_noise[0] = Command_out.roll   ;
 8000d1e:	4b27      	ldr	r3, [pc, #156]	@ (8000dbc <command_filtering+0xa4>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a27      	ldr	r2, [pc, #156]	@ (8000dc0 <command_filtering+0xa8>)
 8000d24:	6013      	str	r3, [r2, #0]
	commands_noise[1] = Command_out.pitch  ;
 8000d26:	4b25      	ldr	r3, [pc, #148]	@ (8000dbc <command_filtering+0xa4>)
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	4a25      	ldr	r2, [pc, #148]	@ (8000dc0 <command_filtering+0xa8>)
 8000d2c:	6053      	str	r3, [r2, #4]
	commands_noise[2] = Command_out.yaw    ;
 8000d2e:	4b23      	ldr	r3, [pc, #140]	@ (8000dbc <command_filtering+0xa4>)
 8000d30:	689b      	ldr	r3, [r3, #8]
 8000d32:	4a23      	ldr	r2, [pc, #140]	@ (8000dc0 <command_filtering+0xa8>)
 8000d34:	6093      	str	r3, [r2, #8]
	commands_noise[3] = Command_out.thrust ;
 8000d36:	4b21      	ldr	r3, [pc, #132]	@ (8000dbc <command_filtering+0xa4>)
 8000d38:	68db      	ldr	r3, [r3, #12]
 8000d3a:	4a21      	ldr	r2, [pc, #132]	@ (8000dc0 <command_filtering+0xa8>)
 8000d3c:	60d3      	str	r3, [r2, #12]

	for(int idx = 0; idx < 4; idx++)
 8000d3e:	2300      	movs	r3, #0
 8000d40:	607b      	str	r3, [r7, #4]
 8000d42:	e023      	b.n	8000d8c <command_filtering+0x74>
	{
		//
		ouput_fltr[idx] = filter_step(&filters[idx], commands_noise[idx],COF_cmds[idx],SAMPLE_ATT) ;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	4a1e      	ldr	r2, [pc, #120]	@ (8000dc4 <command_filtering+0xac>)
 8000d4a:	441a      	add	r2, r3
 8000d4c:	491c      	ldr	r1, [pc, #112]	@ (8000dc0 <command_filtering+0xa8>)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	440b      	add	r3, r1
 8000d54:	edd3 7a00 	vldr	s15, [r3]
 8000d58:	491b      	ldr	r1, [pc, #108]	@ (8000dc8 <command_filtering+0xb0>)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	440b      	add	r3, r1
 8000d60:	ed93 7a00 	vldr	s14, [r3]
 8000d64:	ed9f 1a19 	vldr	s2, [pc, #100]	@ 8000dcc <command_filtering+0xb4>
 8000d68:	eef0 0a47 	vmov.f32	s1, s14
 8000d6c:	eeb0 0a67 	vmov.f32	s0, s15
 8000d70:	4610      	mov	r0, r2
 8000d72:	f001 fa4d 	bl	8002210 <filter_step>
 8000d76:	eef0 7a40 	vmov.f32	s15, s0
 8000d7a:	4a15      	ldr	r2, [pc, #84]	@ (8000dd0 <command_filtering+0xb8>)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	4413      	add	r3, r2
 8000d82:	edc3 7a00 	vstr	s15, [r3]
	for(int idx = 0; idx < 4; idx++)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	607b      	str	r3, [r7, #4]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2b03      	cmp	r3, #3
 8000d90:	ddd8      	ble.n	8000d44 <command_filtering+0x2c>
	}
	//
	Commands.roll 		= 	ouput_fltr[0] ;
 8000d92:	4b0f      	ldr	r3, [pc, #60]	@ (8000dd0 <command_filtering+0xb8>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a0f      	ldr	r2, [pc, #60]	@ (8000dd4 <command_filtering+0xbc>)
 8000d98:	6013      	str	r3, [r2, #0]
	Commands.pitch 		= 	ouput_fltr[1] ;
 8000d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000dd0 <command_filtering+0xb8>)
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	4a0d      	ldr	r2, [pc, #52]	@ (8000dd4 <command_filtering+0xbc>)
 8000da0:	6053      	str	r3, [r2, #4]
	Commands.yaw 		= 	ouput_fltr[2] ;
 8000da2:	4b0b      	ldr	r3, [pc, #44]	@ (8000dd0 <command_filtering+0xb8>)
 8000da4:	689b      	ldr	r3, [r3, #8]
 8000da6:	4a0b      	ldr	r2, [pc, #44]	@ (8000dd4 <command_filtering+0xbc>)
 8000da8:	6093      	str	r3, [r2, #8]
	Commands.thrust 	= 	ouput_fltr[3] ;
 8000daa:	4b09      	ldr	r3, [pc, #36]	@ (8000dd0 <command_filtering+0xb8>)
 8000dac:	68db      	ldr	r3, [r3, #12]
 8000dae:	4a09      	ldr	r2, [pc, #36]	@ (8000dd4 <command_filtering+0xbc>)
 8000db0:	60d3      	str	r3, [r2, #12]


}
 8000db2:	bf00      	nop
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	240002f0 	.word	0x240002f0
 8000dc0:	24000320 	.word	0x24000320
 8000dc4:	24000370 	.word	0x24000370
 8000dc8:	24000340 	.word	0x24000340
 8000dcc:	3c23d70a 	.word	0x3c23d70a
 8000dd0:	24000330 	.word	0x24000330
 8000dd4:	24000310 	.word	0x24000310

08000dd8 <control_allocator>:

void control_allocator(Cmd_s control_cmd, Cmd_s trims )
{
 8000dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dda:	b093      	sub	sp, #76	@ 0x4c
 8000ddc:	af02      	add	r7, sp, #8
 8000dde:	eeb0 4a40 	vmov.f32	s8, s0
 8000de2:	eef0 4a60 	vmov.f32	s9, s1
 8000de6:	eeb0 5a41 	vmov.f32	s10, s2
 8000dea:	eef0 5a61 	vmov.f32	s11, s3
 8000dee:	eeb0 6a42 	vmov.f32	s12, s4
 8000df2:	eef0 6a62 	vmov.f32	s13, s5
 8000df6:	eeb0 7a43 	vmov.f32	s14, s6
 8000dfa:	eef0 7a63 	vmov.f32	s15, s7
 8000dfe:	ed87 4a0a 	vstr	s8, [r7, #40]	@ 0x28
 8000e02:	edc7 4a0b 	vstr	s9, [r7, #44]	@ 0x2c
 8000e06:	ed87 5a0c 	vstr	s10, [r7, #48]	@ 0x30
 8000e0a:	edc7 5a0d 	vstr	s11, [r7, #52]	@ 0x34
 8000e0e:	ed87 6a06 	vstr	s12, [r7, #24]
 8000e12:	edc7 6a07 	vstr	s13, [r7, #28]
 8000e16:	ed87 7a08 	vstr	s14, [r7, #32]
 8000e1a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	//
	Frame = CONFIGURATION;
 8000e1e:	4b7c      	ldr	r3, [pc, #496]	@ (8001010 <control_allocator+0x238>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	701a      	strb	r2, [r3, #0]


	switch(Frame){
 8000e24:	4b7a      	ldr	r3, [pc, #488]	@ (8001010 <control_allocator+0x238>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	2b03      	cmp	r3, #3
 8000e2a:	f200 80c3 	bhi.w	8000fb4 <control_allocator+0x1dc>
 8000e2e:	a201      	add	r2, pc, #4	@ (adr r2, 8000e34 <control_allocator+0x5c>)
 8000e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e34:	08000e45 	.word	0x08000e45
 8000e38:	08000ea1 	.word	0x08000ea1
 8000e3c:	08000efd 	.word	0x08000efd
 8000e40:	08000f59 	.word	0x08000f59
		case FIX_WING:
			servo_outs = FIX_WING_MIXER(control_cmd, trims)     ;
 8000e44:	4c73      	ldr	r4, [pc, #460]	@ (8001014 <control_allocator+0x23c>)
 8000e46:	463b      	mov	r3, r7
 8000e48:	ed97 4a06 	vldr	s8, [r7, #24]
 8000e4c:	edd7 4a07 	vldr	s9, [r7, #28]
 8000e50:	ed97 5a08 	vldr	s10, [r7, #32]
 8000e54:	edd7 5a09 	vldr	s11, [r7, #36]	@ 0x24
 8000e58:	ed97 6a0a 	vldr	s12, [r7, #40]	@ 0x28
 8000e5c:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8000e60:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8000e64:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000e68:	eeb0 2a44 	vmov.f32	s4, s8
 8000e6c:	eef0 2a64 	vmov.f32	s5, s9
 8000e70:	eeb0 3a45 	vmov.f32	s6, s10
 8000e74:	eef0 3a65 	vmov.f32	s7, s11
 8000e78:	eeb0 0a46 	vmov.f32	s0, s12
 8000e7c:	eef0 0a66 	vmov.f32	s1, s13
 8000e80:	eeb0 1a47 	vmov.f32	s2, s14
 8000e84:	eef0 1a67 	vmov.f32	s3, s15
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f000 fc7b 	bl	8001784 <FIX_WING_MIXER>
 8000e8e:	463d      	mov	r5, r7
 8000e90:	6828      	ldr	r0, [r5, #0]
 8000e92:	6869      	ldr	r1, [r5, #4]
 8000e94:	68aa      	ldr	r2, [r5, #8]
 8000e96:	68eb      	ldr	r3, [r5, #12]
 8000e98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e9a:	6928      	ldr	r0, [r5, #16]
 8000e9c:	6020      	str	r0, [r4, #0]
			break;
 8000e9e:	e098      	b.n	8000fd2 <control_allocator+0x1fa>
		case FLYING_WING:
			servo_outs = FLYING_WING_MIXER(control_cmd, trims)  ;
 8000ea0:	4c5c      	ldr	r4, [pc, #368]	@ (8001014 <control_allocator+0x23c>)
 8000ea2:	463b      	mov	r3, r7
 8000ea4:	ed97 4a06 	vldr	s8, [r7, #24]
 8000ea8:	edd7 4a07 	vldr	s9, [r7, #28]
 8000eac:	ed97 5a08 	vldr	s10, [r7, #32]
 8000eb0:	edd7 5a09 	vldr	s11, [r7, #36]	@ 0x24
 8000eb4:	ed97 6a0a 	vldr	s12, [r7, #40]	@ 0x28
 8000eb8:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8000ebc:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8000ec0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000ec4:	eeb0 2a44 	vmov.f32	s4, s8
 8000ec8:	eef0 2a64 	vmov.f32	s5, s9
 8000ecc:	eeb0 3a45 	vmov.f32	s6, s10
 8000ed0:	eef0 3a65 	vmov.f32	s7, s11
 8000ed4:	eeb0 0a46 	vmov.f32	s0, s12
 8000ed8:	eef0 0a66 	vmov.f32	s1, s13
 8000edc:	eeb0 1a47 	vmov.f32	s2, s14
 8000ee0:	eef0 1a67 	vmov.f32	s3, s15
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f000 fd1d 	bl	8001924 <FLYING_WING_MIXER>
 8000eea:	463d      	mov	r5, r7
 8000eec:	6828      	ldr	r0, [r5, #0]
 8000eee:	6869      	ldr	r1, [r5, #4]
 8000ef0:	68aa      	ldr	r2, [r5, #8]
 8000ef2:	68eb      	ldr	r3, [r5, #12]
 8000ef4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ef6:	6928      	ldr	r0, [r5, #16]
 8000ef8:	6020      	str	r0, [r4, #0]
			break;
 8000efa:	e06a      	b.n	8000fd2 <control_allocator+0x1fa>
		case TANDEM_WING:
			servo_outs = TANDEM_WING_MIXER(control_cmd, trims)  ;
 8000efc:	4c45      	ldr	r4, [pc, #276]	@ (8001014 <control_allocator+0x23c>)
 8000efe:	463b      	mov	r3, r7
 8000f00:	ed97 4a06 	vldr	s8, [r7, #24]
 8000f04:	edd7 4a07 	vldr	s9, [r7, #28]
 8000f08:	ed97 5a08 	vldr	s10, [r7, #32]
 8000f0c:	edd7 5a09 	vldr	s11, [r7, #36]	@ 0x24
 8000f10:	ed97 6a0a 	vldr	s12, [r7, #40]	@ 0x28
 8000f14:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8000f18:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8000f1c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000f20:	eeb0 2a44 	vmov.f32	s4, s8
 8000f24:	eef0 2a64 	vmov.f32	s5, s9
 8000f28:	eeb0 3a45 	vmov.f32	s6, s10
 8000f2c:	eef0 3a65 	vmov.f32	s7, s11
 8000f30:	eeb0 0a46 	vmov.f32	s0, s12
 8000f34:	eef0 0a66 	vmov.f32	s1, s13
 8000f38:	eeb0 1a47 	vmov.f32	s2, s14
 8000f3c:	eef0 1a67 	vmov.f32	s3, s15
 8000f40:	4618      	mov	r0, r3
 8000f42:	f000 fddb 	bl	8001afc <TANDEM_WING_MIXER>
 8000f46:	463d      	mov	r5, r7
 8000f48:	6828      	ldr	r0, [r5, #0]
 8000f4a:	6869      	ldr	r1, [r5, #4]
 8000f4c:	68aa      	ldr	r2, [r5, #8]
 8000f4e:	68eb      	ldr	r3, [r5, #12]
 8000f50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f52:	6928      	ldr	r0, [r5, #16]
 8000f54:	6020      	str	r0, [r4, #0]
			break;
 8000f56:	e03c      	b.n	8000fd2 <control_allocator+0x1fa>
		case CUSTOM_FRAME:
			servo_outs = CUSTOM_FRAME_MIXER(control_cmd, trims) ;
 8000f58:	4c2e      	ldr	r4, [pc, #184]	@ (8001014 <control_allocator+0x23c>)
 8000f5a:	463b      	mov	r3, r7
 8000f5c:	ed97 4a06 	vldr	s8, [r7, #24]
 8000f60:	edd7 4a07 	vldr	s9, [r7, #28]
 8000f64:	ed97 5a08 	vldr	s10, [r7, #32]
 8000f68:	edd7 5a09 	vldr	s11, [r7, #36]	@ 0x24
 8000f6c:	ed97 6a0a 	vldr	s12, [r7, #40]	@ 0x28
 8000f70:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8000f74:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8000f78:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000f7c:	eeb0 2a44 	vmov.f32	s4, s8
 8000f80:	eef0 2a64 	vmov.f32	s5, s9
 8000f84:	eeb0 3a45 	vmov.f32	s6, s10
 8000f88:	eef0 3a65 	vmov.f32	s7, s11
 8000f8c:	eeb0 0a46 	vmov.f32	s0, s12
 8000f90:	eef0 0a66 	vmov.f32	s1, s13
 8000f94:	eeb0 1a47 	vmov.f32	s2, s14
 8000f98:	eef0 1a67 	vmov.f32	s3, s15
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f000 fe99 	bl	8001cd4 <CUSTOM_FRAME_MIXER>
 8000fa2:	463d      	mov	r5, r7
 8000fa4:	6828      	ldr	r0, [r5, #0]
 8000fa6:	6869      	ldr	r1, [r5, #4]
 8000fa8:	68aa      	ldr	r2, [r5, #8]
 8000faa:	68eb      	ldr	r3, [r5, #12]
 8000fac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fae:	6928      	ldr	r0, [r5, #16]
 8000fb0:	6020      	str	r0, [r4, #0]
			break;
 8000fb2:	e00e      	b.n	8000fd2 <control_allocator+0x1fa>
		default:

			for(int i = 0; i < 10; i++)
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000fb8:	e008      	b.n	8000fcc <control_allocator+0x1f4>
			{
				//
				servo_outs.S[i] = 1500 ;
 8000fba:	4a16      	ldr	r2, [pc, #88]	@ (8001014 <control_allocator+0x23c>)
 8000fbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000fbe:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8000fc2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int i = 0; i < 10; i++)
 8000fc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000fc8:	3301      	adds	r3, #1
 8000fca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000fcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000fce:	2b09      	cmp	r3, #9
 8000fd0:	ddf3      	ble.n	8000fba <control_allocator+0x1e2>
			}

		}

	PWM_Output = reverse_servos(servo_outs );
 8000fd2:	4e11      	ldr	r6, [pc, #68]	@ (8001018 <control_allocator+0x240>)
 8000fd4:	463c      	mov	r4, r7
 8000fd6:	4b0f      	ldr	r3, [pc, #60]	@ (8001014 <control_allocator+0x23c>)
 8000fd8:	466d      	mov	r5, sp
 8000fda:	f103 020c 	add.w	r2, r3, #12
 8000fde:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fe2:	e885 0003 	stmia.w	r5, {r0, r1}
 8000fe6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fe8:	4620      	mov	r0, r4
 8000fea:	f000 f835 	bl	8001058 <reverse_servos>
 8000fee:	4632      	mov	r2, r6
 8000ff0:	463b      	mov	r3, r7
 8000ff2:	6819      	ldr	r1, [r3, #0]
 8000ff4:	685d      	ldr	r5, [r3, #4]
 8000ff6:	689c      	ldr	r4, [r3, #8]
 8000ff8:	68d8      	ldr	r0, [r3, #12]
 8000ffa:	6011      	str	r1, [r2, #0]
 8000ffc:	6055      	str	r5, [r2, #4]
 8000ffe:	6094      	str	r4, [r2, #8]
 8001000:	60d0      	str	r0, [r2, #12]
 8001002:	6919      	ldr	r1, [r3, #16]
 8001004:	6111      	str	r1, [r2, #16]
}
 8001006:	bf00      	nop
 8001008:	3744      	adds	r7, #68	@ 0x44
 800100a:	46bd      	mov	sp, r7
 800100c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800100e:	bf00      	nop
 8001010:	240002ec 	.word	0x240002ec
 8001014:	2400035c 	.word	0x2400035c
 8001018:	24000068 	.word	0x24000068

0800101c <reverse_servo_value>:

uint16_t reverse_servo_value(uint16_t input)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	80fb      	strh	r3, [r7, #6]
    // Asegurarnos que el valor esté dentro del rango válido
    if (input < 1000) input = 1000;
 8001026:	88fb      	ldrh	r3, [r7, #6]
 8001028:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800102c:	d202      	bcs.n	8001034 <reverse_servo_value+0x18>
 800102e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001032:	80fb      	strh	r3, [r7, #6]
    if (input > 2000) input = 2000;
 8001034:	88fb      	ldrh	r3, [r7, #6]
 8001036:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800103a:	d902      	bls.n	8001042 <reverse_servo_value+0x26>
 800103c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001040:	80fb      	strh	r3, [r7, #6]

    // Calcular el valor invertido
    return 3000 - input;
 8001042:	88fb      	ldrh	r3, [r7, #6]
 8001044:	f5c3 633b 	rsb	r3, r3, #2992	@ 0xbb0
 8001048:	3308      	adds	r3, #8
 800104a:	b29b      	uxth	r3, r3
}
 800104c:	4618      	mov	r0, r3
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <reverse_servos>:


Servo_mgmt_s reverse_servos(Servo_mgmt_s inputs )
{
 8001058:	b084      	sub	sp, #16
 800105a:	b5b0      	push	{r4, r5, r7, lr}
 800105c:	b088      	sub	sp, #32
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
 8001062:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8001066:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	//
	Servo_mgmt_s uotputs;

	for(int i = 0; i < 10; i++)
 800106a:	2300      	movs	r3, #0
 800106c:	61fb      	str	r3, [r7, #28]
 800106e:	e024      	b.n	80010ba <reverse_servos+0x62>
	{
		//
		if (Reverse.S[i])
 8001070:	4a1c      	ldr	r2, [pc, #112]	@ (80010e4 <reverse_servos+0x8c>)
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	4413      	add	r3, r2
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d010      	beq.n	800109e <reverse_servos+0x46>
		{
			//
			uotputs.S[i] = reverse_servo_value(inputs.S[i]);
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	3330      	adds	r3, #48	@ 0x30
 8001082:	443b      	add	r3, r7
 8001084:	889b      	ldrh	r3, [r3, #4]
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff ffc8 	bl	800101c <reverse_servo_value>
 800108c:	4603      	mov	r3, r0
 800108e:	461a      	mov	r2, r3
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	3320      	adds	r3, #32
 8001096:	443b      	add	r3, r7
 8001098:	f823 2c18 	strh.w	r2, [r3, #-24]
 800109c:	e00a      	b.n	80010b4 <reverse_servos+0x5c>
		}
		else
		{
			//
			uotputs.S[i] = inputs.S[i];
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	3330      	adds	r3, #48	@ 0x30
 80010a4:	443b      	add	r3, r7
 80010a6:	889a      	ldrh	r2, [r3, #4]
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	3320      	adds	r3, #32
 80010ae:	443b      	add	r3, r7
 80010b0:	f823 2c18 	strh.w	r2, [r3, #-24]
	for(int i = 0; i < 10; i++)
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	3301      	adds	r3, #1
 80010b8:	61fb      	str	r3, [r7, #28]
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	2b09      	cmp	r3, #9
 80010be:	ddd7      	ble.n	8001070 <reverse_servos+0x18>
		}
	}

	return uotputs;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	461d      	mov	r5, r3
 80010c4:	f107 0408 	add.w	r4, r7, #8
 80010c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010ca:	6028      	str	r0, [r5, #0]
 80010cc:	6069      	str	r1, [r5, #4]
 80010ce:	60aa      	str	r2, [r5, #8]
 80010d0:	60eb      	str	r3, [r5, #12]
 80010d2:	6820      	ldr	r0, [r4, #0]
 80010d4:	6128      	str	r0, [r5, #16]
}
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	3720      	adds	r7, #32
 80010da:	46bd      	mov	sp, r7
 80010dc:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80010e0:	b004      	add	sp, #16
 80010e2:	4770      	bx	lr
 80010e4:	24000350 	.word	0x24000350

080010e8 <get_commands_rc>:
    }
    return signal_out;
}

Cmd_s get_commands_rc(void)
{
 80010e8:	b490      	push	{r4, r7}
 80010ea:	b08c      	sub	sp, #48	@ 0x30
 80010ec:	af00      	add	r7, sp, #0
	//
	Cmd_s out_norms;

	out_norms.roll 		= ((float)Radio_input.Canal_1 - 1500.0 ) / 500.0 ;
 80010ee:	4b3e      	ldr	r3, [pc, #248]	@ (80011e8 <get_commands_rc+0x100>)
 80010f0:	885b      	ldrh	r3, [r3, #2]
 80010f2:	ee07 3a90 	vmov	s15, r3
 80010f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010fa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010fe:	ed9f 6b34 	vldr	d6, [pc, #208]	@ 80011d0 <get_commands_rc+0xe8>
 8001102:	ee37 6b46 	vsub.f64	d6, d7, d6
 8001106:	ed9f 5b34 	vldr	d5, [pc, #208]	@ 80011d8 <get_commands_rc+0xf0>
 800110a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800110e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001112:	edc7 7a04 	vstr	s15, [r7, #16]

	out_norms.pitch 	= ((float)Radio_input.Canal_2 - 1500.0 ) / 500.0 ;
 8001116:	4b34      	ldr	r3, [pc, #208]	@ (80011e8 <get_commands_rc+0x100>)
 8001118:	889b      	ldrh	r3, [r3, #4]
 800111a:	ee07 3a90 	vmov	s15, r3
 800111e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001122:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001126:	ed9f 6b2a 	vldr	d6, [pc, #168]	@ 80011d0 <get_commands_rc+0xe8>
 800112a:	ee37 6b46 	vsub.f64	d6, d7, d6
 800112e:	ed9f 5b2a 	vldr	d5, [pc, #168]	@ 80011d8 <get_commands_rc+0xf0>
 8001132:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001136:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800113a:	edc7 7a05 	vstr	s15, [r7, #20]

	out_norms.yaw 		= ((float)Radio_input.Canal_3 - 1500.0 ) / 500.0 ;
 800113e:	4b2a      	ldr	r3, [pc, #168]	@ (80011e8 <get_commands_rc+0x100>)
 8001140:	88db      	ldrh	r3, [r3, #6]
 8001142:	ee07 3a90 	vmov	s15, r3
 8001146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800114a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800114e:	ed9f 6b20 	vldr	d6, [pc, #128]	@ 80011d0 <get_commands_rc+0xe8>
 8001152:	ee37 6b46 	vsub.f64	d6, d7, d6
 8001156:	ed9f 5b20 	vldr	d5, [pc, #128]	@ 80011d8 <get_commands_rc+0xf0>
 800115a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800115e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001162:	edc7 7a06 	vstr	s15, [r7, #24]

	out_norms.thrust 	= ((float)Radio_input.Canal_4 - 1000.0 ) / 1000.0 ;
 8001166:	4b20      	ldr	r3, [pc, #128]	@ (80011e8 <get_commands_rc+0x100>)
 8001168:	891b      	ldrh	r3, [r3, #8]
 800116a:	ee07 3a90 	vmov	s15, r3
 800116e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001172:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001176:	ed9f 6b1a 	vldr	d6, [pc, #104]	@ 80011e0 <get_commands_rc+0xf8>
 800117a:	ee37 6b46 	vsub.f64	d6, d7, d6
 800117e:	ed9f 5b18 	vldr	d5, [pc, #96]	@ 80011e0 <get_commands_rc+0xf8>
 8001182:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001186:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800118a:	edc7 7a07 	vstr	s15, [r7, #28]

	return out_norms;
 800118e:	f107 0420 	add.w	r4, r7, #32
 8001192:	f107 0310 	add.w	r3, r7, #16
 8001196:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001198:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800119c:	6a38      	ldr	r0, [r7, #32]
 800119e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80011a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80011a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011a4:	ee06 0a10 	vmov	s12, r0
 80011a8:	ee06 1a90 	vmov	s13, r1
 80011ac:	ee07 2a10 	vmov	s14, r2
 80011b0:	ee07 3a90 	vmov	s15, r3
}
 80011b4:	eeb0 0a46 	vmov.f32	s0, s12
 80011b8:	eef0 0a66 	vmov.f32	s1, s13
 80011bc:	eeb0 1a47 	vmov.f32	s2, s14
 80011c0:	eef0 1a67 	vmov.f32	s3, s15
 80011c4:	3730      	adds	r7, #48	@ 0x30
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bc90      	pop	{r4, r7}
 80011ca:	4770      	bx	lr
 80011cc:	f3af 8000 	nop.w
 80011d0:	00000000 	.word	0x00000000
 80011d4:	40977000 	.word	0x40977000
 80011d8:	00000000 	.word	0x00000000
 80011dc:	407f4000 	.word	0x407f4000
 80011e0:	00000000 	.word	0x00000000
 80011e4:	408f4000 	.word	0x408f4000
 80011e8:	2400007c 	.word	0x2400007c

080011ec <get_actual_trims>:

void get_actual_trims(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
	//
	Trims.roll 		=  (float)Radio_input.Canal_10 - 1500.0 ;
 80011f0:	4b17      	ldr	r3, [pc, #92]	@ (8001250 <get_actual_trims+0x64>)
 80011f2:	8a9b      	ldrh	r3, [r3, #20]
 80011f4:	ee07 3a90 	vmov	s15, r3
 80011f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011fc:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8001254 <get_actual_trims+0x68>
 8001200:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001204:	4b14      	ldr	r3, [pc, #80]	@ (8001258 <get_actual_trims+0x6c>)
 8001206:	edc3 7a00 	vstr	s15, [r3]
	Trims.pitch 	=  (float)Radio_input.Canal_11 - 1500.0 ;
 800120a:	4b11      	ldr	r3, [pc, #68]	@ (8001250 <get_actual_trims+0x64>)
 800120c:	8adb      	ldrh	r3, [r3, #22]
 800120e:	ee07 3a90 	vmov	s15, r3
 8001212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001216:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8001254 <get_actual_trims+0x68>
 800121a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800121e:	4b0e      	ldr	r3, [pc, #56]	@ (8001258 <get_actual_trims+0x6c>)
 8001220:	edc3 7a01 	vstr	s15, [r3, #4]
	Trims.yaw 		=  (float)Radio_input.Canal_12 - 1500.0 ;
 8001224:	4b0a      	ldr	r3, [pc, #40]	@ (8001250 <get_actual_trims+0x64>)
 8001226:	8b1b      	ldrh	r3, [r3, #24]
 8001228:	ee07 3a90 	vmov	s15, r3
 800122c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001230:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8001254 <get_actual_trims+0x68>
 8001234:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001238:	4b07      	ldr	r3, [pc, #28]	@ (8001258 <get_actual_trims+0x6c>)
 800123a:	edc3 7a02 	vstr	s15, [r3, #8]
	Trims.thrust 	=  0.0f ;
 800123e:	4b06      	ldr	r3, [pc, #24]	@ (8001258 <get_actual_trims+0x6c>)
 8001240:	f04f 0200 	mov.w	r2, #0
 8001244:	60da      	str	r2, [r3, #12]
}
 8001246:	bf00      	nop
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr
 8001250:	2400007c 	.word	0x2400007c
 8001254:	44bb8000 	.word	0x44bb8000
 8001258:	24000300 	.word	0x24000300

0800125c <init_Reverse_Servos>:


void init_Reverse_Servos(Servo_reverse_s *servos)
{
 800125c:	b480      	push	{r7}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 10; i++)
 8001264:	2300      	movs	r3, #0
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	e007      	b.n	800127a <init_Reverse_Servos+0x1e>
    {
    	//
        servos->S[i] = false;
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	4413      	add	r3, r2
 8001270:	2200      	movs	r2, #0
 8001272:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 10; i++)
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	3301      	adds	r3, #1
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	2b09      	cmp	r3, #9
 800127e:	ddf4      	ble.n	800126a <init_Reverse_Servos+0xe>
    }
}
 8001280:	bf00      	nop
 8001282:	bf00      	nop
 8001284:	3714      	adds	r7, #20
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr

0800128e <FlightControl_inits>:
Cmd_s Command_in;

Cmd_s rates_Gains;

void FlightControl_inits(void)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	af00      	add	r7, sp, #0
	//
	init_PIDs();
 8001292:	f7ff fc49 	bl	8000b28 <init_PIDs>
}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
	...

0800129c <FlightTaskAttitude>:

void FlightTaskAttitude(void)
{
 800129c:	b598      	push	{r3, r4, r7, lr}
 800129e:	af00      	add	r7, sp, #0
	//
	attitude_parameters_refresh();
 80012a0:	f000 f920 	bl	80014e4 <attitude_parameters_refresh>
	refresh_actual_rates();
 80012a4:	f000 fa3e 	bl	8001724 <refresh_actual_rates>
	get_actual_attitude();
 80012a8:	f000 fa1a 	bl	80016e0 <get_actual_attitude>
	get_flight_mode();
 80012ac:	f000 f90e 	bl	80014cc <get_flight_mode>
	Command_in = get_commands_rc();
 80012b0:	f7ff ff1a 	bl	80010e8 <get_commands_rc>
 80012b4:	eeb0 6a40 	vmov.f32	s12, s0
 80012b8:	eef0 6a60 	vmov.f32	s13, s1
 80012bc:	eeb0 7a41 	vmov.f32	s14, s2
 80012c0:	eef0 7a61 	vmov.f32	s15, s3
 80012c4:	4b62      	ldr	r3, [pc, #392]	@ (8001450 <FlightTaskAttitude+0x1b4>)
 80012c6:	ed83 6a00 	vstr	s12, [r3]
 80012ca:	edc3 6a01 	vstr	s13, [r3, #4]
 80012ce:	ed83 7a02 	vstr	s14, [r3, #8]
 80012d2:	edc3 7a03 	vstr	s15, [r3, #12]


	switch(mode)
 80012d6:	4b5f      	ldr	r3, [pc, #380]	@ (8001454 <FlightTaskAttitude+0x1b8>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	2b03      	cmp	r3, #3
 80012dc:	f300 8083 	bgt.w	80013e6 <FlightTaskAttitude+0x14a>
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	da04      	bge.n	80012ee <FlightTaskAttitude+0x52>
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d077      	beq.n	80013d8 <FlightTaskAttitude+0x13c>
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d03a      	beq.n	8001362 <FlightTaskAttitude+0xc6>
 80012ec:	e07b      	b.n	80013e6 <FlightTaskAttitude+0x14a>
	{
	case FBW_MODE:
	case ATTITUDE_HOLD_MODE:
		//
		Command_out = attitude_hold_control(Command_in, actual_attitude , actual_rates, rates_Gains);
 80012ee:	4b5a      	ldr	r3, [pc, #360]	@ (8001458 <FlightTaskAttitude+0x1bc>)
 80012f0:	edd3 4a00 	vldr	s9, [r3]
 80012f4:	ed93 5a01 	vldr	s10, [r3, #4]
 80012f8:	edd3 5a02 	vldr	s11, [r3, #8]
 80012fc:	ed93 6a03 	vldr	s12, [r3, #12]
 8001300:	4b56      	ldr	r3, [pc, #344]	@ (800145c <FlightTaskAttitude+0x1c0>)
 8001302:	ed93 3a00 	vldr	s6, [r3]
 8001306:	edd3 3a01 	vldr	s7, [r3, #4]
 800130a:	ed93 4a02 	vldr	s8, [r3, #8]
 800130e:	4b54      	ldr	r3, [pc, #336]	@ (8001460 <FlightTaskAttitude+0x1c4>)
 8001310:	ed93 2a00 	vldr	s4, [r3]
 8001314:	edd3 2a01 	vldr	s5, [r3, #4]
 8001318:	4b4d      	ldr	r3, [pc, #308]	@ (8001450 <FlightTaskAttitude+0x1b4>)
 800131a:	edd3 1a00 	vldr	s3, [r3]
 800131e:	edd3 6a01 	vldr	s13, [r3, #4]
 8001322:	ed93 7a02 	vldr	s14, [r3, #8]
 8001326:	edd3 7a03 	vldr	s15, [r3, #12]
 800132a:	eeb0 0a61 	vmov.f32	s0, s3
 800132e:	eef0 0a66 	vmov.f32	s1, s13
 8001332:	eeb0 1a47 	vmov.f32	s2, s14
 8001336:	eef0 1a67 	vmov.f32	s3, s15
 800133a:	f7ff fc2b 	bl	8000b94 <attitude_hold_control>
 800133e:	eeb0 6a40 	vmov.f32	s12, s0
 8001342:	eef0 6a60 	vmov.f32	s13, s1
 8001346:	eeb0 7a41 	vmov.f32	s14, s2
 800134a:	eef0 7a61 	vmov.f32	s15, s3
 800134e:	4b45      	ldr	r3, [pc, #276]	@ (8001464 <FlightTaskAttitude+0x1c8>)
 8001350:	ed83 6a00 	vstr	s12, [r3]
 8001354:	edc3 6a01 	vstr	s13, [r3, #4]
 8001358:	ed83 7a02 	vstr	s14, [r3, #8]
 800135c:	edc3 7a03 	vstr	s15, [r3, #12]

		break;
 8001360:	e048      	b.n	80013f4 <FlightTaskAttitude+0x158>
	case RATE_MODE:
		//
		Command_out = rates_control_law(Command_in , actual_rates, rates_Gains) ;
 8001362:	4b3d      	ldr	r3, [pc, #244]	@ (8001458 <FlightTaskAttitude+0x1bc>)
 8001364:	edd3 3a00 	vldr	s7, [r3]
 8001368:	ed93 4a01 	vldr	s8, [r3, #4]
 800136c:	edd3 4a02 	vldr	s9, [r3, #8]
 8001370:	ed93 5a03 	vldr	s10, [r3, #12]
 8001374:	4b39      	ldr	r3, [pc, #228]	@ (800145c <FlightTaskAttitude+0x1c0>)
 8001376:	edd3 2a00 	vldr	s5, [r3]
 800137a:	ed93 3a01 	vldr	s6, [r3, #4]
 800137e:	edd3 5a02 	vldr	s11, [r3, #8]
 8001382:	4b33      	ldr	r3, [pc, #204]	@ (8001450 <FlightTaskAttitude+0x1b4>)
 8001384:	ed93 6a00 	vldr	s12, [r3]
 8001388:	edd3 6a01 	vldr	s13, [r3, #4]
 800138c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001390:	edd3 7a03 	vldr	s15, [r3, #12]
 8001394:	eeb0 2a62 	vmov.f32	s4, s5
 8001398:	eef0 2a43 	vmov.f32	s5, s6
 800139c:	eeb0 3a65 	vmov.f32	s6, s11
 80013a0:	eeb0 0a46 	vmov.f32	s0, s12
 80013a4:	eef0 0a66 	vmov.f32	s1, s13
 80013a8:	eeb0 1a47 	vmov.f32	s2, s14
 80013ac:	eef0 1a67 	vmov.f32	s3, s15
 80013b0:	f000 f92d 	bl	800160e <rates_control_law>
 80013b4:	eeb0 6a40 	vmov.f32	s12, s0
 80013b8:	eef0 6a60 	vmov.f32	s13, s1
 80013bc:	eeb0 7a41 	vmov.f32	s14, s2
 80013c0:	eef0 7a61 	vmov.f32	s15, s3
 80013c4:	4b27      	ldr	r3, [pc, #156]	@ (8001464 <FlightTaskAttitude+0x1c8>)
 80013c6:	ed83 6a00 	vstr	s12, [r3]
 80013ca:	edc3 6a01 	vstr	s13, [r3, #4]
 80013ce:	ed83 7a02 	vstr	s14, [r3, #8]
 80013d2:	edc3 7a03 	vstr	s15, [r3, #12]

		break;
 80013d6:	e00d      	b.n	80013f4 <FlightTaskAttitude+0x158>
	case MANUAL_MODE:
		//
		Command_out = Command_in;
 80013d8:	4a22      	ldr	r2, [pc, #136]	@ (8001464 <FlightTaskAttitude+0x1c8>)
 80013da:	4b1d      	ldr	r3, [pc, #116]	@ (8001450 <FlightTaskAttitude+0x1b4>)
 80013dc:	4614      	mov	r4, r2
 80013de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		break;
 80013e4:	e006      	b.n	80013f4 <FlightTaskAttitude+0x158>
	default:
		//
		Command_out = Command_in;
 80013e6:	4a1f      	ldr	r2, [pc, #124]	@ (8001464 <FlightTaskAttitude+0x1c8>)
 80013e8:	4b19      	ldr	r3, [pc, #100]	@ (8001450 <FlightTaskAttitude+0x1b4>)
 80013ea:	4614      	mov	r4, r2
 80013ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		break;
 80013f2:	bf00      	nop
	}

	command_filtering();
 80013f4:	f7ff fc90 	bl	8000d18 <command_filtering>
	get_actual_trims();
 80013f8:	f7ff fef8 	bl	80011ec <get_actual_trims>
	init_Reverse_Servos(&Reverse);
 80013fc:	481a      	ldr	r0, [pc, #104]	@ (8001468 <FlightTaskAttitude+0x1cc>)
 80013fe:	f7ff ff2d 	bl	800125c <init_Reverse_Servos>
	control_allocator(Commands , Trims );
 8001402:	4b1a      	ldr	r3, [pc, #104]	@ (800146c <FlightTaskAttitude+0x1d0>)
 8001404:	ed93 4a00 	vldr	s8, [r3]
 8001408:	edd3 4a01 	vldr	s9, [r3, #4]
 800140c:	ed93 5a02 	vldr	s10, [r3, #8]
 8001410:	edd3 5a03 	vldr	s11, [r3, #12]
 8001414:	4b16      	ldr	r3, [pc, #88]	@ (8001470 <FlightTaskAttitude+0x1d4>)
 8001416:	ed93 6a00 	vldr	s12, [r3]
 800141a:	edd3 6a01 	vldr	s13, [r3, #4]
 800141e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001422:	edd3 7a03 	vldr	s15, [r3, #12]
 8001426:	eeb0 2a44 	vmov.f32	s4, s8
 800142a:	eef0 2a64 	vmov.f32	s5, s9
 800142e:	eeb0 3a45 	vmov.f32	s6, s10
 8001432:	eef0 3a65 	vmov.f32	s7, s11
 8001436:	eeb0 0a46 	vmov.f32	s0, s12
 800143a:	eef0 0a66 	vmov.f32	s1, s13
 800143e:	eeb0 1a47 	vmov.f32	s2, s14
 8001442:	eef0 1a67 	vmov.f32	s3, s15
 8001446:	f7ff fcc7 	bl	8000dd8 <control_allocator>
}
 800144a:	bf00      	nop
 800144c:	bd98      	pop	{r3, r4, r7, pc}
 800144e:	bf00      	nop
 8001450:	24000380 	.word	0x24000380
 8001454:	240003a0 	.word	0x240003a0
 8001458:	24000390 	.word	0x24000390
 800145c:	240003b0 	.word	0x240003b0
 8001460:	240003bc 	.word	0x240003bc
 8001464:	240002f0 	.word	0x240002f0
 8001468:	24000350 	.word	0x24000350
 800146c:	24000300 	.word	0x24000300
 8001470:	24000310 	.word	0x24000310

08001474 <rc_three_steps_CurrentMode>:
#include "Flight_Management_Control/modes_management.h"

FlightMode_t mode ;

uint8_t rc_three_steps_CurrentMode(void)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
	//
	uint16_t pwm_value = Radio_input.Canal_5;
 800147a:	4b12      	ldr	r3, [pc, #72]	@ (80014c4 <rc_three_steps_CurrentMode+0x50>)
 800147c:	895b      	ldrh	r3, [r3, #10]
 800147e:	80fb      	strh	r3, [r7, #6]

	if (pwm_value < (PWM_MID - PWM_DEADZONE))
 8001480:	88fb      	ldrh	r3, [r7, #6]
 8001482:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8001486:	4293      	cmp	r3, r2
 8001488:	d801      	bhi.n	800148e <rc_three_steps_CurrentMode+0x1a>
	{
	        return MANUAL_MODE;
 800148a:	2300      	movs	r3, #0
 800148c:	e014      	b.n	80014b8 <rc_three_steps_CurrentMode+0x44>
	 }
	else if (pwm_value < 1750 && pwm_value > 1350)
 800148e:	88fb      	ldrh	r3, [r7, #6]
 8001490:	f240 62d5 	movw	r2, #1749	@ 0x6d5
 8001494:	4293      	cmp	r3, r2
 8001496:	d806      	bhi.n	80014a6 <rc_three_steps_CurrentMode+0x32>
 8001498:	88fb      	ldrh	r3, [r7, #6]
 800149a:	f240 5246 	movw	r2, #1350	@ 0x546
 800149e:	4293      	cmp	r3, r2
 80014a0:	d901      	bls.n	80014a6 <rc_three_steps_CurrentMode+0x32>
	 {
	        return RATE_MODE;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e008      	b.n	80014b8 <rc_three_steps_CurrentMode+0x44>
	  }
	else if (pwm_value >= (PWM_MAX - PWM_DEADZONE))
 80014a6:	88fb      	ldrh	r3, [r7, #6]
 80014a8:	f240 62d5 	movw	r2, #1749	@ 0x6d5
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d901      	bls.n	80014b4 <rc_three_steps_CurrentMode+0x40>
	 {
	        return ATTITUDE_HOLD_MODE;
 80014b0:	2302      	movs	r3, #2
 80014b2:	e001      	b.n	80014b8 <rc_three_steps_CurrentMode+0x44>
	  }
	else
	{
	        // Zona muerta → mantener último modo (evita oscilaciones)
	        static FlightMode_t last_mode = MANUAL_MODE;
	        return last_mode;
 80014b4:	4b04      	ldr	r3, [pc, #16]	@ (80014c8 <rc_three_steps_CurrentMode+0x54>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
	 }
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	2400007c 	.word	0x2400007c
 80014c8:	240003a1 	.word	0x240003a1

080014cc <get_flight_mode>:

void get_flight_mode(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
	//
	mode = (FlightMode_t)rc_three_steps_CurrentMode();
 80014d0:	f7ff ffd0 	bl	8001474 <rc_three_steps_CurrentMode>
 80014d4:	4603      	mov	r3, r0
 80014d6:	461a      	mov	r2, r3
 80014d8:	4b01      	ldr	r3, [pc, #4]	@ (80014e0 <get_flight_mode+0x14>)
 80014da:	701a      	strb	r2, [r3, #0]
}
 80014dc:	bf00      	nop
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	240003a0 	.word	0x240003a0

080014e4 <attitude_parameters_refresh>:
#include "Flight_Management_Control/parameters_manager.h"
#include "Flight_Management_Control/flight_management.h"


void attitude_parameters_refresh(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
	//
	rates_Gains.roll  = K_P ;
 80014e8:	4b06      	ldr	r3, [pc, #24]	@ (8001504 <attitude_parameters_refresh+0x20>)
 80014ea:	4a07      	ldr	r2, [pc, #28]	@ (8001508 <attitude_parameters_refresh+0x24>)
 80014ec:	601a      	str	r2, [r3, #0]
	rates_Gains.pitch = K_Q ;
 80014ee:	4b05      	ldr	r3, [pc, #20]	@ (8001504 <attitude_parameters_refresh+0x20>)
 80014f0:	4a05      	ldr	r2, [pc, #20]	@ (8001508 <attitude_parameters_refresh+0x24>)
 80014f2:	605a      	str	r2, [r3, #4]
	rates_Gains.yaw   = K_R ;
 80014f4:	4b03      	ldr	r3, [pc, #12]	@ (8001504 <attitude_parameters_refresh+0x20>)
 80014f6:	4a04      	ldr	r2, [pc, #16]	@ (8001508 <attitude_parameters_refresh+0x24>)
 80014f8:	609a      	str	r2, [r3, #8]

}
 80014fa:	bf00      	nop
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	24000390 	.word	0x24000390
 8001508:	3ba3d70a 	.word	0x3ba3d70a

0800150c <PI_Compute>:
    pi->Kp = kp; pi->Ki = ki;
    pi->integrator = 0.0f;
    pi->out_min = out_min; pi->out_max = out_max;
}

float PI_Compute(PI_Controller *pi, float error, float dt) {
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	ed87 0a02 	vstr	s0, [r7, #8]
 8001518:	edc7 0a01 	vstr	s1, [r7, #4]
    pi->integrator += 0.0f ; //error * pi->Ki * dt;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001522:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 80015b0 <PI_Compute+0xa4>
 8001526:	ee77 7a87 	vadd.f32	s15, s15, s14
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	edc3 7a02 	vstr	s15, [r3, #8]

    // Anti-windup
    if (pi->integrator > pi->out_max) pi->integrator = pi->out_max;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	ed93 7a02 	vldr	s14, [r3, #8]
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	edd3 7a04 	vldr	s15, [r3, #16]
 800153c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001544:	dd04      	ble.n	8001550 <PI_Compute+0x44>
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	691a      	ldr	r2, [r3, #16]
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	609a      	str	r2, [r3, #8]
 800154e:	e00e      	b.n	800156e <PI_Compute+0x62>
    else if (pi->integrator < pi->out_min) pi->integrator = pi->out_min;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	ed93 7a02 	vldr	s14, [r3, #8]
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	edd3 7a03 	vldr	s15, [r3, #12]
 800155c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001564:	d503      	bpl.n	800156e <PI_Compute+0x62>
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	68da      	ldr	r2, [r3, #12]
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	609a      	str	r2, [r3, #8]

    float output = pi->Kp * error ; //+ pi->integrator;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	edd3 7a00 	vldr	s15, [r3]
 8001574:	ed97 7a02 	vldr	s14, [r7, #8]
 8001578:	ee67 7a27 	vmul.f32	s15, s14, s15
 800157c:	edc7 7a05 	vstr	s15, [r7, #20]

    // Saturación final
    output = SatComando(output, pi->out_min, pi->out_max);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	edd3 7a03 	vldr	s15, [r3, #12]
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	ed93 7a04 	vldr	s14, [r3, #16]
 800158c:	eeb0 1a47 	vmov.f32	s2, s14
 8001590:	eef0 0a67 	vmov.f32	s1, s15
 8001594:	ed97 0a05 	vldr	s0, [r7, #20]
 8001598:	f000 f80c 	bl	80015b4 <SatComando>
 800159c:	ed87 0a05 	vstr	s0, [r7, #20]

    return output;
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	ee07 3a90 	vmov	s15, r3
}
 80015a6:	eeb0 0a67 	vmov.f32	s0, s15
 80015aa:	3718      	adds	r7, #24
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	00000000 	.word	0x00000000

080015b4 <SatComando>:

float SatComando(float rc_comando,float sat_min,float sat_max)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b087      	sub	sp, #28
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	ed87 0a03 	vstr	s0, [r7, #12]
 80015be:	edc7 0a02 	vstr	s1, [r7, #8]
 80015c2:	ed87 1a01 	vstr	s2, [r7, #4]
    float rc_comando_out;
    if (rc_comando < sat_min)
 80015c6:	ed97 7a03 	vldr	s14, [r7, #12]
 80015ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80015ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015d6:	d502      	bpl.n	80015de <SatComando+0x2a>
    {
        rc_comando_out = sat_min;
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	617b      	str	r3, [r7, #20]
 80015dc:	e00d      	b.n	80015fa <SatComando+0x46>
    }
    else if (rc_comando > sat_max)
 80015de:	ed97 7a03 	vldr	s14, [r7, #12]
 80015e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80015e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ee:	dd02      	ble.n	80015f6 <SatComando+0x42>
    {
        rc_comando_out = sat_max;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	617b      	str	r3, [r7, #20]
 80015f4:	e001      	b.n	80015fa <SatComando+0x46>
    }
    else
    {
        rc_comando_out = rc_comando;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	617b      	str	r3, [r7, #20]
    }
    return rc_comando_out;
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	ee07 3a90 	vmov	s15, r3
}
 8001600:	eeb0 0a67 	vmov.f32	s0, s15
 8001604:	371c      	adds	r7, #28
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr

0800160e <rates_control_law>:
 *      Author: rtrujillo
 */
#include "Flight_Management_Control/rates_mode.h"

Cmd_s rates_control_law(Cmd_s inputs_norms, Gyro_s actual_gyro, Cmd_s K)
{
 800160e:	b490      	push	{r4, r7}
 8001610:	b098      	sub	sp, #96	@ 0x60
 8001612:	af00      	add	r7, sp, #0
 8001614:	eef0 5a43 	vmov.f32	s11, s6
 8001618:	eeb0 6a63 	vmov.f32	s12, s7
 800161c:	eef0 6a44 	vmov.f32	s13, s8
 8001620:	eeb0 7a64 	vmov.f32	s14, s9
 8001624:	eef0 7a45 	vmov.f32	s15, s10
 8001628:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30
 800162c:	edc7 0a0d 	vstr	s1, [r7, #52]	@ 0x34
 8001630:	ed87 1a0e 	vstr	s2, [r7, #56]	@ 0x38
 8001634:	edc7 1a0f 	vstr	s3, [r7, #60]	@ 0x3c
 8001638:	ed87 2a09 	vstr	s4, [r7, #36]	@ 0x24
 800163c:	edc7 2a0a 	vstr	s5, [r7, #40]	@ 0x28
 8001640:	edc7 5a0b 	vstr	s11, [r7, #44]	@ 0x2c
 8001644:	ed87 6a05 	vstr	s12, [r7, #20]
 8001648:	edc7 6a06 	vstr	s13, [r7, #24]
 800164c:	ed87 7a07 	vstr	s14, [r7, #28]
 8001650:	edc7 7a08 	vstr	s15, [r7, #32]
	//
	Cmd_s Outs;

	Outs.roll   = inputs_norms.roll  -  actual_gyro.roll * K.roll ;
 8001654:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001658:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800165c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001660:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001664:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001668:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
	Outs.pitch  = inputs_norms.pitch -  actual_gyro.pitch* K.pitch ;
 800166c:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001670:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8001674:	edd7 7a06 	vldr	s15, [r7, #24]
 8001678:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800167c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001680:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
	Outs.yaw    = inputs_norms.yaw   -  actual_gyro.yaw  * K.yaw ;
 8001684:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001688:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 800168c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001690:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001694:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001698:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
	Outs.thrust = inputs_norms.thrust ;
 800169c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800169e:	64fb      	str	r3, [r7, #76]	@ 0x4c

	return Outs ;
 80016a0:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 80016a4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80016a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80016ae:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80016b0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80016b2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80016b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80016b6:	ee06 0a10 	vmov	s12, r0
 80016ba:	ee06 1a90 	vmov	s13, r1
 80016be:	ee07 2a10 	vmov	s14, r2
 80016c2:	ee07 3a90 	vmov	s15, r3
}
 80016c6:	eeb0 0a46 	vmov.f32	s0, s12
 80016ca:	eef0 0a66 	vmov.f32	s1, s13
 80016ce:	eeb0 1a47 	vmov.f32	s2, s14
 80016d2:	eef0 1a67 	vmov.f32	s3, s15
 80016d6:	3760      	adds	r7, #96	@ 0x60
 80016d8:	46bd      	mov	sp, r7
 80016da:	bc90      	pop	{r4, r7}
 80016dc:	4770      	bx	lr
	...

080016e0 <get_actual_attitude>:

	return gyros;
}

Att_s get_actual_attitude(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b087      	sub	sp, #28
 80016e4:	af00      	add	r7, sp, #0
	//
	Att_s attitude;

	attitude.roll  = IMU.Roll ;
 80016e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001720 <get_actual_attitude+0x40>)
 80016e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016ea:	60bb      	str	r3, [r7, #8]
	attitude.pitch = IMU.Pitch;
 80016ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001720 <get_actual_attitude+0x40>)
 80016ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016f0:	60fb      	str	r3, [r7, #12]

	return attitude;
 80016f2:	f107 0310 	add.w	r3, r7, #16
 80016f6:	f107 0208 	add.w	r2, r7, #8
 80016fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016fe:	e883 0003 	stmia.w	r3, {r0, r1}
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	ee07 2a10 	vmov	s14, r2
 800170a:	ee07 3a90 	vmov	s15, r3
}
 800170e:	eeb0 0a47 	vmov.f32	s0, s14
 8001712:	eef0 0a67 	vmov.f32	s1, s15
 8001716:	371c      	adds	r7, #28
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	24001588 	.word	0x24001588

08001724 <refresh_actual_rates>:

	return acc;
}

void refresh_actual_rates(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
	//
	imu_gyr[0] 			= IMU.GYR.x ;
 8001728:	4b12      	ldr	r3, [pc, #72]	@ (8001774 <refresh_actual_rates+0x50>)
 800172a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800172c:	4a12      	ldr	r2, [pc, #72]	@ (8001778 <refresh_actual_rates+0x54>)
 800172e:	6013      	str	r3, [r2, #0]
	imu_gyr[1] 			= IMU.GYR.y ;
 8001730:	4b10      	ldr	r3, [pc, #64]	@ (8001774 <refresh_actual_rates+0x50>)
 8001732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001734:	4a10      	ldr	r2, [pc, #64]	@ (8001778 <refresh_actual_rates+0x54>)
 8001736:	6053      	str	r3, [r2, #4]
	imu_gyr[2] 			= IMU.GYR.z ;
 8001738:	4b0e      	ldr	r3, [pc, #56]	@ (8001774 <refresh_actual_rates+0x50>)
 800173a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173c:	4a0e      	ldr	r2, [pc, #56]	@ (8001778 <refresh_actual_rates+0x54>)
 800173e:	6093      	str	r3, [r2, #8]

	actual_rates.roll  	= imu_gyr[0] ;
 8001740:	4b0d      	ldr	r3, [pc, #52]	@ (8001778 <refresh_actual_rates+0x54>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a0d      	ldr	r2, [pc, #52]	@ (800177c <refresh_actual_rates+0x58>)
 8001746:	6013      	str	r3, [r2, #0]
	actual_rates.pitch 	= imu_gyr[1] ;
 8001748:	4b0b      	ldr	r3, [pc, #44]	@ (8001778 <refresh_actual_rates+0x54>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	4a0b      	ldr	r2, [pc, #44]	@ (800177c <refresh_actual_rates+0x58>)
 800174e:	6053      	str	r3, [r2, #4]
	actual_rates.yaw   	= imu_gyr[2] ;
 8001750:	4b09      	ldr	r3, [pc, #36]	@ (8001778 <refresh_actual_rates+0x54>)
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	4a09      	ldr	r2, [pc, #36]	@ (800177c <refresh_actual_rates+0x58>)
 8001756:	6093      	str	r3, [r2, #8]

	actual_attitude.roll   	= IMU.Roll  ;
 8001758:	4b06      	ldr	r3, [pc, #24]	@ (8001774 <refresh_actual_rates+0x50>)
 800175a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800175c:	4a08      	ldr	r2, [pc, #32]	@ (8001780 <refresh_actual_rates+0x5c>)
 800175e:	6013      	str	r3, [r2, #0]
	actual_attitude.pitch  	= IMU.Pitch ;
 8001760:	4b04      	ldr	r3, [pc, #16]	@ (8001774 <refresh_actual_rates+0x50>)
 8001762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001764:	4a06      	ldr	r2, [pc, #24]	@ (8001780 <refresh_actual_rates+0x5c>)
 8001766:	6053      	str	r3, [r2, #4]
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	24001588 	.word	0x24001588
 8001778:	240003a4 	.word	0x240003a4
 800177c:	240003b0 	.word	0x240003b0
 8001780:	240003bc 	.word	0x240003bc

08001784 <FIX_WING_MIXER>:
#include "Flight_Management_Control/servo_mixers.h"



Servo_mgmt_s FIX_WING_MIXER(Cmd_s control_cmd, Cmd_s trims)
{
 8001784:	b4b0      	push	{r4, r5, r7}
 8001786:	b091      	sub	sp, #68	@ 0x44
 8001788:	af00      	add	r7, sp, #0
 800178a:	6278      	str	r0, [r7, #36]	@ 0x24
 800178c:	eeb0 4a40 	vmov.f32	s8, s0
 8001790:	eef0 4a60 	vmov.f32	s9, s1
 8001794:	eeb0 5a41 	vmov.f32	s10, s2
 8001798:	eef0 5a61 	vmov.f32	s11, s3
 800179c:	eeb0 6a42 	vmov.f32	s12, s4
 80017a0:	eef0 6a62 	vmov.f32	s13, s5
 80017a4:	eeb0 7a43 	vmov.f32	s14, s6
 80017a8:	eef0 7a63 	vmov.f32	s15, s7
 80017ac:	ed87 4a05 	vstr	s8, [r7, #20]
 80017b0:	edc7 4a06 	vstr	s9, [r7, #24]
 80017b4:	ed87 5a07 	vstr	s10, [r7, #28]
 80017b8:	edc7 5a08 	vstr	s11, [r7, #32]
 80017bc:	ed87 6a01 	vstr	s12, [r7, #4]
 80017c0:	edc7 6a02 	vstr	s13, [r7, #8]
 80017c4:	ed87 7a03 	vstr	s14, [r7, #12]
 80017c8:	edc7 7a04 	vstr	s15, [r7, #16]
	//
	Servo_mgmt_s mixer_output;

	mixer_output.S[0]  = (uint16_t)(1500.0f + 500.f * control_cmd.roll  + (trims.roll  )) ;
 80017cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80017d0:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 8001918 <FIX_WING_MIXER+0x194>
 80017d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017d8:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 800191c <FIX_WING_MIXER+0x198>
 80017dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80017e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80017e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017ec:	ee17 3a90 	vmov	r3, s15
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	mixer_output.S[1]  = (uint16_t)(1500.0f + 500.f * control_cmd.roll  + (trims.roll  )) ;
 80017f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80017f8:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001918 <FIX_WING_MIXER+0x194>
 80017fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001800:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 800191c <FIX_WING_MIXER+0x198>
 8001804:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001808:	edd7 7a01 	vldr	s15, [r7, #4]
 800180c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001810:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001814:	ee17 3a90 	vmov	r3, s15
 8001818:	b29b      	uxth	r3, r3
 800181a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	mixer_output.S[2]  = (uint16_t)(1500.0f + 500.f * control_cmd.pitch + (trims.pitch )) ;
 800181c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001820:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8001918 <FIX_WING_MIXER+0x194>
 8001824:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001828:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 800191c <FIX_WING_MIXER+0x198>
 800182c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001830:	edd7 7a02 	vldr	s15, [r7, #8]
 8001834:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001838:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800183c:	ee17 3a90 	vmov	r3, s15
 8001840:	b29b      	uxth	r3, r3
 8001842:	863b      	strh	r3, [r7, #48]	@ 0x30
	mixer_output.S[3]  = (uint16_t)(1500.0f + 500.f * control_cmd.pitch + (trims.pitch )) ;
 8001844:	edd7 7a06 	vldr	s15, [r7, #24]
 8001848:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8001918 <FIX_WING_MIXER+0x194>
 800184c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001850:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800191c <FIX_WING_MIXER+0x198>
 8001854:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001858:	edd7 7a02 	vldr	s15, [r7, #8]
 800185c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001860:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001864:	ee17 3a90 	vmov	r3, s15
 8001868:	b29b      	uxth	r3, r3
 800186a:	867b      	strh	r3, [r7, #50]	@ 0x32
	mixer_output.S[4]  = (uint16_t)(1500.0f + 500.f * control_cmd.yaw   + (trims.yaw   )) ;
 800186c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001870:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8001918 <FIX_WING_MIXER+0x194>
 8001874:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001878:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 800191c <FIX_WING_MIXER+0x198>
 800187c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001880:	edd7 7a03 	vldr	s15, [r7, #12]
 8001884:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001888:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800188c:	ee17 3a90 	vmov	r3, s15
 8001890:	b29b      	uxth	r3, r3
 8001892:	86bb      	strh	r3, [r7, #52]	@ 0x34
	mixer_output.S[5]  = (uint16_t)(1500.0f + 500.f * control_cmd.yaw   + (trims.yaw   )) ;
 8001894:	edd7 7a07 	vldr	s15, [r7, #28]
 8001898:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8001918 <FIX_WING_MIXER+0x194>
 800189c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018a0:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 800191c <FIX_WING_MIXER+0x198>
 80018a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80018a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80018ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018b4:	ee17 3a90 	vmov	r3, s15
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	86fb      	strh	r3, [r7, #54]	@ 0x36
	mixer_output.S[6]  = (uint16_t)(1000.0f + 500.f * control_cmd.thrust+ (trims.thrust)) ;
 80018bc:	edd7 7a08 	vldr	s15, [r7, #32]
 80018c0:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8001918 <FIX_WING_MIXER+0x194>
 80018c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018c8:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8001920 <FIX_WING_MIXER+0x19c>
 80018cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80018d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80018d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018dc:	ee17 3a90 	vmov	r3, s15
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	873b      	strh	r3, [r7, #56]	@ 0x38
	mixer_output.S[7]  = (uint16_t)(1500.0f );
 80018e4:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80018e8:	877b      	strh	r3, [r7, #58]	@ 0x3a
	mixer_output.S[8]  = (uint16_t)(1500.0f );
 80018ea:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80018ee:	87bb      	strh	r3, [r7, #60]	@ 0x3c
	mixer_output.S[9]  = (uint16_t)(1500.0f );
 80018f0:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80018f4:	87fb      	strh	r3, [r7, #62]	@ 0x3e

	return mixer_output;
 80018f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f8:	461d      	mov	r5, r3
 80018fa:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 80018fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001900:	6028      	str	r0, [r5, #0]
 8001902:	6069      	str	r1, [r5, #4]
 8001904:	60aa      	str	r2, [r5, #8]
 8001906:	60eb      	str	r3, [r5, #12]
 8001908:	6820      	ldr	r0, [r4, #0]
 800190a:	6128      	str	r0, [r5, #16]
}
 800190c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800190e:	3744      	adds	r7, #68	@ 0x44
 8001910:	46bd      	mov	sp, r7
 8001912:	bcb0      	pop	{r4, r5, r7}
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	43fa0000 	.word	0x43fa0000
 800191c:	44bb8000 	.word	0x44bb8000
 8001920:	447a0000 	.word	0x447a0000

08001924 <FLYING_WING_MIXER>:

Servo_mgmt_s FLYING_WING_MIXER(Cmd_s control_cmd, Cmd_s trims)
{
 8001924:	b4b0      	push	{r4, r5, r7}
 8001926:	b091      	sub	sp, #68	@ 0x44
 8001928:	af00      	add	r7, sp, #0
 800192a:	6278      	str	r0, [r7, #36]	@ 0x24
 800192c:	eeb0 4a40 	vmov.f32	s8, s0
 8001930:	eef0 4a60 	vmov.f32	s9, s1
 8001934:	eeb0 5a41 	vmov.f32	s10, s2
 8001938:	eef0 5a61 	vmov.f32	s11, s3
 800193c:	eeb0 6a42 	vmov.f32	s12, s4
 8001940:	eef0 6a62 	vmov.f32	s13, s5
 8001944:	eeb0 7a43 	vmov.f32	s14, s6
 8001948:	eef0 7a63 	vmov.f32	s15, s7
 800194c:	ed87 4a05 	vstr	s8, [r7, #20]
 8001950:	edc7 4a06 	vstr	s9, [r7, #24]
 8001954:	ed87 5a07 	vstr	s10, [r7, #28]
 8001958:	edc7 5a08 	vstr	s11, [r7, #32]
 800195c:	ed87 6a01 	vstr	s12, [r7, #4]
 8001960:	edc7 6a02 	vstr	s13, [r7, #8]
 8001964:	ed87 7a03 	vstr	s14, [r7, #12]
 8001968:	edc7 7a04 	vstr	s15, [r7, #16]
	//
	Servo_mgmt_s mixer_output;

	mixer_output.S[0]  = (uint16_t)(1500.0f + 500.f * control_cmd.roll  + (1500 - trims.roll  )) ;
 800196c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001970:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 8001af0 <FLYING_WING_MIXER+0x1cc>
 8001974:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001978:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8001af4 <FLYING_WING_MIXER+0x1d0>
 800197c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001980:	edd7 7a01 	vldr	s15, [r7, #4]
 8001984:	eddf 6a5b 	vldr	s13, [pc, #364]	@ 8001af4 <FLYING_WING_MIXER+0x1d0>
 8001988:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800198c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001990:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001994:	ee17 3a90 	vmov	r3, s15
 8001998:	b29b      	uxth	r3, r3
 800199a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	mixer_output.S[1]  = (uint16_t)(1500.0f + 500.f * control_cmd.roll  + (1500 - trims.roll  )) ;
 800199c:	edd7 7a05 	vldr	s15, [r7, #20]
 80019a0:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8001af0 <FLYING_WING_MIXER+0x1cc>
 80019a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019a8:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001af4 <FLYING_WING_MIXER+0x1d0>
 80019ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80019b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80019b4:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8001af4 <FLYING_WING_MIXER+0x1d0>
 80019b8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80019bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019c4:	ee17 3a90 	vmov	r3, s15
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	mixer_output.S[2]  = (uint16_t)(1500.0f + 500.f * control_cmd.pitch + (1500 - trims.pitch )) ;
 80019cc:	edd7 7a06 	vldr	s15, [r7, #24]
 80019d0:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001af0 <FLYING_WING_MIXER+0x1cc>
 80019d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019d8:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8001af4 <FLYING_WING_MIXER+0x1d0>
 80019dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80019e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80019e4:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8001af4 <FLYING_WING_MIXER+0x1d0>
 80019e8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80019ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019f4:	ee17 3a90 	vmov	r3, s15
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	863b      	strh	r3, [r7, #48]	@ 0x30
	mixer_output.S[3]  = (uint16_t)(1500.0f + 500.f * control_cmd.pitch + (1500 - trims.pitch )) ;
 80019fc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a00:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8001af0 <FLYING_WING_MIXER+0x1cc>
 8001a04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a08:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8001af4 <FLYING_WING_MIXER+0x1d0>
 8001a0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001a10:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a14:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8001af4 <FLYING_WING_MIXER+0x1d0>
 8001a18:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001a1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a24:	ee17 3a90 	vmov	r3, s15
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	867b      	strh	r3, [r7, #50]	@ 0x32
	mixer_output.S[4]  = (uint16_t)(1500.0f + 500.f * control_cmd.yaw   + (1500 - trims.yaw   )) ;
 8001a2c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a30:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8001af0 <FLYING_WING_MIXER+0x1cc>
 8001a34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a38:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8001af4 <FLYING_WING_MIXER+0x1d0>
 8001a3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001a40:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a44:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8001af4 <FLYING_WING_MIXER+0x1d0>
 8001a48:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001a4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a54:	ee17 3a90 	vmov	r3, s15
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	86bb      	strh	r3, [r7, #52]	@ 0x34
	mixer_output.S[5]  = (uint16_t)(1500.0f + 500.f * control_cmd.yaw   + (1500 - trims.yaw   )) ;
 8001a5c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a60:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8001af0 <FLYING_WING_MIXER+0x1cc>
 8001a64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a68:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001af4 <FLYING_WING_MIXER+0x1d0>
 8001a6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001a70:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a74:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8001af4 <FLYING_WING_MIXER+0x1d0>
 8001a78:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001a7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a84:	ee17 3a90 	vmov	r3, s15
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	86fb      	strh	r3, [r7, #54]	@ 0x36
	mixer_output.S[6]  = (uint16_t)(1000.0f + 500.f * control_cmd.thrust+ (1500 - trims.thrust)) ;
 8001a8c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a90:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001af0 <FLYING_WING_MIXER+0x1cc>
 8001a94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a98:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001af8 <FLYING_WING_MIXER+0x1d4>
 8001a9c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001aa0:	edd7 7a04 	vldr	s15, [r7, #16]
 8001aa4:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8001af4 <FLYING_WING_MIXER+0x1d0>
 8001aa8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001aac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ab0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ab4:	ee17 3a90 	vmov	r3, s15
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	873b      	strh	r3, [r7, #56]	@ 0x38
	mixer_output.S[7]  = (uint16_t)(1500.0f );
 8001abc:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8001ac0:	877b      	strh	r3, [r7, #58]	@ 0x3a
	mixer_output.S[8]  = (uint16_t)(1500.0f );
 8001ac2:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8001ac6:	87bb      	strh	r3, [r7, #60]	@ 0x3c
	mixer_output.S[9]  = (uint16_t)(1500.0f );
 8001ac8:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8001acc:	87fb      	strh	r3, [r7, #62]	@ 0x3e

	return mixer_output;
 8001ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad0:	461d      	mov	r5, r3
 8001ad2:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8001ad6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ad8:	6028      	str	r0, [r5, #0]
 8001ada:	6069      	str	r1, [r5, #4]
 8001adc:	60aa      	str	r2, [r5, #8]
 8001ade:	60eb      	str	r3, [r5, #12]
 8001ae0:	6820      	ldr	r0, [r4, #0]
 8001ae2:	6128      	str	r0, [r5, #16]
}
 8001ae4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001ae6:	3744      	adds	r7, #68	@ 0x44
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bcb0      	pop	{r4, r5, r7}
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	43fa0000 	.word	0x43fa0000
 8001af4:	44bb8000 	.word	0x44bb8000
 8001af8:	447a0000 	.word	0x447a0000

08001afc <TANDEM_WING_MIXER>:

Servo_mgmt_s TANDEM_WING_MIXER(Cmd_s control_cmd, Cmd_s trims)
{
 8001afc:	b4b0      	push	{r4, r5, r7}
 8001afe:	b091      	sub	sp, #68	@ 0x44
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6278      	str	r0, [r7, #36]	@ 0x24
 8001b04:	eeb0 4a40 	vmov.f32	s8, s0
 8001b08:	eef0 4a60 	vmov.f32	s9, s1
 8001b0c:	eeb0 5a41 	vmov.f32	s10, s2
 8001b10:	eef0 5a61 	vmov.f32	s11, s3
 8001b14:	eeb0 6a42 	vmov.f32	s12, s4
 8001b18:	eef0 6a62 	vmov.f32	s13, s5
 8001b1c:	eeb0 7a43 	vmov.f32	s14, s6
 8001b20:	eef0 7a63 	vmov.f32	s15, s7
 8001b24:	ed87 4a05 	vstr	s8, [r7, #20]
 8001b28:	edc7 4a06 	vstr	s9, [r7, #24]
 8001b2c:	ed87 5a07 	vstr	s10, [r7, #28]
 8001b30:	edc7 5a08 	vstr	s11, [r7, #32]
 8001b34:	ed87 6a01 	vstr	s12, [r7, #4]
 8001b38:	edc7 6a02 	vstr	s13, [r7, #8]
 8001b3c:	ed87 7a03 	vstr	s14, [r7, #12]
 8001b40:	edc7 7a04 	vstr	s15, [r7, #16]
	//
	Servo_mgmt_s mixer_output;

	mixer_output.S[0]  = (uint16_t)(1500.0f + 500.f * control_cmd.roll  + (1500 - trims.roll  )) ;
 8001b44:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b48:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 8001cc8 <TANDEM_WING_MIXER+0x1cc>
 8001b4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b50:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8001ccc <TANDEM_WING_MIXER+0x1d0>
 8001b54:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001b58:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b5c:	eddf 6a5b 	vldr	s13, [pc, #364]	@ 8001ccc <TANDEM_WING_MIXER+0x1d0>
 8001b60:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001b64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b6c:	ee17 3a90 	vmov	r3, s15
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	mixer_output.S[1]  = (uint16_t)(1500.0f + 500.f * control_cmd.roll  + (1500 - trims.roll  )) ;
 8001b74:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b78:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8001cc8 <TANDEM_WING_MIXER+0x1cc>
 8001b7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b80:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001ccc <TANDEM_WING_MIXER+0x1d0>
 8001b84:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001b88:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b8c:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8001ccc <TANDEM_WING_MIXER+0x1d0>
 8001b90:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001b94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b9c:	ee17 3a90 	vmov	r3, s15
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	mixer_output.S[2]  = (uint16_t)(1500.0f + 500.f * control_cmd.pitch + (1500 - trims.pitch )) ;
 8001ba4:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ba8:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001cc8 <TANDEM_WING_MIXER+0x1cc>
 8001bac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bb0:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8001ccc <TANDEM_WING_MIXER+0x1d0>
 8001bb4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001bb8:	edd7 7a02 	vldr	s15, [r7, #8]
 8001bbc:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8001ccc <TANDEM_WING_MIXER+0x1d0>
 8001bc0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001bc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bcc:	ee17 3a90 	vmov	r3, s15
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	863b      	strh	r3, [r7, #48]	@ 0x30
	mixer_output.S[3]  = (uint16_t)(1500.0f + 500.f * control_cmd.pitch + (1500 - trims.pitch )) ;
 8001bd4:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bd8:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8001cc8 <TANDEM_WING_MIXER+0x1cc>
 8001bdc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001be0:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8001ccc <TANDEM_WING_MIXER+0x1d0>
 8001be4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001be8:	edd7 7a02 	vldr	s15, [r7, #8]
 8001bec:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8001ccc <TANDEM_WING_MIXER+0x1d0>
 8001bf0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001bf4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bfc:	ee17 3a90 	vmov	r3, s15
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	867b      	strh	r3, [r7, #50]	@ 0x32
	mixer_output.S[4]  = (uint16_t)(1500.0f + 500.f * control_cmd.yaw   + (1500 - trims.yaw   )) ;
 8001c04:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c08:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8001cc8 <TANDEM_WING_MIXER+0x1cc>
 8001c0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c10:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8001ccc <TANDEM_WING_MIXER+0x1d0>
 8001c14:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001c18:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c1c:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8001ccc <TANDEM_WING_MIXER+0x1d0>
 8001c20:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001c24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c2c:	ee17 3a90 	vmov	r3, s15
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	86bb      	strh	r3, [r7, #52]	@ 0x34
	mixer_output.S[5]  = (uint16_t)(1500.0f + 500.f * control_cmd.yaw   + (1500 - trims.yaw   )) ;
 8001c34:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c38:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8001cc8 <TANDEM_WING_MIXER+0x1cc>
 8001c3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c40:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001ccc <TANDEM_WING_MIXER+0x1d0>
 8001c44:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001c48:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c4c:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8001ccc <TANDEM_WING_MIXER+0x1d0>
 8001c50:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001c54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c5c:	ee17 3a90 	vmov	r3, s15
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	86fb      	strh	r3, [r7, #54]	@ 0x36
	mixer_output.S[6]  = (uint16_t)(1000.0f + 500.f * control_cmd.thrust+ (1500 - trims.thrust)) ;
 8001c64:	edd7 7a08 	vldr	s15, [r7, #32]
 8001c68:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001cc8 <TANDEM_WING_MIXER+0x1cc>
 8001c6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c70:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001cd0 <TANDEM_WING_MIXER+0x1d4>
 8001c74:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001c78:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c7c:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8001ccc <TANDEM_WING_MIXER+0x1d0>
 8001c80:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001c84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c8c:	ee17 3a90 	vmov	r3, s15
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	873b      	strh	r3, [r7, #56]	@ 0x38
	mixer_output.S[7]  = (uint16_t)(1500.0f );
 8001c94:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8001c98:	877b      	strh	r3, [r7, #58]	@ 0x3a
	mixer_output.S[8]  = (uint16_t)(1500.0f );
 8001c9a:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8001c9e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
	mixer_output.S[9]  = (uint16_t)(1500.0f );
 8001ca0:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8001ca4:	87fb      	strh	r3, [r7, #62]	@ 0x3e

	return mixer_output;
 8001ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca8:	461d      	mov	r5, r3
 8001caa:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8001cae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cb0:	6028      	str	r0, [r5, #0]
 8001cb2:	6069      	str	r1, [r5, #4]
 8001cb4:	60aa      	str	r2, [r5, #8]
 8001cb6:	60eb      	str	r3, [r5, #12]
 8001cb8:	6820      	ldr	r0, [r4, #0]
 8001cba:	6128      	str	r0, [r5, #16]
}
 8001cbc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001cbe:	3744      	adds	r7, #68	@ 0x44
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bcb0      	pop	{r4, r5, r7}
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	43fa0000 	.word	0x43fa0000
 8001ccc:	44bb8000 	.word	0x44bb8000
 8001cd0:	447a0000 	.word	0x447a0000

08001cd4 <CUSTOM_FRAME_MIXER>:

Servo_mgmt_s CUSTOM_FRAME_MIXER(Cmd_s control_cmd, Cmd_s trims)
{
 8001cd4:	b4b0      	push	{r4, r5, r7}
 8001cd6:	b091      	sub	sp, #68	@ 0x44
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6278      	str	r0, [r7, #36]	@ 0x24
 8001cdc:	eeb0 4a40 	vmov.f32	s8, s0
 8001ce0:	eef0 4a60 	vmov.f32	s9, s1
 8001ce4:	eeb0 5a41 	vmov.f32	s10, s2
 8001ce8:	eef0 5a61 	vmov.f32	s11, s3
 8001cec:	eeb0 6a42 	vmov.f32	s12, s4
 8001cf0:	eef0 6a62 	vmov.f32	s13, s5
 8001cf4:	eeb0 7a43 	vmov.f32	s14, s6
 8001cf8:	eef0 7a63 	vmov.f32	s15, s7
 8001cfc:	ed87 4a05 	vstr	s8, [r7, #20]
 8001d00:	edc7 4a06 	vstr	s9, [r7, #24]
 8001d04:	ed87 5a07 	vstr	s10, [r7, #28]
 8001d08:	edc7 5a08 	vstr	s11, [r7, #32]
 8001d0c:	ed87 6a01 	vstr	s12, [r7, #4]
 8001d10:	edc7 6a02 	vstr	s13, [r7, #8]
 8001d14:	ed87 7a03 	vstr	s14, [r7, #12]
 8001d18:	edc7 7a04 	vstr	s15, [r7, #16]
	//
	Servo_mgmt_s mixer_output;

	mixer_output.S[0]  = (uint16_t)(1500.0f + 500.f * control_cmd.roll  + (1500 - trims.roll  )) ;
 8001d1c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d20:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 8001ea0 <CUSTOM_FRAME_MIXER+0x1cc>
 8001d24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d28:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8001ea4 <CUSTOM_FRAME_MIXER+0x1d0>
 8001d2c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001d30:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d34:	eddf 6a5b 	vldr	s13, [pc, #364]	@ 8001ea4 <CUSTOM_FRAME_MIXER+0x1d0>
 8001d38:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001d3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d44:	ee17 3a90 	vmov	r3, s15
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	mixer_output.S[1]  = (uint16_t)(1500.0f + 500.f * control_cmd.roll  + (1500 - trims.roll  )) ;
 8001d4c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d50:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8001ea0 <CUSTOM_FRAME_MIXER+0x1cc>
 8001d54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d58:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001ea4 <CUSTOM_FRAME_MIXER+0x1d0>
 8001d5c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001d60:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d64:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8001ea4 <CUSTOM_FRAME_MIXER+0x1d0>
 8001d68:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001d6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d74:	ee17 3a90 	vmov	r3, s15
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	mixer_output.S[2]  = (uint16_t)(1500.0f + 500.f * control_cmd.pitch + (1500 - trims.pitch )) ;
 8001d7c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d80:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001ea0 <CUSTOM_FRAME_MIXER+0x1cc>
 8001d84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d88:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8001ea4 <CUSTOM_FRAME_MIXER+0x1d0>
 8001d8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001d90:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d94:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8001ea4 <CUSTOM_FRAME_MIXER+0x1d0>
 8001d98:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001d9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001da0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001da4:	ee17 3a90 	vmov	r3, s15
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	863b      	strh	r3, [r7, #48]	@ 0x30
	mixer_output.S[3]  = (uint16_t)(1500.0f + 500.f * control_cmd.pitch + (1500 - trims.pitch )) ;
 8001dac:	edd7 7a06 	vldr	s15, [r7, #24]
 8001db0:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8001ea0 <CUSTOM_FRAME_MIXER+0x1cc>
 8001db4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001db8:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8001ea4 <CUSTOM_FRAME_MIXER+0x1d0>
 8001dbc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001dc0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001dc4:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8001ea4 <CUSTOM_FRAME_MIXER+0x1d0>
 8001dc8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001dcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001dd4:	ee17 3a90 	vmov	r3, s15
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	867b      	strh	r3, [r7, #50]	@ 0x32
	mixer_output.S[4]  = (uint16_t)(1500.0f + 500.f * control_cmd.yaw   + (1500 - trims.yaw   )) ;
 8001ddc:	edd7 7a07 	vldr	s15, [r7, #28]
 8001de0:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8001ea0 <CUSTOM_FRAME_MIXER+0x1cc>
 8001de4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001de8:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8001ea4 <CUSTOM_FRAME_MIXER+0x1d0>
 8001dec:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001df0:	edd7 7a03 	vldr	s15, [r7, #12]
 8001df4:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8001ea4 <CUSTOM_FRAME_MIXER+0x1d0>
 8001df8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001dfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e04:	ee17 3a90 	vmov	r3, s15
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	86bb      	strh	r3, [r7, #52]	@ 0x34
	mixer_output.S[5]  = (uint16_t)(1500.0f + 500.f * control_cmd.yaw   + (1500 - trims.yaw   )) ;
 8001e0c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e10:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8001ea0 <CUSTOM_FRAME_MIXER+0x1cc>
 8001e14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e18:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001ea4 <CUSTOM_FRAME_MIXER+0x1d0>
 8001e1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001e20:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e24:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8001ea4 <CUSTOM_FRAME_MIXER+0x1d0>
 8001e28:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001e2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e34:	ee17 3a90 	vmov	r3, s15
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	86fb      	strh	r3, [r7, #54]	@ 0x36
	mixer_output.S[6]  = (uint16_t)(1000.0f + 500.f * control_cmd.thrust+ (1500 - trims.thrust)) ;
 8001e3c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001e40:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001ea0 <CUSTOM_FRAME_MIXER+0x1cc>
 8001e44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e48:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001ea8 <CUSTOM_FRAME_MIXER+0x1d4>
 8001e4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001e50:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e54:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8001ea4 <CUSTOM_FRAME_MIXER+0x1d0>
 8001e58:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001e5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e64:	ee17 3a90 	vmov	r3, s15
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	873b      	strh	r3, [r7, #56]	@ 0x38
	mixer_output.S[7]  = (uint16_t)(1500.0f );
 8001e6c:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8001e70:	877b      	strh	r3, [r7, #58]	@ 0x3a
	mixer_output.S[8]  = (uint16_t)(1500.0f );
 8001e72:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8001e76:	87bb      	strh	r3, [r7, #60]	@ 0x3c
	mixer_output.S[9]  = (uint16_t)(1500.0f );
 8001e78:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8001e7c:	87fb      	strh	r3, [r7, #62]	@ 0x3e

	return mixer_output;
 8001e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e80:	461d      	mov	r5, r3
 8001e82:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8001e86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e88:	6028      	str	r0, [r5, #0]
 8001e8a:	6069      	str	r1, [r5, #4]
 8001e8c:	60aa      	str	r2, [r5, #8]
 8001e8e:	60eb      	str	r3, [r5, #12]
 8001e90:	6820      	ldr	r0, [r4, #0]
 8001e92:	6128      	str	r0, [r5, #16]
}
 8001e94:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001e96:	3744      	adds	r7, #68	@ 0x44
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bcb0      	pop	{r4, r5, r7}
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	43fa0000 	.word	0x43fa0000
 8001ea4:	44bb8000 	.word	0x44bb8000
 8001ea8:	447a0000 	.word	0x447a0000

08001eac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001eb2:	4b15      	ldr	r3, [pc, #84]	@ (8001f08 <MX_DMA_Init+0x5c>)
 8001eb4:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8001eb8:	4a13      	ldr	r2, [pc, #76]	@ (8001f08 <MX_DMA_Init+0x5c>)
 8001eba:	f043 0301 	orr.w	r3, r3, #1
 8001ebe:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8001ec2:	4b11      	ldr	r3, [pc, #68]	@ (8001f08 <MX_DMA_Init+0x5c>)
 8001ec4:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8001ec8:	f003 0301 	and.w	r3, r3, #1
 8001ecc:	607b      	str	r3, [r7, #4]
 8001ece:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	2105      	movs	r1, #5
 8001ed4:	200b      	movs	r0, #11
 8001ed6:	f004 fdbf 	bl	8006a58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001eda:	200b      	movs	r0, #11
 8001edc:	f004 fdd6 	bl	8006a8c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	2105      	movs	r1, #5
 8001ee4:	200c      	movs	r0, #12
 8001ee6:	f004 fdb7 	bl	8006a58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001eea:	200c      	movs	r0, #12
 8001eec:	f004 fdce 	bl	8006a8c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	2105      	movs	r1, #5
 8001ef4:	200d      	movs	r0, #13
 8001ef6:	f004 fdaf 	bl	8006a58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001efa:	200d      	movs	r0, #13
 8001efc:	f004 fdc6 	bl	8006a8c <HAL_NVIC_EnableIRQ>

}
 8001f00:	bf00      	nop
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	58024400 	.word	0x58024400

08001f0c <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001f10:	4b2e      	ldr	r3, [pc, #184]	@ (8001fcc <MX_FDCAN1_Init+0xc0>)
 8001f12:	4a2f      	ldr	r2, [pc, #188]	@ (8001fd0 <MX_FDCAN1_Init+0xc4>)
 8001f14:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001f16:	4b2d      	ldr	r3, [pc, #180]	@ (8001fcc <MX_FDCAN1_Init+0xc0>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001f1c:	4b2b      	ldr	r3, [pc, #172]	@ (8001fcc <MX_FDCAN1_Init+0xc0>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001f22:	4b2a      	ldr	r3, [pc, #168]	@ (8001fcc <MX_FDCAN1_Init+0xc0>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001f28:	4b28      	ldr	r3, [pc, #160]	@ (8001fcc <MX_FDCAN1_Init+0xc0>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001f2e:	4b27      	ldr	r3, [pc, #156]	@ (8001fcc <MX_FDCAN1_Init+0xc0>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8001f34:	4b25      	ldr	r3, [pc, #148]	@ (8001fcc <MX_FDCAN1_Init+0xc0>)
 8001f36:	2210      	movs	r2, #16
 8001f38:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001f3a:	4b24      	ldr	r3, [pc, #144]	@ (8001fcc <MX_FDCAN1_Init+0xc0>)
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8001f40:	4b22      	ldr	r3, [pc, #136]	@ (8001fcc <MX_FDCAN1_Init+0xc0>)
 8001f42:	2202      	movs	r2, #2
 8001f44:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001f46:	4b21      	ldr	r3, [pc, #132]	@ (8001fcc <MX_FDCAN1_Init+0xc0>)
 8001f48:	2202      	movs	r2, #2
 8001f4a:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001f4c:	4b1f      	ldr	r3, [pc, #124]	@ (8001fcc <MX_FDCAN1_Init+0xc0>)
 8001f4e:	2201      	movs	r2, #1
 8001f50:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001f52:	4b1e      	ldr	r3, [pc, #120]	@ (8001fcc <MX_FDCAN1_Init+0xc0>)
 8001f54:	2201      	movs	r2, #1
 8001f56:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001f58:	4b1c      	ldr	r3, [pc, #112]	@ (8001fcc <MX_FDCAN1_Init+0xc0>)
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001f5e:	4b1b      	ldr	r3, [pc, #108]	@ (8001fcc <MX_FDCAN1_Init+0xc0>)
 8001f60:	2201      	movs	r2, #1
 8001f62:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8001f64:	4b19      	ldr	r3, [pc, #100]	@ (8001fcc <MX_FDCAN1_Init+0xc0>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8001f6a:	4b18      	ldr	r3, [pc, #96]	@ (8001fcc <MX_FDCAN1_Init+0xc0>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001f70:	4b16      	ldr	r3, [pc, #88]	@ (8001fcc <MX_FDCAN1_Init+0xc0>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8001f76:	4b15      	ldr	r3, [pc, #84]	@ (8001fcc <MX_FDCAN1_Init+0xc0>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001f7c:	4b13      	ldr	r3, [pc, #76]	@ (8001fcc <MX_FDCAN1_Init+0xc0>)
 8001f7e:	2204      	movs	r2, #4
 8001f80:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8001f82:	4b12      	ldr	r3, [pc, #72]	@ (8001fcc <MX_FDCAN1_Init+0xc0>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001f88:	4b10      	ldr	r3, [pc, #64]	@ (8001fcc <MX_FDCAN1_Init+0xc0>)
 8001f8a:	2204      	movs	r2, #4
 8001f8c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8001f8e:	4b0f      	ldr	r3, [pc, #60]	@ (8001fcc <MX_FDCAN1_Init+0xc0>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001f94:	4b0d      	ldr	r3, [pc, #52]	@ (8001fcc <MX_FDCAN1_Init+0xc0>)
 8001f96:	2204      	movs	r2, #4
 8001f98:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8001f9a:	4b0c      	ldr	r3, [pc, #48]	@ (8001fcc <MX_FDCAN1_Init+0xc0>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8001fa0:	4b0a      	ldr	r3, [pc, #40]	@ (8001fcc <MX_FDCAN1_Init+0xc0>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8001fa6:	4b09      	ldr	r3, [pc, #36]	@ (8001fcc <MX_FDCAN1_Init+0xc0>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001fac:	4b07      	ldr	r3, [pc, #28]	@ (8001fcc <MX_FDCAN1_Init+0xc0>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001fb2:	4b06      	ldr	r3, [pc, #24]	@ (8001fcc <MX_FDCAN1_Init+0xc0>)
 8001fb4:	2204      	movs	r2, #4
 8001fb6:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001fb8:	4804      	ldr	r0, [pc, #16]	@ (8001fcc <MX_FDCAN1_Init+0xc0>)
 8001fba:	f007 fcd7 	bl	800996c <HAL_FDCAN_Init>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8001fc4:	f001 f8f2 	bl	80031ac <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001fc8:	bf00      	nop
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	240003c4 	.word	0x240003c4
 8001fd0:	4000a000 	.word	0x4000a000

08001fd4 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b0ba      	sub	sp, #232	@ 0xe8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fdc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	605a      	str	r2, [r3, #4]
 8001fe6:	609a      	str	r2, [r3, #8]
 8001fe8:	60da      	str	r2, [r3, #12]
 8001fea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fec:	f107 0310 	add.w	r3, r7, #16
 8001ff0:	22c0      	movs	r2, #192	@ 0xc0
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f015 fe46 	bl	8017c86 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a2f      	ldr	r2, [pc, #188]	@ (80020bc <HAL_FDCAN_MspInit+0xe8>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d157      	bne.n	80020b4 <HAL_FDCAN_MspInit+0xe0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002004:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002008:	f04f 0300 	mov.w	r3, #0
 800200c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8002010:	2304      	movs	r3, #4
 8002012:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 8;
 8002014:	2308      	movs	r3, #8
 8002016:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8002018:	2302      	movs	r3, #2
 800201a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 1;
 800201c:	2301      	movs	r3, #1
 800201e:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8002020:	2302      	movs	r3, #2
 8002022:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8002024:	23c0      	movs	r3, #192	@ 0xc0
 8002026:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8002028:	2300      	movs	r3, #0
 800202a:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800202c:	2300      	movs	r3, #0
 800202e:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 8002030:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002034:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002038:	f107 0310 	add.w	r3, r7, #16
 800203c:	4618      	mov	r0, r3
 800203e:	f009 fb31 	bl	800b6a4 <HAL_RCCEx_PeriphCLKConfig>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <HAL_FDCAN_MspInit+0x78>
    {
      Error_Handler();
 8002048:	f001 f8b0 	bl	80031ac <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800204c:	4b1c      	ldr	r3, [pc, #112]	@ (80020c0 <HAL_FDCAN_MspInit+0xec>)
 800204e:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8002052:	4a1b      	ldr	r2, [pc, #108]	@ (80020c0 <HAL_FDCAN_MspInit+0xec>)
 8002054:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002058:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
 800205c:	4b18      	ldr	r3, [pc, #96]	@ (80020c0 <HAL_FDCAN_MspInit+0xec>)
 800205e:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8002062:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800206a:	4b15      	ldr	r3, [pc, #84]	@ (80020c0 <HAL_FDCAN_MspInit+0xec>)
 800206c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002070:	4a13      	ldr	r2, [pc, #76]	@ (80020c0 <HAL_FDCAN_MspInit+0xec>)
 8002072:	f043 0301 	orr.w	r3, r3, #1
 8002076:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800207a:	4b11      	ldr	r3, [pc, #68]	@ (80020c0 <HAL_FDCAN_MspInit+0xec>)
 800207c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002080:	f003 0301 	and.w	r3, r3, #1
 8002084:	60bb      	str	r3, [r7, #8]
 8002086:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002088:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800208c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002090:	2302      	movs	r3, #2
 8002092:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002096:	2300      	movs	r3, #0
 8002098:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800209c:	2300      	movs	r3, #0
 800209e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80020a2:	2309      	movs	r3, #9
 80020a4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020a8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80020ac:	4619      	mov	r1, r3
 80020ae:	4805      	ldr	r0, [pc, #20]	@ (80020c4 <HAL_FDCAN_MspInit+0xf0>)
 80020b0:	f007 ffc0 	bl	800a034 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 80020b4:	bf00      	nop
 80020b6:	37e8      	adds	r7, #232	@ 0xe8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	4000a000 	.word	0x4000a000
 80020c0:	58024400 	.word	0x58024400
 80020c4:	58020000 	.word	0x58020000

080020c8 <f>:
/* Includes ------------------------------------------------------------------*/
#include "filter.h"
#include <math.h>

// Derivada dx/dt = f(x,u)
float f(float x, float u,float par) {
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	ed87 0a03 	vstr	s0, [r7, #12]
 80020d2:	edc7 0a02 	vstr	s1, [r7, #8]
 80020d6:	ed87 1a01 	vstr	s2, [r7, #4]
    return (-x * par ) + (u * par);
 80020da:	edd7 7a03 	vldr	s15, [r7, #12]
 80020de:	eeb1 7a67 	vneg.f32	s14, s15
 80020e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80020e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020ea:	edd7 6a02 	vldr	s13, [r7, #8]
 80020ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80020f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020f6:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80020fa:	eeb0 0a67 	vmov.f32	s0, s15
 80020fe:	3714      	adds	r7, #20
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <rk4_step>:

// Paso Runge-Kutta 4
void rk4_step(FilterState *state, float u, float dt, float params) {
 8002108:	b580      	push	{r7, lr}
 800210a:	b088      	sub	sp, #32
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	ed87 0a02 	vstr	s0, [r7, #8]
 8002114:	edc7 0a01 	vstr	s1, [r7, #4]
 8002118:	ed87 1a00 	vstr	s2, [r7]
    float k1, k2, k3, k4;

    k1 = f(state->x, u,params);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	edd3 7a00 	vldr	s15, [r3]
 8002122:	ed97 1a00 	vldr	s2, [r7]
 8002126:	edd7 0a02 	vldr	s1, [r7, #8]
 800212a:	eeb0 0a67 	vmov.f32	s0, s15
 800212e:	f7ff ffcb 	bl	80020c8 <f>
 8002132:	ed87 0a07 	vstr	s0, [r7, #28]
    k2 = f(state->x + 0.5f*dt*k1, u,params);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	ed93 7a00 	vldr	s14, [r3]
 800213c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002140:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8002144:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002148:	edd7 7a07 	vldr	s15, [r7, #28]
 800214c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002150:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002154:	ed97 1a00 	vldr	s2, [r7]
 8002158:	edd7 0a02 	vldr	s1, [r7, #8]
 800215c:	eeb0 0a67 	vmov.f32	s0, s15
 8002160:	f7ff ffb2 	bl	80020c8 <f>
 8002164:	ed87 0a06 	vstr	s0, [r7, #24]
    k3 = f(state->x + 0.5f*dt*k2, u,params);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	ed93 7a00 	vldr	s14, [r3]
 800216e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002172:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8002176:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800217a:	edd7 7a06 	vldr	s15, [r7, #24]
 800217e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002182:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002186:	ed97 1a00 	vldr	s2, [r7]
 800218a:	edd7 0a02 	vldr	s1, [r7, #8]
 800218e:	eeb0 0a67 	vmov.f32	s0, s15
 8002192:	f7ff ff99 	bl	80020c8 <f>
 8002196:	ed87 0a05 	vstr	s0, [r7, #20]
    k4 = f(state->x + dt*k3, u,params);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	ed93 7a00 	vldr	s14, [r3]
 80021a0:	edd7 6a01 	vldr	s13, [r7, #4]
 80021a4:	edd7 7a05 	vldr	s15, [r7, #20]
 80021a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021b0:	ed97 1a00 	vldr	s2, [r7]
 80021b4:	edd7 0a02 	vldr	s1, [r7, #8]
 80021b8:	eeb0 0a67 	vmov.f32	s0, s15
 80021bc:	f7ff ff84 	bl	80020c8 <f>
 80021c0:	ed87 0a04 	vstr	s0, [r7, #16]

    state->x += (dt/6.0f)*(k1 + 2*k2 + 2*k3 + k4);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	ed93 7a00 	vldr	s14, [r3]
 80021ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80021ce:	eeb1 6a08 	vmov.f32	s12, #24	@ 0x40c00000  6.0
 80021d2:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80021d6:	edd7 7a06 	vldr	s15, [r7, #24]
 80021da:	ee37 6aa7 	vadd.f32	s12, s15, s15
 80021de:	edd7 7a07 	vldr	s15, [r7, #28]
 80021e2:	ee36 6a27 	vadd.f32	s12, s12, s15
 80021e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80021ea:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80021ee:	ee36 6a27 	vadd.f32	s12, s12, s15
 80021f2:	edd7 7a04 	vldr	s15, [r7, #16]
 80021f6:	ee76 7a27 	vadd.f32	s15, s12, s15
 80021fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	edc3 7a00 	vstr	s15, [r3]
}
 8002208:	bf00      	nop
 800220a:	3720      	adds	r7, #32
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <filter_step>:

// Aplicar filtro
float filter_step(FilterState *state, float u, float cut_off, float DT) {
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	ed87 0a02 	vstr	s0, [r7, #8]
 800221c:	edc7 0a01 	vstr	s1, [r7, #4]
 8002220:	ed87 1a00 	vstr	s2, [r7]
    rk4_step(state, u, DT, cut_off);
 8002224:	ed97 1a01 	vldr	s2, [r7, #4]
 8002228:	edd7 0a00 	vldr	s1, [r7]
 800222c:	ed97 0a02 	vldr	s0, [r7, #8]
 8002230:	68f8      	ldr	r0, [r7, #12]
 8002232:	f7ff ff69 	bl	8002108 <rk4_step>
    return state->x;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	ee07 3a90 	vmov	s15, r3
}
 800223e:	eeb0 0a67 	vmov.f32	s0, s15
 8002242:	3710      	adds	r7, #16
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	4a07      	ldr	r2, [pc, #28]	@ (8002274 <vApplicationGetIdleTaskMemory+0x2c>)
 8002258:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	4a06      	ldr	r2, [pc, #24]	@ (8002278 <vApplicationGetIdleTaskMemory+0x30>)
 800225e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2280      	movs	r2, #128	@ 0x80
 8002264:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002266:	bf00      	nop
 8002268:	3714      	adds	r7, #20
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	24000470 	.word	0x24000470
 8002278:	240004c4 	.word	0x240004c4

0800227c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800227c:	b5b0      	push	{r4, r5, r7, lr}
 800227e:	b096      	sub	sp, #88	@ 0x58
 8002280:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task_1ms */
  osThreadDef(Task_1ms, fTask_1ms, osPriorityNormal, 0, 128);
 8002282:	4b1d      	ldr	r3, [pc, #116]	@ (80022f8 <MX_FREERTOS_Init+0x7c>)
 8002284:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8002288:	461d      	mov	r5, r3
 800228a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800228c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800228e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002292:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_1msHandle = osThreadCreate(osThread(Task_1ms), NULL);
 8002296:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800229a:	2100      	movs	r1, #0
 800229c:	4618      	mov	r0, r3
 800229e:	f012 fb7f 	bl	80149a0 <osThreadCreate>
 80022a2:	4603      	mov	r3, r0
 80022a4:	4a15      	ldr	r2, [pc, #84]	@ (80022fc <MX_FREERTOS_Init+0x80>)
 80022a6:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_10ms */
  osThreadDef(Task_10ms, fTask_10ms, osPriorityNormal, 0, 128);
 80022a8:	4b15      	ldr	r3, [pc, #84]	@ (8002300 <MX_FREERTOS_Init+0x84>)
 80022aa:	f107 0420 	add.w	r4, r7, #32
 80022ae:	461d      	mov	r5, r3
 80022b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80022b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_10msHandle = osThreadCreate(osThread(Task_10ms), NULL);
 80022bc:	f107 0320 	add.w	r3, r7, #32
 80022c0:	2100      	movs	r1, #0
 80022c2:	4618      	mov	r0, r3
 80022c4:	f012 fb6c 	bl	80149a0 <osThreadCreate>
 80022c8:	4603      	mov	r3, r0
 80022ca:	4a0e      	ldr	r2, [pc, #56]	@ (8002304 <MX_FREERTOS_Init+0x88>)
 80022cc:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_100ms */
  osThreadDef(Task_100ms, fTask_100ms, osPriorityNormal, 0, 128);
 80022ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002308 <MX_FREERTOS_Init+0x8c>)
 80022d0:	1d3c      	adds	r4, r7, #4
 80022d2:	461d      	mov	r5, r3
 80022d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80022dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_100msHandle = osThreadCreate(osThread(Task_100ms), NULL);
 80022e0:	1d3b      	adds	r3, r7, #4
 80022e2:	2100      	movs	r1, #0
 80022e4:	4618      	mov	r0, r3
 80022e6:	f012 fb5b 	bl	80149a0 <osThreadCreate>
 80022ea:	4603      	mov	r3, r0
 80022ec:	4a07      	ldr	r2, [pc, #28]	@ (800230c <MX_FREERTOS_Init+0x90>)
 80022ee:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80022f0:	bf00      	nop
 80022f2:	3758      	adds	r7, #88	@ 0x58
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bdb0      	pop	{r4, r5, r7, pc}
 80022f8:	08019cdc 	.word	0x08019cdc
 80022fc:	24000464 	.word	0x24000464
 8002300:	08019d04 	.word	0x08019d04
 8002304:	24000468 	.word	0x24000468
 8002308:	08019d2c 	.word	0x08019d2c
 800230c:	2400046c 	.word	0x2400046c

08002310 <fTask_1ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fTask_1ms */
void fTask_1ms(void const * argument)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fTask_1ms */
  /* Infinite loop */

  for(;;)
  {
	TimeOn_Counter++;
 8002318:	4b07      	ldr	r3, [pc, #28]	@ (8002338 <fTask_1ms+0x28>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	3301      	adds	r3, #1
 800231e:	4a06      	ldr	r2, [pc, #24]	@ (8002338 <fTask_1ms+0x28>)
 8002320:	6013      	str	r3, [r2, #0]
	LED_Tasks();
 8002322:	f003 fc31 	bl	8005b88 <LED_Tasks>
	SBUS_IntegrityVerification();
 8002326:	f004 f8f1 	bl	800650c <SBUS_IntegrityVerification>
	NMEA_process_task();
 800232a:	f000 fdb3 	bl	8002e94 <NMEA_process_task>
    osDelay(1);
 800232e:	2001      	movs	r0, #1
 8002330:	f012 fb82 	bl	8014a38 <osDelay>
	TimeOn_Counter++;
 8002334:	bf00      	nop
 8002336:	e7ef      	b.n	8002318 <fTask_1ms+0x8>
 8002338:	24000dfc 	.word	0x24000dfc

0800233c <fTask_10ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fTask_10ms */
void fTask_10ms(void const * argument)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fTask_10ms */
	FlightControl_inits();
 8002344:	f7fe ffa3 	bl	800128e <FlightControl_inits>
  /* Infinite loop */
  for(;;)
  {
	BNO_Tasks();
 8002348:	f003 fb5a 	bl	8005a00 <BNO_Tasks>
	BMP280_calculate();
 800234c:	f002 fdaa 	bl	8004ea4 <BMP280_calculate>

	FlightTaskAttitude();
 8002350:	f7fe ffa4 	bl	800129c <FlightTaskAttitude>

	PWM_Assign();
 8002354:	f003 fcca 	bl	8005cec <PWM_Assign>
	SD_blackbox_write();
 8002358:	f004 f9ba 	bl	80066d0 <SD_blackbox_write>
    osDelay(10);
 800235c:	200a      	movs	r0, #10
 800235e:	f012 fb6b 	bl	8014a38 <osDelay>
  {
 8002362:	bf00      	nop
 8002364:	e7f0      	b.n	8002348 <fTask_10ms+0xc>

08002366 <fTask_100ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fTask_100ms */
void fTask_100ms(void const * argument)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b082      	sub	sp, #8
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fTask_100ms */
  /* Infinite loop */
  for(;;)
  {
	LR03_StateMachine();
 800236e:	f003 fca5 	bl	8005cbc <LR03_StateMachine>
    osDelay(100);
 8002372:	2064      	movs	r0, #100	@ 0x64
 8002374:	f012 fb60 	bl	8014a38 <osDelay>
	LR03_StateMachine();
 8002378:	bf00      	nop
 800237a:	e7f8      	b.n	800236e <fTask_100ms+0x8>

0800237c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b08a      	sub	sp, #40	@ 0x28
 8002380:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002382:	f107 0314 	add.w	r3, r7, #20
 8002386:	2200      	movs	r2, #0
 8002388:	601a      	str	r2, [r3, #0]
 800238a:	605a      	str	r2, [r3, #4]
 800238c:	609a      	str	r2, [r3, #8]
 800238e:	60da      	str	r2, [r3, #12]
 8002390:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002392:	4b4e      	ldr	r3, [pc, #312]	@ (80024cc <MX_GPIO_Init+0x150>)
 8002394:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002398:	4a4c      	ldr	r2, [pc, #304]	@ (80024cc <MX_GPIO_Init+0x150>)
 800239a:	f043 0304 	orr.w	r3, r3, #4
 800239e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80023a2:	4b4a      	ldr	r3, [pc, #296]	@ (80024cc <MX_GPIO_Init+0x150>)
 80023a4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80023a8:	f003 0304 	and.w	r3, r3, #4
 80023ac:	613b      	str	r3, [r7, #16]
 80023ae:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023b0:	4b46      	ldr	r3, [pc, #280]	@ (80024cc <MX_GPIO_Init+0x150>)
 80023b2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80023b6:	4a45      	ldr	r2, [pc, #276]	@ (80024cc <MX_GPIO_Init+0x150>)
 80023b8:	f043 0301 	orr.w	r3, r3, #1
 80023bc:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80023c0:	4b42      	ldr	r3, [pc, #264]	@ (80024cc <MX_GPIO_Init+0x150>)
 80023c2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	60fb      	str	r3, [r7, #12]
 80023cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ce:	4b3f      	ldr	r3, [pc, #252]	@ (80024cc <MX_GPIO_Init+0x150>)
 80023d0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80023d4:	4a3d      	ldr	r2, [pc, #244]	@ (80024cc <MX_GPIO_Init+0x150>)
 80023d6:	f043 0302 	orr.w	r3, r3, #2
 80023da:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80023de:	4b3b      	ldr	r3, [pc, #236]	@ (80024cc <MX_GPIO_Init+0x150>)
 80023e0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80023e4:	f003 0302 	and.w	r3, r3, #2
 80023e8:	60bb      	str	r3, [r7, #8]
 80023ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023ec:	4b37      	ldr	r3, [pc, #220]	@ (80024cc <MX_GPIO_Init+0x150>)
 80023ee:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80023f2:	4a36      	ldr	r2, [pc, #216]	@ (80024cc <MX_GPIO_Init+0x150>)
 80023f4:	f043 0308 	orr.w	r3, r3, #8
 80023f8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80023fc:	4b33      	ldr	r3, [pc, #204]	@ (80024cc <MX_GPIO_Init+0x150>)
 80023fe:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002402:	f003 0308 	and.w	r3, r3, #8
 8002406:	607b      	str	r3, [r7, #4]
 8002408:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 800240a:	2200      	movs	r2, #0
 800240c:	f242 010f 	movw	r1, #8207	@ 0x200f
 8002410:	482f      	ldr	r0, [pc, #188]	@ (80024d0 <MX_GPIO_Init+0x154>)
 8002412:	f007 ffbf 	bl	800a394 <HAL_GPIO_WritePin>
                          |LED_5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_NSS_GPIO_Port, SD_NSS_Pin, GPIO_PIN_RESET);
 8002416:	2200      	movs	r2, #0
 8002418:	2110      	movs	r1, #16
 800241a:	482e      	ldr	r0, [pc, #184]	@ (80024d4 <MX_GPIO_Init+0x158>)
 800241c:	f007 ffba 	bl	800a394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IMU_BOOT_Pin|BME_NSS_Pin, GPIO_PIN_RESET);
 8002420:	2200      	movs	r2, #0
 8002422:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 8002426:	482c      	ldr	r0, [pc, #176]	@ (80024d8 <MX_GPIO_Init+0x15c>)
 8002428:	f007 ffb4 	bl	800a394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_RST_GPIO_Port, IMU_RST_Pin, GPIO_PIN_RESET);
 800242c:	2200      	movs	r2, #0
 800242e:	2104      	movs	r1, #4
 8002430:	482a      	ldr	r0, [pc, #168]	@ (80024dc <MX_GPIO_Init+0x160>)
 8002432:	f007 ffaf 	bl	800a394 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 8002436:	f242 030f 	movw	r3, #8207	@ 0x200f
 800243a:	617b      	str	r3, [r7, #20]
                          |LED_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800243c:	2301      	movs	r3, #1
 800243e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002440:	2300      	movs	r3, #0
 8002442:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002444:	2300      	movs	r3, #0
 8002446:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002448:	f107 0314 	add.w	r3, r7, #20
 800244c:	4619      	mov	r1, r3
 800244e:	4820      	ldr	r0, [pc, #128]	@ (80024d0 <MX_GPIO_Init+0x154>)
 8002450:	f007 fdf0 	bl	800a034 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_NSS_Pin;
 8002454:	2310      	movs	r3, #16
 8002456:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002458:	2301      	movs	r3, #1
 800245a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245c:	2300      	movs	r3, #0
 800245e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002460:	2300      	movs	r3, #0
 8002462:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_NSS_GPIO_Port, &GPIO_InitStruct);
 8002464:	f107 0314 	add.w	r3, r7, #20
 8002468:	4619      	mov	r1, r3
 800246a:	481a      	ldr	r0, [pc, #104]	@ (80024d4 <MX_GPIO_Init+0x158>)
 800246c:	f007 fde2 	bl	800a034 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = IMU_BOOT_Pin|BME_NSS_Pin;
 8002470:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002474:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002476:	2301      	movs	r3, #1
 8002478:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247a:	2300      	movs	r3, #0
 800247c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800247e:	2300      	movs	r3, #0
 8002480:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002482:	f107 0314 	add.w	r3, r7, #20
 8002486:	4619      	mov	r1, r3
 8002488:	4813      	ldr	r0, [pc, #76]	@ (80024d8 <MX_GPIO_Init+0x15c>)
 800248a:	f007 fdd3 	bl	800a034 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 800248e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002492:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002494:	2300      	movs	r3, #0
 8002496:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002498:	2300      	movs	r3, #0
 800249a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 800249c:	f107 0314 	add.w	r3, r7, #20
 80024a0:	4619      	mov	r1, r3
 80024a2:	480b      	ldr	r0, [pc, #44]	@ (80024d0 <MX_GPIO_Init+0x154>)
 80024a4:	f007 fdc6 	bl	800a034 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_RST_Pin;
 80024a8:	2304      	movs	r3, #4
 80024aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024ac:	2301      	movs	r3, #1
 80024ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b0:	2300      	movs	r3, #0
 80024b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b4:	2300      	movs	r3, #0
 80024b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IMU_RST_GPIO_Port, &GPIO_InitStruct);
 80024b8:	f107 0314 	add.w	r3, r7, #20
 80024bc:	4619      	mov	r1, r3
 80024be:	4807      	ldr	r0, [pc, #28]	@ (80024dc <MX_GPIO_Init+0x160>)
 80024c0:	f007 fdb8 	bl	800a034 <HAL_GPIO_Init>

}
 80024c4:	bf00      	nop
 80024c6:	3728      	adds	r7, #40	@ 0x28
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	58024400 	.word	0x58024400
 80024d0:	58020800 	.word	0x58020800
 80024d4:	58020000 	.word	0x58020000
 80024d8:	58020400 	.word	0x58020400
 80024dc:	58020c00 	.word	0x58020c00

080024e0 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80024e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002554 <MX_I2C3_Init+0x74>)
 80024e6:	4a1c      	ldr	r2, [pc, #112]	@ (8002558 <MX_I2C3_Init+0x78>)
 80024e8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20B0CCFF;
 80024ea:	4b1a      	ldr	r3, [pc, #104]	@ (8002554 <MX_I2C3_Init+0x74>)
 80024ec:	4a1b      	ldr	r2, [pc, #108]	@ (800255c <MX_I2C3_Init+0x7c>)
 80024ee:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80024f0:	4b18      	ldr	r3, [pc, #96]	@ (8002554 <MX_I2C3_Init+0x74>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024f6:	4b17      	ldr	r3, [pc, #92]	@ (8002554 <MX_I2C3_Init+0x74>)
 80024f8:	2201      	movs	r2, #1
 80024fa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024fc:	4b15      	ldr	r3, [pc, #84]	@ (8002554 <MX_I2C3_Init+0x74>)
 80024fe:	2200      	movs	r2, #0
 8002500:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002502:	4b14      	ldr	r3, [pc, #80]	@ (8002554 <MX_I2C3_Init+0x74>)
 8002504:	2200      	movs	r2, #0
 8002506:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002508:	4b12      	ldr	r3, [pc, #72]	@ (8002554 <MX_I2C3_Init+0x74>)
 800250a:	2200      	movs	r2, #0
 800250c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800250e:	4b11      	ldr	r3, [pc, #68]	@ (8002554 <MX_I2C3_Init+0x74>)
 8002510:	2200      	movs	r2, #0
 8002512:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002514:	4b0f      	ldr	r3, [pc, #60]	@ (8002554 <MX_I2C3_Init+0x74>)
 8002516:	2200      	movs	r2, #0
 8002518:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800251a:	480e      	ldr	r0, [pc, #56]	@ (8002554 <MX_I2C3_Init+0x74>)
 800251c:	f007 ff54 	bl	800a3c8 <HAL_I2C_Init>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8002526:	f000 fe41 	bl	80031ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800252a:	2100      	movs	r1, #0
 800252c:	4809      	ldr	r0, [pc, #36]	@ (8002554 <MX_I2C3_Init+0x74>)
 800252e:	f007 ffe7 	bl	800a500 <HAL_I2CEx_ConfigAnalogFilter>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002538:	f000 fe38 	bl	80031ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800253c:	2100      	movs	r1, #0
 800253e:	4805      	ldr	r0, [pc, #20]	@ (8002554 <MX_I2C3_Init+0x74>)
 8002540:	f008 f829 	bl	800a596 <HAL_I2CEx_ConfigDigitalFilter>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800254a:	f000 fe2f 	bl	80031ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800254e:	bf00      	nop
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	240006c4 	.word	0x240006c4
 8002558:	40005c00 	.word	0x40005c00
 800255c:	20b0ccff 	.word	0x20b0ccff

08002560 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b0bc      	sub	sp, #240	@ 0xf0
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002568:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800256c:	2200      	movs	r2, #0
 800256e:	601a      	str	r2, [r3, #0]
 8002570:	605a      	str	r2, [r3, #4]
 8002572:	609a      	str	r2, [r3, #8]
 8002574:	60da      	str	r2, [r3, #12]
 8002576:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002578:	f107 0318 	add.w	r3, r7, #24
 800257c:	22c0      	movs	r2, #192	@ 0xc0
 800257e:	2100      	movs	r1, #0
 8002580:	4618      	mov	r0, r3
 8002582:	f015 fb80 	bl	8017c86 <memset>
  if(i2cHandle->Instance==I2C3)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a39      	ldr	r2, [pc, #228]	@ (8002670 <HAL_I2C_MspInit+0x110>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d16b      	bne.n	8002668 <HAL_I2C_MspInit+0x108>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002590:	f04f 0208 	mov.w	r2, #8
 8002594:	f04f 0300 	mov.w	r3, #0
 8002598:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800259c:	2300      	movs	r3, #0
 800259e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025a2:	f107 0318 	add.w	r3, r7, #24
 80025a6:	4618      	mov	r0, r3
 80025a8:	f009 f87c 	bl	800b6a4 <HAL_RCCEx_PeriphCLKConfig>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80025b2:	f000 fdfb 	bl	80031ac <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025b6:	4b2f      	ldr	r3, [pc, #188]	@ (8002674 <HAL_I2C_MspInit+0x114>)
 80025b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80025bc:	4a2d      	ldr	r2, [pc, #180]	@ (8002674 <HAL_I2C_MspInit+0x114>)
 80025be:	f043 0304 	orr.w	r3, r3, #4
 80025c2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80025c6:	4b2b      	ldr	r3, [pc, #172]	@ (8002674 <HAL_I2C_MspInit+0x114>)
 80025c8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80025cc:	f003 0304 	and.w	r3, r3, #4
 80025d0:	617b      	str	r3, [r7, #20]
 80025d2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025d4:	4b27      	ldr	r3, [pc, #156]	@ (8002674 <HAL_I2C_MspInit+0x114>)
 80025d6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80025da:	4a26      	ldr	r2, [pc, #152]	@ (8002674 <HAL_I2C_MspInit+0x114>)
 80025dc:	f043 0301 	orr.w	r3, r3, #1
 80025e0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80025e4:	4b23      	ldr	r3, [pc, #140]	@ (8002674 <HAL_I2C_MspInit+0x114>)
 80025e6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	613b      	str	r3, [r7, #16]
 80025f0:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80025f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80025f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025fa:	2312      	movs	r3, #18
 80025fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002600:	2300      	movs	r3, #0
 8002602:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002606:	2300      	movs	r3, #0
 8002608:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800260c:	2304      	movs	r3, #4
 800260e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002612:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002616:	4619      	mov	r1, r3
 8002618:	4817      	ldr	r0, [pc, #92]	@ (8002678 <HAL_I2C_MspInit+0x118>)
 800261a:	f007 fd0b 	bl	800a034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800261e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002622:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002626:	2312      	movs	r3, #18
 8002628:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262c:	2300      	movs	r3, #0
 800262e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002632:	2300      	movs	r3, #0
 8002634:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002638:	2304      	movs	r3, #4
 800263a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800263e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002642:	4619      	mov	r1, r3
 8002644:	480d      	ldr	r0, [pc, #52]	@ (800267c <HAL_I2C_MspInit+0x11c>)
 8002646:	f007 fcf5 	bl	800a034 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800264a:	4b0a      	ldr	r3, [pc, #40]	@ (8002674 <HAL_I2C_MspInit+0x114>)
 800264c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002650:	4a08      	ldr	r2, [pc, #32]	@ (8002674 <HAL_I2C_MspInit+0x114>)
 8002652:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002656:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800265a:	4b06      	ldr	r3, [pc, #24]	@ (8002674 <HAL_I2C_MspInit+0x114>)
 800265c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002660:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002664:	60fb      	str	r3, [r7, #12]
 8002666:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8002668:	bf00      	nop
 800266a:	37f0      	adds	r7, #240	@ 0xf0
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	40005c00 	.word	0x40005c00
 8002674:	58024400 	.word	0x58024400
 8002678:	58020800 	.word	0x58020800
 800267c:	58020000 	.word	0x58020000

08002680 <default_CB>:
static float speed_fall_barrier;	/**< Barrier of decreasing speed*/
/**
 * default_CB() is a default function for all the CB pointers which do nothing.\n
 * The unregistering CB pointer is setting to pointer of this function.  
 */
static void default_CB(void){}
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
 8002684:	bf00      	nop
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
	...

08002690 <NMEA_parser>:
 * NMEA_parser is function which parses single correct NMEA message.\n
 * Inside this function all known types of NMEA message are recognized and nmea_data structure fields are set.\n
 * There is also implemented mechanism of recognizing specified events and calling corresponding to them callbacks.
 * @param[in]	message	pointer to buffer storing NMEA message.
 */
static void 	NMEA_parser(char *message){
 8002690:	b5b0      	push	{r4, r5, r7, lr}
 8002692:	b0b2      	sub	sp, #200	@ 0xc8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]

	NMEA_data previous_data = nmea_data;
 8002698:	4ba9      	ldr	r3, [pc, #676]	@ (8002940 <NMEA_parser+0x2b0>)
 800269a:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 800269e:	461d      	mov	r5, r3
 80026a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026ac:	e895 0003 	ldmia.w	r5, {r0, r1}
 80026b0:	e884 0003 	stmia.w	r4, {r0, r1}

	int num = 0;
 80026b4:	2300      	movs	r3, #0
 80026b6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
	char *fields[32]={NULL};
 80026ba:	f107 030c 	add.w	r3, r7, #12
 80026be:	2280      	movs	r2, #128	@ 0x80
 80026c0:	2100      	movs	r1, #0
 80026c2:	4618      	mov	r0, r3
 80026c4:	f015 fadf 	bl	8017c86 <memset>
	fields[num++]=message;
 80026c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80026cc:	1c5a      	adds	r2, r3, #1
 80026ce:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	33c8      	adds	r3, #200	@ 0xc8
 80026d6:	443b      	add	r3, r7
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	f843 2cbc 	str.w	r2, [r3, #-188]
	while ((message = strchr(message, ','))) {
 80026de:	e00f      	b.n	8002700 <NMEA_parser+0x70>
		*message++ = 0;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	1c5a      	adds	r2, r3, #1
 80026e4:	607a      	str	r2, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	701a      	strb	r2, [r3, #0]
		fields[num++]=message;
 80026ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80026ee:	1c5a      	adds	r2, r3, #1
 80026f0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	33c8      	adds	r3, #200	@ 0xc8
 80026f8:	443b      	add	r3, r7
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	f843 2cbc 	str.w	r2, [r3, #-188]
	while ((message = strchr(message, ','))) {
 8002700:	212c      	movs	r1, #44	@ 0x2c
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f015 fac7 	bl	8017c96 <strchr>
 8002708:	6078      	str	r0, [r7, #4]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d1e7      	bne.n	80026e0 <NMEA_parser+0x50>
	}

	if(strcmp(fields[0],"$GPGLL")==0){
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	498c      	ldr	r1, [pc, #560]	@ (8002944 <NMEA_parser+0x2b4>)
 8002714:	4618      	mov	r0, r3
 8002716:	f7fd fdeb 	bl	80002f0 <strcmp>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d11e      	bne.n	800275e <NMEA_parser+0xce>

		nmea_data.latitude = atof(fields[1]);
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	4618      	mov	r0, r3
 8002724:	f014 fb60 	bl	8016de8 <atof>
 8002728:	eeb0 7b40 	vmov.f64	d7, d0
 800272c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002730:	4b83      	ldr	r3, [pc, #524]	@ (8002940 <NMEA_parser+0x2b0>)
 8002732:	edc3 7a02 	vstr	s15, [r3, #8]
		nmea_data.latitude_direction = *fields[2];
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	781a      	ldrb	r2, [r3, #0]
 800273a:	4b81      	ldr	r3, [pc, #516]	@ (8002940 <NMEA_parser+0x2b0>)
 800273c:	731a      	strb	r2, [r3, #12]
		nmea_data.longitude = atof(fields[3]);
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	4618      	mov	r0, r3
 8002742:	f014 fb51 	bl	8016de8 <atof>
 8002746:	eeb0 7b40 	vmov.f64	d7, d0
 800274a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800274e:	4b7c      	ldr	r3, [pc, #496]	@ (8002940 <NMEA_parser+0x2b0>)
 8002750:	edc3 7a04 	vstr	s15, [r3, #16]
		nmea_data.longitude_direction = *fields[4];
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	781a      	ldrb	r2, [r3, #0]
 8002758:	4b79      	ldr	r3, [pc, #484]	@ (8002940 <NMEA_parser+0x2b0>)
 800275a:	751a      	strb	r2, [r3, #20]
 800275c:	e10d      	b.n	800297a <NMEA_parser+0x2ea>

	}else if(strcmp(fields[0],"$GPRMC")==0){
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	4979      	ldr	r1, [pc, #484]	@ (8002948 <NMEA_parser+0x2b8>)
 8002762:	4618      	mov	r0, r3
 8002764:	f7fd fdc4 	bl	80002f0 <strcmp>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d130      	bne.n	80027d0 <NMEA_parser+0x140>

		nmea_data.UTC_time = atof(fields[1]);
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	4618      	mov	r0, r3
 8002772:	f014 fb39 	bl	8016de8 <atof>
 8002776:	eeb0 7b40 	vmov.f64	d7, d0
 800277a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800277e:	4b70      	ldr	r3, [pc, #448]	@ (8002940 <NMEA_parser+0x2b0>)
 8002780:	edc3 7a00 	vstr	s15, [r3]
		nmea_data.UT_date = atoi(fields[9]);
 8002784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002786:	4618      	mov	r0, r3
 8002788:	f014 fb31 	bl	8016dee <atoi>
 800278c:	4603      	mov	r3, r0
 800278e:	4a6c      	ldr	r2, [pc, #432]	@ (8002940 <NMEA_parser+0x2b0>)
 8002790:	6053      	str	r3, [r2, #4]

		nmea_data.latitude = atof(fields[3]);
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	4618      	mov	r0, r3
 8002796:	f014 fb27 	bl	8016de8 <atof>
 800279a:	eeb0 7b40 	vmov.f64	d7, d0
 800279e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80027a2:	4b67      	ldr	r3, [pc, #412]	@ (8002940 <NMEA_parser+0x2b0>)
 80027a4:	edc3 7a02 	vstr	s15, [r3, #8]
		nmea_data.latitude_direction = *fields[4];
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	781a      	ldrb	r2, [r3, #0]
 80027ac:	4b64      	ldr	r3, [pc, #400]	@ (8002940 <NMEA_parser+0x2b0>)
 80027ae:	731a      	strb	r2, [r3, #12]
		nmea_data.longitude = atof(fields[5]);
 80027b0:	6a3b      	ldr	r3, [r7, #32]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f014 fb18 	bl	8016de8 <atof>
 80027b8:	eeb0 7b40 	vmov.f64	d7, d0
 80027bc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80027c0:	4b5f      	ldr	r3, [pc, #380]	@ (8002940 <NMEA_parser+0x2b0>)
 80027c2:	edc3 7a04 	vstr	s15, [r3, #16]
		nmea_data.longitude_direction = *fields[6];
 80027c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c8:	781a      	ldrb	r2, [r3, #0]
 80027ca:	4b5d      	ldr	r3, [pc, #372]	@ (8002940 <NMEA_parser+0x2b0>)
 80027cc:	751a      	strb	r2, [r3, #20]
 80027ce:	e0d4      	b.n	800297a <NMEA_parser+0x2ea>


	}else if(strcmp(fields[0],"$GPVTG")==0){
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	495e      	ldr	r1, [pc, #376]	@ (800294c <NMEA_parser+0x2bc>)
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7fd fd8b 	bl	80002f0 <strcmp>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d116      	bne.n	800280e <NMEA_parser+0x17e>

		nmea_data.speed_knots =  atoi(fields[5]);
 80027e0:	6a3b      	ldr	r3, [r7, #32]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f014 fb03 	bl	8016dee <atoi>
 80027e8:	ee07 0a90 	vmov	s15, r0
 80027ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027f0:	4b53      	ldr	r3, [pc, #332]	@ (8002940 <NMEA_parser+0x2b0>)
 80027f2:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
		nmea_data.speed_kmph =  atoi(fields[7]);
 80027f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027f8:	4618      	mov	r0, r3
 80027fa:	f014 faf8 	bl	8016dee <atoi>
 80027fe:	ee07 0a90 	vmov	s15, r0
 8002802:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002806:	4b4e      	ldr	r3, [pc, #312]	@ (8002940 <NMEA_parser+0x2b0>)
 8002808:	edc3 7a08 	vstr	s15, [r3, #32]
 800280c:	e0b5      	b.n	800297a <NMEA_parser+0x2ea>

	}else if(strcmp(fields[0],"$GPGGA")==0){
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	494f      	ldr	r1, [pc, #316]	@ (8002950 <NMEA_parser+0x2c0>)
 8002812:	4618      	mov	r0, r3
 8002814:	f7fd fd6c 	bl	80002f0 <strcmp>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d15c      	bne.n	80028d8 <NMEA_parser+0x248>

		nmea_data.UTC_time = atof(fields[1]);
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	4618      	mov	r0, r3
 8002822:	f014 fae1 	bl	8016de8 <atof>
 8002826:	eeb0 7b40 	vmov.f64	d7, d0
 800282a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800282e:	4b44      	ldr	r3, [pc, #272]	@ (8002940 <NMEA_parser+0x2b0>)
 8002830:	edc3 7a00 	vstr	s15, [r3]

		nmea_data.latitude = atof(fields[2]);
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	4618      	mov	r0, r3
 8002838:	f014 fad6 	bl	8016de8 <atof>
 800283c:	eeb0 7b40 	vmov.f64	d7, d0
 8002840:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002844:	4b3e      	ldr	r3, [pc, #248]	@ (8002940 <NMEA_parser+0x2b0>)
 8002846:	edc3 7a02 	vstr	s15, [r3, #8]
		nmea_data.latitude_direction = *fields[3];
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	781a      	ldrb	r2, [r3, #0]
 800284e:	4b3c      	ldr	r3, [pc, #240]	@ (8002940 <NMEA_parser+0x2b0>)
 8002850:	731a      	strb	r2, [r3, #12]
		nmea_data.longitude = atof(fields[4]);
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	4618      	mov	r0, r3
 8002856:	f014 fac7 	bl	8016de8 <atof>
 800285a:	eeb0 7b40 	vmov.f64	d7, d0
 800285e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002862:	4b37      	ldr	r3, [pc, #220]	@ (8002940 <NMEA_parser+0x2b0>)
 8002864:	edc3 7a04 	vstr	s15, [r3, #16]
		nmea_data.longitude_direction = *fields[5];
 8002868:	6a3b      	ldr	r3, [r7, #32]
 800286a:	781a      	ldrb	r2, [r3, #0]
 800286c:	4b34      	ldr	r3, [pc, #208]	@ (8002940 <NMEA_parser+0x2b0>)
 800286e:	751a      	strb	r2, [r3, #20]

		nmea_data.fix = atoi(fields[6]);
 8002870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002872:	4618      	mov	r0, r3
 8002874:	f014 fabb 	bl	8016dee <atoi>
 8002878:	4603      	mov	r3, r0
 800287a:	b2da      	uxtb	r2, r3
 800287c:	4b30      	ldr	r3, [pc, #192]	@ (8002940 <NMEA_parser+0x2b0>)
 800287e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
		nmea_data.sat_in_use = atoi(fields[7]);
 8002882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002884:	4618      	mov	r0, r3
 8002886:	f014 fab2 	bl	8016dee <atoi>
 800288a:	4603      	mov	r3, r0
 800288c:	b2da      	uxtb	r2, r3
 800288e:	4b2c      	ldr	r3, [pc, #176]	@ (8002940 <NMEA_parser+0x2b0>)
 8002890:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
		nmea_data.HDOP = atof(fields[8]);
 8002894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002896:	4618      	mov	r0, r3
 8002898:	f014 faa6 	bl	8016de8 <atof>
 800289c:	eeb0 7b40 	vmov.f64	d7, d0
 80028a0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80028a4:	4b26      	ldr	r3, [pc, #152]	@ (8002940 <NMEA_parser+0x2b0>)
 80028a6:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

		nmea_data.altitude = atof(fields[9]);
 80028aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028ac:	4618      	mov	r0, r3
 80028ae:	f014 fa9b 	bl	8016de8 <atof>
 80028b2:	eeb0 7b40 	vmov.f64	d7, d0
 80028b6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80028ba:	4b21      	ldr	r3, [pc, #132]	@ (8002940 <NMEA_parser+0x2b0>)
 80028bc:	edc3 7a06 	vstr	s15, [r3, #24]
		nmea_data.geoidal_separation = atof(fields[11]);
 80028c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028c2:	4618      	mov	r0, r3
 80028c4:	f014 fa90 	bl	8016de8 <atof>
 80028c8:	eeb0 7b40 	vmov.f64	d7, d0
 80028cc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80028d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002940 <NMEA_parser+0x2b0>)
 80028d2:	edc3 7a07 	vstr	s15, [r3, #28]
 80028d6:	e050      	b.n	800297a <NMEA_parser+0x2ea>

	}else if(strcmp(fields[0],"$GPGSA")==0){
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	491e      	ldr	r1, [pc, #120]	@ (8002954 <NMEA_parser+0x2c4>)
 80028dc:	4618      	mov	r0, r3
 80028de:	f7fd fd07 	bl	80002f0 <strcmp>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d137      	bne.n	8002958 <NMEA_parser+0x2c8>

		nmea_data.fix_mode = atoi(fields[2]);
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f014 fa7f 	bl	8016dee <atoi>
 80028f0:	4603      	mov	r3, r0
 80028f2:	b2da      	uxtb	r2, r3
 80028f4:	4b12      	ldr	r3, [pc, #72]	@ (8002940 <NMEA_parser+0x2b0>)
 80028f6:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

		nmea_data.PDOP = atof(fields[15]);
 80028fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80028fc:	4618      	mov	r0, r3
 80028fe:	f014 fa73 	bl	8016de8 <atof>
 8002902:	eeb0 7b40 	vmov.f64	d7, d0
 8002906:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800290a:	4b0d      	ldr	r3, [pc, #52]	@ (8002940 <NMEA_parser+0x2b0>)
 800290c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		nmea_data.HDOP = atof(fields[16]);
 8002910:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002912:	4618      	mov	r0, r3
 8002914:	f014 fa68 	bl	8016de8 <atof>
 8002918:	eeb0 7b40 	vmov.f64	d7, d0
 800291c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002920:	4b07      	ldr	r3, [pc, #28]	@ (8002940 <NMEA_parser+0x2b0>)
 8002922:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
		nmea_data.VDOP = atof(fields[17]);
 8002926:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002928:	4618      	mov	r0, r3
 800292a:	f014 fa5d 	bl	8016de8 <atof>
 800292e:	eeb0 7b40 	vmov.f64	d7, d0
 8002932:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002936:	4b02      	ldr	r3, [pc, #8]	@ (8002940 <NMEA_parser+0x2b0>)
 8002938:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
 800293c:	e01d      	b.n	800297a <NMEA_parser+0x2ea>
 800293e:	bf00      	nop
 8002940:	24000dc0 	.word	0x24000dc0
 8002944:	08019d48 	.word	0x08019d48
 8002948:	08019d50 	.word	0x08019d50
 800294c:	08019d58 	.word	0x08019d58
 8002950:	08019d60 	.word	0x08019d60
 8002954:	08019d68 	.word	0x08019d68

	}else if(strcmp(fields[0],"$GPGSV")==0){
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	4931      	ldr	r1, [pc, #196]	@ (8002a20 <NMEA_parser+0x390>)
 800295c:	4618      	mov	r0, r3
 800295e:	f7fd fcc7 	bl	80002f0 <strcmp>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d108      	bne.n	800297a <NMEA_parser+0x2ea>
		nmea_data.sat_in_view = atoi(fields[3]);
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	4618      	mov	r0, r3
 800296c:	f014 fa3f 	bl	8016dee <atoi>
 8002970:	4603      	mov	r3, r0
 8002972:	b2da      	uxtb	r2, r3
 8002974:	4b2b      	ldr	r3, [pc, #172]	@ (8002a24 <NMEA_parser+0x394>)
 8002976:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	}

	if (abs(nmea_data.speed_kmph - previous_data.speed_kmph) > speed_change_tolerance){
 800297a:	4b2a      	ldr	r3, [pc, #168]	@ (8002a24 <NMEA_parser+0x394>)
 800297c:	ed93 7a08 	vldr	s14, [r3, #32]
 8002980:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8002984:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002988:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800298c:	ee17 3a90 	vmov	r3, s15
 8002990:	2b00      	cmp	r3, #0
 8002992:	bfb8      	it	lt
 8002994:	425b      	neglt	r3, r3
 8002996:	ee07 3a90 	vmov	s15, r3
 800299a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800299e:	4b22      	ldr	r3, [pc, #136]	@ (8002a28 <NMEA_parser+0x398>)
 80029a0:	edd3 7a00 	vldr	s15, [r3]
 80029a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ac:	dd02      	ble.n	80029b4 <NMEA_parser+0x324>
		speed_change_CB_fun_ptr();
 80029ae:	4b1f      	ldr	r3, [pc, #124]	@ (8002a2c <NMEA_parser+0x39c>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4798      	blx	r3
	}

	if (nmea_data.speed_kmph > speed_raise_barrier && previous_data.speed_kmph <= speed_raise_barrier){
 80029b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002a24 <NMEA_parser+0x394>)
 80029b6:	ed93 7a08 	vldr	s14, [r3, #32]
 80029ba:	4b1d      	ldr	r3, [pc, #116]	@ (8002a30 <NMEA_parser+0x3a0>)
 80029bc:	edd3 7a00 	vldr	s15, [r3]
 80029c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029c8:	dd0c      	ble.n	80029e4 <NMEA_parser+0x354>
 80029ca:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 80029ce:	4b18      	ldr	r3, [pc, #96]	@ (8002a30 <NMEA_parser+0x3a0>)
 80029d0:	edd3 7a00 	vldr	s15, [r3]
 80029d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029dc:	d802      	bhi.n	80029e4 <NMEA_parser+0x354>
		speed_raise_barrier_CB_fun_ptr();
 80029de:	4b15      	ldr	r3, [pc, #84]	@ (8002a34 <NMEA_parser+0x3a4>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4798      	blx	r3
	}

	if (nmea_data.speed_kmph < speed_raise_barrier && previous_data.speed_kmph >= speed_raise_barrier){
 80029e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002a24 <NMEA_parser+0x394>)
 80029e6:	ed93 7a08 	vldr	s14, [r3, #32]
 80029ea:	4b11      	ldr	r3, [pc, #68]	@ (8002a30 <NMEA_parser+0x3a0>)
 80029ec:	edd3 7a00 	vldr	s15, [r3]
 80029f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029f8:	d400      	bmi.n	80029fc <NMEA_parser+0x36c>
		speed_fall_barrier_CB_fun_ptr();
	}
}
 80029fa:	e00d      	b.n	8002a18 <NMEA_parser+0x388>
	if (nmea_data.speed_kmph < speed_raise_barrier && previous_data.speed_kmph >= speed_raise_barrier){
 80029fc:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 8002a00:	4b0b      	ldr	r3, [pc, #44]	@ (8002a30 <NMEA_parser+0x3a0>)
 8002a02:	edd3 7a00 	vldr	s15, [r3]
 8002a06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a0e:	da00      	bge.n	8002a12 <NMEA_parser+0x382>
}
 8002a10:	e002      	b.n	8002a18 <NMEA_parser+0x388>
		speed_fall_barrier_CB_fun_ptr();
 8002a12:	4b09      	ldr	r3, [pc, #36]	@ (8002a38 <NMEA_parser+0x3a8>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4798      	blx	r3
}
 8002a18:	bf00      	nop
 8002a1a:	37c8      	adds	r7, #200	@ 0xc8
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bdb0      	pop	{r4, r5, r7, pc}
 8002a20:	08019d70 	.word	0x08019d70
 8002a24:	24000dc0 	.word	0x24000dc0
 8002a28:	24000da8 	.word	0x24000da8
 8002a2c:	24000da4 	.word	0x24000da4
 8002a30:	24000db0 	.word	0x24000db0
 8002a34:	24000dac 	.word	0x24000dac
 8002a38:	24000db4 	.word	0x24000db4

08002a3c <hx2int>:
 * hx2int is function which converts hex number written using characters to corresponding integer.
 * @param[in]	n2		is older position ix hex code
 * @param[in]	n1		is younger position ix hex code
 * @param[out]	uint8_t	is integer corresponding to input hex
 */
static uint8_t hx2int(uint8_t n2, uint8_t n1){
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	4603      	mov	r3, r0
 8002a44:	460a      	mov	r2, r1
 8002a46:	71fb      	strb	r3, [r7, #7]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	71bb      	strb	r3, [r7, #6]
	if (n2 <= '9') n2-='0';
 8002a4c:	79fb      	ldrb	r3, [r7, #7]
 8002a4e:	2b39      	cmp	r3, #57	@ 0x39
 8002a50:	d803      	bhi.n	8002a5a <hx2int+0x1e>
 8002a52:	79fb      	ldrb	r3, [r7, #7]
 8002a54:	3b30      	subs	r3, #48	@ 0x30
 8002a56:	71fb      	strb	r3, [r7, #7]
 8002a58:	e002      	b.n	8002a60 <hx2int+0x24>
	else n2=n2-'A'+10;
 8002a5a:	79fb      	ldrb	r3, [r7, #7]
 8002a5c:	3b37      	subs	r3, #55	@ 0x37
 8002a5e:	71fb      	strb	r3, [r7, #7]

	if (n1 <= '9') n1-='0';
 8002a60:	79bb      	ldrb	r3, [r7, #6]
 8002a62:	2b39      	cmp	r3, #57	@ 0x39
 8002a64:	d803      	bhi.n	8002a6e <hx2int+0x32>
 8002a66:	79bb      	ldrb	r3, [r7, #6]
 8002a68:	3b30      	subs	r3, #48	@ 0x30
 8002a6a:	71bb      	strb	r3, [r7, #6]
 8002a6c:	e002      	b.n	8002a74 <hx2int+0x38>
	else n1=n1-'A'+10;
 8002a6e:	79bb      	ldrb	r3, [r7, #6]
 8002a70:	3b37      	subs	r3, #55	@ 0x37
 8002a72:	71bb      	strb	r3, [r7, #6]

	return n2*16+n1;
 8002a74:	79fb      	ldrb	r3, [r7, #7]
 8002a76:	011b      	lsls	r3, r3, #4
 8002a78:	b2da      	uxtb	r2, r3
 8002a7a:	79bb      	ldrb	r3, [r7, #6]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	b2db      	uxtb	r3, r3

}
 8002a80:	4618      	mov	r0, r3
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <NMEA_checksum_clc>:
 * NMEA_checksum_clc is function which calculates checksum of the message and compares it to checksum value given in NMEA message.\n
 * To convert given checksum it uses hx2int function.
 * @param[in]	message	pointer to buffer storing NMEA message.
 * @param[out]	NMEA_status 	is a status code. It should be NMEA_OK. For more information check out NMEA_status documentation.
 */
static NMEA_status NMEA_checksum_clc(uint8_t * message){
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
	uint8_t index = 1;
 8002a94:	2301      	movs	r3, #1
 8002a96:	73fb      	strb	r3, [r7, #15]
	uint8_t checksum_clc =0;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	73bb      	strb	r3, [r7, #14]

	while (message[index]!='*' && index<NMEA_WORKING_BUFFER_SIZE-2){
 8002a9c:	e009      	b.n	8002ab2 <NMEA_checksum_clc+0x26>
		checksum_clc^=message[index++];
 8002a9e:	7bfb      	ldrb	r3, [r7, #15]
 8002aa0:	1c5a      	adds	r2, r3, #1
 8002aa2:	73fa      	strb	r2, [r7, #15]
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	781a      	ldrb	r2, [r3, #0]
 8002aac:	7bbb      	ldrb	r3, [r7, #14]
 8002aae:	4053      	eors	r3, r2
 8002ab0:	73bb      	strb	r3, [r7, #14]
	while (message[index]!='*' && index<NMEA_WORKING_BUFFER_SIZE-2){
 8002ab2:	7bfb      	ldrb	r3, [r7, #15]
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	2b2a      	cmp	r3, #42	@ 0x2a
 8002abc:	d002      	beq.n	8002ac4 <NMEA_checksum_clc+0x38>
 8002abe:	7bfb      	ldrb	r3, [r7, #15]
 8002ac0:	2b7d      	cmp	r3, #125	@ 0x7d
 8002ac2:	d9ec      	bls.n	8002a9e <NMEA_checksum_clc+0x12>
	}

	uint8_t checksum = hx2int(message[index+1],message[index+2]);
 8002ac4:	7bfb      	ldrb	r3, [r7, #15]
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	4413      	add	r3, r2
 8002acc:	7818      	ldrb	r0, [r3, #0]
 8002ace:	7bfb      	ldrb	r3, [r7, #15]
 8002ad0:	3302      	adds	r3, #2
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	4619      	mov	r1, r3
 8002ada:	f7ff ffaf 	bl	8002a3c <hx2int>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	737b      	strb	r3, [r7, #13]
	if (checksum!=checksum_clc){
 8002ae2:	7b7a      	ldrb	r2, [r7, #13]
 8002ae4:	7bbb      	ldrb	r3, [r7, #14]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d001      	beq.n	8002aee <NMEA_checksum_clc+0x62>
		return NMEA_CHECKSUM_ERROR;
 8002aea:	2302      	movs	r3, #2
 8002aec:	e000      	b.n	8002af0 <NMEA_checksum_clc+0x64>
	}
	return NMEA_OK;
 8002aee:	2300      	movs	r3, #0


}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3710      	adds	r7, #16
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <NMEA_read_line>:

/**
 * NMEA_read_line is function which reads one NMEA message line from NMEA_UART_buffer circular buffer to NMEA_working_buffer.
 */
static void NMEA_read_line(void){
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
	int index = 0;
 8002afe:	2300      	movs	r3, #0
 8002b00:	607b      	str	r3, [r7, #4]
	while (index < NMEA_WORKING_BUFFER_SIZE) NMEA_working_buffer[index++]=0;	// Clean up working buffer.
 8002b02:	e005      	b.n	8002b10 <NMEA_read_line+0x18>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	1c5a      	adds	r2, r3, #1
 8002b08:	607a      	str	r2, [r7, #4]
 8002b0a:	4a2b      	ldr	r2, [pc, #172]	@ (8002bb8 <NMEA_read_line+0xc0>)
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	54d1      	strb	r1, [r2, r3]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2b7f      	cmp	r3, #127	@ 0x7f
 8002b14:	ddf6      	ble.n	8002b04 <NMEA_read_line+0xc>

	index = 0;
 8002b16:	2300      	movs	r3, #0
 8002b18:	607b      	str	r3, [r7, #4]
	while(NMEA_UART_buffer[UART_buffer_tail]!= '\n' && index < NMEA_WORKING_BUFFER_SIZE-2){
 8002b1a:	e01c      	b.n	8002b56 <NMEA_read_line+0x5e>
		NMEA_working_buffer[index]=NMEA_UART_buffer[UART_buffer_tail];
 8002b1c:	4b27      	ldr	r3, [pc, #156]	@ (8002bbc <NMEA_read_line+0xc4>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a27      	ldr	r2, [pc, #156]	@ (8002bc0 <NMEA_read_line+0xc8>)
 8002b22:	5cd1      	ldrb	r1, [r2, r3]
 8002b24:	4a24      	ldr	r2, [pc, #144]	@ (8002bb8 <NMEA_read_line+0xc0>)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4413      	add	r3, r2
 8002b2a:	460a      	mov	r2, r1
 8002b2c:	701a      	strb	r2, [r3, #0]
		NMEA_UART_buffer[UART_buffer_tail] = 0;
 8002b2e:	4b23      	ldr	r3, [pc, #140]	@ (8002bbc <NMEA_read_line+0xc4>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a23      	ldr	r2, [pc, #140]	@ (8002bc0 <NMEA_read_line+0xc8>)
 8002b34:	2100      	movs	r1, #0
 8002b36:	54d1      	strb	r1, [r2, r3]
		UART_buffer_tail = (UART_buffer_tail + 1)%NMEA_UART_BUFFER_SIZE;
 8002b38:	4b20      	ldr	r3, [pc, #128]	@ (8002bbc <NMEA_read_line+0xc4>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	425a      	negs	r2, r3
 8002b40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b44:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002b48:	bf58      	it	pl
 8002b4a:	4253      	negpl	r3, r2
 8002b4c:	4a1b      	ldr	r2, [pc, #108]	@ (8002bbc <NMEA_read_line+0xc4>)
 8002b4e:	6013      	str	r3, [r2, #0]
		++index;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	3301      	adds	r3, #1
 8002b54:	607b      	str	r3, [r7, #4]
	while(NMEA_UART_buffer[UART_buffer_tail]!= '\n' && index < NMEA_WORKING_BUFFER_SIZE-2){
 8002b56:	4b19      	ldr	r3, [pc, #100]	@ (8002bbc <NMEA_read_line+0xc4>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a19      	ldr	r2, [pc, #100]	@ (8002bc0 <NMEA_read_line+0xc8>)
 8002b5c:	5cd3      	ldrb	r3, [r2, r3]
 8002b5e:	2b0a      	cmp	r3, #10
 8002b60:	d002      	beq.n	8002b68 <NMEA_read_line+0x70>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2b7d      	cmp	r3, #125	@ 0x7d
 8002b66:	ddd9      	ble.n	8002b1c <NMEA_read_line+0x24>
	}
	NMEA_working_buffer[index]=NMEA_UART_buffer[UART_buffer_tail];
 8002b68:	4b14      	ldr	r3, [pc, #80]	@ (8002bbc <NMEA_read_line+0xc4>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a14      	ldr	r2, [pc, #80]	@ (8002bc0 <NMEA_read_line+0xc8>)
 8002b6e:	5cd1      	ldrb	r1, [r2, r3]
 8002b70:	4a11      	ldr	r2, [pc, #68]	@ (8002bb8 <NMEA_read_line+0xc0>)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4413      	add	r3, r2
 8002b76:	460a      	mov	r2, r1
 8002b78:	701a      	strb	r2, [r3, #0]
	NMEA_UART_buffer[UART_buffer_tail] = 0;
 8002b7a:	4b10      	ldr	r3, [pc, #64]	@ (8002bbc <NMEA_read_line+0xc4>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a10      	ldr	r2, [pc, #64]	@ (8002bc0 <NMEA_read_line+0xc8>)
 8002b80:	2100      	movs	r1, #0
 8002b82:	54d1      	strb	r1, [r2, r3]
	UART_buffer_tail = (UART_buffer_tail + 1)%NMEA_UART_BUFFER_SIZE;
 8002b84:	4b0d      	ldr	r3, [pc, #52]	@ (8002bbc <NMEA_read_line+0xc4>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	3301      	adds	r3, #1
 8002b8a:	425a      	negs	r2, r3
 8002b8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b90:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002b94:	bf58      	it	pl
 8002b96:	4253      	negpl	r3, r2
 8002b98:	4a08      	ldr	r2, [pc, #32]	@ (8002bbc <NMEA_read_line+0xc4>)
 8002b9a:	6013      	str	r3, [r2, #0]
	++index;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	607b      	str	r3, [r7, #4]
	--UART_buffer_lines;
 8002ba2:	4b08      	ldr	r3, [pc, #32]	@ (8002bc4 <NMEA_read_line+0xcc>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	4a06      	ldr	r2, [pc, #24]	@ (8002bc4 <NMEA_read_line+0xcc>)
 8002baa:	6013      	str	r3, [r2, #0]

}
 8002bac:	bf00      	nop
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr
 8002bb8:	24000d18 	.word	0x24000d18
 8002bbc:	24000d9c 	.word	0x24000d9c
 8002bc0:	24000918 	.word	0x24000918
 8002bc4:	24000da0 	.word	0x24000da0

08002bc8 <NMEA_init>:

void NMEA_init(UART_HandleTypeDef *huart, DMA_HandleTypeDef *DMA){
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
	HAL_Delay(10);
 8002bd2:	200a      	movs	r0, #10
 8002bd4:	f003 fe64 	bl	80068a0 <HAL_Delay>
	NMEA_huart=huart;
 8002bd8:	4a12      	ldr	r2, [pc, #72]	@ (8002c24 <NMEA_init+0x5c>)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6013      	str	r3, [r2, #0]
	NMEA_DMA=DMA;
 8002bde:	4a12      	ldr	r2, [pc, #72]	@ (8002c28 <NMEA_init+0x60>)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	6013      	str	r3, [r2, #0]
	__HAL_UART_ENABLE_IT(NMEA_huart,UART_IT_IDLE);
 8002be4:	4b0f      	ldr	r3, [pc, #60]	@ (8002c24 <NMEA_init+0x5c>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	4b0d      	ldr	r3, [pc, #52]	@ (8002c24 <NMEA_init+0x5c>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f042 0210 	orr.w	r2, r2, #16
 8002bf6:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(NMEA_huart, NMEA_UART_DMA_buffer, NMEA_UART_DMA_BUFFER_SIZE);
 8002bf8:	4b0a      	ldr	r3, [pc, #40]	@ (8002c24 <NMEA_init+0x5c>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c00:	490a      	ldr	r1, [pc, #40]	@ (8002c2c <NMEA_init+0x64>)
 8002c02:	4618      	mov	r0, r3
 8002c04:	f00c ff5a 	bl	800fabc <HAL_UART_Receive_DMA>


	speed_change_CB_fun_ptr = &default_CB;
 8002c08:	4b09      	ldr	r3, [pc, #36]	@ (8002c30 <NMEA_init+0x68>)
 8002c0a:	4a0a      	ldr	r2, [pc, #40]	@ (8002c34 <NMEA_init+0x6c>)
 8002c0c:	601a      	str	r2, [r3, #0]
	speed_raise_barrier_CB_fun_ptr = &default_CB;
 8002c0e:	4b0a      	ldr	r3, [pc, #40]	@ (8002c38 <NMEA_init+0x70>)
 8002c10:	4a08      	ldr	r2, [pc, #32]	@ (8002c34 <NMEA_init+0x6c>)
 8002c12:	601a      	str	r2, [r3, #0]
	speed_fall_barrier_CB_fun_ptr = &default_CB;
 8002c14:	4b09      	ldr	r3, [pc, #36]	@ (8002c3c <NMEA_init+0x74>)
 8002c16:	4a07      	ldr	r2, [pc, #28]	@ (8002c34 <NMEA_init+0x6c>)
 8002c18:	601a      	str	r2, [r3, #0]
}
 8002c1a:	bf00      	nop
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	24000db8 	.word	0x24000db8
 8002c28:	24000dbc 	.word	0x24000dbc
 8002c2c:	24000718 	.word	0x24000718
 8002c30:	24000da4 	.word	0x24000da4
 8002c34:	08002681 	.word	0x08002681
 8002c38:	24000dac 	.word	0x24000dac
 8002c3c:	24000db4 	.word	0x24000db4

08002c40 <NMEA_UART_DMA_get_char>:
 * If buffer overflowes, the oldest NMEA message will be deleted to make space for incoming messages.\n
 * If new line character is detected ('\ n'), the line counter (UART_buffer_lines) increases.
 * @param[in]	DMA_char	character from DMA buffer
 * @param[out]	NMEA_status 	is a status code. It should be NMEA_OK. For more information check out NMEA_status documentation.
 */
static NMEA_status NMEA_UART_DMA_get_char(uint8_t DMA_char){
 8002c40:	b480      	push	{r7}
 8002c42:	b085      	sub	sp, #20
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	4603      	mov	r3, r0
 8002c48:	71fb      	strb	r3, [r7, #7]
	int position = (UART_buffer_head + 1)%NMEA_UART_BUFFER_SIZE;
 8002c4a:	4b2d      	ldr	r3, [pc, #180]	@ (8002d00 <NMEA_UART_DMA_get_char+0xc0>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	3301      	adds	r3, #1
 8002c50:	425a      	negs	r2, r3
 8002c52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c56:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002c5a:	bf58      	it	pl
 8002c5c:	4253      	negpl	r3, r2
 8002c5e:	60bb      	str	r3, [r7, #8]
	NMEA_status stat=NMEA_OK;
 8002c60:	2300      	movs	r3, #0
 8002c62:	73fb      	strb	r3, [r7, #15]

	if (position == UART_buffer_tail){		//buffer overflowed! make space for new message
 8002c64:	4b27      	ldr	r3, [pc, #156]	@ (8002d04 <NMEA_UART_DMA_get_char+0xc4>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	68ba      	ldr	r2, [r7, #8]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d130      	bne.n	8002cd0 <NMEA_UART_DMA_get_char+0x90>
		while (NMEA_UART_buffer[UART_buffer_tail]!='\n' && NMEA_UART_buffer[UART_buffer_tail]!=0){
 8002c6e:	e010      	b.n	8002c92 <NMEA_UART_DMA_get_char+0x52>
			NMEA_UART_buffer[UART_buffer_tail]=0;
 8002c70:	4b24      	ldr	r3, [pc, #144]	@ (8002d04 <NMEA_UART_DMA_get_char+0xc4>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a24      	ldr	r2, [pc, #144]	@ (8002d08 <NMEA_UART_DMA_get_char+0xc8>)
 8002c76:	2100      	movs	r1, #0
 8002c78:	54d1      	strb	r1, [r2, r3]
			UART_buffer_tail=(UART_buffer_tail + 1)%NMEA_UART_BUFFER_SIZE;
 8002c7a:	4b22      	ldr	r3, [pc, #136]	@ (8002d04 <NMEA_UART_DMA_get_char+0xc4>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	3301      	adds	r3, #1
 8002c80:	425a      	negs	r2, r3
 8002c82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c86:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002c8a:	bf58      	it	pl
 8002c8c:	4253      	negpl	r3, r2
 8002c8e:	4a1d      	ldr	r2, [pc, #116]	@ (8002d04 <NMEA_UART_DMA_get_char+0xc4>)
 8002c90:	6013      	str	r3, [r2, #0]
		while (NMEA_UART_buffer[UART_buffer_tail]!='\n' && NMEA_UART_buffer[UART_buffer_tail]!=0){
 8002c92:	4b1c      	ldr	r3, [pc, #112]	@ (8002d04 <NMEA_UART_DMA_get_char+0xc4>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a1c      	ldr	r2, [pc, #112]	@ (8002d08 <NMEA_UART_DMA_get_char+0xc8>)
 8002c98:	5cd3      	ldrb	r3, [r2, r3]
 8002c9a:	2b0a      	cmp	r3, #10
 8002c9c:	d005      	beq.n	8002caa <NMEA_UART_DMA_get_char+0x6a>
 8002c9e:	4b19      	ldr	r3, [pc, #100]	@ (8002d04 <NMEA_UART_DMA_get_char+0xc4>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a19      	ldr	r2, [pc, #100]	@ (8002d08 <NMEA_UART_DMA_get_char+0xc8>)
 8002ca4:	5cd3      	ldrb	r3, [r2, r3]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1e2      	bne.n	8002c70 <NMEA_UART_DMA_get_char+0x30>
		}
		NMEA_UART_buffer[UART_buffer_tail]=0;
 8002caa:	4b16      	ldr	r3, [pc, #88]	@ (8002d04 <NMEA_UART_DMA_get_char+0xc4>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a16      	ldr	r2, [pc, #88]	@ (8002d08 <NMEA_UART_DMA_get_char+0xc8>)
 8002cb0:	2100      	movs	r1, #0
 8002cb2:	54d1      	strb	r1, [r2, r3]
		UART_buffer_tail=(UART_buffer_tail + 1)%NMEA_UART_BUFFER_SIZE;
 8002cb4:	4b13      	ldr	r3, [pc, #76]	@ (8002d04 <NMEA_UART_DMA_get_char+0xc4>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	3301      	adds	r3, #1
 8002cba:	425a      	negs	r2, r3
 8002cbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cc0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002cc4:	bf58      	it	pl
 8002cc6:	4253      	negpl	r3, r2
 8002cc8:	4a0e      	ldr	r2, [pc, #56]	@ (8002d04 <NMEA_UART_DMA_get_char+0xc4>)
 8002cca:	6013      	str	r3, [r2, #0]
		stat=NMEA_BUFFER_OVERFLOWED;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	73fb      	strb	r3, [r7, #15]
	}

	NMEA_UART_buffer[UART_buffer_head]=DMA_char;
 8002cd0:	4b0b      	ldr	r3, [pc, #44]	@ (8002d00 <NMEA_UART_DMA_get_char+0xc0>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	490c      	ldr	r1, [pc, #48]	@ (8002d08 <NMEA_UART_DMA_get_char+0xc8>)
 8002cd6:	79fa      	ldrb	r2, [r7, #7]
 8002cd8:	54ca      	strb	r2, [r1, r3]

	UART_buffer_head=position;
 8002cda:	4a09      	ldr	r2, [pc, #36]	@ (8002d00 <NMEA_UART_DMA_get_char+0xc0>)
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	6013      	str	r3, [r2, #0]

	if(DMA_char=='\n'){
 8002ce0:	79fb      	ldrb	r3, [r7, #7]
 8002ce2:	2b0a      	cmp	r3, #10
 8002ce4:	d104      	bne.n	8002cf0 <NMEA_UART_DMA_get_char+0xb0>
		++UART_buffer_lines;	//increment lines counter
 8002ce6:	4b09      	ldr	r3, [pc, #36]	@ (8002d0c <NMEA_UART_DMA_get_char+0xcc>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	3301      	adds	r3, #1
 8002cec:	4a07      	ldr	r2, [pc, #28]	@ (8002d0c <NMEA_UART_DMA_get_char+0xcc>)
 8002cee:	6013      	str	r3, [r2, #0]
	}

	return stat;
 8002cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3714      	adds	r7, #20
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	24000d98 	.word	0x24000d98
 8002d04:	24000d9c 	.word	0x24000d9c
 8002d08:	24000918 	.word	0x24000918
 8002d0c:	24000da0 	.word	0x24000da0

08002d10 <NMEA_UART_DMA_copy_buffer>:
/**
 * NMEA_UART_DMA_copy_buffer is a function which copies messages from DMA buffer to UART circular buffer.\n
 * To do so, it uses NMEA_UART_DMA_get_char function for every character in NMEA_UART_DMA_buffer from 0 to (NMEA_UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(NMEA_DMA)).
 * @param[out]	NMEA_status 	is a status code. It should be NMEA_OK. For more information check out NMEA_status documentation.
 */
static NMEA_status NMEA_UART_DMA_copy_buffer(void){
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0


	NMEA_status stat=NMEA_OK;
 8002d16:	2300      	movs	r3, #0
 8002d18:	73fb      	strb	r3, [r7, #15]

	int data_length = NMEA_UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(NMEA_DMA);
 8002d1a:	4b4b      	ldr	r3, [pc, #300]	@ (8002e48 <NMEA_UART_DMA_copy_buffer+0x138>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a4a      	ldr	r2, [pc, #296]	@ (8002e4c <NMEA_UART_DMA_copy_buffer+0x13c>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d059      	beq.n	8002dda <NMEA_UART_DMA_copy_buffer+0xca>
 8002d26:	4b48      	ldr	r3, [pc, #288]	@ (8002e48 <NMEA_UART_DMA_copy_buffer+0x138>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a48      	ldr	r2, [pc, #288]	@ (8002e50 <NMEA_UART_DMA_copy_buffer+0x140>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d053      	beq.n	8002dda <NMEA_UART_DMA_copy_buffer+0xca>
 8002d32:	4b45      	ldr	r3, [pc, #276]	@ (8002e48 <NMEA_UART_DMA_copy_buffer+0x138>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a46      	ldr	r2, [pc, #280]	@ (8002e54 <NMEA_UART_DMA_copy_buffer+0x144>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d04d      	beq.n	8002dda <NMEA_UART_DMA_copy_buffer+0xca>
 8002d3e:	4b42      	ldr	r3, [pc, #264]	@ (8002e48 <NMEA_UART_DMA_copy_buffer+0x138>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a44      	ldr	r2, [pc, #272]	@ (8002e58 <NMEA_UART_DMA_copy_buffer+0x148>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d047      	beq.n	8002dda <NMEA_UART_DMA_copy_buffer+0xca>
 8002d4a:	4b3f      	ldr	r3, [pc, #252]	@ (8002e48 <NMEA_UART_DMA_copy_buffer+0x138>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a42      	ldr	r2, [pc, #264]	@ (8002e5c <NMEA_UART_DMA_copy_buffer+0x14c>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d041      	beq.n	8002dda <NMEA_UART_DMA_copy_buffer+0xca>
 8002d56:	4b3c      	ldr	r3, [pc, #240]	@ (8002e48 <NMEA_UART_DMA_copy_buffer+0x138>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a40      	ldr	r2, [pc, #256]	@ (8002e60 <NMEA_UART_DMA_copy_buffer+0x150>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d03b      	beq.n	8002dda <NMEA_UART_DMA_copy_buffer+0xca>
 8002d62:	4b39      	ldr	r3, [pc, #228]	@ (8002e48 <NMEA_UART_DMA_copy_buffer+0x138>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a3e      	ldr	r2, [pc, #248]	@ (8002e64 <NMEA_UART_DMA_copy_buffer+0x154>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d035      	beq.n	8002dda <NMEA_UART_DMA_copy_buffer+0xca>
 8002d6e:	4b36      	ldr	r3, [pc, #216]	@ (8002e48 <NMEA_UART_DMA_copy_buffer+0x138>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a3c      	ldr	r2, [pc, #240]	@ (8002e68 <NMEA_UART_DMA_copy_buffer+0x158>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d02f      	beq.n	8002dda <NMEA_UART_DMA_copy_buffer+0xca>
 8002d7a:	4b33      	ldr	r3, [pc, #204]	@ (8002e48 <NMEA_UART_DMA_copy_buffer+0x138>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a3a      	ldr	r2, [pc, #232]	@ (8002e6c <NMEA_UART_DMA_copy_buffer+0x15c>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d029      	beq.n	8002dda <NMEA_UART_DMA_copy_buffer+0xca>
 8002d86:	4b30      	ldr	r3, [pc, #192]	@ (8002e48 <NMEA_UART_DMA_copy_buffer+0x138>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a38      	ldr	r2, [pc, #224]	@ (8002e70 <NMEA_UART_DMA_copy_buffer+0x160>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d023      	beq.n	8002dda <NMEA_UART_DMA_copy_buffer+0xca>
 8002d92:	4b2d      	ldr	r3, [pc, #180]	@ (8002e48 <NMEA_UART_DMA_copy_buffer+0x138>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a36      	ldr	r2, [pc, #216]	@ (8002e74 <NMEA_UART_DMA_copy_buffer+0x164>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d01d      	beq.n	8002dda <NMEA_UART_DMA_copy_buffer+0xca>
 8002d9e:	4b2a      	ldr	r3, [pc, #168]	@ (8002e48 <NMEA_UART_DMA_copy_buffer+0x138>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a34      	ldr	r2, [pc, #208]	@ (8002e78 <NMEA_UART_DMA_copy_buffer+0x168>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d017      	beq.n	8002dda <NMEA_UART_DMA_copy_buffer+0xca>
 8002daa:	4b27      	ldr	r3, [pc, #156]	@ (8002e48 <NMEA_UART_DMA_copy_buffer+0x138>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a32      	ldr	r2, [pc, #200]	@ (8002e7c <NMEA_UART_DMA_copy_buffer+0x16c>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d011      	beq.n	8002dda <NMEA_UART_DMA_copy_buffer+0xca>
 8002db6:	4b24      	ldr	r3, [pc, #144]	@ (8002e48 <NMEA_UART_DMA_copy_buffer+0x138>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a30      	ldr	r2, [pc, #192]	@ (8002e80 <NMEA_UART_DMA_copy_buffer+0x170>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d00b      	beq.n	8002dda <NMEA_UART_DMA_copy_buffer+0xca>
 8002dc2:	4b21      	ldr	r3, [pc, #132]	@ (8002e48 <NMEA_UART_DMA_copy_buffer+0x138>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a2e      	ldr	r2, [pc, #184]	@ (8002e84 <NMEA_UART_DMA_copy_buffer+0x174>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d005      	beq.n	8002dda <NMEA_UART_DMA_copy_buffer+0xca>
 8002dce:	4b1e      	ldr	r3, [pc, #120]	@ (8002e48 <NMEA_UART_DMA_copy_buffer+0x138>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a2c      	ldr	r2, [pc, #176]	@ (8002e88 <NMEA_UART_DMA_copy_buffer+0x178>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d106      	bne.n	8002de8 <NMEA_UART_DMA_copy_buffer+0xd8>
 8002dda:	4b1b      	ldr	r3, [pc, #108]	@ (8002e48 <NMEA_UART_DMA_copy_buffer+0x138>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8002de6:	e005      	b.n	8002df4 <NMEA_UART_DMA_copy_buffer+0xe4>
 8002de8:	4b17      	ldr	r3, [pc, #92]	@ (8002e48 <NMEA_UART_DMA_copy_buffer+0x138>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8002df4:	607b      	str	r3, [r7, #4]

	for (int i = 0; i < data_length; i++){
 8002df6:	2300      	movs	r3, #0
 8002df8:	60bb      	str	r3, [r7, #8]
 8002dfa:	e013      	b.n	8002e24 <NMEA_UART_DMA_copy_buffer+0x114>
		if (NMEA_UART_DMA_get_char(NMEA_UART_DMA_buffer[i])==NMEA_BUFFER_OVERFLOWED){
 8002dfc:	4a23      	ldr	r2, [pc, #140]	@ (8002e8c <NMEA_UART_DMA_copy_buffer+0x17c>)
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	4413      	add	r3, r2
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7ff ff1b 	bl	8002c40 <NMEA_UART_DMA_get_char>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d101      	bne.n	8002e14 <NMEA_UART_DMA_copy_buffer+0x104>
			stat=NMEA_BUFFER_OVERFLOWED;
 8002e10:	2301      	movs	r3, #1
 8002e12:	73fb      	strb	r3, [r7, #15]
		}
		NMEA_UART_DMA_buffer[i]=0;
 8002e14:	4a1d      	ldr	r2, [pc, #116]	@ (8002e8c <NMEA_UART_DMA_copy_buffer+0x17c>)
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	4413      	add	r3, r2
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < data_length; i++){
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	3301      	adds	r3, #1
 8002e22:	60bb      	str	r3, [r7, #8]
 8002e24:	68ba      	ldr	r2, [r7, #8]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	dbe7      	blt.n	8002dfc <NMEA_UART_DMA_copy_buffer+0xec>
	}

	HAL_UART_Receive_DMA(NMEA_huart, NMEA_UART_DMA_buffer, NMEA_UART_DMA_BUFFER_SIZE);
 8002e2c:	4b18      	ldr	r3, [pc, #96]	@ (8002e90 <NMEA_UART_DMA_copy_buffer+0x180>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e34:	4915      	ldr	r1, [pc, #84]	@ (8002e8c <NMEA_UART_DMA_copy_buffer+0x17c>)
 8002e36:	4618      	mov	r0, r3
 8002e38:	f00c fe40 	bl	800fabc <HAL_UART_Receive_DMA>
	return stat;
 8002e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3710      	adds	r7, #16
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	24000dbc 	.word	0x24000dbc
 8002e4c:	40020010 	.word	0x40020010
 8002e50:	40020028 	.word	0x40020028
 8002e54:	40020040 	.word	0x40020040
 8002e58:	40020058 	.word	0x40020058
 8002e5c:	40020070 	.word	0x40020070
 8002e60:	40020088 	.word	0x40020088
 8002e64:	400200a0 	.word	0x400200a0
 8002e68:	400200b8 	.word	0x400200b8
 8002e6c:	40020410 	.word	0x40020410
 8002e70:	40020428 	.word	0x40020428
 8002e74:	40020440 	.word	0x40020440
 8002e78:	40020458 	.word	0x40020458
 8002e7c:	40020470 	.word	0x40020470
 8002e80:	40020488 	.word	0x40020488
 8002e84:	400204a0 	.word	0x400204a0
 8002e88:	400204b8 	.word	0x400204b8
 8002e8c:	24000718 	.word	0x24000718
 8002e90:	24000db8 	.word	0x24000db8

08002e94 <NMEA_process_task>:

NMEA_status NMEA_process_task(void){
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
	NMEA_status stat = NMEA_OK;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	71fb      	strb	r3, [r7, #7]
	while(UART_buffer_lines>0) {
 8002e9e:	e00d      	b.n	8002ebc <NMEA_process_task+0x28>
		NMEA_read_line();
 8002ea0:	f7ff fe2a 	bl	8002af8 <NMEA_read_line>
		if (NMEA_checksum_clc(NMEA_working_buffer) == NMEA_OK){
 8002ea4:	480a      	ldr	r0, [pc, #40]	@ (8002ed0 <NMEA_process_task+0x3c>)
 8002ea6:	f7ff fdf1 	bl	8002a8c <NMEA_checksum_clc>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d103      	bne.n	8002eb8 <NMEA_process_task+0x24>
			NMEA_parser((char *)NMEA_working_buffer);
 8002eb0:	4807      	ldr	r0, [pc, #28]	@ (8002ed0 <NMEA_process_task+0x3c>)
 8002eb2:	f7ff fbed 	bl	8002690 <NMEA_parser>
 8002eb6:	e001      	b.n	8002ebc <NMEA_process_task+0x28>
		}else stat = NMEA_CHECKSUM_ERROR;
 8002eb8:	2302      	movs	r3, #2
 8002eba:	71fb      	strb	r3, [r7, #7]
	while(UART_buffer_lines>0) {
 8002ebc:	4b05      	ldr	r3, [pc, #20]	@ (8002ed4 <NMEA_process_task+0x40>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	dced      	bgt.n	8002ea0 <NMEA_process_task+0xc>
	}
	return stat;
 8002ec4:	79fb      	ldrb	r3, [r7, #7]
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3708      	adds	r7, #8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	24000d18 	.word	0x24000d18
 8002ed4:	24000da0 	.word	0x24000da0

08002ed8 <user_UART_IDLE_IT_handler>:

NMEA_status user_UART_IDLE_IT_handler(void){
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
	NMEA_status stat = NMEA_OK;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	71fb      	strb	r3, [r7, #7]
	if (__HAL_UART_GET_FLAG(NMEA_huart, UART_FLAG_IDLE) == SET) {
 8002ee2:	4b0d      	ldr	r3, [pc, #52]	@ (8002f18 <user_UART_IDLE_IT_handler+0x40>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	69db      	ldr	r3, [r3, #28]
 8002eea:	f003 0310 	and.w	r3, r3, #16
 8002eee:	2b10      	cmp	r3, #16
 8002ef0:	d10d      	bne.n	8002f0e <user_UART_IDLE_IT_handler+0x36>
		__HAL_UART_CLEAR_FLAG(NMEA_huart,UART_FLAG_IDLE);
 8002ef2:	4b09      	ldr	r3, [pc, #36]	@ (8002f18 <user_UART_IDLE_IT_handler+0x40>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2210      	movs	r2, #16
 8002efa:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(NMEA_huart);
 8002efc:	4b06      	ldr	r3, [pc, #24]	@ (8002f18 <user_UART_IDLE_IT_handler+0x40>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f00c fe27 	bl	800fb54 <HAL_UART_DMAStop>
		stat = NMEA_UART_DMA_copy_buffer();
 8002f06:	f7ff ff03 	bl	8002d10 <NMEA_UART_DMA_copy_buffer>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	71fb      	strb	r3, [r7, #7]
	}
	return stat;
 8002f0e:	79fb      	ldrb	r3, [r7, #7]
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3708      	adds	r7, #8
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	24000db8 	.word	0x24000db8

08002f1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8002f20:	f000 f906 	bl	8003130 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f24:	f003 fc60 	bl	80067e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f28:	f000 f842 	bl	8002fb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f2c:	f7ff fa26 	bl	800237c <MX_GPIO_Init>
  MX_DMA_Init();
 8002f30:	f7fe ffbc 	bl	8001eac <MX_DMA_Init>
  MX_FDCAN1_Init();
 8002f34:	f7fe ffea 	bl	8001f0c <MX_FDCAN1_Init>
  MX_I2C3_Init();
 8002f38:	f7ff fad2 	bl	80024e0 <MX_I2C3_Init>
  MX_SPI1_Init();
 8002f3c:	f000 f93c 	bl	80031b8 <MX_SPI1_Init>
  MX_SPI2_Init();
 8002f40:	f000 f990 	bl	8003264 <MX_SPI2_Init>
  MX_TIM2_Init();
 8002f44:	f000 fcc8 	bl	80038d8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002f48:	f000 fd42 	bl	80039d0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002f4c:	f000 fda6 	bl	8003a9c <MX_TIM4_Init>
  MX_UART4_Init();
 8002f50:	f000 ff5e 	bl	8003e10 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8002f54:	f000 ffa8 	bl	8003ea8 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8002f58:	f001 f842 	bl	8003fe0 <MX_USART6_UART_Init>
  MX_TIM13_Init();
 8002f5c:	f000 fe1a 	bl	8003b94 <MX_TIM13_Init>
  MX_USART3_UART_Init();
 8002f60:	f000 fff2 	bl	8003f48 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 8002f64:	f00f ffe6 	bl	8012f34 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  BMP280_init();
 8002f68:	f001 ff76 	bl	8004e58 <BMP280_init>
  //SD_init();
  SBUS_init();
 8002f6c:	f002 ff22 	bl	8005db4 <SBUS_init>
  HAL_UART_Receive_DMA(&huart3, &BNO_BufferByte,1);
 8002f70:	2201      	movs	r2, #1
 8002f72:	4909      	ldr	r1, [pc, #36]	@ (8002f98 <main+0x7c>)
 8002f74:	4809      	ldr	r0, [pc, #36]	@ (8002f9c <main+0x80>)
 8002f76:	f00c fda1 	bl	800fabc <HAL_UART_Receive_DMA>
  HAL_UART_Receive_IT(&huart6, &LR03_RxByte,1);
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	4908      	ldr	r1, [pc, #32]	@ (8002fa0 <main+0x84>)
 8002f7e:	4809      	ldr	r0, [pc, #36]	@ (8002fa4 <main+0x88>)
 8002f80:	f00c fd50 	bl	800fa24 <HAL_UART_Receive_IT>
  NMEA_init(&huart4, &hdma_uart4_rx);
 8002f84:	4908      	ldr	r1, [pc, #32]	@ (8002fa8 <main+0x8c>)
 8002f86:	4809      	ldr	r0, [pc, #36]	@ (8002fac <main+0x90>)
 8002f88:	f7ff fe1e 	bl	8002bc8 <NMEA_init>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8002f8c:	f7ff f976 	bl	800227c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002f90:	f011 fcff 	bl	8014992 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002f94:	bf00      	nop
 8002f96:	e7fd      	b.n	8002f94 <main+0x78>
 8002f98:	2400157f 	.word	0x2400157f
 8002f9c:	240011b8 	.word	0x240011b8
 8002fa0:	24000df8 	.word	0x24000df8
 8002fa4:	2400124c 	.word	0x2400124c
 8002fa8:	240012e0 	.word	0x240012e0
 8002fac:	24001090 	.word	0x24001090

08002fb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b09c      	sub	sp, #112	@ 0x70
 8002fb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002fb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002fba:	224c      	movs	r2, #76	@ 0x4c
 8002fbc:	2100      	movs	r1, #0
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f014 fe61 	bl	8017c86 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002fc4:	1d3b      	adds	r3, r7, #4
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	2100      	movs	r1, #0
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f014 fe5b 	bl	8017c86 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8002fd0:	4b30      	ldr	r3, [pc, #192]	@ (8003094 <SystemClock_Config+0xe4>)
 8002fd2:	f04f 32ff 	mov.w	r2, #4294967295
 8002fd6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002fda:	2002      	movs	r0, #2
 8002fdc:	f007 fb28 	bl	800a630 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	603b      	str	r3, [r7, #0]
 8002fe4:	4b2c      	ldr	r3, [pc, #176]	@ (8003098 <SystemClock_Config+0xe8>)
 8002fe6:	699b      	ldr	r3, [r3, #24]
 8002fe8:	4a2b      	ldr	r2, [pc, #172]	@ (8003098 <SystemClock_Config+0xe8>)
 8002fea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002fee:	6193      	str	r3, [r2, #24]
 8002ff0:	4b29      	ldr	r3, [pc, #164]	@ (8003098 <SystemClock_Config+0xe8>)
 8002ff2:	699b      	ldr	r3, [r3, #24]
 8002ff4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002ff8:	603b      	str	r3, [r7, #0]
 8002ffa:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002ffc:	bf00      	nop
 8002ffe:	4b26      	ldr	r3, [pc, #152]	@ (8003098 <SystemClock_Config+0xe8>)
 8003000:	699b      	ldr	r3, [r3, #24]
 8003002:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003006:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800300a:	d1f8      	bne.n	8002ffe <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800300c:	2302      	movs	r3, #2
 800300e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8003010:	2301      	movs	r3, #1
 8003012:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8003014:	2340      	movs	r3, #64	@ 0x40
 8003016:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003018:	2302      	movs	r3, #2
 800301a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800301c:	2300      	movs	r3, #0
 800301e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003020:	2304      	movs	r3, #4
 8003022:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 8003024:	2323      	movs	r3, #35	@ 0x23
 8003026:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8003028:	2302      	movs	r3, #2
 800302a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800302c:	2302      	movs	r3, #2
 800302e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003030:	2302      	movs	r3, #2
 8003032:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8003034:	230c      	movs	r3, #12
 8003036:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8003038:	2300      	movs	r3, #0
 800303a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800303c:	2300      	movs	r3, #0
 800303e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003040:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003044:	4618      	mov	r0, r3
 8003046:	f007 fb2d 	bl	800a6a4 <HAL_RCC_OscConfig>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d001      	beq.n	8003054 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8003050:	f000 f8ac 	bl	80031ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003054:	233f      	movs	r3, #63	@ 0x3f
 8003056:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003058:	2303      	movs	r3, #3
 800305a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800305c:	2300      	movs	r3, #0
 800305e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8003060:	2300      	movs	r3, #0
 8003062:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8003064:	2340      	movs	r3, #64	@ 0x40
 8003066:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8003068:	2340      	movs	r3, #64	@ 0x40
 800306a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800306c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003070:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8003072:	2340      	movs	r3, #64	@ 0x40
 8003074:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8003076:	1d3b      	adds	r3, r7, #4
 8003078:	2106      	movs	r1, #6
 800307a:	4618      	mov	r0, r3
 800307c:	f007 ff44 	bl	800af08 <HAL_RCC_ClockConfig>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <SystemClock_Config+0xda>
  {
    Error_Handler();
 8003086:	f000 f891 	bl	80031ac <Error_Handler>
  }
}
 800308a:	bf00      	nop
 800308c:	3770      	adds	r7, #112	@ 0x70
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	58024400 	.word	0x58024400
 8003098:	58024800 	.word	0x58024800

0800309c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
	if (huart -> Instance == USART1){
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a18      	ldr	r2, [pc, #96]	@ (800310c <HAL_UART_RxCpltCallback+0x70>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d10a      	bne.n	80030c4 <HAL_UART_RxCpltCallback+0x28>
		SBUS_Receive(SBUS_RxBuffer);
 80030ae:	4b18      	ldr	r3, [pc, #96]	@ (8003110 <HAL_UART_RxCpltCallback+0x74>)
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f002 fe8c 	bl	8005dd0 <SBUS_Receive>
		HAL_UART_Receive_DMA(&huart1, &SBUS_RxBuffer, 1);
 80030b8:	2201      	movs	r2, #1
 80030ba:	4915      	ldr	r1, [pc, #84]	@ (8003110 <HAL_UART_RxCpltCallback+0x74>)
 80030bc:	4815      	ldr	r0, [pc, #84]	@ (8003114 <HAL_UART_RxCpltCallback+0x78>)
 80030be:	f00c fcfd 	bl	800fabc <HAL_UART_Receive_DMA>
    }
    else if(huart -> Instance == USART6){
    	LR03_Receive(LR03_RxByte);
    	HAL_UART_Receive_IT(&huart6, &LR03_RxByte,1);
    }
}
 80030c2:	e01e      	b.n	8003102 <HAL_UART_RxCpltCallback+0x66>
    else if (huart -> Instance == USART3){
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a13      	ldr	r2, [pc, #76]	@ (8003118 <HAL_UART_RxCpltCallback+0x7c>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d10a      	bne.n	80030e4 <HAL_UART_RxCpltCallback+0x48>
        BNO_Receive(BNO_BufferByte);
 80030ce:	4b13      	ldr	r3, [pc, #76]	@ (800311c <HAL_UART_RxCpltCallback+0x80>)
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f002 fbf4 	bl	80058c0 <BNO_Receive>
        HAL_UART_Receive_DMA(&huart3, &BNO_BufferByte,1);
 80030d8:	2201      	movs	r2, #1
 80030da:	4910      	ldr	r1, [pc, #64]	@ (800311c <HAL_UART_RxCpltCallback+0x80>)
 80030dc:	4810      	ldr	r0, [pc, #64]	@ (8003120 <HAL_UART_RxCpltCallback+0x84>)
 80030de:	f00c fced 	bl	800fabc <HAL_UART_Receive_DMA>
}
 80030e2:	e00e      	b.n	8003102 <HAL_UART_RxCpltCallback+0x66>
    else if(huart -> Instance == USART6){
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a0e      	ldr	r2, [pc, #56]	@ (8003124 <HAL_UART_RxCpltCallback+0x88>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d109      	bne.n	8003102 <HAL_UART_RxCpltCallback+0x66>
    	LR03_Receive(LR03_RxByte);
 80030ee:	4b0e      	ldr	r3, [pc, #56]	@ (8003128 <HAL_UART_RxCpltCallback+0x8c>)
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f002 fdc6 	bl	8005c84 <LR03_Receive>
    	HAL_UART_Receive_IT(&huart6, &LR03_RxByte,1);
 80030f8:	2201      	movs	r2, #1
 80030fa:	490b      	ldr	r1, [pc, #44]	@ (8003128 <HAL_UART_RxCpltCallback+0x8c>)
 80030fc:	480b      	ldr	r0, [pc, #44]	@ (800312c <HAL_UART_RxCpltCallback+0x90>)
 80030fe:	f00c fc91 	bl	800fa24 <HAL_UART_Receive_IT>
}
 8003102:	bf00      	nop
 8003104:	3708      	adds	r7, #8
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	40011000 	.word	0x40011000
 8003110:	24001709 	.word	0x24001709
 8003114:	24001124 	.word	0x24001124
 8003118:	40004800 	.word	0x40004800
 800311c:	2400157f 	.word	0x2400157f
 8003120:	240011b8 	.word	0x240011b8
 8003124:	40011400 	.word	0x40011400
 8003128:	24000df8 	.word	0x24000df8
 800312c:	2400124c 	.word	0x2400124c

08003130 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8003136:	463b      	mov	r3, r7
 8003138:	2200      	movs	r2, #0
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	605a      	str	r2, [r3, #4]
 800313e:	609a      	str	r2, [r3, #8]
 8003140:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8003142:	f003 fcb1 	bl	8006aa8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8003146:	2301      	movs	r3, #1
 8003148:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800314a:	2300      	movs	r3, #0
 800314c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800314e:	2300      	movs	r3, #0
 8003150:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8003152:	231f      	movs	r3, #31
 8003154:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8003156:	2387      	movs	r3, #135	@ 0x87
 8003158:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800315a:	2300      	movs	r3, #0
 800315c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800315e:	2300      	movs	r3, #0
 8003160:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8003162:	2301      	movs	r3, #1
 8003164:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8003166:	2301      	movs	r3, #1
 8003168:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800316a:	2300      	movs	r3, #0
 800316c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800316e:	2300      	movs	r3, #0
 8003170:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003172:	463b      	mov	r3, r7
 8003174:	4618      	mov	r0, r3
 8003176:	f003 fccf 	bl	8006b18 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800317a:	2004      	movs	r0, #4
 800317c:	f003 fcac 	bl	8006ad8 <HAL_MPU_Enable>

}
 8003180:	bf00      	nop
 8003182:	3710      	adds	r7, #16
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a04      	ldr	r2, [pc, #16]	@ (80031a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d101      	bne.n	800319e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800319a:	f003 fb61 	bl	8006860 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800319e:	bf00      	nop
 80031a0:	3708      	adds	r7, #8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	40014800 	.word	0x40014800

080031ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80031b0:	b672      	cpsid	i
}
 80031b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80031b4:	bf00      	nop
 80031b6:	e7fd      	b.n	80031b4 <Error_Handler+0x8>

080031b8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80031bc:	4b27      	ldr	r3, [pc, #156]	@ (800325c <MX_SPI1_Init+0xa4>)
 80031be:	4a28      	ldr	r2, [pc, #160]	@ (8003260 <MX_SPI1_Init+0xa8>)
 80031c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80031c2:	4b26      	ldr	r3, [pc, #152]	@ (800325c <MX_SPI1_Init+0xa4>)
 80031c4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80031c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80031ca:	4b24      	ldr	r3, [pc, #144]	@ (800325c <MX_SPI1_Init+0xa4>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80031d0:	4b22      	ldr	r3, [pc, #136]	@ (800325c <MX_SPI1_Init+0xa4>)
 80031d2:	2207      	movs	r2, #7
 80031d4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80031d6:	4b21      	ldr	r3, [pc, #132]	@ (800325c <MX_SPI1_Init+0xa4>)
 80031d8:	2200      	movs	r2, #0
 80031da:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80031dc:	4b1f      	ldr	r3, [pc, #124]	@ (800325c <MX_SPI1_Init+0xa4>)
 80031de:	2200      	movs	r2, #0
 80031e0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80031e2:	4b1e      	ldr	r3, [pc, #120]	@ (800325c <MX_SPI1_Init+0xa4>)
 80031e4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80031e8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80031ea:	4b1c      	ldr	r3, [pc, #112]	@ (800325c <MX_SPI1_Init+0xa4>)
 80031ec:	f04f 42e0 	mov.w	r2, #1879048192	@ 0x70000000
 80031f0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80031f2:	4b1a      	ldr	r3, [pc, #104]	@ (800325c <MX_SPI1_Init+0xa4>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80031f8:	4b18      	ldr	r3, [pc, #96]	@ (800325c <MX_SPI1_Init+0xa4>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031fe:	4b17      	ldr	r3, [pc, #92]	@ (800325c <MX_SPI1_Init+0xa4>)
 8003200:	2200      	movs	r2, #0
 8003202:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8003204:	4b15      	ldr	r3, [pc, #84]	@ (800325c <MX_SPI1_Init+0xa4>)
 8003206:	2200      	movs	r2, #0
 8003208:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800320a:	4b14      	ldr	r3, [pc, #80]	@ (800325c <MX_SPI1_Init+0xa4>)
 800320c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003210:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003212:	4b12      	ldr	r3, [pc, #72]	@ (800325c <MX_SPI1_Init+0xa4>)
 8003214:	2200      	movs	r2, #0
 8003216:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8003218:	4b10      	ldr	r3, [pc, #64]	@ (800325c <MX_SPI1_Init+0xa4>)
 800321a:	2200      	movs	r2, #0
 800321c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800321e:	4b0f      	ldr	r3, [pc, #60]	@ (800325c <MX_SPI1_Init+0xa4>)
 8003220:	2200      	movs	r2, #0
 8003222:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003224:	4b0d      	ldr	r3, [pc, #52]	@ (800325c <MX_SPI1_Init+0xa4>)
 8003226:	2200      	movs	r2, #0
 8003228:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800322a:	4b0c      	ldr	r3, [pc, #48]	@ (800325c <MX_SPI1_Init+0xa4>)
 800322c:	2200      	movs	r2, #0
 800322e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003230:	4b0a      	ldr	r3, [pc, #40]	@ (800325c <MX_SPI1_Init+0xa4>)
 8003232:	2200      	movs	r2, #0
 8003234:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003236:	4b09      	ldr	r3, [pc, #36]	@ (800325c <MX_SPI1_Init+0xa4>)
 8003238:	2200      	movs	r2, #0
 800323a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800323c:	4b07      	ldr	r3, [pc, #28]	@ (800325c <MX_SPI1_Init+0xa4>)
 800323e:	2200      	movs	r2, #0
 8003240:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003242:	4b06      	ldr	r3, [pc, #24]	@ (800325c <MX_SPI1_Init+0xa4>)
 8003244:	2200      	movs	r2, #0
 8003246:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003248:	4804      	ldr	r0, [pc, #16]	@ (800325c <MX_SPI1_Init+0xa4>)
 800324a:	f00a f80b 	bl	800d264 <HAL_SPI_Init>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d001      	beq.n	8003258 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8003254:	f7ff ffaa 	bl	80031ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003258:	bf00      	nop
 800325a:	bd80      	pop	{r7, pc}
 800325c:	24000e00 	.word	0x24000e00
 8003260:	40013000 	.word	0x40013000

08003264 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8003268:	4b27      	ldr	r3, [pc, #156]	@ (8003308 <MX_SPI2_Init+0xa4>)
 800326a:	4a28      	ldr	r2, [pc, #160]	@ (800330c <MX_SPI2_Init+0xa8>)
 800326c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800326e:	4b26      	ldr	r3, [pc, #152]	@ (8003308 <MX_SPI2_Init+0xa4>)
 8003270:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8003274:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003276:	4b24      	ldr	r3, [pc, #144]	@ (8003308 <MX_SPI2_Init+0xa4>)
 8003278:	2200      	movs	r2, #0
 800327a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800327c:	4b22      	ldr	r3, [pc, #136]	@ (8003308 <MX_SPI2_Init+0xa4>)
 800327e:	2207      	movs	r2, #7
 8003280:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003282:	4b21      	ldr	r3, [pc, #132]	@ (8003308 <MX_SPI2_Init+0xa4>)
 8003284:	2200      	movs	r2, #0
 8003286:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003288:	4b1f      	ldr	r3, [pc, #124]	@ (8003308 <MX_SPI2_Init+0xa4>)
 800328a:	2200      	movs	r2, #0
 800328c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800328e:	4b1e      	ldr	r3, [pc, #120]	@ (8003308 <MX_SPI2_Init+0xa4>)
 8003290:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003294:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8003296:	4b1c      	ldr	r3, [pc, #112]	@ (8003308 <MX_SPI2_Init+0xa4>)
 8003298:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 800329c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800329e:	4b1a      	ldr	r3, [pc, #104]	@ (8003308 <MX_SPI2_Init+0xa4>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80032a4:	4b18      	ldr	r3, [pc, #96]	@ (8003308 <MX_SPI2_Init+0xa4>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032aa:	4b17      	ldr	r3, [pc, #92]	@ (8003308 <MX_SPI2_Init+0xa4>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80032b0:	4b15      	ldr	r3, [pc, #84]	@ (8003308 <MX_SPI2_Init+0xa4>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80032b6:	4b14      	ldr	r3, [pc, #80]	@ (8003308 <MX_SPI2_Init+0xa4>)
 80032b8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80032bc:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80032be:	4b12      	ldr	r3, [pc, #72]	@ (8003308 <MX_SPI2_Init+0xa4>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80032c4:	4b10      	ldr	r3, [pc, #64]	@ (8003308 <MX_SPI2_Init+0xa4>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80032ca:	4b0f      	ldr	r3, [pc, #60]	@ (8003308 <MX_SPI2_Init+0xa4>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80032d0:	4b0d      	ldr	r3, [pc, #52]	@ (8003308 <MX_SPI2_Init+0xa4>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80032d6:	4b0c      	ldr	r3, [pc, #48]	@ (8003308 <MX_SPI2_Init+0xa4>)
 80032d8:	2200      	movs	r2, #0
 80032da:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80032dc:	4b0a      	ldr	r3, [pc, #40]	@ (8003308 <MX_SPI2_Init+0xa4>)
 80032de:	2200      	movs	r2, #0
 80032e0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80032e2:	4b09      	ldr	r3, [pc, #36]	@ (8003308 <MX_SPI2_Init+0xa4>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80032e8:	4b07      	ldr	r3, [pc, #28]	@ (8003308 <MX_SPI2_Init+0xa4>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80032ee:	4b06      	ldr	r3, [pc, #24]	@ (8003308 <MX_SPI2_Init+0xa4>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80032f4:	4804      	ldr	r0, [pc, #16]	@ (8003308 <MX_SPI2_Init+0xa4>)
 80032f6:	f009 ffb5 	bl	800d264 <HAL_SPI_Init>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d001      	beq.n	8003304 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8003300:	f7ff ff54 	bl	80031ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003304:	bf00      	nop
 8003306:	bd80      	pop	{r7, pc}
 8003308:	24000e88 	.word	0x24000e88
 800330c:	40003800 	.word	0x40003800

08003310 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b0bc      	sub	sp, #240	@ 0xf0
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003318:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800331c:	2200      	movs	r2, #0
 800331e:	601a      	str	r2, [r3, #0]
 8003320:	605a      	str	r2, [r3, #4]
 8003322:	609a      	str	r2, [r3, #8]
 8003324:	60da      	str	r2, [r3, #12]
 8003326:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003328:	f107 0318 	add.w	r3, r7, #24
 800332c:	22c0      	movs	r2, #192	@ 0xc0
 800332e:	2100      	movs	r1, #0
 8003330:	4618      	mov	r0, r3
 8003332:	f014 fca8 	bl	8017c86 <memset>
  if(spiHandle->Instance==SPI1)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a4c      	ldr	r2, [pc, #304]	@ (800346c <HAL_SPI_MspInit+0x15c>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d145      	bne.n	80033cc <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8003340:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003344:	f04f 0300 	mov.w	r3, #0
 8003348:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800334c:	2300      	movs	r3, #0
 800334e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003350:	f107 0318 	add.w	r3, r7, #24
 8003354:	4618      	mov	r0, r3
 8003356:	f008 f9a5 	bl	800b6a4 <HAL_RCCEx_PeriphCLKConfig>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d001      	beq.n	8003364 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8003360:	f7ff ff24 	bl	80031ac <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003364:	4b42      	ldr	r3, [pc, #264]	@ (8003470 <HAL_SPI_MspInit+0x160>)
 8003366:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800336a:	4a41      	ldr	r2, [pc, #260]	@ (8003470 <HAL_SPI_MspInit+0x160>)
 800336c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003370:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8003374:	4b3e      	ldr	r3, [pc, #248]	@ (8003470 <HAL_SPI_MspInit+0x160>)
 8003376:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800337a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800337e:	617b      	str	r3, [r7, #20]
 8003380:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003382:	4b3b      	ldr	r3, [pc, #236]	@ (8003470 <HAL_SPI_MspInit+0x160>)
 8003384:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003388:	4a39      	ldr	r2, [pc, #228]	@ (8003470 <HAL_SPI_MspInit+0x160>)
 800338a:	f043 0301 	orr.w	r3, r3, #1
 800338e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003392:	4b37      	ldr	r3, [pc, #220]	@ (8003470 <HAL_SPI_MspInit+0x160>)
 8003394:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003398:	f003 0301 	and.w	r3, r3, #1
 800339c:	613b      	str	r3, [r7, #16]
 800339e:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 80033a0:	23e0      	movs	r3, #224	@ 0xe0
 80033a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033a6:	2302      	movs	r3, #2
 80033a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ac:	2300      	movs	r3, #0
 80033ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033b2:	2300      	movs	r3, #0
 80033b4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80033b8:	2305      	movs	r3, #5
 80033ba:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033be:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80033c2:	4619      	mov	r1, r3
 80033c4:	482b      	ldr	r0, [pc, #172]	@ (8003474 <HAL_SPI_MspInit+0x164>)
 80033c6:	f006 fe35 	bl	800a034 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80033ca:	e04a      	b.n	8003462 <HAL_SPI_MspInit+0x152>
  else if(spiHandle->Instance==SPI2)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a29      	ldr	r2, [pc, #164]	@ (8003478 <HAL_SPI_MspInit+0x168>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d145      	bne.n	8003462 <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80033d6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80033da:	f04f 0300 	mov.w	r3, #0
 80033de:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80033e2:	2300      	movs	r3, #0
 80033e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80033e6:	f107 0318 	add.w	r3, r7, #24
 80033ea:	4618      	mov	r0, r3
 80033ec:	f008 f95a 	bl	800b6a4 <HAL_RCCEx_PeriphCLKConfig>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d001      	beq.n	80033fa <HAL_SPI_MspInit+0xea>
      Error_Handler();
 80033f6:	f7ff fed9 	bl	80031ac <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80033fa:	4b1d      	ldr	r3, [pc, #116]	@ (8003470 <HAL_SPI_MspInit+0x160>)
 80033fc:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003400:	4a1b      	ldr	r2, [pc, #108]	@ (8003470 <HAL_SPI_MspInit+0x160>)
 8003402:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003406:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800340a:	4b19      	ldr	r3, [pc, #100]	@ (8003470 <HAL_SPI_MspInit+0x160>)
 800340c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003410:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003414:	60fb      	str	r3, [r7, #12]
 8003416:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003418:	4b15      	ldr	r3, [pc, #84]	@ (8003470 <HAL_SPI_MspInit+0x160>)
 800341a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800341e:	4a14      	ldr	r2, [pc, #80]	@ (8003470 <HAL_SPI_MspInit+0x160>)
 8003420:	f043 0302 	orr.w	r3, r3, #2
 8003424:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003428:	4b11      	ldr	r3, [pc, #68]	@ (8003470 <HAL_SPI_MspInit+0x160>)
 800342a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	60bb      	str	r3, [r7, #8]
 8003434:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BMP_SCK_Pin|BMP_MISO_Pin|BMP_MOSI_Pin;
 8003436:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800343a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800343e:	2302      	movs	r3, #2
 8003440:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003444:	2300      	movs	r3, #0
 8003446:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800344a:	2300      	movs	r3, #0
 800344c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003450:	2305      	movs	r3, #5
 8003452:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003456:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800345a:	4619      	mov	r1, r3
 800345c:	4807      	ldr	r0, [pc, #28]	@ (800347c <HAL_SPI_MspInit+0x16c>)
 800345e:	f006 fde9 	bl	800a034 <HAL_GPIO_Init>
}
 8003462:	bf00      	nop
 8003464:	37f0      	adds	r7, #240	@ 0xf0
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	40013000 	.word	0x40013000
 8003470:	58024400 	.word	0x58024400
 8003474:	58020000 	.word	0x58020000
 8003478:	40003800 	.word	0x40003800
 800347c:	58020400 	.word	0x58020400

08003480 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003486:	4b0c      	ldr	r3, [pc, #48]	@ (80034b8 <HAL_MspInit+0x38>)
 8003488:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800348c:	4a0a      	ldr	r2, [pc, #40]	@ (80034b8 <HAL_MspInit+0x38>)
 800348e:	f043 0302 	orr.w	r3, r3, #2
 8003492:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8003496:	4b08      	ldr	r3, [pc, #32]	@ (80034b8 <HAL_MspInit+0x38>)
 8003498:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	607b      	str	r3, [r7, #4]
 80034a2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80034a4:	2200      	movs	r2, #0
 80034a6:	210f      	movs	r1, #15
 80034a8:	f06f 0001 	mvn.w	r0, #1
 80034ac:	f003 fad4 	bl	8006a58 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034b0:	bf00      	nop
 80034b2:	3708      	adds	r7, #8
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	58024400 	.word	0x58024400

080034bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b08e      	sub	sp, #56	@ 0x38
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2b0f      	cmp	r3, #15
 80034c8:	d844      	bhi.n	8003554 <HAL_InitTick+0x98>
   {
     HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority ,0);
 80034ca:	2200      	movs	r2, #0
 80034cc:	6879      	ldr	r1, [r7, #4]
 80034ce:	2076      	movs	r0, #118	@ 0x76
 80034d0:	f003 fac2 	bl	8006a58 <HAL_NVIC_SetPriority>

     /* Enable the TIM17 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80034d4:	2076      	movs	r0, #118	@ 0x76
 80034d6:	f003 fad9 	bl	8006a8c <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 80034da:	4a24      	ldr	r2, [pc, #144]	@ (800356c <HAL_InitTick+0xb0>)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 80034e0:	4b23      	ldr	r3, [pc, #140]	@ (8003570 <HAL_InitTick+0xb4>)
 80034e2:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80034e6:	4a22      	ldr	r2, [pc, #136]	@ (8003570 <HAL_InitTick+0xb4>)
 80034e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034ec:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 80034f0:	4b1f      	ldr	r3, [pc, #124]	@ (8003570 <HAL_InitTick+0xb4>)
 80034f2:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80034f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034fa:	60bb      	str	r3, [r7, #8]
 80034fc:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80034fe:	f107 020c 	add.w	r2, r7, #12
 8003502:	f107 0310 	add.w	r3, r7, #16
 8003506:	4611      	mov	r1, r2
 8003508:	4618      	mov	r0, r3
 800350a:	f008 f889 	bl	800b620 <HAL_RCC_GetClockConfig>
  /* Compute TIM17 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800350e:	f008 f871 	bl	800b5f4 <HAL_RCC_GetPCLK2Freq>
 8003512:	4603      	mov	r3, r0
 8003514:	005b      	lsls	r3, r3, #1
 8003516:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003518:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800351a:	4a16      	ldr	r2, [pc, #88]	@ (8003574 <HAL_InitTick+0xb8>)
 800351c:	fba2 2303 	umull	r2, r3, r2, r3
 8003520:	0c9b      	lsrs	r3, r3, #18
 8003522:	3b01      	subs	r3, #1
 8003524:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8003526:	4b14      	ldr	r3, [pc, #80]	@ (8003578 <HAL_InitTick+0xbc>)
 8003528:	4a14      	ldr	r2, [pc, #80]	@ (800357c <HAL_InitTick+0xc0>)
 800352a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 800352c:	4b12      	ldr	r3, [pc, #72]	@ (8003578 <HAL_InitTick+0xbc>)
 800352e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003532:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8003534:	4a10      	ldr	r2, [pc, #64]	@ (8003578 <HAL_InitTick+0xbc>)
 8003536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003538:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 800353a:	4b0f      	ldr	r3, [pc, #60]	@ (8003578 <HAL_InitTick+0xbc>)
 800353c:	2200      	movs	r2, #0
 800353e:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003540:	4b0d      	ldr	r3, [pc, #52]	@ (8003578 <HAL_InitTick+0xbc>)
 8003542:	2200      	movs	r2, #0
 8003544:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8003546:	480c      	ldr	r0, [pc, #48]	@ (8003578 <HAL_InitTick+0xbc>)
 8003548:	f00b f833 	bl	800e5b2 <HAL_TIM_Base_Init>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d107      	bne.n	8003562 <HAL_InitTick+0xa6>
 8003552:	e001      	b.n	8003558 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e005      	b.n	8003564 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8003558:	4807      	ldr	r0, [pc, #28]	@ (8003578 <HAL_InitTick+0xbc>)
 800355a:	f00b f881 	bl	800e660 <HAL_TIM_Base_Start_IT>
 800355e:	4603      	mov	r3, r0
 8003560:	e000      	b.n	8003564 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
}
 8003564:	4618      	mov	r0, r3
 8003566:	3738      	adds	r7, #56	@ 0x38
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	240000a4 	.word	0x240000a4
 8003570:	58024400 	.word	0x58024400
 8003574:	431bde83 	.word	0x431bde83
 8003578:	24000f10 	.word	0x24000f10
 800357c:	40014800 	.word	0x40014800

08003580 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003580:	b480      	push	{r7}
 8003582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003584:	bf00      	nop
 8003586:	e7fd      	b.n	8003584 <NMI_Handler+0x4>

08003588 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800358c:	bf00      	nop
 800358e:	e7fd      	b.n	800358c <HardFault_Handler+0x4>

08003590 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003590:	b480      	push	{r7}
 8003592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003594:	bf00      	nop
 8003596:	e7fd      	b.n	8003594 <MemManage_Handler+0x4>

08003598 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003598:	b480      	push	{r7}
 800359a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800359c:	bf00      	nop
 800359e:	e7fd      	b.n	800359c <BusFault_Handler+0x4>

080035a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80035a0:	b480      	push	{r7}
 80035a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80035a4:	bf00      	nop
 80035a6:	e7fd      	b.n	80035a4 <UsageFault_Handler+0x4>

080035a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80035a8:	b480      	push	{r7}
 80035aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035ac:	bf00      	nop
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr
	...

080035b8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80035bc:	4802      	ldr	r0, [pc, #8]	@ (80035c8 <DMA1_Stream0_IRQHandler+0x10>)
 80035be:	f004 fe47 	bl	8008250 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80035c2:	bf00      	nop
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	24001358 	.word	0x24001358

080035cc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80035d0:	4802      	ldr	r0, [pc, #8]	@ (80035dc <DMA1_Stream1_IRQHandler+0x10>)
 80035d2:	f004 fe3d 	bl	8008250 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80035d6:	bf00      	nop
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	240013d0 	.word	0x240013d0

080035e0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80035e4:	4802      	ldr	r0, [pc, #8]	@ (80035f0 <DMA1_Stream2_IRQHandler+0x10>)
 80035e6:	f004 fe33 	bl	8008250 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80035ea:	bf00      	nop
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	240012e0 	.word	0x240012e0

080035f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80035f8:	4802      	ldr	r0, [pc, #8]	@ (8003604 <USART1_IRQHandler+0x10>)
 80035fa:	f00c fc7d 	bl	800fef8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80035fe:	bf00      	nop
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	24001124 	.word	0x24001124

08003608 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800360c:	4802      	ldr	r0, [pc, #8]	@ (8003618 <USART3_IRQHandler+0x10>)
 800360e:	f00c fc73 	bl	800fef8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003612:	bf00      	nop
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	240011b8 	.word	0x240011b8

0800361c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	user_UART_IDLE_IT_handler();
 8003620:	f7ff fc5a 	bl	8002ed8 <user_UART_IDLE_IT_handler>
  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003624:	4802      	ldr	r0, [pc, #8]	@ (8003630 <UART4_IRQHandler+0x14>)
 8003626:	f00c fc67 	bl	800fef8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800362a:	bf00      	nop
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	24001090 	.word	0x24001090

08003634 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003638:	4802      	ldr	r0, [pc, #8]	@ (8003644 <USART6_IRQHandler+0x10>)
 800363a:	f00c fc5d 	bl	800fef8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800363e:	bf00      	nop
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	2400124c 	.word	0x2400124c

08003648 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800364c:	4802      	ldr	r0, [pc, #8]	@ (8003658 <TIM17_IRQHandler+0x10>)
 800364e:	f00b f9e5 	bl	800ea1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8003652:	bf00      	nop
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	24000f10 	.word	0x24000f10

0800365c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800365c:	b480      	push	{r7}
 800365e:	af00      	add	r7, sp, #0
  return 1;
 8003660:	2301      	movs	r3, #1
}
 8003662:	4618      	mov	r0, r3
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <_kill>:

int _kill(int pid, int sig)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003676:	f014 fb73 	bl	8017d60 <__errno>
 800367a:	4603      	mov	r3, r0
 800367c:	2216      	movs	r2, #22
 800367e:	601a      	str	r2, [r3, #0]
  return -1;
 8003680:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003684:	4618      	mov	r0, r3
 8003686:	3708      	adds	r7, #8
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <_exit>:

void _exit (int status)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003694:	f04f 31ff 	mov.w	r1, #4294967295
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f7ff ffe7 	bl	800366c <_kill>
  while (1) {}    /* Make sure we hang here */
 800369e:	bf00      	nop
 80036a0:	e7fd      	b.n	800369e <_exit+0x12>

080036a2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b086      	sub	sp, #24
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	60f8      	str	r0, [r7, #12]
 80036aa:	60b9      	str	r1, [r7, #8]
 80036ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036ae:	2300      	movs	r3, #0
 80036b0:	617b      	str	r3, [r7, #20]
 80036b2:	e00a      	b.n	80036ca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80036b4:	f3af 8000 	nop.w
 80036b8:	4601      	mov	r1, r0
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	1c5a      	adds	r2, r3, #1
 80036be:	60ba      	str	r2, [r7, #8]
 80036c0:	b2ca      	uxtb	r2, r1
 80036c2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	3301      	adds	r3, #1
 80036c8:	617b      	str	r3, [r7, #20]
 80036ca:	697a      	ldr	r2, [r7, #20]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	dbf0      	blt.n	80036b4 <_read+0x12>
  }

  return len;
 80036d2:	687b      	ldr	r3, [r7, #4]
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3718      	adds	r7, #24
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b086      	sub	sp, #24
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036e8:	2300      	movs	r3, #0
 80036ea:	617b      	str	r3, [r7, #20]
 80036ec:	e009      	b.n	8003702 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	1c5a      	adds	r2, r3, #1
 80036f2:	60ba      	str	r2, [r7, #8]
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	3301      	adds	r3, #1
 8003700:	617b      	str	r3, [r7, #20]
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	429a      	cmp	r2, r3
 8003708:	dbf1      	blt.n	80036ee <_write+0x12>
  }
  return len;
 800370a:	687b      	ldr	r3, [r7, #4]
}
 800370c:	4618      	mov	r0, r3
 800370e:	3718      	adds	r7, #24
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <_close>:

int _close(int file)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800371c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003720:	4618      	mov	r0, r3
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800373c:	605a      	str	r2, [r3, #4]
  return 0;
 800373e:	2300      	movs	r3, #0
}
 8003740:	4618      	mov	r0, r3
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <_isatty>:

int _isatty(int file)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003754:	2301      	movs	r3, #1
}
 8003756:	4618      	mov	r0, r3
 8003758:	370c      	adds	r7, #12
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr

08003762 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003762:	b480      	push	{r7}
 8003764:	b085      	sub	sp, #20
 8003766:	af00      	add	r7, sp, #0
 8003768:	60f8      	str	r0, [r7, #12]
 800376a:	60b9      	str	r1, [r7, #8]
 800376c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800376e:	2300      	movs	r3, #0
}
 8003770:	4618      	mov	r0, r3
 8003772:	3714      	adds	r7, #20
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b086      	sub	sp, #24
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003784:	4a14      	ldr	r2, [pc, #80]	@ (80037d8 <_sbrk+0x5c>)
 8003786:	4b15      	ldr	r3, [pc, #84]	@ (80037dc <_sbrk+0x60>)
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003790:	4b13      	ldr	r3, [pc, #76]	@ (80037e0 <_sbrk+0x64>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d102      	bne.n	800379e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003798:	4b11      	ldr	r3, [pc, #68]	@ (80037e0 <_sbrk+0x64>)
 800379a:	4a12      	ldr	r2, [pc, #72]	@ (80037e4 <_sbrk+0x68>)
 800379c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800379e:	4b10      	ldr	r3, [pc, #64]	@ (80037e0 <_sbrk+0x64>)
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4413      	add	r3, r2
 80037a6:	693a      	ldr	r2, [r7, #16]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d207      	bcs.n	80037bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80037ac:	f014 fad8 	bl	8017d60 <__errno>
 80037b0:	4603      	mov	r3, r0
 80037b2:	220c      	movs	r2, #12
 80037b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80037b6:	f04f 33ff 	mov.w	r3, #4294967295
 80037ba:	e009      	b.n	80037d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80037bc:	4b08      	ldr	r3, [pc, #32]	@ (80037e0 <_sbrk+0x64>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80037c2:	4b07      	ldr	r3, [pc, #28]	@ (80037e0 <_sbrk+0x64>)
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4413      	add	r3, r2
 80037ca:	4a05      	ldr	r2, [pc, #20]	@ (80037e0 <_sbrk+0x64>)
 80037cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80037ce:	68fb      	ldr	r3, [r7, #12]
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3718      	adds	r7, #24
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	24100000 	.word	0x24100000
 80037dc:	00000400 	.word	0x00000400
 80037e0:	24000f5c 	.word	0x24000f5c
 80037e4:	24006880 	.word	0x24006880

080037e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80037e8:	b480      	push	{r7}
 80037ea:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80037ec:	4b32      	ldr	r3, [pc, #200]	@ (80038b8 <SystemInit+0xd0>)
 80037ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037f2:	4a31      	ldr	r2, [pc, #196]	@ (80038b8 <SystemInit+0xd0>)
 80037f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80037f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80037fc:	4b2f      	ldr	r3, [pc, #188]	@ (80038bc <SystemInit+0xd4>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 030f 	and.w	r3, r3, #15
 8003804:	2b02      	cmp	r3, #2
 8003806:	d807      	bhi.n	8003818 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003808:	4b2c      	ldr	r3, [pc, #176]	@ (80038bc <SystemInit+0xd4>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f023 030f 	bic.w	r3, r3, #15
 8003810:	4a2a      	ldr	r2, [pc, #168]	@ (80038bc <SystemInit+0xd4>)
 8003812:	f043 0303 	orr.w	r3, r3, #3
 8003816:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003818:	4b29      	ldr	r3, [pc, #164]	@ (80038c0 <SystemInit+0xd8>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a28      	ldr	r2, [pc, #160]	@ (80038c0 <SystemInit+0xd8>)
 800381e:	f043 0301 	orr.w	r3, r3, #1
 8003822:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003824:	4b26      	ldr	r3, [pc, #152]	@ (80038c0 <SystemInit+0xd8>)
 8003826:	2200      	movs	r2, #0
 8003828:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800382a:	4b25      	ldr	r3, [pc, #148]	@ (80038c0 <SystemInit+0xd8>)
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	4924      	ldr	r1, [pc, #144]	@ (80038c0 <SystemInit+0xd8>)
 8003830:	4b24      	ldr	r3, [pc, #144]	@ (80038c4 <SystemInit+0xdc>)
 8003832:	4013      	ands	r3, r2
 8003834:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003836:	4b21      	ldr	r3, [pc, #132]	@ (80038bc <SystemInit+0xd4>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 030c 	and.w	r3, r3, #12
 800383e:	2b00      	cmp	r3, #0
 8003840:	d007      	beq.n	8003852 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003842:	4b1e      	ldr	r3, [pc, #120]	@ (80038bc <SystemInit+0xd4>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f023 030f 	bic.w	r3, r3, #15
 800384a:	4a1c      	ldr	r2, [pc, #112]	@ (80038bc <SystemInit+0xd4>)
 800384c:	f043 0303 	orr.w	r3, r3, #3
 8003850:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8003852:	4b1b      	ldr	r3, [pc, #108]	@ (80038c0 <SystemInit+0xd8>)
 8003854:	2200      	movs	r2, #0
 8003856:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8003858:	4b19      	ldr	r3, [pc, #100]	@ (80038c0 <SystemInit+0xd8>)
 800385a:	2200      	movs	r2, #0
 800385c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800385e:	4b18      	ldr	r3, [pc, #96]	@ (80038c0 <SystemInit+0xd8>)
 8003860:	2200      	movs	r2, #0
 8003862:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003864:	4b16      	ldr	r3, [pc, #88]	@ (80038c0 <SystemInit+0xd8>)
 8003866:	4a18      	ldr	r2, [pc, #96]	@ (80038c8 <SystemInit+0xe0>)
 8003868:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800386a:	4b15      	ldr	r3, [pc, #84]	@ (80038c0 <SystemInit+0xd8>)
 800386c:	4a17      	ldr	r2, [pc, #92]	@ (80038cc <SystemInit+0xe4>)
 800386e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003870:	4b13      	ldr	r3, [pc, #76]	@ (80038c0 <SystemInit+0xd8>)
 8003872:	4a17      	ldr	r2, [pc, #92]	@ (80038d0 <SystemInit+0xe8>)
 8003874:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003876:	4b12      	ldr	r3, [pc, #72]	@ (80038c0 <SystemInit+0xd8>)
 8003878:	2200      	movs	r2, #0
 800387a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800387c:	4b10      	ldr	r3, [pc, #64]	@ (80038c0 <SystemInit+0xd8>)
 800387e:	4a14      	ldr	r2, [pc, #80]	@ (80038d0 <SystemInit+0xe8>)
 8003880:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003882:	4b0f      	ldr	r3, [pc, #60]	@ (80038c0 <SystemInit+0xd8>)
 8003884:	2200      	movs	r2, #0
 8003886:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003888:	4b0d      	ldr	r3, [pc, #52]	@ (80038c0 <SystemInit+0xd8>)
 800388a:	4a11      	ldr	r2, [pc, #68]	@ (80038d0 <SystemInit+0xe8>)
 800388c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800388e:	4b0c      	ldr	r3, [pc, #48]	@ (80038c0 <SystemInit+0xd8>)
 8003890:	2200      	movs	r2, #0
 8003892:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003894:	4b0a      	ldr	r3, [pc, #40]	@ (80038c0 <SystemInit+0xd8>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a09      	ldr	r2, [pc, #36]	@ (80038c0 <SystemInit+0xd8>)
 800389a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800389e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80038a0:	4b07      	ldr	r3, [pc, #28]	@ (80038c0 <SystemInit+0xd8>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80038a6:	4b0b      	ldr	r3, [pc, #44]	@ (80038d4 <SystemInit+0xec>)
 80038a8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80038ac:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80038ae:	bf00      	nop
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr
 80038b8:	e000ed00 	.word	0xe000ed00
 80038bc:	52002000 	.word	0x52002000
 80038c0:	58024400 	.word	0x58024400
 80038c4:	eaf6ed7f 	.word	0xeaf6ed7f
 80038c8:	02020200 	.word	0x02020200
 80038cc:	01ff0000 	.word	0x01ff0000
 80038d0:	01010280 	.word	0x01010280
 80038d4:	52004000 	.word	0x52004000

080038d8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim13;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b08a      	sub	sp, #40	@ 0x28
 80038dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038de:	f107 031c 	add.w	r3, r7, #28
 80038e2:	2200      	movs	r2, #0
 80038e4:	601a      	str	r2, [r3, #0]
 80038e6:	605a      	str	r2, [r3, #4]
 80038e8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80038ea:	463b      	mov	r3, r7
 80038ec:	2200      	movs	r2, #0
 80038ee:	601a      	str	r2, [r3, #0]
 80038f0:	605a      	str	r2, [r3, #4]
 80038f2:	609a      	str	r2, [r3, #8]
 80038f4:	60da      	str	r2, [r3, #12]
 80038f6:	611a      	str	r2, [r3, #16]
 80038f8:	615a      	str	r2, [r3, #20]
 80038fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80038fc:	4b33      	ldr	r3, [pc, #204]	@ (80039cc <MX_TIM2_Init+0xf4>)
 80038fe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003902:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 280-1;
 8003904:	4b31      	ldr	r3, [pc, #196]	@ (80039cc <MX_TIM2_Init+0xf4>)
 8003906:	f240 1217 	movw	r2, #279	@ 0x117
 800390a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800390c:	4b2f      	ldr	r3, [pc, #188]	@ (80039cc <MX_TIM2_Init+0xf4>)
 800390e:	2200      	movs	r2, #0
 8003910:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7000;
 8003912:	4b2e      	ldr	r3, [pc, #184]	@ (80039cc <MX_TIM2_Init+0xf4>)
 8003914:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8003918:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800391a:	4b2c      	ldr	r3, [pc, #176]	@ (80039cc <MX_TIM2_Init+0xf4>)
 800391c:	2200      	movs	r2, #0
 800391e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003920:	4b2a      	ldr	r3, [pc, #168]	@ (80039cc <MX_TIM2_Init+0xf4>)
 8003922:	2280      	movs	r2, #128	@ 0x80
 8003924:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003926:	4829      	ldr	r0, [pc, #164]	@ (80039cc <MX_TIM2_Init+0xf4>)
 8003928:	f00a ff12 	bl	800e750 <HAL_TIM_PWM_Init>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d001      	beq.n	8003936 <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 8003932:	f7ff fc3b 	bl	80031ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003936:	2300      	movs	r3, #0
 8003938:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800393a:	2300      	movs	r3, #0
 800393c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800393e:	f107 031c 	add.w	r3, r7, #28
 8003942:	4619      	mov	r1, r3
 8003944:	4821      	ldr	r0, [pc, #132]	@ (80039cc <MX_TIM2_Init+0xf4>)
 8003946:	f00b fe4f 	bl	800f5e8 <HAL_TIMEx_MasterConfigSynchronization>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d001      	beq.n	8003954 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8003950:	f7ff fc2c 	bl	80031ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003954:	2360      	movs	r3, #96	@ 0x60
 8003956:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003958:	2300      	movs	r3, #0
 800395a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800395c:	2300      	movs	r3, #0
 800395e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003960:	2300      	movs	r3, #0
 8003962:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003964:	463b      	mov	r3, r7
 8003966:	2200      	movs	r2, #0
 8003968:	4619      	mov	r1, r3
 800396a:	4818      	ldr	r0, [pc, #96]	@ (80039cc <MX_TIM2_Init+0xf4>)
 800396c:	f00b f95e 	bl	800ec2c <HAL_TIM_PWM_ConfigChannel>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d001      	beq.n	800397a <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8003976:	f7ff fc19 	bl	80031ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800397a:	463b      	mov	r3, r7
 800397c:	2204      	movs	r2, #4
 800397e:	4619      	mov	r1, r3
 8003980:	4812      	ldr	r0, [pc, #72]	@ (80039cc <MX_TIM2_Init+0xf4>)
 8003982:	f00b f953 	bl	800ec2c <HAL_TIM_PWM_ConfigChannel>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d001      	beq.n	8003990 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 800398c:	f7ff fc0e 	bl	80031ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003990:	463b      	mov	r3, r7
 8003992:	2208      	movs	r2, #8
 8003994:	4619      	mov	r1, r3
 8003996:	480d      	ldr	r0, [pc, #52]	@ (80039cc <MX_TIM2_Init+0xf4>)
 8003998:	f00b f948 	bl	800ec2c <HAL_TIM_PWM_ConfigChannel>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d001      	beq.n	80039a6 <MX_TIM2_Init+0xce>
  {
    Error_Handler();
 80039a2:	f7ff fc03 	bl	80031ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80039a6:	463b      	mov	r3, r7
 80039a8:	220c      	movs	r2, #12
 80039aa:	4619      	mov	r1, r3
 80039ac:	4807      	ldr	r0, [pc, #28]	@ (80039cc <MX_TIM2_Init+0xf4>)
 80039ae:	f00b f93d 	bl	800ec2c <HAL_TIM_PWM_ConfigChannel>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d001      	beq.n	80039bc <MX_TIM2_Init+0xe4>
  {
    Error_Handler();
 80039b8:	f7ff fbf8 	bl	80031ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80039bc:	4803      	ldr	r0, [pc, #12]	@ (80039cc <MX_TIM2_Init+0xf4>)
 80039be:	f000 f97d 	bl	8003cbc <HAL_TIM_MspPostInit>

}
 80039c2:	bf00      	nop
 80039c4:	3728      	adds	r7, #40	@ 0x28
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	24000f60 	.word	0x24000f60

080039d0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b08a      	sub	sp, #40	@ 0x28
 80039d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039d6:	f107 031c 	add.w	r3, r7, #28
 80039da:	2200      	movs	r2, #0
 80039dc:	601a      	str	r2, [r3, #0]
 80039de:	605a      	str	r2, [r3, #4]
 80039e0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80039e2:	463b      	mov	r3, r7
 80039e4:	2200      	movs	r2, #0
 80039e6:	601a      	str	r2, [r3, #0]
 80039e8:	605a      	str	r2, [r3, #4]
 80039ea:	609a      	str	r2, [r3, #8]
 80039ec:	60da      	str	r2, [r3, #12]
 80039ee:	611a      	str	r2, [r3, #16]
 80039f0:	615a      	str	r2, [r3, #20]
 80039f2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80039f4:	4b27      	ldr	r3, [pc, #156]	@ (8003a94 <MX_TIM3_Init+0xc4>)
 80039f6:	4a28      	ldr	r2, [pc, #160]	@ (8003a98 <MX_TIM3_Init+0xc8>)
 80039f8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 280-1;
 80039fa:	4b26      	ldr	r3, [pc, #152]	@ (8003a94 <MX_TIM3_Init+0xc4>)
 80039fc:	f240 1217 	movw	r2, #279	@ 0x117
 8003a00:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a02:	4b24      	ldr	r3, [pc, #144]	@ (8003a94 <MX_TIM3_Init+0xc4>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7000;
 8003a08:	4b22      	ldr	r3, [pc, #136]	@ (8003a94 <MX_TIM3_Init+0xc4>)
 8003a0a:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8003a0e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a10:	4b20      	ldr	r3, [pc, #128]	@ (8003a94 <MX_TIM3_Init+0xc4>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003a16:	4b1f      	ldr	r3, [pc, #124]	@ (8003a94 <MX_TIM3_Init+0xc4>)
 8003a18:	2280      	movs	r2, #128	@ 0x80
 8003a1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003a1c:	481d      	ldr	r0, [pc, #116]	@ (8003a94 <MX_TIM3_Init+0xc4>)
 8003a1e:	f00a fe97 	bl	800e750 <HAL_TIM_PWM_Init>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d001      	beq.n	8003a2c <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8003a28:	f7ff fbc0 	bl	80031ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a30:	2300      	movs	r3, #0
 8003a32:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003a34:	f107 031c 	add.w	r3, r7, #28
 8003a38:	4619      	mov	r1, r3
 8003a3a:	4816      	ldr	r0, [pc, #88]	@ (8003a94 <MX_TIM3_Init+0xc4>)
 8003a3c:	f00b fdd4 	bl	800f5e8 <HAL_TIMEx_MasterConfigSynchronization>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d001      	beq.n	8003a4a <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8003a46:	f7ff fbb1 	bl	80031ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a4a:	2360      	movs	r3, #96	@ 0x60
 8003a4c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a52:	2300      	movs	r3, #0
 8003a54:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a56:	2300      	movs	r3, #0
 8003a58:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003a5a:	463b      	mov	r3, r7
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	4619      	mov	r1, r3
 8003a60:	480c      	ldr	r0, [pc, #48]	@ (8003a94 <MX_TIM3_Init+0xc4>)
 8003a62:	f00b f8e3 	bl	800ec2c <HAL_TIM_PWM_ConfigChannel>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d001      	beq.n	8003a70 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8003a6c:	f7ff fb9e 	bl	80031ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003a70:	463b      	mov	r3, r7
 8003a72:	2204      	movs	r2, #4
 8003a74:	4619      	mov	r1, r3
 8003a76:	4807      	ldr	r0, [pc, #28]	@ (8003a94 <MX_TIM3_Init+0xc4>)
 8003a78:	f00b f8d8 	bl	800ec2c <HAL_TIM_PWM_ConfigChannel>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d001      	beq.n	8003a86 <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 8003a82:	f7ff fb93 	bl	80031ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003a86:	4803      	ldr	r0, [pc, #12]	@ (8003a94 <MX_TIM3_Init+0xc4>)
 8003a88:	f000 f918 	bl	8003cbc <HAL_TIM_MspPostInit>

}
 8003a8c:	bf00      	nop
 8003a8e:	3728      	adds	r7, #40	@ 0x28
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	24000fac 	.word	0x24000fac
 8003a98:	40000400 	.word	0x40000400

08003a9c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b08a      	sub	sp, #40	@ 0x28
 8003aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003aa2:	f107 031c 	add.w	r3, r7, #28
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	601a      	str	r2, [r3, #0]
 8003aaa:	605a      	str	r2, [r3, #4]
 8003aac:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003aae:	463b      	mov	r3, r7
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	601a      	str	r2, [r3, #0]
 8003ab4:	605a      	str	r2, [r3, #4]
 8003ab6:	609a      	str	r2, [r3, #8]
 8003ab8:	60da      	str	r2, [r3, #12]
 8003aba:	611a      	str	r2, [r3, #16]
 8003abc:	615a      	str	r2, [r3, #20]
 8003abe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003ac0:	4b32      	ldr	r3, [pc, #200]	@ (8003b8c <MX_TIM4_Init+0xf0>)
 8003ac2:	4a33      	ldr	r2, [pc, #204]	@ (8003b90 <MX_TIM4_Init+0xf4>)
 8003ac4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 280-1;
 8003ac6:	4b31      	ldr	r3, [pc, #196]	@ (8003b8c <MX_TIM4_Init+0xf0>)
 8003ac8:	f240 1217 	movw	r2, #279	@ 0x117
 8003acc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ace:	4b2f      	ldr	r3, [pc, #188]	@ (8003b8c <MX_TIM4_Init+0xf0>)
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 7000;
 8003ad4:	4b2d      	ldr	r3, [pc, #180]	@ (8003b8c <MX_TIM4_Init+0xf0>)
 8003ad6:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8003ada:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003adc:	4b2b      	ldr	r3, [pc, #172]	@ (8003b8c <MX_TIM4_Init+0xf0>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003ae2:	4b2a      	ldr	r3, [pc, #168]	@ (8003b8c <MX_TIM4_Init+0xf0>)
 8003ae4:	2280      	movs	r2, #128	@ 0x80
 8003ae6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003ae8:	4828      	ldr	r0, [pc, #160]	@ (8003b8c <MX_TIM4_Init+0xf0>)
 8003aea:	f00a fe31 	bl	800e750 <HAL_TIM_PWM_Init>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d001      	beq.n	8003af8 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 8003af4:	f7ff fb5a 	bl	80031ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003af8:	2300      	movs	r3, #0
 8003afa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003afc:	2300      	movs	r3, #0
 8003afe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003b00:	f107 031c 	add.w	r3, r7, #28
 8003b04:	4619      	mov	r1, r3
 8003b06:	4821      	ldr	r0, [pc, #132]	@ (8003b8c <MX_TIM4_Init+0xf0>)
 8003b08:	f00b fd6e 	bl	800f5e8 <HAL_TIMEx_MasterConfigSynchronization>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d001      	beq.n	8003b16 <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 8003b12:	f7ff fb4b 	bl	80031ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003b16:	2360      	movs	r3, #96	@ 0x60
 8003b18:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003b22:	2300      	movs	r3, #0
 8003b24:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003b26:	463b      	mov	r3, r7
 8003b28:	2200      	movs	r2, #0
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	4817      	ldr	r0, [pc, #92]	@ (8003b8c <MX_TIM4_Init+0xf0>)
 8003b2e:	f00b f87d 	bl	800ec2c <HAL_TIM_PWM_ConfigChannel>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d001      	beq.n	8003b3c <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8003b38:	f7ff fb38 	bl	80031ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003b3c:	463b      	mov	r3, r7
 8003b3e:	2204      	movs	r2, #4
 8003b40:	4619      	mov	r1, r3
 8003b42:	4812      	ldr	r0, [pc, #72]	@ (8003b8c <MX_TIM4_Init+0xf0>)
 8003b44:	f00b f872 	bl	800ec2c <HAL_TIM_PWM_ConfigChannel>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d001      	beq.n	8003b52 <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 8003b4e:	f7ff fb2d 	bl	80031ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003b52:	463b      	mov	r3, r7
 8003b54:	2208      	movs	r2, #8
 8003b56:	4619      	mov	r1, r3
 8003b58:	480c      	ldr	r0, [pc, #48]	@ (8003b8c <MX_TIM4_Init+0xf0>)
 8003b5a:	f00b f867 	bl	800ec2c <HAL_TIM_PWM_ConfigChannel>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d001      	beq.n	8003b68 <MX_TIM4_Init+0xcc>
  {
    Error_Handler();
 8003b64:	f7ff fb22 	bl	80031ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003b68:	463b      	mov	r3, r7
 8003b6a:	220c      	movs	r2, #12
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	4807      	ldr	r0, [pc, #28]	@ (8003b8c <MX_TIM4_Init+0xf0>)
 8003b70:	f00b f85c 	bl	800ec2c <HAL_TIM_PWM_ConfigChannel>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d001      	beq.n	8003b7e <MX_TIM4_Init+0xe2>
  {
    Error_Handler();
 8003b7a:	f7ff fb17 	bl	80031ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003b7e:	4803      	ldr	r0, [pc, #12]	@ (8003b8c <MX_TIM4_Init+0xf0>)
 8003b80:	f000 f89c 	bl	8003cbc <HAL_TIM_MspPostInit>

}
 8003b84:	bf00      	nop
 8003b86:	3728      	adds	r7, #40	@ 0x28
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	24000ff8 	.word	0x24000ff8
 8003b90:	40000800 	.word	0x40000800

08003b94 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8003b98:	4b0e      	ldr	r3, [pc, #56]	@ (8003bd4 <MX_TIM13_Init+0x40>)
 8003b9a:	4a0f      	ldr	r2, [pc, #60]	@ (8003bd8 <MX_TIM13_Init+0x44>)
 8003b9c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 280-1;
 8003b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8003bd4 <MX_TIM13_Init+0x40>)
 8003ba0:	f240 1217 	movw	r2, #279	@ 0x117
 8003ba4:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ba6:	4b0b      	ldr	r3, [pc, #44]	@ (8003bd4 <MX_TIM13_Init+0x40>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8003bac:	4b09      	ldr	r3, [pc, #36]	@ (8003bd4 <MX_TIM13_Init+0x40>)
 8003bae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003bb2:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bb4:	4b07      	ldr	r3, [pc, #28]	@ (8003bd4 <MX_TIM13_Init+0x40>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003bba:	4b06      	ldr	r3, [pc, #24]	@ (8003bd4 <MX_TIM13_Init+0x40>)
 8003bbc:	2280      	movs	r2, #128	@ 0x80
 8003bbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8003bc0:	4804      	ldr	r0, [pc, #16]	@ (8003bd4 <MX_TIM13_Init+0x40>)
 8003bc2:	f00a fcf6 	bl	800e5b2 <HAL_TIM_Base_Init>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d001      	beq.n	8003bd0 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8003bcc:	f7ff faee 	bl	80031ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8003bd0:	bf00      	nop
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	24001044 	.word	0x24001044
 8003bd8:	40001c00 	.word	0x40001c00

08003bdc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b087      	sub	sp, #28
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bec:	d10f      	bne.n	8003c0e <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003bee:	4b1f      	ldr	r3, [pc, #124]	@ (8003c6c <HAL_TIM_PWM_MspInit+0x90>)
 8003bf0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003bf4:	4a1d      	ldr	r2, [pc, #116]	@ (8003c6c <HAL_TIM_PWM_MspInit+0x90>)
 8003bf6:	f043 0301 	orr.w	r3, r3, #1
 8003bfa:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8003bfe:	4b1b      	ldr	r3, [pc, #108]	@ (8003c6c <HAL_TIM_PWM_MspInit+0x90>)
 8003c00:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003c04:	f003 0301 	and.w	r3, r3, #1
 8003c08:	617b      	str	r3, [r7, #20]
 8003c0a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003c0c:	e028      	b.n	8003c60 <HAL_TIM_PWM_MspInit+0x84>
  else if(tim_pwmHandle->Instance==TIM3)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a17      	ldr	r2, [pc, #92]	@ (8003c70 <HAL_TIM_PWM_MspInit+0x94>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d10f      	bne.n	8003c38 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003c18:	4b14      	ldr	r3, [pc, #80]	@ (8003c6c <HAL_TIM_PWM_MspInit+0x90>)
 8003c1a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003c1e:	4a13      	ldr	r2, [pc, #76]	@ (8003c6c <HAL_TIM_PWM_MspInit+0x90>)
 8003c20:	f043 0302 	orr.w	r3, r3, #2
 8003c24:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8003c28:	4b10      	ldr	r3, [pc, #64]	@ (8003c6c <HAL_TIM_PWM_MspInit+0x90>)
 8003c2a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	613b      	str	r3, [r7, #16]
 8003c34:	693b      	ldr	r3, [r7, #16]
}
 8003c36:	e013      	b.n	8003c60 <HAL_TIM_PWM_MspInit+0x84>
  else if(tim_pwmHandle->Instance==TIM4)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a0d      	ldr	r2, [pc, #52]	@ (8003c74 <HAL_TIM_PWM_MspInit+0x98>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d10e      	bne.n	8003c60 <HAL_TIM_PWM_MspInit+0x84>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003c42:	4b0a      	ldr	r3, [pc, #40]	@ (8003c6c <HAL_TIM_PWM_MspInit+0x90>)
 8003c44:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003c48:	4a08      	ldr	r2, [pc, #32]	@ (8003c6c <HAL_TIM_PWM_MspInit+0x90>)
 8003c4a:	f043 0304 	orr.w	r3, r3, #4
 8003c4e:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8003c52:	4b06      	ldr	r3, [pc, #24]	@ (8003c6c <HAL_TIM_PWM_MspInit+0x90>)
 8003c54:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003c58:	f003 0304 	and.w	r3, r3, #4
 8003c5c:	60fb      	str	r3, [r7, #12]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
}
 8003c60:	bf00      	nop
 8003c62:	371c      	adds	r7, #28
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr
 8003c6c:	58024400 	.word	0x58024400
 8003c70:	40000400 	.word	0x40000400
 8003c74:	40000800 	.word	0x40000800

08003c78 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b085      	sub	sp, #20
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM13)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a0b      	ldr	r2, [pc, #44]	@ (8003cb4 <HAL_TIM_Base_MspInit+0x3c>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d10e      	bne.n	8003ca8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* TIM13 clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003c8a:	4b0b      	ldr	r3, [pc, #44]	@ (8003cb8 <HAL_TIM_Base_MspInit+0x40>)
 8003c8c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003c90:	4a09      	ldr	r2, [pc, #36]	@ (8003cb8 <HAL_TIM_Base_MspInit+0x40>)
 8003c92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c96:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8003c9a:	4b07      	ldr	r3, [pc, #28]	@ (8003cb8 <HAL_TIM_Base_MspInit+0x40>)
 8003c9c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003ca0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ca4:	60fb      	str	r3, [r7, #12]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8003ca8:	bf00      	nop
 8003caa:	3714      	adds	r7, #20
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr
 8003cb4:	40001c00 	.word	0x40001c00
 8003cb8:	58024400 	.word	0x58024400

08003cbc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b08c      	sub	sp, #48	@ 0x30
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cc4:	f107 031c 	add.w	r3, r7, #28
 8003cc8:	2200      	movs	r2, #0
 8003cca:	601a      	str	r2, [r3, #0]
 8003ccc:	605a      	str	r2, [r3, #4]
 8003cce:	609a      	str	r2, [r3, #8]
 8003cd0:	60da      	str	r2, [r3, #12]
 8003cd2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cdc:	d13f      	bne.n	8003d5e <HAL_TIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cde:	4b47      	ldr	r3, [pc, #284]	@ (8003dfc <HAL_TIM_MspPostInit+0x140>)
 8003ce0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003ce4:	4a45      	ldr	r2, [pc, #276]	@ (8003dfc <HAL_TIM_MspPostInit+0x140>)
 8003ce6:	f043 0301 	orr.w	r3, r3, #1
 8003cea:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003cee:	4b43      	ldr	r3, [pc, #268]	@ (8003dfc <HAL_TIM_MspPostInit+0x140>)
 8003cf0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003cf4:	f003 0301 	and.w	r3, r3, #1
 8003cf8:	61bb      	str	r3, [r7, #24]
 8003cfa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cfc:	4b3f      	ldr	r3, [pc, #252]	@ (8003dfc <HAL_TIM_MspPostInit+0x140>)
 8003cfe:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003d02:	4a3e      	ldr	r2, [pc, #248]	@ (8003dfc <HAL_TIM_MspPostInit+0x140>)
 8003d04:	f043 0302 	orr.w	r3, r3, #2
 8003d08:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003d0c:	4b3b      	ldr	r3, [pc, #236]	@ (8003dfc <HAL_TIM_MspPostInit+0x140>)
 8003d0e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	617b      	str	r3, [r7, #20]
 8003d18:	697b      	ldr	r3, [r7, #20]
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 8003d1a:	f248 030c 	movw	r3, #32780	@ 0x800c
 8003d1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d20:	2302      	movs	r3, #2
 8003d22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d24:	2300      	movs	r3, #0
 8003d26:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d30:	f107 031c 	add.w	r3, r7, #28
 8003d34:	4619      	mov	r1, r3
 8003d36:	4832      	ldr	r0, [pc, #200]	@ (8003e00 <HAL_TIM_MspPostInit+0x144>)
 8003d38:	f006 f97c 	bl	800a034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003d3c:	2308      	movs	r3, #8
 8003d3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d40:	2302      	movs	r3, #2
 8003d42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d44:	2300      	movs	r3, #0
 8003d46:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d50:	f107 031c 	add.w	r3, r7, #28
 8003d54:	4619      	mov	r1, r3
 8003d56:	482b      	ldr	r0, [pc, #172]	@ (8003e04 <HAL_TIM_MspPostInit+0x148>)
 8003d58:	f006 f96c 	bl	800a034 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003d5c:	e049      	b.n	8003df2 <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM3)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a29      	ldr	r2, [pc, #164]	@ (8003e08 <HAL_TIM_MspPostInit+0x14c>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d11f      	bne.n	8003da8 <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d68:	4b24      	ldr	r3, [pc, #144]	@ (8003dfc <HAL_TIM_MspPostInit+0x140>)
 8003d6a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003d6e:	4a23      	ldr	r2, [pc, #140]	@ (8003dfc <HAL_TIM_MspPostInit+0x140>)
 8003d70:	f043 0302 	orr.w	r3, r3, #2
 8003d74:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003d78:	4b20      	ldr	r3, [pc, #128]	@ (8003dfc <HAL_TIM_MspPostInit+0x140>)
 8003d7a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003d7e:	f003 0302 	and.w	r3, r3, #2
 8003d82:	613b      	str	r3, [r7, #16]
 8003d84:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003d86:	2330      	movs	r3, #48	@ 0x30
 8003d88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d8a:	2302      	movs	r3, #2
 8003d8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d92:	2300      	movs	r3, #0
 8003d94:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003d96:	2302      	movs	r3, #2
 8003d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d9a:	f107 031c 	add.w	r3, r7, #28
 8003d9e:	4619      	mov	r1, r3
 8003da0:	4818      	ldr	r0, [pc, #96]	@ (8003e04 <HAL_TIM_MspPostInit+0x148>)
 8003da2:	f006 f947 	bl	800a034 <HAL_GPIO_Init>
}
 8003da6:	e024      	b.n	8003df2 <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM4)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a17      	ldr	r2, [pc, #92]	@ (8003e0c <HAL_TIM_MspPostInit+0x150>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d11f      	bne.n	8003df2 <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003db2:	4b12      	ldr	r3, [pc, #72]	@ (8003dfc <HAL_TIM_MspPostInit+0x140>)
 8003db4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003db8:	4a10      	ldr	r2, [pc, #64]	@ (8003dfc <HAL_TIM_MspPostInit+0x140>)
 8003dba:	f043 0302 	orr.w	r3, r3, #2
 8003dbe:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8003dfc <HAL_TIM_MspPostInit+0x140>)
 8003dc4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003dc8:	f003 0302 	and.w	r3, r3, #2
 8003dcc:	60fb      	str	r3, [r7, #12]
 8003dce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003dd0:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8003dd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dd6:	2302      	movs	r3, #2
 8003dd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dde:	2300      	movs	r3, #0
 8003de0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003de2:	2302      	movs	r3, #2
 8003de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003de6:	f107 031c 	add.w	r3, r7, #28
 8003dea:	4619      	mov	r1, r3
 8003dec:	4805      	ldr	r0, [pc, #20]	@ (8003e04 <HAL_TIM_MspPostInit+0x148>)
 8003dee:	f006 f921 	bl	800a034 <HAL_GPIO_Init>
}
 8003df2:	bf00      	nop
 8003df4:	3730      	adds	r7, #48	@ 0x30
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	58024400 	.word	0x58024400
 8003e00:	58020000 	.word	0x58020000
 8003e04:	58020400 	.word	0x58020400
 8003e08:	40000400 	.word	0x40000400
 8003e0c:	40000800 	.word	0x40000800

08003e10 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart1_rx;
DMA_HandleTypeDef hdma_usart3_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003e14:	4b22      	ldr	r3, [pc, #136]	@ (8003ea0 <MX_UART4_Init+0x90>)
 8003e16:	4a23      	ldr	r2, [pc, #140]	@ (8003ea4 <MX_UART4_Init+0x94>)
 8003e18:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8003e1a:	4b21      	ldr	r3, [pc, #132]	@ (8003ea0 <MX_UART4_Init+0x90>)
 8003e1c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003e20:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003e22:	4b1f      	ldr	r3, [pc, #124]	@ (8003ea0 <MX_UART4_Init+0x90>)
 8003e24:	2200      	movs	r2, #0
 8003e26:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003e28:	4b1d      	ldr	r3, [pc, #116]	@ (8003ea0 <MX_UART4_Init+0x90>)
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003e2e:	4b1c      	ldr	r3, [pc, #112]	@ (8003ea0 <MX_UART4_Init+0x90>)
 8003e30:	2200      	movs	r2, #0
 8003e32:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003e34:	4b1a      	ldr	r3, [pc, #104]	@ (8003ea0 <MX_UART4_Init+0x90>)
 8003e36:	220c      	movs	r2, #12
 8003e38:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e3a:	4b19      	ldr	r3, [pc, #100]	@ (8003ea0 <MX_UART4_Init+0x90>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e40:	4b17      	ldr	r3, [pc, #92]	@ (8003ea0 <MX_UART4_Init+0x90>)
 8003e42:	2200      	movs	r2, #0
 8003e44:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003e46:	4b16      	ldr	r3, [pc, #88]	@ (8003ea0 <MX_UART4_Init+0x90>)
 8003e48:	2200      	movs	r2, #0
 8003e4a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003e4c:	4b14      	ldr	r3, [pc, #80]	@ (8003ea0 <MX_UART4_Init+0x90>)
 8003e4e:	2200      	movs	r2, #0
 8003e50:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003e52:	4b13      	ldr	r3, [pc, #76]	@ (8003ea0 <MX_UART4_Init+0x90>)
 8003e54:	2200      	movs	r2, #0
 8003e56:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003e58:	4811      	ldr	r0, [pc, #68]	@ (8003ea0 <MX_UART4_Init+0x90>)
 8003e5a:	f00b fc71 	bl	800f740 <HAL_UART_Init>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d001      	beq.n	8003e68 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8003e64:	f7ff f9a2 	bl	80031ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003e68:	2100      	movs	r1, #0
 8003e6a:	480d      	ldr	r0, [pc, #52]	@ (8003ea0 <MX_UART4_Init+0x90>)
 8003e6c:	f00e ff97 	bl	8012d9e <HAL_UARTEx_SetTxFifoThreshold>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d001      	beq.n	8003e7a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8003e76:	f7ff f999 	bl	80031ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003e7a:	2100      	movs	r1, #0
 8003e7c:	4808      	ldr	r0, [pc, #32]	@ (8003ea0 <MX_UART4_Init+0x90>)
 8003e7e:	f00e ffcc 	bl	8012e1a <HAL_UARTEx_SetRxFifoThreshold>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d001      	beq.n	8003e8c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8003e88:	f7ff f990 	bl	80031ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8003e8c:	4804      	ldr	r0, [pc, #16]	@ (8003ea0 <MX_UART4_Init+0x90>)
 8003e8e:	f00e ff4d 	bl	8012d2c <HAL_UARTEx_DisableFifoMode>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d001      	beq.n	8003e9c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8003e98:	f7ff f988 	bl	80031ac <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003e9c:	bf00      	nop
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	24001090 	.word	0x24001090
 8003ea4:	40004c00 	.word	0x40004c00

08003ea8 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003eac:	4b23      	ldr	r3, [pc, #140]	@ (8003f3c <MX_USART1_UART_Init+0x94>)
 8003eae:	4a24      	ldr	r2, [pc, #144]	@ (8003f40 <MX_USART1_UART_Init+0x98>)
 8003eb0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 8003eb2:	4b22      	ldr	r3, [pc, #136]	@ (8003f3c <MX_USART1_UART_Init+0x94>)
 8003eb4:	4a23      	ldr	r2, [pc, #140]	@ (8003f44 <MX_USART1_UART_Init+0x9c>)
 8003eb6:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8003eb8:	4b20      	ldr	r3, [pc, #128]	@ (8003f3c <MX_USART1_UART_Init+0x94>)
 8003eba:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003ebe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003ec0:	4b1e      	ldr	r3, [pc, #120]	@ (8003f3c <MX_USART1_UART_Init+0x94>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8003ec6:	4b1d      	ldr	r3, [pc, #116]	@ (8003f3c <MX_USART1_UART_Init+0x94>)
 8003ec8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003ecc:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003ece:	4b1b      	ldr	r3, [pc, #108]	@ (8003f3c <MX_USART1_UART_Init+0x94>)
 8003ed0:	220c      	movs	r2, #12
 8003ed2:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ed4:	4b19      	ldr	r3, [pc, #100]	@ (8003f3c <MX_USART1_UART_Init+0x94>)
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003eda:	4b18      	ldr	r3, [pc, #96]	@ (8003f3c <MX_USART1_UART_Init+0x94>)
 8003edc:	2200      	movs	r2, #0
 8003ede:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003ee0:	4b16      	ldr	r3, [pc, #88]	@ (8003f3c <MX_USART1_UART_Init+0x94>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003ee6:	4b15      	ldr	r3, [pc, #84]	@ (8003f3c <MX_USART1_UART_Init+0x94>)
 8003ee8:	2200      	movs	r2, #0
 8003eea:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003eec:	4b13      	ldr	r3, [pc, #76]	@ (8003f3c <MX_USART1_UART_Init+0x94>)
 8003eee:	2200      	movs	r2, #0
 8003ef0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003ef2:	4812      	ldr	r0, [pc, #72]	@ (8003f3c <MX_USART1_UART_Init+0x94>)
 8003ef4:	f00b fc24 	bl	800f740 <HAL_UART_Init>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d001      	beq.n	8003f02 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8003efe:	f7ff f955 	bl	80031ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003f02:	2100      	movs	r1, #0
 8003f04:	480d      	ldr	r0, [pc, #52]	@ (8003f3c <MX_USART1_UART_Init+0x94>)
 8003f06:	f00e ff4a 	bl	8012d9e <HAL_UARTEx_SetTxFifoThreshold>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d001      	beq.n	8003f14 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8003f10:	f7ff f94c 	bl	80031ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003f14:	2100      	movs	r1, #0
 8003f16:	4809      	ldr	r0, [pc, #36]	@ (8003f3c <MX_USART1_UART_Init+0x94>)
 8003f18:	f00e ff7f 	bl	8012e1a <HAL_UARTEx_SetRxFifoThreshold>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d001      	beq.n	8003f26 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8003f22:	f7ff f943 	bl	80031ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003f26:	4805      	ldr	r0, [pc, #20]	@ (8003f3c <MX_USART1_UART_Init+0x94>)
 8003f28:	f00e ff00 	bl	8012d2c <HAL_UARTEx_DisableFifoMode>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d001      	beq.n	8003f36 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8003f32:	f7ff f93b 	bl	80031ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003f36:	bf00      	nop
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	24001124 	.word	0x24001124
 8003f40:	40011000 	.word	0x40011000
 8003f44:	000186a0 	.word	0x000186a0

08003f48 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003f4c:	4b22      	ldr	r3, [pc, #136]	@ (8003fd8 <MX_USART3_UART_Init+0x90>)
 8003f4e:	4a23      	ldr	r2, [pc, #140]	@ (8003fdc <MX_USART3_UART_Init+0x94>)
 8003f50:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003f52:	4b21      	ldr	r3, [pc, #132]	@ (8003fd8 <MX_USART3_UART_Init+0x90>)
 8003f54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003f58:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003f5a:	4b1f      	ldr	r3, [pc, #124]	@ (8003fd8 <MX_USART3_UART_Init+0x90>)
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003f60:	4b1d      	ldr	r3, [pc, #116]	@ (8003fd8 <MX_USART3_UART_Init+0x90>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003f66:	4b1c      	ldr	r3, [pc, #112]	@ (8003fd8 <MX_USART3_UART_Init+0x90>)
 8003f68:	2200      	movs	r2, #0
 8003f6a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003f6c:	4b1a      	ldr	r3, [pc, #104]	@ (8003fd8 <MX_USART3_UART_Init+0x90>)
 8003f6e:	220c      	movs	r2, #12
 8003f70:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f72:	4b19      	ldr	r3, [pc, #100]	@ (8003fd8 <MX_USART3_UART_Init+0x90>)
 8003f74:	2200      	movs	r2, #0
 8003f76:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f78:	4b17      	ldr	r3, [pc, #92]	@ (8003fd8 <MX_USART3_UART_Init+0x90>)
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003f7e:	4b16      	ldr	r3, [pc, #88]	@ (8003fd8 <MX_USART3_UART_Init+0x90>)
 8003f80:	2200      	movs	r2, #0
 8003f82:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003f84:	4b14      	ldr	r3, [pc, #80]	@ (8003fd8 <MX_USART3_UART_Init+0x90>)
 8003f86:	2200      	movs	r2, #0
 8003f88:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003f8a:	4b13      	ldr	r3, [pc, #76]	@ (8003fd8 <MX_USART3_UART_Init+0x90>)
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003f90:	4811      	ldr	r0, [pc, #68]	@ (8003fd8 <MX_USART3_UART_Init+0x90>)
 8003f92:	f00b fbd5 	bl	800f740 <HAL_UART_Init>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d001      	beq.n	8003fa0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8003f9c:	f7ff f906 	bl	80031ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003fa0:	2100      	movs	r1, #0
 8003fa2:	480d      	ldr	r0, [pc, #52]	@ (8003fd8 <MX_USART3_UART_Init+0x90>)
 8003fa4:	f00e fefb 	bl	8012d9e <HAL_UARTEx_SetTxFifoThreshold>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d001      	beq.n	8003fb2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8003fae:	f7ff f8fd 	bl	80031ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003fb2:	2100      	movs	r1, #0
 8003fb4:	4808      	ldr	r0, [pc, #32]	@ (8003fd8 <MX_USART3_UART_Init+0x90>)
 8003fb6:	f00e ff30 	bl	8012e1a <HAL_UARTEx_SetRxFifoThreshold>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d001      	beq.n	8003fc4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8003fc0:	f7ff f8f4 	bl	80031ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8003fc4:	4804      	ldr	r0, [pc, #16]	@ (8003fd8 <MX_USART3_UART_Init+0x90>)
 8003fc6:	f00e feb1 	bl	8012d2c <HAL_UARTEx_DisableFifoMode>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d001      	beq.n	8003fd4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8003fd0:	f7ff f8ec 	bl	80031ac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003fd4:	bf00      	nop
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	240011b8 	.word	0x240011b8
 8003fdc:	40004800 	.word	0x40004800

08003fe0 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003fe4:	4b22      	ldr	r3, [pc, #136]	@ (8004070 <MX_USART6_UART_Init+0x90>)
 8003fe6:	4a23      	ldr	r2, [pc, #140]	@ (8004074 <MX_USART6_UART_Init+0x94>)
 8003fe8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8003fea:	4b21      	ldr	r3, [pc, #132]	@ (8004070 <MX_USART6_UART_Init+0x90>)
 8003fec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003ff0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003ff2:	4b1f      	ldr	r3, [pc, #124]	@ (8004070 <MX_USART6_UART_Init+0x90>)
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003ff8:	4b1d      	ldr	r3, [pc, #116]	@ (8004070 <MX_USART6_UART_Init+0x90>)
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003ffe:	4b1c      	ldr	r3, [pc, #112]	@ (8004070 <MX_USART6_UART_Init+0x90>)
 8004000:	2200      	movs	r2, #0
 8004002:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004004:	4b1a      	ldr	r3, [pc, #104]	@ (8004070 <MX_USART6_UART_Init+0x90>)
 8004006:	220c      	movs	r2, #12
 8004008:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800400a:	4b19      	ldr	r3, [pc, #100]	@ (8004070 <MX_USART6_UART_Init+0x90>)
 800400c:	2200      	movs	r2, #0
 800400e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004010:	4b17      	ldr	r3, [pc, #92]	@ (8004070 <MX_USART6_UART_Init+0x90>)
 8004012:	2200      	movs	r2, #0
 8004014:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004016:	4b16      	ldr	r3, [pc, #88]	@ (8004070 <MX_USART6_UART_Init+0x90>)
 8004018:	2200      	movs	r2, #0
 800401a:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800401c:	4b14      	ldr	r3, [pc, #80]	@ (8004070 <MX_USART6_UART_Init+0x90>)
 800401e:	2200      	movs	r2, #0
 8004020:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004022:	4b13      	ldr	r3, [pc, #76]	@ (8004070 <MX_USART6_UART_Init+0x90>)
 8004024:	2200      	movs	r2, #0
 8004026:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004028:	4811      	ldr	r0, [pc, #68]	@ (8004070 <MX_USART6_UART_Init+0x90>)
 800402a:	f00b fb89 	bl	800f740 <HAL_UART_Init>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d001      	beq.n	8004038 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8004034:	f7ff f8ba 	bl	80031ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004038:	2100      	movs	r1, #0
 800403a:	480d      	ldr	r0, [pc, #52]	@ (8004070 <MX_USART6_UART_Init+0x90>)
 800403c:	f00e feaf 	bl	8012d9e <HAL_UARTEx_SetTxFifoThreshold>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d001      	beq.n	800404a <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8004046:	f7ff f8b1 	bl	80031ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800404a:	2100      	movs	r1, #0
 800404c:	4808      	ldr	r0, [pc, #32]	@ (8004070 <MX_USART6_UART_Init+0x90>)
 800404e:	f00e fee4 	bl	8012e1a <HAL_UARTEx_SetRxFifoThreshold>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d001      	beq.n	800405c <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8004058:	f7ff f8a8 	bl	80031ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 800405c:	4804      	ldr	r0, [pc, #16]	@ (8004070 <MX_USART6_UART_Init+0x90>)
 800405e:	f00e fe65 	bl	8012d2c <HAL_UARTEx_DisableFifoMode>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d001      	beq.n	800406c <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8004068:	f7ff f8a0 	bl	80031ac <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800406c:	bf00      	nop
 800406e:	bd80      	pop	{r7, pc}
 8004070:	2400124c 	.word	0x2400124c
 8004074:	40011400 	.word	0x40011400

08004078 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b0c0      	sub	sp, #256	@ 0x100
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004080:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8004084:	2200      	movs	r2, #0
 8004086:	601a      	str	r2, [r3, #0]
 8004088:	605a      	str	r2, [r3, #4]
 800408a:	609a      	str	r2, [r3, #8]
 800408c:	60da      	str	r2, [r3, #12]
 800408e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004090:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004094:	22c0      	movs	r2, #192	@ 0xc0
 8004096:	2100      	movs	r1, #0
 8004098:	4618      	mov	r0, r3
 800409a:	f013 fdf4 	bl	8017c86 <memset>
  if(uartHandle->Instance==UART4)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a82      	ldr	r2, [pc, #520]	@ (80042ac <HAL_UART_MspInit+0x234>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d17c      	bne.n	80041a2 <HAL_UART_MspInit+0x12a>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80040a8:	f04f 0202 	mov.w	r2, #2
 80040ac:	f04f 0300 	mov.w	r3, #0
 80040b0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80040b4:	2300      	movs	r3, #0
 80040b6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80040ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80040be:	4618      	mov	r0, r3
 80040c0:	f007 faf0 	bl	800b6a4 <HAL_RCCEx_PeriphCLKConfig>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d001      	beq.n	80040ce <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80040ca:	f7ff f86f 	bl	80031ac <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80040ce:	4b78      	ldr	r3, [pc, #480]	@ (80042b0 <HAL_UART_MspInit+0x238>)
 80040d0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80040d4:	4a76      	ldr	r2, [pc, #472]	@ (80042b0 <HAL_UART_MspInit+0x238>)
 80040d6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80040da:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80040de:	4b74      	ldr	r3, [pc, #464]	@ (80042b0 <HAL_UART_MspInit+0x238>)
 80040e0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80040e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80040e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80040ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040ec:	4b70      	ldr	r3, [pc, #448]	@ (80042b0 <HAL_UART_MspInit+0x238>)
 80040ee:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80040f2:	4a6f      	ldr	r2, [pc, #444]	@ (80042b0 <HAL_UART_MspInit+0x238>)
 80040f4:	f043 0301 	orr.w	r3, r3, #1
 80040f8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80040fc:	4b6c      	ldr	r3, [pc, #432]	@ (80042b0 <HAL_UART_MspInit+0x238>)
 80040fe:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004102:	f003 0301 	and.w	r3, r3, #1
 8004106:	623b      	str	r3, [r7, #32]
 8004108:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800410a:	2303      	movs	r3, #3
 800410c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004110:	2302      	movs	r3, #2
 8004112:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004116:	2300      	movs	r3, #0
 8004118:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800411c:	2300      	movs	r3, #0
 800411e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004122:	2308      	movs	r3, #8
 8004124:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004128:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800412c:	4619      	mov	r1, r3
 800412e:	4861      	ldr	r0, [pc, #388]	@ (80042b4 <HAL_UART_MspInit+0x23c>)
 8004130:	f005 ff80 	bl	800a034 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8004134:	4b60      	ldr	r3, [pc, #384]	@ (80042b8 <HAL_UART_MspInit+0x240>)
 8004136:	4a61      	ldr	r2, [pc, #388]	@ (80042bc <HAL_UART_MspInit+0x244>)
 8004138:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 800413a:	4b5f      	ldr	r3, [pc, #380]	@ (80042b8 <HAL_UART_MspInit+0x240>)
 800413c:	223f      	movs	r2, #63	@ 0x3f
 800413e:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004140:	4b5d      	ldr	r3, [pc, #372]	@ (80042b8 <HAL_UART_MspInit+0x240>)
 8004142:	2200      	movs	r2, #0
 8004144:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004146:	4b5c      	ldr	r3, [pc, #368]	@ (80042b8 <HAL_UART_MspInit+0x240>)
 8004148:	2200      	movs	r2, #0
 800414a:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800414c:	4b5a      	ldr	r3, [pc, #360]	@ (80042b8 <HAL_UART_MspInit+0x240>)
 800414e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004152:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004154:	4b58      	ldr	r3, [pc, #352]	@ (80042b8 <HAL_UART_MspInit+0x240>)
 8004156:	2200      	movs	r2, #0
 8004158:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800415a:	4b57      	ldr	r3, [pc, #348]	@ (80042b8 <HAL_UART_MspInit+0x240>)
 800415c:	2200      	movs	r2, #0
 800415e:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8004160:	4b55      	ldr	r3, [pc, #340]	@ (80042b8 <HAL_UART_MspInit+0x240>)
 8004162:	2200      	movs	r2, #0
 8004164:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004166:	4b54      	ldr	r3, [pc, #336]	@ (80042b8 <HAL_UART_MspInit+0x240>)
 8004168:	2200      	movs	r2, #0
 800416a:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800416c:	4b52      	ldr	r3, [pc, #328]	@ (80042b8 <HAL_UART_MspInit+0x240>)
 800416e:	2200      	movs	r2, #0
 8004170:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8004172:	4851      	ldr	r0, [pc, #324]	@ (80042b8 <HAL_UART_MspInit+0x240>)
 8004174:	f002 fd10 	bl	8006b98 <HAL_DMA_Init>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d001      	beq.n	8004182 <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 800417e:	f7ff f815 	bl	80031ac <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a4c      	ldr	r2, [pc, #304]	@ (80042b8 <HAL_UART_MspInit+0x240>)
 8004186:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800418a:	4a4b      	ldr	r2, [pc, #300]	@ (80042b8 <HAL_UART_MspInit+0x240>)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8004190:	2200      	movs	r2, #0
 8004192:	2105      	movs	r1, #5
 8004194:	2034      	movs	r0, #52	@ 0x34
 8004196:	f002 fc5f 	bl	8006a58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800419a:	2034      	movs	r0, #52	@ 0x34
 800419c:	f002 fc76 	bl	8006a8c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80041a0:	e16a      	b.n	8004478 <HAL_UART_MspInit+0x400>
  else if(uartHandle->Instance==USART1)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a46      	ldr	r2, [pc, #280]	@ (80042c0 <HAL_UART_MspInit+0x248>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	f040 808f 	bne.w	80042cc <HAL_UART_MspInit+0x254>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80041ae:	f04f 0201 	mov.w	r2, #1
 80041b2:	f04f 0300 	mov.w	r3, #0
 80041b6:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80041ba:	2300      	movs	r3, #0
 80041bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80041c0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80041c4:	4618      	mov	r0, r3
 80041c6:	f007 fa6d 	bl	800b6a4 <HAL_RCCEx_PeriphCLKConfig>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d001      	beq.n	80041d4 <HAL_UART_MspInit+0x15c>
      Error_Handler();
 80041d0:	f7fe ffec 	bl	80031ac <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80041d4:	4b36      	ldr	r3, [pc, #216]	@ (80042b0 <HAL_UART_MspInit+0x238>)
 80041d6:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80041da:	4a35      	ldr	r2, [pc, #212]	@ (80042b0 <HAL_UART_MspInit+0x238>)
 80041dc:	f043 0310 	orr.w	r3, r3, #16
 80041e0:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 80041e4:	4b32      	ldr	r3, [pc, #200]	@ (80042b0 <HAL_UART_MspInit+0x238>)
 80041e6:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80041ea:	f003 0310 	and.w	r3, r3, #16
 80041ee:	61fb      	str	r3, [r7, #28]
 80041f0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041f2:	4b2f      	ldr	r3, [pc, #188]	@ (80042b0 <HAL_UART_MspInit+0x238>)
 80041f4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80041f8:	4a2d      	ldr	r2, [pc, #180]	@ (80042b0 <HAL_UART_MspInit+0x238>)
 80041fa:	f043 0301 	orr.w	r3, r3, #1
 80041fe:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8004202:	4b2b      	ldr	r3, [pc, #172]	@ (80042b0 <HAL_UART_MspInit+0x238>)
 8004204:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004208:	f003 0301 	and.w	r3, r3, #1
 800420c:	61bb      	str	r3, [r7, #24]
 800420e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|SBUS_RX_Pin;
 8004210:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8004214:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004218:	2302      	movs	r3, #2
 800421a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800421e:	2300      	movs	r3, #0
 8004220:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004224:	2300      	movs	r3, #0
 8004226:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800422a:	2307      	movs	r3, #7
 800422c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004230:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8004234:	4619      	mov	r1, r3
 8004236:	481f      	ldr	r0, [pc, #124]	@ (80042b4 <HAL_UART_MspInit+0x23c>)
 8004238:	f005 fefc 	bl	800a034 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream0;
 800423c:	4b21      	ldr	r3, [pc, #132]	@ (80042c4 <HAL_UART_MspInit+0x24c>)
 800423e:	4a22      	ldr	r2, [pc, #136]	@ (80042c8 <HAL_UART_MspInit+0x250>)
 8004240:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8004242:	4b20      	ldr	r3, [pc, #128]	@ (80042c4 <HAL_UART_MspInit+0x24c>)
 8004244:	2229      	movs	r2, #41	@ 0x29
 8004246:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004248:	4b1e      	ldr	r3, [pc, #120]	@ (80042c4 <HAL_UART_MspInit+0x24c>)
 800424a:	2200      	movs	r2, #0
 800424c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800424e:	4b1d      	ldr	r3, [pc, #116]	@ (80042c4 <HAL_UART_MspInit+0x24c>)
 8004250:	2200      	movs	r2, #0
 8004252:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004254:	4b1b      	ldr	r3, [pc, #108]	@ (80042c4 <HAL_UART_MspInit+0x24c>)
 8004256:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800425a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800425c:	4b19      	ldr	r3, [pc, #100]	@ (80042c4 <HAL_UART_MspInit+0x24c>)
 800425e:	2200      	movs	r2, #0
 8004260:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004262:	4b18      	ldr	r3, [pc, #96]	@ (80042c4 <HAL_UART_MspInit+0x24c>)
 8004264:	2200      	movs	r2, #0
 8004266:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8004268:	4b16      	ldr	r3, [pc, #88]	@ (80042c4 <HAL_UART_MspInit+0x24c>)
 800426a:	2200      	movs	r2, #0
 800426c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800426e:	4b15      	ldr	r3, [pc, #84]	@ (80042c4 <HAL_UART_MspInit+0x24c>)
 8004270:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004274:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004276:	4b13      	ldr	r3, [pc, #76]	@ (80042c4 <HAL_UART_MspInit+0x24c>)
 8004278:	2200      	movs	r2, #0
 800427a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800427c:	4811      	ldr	r0, [pc, #68]	@ (80042c4 <HAL_UART_MspInit+0x24c>)
 800427e:	f002 fc8b 	bl	8006b98 <HAL_DMA_Init>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d001      	beq.n	800428c <HAL_UART_MspInit+0x214>
      Error_Handler();
 8004288:	f7fe ff90 	bl	80031ac <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4a0d      	ldr	r2, [pc, #52]	@ (80042c4 <HAL_UART_MspInit+0x24c>)
 8004290:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8004294:	4a0b      	ldr	r2, [pc, #44]	@ (80042c4 <HAL_UART_MspInit+0x24c>)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800429a:	2200      	movs	r2, #0
 800429c:	2105      	movs	r1, #5
 800429e:	2025      	movs	r0, #37	@ 0x25
 80042a0:	f002 fbda 	bl	8006a58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80042a4:	2025      	movs	r0, #37	@ 0x25
 80042a6:	f002 fbf1 	bl	8006a8c <HAL_NVIC_EnableIRQ>
}
 80042aa:	e0e5      	b.n	8004478 <HAL_UART_MspInit+0x400>
 80042ac:	40004c00 	.word	0x40004c00
 80042b0:	58024400 	.word	0x58024400
 80042b4:	58020000 	.word	0x58020000
 80042b8:	240012e0 	.word	0x240012e0
 80042bc:	40020040 	.word	0x40020040
 80042c0:	40011000 	.word	0x40011000
 80042c4:	24001358 	.word	0x24001358
 80042c8:	40020010 	.word	0x40020010
  else if(uartHandle->Instance==USART3)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a6c      	ldr	r2, [pc, #432]	@ (8004484 <HAL_UART_MspInit+0x40c>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d17d      	bne.n	80043d2 <HAL_UART_MspInit+0x35a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80042d6:	f04f 0202 	mov.w	r2, #2
 80042da:	f04f 0300 	mov.w	r3, #0
 80042de:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80042e2:	2300      	movs	r3, #0
 80042e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80042e8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80042ec:	4618      	mov	r0, r3
 80042ee:	f007 f9d9 	bl	800b6a4 <HAL_RCCEx_PeriphCLKConfig>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d001      	beq.n	80042fc <HAL_UART_MspInit+0x284>
      Error_Handler();
 80042f8:	f7fe ff58 	bl	80031ac <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80042fc:	4b62      	ldr	r3, [pc, #392]	@ (8004488 <HAL_UART_MspInit+0x410>)
 80042fe:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004302:	4a61      	ldr	r2, [pc, #388]	@ (8004488 <HAL_UART_MspInit+0x410>)
 8004304:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004308:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800430c:	4b5e      	ldr	r3, [pc, #376]	@ (8004488 <HAL_UART_MspInit+0x410>)
 800430e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004312:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004316:	617b      	str	r3, [r7, #20]
 8004318:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800431a:	4b5b      	ldr	r3, [pc, #364]	@ (8004488 <HAL_UART_MspInit+0x410>)
 800431c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004320:	4a59      	ldr	r2, [pc, #356]	@ (8004488 <HAL_UART_MspInit+0x410>)
 8004322:	f043 0304 	orr.w	r3, r3, #4
 8004326:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800432a:	4b57      	ldr	r3, [pc, #348]	@ (8004488 <HAL_UART_MspInit+0x410>)
 800432c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004330:	f003 0304 	and.w	r3, r3, #4
 8004334:	613b      	str	r3, [r7, #16]
 8004336:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004338:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800433c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004340:	2302      	movs	r3, #2
 8004342:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004346:	2300      	movs	r3, #0
 8004348:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800434c:	2300      	movs	r3, #0
 800434e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004352:	2307      	movs	r3, #7
 8004354:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004358:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800435c:	4619      	mov	r1, r3
 800435e:	484b      	ldr	r0, [pc, #300]	@ (800448c <HAL_UART_MspInit+0x414>)
 8004360:	f005 fe68 	bl	800a034 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8004364:	4b4a      	ldr	r3, [pc, #296]	@ (8004490 <HAL_UART_MspInit+0x418>)
 8004366:	4a4b      	ldr	r2, [pc, #300]	@ (8004494 <HAL_UART_MspInit+0x41c>)
 8004368:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800436a:	4b49      	ldr	r3, [pc, #292]	@ (8004490 <HAL_UART_MspInit+0x418>)
 800436c:	222d      	movs	r2, #45	@ 0x2d
 800436e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004370:	4b47      	ldr	r3, [pc, #284]	@ (8004490 <HAL_UART_MspInit+0x418>)
 8004372:	2200      	movs	r2, #0
 8004374:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004376:	4b46      	ldr	r3, [pc, #280]	@ (8004490 <HAL_UART_MspInit+0x418>)
 8004378:	2200      	movs	r2, #0
 800437a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800437c:	4b44      	ldr	r3, [pc, #272]	@ (8004490 <HAL_UART_MspInit+0x418>)
 800437e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004382:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004384:	4b42      	ldr	r3, [pc, #264]	@ (8004490 <HAL_UART_MspInit+0x418>)
 8004386:	2200      	movs	r2, #0
 8004388:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800438a:	4b41      	ldr	r3, [pc, #260]	@ (8004490 <HAL_UART_MspInit+0x418>)
 800438c:	2200      	movs	r2, #0
 800438e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8004390:	4b3f      	ldr	r3, [pc, #252]	@ (8004490 <HAL_UART_MspInit+0x418>)
 8004392:	2200      	movs	r2, #0
 8004394:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004396:	4b3e      	ldr	r3, [pc, #248]	@ (8004490 <HAL_UART_MspInit+0x418>)
 8004398:	2200      	movs	r2, #0
 800439a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800439c:	4b3c      	ldr	r3, [pc, #240]	@ (8004490 <HAL_UART_MspInit+0x418>)
 800439e:	2200      	movs	r2, #0
 80043a0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80043a2:	483b      	ldr	r0, [pc, #236]	@ (8004490 <HAL_UART_MspInit+0x418>)
 80043a4:	f002 fbf8 	bl	8006b98 <HAL_DMA_Init>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d001      	beq.n	80043b2 <HAL_UART_MspInit+0x33a>
      Error_Handler();
 80043ae:	f7fe fefd 	bl	80031ac <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a36      	ldr	r2, [pc, #216]	@ (8004490 <HAL_UART_MspInit+0x418>)
 80043b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80043ba:	4a35      	ldr	r2, [pc, #212]	@ (8004490 <HAL_UART_MspInit+0x418>)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80043c0:	2200      	movs	r2, #0
 80043c2:	2105      	movs	r1, #5
 80043c4:	2027      	movs	r0, #39	@ 0x27
 80043c6:	f002 fb47 	bl	8006a58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80043ca:	2027      	movs	r0, #39	@ 0x27
 80043cc:	f002 fb5e 	bl	8006a8c <HAL_NVIC_EnableIRQ>
}
 80043d0:	e052      	b.n	8004478 <HAL_UART_MspInit+0x400>
  else if(uartHandle->Instance==USART6)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a30      	ldr	r2, [pc, #192]	@ (8004498 <HAL_UART_MspInit+0x420>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d14d      	bne.n	8004478 <HAL_UART_MspInit+0x400>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80043dc:	f04f 0201 	mov.w	r2, #1
 80043e0:	f04f 0300 	mov.w	r3, #0
 80043e4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80043e8:	2300      	movs	r3, #0
 80043ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80043ee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80043f2:	4618      	mov	r0, r3
 80043f4:	f007 f956 	bl	800b6a4 <HAL_RCCEx_PeriphCLKConfig>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d001      	beq.n	8004402 <HAL_UART_MspInit+0x38a>
      Error_Handler();
 80043fe:	f7fe fed5 	bl	80031ac <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004402:	4b21      	ldr	r3, [pc, #132]	@ (8004488 <HAL_UART_MspInit+0x410>)
 8004404:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8004408:	4a1f      	ldr	r2, [pc, #124]	@ (8004488 <HAL_UART_MspInit+0x410>)
 800440a:	f043 0320 	orr.w	r3, r3, #32
 800440e:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8004412:	4b1d      	ldr	r3, [pc, #116]	@ (8004488 <HAL_UART_MspInit+0x410>)
 8004414:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8004418:	f003 0320 	and.w	r3, r3, #32
 800441c:	60fb      	str	r3, [r7, #12]
 800441e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004420:	4b19      	ldr	r3, [pc, #100]	@ (8004488 <HAL_UART_MspInit+0x410>)
 8004422:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004426:	4a18      	ldr	r2, [pc, #96]	@ (8004488 <HAL_UART_MspInit+0x410>)
 8004428:	f043 0304 	orr.w	r3, r3, #4
 800442c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8004430:	4b15      	ldr	r3, [pc, #84]	@ (8004488 <HAL_UART_MspInit+0x410>)
 8004432:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004436:	f003 0304 	and.w	r3, r3, #4
 800443a:	60bb      	str	r3, [r7, #8]
 800443c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800443e:	23c0      	movs	r3, #192	@ 0xc0
 8004440:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004444:	2302      	movs	r3, #2
 8004446:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800444a:	2300      	movs	r3, #0
 800444c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004450:	2300      	movs	r3, #0
 8004452:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8004456:	2307      	movs	r3, #7
 8004458:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800445c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8004460:	4619      	mov	r1, r3
 8004462:	480a      	ldr	r0, [pc, #40]	@ (800448c <HAL_UART_MspInit+0x414>)
 8004464:	f005 fde6 	bl	800a034 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8004468:	2200      	movs	r2, #0
 800446a:	2105      	movs	r1, #5
 800446c:	2047      	movs	r0, #71	@ 0x47
 800446e:	f002 faf3 	bl	8006a58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8004472:	2047      	movs	r0, #71	@ 0x47
 8004474:	f002 fb0a 	bl	8006a8c <HAL_NVIC_EnableIRQ>
}
 8004478:	bf00      	nop
 800447a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	40004800 	.word	0x40004800
 8004488:	58024400 	.word	0x58024400
 800448c:	58020800 	.word	0x58020800
 8004490:	240013d0 	.word	0x240013d0
 8004494:	40020028 	.word	0x40020028
 8004498:	40011400 	.word	0x40011400

0800449c <Reset_UART>:
  /* USER CODE END USART6_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void Reset_UART(UART_HandleTypeDef *huart) {
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]

      // Clear any pending error flags
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF | UART_CLEAR_FEF | UART_CLEAR_NEF | UART_CLEAR_OREF);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	220f      	movs	r2, #15
 80044aa:	621a      	str	r2, [r3, #32]

    // Abort ongoing UART transfer
    if (HAL_UART_Abort_IT(huart) != HAL_OK) {
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f00b fbe7 	bl	800fc80 <HAL_UART_Abort_IT>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d001      	beq.n	80044bc <Reset_UART+0x20>
        // Abort Error
        Error_Handler();
 80044b8:	f7fe fe78 	bl	80031ac <Error_Handler>
    }
     if(huart == &huart3){
    	 MX_USART3_UART_Init();
     }
*/
}
 80044bc:	bf00      	nop
 80044be:	3708      	adds	r7, #8
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <BMP280_write>:
uint16_t dig_T1, dig_P1;
int16_t  dig_T2, dig_T3, dig_P2,dig_P3, dig_P4, dig_P5, dig_P6, dig_P7, dig_P8, dig_P9;

int32_t T_raw, P_raw, t_fine;

void BMP280_write(uint8_t Address, uint8_t Data){
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	4603      	mov	r3, r0
 80044cc:	460a      	mov	r2, r1
 80044ce:	71fb      	strb	r3, [r7, #7]
 80044d0:	4613      	mov	r3, r2
 80044d2:	71bb      	strb	r3, [r7, #6]
	BMP280_select();
 80044d4:	2200      	movs	r2, #0
 80044d6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80044da:	480f      	ldr	r0, [pc, #60]	@ (8004518 <BMP280_write+0x54>)
 80044dc:	f005 ff5a 	bl	800a394 <HAL_GPIO_WritePin>
	Address &= 0x7F;
 80044e0:	79fb      	ldrb	r3, [r7, #7]
 80044e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 80044ea:	1df9      	adds	r1, r7, #7
 80044ec:	2364      	movs	r3, #100	@ 0x64
 80044ee:	2201      	movs	r2, #1
 80044f0:	480a      	ldr	r0, [pc, #40]	@ (800451c <BMP280_write+0x58>)
 80044f2:	f008 ffdb 	bl	800d4ac <HAL_SPI_Transmit>
	HAL_SPI_Transmit(SPI_BMP280, &Data, 1, 100);
 80044f6:	1db9      	adds	r1, r7, #6
 80044f8:	2364      	movs	r3, #100	@ 0x64
 80044fa:	2201      	movs	r2, #1
 80044fc:	4807      	ldr	r0, [pc, #28]	@ (800451c <BMP280_write+0x58>)
 80044fe:	f008 ffd5 	bl	800d4ac <HAL_SPI_Transmit>

	BMP280_unselect();
 8004502:	2201      	movs	r2, #1
 8004504:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004508:	4803      	ldr	r0, [pc, #12]	@ (8004518 <BMP280_write+0x54>)
 800450a:	f005 ff43 	bl	800a394 <HAL_GPIO_WritePin>
}
 800450e:	bf00      	nop
 8004510:	3708      	adds	r7, #8
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	58020400 	.word	0x58020400
 800451c:	24000e88 	.word	0x24000e88

08004520 <BMP280_read>:

uint8_t BMP280_read(uint8_t Address){
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	4603      	mov	r3, r0
 8004528:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer = (Address|0x80);
 800452a:	79fb      	ldrb	r3, [r7, #7]
 800452c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004530:	b2db      	uxtb	r3, r3
 8004532:	73fb      	strb	r3, [r7, #15]
	BMP280_select();
 8004534:	2200      	movs	r2, #0
 8004536:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800453a:	480e      	ldr	r0, [pc, #56]	@ (8004574 <BMP280_read+0x54>)
 800453c:	f005 ff2a 	bl	800a394 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Buffer, 1, 100);
 8004540:	f107 010f 	add.w	r1, r7, #15
 8004544:	2364      	movs	r3, #100	@ 0x64
 8004546:	2201      	movs	r2, #1
 8004548:	480b      	ldr	r0, [pc, #44]	@ (8004578 <BMP280_read+0x58>)
 800454a:	f008 ffaf 	bl	800d4ac <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, &Buffer, 1, 100);
 800454e:	f107 010f 	add.w	r1, r7, #15
 8004552:	2364      	movs	r3, #100	@ 0x64
 8004554:	2201      	movs	r2, #1
 8004556:	4808      	ldr	r0, [pc, #32]	@ (8004578 <BMP280_read+0x58>)
 8004558:	f009 f996 	bl	800d888 <HAL_SPI_Receive>
	BMP280_unselect();
 800455c:	2201      	movs	r2, #1
 800455e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004562:	4804      	ldr	r0, [pc, #16]	@ (8004574 <BMP280_read+0x54>)
 8004564:	f005 ff16 	bl	800a394 <HAL_GPIO_WritePin>

	return Buffer;
 8004568:	7bfb      	ldrb	r3, [r7, #15]
}
 800456a:	4618      	mov	r0, r3
 800456c:	3710      	adds	r7, #16
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	58020400 	.word	0x58020400
 8004578:	24000e88 	.word	0x24000e88

0800457c <BMP280_config>:

void BMP280_config(void){
 800457c:	b580      	push	{r7, lr}
 800457e:	af00      	add	r7, sp, #0
	BMP280_write(ctrl_meas, 0x57);
 8004580:	2157      	movs	r1, #87	@ 0x57
 8004582:	20f4      	movs	r0, #244	@ 0xf4
 8004584:	f7ff ff9e 	bl	80044c4 <BMP280_write>
	BMP280_write(config, 0x10);
 8004588:	2110      	movs	r1, #16
 800458a:	20f5      	movs	r0, #245	@ 0xf5
 800458c:	f7ff ff9a 	bl	80044c4 <BMP280_write>
}
 8004590:	bf00      	nop
 8004592:	bd80      	pop	{r7, pc}

08004594 <BMP280_calibrationData>:

void BMP280_reset(void){
	BMP280_write(reset, 0xB6);
}

void BMP280_calibrationData(void){
 8004594:	b580      	push	{r7, lr}
 8004596:	b088      	sub	sp, #32
 8004598:	af00      	add	r7, sp, #0
	uint8_t Address = 0x88;
 800459a:	2388      	movs	r3, #136	@ 0x88
 800459c:	77fb      	strb	r3, [r7, #31]
	uint8_t Buffer[24] = {0};
 800459e:	2300      	movs	r3, #0
 80045a0:	607b      	str	r3, [r7, #4]
 80045a2:	f107 0308 	add.w	r3, r7, #8
 80045a6:	2200      	movs	r2, #0
 80045a8:	601a      	str	r2, [r3, #0]
 80045aa:	605a      	str	r2, [r3, #4]
 80045ac:	609a      	str	r2, [r3, #8]
 80045ae:	60da      	str	r2, [r3, #12]
 80045b0:	611a      	str	r2, [r3, #16]
	BMP280_select();
 80045b2:	2200      	movs	r2, #0
 80045b4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80045b8:	4843      	ldr	r0, [pc, #268]	@ (80046c8 <BMP280_calibrationData+0x134>)
 80045ba:	f005 feeb 	bl	800a394 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 80045be:	f107 011f 	add.w	r1, r7, #31
 80045c2:	2364      	movs	r3, #100	@ 0x64
 80045c4:	2201      	movs	r2, #1
 80045c6:	4841      	ldr	r0, [pc, #260]	@ (80046cc <BMP280_calibrationData+0x138>)
 80045c8:	f008 ff70 	bl	800d4ac <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 24, 100);
 80045cc:	1d39      	adds	r1, r7, #4
 80045ce:	2364      	movs	r3, #100	@ 0x64
 80045d0:	2218      	movs	r2, #24
 80045d2:	483e      	ldr	r0, [pc, #248]	@ (80046cc <BMP280_calibrationData+0x138>)
 80045d4:	f009 f958 	bl	800d888 <HAL_SPI_Receive>
	BMP280_unselect();
 80045d8:	2201      	movs	r2, #1
 80045da:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80045de:	483a      	ldr	r0, [pc, #232]	@ (80046c8 <BMP280_calibrationData+0x134>)
 80045e0:	f005 fed8 	bl	800a394 <HAL_GPIO_WritePin>

	dig_T1 = (Buffer[1]<<8)|Buffer[0];
 80045e4:	797b      	ldrb	r3, [r7, #5]
 80045e6:	021b      	lsls	r3, r3, #8
 80045e8:	b21a      	sxth	r2, r3
 80045ea:	793b      	ldrb	r3, [r7, #4]
 80045ec:	b21b      	sxth	r3, r3
 80045ee:	4313      	orrs	r3, r2
 80045f0:	b21b      	sxth	r3, r3
 80045f2:	b29a      	uxth	r2, r3
 80045f4:	4b36      	ldr	r3, [pc, #216]	@ (80046d0 <BMP280_calibrationData+0x13c>)
 80045f6:	801a      	strh	r2, [r3, #0]
	dig_T2 = (Buffer[3]<<8)|Buffer[2];
 80045f8:	79fb      	ldrb	r3, [r7, #7]
 80045fa:	021b      	lsls	r3, r3, #8
 80045fc:	b21a      	sxth	r2, r3
 80045fe:	79bb      	ldrb	r3, [r7, #6]
 8004600:	b21b      	sxth	r3, r3
 8004602:	4313      	orrs	r3, r2
 8004604:	b21a      	sxth	r2, r3
 8004606:	4b33      	ldr	r3, [pc, #204]	@ (80046d4 <BMP280_calibrationData+0x140>)
 8004608:	801a      	strh	r2, [r3, #0]
	dig_T3 = (Buffer[5]<<8)|Buffer[4];
 800460a:	7a7b      	ldrb	r3, [r7, #9]
 800460c:	021b      	lsls	r3, r3, #8
 800460e:	b21a      	sxth	r2, r3
 8004610:	7a3b      	ldrb	r3, [r7, #8]
 8004612:	b21b      	sxth	r3, r3
 8004614:	4313      	orrs	r3, r2
 8004616:	b21a      	sxth	r2, r3
 8004618:	4b2f      	ldr	r3, [pc, #188]	@ (80046d8 <BMP280_calibrationData+0x144>)
 800461a:	801a      	strh	r2, [r3, #0]

	dig_P1 = (Buffer[7]<<8)|Buffer[6];
 800461c:	7afb      	ldrb	r3, [r7, #11]
 800461e:	021b      	lsls	r3, r3, #8
 8004620:	b21a      	sxth	r2, r3
 8004622:	7abb      	ldrb	r3, [r7, #10]
 8004624:	b21b      	sxth	r3, r3
 8004626:	4313      	orrs	r3, r2
 8004628:	b21b      	sxth	r3, r3
 800462a:	b29a      	uxth	r2, r3
 800462c:	4b2b      	ldr	r3, [pc, #172]	@ (80046dc <BMP280_calibrationData+0x148>)
 800462e:	801a      	strh	r2, [r3, #0]
	dig_P2 = (Buffer[9]<<8)|Buffer[8];
 8004630:	7b7b      	ldrb	r3, [r7, #13]
 8004632:	021b      	lsls	r3, r3, #8
 8004634:	b21a      	sxth	r2, r3
 8004636:	7b3b      	ldrb	r3, [r7, #12]
 8004638:	b21b      	sxth	r3, r3
 800463a:	4313      	orrs	r3, r2
 800463c:	b21a      	sxth	r2, r3
 800463e:	4b28      	ldr	r3, [pc, #160]	@ (80046e0 <BMP280_calibrationData+0x14c>)
 8004640:	801a      	strh	r2, [r3, #0]
	dig_P3 = (Buffer[11]<<8)|Buffer[10];
 8004642:	7bfb      	ldrb	r3, [r7, #15]
 8004644:	021b      	lsls	r3, r3, #8
 8004646:	b21a      	sxth	r2, r3
 8004648:	7bbb      	ldrb	r3, [r7, #14]
 800464a:	b21b      	sxth	r3, r3
 800464c:	4313      	orrs	r3, r2
 800464e:	b21a      	sxth	r2, r3
 8004650:	4b24      	ldr	r3, [pc, #144]	@ (80046e4 <BMP280_calibrationData+0x150>)
 8004652:	801a      	strh	r2, [r3, #0]
	dig_P4 = (Buffer[13]<<8)|Buffer[12];
 8004654:	7c7b      	ldrb	r3, [r7, #17]
 8004656:	021b      	lsls	r3, r3, #8
 8004658:	b21a      	sxth	r2, r3
 800465a:	7c3b      	ldrb	r3, [r7, #16]
 800465c:	b21b      	sxth	r3, r3
 800465e:	4313      	orrs	r3, r2
 8004660:	b21a      	sxth	r2, r3
 8004662:	4b21      	ldr	r3, [pc, #132]	@ (80046e8 <BMP280_calibrationData+0x154>)
 8004664:	801a      	strh	r2, [r3, #0]
	dig_P5 = (Buffer[15]<<8)|Buffer[14];
 8004666:	7cfb      	ldrb	r3, [r7, #19]
 8004668:	021b      	lsls	r3, r3, #8
 800466a:	b21a      	sxth	r2, r3
 800466c:	7cbb      	ldrb	r3, [r7, #18]
 800466e:	b21b      	sxth	r3, r3
 8004670:	4313      	orrs	r3, r2
 8004672:	b21a      	sxth	r2, r3
 8004674:	4b1d      	ldr	r3, [pc, #116]	@ (80046ec <BMP280_calibrationData+0x158>)
 8004676:	801a      	strh	r2, [r3, #0]
	dig_P6 = (Buffer[17]<<8)|Buffer[16];
 8004678:	7d7b      	ldrb	r3, [r7, #21]
 800467a:	021b      	lsls	r3, r3, #8
 800467c:	b21a      	sxth	r2, r3
 800467e:	7d3b      	ldrb	r3, [r7, #20]
 8004680:	b21b      	sxth	r3, r3
 8004682:	4313      	orrs	r3, r2
 8004684:	b21a      	sxth	r2, r3
 8004686:	4b1a      	ldr	r3, [pc, #104]	@ (80046f0 <BMP280_calibrationData+0x15c>)
 8004688:	801a      	strh	r2, [r3, #0]
	dig_P7 = (Buffer[19]<<8)|Buffer[18];
 800468a:	7dfb      	ldrb	r3, [r7, #23]
 800468c:	021b      	lsls	r3, r3, #8
 800468e:	b21a      	sxth	r2, r3
 8004690:	7dbb      	ldrb	r3, [r7, #22]
 8004692:	b21b      	sxth	r3, r3
 8004694:	4313      	orrs	r3, r2
 8004696:	b21a      	sxth	r2, r3
 8004698:	4b16      	ldr	r3, [pc, #88]	@ (80046f4 <BMP280_calibrationData+0x160>)
 800469a:	801a      	strh	r2, [r3, #0]
	dig_P8 = (Buffer[21]<<8)|Buffer[20];
 800469c:	7e7b      	ldrb	r3, [r7, #25]
 800469e:	021b      	lsls	r3, r3, #8
 80046a0:	b21a      	sxth	r2, r3
 80046a2:	7e3b      	ldrb	r3, [r7, #24]
 80046a4:	b21b      	sxth	r3, r3
 80046a6:	4313      	orrs	r3, r2
 80046a8:	b21a      	sxth	r2, r3
 80046aa:	4b13      	ldr	r3, [pc, #76]	@ (80046f8 <BMP280_calibrationData+0x164>)
 80046ac:	801a      	strh	r2, [r3, #0]
	dig_P9 = (Buffer[23]<<8)|Buffer[22];
 80046ae:	7efb      	ldrb	r3, [r7, #27]
 80046b0:	021b      	lsls	r3, r3, #8
 80046b2:	b21a      	sxth	r2, r3
 80046b4:	7ebb      	ldrb	r3, [r7, #26]
 80046b6:	b21b      	sxth	r3, r3
 80046b8:	4313      	orrs	r3, r2
 80046ba:	b21a      	sxth	r2, r3
 80046bc:	4b0f      	ldr	r3, [pc, #60]	@ (80046fc <BMP280_calibrationData+0x168>)
 80046be:	801a      	strh	r2, [r3, #0]
}
 80046c0:	bf00      	nop
 80046c2:	3720      	adds	r7, #32
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	58020400 	.word	0x58020400
 80046cc:	24000e88 	.word	0x24000e88
 80046d0:	2400145c 	.word	0x2400145c
 80046d4:	24001460 	.word	0x24001460
 80046d8:	24001462 	.word	0x24001462
 80046dc:	2400145e 	.word	0x2400145e
 80046e0:	24001464 	.word	0x24001464
 80046e4:	24001466 	.word	0x24001466
 80046e8:	24001468 	.word	0x24001468
 80046ec:	2400146a 	.word	0x2400146a
 80046f0:	2400146c 	.word	0x2400146c
 80046f4:	2400146e 	.word	0x2400146e
 80046f8:	24001470 	.word	0x24001470
 80046fc:	24001472 	.word	0x24001472

08004700 <BMP280_readRawValues>:

void BMP280_readRawValues(void){
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
	uint8_t Address = press_msb;
 8004706:	23f7      	movs	r3, #247	@ 0xf7
 8004708:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[6] = {0};
 800470a:	2300      	movs	r3, #0
 800470c:	603b      	str	r3, [r7, #0]
 800470e:	2300      	movs	r3, #0
 8004710:	80bb      	strh	r3, [r7, #4]
	BMP280_select();
 8004712:	2200      	movs	r2, #0
 8004714:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004718:	4817      	ldr	r0, [pc, #92]	@ (8004778 <BMP280_readRawValues+0x78>)
 800471a:	f005 fe3b 	bl	800a394 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 800471e:	1df9      	adds	r1, r7, #7
 8004720:	2364      	movs	r3, #100	@ 0x64
 8004722:	2201      	movs	r2, #1
 8004724:	4815      	ldr	r0, [pc, #84]	@ (800477c <BMP280_readRawValues+0x7c>)
 8004726:	f008 fec1 	bl	800d4ac <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 6, 100);
 800472a:	4639      	mov	r1, r7
 800472c:	2364      	movs	r3, #100	@ 0x64
 800472e:	2206      	movs	r2, #6
 8004730:	4812      	ldr	r0, [pc, #72]	@ (800477c <BMP280_readRawValues+0x7c>)
 8004732:	f009 f8a9 	bl	800d888 <HAL_SPI_Receive>
	BMP280_unselect();
 8004736:	2201      	movs	r2, #1
 8004738:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800473c:	480e      	ldr	r0, [pc, #56]	@ (8004778 <BMP280_readRawValues+0x78>)
 800473e:	f005 fe29 	bl	800a394 <HAL_GPIO_WritePin>

	P_raw = (Buffer[0]<<12)|(Buffer[1]<<4)|(Buffer[2]>>4);
 8004742:	783b      	ldrb	r3, [r7, #0]
 8004744:	031a      	lsls	r2, r3, #12
 8004746:	787b      	ldrb	r3, [r7, #1]
 8004748:	011b      	lsls	r3, r3, #4
 800474a:	4313      	orrs	r3, r2
 800474c:	78ba      	ldrb	r2, [r7, #2]
 800474e:	0912      	lsrs	r2, r2, #4
 8004750:	b2d2      	uxtb	r2, r2
 8004752:	4313      	orrs	r3, r2
 8004754:	4a0a      	ldr	r2, [pc, #40]	@ (8004780 <BMP280_readRawValues+0x80>)
 8004756:	6013      	str	r3, [r2, #0]
	T_raw = (Buffer[3]<<12)|(Buffer[4]<<4)|(Buffer[5]>>4);
 8004758:	78fb      	ldrb	r3, [r7, #3]
 800475a:	031a      	lsls	r2, r3, #12
 800475c:	793b      	ldrb	r3, [r7, #4]
 800475e:	011b      	lsls	r3, r3, #4
 8004760:	4313      	orrs	r3, r2
 8004762:	797a      	ldrb	r2, [r7, #5]
 8004764:	0912      	lsrs	r2, r2, #4
 8004766:	b2d2      	uxtb	r2, r2
 8004768:	4313      	orrs	r3, r2
 800476a:	4a06      	ldr	r2, [pc, #24]	@ (8004784 <BMP280_readRawValues+0x84>)
 800476c:	6013      	str	r3, [r2, #0]
}
 800476e:	bf00      	nop
 8004770:	3708      	adds	r7, #8
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	58020400 	.word	0x58020400
 800477c:	24000e88 	.word	0x24000e88
 8004780:	24001478 	.word	0x24001478
 8004784:	24001474 	.word	0x24001474

08004788 <BMP280_measureT>:

int32_t BMP280_measureT(int32_t adc_T){
 8004788:	b480      	push	{r7}
 800478a:	b087      	sub	sp, #28
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 =  ((((T_raw>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 8004790:	4b1a      	ldr	r3, [pc, #104]	@ (80047fc <BMP280_measureT+0x74>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	10da      	asrs	r2, r3, #3
 8004796:	4b1a      	ldr	r3, [pc, #104]	@ (8004800 <BMP280_measureT+0x78>)
 8004798:	881b      	ldrh	r3, [r3, #0]
 800479a:	005b      	lsls	r3, r3, #1
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	4a19      	ldr	r2, [pc, #100]	@ (8004804 <BMP280_measureT+0x7c>)
 80047a0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80047a4:	fb02 f303 	mul.w	r3, r2, r3
 80047a8:	12db      	asrs	r3, r3, #11
 80047aa:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1))) >> 12) * ((int32_t)dig_T3)) >> 14;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	111b      	asrs	r3, r3, #4
 80047b0:	4a13      	ldr	r2, [pc, #76]	@ (8004800 <BMP280_measureT+0x78>)
 80047b2:	8812      	ldrh	r2, [r2, #0]
 80047b4:	1a9b      	subs	r3, r3, r2
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	1112      	asrs	r2, r2, #4
 80047ba:	4911      	ldr	r1, [pc, #68]	@ (8004800 <BMP280_measureT+0x78>)
 80047bc:	8809      	ldrh	r1, [r1, #0]
 80047be:	1a52      	subs	r2, r2, r1
 80047c0:	fb02 f303 	mul.w	r3, r2, r3
 80047c4:	131b      	asrs	r3, r3, #12
 80047c6:	4a10      	ldr	r2, [pc, #64]	@ (8004808 <BMP280_measureT+0x80>)
 80047c8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80047cc:	fb02 f303 	mul.w	r3, r2, r3
 80047d0:	139b      	asrs	r3, r3, #14
 80047d2:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 80047d4:	697a      	ldr	r2, [r7, #20]
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	4413      	add	r3, r2
 80047da:	4a0c      	ldr	r2, [pc, #48]	@ (800480c <BMP280_measureT+0x84>)
 80047dc:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 80047de:	4b0b      	ldr	r3, [pc, #44]	@ (800480c <BMP280_measureT+0x84>)
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	4613      	mov	r3, r2
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	4413      	add	r3, r2
 80047e8:	3380      	adds	r3, #128	@ 0x80
 80047ea:	121b      	asrs	r3, r3, #8
 80047ec:	60fb      	str	r3, [r7, #12]
	return T;
 80047ee:	68fb      	ldr	r3, [r7, #12]
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	371c      	adds	r7, #28
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr
 80047fc:	24001474 	.word	0x24001474
 8004800:	2400145c 	.word	0x2400145c
 8004804:	24001460 	.word	0x24001460
 8004808:	24001462 	.word	0x24001462
 800480c:	2400147c 	.word	0x2400147c

08004810 <BMP280_measureP>:

uint32_t BMP280_measureP(int32_t adc_P){
 8004810:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004814:	b0ca      	sub	sp, #296	@ 0x128
 8004816:	af00      	add	r7, sp, #0
 8004818:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 800481c:	4baf      	ldr	r3, [pc, #700]	@ (8004adc <BMP280_measureP+0x2cc>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	17da      	asrs	r2, r3, #31
 8004822:	461c      	mov	r4, r3
 8004824:	4615      	mov	r5, r2
 8004826:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 800482a:	f145 3bff 	adc.w	fp, r5, #4294967295
 800482e:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 8004832:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8004836:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800483a:	fb03 f102 	mul.w	r1, r3, r2
 800483e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8004842:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004846:	fb02 f303 	mul.w	r3, r2, r3
 800484a:	18ca      	adds	r2, r1, r3
 800484c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004850:	fba3 8903 	umull	r8, r9, r3, r3
 8004854:	eb02 0309 	add.w	r3, r2, r9
 8004858:	4699      	mov	r9, r3
 800485a:	4ba1      	ldr	r3, [pc, #644]	@ (8004ae0 <BMP280_measureP+0x2d0>)
 800485c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004860:	b21b      	sxth	r3, r3
 8004862:	17da      	asrs	r2, r3, #31
 8004864:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004868:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800486c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8004870:	4603      	mov	r3, r0
 8004872:	fb03 f209 	mul.w	r2, r3, r9
 8004876:	460b      	mov	r3, r1
 8004878:	fb08 f303 	mul.w	r3, r8, r3
 800487c:	4413      	add	r3, r2
 800487e:	4602      	mov	r2, r0
 8004880:	fba8 1202 	umull	r1, r2, r8, r2
 8004884:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004888:	460a      	mov	r2, r1
 800488a:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 800488e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004892:	4413      	add	r3, r2
 8004894:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004898:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 800489c:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 80048a0:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 80048a4:	4b8f      	ldr	r3, [pc, #572]	@ (8004ae4 <BMP280_measureP+0x2d4>)
 80048a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048aa:	b21b      	sxth	r3, r3
 80048ac:	17da      	asrs	r2, r3, #31
 80048ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80048b2:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80048b6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80048ba:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 80048be:	462a      	mov	r2, r5
 80048c0:	fb02 f203 	mul.w	r2, r2, r3
 80048c4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80048c8:	4621      	mov	r1, r4
 80048ca:	fb01 f303 	mul.w	r3, r1, r3
 80048ce:	441a      	add	r2, r3
 80048d0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80048d4:	4621      	mov	r1, r4
 80048d6:	fba3 1301 	umull	r1, r3, r3, r1
 80048da:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80048de:	460b      	mov	r3, r1
 80048e0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80048e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048e8:	18d3      	adds	r3, r2, r3
 80048ea:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80048ee:	f04f 0000 	mov.w	r0, #0
 80048f2:	f04f 0100 	mov.w	r1, #0
 80048f6:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 80048fa:	462b      	mov	r3, r5
 80048fc:	0459      	lsls	r1, r3, #17
 80048fe:	4623      	mov	r3, r4
 8004900:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8004904:	4623      	mov	r3, r4
 8004906:	0458      	lsls	r0, r3, #17
 8004908:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800490c:	1814      	adds	r4, r2, r0
 800490e:	643c      	str	r4, [r7, #64]	@ 0x40
 8004910:	414b      	adcs	r3, r1
 8004912:	647b      	str	r3, [r7, #68]	@ 0x44
 8004914:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8004918:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 800491c:	4b72      	ldr	r3, [pc, #456]	@ (8004ae8 <BMP280_measureP+0x2d8>)
 800491e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004922:	b21b      	sxth	r3, r3
 8004924:	17da      	asrs	r2, r3, #31
 8004926:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800492a:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800492e:	f04f 0000 	mov.w	r0, #0
 8004932:	f04f 0100 	mov.w	r1, #0
 8004936:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800493a:	00d9      	lsls	r1, r3, #3
 800493c:	2000      	movs	r0, #0
 800493e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8004942:	1814      	adds	r4, r2, r0
 8004944:	63bc      	str	r4, [r7, #56]	@ 0x38
 8004946:	414b      	adcs	r3, r1
 8004948:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800494a:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 800494e:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 8004952:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8004956:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800495a:	fb03 f102 	mul.w	r1, r3, r2
 800495e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8004962:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004966:	fb02 f303 	mul.w	r3, r2, r3
 800496a:	18ca      	adds	r2, r1, r3
 800496c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004970:	fba3 1303 	umull	r1, r3, r3, r3
 8004974:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004978:	460b      	mov	r3, r1
 800497a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800497e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004982:	18d3      	adds	r3, r2, r3
 8004984:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004988:	4b58      	ldr	r3, [pc, #352]	@ (8004aec <BMP280_measureP+0x2dc>)
 800498a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800498e:	b21b      	sxth	r3, r3
 8004990:	17da      	asrs	r2, r3, #31
 8004992:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004996:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800499a:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 800499e:	462b      	mov	r3, r5
 80049a0:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80049a4:	4642      	mov	r2, r8
 80049a6:	fb02 f203 	mul.w	r2, r2, r3
 80049aa:	464b      	mov	r3, r9
 80049ac:	4621      	mov	r1, r4
 80049ae:	fb01 f303 	mul.w	r3, r1, r3
 80049b2:	4413      	add	r3, r2
 80049b4:	4622      	mov	r2, r4
 80049b6:	4641      	mov	r1, r8
 80049b8:	fba2 1201 	umull	r1, r2, r2, r1
 80049bc:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 80049c0:	460a      	mov	r2, r1
 80049c2:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 80049c6:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 80049ca:	4413      	add	r3, r2
 80049cc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80049d0:	f04f 0000 	mov.w	r0, #0
 80049d4:	f04f 0100 	mov.w	r1, #0
 80049d8:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 80049dc:	4623      	mov	r3, r4
 80049de:	0a18      	lsrs	r0, r3, #8
 80049e0:	462b      	mov	r3, r5
 80049e2:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80049e6:	462b      	mov	r3, r5
 80049e8:	1219      	asrs	r1, r3, #8
 80049ea:	4b41      	ldr	r3, [pc, #260]	@ (8004af0 <BMP280_measureP+0x2e0>)
 80049ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049f0:	b21b      	sxth	r3, r3
 80049f2:	17da      	asrs	r2, r3, #31
 80049f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80049f8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80049fc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004a00:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8004a04:	464a      	mov	r2, r9
 8004a06:	fb02 f203 	mul.w	r2, r2, r3
 8004a0a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8004a0e:	4644      	mov	r4, r8
 8004a10:	fb04 f303 	mul.w	r3, r4, r3
 8004a14:	441a      	add	r2, r3
 8004a16:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004a1a:	4644      	mov	r4, r8
 8004a1c:	fba3 4304 	umull	r4, r3, r3, r4
 8004a20:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004a24:	4623      	mov	r3, r4
 8004a26:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004a2a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8004a2e:	18d3      	adds	r3, r2, r3
 8004a30:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004a34:	f04f 0200 	mov.w	r2, #0
 8004a38:	f04f 0300 	mov.w	r3, #0
 8004a3c:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8004a40:	464c      	mov	r4, r9
 8004a42:	0323      	lsls	r3, r4, #12
 8004a44:	4644      	mov	r4, r8
 8004a46:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8004a4a:	4644      	mov	r4, r8
 8004a4c:	0322      	lsls	r2, r4, #12
 8004a4e:	1884      	adds	r4, r0, r2
 8004a50:	633c      	str	r4, [r7, #48]	@ 0x30
 8004a52:	eb41 0303 	adc.w	r3, r1, r3
 8004a56:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a58:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8004a5c:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 8004a60:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8004a64:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8004a68:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8004a6c:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8004a70:	4b20      	ldr	r3, [pc, #128]	@ (8004af4 <BMP280_measureP+0x2e4>)
 8004a72:	881b      	ldrh	r3, [r3, #0]
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	2200      	movs	r2, #0
 8004a78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004a7c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004a80:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004a84:	462b      	mov	r3, r5
 8004a86:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004a8a:	4642      	mov	r2, r8
 8004a8c:	fb02 f203 	mul.w	r2, r2, r3
 8004a90:	464b      	mov	r3, r9
 8004a92:	4621      	mov	r1, r4
 8004a94:	fb01 f303 	mul.w	r3, r1, r3
 8004a98:	4413      	add	r3, r2
 8004a9a:	4622      	mov	r2, r4
 8004a9c:	4641      	mov	r1, r8
 8004a9e:	fba2 1201 	umull	r1, r2, r2, r1
 8004aa2:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8004aa6:	460a      	mov	r2, r1
 8004aa8:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8004aac:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004ab0:	4413      	add	r3, r2
 8004ab2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004ab6:	f04f 0200 	mov.w	r2, #0
 8004aba:	f04f 0300 	mov.w	r3, #0
 8004abe:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8004ac2:	4629      	mov	r1, r5
 8004ac4:	104a      	asrs	r2, r1, #1
 8004ac6:	4629      	mov	r1, r5
 8004ac8:	17cb      	asrs	r3, r1, #31
 8004aca:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	if (var1 == 0)
 8004ace:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	d110      	bne.n	8004af8 <BMP280_measureP+0x2e8>
	{
	return 0;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	e154      	b.n	8004d84 <BMP280_measureP+0x574>
 8004ada:	bf00      	nop
 8004adc:	2400147c 	.word	0x2400147c
 8004ae0:	2400146c 	.word	0x2400146c
 8004ae4:	2400146a 	.word	0x2400146a
 8004ae8:	24001468 	.word	0x24001468
 8004aec:	24001466 	.word	0x24001466
 8004af0:	24001464 	.word	0x24001464
 8004af4:	2400145e 	.word	0x2400145e
	}
	p = 1048576-adc_P;
 8004af8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004afc:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8004b00:	17da      	asrs	r2, r3, #31
 8004b02:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b04:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b06:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8004b0a:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	p = (((p<<31)-var2)*3125)/var1;
 8004b0e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004b12:	105b      	asrs	r3, r3, #1
 8004b14:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004b18:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004b1c:	07db      	lsls	r3, r3, #31
 8004b1e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004b22:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8004b26:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8004b2a:	4621      	mov	r1, r4
 8004b2c:	1a89      	subs	r1, r1, r2
 8004b2e:	67b9      	str	r1, [r7, #120]	@ 0x78
 8004b30:	4629      	mov	r1, r5
 8004b32:	eb61 0303 	sbc.w	r3, r1, r3
 8004b36:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004b38:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004b3c:	4622      	mov	r2, r4
 8004b3e:	462b      	mov	r3, r5
 8004b40:	1891      	adds	r1, r2, r2
 8004b42:	6239      	str	r1, [r7, #32]
 8004b44:	415b      	adcs	r3, r3
 8004b46:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b48:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b4c:	4621      	mov	r1, r4
 8004b4e:	1851      	adds	r1, r2, r1
 8004b50:	61b9      	str	r1, [r7, #24]
 8004b52:	4629      	mov	r1, r5
 8004b54:	414b      	adcs	r3, r1
 8004b56:	61fb      	str	r3, [r7, #28]
 8004b58:	f04f 0200 	mov.w	r2, #0
 8004b5c:	f04f 0300 	mov.w	r3, #0
 8004b60:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8004b64:	4649      	mov	r1, r9
 8004b66:	018b      	lsls	r3, r1, #6
 8004b68:	4641      	mov	r1, r8
 8004b6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b6e:	4641      	mov	r1, r8
 8004b70:	018a      	lsls	r2, r1, #6
 8004b72:	4641      	mov	r1, r8
 8004b74:	1889      	adds	r1, r1, r2
 8004b76:	6139      	str	r1, [r7, #16]
 8004b78:	4649      	mov	r1, r9
 8004b7a:	eb43 0101 	adc.w	r1, r3, r1
 8004b7e:	6179      	str	r1, [r7, #20]
 8004b80:	f04f 0200 	mov.w	r2, #0
 8004b84:	f04f 0300 	mov.w	r3, #0
 8004b88:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8004b8c:	4649      	mov	r1, r9
 8004b8e:	008b      	lsls	r3, r1, #2
 8004b90:	4641      	mov	r1, r8
 8004b92:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b96:	4641      	mov	r1, r8
 8004b98:	008a      	lsls	r2, r1, #2
 8004b9a:	4610      	mov	r0, r2
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	4622      	mov	r2, r4
 8004ba2:	189b      	adds	r3, r3, r2
 8004ba4:	60bb      	str	r3, [r7, #8]
 8004ba6:	460b      	mov	r3, r1
 8004ba8:	462a      	mov	r2, r5
 8004baa:	eb42 0303 	adc.w	r3, r2, r3
 8004bae:	60fb      	str	r3, [r7, #12]
 8004bb0:	f04f 0200 	mov.w	r2, #0
 8004bb4:	f04f 0300 	mov.w	r3, #0
 8004bb8:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8004bbc:	4649      	mov	r1, r9
 8004bbe:	008b      	lsls	r3, r1, #2
 8004bc0:	4641      	mov	r1, r8
 8004bc2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bc6:	4641      	mov	r1, r8
 8004bc8:	008a      	lsls	r2, r1, #2
 8004bca:	4610      	mov	r0, r2
 8004bcc:	4619      	mov	r1, r3
 8004bce:	4603      	mov	r3, r0
 8004bd0:	4622      	mov	r2, r4
 8004bd2:	189b      	adds	r3, r3, r2
 8004bd4:	673b      	str	r3, [r7, #112]	@ 0x70
 8004bd6:	462b      	mov	r3, r5
 8004bd8:	460a      	mov	r2, r1
 8004bda:	eb42 0303 	adc.w	r3, r2, r3
 8004bde:	677b      	str	r3, [r7, #116]	@ 0x74
 8004be0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8004be4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8004be8:	f7fb fd9e 	bl	8000728 <__aeabi_ldivmod>
 8004bec:	4602      	mov	r2, r0
 8004bee:	460b      	mov	r3, r1
 8004bf0:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8004bf4:	4b66      	ldr	r3, [pc, #408]	@ (8004d90 <BMP280_measureP+0x580>)
 8004bf6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004bfa:	b21b      	sxth	r3, r3
 8004bfc:	17da      	asrs	r2, r3, #31
 8004bfe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c00:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004c02:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8004c06:	f04f 0000 	mov.w	r0, #0
 8004c0a:	f04f 0100 	mov.w	r1, #0
 8004c0e:	0b50      	lsrs	r0, r2, #13
 8004c10:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8004c14:	1359      	asrs	r1, r3, #13
 8004c16:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8004c1a:	462b      	mov	r3, r5
 8004c1c:	fb00 f203 	mul.w	r2, r0, r3
 8004c20:	4623      	mov	r3, r4
 8004c22:	fb03 f301 	mul.w	r3, r3, r1
 8004c26:	4413      	add	r3, r2
 8004c28:	4622      	mov	r2, r4
 8004c2a:	fba2 1200 	umull	r1, r2, r2, r0
 8004c2e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004c32:	460a      	mov	r2, r1
 8004c34:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8004c38:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004c3c:	4413      	add	r3, r2
 8004c3e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004c42:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8004c46:	f04f 0000 	mov.w	r0, #0
 8004c4a:	f04f 0100 	mov.w	r1, #0
 8004c4e:	0b50      	lsrs	r0, r2, #13
 8004c50:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8004c54:	1359      	asrs	r1, r3, #13
 8004c56:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8004c5a:	462b      	mov	r3, r5
 8004c5c:	fb00 f203 	mul.w	r2, r0, r3
 8004c60:	4623      	mov	r3, r4
 8004c62:	fb03 f301 	mul.w	r3, r3, r1
 8004c66:	4413      	add	r3, r2
 8004c68:	4622      	mov	r2, r4
 8004c6a:	fba2 1200 	umull	r1, r2, r2, r0
 8004c6e:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004c72:	460a      	mov	r2, r1
 8004c74:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8004c78:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8004c7c:	4413      	add	r3, r2
 8004c7e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004c82:	f04f 0200 	mov.w	r2, #0
 8004c86:	f04f 0300 	mov.w	r3, #0
 8004c8a:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8004c8e:	4621      	mov	r1, r4
 8004c90:	0e4a      	lsrs	r2, r1, #25
 8004c92:	4629      	mov	r1, r5
 8004c94:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8004c98:	4629      	mov	r1, r5
 8004c9a:	164b      	asrs	r3, r1, #25
 8004c9c:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8004ca0:	4b3c      	ldr	r3, [pc, #240]	@ (8004d94 <BMP280_measureP+0x584>)
 8004ca2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ca6:	b21b      	sxth	r3, r3
 8004ca8:	17da      	asrs	r2, r3, #31
 8004caa:	663b      	str	r3, [r7, #96]	@ 0x60
 8004cac:	667a      	str	r2, [r7, #100]	@ 0x64
 8004cae:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004cb2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004cb6:	462a      	mov	r2, r5
 8004cb8:	fb02 f203 	mul.w	r2, r2, r3
 8004cbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cc0:	4621      	mov	r1, r4
 8004cc2:	fb01 f303 	mul.w	r3, r1, r3
 8004cc6:	4413      	add	r3, r2
 8004cc8:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8004ccc:	4621      	mov	r1, r4
 8004cce:	fba2 1201 	umull	r1, r2, r2, r1
 8004cd2:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8004cd6:	460a      	mov	r2, r1
 8004cd8:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8004cdc:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8004ce0:	4413      	add	r3, r2
 8004ce2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004ce6:	f04f 0200 	mov.w	r2, #0
 8004cea:	f04f 0300 	mov.w	r3, #0
 8004cee:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8004cf2:	4621      	mov	r1, r4
 8004cf4:	0cca      	lsrs	r2, r1, #19
 8004cf6:	4629      	mov	r1, r5
 8004cf8:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8004cfc:	4629      	mov	r1, r5
 8004cfe:	14cb      	asrs	r3, r1, #19
 8004d00:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8004d04:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8004d08:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8004d0c:	1884      	adds	r4, r0, r2
 8004d0e:	65bc      	str	r4, [r7, #88]	@ 0x58
 8004d10:	eb41 0303 	adc.w	r3, r1, r3
 8004d14:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d16:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8004d1a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8004d1e:	4621      	mov	r1, r4
 8004d20:	1889      	adds	r1, r1, r2
 8004d22:	6539      	str	r1, [r7, #80]	@ 0x50
 8004d24:	4629      	mov	r1, r5
 8004d26:	eb43 0101 	adc.w	r1, r3, r1
 8004d2a:	6579      	str	r1, [r7, #84]	@ 0x54
 8004d2c:	f04f 0000 	mov.w	r0, #0
 8004d30:	f04f 0100 	mov.w	r1, #0
 8004d34:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8004d38:	4623      	mov	r3, r4
 8004d3a:	0a18      	lsrs	r0, r3, #8
 8004d3c:	462b      	mov	r3, r5
 8004d3e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8004d42:	462b      	mov	r3, r5
 8004d44:	1219      	asrs	r1, r3, #8
 8004d46:	4b14      	ldr	r3, [pc, #80]	@ (8004d98 <BMP280_measureP+0x588>)
 8004d48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d4c:	b21b      	sxth	r3, r3
 8004d4e:	17da      	asrs	r2, r3, #31
 8004d50:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d52:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004d54:	f04f 0200 	mov.w	r2, #0
 8004d58:	f04f 0300 	mov.w	r3, #0
 8004d5c:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8004d60:	464c      	mov	r4, r9
 8004d62:	0123      	lsls	r3, r4, #4
 8004d64:	4644      	mov	r4, r8
 8004d66:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8004d6a:	4644      	mov	r4, r8
 8004d6c:	0122      	lsls	r2, r4, #4
 8004d6e:	1884      	adds	r4, r0, r2
 8004d70:	603c      	str	r4, [r7, #0]
 8004d72:	eb41 0303 	adc.w	r3, r1, r3
 8004d76:	607b      	str	r3, [r7, #4]
 8004d78:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004d7c:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (uint32_t)p;
 8004d80:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d90:	24001472 	.word	0x24001472
 8004d94:	24001470 	.word	0x24001470
 8004d98:	2400146e 	.word	0x2400146e
 8004d9c:	00000000 	.word	0x00000000

08004da0 <BMP280_measureH>:

uint16_t BMP280_measureH(uint32_t Pres, int32_t Temp){
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b088      	sub	sp, #32
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
	double var1, var2, h;

	if(Pres == 0) return 0;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d101      	bne.n	8004db4 <BMP280_measureH+0x14>
 8004db0:	2300      	movs	r3, #0
 8004db2:	e03d      	b.n	8004e30 <BMP280_measureH+0x90>
	var1 = -log(((double)Pres)/101325);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	ee07 3a90 	vmov	s15, r3
 8004dba:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8004dbe:	ed9f 5b1e 	vldr	d5, [pc, #120]	@ 8004e38 <BMP280_measureH+0x98>
 8004dc2:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8004dc6:	eeb0 0b46 	vmov.f64	d0, d6
 8004dca:	f014 fe49 	bl	8019a60 <log>
 8004dce:	eeb0 7b40 	vmov.f64	d7, d0
 8004dd2:	eeb1 7b47 	vneg.f64	d7, d7
 8004dd6:	ed87 7b06 	vstr	d7, [r7, #24]

	if(var1 == 0) return 0;
 8004dda:	ed97 7b06 	vldr	d7, [r7, #24]
 8004dde:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004de6:	d101      	bne.n	8004dec <BMP280_measureH+0x4c>
 8004de8:	2300      	movs	r3, #0
 8004dea:	e021      	b.n	8004e30 <BMP280_measureH+0x90>
	var2 = 0.0341663/((((double)Temp)/100)+273.15);
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	ee07 3a90 	vmov	s15, r3
 8004df2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8004df6:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 8004e40 <BMP280_measureH+0xa0>
 8004dfa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004dfe:	ed9f 6b12 	vldr	d6, [pc, #72]	@ 8004e48 <BMP280_measureH+0xa8>
 8004e02:	ee37 6b06 	vadd.f64	d6, d7, d6
 8004e06:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 8004e50 <BMP280_measureH+0xb0>
 8004e0a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004e0e:	ed87 7b04 	vstr	d7, [r7, #16]
	h = var1/var2;
 8004e12:	ed97 5b06 	vldr	d5, [r7, #24]
 8004e16:	ed97 6b04 	vldr	d6, [r7, #16]
 8004e1a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004e1e:	ed87 7b02 	vstr	d7, [r7, #8]
	return (uint16_t)h;
 8004e22:	ed97 7b02 	vldr	d7, [r7, #8]
 8004e26:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8004e2a:	ee17 3a90 	vmov	r3, s15
 8004e2e:	b29b      	uxth	r3, r3
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3720      	adds	r7, #32
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	00000000 	.word	0x00000000
 8004e3c:	40f8bcd0 	.word	0x40f8bcd0
 8004e40:	00000000 	.word	0x00000000
 8004e44:	40590000 	.word	0x40590000
 8004e48:	66666666 	.word	0x66666666
 8004e4c:	40711266 	.word	0x40711266
 8004e50:	ca402a92 	.word	0xca402a92
 8004e54:	3fa17e3e 	.word	0x3fa17e3e

08004e58 <BMP280_init>:

void BMP280_init(void){
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	af00      	add	r7, sp, #0
	BMP280_unselect();
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004e62:	480d      	ldr	r0, [pc, #52]	@ (8004e98 <BMP280_init+0x40>)
 8004e64:	f005 fa96 	bl	800a394 <HAL_GPIO_WritePin>
	BMP280_config();
 8004e68:	f7ff fb88 	bl	800457c <BMP280_config>
	BMP280.ID = BMP280_read(0x89);
 8004e6c:	2089      	movs	r0, #137	@ 0x89
 8004e6e:	f7ff fb57 	bl	8004520 <BMP280_read>
 8004e72:	4603      	mov	r3, r0
 8004e74:	461a      	mov	r2, r3
 8004e76:	4b09      	ldr	r3, [pc, #36]	@ (8004e9c <BMP280_init+0x44>)
 8004e78:	701a      	strb	r2, [r3, #0]
	BMP280_calibrationData();
 8004e7a:	f7ff fb8b 	bl	8004594 <BMP280_calibrationData>
	BMP280_readRawValues();
 8004e7e:	f7ff fc3f 	bl	8004700 <BMP280_readRawValues>
	BMP280.Temp_inicial = BMP280_measureT(T_raw);
 8004e82:	4b07      	ldr	r3, [pc, #28]	@ (8004ea0 <BMP280_init+0x48>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4618      	mov	r0, r3
 8004e88:	f7ff fc7e 	bl	8004788 <BMP280_measureT>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	4a03      	ldr	r2, [pc, #12]	@ (8004e9c <BMP280_init+0x44>)
 8004e90:	6093      	str	r3, [r2, #8]
}
 8004e92:	bf00      	nop
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	58020400 	.word	0x58020400
 8004e9c:	24001448 	.word	0x24001448
 8004ea0:	24001474 	.word	0x24001474

08004ea4 <BMP280_calculate>:

void BMP280_calculate(void){
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	af00      	add	r7, sp, #0
	//BMP280.ID = 0;
	BMP280.ID = BMP280_read(0x89);
 8004ea8:	2089      	movs	r0, #137	@ 0x89
 8004eaa:	f7ff fb39 	bl	8004520 <BMP280_read>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	4b16      	ldr	r3, [pc, #88]	@ (8004f0c <BMP280_calculate+0x68>)
 8004eb4:	701a      	strb	r2, [r3, #0]
	BMP280_readRawValues();
 8004eb6:	f7ff fc23 	bl	8004700 <BMP280_readRawValues>
	BMP280.Temp = BMP280_measureT(T_raw);
 8004eba:	4b15      	ldr	r3, [pc, #84]	@ (8004f10 <BMP280_calculate+0x6c>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f7ff fc62 	bl	8004788 <BMP280_measureT>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	4a11      	ldr	r2, [pc, #68]	@ (8004f0c <BMP280_calculate+0x68>)
 8004ec8:	6053      	str	r3, [r2, #4]
	BMP280.Pressure    		= BMP280_measureP(P_raw)/256;
 8004eca:	4b12      	ldr	r3, [pc, #72]	@ (8004f14 <BMP280_calculate+0x70>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f7ff fc9e 	bl	8004810 <BMP280_measureP>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	0a1b      	lsrs	r3, r3, #8
 8004ed8:	4a0c      	ldr	r2, [pc, #48]	@ (8004f0c <BMP280_calculate+0x68>)
 8004eda:	60d3      	str	r3, [r2, #12]
	BMP280.Barometric_Altitude = BMP280_measureH(BMP280.Pressure, BMP280.Temp_inicial);
 8004edc:	4b0b      	ldr	r3, [pc, #44]	@ (8004f0c <BMP280_calculate+0x68>)
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	4a0a      	ldr	r2, [pc, #40]	@ (8004f0c <BMP280_calculate+0x68>)
 8004ee2:	6892      	ldr	r2, [r2, #8]
 8004ee4:	4611      	mov	r1, r2
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f7ff ff5a 	bl	8004da0 <BMP280_measureH>
 8004eec:	4603      	mov	r3, r0
 8004eee:	461a      	mov	r2, r3
 8004ef0:	4b06      	ldr	r3, [pc, #24]	@ (8004f0c <BMP280_calculate+0x68>)
 8004ef2:	821a      	strh	r2, [r3, #16]

	if(BMP280.Barometric_Altitude > BMP280.Max_Altitude) BMP280.Max_Altitude = BMP280.Barometric_Altitude;
 8004ef4:	4b05      	ldr	r3, [pc, #20]	@ (8004f0c <BMP280_calculate+0x68>)
 8004ef6:	8a1a      	ldrh	r2, [r3, #16]
 8004ef8:	4b04      	ldr	r3, [pc, #16]	@ (8004f0c <BMP280_calculate+0x68>)
 8004efa:	8a5b      	ldrh	r3, [r3, #18]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d903      	bls.n	8004f08 <BMP280_calculate+0x64>
 8004f00:	4b02      	ldr	r3, [pc, #8]	@ (8004f0c <BMP280_calculate+0x68>)
 8004f02:	8a1a      	ldrh	r2, [r3, #16]
 8004f04:	4b01      	ldr	r3, [pc, #4]	@ (8004f0c <BMP280_calculate+0x68>)
 8004f06:	825a      	strh	r2, [r3, #18]
}
 8004f08:	bf00      	nop
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	24001448 	.word	0x24001448
 8004f10:	24001474 	.word	0x24001474
 8004f14:	24001478 	.word	0x24001478

08004f18 <bno055_delay>:

BNO_CurrentState_e BNO_CurrentState = Init;

IMU_t IMU;

void bno055_delay(uint8_t time) {
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	4603      	mov	r3, r0
 8004f20:	71fb      	strb	r3, [r7, #7]
	BNO_DelayCounter += time;
 8004f22:	4b06      	ldr	r3, [pc, #24]	@ (8004f3c <bno055_delay+0x24>)
 8004f24:	781a      	ldrb	r2, [r3, #0]
 8004f26:	79fb      	ldrb	r3, [r7, #7]
 8004f28:	4413      	add	r3, r2
 8004f2a:	b2da      	uxtb	r2, r3
 8004f2c:	4b03      	ldr	r3, [pc, #12]	@ (8004f3c <bno055_delay+0x24>)
 8004f2e:	701a      	strb	r2, [r3, #0]
}
 8004f30:	bf00      	nop
 8004f32:	370c      	adds	r7, #12
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr
 8004f3c:	24001583 	.word	0x24001583

08004f40 <BNO_Read>:

HAL_StatusTypeDef BNO_Read(uint8_t Address,uint8_t Size){
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	4603      	mov	r3, r0
 8004f48:	460a      	mov	r2, r1
 8004f4a:	71fb      	strb	r3, [r7, #7]
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	71bb      	strb	r3, [r7, #6]
	uint8_t ReadCommand[4] = {0xAA, 0x01, Address, Size};
 8004f50:	23aa      	movs	r3, #170	@ 0xaa
 8004f52:	723b      	strb	r3, [r7, #8]
 8004f54:	2301      	movs	r3, #1
 8004f56:	727b      	strb	r3, [r7, #9]
 8004f58:	79fb      	ldrb	r3, [r7, #7]
 8004f5a:	72bb      	strb	r3, [r7, #10]
 8004f5c:	79bb      	ldrb	r3, [r7, #6]
 8004f5e:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef uartError;

	BNO_RxBuffer[0] = Address;
 8004f60:	4a08      	ldr	r2, [pc, #32]	@ (8004f84 <BNO_Read+0x44>)
 8004f62:	79fb      	ldrb	r3, [r7, #7]
 8004f64:	7013      	strb	r3, [r2, #0]

	uartError = HAL_UART_Transmit(&huart3, ReadCommand, 4,100);
 8004f66:	f107 0108 	add.w	r1, r7, #8
 8004f6a:	2364      	movs	r3, #100	@ 0x64
 8004f6c:	2204      	movs	r2, #4
 8004f6e:	4806      	ldr	r0, [pc, #24]	@ (8004f88 <BNO_Read+0x48>)
 8004f70:	f00a fc36 	bl	800f7e0 <HAL_UART_Transmit>
 8004f74:	4603      	mov	r3, r0
 8004f76:	73fb      	strb	r3, [r7, #15]
	return uartError;
 8004f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3710      	adds	r7, #16
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	24001480 	.word	0x24001480
 8004f88:	240011b8 	.word	0x240011b8

08004f8c <BNO_Write>:

HAL_StatusTypeDef BNO_Write(uint8_t Address,uint8_t Data){
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	4603      	mov	r3, r0
 8004f94:	460a      	mov	r2, r1
 8004f96:	71fb      	strb	r3, [r7, #7]
 8004f98:	4613      	mov	r3, r2
 8004f9a:	71bb      	strb	r3, [r7, #6]
	uint8_t WriteCommand[5];
	HAL_StatusTypeDef uartError;

	WriteCommand[0] = 0xAA;
 8004f9c:	23aa      	movs	r3, #170	@ 0xaa
 8004f9e:	723b      	strb	r3, [r7, #8]
	WriteCommand[1] = 0x00;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	727b      	strb	r3, [r7, #9]
	WriteCommand[2] = Address;
 8004fa4:	79fb      	ldrb	r3, [r7, #7]
 8004fa6:	72bb      	strb	r3, [r7, #10]
	WriteCommand[3] = 1;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	72fb      	strb	r3, [r7, #11]
	WriteCommand[4] = Data;
 8004fac:	79bb      	ldrb	r3, [r7, #6]
 8004fae:	733b      	strb	r3, [r7, #12]

	uartError = HAL_UART_Transmit(&huart3, WriteCommand,5,100);
 8004fb0:	f107 0108 	add.w	r1, r7, #8
 8004fb4:	2364      	movs	r3, #100	@ 0x64
 8004fb6:	2205      	movs	r2, #5
 8004fb8:	4804      	ldr	r0, [pc, #16]	@ (8004fcc <BNO_Write+0x40>)
 8004fba:	f00a fc11 	bl	800f7e0 <HAL_UART_Transmit>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	73fb      	strb	r3, [r7, #15]
	return uartError;
 8004fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3710      	adds	r7, #16
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	240011b8 	.word	0x240011b8

08004fd0 <BNO_Write_MB>:

HAL_StatusTypeDef BNO_Write_MB(uint8_t Address,uint8_t Size, uint8_t *pData){
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b0c4      	sub	sp, #272	@ 0x110
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004fda:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004fde:	601a      	str	r2, [r3, #0]
 8004fe0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004fe4:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8004fe8:	4602      	mov	r2, r0
 8004fea:	701a      	strb	r2, [r3, #0]
 8004fec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004ff0:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8004ff4:	460a      	mov	r2, r1
 8004ff6:	701a      	strb	r2, [r3, #0]
    uint8_t WriteCommand[255];
    HAL_StatusTypeDef uartError;

    WriteCommand[0] = 0xAA;
 8004ff8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004ffc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005000:	22aa      	movs	r2, #170	@ 0xaa
 8005002:	701a      	strb	r2, [r3, #0]
    WriteCommand[1] = 0x00;
 8005004:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005008:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800500c:	2200      	movs	r2, #0
 800500e:	705a      	strb	r2, [r3, #1]
    WriteCommand[2] = Address;
 8005010:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005014:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005018:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800501c:	f2a2 1209 	subw	r2, r2, #265	@ 0x109
 8005020:	7812      	ldrb	r2, [r2, #0]
 8005022:	709a      	strb	r2, [r3, #2]
    WriteCommand[3] = Size;
 8005024:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005028:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800502c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8005030:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8005034:	7812      	ldrb	r2, [r2, #0]
 8005036:	70da      	strb	r2, [r3, #3]

    for (uint8_t n = 0; n < Size; ++n) {
 8005038:	2300      	movs	r3, #0
 800503a:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800503e:	e015      	b.n	800506c <BNO_Write_MB+0x9c>
        WriteCommand[n + 4] = pData[n];
 8005040:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8005044:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8005048:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800504c:	6812      	ldr	r2, [r2, #0]
 800504e:	441a      	add	r2, r3
 8005050:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8005054:	3304      	adds	r3, #4
 8005056:	7811      	ldrb	r1, [r2, #0]
 8005058:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800505c:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8005060:	54d1      	strb	r1, [r2, r3]
    for (uint8_t n = 0; n < Size; ++n) {
 8005062:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8005066:	3301      	adds	r3, #1
 8005068:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800506c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005070:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8005074:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	429a      	cmp	r2, r3
 800507c:	d3e0      	bcc.n	8005040 <BNO_Write_MB+0x70>
    }

    uartError = HAL_UART_Transmit(&huart3, WriteCommand, (Size + 4),100);
 800507e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005082:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	b29b      	uxth	r3, r3
 800508a:	3304      	adds	r3, #4
 800508c:	b29a      	uxth	r2, r3
 800508e:	f107 010c 	add.w	r1, r7, #12
 8005092:	2364      	movs	r3, #100	@ 0x64
 8005094:	4806      	ldr	r0, [pc, #24]	@ (80050b0 <BNO_Write_MB+0xe0>)
 8005096:	f00a fba3 	bl	800f7e0 <HAL_UART_Transmit>
 800509a:	4603      	mov	r3, r0
 800509c:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
    return uartError;
 80050a0:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	bf00      	nop
 80050b0:	240011b8 	.word	0x240011b8

080050b4 <BNO_Page0Adress>:

void BNO_Page0Adress(void){
 80050b4:	b480      	push	{r7}
 80050b6:	af00      	add	r7, sp, #0
	switch (BNO_RxBuffer[0]) {
 80050b8:	4ba6      	ldr	r3, [pc, #664]	@ (8005354 <BNO_Page0Adress+0x2a0>)
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	2b55      	cmp	r3, #85	@ 0x55
 80050be:	f300 8247 	bgt.w	8005550 <BNO_Page0Adress+0x49c>
 80050c2:	2b35      	cmp	r3, #53	@ 0x35
 80050c4:	da0a      	bge.n	80050dc <BNO_Page0Adress+0x28>
 80050c6:	2b08      	cmp	r3, #8
 80050c8:	f000 814a 	beq.w	8005360 <BNO_Page0Adress+0x2ac>
 80050cc:	2b08      	cmp	r3, #8
 80050ce:	f300 823f 	bgt.w	8005550 <BNO_Page0Adress+0x49c>
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d04c      	beq.n	8005170 <BNO_Page0Adress+0xbc>
 80050d6:	2b07      	cmp	r3, #7
 80050d8:	d064      	beq.n	80051a4 <BNO_Page0Adress+0xf0>
			IMU.Roll = ((float)((int16_t)((BNO_RxBuffer[24] << 8) | BNO_RxBuffer[23])))/16;

			BNO_ErrorHandler = ReadSucces;
			break;
		default:
			break;
 80050da:	e239      	b.n	8005550 <BNO_Page0Adress+0x49c>
	switch (BNO_RxBuffer[0]) {
 80050dc:	3b35      	subs	r3, #53	@ 0x35
 80050de:	2b20      	cmp	r3, #32
 80050e0:	f200 8236 	bhi.w	8005550 <BNO_Page0Adress+0x49c>
 80050e4:	a201      	add	r2, pc, #4	@ (adr r2, 80050ec <BNO_Page0Adress+0x38>)
 80050e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ea:	bf00      	nop
 80050ec:	080051ed 	.word	0x080051ed
 80050f0:	08005551 	.word	0x08005551
 80050f4:	08005551 	.word	0x08005551
 80050f8:	08005551 	.word	0x08005551
 80050fc:	080051c9 	.word	0x080051c9
 8005100:	08005551 	.word	0x08005551
 8005104:	080051b7 	.word	0x080051b7
 8005108:	08005551 	.word	0x08005551
 800510c:	080051db 	.word	0x080051db
 8005110:	08005551 	.word	0x08005551
 8005114:	08005551 	.word	0x08005551
 8005118:	08005551 	.word	0x08005551
 800511c:	08005551 	.word	0x08005551
 8005120:	08005551 	.word	0x08005551
 8005124:	08005551 	.word	0x08005551
 8005128:	08005551 	.word	0x08005551
 800512c:	08005551 	.word	0x08005551
 8005130:	08005551 	.word	0x08005551
 8005134:	08005551 	.word	0x08005551
 8005138:	08005551 	.word	0x08005551
 800513c:	08005551 	.word	0x08005551
 8005140:	08005551 	.word	0x08005551
 8005144:	08005551 	.word	0x08005551
 8005148:	08005551 	.word	0x08005551
 800514c:	08005551 	.word	0x08005551
 8005150:	08005551 	.word	0x08005551
 8005154:	08005551 	.word	0x08005551
 8005158:	08005551 	.word	0x08005551
 800515c:	08005551 	.word	0x08005551
 8005160:	08005551 	.word	0x08005551
 8005164:	08005551 	.word	0x08005551
 8005168:	08005551 	.word	0x08005551
 800516c:	08005245 	.word	0x08005245
			if(BNO_RxBuffer[1] != 160) return;
 8005170:	4b78      	ldr	r3, [pc, #480]	@ (8005354 <BNO_Page0Adress+0x2a0>)
 8005172:	785b      	ldrb	r3, [r3, #1]
 8005174:	2ba0      	cmp	r3, #160	@ 0xa0
 8005176:	f040 81ed 	bne.w	8005554 <BNO_Page0Adress+0x4a0>
			IMU.ID = BNO_RxBuffer[1];
 800517a:	4b76      	ldr	r3, [pc, #472]	@ (8005354 <BNO_Page0Adress+0x2a0>)
 800517c:	785a      	ldrb	r2, [r3, #1]
 800517e:	4b76      	ldr	r3, [pc, #472]	@ (8005358 <BNO_Page0Adress+0x2a4>)
 8005180:	701a      	strb	r2, [r3, #0]
			IMU.ACC.ID = BNO_RxBuffer[2];
 8005182:	4b74      	ldr	r3, [pc, #464]	@ (8005354 <BNO_Page0Adress+0x2a0>)
 8005184:	789a      	ldrb	r2, [r3, #2]
 8005186:	4b74      	ldr	r3, [pc, #464]	@ (8005358 <BNO_Page0Adress+0x2a4>)
 8005188:	711a      	strb	r2, [r3, #4]
			IMU.MAG.ID = BNO_RxBuffer[3];
 800518a:	4b72      	ldr	r3, [pc, #456]	@ (8005354 <BNO_Page0Adress+0x2a0>)
 800518c:	78da      	ldrb	r2, [r3, #3]
 800518e:	4b72      	ldr	r3, [pc, #456]	@ (8005358 <BNO_Page0Adress+0x2a4>)
 8005190:	751a      	strb	r2, [r3, #20]
			IMU.GYR.ID = BNO_RxBuffer[4];
 8005192:	4b70      	ldr	r3, [pc, #448]	@ (8005354 <BNO_Page0Adress+0x2a0>)
 8005194:	791a      	ldrb	r2, [r3, #4]
 8005196:	4b70      	ldr	r3, [pc, #448]	@ (8005358 <BNO_Page0Adress+0x2a4>)
 8005198:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			BNO_ErrorHandler = ReadSucces;
 800519c:	4b6f      	ldr	r3, [pc, #444]	@ (800535c <BNO_Page0Adress+0x2a8>)
 800519e:	220b      	movs	r2, #11
 80051a0:	701a      	strb	r2, [r3, #0]
			break;
 80051a2:	e1d8      	b.n	8005556 <BNO_Page0Adress+0x4a2>
			IMU.Page = BNO_RxBuffer[1];
 80051a4:	4b6b      	ldr	r3, [pc, #428]	@ (8005354 <BNO_Page0Adress+0x2a0>)
 80051a6:	785a      	ldrb	r2, [r3, #1]
 80051a8:	4b6b      	ldr	r3, [pc, #428]	@ (8005358 <BNO_Page0Adress+0x2a4>)
 80051aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
			BNO_ErrorHandler = ReadSucces;
 80051ae:	4b6b      	ldr	r3, [pc, #428]	@ (800535c <BNO_Page0Adress+0x2a8>)
 80051b0:	220b      	movs	r2, #11
 80051b2:	701a      	strb	r2, [r3, #0]
			break;
 80051b4:	e1cf      	b.n	8005556 <BNO_Page0Adress+0x4a2>
			IMU.Unit_Select = BNO_RxBuffer[1];
 80051b6:	4b67      	ldr	r3, [pc, #412]	@ (8005354 <BNO_Page0Adress+0x2a0>)
 80051b8:	785a      	ldrb	r2, [r3, #1]
 80051ba:	4b67      	ldr	r3, [pc, #412]	@ (8005358 <BNO_Page0Adress+0x2a4>)
 80051bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
			BNO_ErrorHandler = ReadSucces;
 80051c0:	4b66      	ldr	r3, [pc, #408]	@ (800535c <BNO_Page0Adress+0x2a8>)
 80051c2:	220b      	movs	r2, #11
 80051c4:	701a      	strb	r2, [r3, #0]
			break;
 80051c6:	e1c6      	b.n	8005556 <BNO_Page0Adress+0x4a2>
			IMU.System_Status = BNO_RxBuffer[1];
 80051c8:	4b62      	ldr	r3, [pc, #392]	@ (8005354 <BNO_Page0Adress+0x2a0>)
 80051ca:	785a      	ldrb	r2, [r3, #1]
 80051cc:	4b62      	ldr	r3, [pc, #392]	@ (8005358 <BNO_Page0Adress+0x2a4>)
 80051ce:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
			BNO_ErrorHandler = ReadSucces;
 80051d2:	4b62      	ldr	r3, [pc, #392]	@ (800535c <BNO_Page0Adress+0x2a8>)
 80051d4:	220b      	movs	r2, #11
 80051d6:	701a      	strb	r2, [r3, #0]
			break;
 80051d8:	e1bd      	b.n	8005556 <BNO_Page0Adress+0x4a2>
			IMU.Op_Mode = BNO_RxBuffer[1];
 80051da:	4b5e      	ldr	r3, [pc, #376]	@ (8005354 <BNO_Page0Adress+0x2a0>)
 80051dc:	785a      	ldrb	r2, [r3, #1]
 80051de:	4b5e      	ldr	r3, [pc, #376]	@ (8005358 <BNO_Page0Adress+0x2a4>)
 80051e0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
			BNO_ErrorHandler = ReadSucces;
 80051e4:	4b5d      	ldr	r3, [pc, #372]	@ (800535c <BNO_Page0Adress+0x2a8>)
 80051e6:	220b      	movs	r2, #11
 80051e8:	701a      	strb	r2, [r3, #0]
			break;
 80051ea:	e1b4      	b.n	8005556 <BNO_Page0Adress+0x4a2>
			IMU.CalSatus.Full = BNO_RxBuffer[1];
 80051ec:	4b59      	ldr	r3, [pc, #356]	@ (8005354 <BNO_Page0Adress+0x2a0>)
 80051ee:	785a      	ldrb	r2, [r3, #1]
 80051f0:	4b59      	ldr	r3, [pc, #356]	@ (8005358 <BNO_Page0Adress+0x2a4>)
 80051f2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			IMU.CalSatus.Sys = (BNO_RxBuffer[1] >> 6) & 0x03;
 80051f6:	4b57      	ldr	r3, [pc, #348]	@ (8005354 <BNO_Page0Adress+0x2a0>)
 80051f8:	785b      	ldrb	r3, [r3, #1]
 80051fa:	099b      	lsrs	r3, r3, #6
 80051fc:	b2da      	uxtb	r2, r3
 80051fe:	4b56      	ldr	r3, [pc, #344]	@ (8005358 <BNO_Page0Adress+0x2a4>)
 8005200:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			IMU.CalSatus.Gyr = (BNO_RxBuffer[1] >> 4) & 0x03;
 8005204:	4b53      	ldr	r3, [pc, #332]	@ (8005354 <BNO_Page0Adress+0x2a0>)
 8005206:	785b      	ldrb	r3, [r3, #1]
 8005208:	091b      	lsrs	r3, r3, #4
 800520a:	b2db      	uxtb	r3, r3
 800520c:	f003 0303 	and.w	r3, r3, #3
 8005210:	b2da      	uxtb	r2, r3
 8005212:	4b51      	ldr	r3, [pc, #324]	@ (8005358 <BNO_Page0Adress+0x2a4>)
 8005214:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
			IMU.CalSatus.Acc = (BNO_RxBuffer[1] >> 2) & 0x03;
 8005218:	4b4e      	ldr	r3, [pc, #312]	@ (8005354 <BNO_Page0Adress+0x2a0>)
 800521a:	785b      	ldrb	r3, [r3, #1]
 800521c:	089b      	lsrs	r3, r3, #2
 800521e:	b2db      	uxtb	r3, r3
 8005220:	f003 0303 	and.w	r3, r3, #3
 8005224:	b2da      	uxtb	r2, r3
 8005226:	4b4c      	ldr	r3, [pc, #304]	@ (8005358 <BNO_Page0Adress+0x2a4>)
 8005228:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
			IMU.CalSatus.Mag = BNO_RxBuffer[1] & 0x03;
 800522c:	4b49      	ldr	r3, [pc, #292]	@ (8005354 <BNO_Page0Adress+0x2a0>)
 800522e:	785b      	ldrb	r3, [r3, #1]
 8005230:	f003 0303 	and.w	r3, r3, #3
 8005234:	b2da      	uxtb	r2, r3
 8005236:	4b48      	ldr	r3, [pc, #288]	@ (8005358 <BNO_Page0Adress+0x2a4>)
 8005238:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			BNO_ErrorHandler = ReadSucces;
 800523c:	4b47      	ldr	r3, [pc, #284]	@ (800535c <BNO_Page0Adress+0x2a8>)
 800523e:	220b      	movs	r2, #11
 8005240:	701a      	strb	r2, [r3, #0]
			break;
 8005242:	e188      	b.n	8005556 <BNO_Page0Adress+0x4a2>
			IMU.Calibration_Data.offset.accel.x = (int16_t)((BNO_RxBuffer[2] << 8) | BNO_RxBuffer[1]);
 8005244:	4b43      	ldr	r3, [pc, #268]	@ (8005354 <BNO_Page0Adress+0x2a0>)
 8005246:	789b      	ldrb	r3, [r3, #2]
 8005248:	021b      	lsls	r3, r3, #8
 800524a:	b21a      	sxth	r2, r3
 800524c:	4b41      	ldr	r3, [pc, #260]	@ (8005354 <BNO_Page0Adress+0x2a0>)
 800524e:	785b      	ldrb	r3, [r3, #1]
 8005250:	b21b      	sxth	r3, r3
 8005252:	4313      	orrs	r3, r2
 8005254:	b21a      	sxth	r2, r3
 8005256:	4b40      	ldr	r3, [pc, #256]	@ (8005358 <BNO_Page0Adress+0x2a4>)
 8005258:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
			IMU.Calibration_Data.offset.accel.y = (int16_t)((BNO_RxBuffer[4] << 8) | BNO_RxBuffer[3]);
 800525c:	4b3d      	ldr	r3, [pc, #244]	@ (8005354 <BNO_Page0Adress+0x2a0>)
 800525e:	791b      	ldrb	r3, [r3, #4]
 8005260:	021b      	lsls	r3, r3, #8
 8005262:	b21a      	sxth	r2, r3
 8005264:	4b3b      	ldr	r3, [pc, #236]	@ (8005354 <BNO_Page0Adress+0x2a0>)
 8005266:	78db      	ldrb	r3, [r3, #3]
 8005268:	b21b      	sxth	r3, r3
 800526a:	4313      	orrs	r3, r2
 800526c:	b21a      	sxth	r2, r3
 800526e:	4b3a      	ldr	r3, [pc, #232]	@ (8005358 <BNO_Page0Adress+0x2a4>)
 8005270:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
			IMU.Calibration_Data.offset.accel.z = (int16_t)((BNO_RxBuffer[6] << 8) | BNO_RxBuffer[5]);
 8005274:	4b37      	ldr	r3, [pc, #220]	@ (8005354 <BNO_Page0Adress+0x2a0>)
 8005276:	799b      	ldrb	r3, [r3, #6]
 8005278:	021b      	lsls	r3, r3, #8
 800527a:	b21a      	sxth	r2, r3
 800527c:	4b35      	ldr	r3, [pc, #212]	@ (8005354 <BNO_Page0Adress+0x2a0>)
 800527e:	795b      	ldrb	r3, [r3, #5]
 8005280:	b21b      	sxth	r3, r3
 8005282:	4313      	orrs	r3, r2
 8005284:	b21a      	sxth	r2, r3
 8005286:	4b34      	ldr	r3, [pc, #208]	@ (8005358 <BNO_Page0Adress+0x2a4>)
 8005288:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
			IMU.Calibration_Data.offset.mag.x = (int16_t)((BNO_RxBuffer[8] << 8) | BNO_RxBuffer[7]);
 800528c:	4b31      	ldr	r3, [pc, #196]	@ (8005354 <BNO_Page0Adress+0x2a0>)
 800528e:	7a1b      	ldrb	r3, [r3, #8]
 8005290:	021b      	lsls	r3, r3, #8
 8005292:	b21a      	sxth	r2, r3
 8005294:	4b2f      	ldr	r3, [pc, #188]	@ (8005354 <BNO_Page0Adress+0x2a0>)
 8005296:	79db      	ldrb	r3, [r3, #7]
 8005298:	b21b      	sxth	r3, r3
 800529a:	4313      	orrs	r3, r2
 800529c:	b21a      	sxth	r2, r3
 800529e:	4b2e      	ldr	r3, [pc, #184]	@ (8005358 <BNO_Page0Adress+0x2a4>)
 80052a0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
			IMU.Calibration_Data.offset.mag.y = (int16_t)((BNO_RxBuffer[10] << 8) | BNO_RxBuffer[9]);
 80052a4:	4b2b      	ldr	r3, [pc, #172]	@ (8005354 <BNO_Page0Adress+0x2a0>)
 80052a6:	7a9b      	ldrb	r3, [r3, #10]
 80052a8:	021b      	lsls	r3, r3, #8
 80052aa:	b21a      	sxth	r2, r3
 80052ac:	4b29      	ldr	r3, [pc, #164]	@ (8005354 <BNO_Page0Adress+0x2a0>)
 80052ae:	7a5b      	ldrb	r3, [r3, #9]
 80052b0:	b21b      	sxth	r3, r3
 80052b2:	4313      	orrs	r3, r2
 80052b4:	b21a      	sxth	r2, r3
 80052b6:	4b28      	ldr	r3, [pc, #160]	@ (8005358 <BNO_Page0Adress+0x2a4>)
 80052b8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
			IMU.Calibration_Data.offset.mag.z = (int16_t)((BNO_RxBuffer[12] << 8) | BNO_RxBuffer[11]);
 80052bc:	4b25      	ldr	r3, [pc, #148]	@ (8005354 <BNO_Page0Adress+0x2a0>)
 80052be:	7b1b      	ldrb	r3, [r3, #12]
 80052c0:	021b      	lsls	r3, r3, #8
 80052c2:	b21a      	sxth	r2, r3
 80052c4:	4b23      	ldr	r3, [pc, #140]	@ (8005354 <BNO_Page0Adress+0x2a0>)
 80052c6:	7adb      	ldrb	r3, [r3, #11]
 80052c8:	b21b      	sxth	r3, r3
 80052ca:	4313      	orrs	r3, r2
 80052cc:	b21a      	sxth	r2, r3
 80052ce:	4b22      	ldr	r3, [pc, #136]	@ (8005358 <BNO_Page0Adress+0x2a4>)
 80052d0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
			IMU.Calibration_Data.offset.gyro.x = (int16_t)((BNO_RxBuffer[14] << 8) | BNO_RxBuffer[13]);
 80052d4:	4b1f      	ldr	r3, [pc, #124]	@ (8005354 <BNO_Page0Adress+0x2a0>)
 80052d6:	7b9b      	ldrb	r3, [r3, #14]
 80052d8:	021b      	lsls	r3, r3, #8
 80052da:	b21a      	sxth	r2, r3
 80052dc:	4b1d      	ldr	r3, [pc, #116]	@ (8005354 <BNO_Page0Adress+0x2a0>)
 80052de:	7b5b      	ldrb	r3, [r3, #13]
 80052e0:	b21b      	sxth	r3, r3
 80052e2:	4313      	orrs	r3, r2
 80052e4:	b21a      	sxth	r2, r3
 80052e6:	4b1c      	ldr	r3, [pc, #112]	@ (8005358 <BNO_Page0Adress+0x2a4>)
 80052e8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
			IMU.Calibration_Data.offset.gyro.y = (int16_t)((BNO_RxBuffer[16] << 8) | BNO_RxBuffer[15]);
 80052ec:	4b19      	ldr	r3, [pc, #100]	@ (8005354 <BNO_Page0Adress+0x2a0>)
 80052ee:	7c1b      	ldrb	r3, [r3, #16]
 80052f0:	021b      	lsls	r3, r3, #8
 80052f2:	b21a      	sxth	r2, r3
 80052f4:	4b17      	ldr	r3, [pc, #92]	@ (8005354 <BNO_Page0Adress+0x2a0>)
 80052f6:	7bdb      	ldrb	r3, [r3, #15]
 80052f8:	b21b      	sxth	r3, r3
 80052fa:	4313      	orrs	r3, r2
 80052fc:	b21a      	sxth	r2, r3
 80052fe:	4b16      	ldr	r3, [pc, #88]	@ (8005358 <BNO_Page0Adress+0x2a4>)
 8005300:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
			IMU.Calibration_Data.offset.gyro.z = (int16_t)((BNO_RxBuffer[18] << 8) | BNO_RxBuffer[17]);
 8005304:	4b13      	ldr	r3, [pc, #76]	@ (8005354 <BNO_Page0Adress+0x2a0>)
 8005306:	7c9b      	ldrb	r3, [r3, #18]
 8005308:	021b      	lsls	r3, r3, #8
 800530a:	b21a      	sxth	r2, r3
 800530c:	4b11      	ldr	r3, [pc, #68]	@ (8005354 <BNO_Page0Adress+0x2a0>)
 800530e:	7c5b      	ldrb	r3, [r3, #17]
 8005310:	b21b      	sxth	r3, r3
 8005312:	4313      	orrs	r3, r2
 8005314:	b21a      	sxth	r2, r3
 8005316:	4b10      	ldr	r3, [pc, #64]	@ (8005358 <BNO_Page0Adress+0x2a4>)
 8005318:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
			IMU.Calibration_Data.radius.accel = (uint16_t)((BNO_RxBuffer[20] << 8) | BNO_RxBuffer[19]);
 800531c:	4b0d      	ldr	r3, [pc, #52]	@ (8005354 <BNO_Page0Adress+0x2a0>)
 800531e:	7d1b      	ldrb	r3, [r3, #20]
 8005320:	021b      	lsls	r3, r3, #8
 8005322:	b21a      	sxth	r2, r3
 8005324:	4b0b      	ldr	r3, [pc, #44]	@ (8005354 <BNO_Page0Adress+0x2a0>)
 8005326:	7cdb      	ldrb	r3, [r3, #19]
 8005328:	b21b      	sxth	r3, r3
 800532a:	4313      	orrs	r3, r2
 800532c:	b21b      	sxth	r3, r3
 800532e:	b29a      	uxth	r2, r3
 8005330:	4b09      	ldr	r3, [pc, #36]	@ (8005358 <BNO_Page0Adress+0x2a4>)
 8005332:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
			IMU.Calibration_Data.radius.mag   = (uint16_t)((BNO_RxBuffer[22] << 8) | BNO_RxBuffer[21]);
 8005336:	4b07      	ldr	r3, [pc, #28]	@ (8005354 <BNO_Page0Adress+0x2a0>)
 8005338:	7d9b      	ldrb	r3, [r3, #22]
 800533a:	021b      	lsls	r3, r3, #8
 800533c:	b21a      	sxth	r2, r3
 800533e:	4b05      	ldr	r3, [pc, #20]	@ (8005354 <BNO_Page0Adress+0x2a0>)
 8005340:	7d5b      	ldrb	r3, [r3, #21]
 8005342:	b21b      	sxth	r3, r3
 8005344:	4313      	orrs	r3, r2
 8005346:	b21b      	sxth	r3, r3
 8005348:	b29a      	uxth	r2, r3
 800534a:	4b03      	ldr	r3, [pc, #12]	@ (8005358 <BNO_Page0Adress+0x2a4>)
 800534c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
			break;
 8005350:	e101      	b.n	8005556 <BNO_Page0Adress+0x4a2>
 8005352:	bf00      	nop
 8005354:	24001480 	.word	0x24001480
 8005358:	24001588 	.word	0x24001588
 800535c:	24001581 	.word	0x24001581
			IMU.ACC.x = ((float)((int16_t)((BNO_RxBuffer[2] << 8) | BNO_RxBuffer[1])))/100;
 8005360:	4b7f      	ldr	r3, [pc, #508]	@ (8005560 <BNO_Page0Adress+0x4ac>)
 8005362:	789b      	ldrb	r3, [r3, #2]
 8005364:	021b      	lsls	r3, r3, #8
 8005366:	b21a      	sxth	r2, r3
 8005368:	4b7d      	ldr	r3, [pc, #500]	@ (8005560 <BNO_Page0Adress+0x4ac>)
 800536a:	785b      	ldrb	r3, [r3, #1]
 800536c:	b21b      	sxth	r3, r3
 800536e:	4313      	orrs	r3, r2
 8005370:	b21b      	sxth	r3, r3
 8005372:	ee07 3a90 	vmov	s15, r3
 8005376:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800537a:	eddf 6a7a 	vldr	s13, [pc, #488]	@ 8005564 <BNO_Page0Adress+0x4b0>
 800537e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005382:	4b79      	ldr	r3, [pc, #484]	@ (8005568 <BNO_Page0Adress+0x4b4>)
 8005384:	edc3 7a02 	vstr	s15, [r3, #8]
			IMU.ACC.y = ((float)((int16_t)((BNO_RxBuffer[4] << 8) | BNO_RxBuffer[3])))/100;
 8005388:	4b75      	ldr	r3, [pc, #468]	@ (8005560 <BNO_Page0Adress+0x4ac>)
 800538a:	791b      	ldrb	r3, [r3, #4]
 800538c:	021b      	lsls	r3, r3, #8
 800538e:	b21a      	sxth	r2, r3
 8005390:	4b73      	ldr	r3, [pc, #460]	@ (8005560 <BNO_Page0Adress+0x4ac>)
 8005392:	78db      	ldrb	r3, [r3, #3]
 8005394:	b21b      	sxth	r3, r3
 8005396:	4313      	orrs	r3, r2
 8005398:	b21b      	sxth	r3, r3
 800539a:	ee07 3a90 	vmov	s15, r3
 800539e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80053a2:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8005564 <BNO_Page0Adress+0x4b0>
 80053a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80053aa:	4b6f      	ldr	r3, [pc, #444]	@ (8005568 <BNO_Page0Adress+0x4b4>)
 80053ac:	edc3 7a03 	vstr	s15, [r3, #12]
			IMU.ACC.z = ((float)((int16_t)((BNO_RxBuffer[6] << 8) | BNO_RxBuffer[5])))/100;
 80053b0:	4b6b      	ldr	r3, [pc, #428]	@ (8005560 <BNO_Page0Adress+0x4ac>)
 80053b2:	799b      	ldrb	r3, [r3, #6]
 80053b4:	021b      	lsls	r3, r3, #8
 80053b6:	b21a      	sxth	r2, r3
 80053b8:	4b69      	ldr	r3, [pc, #420]	@ (8005560 <BNO_Page0Adress+0x4ac>)
 80053ba:	795b      	ldrb	r3, [r3, #5]
 80053bc:	b21b      	sxth	r3, r3
 80053be:	4313      	orrs	r3, r2
 80053c0:	b21b      	sxth	r3, r3
 80053c2:	ee07 3a90 	vmov	s15, r3
 80053c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80053ca:	eddf 6a66 	vldr	s13, [pc, #408]	@ 8005564 <BNO_Page0Adress+0x4b0>
 80053ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80053d2:	4b65      	ldr	r3, [pc, #404]	@ (8005568 <BNO_Page0Adress+0x4b4>)
 80053d4:	edc3 7a04 	vstr	s15, [r3, #16]
			IMU.MAG.x = ((float)((int16_t)((BNO_RxBuffer[8] << 8) | BNO_RxBuffer[7])))/16;
 80053d8:	4b61      	ldr	r3, [pc, #388]	@ (8005560 <BNO_Page0Adress+0x4ac>)
 80053da:	7a1b      	ldrb	r3, [r3, #8]
 80053dc:	021b      	lsls	r3, r3, #8
 80053de:	b21a      	sxth	r2, r3
 80053e0:	4b5f      	ldr	r3, [pc, #380]	@ (8005560 <BNO_Page0Adress+0x4ac>)
 80053e2:	79db      	ldrb	r3, [r3, #7]
 80053e4:	b21b      	sxth	r3, r3
 80053e6:	4313      	orrs	r3, r2
 80053e8:	b21b      	sxth	r3, r3
 80053ea:	ee07 3a90 	vmov	s15, r3
 80053ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80053f2:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80053f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80053fa:	4b5b      	ldr	r3, [pc, #364]	@ (8005568 <BNO_Page0Adress+0x4b4>)
 80053fc:	edc3 7a06 	vstr	s15, [r3, #24]
			IMU.MAG.y = ((float)((int16_t)((BNO_RxBuffer[10] << 8) | BNO_RxBuffer[9])))/16;
 8005400:	4b57      	ldr	r3, [pc, #348]	@ (8005560 <BNO_Page0Adress+0x4ac>)
 8005402:	7a9b      	ldrb	r3, [r3, #10]
 8005404:	021b      	lsls	r3, r3, #8
 8005406:	b21a      	sxth	r2, r3
 8005408:	4b55      	ldr	r3, [pc, #340]	@ (8005560 <BNO_Page0Adress+0x4ac>)
 800540a:	7a5b      	ldrb	r3, [r3, #9]
 800540c:	b21b      	sxth	r3, r3
 800540e:	4313      	orrs	r3, r2
 8005410:	b21b      	sxth	r3, r3
 8005412:	ee07 3a90 	vmov	s15, r3
 8005416:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800541a:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 800541e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005422:	4b51      	ldr	r3, [pc, #324]	@ (8005568 <BNO_Page0Adress+0x4b4>)
 8005424:	edc3 7a07 	vstr	s15, [r3, #28]
			IMU.MAG.z = ((float)((int16_t)((BNO_RxBuffer[12] << 8) | BNO_RxBuffer[11])))/16;
 8005428:	4b4d      	ldr	r3, [pc, #308]	@ (8005560 <BNO_Page0Adress+0x4ac>)
 800542a:	7b1b      	ldrb	r3, [r3, #12]
 800542c:	021b      	lsls	r3, r3, #8
 800542e:	b21a      	sxth	r2, r3
 8005430:	4b4b      	ldr	r3, [pc, #300]	@ (8005560 <BNO_Page0Adress+0x4ac>)
 8005432:	7adb      	ldrb	r3, [r3, #11]
 8005434:	b21b      	sxth	r3, r3
 8005436:	4313      	orrs	r3, r2
 8005438:	b21b      	sxth	r3, r3
 800543a:	ee07 3a90 	vmov	s15, r3
 800543e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005442:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8005446:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800544a:	4b47      	ldr	r3, [pc, #284]	@ (8005568 <BNO_Page0Adress+0x4b4>)
 800544c:	edc3 7a08 	vstr	s15, [r3, #32]
			IMU.GYR.x = ((float)((int16_t)((BNO_RxBuffer[14] << 8) | BNO_RxBuffer[13])))/16;
 8005450:	4b43      	ldr	r3, [pc, #268]	@ (8005560 <BNO_Page0Adress+0x4ac>)
 8005452:	7b9b      	ldrb	r3, [r3, #14]
 8005454:	021b      	lsls	r3, r3, #8
 8005456:	b21a      	sxth	r2, r3
 8005458:	4b41      	ldr	r3, [pc, #260]	@ (8005560 <BNO_Page0Adress+0x4ac>)
 800545a:	7b5b      	ldrb	r3, [r3, #13]
 800545c:	b21b      	sxth	r3, r3
 800545e:	4313      	orrs	r3, r2
 8005460:	b21b      	sxth	r3, r3
 8005462:	ee07 3a90 	vmov	s15, r3
 8005466:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800546a:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 800546e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005472:	4b3d      	ldr	r3, [pc, #244]	@ (8005568 <BNO_Page0Adress+0x4b4>)
 8005474:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
			IMU.GYR.y = -((float)((int16_t)((BNO_RxBuffer[16] << 8) | BNO_RxBuffer[15])))/16;
 8005478:	4b39      	ldr	r3, [pc, #228]	@ (8005560 <BNO_Page0Adress+0x4ac>)
 800547a:	7c1b      	ldrb	r3, [r3, #16]
 800547c:	021b      	lsls	r3, r3, #8
 800547e:	b21a      	sxth	r2, r3
 8005480:	4b37      	ldr	r3, [pc, #220]	@ (8005560 <BNO_Page0Adress+0x4ac>)
 8005482:	7bdb      	ldrb	r3, [r3, #15]
 8005484:	b21b      	sxth	r3, r3
 8005486:	4313      	orrs	r3, r2
 8005488:	b21b      	sxth	r3, r3
 800548a:	ee07 3a90 	vmov	s15, r3
 800548e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005492:	eeb1 7a67 	vneg.f32	s14, s15
 8005496:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 800549a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800549e:	4b32      	ldr	r3, [pc, #200]	@ (8005568 <BNO_Page0Adress+0x4b4>)
 80054a0:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
			IMU.GYR.z = -((float)((int16_t)((BNO_RxBuffer[18] << 8) | BNO_RxBuffer[17])))/16;
 80054a4:	4b2e      	ldr	r3, [pc, #184]	@ (8005560 <BNO_Page0Adress+0x4ac>)
 80054a6:	7c9b      	ldrb	r3, [r3, #18]
 80054a8:	021b      	lsls	r3, r3, #8
 80054aa:	b21a      	sxth	r2, r3
 80054ac:	4b2c      	ldr	r3, [pc, #176]	@ (8005560 <BNO_Page0Adress+0x4ac>)
 80054ae:	7c5b      	ldrb	r3, [r3, #17]
 80054b0:	b21b      	sxth	r3, r3
 80054b2:	4313      	orrs	r3, r2
 80054b4:	b21b      	sxth	r3, r3
 80054b6:	ee07 3a90 	vmov	s15, r3
 80054ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054be:	eeb1 7a67 	vneg.f32	s14, s15
 80054c2:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80054c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80054ca:	4b27      	ldr	r3, [pc, #156]	@ (8005568 <BNO_Page0Adress+0x4b4>)
 80054cc:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
			IMU.Heading = ((float)((int16_t)((BNO_RxBuffer[20] << 8) | BNO_RxBuffer[19])))/16;
 80054d0:	4b23      	ldr	r3, [pc, #140]	@ (8005560 <BNO_Page0Adress+0x4ac>)
 80054d2:	7d1b      	ldrb	r3, [r3, #20]
 80054d4:	021b      	lsls	r3, r3, #8
 80054d6:	b21a      	sxth	r2, r3
 80054d8:	4b21      	ldr	r3, [pc, #132]	@ (8005560 <BNO_Page0Adress+0x4ac>)
 80054da:	7cdb      	ldrb	r3, [r3, #19]
 80054dc:	b21b      	sxth	r3, r3
 80054de:	4313      	orrs	r3, r2
 80054e0:	b21b      	sxth	r3, r3
 80054e2:	ee07 3a90 	vmov	s15, r3
 80054e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80054ea:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80054ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80054f2:	4b1d      	ldr	r3, [pc, #116]	@ (8005568 <BNO_Page0Adress+0x4b4>)
 80054f4:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
			IMU.Pitch = ((float)((int16_t)((BNO_RxBuffer[22] << 8) | BNO_RxBuffer[21])))/16;
 80054f8:	4b19      	ldr	r3, [pc, #100]	@ (8005560 <BNO_Page0Adress+0x4ac>)
 80054fa:	7d9b      	ldrb	r3, [r3, #22]
 80054fc:	021b      	lsls	r3, r3, #8
 80054fe:	b21a      	sxth	r2, r3
 8005500:	4b17      	ldr	r3, [pc, #92]	@ (8005560 <BNO_Page0Adress+0x4ac>)
 8005502:	7d5b      	ldrb	r3, [r3, #21]
 8005504:	b21b      	sxth	r3, r3
 8005506:	4313      	orrs	r3, r2
 8005508:	b21b      	sxth	r3, r3
 800550a:	ee07 3a90 	vmov	s15, r3
 800550e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005512:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8005516:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800551a:	4b13      	ldr	r3, [pc, #76]	@ (8005568 <BNO_Page0Adress+0x4b4>)
 800551c:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
			IMU.Roll = ((float)((int16_t)((BNO_RxBuffer[24] << 8) | BNO_RxBuffer[23])))/16;
 8005520:	4b0f      	ldr	r3, [pc, #60]	@ (8005560 <BNO_Page0Adress+0x4ac>)
 8005522:	7e1b      	ldrb	r3, [r3, #24]
 8005524:	021b      	lsls	r3, r3, #8
 8005526:	b21a      	sxth	r2, r3
 8005528:	4b0d      	ldr	r3, [pc, #52]	@ (8005560 <BNO_Page0Adress+0x4ac>)
 800552a:	7ddb      	ldrb	r3, [r3, #23]
 800552c:	b21b      	sxth	r3, r3
 800552e:	4313      	orrs	r3, r2
 8005530:	b21b      	sxth	r3, r3
 8005532:	ee07 3a90 	vmov	s15, r3
 8005536:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800553a:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 800553e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005542:	4b09      	ldr	r3, [pc, #36]	@ (8005568 <BNO_Page0Adress+0x4b4>)
 8005544:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
			BNO_ErrorHandler = ReadSucces;
 8005548:	4b08      	ldr	r3, [pc, #32]	@ (800556c <BNO_Page0Adress+0x4b8>)
 800554a:	220b      	movs	r2, #11
 800554c:	701a      	strb	r2, [r3, #0]
			break;
 800554e:	e002      	b.n	8005556 <BNO_Page0Adress+0x4a2>
			break;
 8005550:	bf00      	nop
 8005552:	e000      	b.n	8005556 <BNO_Page0Adress+0x4a2>
			if(BNO_RxBuffer[1] != 160) return;
 8005554:	bf00      	nop
	}
}
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr
 800555e:	bf00      	nop
 8005560:	24001480 	.word	0x24001480
 8005564:	42c80000 	.word	0x42c80000
 8005568:	24001588 	.word	0x24001588
 800556c:	24001581 	.word	0x24001581

08005570 <BNO_Page1Adress>:

void BNO_Page1Adress(void){
 8005570:	b480      	push	{r7}
 8005572:	af00      	add	r7, sp, #0
	switch (BNO_RxBuffer[0]) {
 8005574:	4b09      	ldr	r3, [pc, #36]	@ (800559c <BNO_Page1Adress+0x2c>)
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	2b07      	cmp	r3, #7
 800557a:	d108      	bne.n	800558e <BNO_Page1Adress+0x1e>
		case BNO055_PAGE_ID:
			IMU.Page = BNO_RxBuffer[1];
 800557c:	4b07      	ldr	r3, [pc, #28]	@ (800559c <BNO_Page1Adress+0x2c>)
 800557e:	785a      	ldrb	r2, [r3, #1]
 8005580:	4b07      	ldr	r3, [pc, #28]	@ (80055a0 <BNO_Page1Adress+0x30>)
 8005582:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
			BNO_ErrorHandler = ReadSucces;
 8005586:	4b07      	ldr	r3, [pc, #28]	@ (80055a4 <BNO_Page1Adress+0x34>)
 8005588:	220b      	movs	r2, #11
 800558a:	701a      	strb	r2, [r3, #0]
			break;
 800558c:	e000      	b.n	8005590 <BNO_Page1Adress+0x20>

		default:
			break;
 800558e:	bf00      	nop
	}
}
 8005590:	bf00      	nop
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr
 800559a:	bf00      	nop
 800559c:	24001480 	.word	0x24001480
 80055a0:	24001588 	.word	0x24001588
 80055a4:	24001581 	.word	0x24001581

080055a8 <BNO_EmptyingBuffer>:

void BNO_EmptyingBuffer(void){
 80055a8:	b580      	push	{r7, lr}
 80055aa:	af00      	add	r7, sp, #0
	switch (IMU.Page) {
 80055ac:	4b0a      	ldr	r3, [pc, #40]	@ (80055d8 <BNO_EmptyingBuffer+0x30>)
 80055ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d002      	beq.n	80055bc <BNO_EmptyingBuffer+0x14>
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d003      	beq.n	80055c2 <BNO_EmptyingBuffer+0x1a>
			break;
		case 1:
			BNO_Page1Adress();
			break;
		default:
			break;
 80055ba:	e005      	b.n	80055c8 <BNO_EmptyingBuffer+0x20>
			BNO_Page0Adress();
 80055bc:	f7ff fd7a 	bl	80050b4 <BNO_Page0Adress>
			break;
 80055c0:	e002      	b.n	80055c8 <BNO_EmptyingBuffer+0x20>
			BNO_Page1Adress();
 80055c2:	f7ff ffd5 	bl	8005570 <BNO_Page1Adress>
			break;
 80055c6:	bf00      	nop
	}
	memset(BNO_RxBuffer, 0, sizeof(BNO_RxBuffer));
 80055c8:	22ff      	movs	r2, #255	@ 0xff
 80055ca:	2100      	movs	r1, #0
 80055cc:	4803      	ldr	r0, [pc, #12]	@ (80055dc <BNO_EmptyingBuffer+0x34>)
 80055ce:	f012 fb5a 	bl	8017c86 <memset>
}
 80055d2:	bf00      	nop
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop
 80055d8:	24001588 	.word	0x24001588
 80055dc:	24001480 	.word	0x24001480

080055e0 <BNO_SWReset>:
		default:
			break;
	}
}

void BNO_SWReset(void){
 80055e0:	b580      	push	{r7, lr}
 80055e2:	af00      	add	r7, sp, #0
	BNO_Write(BNO055_SYS_TRIGGER,0x20);
 80055e4:	2120      	movs	r1, #32
 80055e6:	203f      	movs	r0, #63	@ 0x3f
 80055e8:	f7ff fcd0 	bl	8004f8c <BNO_Write>
	bno055_delay(70);
 80055ec:	2046      	movs	r0, #70	@ 0x46
 80055ee:	f7ff fc93 	bl	8004f18 <bno055_delay>
	IMU.ID = 0x00;
 80055f2:	4b04      	ldr	r3, [pc, #16]	@ (8005604 <BNO_SWReset+0x24>)
 80055f4:	2200      	movs	r2, #0
 80055f6:	701a      	strb	r2, [r3, #0]
	BNO_CurrentState = Configuration;
 80055f8:	4b03      	ldr	r3, [pc, #12]	@ (8005608 <BNO_SWReset+0x28>)
 80055fa:	2201      	movs	r2, #1
 80055fc:	701a      	strb	r2, [r3, #0]
}
 80055fe:	bf00      	nop
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	24001588 	.word	0x24001588
 8005608:	24001584 	.word	0x24001584

0800560c <bno055_setOperationMode>:

void bno055_setOperationMode(bno055_opmode_t mode) {
 800560c:	b580      	push	{r7, lr}
 800560e:	b082      	sub	sp, #8
 8005610:	af00      	add	r7, sp, #0
 8005612:	4603      	mov	r3, r0
 8005614:	71fb      	strb	r3, [r7, #7]
  BNO_Write(BNO055_OPR_MODE, mode);
 8005616:	79fb      	ldrb	r3, [r7, #7]
 8005618:	4619      	mov	r1, r3
 800561a:	203d      	movs	r0, #61	@ 0x3d
 800561c:	f7ff fcb6 	bl	8004f8c <BNO_Write>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8005620:	79fb      	ldrb	r3, [r7, #7]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d103      	bne.n	800562e <bno055_setOperationMode+0x22>
    bno055_delay(5);
 8005626:	2005      	movs	r0, #5
 8005628:	f7ff fc76 	bl	8004f18 <bno055_delay>
  } else {
    bno055_delay(3);
  }
}
 800562c:	e002      	b.n	8005634 <bno055_setOperationMode+0x28>
    bno055_delay(3);
 800562e:	2003      	movs	r0, #3
 8005630:	f7ff fc72 	bl	8004f18 <bno055_delay>
}
 8005634:	bf00      	nop
 8005636:	3708      	adds	r7, #8
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}

0800563c <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 800563c:	b580      	push	{r7, lr}
 800563e:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8005640:	2000      	movs	r0, #0
 8005642:	f7ff ffe3 	bl	800560c <bno055_setOperationMode>
}
 8005646:	bf00      	nop
 8005648:	bd80      	pop	{r7, pc}

0800564a <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 800564a:	b580      	push	{r7, lr}
 800564c:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 800564e:	200c      	movs	r0, #12
 8005650:	f7ff ffdc 	bl	800560c <bno055_setOperationMode>
}
 8005654:	bf00      	nop
 8005656:	bd80      	pop	{r7, pc}

08005658 <BNO_GetCalibrationData>:

void BNO_GetCalibrationData(void){
 8005658:	b580      	push	{r7, lr}
 800565a:	af00      	add	r7, sp, #0
	BNO_Read(BNO055_ACC_OFFSET_X_LSB, 22);
 800565c:	2116      	movs	r1, #22
 800565e:	2055      	movs	r0, #85	@ 0x55
 8005660:	f7ff fc6e 	bl	8004f40 <BNO_Read>
}
 8005664:	bf00      	nop
 8005666:	bd80      	pop	{r7, pc}

08005668 <BNO_SetCalibrationData>:

void BNO_SetCalibrationData(void){
 8005668:	b580      	push	{r7, lr}
 800566a:	b086      	sub	sp, #24
 800566c:	af00      	add	r7, sp, #0
	uint8_t buffer[22];

	  memcpy(&IMU.Calibration_Data.offset.accel, buffer, 6);
 800566e:	463b      	mov	r3, r7
 8005670:	2206      	movs	r2, #6
 8005672:	4619      	mov	r1, r3
 8005674:	4814      	ldr	r0, [pc, #80]	@ (80056c8 <BNO_SetCalibrationData+0x60>)
 8005676:	f012 fba0 	bl	8017dba <memcpy>
	  memcpy(&IMU.Calibration_Data.offset.mag, buffer + 6, 6);
 800567a:	463b      	mov	r3, r7
 800567c:	3306      	adds	r3, #6
 800567e:	2206      	movs	r2, #6
 8005680:	4619      	mov	r1, r3
 8005682:	4812      	ldr	r0, [pc, #72]	@ (80056cc <BNO_SetCalibrationData+0x64>)
 8005684:	f012 fb99 	bl	8017dba <memcpy>
	  memcpy(&IMU.Calibration_Data.offset.gyro, buffer + 12, 6);
 8005688:	463b      	mov	r3, r7
 800568a:	330c      	adds	r3, #12
 800568c:	2206      	movs	r2, #6
 800568e:	4619      	mov	r1, r3
 8005690:	480f      	ldr	r0, [pc, #60]	@ (80056d0 <BNO_SetCalibrationData+0x68>)
 8005692:	f012 fb92 	bl	8017dba <memcpy>
	  memcpy(&IMU.Calibration_Data.radius.accel, buffer + 18, 2);
 8005696:	463b      	mov	r3, r7
 8005698:	3312      	adds	r3, #18
 800569a:	881b      	ldrh	r3, [r3, #0]
 800569c:	b29a      	uxth	r2, r3
 800569e:	4b0d      	ldr	r3, [pc, #52]	@ (80056d4 <BNO_SetCalibrationData+0x6c>)
 80056a0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
	  memcpy(&IMU.Calibration_Data.radius.mag, buffer + 20, 2);
 80056a4:	463b      	mov	r3, r7
 80056a6:	3314      	adds	r3, #20
 80056a8:	881b      	ldrh	r3, [r3, #0]
 80056aa:	b29a      	uxth	r2, r3
 80056ac:	4b09      	ldr	r3, [pc, #36]	@ (80056d4 <BNO_SetCalibrationData+0x6c>)
 80056ae:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

	BNO_Write_MB(BNO055_ACC_OFFSET_X_LSB, 22, buffer);
 80056b2:	463b      	mov	r3, r7
 80056b4:	461a      	mov	r2, r3
 80056b6:	2116      	movs	r1, #22
 80056b8:	2055      	movs	r0, #85	@ 0x55
 80056ba:	f7ff fc89 	bl	8004fd0 <BNO_Write_MB>
}
 80056be:	bf00      	nop
 80056c0:	3718      	adds	r7, #24
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop
 80056c8:	240015de 	.word	0x240015de
 80056cc:	240015d8 	.word	0x240015d8
 80056d0:	240015d2 	.word	0x240015d2
 80056d4:	24001588 	.word	0x24001588

080056d8 <BNO_Init>:

void BNO_Init(void){
 80056d8:	b580      	push	{r7, lr}
 80056da:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(IMU_RST_GPIO_Port, IMU_RST_Pin, SET);
 80056dc:	2201      	movs	r2, #1
 80056de:	2104      	movs	r1, #4
 80056e0:	4808      	ldr	r0, [pc, #32]	@ (8005704 <BNO_Init+0x2c>)
 80056e2:	f004 fe57 	bl	800a394 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IMU_BOOT_GPIO_Port, IMU_BOOT_Pin, SET);
 80056e6:	2201      	movs	r2, #1
 80056e8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80056ec:	4806      	ldr	r0, [pc, #24]	@ (8005708 <BNO_Init+0x30>)
 80056ee:	f004 fe51 	bl	800a394 <HAL_GPIO_WritePin>

	bno055_delay(100);
 80056f2:	2064      	movs	r0, #100	@ 0x64
 80056f4:	f7ff fc10 	bl	8004f18 <bno055_delay>

	BNO_CurrentState = Reset;
 80056f8:	4b04      	ldr	r3, [pc, #16]	@ (800570c <BNO_Init+0x34>)
 80056fa:	2204      	movs	r2, #4
 80056fc:	701a      	strb	r2, [r3, #0]
}
 80056fe:	bf00      	nop
 8005700:	bd80      	pop	{r7, pc}
 8005702:	bf00      	nop
 8005704:	58020c00 	.word	0x58020c00
 8005708:	58020400 	.word	0x58020400
 800570c:	24001584 	.word	0x24001584

08005710 <BNO_Config>:

void BNO_Config(void){
 8005710:	b580      	push	{r7, lr}
 8005712:	af00      	add	r7, sp, #0
	static uint8_t ConfigFlag = 0;

	switch (ConfigFlag) {
 8005714:	4b20      	ldr	r3, [pc, #128]	@ (8005798 <BNO_Config+0x88>)
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	2b03      	cmp	r3, #3
 800571a:	d839      	bhi.n	8005790 <BNO_Config+0x80>
 800571c:	a201      	add	r2, pc, #4	@ (adr r2, 8005724 <BNO_Config+0x14>)
 800571e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005722:	bf00      	nop
 8005724:	08005735 	.word	0x08005735
 8005728:	08005745 	.word	0x08005745
 800572c:	08005751 	.word	0x08005751
 8005730:	08005773 	.word	0x08005773
		case 0:
			BNO_Write(BNO055_SYS_TRIGGER,0x00);
 8005734:	2100      	movs	r1, #0
 8005736:	203f      	movs	r0, #63	@ 0x3f
 8005738:	f7ff fc28 	bl	8004f8c <BNO_Write>
			ConfigFlag = 1;
 800573c:	4b16      	ldr	r3, [pc, #88]	@ (8005798 <BNO_Config+0x88>)
 800573e:	2201      	movs	r2, #1
 8005740:	701a      	strb	r2, [r3, #0]
			break;
 8005742:	e026      	b.n	8005792 <BNO_Config+0x82>
		case 1:
			bno055_setOperationModeConfig();
 8005744:	f7ff ff7a 	bl	800563c <bno055_setOperationModeConfig>
			ConfigFlag = 2;
 8005748:	4b13      	ldr	r3, [pc, #76]	@ (8005798 <BNO_Config+0x88>)
 800574a:	2202      	movs	r2, #2
 800574c:	701a      	strb	r2, [r3, #0]
			break;
 800574e:	e020      	b.n	8005792 <BNO_Config+0x82>
		case 2:
			BNO_Read(BNO055_OPR_MODE, 1);
 8005750:	2101      	movs	r1, #1
 8005752:	203d      	movs	r0, #61	@ 0x3d
 8005754:	f7ff fbf4 	bl	8004f40 <BNO_Read>
			if(IMU.Op_Mode == BNO055_OPERATION_MODE_CONFIG){
 8005758:	4b10      	ldr	r3, [pc, #64]	@ (800579c <BNO_Config+0x8c>)
 800575a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800575e:	2b00      	cmp	r3, #0
 8005760:	d103      	bne.n	800576a <BNO_Config+0x5a>
				ConfigFlag = 3;
 8005762:	4b0d      	ldr	r3, [pc, #52]	@ (8005798 <BNO_Config+0x88>)
 8005764:	2203      	movs	r2, #3
 8005766:	701a      	strb	r2, [r3, #0]
			}
			else ConfigFlag = 1;
			break;
 8005768:	e013      	b.n	8005792 <BNO_Config+0x82>
			else ConfigFlag = 1;
 800576a:	4b0b      	ldr	r3, [pc, #44]	@ (8005798 <BNO_Config+0x88>)
 800576c:	2201      	movs	r2, #1
 800576e:	701a      	strb	r2, [r3, #0]
			break;
 8005770:	e00f      	b.n	8005792 <BNO_Config+0x82>
		case 3:
			BNO_Read(BNO055_CHIP_ID, 4);
 8005772:	2104      	movs	r1, #4
 8005774:	2000      	movs	r0, #0
 8005776:	f7ff fbe3 	bl	8004f40 <BNO_Read>

			if(IMU.ID == BNO055_ID){
 800577a:	4b08      	ldr	r3, [pc, #32]	@ (800579c <BNO_Config+0x8c>)
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	2ba0      	cmp	r3, #160	@ 0xa0
 8005780:	d102      	bne.n	8005788 <BNO_Config+0x78>
				BNO_CurrentState = Calibration;
 8005782:	4b07      	ldr	r3, [pc, #28]	@ (80057a0 <BNO_Config+0x90>)
 8005784:	2202      	movs	r2, #2
 8005786:	701a      	strb	r2, [r3, #0]
			}
			ConfigFlag = 0;
 8005788:	4b03      	ldr	r3, [pc, #12]	@ (8005798 <BNO_Config+0x88>)
 800578a:	2200      	movs	r2, #0
 800578c:	701a      	strb	r2, [r3, #0]
			break;
 800578e:	e000      	b.n	8005792 <BNO_Config+0x82>
		default:
			break;
 8005790:	bf00      	nop
	}

}
 8005792:	bf00      	nop
 8005794:	bd80      	pop	{r7, pc}
 8005796:	bf00      	nop
 8005798:	240015e8 	.word	0x240015e8
 800579c:	24001588 	.word	0x24001588
 80057a0:	24001584 	.word	0x24001584

080057a4 <BNO_CalibrationStatus>:

void BNO_CalibrationStatus(void){
 80057a4:	b580      	push	{r7, lr}
 80057a6:	af00      	add	r7, sp, #0
	static uint8_t CalibrationFlag = 0;
	static uint8_t Calibrated = 1;

	switch (CalibrationFlag) {
 80057a8:	4b3d      	ldr	r3, [pc, #244]	@ (80058a0 <BNO_CalibrationStatus+0xfc>)
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	2b07      	cmp	r3, #7
 80057ae:	d870      	bhi.n	8005892 <BNO_CalibrationStatus+0xee>
 80057b0:	a201      	add	r2, pc, #4	@ (adr r2, 80057b8 <BNO_CalibrationStatus+0x14>)
 80057b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057b6:	bf00      	nop
 80057b8:	080057d9 	.word	0x080057d9
 80057bc:	080057e9 	.word	0x080057e9
 80057c0:	080057f5 	.word	0x080057f5
 80057c4:	0800582d 	.word	0x0800582d
 80057c8:	08005847 	.word	0x08005847
 80057cc:	08005853 	.word	0x08005853
 80057d0:	08005875 	.word	0x08005875
 80057d4:	08005887 	.word	0x08005887
		case 0:
			BNO_Write(BNO055_SYS_TRIGGER,0x00);
 80057d8:	2100      	movs	r1, #0
 80057da:	203f      	movs	r0, #63	@ 0x3f
 80057dc:	f7ff fbd6 	bl	8004f8c <BNO_Write>
			CalibrationFlag = 1;
 80057e0:	4b2f      	ldr	r3, [pc, #188]	@ (80058a0 <BNO_CalibrationStatus+0xfc>)
 80057e2:	2201      	movs	r2, #1
 80057e4:	701a      	strb	r2, [r3, #0]
			break;
 80057e6:	e059      	b.n	800589c <BNO_CalibrationStatus+0xf8>
		case 1:
			bno055_setOperationModeNDOF();
 80057e8:	f7ff ff2f 	bl	800564a <bno055_setOperationModeNDOF>
			CalibrationFlag = 2;
 80057ec:	4b2c      	ldr	r3, [pc, #176]	@ (80058a0 <BNO_CalibrationStatus+0xfc>)
 80057ee:	2202      	movs	r2, #2
 80057f0:	701a      	strb	r2, [r3, #0]
			break;
 80057f2:	e053      	b.n	800589c <BNO_CalibrationStatus+0xf8>
		case 2:
			BNO_Read(BNO055_OPR_MODE, 1);
 80057f4:	2101      	movs	r1, #1
 80057f6:	203d      	movs	r0, #61	@ 0x3d
 80057f8:	f7ff fba2 	bl	8004f40 <BNO_Read>
			if(IMU.Op_Mode == BNO055_OPERATION_MODE_NDOF){
 80057fc:	4b29      	ldr	r3, [pc, #164]	@ (80058a4 <BNO_CalibrationStatus+0x100>)
 80057fe:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8005802:	2b0c      	cmp	r3, #12
 8005804:	d10e      	bne.n	8005824 <BNO_CalibrationStatus+0x80>
				if(Calibrated){
 8005806:	4b28      	ldr	r3, [pc, #160]	@ (80058a8 <BNO_CalibrationStatus+0x104>)
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d006      	beq.n	800581c <BNO_CalibrationStatus+0x78>
					CalibrationFlag = 0;
 800580e:	4b24      	ldr	r3, [pc, #144]	@ (80058a0 <BNO_CalibrationStatus+0xfc>)
 8005810:	2200      	movs	r2, #0
 8005812:	701a      	strb	r2, [r3, #0]
					BNO_CurrentState = Operation;
 8005814:	4b25      	ldr	r3, [pc, #148]	@ (80058ac <BNO_CalibrationStatus+0x108>)
 8005816:	2203      	movs	r2, #3
 8005818:	701a      	strb	r2, [r3, #0]
				}
				else CalibrationFlag = 3;
			}
			else CalibrationFlag = 1;
			break;
 800581a:	e03f      	b.n	800589c <BNO_CalibrationStatus+0xf8>
				else CalibrationFlag = 3;
 800581c:	4b20      	ldr	r3, [pc, #128]	@ (80058a0 <BNO_CalibrationStatus+0xfc>)
 800581e:	2203      	movs	r2, #3
 8005820:	701a      	strb	r2, [r3, #0]
			break;
 8005822:	e03b      	b.n	800589c <BNO_CalibrationStatus+0xf8>
			else CalibrationFlag = 1;
 8005824:	4b1e      	ldr	r3, [pc, #120]	@ (80058a0 <BNO_CalibrationStatus+0xfc>)
 8005826:	2201      	movs	r2, #1
 8005828:	701a      	strb	r2, [r3, #0]
			break;
 800582a:	e037      	b.n	800589c <BNO_CalibrationStatus+0xf8>
		case 3:
			BNO_Read(BNO055_CALIB_STAT, 1);
 800582c:	2101      	movs	r1, #1
 800582e:	2035      	movs	r0, #53	@ 0x35
 8005830:	f7ff fb86 	bl	8004f40 <BNO_Read>
			if(IMU.CalSatus.Full == 0xFF){
 8005834:	4b1b      	ldr	r3, [pc, #108]	@ (80058a4 <BNO_CalibrationStatus+0x100>)
 8005836:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800583a:	2bff      	cmp	r3, #255	@ 0xff
 800583c:	d12d      	bne.n	800589a <BNO_CalibrationStatus+0xf6>
				CalibrationFlag = 4;
 800583e:	4b18      	ldr	r3, [pc, #96]	@ (80058a0 <BNO_CalibrationStatus+0xfc>)
 8005840:	2204      	movs	r2, #4
 8005842:	701a      	strb	r2, [r3, #0]
			}
			break;
 8005844:	e029      	b.n	800589a <BNO_CalibrationStatus+0xf6>
		case 4:
			bno055_setOperationModeConfig();
 8005846:	f7ff fef9 	bl	800563c <bno055_setOperationModeConfig>
			CalibrationFlag = 5;
 800584a:	4b15      	ldr	r3, [pc, #84]	@ (80058a0 <BNO_CalibrationStatus+0xfc>)
 800584c:	2205      	movs	r2, #5
 800584e:	701a      	strb	r2, [r3, #0]
			break;
 8005850:	e024      	b.n	800589c <BNO_CalibrationStatus+0xf8>
		case 5:
			BNO_Read(BNO055_OPR_MODE, 1);
 8005852:	2101      	movs	r1, #1
 8005854:	203d      	movs	r0, #61	@ 0x3d
 8005856:	f7ff fb73 	bl	8004f40 <BNO_Read>
			if(IMU.Op_Mode == BNO055_OPERATION_MODE_CONFIG){
 800585a:	4b12      	ldr	r3, [pc, #72]	@ (80058a4 <BNO_CalibrationStatus+0x100>)
 800585c:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8005860:	2b00      	cmp	r3, #0
 8005862:	d103      	bne.n	800586c <BNO_CalibrationStatus+0xc8>
				CalibrationFlag = 6;
 8005864:	4b0e      	ldr	r3, [pc, #56]	@ (80058a0 <BNO_CalibrationStatus+0xfc>)
 8005866:	2206      	movs	r2, #6
 8005868:	701a      	strb	r2, [r3, #0]

			}
			else CalibrationFlag = 4;
			break;
 800586a:	e017      	b.n	800589c <BNO_CalibrationStatus+0xf8>
			else CalibrationFlag = 4;
 800586c:	4b0c      	ldr	r3, [pc, #48]	@ (80058a0 <BNO_CalibrationStatus+0xfc>)
 800586e:	2204      	movs	r2, #4
 8005870:	701a      	strb	r2, [r3, #0]
			break;
 8005872:	e013      	b.n	800589c <BNO_CalibrationStatus+0xf8>
		case 6:
			BNO_GetCalibrationData();
 8005874:	f7ff fef0 	bl	8005658 <BNO_GetCalibrationData>
			Calibrated = 1;
 8005878:	4b0b      	ldr	r3, [pc, #44]	@ (80058a8 <BNO_CalibrationStatus+0x104>)
 800587a:	2201      	movs	r2, #1
 800587c:	701a      	strb	r2, [r3, #0]
			CalibrationFlag = 1;
 800587e:	4b08      	ldr	r3, [pc, #32]	@ (80058a0 <BNO_CalibrationStatus+0xfc>)
 8005880:	2201      	movs	r2, #1
 8005882:	701a      	strb	r2, [r3, #0]
			break;
 8005884:	e00a      	b.n	800589c <BNO_CalibrationStatus+0xf8>
		case 7:
			BNO_SetCalibrationData();
 8005886:	f7ff feef 	bl	8005668 <BNO_SetCalibrationData>
			CalibrationFlag = 1;
 800588a:	4b05      	ldr	r3, [pc, #20]	@ (80058a0 <BNO_CalibrationStatus+0xfc>)
 800588c:	2201      	movs	r2, #1
 800588e:	701a      	strb	r2, [r3, #0]
			break;
 8005890:	e004      	b.n	800589c <BNO_CalibrationStatus+0xf8>
		default:
			CalibrationFlag = 0;
 8005892:	4b03      	ldr	r3, [pc, #12]	@ (80058a0 <BNO_CalibrationStatus+0xfc>)
 8005894:	2200      	movs	r2, #0
 8005896:	701a      	strb	r2, [r3, #0]
			break;
 8005898:	e000      	b.n	800589c <BNO_CalibrationStatus+0xf8>
			break;
 800589a:	bf00      	nop
    	BNO_CurrentState = Operation;
    }
    else bno055_setOperationModeNDOF();
    */

}
 800589c:	bf00      	nop
 800589e:	bd80      	pop	{r7, pc}
 80058a0:	240015e9 	.word	0x240015e9
 80058a4:	24001588 	.word	0x24001588
 80058a8:	24000008 	.word	0x24000008
 80058ac:	24001584 	.word	0x24001584

080058b0 <BNO_GetData>:

void BNO_GetData(void){
 80058b0:	b580      	push	{r7, lr}
 80058b2:	af00      	add	r7, sp, #0
	BNO_Read(BNO055_ACC_DATA_X_LSB,24);
 80058b4:	2118      	movs	r1, #24
 80058b6:	2008      	movs	r0, #8
 80058b8:	f7ff fb42 	bl	8004f40 <BNO_Read>
}
 80058bc:	bf00      	nop
 80058be:	bd80      	pop	{r7, pc}

080058c0 <BNO_Receive>:

void BNO_Receive(uint8_t Buffer){
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b082      	sub	sp, #8
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	4603      	mov	r3, r0
 80058c8:	71fb      	strb	r3, [r7, #7]
	static uint8_t MsgSize = 0;
	static uint8_t Counter = 0;

	BNO_ComsCounter = 0;
 80058ca:	4b2c      	ldr	r3, [pc, #176]	@ (800597c <BNO_Receive+0xbc>)
 80058cc:	2200      	movs	r2, #0
 80058ce:	701a      	strb	r2, [r3, #0]

	switch (BNO_Rx_Status) {
 80058d0:	4b2b      	ldr	r3, [pc, #172]	@ (8005980 <BNO_Receive+0xc0>)
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	2bff      	cmp	r3, #255	@ 0xff
 80058d6:	d027      	beq.n	8005928 <BNO_Receive+0x68>
 80058d8:	2bff      	cmp	r3, #255	@ 0xff
 80058da:	dc46      	bgt.n	800596a <BNO_Receive+0xaa>
 80058dc:	2bee      	cmp	r3, #238	@ 0xee
 80058de:	d017      	beq.n	8005910 <BNO_Receive+0x50>
 80058e0:	2bee      	cmp	r3, #238	@ 0xee
 80058e2:	dc42      	bgt.n	800596a <BNO_Receive+0xaa>
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d002      	beq.n	80058ee <BNO_Receive+0x2e>
 80058e8:	2bbb      	cmp	r3, #187	@ 0xbb
 80058ea:	d00a      	beq.n	8005902 <BNO_Receive+0x42>
				BNO_EmptyingBuffer();
			}

			break;
		default:
			break;
 80058ec:	e03d      	b.n	800596a <BNO_Receive+0xaa>
			if(Buffer == Read_Response || Buffer == Header) BNO_Rx_Status = Buffer;
 80058ee:	79fb      	ldrb	r3, [r7, #7]
 80058f0:	2bbb      	cmp	r3, #187	@ 0xbb
 80058f2:	d002      	beq.n	80058fa <BNO_Receive+0x3a>
 80058f4:	79fb      	ldrb	r3, [r7, #7]
 80058f6:	2bee      	cmp	r3, #238	@ 0xee
 80058f8:	d139      	bne.n	800596e <BNO_Receive+0xae>
 80058fa:	4a21      	ldr	r2, [pc, #132]	@ (8005980 <BNO_Receive+0xc0>)
 80058fc:	79fb      	ldrb	r3, [r7, #7]
 80058fe:	7013      	strb	r3, [r2, #0]
			break;
 8005900:	e035      	b.n	800596e <BNO_Receive+0xae>
			MsgSize = Buffer;
 8005902:	4a20      	ldr	r2, [pc, #128]	@ (8005984 <BNO_Receive+0xc4>)
 8005904:	79fb      	ldrb	r3, [r7, #7]
 8005906:	7013      	strb	r3, [r2, #0]
			BNO_Rx_Status = Emptying_Buffer;
 8005908:	4b1d      	ldr	r3, [pc, #116]	@ (8005980 <BNO_Receive+0xc0>)
 800590a:	22ff      	movs	r2, #255	@ 0xff
 800590c:	701a      	strb	r2, [r3, #0]
			break;
 800590e:	e031      	b.n	8005974 <BNO_Receive+0xb4>
			BNO_ErrorHandler = Buffer;
 8005910:	4a1d      	ldr	r2, [pc, #116]	@ (8005988 <BNO_Receive+0xc8>)
 8005912:	79fb      	ldrb	r3, [r7, #7]
 8005914:	7013      	strb	r3, [r2, #0]
			BNO_Rx_Status = AwaitingMsg;
 8005916:	4b1a      	ldr	r3, [pc, #104]	@ (8005980 <BNO_Receive+0xc0>)
 8005918:	2200      	movs	r2, #0
 800591a:	701a      	strb	r2, [r3, #0]
			memset(BNO_RxBuffer, 0, sizeof(BNO_RxBuffer));
 800591c:	22ff      	movs	r2, #255	@ 0xff
 800591e:	2100      	movs	r1, #0
 8005920:	481a      	ldr	r0, [pc, #104]	@ (800598c <BNO_Receive+0xcc>)
 8005922:	f012 f9b0 	bl	8017c86 <memset>
			break;
 8005926:	e025      	b.n	8005974 <BNO_Receive+0xb4>
			BNO_RxBuffer[Counter + 1] = Buffer;
 8005928:	4b19      	ldr	r3, [pc, #100]	@ (8005990 <BNO_Receive+0xd0>)
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	3301      	adds	r3, #1
 800592e:	4917      	ldr	r1, [pc, #92]	@ (800598c <BNO_Receive+0xcc>)
 8005930:	79fa      	ldrb	r2, [r7, #7]
 8005932:	54ca      	strb	r2, [r1, r3]
			Counter++;
 8005934:	4b16      	ldr	r3, [pc, #88]	@ (8005990 <BNO_Receive+0xd0>)
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	3301      	adds	r3, #1
 800593a:	b2da      	uxtb	r2, r3
 800593c:	4b14      	ldr	r3, [pc, #80]	@ (8005990 <BNO_Receive+0xd0>)
 800593e:	701a      	strb	r2, [r3, #0]
			if(Counter == MsgSize){
 8005940:	4b13      	ldr	r3, [pc, #76]	@ (8005990 <BNO_Receive+0xd0>)
 8005942:	781a      	ldrb	r2, [r3, #0]
 8005944:	4b0f      	ldr	r3, [pc, #60]	@ (8005984 <BNO_Receive+0xc4>)
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	429a      	cmp	r2, r3
 800594a:	d112      	bne.n	8005972 <BNO_Receive+0xb2>
				Counter = 0;
 800594c:	4b10      	ldr	r3, [pc, #64]	@ (8005990 <BNO_Receive+0xd0>)
 800594e:	2200      	movs	r2, #0
 8005950:	701a      	strb	r2, [r3, #0]
				MsgSize = 0;
 8005952:	4b0c      	ldr	r3, [pc, #48]	@ (8005984 <BNO_Receive+0xc4>)
 8005954:	2200      	movs	r2, #0
 8005956:	701a      	strb	r2, [r3, #0]
				BNO_Rx_Status = AwaitingMsg;
 8005958:	4b09      	ldr	r3, [pc, #36]	@ (8005980 <BNO_Receive+0xc0>)
 800595a:	2200      	movs	r2, #0
 800595c:	701a      	strb	r2, [r3, #0]
				BNO_ErrorHandler = ReadSucces;
 800595e:	4b0a      	ldr	r3, [pc, #40]	@ (8005988 <BNO_Receive+0xc8>)
 8005960:	220b      	movs	r2, #11
 8005962:	701a      	strb	r2, [r3, #0]
				BNO_EmptyingBuffer();
 8005964:	f7ff fe20 	bl	80055a8 <BNO_EmptyingBuffer>
			break;
 8005968:	e003      	b.n	8005972 <BNO_Receive+0xb2>
			break;
 800596a:	bf00      	nop
 800596c:	e002      	b.n	8005974 <BNO_Receive+0xb4>
			break;
 800596e:	bf00      	nop
 8005970:	e000      	b.n	8005974 <BNO_Receive+0xb4>
			break;
 8005972:	bf00      	nop
	}
}
 8005974:	bf00      	nop
 8005976:	3708      	adds	r7, #8
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}
 800597c:	24001582 	.word	0x24001582
 8005980:	24001580 	.word	0x24001580
 8005984:	240015ea 	.word	0x240015ea
 8005988:	24001581 	.word	0x24001581
 800598c:	24001480 	.word	0x24001480
 8005990:	240015eb 	.word	0x240015eb

08005994 <BNO_FaultManager>:

void BNO_FaultManager(void){
 8005994:	b580      	push	{r7, lr}
 8005996:	b082      	sub	sp, #8
 8005998:	af00      	add	r7, sp, #0
	if(BNO_ComsCounter > 3){
 800599a:	4b13      	ldr	r3, [pc, #76]	@ (80059e8 <BNO_FaultManager+0x54>)
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	2b03      	cmp	r3, #3
 80059a0:	d90f      	bls.n	80059c2 <BNO_FaultManager+0x2e>
		Reset_UART(&huart3);
 80059a2:	4812      	ldr	r0, [pc, #72]	@ (80059ec <BNO_FaultManager+0x58>)
 80059a4:	f7fe fd7a 	bl	800449c <Reset_UART>
		BNO_Rx_Status = AwaitingMsg;
 80059a8:	4b11      	ldr	r3, [pc, #68]	@ (80059f0 <BNO_FaultManager+0x5c>)
 80059aa:	2200      	movs	r2, #0
 80059ac:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart3, &BNO_BufferByte,1);
 80059ae:	2201      	movs	r2, #1
 80059b0:	4910      	ldr	r1, [pc, #64]	@ (80059f4 <BNO_FaultManager+0x60>)
 80059b2:	480e      	ldr	r0, [pc, #56]	@ (80059ec <BNO_FaultManager+0x58>)
 80059b4:	f00a f882 	bl	800fabc <HAL_UART_Receive_DMA>
		memset(BNO_RxBuffer, 0, sizeof(BNO_RxBuffer));
 80059b8:	22ff      	movs	r2, #255	@ 0xff
 80059ba:	2100      	movs	r1, #0
 80059bc:	480e      	ldr	r0, [pc, #56]	@ (80059f8 <BNO_FaultManager+0x64>)
 80059be:	f012 f962 	bl	8017c86 <memset>
	}
	if(BNO_ErrorHandler == WRONG_START_BYTE){
 80059c2:	4b0e      	ldr	r3, [pc, #56]	@ (80059fc <BNO_FaultManager+0x68>)
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	2b06      	cmp	r3, #6
 80059c8:	d10a      	bne.n	80059e0 <BNO_FaultManager+0x4c>
		uint8_t Buffer = 0x00;
 80059ca:	2300      	movs	r3, #0
 80059cc:	71fb      	strb	r3, [r7, #7]

		HAL_UART_Transmit_IT(&huart3, &Buffer, 1);
 80059ce:	1dfb      	adds	r3, r7, #7
 80059d0:	2201      	movs	r2, #1
 80059d2:	4619      	mov	r1, r3
 80059d4:	4805      	ldr	r0, [pc, #20]	@ (80059ec <BNO_FaultManager+0x58>)
 80059d6:	f009 ff91 	bl	800f8fc <HAL_UART_Transmit_IT>
		BNO_ErrorHandler = 0;
 80059da:	4b08      	ldr	r3, [pc, #32]	@ (80059fc <BNO_FaultManager+0x68>)
 80059dc:	2200      	movs	r2, #0
 80059de:	701a      	strb	r2, [r3, #0]
	}
}
 80059e0:	bf00      	nop
 80059e2:	3708      	adds	r7, #8
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	24001582 	.word	0x24001582
 80059ec:	240011b8 	.word	0x240011b8
 80059f0:	24001580 	.word	0x24001580
 80059f4:	2400157f 	.word	0x2400157f
 80059f8:	24001480 	.word	0x24001480
 80059fc:	24001581 	.word	0x24001581

08005a00 <BNO_Tasks>:

void BNO_Tasks(void){
 8005a00:	b580      	push	{r7, lr}
 8005a02:	af00      	add	r7, sp, #0
	if(BNO_DelayCounter == 0){
 8005a04:	4b1b      	ldr	r3, [pc, #108]	@ (8005a74 <BNO_Tasks+0x74>)
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d128      	bne.n	8005a5e <BNO_Tasks+0x5e>
		switch (BNO_CurrentState) {
 8005a0c:	4b1a      	ldr	r3, [pc, #104]	@ (8005a78 <BNO_Tasks+0x78>)
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	2b04      	cmp	r3, #4
 8005a12:	d81c      	bhi.n	8005a4e <BNO_Tasks+0x4e>
 8005a14:	a201      	add	r2, pc, #4	@ (adr r2, 8005a1c <BNO_Tasks+0x1c>)
 8005a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a1a:	bf00      	nop
 8005a1c:	08005a31 	.word	0x08005a31
 8005a20:	08005a3d 	.word	0x08005a3d
 8005a24:	08005a43 	.word	0x08005a43
 8005a28:	08005a49 	.word	0x08005a49
 8005a2c:	08005a37 	.word	0x08005a37
			case Init:
				BNO_Init();
 8005a30:	f7ff fe52 	bl	80056d8 <BNO_Init>
				break;
 8005a34:	e00c      	b.n	8005a50 <BNO_Tasks+0x50>
			case Reset:
				BNO_SWReset();
 8005a36:	f7ff fdd3 	bl	80055e0 <BNO_SWReset>
			break;
 8005a3a:	e009      	b.n	8005a50 <BNO_Tasks+0x50>
			case Configuration:
				BNO_Config();
 8005a3c:	f7ff fe68 	bl	8005710 <BNO_Config>
				break;
 8005a40:	e006      	b.n	8005a50 <BNO_Tasks+0x50>
			case Calibration:
				BNO_CalibrationStatus();
 8005a42:	f7ff feaf 	bl	80057a4 <BNO_CalibrationStatus>
				break;
 8005a46:	e003      	b.n	8005a50 <BNO_Tasks+0x50>
			case Operation:
				BNO_GetData();
 8005a48:	f7ff ff32 	bl	80058b0 <BNO_GetData>
				break;
 8005a4c:	e000      	b.n	8005a50 <BNO_Tasks+0x50>

			default:
				break;
 8005a4e:	bf00      	nop
		}
		++BNO_ComsCounter;
 8005a50:	4b0a      	ldr	r3, [pc, #40]	@ (8005a7c <BNO_Tasks+0x7c>)
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	3301      	adds	r3, #1
 8005a56:	b2da      	uxtb	r2, r3
 8005a58:	4b08      	ldr	r3, [pc, #32]	@ (8005a7c <BNO_Tasks+0x7c>)
 8005a5a:	701a      	strb	r2, [r3, #0]
 8005a5c:	e005      	b.n	8005a6a <BNO_Tasks+0x6a>
	}
	else{
		--BNO_DelayCounter;
 8005a5e:	4b05      	ldr	r3, [pc, #20]	@ (8005a74 <BNO_Tasks+0x74>)
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	3b01      	subs	r3, #1
 8005a64:	b2da      	uxtb	r2, r3
 8005a66:	4b03      	ldr	r3, [pc, #12]	@ (8005a74 <BNO_Tasks+0x74>)
 8005a68:	701a      	strb	r2, [r3, #0]
	}
	BNO_FaultManager();
 8005a6a:	f7ff ff93 	bl	8005994 <BNO_FaultManager>
}
 8005a6e:	bf00      	nop
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	bf00      	nop
 8005a74:	24001583 	.word	0x24001583
 8005a78:	24001584 	.word	0x24001584
 8005a7c:	24001582 	.word	0x24001582

08005a80 <LED_blink>:

		.G_LED.LED_GPIO_GPIOx = LED_5_GPIO_Port,
		.G_LED.LED_GPIO_Pin   = LED_5_Pin
};

LED_config_t LED_blink(LED_config_t LED){
 8005a80:	b084      	sub	sp, #16
 8005a82:	b590      	push	{r4, r7, lr}
 8005a84:	b083      	sub	sp, #12
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
 8005a8a:	f107 001c 	add.w	r0, r7, #28
 8005a8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}

		switch (LED.Blink_status) {
 8005a92:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d002      	beq.n	8005aa0 <LED_blink+0x20>
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d010      	beq.n	8005ac0 <LED_blink+0x40>
 8005a9e:	e01f      	b.n	8005ae0 <LED_blink+0x60>
			case 0x00:
				if(LED.count >= LED.Time_Off){
 8005aa0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005aa2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d31f      	bcc.n	8005ae8 <LED_blink+0x68>
					HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, SET);
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	8c39      	ldrh	r1, [r7, #32]
 8005aac:	2201      	movs	r2, #1
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f004 fc70 	bl	800a394 <HAL_GPIO_WritePin>
					LED.Blink_status = 1;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
					LED.count = 0;
 8005aba:	2300      	movs	r3, #0
 8005abc:	853b      	strh	r3, [r7, #40]	@ 0x28
				}
				break;
 8005abe:	e013      	b.n	8005ae8 <LED_blink+0x68>
			case 0x01:
				if(LED.count >= LED.Time_On){
 8005ac0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005ac2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d311      	bcc.n	8005aec <LED_blink+0x6c>
					HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, RESET);
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	8c39      	ldrh	r1, [r7, #32]
 8005acc:	2200      	movs	r2, #0
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f004 fc60 	bl	800a394 <HAL_GPIO_WritePin>
					LED.Blink_status = 0;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
					LED.count = 0;
 8005ada:	2300      	movs	r3, #0
 8005adc:	853b      	strh	r3, [r7, #40]	@ 0x28
				}
				break;
 8005ade:	e005      	b.n	8005aec <LED_blink+0x6c>
			default:
				LED.Blink_status = 0;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
				break;
 8005ae6:	e002      	b.n	8005aee <LED_blink+0x6e>
				break;
 8005ae8:	bf00      	nop
 8005aea:	e000      	b.n	8005aee <LED_blink+0x6e>
				break;
 8005aec:	bf00      	nop
		}

	LED.count++;
 8005aee:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005af0:	3301      	adds	r3, #1
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	853b      	strh	r3, [r7, #40]	@ 0x28
	return LED;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	461c      	mov	r4, r3
 8005afa:	f107 031c 	add.w	r3, r7, #28
 8005afe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005b00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	370c      	adds	r7, #12
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8005b0e:	b004      	add	sp, #16
 8005b10:	4770      	bx	lr

08005b12 <LED_Rutine>:

LED_config_t LED_Rutine(LED_config_t LED){
 8005b12:	b084      	sub	sp, #16
 8005b14:	b590      	push	{r4, r7, lr}
 8005b16:	b085      	sub	sp, #20
 8005b18:	af02      	add	r7, sp, #8
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	f107 001c 	add.w	r0, r7, #28
 8005b20:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if(LED.LED_status == 1){
 8005b24:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d117      	bne.n	8005b5c <LED_Rutine+0x4a>
		switch (LED.Sequence) {
 8005b2c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d002      	beq.n	8005b3a <LED_Rutine+0x28>
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d007      	beq.n	8005b48 <LED_Rutine+0x36>
				break;
			case Blink:
				LED = LED_blink(LED);
				break;
			default:
				break;
 8005b38:	e018      	b.n	8005b6c <LED_Rutine+0x5a>
				HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, SET);
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	8c39      	ldrh	r1, [r7, #32]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	4618      	mov	r0, r3
 8005b42:	f004 fc27 	bl	800a394 <HAL_GPIO_WritePin>
				break;
 8005b46:	e011      	b.n	8005b6c <LED_Rutine+0x5a>
				LED = LED_blink(LED);
 8005b48:	f107 001c 	add.w	r0, r7, #28
 8005b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b4e:	9300      	str	r3, [sp, #0]
 8005b50:	f107 031c 	add.w	r3, r7, #28
 8005b54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005b56:	f7ff ff93 	bl	8005a80 <LED_blink>
				break;
 8005b5a:	e007      	b.n	8005b6c <LED_Rutine+0x5a>
		}
	}
	else{
		HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, RESET);
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	8c39      	ldrh	r1, [r7, #32]
 8005b60:	2200      	movs	r2, #0
 8005b62:	4618      	mov	r0, r3
 8005b64:	f004 fc16 	bl	800a394 <HAL_GPIO_WritePin>
		LED.count = 0;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	853b      	strh	r3, [r7, #40]	@ 0x28
	}
	return LED;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	461c      	mov	r4, r3
 8005b70:	f107 031c 	add.w	r3, r7, #28
 8005b74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005b76:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	370c      	adds	r7, #12
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8005b84:	b004      	add	sp, #16
 8005b86:	4770      	bx	lr

08005b88 <LED_Tasks>:

void LED_Tasks (void){
 8005b88:	b590      	push	{r4, r7, lr}
 8005b8a:	b087      	sub	sp, #28
 8005b8c:	af02      	add	r7, sp, #8
	LED_Info.R_LED = LED_Rutine(LED_Info.R_LED);
 8005b8e:	4c24      	ldr	r4, [pc, #144]	@ (8005c20 <LED_Tasks+0x98>)
 8005b90:	4638      	mov	r0, r7
 8005b92:	4b23      	ldr	r3, [pc, #140]	@ (8005c20 <LED_Tasks+0x98>)
 8005b94:	68da      	ldr	r2, [r3, #12]
 8005b96:	9200      	str	r2, [sp, #0]
 8005b98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005b9a:	f7ff ffba 	bl	8005b12 <LED_Rutine>
 8005b9e:	463b      	mov	r3, r7
 8005ba0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005ba2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED1 = LED_Rutine(LED_Info.B_LED1);
 8005ba6:	4c1e      	ldr	r4, [pc, #120]	@ (8005c20 <LED_Tasks+0x98>)
 8005ba8:	4638      	mov	r0, r7
 8005baa:	4b1d      	ldr	r3, [pc, #116]	@ (8005c20 <LED_Tasks+0x98>)
 8005bac:	69da      	ldr	r2, [r3, #28]
 8005bae:	9200      	str	r2, [sp, #0]
 8005bb0:	3310      	adds	r3, #16
 8005bb2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005bb4:	f7ff ffad 	bl	8005b12 <LED_Rutine>
 8005bb8:	3410      	adds	r4, #16
 8005bba:	463b      	mov	r3, r7
 8005bbc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005bbe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED2 = LED_Rutine(LED_Info.B_LED2);
 8005bc2:	4c17      	ldr	r4, [pc, #92]	@ (8005c20 <LED_Tasks+0x98>)
 8005bc4:	4638      	mov	r0, r7
 8005bc6:	4b16      	ldr	r3, [pc, #88]	@ (8005c20 <LED_Tasks+0x98>)
 8005bc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bca:	9200      	str	r2, [sp, #0]
 8005bcc:	3320      	adds	r3, #32
 8005bce:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005bd0:	f7ff ff9f 	bl	8005b12 <LED_Rutine>
 8005bd4:	3420      	adds	r4, #32
 8005bd6:	463b      	mov	r3, r7
 8005bd8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005bda:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED3 = LED_Rutine(LED_Info.B_LED3);
 8005bde:	4c10      	ldr	r4, [pc, #64]	@ (8005c20 <LED_Tasks+0x98>)
 8005be0:	4638      	mov	r0, r7
 8005be2:	4b0f      	ldr	r3, [pc, #60]	@ (8005c20 <LED_Tasks+0x98>)
 8005be4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005be6:	9200      	str	r2, [sp, #0]
 8005be8:	3330      	adds	r3, #48	@ 0x30
 8005bea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005bec:	f7ff ff91 	bl	8005b12 <LED_Rutine>
 8005bf0:	3430      	adds	r4, #48	@ 0x30
 8005bf2:	463b      	mov	r3, r7
 8005bf4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005bf6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.G_LED = LED_Rutine(LED_Info.G_LED);
 8005bfa:	4c09      	ldr	r4, [pc, #36]	@ (8005c20 <LED_Tasks+0x98>)
 8005bfc:	4638      	mov	r0, r7
 8005bfe:	4b08      	ldr	r3, [pc, #32]	@ (8005c20 <LED_Tasks+0x98>)
 8005c00:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005c02:	9200      	str	r2, [sp, #0]
 8005c04:	3340      	adds	r3, #64	@ 0x40
 8005c06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005c08:	f7ff ff83 	bl	8005b12 <LED_Rutine>
 8005c0c:	3440      	adds	r4, #64	@ 0x40
 8005c0e:	463b      	mov	r3, r7
 8005c10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005c12:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8005c16:	bf00      	nop
 8005c18:	3714      	adds	r7, #20
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd90      	pop	{r4, r7, pc}
 8005c1e:	bf00      	nop
 8005c20:	2400000c 	.word	0x2400000c

08005c24 <LR03_AT>:

uint8_t LR03_RxBuffer[256] = {0};

uint8_t Test_1;

void LR03_AT(void){
 8005c24:	b580      	push	{r7, lr}
 8005c26:	af00      	add	r7, sp, #0

	HAL_UART_Transmit_IT(&huart6, (uint8_t*)"+++\r\n", 5);
 8005c28:	2205      	movs	r2, #5
 8005c2a:	4903      	ldr	r1, [pc, #12]	@ (8005c38 <LR03_AT+0x14>)
 8005c2c:	4803      	ldr	r0, [pc, #12]	@ (8005c3c <LR03_AT+0x18>)
 8005c2e:	f009 fe65 	bl	800f8fc <HAL_UART_Transmit_IT>
}
 8005c32:	bf00      	nop
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	bf00      	nop
 8005c38:	08019d78 	.word	0x08019d78
 8005c3c:	2400124c 	.word	0x2400124c

08005c40 <LR03_Level>:

void LR03_Level(uint8_t Level){
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b082      	sub	sp, #8
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	4603      	mov	r3, r0
 8005c48:	71fb      	strb	r3, [r7, #7]
	static uint8_t Level_Command[] = {"AT+LEVEL7\r\n"};
	if(Level > 7) Level = 7;
 8005c4a:	79fb      	ldrb	r3, [r7, #7]
 8005c4c:	2b07      	cmp	r3, #7
 8005c4e:	d901      	bls.n	8005c54 <LR03_Level+0x14>
 8005c50:	2307      	movs	r3, #7
 8005c52:	71fb      	strb	r3, [r7, #7]
	if(Level < 1) Level = 1;
 8005c54:	79fb      	ldrb	r3, [r7, #7]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d101      	bne.n	8005c5e <LR03_Level+0x1e>
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	71fb      	strb	r3, [r7, #7]
	Level_Command[8] = Level + 48;
 8005c5e:	79fb      	ldrb	r3, [r7, #7]
 8005c60:	3330      	adds	r3, #48	@ 0x30
 8005c62:	b2da      	uxtb	r2, r3
 8005c64:	4b05      	ldr	r3, [pc, #20]	@ (8005c7c <LR03_Level+0x3c>)
 8005c66:	721a      	strb	r2, [r3, #8]
	HAL_UART_Transmit_IT(&huart6, Level_Command, 11);
 8005c68:	220b      	movs	r2, #11
 8005c6a:	4904      	ldr	r1, [pc, #16]	@ (8005c7c <LR03_Level+0x3c>)
 8005c6c:	4804      	ldr	r0, [pc, #16]	@ (8005c80 <LR03_Level+0x40>)
 8005c6e:	f009 fe45 	bl	800f8fc <HAL_UART_Transmit_IT>
}
 8005c72:	bf00      	nop
 8005c74:	3708      	adds	r7, #8
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
 8005c7a:	bf00      	nop
 8005c7c:	2400005c 	.word	0x2400005c
 8005c80:	2400124c 	.word	0x2400124c

08005c84 <LR03_Receive>:

void LR03_Receive(uint8_t Data){
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	71fb      	strb	r3, [r7, #7]
	static uint8_t DataPointer = 0;
	LR03_RxBuffer[DataPointer] = Data;
 8005c8e:	4b09      	ldr	r3, [pc, #36]	@ (8005cb4 <LR03_Receive+0x30>)
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	4619      	mov	r1, r3
 8005c94:	4a08      	ldr	r2, [pc, #32]	@ (8005cb8 <LR03_Receive+0x34>)
 8005c96:	79fb      	ldrb	r3, [r7, #7]
 8005c98:	5453      	strb	r3, [r2, r1]
	DataPointer++;
 8005c9a:	4b06      	ldr	r3, [pc, #24]	@ (8005cb4 <LR03_Receive+0x30>)
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	b2da      	uxtb	r2, r3
 8005ca2:	4b04      	ldr	r3, [pc, #16]	@ (8005cb4 <LR03_Receive+0x30>)
 8005ca4:	701a      	strb	r2, [r3, #0]
}
 8005ca6:	bf00      	nop
 8005ca8:	370c      	adds	r7, #12
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr
 8005cb2:	bf00      	nop
 8005cb4:	240016ed 	.word	0x240016ed
 8005cb8:	240015ec 	.word	0x240015ec

08005cbc <LR03_StateMachine>:

void LR03_StateMachine(void){
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	af00      	add	r7, sp, #0

	switch (Test_1) {
 8005cc0:	4b09      	ldr	r3, [pc, #36]	@ (8005ce8 <LR03_StateMachine+0x2c>)
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d002      	beq.n	8005cce <LR03_StateMachine+0x12>
 8005cc8:	2b02      	cmp	r3, #2
 8005cca:	d003      	beq.n	8005cd4 <LR03_StateMachine+0x18>
			break;
		case 2:
			LR03_Level(7);
			break;
		default:
			break;
 8005ccc:	e006      	b.n	8005cdc <LR03_StateMachine+0x20>
			LR03_AT();
 8005cce:	f7ff ffa9 	bl	8005c24 <LR03_AT>
			break;
 8005cd2:	e003      	b.n	8005cdc <LR03_StateMachine+0x20>
			LR03_Level(7);
 8005cd4:	2007      	movs	r0, #7
 8005cd6:	f7ff ffb3 	bl	8005c40 <LR03_Level>
			break;
 8005cda:	bf00      	nop
	}
	Test_1 = 0;
 8005cdc:	4b02      	ldr	r3, [pc, #8]	@ (8005ce8 <LR03_StateMachine+0x2c>)
 8005cde:	2200      	movs	r2, #0
 8005ce0:	701a      	strb	r2, [r3, #0]
}
 8005ce2:	bf00      	nop
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	240016ec 	.word	0x240016ec

08005cec <PWM_Assign>:
Servo_mgmt_s PWM_Output = {
	    .S = {1500, 1500, 1500, 1500, 1500,
	          1500, 1500, 1500, 1500, 1500}
	};

void PWM_Assign(void) {
 8005cec:	b580      	push	{r7, lr}
 8005cee:	af00      	add	r7, sp, #0
    // Timer 2 (Canales 1, 2, 10, 9)
    TIM2->CCR1 = PWM_Output.S[0];  // Canal_1 (S[0])
 8005cf0:	4b2a      	ldr	r3, [pc, #168]	@ (8005d9c <PWM_Assign+0xb0>)
 8005cf2:	881a      	ldrh	r2, [r3, #0]
 8005cf4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005cf8:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2->CCR2 = PWM_Output.S[1];  // Canal_2 (S[1])
 8005cfa:	4b28      	ldr	r3, [pc, #160]	@ (8005d9c <PWM_Assign+0xb0>)
 8005cfc:	885a      	ldrh	r2, [r3, #2]
 8005cfe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005d02:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM2->CCR3 = PWM_Output.S[9];  // Canal_10 (S[9])
 8005d04:	4b25      	ldr	r3, [pc, #148]	@ (8005d9c <PWM_Assign+0xb0>)
 8005d06:	8a5a      	ldrh	r2, [r3, #18]
 8005d08:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005d0c:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2->CCR4 = PWM_Output.S[8];  // Canal_9 (S[8])
 8005d0e:	4b23      	ldr	r3, [pc, #140]	@ (8005d9c <PWM_Assign+0xb0>)
 8005d10:	8a1a      	ldrh	r2, [r3, #16]
 8005d12:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005d16:	641a      	str	r2, [r3, #64]	@ 0x40

    // Timer 3 (Canales 3, 4)
    TIM3->CCR1 = PWM_Output.S[2];  // Canal_3 (S[2])
 8005d18:	4b20      	ldr	r3, [pc, #128]	@ (8005d9c <PWM_Assign+0xb0>)
 8005d1a:	889a      	ldrh	r2, [r3, #4]
 8005d1c:	4b20      	ldr	r3, [pc, #128]	@ (8005da0 <PWM_Assign+0xb4>)
 8005d1e:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3->CCR2 = PWM_Output.S[3];  // Canal_4 (S[3])
 8005d20:	4b1e      	ldr	r3, [pc, #120]	@ (8005d9c <PWM_Assign+0xb0>)
 8005d22:	88da      	ldrh	r2, [r3, #6]
 8005d24:	4b1e      	ldr	r3, [pc, #120]	@ (8005da0 <PWM_Assign+0xb4>)
 8005d26:	639a      	str	r2, [r3, #56]	@ 0x38

    // Timer 4 (Canales 5-8)
    TIM4->CCR1 = PWM_Output.S[4];  // Canal_5 (S[4])
 8005d28:	4b1c      	ldr	r3, [pc, #112]	@ (8005d9c <PWM_Assign+0xb0>)
 8005d2a:	891a      	ldrh	r2, [r3, #8]
 8005d2c:	4b1d      	ldr	r3, [pc, #116]	@ (8005da4 <PWM_Assign+0xb8>)
 8005d2e:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM4->CCR2 = PWM_Output.S[5];  // Canal_6 (S[5])
 8005d30:	4b1a      	ldr	r3, [pc, #104]	@ (8005d9c <PWM_Assign+0xb0>)
 8005d32:	895a      	ldrh	r2, [r3, #10]
 8005d34:	4b1b      	ldr	r3, [pc, #108]	@ (8005da4 <PWM_Assign+0xb8>)
 8005d36:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM4->CCR3 = PWM_Output.S[6];  // Canal_7 (S[6])
 8005d38:	4b18      	ldr	r3, [pc, #96]	@ (8005d9c <PWM_Assign+0xb0>)
 8005d3a:	899a      	ldrh	r2, [r3, #12]
 8005d3c:	4b19      	ldr	r3, [pc, #100]	@ (8005da4 <PWM_Assign+0xb8>)
 8005d3e:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM4->CCR4 = PWM_Output.S[7];  // Canal_8 (S[7])
 8005d40:	4b16      	ldr	r3, [pc, #88]	@ (8005d9c <PWM_Assign+0xb0>)
 8005d42:	89da      	ldrh	r2, [r3, #14]
 8005d44:	4b17      	ldr	r3, [pc, #92]	@ (8005da4 <PWM_Assign+0xb8>)
 8005d46:	641a      	str	r2, [r3, #64]	@ 0x40

    // Iniciar PWM (igual que antes)
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8005d48:	2100      	movs	r1, #0
 8005d4a:	4817      	ldr	r0, [pc, #92]	@ (8005da8 <PWM_Assign+0xbc>)
 8005d4c:	f008 fd58 	bl	800e800 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8005d50:	2104      	movs	r1, #4
 8005d52:	4815      	ldr	r0, [pc, #84]	@ (8005da8 <PWM_Assign+0xbc>)
 8005d54:	f008 fd54 	bl	800e800 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8005d58:	2108      	movs	r1, #8
 8005d5a:	4813      	ldr	r0, [pc, #76]	@ (8005da8 <PWM_Assign+0xbc>)
 8005d5c:	f008 fd50 	bl	800e800 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8005d60:	210c      	movs	r1, #12
 8005d62:	4811      	ldr	r0, [pc, #68]	@ (8005da8 <PWM_Assign+0xbc>)
 8005d64:	f008 fd4c 	bl	800e800 <HAL_TIM_PWM_Start>

    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8005d68:	2100      	movs	r1, #0
 8005d6a:	4810      	ldr	r0, [pc, #64]	@ (8005dac <PWM_Assign+0xc0>)
 8005d6c:	f008 fd48 	bl	800e800 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8005d70:	2104      	movs	r1, #4
 8005d72:	480e      	ldr	r0, [pc, #56]	@ (8005dac <PWM_Assign+0xc0>)
 8005d74:	f008 fd44 	bl	800e800 <HAL_TIM_PWM_Start>

    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8005d78:	2100      	movs	r1, #0
 8005d7a:	480d      	ldr	r0, [pc, #52]	@ (8005db0 <PWM_Assign+0xc4>)
 8005d7c:	f008 fd40 	bl	800e800 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8005d80:	2104      	movs	r1, #4
 8005d82:	480b      	ldr	r0, [pc, #44]	@ (8005db0 <PWM_Assign+0xc4>)
 8005d84:	f008 fd3c 	bl	800e800 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8005d88:	2108      	movs	r1, #8
 8005d8a:	4809      	ldr	r0, [pc, #36]	@ (8005db0 <PWM_Assign+0xc4>)
 8005d8c:	f008 fd38 	bl	800e800 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8005d90:	210c      	movs	r1, #12
 8005d92:	4807      	ldr	r0, [pc, #28]	@ (8005db0 <PWM_Assign+0xc4>)
 8005d94:	f008 fd34 	bl	800e800 <HAL_TIM_PWM_Start>
}
 8005d98:	bf00      	nop
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	24000068 	.word	0x24000068
 8005da0:	40000400 	.word	0x40000400
 8005da4:	40000800 	.word	0x40000800
 8005da8:	24000f60 	.word	0x24000f60
 8005dac:	24000fac 	.word	0x24000fac
 8005db0:	24000ff8 	.word	0x24000ff8

08005db4 <SBUS_init>:

extern UART_HandleTypeDef huart1;
#define SBUS_UART_handler &huart1


void SBUS_init(void){
 8005db4:	b580      	push	{r7, lr}
 8005db6:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(SBUS_UART_handler, &SBUS_RxBuffer, 1);
 8005db8:	2201      	movs	r2, #1
 8005dba:	4903      	ldr	r1, [pc, #12]	@ (8005dc8 <SBUS_init+0x14>)
 8005dbc:	4803      	ldr	r0, [pc, #12]	@ (8005dcc <SBUS_init+0x18>)
 8005dbe:	f009 fe7d 	bl	800fabc <HAL_UART_Receive_DMA>

}
 8005dc2:	bf00      	nop
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	bf00      	nop
 8005dc8:	24001709 	.word	0x24001709
 8005dcc:	24001124 	.word	0x24001124

08005dd0 <SBUS_Receive>:

void SBUS_Receive(uint8_t SBUS_RxBuffer){
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b082      	sub	sp, #8
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	71fb      	strb	r3, [r7, #7]
	static uint8_t Actual_status = 0;
	static uint8_t RxCount;

	switch (Actual_status) {
 8005dda:	4b20      	ldr	r3, [pc, #128]	@ (8005e5c <SBUS_Receive+0x8c>)
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d002      	beq.n	8005de8 <SBUS_Receive+0x18>
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d017      	beq.n	8005e16 <SBUS_Receive+0x46>
 8005de6:	e02f      	b.n	8005e48 <SBUS_Receive+0x78>
		case 0:
			if(SBUS_RxBuffer == 0x0F){
 8005de8:	79fb      	ldrb	r3, [r7, #7]
 8005dea:	2b0f      	cmp	r3, #15
 8005dec:	d10f      	bne.n	8005e0e <SBUS_Receive+0x3e>
				SBUS_UART_Rx[RxCount] = SBUS_RxBuffer;
 8005dee:	4b1c      	ldr	r3, [pc, #112]	@ (8005e60 <SBUS_Receive+0x90>)
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	4619      	mov	r1, r3
 8005df4:	4a1b      	ldr	r2, [pc, #108]	@ (8005e64 <SBUS_Receive+0x94>)
 8005df6:	79fb      	ldrb	r3, [r7, #7]
 8005df8:	5453      	strb	r3, [r2, r1]
				Actual_status = 1;
 8005dfa:	4b18      	ldr	r3, [pc, #96]	@ (8005e5c <SBUS_Receive+0x8c>)
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	701a      	strb	r2, [r3, #0]
				RxCount++;
 8005e00:	4b17      	ldr	r3, [pc, #92]	@ (8005e60 <SBUS_Receive+0x90>)
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	3301      	adds	r3, #1
 8005e06:	b2da      	uxtb	r2, r3
 8005e08:	4b15      	ldr	r3, [pc, #84]	@ (8005e60 <SBUS_Receive+0x90>)
 8005e0a:	701a      	strb	r2, [r3, #0]
			}
			else{
				RxCount = 0;
			}
			break;
 8005e0c:	e021      	b.n	8005e52 <SBUS_Receive+0x82>
				RxCount = 0;
 8005e0e:	4b14      	ldr	r3, [pc, #80]	@ (8005e60 <SBUS_Receive+0x90>)
 8005e10:	2200      	movs	r2, #0
 8005e12:	701a      	strb	r2, [r3, #0]
			break;
 8005e14:	e01d      	b.n	8005e52 <SBUS_Receive+0x82>
		case 1:
			SBUS_UART_Rx[RxCount] = SBUS_RxBuffer;
 8005e16:	4b12      	ldr	r3, [pc, #72]	@ (8005e60 <SBUS_Receive+0x90>)
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	4619      	mov	r1, r3
 8005e1c:	4a11      	ldr	r2, [pc, #68]	@ (8005e64 <SBUS_Receive+0x94>)
 8005e1e:	79fb      	ldrb	r3, [r7, #7]
 8005e20:	5453      	strb	r3, [r2, r1]
			RxCount++;
 8005e22:	4b0f      	ldr	r3, [pc, #60]	@ (8005e60 <SBUS_Receive+0x90>)
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	3301      	adds	r3, #1
 8005e28:	b2da      	uxtb	r2, r3
 8005e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8005e60 <SBUS_Receive+0x90>)
 8005e2c:	701a      	strb	r2, [r3, #0]
			if(RxCount == 24){
 8005e2e:	4b0c      	ldr	r3, [pc, #48]	@ (8005e60 <SBUS_Receive+0x90>)
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	2b18      	cmp	r3, #24
 8005e34:	d10c      	bne.n	8005e50 <SBUS_Receive+0x80>
				RxCount = 0;
 8005e36:	4b0a      	ldr	r3, [pc, #40]	@ (8005e60 <SBUS_Receive+0x90>)
 8005e38:	2200      	movs	r2, #0
 8005e3a:	701a      	strb	r2, [r3, #0]
				Actual_status = 0;
 8005e3c:	4b07      	ldr	r3, [pc, #28]	@ (8005e5c <SBUS_Receive+0x8c>)
 8005e3e:	2200      	movs	r2, #0
 8005e40:	701a      	strb	r2, [r3, #0]
				SBUS_getData();
 8005e42:	f000 f811 	bl	8005e68 <SBUS_getData>
			}
			break;
 8005e46:	e003      	b.n	8005e50 <SBUS_Receive+0x80>
		default:
			Actual_status = 0;
 8005e48:	4b04      	ldr	r3, [pc, #16]	@ (8005e5c <SBUS_Receive+0x8c>)
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	701a      	strb	r2, [r3, #0]
			break;
 8005e4e:	e000      	b.n	8005e52 <SBUS_Receive+0x82>
			break;
 8005e50:	bf00      	nop
	}
}
 8005e52:	bf00      	nop
 8005e54:	3708      	adds	r7, #8
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	2400170a 	.word	0x2400170a
 8005e60:	2400170b 	.word	0x2400170b
 8005e64:	240016f0 	.word	0x240016f0

08005e68 <SBUS_getData>:


void SBUS_getData(void){
 8005e68:	b480      	push	{r7}
 8005e6a:	af00      	add	r7, sp, #0
	//Se hace el corrimiento de bits para dar la estructura de los 16 canales, donde cada canal esta compuesto por 11 bits
	//pero cada paquete es de 1 byte. Para cada canal se utilizan los 8 bits (O los que correspondan) de el byte 1
	//(O el que corresponda) como los bits menos significativos del canal 1, y los tres bits faltantes se toman los 3 bits
	// menos significativos (O los que correspondan) del byte 2 y se colocan como los 3 bits más significativos del canal 1.
	Radio_input.Canal_1 = ((SBUS_UART_Rx[1] | SBUS_UART_Rx[2] << 8) & 0x07FF);
 8005e6c:	4b95      	ldr	r3, [pc, #596]	@ (80060c4 <SBUS_getData+0x25c>)
 8005e6e:	785b      	ldrb	r3, [r3, #1]
 8005e70:	b21a      	sxth	r2, r3
 8005e72:	4b94      	ldr	r3, [pc, #592]	@ (80060c4 <SBUS_getData+0x25c>)
 8005e74:	789b      	ldrb	r3, [r3, #2]
 8005e76:	021b      	lsls	r3, r3, #8
 8005e78:	b21b      	sxth	r3, r3
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	b21b      	sxth	r3, r3
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e84:	b29a      	uxth	r2, r3
 8005e86:	4b90      	ldr	r3, [pc, #576]	@ (80060c8 <SBUS_getData+0x260>)
 8005e88:	805a      	strh	r2, [r3, #2]
	Radio_input.Canal_2 = ((SBUS_UART_Rx[2] >> 3 | SBUS_UART_Rx[3] << 5) & 0x07FF);
 8005e8a:	4b8e      	ldr	r3, [pc, #568]	@ (80060c4 <SBUS_getData+0x25c>)
 8005e8c:	789b      	ldrb	r3, [r3, #2]
 8005e8e:	08db      	lsrs	r3, r3, #3
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	b21a      	sxth	r2, r3
 8005e94:	4b8b      	ldr	r3, [pc, #556]	@ (80060c4 <SBUS_getData+0x25c>)
 8005e96:	78db      	ldrb	r3, [r3, #3]
 8005e98:	015b      	lsls	r3, r3, #5
 8005e9a:	b21b      	sxth	r3, r3
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	b21b      	sxth	r3, r3
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ea6:	b29a      	uxth	r2, r3
 8005ea8:	4b87      	ldr	r3, [pc, #540]	@ (80060c8 <SBUS_getData+0x260>)
 8005eaa:	809a      	strh	r2, [r3, #4]
	Radio_input.Canal_3 = ((SBUS_UART_Rx[3] >> 6 | SBUS_UART_Rx[4] << 2 | SBUS_UART_Rx[5] << 10) & 0x07FF);
 8005eac:	4b85      	ldr	r3, [pc, #532]	@ (80060c4 <SBUS_getData+0x25c>)
 8005eae:	78db      	ldrb	r3, [r3, #3]
 8005eb0:	099b      	lsrs	r3, r3, #6
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	b21a      	sxth	r2, r3
 8005eb6:	4b83      	ldr	r3, [pc, #524]	@ (80060c4 <SBUS_getData+0x25c>)
 8005eb8:	791b      	ldrb	r3, [r3, #4]
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	b21b      	sxth	r3, r3
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	b21a      	sxth	r2, r3
 8005ec2:	4b80      	ldr	r3, [pc, #512]	@ (80060c4 <SBUS_getData+0x25c>)
 8005ec4:	795b      	ldrb	r3, [r3, #5]
 8005ec6:	029b      	lsls	r3, r3, #10
 8005ec8:	b21b      	sxth	r3, r3
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	b21b      	sxth	r3, r3
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ed4:	b29a      	uxth	r2, r3
 8005ed6:	4b7c      	ldr	r3, [pc, #496]	@ (80060c8 <SBUS_getData+0x260>)
 8005ed8:	80da      	strh	r2, [r3, #6]
	Radio_input.Canal_4 = ((SBUS_UART_Rx[5] >> 1 | SBUS_UART_Rx[6] << 7) & 0x07FF);
 8005eda:	4b7a      	ldr	r3, [pc, #488]	@ (80060c4 <SBUS_getData+0x25c>)
 8005edc:	795b      	ldrb	r3, [r3, #5]
 8005ede:	085b      	lsrs	r3, r3, #1
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	b21a      	sxth	r2, r3
 8005ee4:	4b77      	ldr	r3, [pc, #476]	@ (80060c4 <SBUS_getData+0x25c>)
 8005ee6:	799b      	ldrb	r3, [r3, #6]
 8005ee8:	01db      	lsls	r3, r3, #7
 8005eea:	b21b      	sxth	r3, r3
 8005eec:	4313      	orrs	r3, r2
 8005eee:	b21b      	sxth	r3, r3
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ef6:	b29a      	uxth	r2, r3
 8005ef8:	4b73      	ldr	r3, [pc, #460]	@ (80060c8 <SBUS_getData+0x260>)
 8005efa:	811a      	strh	r2, [r3, #8]
	Radio_input.Canal_5 = ((SBUS_UART_Rx[6] >> 4 | SBUS_UART_Rx[7] << 4) & 0x07FF);
 8005efc:	4b71      	ldr	r3, [pc, #452]	@ (80060c4 <SBUS_getData+0x25c>)
 8005efe:	799b      	ldrb	r3, [r3, #6]
 8005f00:	091b      	lsrs	r3, r3, #4
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	b21a      	sxth	r2, r3
 8005f06:	4b6f      	ldr	r3, [pc, #444]	@ (80060c4 <SBUS_getData+0x25c>)
 8005f08:	79db      	ldrb	r3, [r3, #7]
 8005f0a:	011b      	lsls	r3, r3, #4
 8005f0c:	b21b      	sxth	r3, r3
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	b21b      	sxth	r3, r3
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f18:	b29a      	uxth	r2, r3
 8005f1a:	4b6b      	ldr	r3, [pc, #428]	@ (80060c8 <SBUS_getData+0x260>)
 8005f1c:	815a      	strh	r2, [r3, #10]
	Radio_input.Canal_6 = ((SBUS_UART_Rx[7] >> 7 | SBUS_UART_Rx[8] << 1 | SBUS_UART_Rx[9] << 9) & 0x07FF);
 8005f1e:	4b69      	ldr	r3, [pc, #420]	@ (80060c4 <SBUS_getData+0x25c>)
 8005f20:	79db      	ldrb	r3, [r3, #7]
 8005f22:	09db      	lsrs	r3, r3, #7
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	b21a      	sxth	r2, r3
 8005f28:	4b66      	ldr	r3, [pc, #408]	@ (80060c4 <SBUS_getData+0x25c>)
 8005f2a:	7a1b      	ldrb	r3, [r3, #8]
 8005f2c:	005b      	lsls	r3, r3, #1
 8005f2e:	b21b      	sxth	r3, r3
 8005f30:	4313      	orrs	r3, r2
 8005f32:	b21a      	sxth	r2, r3
 8005f34:	4b63      	ldr	r3, [pc, #396]	@ (80060c4 <SBUS_getData+0x25c>)
 8005f36:	7a5b      	ldrb	r3, [r3, #9]
 8005f38:	025b      	lsls	r3, r3, #9
 8005f3a:	b21b      	sxth	r3, r3
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	b21b      	sxth	r3, r3
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f46:	b29a      	uxth	r2, r3
 8005f48:	4b5f      	ldr	r3, [pc, #380]	@ (80060c8 <SBUS_getData+0x260>)
 8005f4a:	819a      	strh	r2, [r3, #12]
	Radio_input.Canal_7 = ((SBUS_UART_Rx[9] >> 2 | SBUS_UART_Rx[10] << 6) & 0x07FF);
 8005f4c:	4b5d      	ldr	r3, [pc, #372]	@ (80060c4 <SBUS_getData+0x25c>)
 8005f4e:	7a5b      	ldrb	r3, [r3, #9]
 8005f50:	089b      	lsrs	r3, r3, #2
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	b21a      	sxth	r2, r3
 8005f56:	4b5b      	ldr	r3, [pc, #364]	@ (80060c4 <SBUS_getData+0x25c>)
 8005f58:	7a9b      	ldrb	r3, [r3, #10]
 8005f5a:	019b      	lsls	r3, r3, #6
 8005f5c:	b21b      	sxth	r3, r3
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	b21b      	sxth	r3, r3
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f68:	b29a      	uxth	r2, r3
 8005f6a:	4b57      	ldr	r3, [pc, #348]	@ (80060c8 <SBUS_getData+0x260>)
 8005f6c:	81da      	strh	r2, [r3, #14]
	Radio_input.Canal_8 = ((SBUS_UART_Rx[10] >> 5 | SBUS_UART_Rx[11] << 3) & 0x07FF);
 8005f6e:	4b55      	ldr	r3, [pc, #340]	@ (80060c4 <SBUS_getData+0x25c>)
 8005f70:	7a9b      	ldrb	r3, [r3, #10]
 8005f72:	095b      	lsrs	r3, r3, #5
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	b21a      	sxth	r2, r3
 8005f78:	4b52      	ldr	r3, [pc, #328]	@ (80060c4 <SBUS_getData+0x25c>)
 8005f7a:	7adb      	ldrb	r3, [r3, #11]
 8005f7c:	00db      	lsls	r3, r3, #3
 8005f7e:	b21b      	sxth	r3, r3
 8005f80:	4313      	orrs	r3, r2
 8005f82:	b21b      	sxth	r3, r3
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f8a:	b29a      	uxth	r2, r3
 8005f8c:	4b4e      	ldr	r3, [pc, #312]	@ (80060c8 <SBUS_getData+0x260>)
 8005f8e:	821a      	strh	r2, [r3, #16]
	Radio_input.Canal_9 = ((SBUS_UART_Rx[12] | SBUS_UART_Rx[13] << 8) & 0x07FF);
 8005f90:	4b4c      	ldr	r3, [pc, #304]	@ (80060c4 <SBUS_getData+0x25c>)
 8005f92:	7b1b      	ldrb	r3, [r3, #12]
 8005f94:	b21a      	sxth	r2, r3
 8005f96:	4b4b      	ldr	r3, [pc, #300]	@ (80060c4 <SBUS_getData+0x25c>)
 8005f98:	7b5b      	ldrb	r3, [r3, #13]
 8005f9a:	021b      	lsls	r3, r3, #8
 8005f9c:	b21b      	sxth	r3, r3
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	b21b      	sxth	r3, r3
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005fa8:	b29a      	uxth	r2, r3
 8005faa:	4b47      	ldr	r3, [pc, #284]	@ (80060c8 <SBUS_getData+0x260>)
 8005fac:	825a      	strh	r2, [r3, #18]
	Radio_input.Canal_10 = ((SBUS_UART_Rx[13] >> 3 | SBUS_UART_Rx[14] << 5) & 0x07FF);
 8005fae:	4b45      	ldr	r3, [pc, #276]	@ (80060c4 <SBUS_getData+0x25c>)
 8005fb0:	7b5b      	ldrb	r3, [r3, #13]
 8005fb2:	08db      	lsrs	r3, r3, #3
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	b21a      	sxth	r2, r3
 8005fb8:	4b42      	ldr	r3, [pc, #264]	@ (80060c4 <SBUS_getData+0x25c>)
 8005fba:	7b9b      	ldrb	r3, [r3, #14]
 8005fbc:	015b      	lsls	r3, r3, #5
 8005fbe:	b21b      	sxth	r3, r3
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	b21b      	sxth	r3, r3
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005fca:	b29a      	uxth	r2, r3
 8005fcc:	4b3e      	ldr	r3, [pc, #248]	@ (80060c8 <SBUS_getData+0x260>)
 8005fce:	829a      	strh	r2, [r3, #20]
	Radio_input.Canal_11 = ((SBUS_UART_Rx[14] >> 6 | SBUS_UART_Rx[15] << 2 | SBUS_UART_Rx[16] << 10) & 0x07FF);
 8005fd0:	4b3c      	ldr	r3, [pc, #240]	@ (80060c4 <SBUS_getData+0x25c>)
 8005fd2:	7b9b      	ldrb	r3, [r3, #14]
 8005fd4:	099b      	lsrs	r3, r3, #6
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	b21a      	sxth	r2, r3
 8005fda:	4b3a      	ldr	r3, [pc, #232]	@ (80060c4 <SBUS_getData+0x25c>)
 8005fdc:	7bdb      	ldrb	r3, [r3, #15]
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	b21b      	sxth	r3, r3
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	b21a      	sxth	r2, r3
 8005fe6:	4b37      	ldr	r3, [pc, #220]	@ (80060c4 <SBUS_getData+0x25c>)
 8005fe8:	7c1b      	ldrb	r3, [r3, #16]
 8005fea:	029b      	lsls	r3, r3, #10
 8005fec:	b21b      	sxth	r3, r3
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	b21b      	sxth	r3, r3
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ff8:	b29a      	uxth	r2, r3
 8005ffa:	4b33      	ldr	r3, [pc, #204]	@ (80060c8 <SBUS_getData+0x260>)
 8005ffc:	82da      	strh	r2, [r3, #22]
	Radio_input.Canal_12 = ((SBUS_UART_Rx[16] >> 1 | SBUS_UART_Rx[17] << 7) & 0x07FF);
 8005ffe:	4b31      	ldr	r3, [pc, #196]	@ (80060c4 <SBUS_getData+0x25c>)
 8006000:	7c1b      	ldrb	r3, [r3, #16]
 8006002:	085b      	lsrs	r3, r3, #1
 8006004:	b2db      	uxtb	r3, r3
 8006006:	b21a      	sxth	r2, r3
 8006008:	4b2e      	ldr	r3, [pc, #184]	@ (80060c4 <SBUS_getData+0x25c>)
 800600a:	7c5b      	ldrb	r3, [r3, #17]
 800600c:	01db      	lsls	r3, r3, #7
 800600e:	b21b      	sxth	r3, r3
 8006010:	4313      	orrs	r3, r2
 8006012:	b21b      	sxth	r3, r3
 8006014:	b29b      	uxth	r3, r3
 8006016:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800601a:	b29a      	uxth	r2, r3
 800601c:	4b2a      	ldr	r3, [pc, #168]	@ (80060c8 <SBUS_getData+0x260>)
 800601e:	831a      	strh	r2, [r3, #24]
	Radio_input.Canal_13 = ((SBUS_UART_Rx[17] >> 4 | SBUS_UART_Rx[18] << 4) & 0x07FF);
 8006020:	4b28      	ldr	r3, [pc, #160]	@ (80060c4 <SBUS_getData+0x25c>)
 8006022:	7c5b      	ldrb	r3, [r3, #17]
 8006024:	091b      	lsrs	r3, r3, #4
 8006026:	b2db      	uxtb	r3, r3
 8006028:	b21a      	sxth	r2, r3
 800602a:	4b26      	ldr	r3, [pc, #152]	@ (80060c4 <SBUS_getData+0x25c>)
 800602c:	7c9b      	ldrb	r3, [r3, #18]
 800602e:	011b      	lsls	r3, r3, #4
 8006030:	b21b      	sxth	r3, r3
 8006032:	4313      	orrs	r3, r2
 8006034:	b21b      	sxth	r3, r3
 8006036:	b29b      	uxth	r3, r3
 8006038:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800603c:	b29a      	uxth	r2, r3
 800603e:	4b22      	ldr	r3, [pc, #136]	@ (80060c8 <SBUS_getData+0x260>)
 8006040:	835a      	strh	r2, [r3, #26]
	Radio_input.Canal_14 = ((SBUS_UART_Rx[18] >> 7 | SBUS_UART_Rx[19] << 1 | SBUS_UART_Rx[20] << 9) & 0x07FF);
 8006042:	4b20      	ldr	r3, [pc, #128]	@ (80060c4 <SBUS_getData+0x25c>)
 8006044:	7c9b      	ldrb	r3, [r3, #18]
 8006046:	09db      	lsrs	r3, r3, #7
 8006048:	b2db      	uxtb	r3, r3
 800604a:	b21a      	sxth	r2, r3
 800604c:	4b1d      	ldr	r3, [pc, #116]	@ (80060c4 <SBUS_getData+0x25c>)
 800604e:	7cdb      	ldrb	r3, [r3, #19]
 8006050:	005b      	lsls	r3, r3, #1
 8006052:	b21b      	sxth	r3, r3
 8006054:	4313      	orrs	r3, r2
 8006056:	b21a      	sxth	r2, r3
 8006058:	4b1a      	ldr	r3, [pc, #104]	@ (80060c4 <SBUS_getData+0x25c>)
 800605a:	7d1b      	ldrb	r3, [r3, #20]
 800605c:	025b      	lsls	r3, r3, #9
 800605e:	b21b      	sxth	r3, r3
 8006060:	4313      	orrs	r3, r2
 8006062:	b21b      	sxth	r3, r3
 8006064:	b29b      	uxth	r3, r3
 8006066:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800606a:	b29a      	uxth	r2, r3
 800606c:	4b16      	ldr	r3, [pc, #88]	@ (80060c8 <SBUS_getData+0x260>)
 800606e:	839a      	strh	r2, [r3, #28]
	Radio_input.Canal_15 = ((SBUS_UART_Rx[20] >> 2 | SBUS_UART_Rx[21] << 6) & 0x07FF);
 8006070:	4b14      	ldr	r3, [pc, #80]	@ (80060c4 <SBUS_getData+0x25c>)
 8006072:	7d1b      	ldrb	r3, [r3, #20]
 8006074:	089b      	lsrs	r3, r3, #2
 8006076:	b2db      	uxtb	r3, r3
 8006078:	b21a      	sxth	r2, r3
 800607a:	4b12      	ldr	r3, [pc, #72]	@ (80060c4 <SBUS_getData+0x25c>)
 800607c:	7d5b      	ldrb	r3, [r3, #21]
 800607e:	019b      	lsls	r3, r3, #6
 8006080:	b21b      	sxth	r3, r3
 8006082:	4313      	orrs	r3, r2
 8006084:	b21b      	sxth	r3, r3
 8006086:	b29b      	uxth	r3, r3
 8006088:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800608c:	b29a      	uxth	r2, r3
 800608e:	4b0e      	ldr	r3, [pc, #56]	@ (80060c8 <SBUS_getData+0x260>)
 8006090:	83da      	strh	r2, [r3, #30]
	Radio_input.Canal_16 = ((SBUS_UART_Rx[21] >> 5 | SBUS_UART_Rx[22] << 3) & 0x07FF);
 8006092:	4b0c      	ldr	r3, [pc, #48]	@ (80060c4 <SBUS_getData+0x25c>)
 8006094:	7d5b      	ldrb	r3, [r3, #21]
 8006096:	095b      	lsrs	r3, r3, #5
 8006098:	b2db      	uxtb	r3, r3
 800609a:	b21a      	sxth	r2, r3
 800609c:	4b09      	ldr	r3, [pc, #36]	@ (80060c4 <SBUS_getData+0x25c>)
 800609e:	7d9b      	ldrb	r3, [r3, #22]
 80060a0:	00db      	lsls	r3, r3, #3
 80060a2:	b21b      	sxth	r3, r3
 80060a4:	4313      	orrs	r3, r2
 80060a6:	b21b      	sxth	r3, r3
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80060ae:	b29a      	uxth	r2, r3
 80060b0:	4b05      	ldr	r3, [pc, #20]	@ (80060c8 <SBUS_getData+0x260>)
 80060b2:	841a      	strh	r2, [r3, #32]

	Radio_input.Canal_1 = (uint16_t)((((float)Radio_input.Canal_1 - 352) /1344 ) * 1000) + 1000;
 80060b4:	4b04      	ldr	r3, [pc, #16]	@ (80060c8 <SBUS_getData+0x260>)
 80060b6:	885b      	ldrh	r3, [r3, #2]
 80060b8:	ee07 3a90 	vmov	s15, r3
 80060bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060c0:	e00a      	b.n	80060d8 <SBUS_getData+0x270>
 80060c2:	bf00      	nop
 80060c4:	240016f0 	.word	0x240016f0
 80060c8:	2400007c 	.word	0x2400007c
 80060cc:	43b00000 	.word	0x43b00000
 80060d0:	44a80000 	.word	0x44a80000
 80060d4:	447a0000 	.word	0x447a0000
 80060d8:	ed1f 7a04 	vldr	s14, [pc, #-16]	@ 80060cc <SBUS_getData+0x264>
 80060dc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80060e0:	ed5f 6a05 	vldr	s13, [pc, #-20]	@ 80060d0 <SBUS_getData+0x268>
 80060e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80060e8:	ed1f 7a06 	vldr	s14, [pc, #-24]	@ 80060d4 <SBUS_getData+0x26c>
 80060ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80060f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060f4:	ee17 3a90 	vmov	r3, s15
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80060fe:	b29a      	uxth	r2, r3
 8006100:	4bd1      	ldr	r3, [pc, #836]	@ (8006448 <SBUS_getData+0x5e0>)
 8006102:	805a      	strh	r2, [r3, #2]
	Radio_input.Canal_2 = (uint16_t)((((float)Radio_input.Canal_2 - 352) /1344 ) * 1000) + 1000;
 8006104:	4bd0      	ldr	r3, [pc, #832]	@ (8006448 <SBUS_getData+0x5e0>)
 8006106:	889b      	ldrh	r3, [r3, #4]
 8006108:	ee07 3a90 	vmov	s15, r3
 800610c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006110:	ed9f 7ace 	vldr	s14, [pc, #824]	@ 800644c <SBUS_getData+0x5e4>
 8006114:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006118:	eddf 6acd 	vldr	s13, [pc, #820]	@ 8006450 <SBUS_getData+0x5e8>
 800611c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006120:	ed9f 7acc 	vldr	s14, [pc, #816]	@ 8006454 <SBUS_getData+0x5ec>
 8006124:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006128:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800612c:	ee17 3a90 	vmov	r3, s15
 8006130:	b29b      	uxth	r3, r3
 8006132:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8006136:	b29a      	uxth	r2, r3
 8006138:	4bc3      	ldr	r3, [pc, #780]	@ (8006448 <SBUS_getData+0x5e0>)
 800613a:	809a      	strh	r2, [r3, #4]
	Radio_input.Canal_3 = (uint16_t)((((float)Radio_input.Canal_3 - 352) /1344 ) * 1000) + 1000;
 800613c:	4bc2      	ldr	r3, [pc, #776]	@ (8006448 <SBUS_getData+0x5e0>)
 800613e:	88db      	ldrh	r3, [r3, #6]
 8006140:	ee07 3a90 	vmov	s15, r3
 8006144:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006148:	ed9f 7ac0 	vldr	s14, [pc, #768]	@ 800644c <SBUS_getData+0x5e4>
 800614c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006150:	eddf 6abf 	vldr	s13, [pc, #764]	@ 8006450 <SBUS_getData+0x5e8>
 8006154:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006158:	ed9f 7abe 	vldr	s14, [pc, #760]	@ 8006454 <SBUS_getData+0x5ec>
 800615c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006160:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006164:	ee17 3a90 	vmov	r3, s15
 8006168:	b29b      	uxth	r3, r3
 800616a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800616e:	b29a      	uxth	r2, r3
 8006170:	4bb5      	ldr	r3, [pc, #724]	@ (8006448 <SBUS_getData+0x5e0>)
 8006172:	80da      	strh	r2, [r3, #6]
	Radio_input.Canal_4 = (uint16_t)((((float)Radio_input.Canal_4 - 352) /1344 ) * 1000) + 1000;
 8006174:	4bb4      	ldr	r3, [pc, #720]	@ (8006448 <SBUS_getData+0x5e0>)
 8006176:	891b      	ldrh	r3, [r3, #8]
 8006178:	ee07 3a90 	vmov	s15, r3
 800617c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006180:	ed9f 7ab2 	vldr	s14, [pc, #712]	@ 800644c <SBUS_getData+0x5e4>
 8006184:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006188:	eddf 6ab1 	vldr	s13, [pc, #708]	@ 8006450 <SBUS_getData+0x5e8>
 800618c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006190:	ed9f 7ab0 	vldr	s14, [pc, #704]	@ 8006454 <SBUS_getData+0x5ec>
 8006194:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006198:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800619c:	ee17 3a90 	vmov	r3, s15
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80061a6:	b29a      	uxth	r2, r3
 80061a8:	4ba7      	ldr	r3, [pc, #668]	@ (8006448 <SBUS_getData+0x5e0>)
 80061aa:	811a      	strh	r2, [r3, #8]
	Radio_input.Canal_5 = (uint16_t)((((float)Radio_input.Canal_5 - 352) /1344 ) * 1000) + 1000;
 80061ac:	4ba6      	ldr	r3, [pc, #664]	@ (8006448 <SBUS_getData+0x5e0>)
 80061ae:	895b      	ldrh	r3, [r3, #10]
 80061b0:	ee07 3a90 	vmov	s15, r3
 80061b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061b8:	ed9f 7aa4 	vldr	s14, [pc, #656]	@ 800644c <SBUS_getData+0x5e4>
 80061bc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80061c0:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 8006450 <SBUS_getData+0x5e8>
 80061c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80061c8:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 8006454 <SBUS_getData+0x5ec>
 80061cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80061d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061d4:	ee17 3a90 	vmov	r3, s15
 80061d8:	b29b      	uxth	r3, r3
 80061da:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80061de:	b29a      	uxth	r2, r3
 80061e0:	4b99      	ldr	r3, [pc, #612]	@ (8006448 <SBUS_getData+0x5e0>)
 80061e2:	815a      	strh	r2, [r3, #10]
	Radio_input.Canal_6 = (uint16_t)((((float)Radio_input.Canal_6 - 352) /1344 ) * 1000) + 1000;
 80061e4:	4b98      	ldr	r3, [pc, #608]	@ (8006448 <SBUS_getData+0x5e0>)
 80061e6:	899b      	ldrh	r3, [r3, #12]
 80061e8:	ee07 3a90 	vmov	s15, r3
 80061ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061f0:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 800644c <SBUS_getData+0x5e4>
 80061f4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80061f8:	eddf 6a95 	vldr	s13, [pc, #596]	@ 8006450 <SBUS_getData+0x5e8>
 80061fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006200:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 8006454 <SBUS_getData+0x5ec>
 8006204:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006208:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800620c:	ee17 3a90 	vmov	r3, s15
 8006210:	b29b      	uxth	r3, r3
 8006212:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8006216:	b29a      	uxth	r2, r3
 8006218:	4b8b      	ldr	r3, [pc, #556]	@ (8006448 <SBUS_getData+0x5e0>)
 800621a:	819a      	strh	r2, [r3, #12]
	Radio_input.Canal_7 = (uint16_t)((((float)Radio_input.Canal_7 - 352) /1344 ) * 1000) + 1000;
 800621c:	4b8a      	ldr	r3, [pc, #552]	@ (8006448 <SBUS_getData+0x5e0>)
 800621e:	89db      	ldrh	r3, [r3, #14]
 8006220:	ee07 3a90 	vmov	s15, r3
 8006224:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006228:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 800644c <SBUS_getData+0x5e4>
 800622c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006230:	eddf 6a87 	vldr	s13, [pc, #540]	@ 8006450 <SBUS_getData+0x5e8>
 8006234:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006238:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8006454 <SBUS_getData+0x5ec>
 800623c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006240:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006244:	ee17 3a90 	vmov	r3, s15
 8006248:	b29b      	uxth	r3, r3
 800624a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800624e:	b29a      	uxth	r2, r3
 8006250:	4b7d      	ldr	r3, [pc, #500]	@ (8006448 <SBUS_getData+0x5e0>)
 8006252:	81da      	strh	r2, [r3, #14]
	Radio_input.Canal_8 = (uint16_t)((((float)Radio_input.Canal_8 - 352) /1344 ) * 1000) + 1000;
 8006254:	4b7c      	ldr	r3, [pc, #496]	@ (8006448 <SBUS_getData+0x5e0>)
 8006256:	8a1b      	ldrh	r3, [r3, #16]
 8006258:	ee07 3a90 	vmov	s15, r3
 800625c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006260:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 800644c <SBUS_getData+0x5e4>
 8006264:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006268:	eddf 6a79 	vldr	s13, [pc, #484]	@ 8006450 <SBUS_getData+0x5e8>
 800626c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006270:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 8006454 <SBUS_getData+0x5ec>
 8006274:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006278:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800627c:	ee17 3a90 	vmov	r3, s15
 8006280:	b29b      	uxth	r3, r3
 8006282:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8006286:	b29a      	uxth	r2, r3
 8006288:	4b6f      	ldr	r3, [pc, #444]	@ (8006448 <SBUS_getData+0x5e0>)
 800628a:	821a      	strh	r2, [r3, #16]
	Radio_input.Canal_9 = (uint16_t)((((float)Radio_input.Canal_9 - 352) /1344 ) * 1000) + 1000;
 800628c:	4b6e      	ldr	r3, [pc, #440]	@ (8006448 <SBUS_getData+0x5e0>)
 800628e:	8a5b      	ldrh	r3, [r3, #18]
 8006290:	ee07 3a90 	vmov	s15, r3
 8006294:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006298:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 800644c <SBUS_getData+0x5e4>
 800629c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80062a0:	eddf 6a6b 	vldr	s13, [pc, #428]	@ 8006450 <SBUS_getData+0x5e8>
 80062a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80062a8:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 8006454 <SBUS_getData+0x5ec>
 80062ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80062b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062b4:	ee17 3a90 	vmov	r3, s15
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80062be:	b29a      	uxth	r2, r3
 80062c0:	4b61      	ldr	r3, [pc, #388]	@ (8006448 <SBUS_getData+0x5e0>)
 80062c2:	825a      	strh	r2, [r3, #18]
	Radio_input.Canal_10 = (uint16_t)((((float)Radio_input.Canal_10 - 352) /1344 ) * 1000) + 1000;
 80062c4:	4b60      	ldr	r3, [pc, #384]	@ (8006448 <SBUS_getData+0x5e0>)
 80062c6:	8a9b      	ldrh	r3, [r3, #20]
 80062c8:	ee07 3a90 	vmov	s15, r3
 80062cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062d0:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 800644c <SBUS_getData+0x5e4>
 80062d4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80062d8:	eddf 6a5d 	vldr	s13, [pc, #372]	@ 8006450 <SBUS_getData+0x5e8>
 80062dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80062e0:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8006454 <SBUS_getData+0x5ec>
 80062e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80062e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062ec:	ee17 3a90 	vmov	r3, s15
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80062f6:	b29a      	uxth	r2, r3
 80062f8:	4b53      	ldr	r3, [pc, #332]	@ (8006448 <SBUS_getData+0x5e0>)
 80062fa:	829a      	strh	r2, [r3, #20]
	Radio_input.Canal_11 = (uint16_t)((((float)Radio_input.Canal_11 - 352) /1344 ) * 1000) + 1000;
 80062fc:	4b52      	ldr	r3, [pc, #328]	@ (8006448 <SBUS_getData+0x5e0>)
 80062fe:	8adb      	ldrh	r3, [r3, #22]
 8006300:	ee07 3a90 	vmov	s15, r3
 8006304:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006308:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 800644c <SBUS_getData+0x5e4>
 800630c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006310:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006450 <SBUS_getData+0x5e8>
 8006314:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006318:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8006454 <SBUS_getData+0x5ec>
 800631c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006320:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006324:	ee17 3a90 	vmov	r3, s15
 8006328:	b29b      	uxth	r3, r3
 800632a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800632e:	b29a      	uxth	r2, r3
 8006330:	4b45      	ldr	r3, [pc, #276]	@ (8006448 <SBUS_getData+0x5e0>)
 8006332:	82da      	strh	r2, [r3, #22]
	Radio_input.Canal_12 = (uint16_t)((((float)Radio_input.Canal_12 - 352) /1344 ) * 1000) + 1000;
 8006334:	4b44      	ldr	r3, [pc, #272]	@ (8006448 <SBUS_getData+0x5e0>)
 8006336:	8b1b      	ldrh	r3, [r3, #24]
 8006338:	ee07 3a90 	vmov	s15, r3
 800633c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006340:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 800644c <SBUS_getData+0x5e4>
 8006344:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006348:	eddf 6a41 	vldr	s13, [pc, #260]	@ 8006450 <SBUS_getData+0x5e8>
 800634c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006350:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8006454 <SBUS_getData+0x5ec>
 8006354:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006358:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800635c:	ee17 3a90 	vmov	r3, s15
 8006360:	b29b      	uxth	r3, r3
 8006362:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8006366:	b29a      	uxth	r2, r3
 8006368:	4b37      	ldr	r3, [pc, #220]	@ (8006448 <SBUS_getData+0x5e0>)
 800636a:	831a      	strh	r2, [r3, #24]
	Radio_input.Canal_13 = (uint16_t)((((float)Radio_input.Canal_13 - 352) /1344 ) * 1000) + 1000;
 800636c:	4b36      	ldr	r3, [pc, #216]	@ (8006448 <SBUS_getData+0x5e0>)
 800636e:	8b5b      	ldrh	r3, [r3, #26]
 8006370:	ee07 3a90 	vmov	s15, r3
 8006374:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006378:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800644c <SBUS_getData+0x5e4>
 800637c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006380:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8006450 <SBUS_getData+0x5e8>
 8006384:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006388:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8006454 <SBUS_getData+0x5ec>
 800638c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006390:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006394:	ee17 3a90 	vmov	r3, s15
 8006398:	b29b      	uxth	r3, r3
 800639a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800639e:	b29a      	uxth	r2, r3
 80063a0:	4b29      	ldr	r3, [pc, #164]	@ (8006448 <SBUS_getData+0x5e0>)
 80063a2:	835a      	strh	r2, [r3, #26]
	Radio_input.Canal_14 = (uint16_t)((((float)Radio_input.Canal_14 - 352) /1344 ) * 1000) + 1000;
 80063a4:	4b28      	ldr	r3, [pc, #160]	@ (8006448 <SBUS_getData+0x5e0>)
 80063a6:	8b9b      	ldrh	r3, [r3, #28]
 80063a8:	ee07 3a90 	vmov	s15, r3
 80063ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063b0:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800644c <SBUS_getData+0x5e4>
 80063b4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80063b8:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8006450 <SBUS_getData+0x5e8>
 80063bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80063c0:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8006454 <SBUS_getData+0x5ec>
 80063c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80063c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063cc:	ee17 3a90 	vmov	r3, s15
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80063d6:	b29a      	uxth	r2, r3
 80063d8:	4b1b      	ldr	r3, [pc, #108]	@ (8006448 <SBUS_getData+0x5e0>)
 80063da:	839a      	strh	r2, [r3, #28]
	Radio_input.Canal_15 = (uint16_t)((((float)Radio_input.Canal_15 - 352) /1344 ) * 1000) + 1000;
 80063dc:	4b1a      	ldr	r3, [pc, #104]	@ (8006448 <SBUS_getData+0x5e0>)
 80063de:	8bdb      	ldrh	r3, [r3, #30]
 80063e0:	ee07 3a90 	vmov	s15, r3
 80063e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063e8:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800644c <SBUS_getData+0x5e4>
 80063ec:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80063f0:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8006450 <SBUS_getData+0x5e8>
 80063f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80063f8:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8006454 <SBUS_getData+0x5ec>
 80063fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006400:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006404:	ee17 3a90 	vmov	r3, s15
 8006408:	b29b      	uxth	r3, r3
 800640a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800640e:	b29a      	uxth	r2, r3
 8006410:	4b0d      	ldr	r3, [pc, #52]	@ (8006448 <SBUS_getData+0x5e0>)
 8006412:	83da      	strh	r2, [r3, #30]
	Radio_input.Canal_16 = (uint16_t)((((float)Radio_input.Canal_16 - 352) /1344 ) * 1000) + 1000;
 8006414:	4b0c      	ldr	r3, [pc, #48]	@ (8006448 <SBUS_getData+0x5e0>)
 8006416:	8c1b      	ldrh	r3, [r3, #32]
 8006418:	ee07 3a90 	vmov	s15, r3
 800641c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006420:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800644c <SBUS_getData+0x5e4>
 8006424:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006428:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8006450 <SBUS_getData+0x5e8>
 800642c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006430:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8006454 <SBUS_getData+0x5ec>
 8006434:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006438:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800643c:	ee17 3a90 	vmov	r3, s15
 8006440:	b29b      	uxth	r3, r3
 8006442:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8006446:	e007      	b.n	8006458 <SBUS_getData+0x5f0>
 8006448:	2400007c 	.word	0x2400007c
 800644c:	43b00000 	.word	0x43b00000
 8006450:	44a80000 	.word	0x44a80000
 8006454:	447a0000 	.word	0x447a0000
 8006458:	b29a      	uxth	r2, r3
 800645a:	4b2a      	ldr	r3, [pc, #168]	@ (8006504 <SBUS_getData+0x69c>)
 800645c:	841a      	strh	r2, [r3, #32]

	//En el caso del byte 24, el primer bit menos significativo corresponde al canal 17, el segundo al canal 18, el tercero a el fail safe y
	//el cuarto a la perdida de paquetes. Los 4 restantes no se utilizan.

	Radio_input.Banderas = SBUS_UART_Rx[23];
 800645e:	4b2a      	ldr	r3, [pc, #168]	@ (8006508 <SBUS_getData+0x6a0>)
 8006460:	7dda      	ldrb	r2, [r3, #23]
 8006462:	4b28      	ldr	r3, [pc, #160]	@ (8006504 <SBUS_getData+0x69c>)
 8006464:	701a      	strb	r2, [r3, #0]
	if(SBUS_UART_Rx[23]>=8){
 8006466:	4b28      	ldr	r3, [pc, #160]	@ (8006508 <SBUS_getData+0x6a0>)
 8006468:	7ddb      	ldrb	r3, [r3, #23]
 800646a:	2b07      	cmp	r3, #7
 800646c:	d90a      	bls.n	8006484 <SBUS_getData+0x61c>
		SBUS_UART_Rx[23]-=8;
 800646e:	4b26      	ldr	r3, [pc, #152]	@ (8006508 <SBUS_getData+0x6a0>)
 8006470:	7ddb      	ldrb	r3, [r3, #23]
 8006472:	3b08      	subs	r3, #8
 8006474:	b2da      	uxtb	r2, r3
 8006476:	4b24      	ldr	r3, [pc, #144]	@ (8006508 <SBUS_getData+0x6a0>)
 8006478:	75da      	strb	r2, [r3, #23]
		Radio_input.fail_safe = FailSafe;
 800647a:	4b22      	ldr	r3, [pc, #136]	@ (8006504 <SBUS_getData+0x69c>)
 800647c:	2235      	movs	r2, #53	@ 0x35
 800647e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 8006482:	e003      	b.n	800648c <SBUS_getData+0x624>
	}else Radio_input.fail_safe= Ok;
 8006484:	4b1f      	ldr	r3, [pc, #124]	@ (8006504 <SBUS_getData+0x69c>)
 8006486:	22aa      	movs	r2, #170	@ 0xaa
 8006488:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

	if(SBUS_UART_Rx[23]>=4){
 800648c:	4b1e      	ldr	r3, [pc, #120]	@ (8006508 <SBUS_getData+0x6a0>)
 800648e:	7ddb      	ldrb	r3, [r3, #23]
 8006490:	2b03      	cmp	r3, #3
 8006492:	d90a      	bls.n	80064aa <SBUS_getData+0x642>
		SBUS_UART_Rx[23]-=4;
 8006494:	4b1c      	ldr	r3, [pc, #112]	@ (8006508 <SBUS_getData+0x6a0>)
 8006496:	7ddb      	ldrb	r3, [r3, #23]
 8006498:	3b04      	subs	r3, #4
 800649a:	b2da      	uxtb	r2, r3
 800649c:	4b1a      	ldr	r3, [pc, #104]	@ (8006508 <SBUS_getData+0x6a0>)
 800649e:	75da      	strb	r2, [r3, #23]
		Radio_input.pkg_lost = Pkg_Lost;
 80064a0:	4b18      	ldr	r3, [pc, #96]	@ (8006504 <SBUS_getData+0x69c>)
 80064a2:	2210      	movs	r2, #16
 80064a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80064a8:	e003      	b.n	80064b2 <SBUS_getData+0x64a>
	}else Radio_input.pkg_lost=Ok;
 80064aa:	4b16      	ldr	r3, [pc, #88]	@ (8006504 <SBUS_getData+0x69c>)
 80064ac:	22aa      	movs	r2, #170	@ 0xaa
 80064ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if(SBUS_UART_Rx[23]>=2){
 80064b2:	4b15      	ldr	r3, [pc, #84]	@ (8006508 <SBUS_getData+0x6a0>)
 80064b4:	7ddb      	ldrb	r3, [r3, #23]
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d90a      	bls.n	80064d0 <SBUS_getData+0x668>
		SBUS_UART_Rx[23]-=2;
 80064ba:	4b13      	ldr	r3, [pc, #76]	@ (8006508 <SBUS_getData+0x6a0>)
 80064bc:	7ddb      	ldrb	r3, [r3, #23]
 80064be:	3b02      	subs	r3, #2
 80064c0:	b2da      	uxtb	r2, r3
 80064c2:	4b11      	ldr	r3, [pc, #68]	@ (8006508 <SBUS_getData+0x6a0>)
 80064c4:	75da      	strb	r2, [r3, #23]
		Radio_input.Interruptor_2=ON;
 80064c6:	4b0f      	ldr	r3, [pc, #60]	@ (8006504 <SBUS_getData+0x69c>)
 80064c8:	2201      	movs	r2, #1
 80064ca:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
 80064ce:	e003      	b.n	80064d8 <SBUS_getData+0x670>
	}else Radio_input.Interruptor_2=OFF;
 80064d0:	4b0c      	ldr	r3, [pc, #48]	@ (8006504 <SBUS_getData+0x69c>)
 80064d2:	2200      	movs	r2, #0
 80064d4:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

	if(SBUS_UART_Rx[23]){
 80064d8:	4b0b      	ldr	r3, [pc, #44]	@ (8006508 <SBUS_getData+0x6a0>)
 80064da:	7ddb      	ldrb	r3, [r3, #23]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d004      	beq.n	80064ea <SBUS_getData+0x682>
		Radio_input.Interruptor_1=ON;
 80064e0:	4b08      	ldr	r3, [pc, #32]	@ (8006504 <SBUS_getData+0x69c>)
 80064e2:	2201      	movs	r2, #1
 80064e4:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 80064e8:	e003      	b.n	80064f2 <SBUS_getData+0x68a>
	}else Radio_input.Interruptor_1=OFF;
 80064ea:	4b06      	ldr	r3, [pc, #24]	@ (8006504 <SBUS_getData+0x69c>)
 80064ec:	2200      	movs	r2, #0
 80064ee:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22


	Radio_input.Uart_Counter = 0;
 80064f2:	4b04      	ldr	r3, [pc, #16]	@ (8006504 <SBUS_getData+0x69c>)
 80064f4:	2200      	movs	r2, #0
 80064f6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

}
 80064fa:	bf00      	nop
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr
 8006504:	2400007c 	.word	0x2400007c
 8006508:	240016f0 	.word	0x240016f0

0800650c <SBUS_IntegrityVerification>:

void SBUS_IntegrityVerification(void){
 800650c:	b480      	push	{r7}
 800650e:	af00      	add	r7, sp, #0

	if(Radio_input.Uart_Counter != 255){
 8006510:	4b0f      	ldr	r3, [pc, #60]	@ (8006550 <SBUS_IntegrityVerification+0x44>)
 8006512:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8006516:	2bff      	cmp	r3, #255	@ 0xff
 8006518:	d00c      	beq.n	8006534 <SBUS_IntegrityVerification+0x28>
		Radio_input.Uart_Counter++;
 800651a:	4b0d      	ldr	r3, [pc, #52]	@ (8006550 <SBUS_IntegrityVerification+0x44>)
 800651c:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8006520:	3301      	adds	r3, #1
 8006522:	b2da      	uxtb	r2, r3
 8006524:	4b0a      	ldr	r3, [pc, #40]	@ (8006550 <SBUS_IntegrityVerification+0x44>)
 8006526:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		Radio_input.uart_error = Ok;
 800652a:	4b09      	ldr	r3, [pc, #36]	@ (8006550 <SBUS_IntegrityVerification+0x44>)
 800652c:	22aa      	movs	r2, #170	@ 0xaa
 800652e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	}
	else{
		Radio_input.uart_error = Uart_Error;
		Radio_input.fail_safe = FailSafe;
	}
}
 8006532:	e007      	b.n	8006544 <SBUS_IntegrityVerification+0x38>
		Radio_input.uart_error = Uart_Error;
 8006534:	4b06      	ldr	r3, [pc, #24]	@ (8006550 <SBUS_IntegrityVerification+0x44>)
 8006536:	2220      	movs	r2, #32
 8006538:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
		Radio_input.fail_safe = FailSafe;
 800653c:	4b04      	ldr	r3, [pc, #16]	@ (8006550 <SBUS_IntegrityVerification+0x44>)
 800653e:	2235      	movs	r2, #53	@ 0x35
 8006540:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
}
 8006544:	bf00      	nop
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr
 800654e:	bf00      	nop
 8006550:	2400007c 	.word	0x2400007c

08006554 <SD_blackbox_refresh>:
void SD_blackbox_init(void){

	f_open(&BlackBox, BlackBoxFile, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
}

void SD_blackbox_refresh(void){
 8006554:	b480      	push	{r7}
 8006556:	af00      	add	r7, sp, #0

	blackbox_data.Time = TimeOn_Counter;
 8006558:	4b58      	ldr	r3, [pc, #352]	@ (80066bc <SD_blackbox_refresh+0x168>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a58      	ldr	r2, [pc, #352]	@ (80066c0 <SD_blackbox_refresh+0x16c>)
 800655e:	6353      	str	r3, [r2, #52]	@ 0x34

	blackbox_data.Ax = IMU.ACC.x;
 8006560:	4b58      	ldr	r3, [pc, #352]	@ (80066c4 <SD_blackbox_refresh+0x170>)
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	4a56      	ldr	r2, [pc, #344]	@ (80066c0 <SD_blackbox_refresh+0x16c>)
 8006566:	6013      	str	r3, [r2, #0]
	blackbox_data.Ay = IMU.ACC.y;
 8006568:	4b56      	ldr	r3, [pc, #344]	@ (80066c4 <SD_blackbox_refresh+0x170>)
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	4a54      	ldr	r2, [pc, #336]	@ (80066c0 <SD_blackbox_refresh+0x16c>)
 800656e:	6053      	str	r3, [r2, #4]
	blackbox_data.Az = IMU.ACC.z;
 8006570:	4b54      	ldr	r3, [pc, #336]	@ (80066c4 <SD_blackbox_refresh+0x170>)
 8006572:	691b      	ldr	r3, [r3, #16]
 8006574:	4a52      	ldr	r2, [pc, #328]	@ (80066c0 <SD_blackbox_refresh+0x16c>)
 8006576:	6093      	str	r3, [r2, #8]

	blackbox_data.Gx = IMU.GYR.x;
 8006578:	4b52      	ldr	r3, [pc, #328]	@ (80066c4 <SD_blackbox_refresh+0x170>)
 800657a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800657c:	4a50      	ldr	r2, [pc, #320]	@ (80066c0 <SD_blackbox_refresh+0x16c>)
 800657e:	60d3      	str	r3, [r2, #12]
	blackbox_data.Gy = IMU.GYR.y;
 8006580:	4b50      	ldr	r3, [pc, #320]	@ (80066c4 <SD_blackbox_refresh+0x170>)
 8006582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006584:	4a4e      	ldr	r2, [pc, #312]	@ (80066c0 <SD_blackbox_refresh+0x16c>)
 8006586:	6113      	str	r3, [r2, #16]
	blackbox_data.Gz = IMU.GYR.z;
 8006588:	4b4e      	ldr	r3, [pc, #312]	@ (80066c4 <SD_blackbox_refresh+0x170>)
 800658a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800658c:	4a4c      	ldr	r2, [pc, #304]	@ (80066c0 <SD_blackbox_refresh+0x16c>)
 800658e:	6153      	str	r3, [r2, #20]

	blackbox_data.Gfx = 0;
 8006590:	4b4b      	ldr	r3, [pc, #300]	@ (80066c0 <SD_blackbox_refresh+0x16c>)
 8006592:	f04f 0200 	mov.w	r2, #0
 8006596:	619a      	str	r2, [r3, #24]
	blackbox_data.Gfy = 0;
 8006598:	4b49      	ldr	r3, [pc, #292]	@ (80066c0 <SD_blackbox_refresh+0x16c>)
 800659a:	f04f 0200 	mov.w	r2, #0
 800659e:	61da      	str	r2, [r3, #28]
	blackbox_data.Gfz = 0;
 80065a0:	4b47      	ldr	r3, [pc, #284]	@ (80066c0 <SD_blackbox_refresh+0x16c>)
 80065a2:	f04f 0200 	mov.w	r2, #0
 80065a6:	621a      	str	r2, [r3, #32]

	blackbox_data.Roll    = IMU.Roll;
 80065a8:	4b46      	ldr	r3, [pc, #280]	@ (80066c4 <SD_blackbox_refresh+0x170>)
 80065aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065ac:	4a44      	ldr	r2, [pc, #272]	@ (80066c0 <SD_blackbox_refresh+0x16c>)
 80065ae:	6253      	str	r3, [r2, #36]	@ 0x24
	blackbox_data.Pitch   = IMU.Pitch;
 80065b0:	4b44      	ldr	r3, [pc, #272]	@ (80066c4 <SD_blackbox_refresh+0x170>)
 80065b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065b4:	4a42      	ldr	r2, [pc, #264]	@ (80066c0 <SD_blackbox_refresh+0x16c>)
 80065b6:	6293      	str	r3, [r2, #40]	@ 0x28
	blackbox_data.Heading = IMU.Heading;
 80065b8:	4b42      	ldr	r3, [pc, #264]	@ (80066c4 <SD_blackbox_refresh+0x170>)
 80065ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065bc:	4a40      	ldr	r2, [pc, #256]	@ (80066c0 <SD_blackbox_refresh+0x16c>)
 80065be:	62d3      	str	r3, [r2, #44]	@ 0x2c

	blackbox_data.Alt = BMP280.Barometric_Altitude;
 80065c0:	4b41      	ldr	r3, [pc, #260]	@ (80066c8 <SD_blackbox_refresh+0x174>)
 80065c2:	8a1a      	ldrh	r2, [r3, #16]
 80065c4:	4b3e      	ldr	r3, [pc, #248]	@ (80066c0 <SD_blackbox_refresh+0x16c>)
 80065c6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
	blackbox_data.Latitude = 0;
 80065ca:	4b3d      	ldr	r3, [pc, #244]	@ (80066c0 <SD_blackbox_refresh+0x16c>)
 80065cc:	2200      	movs	r2, #0
 80065ce:	639a      	str	r2, [r3, #56]	@ 0x38
	blackbox_data.Longitude= 0;
 80065d0:	4b3b      	ldr	r3, [pc, #236]	@ (80066c0 <SD_blackbox_refresh+0x16c>)
 80065d2:	2200      	movs	r2, #0
 80065d4:	63da      	str	r2, [r3, #60]	@ 0x3c

	blackbox_data.ARSP = 0;
 80065d6:	4b3a      	ldr	r3, [pc, #232]	@ (80066c0 <SD_blackbox_refresh+0x16c>)
 80065d8:	2200      	movs	r2, #0
 80065da:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

	blackbox_data.Pressure = BMP280.Pressure;
 80065de:	4b3a      	ldr	r3, [pc, #232]	@ (80066c8 <SD_blackbox_refresh+0x174>)
 80065e0:	68db      	ldr	r3, [r3, #12]
 80065e2:	4a37      	ldr	r2, [pc, #220]	@ (80066c0 <SD_blackbox_refresh+0x16c>)
 80065e4:	6413      	str	r3, [r2, #64]	@ 0x40

	blackbox_data.SBUS_Flags = Radio_input.Banderas;
 80065e6:	4b39      	ldr	r3, [pc, #228]	@ (80066cc <SD_blackbox_refresh+0x178>)
 80065e8:	781a      	ldrb	r2, [r3, #0]
 80065ea:	4b35      	ldr	r3, [pc, #212]	@ (80066c0 <SD_blackbox_refresh+0x16c>)
 80065ec:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
	blackbox_data.Flight_Mode = 0;
 80065f0:	4b33      	ldr	r3, [pc, #204]	@ (80066c0 <SD_blackbox_refresh+0x16c>)
 80065f2:	2200      	movs	r2, #0
 80065f4:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

	blackbox_data.Canal_1 = Radio_input.Canal_1;
 80065f8:	4b34      	ldr	r3, [pc, #208]	@ (80066cc <SD_blackbox_refresh+0x178>)
 80065fa:	885a      	ldrh	r2, [r3, #2]
 80065fc:	4b30      	ldr	r3, [pc, #192]	@ (80066c0 <SD_blackbox_refresh+0x16c>)
 80065fe:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	blackbox_data.Canal_2 = Radio_input.Canal_2;
 8006602:	4b32      	ldr	r3, [pc, #200]	@ (80066cc <SD_blackbox_refresh+0x178>)
 8006604:	889a      	ldrh	r2, [r3, #4]
 8006606:	4b2e      	ldr	r3, [pc, #184]	@ (80066c0 <SD_blackbox_refresh+0x16c>)
 8006608:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
	blackbox_data.Canal_3 = Radio_input.Canal_3;
 800660c:	4b2f      	ldr	r3, [pc, #188]	@ (80066cc <SD_blackbox_refresh+0x178>)
 800660e:	88da      	ldrh	r2, [r3, #6]
 8006610:	4b2b      	ldr	r3, [pc, #172]	@ (80066c0 <SD_blackbox_refresh+0x16c>)
 8006612:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
	blackbox_data.Canal_4 = Radio_input.Canal_4;
 8006616:	4b2d      	ldr	r3, [pc, #180]	@ (80066cc <SD_blackbox_refresh+0x178>)
 8006618:	891a      	ldrh	r2, [r3, #8]
 800661a:	4b29      	ldr	r3, [pc, #164]	@ (80066c0 <SD_blackbox_refresh+0x16c>)
 800661c:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
	blackbox_data.Canal_5 = Radio_input.Canal_5;
 8006620:	4b2a      	ldr	r3, [pc, #168]	@ (80066cc <SD_blackbox_refresh+0x178>)
 8006622:	895a      	ldrh	r2, [r3, #10]
 8006624:	4b26      	ldr	r3, [pc, #152]	@ (80066c0 <SD_blackbox_refresh+0x16c>)
 8006626:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
	blackbox_data.Canal_6 = Radio_input.Canal_6;
 800662a:	4b28      	ldr	r3, [pc, #160]	@ (80066cc <SD_blackbox_refresh+0x178>)
 800662c:	899a      	ldrh	r2, [r3, #12]
 800662e:	4b24      	ldr	r3, [pc, #144]	@ (80066c0 <SD_blackbox_refresh+0x16c>)
 8006630:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
	blackbox_data.Canal_7 = Radio_input.Canal_7;
 8006634:	4b25      	ldr	r3, [pc, #148]	@ (80066cc <SD_blackbox_refresh+0x178>)
 8006636:	89da      	ldrh	r2, [r3, #14]
 8006638:	4b21      	ldr	r3, [pc, #132]	@ (80066c0 <SD_blackbox_refresh+0x16c>)
 800663a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
	blackbox_data.Canal_8 = Radio_input.Canal_8;
 800663e:	4b23      	ldr	r3, [pc, #140]	@ (80066cc <SD_blackbox_refresh+0x178>)
 8006640:	8a1a      	ldrh	r2, [r3, #16]
 8006642:	4b1f      	ldr	r3, [pc, #124]	@ (80066c0 <SD_blackbox_refresh+0x16c>)
 8006644:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
	blackbox_data.Canal_9 = Radio_input.Canal_9;
 8006648:	4b20      	ldr	r3, [pc, #128]	@ (80066cc <SD_blackbox_refresh+0x178>)
 800664a:	8a5a      	ldrh	r2, [r3, #18]
 800664c:	4b1c      	ldr	r3, [pc, #112]	@ (80066c0 <SD_blackbox_refresh+0x16c>)
 800664e:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
	blackbox_data.Canal_10 = Radio_input.Canal_10;
 8006652:	4b1e      	ldr	r3, [pc, #120]	@ (80066cc <SD_blackbox_refresh+0x178>)
 8006654:	8a9a      	ldrh	r2, [r3, #20]
 8006656:	4b1a      	ldr	r3, [pc, #104]	@ (80066c0 <SD_blackbox_refresh+0x16c>)
 8006658:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
	blackbox_data.Canal_11 = Radio_input.Canal_11;
 800665c:	4b1b      	ldr	r3, [pc, #108]	@ (80066cc <SD_blackbox_refresh+0x178>)
 800665e:	8ada      	ldrh	r2, [r3, #22]
 8006660:	4b17      	ldr	r3, [pc, #92]	@ (80066c0 <SD_blackbox_refresh+0x16c>)
 8006662:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
	blackbox_data.Canal_12 = Radio_input.Canal_12;
 8006666:	4b19      	ldr	r3, [pc, #100]	@ (80066cc <SD_blackbox_refresh+0x178>)
 8006668:	8b1a      	ldrh	r2, [r3, #24]
 800666a:	4b15      	ldr	r3, [pc, #84]	@ (80066c0 <SD_blackbox_refresh+0x16c>)
 800666c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
	blackbox_data.Canal_13 = Radio_input.Canal_13;
 8006670:	4b16      	ldr	r3, [pc, #88]	@ (80066cc <SD_blackbox_refresh+0x178>)
 8006672:	8b5a      	ldrh	r2, [r3, #26]
 8006674:	4b12      	ldr	r3, [pc, #72]	@ (80066c0 <SD_blackbox_refresh+0x16c>)
 8006676:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
	blackbox_data.Canal_14 = Radio_input.Canal_14;
 800667a:	4b14      	ldr	r3, [pc, #80]	@ (80066cc <SD_blackbox_refresh+0x178>)
 800667c:	8b9a      	ldrh	r2, [r3, #28]
 800667e:	4b10      	ldr	r3, [pc, #64]	@ (80066c0 <SD_blackbox_refresh+0x16c>)
 8006680:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
	blackbox_data.Canal_15 = Radio_input.Canal_15;
 8006684:	4b11      	ldr	r3, [pc, #68]	@ (80066cc <SD_blackbox_refresh+0x178>)
 8006686:	8bda      	ldrh	r2, [r3, #30]
 8006688:	4b0d      	ldr	r3, [pc, #52]	@ (80066c0 <SD_blackbox_refresh+0x16c>)
 800668a:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
	blackbox_data.Canal_16 = Radio_input.Canal_16;
 800668e:	4b0f      	ldr	r3, [pc, #60]	@ (80066cc <SD_blackbox_refresh+0x178>)
 8006690:	8c1a      	ldrh	r2, [r3, #32]
 8006692:	4b0b      	ldr	r3, [pc, #44]	@ (80066c0 <SD_blackbox_refresh+0x16c>)
 8006694:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

	blackbox_data.Interruptor_1 = Radio_input.Interruptor_1;
 8006698:	4b0c      	ldr	r3, [pc, #48]	@ (80066cc <SD_blackbox_refresh+0x178>)
 800669a:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 800669e:	4b08      	ldr	r3, [pc, #32]	@ (80066c0 <SD_blackbox_refresh+0x16c>)
 80066a0:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
	blackbox_data.Interruptor_2 = Radio_input.Interruptor_2;
 80066a4:	4b09      	ldr	r3, [pc, #36]	@ (80066cc <SD_blackbox_refresh+0x178>)
 80066a6:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 80066aa:	4b05      	ldr	r3, [pc, #20]	@ (80066c0 <SD_blackbox_refresh+0x16c>)
 80066ac:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
//	blackbox_data.OUT6  = PWM_Output.Canal_6;
//	blackbox_data.OUT7  = PWM_Output.Canal_7;
//	blackbox_data.OUT8  = PWM_Output.Canal_8;
//	blackbox_data.OUT9  = PWM_Output.Canal_9;
//	blackbox_data.OUT10 = PWM_Output.Canal_10;
}
 80066b0:	bf00      	nop
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr
 80066ba:	bf00      	nop
 80066bc:	24000dfc 	.word	0x24000dfc
 80066c0:	24002934 	.word	0x24002934
 80066c4:	24001588 	.word	0x24001588
 80066c8:	24001448 	.word	0x24001448
 80066cc:	2400007c 	.word	0x2400007c

080066d0 <SD_blackbox_write>:
	BlackBoxFile[4] = ActualFile[4];

	f_open(&BlackBox, BlackBoxFile, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
}

void SD_blackbox_write(void){
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b082      	sub	sp, #8
 80066d4:	af00      	add	r7, sp, #0
	static uint8_t NewFileCount = 0;
	static uint32_t DataCount = 0;
	static uint16_t WriteCount = 0;

	SD_blackbox_refresh();
 80066d6:	f7ff ff3d 	bl	8006554 <SD_blackbox_refresh>

	blackbox_data.Nmsg = DataCount;
 80066da:	4b26      	ldr	r3, [pc, #152]	@ (8006774 <SD_blackbox_write+0xa4>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a26      	ldr	r2, [pc, #152]	@ (8006778 <SD_blackbox_write+0xa8>)
 80066e0:	6313      	str	r3, [r2, #48]	@ 0x30
	memcpy(&BlackBoxBuffer[WriteCount],&blackbox_data,sizeof(blackbox_data));
 80066e2:	4b26      	ldr	r3, [pc, #152]	@ (800677c <SD_blackbox_write+0xac>)
 80066e4:	881b      	ldrh	r3, [r3, #0]
 80066e6:	461a      	mov	r2, r3
 80066e8:	4613      	mov	r3, r2
 80066ea:	021b      	lsls	r3, r3, #8
 80066ec:	1a9b      	subs	r3, r3, r2
 80066ee:	4a24      	ldr	r2, [pc, #144]	@ (8006780 <SD_blackbox_write+0xb0>)
 80066f0:	4413      	add	r3, r2
 80066f2:	2280      	movs	r2, #128	@ 0x80
 80066f4:	4920      	ldr	r1, [pc, #128]	@ (8006778 <SD_blackbox_write+0xa8>)
 80066f6:	4618      	mov	r0, r3
 80066f8:	f011 fb5f 	bl	8017dba <memcpy>

	if(WriteCount == 15){
 80066fc:	4b1f      	ldr	r3, [pc, #124]	@ (800677c <SD_blackbox_write+0xac>)
 80066fe:	881b      	ldrh	r3, [r3, #0]
 8006700:	2b0f      	cmp	r3, #15
 8006702:	d129      	bne.n	8006758 <SD_blackbox_write+0x88>
		for (uint8_t n = 0; n < 16; ++n) {
 8006704:	2300      	movs	r3, #0
 8006706:	71fb      	strb	r3, [r7, #7]
 8006708:	e00d      	b.n	8006726 <SD_blackbox_write+0x56>
			f_write(&BlackBox, &BlackBoxBuffer[n], sizeof(blackbox_data), &bw);
 800670a:	79fa      	ldrb	r2, [r7, #7]
 800670c:	4613      	mov	r3, r2
 800670e:	021b      	lsls	r3, r3, #8
 8006710:	1a9b      	subs	r3, r3, r2
 8006712:	4a1b      	ldr	r2, [pc, #108]	@ (8006780 <SD_blackbox_write+0xb0>)
 8006714:	1899      	adds	r1, r3, r2
 8006716:	4b1b      	ldr	r3, [pc, #108]	@ (8006784 <SD_blackbox_write+0xb4>)
 8006718:	2280      	movs	r2, #128	@ 0x80
 800671a:	481b      	ldr	r0, [pc, #108]	@ (8006788 <SD_blackbox_write+0xb8>)
 800671c:	f00d fe67 	bl	80143ee <f_write>
		for (uint8_t n = 0; n < 16; ++n) {
 8006720:	79fb      	ldrb	r3, [r7, #7]
 8006722:	3301      	adds	r3, #1
 8006724:	71fb      	strb	r3, [r7, #7]
 8006726:	79fb      	ldrb	r3, [r7, #7]
 8006728:	2b0f      	cmp	r3, #15
 800672a:	d9ee      	bls.n	800670a <SD_blackbox_write+0x3a>
		}
		fresult = f_sync(&BlackBox);
 800672c:	4816      	ldr	r0, [pc, #88]	@ (8006788 <SD_blackbox_write+0xb8>)
 800672e:	f00e f802 	bl	8014736 <f_sync>
 8006732:	4603      	mov	r3, r0
 8006734:	461a      	mov	r2, r3
 8006736:	4b15      	ldr	r3, [pc, #84]	@ (800678c <SD_blackbox_write+0xbc>)
 8006738:	701a      	strb	r2, [r3, #0]
		WriteCount = 0;
 800673a:	4b10      	ldr	r3, [pc, #64]	@ (800677c <SD_blackbox_write+0xac>)
 800673c:	2200      	movs	r2, #0
 800673e:	801a      	strh	r2, [r3, #0]
		++NewFileCount;
 8006740:	4b13      	ldr	r3, [pc, #76]	@ (8006790 <SD_blackbox_write+0xc0>)
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	3301      	adds	r3, #1
 8006746:	b2da      	uxtb	r2, r3
 8006748:	4b11      	ldr	r3, [pc, #68]	@ (8006790 <SD_blackbox_write+0xc0>)
 800674a:	701a      	strb	r2, [r3, #0]
		++DataCount;
 800674c:	4b09      	ldr	r3, [pc, #36]	@ (8006774 <SD_blackbox_write+0xa4>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	3301      	adds	r3, #1
 8006752:	4a08      	ldr	r2, [pc, #32]	@ (8006774 <SD_blackbox_write+0xa4>)
 8006754:	6013      	str	r3, [r2, #0]
		return;
 8006756:	e00a      	b.n	800676e <SD_blackbox_write+0x9e>
	}
	++WriteCount;
 8006758:	4b08      	ldr	r3, [pc, #32]	@ (800677c <SD_blackbox_write+0xac>)
 800675a:	881b      	ldrh	r3, [r3, #0]
 800675c:	3301      	adds	r3, #1
 800675e:	b29a      	uxth	r2, r3
 8006760:	4b06      	ldr	r3, [pc, #24]	@ (800677c <SD_blackbox_write+0xac>)
 8006762:	801a      	strh	r2, [r3, #0]
	++DataCount;
 8006764:	4b03      	ldr	r3, [pc, #12]	@ (8006774 <SD_blackbox_write+0xa4>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	3301      	adds	r3, #1
 800676a:	4a02      	ldr	r2, [pc, #8]	@ (8006774 <SD_blackbox_write+0xa4>)
 800676c:	6013      	str	r3, [r2, #0]
}
 800676e:	3708      	adds	r7, #8
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}
 8006774:	240029b4 	.word	0x240029b4
 8006778:	24002934 	.word	0x24002934
 800677c:	240029b8 	.word	0x240029b8
 8006780:	24001944 	.word	0x24001944
 8006784:	24001940 	.word	0x24001940
 8006788:	2400170c 	.word	0x2400170c
 800678c:	2400193c 	.word	0x2400193c
 8006790:	240029ba 	.word	0x240029ba

08006794 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006794:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80067cc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8006798:	f7fd f826 	bl	80037e8 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800679c:	480c      	ldr	r0, [pc, #48]	@ (80067d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800679e:	490d      	ldr	r1, [pc, #52]	@ (80067d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80067a0:	4a0d      	ldr	r2, [pc, #52]	@ (80067d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80067a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80067a4:	e002      	b.n	80067ac <LoopCopyDataInit>

080067a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80067a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80067a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80067aa:	3304      	adds	r3, #4

080067ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80067ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80067ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80067b0:	d3f9      	bcc.n	80067a6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80067b2:	4a0a      	ldr	r2, [pc, #40]	@ (80067dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80067b4:	4c0a      	ldr	r4, [pc, #40]	@ (80067e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80067b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80067b8:	e001      	b.n	80067be <LoopFillZerobss>

080067ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80067ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80067bc:	3204      	adds	r2, #4

080067be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80067be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80067c0:	d3fb      	bcc.n	80067ba <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80067c2:	f011 fad3 	bl	8017d6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80067c6:	f7fc fba9 	bl	8002f1c <main>
  bx  lr
 80067ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80067cc:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80067d0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80067d4:	24000290 	.word	0x24000290
  ldr r2, =_sidata
 80067d8:	0801aa70 	.word	0x0801aa70
  ldr r2, =_sbss
 80067dc:	24000290 	.word	0x24000290
  ldr r4, =_ebss
 80067e0:	2400687c 	.word	0x2400687c

080067e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80067e4:	e7fe      	b.n	80067e4 <ADC_IRQHandler>
	...

080067e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b082      	sub	sp, #8
 80067ec:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80067ee:	2003      	movs	r0, #3
 80067f0:	f000 f927 	bl	8006a42 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80067f4:	f004 fd3e 	bl	800b274 <HAL_RCC_GetSysClockFreq>
 80067f8:	4602      	mov	r2, r0
 80067fa:	4b15      	ldr	r3, [pc, #84]	@ (8006850 <HAL_Init+0x68>)
 80067fc:	699b      	ldr	r3, [r3, #24]
 80067fe:	0a1b      	lsrs	r3, r3, #8
 8006800:	f003 030f 	and.w	r3, r3, #15
 8006804:	4913      	ldr	r1, [pc, #76]	@ (8006854 <HAL_Init+0x6c>)
 8006806:	5ccb      	ldrb	r3, [r1, r3]
 8006808:	f003 031f 	and.w	r3, r3, #31
 800680c:	fa22 f303 	lsr.w	r3, r2, r3
 8006810:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006812:	4b0f      	ldr	r3, [pc, #60]	@ (8006850 <HAL_Init+0x68>)
 8006814:	699b      	ldr	r3, [r3, #24]
 8006816:	f003 030f 	and.w	r3, r3, #15
 800681a:	4a0e      	ldr	r2, [pc, #56]	@ (8006854 <HAL_Init+0x6c>)
 800681c:	5cd3      	ldrb	r3, [r2, r3]
 800681e:	f003 031f 	and.w	r3, r3, #31
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	fa22 f303 	lsr.w	r3, r2, r3
 8006828:	4a0b      	ldr	r2, [pc, #44]	@ (8006858 <HAL_Init+0x70>)
 800682a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800682c:	4a0b      	ldr	r2, [pc, #44]	@ (800685c <HAL_Init+0x74>)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006832:	200f      	movs	r0, #15
 8006834:	f7fc fe42 	bl	80034bc <HAL_InitTick>
 8006838:	4603      	mov	r3, r0
 800683a:	2b00      	cmp	r3, #0
 800683c:	d001      	beq.n	8006842 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	e002      	b.n	8006848 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8006842:	f7fc fe1d 	bl	8003480 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006846:	2300      	movs	r3, #0
}
 8006848:	4618      	mov	r0, r3
 800684a:	3708      	adds	r7, #8
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}
 8006850:	58024400 	.word	0x58024400
 8006854:	08019dd4 	.word	0x08019dd4
 8006858:	24000004 	.word	0x24000004
 800685c:	24000000 	.word	0x24000000

08006860 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006860:	b480      	push	{r7}
 8006862:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006864:	4b06      	ldr	r3, [pc, #24]	@ (8006880 <HAL_IncTick+0x20>)
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	461a      	mov	r2, r3
 800686a:	4b06      	ldr	r3, [pc, #24]	@ (8006884 <HAL_IncTick+0x24>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4413      	add	r3, r2
 8006870:	4a04      	ldr	r2, [pc, #16]	@ (8006884 <HAL_IncTick+0x24>)
 8006872:	6013      	str	r3, [r2, #0]
}
 8006874:	bf00      	nop
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr
 800687e:	bf00      	nop
 8006880:	240000a8 	.word	0x240000a8
 8006884:	240029bc 	.word	0x240029bc

08006888 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006888:	b480      	push	{r7}
 800688a:	af00      	add	r7, sp, #0
  return uwTick;
 800688c:	4b03      	ldr	r3, [pc, #12]	@ (800689c <HAL_GetTick+0x14>)
 800688e:	681b      	ldr	r3, [r3, #0]
}
 8006890:	4618      	mov	r0, r3
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr
 800689a:	bf00      	nop
 800689c:	240029bc 	.word	0x240029bc

080068a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b084      	sub	sp, #16
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80068a8:	f7ff ffee 	bl	8006888 <HAL_GetTick>
 80068ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068b8:	d005      	beq.n	80068c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80068ba:	4b0a      	ldr	r3, [pc, #40]	@ (80068e4 <HAL_Delay+0x44>)
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	461a      	mov	r2, r3
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	4413      	add	r3, r2
 80068c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80068c6:	bf00      	nop
 80068c8:	f7ff ffde 	bl	8006888 <HAL_GetTick>
 80068cc:	4602      	mov	r2, r0
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	1ad3      	subs	r3, r2, r3
 80068d2:	68fa      	ldr	r2, [r7, #12]
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d8f7      	bhi.n	80068c8 <HAL_Delay+0x28>
  {
  }
}
 80068d8:	bf00      	nop
 80068da:	bf00      	nop
 80068dc:	3710      	adds	r7, #16
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	bf00      	nop
 80068e4:	240000a8 	.word	0x240000a8

080068e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b085      	sub	sp, #20
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f003 0307 	and.w	r3, r3, #7
 80068f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80068f8:	4b0b      	ldr	r3, [pc, #44]	@ (8006928 <__NVIC_SetPriorityGrouping+0x40>)
 80068fa:	68db      	ldr	r3, [r3, #12]
 80068fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80068fe:	68ba      	ldr	r2, [r7, #8]
 8006900:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006904:	4013      	ands	r3, r2
 8006906:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006910:	4b06      	ldr	r3, [pc, #24]	@ (800692c <__NVIC_SetPriorityGrouping+0x44>)
 8006912:	4313      	orrs	r3, r2
 8006914:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006916:	4a04      	ldr	r2, [pc, #16]	@ (8006928 <__NVIC_SetPriorityGrouping+0x40>)
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	60d3      	str	r3, [r2, #12]
}
 800691c:	bf00      	nop
 800691e:	3714      	adds	r7, #20
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr
 8006928:	e000ed00 	.word	0xe000ed00
 800692c:	05fa0000 	.word	0x05fa0000

08006930 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006930:	b480      	push	{r7}
 8006932:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006934:	4b04      	ldr	r3, [pc, #16]	@ (8006948 <__NVIC_GetPriorityGrouping+0x18>)
 8006936:	68db      	ldr	r3, [r3, #12]
 8006938:	0a1b      	lsrs	r3, r3, #8
 800693a:	f003 0307 	and.w	r3, r3, #7
}
 800693e:	4618      	mov	r0, r3
 8006940:	46bd      	mov	sp, r7
 8006942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006946:	4770      	bx	lr
 8006948:	e000ed00 	.word	0xe000ed00

0800694c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800694c:	b480      	push	{r7}
 800694e:	b083      	sub	sp, #12
 8006950:	af00      	add	r7, sp, #0
 8006952:	4603      	mov	r3, r0
 8006954:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006956:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800695a:	2b00      	cmp	r3, #0
 800695c:	db0b      	blt.n	8006976 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800695e:	88fb      	ldrh	r3, [r7, #6]
 8006960:	f003 021f 	and.w	r2, r3, #31
 8006964:	4907      	ldr	r1, [pc, #28]	@ (8006984 <__NVIC_EnableIRQ+0x38>)
 8006966:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800696a:	095b      	lsrs	r3, r3, #5
 800696c:	2001      	movs	r0, #1
 800696e:	fa00 f202 	lsl.w	r2, r0, r2
 8006972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006976:	bf00      	nop
 8006978:	370c      	adds	r7, #12
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr
 8006982:	bf00      	nop
 8006984:	e000e100 	.word	0xe000e100

08006988 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006988:	b480      	push	{r7}
 800698a:	b083      	sub	sp, #12
 800698c:	af00      	add	r7, sp, #0
 800698e:	4603      	mov	r3, r0
 8006990:	6039      	str	r1, [r7, #0]
 8006992:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006994:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006998:	2b00      	cmp	r3, #0
 800699a:	db0a      	blt.n	80069b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	b2da      	uxtb	r2, r3
 80069a0:	490c      	ldr	r1, [pc, #48]	@ (80069d4 <__NVIC_SetPriority+0x4c>)
 80069a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80069a6:	0112      	lsls	r2, r2, #4
 80069a8:	b2d2      	uxtb	r2, r2
 80069aa:	440b      	add	r3, r1
 80069ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80069b0:	e00a      	b.n	80069c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	b2da      	uxtb	r2, r3
 80069b6:	4908      	ldr	r1, [pc, #32]	@ (80069d8 <__NVIC_SetPriority+0x50>)
 80069b8:	88fb      	ldrh	r3, [r7, #6]
 80069ba:	f003 030f 	and.w	r3, r3, #15
 80069be:	3b04      	subs	r3, #4
 80069c0:	0112      	lsls	r2, r2, #4
 80069c2:	b2d2      	uxtb	r2, r2
 80069c4:	440b      	add	r3, r1
 80069c6:	761a      	strb	r2, [r3, #24]
}
 80069c8:	bf00      	nop
 80069ca:	370c      	adds	r7, #12
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr
 80069d4:	e000e100 	.word	0xe000e100
 80069d8:	e000ed00 	.word	0xe000ed00

080069dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80069dc:	b480      	push	{r7}
 80069de:	b089      	sub	sp, #36	@ 0x24
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	60b9      	str	r1, [r7, #8]
 80069e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f003 0307 	and.w	r3, r3, #7
 80069ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80069f0:	69fb      	ldr	r3, [r7, #28]
 80069f2:	f1c3 0307 	rsb	r3, r3, #7
 80069f6:	2b04      	cmp	r3, #4
 80069f8:	bf28      	it	cs
 80069fa:	2304      	movcs	r3, #4
 80069fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80069fe:	69fb      	ldr	r3, [r7, #28]
 8006a00:	3304      	adds	r3, #4
 8006a02:	2b06      	cmp	r3, #6
 8006a04:	d902      	bls.n	8006a0c <NVIC_EncodePriority+0x30>
 8006a06:	69fb      	ldr	r3, [r7, #28]
 8006a08:	3b03      	subs	r3, #3
 8006a0a:	e000      	b.n	8006a0e <NVIC_EncodePriority+0x32>
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a10:	f04f 32ff 	mov.w	r2, #4294967295
 8006a14:	69bb      	ldr	r3, [r7, #24]
 8006a16:	fa02 f303 	lsl.w	r3, r2, r3
 8006a1a:	43da      	mvns	r2, r3
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	401a      	ands	r2, r3
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006a24:	f04f 31ff 	mov.w	r1, #4294967295
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8006a2e:	43d9      	mvns	r1, r3
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a34:	4313      	orrs	r3, r2
         );
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3724      	adds	r7, #36	@ 0x24
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr

08006a42 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006a42:	b580      	push	{r7, lr}
 8006a44:	b082      	sub	sp, #8
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f7ff ff4c 	bl	80068e8 <__NVIC_SetPriorityGrouping>
}
 8006a50:	bf00      	nop
 8006a52:	3708      	adds	r7, #8
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b086      	sub	sp, #24
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	4603      	mov	r3, r0
 8006a60:	60b9      	str	r1, [r7, #8]
 8006a62:	607a      	str	r2, [r7, #4]
 8006a64:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006a66:	f7ff ff63 	bl	8006930 <__NVIC_GetPriorityGrouping>
 8006a6a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	68b9      	ldr	r1, [r7, #8]
 8006a70:	6978      	ldr	r0, [r7, #20]
 8006a72:	f7ff ffb3 	bl	80069dc <NVIC_EncodePriority>
 8006a76:	4602      	mov	r2, r0
 8006a78:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006a7c:	4611      	mov	r1, r2
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f7ff ff82 	bl	8006988 <__NVIC_SetPriority>
}
 8006a84:	bf00      	nop
 8006a86:	3718      	adds	r7, #24
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b082      	sub	sp, #8
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	4603      	mov	r3, r0
 8006a94:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006a96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f7ff ff56 	bl	800694c <__NVIC_EnableIRQ>
}
 8006aa0:	bf00      	nop
 8006aa2:	3708      	adds	r7, #8
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}

08006aa8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8006aac:	f3bf 8f5f 	dmb	sy
}
 8006ab0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8006ab2:	4b07      	ldr	r3, [pc, #28]	@ (8006ad0 <HAL_MPU_Disable+0x28>)
 8006ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ab6:	4a06      	ldr	r2, [pc, #24]	@ (8006ad0 <HAL_MPU_Disable+0x28>)
 8006ab8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006abc:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8006abe:	4b05      	ldr	r3, [pc, #20]	@ (8006ad4 <HAL_MPU_Disable+0x2c>)
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	605a      	str	r2, [r3, #4]
}
 8006ac4:	bf00      	nop
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr
 8006ace:	bf00      	nop
 8006ad0:	e000ed00 	.word	0xe000ed00
 8006ad4:	e000ed90 	.word	0xe000ed90

08006ad8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8006ae0:	4a0b      	ldr	r2, [pc, #44]	@ (8006b10 <HAL_MPU_Enable+0x38>)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f043 0301 	orr.w	r3, r3, #1
 8006ae8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8006aea:	4b0a      	ldr	r3, [pc, #40]	@ (8006b14 <HAL_MPU_Enable+0x3c>)
 8006aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aee:	4a09      	ldr	r2, [pc, #36]	@ (8006b14 <HAL_MPU_Enable+0x3c>)
 8006af0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006af4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8006af6:	f3bf 8f4f 	dsb	sy
}
 8006afa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006afc:	f3bf 8f6f 	isb	sy
}
 8006b00:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8006b02:	bf00      	nop
 8006b04:	370c      	adds	r7, #12
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr
 8006b0e:	bf00      	nop
 8006b10:	e000ed90 	.word	0xe000ed90
 8006b14:	e000ed00 	.word	0xe000ed00

08006b18 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b083      	sub	sp, #12
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	785a      	ldrb	r2, [r3, #1]
 8006b24:	4b1b      	ldr	r3, [pc, #108]	@ (8006b94 <HAL_MPU_ConfigRegion+0x7c>)
 8006b26:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8006b28:	4b1a      	ldr	r3, [pc, #104]	@ (8006b94 <HAL_MPU_ConfigRegion+0x7c>)
 8006b2a:	691b      	ldr	r3, [r3, #16]
 8006b2c:	4a19      	ldr	r2, [pc, #100]	@ (8006b94 <HAL_MPU_ConfigRegion+0x7c>)
 8006b2e:	f023 0301 	bic.w	r3, r3, #1
 8006b32:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8006b34:	4a17      	ldr	r2, [pc, #92]	@ (8006b94 <HAL_MPU_ConfigRegion+0x7c>)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	7b1b      	ldrb	r3, [r3, #12]
 8006b40:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	7adb      	ldrb	r3, [r3, #11]
 8006b46:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006b48:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	7a9b      	ldrb	r3, [r3, #10]
 8006b4e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006b50:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	7b5b      	ldrb	r3, [r3, #13]
 8006b56:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006b58:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	7b9b      	ldrb	r3, [r3, #14]
 8006b5e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006b60:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	7bdb      	ldrb	r3, [r3, #15]
 8006b66:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006b68:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	7a5b      	ldrb	r3, [r3, #9]
 8006b6e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006b70:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	7a1b      	ldrb	r3, [r3, #8]
 8006b76:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006b78:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8006b7a:	687a      	ldr	r2, [r7, #4]
 8006b7c:	7812      	ldrb	r2, [r2, #0]
 8006b7e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006b80:	4a04      	ldr	r2, [pc, #16]	@ (8006b94 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006b82:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006b84:	6113      	str	r3, [r2, #16]
}
 8006b86:	bf00      	nop
 8006b88:	370c      	adds	r7, #12
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr
 8006b92:	bf00      	nop
 8006b94:	e000ed90 	.word	0xe000ed90

08006b98 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b086      	sub	sp, #24
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8006ba0:	f7ff fe72 	bl	8006888 <HAL_GetTick>
 8006ba4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d101      	bne.n	8006bb0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8006bac:	2301      	movs	r3, #1
 8006bae:	e37d      	b.n	80072ac <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a66      	ldr	r2, [pc, #408]	@ (8006d50 <HAL_DMA_Init+0x1b8>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d04a      	beq.n	8006c50 <HAL_DMA_Init+0xb8>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a65      	ldr	r2, [pc, #404]	@ (8006d54 <HAL_DMA_Init+0x1bc>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d045      	beq.n	8006c50 <HAL_DMA_Init+0xb8>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a63      	ldr	r2, [pc, #396]	@ (8006d58 <HAL_DMA_Init+0x1c0>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d040      	beq.n	8006c50 <HAL_DMA_Init+0xb8>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a62      	ldr	r2, [pc, #392]	@ (8006d5c <HAL_DMA_Init+0x1c4>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d03b      	beq.n	8006c50 <HAL_DMA_Init+0xb8>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a60      	ldr	r2, [pc, #384]	@ (8006d60 <HAL_DMA_Init+0x1c8>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d036      	beq.n	8006c50 <HAL_DMA_Init+0xb8>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a5f      	ldr	r2, [pc, #380]	@ (8006d64 <HAL_DMA_Init+0x1cc>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d031      	beq.n	8006c50 <HAL_DMA_Init+0xb8>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a5d      	ldr	r2, [pc, #372]	@ (8006d68 <HAL_DMA_Init+0x1d0>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d02c      	beq.n	8006c50 <HAL_DMA_Init+0xb8>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a5c      	ldr	r2, [pc, #368]	@ (8006d6c <HAL_DMA_Init+0x1d4>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d027      	beq.n	8006c50 <HAL_DMA_Init+0xb8>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a5a      	ldr	r2, [pc, #360]	@ (8006d70 <HAL_DMA_Init+0x1d8>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d022      	beq.n	8006c50 <HAL_DMA_Init+0xb8>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a59      	ldr	r2, [pc, #356]	@ (8006d74 <HAL_DMA_Init+0x1dc>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d01d      	beq.n	8006c50 <HAL_DMA_Init+0xb8>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a57      	ldr	r2, [pc, #348]	@ (8006d78 <HAL_DMA_Init+0x1e0>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d018      	beq.n	8006c50 <HAL_DMA_Init+0xb8>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a56      	ldr	r2, [pc, #344]	@ (8006d7c <HAL_DMA_Init+0x1e4>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d013      	beq.n	8006c50 <HAL_DMA_Init+0xb8>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a54      	ldr	r2, [pc, #336]	@ (8006d80 <HAL_DMA_Init+0x1e8>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d00e      	beq.n	8006c50 <HAL_DMA_Init+0xb8>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a53      	ldr	r2, [pc, #332]	@ (8006d84 <HAL_DMA_Init+0x1ec>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d009      	beq.n	8006c50 <HAL_DMA_Init+0xb8>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a51      	ldr	r2, [pc, #324]	@ (8006d88 <HAL_DMA_Init+0x1f0>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d004      	beq.n	8006c50 <HAL_DMA_Init+0xb8>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a50      	ldr	r2, [pc, #320]	@ (8006d8c <HAL_DMA_Init+0x1f4>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d101      	bne.n	8006c54 <HAL_DMA_Init+0xbc>
 8006c50:	2301      	movs	r3, #1
 8006c52:	e000      	b.n	8006c56 <HAL_DMA_Init+0xbe>
 8006c54:	2300      	movs	r3, #0
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	f000 813c 	beq.w	8006ed4 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2202      	movs	r2, #2
 8006c60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2200      	movs	r2, #0
 8006c68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a37      	ldr	r2, [pc, #220]	@ (8006d50 <HAL_DMA_Init+0x1b8>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d04a      	beq.n	8006d0c <HAL_DMA_Init+0x174>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a36      	ldr	r2, [pc, #216]	@ (8006d54 <HAL_DMA_Init+0x1bc>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d045      	beq.n	8006d0c <HAL_DMA_Init+0x174>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a34      	ldr	r2, [pc, #208]	@ (8006d58 <HAL_DMA_Init+0x1c0>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d040      	beq.n	8006d0c <HAL_DMA_Init+0x174>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a33      	ldr	r2, [pc, #204]	@ (8006d5c <HAL_DMA_Init+0x1c4>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d03b      	beq.n	8006d0c <HAL_DMA_Init+0x174>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a31      	ldr	r2, [pc, #196]	@ (8006d60 <HAL_DMA_Init+0x1c8>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d036      	beq.n	8006d0c <HAL_DMA_Init+0x174>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a30      	ldr	r2, [pc, #192]	@ (8006d64 <HAL_DMA_Init+0x1cc>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d031      	beq.n	8006d0c <HAL_DMA_Init+0x174>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a2e      	ldr	r2, [pc, #184]	@ (8006d68 <HAL_DMA_Init+0x1d0>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d02c      	beq.n	8006d0c <HAL_DMA_Init+0x174>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a2d      	ldr	r2, [pc, #180]	@ (8006d6c <HAL_DMA_Init+0x1d4>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d027      	beq.n	8006d0c <HAL_DMA_Init+0x174>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a2b      	ldr	r2, [pc, #172]	@ (8006d70 <HAL_DMA_Init+0x1d8>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d022      	beq.n	8006d0c <HAL_DMA_Init+0x174>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a2a      	ldr	r2, [pc, #168]	@ (8006d74 <HAL_DMA_Init+0x1dc>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d01d      	beq.n	8006d0c <HAL_DMA_Init+0x174>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a28      	ldr	r2, [pc, #160]	@ (8006d78 <HAL_DMA_Init+0x1e0>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d018      	beq.n	8006d0c <HAL_DMA_Init+0x174>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a27      	ldr	r2, [pc, #156]	@ (8006d7c <HAL_DMA_Init+0x1e4>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d013      	beq.n	8006d0c <HAL_DMA_Init+0x174>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a25      	ldr	r2, [pc, #148]	@ (8006d80 <HAL_DMA_Init+0x1e8>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d00e      	beq.n	8006d0c <HAL_DMA_Init+0x174>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a24      	ldr	r2, [pc, #144]	@ (8006d84 <HAL_DMA_Init+0x1ec>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d009      	beq.n	8006d0c <HAL_DMA_Init+0x174>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a22      	ldr	r2, [pc, #136]	@ (8006d88 <HAL_DMA_Init+0x1f0>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d004      	beq.n	8006d0c <HAL_DMA_Init+0x174>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a21      	ldr	r2, [pc, #132]	@ (8006d8c <HAL_DMA_Init+0x1f4>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d108      	bne.n	8006d1e <HAL_DMA_Init+0x186>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f022 0201 	bic.w	r2, r2, #1
 8006d1a:	601a      	str	r2, [r3, #0]
 8006d1c:	e007      	b.n	8006d2e <HAL_DMA_Init+0x196>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f022 0201 	bic.w	r2, r2, #1
 8006d2c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006d2e:	e02f      	b.n	8006d90 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006d30:	f7ff fdaa 	bl	8006888 <HAL_GetTick>
 8006d34:	4602      	mov	r2, r0
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	1ad3      	subs	r3, r2, r3
 8006d3a:	2b05      	cmp	r3, #5
 8006d3c:	d928      	bls.n	8006d90 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2220      	movs	r2, #32
 8006d42:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2203      	movs	r2, #3
 8006d48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	e2ad      	b.n	80072ac <HAL_DMA_Init+0x714>
 8006d50:	40020010 	.word	0x40020010
 8006d54:	40020028 	.word	0x40020028
 8006d58:	40020040 	.word	0x40020040
 8006d5c:	40020058 	.word	0x40020058
 8006d60:	40020070 	.word	0x40020070
 8006d64:	40020088 	.word	0x40020088
 8006d68:	400200a0 	.word	0x400200a0
 8006d6c:	400200b8 	.word	0x400200b8
 8006d70:	40020410 	.word	0x40020410
 8006d74:	40020428 	.word	0x40020428
 8006d78:	40020440 	.word	0x40020440
 8006d7c:	40020458 	.word	0x40020458
 8006d80:	40020470 	.word	0x40020470
 8006d84:	40020488 	.word	0x40020488
 8006d88:	400204a0 	.word	0x400204a0
 8006d8c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f003 0301 	and.w	r3, r3, #1
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d1c8      	bne.n	8006d30 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006da6:	697a      	ldr	r2, [r7, #20]
 8006da8:	4b73      	ldr	r3, [pc, #460]	@ (8006f78 <HAL_DMA_Init+0x3e0>)
 8006daa:	4013      	ands	r3, r2
 8006dac:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8006db6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	691b      	ldr	r3, [r3, #16]
 8006dbc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006dc2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	699b      	ldr	r3, [r3, #24]
 8006dc8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006dce:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6a1b      	ldr	r3, [r3, #32]
 8006dd4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8006dd6:	697a      	ldr	r2, [r7, #20]
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006de0:	2b04      	cmp	r3, #4
 8006de2:	d107      	bne.n	8006df4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dec:	4313      	orrs	r3, r2
 8006dee:	697a      	ldr	r2, [r7, #20]
 8006df0:	4313      	orrs	r3, r2
 8006df2:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	2b28      	cmp	r3, #40	@ 0x28
 8006dfa:	d903      	bls.n	8006e04 <HAL_DMA_Init+0x26c>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	2b2e      	cmp	r3, #46	@ 0x2e
 8006e02:	d91f      	bls.n	8006e44 <HAL_DMA_Init+0x2ac>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	2b3e      	cmp	r3, #62	@ 0x3e
 8006e0a:	d903      	bls.n	8006e14 <HAL_DMA_Init+0x27c>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	2b42      	cmp	r3, #66	@ 0x42
 8006e12:	d917      	bls.n	8006e44 <HAL_DMA_Init+0x2ac>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	2b46      	cmp	r3, #70	@ 0x46
 8006e1a:	d903      	bls.n	8006e24 <HAL_DMA_Init+0x28c>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	2b48      	cmp	r3, #72	@ 0x48
 8006e22:	d90f      	bls.n	8006e44 <HAL_DMA_Init+0x2ac>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	2b4e      	cmp	r3, #78	@ 0x4e
 8006e2a:	d903      	bls.n	8006e34 <HAL_DMA_Init+0x29c>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	2b52      	cmp	r3, #82	@ 0x52
 8006e32:	d907      	bls.n	8006e44 <HAL_DMA_Init+0x2ac>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	2b73      	cmp	r3, #115	@ 0x73
 8006e3a:	d905      	bls.n	8006e48 <HAL_DMA_Init+0x2b0>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	2b77      	cmp	r3, #119	@ 0x77
 8006e42:	d801      	bhi.n	8006e48 <HAL_DMA_Init+0x2b0>
 8006e44:	2301      	movs	r3, #1
 8006e46:	e000      	b.n	8006e4a <HAL_DMA_Init+0x2b2>
 8006e48:	2300      	movs	r3, #0
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d003      	beq.n	8006e56 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e54:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	697a      	ldr	r2, [r7, #20]
 8006e5c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	695b      	ldr	r3, [r3, #20]
 8006e64:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	f023 0307 	bic.w	r3, r3, #7
 8006e6c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e72:	697a      	ldr	r2, [r7, #20]
 8006e74:	4313      	orrs	r3, r2
 8006e76:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e7c:	2b04      	cmp	r3, #4
 8006e7e:	d117      	bne.n	8006eb0 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e84:	697a      	ldr	r2, [r7, #20]
 8006e86:	4313      	orrs	r3, r2
 8006e88:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d00e      	beq.n	8006eb0 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f002 fbe0 	bl	8009658 <DMA_CheckFifoParam>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d008      	beq.n	8006eb0 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2240      	movs	r2, #64	@ 0x40
 8006ea2:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8006eac:	2301      	movs	r3, #1
 8006eae:	e1fd      	b.n	80072ac <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	697a      	ldr	r2, [r7, #20]
 8006eb6:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f002 fb1b 	bl	80094f4 <DMA_CalcBaseAndBitshift>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ec6:	f003 031f 	and.w	r3, r3, #31
 8006eca:	223f      	movs	r2, #63	@ 0x3f
 8006ecc:	409a      	lsls	r2, r3
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	609a      	str	r2, [r3, #8]
 8006ed2:	e0fd      	b.n	80070d0 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a28      	ldr	r2, [pc, #160]	@ (8006f7c <HAL_DMA_Init+0x3e4>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d04a      	beq.n	8006f74 <HAL_DMA_Init+0x3dc>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a27      	ldr	r2, [pc, #156]	@ (8006f80 <HAL_DMA_Init+0x3e8>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d045      	beq.n	8006f74 <HAL_DMA_Init+0x3dc>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a25      	ldr	r2, [pc, #148]	@ (8006f84 <HAL_DMA_Init+0x3ec>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d040      	beq.n	8006f74 <HAL_DMA_Init+0x3dc>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a24      	ldr	r2, [pc, #144]	@ (8006f88 <HAL_DMA_Init+0x3f0>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d03b      	beq.n	8006f74 <HAL_DMA_Init+0x3dc>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a22      	ldr	r2, [pc, #136]	@ (8006f8c <HAL_DMA_Init+0x3f4>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d036      	beq.n	8006f74 <HAL_DMA_Init+0x3dc>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a21      	ldr	r2, [pc, #132]	@ (8006f90 <HAL_DMA_Init+0x3f8>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d031      	beq.n	8006f74 <HAL_DMA_Init+0x3dc>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a1f      	ldr	r2, [pc, #124]	@ (8006f94 <HAL_DMA_Init+0x3fc>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d02c      	beq.n	8006f74 <HAL_DMA_Init+0x3dc>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a1e      	ldr	r2, [pc, #120]	@ (8006f98 <HAL_DMA_Init+0x400>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d027      	beq.n	8006f74 <HAL_DMA_Init+0x3dc>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a1c      	ldr	r2, [pc, #112]	@ (8006f9c <HAL_DMA_Init+0x404>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d022      	beq.n	8006f74 <HAL_DMA_Init+0x3dc>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a1b      	ldr	r2, [pc, #108]	@ (8006fa0 <HAL_DMA_Init+0x408>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d01d      	beq.n	8006f74 <HAL_DMA_Init+0x3dc>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a19      	ldr	r2, [pc, #100]	@ (8006fa4 <HAL_DMA_Init+0x40c>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d018      	beq.n	8006f74 <HAL_DMA_Init+0x3dc>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a18      	ldr	r2, [pc, #96]	@ (8006fa8 <HAL_DMA_Init+0x410>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d013      	beq.n	8006f74 <HAL_DMA_Init+0x3dc>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a16      	ldr	r2, [pc, #88]	@ (8006fac <HAL_DMA_Init+0x414>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d00e      	beq.n	8006f74 <HAL_DMA_Init+0x3dc>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a15      	ldr	r2, [pc, #84]	@ (8006fb0 <HAL_DMA_Init+0x418>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d009      	beq.n	8006f74 <HAL_DMA_Init+0x3dc>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a13      	ldr	r2, [pc, #76]	@ (8006fb4 <HAL_DMA_Init+0x41c>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d004      	beq.n	8006f74 <HAL_DMA_Init+0x3dc>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a12      	ldr	r2, [pc, #72]	@ (8006fb8 <HAL_DMA_Init+0x420>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d123      	bne.n	8006fbc <HAL_DMA_Init+0x424>
 8006f74:	2301      	movs	r3, #1
 8006f76:	e022      	b.n	8006fbe <HAL_DMA_Init+0x426>
 8006f78:	fe10803f 	.word	0xfe10803f
 8006f7c:	48022c08 	.word	0x48022c08
 8006f80:	48022c1c 	.word	0x48022c1c
 8006f84:	48022c30 	.word	0x48022c30
 8006f88:	48022c44 	.word	0x48022c44
 8006f8c:	48022c58 	.word	0x48022c58
 8006f90:	48022c6c 	.word	0x48022c6c
 8006f94:	48022c80 	.word	0x48022c80
 8006f98:	48022c94 	.word	0x48022c94
 8006f9c:	58025408 	.word	0x58025408
 8006fa0:	5802541c 	.word	0x5802541c
 8006fa4:	58025430 	.word	0x58025430
 8006fa8:	58025444 	.word	0x58025444
 8006fac:	58025458 	.word	0x58025458
 8006fb0:	5802546c 	.word	0x5802546c
 8006fb4:	58025480 	.word	0x58025480
 8006fb8:	58025494 	.word	0x58025494
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d07d      	beq.n	80070be <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a7f      	ldr	r2, [pc, #508]	@ (80071c4 <HAL_DMA_Init+0x62c>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d021      	beq.n	8007010 <HAL_DMA_Init+0x478>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a7d      	ldr	r2, [pc, #500]	@ (80071c8 <HAL_DMA_Init+0x630>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d01c      	beq.n	8007010 <HAL_DMA_Init+0x478>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a7c      	ldr	r2, [pc, #496]	@ (80071cc <HAL_DMA_Init+0x634>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d017      	beq.n	8007010 <HAL_DMA_Init+0x478>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a7a      	ldr	r2, [pc, #488]	@ (80071d0 <HAL_DMA_Init+0x638>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d012      	beq.n	8007010 <HAL_DMA_Init+0x478>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a79      	ldr	r2, [pc, #484]	@ (80071d4 <HAL_DMA_Init+0x63c>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d00d      	beq.n	8007010 <HAL_DMA_Init+0x478>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a77      	ldr	r2, [pc, #476]	@ (80071d8 <HAL_DMA_Init+0x640>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d008      	beq.n	8007010 <HAL_DMA_Init+0x478>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a76      	ldr	r2, [pc, #472]	@ (80071dc <HAL_DMA_Init+0x644>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d003      	beq.n	8007010 <HAL_DMA_Init+0x478>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a74      	ldr	r2, [pc, #464]	@ (80071e0 <HAL_DMA_Init+0x648>)
 800700e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2202      	movs	r2, #2
 8007014:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2200      	movs	r2, #0
 800701c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8007028:	697a      	ldr	r2, [r7, #20]
 800702a:	4b6e      	ldr	r3, [pc, #440]	@ (80071e4 <HAL_DMA_Init+0x64c>)
 800702c:	4013      	ands	r3, r2
 800702e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	2b40      	cmp	r3, #64	@ 0x40
 8007036:	d008      	beq.n	800704a <HAL_DMA_Init+0x4b2>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	2b80      	cmp	r3, #128	@ 0x80
 800703e:	d102      	bne.n	8007046 <HAL_DMA_Init+0x4ae>
 8007040:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007044:	e002      	b.n	800704c <HAL_DMA_Init+0x4b4>
 8007046:	2300      	movs	r3, #0
 8007048:	e000      	b.n	800704c <HAL_DMA_Init+0x4b4>
 800704a:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800704c:	687a      	ldr	r2, [r7, #4]
 800704e:	68d2      	ldr	r2, [r2, #12]
 8007050:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007052:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	691b      	ldr	r3, [r3, #16]
 8007058:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800705a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	695b      	ldr	r3, [r3, #20]
 8007060:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007062:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	699b      	ldr	r3, [r3, #24]
 8007068:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800706a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	69db      	ldr	r3, [r3, #28]
 8007070:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007072:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6a1b      	ldr	r3, [r3, #32]
 8007078:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800707a:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800707c:	697a      	ldr	r2, [r7, #20]
 800707e:	4313      	orrs	r3, r2
 8007080:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	697a      	ldr	r2, [r7, #20]
 8007088:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	461a      	mov	r2, r3
 8007090:	4b55      	ldr	r3, [pc, #340]	@ (80071e8 <HAL_DMA_Init+0x650>)
 8007092:	4413      	add	r3, r2
 8007094:	4a55      	ldr	r2, [pc, #340]	@ (80071ec <HAL_DMA_Init+0x654>)
 8007096:	fba2 2303 	umull	r2, r3, r2, r3
 800709a:	091b      	lsrs	r3, r3, #4
 800709c:	009a      	lsls	r2, r3, #2
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f002 fa26 	bl	80094f4 <DMA_CalcBaseAndBitshift>
 80070a8:	4603      	mov	r3, r0
 80070aa:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070b0:	f003 031f 	and.w	r3, r3, #31
 80070b4:	2201      	movs	r2, #1
 80070b6:	409a      	lsls	r2, r3
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	605a      	str	r2, [r3, #4]
 80070bc:	e008      	b.n	80070d0 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2240      	movs	r2, #64	@ 0x40
 80070c2:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2203      	movs	r2, #3
 80070c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80070cc:	2301      	movs	r3, #1
 80070ce:	e0ed      	b.n	80072ac <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a46      	ldr	r2, [pc, #280]	@ (80071f0 <HAL_DMA_Init+0x658>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d072      	beq.n	80071c0 <HAL_DMA_Init+0x628>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a45      	ldr	r2, [pc, #276]	@ (80071f4 <HAL_DMA_Init+0x65c>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d06d      	beq.n	80071c0 <HAL_DMA_Init+0x628>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a43      	ldr	r2, [pc, #268]	@ (80071f8 <HAL_DMA_Init+0x660>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d068      	beq.n	80071c0 <HAL_DMA_Init+0x628>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a42      	ldr	r2, [pc, #264]	@ (80071fc <HAL_DMA_Init+0x664>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d063      	beq.n	80071c0 <HAL_DMA_Init+0x628>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a40      	ldr	r2, [pc, #256]	@ (8007200 <HAL_DMA_Init+0x668>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d05e      	beq.n	80071c0 <HAL_DMA_Init+0x628>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a3f      	ldr	r2, [pc, #252]	@ (8007204 <HAL_DMA_Init+0x66c>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d059      	beq.n	80071c0 <HAL_DMA_Init+0x628>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a3d      	ldr	r2, [pc, #244]	@ (8007208 <HAL_DMA_Init+0x670>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d054      	beq.n	80071c0 <HAL_DMA_Init+0x628>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a3c      	ldr	r2, [pc, #240]	@ (800720c <HAL_DMA_Init+0x674>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d04f      	beq.n	80071c0 <HAL_DMA_Init+0x628>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a3a      	ldr	r2, [pc, #232]	@ (8007210 <HAL_DMA_Init+0x678>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d04a      	beq.n	80071c0 <HAL_DMA_Init+0x628>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a39      	ldr	r2, [pc, #228]	@ (8007214 <HAL_DMA_Init+0x67c>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d045      	beq.n	80071c0 <HAL_DMA_Init+0x628>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a37      	ldr	r2, [pc, #220]	@ (8007218 <HAL_DMA_Init+0x680>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d040      	beq.n	80071c0 <HAL_DMA_Init+0x628>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a36      	ldr	r2, [pc, #216]	@ (800721c <HAL_DMA_Init+0x684>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d03b      	beq.n	80071c0 <HAL_DMA_Init+0x628>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a34      	ldr	r2, [pc, #208]	@ (8007220 <HAL_DMA_Init+0x688>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d036      	beq.n	80071c0 <HAL_DMA_Init+0x628>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a33      	ldr	r2, [pc, #204]	@ (8007224 <HAL_DMA_Init+0x68c>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d031      	beq.n	80071c0 <HAL_DMA_Init+0x628>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a31      	ldr	r2, [pc, #196]	@ (8007228 <HAL_DMA_Init+0x690>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d02c      	beq.n	80071c0 <HAL_DMA_Init+0x628>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a30      	ldr	r2, [pc, #192]	@ (800722c <HAL_DMA_Init+0x694>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d027      	beq.n	80071c0 <HAL_DMA_Init+0x628>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a13      	ldr	r2, [pc, #76]	@ (80071c4 <HAL_DMA_Init+0x62c>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d022      	beq.n	80071c0 <HAL_DMA_Init+0x628>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a12      	ldr	r2, [pc, #72]	@ (80071c8 <HAL_DMA_Init+0x630>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d01d      	beq.n	80071c0 <HAL_DMA_Init+0x628>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a10      	ldr	r2, [pc, #64]	@ (80071cc <HAL_DMA_Init+0x634>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d018      	beq.n	80071c0 <HAL_DMA_Init+0x628>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a0f      	ldr	r2, [pc, #60]	@ (80071d0 <HAL_DMA_Init+0x638>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d013      	beq.n	80071c0 <HAL_DMA_Init+0x628>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a0d      	ldr	r2, [pc, #52]	@ (80071d4 <HAL_DMA_Init+0x63c>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d00e      	beq.n	80071c0 <HAL_DMA_Init+0x628>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a0c      	ldr	r2, [pc, #48]	@ (80071d8 <HAL_DMA_Init+0x640>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d009      	beq.n	80071c0 <HAL_DMA_Init+0x628>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a0a      	ldr	r2, [pc, #40]	@ (80071dc <HAL_DMA_Init+0x644>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d004      	beq.n	80071c0 <HAL_DMA_Init+0x628>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a09      	ldr	r2, [pc, #36]	@ (80071e0 <HAL_DMA_Init+0x648>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d137      	bne.n	8007230 <HAL_DMA_Init+0x698>
 80071c0:	2301      	movs	r3, #1
 80071c2:	e036      	b.n	8007232 <HAL_DMA_Init+0x69a>
 80071c4:	58025408 	.word	0x58025408
 80071c8:	5802541c 	.word	0x5802541c
 80071cc:	58025430 	.word	0x58025430
 80071d0:	58025444 	.word	0x58025444
 80071d4:	58025458 	.word	0x58025458
 80071d8:	5802546c 	.word	0x5802546c
 80071dc:	58025480 	.word	0x58025480
 80071e0:	58025494 	.word	0x58025494
 80071e4:	fffe000f 	.word	0xfffe000f
 80071e8:	a7fdabf8 	.word	0xa7fdabf8
 80071ec:	cccccccd 	.word	0xcccccccd
 80071f0:	40020010 	.word	0x40020010
 80071f4:	40020028 	.word	0x40020028
 80071f8:	40020040 	.word	0x40020040
 80071fc:	40020058 	.word	0x40020058
 8007200:	40020070 	.word	0x40020070
 8007204:	40020088 	.word	0x40020088
 8007208:	400200a0 	.word	0x400200a0
 800720c:	400200b8 	.word	0x400200b8
 8007210:	40020410 	.word	0x40020410
 8007214:	40020428 	.word	0x40020428
 8007218:	40020440 	.word	0x40020440
 800721c:	40020458 	.word	0x40020458
 8007220:	40020470 	.word	0x40020470
 8007224:	40020488 	.word	0x40020488
 8007228:	400204a0 	.word	0x400204a0
 800722c:	400204b8 	.word	0x400204b8
 8007230:	2300      	movs	r3, #0
 8007232:	2b00      	cmp	r3, #0
 8007234:	d032      	beq.n	800729c <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f002 fa8a 	bl	8009750 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	2b80      	cmp	r3, #128	@ 0x80
 8007242:	d102      	bne.n	800724a <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2200      	movs	r2, #0
 8007248:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	685a      	ldr	r2, [r3, #4]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007252:	b2d2      	uxtb	r2, r2
 8007254:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800725e:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d010      	beq.n	800728a <HAL_DMA_Init+0x6f2>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	2b08      	cmp	r3, #8
 800726e:	d80c      	bhi.n	800728a <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f002 fb07 	bl	8009884 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800727a:	2200      	movs	r2, #0
 800727c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007282:	687a      	ldr	r2, [r7, #4]
 8007284:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007286:	605a      	str	r2, [r3, #4]
 8007288:	e008      	b.n	800729c <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2200      	movs	r2, #0
 800728e:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2200      	movs	r2, #0
 8007294:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2200      	movs	r2, #0
 800729a:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2200      	movs	r2, #0
 80072a0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2201      	movs	r2, #1
 80072a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80072aa:	2300      	movs	r3, #0
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3718      	adds	r7, #24
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b086      	sub	sp, #24
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	60f8      	str	r0, [r7, #12]
 80072bc:	60b9      	str	r1, [r7, #8]
 80072be:	607a      	str	r2, [r7, #4]
 80072c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80072c2:	2300      	movs	r3, #0
 80072c4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d101      	bne.n	80072d0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80072cc:	2301      	movs	r3, #1
 80072ce:	e226      	b.n	800771e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d101      	bne.n	80072de <HAL_DMA_Start_IT+0x2a>
 80072da:	2302      	movs	r3, #2
 80072dc:	e21f      	b.n	800771e <HAL_DMA_Start_IT+0x46a>
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2201      	movs	r2, #1
 80072e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80072ec:	b2db      	uxtb	r3, r3
 80072ee:	2b01      	cmp	r3, #1
 80072f0:	f040 820a 	bne.w	8007708 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2202      	movs	r2, #2
 80072f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2200      	movs	r2, #0
 8007300:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a68      	ldr	r2, [pc, #416]	@ (80074a8 <HAL_DMA_Start_IT+0x1f4>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d04a      	beq.n	80073a2 <HAL_DMA_Start_IT+0xee>
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a66      	ldr	r2, [pc, #408]	@ (80074ac <HAL_DMA_Start_IT+0x1f8>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d045      	beq.n	80073a2 <HAL_DMA_Start_IT+0xee>
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a65      	ldr	r2, [pc, #404]	@ (80074b0 <HAL_DMA_Start_IT+0x1fc>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d040      	beq.n	80073a2 <HAL_DMA_Start_IT+0xee>
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a63      	ldr	r2, [pc, #396]	@ (80074b4 <HAL_DMA_Start_IT+0x200>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d03b      	beq.n	80073a2 <HAL_DMA_Start_IT+0xee>
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a62      	ldr	r2, [pc, #392]	@ (80074b8 <HAL_DMA_Start_IT+0x204>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d036      	beq.n	80073a2 <HAL_DMA_Start_IT+0xee>
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a60      	ldr	r2, [pc, #384]	@ (80074bc <HAL_DMA_Start_IT+0x208>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d031      	beq.n	80073a2 <HAL_DMA_Start_IT+0xee>
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a5f      	ldr	r2, [pc, #380]	@ (80074c0 <HAL_DMA_Start_IT+0x20c>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d02c      	beq.n	80073a2 <HAL_DMA_Start_IT+0xee>
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a5d      	ldr	r2, [pc, #372]	@ (80074c4 <HAL_DMA_Start_IT+0x210>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d027      	beq.n	80073a2 <HAL_DMA_Start_IT+0xee>
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a5c      	ldr	r2, [pc, #368]	@ (80074c8 <HAL_DMA_Start_IT+0x214>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d022      	beq.n	80073a2 <HAL_DMA_Start_IT+0xee>
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a5a      	ldr	r2, [pc, #360]	@ (80074cc <HAL_DMA_Start_IT+0x218>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d01d      	beq.n	80073a2 <HAL_DMA_Start_IT+0xee>
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a59      	ldr	r2, [pc, #356]	@ (80074d0 <HAL_DMA_Start_IT+0x21c>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d018      	beq.n	80073a2 <HAL_DMA_Start_IT+0xee>
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a57      	ldr	r2, [pc, #348]	@ (80074d4 <HAL_DMA_Start_IT+0x220>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d013      	beq.n	80073a2 <HAL_DMA_Start_IT+0xee>
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a56      	ldr	r2, [pc, #344]	@ (80074d8 <HAL_DMA_Start_IT+0x224>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d00e      	beq.n	80073a2 <HAL_DMA_Start_IT+0xee>
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a54      	ldr	r2, [pc, #336]	@ (80074dc <HAL_DMA_Start_IT+0x228>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d009      	beq.n	80073a2 <HAL_DMA_Start_IT+0xee>
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a53      	ldr	r2, [pc, #332]	@ (80074e0 <HAL_DMA_Start_IT+0x22c>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d004      	beq.n	80073a2 <HAL_DMA_Start_IT+0xee>
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a51      	ldr	r2, [pc, #324]	@ (80074e4 <HAL_DMA_Start_IT+0x230>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d108      	bne.n	80073b4 <HAL_DMA_Start_IT+0x100>
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	681a      	ldr	r2, [r3, #0]
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f022 0201 	bic.w	r2, r2, #1
 80073b0:	601a      	str	r2, [r3, #0]
 80073b2:	e007      	b.n	80073c4 <HAL_DMA_Start_IT+0x110>
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f022 0201 	bic.w	r2, r2, #1
 80073c2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	687a      	ldr	r2, [r7, #4]
 80073c8:	68b9      	ldr	r1, [r7, #8]
 80073ca:	68f8      	ldr	r0, [r7, #12]
 80073cc:	f001 feae 	bl	800912c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a34      	ldr	r2, [pc, #208]	@ (80074a8 <HAL_DMA_Start_IT+0x1f4>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d04a      	beq.n	8007470 <HAL_DMA_Start_IT+0x1bc>
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a33      	ldr	r2, [pc, #204]	@ (80074ac <HAL_DMA_Start_IT+0x1f8>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d045      	beq.n	8007470 <HAL_DMA_Start_IT+0x1bc>
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a31      	ldr	r2, [pc, #196]	@ (80074b0 <HAL_DMA_Start_IT+0x1fc>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d040      	beq.n	8007470 <HAL_DMA_Start_IT+0x1bc>
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a30      	ldr	r2, [pc, #192]	@ (80074b4 <HAL_DMA_Start_IT+0x200>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d03b      	beq.n	8007470 <HAL_DMA_Start_IT+0x1bc>
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a2e      	ldr	r2, [pc, #184]	@ (80074b8 <HAL_DMA_Start_IT+0x204>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d036      	beq.n	8007470 <HAL_DMA_Start_IT+0x1bc>
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a2d      	ldr	r2, [pc, #180]	@ (80074bc <HAL_DMA_Start_IT+0x208>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d031      	beq.n	8007470 <HAL_DMA_Start_IT+0x1bc>
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a2b      	ldr	r2, [pc, #172]	@ (80074c0 <HAL_DMA_Start_IT+0x20c>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d02c      	beq.n	8007470 <HAL_DMA_Start_IT+0x1bc>
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a2a      	ldr	r2, [pc, #168]	@ (80074c4 <HAL_DMA_Start_IT+0x210>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d027      	beq.n	8007470 <HAL_DMA_Start_IT+0x1bc>
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a28      	ldr	r2, [pc, #160]	@ (80074c8 <HAL_DMA_Start_IT+0x214>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d022      	beq.n	8007470 <HAL_DMA_Start_IT+0x1bc>
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a27      	ldr	r2, [pc, #156]	@ (80074cc <HAL_DMA_Start_IT+0x218>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d01d      	beq.n	8007470 <HAL_DMA_Start_IT+0x1bc>
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a25      	ldr	r2, [pc, #148]	@ (80074d0 <HAL_DMA_Start_IT+0x21c>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d018      	beq.n	8007470 <HAL_DMA_Start_IT+0x1bc>
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a24      	ldr	r2, [pc, #144]	@ (80074d4 <HAL_DMA_Start_IT+0x220>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d013      	beq.n	8007470 <HAL_DMA_Start_IT+0x1bc>
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a22      	ldr	r2, [pc, #136]	@ (80074d8 <HAL_DMA_Start_IT+0x224>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d00e      	beq.n	8007470 <HAL_DMA_Start_IT+0x1bc>
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a21      	ldr	r2, [pc, #132]	@ (80074dc <HAL_DMA_Start_IT+0x228>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d009      	beq.n	8007470 <HAL_DMA_Start_IT+0x1bc>
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a1f      	ldr	r2, [pc, #124]	@ (80074e0 <HAL_DMA_Start_IT+0x22c>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d004      	beq.n	8007470 <HAL_DMA_Start_IT+0x1bc>
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a1e      	ldr	r2, [pc, #120]	@ (80074e4 <HAL_DMA_Start_IT+0x230>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d101      	bne.n	8007474 <HAL_DMA_Start_IT+0x1c0>
 8007470:	2301      	movs	r3, #1
 8007472:	e000      	b.n	8007476 <HAL_DMA_Start_IT+0x1c2>
 8007474:	2300      	movs	r3, #0
 8007476:	2b00      	cmp	r3, #0
 8007478:	d036      	beq.n	80074e8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f023 021e 	bic.w	r2, r3, #30
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f042 0216 	orr.w	r2, r2, #22
 800748c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007492:	2b00      	cmp	r3, #0
 8007494:	d03e      	beq.n	8007514 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	681a      	ldr	r2, [r3, #0]
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f042 0208 	orr.w	r2, r2, #8
 80074a4:	601a      	str	r2, [r3, #0]
 80074a6:	e035      	b.n	8007514 <HAL_DMA_Start_IT+0x260>
 80074a8:	40020010 	.word	0x40020010
 80074ac:	40020028 	.word	0x40020028
 80074b0:	40020040 	.word	0x40020040
 80074b4:	40020058 	.word	0x40020058
 80074b8:	40020070 	.word	0x40020070
 80074bc:	40020088 	.word	0x40020088
 80074c0:	400200a0 	.word	0x400200a0
 80074c4:	400200b8 	.word	0x400200b8
 80074c8:	40020410 	.word	0x40020410
 80074cc:	40020428 	.word	0x40020428
 80074d0:	40020440 	.word	0x40020440
 80074d4:	40020458 	.word	0x40020458
 80074d8:	40020470 	.word	0x40020470
 80074dc:	40020488 	.word	0x40020488
 80074e0:	400204a0 	.word	0x400204a0
 80074e4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f023 020e 	bic.w	r2, r3, #14
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f042 020a 	orr.w	r2, r2, #10
 80074fa:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007500:	2b00      	cmp	r3, #0
 8007502:	d007      	beq.n	8007514 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	681a      	ldr	r2, [r3, #0]
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f042 0204 	orr.w	r2, r2, #4
 8007512:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a83      	ldr	r2, [pc, #524]	@ (8007728 <HAL_DMA_Start_IT+0x474>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d072      	beq.n	8007604 <HAL_DMA_Start_IT+0x350>
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a82      	ldr	r2, [pc, #520]	@ (800772c <HAL_DMA_Start_IT+0x478>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d06d      	beq.n	8007604 <HAL_DMA_Start_IT+0x350>
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a80      	ldr	r2, [pc, #512]	@ (8007730 <HAL_DMA_Start_IT+0x47c>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d068      	beq.n	8007604 <HAL_DMA_Start_IT+0x350>
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a7f      	ldr	r2, [pc, #508]	@ (8007734 <HAL_DMA_Start_IT+0x480>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d063      	beq.n	8007604 <HAL_DMA_Start_IT+0x350>
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a7d      	ldr	r2, [pc, #500]	@ (8007738 <HAL_DMA_Start_IT+0x484>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d05e      	beq.n	8007604 <HAL_DMA_Start_IT+0x350>
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a7c      	ldr	r2, [pc, #496]	@ (800773c <HAL_DMA_Start_IT+0x488>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d059      	beq.n	8007604 <HAL_DMA_Start_IT+0x350>
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a7a      	ldr	r2, [pc, #488]	@ (8007740 <HAL_DMA_Start_IT+0x48c>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d054      	beq.n	8007604 <HAL_DMA_Start_IT+0x350>
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a79      	ldr	r2, [pc, #484]	@ (8007744 <HAL_DMA_Start_IT+0x490>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d04f      	beq.n	8007604 <HAL_DMA_Start_IT+0x350>
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a77      	ldr	r2, [pc, #476]	@ (8007748 <HAL_DMA_Start_IT+0x494>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d04a      	beq.n	8007604 <HAL_DMA_Start_IT+0x350>
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a76      	ldr	r2, [pc, #472]	@ (800774c <HAL_DMA_Start_IT+0x498>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d045      	beq.n	8007604 <HAL_DMA_Start_IT+0x350>
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a74      	ldr	r2, [pc, #464]	@ (8007750 <HAL_DMA_Start_IT+0x49c>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d040      	beq.n	8007604 <HAL_DMA_Start_IT+0x350>
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a73      	ldr	r2, [pc, #460]	@ (8007754 <HAL_DMA_Start_IT+0x4a0>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d03b      	beq.n	8007604 <HAL_DMA_Start_IT+0x350>
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a71      	ldr	r2, [pc, #452]	@ (8007758 <HAL_DMA_Start_IT+0x4a4>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d036      	beq.n	8007604 <HAL_DMA_Start_IT+0x350>
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a70      	ldr	r2, [pc, #448]	@ (800775c <HAL_DMA_Start_IT+0x4a8>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d031      	beq.n	8007604 <HAL_DMA_Start_IT+0x350>
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a6e      	ldr	r2, [pc, #440]	@ (8007760 <HAL_DMA_Start_IT+0x4ac>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d02c      	beq.n	8007604 <HAL_DMA_Start_IT+0x350>
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a6d      	ldr	r2, [pc, #436]	@ (8007764 <HAL_DMA_Start_IT+0x4b0>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d027      	beq.n	8007604 <HAL_DMA_Start_IT+0x350>
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a6b      	ldr	r2, [pc, #428]	@ (8007768 <HAL_DMA_Start_IT+0x4b4>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d022      	beq.n	8007604 <HAL_DMA_Start_IT+0x350>
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a6a      	ldr	r2, [pc, #424]	@ (800776c <HAL_DMA_Start_IT+0x4b8>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d01d      	beq.n	8007604 <HAL_DMA_Start_IT+0x350>
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a68      	ldr	r2, [pc, #416]	@ (8007770 <HAL_DMA_Start_IT+0x4bc>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d018      	beq.n	8007604 <HAL_DMA_Start_IT+0x350>
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a67      	ldr	r2, [pc, #412]	@ (8007774 <HAL_DMA_Start_IT+0x4c0>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d013      	beq.n	8007604 <HAL_DMA_Start_IT+0x350>
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a65      	ldr	r2, [pc, #404]	@ (8007778 <HAL_DMA_Start_IT+0x4c4>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d00e      	beq.n	8007604 <HAL_DMA_Start_IT+0x350>
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a64      	ldr	r2, [pc, #400]	@ (800777c <HAL_DMA_Start_IT+0x4c8>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d009      	beq.n	8007604 <HAL_DMA_Start_IT+0x350>
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a62      	ldr	r2, [pc, #392]	@ (8007780 <HAL_DMA_Start_IT+0x4cc>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d004      	beq.n	8007604 <HAL_DMA_Start_IT+0x350>
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a61      	ldr	r2, [pc, #388]	@ (8007784 <HAL_DMA_Start_IT+0x4d0>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d101      	bne.n	8007608 <HAL_DMA_Start_IT+0x354>
 8007604:	2301      	movs	r3, #1
 8007606:	e000      	b.n	800760a <HAL_DMA_Start_IT+0x356>
 8007608:	2300      	movs	r3, #0
 800760a:	2b00      	cmp	r3, #0
 800760c:	d01a      	beq.n	8007644 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007618:	2b00      	cmp	r3, #0
 800761a:	d007      	beq.n	800762c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007620:	681a      	ldr	r2, [r3, #0]
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007626:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800762a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007630:	2b00      	cmp	r3, #0
 8007632:	d007      	beq.n	8007644 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007638:	681a      	ldr	r2, [r3, #0]
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800763e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007642:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a37      	ldr	r2, [pc, #220]	@ (8007728 <HAL_DMA_Start_IT+0x474>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d04a      	beq.n	80076e4 <HAL_DMA_Start_IT+0x430>
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a36      	ldr	r2, [pc, #216]	@ (800772c <HAL_DMA_Start_IT+0x478>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d045      	beq.n	80076e4 <HAL_DMA_Start_IT+0x430>
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a34      	ldr	r2, [pc, #208]	@ (8007730 <HAL_DMA_Start_IT+0x47c>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d040      	beq.n	80076e4 <HAL_DMA_Start_IT+0x430>
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a33      	ldr	r2, [pc, #204]	@ (8007734 <HAL_DMA_Start_IT+0x480>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d03b      	beq.n	80076e4 <HAL_DMA_Start_IT+0x430>
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a31      	ldr	r2, [pc, #196]	@ (8007738 <HAL_DMA_Start_IT+0x484>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d036      	beq.n	80076e4 <HAL_DMA_Start_IT+0x430>
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a30      	ldr	r2, [pc, #192]	@ (800773c <HAL_DMA_Start_IT+0x488>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d031      	beq.n	80076e4 <HAL_DMA_Start_IT+0x430>
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a2e      	ldr	r2, [pc, #184]	@ (8007740 <HAL_DMA_Start_IT+0x48c>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d02c      	beq.n	80076e4 <HAL_DMA_Start_IT+0x430>
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a2d      	ldr	r2, [pc, #180]	@ (8007744 <HAL_DMA_Start_IT+0x490>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d027      	beq.n	80076e4 <HAL_DMA_Start_IT+0x430>
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a2b      	ldr	r2, [pc, #172]	@ (8007748 <HAL_DMA_Start_IT+0x494>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d022      	beq.n	80076e4 <HAL_DMA_Start_IT+0x430>
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a2a      	ldr	r2, [pc, #168]	@ (800774c <HAL_DMA_Start_IT+0x498>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d01d      	beq.n	80076e4 <HAL_DMA_Start_IT+0x430>
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a28      	ldr	r2, [pc, #160]	@ (8007750 <HAL_DMA_Start_IT+0x49c>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d018      	beq.n	80076e4 <HAL_DMA_Start_IT+0x430>
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a27      	ldr	r2, [pc, #156]	@ (8007754 <HAL_DMA_Start_IT+0x4a0>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d013      	beq.n	80076e4 <HAL_DMA_Start_IT+0x430>
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a25      	ldr	r2, [pc, #148]	@ (8007758 <HAL_DMA_Start_IT+0x4a4>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d00e      	beq.n	80076e4 <HAL_DMA_Start_IT+0x430>
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a24      	ldr	r2, [pc, #144]	@ (800775c <HAL_DMA_Start_IT+0x4a8>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d009      	beq.n	80076e4 <HAL_DMA_Start_IT+0x430>
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a22      	ldr	r2, [pc, #136]	@ (8007760 <HAL_DMA_Start_IT+0x4ac>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d004      	beq.n	80076e4 <HAL_DMA_Start_IT+0x430>
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a21      	ldr	r2, [pc, #132]	@ (8007764 <HAL_DMA_Start_IT+0x4b0>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d108      	bne.n	80076f6 <HAL_DMA_Start_IT+0x442>
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	681a      	ldr	r2, [r3, #0]
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f042 0201 	orr.w	r2, r2, #1
 80076f2:	601a      	str	r2, [r3, #0]
 80076f4:	e012      	b.n	800771c <HAL_DMA_Start_IT+0x468>
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	681a      	ldr	r2, [r3, #0]
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f042 0201 	orr.w	r2, r2, #1
 8007704:	601a      	str	r2, [r3, #0]
 8007706:	e009      	b.n	800771c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800770e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2200      	movs	r2, #0
 8007714:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8007718:	2301      	movs	r3, #1
 800771a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800771c:	7dfb      	ldrb	r3, [r7, #23]
}
 800771e:	4618      	mov	r0, r3
 8007720:	3718      	adds	r7, #24
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
 8007726:	bf00      	nop
 8007728:	40020010 	.word	0x40020010
 800772c:	40020028 	.word	0x40020028
 8007730:	40020040 	.word	0x40020040
 8007734:	40020058 	.word	0x40020058
 8007738:	40020070 	.word	0x40020070
 800773c:	40020088 	.word	0x40020088
 8007740:	400200a0 	.word	0x400200a0
 8007744:	400200b8 	.word	0x400200b8
 8007748:	40020410 	.word	0x40020410
 800774c:	40020428 	.word	0x40020428
 8007750:	40020440 	.word	0x40020440
 8007754:	40020458 	.word	0x40020458
 8007758:	40020470 	.word	0x40020470
 800775c:	40020488 	.word	0x40020488
 8007760:	400204a0 	.word	0x400204a0
 8007764:	400204b8 	.word	0x400204b8
 8007768:	58025408 	.word	0x58025408
 800776c:	5802541c 	.word	0x5802541c
 8007770:	58025430 	.word	0x58025430
 8007774:	58025444 	.word	0x58025444
 8007778:	58025458 	.word	0x58025458
 800777c:	5802546c 	.word	0x5802546c
 8007780:	58025480 	.word	0x58025480
 8007784:	58025494 	.word	0x58025494

08007788 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b086      	sub	sp, #24
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8007790:	f7ff f87a 	bl	8006888 <HAL_GetTick>
 8007794:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d101      	bne.n	80077a0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800779c:	2301      	movs	r3, #1
 800779e:	e2dc      	b.n	8007d5a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80077a6:	b2db      	uxtb	r3, r3
 80077a8:	2b02      	cmp	r3, #2
 80077aa:	d008      	beq.n	80077be <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2280      	movs	r2, #128	@ 0x80
 80077b0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2200      	movs	r2, #0
 80077b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80077ba:	2301      	movs	r3, #1
 80077bc:	e2cd      	b.n	8007d5a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a76      	ldr	r2, [pc, #472]	@ (800799c <HAL_DMA_Abort+0x214>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d04a      	beq.n	800785e <HAL_DMA_Abort+0xd6>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a74      	ldr	r2, [pc, #464]	@ (80079a0 <HAL_DMA_Abort+0x218>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d045      	beq.n	800785e <HAL_DMA_Abort+0xd6>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a73      	ldr	r2, [pc, #460]	@ (80079a4 <HAL_DMA_Abort+0x21c>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d040      	beq.n	800785e <HAL_DMA_Abort+0xd6>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a71      	ldr	r2, [pc, #452]	@ (80079a8 <HAL_DMA_Abort+0x220>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d03b      	beq.n	800785e <HAL_DMA_Abort+0xd6>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a70      	ldr	r2, [pc, #448]	@ (80079ac <HAL_DMA_Abort+0x224>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d036      	beq.n	800785e <HAL_DMA_Abort+0xd6>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a6e      	ldr	r2, [pc, #440]	@ (80079b0 <HAL_DMA_Abort+0x228>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d031      	beq.n	800785e <HAL_DMA_Abort+0xd6>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a6d      	ldr	r2, [pc, #436]	@ (80079b4 <HAL_DMA_Abort+0x22c>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d02c      	beq.n	800785e <HAL_DMA_Abort+0xd6>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a6b      	ldr	r2, [pc, #428]	@ (80079b8 <HAL_DMA_Abort+0x230>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d027      	beq.n	800785e <HAL_DMA_Abort+0xd6>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a6a      	ldr	r2, [pc, #424]	@ (80079bc <HAL_DMA_Abort+0x234>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d022      	beq.n	800785e <HAL_DMA_Abort+0xd6>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a68      	ldr	r2, [pc, #416]	@ (80079c0 <HAL_DMA_Abort+0x238>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d01d      	beq.n	800785e <HAL_DMA_Abort+0xd6>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a67      	ldr	r2, [pc, #412]	@ (80079c4 <HAL_DMA_Abort+0x23c>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d018      	beq.n	800785e <HAL_DMA_Abort+0xd6>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a65      	ldr	r2, [pc, #404]	@ (80079c8 <HAL_DMA_Abort+0x240>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d013      	beq.n	800785e <HAL_DMA_Abort+0xd6>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a64      	ldr	r2, [pc, #400]	@ (80079cc <HAL_DMA_Abort+0x244>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d00e      	beq.n	800785e <HAL_DMA_Abort+0xd6>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a62      	ldr	r2, [pc, #392]	@ (80079d0 <HAL_DMA_Abort+0x248>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d009      	beq.n	800785e <HAL_DMA_Abort+0xd6>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a61      	ldr	r2, [pc, #388]	@ (80079d4 <HAL_DMA_Abort+0x24c>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d004      	beq.n	800785e <HAL_DMA_Abort+0xd6>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a5f      	ldr	r2, [pc, #380]	@ (80079d8 <HAL_DMA_Abort+0x250>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d101      	bne.n	8007862 <HAL_DMA_Abort+0xda>
 800785e:	2301      	movs	r3, #1
 8007860:	e000      	b.n	8007864 <HAL_DMA_Abort+0xdc>
 8007862:	2300      	movs	r3, #0
 8007864:	2b00      	cmp	r3, #0
 8007866:	d013      	beq.n	8007890 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	681a      	ldr	r2, [r3, #0]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f022 021e 	bic.w	r2, r2, #30
 8007876:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	695a      	ldr	r2, [r3, #20]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007886:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	617b      	str	r3, [r7, #20]
 800788e:	e00a      	b.n	80078a6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	681a      	ldr	r2, [r3, #0]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f022 020e 	bic.w	r2, r2, #14
 800789e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a3c      	ldr	r2, [pc, #240]	@ (800799c <HAL_DMA_Abort+0x214>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d072      	beq.n	8007996 <HAL_DMA_Abort+0x20e>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a3a      	ldr	r2, [pc, #232]	@ (80079a0 <HAL_DMA_Abort+0x218>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d06d      	beq.n	8007996 <HAL_DMA_Abort+0x20e>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a39      	ldr	r2, [pc, #228]	@ (80079a4 <HAL_DMA_Abort+0x21c>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d068      	beq.n	8007996 <HAL_DMA_Abort+0x20e>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a37      	ldr	r2, [pc, #220]	@ (80079a8 <HAL_DMA_Abort+0x220>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d063      	beq.n	8007996 <HAL_DMA_Abort+0x20e>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a36      	ldr	r2, [pc, #216]	@ (80079ac <HAL_DMA_Abort+0x224>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d05e      	beq.n	8007996 <HAL_DMA_Abort+0x20e>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a34      	ldr	r2, [pc, #208]	@ (80079b0 <HAL_DMA_Abort+0x228>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d059      	beq.n	8007996 <HAL_DMA_Abort+0x20e>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a33      	ldr	r2, [pc, #204]	@ (80079b4 <HAL_DMA_Abort+0x22c>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d054      	beq.n	8007996 <HAL_DMA_Abort+0x20e>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a31      	ldr	r2, [pc, #196]	@ (80079b8 <HAL_DMA_Abort+0x230>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d04f      	beq.n	8007996 <HAL_DMA_Abort+0x20e>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a30      	ldr	r2, [pc, #192]	@ (80079bc <HAL_DMA_Abort+0x234>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d04a      	beq.n	8007996 <HAL_DMA_Abort+0x20e>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a2e      	ldr	r2, [pc, #184]	@ (80079c0 <HAL_DMA_Abort+0x238>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d045      	beq.n	8007996 <HAL_DMA_Abort+0x20e>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a2d      	ldr	r2, [pc, #180]	@ (80079c4 <HAL_DMA_Abort+0x23c>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d040      	beq.n	8007996 <HAL_DMA_Abort+0x20e>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a2b      	ldr	r2, [pc, #172]	@ (80079c8 <HAL_DMA_Abort+0x240>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d03b      	beq.n	8007996 <HAL_DMA_Abort+0x20e>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a2a      	ldr	r2, [pc, #168]	@ (80079cc <HAL_DMA_Abort+0x244>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d036      	beq.n	8007996 <HAL_DMA_Abort+0x20e>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a28      	ldr	r2, [pc, #160]	@ (80079d0 <HAL_DMA_Abort+0x248>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d031      	beq.n	8007996 <HAL_DMA_Abort+0x20e>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a27      	ldr	r2, [pc, #156]	@ (80079d4 <HAL_DMA_Abort+0x24c>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d02c      	beq.n	8007996 <HAL_DMA_Abort+0x20e>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a25      	ldr	r2, [pc, #148]	@ (80079d8 <HAL_DMA_Abort+0x250>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d027      	beq.n	8007996 <HAL_DMA_Abort+0x20e>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a24      	ldr	r2, [pc, #144]	@ (80079dc <HAL_DMA_Abort+0x254>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d022      	beq.n	8007996 <HAL_DMA_Abort+0x20e>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a22      	ldr	r2, [pc, #136]	@ (80079e0 <HAL_DMA_Abort+0x258>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d01d      	beq.n	8007996 <HAL_DMA_Abort+0x20e>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a21      	ldr	r2, [pc, #132]	@ (80079e4 <HAL_DMA_Abort+0x25c>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d018      	beq.n	8007996 <HAL_DMA_Abort+0x20e>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a1f      	ldr	r2, [pc, #124]	@ (80079e8 <HAL_DMA_Abort+0x260>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d013      	beq.n	8007996 <HAL_DMA_Abort+0x20e>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a1e      	ldr	r2, [pc, #120]	@ (80079ec <HAL_DMA_Abort+0x264>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d00e      	beq.n	8007996 <HAL_DMA_Abort+0x20e>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a1c      	ldr	r2, [pc, #112]	@ (80079f0 <HAL_DMA_Abort+0x268>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d009      	beq.n	8007996 <HAL_DMA_Abort+0x20e>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a1b      	ldr	r2, [pc, #108]	@ (80079f4 <HAL_DMA_Abort+0x26c>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d004      	beq.n	8007996 <HAL_DMA_Abort+0x20e>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a19      	ldr	r2, [pc, #100]	@ (80079f8 <HAL_DMA_Abort+0x270>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d132      	bne.n	80079fc <HAL_DMA_Abort+0x274>
 8007996:	2301      	movs	r3, #1
 8007998:	e031      	b.n	80079fe <HAL_DMA_Abort+0x276>
 800799a:	bf00      	nop
 800799c:	40020010 	.word	0x40020010
 80079a0:	40020028 	.word	0x40020028
 80079a4:	40020040 	.word	0x40020040
 80079a8:	40020058 	.word	0x40020058
 80079ac:	40020070 	.word	0x40020070
 80079b0:	40020088 	.word	0x40020088
 80079b4:	400200a0 	.word	0x400200a0
 80079b8:	400200b8 	.word	0x400200b8
 80079bc:	40020410 	.word	0x40020410
 80079c0:	40020428 	.word	0x40020428
 80079c4:	40020440 	.word	0x40020440
 80079c8:	40020458 	.word	0x40020458
 80079cc:	40020470 	.word	0x40020470
 80079d0:	40020488 	.word	0x40020488
 80079d4:	400204a0 	.word	0x400204a0
 80079d8:	400204b8 	.word	0x400204b8
 80079dc:	58025408 	.word	0x58025408
 80079e0:	5802541c 	.word	0x5802541c
 80079e4:	58025430 	.word	0x58025430
 80079e8:	58025444 	.word	0x58025444
 80079ec:	58025458 	.word	0x58025458
 80079f0:	5802546c 	.word	0x5802546c
 80079f4:	58025480 	.word	0x58025480
 80079f8:	58025494 	.word	0x58025494
 80079fc:	2300      	movs	r3, #0
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d007      	beq.n	8007a12 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a06:	681a      	ldr	r2, [r3, #0]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a0c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007a10:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a6d      	ldr	r2, [pc, #436]	@ (8007bcc <HAL_DMA_Abort+0x444>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d04a      	beq.n	8007ab2 <HAL_DMA_Abort+0x32a>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a6b      	ldr	r2, [pc, #428]	@ (8007bd0 <HAL_DMA_Abort+0x448>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d045      	beq.n	8007ab2 <HAL_DMA_Abort+0x32a>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a6a      	ldr	r2, [pc, #424]	@ (8007bd4 <HAL_DMA_Abort+0x44c>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d040      	beq.n	8007ab2 <HAL_DMA_Abort+0x32a>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a68      	ldr	r2, [pc, #416]	@ (8007bd8 <HAL_DMA_Abort+0x450>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d03b      	beq.n	8007ab2 <HAL_DMA_Abort+0x32a>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a67      	ldr	r2, [pc, #412]	@ (8007bdc <HAL_DMA_Abort+0x454>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d036      	beq.n	8007ab2 <HAL_DMA_Abort+0x32a>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a65      	ldr	r2, [pc, #404]	@ (8007be0 <HAL_DMA_Abort+0x458>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d031      	beq.n	8007ab2 <HAL_DMA_Abort+0x32a>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a64      	ldr	r2, [pc, #400]	@ (8007be4 <HAL_DMA_Abort+0x45c>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d02c      	beq.n	8007ab2 <HAL_DMA_Abort+0x32a>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a62      	ldr	r2, [pc, #392]	@ (8007be8 <HAL_DMA_Abort+0x460>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d027      	beq.n	8007ab2 <HAL_DMA_Abort+0x32a>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a61      	ldr	r2, [pc, #388]	@ (8007bec <HAL_DMA_Abort+0x464>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d022      	beq.n	8007ab2 <HAL_DMA_Abort+0x32a>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a5f      	ldr	r2, [pc, #380]	@ (8007bf0 <HAL_DMA_Abort+0x468>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d01d      	beq.n	8007ab2 <HAL_DMA_Abort+0x32a>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a5e      	ldr	r2, [pc, #376]	@ (8007bf4 <HAL_DMA_Abort+0x46c>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d018      	beq.n	8007ab2 <HAL_DMA_Abort+0x32a>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a5c      	ldr	r2, [pc, #368]	@ (8007bf8 <HAL_DMA_Abort+0x470>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d013      	beq.n	8007ab2 <HAL_DMA_Abort+0x32a>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a5b      	ldr	r2, [pc, #364]	@ (8007bfc <HAL_DMA_Abort+0x474>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d00e      	beq.n	8007ab2 <HAL_DMA_Abort+0x32a>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a59      	ldr	r2, [pc, #356]	@ (8007c00 <HAL_DMA_Abort+0x478>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d009      	beq.n	8007ab2 <HAL_DMA_Abort+0x32a>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4a58      	ldr	r2, [pc, #352]	@ (8007c04 <HAL_DMA_Abort+0x47c>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d004      	beq.n	8007ab2 <HAL_DMA_Abort+0x32a>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a56      	ldr	r2, [pc, #344]	@ (8007c08 <HAL_DMA_Abort+0x480>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d108      	bne.n	8007ac4 <HAL_DMA_Abort+0x33c>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	681a      	ldr	r2, [r3, #0]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f022 0201 	bic.w	r2, r2, #1
 8007ac0:	601a      	str	r2, [r3, #0]
 8007ac2:	e007      	b.n	8007ad4 <HAL_DMA_Abort+0x34c>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	681a      	ldr	r2, [r3, #0]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f022 0201 	bic.w	r2, r2, #1
 8007ad2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007ad4:	e013      	b.n	8007afe <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007ad6:	f7fe fed7 	bl	8006888 <HAL_GetTick>
 8007ada:	4602      	mov	r2, r0
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	1ad3      	subs	r3, r2, r3
 8007ae0:	2b05      	cmp	r3, #5
 8007ae2:	d90c      	bls.n	8007afe <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2220      	movs	r2, #32
 8007ae8:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2203      	movs	r2, #3
 8007aee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2200      	movs	r2, #0
 8007af6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8007afa:	2301      	movs	r3, #1
 8007afc:	e12d      	b.n	8007d5a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f003 0301 	and.w	r3, r3, #1
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d1e5      	bne.n	8007ad6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a2f      	ldr	r2, [pc, #188]	@ (8007bcc <HAL_DMA_Abort+0x444>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d04a      	beq.n	8007baa <HAL_DMA_Abort+0x422>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a2d      	ldr	r2, [pc, #180]	@ (8007bd0 <HAL_DMA_Abort+0x448>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d045      	beq.n	8007baa <HAL_DMA_Abort+0x422>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a2c      	ldr	r2, [pc, #176]	@ (8007bd4 <HAL_DMA_Abort+0x44c>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d040      	beq.n	8007baa <HAL_DMA_Abort+0x422>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a2a      	ldr	r2, [pc, #168]	@ (8007bd8 <HAL_DMA_Abort+0x450>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d03b      	beq.n	8007baa <HAL_DMA_Abort+0x422>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a29      	ldr	r2, [pc, #164]	@ (8007bdc <HAL_DMA_Abort+0x454>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d036      	beq.n	8007baa <HAL_DMA_Abort+0x422>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a27      	ldr	r2, [pc, #156]	@ (8007be0 <HAL_DMA_Abort+0x458>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d031      	beq.n	8007baa <HAL_DMA_Abort+0x422>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a26      	ldr	r2, [pc, #152]	@ (8007be4 <HAL_DMA_Abort+0x45c>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d02c      	beq.n	8007baa <HAL_DMA_Abort+0x422>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a24      	ldr	r2, [pc, #144]	@ (8007be8 <HAL_DMA_Abort+0x460>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d027      	beq.n	8007baa <HAL_DMA_Abort+0x422>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4a23      	ldr	r2, [pc, #140]	@ (8007bec <HAL_DMA_Abort+0x464>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d022      	beq.n	8007baa <HAL_DMA_Abort+0x422>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4a21      	ldr	r2, [pc, #132]	@ (8007bf0 <HAL_DMA_Abort+0x468>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d01d      	beq.n	8007baa <HAL_DMA_Abort+0x422>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a20      	ldr	r2, [pc, #128]	@ (8007bf4 <HAL_DMA_Abort+0x46c>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d018      	beq.n	8007baa <HAL_DMA_Abort+0x422>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a1e      	ldr	r2, [pc, #120]	@ (8007bf8 <HAL_DMA_Abort+0x470>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d013      	beq.n	8007baa <HAL_DMA_Abort+0x422>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a1d      	ldr	r2, [pc, #116]	@ (8007bfc <HAL_DMA_Abort+0x474>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d00e      	beq.n	8007baa <HAL_DMA_Abort+0x422>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a1b      	ldr	r2, [pc, #108]	@ (8007c00 <HAL_DMA_Abort+0x478>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d009      	beq.n	8007baa <HAL_DMA_Abort+0x422>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a1a      	ldr	r2, [pc, #104]	@ (8007c04 <HAL_DMA_Abort+0x47c>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d004      	beq.n	8007baa <HAL_DMA_Abort+0x422>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a18      	ldr	r2, [pc, #96]	@ (8007c08 <HAL_DMA_Abort+0x480>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d101      	bne.n	8007bae <HAL_DMA_Abort+0x426>
 8007baa:	2301      	movs	r3, #1
 8007bac:	e000      	b.n	8007bb0 <HAL_DMA_Abort+0x428>
 8007bae:	2300      	movs	r3, #0
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d02b      	beq.n	8007c0c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bb8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007bbe:	f003 031f 	and.w	r3, r3, #31
 8007bc2:	223f      	movs	r2, #63	@ 0x3f
 8007bc4:	409a      	lsls	r2, r3
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	609a      	str	r2, [r3, #8]
 8007bca:	e02a      	b.n	8007c22 <HAL_DMA_Abort+0x49a>
 8007bcc:	40020010 	.word	0x40020010
 8007bd0:	40020028 	.word	0x40020028
 8007bd4:	40020040 	.word	0x40020040
 8007bd8:	40020058 	.word	0x40020058
 8007bdc:	40020070 	.word	0x40020070
 8007be0:	40020088 	.word	0x40020088
 8007be4:	400200a0 	.word	0x400200a0
 8007be8:	400200b8 	.word	0x400200b8
 8007bec:	40020410 	.word	0x40020410
 8007bf0:	40020428 	.word	0x40020428
 8007bf4:	40020440 	.word	0x40020440
 8007bf8:	40020458 	.word	0x40020458
 8007bfc:	40020470 	.word	0x40020470
 8007c00:	40020488 	.word	0x40020488
 8007c04:	400204a0 	.word	0x400204a0
 8007c08:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c10:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c16:	f003 031f 	and.w	r3, r3, #31
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	409a      	lsls	r2, r3
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a4f      	ldr	r2, [pc, #316]	@ (8007d64 <HAL_DMA_Abort+0x5dc>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d072      	beq.n	8007d12 <HAL_DMA_Abort+0x58a>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a4d      	ldr	r2, [pc, #308]	@ (8007d68 <HAL_DMA_Abort+0x5e0>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d06d      	beq.n	8007d12 <HAL_DMA_Abort+0x58a>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a4c      	ldr	r2, [pc, #304]	@ (8007d6c <HAL_DMA_Abort+0x5e4>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d068      	beq.n	8007d12 <HAL_DMA_Abort+0x58a>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a4a      	ldr	r2, [pc, #296]	@ (8007d70 <HAL_DMA_Abort+0x5e8>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d063      	beq.n	8007d12 <HAL_DMA_Abort+0x58a>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a49      	ldr	r2, [pc, #292]	@ (8007d74 <HAL_DMA_Abort+0x5ec>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d05e      	beq.n	8007d12 <HAL_DMA_Abort+0x58a>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a47      	ldr	r2, [pc, #284]	@ (8007d78 <HAL_DMA_Abort+0x5f0>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d059      	beq.n	8007d12 <HAL_DMA_Abort+0x58a>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a46      	ldr	r2, [pc, #280]	@ (8007d7c <HAL_DMA_Abort+0x5f4>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d054      	beq.n	8007d12 <HAL_DMA_Abort+0x58a>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a44      	ldr	r2, [pc, #272]	@ (8007d80 <HAL_DMA_Abort+0x5f8>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d04f      	beq.n	8007d12 <HAL_DMA_Abort+0x58a>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a43      	ldr	r2, [pc, #268]	@ (8007d84 <HAL_DMA_Abort+0x5fc>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d04a      	beq.n	8007d12 <HAL_DMA_Abort+0x58a>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a41      	ldr	r2, [pc, #260]	@ (8007d88 <HAL_DMA_Abort+0x600>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d045      	beq.n	8007d12 <HAL_DMA_Abort+0x58a>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a40      	ldr	r2, [pc, #256]	@ (8007d8c <HAL_DMA_Abort+0x604>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d040      	beq.n	8007d12 <HAL_DMA_Abort+0x58a>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a3e      	ldr	r2, [pc, #248]	@ (8007d90 <HAL_DMA_Abort+0x608>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d03b      	beq.n	8007d12 <HAL_DMA_Abort+0x58a>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a3d      	ldr	r2, [pc, #244]	@ (8007d94 <HAL_DMA_Abort+0x60c>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d036      	beq.n	8007d12 <HAL_DMA_Abort+0x58a>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a3b      	ldr	r2, [pc, #236]	@ (8007d98 <HAL_DMA_Abort+0x610>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d031      	beq.n	8007d12 <HAL_DMA_Abort+0x58a>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a3a      	ldr	r2, [pc, #232]	@ (8007d9c <HAL_DMA_Abort+0x614>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d02c      	beq.n	8007d12 <HAL_DMA_Abort+0x58a>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a38      	ldr	r2, [pc, #224]	@ (8007da0 <HAL_DMA_Abort+0x618>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d027      	beq.n	8007d12 <HAL_DMA_Abort+0x58a>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a37      	ldr	r2, [pc, #220]	@ (8007da4 <HAL_DMA_Abort+0x61c>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d022      	beq.n	8007d12 <HAL_DMA_Abort+0x58a>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a35      	ldr	r2, [pc, #212]	@ (8007da8 <HAL_DMA_Abort+0x620>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d01d      	beq.n	8007d12 <HAL_DMA_Abort+0x58a>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a34      	ldr	r2, [pc, #208]	@ (8007dac <HAL_DMA_Abort+0x624>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d018      	beq.n	8007d12 <HAL_DMA_Abort+0x58a>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a32      	ldr	r2, [pc, #200]	@ (8007db0 <HAL_DMA_Abort+0x628>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d013      	beq.n	8007d12 <HAL_DMA_Abort+0x58a>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a31      	ldr	r2, [pc, #196]	@ (8007db4 <HAL_DMA_Abort+0x62c>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d00e      	beq.n	8007d12 <HAL_DMA_Abort+0x58a>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a2f      	ldr	r2, [pc, #188]	@ (8007db8 <HAL_DMA_Abort+0x630>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d009      	beq.n	8007d12 <HAL_DMA_Abort+0x58a>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4a2e      	ldr	r2, [pc, #184]	@ (8007dbc <HAL_DMA_Abort+0x634>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d004      	beq.n	8007d12 <HAL_DMA_Abort+0x58a>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a2c      	ldr	r2, [pc, #176]	@ (8007dc0 <HAL_DMA_Abort+0x638>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d101      	bne.n	8007d16 <HAL_DMA_Abort+0x58e>
 8007d12:	2301      	movs	r3, #1
 8007d14:	e000      	b.n	8007d18 <HAL_DMA_Abort+0x590>
 8007d16:	2300      	movs	r3, #0
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d015      	beq.n	8007d48 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d20:	687a      	ldr	r2, [r7, #4]
 8007d22:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007d24:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d00c      	beq.n	8007d48 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d32:	681a      	ldr	r2, [r3, #0]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d38:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007d3c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d42:	687a      	ldr	r2, [r7, #4]
 8007d44:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007d46:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2200      	movs	r2, #0
 8007d54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8007d58:	2300      	movs	r3, #0
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3718      	adds	r7, #24
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}
 8007d62:	bf00      	nop
 8007d64:	40020010 	.word	0x40020010
 8007d68:	40020028 	.word	0x40020028
 8007d6c:	40020040 	.word	0x40020040
 8007d70:	40020058 	.word	0x40020058
 8007d74:	40020070 	.word	0x40020070
 8007d78:	40020088 	.word	0x40020088
 8007d7c:	400200a0 	.word	0x400200a0
 8007d80:	400200b8 	.word	0x400200b8
 8007d84:	40020410 	.word	0x40020410
 8007d88:	40020428 	.word	0x40020428
 8007d8c:	40020440 	.word	0x40020440
 8007d90:	40020458 	.word	0x40020458
 8007d94:	40020470 	.word	0x40020470
 8007d98:	40020488 	.word	0x40020488
 8007d9c:	400204a0 	.word	0x400204a0
 8007da0:	400204b8 	.word	0x400204b8
 8007da4:	58025408 	.word	0x58025408
 8007da8:	5802541c 	.word	0x5802541c
 8007dac:	58025430 	.word	0x58025430
 8007db0:	58025444 	.word	0x58025444
 8007db4:	58025458 	.word	0x58025458
 8007db8:	5802546c 	.word	0x5802546c
 8007dbc:	58025480 	.word	0x58025480
 8007dc0:	58025494 	.word	0x58025494

08007dc4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b084      	sub	sp, #16
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d101      	bne.n	8007dd6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	e237      	b.n	8008246 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007ddc:	b2db      	uxtb	r3, r3
 8007dde:	2b02      	cmp	r3, #2
 8007de0:	d004      	beq.n	8007dec <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2280      	movs	r2, #128	@ 0x80
 8007de6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8007de8:	2301      	movs	r3, #1
 8007dea:	e22c      	b.n	8008246 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a5c      	ldr	r2, [pc, #368]	@ (8007f64 <HAL_DMA_Abort_IT+0x1a0>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d04a      	beq.n	8007e8c <HAL_DMA_Abort_IT+0xc8>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a5b      	ldr	r2, [pc, #364]	@ (8007f68 <HAL_DMA_Abort_IT+0x1a4>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d045      	beq.n	8007e8c <HAL_DMA_Abort_IT+0xc8>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a59      	ldr	r2, [pc, #356]	@ (8007f6c <HAL_DMA_Abort_IT+0x1a8>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d040      	beq.n	8007e8c <HAL_DMA_Abort_IT+0xc8>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a58      	ldr	r2, [pc, #352]	@ (8007f70 <HAL_DMA_Abort_IT+0x1ac>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d03b      	beq.n	8007e8c <HAL_DMA_Abort_IT+0xc8>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a56      	ldr	r2, [pc, #344]	@ (8007f74 <HAL_DMA_Abort_IT+0x1b0>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d036      	beq.n	8007e8c <HAL_DMA_Abort_IT+0xc8>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a55      	ldr	r2, [pc, #340]	@ (8007f78 <HAL_DMA_Abort_IT+0x1b4>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d031      	beq.n	8007e8c <HAL_DMA_Abort_IT+0xc8>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a53      	ldr	r2, [pc, #332]	@ (8007f7c <HAL_DMA_Abort_IT+0x1b8>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d02c      	beq.n	8007e8c <HAL_DMA_Abort_IT+0xc8>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a52      	ldr	r2, [pc, #328]	@ (8007f80 <HAL_DMA_Abort_IT+0x1bc>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d027      	beq.n	8007e8c <HAL_DMA_Abort_IT+0xc8>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4a50      	ldr	r2, [pc, #320]	@ (8007f84 <HAL_DMA_Abort_IT+0x1c0>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d022      	beq.n	8007e8c <HAL_DMA_Abort_IT+0xc8>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a4f      	ldr	r2, [pc, #316]	@ (8007f88 <HAL_DMA_Abort_IT+0x1c4>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d01d      	beq.n	8007e8c <HAL_DMA_Abort_IT+0xc8>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a4d      	ldr	r2, [pc, #308]	@ (8007f8c <HAL_DMA_Abort_IT+0x1c8>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d018      	beq.n	8007e8c <HAL_DMA_Abort_IT+0xc8>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a4c      	ldr	r2, [pc, #304]	@ (8007f90 <HAL_DMA_Abort_IT+0x1cc>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d013      	beq.n	8007e8c <HAL_DMA_Abort_IT+0xc8>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a4a      	ldr	r2, [pc, #296]	@ (8007f94 <HAL_DMA_Abort_IT+0x1d0>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d00e      	beq.n	8007e8c <HAL_DMA_Abort_IT+0xc8>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a49      	ldr	r2, [pc, #292]	@ (8007f98 <HAL_DMA_Abort_IT+0x1d4>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d009      	beq.n	8007e8c <HAL_DMA_Abort_IT+0xc8>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a47      	ldr	r2, [pc, #284]	@ (8007f9c <HAL_DMA_Abort_IT+0x1d8>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d004      	beq.n	8007e8c <HAL_DMA_Abort_IT+0xc8>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a46      	ldr	r2, [pc, #280]	@ (8007fa0 <HAL_DMA_Abort_IT+0x1dc>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d101      	bne.n	8007e90 <HAL_DMA_Abort_IT+0xcc>
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	e000      	b.n	8007e92 <HAL_DMA_Abort_IT+0xce>
 8007e90:	2300      	movs	r3, #0
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	f000 8086 	beq.w	8007fa4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2204      	movs	r2, #4
 8007e9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a2f      	ldr	r2, [pc, #188]	@ (8007f64 <HAL_DMA_Abort_IT+0x1a0>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d04a      	beq.n	8007f40 <HAL_DMA_Abort_IT+0x17c>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4a2e      	ldr	r2, [pc, #184]	@ (8007f68 <HAL_DMA_Abort_IT+0x1a4>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d045      	beq.n	8007f40 <HAL_DMA_Abort_IT+0x17c>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a2c      	ldr	r2, [pc, #176]	@ (8007f6c <HAL_DMA_Abort_IT+0x1a8>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d040      	beq.n	8007f40 <HAL_DMA_Abort_IT+0x17c>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4a2b      	ldr	r2, [pc, #172]	@ (8007f70 <HAL_DMA_Abort_IT+0x1ac>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d03b      	beq.n	8007f40 <HAL_DMA_Abort_IT+0x17c>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a29      	ldr	r2, [pc, #164]	@ (8007f74 <HAL_DMA_Abort_IT+0x1b0>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d036      	beq.n	8007f40 <HAL_DMA_Abort_IT+0x17c>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4a28      	ldr	r2, [pc, #160]	@ (8007f78 <HAL_DMA_Abort_IT+0x1b4>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d031      	beq.n	8007f40 <HAL_DMA_Abort_IT+0x17c>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a26      	ldr	r2, [pc, #152]	@ (8007f7c <HAL_DMA_Abort_IT+0x1b8>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d02c      	beq.n	8007f40 <HAL_DMA_Abort_IT+0x17c>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4a25      	ldr	r2, [pc, #148]	@ (8007f80 <HAL_DMA_Abort_IT+0x1bc>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d027      	beq.n	8007f40 <HAL_DMA_Abort_IT+0x17c>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a23      	ldr	r2, [pc, #140]	@ (8007f84 <HAL_DMA_Abort_IT+0x1c0>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d022      	beq.n	8007f40 <HAL_DMA_Abort_IT+0x17c>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4a22      	ldr	r2, [pc, #136]	@ (8007f88 <HAL_DMA_Abort_IT+0x1c4>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d01d      	beq.n	8007f40 <HAL_DMA_Abort_IT+0x17c>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a20      	ldr	r2, [pc, #128]	@ (8007f8c <HAL_DMA_Abort_IT+0x1c8>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d018      	beq.n	8007f40 <HAL_DMA_Abort_IT+0x17c>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	4a1f      	ldr	r2, [pc, #124]	@ (8007f90 <HAL_DMA_Abort_IT+0x1cc>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d013      	beq.n	8007f40 <HAL_DMA_Abort_IT+0x17c>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a1d      	ldr	r2, [pc, #116]	@ (8007f94 <HAL_DMA_Abort_IT+0x1d0>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d00e      	beq.n	8007f40 <HAL_DMA_Abort_IT+0x17c>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a1c      	ldr	r2, [pc, #112]	@ (8007f98 <HAL_DMA_Abort_IT+0x1d4>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d009      	beq.n	8007f40 <HAL_DMA_Abort_IT+0x17c>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a1a      	ldr	r2, [pc, #104]	@ (8007f9c <HAL_DMA_Abort_IT+0x1d8>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d004      	beq.n	8007f40 <HAL_DMA_Abort_IT+0x17c>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a19      	ldr	r2, [pc, #100]	@ (8007fa0 <HAL_DMA_Abort_IT+0x1dc>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d108      	bne.n	8007f52 <HAL_DMA_Abort_IT+0x18e>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	681a      	ldr	r2, [r3, #0]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f022 0201 	bic.w	r2, r2, #1
 8007f4e:	601a      	str	r2, [r3, #0]
 8007f50:	e178      	b.n	8008244 <HAL_DMA_Abort_IT+0x480>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	681a      	ldr	r2, [r3, #0]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f022 0201 	bic.w	r2, r2, #1
 8007f60:	601a      	str	r2, [r3, #0]
 8007f62:	e16f      	b.n	8008244 <HAL_DMA_Abort_IT+0x480>
 8007f64:	40020010 	.word	0x40020010
 8007f68:	40020028 	.word	0x40020028
 8007f6c:	40020040 	.word	0x40020040
 8007f70:	40020058 	.word	0x40020058
 8007f74:	40020070 	.word	0x40020070
 8007f78:	40020088 	.word	0x40020088
 8007f7c:	400200a0 	.word	0x400200a0
 8007f80:	400200b8 	.word	0x400200b8
 8007f84:	40020410 	.word	0x40020410
 8007f88:	40020428 	.word	0x40020428
 8007f8c:	40020440 	.word	0x40020440
 8007f90:	40020458 	.word	0x40020458
 8007f94:	40020470 	.word	0x40020470
 8007f98:	40020488 	.word	0x40020488
 8007f9c:	400204a0 	.word	0x400204a0
 8007fa0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	681a      	ldr	r2, [r3, #0]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f022 020e 	bic.w	r2, r2, #14
 8007fb2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a6c      	ldr	r2, [pc, #432]	@ (800816c <HAL_DMA_Abort_IT+0x3a8>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d04a      	beq.n	8008054 <HAL_DMA_Abort_IT+0x290>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4a6b      	ldr	r2, [pc, #428]	@ (8008170 <HAL_DMA_Abort_IT+0x3ac>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d045      	beq.n	8008054 <HAL_DMA_Abort_IT+0x290>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4a69      	ldr	r2, [pc, #420]	@ (8008174 <HAL_DMA_Abort_IT+0x3b0>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d040      	beq.n	8008054 <HAL_DMA_Abort_IT+0x290>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a68      	ldr	r2, [pc, #416]	@ (8008178 <HAL_DMA_Abort_IT+0x3b4>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d03b      	beq.n	8008054 <HAL_DMA_Abort_IT+0x290>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4a66      	ldr	r2, [pc, #408]	@ (800817c <HAL_DMA_Abort_IT+0x3b8>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d036      	beq.n	8008054 <HAL_DMA_Abort_IT+0x290>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4a65      	ldr	r2, [pc, #404]	@ (8008180 <HAL_DMA_Abort_IT+0x3bc>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d031      	beq.n	8008054 <HAL_DMA_Abort_IT+0x290>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4a63      	ldr	r2, [pc, #396]	@ (8008184 <HAL_DMA_Abort_IT+0x3c0>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d02c      	beq.n	8008054 <HAL_DMA_Abort_IT+0x290>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4a62      	ldr	r2, [pc, #392]	@ (8008188 <HAL_DMA_Abort_IT+0x3c4>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d027      	beq.n	8008054 <HAL_DMA_Abort_IT+0x290>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4a60      	ldr	r2, [pc, #384]	@ (800818c <HAL_DMA_Abort_IT+0x3c8>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d022      	beq.n	8008054 <HAL_DMA_Abort_IT+0x290>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4a5f      	ldr	r2, [pc, #380]	@ (8008190 <HAL_DMA_Abort_IT+0x3cc>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d01d      	beq.n	8008054 <HAL_DMA_Abort_IT+0x290>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4a5d      	ldr	r2, [pc, #372]	@ (8008194 <HAL_DMA_Abort_IT+0x3d0>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d018      	beq.n	8008054 <HAL_DMA_Abort_IT+0x290>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4a5c      	ldr	r2, [pc, #368]	@ (8008198 <HAL_DMA_Abort_IT+0x3d4>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d013      	beq.n	8008054 <HAL_DMA_Abort_IT+0x290>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4a5a      	ldr	r2, [pc, #360]	@ (800819c <HAL_DMA_Abort_IT+0x3d8>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d00e      	beq.n	8008054 <HAL_DMA_Abort_IT+0x290>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a59      	ldr	r2, [pc, #356]	@ (80081a0 <HAL_DMA_Abort_IT+0x3dc>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d009      	beq.n	8008054 <HAL_DMA_Abort_IT+0x290>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a57      	ldr	r2, [pc, #348]	@ (80081a4 <HAL_DMA_Abort_IT+0x3e0>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d004      	beq.n	8008054 <HAL_DMA_Abort_IT+0x290>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a56      	ldr	r2, [pc, #344]	@ (80081a8 <HAL_DMA_Abort_IT+0x3e4>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d108      	bne.n	8008066 <HAL_DMA_Abort_IT+0x2a2>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	681a      	ldr	r2, [r3, #0]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f022 0201 	bic.w	r2, r2, #1
 8008062:	601a      	str	r2, [r3, #0]
 8008064:	e007      	b.n	8008076 <HAL_DMA_Abort_IT+0x2b2>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	681a      	ldr	r2, [r3, #0]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f022 0201 	bic.w	r2, r2, #1
 8008074:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4a3c      	ldr	r2, [pc, #240]	@ (800816c <HAL_DMA_Abort_IT+0x3a8>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d072      	beq.n	8008166 <HAL_DMA_Abort_IT+0x3a2>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a3a      	ldr	r2, [pc, #232]	@ (8008170 <HAL_DMA_Abort_IT+0x3ac>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d06d      	beq.n	8008166 <HAL_DMA_Abort_IT+0x3a2>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4a39      	ldr	r2, [pc, #228]	@ (8008174 <HAL_DMA_Abort_IT+0x3b0>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d068      	beq.n	8008166 <HAL_DMA_Abort_IT+0x3a2>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4a37      	ldr	r2, [pc, #220]	@ (8008178 <HAL_DMA_Abort_IT+0x3b4>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d063      	beq.n	8008166 <HAL_DMA_Abort_IT+0x3a2>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4a36      	ldr	r2, [pc, #216]	@ (800817c <HAL_DMA_Abort_IT+0x3b8>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d05e      	beq.n	8008166 <HAL_DMA_Abort_IT+0x3a2>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4a34      	ldr	r2, [pc, #208]	@ (8008180 <HAL_DMA_Abort_IT+0x3bc>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d059      	beq.n	8008166 <HAL_DMA_Abort_IT+0x3a2>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4a33      	ldr	r2, [pc, #204]	@ (8008184 <HAL_DMA_Abort_IT+0x3c0>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d054      	beq.n	8008166 <HAL_DMA_Abort_IT+0x3a2>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4a31      	ldr	r2, [pc, #196]	@ (8008188 <HAL_DMA_Abort_IT+0x3c4>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d04f      	beq.n	8008166 <HAL_DMA_Abort_IT+0x3a2>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4a30      	ldr	r2, [pc, #192]	@ (800818c <HAL_DMA_Abort_IT+0x3c8>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d04a      	beq.n	8008166 <HAL_DMA_Abort_IT+0x3a2>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4a2e      	ldr	r2, [pc, #184]	@ (8008190 <HAL_DMA_Abort_IT+0x3cc>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d045      	beq.n	8008166 <HAL_DMA_Abort_IT+0x3a2>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4a2d      	ldr	r2, [pc, #180]	@ (8008194 <HAL_DMA_Abort_IT+0x3d0>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d040      	beq.n	8008166 <HAL_DMA_Abort_IT+0x3a2>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4a2b      	ldr	r2, [pc, #172]	@ (8008198 <HAL_DMA_Abort_IT+0x3d4>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d03b      	beq.n	8008166 <HAL_DMA_Abort_IT+0x3a2>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4a2a      	ldr	r2, [pc, #168]	@ (800819c <HAL_DMA_Abort_IT+0x3d8>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d036      	beq.n	8008166 <HAL_DMA_Abort_IT+0x3a2>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a28      	ldr	r2, [pc, #160]	@ (80081a0 <HAL_DMA_Abort_IT+0x3dc>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d031      	beq.n	8008166 <HAL_DMA_Abort_IT+0x3a2>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a27      	ldr	r2, [pc, #156]	@ (80081a4 <HAL_DMA_Abort_IT+0x3e0>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d02c      	beq.n	8008166 <HAL_DMA_Abort_IT+0x3a2>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4a25      	ldr	r2, [pc, #148]	@ (80081a8 <HAL_DMA_Abort_IT+0x3e4>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d027      	beq.n	8008166 <HAL_DMA_Abort_IT+0x3a2>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a24      	ldr	r2, [pc, #144]	@ (80081ac <HAL_DMA_Abort_IT+0x3e8>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d022      	beq.n	8008166 <HAL_DMA_Abort_IT+0x3a2>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4a22      	ldr	r2, [pc, #136]	@ (80081b0 <HAL_DMA_Abort_IT+0x3ec>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d01d      	beq.n	8008166 <HAL_DMA_Abort_IT+0x3a2>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4a21      	ldr	r2, [pc, #132]	@ (80081b4 <HAL_DMA_Abort_IT+0x3f0>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d018      	beq.n	8008166 <HAL_DMA_Abort_IT+0x3a2>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4a1f      	ldr	r2, [pc, #124]	@ (80081b8 <HAL_DMA_Abort_IT+0x3f4>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d013      	beq.n	8008166 <HAL_DMA_Abort_IT+0x3a2>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4a1e      	ldr	r2, [pc, #120]	@ (80081bc <HAL_DMA_Abort_IT+0x3f8>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d00e      	beq.n	8008166 <HAL_DMA_Abort_IT+0x3a2>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a1c      	ldr	r2, [pc, #112]	@ (80081c0 <HAL_DMA_Abort_IT+0x3fc>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d009      	beq.n	8008166 <HAL_DMA_Abort_IT+0x3a2>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4a1b      	ldr	r2, [pc, #108]	@ (80081c4 <HAL_DMA_Abort_IT+0x400>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d004      	beq.n	8008166 <HAL_DMA_Abort_IT+0x3a2>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4a19      	ldr	r2, [pc, #100]	@ (80081c8 <HAL_DMA_Abort_IT+0x404>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d132      	bne.n	80081cc <HAL_DMA_Abort_IT+0x408>
 8008166:	2301      	movs	r3, #1
 8008168:	e031      	b.n	80081ce <HAL_DMA_Abort_IT+0x40a>
 800816a:	bf00      	nop
 800816c:	40020010 	.word	0x40020010
 8008170:	40020028 	.word	0x40020028
 8008174:	40020040 	.word	0x40020040
 8008178:	40020058 	.word	0x40020058
 800817c:	40020070 	.word	0x40020070
 8008180:	40020088 	.word	0x40020088
 8008184:	400200a0 	.word	0x400200a0
 8008188:	400200b8 	.word	0x400200b8
 800818c:	40020410 	.word	0x40020410
 8008190:	40020428 	.word	0x40020428
 8008194:	40020440 	.word	0x40020440
 8008198:	40020458 	.word	0x40020458
 800819c:	40020470 	.word	0x40020470
 80081a0:	40020488 	.word	0x40020488
 80081a4:	400204a0 	.word	0x400204a0
 80081a8:	400204b8 	.word	0x400204b8
 80081ac:	58025408 	.word	0x58025408
 80081b0:	5802541c 	.word	0x5802541c
 80081b4:	58025430 	.word	0x58025430
 80081b8:	58025444 	.word	0x58025444
 80081bc:	58025458 	.word	0x58025458
 80081c0:	5802546c 	.word	0x5802546c
 80081c4:	58025480 	.word	0x58025480
 80081c8:	58025494 	.word	0x58025494
 80081cc:	2300      	movs	r3, #0
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d028      	beq.n	8008224 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80081d6:	681a      	ldr	r2, [r3, #0]
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80081dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80081e0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081e6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80081ec:	f003 031f 	and.w	r3, r3, #31
 80081f0:	2201      	movs	r2, #1
 80081f2:	409a      	lsls	r2, r3
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80081fc:	687a      	ldr	r2, [r7, #4]
 80081fe:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8008200:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008206:	2b00      	cmp	r3, #0
 8008208:	d00c      	beq.n	8008224 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800820e:	681a      	ldr	r2, [r3, #0]
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008214:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008218:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800821e:	687a      	ldr	r2, [r7, #4]
 8008220:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8008222:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2201      	movs	r2, #1
 8008228:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2200      	movs	r2, #0
 8008230:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008238:	2b00      	cmp	r3, #0
 800823a:	d003      	beq.n	8008244 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8008244:	2300      	movs	r3, #0
}
 8008246:	4618      	mov	r0, r3
 8008248:	3710      	adds	r7, #16
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}
 800824e:	bf00      	nop

08008250 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b08a      	sub	sp, #40	@ 0x28
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8008258:	2300      	movs	r3, #0
 800825a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800825c:	4b67      	ldr	r3, [pc, #412]	@ (80083fc <HAL_DMA_IRQHandler+0x1ac>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4a67      	ldr	r2, [pc, #412]	@ (8008400 <HAL_DMA_IRQHandler+0x1b0>)
 8008262:	fba2 2303 	umull	r2, r3, r2, r3
 8008266:	0a9b      	lsrs	r3, r3, #10
 8008268:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800826e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008274:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8008276:	6a3b      	ldr	r3, [r7, #32]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800827c:	69fb      	ldr	r3, [r7, #28]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4a5f      	ldr	r2, [pc, #380]	@ (8008404 <HAL_DMA_IRQHandler+0x1b4>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d04a      	beq.n	8008322 <HAL_DMA_IRQHandler+0xd2>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4a5d      	ldr	r2, [pc, #372]	@ (8008408 <HAL_DMA_IRQHandler+0x1b8>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d045      	beq.n	8008322 <HAL_DMA_IRQHandler+0xd2>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4a5c      	ldr	r2, [pc, #368]	@ (800840c <HAL_DMA_IRQHandler+0x1bc>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d040      	beq.n	8008322 <HAL_DMA_IRQHandler+0xd2>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a5a      	ldr	r2, [pc, #360]	@ (8008410 <HAL_DMA_IRQHandler+0x1c0>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d03b      	beq.n	8008322 <HAL_DMA_IRQHandler+0xd2>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4a59      	ldr	r2, [pc, #356]	@ (8008414 <HAL_DMA_IRQHandler+0x1c4>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d036      	beq.n	8008322 <HAL_DMA_IRQHandler+0xd2>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a57      	ldr	r2, [pc, #348]	@ (8008418 <HAL_DMA_IRQHandler+0x1c8>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d031      	beq.n	8008322 <HAL_DMA_IRQHandler+0xd2>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4a56      	ldr	r2, [pc, #344]	@ (800841c <HAL_DMA_IRQHandler+0x1cc>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d02c      	beq.n	8008322 <HAL_DMA_IRQHandler+0xd2>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a54      	ldr	r2, [pc, #336]	@ (8008420 <HAL_DMA_IRQHandler+0x1d0>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d027      	beq.n	8008322 <HAL_DMA_IRQHandler+0xd2>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4a53      	ldr	r2, [pc, #332]	@ (8008424 <HAL_DMA_IRQHandler+0x1d4>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d022      	beq.n	8008322 <HAL_DMA_IRQHandler+0xd2>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a51      	ldr	r2, [pc, #324]	@ (8008428 <HAL_DMA_IRQHandler+0x1d8>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d01d      	beq.n	8008322 <HAL_DMA_IRQHandler+0xd2>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a50      	ldr	r2, [pc, #320]	@ (800842c <HAL_DMA_IRQHandler+0x1dc>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d018      	beq.n	8008322 <HAL_DMA_IRQHandler+0xd2>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a4e      	ldr	r2, [pc, #312]	@ (8008430 <HAL_DMA_IRQHandler+0x1e0>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d013      	beq.n	8008322 <HAL_DMA_IRQHandler+0xd2>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a4d      	ldr	r2, [pc, #308]	@ (8008434 <HAL_DMA_IRQHandler+0x1e4>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d00e      	beq.n	8008322 <HAL_DMA_IRQHandler+0xd2>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a4b      	ldr	r2, [pc, #300]	@ (8008438 <HAL_DMA_IRQHandler+0x1e8>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d009      	beq.n	8008322 <HAL_DMA_IRQHandler+0xd2>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4a4a      	ldr	r2, [pc, #296]	@ (800843c <HAL_DMA_IRQHandler+0x1ec>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d004      	beq.n	8008322 <HAL_DMA_IRQHandler+0xd2>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4a48      	ldr	r2, [pc, #288]	@ (8008440 <HAL_DMA_IRQHandler+0x1f0>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d101      	bne.n	8008326 <HAL_DMA_IRQHandler+0xd6>
 8008322:	2301      	movs	r3, #1
 8008324:	e000      	b.n	8008328 <HAL_DMA_IRQHandler+0xd8>
 8008326:	2300      	movs	r3, #0
 8008328:	2b00      	cmp	r3, #0
 800832a:	f000 842b 	beq.w	8008b84 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008332:	f003 031f 	and.w	r3, r3, #31
 8008336:	2208      	movs	r2, #8
 8008338:	409a      	lsls	r2, r3
 800833a:	69bb      	ldr	r3, [r7, #24]
 800833c:	4013      	ands	r3, r2
 800833e:	2b00      	cmp	r3, #0
 8008340:	f000 80a2 	beq.w	8008488 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a2e      	ldr	r2, [pc, #184]	@ (8008404 <HAL_DMA_IRQHandler+0x1b4>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d04a      	beq.n	80083e4 <HAL_DMA_IRQHandler+0x194>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4a2d      	ldr	r2, [pc, #180]	@ (8008408 <HAL_DMA_IRQHandler+0x1b8>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d045      	beq.n	80083e4 <HAL_DMA_IRQHandler+0x194>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4a2b      	ldr	r2, [pc, #172]	@ (800840c <HAL_DMA_IRQHandler+0x1bc>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d040      	beq.n	80083e4 <HAL_DMA_IRQHandler+0x194>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4a2a      	ldr	r2, [pc, #168]	@ (8008410 <HAL_DMA_IRQHandler+0x1c0>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d03b      	beq.n	80083e4 <HAL_DMA_IRQHandler+0x194>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a28      	ldr	r2, [pc, #160]	@ (8008414 <HAL_DMA_IRQHandler+0x1c4>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d036      	beq.n	80083e4 <HAL_DMA_IRQHandler+0x194>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	4a27      	ldr	r2, [pc, #156]	@ (8008418 <HAL_DMA_IRQHandler+0x1c8>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d031      	beq.n	80083e4 <HAL_DMA_IRQHandler+0x194>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4a25      	ldr	r2, [pc, #148]	@ (800841c <HAL_DMA_IRQHandler+0x1cc>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d02c      	beq.n	80083e4 <HAL_DMA_IRQHandler+0x194>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a24      	ldr	r2, [pc, #144]	@ (8008420 <HAL_DMA_IRQHandler+0x1d0>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d027      	beq.n	80083e4 <HAL_DMA_IRQHandler+0x194>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a22      	ldr	r2, [pc, #136]	@ (8008424 <HAL_DMA_IRQHandler+0x1d4>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d022      	beq.n	80083e4 <HAL_DMA_IRQHandler+0x194>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4a21      	ldr	r2, [pc, #132]	@ (8008428 <HAL_DMA_IRQHandler+0x1d8>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d01d      	beq.n	80083e4 <HAL_DMA_IRQHandler+0x194>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a1f      	ldr	r2, [pc, #124]	@ (800842c <HAL_DMA_IRQHandler+0x1dc>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d018      	beq.n	80083e4 <HAL_DMA_IRQHandler+0x194>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	4a1e      	ldr	r2, [pc, #120]	@ (8008430 <HAL_DMA_IRQHandler+0x1e0>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d013      	beq.n	80083e4 <HAL_DMA_IRQHandler+0x194>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4a1c      	ldr	r2, [pc, #112]	@ (8008434 <HAL_DMA_IRQHandler+0x1e4>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d00e      	beq.n	80083e4 <HAL_DMA_IRQHandler+0x194>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a1b      	ldr	r2, [pc, #108]	@ (8008438 <HAL_DMA_IRQHandler+0x1e8>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d009      	beq.n	80083e4 <HAL_DMA_IRQHandler+0x194>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4a19      	ldr	r2, [pc, #100]	@ (800843c <HAL_DMA_IRQHandler+0x1ec>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d004      	beq.n	80083e4 <HAL_DMA_IRQHandler+0x194>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	4a18      	ldr	r2, [pc, #96]	@ (8008440 <HAL_DMA_IRQHandler+0x1f0>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d12f      	bne.n	8008444 <HAL_DMA_IRQHandler+0x1f4>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f003 0304 	and.w	r3, r3, #4
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	bf14      	ite	ne
 80083f2:	2301      	movne	r3, #1
 80083f4:	2300      	moveq	r3, #0
 80083f6:	b2db      	uxtb	r3, r3
 80083f8:	e02e      	b.n	8008458 <HAL_DMA_IRQHandler+0x208>
 80083fa:	bf00      	nop
 80083fc:	24000000 	.word	0x24000000
 8008400:	1b4e81b5 	.word	0x1b4e81b5
 8008404:	40020010 	.word	0x40020010
 8008408:	40020028 	.word	0x40020028
 800840c:	40020040 	.word	0x40020040
 8008410:	40020058 	.word	0x40020058
 8008414:	40020070 	.word	0x40020070
 8008418:	40020088 	.word	0x40020088
 800841c:	400200a0 	.word	0x400200a0
 8008420:	400200b8 	.word	0x400200b8
 8008424:	40020410 	.word	0x40020410
 8008428:	40020428 	.word	0x40020428
 800842c:	40020440 	.word	0x40020440
 8008430:	40020458 	.word	0x40020458
 8008434:	40020470 	.word	0x40020470
 8008438:	40020488 	.word	0x40020488
 800843c:	400204a0 	.word	0x400204a0
 8008440:	400204b8 	.word	0x400204b8
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f003 0308 	and.w	r3, r3, #8
 800844e:	2b00      	cmp	r3, #0
 8008450:	bf14      	ite	ne
 8008452:	2301      	movne	r3, #1
 8008454:	2300      	moveq	r3, #0
 8008456:	b2db      	uxtb	r3, r3
 8008458:	2b00      	cmp	r3, #0
 800845a:	d015      	beq.n	8008488 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	681a      	ldr	r2, [r3, #0]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f022 0204 	bic.w	r2, r2, #4
 800846a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008470:	f003 031f 	and.w	r3, r3, #31
 8008474:	2208      	movs	r2, #8
 8008476:	409a      	lsls	r2, r3
 8008478:	6a3b      	ldr	r3, [r7, #32]
 800847a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008480:	f043 0201 	orr.w	r2, r3, #1
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800848c:	f003 031f 	and.w	r3, r3, #31
 8008490:	69ba      	ldr	r2, [r7, #24]
 8008492:	fa22 f303 	lsr.w	r3, r2, r3
 8008496:	f003 0301 	and.w	r3, r3, #1
 800849a:	2b00      	cmp	r3, #0
 800849c:	d06e      	beq.n	800857c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	4a69      	ldr	r2, [pc, #420]	@ (8008648 <HAL_DMA_IRQHandler+0x3f8>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d04a      	beq.n	800853e <HAL_DMA_IRQHandler+0x2ee>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a67      	ldr	r2, [pc, #412]	@ (800864c <HAL_DMA_IRQHandler+0x3fc>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d045      	beq.n	800853e <HAL_DMA_IRQHandler+0x2ee>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4a66      	ldr	r2, [pc, #408]	@ (8008650 <HAL_DMA_IRQHandler+0x400>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d040      	beq.n	800853e <HAL_DMA_IRQHandler+0x2ee>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a64      	ldr	r2, [pc, #400]	@ (8008654 <HAL_DMA_IRQHandler+0x404>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d03b      	beq.n	800853e <HAL_DMA_IRQHandler+0x2ee>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4a63      	ldr	r2, [pc, #396]	@ (8008658 <HAL_DMA_IRQHandler+0x408>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d036      	beq.n	800853e <HAL_DMA_IRQHandler+0x2ee>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a61      	ldr	r2, [pc, #388]	@ (800865c <HAL_DMA_IRQHandler+0x40c>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d031      	beq.n	800853e <HAL_DMA_IRQHandler+0x2ee>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4a60      	ldr	r2, [pc, #384]	@ (8008660 <HAL_DMA_IRQHandler+0x410>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d02c      	beq.n	800853e <HAL_DMA_IRQHandler+0x2ee>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4a5e      	ldr	r2, [pc, #376]	@ (8008664 <HAL_DMA_IRQHandler+0x414>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d027      	beq.n	800853e <HAL_DMA_IRQHandler+0x2ee>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4a5d      	ldr	r2, [pc, #372]	@ (8008668 <HAL_DMA_IRQHandler+0x418>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d022      	beq.n	800853e <HAL_DMA_IRQHandler+0x2ee>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a5b      	ldr	r2, [pc, #364]	@ (800866c <HAL_DMA_IRQHandler+0x41c>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d01d      	beq.n	800853e <HAL_DMA_IRQHandler+0x2ee>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a5a      	ldr	r2, [pc, #360]	@ (8008670 <HAL_DMA_IRQHandler+0x420>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d018      	beq.n	800853e <HAL_DMA_IRQHandler+0x2ee>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a58      	ldr	r2, [pc, #352]	@ (8008674 <HAL_DMA_IRQHandler+0x424>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d013      	beq.n	800853e <HAL_DMA_IRQHandler+0x2ee>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4a57      	ldr	r2, [pc, #348]	@ (8008678 <HAL_DMA_IRQHandler+0x428>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d00e      	beq.n	800853e <HAL_DMA_IRQHandler+0x2ee>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4a55      	ldr	r2, [pc, #340]	@ (800867c <HAL_DMA_IRQHandler+0x42c>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d009      	beq.n	800853e <HAL_DMA_IRQHandler+0x2ee>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4a54      	ldr	r2, [pc, #336]	@ (8008680 <HAL_DMA_IRQHandler+0x430>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d004      	beq.n	800853e <HAL_DMA_IRQHandler+0x2ee>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4a52      	ldr	r2, [pc, #328]	@ (8008684 <HAL_DMA_IRQHandler+0x434>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d10a      	bne.n	8008554 <HAL_DMA_IRQHandler+0x304>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	695b      	ldr	r3, [r3, #20]
 8008544:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008548:	2b00      	cmp	r3, #0
 800854a:	bf14      	ite	ne
 800854c:	2301      	movne	r3, #1
 800854e:	2300      	moveq	r3, #0
 8008550:	b2db      	uxtb	r3, r3
 8008552:	e003      	b.n	800855c <HAL_DMA_IRQHandler+0x30c>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	2300      	movs	r3, #0
 800855c:	2b00      	cmp	r3, #0
 800855e:	d00d      	beq.n	800857c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008564:	f003 031f 	and.w	r3, r3, #31
 8008568:	2201      	movs	r2, #1
 800856a:	409a      	lsls	r2, r3
 800856c:	6a3b      	ldr	r3, [r7, #32]
 800856e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008574:	f043 0202 	orr.w	r2, r3, #2
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008580:	f003 031f 	and.w	r3, r3, #31
 8008584:	2204      	movs	r2, #4
 8008586:	409a      	lsls	r2, r3
 8008588:	69bb      	ldr	r3, [r7, #24]
 800858a:	4013      	ands	r3, r2
 800858c:	2b00      	cmp	r3, #0
 800858e:	f000 808f 	beq.w	80086b0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a2c      	ldr	r2, [pc, #176]	@ (8008648 <HAL_DMA_IRQHandler+0x3f8>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d04a      	beq.n	8008632 <HAL_DMA_IRQHandler+0x3e2>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a2a      	ldr	r2, [pc, #168]	@ (800864c <HAL_DMA_IRQHandler+0x3fc>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d045      	beq.n	8008632 <HAL_DMA_IRQHandler+0x3e2>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4a29      	ldr	r2, [pc, #164]	@ (8008650 <HAL_DMA_IRQHandler+0x400>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d040      	beq.n	8008632 <HAL_DMA_IRQHandler+0x3e2>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a27      	ldr	r2, [pc, #156]	@ (8008654 <HAL_DMA_IRQHandler+0x404>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d03b      	beq.n	8008632 <HAL_DMA_IRQHandler+0x3e2>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4a26      	ldr	r2, [pc, #152]	@ (8008658 <HAL_DMA_IRQHandler+0x408>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d036      	beq.n	8008632 <HAL_DMA_IRQHandler+0x3e2>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a24      	ldr	r2, [pc, #144]	@ (800865c <HAL_DMA_IRQHandler+0x40c>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d031      	beq.n	8008632 <HAL_DMA_IRQHandler+0x3e2>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a23      	ldr	r2, [pc, #140]	@ (8008660 <HAL_DMA_IRQHandler+0x410>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d02c      	beq.n	8008632 <HAL_DMA_IRQHandler+0x3e2>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a21      	ldr	r2, [pc, #132]	@ (8008664 <HAL_DMA_IRQHandler+0x414>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d027      	beq.n	8008632 <HAL_DMA_IRQHandler+0x3e2>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a20      	ldr	r2, [pc, #128]	@ (8008668 <HAL_DMA_IRQHandler+0x418>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d022      	beq.n	8008632 <HAL_DMA_IRQHandler+0x3e2>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4a1e      	ldr	r2, [pc, #120]	@ (800866c <HAL_DMA_IRQHandler+0x41c>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d01d      	beq.n	8008632 <HAL_DMA_IRQHandler+0x3e2>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4a1d      	ldr	r2, [pc, #116]	@ (8008670 <HAL_DMA_IRQHandler+0x420>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d018      	beq.n	8008632 <HAL_DMA_IRQHandler+0x3e2>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4a1b      	ldr	r2, [pc, #108]	@ (8008674 <HAL_DMA_IRQHandler+0x424>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d013      	beq.n	8008632 <HAL_DMA_IRQHandler+0x3e2>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4a1a      	ldr	r2, [pc, #104]	@ (8008678 <HAL_DMA_IRQHandler+0x428>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d00e      	beq.n	8008632 <HAL_DMA_IRQHandler+0x3e2>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	4a18      	ldr	r2, [pc, #96]	@ (800867c <HAL_DMA_IRQHandler+0x42c>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d009      	beq.n	8008632 <HAL_DMA_IRQHandler+0x3e2>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4a17      	ldr	r2, [pc, #92]	@ (8008680 <HAL_DMA_IRQHandler+0x430>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d004      	beq.n	8008632 <HAL_DMA_IRQHandler+0x3e2>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4a15      	ldr	r2, [pc, #84]	@ (8008684 <HAL_DMA_IRQHandler+0x434>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d12a      	bne.n	8008688 <HAL_DMA_IRQHandler+0x438>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f003 0302 	and.w	r3, r3, #2
 800863c:	2b00      	cmp	r3, #0
 800863e:	bf14      	ite	ne
 8008640:	2301      	movne	r3, #1
 8008642:	2300      	moveq	r3, #0
 8008644:	b2db      	uxtb	r3, r3
 8008646:	e023      	b.n	8008690 <HAL_DMA_IRQHandler+0x440>
 8008648:	40020010 	.word	0x40020010
 800864c:	40020028 	.word	0x40020028
 8008650:	40020040 	.word	0x40020040
 8008654:	40020058 	.word	0x40020058
 8008658:	40020070 	.word	0x40020070
 800865c:	40020088 	.word	0x40020088
 8008660:	400200a0 	.word	0x400200a0
 8008664:	400200b8 	.word	0x400200b8
 8008668:	40020410 	.word	0x40020410
 800866c:	40020428 	.word	0x40020428
 8008670:	40020440 	.word	0x40020440
 8008674:	40020458 	.word	0x40020458
 8008678:	40020470 	.word	0x40020470
 800867c:	40020488 	.word	0x40020488
 8008680:	400204a0 	.word	0x400204a0
 8008684:	400204b8 	.word	0x400204b8
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	2300      	movs	r3, #0
 8008690:	2b00      	cmp	r3, #0
 8008692:	d00d      	beq.n	80086b0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008698:	f003 031f 	and.w	r3, r3, #31
 800869c:	2204      	movs	r2, #4
 800869e:	409a      	lsls	r2, r3
 80086a0:	6a3b      	ldr	r3, [r7, #32]
 80086a2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086a8:	f043 0204 	orr.w	r2, r3, #4
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80086b4:	f003 031f 	and.w	r3, r3, #31
 80086b8:	2210      	movs	r2, #16
 80086ba:	409a      	lsls	r2, r3
 80086bc:	69bb      	ldr	r3, [r7, #24]
 80086be:	4013      	ands	r3, r2
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	f000 80a6 	beq.w	8008812 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4a85      	ldr	r2, [pc, #532]	@ (80088e0 <HAL_DMA_IRQHandler+0x690>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d04a      	beq.n	8008766 <HAL_DMA_IRQHandler+0x516>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4a83      	ldr	r2, [pc, #524]	@ (80088e4 <HAL_DMA_IRQHandler+0x694>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d045      	beq.n	8008766 <HAL_DMA_IRQHandler+0x516>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4a82      	ldr	r2, [pc, #520]	@ (80088e8 <HAL_DMA_IRQHandler+0x698>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d040      	beq.n	8008766 <HAL_DMA_IRQHandler+0x516>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	4a80      	ldr	r2, [pc, #512]	@ (80088ec <HAL_DMA_IRQHandler+0x69c>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d03b      	beq.n	8008766 <HAL_DMA_IRQHandler+0x516>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4a7f      	ldr	r2, [pc, #508]	@ (80088f0 <HAL_DMA_IRQHandler+0x6a0>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d036      	beq.n	8008766 <HAL_DMA_IRQHandler+0x516>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4a7d      	ldr	r2, [pc, #500]	@ (80088f4 <HAL_DMA_IRQHandler+0x6a4>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d031      	beq.n	8008766 <HAL_DMA_IRQHandler+0x516>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4a7c      	ldr	r2, [pc, #496]	@ (80088f8 <HAL_DMA_IRQHandler+0x6a8>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d02c      	beq.n	8008766 <HAL_DMA_IRQHandler+0x516>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4a7a      	ldr	r2, [pc, #488]	@ (80088fc <HAL_DMA_IRQHandler+0x6ac>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d027      	beq.n	8008766 <HAL_DMA_IRQHandler+0x516>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4a79      	ldr	r2, [pc, #484]	@ (8008900 <HAL_DMA_IRQHandler+0x6b0>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d022      	beq.n	8008766 <HAL_DMA_IRQHandler+0x516>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4a77      	ldr	r2, [pc, #476]	@ (8008904 <HAL_DMA_IRQHandler+0x6b4>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d01d      	beq.n	8008766 <HAL_DMA_IRQHandler+0x516>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4a76      	ldr	r2, [pc, #472]	@ (8008908 <HAL_DMA_IRQHandler+0x6b8>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d018      	beq.n	8008766 <HAL_DMA_IRQHandler+0x516>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a74      	ldr	r2, [pc, #464]	@ (800890c <HAL_DMA_IRQHandler+0x6bc>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d013      	beq.n	8008766 <HAL_DMA_IRQHandler+0x516>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4a73      	ldr	r2, [pc, #460]	@ (8008910 <HAL_DMA_IRQHandler+0x6c0>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d00e      	beq.n	8008766 <HAL_DMA_IRQHandler+0x516>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a71      	ldr	r2, [pc, #452]	@ (8008914 <HAL_DMA_IRQHandler+0x6c4>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d009      	beq.n	8008766 <HAL_DMA_IRQHandler+0x516>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4a70      	ldr	r2, [pc, #448]	@ (8008918 <HAL_DMA_IRQHandler+0x6c8>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d004      	beq.n	8008766 <HAL_DMA_IRQHandler+0x516>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4a6e      	ldr	r2, [pc, #440]	@ (800891c <HAL_DMA_IRQHandler+0x6cc>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d10a      	bne.n	800877c <HAL_DMA_IRQHandler+0x52c>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f003 0308 	and.w	r3, r3, #8
 8008770:	2b00      	cmp	r3, #0
 8008772:	bf14      	ite	ne
 8008774:	2301      	movne	r3, #1
 8008776:	2300      	moveq	r3, #0
 8008778:	b2db      	uxtb	r3, r3
 800877a:	e009      	b.n	8008790 <HAL_DMA_IRQHandler+0x540>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f003 0304 	and.w	r3, r3, #4
 8008786:	2b00      	cmp	r3, #0
 8008788:	bf14      	ite	ne
 800878a:	2301      	movne	r3, #1
 800878c:	2300      	moveq	r3, #0
 800878e:	b2db      	uxtb	r3, r3
 8008790:	2b00      	cmp	r3, #0
 8008792:	d03e      	beq.n	8008812 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008798:	f003 031f 	and.w	r3, r3, #31
 800879c:	2210      	movs	r2, #16
 800879e:	409a      	lsls	r2, r3
 80087a0:	6a3b      	ldr	r3, [r7, #32]
 80087a2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d018      	beq.n	80087e4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d108      	bne.n	80087d2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d024      	beq.n	8008812 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	4798      	blx	r3
 80087d0:	e01f      	b.n	8008812 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d01b      	beq.n	8008812 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	4798      	blx	r3
 80087e2:	e016      	b.n	8008812 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d107      	bne.n	8008802 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	681a      	ldr	r2, [r3, #0]
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f022 0208 	bic.w	r2, r2, #8
 8008800:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008806:	2b00      	cmp	r3, #0
 8008808:	d003      	beq.n	8008812 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008816:	f003 031f 	and.w	r3, r3, #31
 800881a:	2220      	movs	r2, #32
 800881c:	409a      	lsls	r2, r3
 800881e:	69bb      	ldr	r3, [r7, #24]
 8008820:	4013      	ands	r3, r2
 8008822:	2b00      	cmp	r3, #0
 8008824:	f000 8110 	beq.w	8008a48 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4a2c      	ldr	r2, [pc, #176]	@ (80088e0 <HAL_DMA_IRQHandler+0x690>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d04a      	beq.n	80088c8 <HAL_DMA_IRQHandler+0x678>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4a2b      	ldr	r2, [pc, #172]	@ (80088e4 <HAL_DMA_IRQHandler+0x694>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d045      	beq.n	80088c8 <HAL_DMA_IRQHandler+0x678>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4a29      	ldr	r2, [pc, #164]	@ (80088e8 <HAL_DMA_IRQHandler+0x698>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d040      	beq.n	80088c8 <HAL_DMA_IRQHandler+0x678>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4a28      	ldr	r2, [pc, #160]	@ (80088ec <HAL_DMA_IRQHandler+0x69c>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d03b      	beq.n	80088c8 <HAL_DMA_IRQHandler+0x678>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	4a26      	ldr	r2, [pc, #152]	@ (80088f0 <HAL_DMA_IRQHandler+0x6a0>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d036      	beq.n	80088c8 <HAL_DMA_IRQHandler+0x678>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	4a25      	ldr	r2, [pc, #148]	@ (80088f4 <HAL_DMA_IRQHandler+0x6a4>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d031      	beq.n	80088c8 <HAL_DMA_IRQHandler+0x678>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4a23      	ldr	r2, [pc, #140]	@ (80088f8 <HAL_DMA_IRQHandler+0x6a8>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d02c      	beq.n	80088c8 <HAL_DMA_IRQHandler+0x678>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	4a22      	ldr	r2, [pc, #136]	@ (80088fc <HAL_DMA_IRQHandler+0x6ac>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d027      	beq.n	80088c8 <HAL_DMA_IRQHandler+0x678>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	4a20      	ldr	r2, [pc, #128]	@ (8008900 <HAL_DMA_IRQHandler+0x6b0>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d022      	beq.n	80088c8 <HAL_DMA_IRQHandler+0x678>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4a1f      	ldr	r2, [pc, #124]	@ (8008904 <HAL_DMA_IRQHandler+0x6b4>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d01d      	beq.n	80088c8 <HAL_DMA_IRQHandler+0x678>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4a1d      	ldr	r2, [pc, #116]	@ (8008908 <HAL_DMA_IRQHandler+0x6b8>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d018      	beq.n	80088c8 <HAL_DMA_IRQHandler+0x678>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	4a1c      	ldr	r2, [pc, #112]	@ (800890c <HAL_DMA_IRQHandler+0x6bc>)
 800889c:	4293      	cmp	r3, r2
 800889e:	d013      	beq.n	80088c8 <HAL_DMA_IRQHandler+0x678>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4a1a      	ldr	r2, [pc, #104]	@ (8008910 <HAL_DMA_IRQHandler+0x6c0>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d00e      	beq.n	80088c8 <HAL_DMA_IRQHandler+0x678>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4a19      	ldr	r2, [pc, #100]	@ (8008914 <HAL_DMA_IRQHandler+0x6c4>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d009      	beq.n	80088c8 <HAL_DMA_IRQHandler+0x678>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	4a17      	ldr	r2, [pc, #92]	@ (8008918 <HAL_DMA_IRQHandler+0x6c8>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d004      	beq.n	80088c8 <HAL_DMA_IRQHandler+0x678>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4a16      	ldr	r2, [pc, #88]	@ (800891c <HAL_DMA_IRQHandler+0x6cc>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d12b      	bne.n	8008920 <HAL_DMA_IRQHandler+0x6d0>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f003 0310 	and.w	r3, r3, #16
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	bf14      	ite	ne
 80088d6:	2301      	movne	r3, #1
 80088d8:	2300      	moveq	r3, #0
 80088da:	b2db      	uxtb	r3, r3
 80088dc:	e02a      	b.n	8008934 <HAL_DMA_IRQHandler+0x6e4>
 80088de:	bf00      	nop
 80088e0:	40020010 	.word	0x40020010
 80088e4:	40020028 	.word	0x40020028
 80088e8:	40020040 	.word	0x40020040
 80088ec:	40020058 	.word	0x40020058
 80088f0:	40020070 	.word	0x40020070
 80088f4:	40020088 	.word	0x40020088
 80088f8:	400200a0 	.word	0x400200a0
 80088fc:	400200b8 	.word	0x400200b8
 8008900:	40020410 	.word	0x40020410
 8008904:	40020428 	.word	0x40020428
 8008908:	40020440 	.word	0x40020440
 800890c:	40020458 	.word	0x40020458
 8008910:	40020470 	.word	0x40020470
 8008914:	40020488 	.word	0x40020488
 8008918:	400204a0 	.word	0x400204a0
 800891c:	400204b8 	.word	0x400204b8
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f003 0302 	and.w	r3, r3, #2
 800892a:	2b00      	cmp	r3, #0
 800892c:	bf14      	ite	ne
 800892e:	2301      	movne	r3, #1
 8008930:	2300      	moveq	r3, #0
 8008932:	b2db      	uxtb	r3, r3
 8008934:	2b00      	cmp	r3, #0
 8008936:	f000 8087 	beq.w	8008a48 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800893e:	f003 031f 	and.w	r3, r3, #31
 8008942:	2220      	movs	r2, #32
 8008944:	409a      	lsls	r2, r3
 8008946:	6a3b      	ldr	r3, [r7, #32]
 8008948:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008950:	b2db      	uxtb	r3, r3
 8008952:	2b04      	cmp	r3, #4
 8008954:	d139      	bne.n	80089ca <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	681a      	ldr	r2, [r3, #0]
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f022 0216 	bic.w	r2, r2, #22
 8008964:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	695a      	ldr	r2, [r3, #20]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008974:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800897a:	2b00      	cmp	r3, #0
 800897c:	d103      	bne.n	8008986 <HAL_DMA_IRQHandler+0x736>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008982:	2b00      	cmp	r3, #0
 8008984:	d007      	beq.n	8008996 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	681a      	ldr	r2, [r3, #0]
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f022 0208 	bic.w	r2, r2, #8
 8008994:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800899a:	f003 031f 	and.w	r3, r3, #31
 800899e:	223f      	movs	r2, #63	@ 0x3f
 80089a0:	409a      	lsls	r2, r3
 80089a2:	6a3b      	ldr	r3, [r7, #32]
 80089a4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2201      	movs	r2, #1
 80089aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2200      	movs	r2, #0
 80089b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	f000 8382 	beq.w	80090c4 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	4798      	blx	r3
          }
          return;
 80089c8:	e37c      	b.n	80090c4 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d018      	beq.n	8008a0a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d108      	bne.n	80089f8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d02c      	beq.n	8008a48 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	4798      	blx	r3
 80089f6:	e027      	b.n	8008a48 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d023      	beq.n	8008a48 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	4798      	blx	r3
 8008a08:	e01e      	b.n	8008a48 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d10f      	bne.n	8008a38 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	681a      	ldr	r2, [r3, #0]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f022 0210 	bic.w	r2, r2, #16
 8008a26:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2200      	movs	r2, #0
 8008a34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d003      	beq.n	8008a48 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	f000 833e 	beq.w	80090ce <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a56:	f003 0301 	and.w	r3, r3, #1
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	f000 8088 	beq.w	8008b70 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2204      	movs	r2, #4
 8008a64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4a89      	ldr	r2, [pc, #548]	@ (8008c94 <HAL_DMA_IRQHandler+0xa44>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d04a      	beq.n	8008b08 <HAL_DMA_IRQHandler+0x8b8>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4a88      	ldr	r2, [pc, #544]	@ (8008c98 <HAL_DMA_IRQHandler+0xa48>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d045      	beq.n	8008b08 <HAL_DMA_IRQHandler+0x8b8>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a86      	ldr	r2, [pc, #536]	@ (8008c9c <HAL_DMA_IRQHandler+0xa4c>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d040      	beq.n	8008b08 <HAL_DMA_IRQHandler+0x8b8>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a85      	ldr	r2, [pc, #532]	@ (8008ca0 <HAL_DMA_IRQHandler+0xa50>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d03b      	beq.n	8008b08 <HAL_DMA_IRQHandler+0x8b8>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4a83      	ldr	r2, [pc, #524]	@ (8008ca4 <HAL_DMA_IRQHandler+0xa54>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d036      	beq.n	8008b08 <HAL_DMA_IRQHandler+0x8b8>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	4a82      	ldr	r2, [pc, #520]	@ (8008ca8 <HAL_DMA_IRQHandler+0xa58>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d031      	beq.n	8008b08 <HAL_DMA_IRQHandler+0x8b8>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4a80      	ldr	r2, [pc, #512]	@ (8008cac <HAL_DMA_IRQHandler+0xa5c>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d02c      	beq.n	8008b08 <HAL_DMA_IRQHandler+0x8b8>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4a7f      	ldr	r2, [pc, #508]	@ (8008cb0 <HAL_DMA_IRQHandler+0xa60>)
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d027      	beq.n	8008b08 <HAL_DMA_IRQHandler+0x8b8>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4a7d      	ldr	r2, [pc, #500]	@ (8008cb4 <HAL_DMA_IRQHandler+0xa64>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d022      	beq.n	8008b08 <HAL_DMA_IRQHandler+0x8b8>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4a7c      	ldr	r2, [pc, #496]	@ (8008cb8 <HAL_DMA_IRQHandler+0xa68>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d01d      	beq.n	8008b08 <HAL_DMA_IRQHandler+0x8b8>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4a7a      	ldr	r2, [pc, #488]	@ (8008cbc <HAL_DMA_IRQHandler+0xa6c>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d018      	beq.n	8008b08 <HAL_DMA_IRQHandler+0x8b8>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	4a79      	ldr	r2, [pc, #484]	@ (8008cc0 <HAL_DMA_IRQHandler+0xa70>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d013      	beq.n	8008b08 <HAL_DMA_IRQHandler+0x8b8>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4a77      	ldr	r2, [pc, #476]	@ (8008cc4 <HAL_DMA_IRQHandler+0xa74>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d00e      	beq.n	8008b08 <HAL_DMA_IRQHandler+0x8b8>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4a76      	ldr	r2, [pc, #472]	@ (8008cc8 <HAL_DMA_IRQHandler+0xa78>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d009      	beq.n	8008b08 <HAL_DMA_IRQHandler+0x8b8>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4a74      	ldr	r2, [pc, #464]	@ (8008ccc <HAL_DMA_IRQHandler+0xa7c>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d004      	beq.n	8008b08 <HAL_DMA_IRQHandler+0x8b8>
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	4a73      	ldr	r2, [pc, #460]	@ (8008cd0 <HAL_DMA_IRQHandler+0xa80>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d108      	bne.n	8008b1a <HAL_DMA_IRQHandler+0x8ca>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	681a      	ldr	r2, [r3, #0]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f022 0201 	bic.w	r2, r2, #1
 8008b16:	601a      	str	r2, [r3, #0]
 8008b18:	e007      	b.n	8008b2a <HAL_DMA_IRQHandler+0x8da>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	681a      	ldr	r2, [r3, #0]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f022 0201 	bic.w	r2, r2, #1
 8008b28:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	3301      	adds	r3, #1
 8008b2e:	60fb      	str	r3, [r7, #12]
 8008b30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b32:	429a      	cmp	r2, r3
 8008b34:	d307      	bcc.n	8008b46 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f003 0301 	and.w	r3, r3, #1
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d1f2      	bne.n	8008b2a <HAL_DMA_IRQHandler+0x8da>
 8008b44:	e000      	b.n	8008b48 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8008b46:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f003 0301 	and.w	r3, r3, #1
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d004      	beq.n	8008b60 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2203      	movs	r2, #3
 8008b5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8008b5e:	e003      	b.n	8008b68 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2201      	movs	r2, #1
 8008b64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	f000 82aa 	beq.w	80090ce <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	4798      	blx	r3
 8008b82:	e2a4      	b.n	80090ce <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	4a52      	ldr	r2, [pc, #328]	@ (8008cd4 <HAL_DMA_IRQHandler+0xa84>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d04a      	beq.n	8008c24 <HAL_DMA_IRQHandler+0x9d4>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	4a51      	ldr	r2, [pc, #324]	@ (8008cd8 <HAL_DMA_IRQHandler+0xa88>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d045      	beq.n	8008c24 <HAL_DMA_IRQHandler+0x9d4>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	4a4f      	ldr	r2, [pc, #316]	@ (8008cdc <HAL_DMA_IRQHandler+0xa8c>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d040      	beq.n	8008c24 <HAL_DMA_IRQHandler+0x9d4>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	4a4e      	ldr	r2, [pc, #312]	@ (8008ce0 <HAL_DMA_IRQHandler+0xa90>)
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d03b      	beq.n	8008c24 <HAL_DMA_IRQHandler+0x9d4>
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	4a4c      	ldr	r2, [pc, #304]	@ (8008ce4 <HAL_DMA_IRQHandler+0xa94>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d036      	beq.n	8008c24 <HAL_DMA_IRQHandler+0x9d4>
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	4a4b      	ldr	r2, [pc, #300]	@ (8008ce8 <HAL_DMA_IRQHandler+0xa98>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d031      	beq.n	8008c24 <HAL_DMA_IRQHandler+0x9d4>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	4a49      	ldr	r2, [pc, #292]	@ (8008cec <HAL_DMA_IRQHandler+0xa9c>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d02c      	beq.n	8008c24 <HAL_DMA_IRQHandler+0x9d4>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	4a48      	ldr	r2, [pc, #288]	@ (8008cf0 <HAL_DMA_IRQHandler+0xaa0>)
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d027      	beq.n	8008c24 <HAL_DMA_IRQHandler+0x9d4>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	4a46      	ldr	r2, [pc, #280]	@ (8008cf4 <HAL_DMA_IRQHandler+0xaa4>)
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d022      	beq.n	8008c24 <HAL_DMA_IRQHandler+0x9d4>
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	4a45      	ldr	r2, [pc, #276]	@ (8008cf8 <HAL_DMA_IRQHandler+0xaa8>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d01d      	beq.n	8008c24 <HAL_DMA_IRQHandler+0x9d4>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4a43      	ldr	r2, [pc, #268]	@ (8008cfc <HAL_DMA_IRQHandler+0xaac>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d018      	beq.n	8008c24 <HAL_DMA_IRQHandler+0x9d4>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	4a42      	ldr	r2, [pc, #264]	@ (8008d00 <HAL_DMA_IRQHandler+0xab0>)
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d013      	beq.n	8008c24 <HAL_DMA_IRQHandler+0x9d4>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	4a40      	ldr	r2, [pc, #256]	@ (8008d04 <HAL_DMA_IRQHandler+0xab4>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d00e      	beq.n	8008c24 <HAL_DMA_IRQHandler+0x9d4>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	4a3f      	ldr	r2, [pc, #252]	@ (8008d08 <HAL_DMA_IRQHandler+0xab8>)
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d009      	beq.n	8008c24 <HAL_DMA_IRQHandler+0x9d4>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	4a3d      	ldr	r2, [pc, #244]	@ (8008d0c <HAL_DMA_IRQHandler+0xabc>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d004      	beq.n	8008c24 <HAL_DMA_IRQHandler+0x9d4>
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	4a3c      	ldr	r2, [pc, #240]	@ (8008d10 <HAL_DMA_IRQHandler+0xac0>)
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d101      	bne.n	8008c28 <HAL_DMA_IRQHandler+0x9d8>
 8008c24:	2301      	movs	r3, #1
 8008c26:	e000      	b.n	8008c2a <HAL_DMA_IRQHandler+0x9da>
 8008c28:	2300      	movs	r3, #0
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	f000 824f 	beq.w	80090ce <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008c3c:	f003 031f 	and.w	r3, r3, #31
 8008c40:	2204      	movs	r2, #4
 8008c42:	409a      	lsls	r2, r3
 8008c44:	697b      	ldr	r3, [r7, #20]
 8008c46:	4013      	ands	r3, r2
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	f000 80dd 	beq.w	8008e08 <HAL_DMA_IRQHandler+0xbb8>
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	f003 0304 	and.w	r3, r3, #4
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	f000 80d7 	beq.w	8008e08 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008c5e:	f003 031f 	and.w	r3, r3, #31
 8008c62:	2204      	movs	r2, #4
 8008c64:	409a      	lsls	r2, r3
 8008c66:	69fb      	ldr	r3, [r7, #28]
 8008c68:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d059      	beq.n	8008d28 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d14a      	bne.n	8008d14 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	f000 8220 	beq.w	80090c8 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008c90:	e21a      	b.n	80090c8 <HAL_DMA_IRQHandler+0xe78>
 8008c92:	bf00      	nop
 8008c94:	40020010 	.word	0x40020010
 8008c98:	40020028 	.word	0x40020028
 8008c9c:	40020040 	.word	0x40020040
 8008ca0:	40020058 	.word	0x40020058
 8008ca4:	40020070 	.word	0x40020070
 8008ca8:	40020088 	.word	0x40020088
 8008cac:	400200a0 	.word	0x400200a0
 8008cb0:	400200b8 	.word	0x400200b8
 8008cb4:	40020410 	.word	0x40020410
 8008cb8:	40020428 	.word	0x40020428
 8008cbc:	40020440 	.word	0x40020440
 8008cc0:	40020458 	.word	0x40020458
 8008cc4:	40020470 	.word	0x40020470
 8008cc8:	40020488 	.word	0x40020488
 8008ccc:	400204a0 	.word	0x400204a0
 8008cd0:	400204b8 	.word	0x400204b8
 8008cd4:	48022c08 	.word	0x48022c08
 8008cd8:	48022c1c 	.word	0x48022c1c
 8008cdc:	48022c30 	.word	0x48022c30
 8008ce0:	48022c44 	.word	0x48022c44
 8008ce4:	48022c58 	.word	0x48022c58
 8008ce8:	48022c6c 	.word	0x48022c6c
 8008cec:	48022c80 	.word	0x48022c80
 8008cf0:	48022c94 	.word	0x48022c94
 8008cf4:	58025408 	.word	0x58025408
 8008cf8:	5802541c 	.word	0x5802541c
 8008cfc:	58025430 	.word	0x58025430
 8008d00:	58025444 	.word	0x58025444
 8008d04:	58025458 	.word	0x58025458
 8008d08:	5802546c 	.word	0x5802546c
 8008d0c:	58025480 	.word	0x58025480
 8008d10:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	f000 81d5 	beq.w	80090c8 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008d26:	e1cf      	b.n	80090c8 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008d28:	693b      	ldr	r3, [r7, #16]
 8008d2a:	f003 0320 	and.w	r3, r3, #32
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d160      	bne.n	8008df4 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	4a7f      	ldr	r2, [pc, #508]	@ (8008f34 <HAL_DMA_IRQHandler+0xce4>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d04a      	beq.n	8008dd2 <HAL_DMA_IRQHandler+0xb82>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4a7d      	ldr	r2, [pc, #500]	@ (8008f38 <HAL_DMA_IRQHandler+0xce8>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d045      	beq.n	8008dd2 <HAL_DMA_IRQHandler+0xb82>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	4a7c      	ldr	r2, [pc, #496]	@ (8008f3c <HAL_DMA_IRQHandler+0xcec>)
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d040      	beq.n	8008dd2 <HAL_DMA_IRQHandler+0xb82>
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4a7a      	ldr	r2, [pc, #488]	@ (8008f40 <HAL_DMA_IRQHandler+0xcf0>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d03b      	beq.n	8008dd2 <HAL_DMA_IRQHandler+0xb82>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	4a79      	ldr	r2, [pc, #484]	@ (8008f44 <HAL_DMA_IRQHandler+0xcf4>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d036      	beq.n	8008dd2 <HAL_DMA_IRQHandler+0xb82>
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4a77      	ldr	r2, [pc, #476]	@ (8008f48 <HAL_DMA_IRQHandler+0xcf8>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d031      	beq.n	8008dd2 <HAL_DMA_IRQHandler+0xb82>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	4a76      	ldr	r2, [pc, #472]	@ (8008f4c <HAL_DMA_IRQHandler+0xcfc>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d02c      	beq.n	8008dd2 <HAL_DMA_IRQHandler+0xb82>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	4a74      	ldr	r2, [pc, #464]	@ (8008f50 <HAL_DMA_IRQHandler+0xd00>)
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d027      	beq.n	8008dd2 <HAL_DMA_IRQHandler+0xb82>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	4a73      	ldr	r2, [pc, #460]	@ (8008f54 <HAL_DMA_IRQHandler+0xd04>)
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d022      	beq.n	8008dd2 <HAL_DMA_IRQHandler+0xb82>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4a71      	ldr	r2, [pc, #452]	@ (8008f58 <HAL_DMA_IRQHandler+0xd08>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d01d      	beq.n	8008dd2 <HAL_DMA_IRQHandler+0xb82>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	4a70      	ldr	r2, [pc, #448]	@ (8008f5c <HAL_DMA_IRQHandler+0xd0c>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d018      	beq.n	8008dd2 <HAL_DMA_IRQHandler+0xb82>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	4a6e      	ldr	r2, [pc, #440]	@ (8008f60 <HAL_DMA_IRQHandler+0xd10>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d013      	beq.n	8008dd2 <HAL_DMA_IRQHandler+0xb82>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	4a6d      	ldr	r2, [pc, #436]	@ (8008f64 <HAL_DMA_IRQHandler+0xd14>)
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d00e      	beq.n	8008dd2 <HAL_DMA_IRQHandler+0xb82>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4a6b      	ldr	r2, [pc, #428]	@ (8008f68 <HAL_DMA_IRQHandler+0xd18>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d009      	beq.n	8008dd2 <HAL_DMA_IRQHandler+0xb82>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	4a6a      	ldr	r2, [pc, #424]	@ (8008f6c <HAL_DMA_IRQHandler+0xd1c>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d004      	beq.n	8008dd2 <HAL_DMA_IRQHandler+0xb82>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	4a68      	ldr	r2, [pc, #416]	@ (8008f70 <HAL_DMA_IRQHandler+0xd20>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d108      	bne.n	8008de4 <HAL_DMA_IRQHandler+0xb94>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	681a      	ldr	r2, [r3, #0]
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f022 0208 	bic.w	r2, r2, #8
 8008de0:	601a      	str	r2, [r3, #0]
 8008de2:	e007      	b.n	8008df4 <HAL_DMA_IRQHandler+0xba4>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	681a      	ldr	r2, [r3, #0]
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f022 0204 	bic.w	r2, r2, #4
 8008df2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	f000 8165 	beq.w	80090c8 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008e06:	e15f      	b.n	80090c8 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008e0c:	f003 031f 	and.w	r3, r3, #31
 8008e10:	2202      	movs	r2, #2
 8008e12:	409a      	lsls	r2, r3
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	4013      	ands	r3, r2
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	f000 80c5 	beq.w	8008fa8 <HAL_DMA_IRQHandler+0xd58>
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	f003 0302 	and.w	r3, r3, #2
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	f000 80bf 	beq.w	8008fa8 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008e2e:	f003 031f 	and.w	r3, r3, #31
 8008e32:	2202      	movs	r2, #2
 8008e34:	409a      	lsls	r2, r3
 8008e36:	69fb      	ldr	r3, [r7, #28]
 8008e38:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d018      	beq.n	8008e76 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008e44:	693b      	ldr	r3, [r7, #16]
 8008e46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d109      	bne.n	8008e62 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	f000 813a 	beq.w	80090cc <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008e60:	e134      	b.n	80090cc <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	f000 8130 	beq.w	80090cc <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008e74:	e12a      	b.n	80090cc <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008e76:	693b      	ldr	r3, [r7, #16]
 8008e78:	f003 0320 	and.w	r3, r3, #32
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	f040 8089 	bne.w	8008f94 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	4a2b      	ldr	r2, [pc, #172]	@ (8008f34 <HAL_DMA_IRQHandler+0xce4>)
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d04a      	beq.n	8008f22 <HAL_DMA_IRQHandler+0xcd2>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	4a29      	ldr	r2, [pc, #164]	@ (8008f38 <HAL_DMA_IRQHandler+0xce8>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d045      	beq.n	8008f22 <HAL_DMA_IRQHandler+0xcd2>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	4a28      	ldr	r2, [pc, #160]	@ (8008f3c <HAL_DMA_IRQHandler+0xcec>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d040      	beq.n	8008f22 <HAL_DMA_IRQHandler+0xcd2>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4a26      	ldr	r2, [pc, #152]	@ (8008f40 <HAL_DMA_IRQHandler+0xcf0>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d03b      	beq.n	8008f22 <HAL_DMA_IRQHandler+0xcd2>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	4a25      	ldr	r2, [pc, #148]	@ (8008f44 <HAL_DMA_IRQHandler+0xcf4>)
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d036      	beq.n	8008f22 <HAL_DMA_IRQHandler+0xcd2>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	4a23      	ldr	r2, [pc, #140]	@ (8008f48 <HAL_DMA_IRQHandler+0xcf8>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d031      	beq.n	8008f22 <HAL_DMA_IRQHandler+0xcd2>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	4a22      	ldr	r2, [pc, #136]	@ (8008f4c <HAL_DMA_IRQHandler+0xcfc>)
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d02c      	beq.n	8008f22 <HAL_DMA_IRQHandler+0xcd2>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4a20      	ldr	r2, [pc, #128]	@ (8008f50 <HAL_DMA_IRQHandler+0xd00>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d027      	beq.n	8008f22 <HAL_DMA_IRQHandler+0xcd2>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	4a1f      	ldr	r2, [pc, #124]	@ (8008f54 <HAL_DMA_IRQHandler+0xd04>)
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d022      	beq.n	8008f22 <HAL_DMA_IRQHandler+0xcd2>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4a1d      	ldr	r2, [pc, #116]	@ (8008f58 <HAL_DMA_IRQHandler+0xd08>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d01d      	beq.n	8008f22 <HAL_DMA_IRQHandler+0xcd2>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4a1c      	ldr	r2, [pc, #112]	@ (8008f5c <HAL_DMA_IRQHandler+0xd0c>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d018      	beq.n	8008f22 <HAL_DMA_IRQHandler+0xcd2>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	4a1a      	ldr	r2, [pc, #104]	@ (8008f60 <HAL_DMA_IRQHandler+0xd10>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d013      	beq.n	8008f22 <HAL_DMA_IRQHandler+0xcd2>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	4a19      	ldr	r2, [pc, #100]	@ (8008f64 <HAL_DMA_IRQHandler+0xd14>)
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d00e      	beq.n	8008f22 <HAL_DMA_IRQHandler+0xcd2>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	4a17      	ldr	r2, [pc, #92]	@ (8008f68 <HAL_DMA_IRQHandler+0xd18>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d009      	beq.n	8008f22 <HAL_DMA_IRQHandler+0xcd2>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	4a16      	ldr	r2, [pc, #88]	@ (8008f6c <HAL_DMA_IRQHandler+0xd1c>)
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d004      	beq.n	8008f22 <HAL_DMA_IRQHandler+0xcd2>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4a14      	ldr	r2, [pc, #80]	@ (8008f70 <HAL_DMA_IRQHandler+0xd20>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d128      	bne.n	8008f74 <HAL_DMA_IRQHandler+0xd24>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	681a      	ldr	r2, [r3, #0]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f022 0214 	bic.w	r2, r2, #20
 8008f30:	601a      	str	r2, [r3, #0]
 8008f32:	e027      	b.n	8008f84 <HAL_DMA_IRQHandler+0xd34>
 8008f34:	40020010 	.word	0x40020010
 8008f38:	40020028 	.word	0x40020028
 8008f3c:	40020040 	.word	0x40020040
 8008f40:	40020058 	.word	0x40020058
 8008f44:	40020070 	.word	0x40020070
 8008f48:	40020088 	.word	0x40020088
 8008f4c:	400200a0 	.word	0x400200a0
 8008f50:	400200b8 	.word	0x400200b8
 8008f54:	40020410 	.word	0x40020410
 8008f58:	40020428 	.word	0x40020428
 8008f5c:	40020440 	.word	0x40020440
 8008f60:	40020458 	.word	0x40020458
 8008f64:	40020470 	.word	0x40020470
 8008f68:	40020488 	.word	0x40020488
 8008f6c:	400204a0 	.word	0x400204a0
 8008f70:	400204b8 	.word	0x400204b8
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	681a      	ldr	r2, [r3, #0]
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f022 020a 	bic.w	r2, r2, #10
 8008f82:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2201      	movs	r2, #1
 8008f88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	f000 8097 	beq.w	80090cc <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008fa6:	e091      	b.n	80090cc <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008fac:	f003 031f 	and.w	r3, r3, #31
 8008fb0:	2208      	movs	r2, #8
 8008fb2:	409a      	lsls	r2, r3
 8008fb4:	697b      	ldr	r3, [r7, #20]
 8008fb6:	4013      	ands	r3, r2
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	f000 8088 	beq.w	80090ce <HAL_DMA_IRQHandler+0xe7e>
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	f003 0308 	and.w	r3, r3, #8
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	f000 8082 	beq.w	80090ce <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	4a41      	ldr	r2, [pc, #260]	@ (80090d4 <HAL_DMA_IRQHandler+0xe84>)
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d04a      	beq.n	800906a <HAL_DMA_IRQHandler+0xe1a>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	4a3f      	ldr	r2, [pc, #252]	@ (80090d8 <HAL_DMA_IRQHandler+0xe88>)
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	d045      	beq.n	800906a <HAL_DMA_IRQHandler+0xe1a>
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	4a3e      	ldr	r2, [pc, #248]	@ (80090dc <HAL_DMA_IRQHandler+0xe8c>)
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d040      	beq.n	800906a <HAL_DMA_IRQHandler+0xe1a>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	4a3c      	ldr	r2, [pc, #240]	@ (80090e0 <HAL_DMA_IRQHandler+0xe90>)
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d03b      	beq.n	800906a <HAL_DMA_IRQHandler+0xe1a>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	4a3b      	ldr	r2, [pc, #236]	@ (80090e4 <HAL_DMA_IRQHandler+0xe94>)
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	d036      	beq.n	800906a <HAL_DMA_IRQHandler+0xe1a>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	4a39      	ldr	r2, [pc, #228]	@ (80090e8 <HAL_DMA_IRQHandler+0xe98>)
 8009002:	4293      	cmp	r3, r2
 8009004:	d031      	beq.n	800906a <HAL_DMA_IRQHandler+0xe1a>
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4a38      	ldr	r2, [pc, #224]	@ (80090ec <HAL_DMA_IRQHandler+0xe9c>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d02c      	beq.n	800906a <HAL_DMA_IRQHandler+0xe1a>
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	4a36      	ldr	r2, [pc, #216]	@ (80090f0 <HAL_DMA_IRQHandler+0xea0>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d027      	beq.n	800906a <HAL_DMA_IRQHandler+0xe1a>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	4a35      	ldr	r2, [pc, #212]	@ (80090f4 <HAL_DMA_IRQHandler+0xea4>)
 8009020:	4293      	cmp	r3, r2
 8009022:	d022      	beq.n	800906a <HAL_DMA_IRQHandler+0xe1a>
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	4a33      	ldr	r2, [pc, #204]	@ (80090f8 <HAL_DMA_IRQHandler+0xea8>)
 800902a:	4293      	cmp	r3, r2
 800902c:	d01d      	beq.n	800906a <HAL_DMA_IRQHandler+0xe1a>
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	4a32      	ldr	r2, [pc, #200]	@ (80090fc <HAL_DMA_IRQHandler+0xeac>)
 8009034:	4293      	cmp	r3, r2
 8009036:	d018      	beq.n	800906a <HAL_DMA_IRQHandler+0xe1a>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	4a30      	ldr	r2, [pc, #192]	@ (8009100 <HAL_DMA_IRQHandler+0xeb0>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d013      	beq.n	800906a <HAL_DMA_IRQHandler+0xe1a>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	4a2f      	ldr	r2, [pc, #188]	@ (8009104 <HAL_DMA_IRQHandler+0xeb4>)
 8009048:	4293      	cmp	r3, r2
 800904a:	d00e      	beq.n	800906a <HAL_DMA_IRQHandler+0xe1a>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	4a2d      	ldr	r2, [pc, #180]	@ (8009108 <HAL_DMA_IRQHandler+0xeb8>)
 8009052:	4293      	cmp	r3, r2
 8009054:	d009      	beq.n	800906a <HAL_DMA_IRQHandler+0xe1a>
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	4a2c      	ldr	r2, [pc, #176]	@ (800910c <HAL_DMA_IRQHandler+0xebc>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d004      	beq.n	800906a <HAL_DMA_IRQHandler+0xe1a>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	4a2a      	ldr	r2, [pc, #168]	@ (8009110 <HAL_DMA_IRQHandler+0xec0>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d108      	bne.n	800907c <HAL_DMA_IRQHandler+0xe2c>
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	681a      	ldr	r2, [r3, #0]
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f022 021c 	bic.w	r2, r2, #28
 8009078:	601a      	str	r2, [r3, #0]
 800907a:	e007      	b.n	800908c <HAL_DMA_IRQHandler+0xe3c>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	681a      	ldr	r2, [r3, #0]
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f022 020e 	bic.w	r2, r2, #14
 800908a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009090:	f003 031f 	and.w	r3, r3, #31
 8009094:	2201      	movs	r2, #1
 8009096:	409a      	lsls	r2, r3
 8009098:	69fb      	ldr	r3, [r7, #28]
 800909a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2201      	movs	r2, #1
 80090a0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2201      	movs	r2, #1
 80090a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2200      	movs	r2, #0
 80090ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d009      	beq.n	80090ce <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	4798      	blx	r3
 80090c2:	e004      	b.n	80090ce <HAL_DMA_IRQHandler+0xe7e>
          return;
 80090c4:	bf00      	nop
 80090c6:	e002      	b.n	80090ce <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80090c8:	bf00      	nop
 80090ca:	e000      	b.n	80090ce <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80090cc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80090ce:	3728      	adds	r7, #40	@ 0x28
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}
 80090d4:	40020010 	.word	0x40020010
 80090d8:	40020028 	.word	0x40020028
 80090dc:	40020040 	.word	0x40020040
 80090e0:	40020058 	.word	0x40020058
 80090e4:	40020070 	.word	0x40020070
 80090e8:	40020088 	.word	0x40020088
 80090ec:	400200a0 	.word	0x400200a0
 80090f0:	400200b8 	.word	0x400200b8
 80090f4:	40020410 	.word	0x40020410
 80090f8:	40020428 	.word	0x40020428
 80090fc:	40020440 	.word	0x40020440
 8009100:	40020458 	.word	0x40020458
 8009104:	40020470 	.word	0x40020470
 8009108:	40020488 	.word	0x40020488
 800910c:	400204a0 	.word	0x400204a0
 8009110:	400204b8 	.word	0x400204b8

08009114 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8009114:	b480      	push	{r7}
 8009116:	b083      	sub	sp, #12
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8009120:	4618      	mov	r0, r3
 8009122:	370c      	adds	r7, #12
 8009124:	46bd      	mov	sp, r7
 8009126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912a:	4770      	bx	lr

0800912c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800912c:	b480      	push	{r7}
 800912e:	b087      	sub	sp, #28
 8009130:	af00      	add	r7, sp, #0
 8009132:	60f8      	str	r0, [r7, #12]
 8009134:	60b9      	str	r1, [r7, #8]
 8009136:	607a      	str	r2, [r7, #4]
 8009138:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800913e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009144:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	4a7f      	ldr	r2, [pc, #508]	@ (8009348 <DMA_SetConfig+0x21c>)
 800914c:	4293      	cmp	r3, r2
 800914e:	d072      	beq.n	8009236 <DMA_SetConfig+0x10a>
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4a7d      	ldr	r2, [pc, #500]	@ (800934c <DMA_SetConfig+0x220>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d06d      	beq.n	8009236 <DMA_SetConfig+0x10a>
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	4a7c      	ldr	r2, [pc, #496]	@ (8009350 <DMA_SetConfig+0x224>)
 8009160:	4293      	cmp	r3, r2
 8009162:	d068      	beq.n	8009236 <DMA_SetConfig+0x10a>
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	4a7a      	ldr	r2, [pc, #488]	@ (8009354 <DMA_SetConfig+0x228>)
 800916a:	4293      	cmp	r3, r2
 800916c:	d063      	beq.n	8009236 <DMA_SetConfig+0x10a>
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	4a79      	ldr	r2, [pc, #484]	@ (8009358 <DMA_SetConfig+0x22c>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d05e      	beq.n	8009236 <DMA_SetConfig+0x10a>
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	4a77      	ldr	r2, [pc, #476]	@ (800935c <DMA_SetConfig+0x230>)
 800917e:	4293      	cmp	r3, r2
 8009180:	d059      	beq.n	8009236 <DMA_SetConfig+0x10a>
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	4a76      	ldr	r2, [pc, #472]	@ (8009360 <DMA_SetConfig+0x234>)
 8009188:	4293      	cmp	r3, r2
 800918a:	d054      	beq.n	8009236 <DMA_SetConfig+0x10a>
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4a74      	ldr	r2, [pc, #464]	@ (8009364 <DMA_SetConfig+0x238>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d04f      	beq.n	8009236 <DMA_SetConfig+0x10a>
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	4a73      	ldr	r2, [pc, #460]	@ (8009368 <DMA_SetConfig+0x23c>)
 800919c:	4293      	cmp	r3, r2
 800919e:	d04a      	beq.n	8009236 <DMA_SetConfig+0x10a>
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	4a71      	ldr	r2, [pc, #452]	@ (800936c <DMA_SetConfig+0x240>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d045      	beq.n	8009236 <DMA_SetConfig+0x10a>
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	4a70      	ldr	r2, [pc, #448]	@ (8009370 <DMA_SetConfig+0x244>)
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d040      	beq.n	8009236 <DMA_SetConfig+0x10a>
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	4a6e      	ldr	r2, [pc, #440]	@ (8009374 <DMA_SetConfig+0x248>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d03b      	beq.n	8009236 <DMA_SetConfig+0x10a>
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	4a6d      	ldr	r2, [pc, #436]	@ (8009378 <DMA_SetConfig+0x24c>)
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d036      	beq.n	8009236 <DMA_SetConfig+0x10a>
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4a6b      	ldr	r2, [pc, #428]	@ (800937c <DMA_SetConfig+0x250>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d031      	beq.n	8009236 <DMA_SetConfig+0x10a>
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	4a6a      	ldr	r2, [pc, #424]	@ (8009380 <DMA_SetConfig+0x254>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d02c      	beq.n	8009236 <DMA_SetConfig+0x10a>
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4a68      	ldr	r2, [pc, #416]	@ (8009384 <DMA_SetConfig+0x258>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d027      	beq.n	8009236 <DMA_SetConfig+0x10a>
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	4a67      	ldr	r2, [pc, #412]	@ (8009388 <DMA_SetConfig+0x25c>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d022      	beq.n	8009236 <DMA_SetConfig+0x10a>
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4a65      	ldr	r2, [pc, #404]	@ (800938c <DMA_SetConfig+0x260>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d01d      	beq.n	8009236 <DMA_SetConfig+0x10a>
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	4a64      	ldr	r2, [pc, #400]	@ (8009390 <DMA_SetConfig+0x264>)
 8009200:	4293      	cmp	r3, r2
 8009202:	d018      	beq.n	8009236 <DMA_SetConfig+0x10a>
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4a62      	ldr	r2, [pc, #392]	@ (8009394 <DMA_SetConfig+0x268>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d013      	beq.n	8009236 <DMA_SetConfig+0x10a>
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	4a61      	ldr	r2, [pc, #388]	@ (8009398 <DMA_SetConfig+0x26c>)
 8009214:	4293      	cmp	r3, r2
 8009216:	d00e      	beq.n	8009236 <DMA_SetConfig+0x10a>
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	4a5f      	ldr	r2, [pc, #380]	@ (800939c <DMA_SetConfig+0x270>)
 800921e:	4293      	cmp	r3, r2
 8009220:	d009      	beq.n	8009236 <DMA_SetConfig+0x10a>
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	4a5e      	ldr	r2, [pc, #376]	@ (80093a0 <DMA_SetConfig+0x274>)
 8009228:	4293      	cmp	r3, r2
 800922a:	d004      	beq.n	8009236 <DMA_SetConfig+0x10a>
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	4a5c      	ldr	r2, [pc, #368]	@ (80093a4 <DMA_SetConfig+0x278>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d101      	bne.n	800923a <DMA_SetConfig+0x10e>
 8009236:	2301      	movs	r3, #1
 8009238:	e000      	b.n	800923c <DMA_SetConfig+0x110>
 800923a:	2300      	movs	r3, #0
 800923c:	2b00      	cmp	r3, #0
 800923e:	d00d      	beq.n	800925c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009244:	68fa      	ldr	r2, [r7, #12]
 8009246:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8009248:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800924e:	2b00      	cmp	r3, #0
 8009250:	d004      	beq.n	800925c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009256:	68fa      	ldr	r2, [r7, #12]
 8009258:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800925a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4a39      	ldr	r2, [pc, #228]	@ (8009348 <DMA_SetConfig+0x21c>)
 8009262:	4293      	cmp	r3, r2
 8009264:	d04a      	beq.n	80092fc <DMA_SetConfig+0x1d0>
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	4a38      	ldr	r2, [pc, #224]	@ (800934c <DMA_SetConfig+0x220>)
 800926c:	4293      	cmp	r3, r2
 800926e:	d045      	beq.n	80092fc <DMA_SetConfig+0x1d0>
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4a36      	ldr	r2, [pc, #216]	@ (8009350 <DMA_SetConfig+0x224>)
 8009276:	4293      	cmp	r3, r2
 8009278:	d040      	beq.n	80092fc <DMA_SetConfig+0x1d0>
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	4a35      	ldr	r2, [pc, #212]	@ (8009354 <DMA_SetConfig+0x228>)
 8009280:	4293      	cmp	r3, r2
 8009282:	d03b      	beq.n	80092fc <DMA_SetConfig+0x1d0>
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	4a33      	ldr	r2, [pc, #204]	@ (8009358 <DMA_SetConfig+0x22c>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d036      	beq.n	80092fc <DMA_SetConfig+0x1d0>
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	4a32      	ldr	r2, [pc, #200]	@ (800935c <DMA_SetConfig+0x230>)
 8009294:	4293      	cmp	r3, r2
 8009296:	d031      	beq.n	80092fc <DMA_SetConfig+0x1d0>
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	4a30      	ldr	r2, [pc, #192]	@ (8009360 <DMA_SetConfig+0x234>)
 800929e:	4293      	cmp	r3, r2
 80092a0:	d02c      	beq.n	80092fc <DMA_SetConfig+0x1d0>
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	4a2f      	ldr	r2, [pc, #188]	@ (8009364 <DMA_SetConfig+0x238>)
 80092a8:	4293      	cmp	r3, r2
 80092aa:	d027      	beq.n	80092fc <DMA_SetConfig+0x1d0>
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	4a2d      	ldr	r2, [pc, #180]	@ (8009368 <DMA_SetConfig+0x23c>)
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d022      	beq.n	80092fc <DMA_SetConfig+0x1d0>
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	4a2c      	ldr	r2, [pc, #176]	@ (800936c <DMA_SetConfig+0x240>)
 80092bc:	4293      	cmp	r3, r2
 80092be:	d01d      	beq.n	80092fc <DMA_SetConfig+0x1d0>
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	4a2a      	ldr	r2, [pc, #168]	@ (8009370 <DMA_SetConfig+0x244>)
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d018      	beq.n	80092fc <DMA_SetConfig+0x1d0>
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	4a29      	ldr	r2, [pc, #164]	@ (8009374 <DMA_SetConfig+0x248>)
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d013      	beq.n	80092fc <DMA_SetConfig+0x1d0>
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	4a27      	ldr	r2, [pc, #156]	@ (8009378 <DMA_SetConfig+0x24c>)
 80092da:	4293      	cmp	r3, r2
 80092dc:	d00e      	beq.n	80092fc <DMA_SetConfig+0x1d0>
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	4a26      	ldr	r2, [pc, #152]	@ (800937c <DMA_SetConfig+0x250>)
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d009      	beq.n	80092fc <DMA_SetConfig+0x1d0>
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	4a24      	ldr	r2, [pc, #144]	@ (8009380 <DMA_SetConfig+0x254>)
 80092ee:	4293      	cmp	r3, r2
 80092f0:	d004      	beq.n	80092fc <DMA_SetConfig+0x1d0>
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	4a23      	ldr	r2, [pc, #140]	@ (8009384 <DMA_SetConfig+0x258>)
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d101      	bne.n	8009300 <DMA_SetConfig+0x1d4>
 80092fc:	2301      	movs	r3, #1
 80092fe:	e000      	b.n	8009302 <DMA_SetConfig+0x1d6>
 8009300:	2300      	movs	r3, #0
 8009302:	2b00      	cmp	r3, #0
 8009304:	d059      	beq.n	80093ba <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800930a:	f003 031f 	and.w	r3, r3, #31
 800930e:	223f      	movs	r2, #63	@ 0x3f
 8009310:	409a      	lsls	r2, r3
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	681a      	ldr	r2, [r3, #0]
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8009324:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	683a      	ldr	r2, [r7, #0]
 800932c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	689b      	ldr	r3, [r3, #8]
 8009332:	2b40      	cmp	r3, #64	@ 0x40
 8009334:	d138      	bne.n	80093a8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	687a      	ldr	r2, [r7, #4]
 800933c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	68ba      	ldr	r2, [r7, #8]
 8009344:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8009346:	e0ae      	b.n	80094a6 <DMA_SetConfig+0x37a>
 8009348:	40020010 	.word	0x40020010
 800934c:	40020028 	.word	0x40020028
 8009350:	40020040 	.word	0x40020040
 8009354:	40020058 	.word	0x40020058
 8009358:	40020070 	.word	0x40020070
 800935c:	40020088 	.word	0x40020088
 8009360:	400200a0 	.word	0x400200a0
 8009364:	400200b8 	.word	0x400200b8
 8009368:	40020410 	.word	0x40020410
 800936c:	40020428 	.word	0x40020428
 8009370:	40020440 	.word	0x40020440
 8009374:	40020458 	.word	0x40020458
 8009378:	40020470 	.word	0x40020470
 800937c:	40020488 	.word	0x40020488
 8009380:	400204a0 	.word	0x400204a0
 8009384:	400204b8 	.word	0x400204b8
 8009388:	58025408 	.word	0x58025408
 800938c:	5802541c 	.word	0x5802541c
 8009390:	58025430 	.word	0x58025430
 8009394:	58025444 	.word	0x58025444
 8009398:	58025458 	.word	0x58025458
 800939c:	5802546c 	.word	0x5802546c
 80093a0:	58025480 	.word	0x58025480
 80093a4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	68ba      	ldr	r2, [r7, #8]
 80093ae:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	687a      	ldr	r2, [r7, #4]
 80093b6:	60da      	str	r2, [r3, #12]
}
 80093b8:	e075      	b.n	80094a6 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	4a3d      	ldr	r2, [pc, #244]	@ (80094b4 <DMA_SetConfig+0x388>)
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d04a      	beq.n	800945a <DMA_SetConfig+0x32e>
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	4a3b      	ldr	r2, [pc, #236]	@ (80094b8 <DMA_SetConfig+0x38c>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d045      	beq.n	800945a <DMA_SetConfig+0x32e>
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	4a3a      	ldr	r2, [pc, #232]	@ (80094bc <DMA_SetConfig+0x390>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d040      	beq.n	800945a <DMA_SetConfig+0x32e>
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	4a38      	ldr	r2, [pc, #224]	@ (80094c0 <DMA_SetConfig+0x394>)
 80093de:	4293      	cmp	r3, r2
 80093e0:	d03b      	beq.n	800945a <DMA_SetConfig+0x32e>
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4a37      	ldr	r2, [pc, #220]	@ (80094c4 <DMA_SetConfig+0x398>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d036      	beq.n	800945a <DMA_SetConfig+0x32e>
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4a35      	ldr	r2, [pc, #212]	@ (80094c8 <DMA_SetConfig+0x39c>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d031      	beq.n	800945a <DMA_SetConfig+0x32e>
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	4a34      	ldr	r2, [pc, #208]	@ (80094cc <DMA_SetConfig+0x3a0>)
 80093fc:	4293      	cmp	r3, r2
 80093fe:	d02c      	beq.n	800945a <DMA_SetConfig+0x32e>
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	4a32      	ldr	r2, [pc, #200]	@ (80094d0 <DMA_SetConfig+0x3a4>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d027      	beq.n	800945a <DMA_SetConfig+0x32e>
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	4a31      	ldr	r2, [pc, #196]	@ (80094d4 <DMA_SetConfig+0x3a8>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d022      	beq.n	800945a <DMA_SetConfig+0x32e>
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	4a2f      	ldr	r2, [pc, #188]	@ (80094d8 <DMA_SetConfig+0x3ac>)
 800941a:	4293      	cmp	r3, r2
 800941c:	d01d      	beq.n	800945a <DMA_SetConfig+0x32e>
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	4a2e      	ldr	r2, [pc, #184]	@ (80094dc <DMA_SetConfig+0x3b0>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d018      	beq.n	800945a <DMA_SetConfig+0x32e>
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	4a2c      	ldr	r2, [pc, #176]	@ (80094e0 <DMA_SetConfig+0x3b4>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d013      	beq.n	800945a <DMA_SetConfig+0x32e>
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	4a2b      	ldr	r2, [pc, #172]	@ (80094e4 <DMA_SetConfig+0x3b8>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d00e      	beq.n	800945a <DMA_SetConfig+0x32e>
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	4a29      	ldr	r2, [pc, #164]	@ (80094e8 <DMA_SetConfig+0x3bc>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d009      	beq.n	800945a <DMA_SetConfig+0x32e>
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4a28      	ldr	r2, [pc, #160]	@ (80094ec <DMA_SetConfig+0x3c0>)
 800944c:	4293      	cmp	r3, r2
 800944e:	d004      	beq.n	800945a <DMA_SetConfig+0x32e>
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	4a26      	ldr	r2, [pc, #152]	@ (80094f0 <DMA_SetConfig+0x3c4>)
 8009456:	4293      	cmp	r3, r2
 8009458:	d101      	bne.n	800945e <DMA_SetConfig+0x332>
 800945a:	2301      	movs	r3, #1
 800945c:	e000      	b.n	8009460 <DMA_SetConfig+0x334>
 800945e:	2300      	movs	r3, #0
 8009460:	2b00      	cmp	r3, #0
 8009462:	d020      	beq.n	80094a6 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009468:	f003 031f 	and.w	r3, r3, #31
 800946c:	2201      	movs	r2, #1
 800946e:	409a      	lsls	r2, r3
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	683a      	ldr	r2, [r7, #0]
 800947a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	689b      	ldr	r3, [r3, #8]
 8009480:	2b40      	cmp	r3, #64	@ 0x40
 8009482:	d108      	bne.n	8009496 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	687a      	ldr	r2, [r7, #4]
 800948a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	68ba      	ldr	r2, [r7, #8]
 8009492:	60da      	str	r2, [r3, #12]
}
 8009494:	e007      	b.n	80094a6 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	68ba      	ldr	r2, [r7, #8]
 800949c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	687a      	ldr	r2, [r7, #4]
 80094a4:	60da      	str	r2, [r3, #12]
}
 80094a6:	bf00      	nop
 80094a8:	371c      	adds	r7, #28
 80094aa:	46bd      	mov	sp, r7
 80094ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b0:	4770      	bx	lr
 80094b2:	bf00      	nop
 80094b4:	48022c08 	.word	0x48022c08
 80094b8:	48022c1c 	.word	0x48022c1c
 80094bc:	48022c30 	.word	0x48022c30
 80094c0:	48022c44 	.word	0x48022c44
 80094c4:	48022c58 	.word	0x48022c58
 80094c8:	48022c6c 	.word	0x48022c6c
 80094cc:	48022c80 	.word	0x48022c80
 80094d0:	48022c94 	.word	0x48022c94
 80094d4:	58025408 	.word	0x58025408
 80094d8:	5802541c 	.word	0x5802541c
 80094dc:	58025430 	.word	0x58025430
 80094e0:	58025444 	.word	0x58025444
 80094e4:	58025458 	.word	0x58025458
 80094e8:	5802546c 	.word	0x5802546c
 80094ec:	58025480 	.word	0x58025480
 80094f0:	58025494 	.word	0x58025494

080094f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b085      	sub	sp, #20
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	4a42      	ldr	r2, [pc, #264]	@ (800960c <DMA_CalcBaseAndBitshift+0x118>)
 8009502:	4293      	cmp	r3, r2
 8009504:	d04a      	beq.n	800959c <DMA_CalcBaseAndBitshift+0xa8>
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	4a41      	ldr	r2, [pc, #260]	@ (8009610 <DMA_CalcBaseAndBitshift+0x11c>)
 800950c:	4293      	cmp	r3, r2
 800950e:	d045      	beq.n	800959c <DMA_CalcBaseAndBitshift+0xa8>
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	4a3f      	ldr	r2, [pc, #252]	@ (8009614 <DMA_CalcBaseAndBitshift+0x120>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d040      	beq.n	800959c <DMA_CalcBaseAndBitshift+0xa8>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	4a3e      	ldr	r2, [pc, #248]	@ (8009618 <DMA_CalcBaseAndBitshift+0x124>)
 8009520:	4293      	cmp	r3, r2
 8009522:	d03b      	beq.n	800959c <DMA_CalcBaseAndBitshift+0xa8>
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	4a3c      	ldr	r2, [pc, #240]	@ (800961c <DMA_CalcBaseAndBitshift+0x128>)
 800952a:	4293      	cmp	r3, r2
 800952c:	d036      	beq.n	800959c <DMA_CalcBaseAndBitshift+0xa8>
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	4a3b      	ldr	r2, [pc, #236]	@ (8009620 <DMA_CalcBaseAndBitshift+0x12c>)
 8009534:	4293      	cmp	r3, r2
 8009536:	d031      	beq.n	800959c <DMA_CalcBaseAndBitshift+0xa8>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	4a39      	ldr	r2, [pc, #228]	@ (8009624 <DMA_CalcBaseAndBitshift+0x130>)
 800953e:	4293      	cmp	r3, r2
 8009540:	d02c      	beq.n	800959c <DMA_CalcBaseAndBitshift+0xa8>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	4a38      	ldr	r2, [pc, #224]	@ (8009628 <DMA_CalcBaseAndBitshift+0x134>)
 8009548:	4293      	cmp	r3, r2
 800954a:	d027      	beq.n	800959c <DMA_CalcBaseAndBitshift+0xa8>
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	4a36      	ldr	r2, [pc, #216]	@ (800962c <DMA_CalcBaseAndBitshift+0x138>)
 8009552:	4293      	cmp	r3, r2
 8009554:	d022      	beq.n	800959c <DMA_CalcBaseAndBitshift+0xa8>
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	4a35      	ldr	r2, [pc, #212]	@ (8009630 <DMA_CalcBaseAndBitshift+0x13c>)
 800955c:	4293      	cmp	r3, r2
 800955e:	d01d      	beq.n	800959c <DMA_CalcBaseAndBitshift+0xa8>
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	4a33      	ldr	r2, [pc, #204]	@ (8009634 <DMA_CalcBaseAndBitshift+0x140>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d018      	beq.n	800959c <DMA_CalcBaseAndBitshift+0xa8>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	4a32      	ldr	r2, [pc, #200]	@ (8009638 <DMA_CalcBaseAndBitshift+0x144>)
 8009570:	4293      	cmp	r3, r2
 8009572:	d013      	beq.n	800959c <DMA_CalcBaseAndBitshift+0xa8>
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	4a30      	ldr	r2, [pc, #192]	@ (800963c <DMA_CalcBaseAndBitshift+0x148>)
 800957a:	4293      	cmp	r3, r2
 800957c:	d00e      	beq.n	800959c <DMA_CalcBaseAndBitshift+0xa8>
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	4a2f      	ldr	r2, [pc, #188]	@ (8009640 <DMA_CalcBaseAndBitshift+0x14c>)
 8009584:	4293      	cmp	r3, r2
 8009586:	d009      	beq.n	800959c <DMA_CalcBaseAndBitshift+0xa8>
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	4a2d      	ldr	r2, [pc, #180]	@ (8009644 <DMA_CalcBaseAndBitshift+0x150>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d004      	beq.n	800959c <DMA_CalcBaseAndBitshift+0xa8>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	4a2c      	ldr	r2, [pc, #176]	@ (8009648 <DMA_CalcBaseAndBitshift+0x154>)
 8009598:	4293      	cmp	r3, r2
 800959a:	d101      	bne.n	80095a0 <DMA_CalcBaseAndBitshift+0xac>
 800959c:	2301      	movs	r3, #1
 800959e:	e000      	b.n	80095a2 <DMA_CalcBaseAndBitshift+0xae>
 80095a0:	2300      	movs	r3, #0
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d024      	beq.n	80095f0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	b2db      	uxtb	r3, r3
 80095ac:	3b10      	subs	r3, #16
 80095ae:	4a27      	ldr	r2, [pc, #156]	@ (800964c <DMA_CalcBaseAndBitshift+0x158>)
 80095b0:	fba2 2303 	umull	r2, r3, r2, r3
 80095b4:	091b      	lsrs	r3, r3, #4
 80095b6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	f003 0307 	and.w	r3, r3, #7
 80095be:	4a24      	ldr	r2, [pc, #144]	@ (8009650 <DMA_CalcBaseAndBitshift+0x15c>)
 80095c0:	5cd3      	ldrb	r3, [r2, r3]
 80095c2:	461a      	mov	r2, r3
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	2b03      	cmp	r3, #3
 80095cc:	d908      	bls.n	80095e0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	461a      	mov	r2, r3
 80095d4:	4b1f      	ldr	r3, [pc, #124]	@ (8009654 <DMA_CalcBaseAndBitshift+0x160>)
 80095d6:	4013      	ands	r3, r2
 80095d8:	1d1a      	adds	r2, r3, #4
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	659a      	str	r2, [r3, #88]	@ 0x58
 80095de:	e00d      	b.n	80095fc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	461a      	mov	r2, r3
 80095e6:	4b1b      	ldr	r3, [pc, #108]	@ (8009654 <DMA_CalcBaseAndBitshift+0x160>)
 80095e8:	4013      	ands	r3, r2
 80095ea:	687a      	ldr	r2, [r7, #4]
 80095ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80095ee:	e005      	b.n	80095fc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8009600:	4618      	mov	r0, r3
 8009602:	3714      	adds	r7, #20
 8009604:	46bd      	mov	sp, r7
 8009606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960a:	4770      	bx	lr
 800960c:	40020010 	.word	0x40020010
 8009610:	40020028 	.word	0x40020028
 8009614:	40020040 	.word	0x40020040
 8009618:	40020058 	.word	0x40020058
 800961c:	40020070 	.word	0x40020070
 8009620:	40020088 	.word	0x40020088
 8009624:	400200a0 	.word	0x400200a0
 8009628:	400200b8 	.word	0x400200b8
 800962c:	40020410 	.word	0x40020410
 8009630:	40020428 	.word	0x40020428
 8009634:	40020440 	.word	0x40020440
 8009638:	40020458 	.word	0x40020458
 800963c:	40020470 	.word	0x40020470
 8009640:	40020488 	.word	0x40020488
 8009644:	400204a0 	.word	0x400204a0
 8009648:	400204b8 	.word	0x400204b8
 800964c:	aaaaaaab 	.word	0xaaaaaaab
 8009650:	08019de4 	.word	0x08019de4
 8009654:	fffffc00 	.word	0xfffffc00

08009658 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009658:	b480      	push	{r7}
 800965a:	b085      	sub	sp, #20
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009660:	2300      	movs	r3, #0
 8009662:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	699b      	ldr	r3, [r3, #24]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d120      	bne.n	80096ae <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009670:	2b03      	cmp	r3, #3
 8009672:	d858      	bhi.n	8009726 <DMA_CheckFifoParam+0xce>
 8009674:	a201      	add	r2, pc, #4	@ (adr r2, 800967c <DMA_CheckFifoParam+0x24>)
 8009676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800967a:	bf00      	nop
 800967c:	0800968d 	.word	0x0800968d
 8009680:	0800969f 	.word	0x0800969f
 8009684:	0800968d 	.word	0x0800968d
 8009688:	08009727 	.word	0x08009727
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009690:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009694:	2b00      	cmp	r3, #0
 8009696:	d048      	beq.n	800972a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8009698:	2301      	movs	r3, #1
 800969a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800969c:	e045      	b.n	800972a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096a2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80096a6:	d142      	bne.n	800972e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80096a8:	2301      	movs	r3, #1
 80096aa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80096ac:	e03f      	b.n	800972e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	699b      	ldr	r3, [r3, #24]
 80096b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80096b6:	d123      	bne.n	8009700 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096bc:	2b03      	cmp	r3, #3
 80096be:	d838      	bhi.n	8009732 <DMA_CheckFifoParam+0xda>
 80096c0:	a201      	add	r2, pc, #4	@ (adr r2, 80096c8 <DMA_CheckFifoParam+0x70>)
 80096c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096c6:	bf00      	nop
 80096c8:	080096d9 	.word	0x080096d9
 80096cc:	080096df 	.word	0x080096df
 80096d0:	080096d9 	.word	0x080096d9
 80096d4:	080096f1 	.word	0x080096f1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80096d8:	2301      	movs	r3, #1
 80096da:	73fb      	strb	r3, [r7, #15]
        break;
 80096dc:	e030      	b.n	8009740 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096e2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d025      	beq.n	8009736 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80096ea:	2301      	movs	r3, #1
 80096ec:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80096ee:	e022      	b.n	8009736 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096f4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80096f8:	d11f      	bne.n	800973a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80096fa:	2301      	movs	r3, #1
 80096fc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80096fe:	e01c      	b.n	800973a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009704:	2b02      	cmp	r3, #2
 8009706:	d902      	bls.n	800970e <DMA_CheckFifoParam+0xb6>
 8009708:	2b03      	cmp	r3, #3
 800970a:	d003      	beq.n	8009714 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800970c:	e018      	b.n	8009740 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800970e:	2301      	movs	r3, #1
 8009710:	73fb      	strb	r3, [r7, #15]
        break;
 8009712:	e015      	b.n	8009740 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009718:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800971c:	2b00      	cmp	r3, #0
 800971e:	d00e      	beq.n	800973e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8009720:	2301      	movs	r3, #1
 8009722:	73fb      	strb	r3, [r7, #15]
    break;
 8009724:	e00b      	b.n	800973e <DMA_CheckFifoParam+0xe6>
        break;
 8009726:	bf00      	nop
 8009728:	e00a      	b.n	8009740 <DMA_CheckFifoParam+0xe8>
        break;
 800972a:	bf00      	nop
 800972c:	e008      	b.n	8009740 <DMA_CheckFifoParam+0xe8>
        break;
 800972e:	bf00      	nop
 8009730:	e006      	b.n	8009740 <DMA_CheckFifoParam+0xe8>
        break;
 8009732:	bf00      	nop
 8009734:	e004      	b.n	8009740 <DMA_CheckFifoParam+0xe8>
        break;
 8009736:	bf00      	nop
 8009738:	e002      	b.n	8009740 <DMA_CheckFifoParam+0xe8>
        break;
 800973a:	bf00      	nop
 800973c:	e000      	b.n	8009740 <DMA_CheckFifoParam+0xe8>
    break;
 800973e:	bf00      	nop
    }
  }

  return status;
 8009740:	7bfb      	ldrb	r3, [r7, #15]
}
 8009742:	4618      	mov	r0, r3
 8009744:	3714      	adds	r7, #20
 8009746:	46bd      	mov	sp, r7
 8009748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974c:	4770      	bx	lr
 800974e:	bf00      	nop

08009750 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009750:	b480      	push	{r7}
 8009752:	b085      	sub	sp, #20
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	4a38      	ldr	r2, [pc, #224]	@ (8009844 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8009764:	4293      	cmp	r3, r2
 8009766:	d022      	beq.n	80097ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4a36      	ldr	r2, [pc, #216]	@ (8009848 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d01d      	beq.n	80097ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	4a35      	ldr	r2, [pc, #212]	@ (800984c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8009778:	4293      	cmp	r3, r2
 800977a:	d018      	beq.n	80097ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	4a33      	ldr	r2, [pc, #204]	@ (8009850 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8009782:	4293      	cmp	r3, r2
 8009784:	d013      	beq.n	80097ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	4a32      	ldr	r2, [pc, #200]	@ (8009854 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800978c:	4293      	cmp	r3, r2
 800978e:	d00e      	beq.n	80097ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	4a30      	ldr	r2, [pc, #192]	@ (8009858 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8009796:	4293      	cmp	r3, r2
 8009798:	d009      	beq.n	80097ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	4a2f      	ldr	r2, [pc, #188]	@ (800985c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80097a0:	4293      	cmp	r3, r2
 80097a2:	d004      	beq.n	80097ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	4a2d      	ldr	r2, [pc, #180]	@ (8009860 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80097aa:	4293      	cmp	r3, r2
 80097ac:	d101      	bne.n	80097b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80097ae:	2301      	movs	r3, #1
 80097b0:	e000      	b.n	80097b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80097b2:	2300      	movs	r3, #0
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d01a      	beq.n	80097ee <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	b2db      	uxtb	r3, r3
 80097be:	3b08      	subs	r3, #8
 80097c0:	4a28      	ldr	r2, [pc, #160]	@ (8009864 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80097c2:	fba2 2303 	umull	r2, r3, r2, r3
 80097c6:	091b      	lsrs	r3, r3, #4
 80097c8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80097ca:	68fa      	ldr	r2, [r7, #12]
 80097cc:	4b26      	ldr	r3, [pc, #152]	@ (8009868 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80097ce:	4413      	add	r3, r2
 80097d0:	009b      	lsls	r3, r3, #2
 80097d2:	461a      	mov	r2, r3
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	4a24      	ldr	r2, [pc, #144]	@ (800986c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80097dc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	f003 031f 	and.w	r3, r3, #31
 80097e4:	2201      	movs	r2, #1
 80097e6:	409a      	lsls	r2, r3
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80097ec:	e024      	b.n	8009838 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	b2db      	uxtb	r3, r3
 80097f4:	3b10      	subs	r3, #16
 80097f6:	4a1e      	ldr	r2, [pc, #120]	@ (8009870 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80097f8:	fba2 2303 	umull	r2, r3, r2, r3
 80097fc:	091b      	lsrs	r3, r3, #4
 80097fe:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	4a1c      	ldr	r2, [pc, #112]	@ (8009874 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8009804:	4293      	cmp	r3, r2
 8009806:	d806      	bhi.n	8009816 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	4a1b      	ldr	r2, [pc, #108]	@ (8009878 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800980c:	4293      	cmp	r3, r2
 800980e:	d902      	bls.n	8009816 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	3308      	adds	r3, #8
 8009814:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8009816:	68fa      	ldr	r2, [r7, #12]
 8009818:	4b18      	ldr	r3, [pc, #96]	@ (800987c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800981a:	4413      	add	r3, r2
 800981c:	009b      	lsls	r3, r3, #2
 800981e:	461a      	mov	r2, r3
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	4a16      	ldr	r2, [pc, #88]	@ (8009880 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8009828:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	f003 031f 	and.w	r3, r3, #31
 8009830:	2201      	movs	r2, #1
 8009832:	409a      	lsls	r2, r3
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009838:	bf00      	nop
 800983a:	3714      	adds	r7, #20
 800983c:	46bd      	mov	sp, r7
 800983e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009842:	4770      	bx	lr
 8009844:	58025408 	.word	0x58025408
 8009848:	5802541c 	.word	0x5802541c
 800984c:	58025430 	.word	0x58025430
 8009850:	58025444 	.word	0x58025444
 8009854:	58025458 	.word	0x58025458
 8009858:	5802546c 	.word	0x5802546c
 800985c:	58025480 	.word	0x58025480
 8009860:	58025494 	.word	0x58025494
 8009864:	cccccccd 	.word	0xcccccccd
 8009868:	16009600 	.word	0x16009600
 800986c:	58025880 	.word	0x58025880
 8009870:	aaaaaaab 	.word	0xaaaaaaab
 8009874:	400204b8 	.word	0x400204b8
 8009878:	4002040f 	.word	0x4002040f
 800987c:	10008200 	.word	0x10008200
 8009880:	40020880 	.word	0x40020880

08009884 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009884:	b480      	push	{r7}
 8009886:	b085      	sub	sp, #20
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	685b      	ldr	r3, [r3, #4]
 8009890:	b2db      	uxtb	r3, r3
 8009892:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d04a      	beq.n	8009930 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	2b08      	cmp	r3, #8
 800989e:	d847      	bhi.n	8009930 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	4a25      	ldr	r2, [pc, #148]	@ (800993c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d022      	beq.n	80098f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	4a24      	ldr	r2, [pc, #144]	@ (8009940 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80098b0:	4293      	cmp	r3, r2
 80098b2:	d01d      	beq.n	80098f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	4a22      	ldr	r2, [pc, #136]	@ (8009944 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80098ba:	4293      	cmp	r3, r2
 80098bc:	d018      	beq.n	80098f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	4a21      	ldr	r2, [pc, #132]	@ (8009948 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80098c4:	4293      	cmp	r3, r2
 80098c6:	d013      	beq.n	80098f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	4a1f      	ldr	r2, [pc, #124]	@ (800994c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d00e      	beq.n	80098f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	4a1e      	ldr	r2, [pc, #120]	@ (8009950 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80098d8:	4293      	cmp	r3, r2
 80098da:	d009      	beq.n	80098f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	4a1c      	ldr	r2, [pc, #112]	@ (8009954 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80098e2:	4293      	cmp	r3, r2
 80098e4:	d004      	beq.n	80098f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	4a1b      	ldr	r2, [pc, #108]	@ (8009958 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d101      	bne.n	80098f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80098f0:	2301      	movs	r3, #1
 80098f2:	e000      	b.n	80098f6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80098f4:	2300      	movs	r3, #0
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d00a      	beq.n	8009910 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80098fa:	68fa      	ldr	r2, [r7, #12]
 80098fc:	4b17      	ldr	r3, [pc, #92]	@ (800995c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80098fe:	4413      	add	r3, r2
 8009900:	009b      	lsls	r3, r3, #2
 8009902:	461a      	mov	r2, r3
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	4a15      	ldr	r2, [pc, #84]	@ (8009960 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800990c:	671a      	str	r2, [r3, #112]	@ 0x70
 800990e:	e009      	b.n	8009924 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009910:	68fa      	ldr	r2, [r7, #12]
 8009912:	4b14      	ldr	r3, [pc, #80]	@ (8009964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8009914:	4413      	add	r3, r2
 8009916:	009b      	lsls	r3, r3, #2
 8009918:	461a      	mov	r2, r3
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	4a11      	ldr	r2, [pc, #68]	@ (8009968 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8009922:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	3b01      	subs	r3, #1
 8009928:	2201      	movs	r2, #1
 800992a:	409a      	lsls	r2, r3
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8009930:	bf00      	nop
 8009932:	3714      	adds	r7, #20
 8009934:	46bd      	mov	sp, r7
 8009936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993a:	4770      	bx	lr
 800993c:	58025408 	.word	0x58025408
 8009940:	5802541c 	.word	0x5802541c
 8009944:	58025430 	.word	0x58025430
 8009948:	58025444 	.word	0x58025444
 800994c:	58025458 	.word	0x58025458
 8009950:	5802546c 	.word	0x5802546c
 8009954:	58025480 	.word	0x58025480
 8009958:	58025494 	.word	0x58025494
 800995c:	1600963f 	.word	0x1600963f
 8009960:	58025940 	.word	0x58025940
 8009964:	1000823f 	.word	0x1000823f
 8009968:	40020940 	.word	0x40020940

0800996c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b098      	sub	sp, #96	@ 0x60
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8009974:	4a84      	ldr	r2, [pc, #528]	@ (8009b88 <HAL_FDCAN_Init+0x21c>)
 8009976:	f107 030c 	add.w	r3, r7, #12
 800997a:	4611      	mov	r1, r2
 800997c:	224c      	movs	r2, #76	@ 0x4c
 800997e:	4618      	mov	r0, r3
 8009980:	f00e fa1b 	bl	8017dba <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d101      	bne.n	800998e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800998a:	2301      	movs	r3, #1
 800998c:	e1c6      	b.n	8009d1c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	4a7e      	ldr	r2, [pc, #504]	@ (8009b8c <HAL_FDCAN_Init+0x220>)
 8009994:	4293      	cmp	r3, r2
 8009996:	d106      	bne.n	80099a6 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80099a0:	461a      	mov	r2, r3
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80099ac:	b2db      	uxtb	r3, r3
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d106      	bne.n	80099c0 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2200      	movs	r2, #0
 80099b6:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	f7f8 fb0a 	bl	8001fd4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	699a      	ldr	r2, [r3, #24]
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f022 0210 	bic.w	r2, r2, #16
 80099ce:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80099d0:	f7fc ff5a 	bl	8006888 <HAL_GetTick>
 80099d4:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80099d6:	e014      	b.n	8009a02 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80099d8:	f7fc ff56 	bl	8006888 <HAL_GetTick>
 80099dc:	4602      	mov	r2, r0
 80099de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80099e0:	1ad3      	subs	r3, r2, r3
 80099e2:	2b0a      	cmp	r3, #10
 80099e4:	d90d      	bls.n	8009a02 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80099ec:	f043 0201 	orr.w	r2, r3, #1
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2203      	movs	r2, #3
 80099fa:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80099fe:	2301      	movs	r3, #1
 8009a00:	e18c      	b.n	8009d1c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	699b      	ldr	r3, [r3, #24]
 8009a08:	f003 0308 	and.w	r3, r3, #8
 8009a0c:	2b08      	cmp	r3, #8
 8009a0e:	d0e3      	beq.n	80099d8 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	699a      	ldr	r2, [r3, #24]
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f042 0201 	orr.w	r2, r2, #1
 8009a1e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009a20:	f7fc ff32 	bl	8006888 <HAL_GetTick>
 8009a24:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8009a26:	e014      	b.n	8009a52 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8009a28:	f7fc ff2e 	bl	8006888 <HAL_GetTick>
 8009a2c:	4602      	mov	r2, r0
 8009a2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009a30:	1ad3      	subs	r3, r2, r3
 8009a32:	2b0a      	cmp	r3, #10
 8009a34:	d90d      	bls.n	8009a52 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009a3c:	f043 0201 	orr.w	r2, r3, #1
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2203      	movs	r2, #3
 8009a4a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8009a4e:	2301      	movs	r3, #1
 8009a50:	e164      	b.n	8009d1c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	699b      	ldr	r3, [r3, #24]
 8009a58:	f003 0301 	and.w	r3, r3, #1
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d0e3      	beq.n	8009a28 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	699a      	ldr	r2, [r3, #24]
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f042 0202 	orr.w	r2, r2, #2
 8009a6e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	7c1b      	ldrb	r3, [r3, #16]
 8009a74:	2b01      	cmp	r3, #1
 8009a76:	d108      	bne.n	8009a8a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	699a      	ldr	r2, [r3, #24]
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009a86:	619a      	str	r2, [r3, #24]
 8009a88:	e007      	b.n	8009a9a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	699a      	ldr	r2, [r3, #24]
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009a98:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	7c5b      	ldrb	r3, [r3, #17]
 8009a9e:	2b01      	cmp	r3, #1
 8009aa0:	d108      	bne.n	8009ab4 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	699a      	ldr	r2, [r3, #24]
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009ab0:	619a      	str	r2, [r3, #24]
 8009ab2:	e007      	b.n	8009ac4 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	699a      	ldr	r2, [r3, #24]
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009ac2:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	7c9b      	ldrb	r3, [r3, #18]
 8009ac8:	2b01      	cmp	r3, #1
 8009aca:	d108      	bne.n	8009ade <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	699a      	ldr	r2, [r3, #24]
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009ada:	619a      	str	r2, [r3, #24]
 8009adc:	e007      	b.n	8009aee <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	699a      	ldr	r2, [r3, #24]
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009aec:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	699b      	ldr	r3, [r3, #24]
 8009af4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	689a      	ldr	r2, [r3, #8]
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	430a      	orrs	r2, r1
 8009b02:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	699a      	ldr	r2, [r3, #24]
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8009b12:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	691a      	ldr	r2, [r3, #16]
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f022 0210 	bic.w	r2, r2, #16
 8009b22:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	68db      	ldr	r3, [r3, #12]
 8009b28:	2b01      	cmp	r3, #1
 8009b2a:	d108      	bne.n	8009b3e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	699a      	ldr	r2, [r3, #24]
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f042 0204 	orr.w	r2, r2, #4
 8009b3a:	619a      	str	r2, [r3, #24]
 8009b3c:	e030      	b.n	8009ba0 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	68db      	ldr	r3, [r3, #12]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d02c      	beq.n	8009ba0 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	68db      	ldr	r3, [r3, #12]
 8009b4a:	2b02      	cmp	r3, #2
 8009b4c:	d020      	beq.n	8009b90 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	699a      	ldr	r2, [r3, #24]
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009b5c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	691a      	ldr	r2, [r3, #16]
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f042 0210 	orr.w	r2, r2, #16
 8009b6c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	68db      	ldr	r3, [r3, #12]
 8009b72:	2b03      	cmp	r3, #3
 8009b74:	d114      	bne.n	8009ba0 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	699a      	ldr	r2, [r3, #24]
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f042 0220 	orr.w	r2, r2, #32
 8009b84:	619a      	str	r2, [r3, #24]
 8009b86:	e00b      	b.n	8009ba0 <HAL_FDCAN_Init+0x234>
 8009b88:	08019d80 	.word	0x08019d80
 8009b8c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	699a      	ldr	r2, [r3, #24]
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	f042 0220 	orr.w	r2, r2, #32
 8009b9e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	699b      	ldr	r3, [r3, #24]
 8009ba4:	3b01      	subs	r3, #1
 8009ba6:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	69db      	ldr	r3, [r3, #28]
 8009bac:	3b01      	subs	r3, #1
 8009bae:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8009bb0:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6a1b      	ldr	r3, [r3, #32]
 8009bb6:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8009bb8:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	695b      	ldr	r3, [r3, #20]
 8009bc0:	3b01      	subs	r3, #1
 8009bc2:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8009bc8:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8009bca:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	689b      	ldr	r3, [r3, #8]
 8009bd0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009bd4:	d115      	bne.n	8009c02 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bda:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009be0:	3b01      	subs	r3, #1
 8009be2:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8009be4:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bea:	3b01      	subs	r3, #1
 8009bec:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8009bee:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bf6:	3b01      	subs	r3, #1
 8009bf8:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8009bfe:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8009c00:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d00a      	beq.n	8009c20 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	430a      	orrs	r2, r1
 8009c1c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c28:	4413      	add	r3, r2
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d011      	beq.n	8009c52 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8009c36:	f023 0107 	bic.w	r1, r3, #7
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009c3e:	009b      	lsls	r3, r3, #2
 8009c40:	3360      	adds	r3, #96	@ 0x60
 8009c42:	443b      	add	r3, r7
 8009c44:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	430a      	orrs	r2, r1
 8009c4e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d011      	beq.n	8009c7e <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009c62:	f023 0107 	bic.w	r1, r3, #7
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c6a:	009b      	lsls	r3, r3, #2
 8009c6c:	3360      	adds	r3, #96	@ 0x60
 8009c6e:	443b      	add	r3, r7
 8009c70:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	430a      	orrs	r2, r1
 8009c7a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d012      	beq.n	8009cac <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009c8e:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009c96:	009b      	lsls	r3, r3, #2
 8009c98:	3360      	adds	r3, #96	@ 0x60
 8009c9a:	443b      	add	r3, r7
 8009c9c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8009ca0:	011a      	lsls	r2, r3, #4
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	430a      	orrs	r2, r1
 8009ca8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d012      	beq.n	8009cda <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009cbc:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009cc4:	009b      	lsls	r3, r3, #2
 8009cc6:	3360      	adds	r3, #96	@ 0x60
 8009cc8:	443b      	add	r3, r7
 8009cca:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8009cce:	021a      	lsls	r2, r3, #8
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	430a      	orrs	r2, r1
 8009cd6:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	4a11      	ldr	r2, [pc, #68]	@ (8009d24 <HAL_FDCAN_Init+0x3b8>)
 8009ce0:	4293      	cmp	r3, r2
 8009ce2:	d107      	bne.n	8009cf4 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	685b      	ldr	r3, [r3, #4]
 8009ce8:	689a      	ldr	r2, [r3, #8]
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	685b      	ldr	r3, [r3, #4]
 8009cee:	f022 0203 	bic.w	r2, r2, #3
 8009cf2:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2200      	movs	r2, #0
 8009d00:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2201      	movs	r2, #1
 8009d08:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f000 f80b 	bl	8009d28 <FDCAN_CalcultateRamBlockAddresses>
 8009d12:	4603      	mov	r3, r0
 8009d14:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8009d18:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	3760      	adds	r7, #96	@ 0x60
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}
 8009d24:	4000a000 	.word	0x4000a000

08009d28 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b085      	sub	sp, #20
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d34:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8009d3e:	4ba7      	ldr	r3, [pc, #668]	@ (8009fdc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8009d40:	4013      	ands	r3, r2
 8009d42:	68ba      	ldr	r2, [r7, #8]
 8009d44:	0091      	lsls	r1, r2, #2
 8009d46:	687a      	ldr	r2, [r7, #4]
 8009d48:	6812      	ldr	r2, [r2, #0]
 8009d4a:	430b      	orrs	r3, r1
 8009d4c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d58:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d60:	041a      	lsls	r2, r3, #16
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	430a      	orrs	r2, r1
 8009d68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d70:	68ba      	ldr	r2, [r7, #8]
 8009d72:	4413      	add	r3, r2
 8009d74:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8009d7e:	4b97      	ldr	r3, [pc, #604]	@ (8009fdc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8009d80:	4013      	ands	r3, r2
 8009d82:	68ba      	ldr	r2, [r7, #8]
 8009d84:	0091      	lsls	r1, r2, #2
 8009d86:	687a      	ldr	r2, [r7, #4]
 8009d88:	6812      	ldr	r2, [r2, #0]
 8009d8a:	430b      	orrs	r3, r1
 8009d8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d98:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009da0:	041a      	lsls	r2, r3, #16
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	430a      	orrs	r2, r1
 8009da8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009db0:	005b      	lsls	r3, r3, #1
 8009db2:	68ba      	ldr	r2, [r7, #8]
 8009db4:	4413      	add	r3, r2
 8009db6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8009dc0:	4b86      	ldr	r3, [pc, #536]	@ (8009fdc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8009dc2:	4013      	ands	r3, r2
 8009dc4:	68ba      	ldr	r2, [r7, #8]
 8009dc6:	0091      	lsls	r1, r2, #2
 8009dc8:	687a      	ldr	r2, [r7, #4]
 8009dca:	6812      	ldr	r2, [r2, #0]
 8009dcc:	430b      	orrs	r3, r1
 8009dce:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009dda:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009de2:	041a      	lsls	r2, r3, #16
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	430a      	orrs	r2, r1
 8009dea:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009df2:	687a      	ldr	r2, [r7, #4]
 8009df4:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8009df6:	fb02 f303 	mul.w	r3, r2, r3
 8009dfa:	68ba      	ldr	r2, [r7, #8]
 8009dfc:	4413      	add	r3, r2
 8009dfe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8009e08:	4b74      	ldr	r3, [pc, #464]	@ (8009fdc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8009e0a:	4013      	ands	r3, r2
 8009e0c:	68ba      	ldr	r2, [r7, #8]
 8009e0e:	0091      	lsls	r1, r2, #2
 8009e10:	687a      	ldr	r2, [r7, #4]
 8009e12:	6812      	ldr	r2, [r2, #0]
 8009e14:	430b      	orrs	r3, r1
 8009e16:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009e22:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009e2a:	041a      	lsls	r2, r3, #16
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	430a      	orrs	r2, r1
 8009e32:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009e3a:	687a      	ldr	r2, [r7, #4]
 8009e3c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8009e3e:	fb02 f303 	mul.w	r3, r2, r3
 8009e42:	68ba      	ldr	r2, [r7, #8]
 8009e44:	4413      	add	r3, r2
 8009e46:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8009e50:	4b62      	ldr	r3, [pc, #392]	@ (8009fdc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8009e52:	4013      	ands	r3, r2
 8009e54:	68ba      	ldr	r2, [r7, #8]
 8009e56:	0091      	lsls	r1, r2, #2
 8009e58:	687a      	ldr	r2, [r7, #4]
 8009e5a:	6812      	ldr	r2, [r2, #0]
 8009e5c:	430b      	orrs	r3, r1
 8009e5e:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e66:	687a      	ldr	r2, [r7, #4]
 8009e68:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8009e6a:	fb02 f303 	mul.w	r3, r2, r3
 8009e6e:	68ba      	ldr	r2, [r7, #8]
 8009e70:	4413      	add	r3, r2
 8009e72:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8009e7c:	4b57      	ldr	r3, [pc, #348]	@ (8009fdc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8009e7e:	4013      	ands	r3, r2
 8009e80:	68ba      	ldr	r2, [r7, #8]
 8009e82:	0091      	lsls	r1, r2, #2
 8009e84:	687a      	ldr	r2, [r7, #4]
 8009e86:	6812      	ldr	r2, [r2, #0]
 8009e88:	430b      	orrs	r3, r1
 8009e8a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009e96:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e9e:	041a      	lsls	r2, r3, #16
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	430a      	orrs	r2, r1
 8009ea6:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009eae:	005b      	lsls	r3, r3, #1
 8009eb0:	68ba      	ldr	r2, [r7, #8]
 8009eb2:	4413      	add	r3, r2
 8009eb4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8009ebe:	4b47      	ldr	r3, [pc, #284]	@ (8009fdc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8009ec0:	4013      	ands	r3, r2
 8009ec2:	68ba      	ldr	r2, [r7, #8]
 8009ec4:	0091      	lsls	r1, r2, #2
 8009ec6:	687a      	ldr	r2, [r7, #4]
 8009ec8:	6812      	ldr	r2, [r2, #0]
 8009eca:	430b      	orrs	r3, r1
 8009ecc:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009ed8:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009ee0:	041a      	lsls	r2, r3, #16
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	430a      	orrs	r2, r1
 8009ee8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009ef4:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009efc:	061a      	lsls	r2, r3, #24
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	430a      	orrs	r2, r1
 8009f04:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f0c:	4b34      	ldr	r3, [pc, #208]	@ (8009fe0 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8009f0e:	4413      	add	r3, r2
 8009f10:	009a      	lsls	r2, r3, #2
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f1e:	009b      	lsls	r3, r3, #2
 8009f20:	441a      	add	r2, r3
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f2e:	00db      	lsls	r3, r3, #3
 8009f30:	441a      	add	r2, r3
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f3e:	6879      	ldr	r1, [r7, #4]
 8009f40:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8009f42:	fb01 f303 	mul.w	r3, r1, r3
 8009f46:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8009f48:	441a      	add	r2, r3
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009f56:	6879      	ldr	r1, [r7, #4]
 8009f58:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8009f5a:	fb01 f303 	mul.w	r3, r1, r3
 8009f5e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8009f60:	441a      	add	r2, r3
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f6e:	6879      	ldr	r1, [r7, #4]
 8009f70:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8009f72:	fb01 f303 	mul.w	r3, r1, r3
 8009f76:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8009f78:	441a      	add	r2, r3
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f8a:	00db      	lsls	r3, r3, #3
 8009f8c:	441a      	add	r2, r3
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009f9e:	6879      	ldr	r1, [r7, #4]
 8009fa0:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8009fa2:	fb01 f303 	mul.w	r3, r1, r3
 8009fa6:	009b      	lsls	r3, r3, #2
 8009fa8:	441a      	add	r2, r3
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009fba:	6879      	ldr	r1, [r7, #4]
 8009fbc:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8009fbe:	fb01 f303 	mul.w	r3, r1, r3
 8009fc2:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8009fc4:	441a      	add	r2, r3
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009fd2:	4a04      	ldr	r2, [pc, #16]	@ (8009fe4 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8009fd4:	4293      	cmp	r3, r2
 8009fd6:	d915      	bls.n	800a004 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8009fd8:	e006      	b.n	8009fe8 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8009fda:	bf00      	nop
 8009fdc:	ffff0003 	.word	0xffff0003
 8009fe0:	10002b00 	.word	0x10002b00
 8009fe4:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009fee:	f043 0220 	orr.w	r2, r3, #32
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2203      	movs	r2, #3
 8009ffc:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 800a000:	2301      	movs	r3, #1
 800a002:	e010      	b.n	800a026 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a008:	60fb      	str	r3, [r7, #12]
 800a00a:	e005      	b.n	800a018 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	2200      	movs	r2, #0
 800a010:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	3304      	adds	r3, #4
 800a016:	60fb      	str	r3, [r7, #12]
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a01e:	68fa      	ldr	r2, [r7, #12]
 800a020:	429a      	cmp	r2, r3
 800a022:	d3f3      	bcc.n	800a00c <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 800a024:	2300      	movs	r3, #0
}
 800a026:	4618      	mov	r0, r3
 800a028:	3714      	adds	r7, #20
 800a02a:	46bd      	mov	sp, r7
 800a02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a030:	4770      	bx	lr
 800a032:	bf00      	nop

0800a034 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a034:	b480      	push	{r7}
 800a036:	b089      	sub	sp, #36	@ 0x24
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
 800a03c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a03e:	2300      	movs	r3, #0
 800a040:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800a042:	4b89      	ldr	r3, [pc, #548]	@ (800a268 <HAL_GPIO_Init+0x234>)
 800a044:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a046:	e194      	b.n	800a372 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	681a      	ldr	r2, [r3, #0]
 800a04c:	2101      	movs	r1, #1
 800a04e:	69fb      	ldr	r3, [r7, #28]
 800a050:	fa01 f303 	lsl.w	r3, r1, r3
 800a054:	4013      	ands	r3, r2
 800a056:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800a058:	693b      	ldr	r3, [r7, #16]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	f000 8186 	beq.w	800a36c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	685b      	ldr	r3, [r3, #4]
 800a064:	f003 0303 	and.w	r3, r3, #3
 800a068:	2b01      	cmp	r3, #1
 800a06a:	d005      	beq.n	800a078 <HAL_GPIO_Init+0x44>
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	685b      	ldr	r3, [r3, #4]
 800a070:	f003 0303 	and.w	r3, r3, #3
 800a074:	2b02      	cmp	r3, #2
 800a076:	d130      	bne.n	800a0da <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	689b      	ldr	r3, [r3, #8]
 800a07c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a07e:	69fb      	ldr	r3, [r7, #28]
 800a080:	005b      	lsls	r3, r3, #1
 800a082:	2203      	movs	r2, #3
 800a084:	fa02 f303 	lsl.w	r3, r2, r3
 800a088:	43db      	mvns	r3, r3
 800a08a:	69ba      	ldr	r2, [r7, #24]
 800a08c:	4013      	ands	r3, r2
 800a08e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	68da      	ldr	r2, [r3, #12]
 800a094:	69fb      	ldr	r3, [r7, #28]
 800a096:	005b      	lsls	r3, r3, #1
 800a098:	fa02 f303 	lsl.w	r3, r2, r3
 800a09c:	69ba      	ldr	r2, [r7, #24]
 800a09e:	4313      	orrs	r3, r2
 800a0a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	69ba      	ldr	r2, [r7, #24]
 800a0a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	685b      	ldr	r3, [r3, #4]
 800a0ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a0ae:	2201      	movs	r2, #1
 800a0b0:	69fb      	ldr	r3, [r7, #28]
 800a0b2:	fa02 f303 	lsl.w	r3, r2, r3
 800a0b6:	43db      	mvns	r3, r3
 800a0b8:	69ba      	ldr	r2, [r7, #24]
 800a0ba:	4013      	ands	r3, r2
 800a0bc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	685b      	ldr	r3, [r3, #4]
 800a0c2:	091b      	lsrs	r3, r3, #4
 800a0c4:	f003 0201 	and.w	r2, r3, #1
 800a0c8:	69fb      	ldr	r3, [r7, #28]
 800a0ca:	fa02 f303 	lsl.w	r3, r2, r3
 800a0ce:	69ba      	ldr	r2, [r7, #24]
 800a0d0:	4313      	orrs	r3, r2
 800a0d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	69ba      	ldr	r2, [r7, #24]
 800a0d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	685b      	ldr	r3, [r3, #4]
 800a0de:	f003 0303 	and.w	r3, r3, #3
 800a0e2:	2b03      	cmp	r3, #3
 800a0e4:	d017      	beq.n	800a116 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	68db      	ldr	r3, [r3, #12]
 800a0ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a0ec:	69fb      	ldr	r3, [r7, #28]
 800a0ee:	005b      	lsls	r3, r3, #1
 800a0f0:	2203      	movs	r2, #3
 800a0f2:	fa02 f303 	lsl.w	r3, r2, r3
 800a0f6:	43db      	mvns	r3, r3
 800a0f8:	69ba      	ldr	r2, [r7, #24]
 800a0fa:	4013      	ands	r3, r2
 800a0fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	689a      	ldr	r2, [r3, #8]
 800a102:	69fb      	ldr	r3, [r7, #28]
 800a104:	005b      	lsls	r3, r3, #1
 800a106:	fa02 f303 	lsl.w	r3, r2, r3
 800a10a:	69ba      	ldr	r2, [r7, #24]
 800a10c:	4313      	orrs	r3, r2
 800a10e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	69ba      	ldr	r2, [r7, #24]
 800a114:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	685b      	ldr	r3, [r3, #4]
 800a11a:	f003 0303 	and.w	r3, r3, #3
 800a11e:	2b02      	cmp	r3, #2
 800a120:	d123      	bne.n	800a16a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a122:	69fb      	ldr	r3, [r7, #28]
 800a124:	08da      	lsrs	r2, r3, #3
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	3208      	adds	r2, #8
 800a12a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a12e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a130:	69fb      	ldr	r3, [r7, #28]
 800a132:	f003 0307 	and.w	r3, r3, #7
 800a136:	009b      	lsls	r3, r3, #2
 800a138:	220f      	movs	r2, #15
 800a13a:	fa02 f303 	lsl.w	r3, r2, r3
 800a13e:	43db      	mvns	r3, r3
 800a140:	69ba      	ldr	r2, [r7, #24]
 800a142:	4013      	ands	r3, r2
 800a144:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	691a      	ldr	r2, [r3, #16]
 800a14a:	69fb      	ldr	r3, [r7, #28]
 800a14c:	f003 0307 	and.w	r3, r3, #7
 800a150:	009b      	lsls	r3, r3, #2
 800a152:	fa02 f303 	lsl.w	r3, r2, r3
 800a156:	69ba      	ldr	r2, [r7, #24]
 800a158:	4313      	orrs	r3, r2
 800a15a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a15c:	69fb      	ldr	r3, [r7, #28]
 800a15e:	08da      	lsrs	r2, r3, #3
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	3208      	adds	r2, #8
 800a164:	69b9      	ldr	r1, [r7, #24]
 800a166:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a170:	69fb      	ldr	r3, [r7, #28]
 800a172:	005b      	lsls	r3, r3, #1
 800a174:	2203      	movs	r2, #3
 800a176:	fa02 f303 	lsl.w	r3, r2, r3
 800a17a:	43db      	mvns	r3, r3
 800a17c:	69ba      	ldr	r2, [r7, #24]
 800a17e:	4013      	ands	r3, r2
 800a180:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	685b      	ldr	r3, [r3, #4]
 800a186:	f003 0203 	and.w	r2, r3, #3
 800a18a:	69fb      	ldr	r3, [r7, #28]
 800a18c:	005b      	lsls	r3, r3, #1
 800a18e:	fa02 f303 	lsl.w	r3, r2, r3
 800a192:	69ba      	ldr	r2, [r7, #24]
 800a194:	4313      	orrs	r3, r2
 800a196:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	69ba      	ldr	r2, [r7, #24]
 800a19c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	685b      	ldr	r3, [r3, #4]
 800a1a2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	f000 80e0 	beq.w	800a36c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a1ac:	4b2f      	ldr	r3, [pc, #188]	@ (800a26c <HAL_GPIO_Init+0x238>)
 800a1ae:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800a1b2:	4a2e      	ldr	r2, [pc, #184]	@ (800a26c <HAL_GPIO_Init+0x238>)
 800a1b4:	f043 0302 	orr.w	r3, r3, #2
 800a1b8:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 800a1bc:	4b2b      	ldr	r3, [pc, #172]	@ (800a26c <HAL_GPIO_Init+0x238>)
 800a1be:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800a1c2:	f003 0302 	and.w	r3, r3, #2
 800a1c6:	60fb      	str	r3, [r7, #12]
 800a1c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a1ca:	4a29      	ldr	r2, [pc, #164]	@ (800a270 <HAL_GPIO_Init+0x23c>)
 800a1cc:	69fb      	ldr	r3, [r7, #28]
 800a1ce:	089b      	lsrs	r3, r3, #2
 800a1d0:	3302      	adds	r3, #2
 800a1d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a1d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a1d8:	69fb      	ldr	r3, [r7, #28]
 800a1da:	f003 0303 	and.w	r3, r3, #3
 800a1de:	009b      	lsls	r3, r3, #2
 800a1e0:	220f      	movs	r2, #15
 800a1e2:	fa02 f303 	lsl.w	r3, r2, r3
 800a1e6:	43db      	mvns	r3, r3
 800a1e8:	69ba      	ldr	r2, [r7, #24]
 800a1ea:	4013      	ands	r3, r2
 800a1ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	4a20      	ldr	r2, [pc, #128]	@ (800a274 <HAL_GPIO_Init+0x240>)
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	d052      	beq.n	800a29c <HAL_GPIO_Init+0x268>
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	4a1f      	ldr	r2, [pc, #124]	@ (800a278 <HAL_GPIO_Init+0x244>)
 800a1fa:	4293      	cmp	r3, r2
 800a1fc:	d031      	beq.n	800a262 <HAL_GPIO_Init+0x22e>
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	4a1e      	ldr	r2, [pc, #120]	@ (800a27c <HAL_GPIO_Init+0x248>)
 800a202:	4293      	cmp	r3, r2
 800a204:	d02b      	beq.n	800a25e <HAL_GPIO_Init+0x22a>
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	4a1d      	ldr	r2, [pc, #116]	@ (800a280 <HAL_GPIO_Init+0x24c>)
 800a20a:	4293      	cmp	r3, r2
 800a20c:	d025      	beq.n	800a25a <HAL_GPIO_Init+0x226>
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	4a1c      	ldr	r2, [pc, #112]	@ (800a284 <HAL_GPIO_Init+0x250>)
 800a212:	4293      	cmp	r3, r2
 800a214:	d01f      	beq.n	800a256 <HAL_GPIO_Init+0x222>
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	4a1b      	ldr	r2, [pc, #108]	@ (800a288 <HAL_GPIO_Init+0x254>)
 800a21a:	4293      	cmp	r3, r2
 800a21c:	d019      	beq.n	800a252 <HAL_GPIO_Init+0x21e>
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	4a1a      	ldr	r2, [pc, #104]	@ (800a28c <HAL_GPIO_Init+0x258>)
 800a222:	4293      	cmp	r3, r2
 800a224:	d013      	beq.n	800a24e <HAL_GPIO_Init+0x21a>
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	4a19      	ldr	r2, [pc, #100]	@ (800a290 <HAL_GPIO_Init+0x25c>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d00d      	beq.n	800a24a <HAL_GPIO_Init+0x216>
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	4a18      	ldr	r2, [pc, #96]	@ (800a294 <HAL_GPIO_Init+0x260>)
 800a232:	4293      	cmp	r3, r2
 800a234:	d007      	beq.n	800a246 <HAL_GPIO_Init+0x212>
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	4a17      	ldr	r2, [pc, #92]	@ (800a298 <HAL_GPIO_Init+0x264>)
 800a23a:	4293      	cmp	r3, r2
 800a23c:	d101      	bne.n	800a242 <HAL_GPIO_Init+0x20e>
 800a23e:	2309      	movs	r3, #9
 800a240:	e02d      	b.n	800a29e <HAL_GPIO_Init+0x26a>
 800a242:	230a      	movs	r3, #10
 800a244:	e02b      	b.n	800a29e <HAL_GPIO_Init+0x26a>
 800a246:	2308      	movs	r3, #8
 800a248:	e029      	b.n	800a29e <HAL_GPIO_Init+0x26a>
 800a24a:	2307      	movs	r3, #7
 800a24c:	e027      	b.n	800a29e <HAL_GPIO_Init+0x26a>
 800a24e:	2306      	movs	r3, #6
 800a250:	e025      	b.n	800a29e <HAL_GPIO_Init+0x26a>
 800a252:	2305      	movs	r3, #5
 800a254:	e023      	b.n	800a29e <HAL_GPIO_Init+0x26a>
 800a256:	2304      	movs	r3, #4
 800a258:	e021      	b.n	800a29e <HAL_GPIO_Init+0x26a>
 800a25a:	2303      	movs	r3, #3
 800a25c:	e01f      	b.n	800a29e <HAL_GPIO_Init+0x26a>
 800a25e:	2302      	movs	r3, #2
 800a260:	e01d      	b.n	800a29e <HAL_GPIO_Init+0x26a>
 800a262:	2301      	movs	r3, #1
 800a264:	e01b      	b.n	800a29e <HAL_GPIO_Init+0x26a>
 800a266:	bf00      	nop
 800a268:	58000080 	.word	0x58000080
 800a26c:	58024400 	.word	0x58024400
 800a270:	58000400 	.word	0x58000400
 800a274:	58020000 	.word	0x58020000
 800a278:	58020400 	.word	0x58020400
 800a27c:	58020800 	.word	0x58020800
 800a280:	58020c00 	.word	0x58020c00
 800a284:	58021000 	.word	0x58021000
 800a288:	58021400 	.word	0x58021400
 800a28c:	58021800 	.word	0x58021800
 800a290:	58021c00 	.word	0x58021c00
 800a294:	58022000 	.word	0x58022000
 800a298:	58022400 	.word	0x58022400
 800a29c:	2300      	movs	r3, #0
 800a29e:	69fa      	ldr	r2, [r7, #28]
 800a2a0:	f002 0203 	and.w	r2, r2, #3
 800a2a4:	0092      	lsls	r2, r2, #2
 800a2a6:	4093      	lsls	r3, r2
 800a2a8:	69ba      	ldr	r2, [r7, #24]
 800a2aa:	4313      	orrs	r3, r2
 800a2ac:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a2ae:	4938      	ldr	r1, [pc, #224]	@ (800a390 <HAL_GPIO_Init+0x35c>)
 800a2b0:	69fb      	ldr	r3, [r7, #28]
 800a2b2:	089b      	lsrs	r3, r3, #2
 800a2b4:	3302      	adds	r3, #2
 800a2b6:	69ba      	ldr	r2, [r7, #24]
 800a2b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a2bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a2c4:	693b      	ldr	r3, [r7, #16]
 800a2c6:	43db      	mvns	r3, r3
 800a2c8:	69ba      	ldr	r2, [r7, #24]
 800a2ca:	4013      	ands	r3, r2
 800a2cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	685b      	ldr	r3, [r3, #4]
 800a2d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d003      	beq.n	800a2e2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800a2da:	69ba      	ldr	r2, [r7, #24]
 800a2dc:	693b      	ldr	r3, [r7, #16]
 800a2de:	4313      	orrs	r3, r2
 800a2e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800a2e2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a2e6:	69bb      	ldr	r3, [r7, #24]
 800a2e8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800a2ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a2ee:	685b      	ldr	r3, [r3, #4]
 800a2f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a2f2:	693b      	ldr	r3, [r7, #16]
 800a2f4:	43db      	mvns	r3, r3
 800a2f6:	69ba      	ldr	r2, [r7, #24]
 800a2f8:	4013      	ands	r3, r2
 800a2fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	685b      	ldr	r3, [r3, #4]
 800a300:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a304:	2b00      	cmp	r3, #0
 800a306:	d003      	beq.n	800a310 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800a308:	69ba      	ldr	r2, [r7, #24]
 800a30a:	693b      	ldr	r3, [r7, #16]
 800a30c:	4313      	orrs	r3, r2
 800a30e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800a310:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a314:	69bb      	ldr	r3, [r7, #24]
 800a316:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800a318:	697b      	ldr	r3, [r7, #20]
 800a31a:	685b      	ldr	r3, [r3, #4]
 800a31c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a31e:	693b      	ldr	r3, [r7, #16]
 800a320:	43db      	mvns	r3, r3
 800a322:	69ba      	ldr	r2, [r7, #24]
 800a324:	4013      	ands	r3, r2
 800a326:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	685b      	ldr	r3, [r3, #4]
 800a32c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a330:	2b00      	cmp	r3, #0
 800a332:	d003      	beq.n	800a33c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800a334:	69ba      	ldr	r2, [r7, #24]
 800a336:	693b      	ldr	r3, [r7, #16]
 800a338:	4313      	orrs	r3, r2
 800a33a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800a33c:	697b      	ldr	r3, [r7, #20]
 800a33e:	69ba      	ldr	r2, [r7, #24]
 800a340:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800a342:	697b      	ldr	r3, [r7, #20]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a348:	693b      	ldr	r3, [r7, #16]
 800a34a:	43db      	mvns	r3, r3
 800a34c:	69ba      	ldr	r2, [r7, #24]
 800a34e:	4013      	ands	r3, r2
 800a350:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	685b      	ldr	r3, [r3, #4]
 800a356:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d003      	beq.n	800a366 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800a35e:	69ba      	ldr	r2, [r7, #24]
 800a360:	693b      	ldr	r3, [r7, #16]
 800a362:	4313      	orrs	r3, r2
 800a364:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	69ba      	ldr	r2, [r7, #24]
 800a36a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800a36c:	69fb      	ldr	r3, [r7, #28]
 800a36e:	3301      	adds	r3, #1
 800a370:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	681a      	ldr	r2, [r3, #0]
 800a376:	69fb      	ldr	r3, [r7, #28]
 800a378:	fa22 f303 	lsr.w	r3, r2, r3
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	f47f ae63 	bne.w	800a048 <HAL_GPIO_Init+0x14>
  }
}
 800a382:	bf00      	nop
 800a384:	bf00      	nop
 800a386:	3724      	adds	r7, #36	@ 0x24
 800a388:	46bd      	mov	sp, r7
 800a38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38e:	4770      	bx	lr
 800a390:	58000400 	.word	0x58000400

0800a394 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a394:	b480      	push	{r7}
 800a396:	b083      	sub	sp, #12
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
 800a39c:	460b      	mov	r3, r1
 800a39e:	807b      	strh	r3, [r7, #2]
 800a3a0:	4613      	mov	r3, r2
 800a3a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a3a4:	787b      	ldrb	r3, [r7, #1]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d003      	beq.n	800a3b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a3aa:	887a      	ldrh	r2, [r7, #2]
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800a3b0:	e003      	b.n	800a3ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800a3b2:	887b      	ldrh	r3, [r7, #2]
 800a3b4:	041a      	lsls	r2, r3, #16
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	619a      	str	r2, [r3, #24]
}
 800a3ba:	bf00      	nop
 800a3bc:	370c      	adds	r7, #12
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c4:	4770      	bx	lr
	...

0800a3c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b082      	sub	sp, #8
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d101      	bne.n	800a3da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a3d6:	2301      	movs	r3, #1
 800a3d8:	e08b      	b.n	800a4f2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a3e0:	b2db      	uxtb	r3, r3
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d106      	bne.n	800a3f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	f7f8 f8b6 	bl	8002560 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2224      	movs	r2, #36	@ 0x24
 800a3f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	681a      	ldr	r2, [r3, #0]
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f022 0201 	bic.w	r2, r2, #1
 800a40a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	685a      	ldr	r2, [r3, #4]
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800a418:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	689a      	ldr	r2, [r3, #8]
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a428:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	68db      	ldr	r3, [r3, #12]
 800a42e:	2b01      	cmp	r3, #1
 800a430:	d107      	bne.n	800a442 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	689a      	ldr	r2, [r3, #8]
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a43e:	609a      	str	r2, [r3, #8]
 800a440:	e006      	b.n	800a450 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	689a      	ldr	r2, [r3, #8]
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800a44e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	68db      	ldr	r3, [r3, #12]
 800a454:	2b02      	cmp	r3, #2
 800a456:	d108      	bne.n	800a46a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	685a      	ldr	r2, [r3, #4]
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a466:	605a      	str	r2, [r3, #4]
 800a468:	e007      	b.n	800a47a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	685a      	ldr	r2, [r3, #4]
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a478:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	6859      	ldr	r1, [r3, #4]
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681a      	ldr	r2, [r3, #0]
 800a484:	4b1d      	ldr	r3, [pc, #116]	@ (800a4fc <HAL_I2C_Init+0x134>)
 800a486:	430b      	orrs	r3, r1
 800a488:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	68da      	ldr	r2, [r3, #12]
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a498:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	691a      	ldr	r2, [r3, #16]
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	695b      	ldr	r3, [r3, #20]
 800a4a2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	699b      	ldr	r3, [r3, #24]
 800a4aa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	430a      	orrs	r2, r1
 800a4b2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	69d9      	ldr	r1, [r3, #28]
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6a1a      	ldr	r2, [r3, #32]
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	430a      	orrs	r2, r1
 800a4c2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	681a      	ldr	r2, [r3, #0]
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f042 0201 	orr.w	r2, r2, #1
 800a4d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2220      	movs	r2, #32
 800a4de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800a4f0:	2300      	movs	r3, #0
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3708      	adds	r7, #8
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd80      	pop	{r7, pc}
 800a4fa:	bf00      	nop
 800a4fc:	02008000 	.word	0x02008000

0800a500 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a500:	b480      	push	{r7}
 800a502:	b083      	sub	sp, #12
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
 800a508:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a510:	b2db      	uxtb	r3, r3
 800a512:	2b20      	cmp	r3, #32
 800a514:	d138      	bne.n	800a588 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a51c:	2b01      	cmp	r3, #1
 800a51e:	d101      	bne.n	800a524 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a520:	2302      	movs	r3, #2
 800a522:	e032      	b.n	800a58a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2201      	movs	r2, #1
 800a528:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2224      	movs	r2, #36	@ 0x24
 800a530:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	681a      	ldr	r2, [r3, #0]
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	f022 0201 	bic.w	r2, r2, #1
 800a542:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	681a      	ldr	r2, [r3, #0]
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a552:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	6819      	ldr	r1, [r3, #0]
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	683a      	ldr	r2, [r7, #0]
 800a560:	430a      	orrs	r2, r1
 800a562:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	681a      	ldr	r2, [r3, #0]
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	f042 0201 	orr.w	r2, r2, #1
 800a572:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2220      	movs	r2, #32
 800a578:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2200      	movs	r2, #0
 800a580:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a584:	2300      	movs	r3, #0
 800a586:	e000      	b.n	800a58a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a588:	2302      	movs	r3, #2
  }
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	370c      	adds	r7, #12
 800a58e:	46bd      	mov	sp, r7
 800a590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a594:	4770      	bx	lr

0800a596 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a596:	b480      	push	{r7}
 800a598:	b085      	sub	sp, #20
 800a59a:	af00      	add	r7, sp, #0
 800a59c:	6078      	str	r0, [r7, #4]
 800a59e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a5a6:	b2db      	uxtb	r3, r3
 800a5a8:	2b20      	cmp	r3, #32
 800a5aa:	d139      	bne.n	800a620 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a5b2:	2b01      	cmp	r3, #1
 800a5b4:	d101      	bne.n	800a5ba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a5b6:	2302      	movs	r3, #2
 800a5b8:	e033      	b.n	800a622 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2201      	movs	r2, #1
 800a5be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	2224      	movs	r2, #36	@ 0x24
 800a5c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	681a      	ldr	r2, [r3, #0]
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	f022 0201 	bic.w	r2, r2, #1
 800a5d8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800a5e8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	021b      	lsls	r3, r3, #8
 800a5ee:	68fa      	ldr	r2, [r7, #12]
 800a5f0:	4313      	orrs	r3, r2
 800a5f2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	68fa      	ldr	r2, [r7, #12]
 800a5fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	681a      	ldr	r2, [r3, #0]
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	f042 0201 	orr.w	r2, r2, #1
 800a60a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2220      	movs	r2, #32
 800a610:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2200      	movs	r2, #0
 800a618:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a61c:	2300      	movs	r3, #0
 800a61e:	e000      	b.n	800a622 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a620:	2302      	movs	r3, #2
  }
}
 800a622:	4618      	mov	r0, r3
 800a624:	3714      	adds	r7, #20
 800a626:	46bd      	mov	sp, r7
 800a628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62c:	4770      	bx	lr
	...

0800a630 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b084      	sub	sp, #16
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a638:	4b19      	ldr	r3, [pc, #100]	@ (800a6a0 <HAL_PWREx_ConfigSupply+0x70>)
 800a63a:	68db      	ldr	r3, [r3, #12]
 800a63c:	f003 0304 	and.w	r3, r3, #4
 800a640:	2b04      	cmp	r3, #4
 800a642:	d00a      	beq.n	800a65a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a644:	4b16      	ldr	r3, [pc, #88]	@ (800a6a0 <HAL_PWREx_ConfigSupply+0x70>)
 800a646:	68db      	ldr	r3, [r3, #12]
 800a648:	f003 0307 	and.w	r3, r3, #7
 800a64c:	687a      	ldr	r2, [r7, #4]
 800a64e:	429a      	cmp	r2, r3
 800a650:	d001      	beq.n	800a656 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a652:	2301      	movs	r3, #1
 800a654:	e01f      	b.n	800a696 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a656:	2300      	movs	r3, #0
 800a658:	e01d      	b.n	800a696 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a65a:	4b11      	ldr	r3, [pc, #68]	@ (800a6a0 <HAL_PWREx_ConfigSupply+0x70>)
 800a65c:	68db      	ldr	r3, [r3, #12]
 800a65e:	f023 0207 	bic.w	r2, r3, #7
 800a662:	490f      	ldr	r1, [pc, #60]	@ (800a6a0 <HAL_PWREx_ConfigSupply+0x70>)
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	4313      	orrs	r3, r2
 800a668:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a66a:	f7fc f90d 	bl	8006888 <HAL_GetTick>
 800a66e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a670:	e009      	b.n	800a686 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a672:	f7fc f909 	bl	8006888 <HAL_GetTick>
 800a676:	4602      	mov	r2, r0
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	1ad3      	subs	r3, r2, r3
 800a67c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a680:	d901      	bls.n	800a686 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a682:	2301      	movs	r3, #1
 800a684:	e007      	b.n	800a696 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a686:	4b06      	ldr	r3, [pc, #24]	@ (800a6a0 <HAL_PWREx_ConfigSupply+0x70>)
 800a688:	685b      	ldr	r3, [r3, #4]
 800a68a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a68e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a692:	d1ee      	bne.n	800a672 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a694:	2300      	movs	r3, #0
}
 800a696:	4618      	mov	r0, r3
 800a698:	3710      	adds	r7, #16
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}
 800a69e:	bf00      	nop
 800a6a0:	58024800 	.word	0x58024800

0800a6a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b08c      	sub	sp, #48	@ 0x30
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d102      	bne.n	800a6b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	f000 bc1f 	b.w	800aef6 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	f003 0301 	and.w	r3, r3, #1
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	f000 80b3 	beq.w	800a82c <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a6c6:	4b95      	ldr	r3, [pc, #596]	@ (800a91c <HAL_RCC_OscConfig+0x278>)
 800a6c8:	691b      	ldr	r3, [r3, #16]
 800a6ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a6ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a6d0:	4b92      	ldr	r3, [pc, #584]	@ (800a91c <HAL_RCC_OscConfig+0x278>)
 800a6d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a6d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6d8:	2b10      	cmp	r3, #16
 800a6da:	d007      	beq.n	800a6ec <HAL_RCC_OscConfig+0x48>
 800a6dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6de:	2b18      	cmp	r3, #24
 800a6e0:	d112      	bne.n	800a708 <HAL_RCC_OscConfig+0x64>
 800a6e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6e4:	f003 0303 	and.w	r3, r3, #3
 800a6e8:	2b02      	cmp	r3, #2
 800a6ea:	d10d      	bne.n	800a708 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a6ec:	4b8b      	ldr	r3, [pc, #556]	@ (800a91c <HAL_RCC_OscConfig+0x278>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	f000 8098 	beq.w	800a82a <HAL_RCC_OscConfig+0x186>
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	685b      	ldr	r3, [r3, #4]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	f040 8093 	bne.w	800a82a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800a704:	2301      	movs	r3, #1
 800a706:	e3f6      	b.n	800aef6 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	685b      	ldr	r3, [r3, #4]
 800a70c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a710:	d106      	bne.n	800a720 <HAL_RCC_OscConfig+0x7c>
 800a712:	4b82      	ldr	r3, [pc, #520]	@ (800a91c <HAL_RCC_OscConfig+0x278>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	4a81      	ldr	r2, [pc, #516]	@ (800a91c <HAL_RCC_OscConfig+0x278>)
 800a718:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a71c:	6013      	str	r3, [r2, #0]
 800a71e:	e058      	b.n	800a7d2 <HAL_RCC_OscConfig+0x12e>
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	685b      	ldr	r3, [r3, #4]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d112      	bne.n	800a74e <HAL_RCC_OscConfig+0xaa>
 800a728:	4b7c      	ldr	r3, [pc, #496]	@ (800a91c <HAL_RCC_OscConfig+0x278>)
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	4a7b      	ldr	r2, [pc, #492]	@ (800a91c <HAL_RCC_OscConfig+0x278>)
 800a72e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a732:	6013      	str	r3, [r2, #0]
 800a734:	4b79      	ldr	r3, [pc, #484]	@ (800a91c <HAL_RCC_OscConfig+0x278>)
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	4a78      	ldr	r2, [pc, #480]	@ (800a91c <HAL_RCC_OscConfig+0x278>)
 800a73a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a73e:	6013      	str	r3, [r2, #0]
 800a740:	4b76      	ldr	r3, [pc, #472]	@ (800a91c <HAL_RCC_OscConfig+0x278>)
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	4a75      	ldr	r2, [pc, #468]	@ (800a91c <HAL_RCC_OscConfig+0x278>)
 800a746:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a74a:	6013      	str	r3, [r2, #0]
 800a74c:	e041      	b.n	800a7d2 <HAL_RCC_OscConfig+0x12e>
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	685b      	ldr	r3, [r3, #4]
 800a752:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a756:	d112      	bne.n	800a77e <HAL_RCC_OscConfig+0xda>
 800a758:	4b70      	ldr	r3, [pc, #448]	@ (800a91c <HAL_RCC_OscConfig+0x278>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	4a6f      	ldr	r2, [pc, #444]	@ (800a91c <HAL_RCC_OscConfig+0x278>)
 800a75e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a762:	6013      	str	r3, [r2, #0]
 800a764:	4b6d      	ldr	r3, [pc, #436]	@ (800a91c <HAL_RCC_OscConfig+0x278>)
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	4a6c      	ldr	r2, [pc, #432]	@ (800a91c <HAL_RCC_OscConfig+0x278>)
 800a76a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a76e:	6013      	str	r3, [r2, #0]
 800a770:	4b6a      	ldr	r3, [pc, #424]	@ (800a91c <HAL_RCC_OscConfig+0x278>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	4a69      	ldr	r2, [pc, #420]	@ (800a91c <HAL_RCC_OscConfig+0x278>)
 800a776:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a77a:	6013      	str	r3, [r2, #0]
 800a77c:	e029      	b.n	800a7d2 <HAL_RCC_OscConfig+0x12e>
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	685b      	ldr	r3, [r3, #4]
 800a782:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800a786:	d112      	bne.n	800a7ae <HAL_RCC_OscConfig+0x10a>
 800a788:	4b64      	ldr	r3, [pc, #400]	@ (800a91c <HAL_RCC_OscConfig+0x278>)
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	4a63      	ldr	r2, [pc, #396]	@ (800a91c <HAL_RCC_OscConfig+0x278>)
 800a78e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a792:	6013      	str	r3, [r2, #0]
 800a794:	4b61      	ldr	r3, [pc, #388]	@ (800a91c <HAL_RCC_OscConfig+0x278>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	4a60      	ldr	r2, [pc, #384]	@ (800a91c <HAL_RCC_OscConfig+0x278>)
 800a79a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a79e:	6013      	str	r3, [r2, #0]
 800a7a0:	4b5e      	ldr	r3, [pc, #376]	@ (800a91c <HAL_RCC_OscConfig+0x278>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	4a5d      	ldr	r2, [pc, #372]	@ (800a91c <HAL_RCC_OscConfig+0x278>)
 800a7a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a7aa:	6013      	str	r3, [r2, #0]
 800a7ac:	e011      	b.n	800a7d2 <HAL_RCC_OscConfig+0x12e>
 800a7ae:	4b5b      	ldr	r3, [pc, #364]	@ (800a91c <HAL_RCC_OscConfig+0x278>)
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	4a5a      	ldr	r2, [pc, #360]	@ (800a91c <HAL_RCC_OscConfig+0x278>)
 800a7b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a7b8:	6013      	str	r3, [r2, #0]
 800a7ba:	4b58      	ldr	r3, [pc, #352]	@ (800a91c <HAL_RCC_OscConfig+0x278>)
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	4a57      	ldr	r2, [pc, #348]	@ (800a91c <HAL_RCC_OscConfig+0x278>)
 800a7c0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a7c4:	6013      	str	r3, [r2, #0]
 800a7c6:	4b55      	ldr	r3, [pc, #340]	@ (800a91c <HAL_RCC_OscConfig+0x278>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	4a54      	ldr	r2, [pc, #336]	@ (800a91c <HAL_RCC_OscConfig+0x278>)
 800a7cc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a7d0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	685b      	ldr	r3, [r3, #4]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d013      	beq.n	800a802 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7da:	f7fc f855 	bl	8006888 <HAL_GetTick>
 800a7de:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a7e0:	e008      	b.n	800a7f4 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a7e2:	f7fc f851 	bl	8006888 <HAL_GetTick>
 800a7e6:	4602      	mov	r2, r0
 800a7e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7ea:	1ad3      	subs	r3, r2, r3
 800a7ec:	2b64      	cmp	r3, #100	@ 0x64
 800a7ee:	d901      	bls.n	800a7f4 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800a7f0:	2303      	movs	r3, #3
 800a7f2:	e380      	b.n	800aef6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a7f4:	4b49      	ldr	r3, [pc, #292]	@ (800a91c <HAL_RCC_OscConfig+0x278>)
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d0f0      	beq.n	800a7e2 <HAL_RCC_OscConfig+0x13e>
 800a800:	e014      	b.n	800a82c <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a802:	f7fc f841 	bl	8006888 <HAL_GetTick>
 800a806:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a808:	e008      	b.n	800a81c <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a80a:	f7fc f83d 	bl	8006888 <HAL_GetTick>
 800a80e:	4602      	mov	r2, r0
 800a810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a812:	1ad3      	subs	r3, r2, r3
 800a814:	2b64      	cmp	r3, #100	@ 0x64
 800a816:	d901      	bls.n	800a81c <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 800a818:	2303      	movs	r3, #3
 800a81a:	e36c      	b.n	800aef6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a81c:	4b3f      	ldr	r3, [pc, #252]	@ (800a91c <HAL_RCC_OscConfig+0x278>)
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a824:	2b00      	cmp	r3, #0
 800a826:	d1f0      	bne.n	800a80a <HAL_RCC_OscConfig+0x166>
 800a828:	e000      	b.n	800a82c <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a82a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	f003 0302 	and.w	r3, r3, #2
 800a834:	2b00      	cmp	r3, #0
 800a836:	f000 808c 	beq.w	800a952 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a83a:	4b38      	ldr	r3, [pc, #224]	@ (800a91c <HAL_RCC_OscConfig+0x278>)
 800a83c:	691b      	ldr	r3, [r3, #16]
 800a83e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a842:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a844:	4b35      	ldr	r3, [pc, #212]	@ (800a91c <HAL_RCC_OscConfig+0x278>)
 800a846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a848:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a84a:	6a3b      	ldr	r3, [r7, #32]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d007      	beq.n	800a860 <HAL_RCC_OscConfig+0x1bc>
 800a850:	6a3b      	ldr	r3, [r7, #32]
 800a852:	2b18      	cmp	r3, #24
 800a854:	d137      	bne.n	800a8c6 <HAL_RCC_OscConfig+0x222>
 800a856:	69fb      	ldr	r3, [r7, #28]
 800a858:	f003 0303 	and.w	r3, r3, #3
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d132      	bne.n	800a8c6 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a860:	4b2e      	ldr	r3, [pc, #184]	@ (800a91c <HAL_RCC_OscConfig+0x278>)
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	f003 0304 	and.w	r3, r3, #4
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d005      	beq.n	800a878 <HAL_RCC_OscConfig+0x1d4>
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	68db      	ldr	r3, [r3, #12]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d101      	bne.n	800a878 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 800a874:	2301      	movs	r3, #1
 800a876:	e33e      	b.n	800aef6 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a878:	4b28      	ldr	r3, [pc, #160]	@ (800a91c <HAL_RCC_OscConfig+0x278>)
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	f023 0219 	bic.w	r2, r3, #25
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	68db      	ldr	r3, [r3, #12]
 800a884:	4925      	ldr	r1, [pc, #148]	@ (800a91c <HAL_RCC_OscConfig+0x278>)
 800a886:	4313      	orrs	r3, r2
 800a888:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a88a:	f7fb fffd 	bl	8006888 <HAL_GetTick>
 800a88e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a890:	e008      	b.n	800a8a4 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a892:	f7fb fff9 	bl	8006888 <HAL_GetTick>
 800a896:	4602      	mov	r2, r0
 800a898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a89a:	1ad3      	subs	r3, r2, r3
 800a89c:	2b02      	cmp	r3, #2
 800a89e:	d901      	bls.n	800a8a4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800a8a0:	2303      	movs	r3, #3
 800a8a2:	e328      	b.n	800aef6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a8a4:	4b1d      	ldr	r3, [pc, #116]	@ (800a91c <HAL_RCC_OscConfig+0x278>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	f003 0304 	and.w	r3, r3, #4
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d0f0      	beq.n	800a892 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a8b0:	4b1a      	ldr	r3, [pc, #104]	@ (800a91c <HAL_RCC_OscConfig+0x278>)
 800a8b2:	685b      	ldr	r3, [r3, #4]
 800a8b4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	691b      	ldr	r3, [r3, #16]
 800a8bc:	061b      	lsls	r3, r3, #24
 800a8be:	4917      	ldr	r1, [pc, #92]	@ (800a91c <HAL_RCC_OscConfig+0x278>)
 800a8c0:	4313      	orrs	r3, r2
 800a8c2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a8c4:	e045      	b.n	800a952 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	68db      	ldr	r3, [r3, #12]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d028      	beq.n	800a920 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a8ce:	4b13      	ldr	r3, [pc, #76]	@ (800a91c <HAL_RCC_OscConfig+0x278>)
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	f023 0219 	bic.w	r2, r3, #25
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	68db      	ldr	r3, [r3, #12]
 800a8da:	4910      	ldr	r1, [pc, #64]	@ (800a91c <HAL_RCC_OscConfig+0x278>)
 800a8dc:	4313      	orrs	r3, r2
 800a8de:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8e0:	f7fb ffd2 	bl	8006888 <HAL_GetTick>
 800a8e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a8e6:	e008      	b.n	800a8fa <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a8e8:	f7fb ffce 	bl	8006888 <HAL_GetTick>
 800a8ec:	4602      	mov	r2, r0
 800a8ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8f0:	1ad3      	subs	r3, r2, r3
 800a8f2:	2b02      	cmp	r3, #2
 800a8f4:	d901      	bls.n	800a8fa <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800a8f6:	2303      	movs	r3, #3
 800a8f8:	e2fd      	b.n	800aef6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a8fa:	4b08      	ldr	r3, [pc, #32]	@ (800a91c <HAL_RCC_OscConfig+0x278>)
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	f003 0304 	and.w	r3, r3, #4
 800a902:	2b00      	cmp	r3, #0
 800a904:	d0f0      	beq.n	800a8e8 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a906:	4b05      	ldr	r3, [pc, #20]	@ (800a91c <HAL_RCC_OscConfig+0x278>)
 800a908:	685b      	ldr	r3, [r3, #4]
 800a90a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	691b      	ldr	r3, [r3, #16]
 800a912:	061b      	lsls	r3, r3, #24
 800a914:	4901      	ldr	r1, [pc, #4]	@ (800a91c <HAL_RCC_OscConfig+0x278>)
 800a916:	4313      	orrs	r3, r2
 800a918:	604b      	str	r3, [r1, #4]
 800a91a:	e01a      	b.n	800a952 <HAL_RCC_OscConfig+0x2ae>
 800a91c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a920:	4b97      	ldr	r3, [pc, #604]	@ (800ab80 <HAL_RCC_OscConfig+0x4dc>)
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	4a96      	ldr	r2, [pc, #600]	@ (800ab80 <HAL_RCC_OscConfig+0x4dc>)
 800a926:	f023 0301 	bic.w	r3, r3, #1
 800a92a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a92c:	f7fb ffac 	bl	8006888 <HAL_GetTick>
 800a930:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a932:	e008      	b.n	800a946 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a934:	f7fb ffa8 	bl	8006888 <HAL_GetTick>
 800a938:	4602      	mov	r2, r0
 800a93a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a93c:	1ad3      	subs	r3, r2, r3
 800a93e:	2b02      	cmp	r3, #2
 800a940:	d901      	bls.n	800a946 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800a942:	2303      	movs	r3, #3
 800a944:	e2d7      	b.n	800aef6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a946:	4b8e      	ldr	r3, [pc, #568]	@ (800ab80 <HAL_RCC_OscConfig+0x4dc>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f003 0304 	and.w	r3, r3, #4
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d1f0      	bne.n	800a934 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f003 0310 	and.w	r3, r3, #16
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d06a      	beq.n	800aa34 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a95e:	4b88      	ldr	r3, [pc, #544]	@ (800ab80 <HAL_RCC_OscConfig+0x4dc>)
 800a960:	691b      	ldr	r3, [r3, #16]
 800a962:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a966:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a968:	4b85      	ldr	r3, [pc, #532]	@ (800ab80 <HAL_RCC_OscConfig+0x4dc>)
 800a96a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a96c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a96e:	69bb      	ldr	r3, [r7, #24]
 800a970:	2b08      	cmp	r3, #8
 800a972:	d007      	beq.n	800a984 <HAL_RCC_OscConfig+0x2e0>
 800a974:	69bb      	ldr	r3, [r7, #24]
 800a976:	2b18      	cmp	r3, #24
 800a978:	d11b      	bne.n	800a9b2 <HAL_RCC_OscConfig+0x30e>
 800a97a:	697b      	ldr	r3, [r7, #20]
 800a97c:	f003 0303 	and.w	r3, r3, #3
 800a980:	2b01      	cmp	r3, #1
 800a982:	d116      	bne.n	800a9b2 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a984:	4b7e      	ldr	r3, [pc, #504]	@ (800ab80 <HAL_RCC_OscConfig+0x4dc>)
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d005      	beq.n	800a99c <HAL_RCC_OscConfig+0x2f8>
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	69db      	ldr	r3, [r3, #28]
 800a994:	2b80      	cmp	r3, #128	@ 0x80
 800a996:	d001      	beq.n	800a99c <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800a998:	2301      	movs	r3, #1
 800a99a:	e2ac      	b.n	800aef6 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a99c:	4b78      	ldr	r3, [pc, #480]	@ (800ab80 <HAL_RCC_OscConfig+0x4dc>)
 800a99e:	68db      	ldr	r3, [r3, #12]
 800a9a0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6a1b      	ldr	r3, [r3, #32]
 800a9a8:	061b      	lsls	r3, r3, #24
 800a9aa:	4975      	ldr	r1, [pc, #468]	@ (800ab80 <HAL_RCC_OscConfig+0x4dc>)
 800a9ac:	4313      	orrs	r3, r2
 800a9ae:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a9b0:	e040      	b.n	800aa34 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	69db      	ldr	r3, [r3, #28]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d023      	beq.n	800aa02 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a9ba:	4b71      	ldr	r3, [pc, #452]	@ (800ab80 <HAL_RCC_OscConfig+0x4dc>)
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	4a70      	ldr	r2, [pc, #448]	@ (800ab80 <HAL_RCC_OscConfig+0x4dc>)
 800a9c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a9c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9c6:	f7fb ff5f 	bl	8006888 <HAL_GetTick>
 800a9ca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a9cc:	e008      	b.n	800a9e0 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a9ce:	f7fb ff5b 	bl	8006888 <HAL_GetTick>
 800a9d2:	4602      	mov	r2, r0
 800a9d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9d6:	1ad3      	subs	r3, r2, r3
 800a9d8:	2b02      	cmp	r3, #2
 800a9da:	d901      	bls.n	800a9e0 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 800a9dc:	2303      	movs	r3, #3
 800a9de:	e28a      	b.n	800aef6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a9e0:	4b67      	ldr	r3, [pc, #412]	@ (800ab80 <HAL_RCC_OscConfig+0x4dc>)
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d0f0      	beq.n	800a9ce <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a9ec:	4b64      	ldr	r3, [pc, #400]	@ (800ab80 <HAL_RCC_OscConfig+0x4dc>)
 800a9ee:	68db      	ldr	r3, [r3, #12]
 800a9f0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6a1b      	ldr	r3, [r3, #32]
 800a9f8:	061b      	lsls	r3, r3, #24
 800a9fa:	4961      	ldr	r1, [pc, #388]	@ (800ab80 <HAL_RCC_OscConfig+0x4dc>)
 800a9fc:	4313      	orrs	r3, r2
 800a9fe:	60cb      	str	r3, [r1, #12]
 800aa00:	e018      	b.n	800aa34 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800aa02:	4b5f      	ldr	r3, [pc, #380]	@ (800ab80 <HAL_RCC_OscConfig+0x4dc>)
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	4a5e      	ldr	r2, [pc, #376]	@ (800ab80 <HAL_RCC_OscConfig+0x4dc>)
 800aa08:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aa0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa0e:	f7fb ff3b 	bl	8006888 <HAL_GetTick>
 800aa12:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800aa14:	e008      	b.n	800aa28 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800aa16:	f7fb ff37 	bl	8006888 <HAL_GetTick>
 800aa1a:	4602      	mov	r2, r0
 800aa1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa1e:	1ad3      	subs	r3, r2, r3
 800aa20:	2b02      	cmp	r3, #2
 800aa22:	d901      	bls.n	800aa28 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800aa24:	2303      	movs	r3, #3
 800aa26:	e266      	b.n	800aef6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800aa28:	4b55      	ldr	r3, [pc, #340]	@ (800ab80 <HAL_RCC_OscConfig+0x4dc>)
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d1f0      	bne.n	800aa16 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	f003 0308 	and.w	r3, r3, #8
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d036      	beq.n	800aaae <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	695b      	ldr	r3, [r3, #20]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d019      	beq.n	800aa7c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800aa48:	4b4d      	ldr	r3, [pc, #308]	@ (800ab80 <HAL_RCC_OscConfig+0x4dc>)
 800aa4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aa4c:	4a4c      	ldr	r2, [pc, #304]	@ (800ab80 <HAL_RCC_OscConfig+0x4dc>)
 800aa4e:	f043 0301 	orr.w	r3, r3, #1
 800aa52:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa54:	f7fb ff18 	bl	8006888 <HAL_GetTick>
 800aa58:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800aa5a:	e008      	b.n	800aa6e <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aa5c:	f7fb ff14 	bl	8006888 <HAL_GetTick>
 800aa60:	4602      	mov	r2, r0
 800aa62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa64:	1ad3      	subs	r3, r2, r3
 800aa66:	2b02      	cmp	r3, #2
 800aa68:	d901      	bls.n	800aa6e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800aa6a:	2303      	movs	r3, #3
 800aa6c:	e243      	b.n	800aef6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800aa6e:	4b44      	ldr	r3, [pc, #272]	@ (800ab80 <HAL_RCC_OscConfig+0x4dc>)
 800aa70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aa72:	f003 0302 	and.w	r3, r3, #2
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d0f0      	beq.n	800aa5c <HAL_RCC_OscConfig+0x3b8>
 800aa7a:	e018      	b.n	800aaae <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800aa7c:	4b40      	ldr	r3, [pc, #256]	@ (800ab80 <HAL_RCC_OscConfig+0x4dc>)
 800aa7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aa80:	4a3f      	ldr	r2, [pc, #252]	@ (800ab80 <HAL_RCC_OscConfig+0x4dc>)
 800aa82:	f023 0301 	bic.w	r3, r3, #1
 800aa86:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa88:	f7fb fefe 	bl	8006888 <HAL_GetTick>
 800aa8c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800aa8e:	e008      	b.n	800aaa2 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aa90:	f7fb fefa 	bl	8006888 <HAL_GetTick>
 800aa94:	4602      	mov	r2, r0
 800aa96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa98:	1ad3      	subs	r3, r2, r3
 800aa9a:	2b02      	cmp	r3, #2
 800aa9c:	d901      	bls.n	800aaa2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800aa9e:	2303      	movs	r3, #3
 800aaa0:	e229      	b.n	800aef6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800aaa2:	4b37      	ldr	r3, [pc, #220]	@ (800ab80 <HAL_RCC_OscConfig+0x4dc>)
 800aaa4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aaa6:	f003 0302 	and.w	r3, r3, #2
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d1f0      	bne.n	800aa90 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	f003 0320 	and.w	r3, r3, #32
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d036      	beq.n	800ab28 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	699b      	ldr	r3, [r3, #24]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d019      	beq.n	800aaf6 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800aac2:	4b2f      	ldr	r3, [pc, #188]	@ (800ab80 <HAL_RCC_OscConfig+0x4dc>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	4a2e      	ldr	r2, [pc, #184]	@ (800ab80 <HAL_RCC_OscConfig+0x4dc>)
 800aac8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800aacc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800aace:	f7fb fedb 	bl	8006888 <HAL_GetTick>
 800aad2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800aad4:	e008      	b.n	800aae8 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800aad6:	f7fb fed7 	bl	8006888 <HAL_GetTick>
 800aada:	4602      	mov	r2, r0
 800aadc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aade:	1ad3      	subs	r3, r2, r3
 800aae0:	2b02      	cmp	r3, #2
 800aae2:	d901      	bls.n	800aae8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800aae4:	2303      	movs	r3, #3
 800aae6:	e206      	b.n	800aef6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800aae8:	4b25      	ldr	r3, [pc, #148]	@ (800ab80 <HAL_RCC_OscConfig+0x4dc>)
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d0f0      	beq.n	800aad6 <HAL_RCC_OscConfig+0x432>
 800aaf4:	e018      	b.n	800ab28 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800aaf6:	4b22      	ldr	r3, [pc, #136]	@ (800ab80 <HAL_RCC_OscConfig+0x4dc>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	4a21      	ldr	r2, [pc, #132]	@ (800ab80 <HAL_RCC_OscConfig+0x4dc>)
 800aafc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ab00:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ab02:	f7fb fec1 	bl	8006888 <HAL_GetTick>
 800ab06:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ab08:	e008      	b.n	800ab1c <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ab0a:	f7fb febd 	bl	8006888 <HAL_GetTick>
 800ab0e:	4602      	mov	r2, r0
 800ab10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab12:	1ad3      	subs	r3, r2, r3
 800ab14:	2b02      	cmp	r3, #2
 800ab16:	d901      	bls.n	800ab1c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800ab18:	2303      	movs	r3, #3
 800ab1a:	e1ec      	b.n	800aef6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ab1c:	4b18      	ldr	r3, [pc, #96]	@ (800ab80 <HAL_RCC_OscConfig+0x4dc>)
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d1f0      	bne.n	800ab0a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	f003 0304 	and.w	r3, r3, #4
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	f000 80af 	beq.w	800ac94 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800ab36:	4b13      	ldr	r3, [pc, #76]	@ (800ab84 <HAL_RCC_OscConfig+0x4e0>)
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	4a12      	ldr	r2, [pc, #72]	@ (800ab84 <HAL_RCC_OscConfig+0x4e0>)
 800ab3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ab40:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ab42:	f7fb fea1 	bl	8006888 <HAL_GetTick>
 800ab46:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ab48:	e008      	b.n	800ab5c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ab4a:	f7fb fe9d 	bl	8006888 <HAL_GetTick>
 800ab4e:	4602      	mov	r2, r0
 800ab50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab52:	1ad3      	subs	r3, r2, r3
 800ab54:	2b64      	cmp	r3, #100	@ 0x64
 800ab56:	d901      	bls.n	800ab5c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800ab58:	2303      	movs	r3, #3
 800ab5a:	e1cc      	b.n	800aef6 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ab5c:	4b09      	ldr	r3, [pc, #36]	@ (800ab84 <HAL_RCC_OscConfig+0x4e0>)
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d0f0      	beq.n	800ab4a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	689b      	ldr	r3, [r3, #8]
 800ab6c:	2b01      	cmp	r3, #1
 800ab6e:	d10b      	bne.n	800ab88 <HAL_RCC_OscConfig+0x4e4>
 800ab70:	4b03      	ldr	r3, [pc, #12]	@ (800ab80 <HAL_RCC_OscConfig+0x4dc>)
 800ab72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab74:	4a02      	ldr	r2, [pc, #8]	@ (800ab80 <HAL_RCC_OscConfig+0x4dc>)
 800ab76:	f043 0301 	orr.w	r3, r3, #1
 800ab7a:	6713      	str	r3, [r2, #112]	@ 0x70
 800ab7c:	e05b      	b.n	800ac36 <HAL_RCC_OscConfig+0x592>
 800ab7e:	bf00      	nop
 800ab80:	58024400 	.word	0x58024400
 800ab84:	58024800 	.word	0x58024800
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	689b      	ldr	r3, [r3, #8]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d112      	bne.n	800abb6 <HAL_RCC_OscConfig+0x512>
 800ab90:	4b9d      	ldr	r3, [pc, #628]	@ (800ae08 <HAL_RCC_OscConfig+0x764>)
 800ab92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab94:	4a9c      	ldr	r2, [pc, #624]	@ (800ae08 <HAL_RCC_OscConfig+0x764>)
 800ab96:	f023 0301 	bic.w	r3, r3, #1
 800ab9a:	6713      	str	r3, [r2, #112]	@ 0x70
 800ab9c:	4b9a      	ldr	r3, [pc, #616]	@ (800ae08 <HAL_RCC_OscConfig+0x764>)
 800ab9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aba0:	4a99      	ldr	r2, [pc, #612]	@ (800ae08 <HAL_RCC_OscConfig+0x764>)
 800aba2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aba6:	6713      	str	r3, [r2, #112]	@ 0x70
 800aba8:	4b97      	ldr	r3, [pc, #604]	@ (800ae08 <HAL_RCC_OscConfig+0x764>)
 800abaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800abac:	4a96      	ldr	r2, [pc, #600]	@ (800ae08 <HAL_RCC_OscConfig+0x764>)
 800abae:	f023 0304 	bic.w	r3, r3, #4
 800abb2:	6713      	str	r3, [r2, #112]	@ 0x70
 800abb4:	e03f      	b.n	800ac36 <HAL_RCC_OscConfig+0x592>
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	689b      	ldr	r3, [r3, #8]
 800abba:	2b05      	cmp	r3, #5
 800abbc:	d112      	bne.n	800abe4 <HAL_RCC_OscConfig+0x540>
 800abbe:	4b92      	ldr	r3, [pc, #584]	@ (800ae08 <HAL_RCC_OscConfig+0x764>)
 800abc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800abc2:	4a91      	ldr	r2, [pc, #580]	@ (800ae08 <HAL_RCC_OscConfig+0x764>)
 800abc4:	f043 0304 	orr.w	r3, r3, #4
 800abc8:	6713      	str	r3, [r2, #112]	@ 0x70
 800abca:	4b8f      	ldr	r3, [pc, #572]	@ (800ae08 <HAL_RCC_OscConfig+0x764>)
 800abcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800abce:	4a8e      	ldr	r2, [pc, #568]	@ (800ae08 <HAL_RCC_OscConfig+0x764>)
 800abd0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800abd4:	6713      	str	r3, [r2, #112]	@ 0x70
 800abd6:	4b8c      	ldr	r3, [pc, #560]	@ (800ae08 <HAL_RCC_OscConfig+0x764>)
 800abd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800abda:	4a8b      	ldr	r2, [pc, #556]	@ (800ae08 <HAL_RCC_OscConfig+0x764>)
 800abdc:	f043 0301 	orr.w	r3, r3, #1
 800abe0:	6713      	str	r3, [r2, #112]	@ 0x70
 800abe2:	e028      	b.n	800ac36 <HAL_RCC_OscConfig+0x592>
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	689b      	ldr	r3, [r3, #8]
 800abe8:	2b85      	cmp	r3, #133	@ 0x85
 800abea:	d112      	bne.n	800ac12 <HAL_RCC_OscConfig+0x56e>
 800abec:	4b86      	ldr	r3, [pc, #536]	@ (800ae08 <HAL_RCC_OscConfig+0x764>)
 800abee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800abf0:	4a85      	ldr	r2, [pc, #532]	@ (800ae08 <HAL_RCC_OscConfig+0x764>)
 800abf2:	f043 0304 	orr.w	r3, r3, #4
 800abf6:	6713      	str	r3, [r2, #112]	@ 0x70
 800abf8:	4b83      	ldr	r3, [pc, #524]	@ (800ae08 <HAL_RCC_OscConfig+0x764>)
 800abfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800abfc:	4a82      	ldr	r2, [pc, #520]	@ (800ae08 <HAL_RCC_OscConfig+0x764>)
 800abfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac02:	6713      	str	r3, [r2, #112]	@ 0x70
 800ac04:	4b80      	ldr	r3, [pc, #512]	@ (800ae08 <HAL_RCC_OscConfig+0x764>)
 800ac06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac08:	4a7f      	ldr	r2, [pc, #508]	@ (800ae08 <HAL_RCC_OscConfig+0x764>)
 800ac0a:	f043 0301 	orr.w	r3, r3, #1
 800ac0e:	6713      	str	r3, [r2, #112]	@ 0x70
 800ac10:	e011      	b.n	800ac36 <HAL_RCC_OscConfig+0x592>
 800ac12:	4b7d      	ldr	r3, [pc, #500]	@ (800ae08 <HAL_RCC_OscConfig+0x764>)
 800ac14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac16:	4a7c      	ldr	r2, [pc, #496]	@ (800ae08 <HAL_RCC_OscConfig+0x764>)
 800ac18:	f023 0301 	bic.w	r3, r3, #1
 800ac1c:	6713      	str	r3, [r2, #112]	@ 0x70
 800ac1e:	4b7a      	ldr	r3, [pc, #488]	@ (800ae08 <HAL_RCC_OscConfig+0x764>)
 800ac20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac22:	4a79      	ldr	r2, [pc, #484]	@ (800ae08 <HAL_RCC_OscConfig+0x764>)
 800ac24:	f023 0304 	bic.w	r3, r3, #4
 800ac28:	6713      	str	r3, [r2, #112]	@ 0x70
 800ac2a:	4b77      	ldr	r3, [pc, #476]	@ (800ae08 <HAL_RCC_OscConfig+0x764>)
 800ac2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac2e:	4a76      	ldr	r2, [pc, #472]	@ (800ae08 <HAL_RCC_OscConfig+0x764>)
 800ac30:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ac34:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	689b      	ldr	r3, [r3, #8]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d015      	beq.n	800ac6a <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac3e:	f7fb fe23 	bl	8006888 <HAL_GetTick>
 800ac42:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ac44:	e00a      	b.n	800ac5c <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ac46:	f7fb fe1f 	bl	8006888 <HAL_GetTick>
 800ac4a:	4602      	mov	r2, r0
 800ac4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac4e:	1ad3      	subs	r3, r2, r3
 800ac50:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac54:	4293      	cmp	r3, r2
 800ac56:	d901      	bls.n	800ac5c <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 800ac58:	2303      	movs	r3, #3
 800ac5a:	e14c      	b.n	800aef6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ac5c:	4b6a      	ldr	r3, [pc, #424]	@ (800ae08 <HAL_RCC_OscConfig+0x764>)
 800ac5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac60:	f003 0302 	and.w	r3, r3, #2
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d0ee      	beq.n	800ac46 <HAL_RCC_OscConfig+0x5a2>
 800ac68:	e014      	b.n	800ac94 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac6a:	f7fb fe0d 	bl	8006888 <HAL_GetTick>
 800ac6e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ac70:	e00a      	b.n	800ac88 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ac72:	f7fb fe09 	bl	8006888 <HAL_GetTick>
 800ac76:	4602      	mov	r2, r0
 800ac78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac7a:	1ad3      	subs	r3, r2, r3
 800ac7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac80:	4293      	cmp	r3, r2
 800ac82:	d901      	bls.n	800ac88 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 800ac84:	2303      	movs	r3, #3
 800ac86:	e136      	b.n	800aef6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ac88:	4b5f      	ldr	r3, [pc, #380]	@ (800ae08 <HAL_RCC_OscConfig+0x764>)
 800ac8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac8c:	f003 0302 	and.w	r3, r3, #2
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d1ee      	bne.n	800ac72 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	f000 812b 	beq.w	800aef4 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800ac9e:	4b5a      	ldr	r3, [pc, #360]	@ (800ae08 <HAL_RCC_OscConfig+0x764>)
 800aca0:	691b      	ldr	r3, [r3, #16]
 800aca2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800aca6:	2b18      	cmp	r3, #24
 800aca8:	f000 80bb 	beq.w	800ae22 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acb0:	2b02      	cmp	r3, #2
 800acb2:	f040 8095 	bne.w	800ade0 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800acb6:	4b54      	ldr	r3, [pc, #336]	@ (800ae08 <HAL_RCC_OscConfig+0x764>)
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	4a53      	ldr	r2, [pc, #332]	@ (800ae08 <HAL_RCC_OscConfig+0x764>)
 800acbc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800acc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800acc2:	f7fb fde1 	bl	8006888 <HAL_GetTick>
 800acc6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800acc8:	e008      	b.n	800acdc <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800acca:	f7fb fddd 	bl	8006888 <HAL_GetTick>
 800acce:	4602      	mov	r2, r0
 800acd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acd2:	1ad3      	subs	r3, r2, r3
 800acd4:	2b02      	cmp	r3, #2
 800acd6:	d901      	bls.n	800acdc <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 800acd8:	2303      	movs	r3, #3
 800acda:	e10c      	b.n	800aef6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800acdc:	4b4a      	ldr	r3, [pc, #296]	@ (800ae08 <HAL_RCC_OscConfig+0x764>)
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d1f0      	bne.n	800acca <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ace8:	4b47      	ldr	r3, [pc, #284]	@ (800ae08 <HAL_RCC_OscConfig+0x764>)
 800acea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800acec:	4b47      	ldr	r3, [pc, #284]	@ (800ae0c <HAL_RCC_OscConfig+0x768>)
 800acee:	4013      	ands	r3, r2
 800acf0:	687a      	ldr	r2, [r7, #4]
 800acf2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800acf4:	687a      	ldr	r2, [r7, #4]
 800acf6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800acf8:	0112      	lsls	r2, r2, #4
 800acfa:	430a      	orrs	r2, r1
 800acfc:	4942      	ldr	r1, [pc, #264]	@ (800ae08 <HAL_RCC_OscConfig+0x764>)
 800acfe:	4313      	orrs	r3, r2
 800ad00:	628b      	str	r3, [r1, #40]	@ 0x28
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad06:	3b01      	subs	r3, #1
 800ad08:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad10:	3b01      	subs	r3, #1
 800ad12:	025b      	lsls	r3, r3, #9
 800ad14:	b29b      	uxth	r3, r3
 800ad16:	431a      	orrs	r2, r3
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad1c:	3b01      	subs	r3, #1
 800ad1e:	041b      	lsls	r3, r3, #16
 800ad20:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800ad24:	431a      	orrs	r2, r3
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad2a:	3b01      	subs	r3, #1
 800ad2c:	061b      	lsls	r3, r3, #24
 800ad2e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800ad32:	4935      	ldr	r1, [pc, #212]	@ (800ae08 <HAL_RCC_OscConfig+0x764>)
 800ad34:	4313      	orrs	r3, r2
 800ad36:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800ad38:	4b33      	ldr	r3, [pc, #204]	@ (800ae08 <HAL_RCC_OscConfig+0x764>)
 800ad3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad3c:	4a32      	ldr	r2, [pc, #200]	@ (800ae08 <HAL_RCC_OscConfig+0x764>)
 800ad3e:	f023 0301 	bic.w	r3, r3, #1
 800ad42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ad44:	4b30      	ldr	r3, [pc, #192]	@ (800ae08 <HAL_RCC_OscConfig+0x764>)
 800ad46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ad48:	4b31      	ldr	r3, [pc, #196]	@ (800ae10 <HAL_RCC_OscConfig+0x76c>)
 800ad4a:	4013      	ands	r3, r2
 800ad4c:	687a      	ldr	r2, [r7, #4]
 800ad4e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800ad50:	00d2      	lsls	r2, r2, #3
 800ad52:	492d      	ldr	r1, [pc, #180]	@ (800ae08 <HAL_RCC_OscConfig+0x764>)
 800ad54:	4313      	orrs	r3, r2
 800ad56:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800ad58:	4b2b      	ldr	r3, [pc, #172]	@ (800ae08 <HAL_RCC_OscConfig+0x764>)
 800ad5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad5c:	f023 020c 	bic.w	r2, r3, #12
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad64:	4928      	ldr	r1, [pc, #160]	@ (800ae08 <HAL_RCC_OscConfig+0x764>)
 800ad66:	4313      	orrs	r3, r2
 800ad68:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800ad6a:	4b27      	ldr	r3, [pc, #156]	@ (800ae08 <HAL_RCC_OscConfig+0x764>)
 800ad6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad6e:	f023 0202 	bic.w	r2, r3, #2
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad76:	4924      	ldr	r1, [pc, #144]	@ (800ae08 <HAL_RCC_OscConfig+0x764>)
 800ad78:	4313      	orrs	r3, r2
 800ad7a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800ad7c:	4b22      	ldr	r3, [pc, #136]	@ (800ae08 <HAL_RCC_OscConfig+0x764>)
 800ad7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad80:	4a21      	ldr	r2, [pc, #132]	@ (800ae08 <HAL_RCC_OscConfig+0x764>)
 800ad82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ad86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad88:	4b1f      	ldr	r3, [pc, #124]	@ (800ae08 <HAL_RCC_OscConfig+0x764>)
 800ad8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad8c:	4a1e      	ldr	r2, [pc, #120]	@ (800ae08 <HAL_RCC_OscConfig+0x764>)
 800ad8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ad92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800ad94:	4b1c      	ldr	r3, [pc, #112]	@ (800ae08 <HAL_RCC_OscConfig+0x764>)
 800ad96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad98:	4a1b      	ldr	r2, [pc, #108]	@ (800ae08 <HAL_RCC_OscConfig+0x764>)
 800ad9a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ad9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800ada0:	4b19      	ldr	r3, [pc, #100]	@ (800ae08 <HAL_RCC_OscConfig+0x764>)
 800ada2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ada4:	4a18      	ldr	r2, [pc, #96]	@ (800ae08 <HAL_RCC_OscConfig+0x764>)
 800ada6:	f043 0301 	orr.w	r3, r3, #1
 800adaa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800adac:	4b16      	ldr	r3, [pc, #88]	@ (800ae08 <HAL_RCC_OscConfig+0x764>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	4a15      	ldr	r2, [pc, #84]	@ (800ae08 <HAL_RCC_OscConfig+0x764>)
 800adb2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800adb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800adb8:	f7fb fd66 	bl	8006888 <HAL_GetTick>
 800adbc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800adbe:	e008      	b.n	800add2 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800adc0:	f7fb fd62 	bl	8006888 <HAL_GetTick>
 800adc4:	4602      	mov	r2, r0
 800adc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adc8:	1ad3      	subs	r3, r2, r3
 800adca:	2b02      	cmp	r3, #2
 800adcc:	d901      	bls.n	800add2 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800adce:	2303      	movs	r3, #3
 800add0:	e091      	b.n	800aef6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800add2:	4b0d      	ldr	r3, [pc, #52]	@ (800ae08 <HAL_RCC_OscConfig+0x764>)
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800adda:	2b00      	cmp	r3, #0
 800addc:	d0f0      	beq.n	800adc0 <HAL_RCC_OscConfig+0x71c>
 800adde:	e089      	b.n	800aef4 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ade0:	4b09      	ldr	r3, [pc, #36]	@ (800ae08 <HAL_RCC_OscConfig+0x764>)
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	4a08      	ldr	r2, [pc, #32]	@ (800ae08 <HAL_RCC_OscConfig+0x764>)
 800ade6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800adea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800adec:	f7fb fd4c 	bl	8006888 <HAL_GetTick>
 800adf0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800adf2:	e00f      	b.n	800ae14 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800adf4:	f7fb fd48 	bl	8006888 <HAL_GetTick>
 800adf8:	4602      	mov	r2, r0
 800adfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adfc:	1ad3      	subs	r3, r2, r3
 800adfe:	2b02      	cmp	r3, #2
 800ae00:	d908      	bls.n	800ae14 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800ae02:	2303      	movs	r3, #3
 800ae04:	e077      	b.n	800aef6 <HAL_RCC_OscConfig+0x852>
 800ae06:	bf00      	nop
 800ae08:	58024400 	.word	0x58024400
 800ae0c:	fffffc0c 	.word	0xfffffc0c
 800ae10:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ae14:	4b3a      	ldr	r3, [pc, #232]	@ (800af00 <HAL_RCC_OscConfig+0x85c>)
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d1e9      	bne.n	800adf4 <HAL_RCC_OscConfig+0x750>
 800ae20:	e068      	b.n	800aef4 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800ae22:	4b37      	ldr	r3, [pc, #220]	@ (800af00 <HAL_RCC_OscConfig+0x85c>)
 800ae24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae26:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800ae28:	4b35      	ldr	r3, [pc, #212]	@ (800af00 <HAL_RCC_OscConfig+0x85c>)
 800ae2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae2c:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae32:	2b01      	cmp	r3, #1
 800ae34:	d031      	beq.n	800ae9a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ae36:	693b      	ldr	r3, [r7, #16]
 800ae38:	f003 0203 	and.w	r2, r3, #3
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ae40:	429a      	cmp	r2, r3
 800ae42:	d12a      	bne.n	800ae9a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ae44:	693b      	ldr	r3, [r7, #16]
 800ae46:	091b      	lsrs	r3, r3, #4
 800ae48:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ae50:	429a      	cmp	r2, r3
 800ae52:	d122      	bne.n	800ae9a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae5e:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ae60:	429a      	cmp	r2, r3
 800ae62:	d11a      	bne.n	800ae9a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	0a5b      	lsrs	r3, r3, #9
 800ae68:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae70:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ae72:	429a      	cmp	r2, r3
 800ae74:	d111      	bne.n	800ae9a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	0c1b      	lsrs	r3, r3, #16
 800ae7a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae82:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ae84:	429a      	cmp	r2, r3
 800ae86:	d108      	bne.n	800ae9a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	0e1b      	lsrs	r3, r3, #24
 800ae8c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae94:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ae96:	429a      	cmp	r2, r3
 800ae98:	d001      	beq.n	800ae9e <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800ae9a:	2301      	movs	r3, #1
 800ae9c:	e02b      	b.n	800aef6 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800ae9e:	4b18      	ldr	r3, [pc, #96]	@ (800af00 <HAL_RCC_OscConfig+0x85c>)
 800aea0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aea2:	08db      	lsrs	r3, r3, #3
 800aea4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aea8:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aeae:	693a      	ldr	r2, [r7, #16]
 800aeb0:	429a      	cmp	r2, r3
 800aeb2:	d01f      	beq.n	800aef4 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800aeb4:	4b12      	ldr	r3, [pc, #72]	@ (800af00 <HAL_RCC_OscConfig+0x85c>)
 800aeb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aeb8:	4a11      	ldr	r2, [pc, #68]	@ (800af00 <HAL_RCC_OscConfig+0x85c>)
 800aeba:	f023 0301 	bic.w	r3, r3, #1
 800aebe:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800aec0:	f7fb fce2 	bl	8006888 <HAL_GetTick>
 800aec4:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800aec6:	bf00      	nop
 800aec8:	f7fb fcde 	bl	8006888 <HAL_GetTick>
 800aecc:	4602      	mov	r2, r0
 800aece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aed0:	4293      	cmp	r3, r2
 800aed2:	d0f9      	beq.n	800aec8 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800aed4:	4b0a      	ldr	r3, [pc, #40]	@ (800af00 <HAL_RCC_OscConfig+0x85c>)
 800aed6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aed8:	4b0a      	ldr	r3, [pc, #40]	@ (800af04 <HAL_RCC_OscConfig+0x860>)
 800aeda:	4013      	ands	r3, r2
 800aedc:	687a      	ldr	r2, [r7, #4]
 800aede:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800aee0:	00d2      	lsls	r2, r2, #3
 800aee2:	4907      	ldr	r1, [pc, #28]	@ (800af00 <HAL_RCC_OscConfig+0x85c>)
 800aee4:	4313      	orrs	r3, r2
 800aee6:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800aee8:	4b05      	ldr	r3, [pc, #20]	@ (800af00 <HAL_RCC_OscConfig+0x85c>)
 800aeea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aeec:	4a04      	ldr	r2, [pc, #16]	@ (800af00 <HAL_RCC_OscConfig+0x85c>)
 800aeee:	f043 0301 	orr.w	r3, r3, #1
 800aef2:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800aef4:	2300      	movs	r3, #0
}
 800aef6:	4618      	mov	r0, r3
 800aef8:	3730      	adds	r7, #48	@ 0x30
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bd80      	pop	{r7, pc}
 800aefe:	bf00      	nop
 800af00:	58024400 	.word	0x58024400
 800af04:	ffff0007 	.word	0xffff0007

0800af08 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b086      	sub	sp, #24
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
 800af10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d101      	bne.n	800af1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800af18:	2301      	movs	r3, #1
 800af1a:	e19c      	b.n	800b256 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800af1c:	4b8a      	ldr	r3, [pc, #552]	@ (800b148 <HAL_RCC_ClockConfig+0x240>)
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	f003 030f 	and.w	r3, r3, #15
 800af24:	683a      	ldr	r2, [r7, #0]
 800af26:	429a      	cmp	r2, r3
 800af28:	d910      	bls.n	800af4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800af2a:	4b87      	ldr	r3, [pc, #540]	@ (800b148 <HAL_RCC_ClockConfig+0x240>)
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	f023 020f 	bic.w	r2, r3, #15
 800af32:	4985      	ldr	r1, [pc, #532]	@ (800b148 <HAL_RCC_ClockConfig+0x240>)
 800af34:	683b      	ldr	r3, [r7, #0]
 800af36:	4313      	orrs	r3, r2
 800af38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800af3a:	4b83      	ldr	r3, [pc, #524]	@ (800b148 <HAL_RCC_ClockConfig+0x240>)
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	f003 030f 	and.w	r3, r3, #15
 800af42:	683a      	ldr	r2, [r7, #0]
 800af44:	429a      	cmp	r2, r3
 800af46:	d001      	beq.n	800af4c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800af48:	2301      	movs	r3, #1
 800af4a:	e184      	b.n	800b256 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	f003 0304 	and.w	r3, r3, #4
 800af54:	2b00      	cmp	r3, #0
 800af56:	d010      	beq.n	800af7a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	691a      	ldr	r2, [r3, #16]
 800af5c:	4b7b      	ldr	r3, [pc, #492]	@ (800b14c <HAL_RCC_ClockConfig+0x244>)
 800af5e:	699b      	ldr	r3, [r3, #24]
 800af60:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800af64:	429a      	cmp	r2, r3
 800af66:	d908      	bls.n	800af7a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800af68:	4b78      	ldr	r3, [pc, #480]	@ (800b14c <HAL_RCC_ClockConfig+0x244>)
 800af6a:	699b      	ldr	r3, [r3, #24]
 800af6c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	691b      	ldr	r3, [r3, #16]
 800af74:	4975      	ldr	r1, [pc, #468]	@ (800b14c <HAL_RCC_ClockConfig+0x244>)
 800af76:	4313      	orrs	r3, r2
 800af78:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	f003 0308 	and.w	r3, r3, #8
 800af82:	2b00      	cmp	r3, #0
 800af84:	d010      	beq.n	800afa8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	695a      	ldr	r2, [r3, #20]
 800af8a:	4b70      	ldr	r3, [pc, #448]	@ (800b14c <HAL_RCC_ClockConfig+0x244>)
 800af8c:	69db      	ldr	r3, [r3, #28]
 800af8e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800af92:	429a      	cmp	r2, r3
 800af94:	d908      	bls.n	800afa8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800af96:	4b6d      	ldr	r3, [pc, #436]	@ (800b14c <HAL_RCC_ClockConfig+0x244>)
 800af98:	69db      	ldr	r3, [r3, #28]
 800af9a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	695b      	ldr	r3, [r3, #20]
 800afa2:	496a      	ldr	r1, [pc, #424]	@ (800b14c <HAL_RCC_ClockConfig+0x244>)
 800afa4:	4313      	orrs	r3, r2
 800afa6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	f003 0310 	and.w	r3, r3, #16
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d010      	beq.n	800afd6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	699a      	ldr	r2, [r3, #24]
 800afb8:	4b64      	ldr	r3, [pc, #400]	@ (800b14c <HAL_RCC_ClockConfig+0x244>)
 800afba:	69db      	ldr	r3, [r3, #28]
 800afbc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800afc0:	429a      	cmp	r2, r3
 800afc2:	d908      	bls.n	800afd6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800afc4:	4b61      	ldr	r3, [pc, #388]	@ (800b14c <HAL_RCC_ClockConfig+0x244>)
 800afc6:	69db      	ldr	r3, [r3, #28]
 800afc8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	699b      	ldr	r3, [r3, #24]
 800afd0:	495e      	ldr	r1, [pc, #376]	@ (800b14c <HAL_RCC_ClockConfig+0x244>)
 800afd2:	4313      	orrs	r3, r2
 800afd4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	f003 0320 	and.w	r3, r3, #32
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d010      	beq.n	800b004 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	69da      	ldr	r2, [r3, #28]
 800afe6:	4b59      	ldr	r3, [pc, #356]	@ (800b14c <HAL_RCC_ClockConfig+0x244>)
 800afe8:	6a1b      	ldr	r3, [r3, #32]
 800afea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800afee:	429a      	cmp	r2, r3
 800aff0:	d908      	bls.n	800b004 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800aff2:	4b56      	ldr	r3, [pc, #344]	@ (800b14c <HAL_RCC_ClockConfig+0x244>)
 800aff4:	6a1b      	ldr	r3, [r3, #32]
 800aff6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	69db      	ldr	r3, [r3, #28]
 800affe:	4953      	ldr	r1, [pc, #332]	@ (800b14c <HAL_RCC_ClockConfig+0x244>)
 800b000:	4313      	orrs	r3, r2
 800b002:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	f003 0302 	and.w	r3, r3, #2
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d010      	beq.n	800b032 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	68da      	ldr	r2, [r3, #12]
 800b014:	4b4d      	ldr	r3, [pc, #308]	@ (800b14c <HAL_RCC_ClockConfig+0x244>)
 800b016:	699b      	ldr	r3, [r3, #24]
 800b018:	f003 030f 	and.w	r3, r3, #15
 800b01c:	429a      	cmp	r2, r3
 800b01e:	d908      	bls.n	800b032 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b020:	4b4a      	ldr	r3, [pc, #296]	@ (800b14c <HAL_RCC_ClockConfig+0x244>)
 800b022:	699b      	ldr	r3, [r3, #24]
 800b024:	f023 020f 	bic.w	r2, r3, #15
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	68db      	ldr	r3, [r3, #12]
 800b02c:	4947      	ldr	r1, [pc, #284]	@ (800b14c <HAL_RCC_ClockConfig+0x244>)
 800b02e:	4313      	orrs	r3, r2
 800b030:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	f003 0301 	and.w	r3, r3, #1
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d055      	beq.n	800b0ea <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800b03e:	4b43      	ldr	r3, [pc, #268]	@ (800b14c <HAL_RCC_ClockConfig+0x244>)
 800b040:	699b      	ldr	r3, [r3, #24]
 800b042:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	689b      	ldr	r3, [r3, #8]
 800b04a:	4940      	ldr	r1, [pc, #256]	@ (800b14c <HAL_RCC_ClockConfig+0x244>)
 800b04c:	4313      	orrs	r3, r2
 800b04e:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	685b      	ldr	r3, [r3, #4]
 800b054:	2b02      	cmp	r3, #2
 800b056:	d107      	bne.n	800b068 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b058:	4b3c      	ldr	r3, [pc, #240]	@ (800b14c <HAL_RCC_ClockConfig+0x244>)
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b060:	2b00      	cmp	r3, #0
 800b062:	d121      	bne.n	800b0a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b064:	2301      	movs	r3, #1
 800b066:	e0f6      	b.n	800b256 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	685b      	ldr	r3, [r3, #4]
 800b06c:	2b03      	cmp	r3, #3
 800b06e:	d107      	bne.n	800b080 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b070:	4b36      	ldr	r3, [pc, #216]	@ (800b14c <HAL_RCC_ClockConfig+0x244>)
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d115      	bne.n	800b0a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b07c:	2301      	movs	r3, #1
 800b07e:	e0ea      	b.n	800b256 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	685b      	ldr	r3, [r3, #4]
 800b084:	2b01      	cmp	r3, #1
 800b086:	d107      	bne.n	800b098 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b088:	4b30      	ldr	r3, [pc, #192]	@ (800b14c <HAL_RCC_ClockConfig+0x244>)
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b090:	2b00      	cmp	r3, #0
 800b092:	d109      	bne.n	800b0a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b094:	2301      	movs	r3, #1
 800b096:	e0de      	b.n	800b256 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b098:	4b2c      	ldr	r3, [pc, #176]	@ (800b14c <HAL_RCC_ClockConfig+0x244>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	f003 0304 	and.w	r3, r3, #4
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d101      	bne.n	800b0a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b0a4:	2301      	movs	r3, #1
 800b0a6:	e0d6      	b.n	800b256 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b0a8:	4b28      	ldr	r3, [pc, #160]	@ (800b14c <HAL_RCC_ClockConfig+0x244>)
 800b0aa:	691b      	ldr	r3, [r3, #16]
 800b0ac:	f023 0207 	bic.w	r2, r3, #7
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	685b      	ldr	r3, [r3, #4]
 800b0b4:	4925      	ldr	r1, [pc, #148]	@ (800b14c <HAL_RCC_ClockConfig+0x244>)
 800b0b6:	4313      	orrs	r3, r2
 800b0b8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b0ba:	f7fb fbe5 	bl	8006888 <HAL_GetTick>
 800b0be:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b0c0:	e00a      	b.n	800b0d8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b0c2:	f7fb fbe1 	bl	8006888 <HAL_GetTick>
 800b0c6:	4602      	mov	r2, r0
 800b0c8:	697b      	ldr	r3, [r7, #20]
 800b0ca:	1ad3      	subs	r3, r2, r3
 800b0cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b0d0:	4293      	cmp	r3, r2
 800b0d2:	d901      	bls.n	800b0d8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800b0d4:	2303      	movs	r3, #3
 800b0d6:	e0be      	b.n	800b256 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b0d8:	4b1c      	ldr	r3, [pc, #112]	@ (800b14c <HAL_RCC_ClockConfig+0x244>)
 800b0da:	691b      	ldr	r3, [r3, #16]
 800b0dc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	685b      	ldr	r3, [r3, #4]
 800b0e4:	00db      	lsls	r3, r3, #3
 800b0e6:	429a      	cmp	r2, r3
 800b0e8:	d1eb      	bne.n	800b0c2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	f003 0302 	and.w	r3, r3, #2
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d010      	beq.n	800b118 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	68da      	ldr	r2, [r3, #12]
 800b0fa:	4b14      	ldr	r3, [pc, #80]	@ (800b14c <HAL_RCC_ClockConfig+0x244>)
 800b0fc:	699b      	ldr	r3, [r3, #24]
 800b0fe:	f003 030f 	and.w	r3, r3, #15
 800b102:	429a      	cmp	r2, r3
 800b104:	d208      	bcs.n	800b118 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b106:	4b11      	ldr	r3, [pc, #68]	@ (800b14c <HAL_RCC_ClockConfig+0x244>)
 800b108:	699b      	ldr	r3, [r3, #24]
 800b10a:	f023 020f 	bic.w	r2, r3, #15
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	68db      	ldr	r3, [r3, #12]
 800b112:	490e      	ldr	r1, [pc, #56]	@ (800b14c <HAL_RCC_ClockConfig+0x244>)
 800b114:	4313      	orrs	r3, r2
 800b116:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b118:	4b0b      	ldr	r3, [pc, #44]	@ (800b148 <HAL_RCC_ClockConfig+0x240>)
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	f003 030f 	and.w	r3, r3, #15
 800b120:	683a      	ldr	r2, [r7, #0]
 800b122:	429a      	cmp	r2, r3
 800b124:	d214      	bcs.n	800b150 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b126:	4b08      	ldr	r3, [pc, #32]	@ (800b148 <HAL_RCC_ClockConfig+0x240>)
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	f023 020f 	bic.w	r2, r3, #15
 800b12e:	4906      	ldr	r1, [pc, #24]	@ (800b148 <HAL_RCC_ClockConfig+0x240>)
 800b130:	683b      	ldr	r3, [r7, #0]
 800b132:	4313      	orrs	r3, r2
 800b134:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b136:	4b04      	ldr	r3, [pc, #16]	@ (800b148 <HAL_RCC_ClockConfig+0x240>)
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	f003 030f 	and.w	r3, r3, #15
 800b13e:	683a      	ldr	r2, [r7, #0]
 800b140:	429a      	cmp	r2, r3
 800b142:	d005      	beq.n	800b150 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b144:	2301      	movs	r3, #1
 800b146:	e086      	b.n	800b256 <HAL_RCC_ClockConfig+0x34e>
 800b148:	52002000 	.word	0x52002000
 800b14c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	f003 0304 	and.w	r3, r3, #4
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d010      	beq.n	800b17e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	691a      	ldr	r2, [r3, #16]
 800b160:	4b3f      	ldr	r3, [pc, #252]	@ (800b260 <HAL_RCC_ClockConfig+0x358>)
 800b162:	699b      	ldr	r3, [r3, #24]
 800b164:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b168:	429a      	cmp	r2, r3
 800b16a:	d208      	bcs.n	800b17e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b16c:	4b3c      	ldr	r3, [pc, #240]	@ (800b260 <HAL_RCC_ClockConfig+0x358>)
 800b16e:	699b      	ldr	r3, [r3, #24]
 800b170:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	691b      	ldr	r3, [r3, #16]
 800b178:	4939      	ldr	r1, [pc, #228]	@ (800b260 <HAL_RCC_ClockConfig+0x358>)
 800b17a:	4313      	orrs	r3, r2
 800b17c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	f003 0308 	and.w	r3, r3, #8
 800b186:	2b00      	cmp	r3, #0
 800b188:	d010      	beq.n	800b1ac <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	695a      	ldr	r2, [r3, #20]
 800b18e:	4b34      	ldr	r3, [pc, #208]	@ (800b260 <HAL_RCC_ClockConfig+0x358>)
 800b190:	69db      	ldr	r3, [r3, #28]
 800b192:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b196:	429a      	cmp	r2, r3
 800b198:	d208      	bcs.n	800b1ac <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b19a:	4b31      	ldr	r3, [pc, #196]	@ (800b260 <HAL_RCC_ClockConfig+0x358>)
 800b19c:	69db      	ldr	r3, [r3, #28]
 800b19e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	695b      	ldr	r3, [r3, #20]
 800b1a6:	492e      	ldr	r1, [pc, #184]	@ (800b260 <HAL_RCC_ClockConfig+0x358>)
 800b1a8:	4313      	orrs	r3, r2
 800b1aa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	f003 0310 	and.w	r3, r3, #16
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d010      	beq.n	800b1da <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	699a      	ldr	r2, [r3, #24]
 800b1bc:	4b28      	ldr	r3, [pc, #160]	@ (800b260 <HAL_RCC_ClockConfig+0x358>)
 800b1be:	69db      	ldr	r3, [r3, #28]
 800b1c0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b1c4:	429a      	cmp	r2, r3
 800b1c6:	d208      	bcs.n	800b1da <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b1c8:	4b25      	ldr	r3, [pc, #148]	@ (800b260 <HAL_RCC_ClockConfig+0x358>)
 800b1ca:	69db      	ldr	r3, [r3, #28]
 800b1cc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	699b      	ldr	r3, [r3, #24]
 800b1d4:	4922      	ldr	r1, [pc, #136]	@ (800b260 <HAL_RCC_ClockConfig+0x358>)
 800b1d6:	4313      	orrs	r3, r2
 800b1d8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	f003 0320 	and.w	r3, r3, #32
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d010      	beq.n	800b208 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	69da      	ldr	r2, [r3, #28]
 800b1ea:	4b1d      	ldr	r3, [pc, #116]	@ (800b260 <HAL_RCC_ClockConfig+0x358>)
 800b1ec:	6a1b      	ldr	r3, [r3, #32]
 800b1ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b1f2:	429a      	cmp	r2, r3
 800b1f4:	d208      	bcs.n	800b208 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b1f6:	4b1a      	ldr	r3, [pc, #104]	@ (800b260 <HAL_RCC_ClockConfig+0x358>)
 800b1f8:	6a1b      	ldr	r3, [r3, #32]
 800b1fa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	69db      	ldr	r3, [r3, #28]
 800b202:	4917      	ldr	r1, [pc, #92]	@ (800b260 <HAL_RCC_ClockConfig+0x358>)
 800b204:	4313      	orrs	r3, r2
 800b206:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800b208:	f000 f834 	bl	800b274 <HAL_RCC_GetSysClockFreq>
 800b20c:	4602      	mov	r2, r0
 800b20e:	4b14      	ldr	r3, [pc, #80]	@ (800b260 <HAL_RCC_ClockConfig+0x358>)
 800b210:	699b      	ldr	r3, [r3, #24]
 800b212:	0a1b      	lsrs	r3, r3, #8
 800b214:	f003 030f 	and.w	r3, r3, #15
 800b218:	4912      	ldr	r1, [pc, #72]	@ (800b264 <HAL_RCC_ClockConfig+0x35c>)
 800b21a:	5ccb      	ldrb	r3, [r1, r3]
 800b21c:	f003 031f 	and.w	r3, r3, #31
 800b220:	fa22 f303 	lsr.w	r3, r2, r3
 800b224:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800b226:	4b0e      	ldr	r3, [pc, #56]	@ (800b260 <HAL_RCC_ClockConfig+0x358>)
 800b228:	699b      	ldr	r3, [r3, #24]
 800b22a:	f003 030f 	and.w	r3, r3, #15
 800b22e:	4a0d      	ldr	r2, [pc, #52]	@ (800b264 <HAL_RCC_ClockConfig+0x35c>)
 800b230:	5cd3      	ldrb	r3, [r2, r3]
 800b232:	f003 031f 	and.w	r3, r3, #31
 800b236:	693a      	ldr	r2, [r7, #16]
 800b238:	fa22 f303 	lsr.w	r3, r2, r3
 800b23c:	4a0a      	ldr	r2, [pc, #40]	@ (800b268 <HAL_RCC_ClockConfig+0x360>)
 800b23e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b240:	4a0a      	ldr	r2, [pc, #40]	@ (800b26c <HAL_RCC_ClockConfig+0x364>)
 800b242:	693b      	ldr	r3, [r7, #16]
 800b244:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800b246:	4b0a      	ldr	r3, [pc, #40]	@ (800b270 <HAL_RCC_ClockConfig+0x368>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	4618      	mov	r0, r3
 800b24c:	f7f8 f936 	bl	80034bc <HAL_InitTick>
 800b250:	4603      	mov	r3, r0
 800b252:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b254:	7bfb      	ldrb	r3, [r7, #15]
}
 800b256:	4618      	mov	r0, r3
 800b258:	3718      	adds	r7, #24
 800b25a:	46bd      	mov	sp, r7
 800b25c:	bd80      	pop	{r7, pc}
 800b25e:	bf00      	nop
 800b260:	58024400 	.word	0x58024400
 800b264:	08019dd4 	.word	0x08019dd4
 800b268:	24000004 	.word	0x24000004
 800b26c:	24000000 	.word	0x24000000
 800b270:	240000a4 	.word	0x240000a4

0800b274 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b274:	b480      	push	{r7}
 800b276:	b089      	sub	sp, #36	@ 0x24
 800b278:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b27a:	4bb3      	ldr	r3, [pc, #716]	@ (800b548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b27c:	691b      	ldr	r3, [r3, #16]
 800b27e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b282:	2b18      	cmp	r3, #24
 800b284:	f200 8155 	bhi.w	800b532 <HAL_RCC_GetSysClockFreq+0x2be>
 800b288:	a201      	add	r2, pc, #4	@ (adr r2, 800b290 <HAL_RCC_GetSysClockFreq+0x1c>)
 800b28a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b28e:	bf00      	nop
 800b290:	0800b2f5 	.word	0x0800b2f5
 800b294:	0800b533 	.word	0x0800b533
 800b298:	0800b533 	.word	0x0800b533
 800b29c:	0800b533 	.word	0x0800b533
 800b2a0:	0800b533 	.word	0x0800b533
 800b2a4:	0800b533 	.word	0x0800b533
 800b2a8:	0800b533 	.word	0x0800b533
 800b2ac:	0800b533 	.word	0x0800b533
 800b2b0:	0800b31b 	.word	0x0800b31b
 800b2b4:	0800b533 	.word	0x0800b533
 800b2b8:	0800b533 	.word	0x0800b533
 800b2bc:	0800b533 	.word	0x0800b533
 800b2c0:	0800b533 	.word	0x0800b533
 800b2c4:	0800b533 	.word	0x0800b533
 800b2c8:	0800b533 	.word	0x0800b533
 800b2cc:	0800b533 	.word	0x0800b533
 800b2d0:	0800b321 	.word	0x0800b321
 800b2d4:	0800b533 	.word	0x0800b533
 800b2d8:	0800b533 	.word	0x0800b533
 800b2dc:	0800b533 	.word	0x0800b533
 800b2e0:	0800b533 	.word	0x0800b533
 800b2e4:	0800b533 	.word	0x0800b533
 800b2e8:	0800b533 	.word	0x0800b533
 800b2ec:	0800b533 	.word	0x0800b533
 800b2f0:	0800b327 	.word	0x0800b327
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b2f4:	4b94      	ldr	r3, [pc, #592]	@ (800b548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	f003 0320 	and.w	r3, r3, #32
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d009      	beq.n	800b314 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b300:	4b91      	ldr	r3, [pc, #580]	@ (800b548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	08db      	lsrs	r3, r3, #3
 800b306:	f003 0303 	and.w	r3, r3, #3
 800b30a:	4a90      	ldr	r2, [pc, #576]	@ (800b54c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b30c:	fa22 f303 	lsr.w	r3, r2, r3
 800b310:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800b312:	e111      	b.n	800b538 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b314:	4b8d      	ldr	r3, [pc, #564]	@ (800b54c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b316:	61bb      	str	r3, [r7, #24]
      break;
 800b318:	e10e      	b.n	800b538 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800b31a:	4b8d      	ldr	r3, [pc, #564]	@ (800b550 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b31c:	61bb      	str	r3, [r7, #24]
      break;
 800b31e:	e10b      	b.n	800b538 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800b320:	4b8c      	ldr	r3, [pc, #560]	@ (800b554 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b322:	61bb      	str	r3, [r7, #24]
      break;
 800b324:	e108      	b.n	800b538 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b326:	4b88      	ldr	r3, [pc, #544]	@ (800b548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b32a:	f003 0303 	and.w	r3, r3, #3
 800b32e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b330:	4b85      	ldr	r3, [pc, #532]	@ (800b548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b334:	091b      	lsrs	r3, r3, #4
 800b336:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b33a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b33c:	4b82      	ldr	r3, [pc, #520]	@ (800b548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b33e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b340:	f003 0301 	and.w	r3, r3, #1
 800b344:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b346:	4b80      	ldr	r3, [pc, #512]	@ (800b548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b348:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b34a:	08db      	lsrs	r3, r3, #3
 800b34c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b350:	68fa      	ldr	r2, [r7, #12]
 800b352:	fb02 f303 	mul.w	r3, r2, r3
 800b356:	ee07 3a90 	vmov	s15, r3
 800b35a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b35e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800b362:	693b      	ldr	r3, [r7, #16]
 800b364:	2b00      	cmp	r3, #0
 800b366:	f000 80e1 	beq.w	800b52c <HAL_RCC_GetSysClockFreq+0x2b8>
 800b36a:	697b      	ldr	r3, [r7, #20]
 800b36c:	2b02      	cmp	r3, #2
 800b36e:	f000 8083 	beq.w	800b478 <HAL_RCC_GetSysClockFreq+0x204>
 800b372:	697b      	ldr	r3, [r7, #20]
 800b374:	2b02      	cmp	r3, #2
 800b376:	f200 80a1 	bhi.w	800b4bc <HAL_RCC_GetSysClockFreq+0x248>
 800b37a:	697b      	ldr	r3, [r7, #20]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d003      	beq.n	800b388 <HAL_RCC_GetSysClockFreq+0x114>
 800b380:	697b      	ldr	r3, [r7, #20]
 800b382:	2b01      	cmp	r3, #1
 800b384:	d056      	beq.n	800b434 <HAL_RCC_GetSysClockFreq+0x1c0>
 800b386:	e099      	b.n	800b4bc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b388:	4b6f      	ldr	r3, [pc, #444]	@ (800b548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	f003 0320 	and.w	r3, r3, #32
 800b390:	2b00      	cmp	r3, #0
 800b392:	d02d      	beq.n	800b3f0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b394:	4b6c      	ldr	r3, [pc, #432]	@ (800b548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	08db      	lsrs	r3, r3, #3
 800b39a:	f003 0303 	and.w	r3, r3, #3
 800b39e:	4a6b      	ldr	r2, [pc, #428]	@ (800b54c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b3a0:	fa22 f303 	lsr.w	r3, r2, r3
 800b3a4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	ee07 3a90 	vmov	s15, r3
 800b3ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3b0:	693b      	ldr	r3, [r7, #16]
 800b3b2:	ee07 3a90 	vmov	s15, r3
 800b3b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3be:	4b62      	ldr	r3, [pc, #392]	@ (800b548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b3c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3c6:	ee07 3a90 	vmov	s15, r3
 800b3ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3ce:	ed97 6a02 	vldr	s12, [r7, #8]
 800b3d2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800b558 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b3d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b3e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3ea:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800b3ee:	e087      	b.n	800b500 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b3f0:	693b      	ldr	r3, [r7, #16]
 800b3f2:	ee07 3a90 	vmov	s15, r3
 800b3f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3fa:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800b55c <HAL_RCC_GetSysClockFreq+0x2e8>
 800b3fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b402:	4b51      	ldr	r3, [pc, #324]	@ (800b548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b40a:	ee07 3a90 	vmov	s15, r3
 800b40e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b412:	ed97 6a02 	vldr	s12, [r7, #8]
 800b416:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800b558 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b41a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b41e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b422:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b426:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b42a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b42e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b432:	e065      	b.n	800b500 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b434:	693b      	ldr	r3, [r7, #16]
 800b436:	ee07 3a90 	vmov	s15, r3
 800b43a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b43e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800b560 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b442:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b446:	4b40      	ldr	r3, [pc, #256]	@ (800b548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b44a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b44e:	ee07 3a90 	vmov	s15, r3
 800b452:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b456:	ed97 6a02 	vldr	s12, [r7, #8]
 800b45a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800b558 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b45e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b462:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b466:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b46a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b46e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b472:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b476:	e043      	b.n	800b500 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b478:	693b      	ldr	r3, [r7, #16]
 800b47a:	ee07 3a90 	vmov	s15, r3
 800b47e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b482:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800b564 <HAL_RCC_GetSysClockFreq+0x2f0>
 800b486:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b48a:	4b2f      	ldr	r3, [pc, #188]	@ (800b548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b48c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b48e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b492:	ee07 3a90 	vmov	s15, r3
 800b496:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b49a:	ed97 6a02 	vldr	s12, [r7, #8]
 800b49e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800b558 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b4a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b4ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b4ba:	e021      	b.n	800b500 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b4bc:	693b      	ldr	r3, [r7, #16]
 800b4be:	ee07 3a90 	vmov	s15, r3
 800b4c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4c6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800b560 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b4ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4ce:	4b1e      	ldr	r3, [pc, #120]	@ (800b548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b4d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4d6:	ee07 3a90 	vmov	s15, r3
 800b4da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4de:	ed97 6a02 	vldr	s12, [r7, #8]
 800b4e2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800b558 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b4e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b4f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b4fe:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b500:	4b11      	ldr	r3, [pc, #68]	@ (800b548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b504:	0a5b      	lsrs	r3, r3, #9
 800b506:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b50a:	3301      	adds	r3, #1
 800b50c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	ee07 3a90 	vmov	s15, r3
 800b514:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b518:	edd7 6a07 	vldr	s13, [r7, #28]
 800b51c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b520:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b524:	ee17 3a90 	vmov	r3, s15
 800b528:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800b52a:	e005      	b.n	800b538 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800b52c:	2300      	movs	r3, #0
 800b52e:	61bb      	str	r3, [r7, #24]
      break;
 800b530:	e002      	b.n	800b538 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800b532:	4b07      	ldr	r3, [pc, #28]	@ (800b550 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b534:	61bb      	str	r3, [r7, #24]
      break;
 800b536:	bf00      	nop
  }

  return sysclockfreq;
 800b538:	69bb      	ldr	r3, [r7, #24]
}
 800b53a:	4618      	mov	r0, r3
 800b53c:	3724      	adds	r7, #36	@ 0x24
 800b53e:	46bd      	mov	sp, r7
 800b540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b544:	4770      	bx	lr
 800b546:	bf00      	nop
 800b548:	58024400 	.word	0x58024400
 800b54c:	03d09000 	.word	0x03d09000
 800b550:	003d0900 	.word	0x003d0900
 800b554:	016e3600 	.word	0x016e3600
 800b558:	46000000 	.word	0x46000000
 800b55c:	4c742400 	.word	0x4c742400
 800b560:	4a742400 	.word	0x4a742400
 800b564:	4bb71b00 	.word	0x4bb71b00

0800b568 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b082      	sub	sp, #8
 800b56c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800b56e:	f7ff fe81 	bl	800b274 <HAL_RCC_GetSysClockFreq>
 800b572:	4602      	mov	r2, r0
 800b574:	4b10      	ldr	r3, [pc, #64]	@ (800b5b8 <HAL_RCC_GetHCLKFreq+0x50>)
 800b576:	699b      	ldr	r3, [r3, #24]
 800b578:	0a1b      	lsrs	r3, r3, #8
 800b57a:	f003 030f 	and.w	r3, r3, #15
 800b57e:	490f      	ldr	r1, [pc, #60]	@ (800b5bc <HAL_RCC_GetHCLKFreq+0x54>)
 800b580:	5ccb      	ldrb	r3, [r1, r3]
 800b582:	f003 031f 	and.w	r3, r3, #31
 800b586:	fa22 f303 	lsr.w	r3, r2, r3
 800b58a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800b58c:	4b0a      	ldr	r3, [pc, #40]	@ (800b5b8 <HAL_RCC_GetHCLKFreq+0x50>)
 800b58e:	699b      	ldr	r3, [r3, #24]
 800b590:	f003 030f 	and.w	r3, r3, #15
 800b594:	4a09      	ldr	r2, [pc, #36]	@ (800b5bc <HAL_RCC_GetHCLKFreq+0x54>)
 800b596:	5cd3      	ldrb	r3, [r2, r3]
 800b598:	f003 031f 	and.w	r3, r3, #31
 800b59c:	687a      	ldr	r2, [r7, #4]
 800b59e:	fa22 f303 	lsr.w	r3, r2, r3
 800b5a2:	4a07      	ldr	r2, [pc, #28]	@ (800b5c0 <HAL_RCC_GetHCLKFreq+0x58>)
 800b5a4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b5a6:	4a07      	ldr	r2, [pc, #28]	@ (800b5c4 <HAL_RCC_GetHCLKFreq+0x5c>)
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b5ac:	4b04      	ldr	r3, [pc, #16]	@ (800b5c0 <HAL_RCC_GetHCLKFreq+0x58>)
 800b5ae:	681b      	ldr	r3, [r3, #0]
}
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	3708      	adds	r7, #8
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	bd80      	pop	{r7, pc}
 800b5b8:	58024400 	.word	0x58024400
 800b5bc:	08019dd4 	.word	0x08019dd4
 800b5c0:	24000004 	.word	0x24000004
 800b5c4:	24000000 	.word	0x24000000

0800b5c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800b5cc:	f7ff ffcc 	bl	800b568 <HAL_RCC_GetHCLKFreq>
 800b5d0:	4602      	mov	r2, r0
 800b5d2:	4b06      	ldr	r3, [pc, #24]	@ (800b5ec <HAL_RCC_GetPCLK1Freq+0x24>)
 800b5d4:	69db      	ldr	r3, [r3, #28]
 800b5d6:	091b      	lsrs	r3, r3, #4
 800b5d8:	f003 0307 	and.w	r3, r3, #7
 800b5dc:	4904      	ldr	r1, [pc, #16]	@ (800b5f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b5de:	5ccb      	ldrb	r3, [r1, r3]
 800b5e0:	f003 031f 	and.w	r3, r3, #31
 800b5e4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	bd80      	pop	{r7, pc}
 800b5ec:	58024400 	.word	0x58024400
 800b5f0:	08019dd4 	.word	0x08019dd4

0800b5f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800b5f8:	f7ff ffb6 	bl	800b568 <HAL_RCC_GetHCLKFreq>
 800b5fc:	4602      	mov	r2, r0
 800b5fe:	4b06      	ldr	r3, [pc, #24]	@ (800b618 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b600:	69db      	ldr	r3, [r3, #28]
 800b602:	0a1b      	lsrs	r3, r3, #8
 800b604:	f003 0307 	and.w	r3, r3, #7
 800b608:	4904      	ldr	r1, [pc, #16]	@ (800b61c <HAL_RCC_GetPCLK2Freq+0x28>)
 800b60a:	5ccb      	ldrb	r3, [r1, r3]
 800b60c:	f003 031f 	and.w	r3, r3, #31
 800b610:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800b614:	4618      	mov	r0, r3
 800b616:	bd80      	pop	{r7, pc}
 800b618:	58024400 	.word	0x58024400
 800b61c:	08019dd4 	.word	0x08019dd4

0800b620 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b620:	b480      	push	{r7}
 800b622:	b083      	sub	sp, #12
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
 800b628:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	223f      	movs	r2, #63	@ 0x3f
 800b62e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b630:	4b1a      	ldr	r3, [pc, #104]	@ (800b69c <HAL_RCC_GetClockConfig+0x7c>)
 800b632:	691b      	ldr	r3, [r3, #16]
 800b634:	f003 0207 	and.w	r2, r3, #7
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 800b63c:	4b17      	ldr	r3, [pc, #92]	@ (800b69c <HAL_RCC_GetClockConfig+0x7c>)
 800b63e:	699b      	ldr	r3, [r3, #24]
 800b640:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 800b648:	4b14      	ldr	r3, [pc, #80]	@ (800b69c <HAL_RCC_GetClockConfig+0x7c>)
 800b64a:	699b      	ldr	r3, [r3, #24]
 800b64c:	f003 020f 	and.w	r2, r3, #15
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 800b654:	4b11      	ldr	r3, [pc, #68]	@ (800b69c <HAL_RCC_GetClockConfig+0x7c>)
 800b656:	699b      	ldr	r3, [r3, #24]
 800b658:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 800b660:	4b0e      	ldr	r3, [pc, #56]	@ (800b69c <HAL_RCC_GetClockConfig+0x7c>)
 800b662:	69db      	ldr	r3, [r3, #28]
 800b664:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 800b66c:	4b0b      	ldr	r3, [pc, #44]	@ (800b69c <HAL_RCC_GetClockConfig+0x7c>)
 800b66e:	69db      	ldr	r3, [r3, #28]
 800b670:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 800b678:	4b08      	ldr	r3, [pc, #32]	@ (800b69c <HAL_RCC_GetClockConfig+0x7c>)
 800b67a:	6a1b      	ldr	r3, [r3, #32]
 800b67c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b684:	4b06      	ldr	r3, [pc, #24]	@ (800b6a0 <HAL_RCC_GetClockConfig+0x80>)
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	f003 020f 	and.w	r2, r3, #15
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	601a      	str	r2, [r3, #0]
}
 800b690:	bf00      	nop
 800b692:	370c      	adds	r7, #12
 800b694:	46bd      	mov	sp, r7
 800b696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69a:	4770      	bx	lr
 800b69c:	58024400 	.word	0x58024400
 800b6a0:	52002000 	.word	0x52002000

0800b6a4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b6a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b6a8:	b0c8      	sub	sp, #288	@ 0x120
 800b6aa:	af00      	add	r7, sp, #0
 800b6ac:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b6bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6c4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800b6c8:	2500      	movs	r5, #0
 800b6ca:	ea54 0305 	orrs.w	r3, r4, r5
 800b6ce:	d049      	beq.n	800b764 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b6d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b6d6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b6da:	d02f      	beq.n	800b73c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b6dc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b6e0:	d828      	bhi.n	800b734 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b6e2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b6e6:	d01a      	beq.n	800b71e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b6e8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b6ec:	d822      	bhi.n	800b734 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d003      	beq.n	800b6fa <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b6f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b6f6:	d007      	beq.n	800b708 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b6f8:	e01c      	b.n	800b734 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b6fa:	4ba7      	ldr	r3, [pc, #668]	@ (800b998 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b6fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6fe:	4aa6      	ldr	r2, [pc, #664]	@ (800b998 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b700:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b704:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b706:	e01a      	b.n	800b73e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b708:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b70c:	3308      	adds	r3, #8
 800b70e:	2102      	movs	r1, #2
 800b710:	4618      	mov	r0, r3
 800b712:	f001 fc43 	bl	800cf9c <RCCEx_PLL2_Config>
 800b716:	4603      	mov	r3, r0
 800b718:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b71c:	e00f      	b.n	800b73e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b71e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b722:	3328      	adds	r3, #40	@ 0x28
 800b724:	2102      	movs	r1, #2
 800b726:	4618      	mov	r0, r3
 800b728:	f001 fcea 	bl	800d100 <RCCEx_PLL3_Config>
 800b72c:	4603      	mov	r3, r0
 800b72e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b732:	e004      	b.n	800b73e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b734:	2301      	movs	r3, #1
 800b736:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b73a:	e000      	b.n	800b73e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b73c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b73e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b742:	2b00      	cmp	r3, #0
 800b744:	d10a      	bne.n	800b75c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b746:	4b94      	ldr	r3, [pc, #592]	@ (800b998 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b748:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b74a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b74e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b752:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b754:	4a90      	ldr	r2, [pc, #576]	@ (800b998 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b756:	430b      	orrs	r3, r1
 800b758:	6513      	str	r3, [r2, #80]	@ 0x50
 800b75a:	e003      	b.n	800b764 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b75c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b760:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b764:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b76c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800b770:	f04f 0900 	mov.w	r9, #0
 800b774:	ea58 0309 	orrs.w	r3, r8, r9
 800b778:	d047      	beq.n	800b80a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800b77a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b77e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b780:	2b04      	cmp	r3, #4
 800b782:	d82a      	bhi.n	800b7da <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b784:	a201      	add	r2, pc, #4	@ (adr r2, 800b78c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b78a:	bf00      	nop
 800b78c:	0800b7a1 	.word	0x0800b7a1
 800b790:	0800b7af 	.word	0x0800b7af
 800b794:	0800b7c5 	.word	0x0800b7c5
 800b798:	0800b7e3 	.word	0x0800b7e3
 800b79c:	0800b7e3 	.word	0x0800b7e3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b7a0:	4b7d      	ldr	r3, [pc, #500]	@ (800b998 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b7a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7a4:	4a7c      	ldr	r2, [pc, #496]	@ (800b998 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b7a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b7aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b7ac:	e01a      	b.n	800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b7ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7b2:	3308      	adds	r3, #8
 800b7b4:	2100      	movs	r1, #0
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	f001 fbf0 	bl	800cf9c <RCCEx_PLL2_Config>
 800b7bc:	4603      	mov	r3, r0
 800b7be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b7c2:	e00f      	b.n	800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b7c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7c8:	3328      	adds	r3, #40	@ 0x28
 800b7ca:	2100      	movs	r1, #0
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	f001 fc97 	bl	800d100 <RCCEx_PLL3_Config>
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b7d8:	e004      	b.n	800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b7da:	2301      	movs	r3, #1
 800b7dc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b7e0:	e000      	b.n	800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b7e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b7e4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d10a      	bne.n	800b802 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b7ec:	4b6a      	ldr	r3, [pc, #424]	@ (800b998 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b7ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b7f0:	f023 0107 	bic.w	r1, r3, #7
 800b7f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b7fa:	4a67      	ldr	r2, [pc, #412]	@ (800b998 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b7fc:	430b      	orrs	r3, r1
 800b7fe:	6513      	str	r3, [r2, #80]	@ 0x50
 800b800:	e003      	b.n	800b80a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b802:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b806:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800b80a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b80e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b812:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800b816:	f04f 0b00 	mov.w	fp, #0
 800b81a:	ea5a 030b 	orrs.w	r3, sl, fp
 800b81e:	d054      	beq.n	800b8ca <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800b820:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b824:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b826:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800b82a:	d036      	beq.n	800b89a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800b82c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800b830:	d82f      	bhi.n	800b892 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b832:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b836:	d032      	beq.n	800b89e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b838:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b83c:	d829      	bhi.n	800b892 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b83e:	2bc0      	cmp	r3, #192	@ 0xc0
 800b840:	d02f      	beq.n	800b8a2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800b842:	2bc0      	cmp	r3, #192	@ 0xc0
 800b844:	d825      	bhi.n	800b892 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b846:	2b80      	cmp	r3, #128	@ 0x80
 800b848:	d018      	beq.n	800b87c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800b84a:	2b80      	cmp	r3, #128	@ 0x80
 800b84c:	d821      	bhi.n	800b892 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d002      	beq.n	800b858 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800b852:	2b40      	cmp	r3, #64	@ 0x40
 800b854:	d007      	beq.n	800b866 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800b856:	e01c      	b.n	800b892 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b858:	4b4f      	ldr	r3, [pc, #316]	@ (800b998 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b85a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b85c:	4a4e      	ldr	r2, [pc, #312]	@ (800b998 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b85e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b862:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800b864:	e01e      	b.n	800b8a4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b866:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b86a:	3308      	adds	r3, #8
 800b86c:	2100      	movs	r1, #0
 800b86e:	4618      	mov	r0, r3
 800b870:	f001 fb94 	bl	800cf9c <RCCEx_PLL2_Config>
 800b874:	4603      	mov	r3, r0
 800b876:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800b87a:	e013      	b.n	800b8a4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b87c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b880:	3328      	adds	r3, #40	@ 0x28
 800b882:	2100      	movs	r1, #0
 800b884:	4618      	mov	r0, r3
 800b886:	f001 fc3b 	bl	800d100 <RCCEx_PLL3_Config>
 800b88a:	4603      	mov	r3, r0
 800b88c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800b890:	e008      	b.n	800b8a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b892:	2301      	movs	r3, #1
 800b894:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b898:	e004      	b.n	800b8a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800b89a:	bf00      	nop
 800b89c:	e002      	b.n	800b8a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800b89e:	bf00      	nop
 800b8a0:	e000      	b.n	800b8a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800b8a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b8a4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d10a      	bne.n	800b8c2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800b8ac:	4b3a      	ldr	r3, [pc, #232]	@ (800b998 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b8ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b8b0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800b8b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b8ba:	4a37      	ldr	r2, [pc, #220]	@ (800b998 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b8bc:	430b      	orrs	r3, r1
 800b8be:	6513      	str	r3, [r2, #80]	@ 0x50
 800b8c0:	e003      	b.n	800b8ca <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8c2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b8c6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800b8ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8d2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800b8d6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800b8da:	2300      	movs	r3, #0
 800b8dc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800b8e0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800b8e4:	460b      	mov	r3, r1
 800b8e6:	4313      	orrs	r3, r2
 800b8e8:	d05c      	beq.n	800b9a4 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800b8ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b8f0:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800b8f4:	d03b      	beq.n	800b96e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b8f6:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800b8fa:	d834      	bhi.n	800b966 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b8fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b900:	d037      	beq.n	800b972 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800b902:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b906:	d82e      	bhi.n	800b966 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b908:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800b90c:	d033      	beq.n	800b976 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b90e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800b912:	d828      	bhi.n	800b966 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b914:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b918:	d01a      	beq.n	800b950 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800b91a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b91e:	d822      	bhi.n	800b966 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b920:	2b00      	cmp	r3, #0
 800b922:	d003      	beq.n	800b92c <HAL_RCCEx_PeriphCLKConfig+0x288>
 800b924:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b928:	d007      	beq.n	800b93a <HAL_RCCEx_PeriphCLKConfig+0x296>
 800b92a:	e01c      	b.n	800b966 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b92c:	4b1a      	ldr	r3, [pc, #104]	@ (800b998 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b92e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b930:	4a19      	ldr	r2, [pc, #100]	@ (800b998 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b932:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b936:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800b938:	e01e      	b.n	800b978 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b93a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b93e:	3308      	adds	r3, #8
 800b940:	2100      	movs	r1, #0
 800b942:	4618      	mov	r0, r3
 800b944:	f001 fb2a 	bl	800cf9c <RCCEx_PLL2_Config>
 800b948:	4603      	mov	r3, r0
 800b94a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800b94e:	e013      	b.n	800b978 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b950:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b954:	3328      	adds	r3, #40	@ 0x28
 800b956:	2100      	movs	r1, #0
 800b958:	4618      	mov	r0, r3
 800b95a:	f001 fbd1 	bl	800d100 <RCCEx_PLL3_Config>
 800b95e:	4603      	mov	r3, r0
 800b960:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800b964:	e008      	b.n	800b978 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b966:	2301      	movs	r3, #1
 800b968:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b96c:	e004      	b.n	800b978 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800b96e:	bf00      	nop
 800b970:	e002      	b.n	800b978 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800b972:	bf00      	nop
 800b974:	e000      	b.n	800b978 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800b976:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b978:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d10d      	bne.n	800b99c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800b980:	4b05      	ldr	r3, [pc, #20]	@ (800b998 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b982:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b984:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 800b988:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b98c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b98e:	4a02      	ldr	r2, [pc, #8]	@ (800b998 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b990:	430b      	orrs	r3, r1
 800b992:	6513      	str	r3, [r2, #80]	@ 0x50
 800b994:	e006      	b.n	800b9a4 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800b996:	bf00      	nop
 800b998:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b99c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b9a0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800b9a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ac:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800b9b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800b9ba:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800b9be:	460b      	mov	r3, r1
 800b9c0:	4313      	orrs	r3, r2
 800b9c2:	d03a      	beq.n	800ba3a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800b9c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b9ca:	2b30      	cmp	r3, #48	@ 0x30
 800b9cc:	d01f      	beq.n	800ba0e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800b9ce:	2b30      	cmp	r3, #48	@ 0x30
 800b9d0:	d819      	bhi.n	800ba06 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800b9d2:	2b20      	cmp	r3, #32
 800b9d4:	d00c      	beq.n	800b9f0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800b9d6:	2b20      	cmp	r3, #32
 800b9d8:	d815      	bhi.n	800ba06 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d019      	beq.n	800ba12 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800b9de:	2b10      	cmp	r3, #16
 800b9e0:	d111      	bne.n	800ba06 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b9e2:	4bae      	ldr	r3, [pc, #696]	@ (800bc9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b9e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9e6:	4aad      	ldr	r2, [pc, #692]	@ (800bc9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b9e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b9ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800b9ee:	e011      	b.n	800ba14 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b9f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9f4:	3308      	adds	r3, #8
 800b9f6:	2102      	movs	r1, #2
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	f001 facf 	bl	800cf9c <RCCEx_PLL2_Config>
 800b9fe:	4603      	mov	r3, r0
 800ba00:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800ba04:	e006      	b.n	800ba14 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ba06:	2301      	movs	r3, #1
 800ba08:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800ba0c:	e002      	b.n	800ba14 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800ba0e:	bf00      	nop
 800ba10:	e000      	b.n	800ba14 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800ba12:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba14:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d10a      	bne.n	800ba32 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800ba1c:	4b9f      	ldr	r3, [pc, #636]	@ (800bc9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ba1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ba20:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800ba24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ba2a:	4a9c      	ldr	r2, [pc, #624]	@ (800bc9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ba2c:	430b      	orrs	r3, r1
 800ba2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ba30:	e003      	b.n	800ba3a <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba32:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ba36:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800ba3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba42:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800ba46:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800ba50:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800ba54:	460b      	mov	r3, r1
 800ba56:	4313      	orrs	r3, r2
 800ba58:	d051      	beq.n	800bafe <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800ba5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ba60:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ba64:	d035      	beq.n	800bad2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800ba66:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ba6a:	d82e      	bhi.n	800baca <HAL_RCCEx_PeriphCLKConfig+0x426>
 800ba6c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ba70:	d031      	beq.n	800bad6 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800ba72:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ba76:	d828      	bhi.n	800baca <HAL_RCCEx_PeriphCLKConfig+0x426>
 800ba78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ba7c:	d01a      	beq.n	800bab4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800ba7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ba82:	d822      	bhi.n	800baca <HAL_RCCEx_PeriphCLKConfig+0x426>
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d003      	beq.n	800ba90 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800ba88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ba8c:	d007      	beq.n	800ba9e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800ba8e:	e01c      	b.n	800baca <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba90:	4b82      	ldr	r3, [pc, #520]	@ (800bc9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ba92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba94:	4a81      	ldr	r2, [pc, #516]	@ (800bc9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ba96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ba9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ba9c:	e01c      	b.n	800bad8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ba9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800baa2:	3308      	adds	r3, #8
 800baa4:	2100      	movs	r1, #0
 800baa6:	4618      	mov	r0, r3
 800baa8:	f001 fa78 	bl	800cf9c <RCCEx_PLL2_Config>
 800baac:	4603      	mov	r3, r0
 800baae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bab2:	e011      	b.n	800bad8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bab4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bab8:	3328      	adds	r3, #40	@ 0x28
 800baba:	2100      	movs	r1, #0
 800babc:	4618      	mov	r0, r3
 800babe:	f001 fb1f 	bl	800d100 <RCCEx_PLL3_Config>
 800bac2:	4603      	mov	r3, r0
 800bac4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bac8:	e006      	b.n	800bad8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800baca:	2301      	movs	r3, #1
 800bacc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800bad0:	e002      	b.n	800bad8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800bad2:	bf00      	nop
 800bad4:	e000      	b.n	800bad8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800bad6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bad8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800badc:	2b00      	cmp	r3, #0
 800bade:	d10a      	bne.n	800baf6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800bae0:	4b6e      	ldr	r3, [pc, #440]	@ (800bc9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bae2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bae4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800bae8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800baec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800baee:	4a6b      	ldr	r2, [pc, #428]	@ (800bc9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800baf0:	430b      	orrs	r3, r1
 800baf2:	6513      	str	r3, [r2, #80]	@ 0x50
 800baf4:	e003      	b.n	800bafe <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800baf6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bafa:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800bafe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb06:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800bb0a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800bb0e:	2300      	movs	r3, #0
 800bb10:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800bb14:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800bb18:	460b      	mov	r3, r1
 800bb1a:	4313      	orrs	r3, r2
 800bb1c:	d053      	beq.n	800bbc6 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800bb1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb22:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bb24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800bb28:	d033      	beq.n	800bb92 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800bb2a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800bb2e:	d82c      	bhi.n	800bb8a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800bb30:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800bb34:	d02f      	beq.n	800bb96 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800bb36:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800bb3a:	d826      	bhi.n	800bb8a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800bb3c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800bb40:	d02b      	beq.n	800bb9a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bb42:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800bb46:	d820      	bhi.n	800bb8a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800bb48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bb4c:	d012      	beq.n	800bb74 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800bb4e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bb52:	d81a      	bhi.n	800bb8a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d022      	beq.n	800bb9e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 800bb58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bb5c:	d115      	bne.n	800bb8a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bb5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb62:	3308      	adds	r3, #8
 800bb64:	2101      	movs	r1, #1
 800bb66:	4618      	mov	r0, r3
 800bb68:	f001 fa18 	bl	800cf9c <RCCEx_PLL2_Config>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800bb72:	e015      	b.n	800bba0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bb74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb78:	3328      	adds	r3, #40	@ 0x28
 800bb7a:	2101      	movs	r1, #1
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	f001 fabf 	bl	800d100 <RCCEx_PLL3_Config>
 800bb82:	4603      	mov	r3, r0
 800bb84:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800bb88:	e00a      	b.n	800bba0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bb8a:	2301      	movs	r3, #1
 800bb8c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800bb90:	e006      	b.n	800bba0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800bb92:	bf00      	nop
 800bb94:	e004      	b.n	800bba0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800bb96:	bf00      	nop
 800bb98:	e002      	b.n	800bba0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800bb9a:	bf00      	nop
 800bb9c:	e000      	b.n	800bba0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800bb9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bba0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d10a      	bne.n	800bbbe <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800bba8:	4b3c      	ldr	r3, [pc, #240]	@ (800bc9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bbaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bbac:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800bbb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbb4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bbb6:	4a39      	ldr	r2, [pc, #228]	@ (800bc9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bbb8:	430b      	orrs	r3, r1
 800bbba:	6513      	str	r3, [r2, #80]	@ 0x50
 800bbbc:	e003      	b.n	800bbc6 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbbe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bbc2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800bbc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbce:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800bbd2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800bbdc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800bbe0:	460b      	mov	r3, r1
 800bbe2:	4313      	orrs	r3, r2
 800bbe4:	d060      	beq.n	800bca8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800bbe6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800bbee:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800bbf2:	d039      	beq.n	800bc68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800bbf4:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800bbf8:	d832      	bhi.n	800bc60 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800bbfa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bbfe:	d035      	beq.n	800bc6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800bc00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bc04:	d82c      	bhi.n	800bc60 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800bc06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bc0a:	d031      	beq.n	800bc70 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800bc0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bc10:	d826      	bhi.n	800bc60 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800bc12:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bc16:	d02d      	beq.n	800bc74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800bc18:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bc1c:	d820      	bhi.n	800bc60 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800bc1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bc22:	d012      	beq.n	800bc4a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800bc24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bc28:	d81a      	bhi.n	800bc60 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d024      	beq.n	800bc78 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800bc2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bc32:	d115      	bne.n	800bc60 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bc34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc38:	3308      	adds	r3, #8
 800bc3a:	2101      	movs	r1, #1
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	f001 f9ad 	bl	800cf9c <RCCEx_PLL2_Config>
 800bc42:	4603      	mov	r3, r0
 800bc44:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800bc48:	e017      	b.n	800bc7a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bc4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc4e:	3328      	adds	r3, #40	@ 0x28
 800bc50:	2101      	movs	r1, #1
 800bc52:	4618      	mov	r0, r3
 800bc54:	f001 fa54 	bl	800d100 <RCCEx_PLL3_Config>
 800bc58:	4603      	mov	r3, r0
 800bc5a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800bc5e:	e00c      	b.n	800bc7a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800bc60:	2301      	movs	r3, #1
 800bc62:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800bc66:	e008      	b.n	800bc7a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bc68:	bf00      	nop
 800bc6a:	e006      	b.n	800bc7a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bc6c:	bf00      	nop
 800bc6e:	e004      	b.n	800bc7a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bc70:	bf00      	nop
 800bc72:	e002      	b.n	800bc7a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bc74:	bf00      	nop
 800bc76:	e000      	b.n	800bc7a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bc78:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc7a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d10e      	bne.n	800bca0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800bc82:	4b06      	ldr	r3, [pc, #24]	@ (800bc9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bc84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bc86:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800bc8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc8e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800bc92:	4a02      	ldr	r2, [pc, #8]	@ (800bc9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bc94:	430b      	orrs	r3, r1
 800bc96:	6593      	str	r3, [r2, #88]	@ 0x58
 800bc98:	e006      	b.n	800bca8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800bc9a:	bf00      	nop
 800bc9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bca0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bca4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bca8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bcac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcb0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800bcb4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800bcb8:	2300      	movs	r3, #0
 800bcba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800bcbe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800bcc2:	460b      	mov	r3, r1
 800bcc4:	4313      	orrs	r3, r2
 800bcc6:	d037      	beq.n	800bd38 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800bcc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bccc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bcce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bcd2:	d00e      	beq.n	800bcf2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800bcd4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bcd8:	d816      	bhi.n	800bd08 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d018      	beq.n	800bd10 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800bcde:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bce2:	d111      	bne.n	800bd08 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bce4:	4bc4      	ldr	r3, [pc, #784]	@ (800bff8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bce8:	4ac3      	ldr	r2, [pc, #780]	@ (800bff8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bcea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bcee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bcf0:	e00f      	b.n	800bd12 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bcf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bcf6:	3308      	adds	r3, #8
 800bcf8:	2101      	movs	r1, #1
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	f001 f94e 	bl	800cf9c <RCCEx_PLL2_Config>
 800bd00:	4603      	mov	r3, r0
 800bd02:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bd06:	e004      	b.n	800bd12 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bd08:	2301      	movs	r3, #1
 800bd0a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800bd0e:	e000      	b.n	800bd12 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800bd10:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd12:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d10a      	bne.n	800bd30 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bd1a:	4bb7      	ldr	r3, [pc, #732]	@ (800bff8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bd1e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800bd22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd26:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bd28:	4ab3      	ldr	r2, [pc, #716]	@ (800bff8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd2a:	430b      	orrs	r3, r1
 800bd2c:	6513      	str	r3, [r2, #80]	@ 0x50
 800bd2e:	e003      	b.n	800bd38 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd30:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bd34:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800bd38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd40:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800bd44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800bd48:	2300      	movs	r3, #0
 800bd4a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800bd4e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800bd52:	460b      	mov	r3, r1
 800bd54:	4313      	orrs	r3, r2
 800bd56:	d039      	beq.n	800bdcc <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800bd58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bd5e:	2b03      	cmp	r3, #3
 800bd60:	d81c      	bhi.n	800bd9c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800bd62:	a201      	add	r2, pc, #4	@ (adr r2, 800bd68 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800bd64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd68:	0800bda5 	.word	0x0800bda5
 800bd6c:	0800bd79 	.word	0x0800bd79
 800bd70:	0800bd87 	.word	0x0800bd87
 800bd74:	0800bda5 	.word	0x0800bda5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bd78:	4b9f      	ldr	r3, [pc, #636]	@ (800bff8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd7c:	4a9e      	ldr	r2, [pc, #632]	@ (800bff8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bd82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800bd84:	e00f      	b.n	800bda6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bd86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd8a:	3308      	adds	r3, #8
 800bd8c:	2102      	movs	r1, #2
 800bd8e:	4618      	mov	r0, r3
 800bd90:	f001 f904 	bl	800cf9c <RCCEx_PLL2_Config>
 800bd94:	4603      	mov	r3, r0
 800bd96:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800bd9a:	e004      	b.n	800bda6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800bd9c:	2301      	movs	r3, #1
 800bd9e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800bda2:	e000      	b.n	800bda6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800bda4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bda6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d10a      	bne.n	800bdc4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800bdae:	4b92      	ldr	r3, [pc, #584]	@ (800bff8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bdb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bdb2:	f023 0103 	bic.w	r1, r3, #3
 800bdb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bdba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bdbc:	4a8e      	ldr	r2, [pc, #568]	@ (800bff8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bdbe:	430b      	orrs	r3, r1
 800bdc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800bdc2:	e003      	b.n	800bdcc <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdc4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bdc8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bdcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bdd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdd4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800bdd8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800bddc:	2300      	movs	r3, #0
 800bdde:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800bde2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800bde6:	460b      	mov	r3, r1
 800bde8:	4313      	orrs	r3, r2
 800bdea:	f000 8099 	beq.w	800bf20 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bdee:	4b83      	ldr	r3, [pc, #524]	@ (800bffc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	4a82      	ldr	r2, [pc, #520]	@ (800bffc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bdf4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bdf8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bdfa:	f7fa fd45 	bl	8006888 <HAL_GetTick>
 800bdfe:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800be02:	e00b      	b.n	800be1c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800be04:	f7fa fd40 	bl	8006888 <HAL_GetTick>
 800be08:	4602      	mov	r2, r0
 800be0a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800be0e:	1ad3      	subs	r3, r2, r3
 800be10:	2b64      	cmp	r3, #100	@ 0x64
 800be12:	d903      	bls.n	800be1c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800be14:	2303      	movs	r3, #3
 800be16:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800be1a:	e005      	b.n	800be28 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800be1c:	4b77      	ldr	r3, [pc, #476]	@ (800bffc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800be24:	2b00      	cmp	r3, #0
 800be26:	d0ed      	beq.n	800be04 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800be28:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d173      	bne.n	800bf18 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800be30:	4b71      	ldr	r3, [pc, #452]	@ (800bff8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be32:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800be34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be38:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800be3c:	4053      	eors	r3, r2
 800be3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800be42:	2b00      	cmp	r3, #0
 800be44:	d015      	beq.n	800be72 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800be46:	4b6c      	ldr	r3, [pc, #432]	@ (800bff8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800be4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800be4e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800be52:	4b69      	ldr	r3, [pc, #420]	@ (800bff8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800be56:	4a68      	ldr	r2, [pc, #416]	@ (800bff8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800be5c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800be5e:	4b66      	ldr	r3, [pc, #408]	@ (800bff8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800be62:	4a65      	ldr	r2, [pc, #404]	@ (800bff8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800be68:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800be6a:	4a63      	ldr	r2, [pc, #396]	@ (800bff8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800be70:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800be72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be76:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800be7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800be7e:	d118      	bne.n	800beb2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800be80:	f7fa fd02 	bl	8006888 <HAL_GetTick>
 800be84:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800be88:	e00d      	b.n	800bea6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800be8a:	f7fa fcfd 	bl	8006888 <HAL_GetTick>
 800be8e:	4602      	mov	r2, r0
 800be90:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800be94:	1ad2      	subs	r2, r2, r3
 800be96:	f241 3388 	movw	r3, #5000	@ 0x1388
 800be9a:	429a      	cmp	r2, r3
 800be9c:	d903      	bls.n	800bea6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800be9e:	2303      	movs	r3, #3
 800bea0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 800bea4:	e005      	b.n	800beb2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bea6:	4b54      	ldr	r3, [pc, #336]	@ (800bff8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bea8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800beaa:	f003 0302 	and.w	r3, r3, #2
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d0eb      	beq.n	800be8a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800beb2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d129      	bne.n	800bf0e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800beba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bebe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800bec2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bec6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800beca:	d10e      	bne.n	800beea <HAL_RCCEx_PeriphCLKConfig+0x846>
 800becc:	4b4a      	ldr	r3, [pc, #296]	@ (800bff8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bece:	691b      	ldr	r3, [r3, #16]
 800bed0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800bed4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bed8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800bedc:	091a      	lsrs	r2, r3, #4
 800bede:	4b48      	ldr	r3, [pc, #288]	@ (800c000 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800bee0:	4013      	ands	r3, r2
 800bee2:	4a45      	ldr	r2, [pc, #276]	@ (800bff8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bee4:	430b      	orrs	r3, r1
 800bee6:	6113      	str	r3, [r2, #16]
 800bee8:	e005      	b.n	800bef6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800beea:	4b43      	ldr	r3, [pc, #268]	@ (800bff8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800beec:	691b      	ldr	r3, [r3, #16]
 800beee:	4a42      	ldr	r2, [pc, #264]	@ (800bff8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bef0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800bef4:	6113      	str	r3, [r2, #16]
 800bef6:	4b40      	ldr	r3, [pc, #256]	@ (800bff8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bef8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800befa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800befe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800bf02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bf06:	4a3c      	ldr	r2, [pc, #240]	@ (800bff8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf08:	430b      	orrs	r3, r1
 800bf0a:	6713      	str	r3, [r2, #112]	@ 0x70
 800bf0c:	e008      	b.n	800bf20 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bf0e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bf12:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 800bf16:	e003      	b.n	800bf20 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf18:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bf1c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800bf20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bf24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf28:	f002 0301 	and.w	r3, r2, #1
 800bf2c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800bf30:	2300      	movs	r3, #0
 800bf32:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800bf36:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800bf3a:	460b      	mov	r3, r1
 800bf3c:	4313      	orrs	r3, r2
 800bf3e:	f000 8090 	beq.w	800c062 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800bf42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bf46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bf4a:	2b28      	cmp	r3, #40	@ 0x28
 800bf4c:	d870      	bhi.n	800c030 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800bf4e:	a201      	add	r2, pc, #4	@ (adr r2, 800bf54 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800bf50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf54:	0800c039 	.word	0x0800c039
 800bf58:	0800c031 	.word	0x0800c031
 800bf5c:	0800c031 	.word	0x0800c031
 800bf60:	0800c031 	.word	0x0800c031
 800bf64:	0800c031 	.word	0x0800c031
 800bf68:	0800c031 	.word	0x0800c031
 800bf6c:	0800c031 	.word	0x0800c031
 800bf70:	0800c031 	.word	0x0800c031
 800bf74:	0800c005 	.word	0x0800c005
 800bf78:	0800c031 	.word	0x0800c031
 800bf7c:	0800c031 	.word	0x0800c031
 800bf80:	0800c031 	.word	0x0800c031
 800bf84:	0800c031 	.word	0x0800c031
 800bf88:	0800c031 	.word	0x0800c031
 800bf8c:	0800c031 	.word	0x0800c031
 800bf90:	0800c031 	.word	0x0800c031
 800bf94:	0800c01b 	.word	0x0800c01b
 800bf98:	0800c031 	.word	0x0800c031
 800bf9c:	0800c031 	.word	0x0800c031
 800bfa0:	0800c031 	.word	0x0800c031
 800bfa4:	0800c031 	.word	0x0800c031
 800bfa8:	0800c031 	.word	0x0800c031
 800bfac:	0800c031 	.word	0x0800c031
 800bfb0:	0800c031 	.word	0x0800c031
 800bfb4:	0800c039 	.word	0x0800c039
 800bfb8:	0800c031 	.word	0x0800c031
 800bfbc:	0800c031 	.word	0x0800c031
 800bfc0:	0800c031 	.word	0x0800c031
 800bfc4:	0800c031 	.word	0x0800c031
 800bfc8:	0800c031 	.word	0x0800c031
 800bfcc:	0800c031 	.word	0x0800c031
 800bfd0:	0800c031 	.word	0x0800c031
 800bfd4:	0800c039 	.word	0x0800c039
 800bfd8:	0800c031 	.word	0x0800c031
 800bfdc:	0800c031 	.word	0x0800c031
 800bfe0:	0800c031 	.word	0x0800c031
 800bfe4:	0800c031 	.word	0x0800c031
 800bfe8:	0800c031 	.word	0x0800c031
 800bfec:	0800c031 	.word	0x0800c031
 800bff0:	0800c031 	.word	0x0800c031
 800bff4:	0800c039 	.word	0x0800c039
 800bff8:	58024400 	.word	0x58024400
 800bffc:	58024800 	.word	0x58024800
 800c000:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c004:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c008:	3308      	adds	r3, #8
 800c00a:	2101      	movs	r1, #1
 800c00c:	4618      	mov	r0, r3
 800c00e:	f000 ffc5 	bl	800cf9c <RCCEx_PLL2_Config>
 800c012:	4603      	mov	r3, r0
 800c014:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c018:	e00f      	b.n	800c03a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c01a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c01e:	3328      	adds	r3, #40	@ 0x28
 800c020:	2101      	movs	r1, #1
 800c022:	4618      	mov	r0, r3
 800c024:	f001 f86c 	bl	800d100 <RCCEx_PLL3_Config>
 800c028:	4603      	mov	r3, r0
 800c02a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c02e:	e004      	b.n	800c03a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c030:	2301      	movs	r3, #1
 800c032:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c036:	e000      	b.n	800c03a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800c038:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c03a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d10b      	bne.n	800c05a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800c042:	4bc0      	ldr	r3, [pc, #768]	@ (800c344 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c044:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c046:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800c04a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c04e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c052:	4abc      	ldr	r2, [pc, #752]	@ (800c344 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c054:	430b      	orrs	r3, r1
 800c056:	6553      	str	r3, [r2, #84]	@ 0x54
 800c058:	e003      	b.n	800c062 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c05a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c05e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c062:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c06a:	f002 0302 	and.w	r3, r2, #2
 800c06e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c072:	2300      	movs	r3, #0
 800c074:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800c078:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800c07c:	460b      	mov	r3, r1
 800c07e:	4313      	orrs	r3, r2
 800c080:	d043      	beq.n	800c10a <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800c082:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c086:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c08a:	2b05      	cmp	r3, #5
 800c08c:	d824      	bhi.n	800c0d8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800c08e:	a201      	add	r2, pc, #4	@ (adr r2, 800c094 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800c090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c094:	0800c0e1 	.word	0x0800c0e1
 800c098:	0800c0ad 	.word	0x0800c0ad
 800c09c:	0800c0c3 	.word	0x0800c0c3
 800c0a0:	0800c0e1 	.word	0x0800c0e1
 800c0a4:	0800c0e1 	.word	0x0800c0e1
 800c0a8:	0800c0e1 	.word	0x0800c0e1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c0ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c0b0:	3308      	adds	r3, #8
 800c0b2:	2101      	movs	r1, #1
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	f000 ff71 	bl	800cf9c <RCCEx_PLL2_Config>
 800c0ba:	4603      	mov	r3, r0
 800c0bc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c0c0:	e00f      	b.n	800c0e2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c0c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c0c6:	3328      	adds	r3, #40	@ 0x28
 800c0c8:	2101      	movs	r1, #1
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	f001 f818 	bl	800d100 <RCCEx_PLL3_Config>
 800c0d0:	4603      	mov	r3, r0
 800c0d2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c0d6:	e004      	b.n	800c0e2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c0d8:	2301      	movs	r3, #1
 800c0da:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c0de:	e000      	b.n	800c0e2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 800c0e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c0e2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d10b      	bne.n	800c102 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c0ea:	4b96      	ldr	r3, [pc, #600]	@ (800c344 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c0ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c0ee:	f023 0107 	bic.w	r1, r3, #7
 800c0f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c0f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c0fa:	4a92      	ldr	r2, [pc, #584]	@ (800c344 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c0fc:	430b      	orrs	r3, r1
 800c0fe:	6553      	str	r3, [r2, #84]	@ 0x54
 800c100:	e003      	b.n	800c10a <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c102:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c106:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c10a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c10e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c112:	f002 0304 	and.w	r3, r2, #4
 800c116:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c11a:	2300      	movs	r3, #0
 800c11c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c120:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800c124:	460b      	mov	r3, r1
 800c126:	4313      	orrs	r3, r2
 800c128:	d043      	beq.n	800c1b2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800c12a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c12e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c132:	2b05      	cmp	r3, #5
 800c134:	d824      	bhi.n	800c180 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800c136:	a201      	add	r2, pc, #4	@ (adr r2, 800c13c <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 800c138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c13c:	0800c189 	.word	0x0800c189
 800c140:	0800c155 	.word	0x0800c155
 800c144:	0800c16b 	.word	0x0800c16b
 800c148:	0800c189 	.word	0x0800c189
 800c14c:	0800c189 	.word	0x0800c189
 800c150:	0800c189 	.word	0x0800c189
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c154:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c158:	3308      	adds	r3, #8
 800c15a:	2101      	movs	r1, #1
 800c15c:	4618      	mov	r0, r3
 800c15e:	f000 ff1d 	bl	800cf9c <RCCEx_PLL2_Config>
 800c162:	4603      	mov	r3, r0
 800c164:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c168:	e00f      	b.n	800c18a <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c16a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c16e:	3328      	adds	r3, #40	@ 0x28
 800c170:	2101      	movs	r1, #1
 800c172:	4618      	mov	r0, r3
 800c174:	f000 ffc4 	bl	800d100 <RCCEx_PLL3_Config>
 800c178:	4603      	mov	r3, r0
 800c17a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c17e:	e004      	b.n	800c18a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c180:	2301      	movs	r3, #1
 800c182:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c186:	e000      	b.n	800c18a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 800c188:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c18a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d10b      	bne.n	800c1aa <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c192:	4b6c      	ldr	r3, [pc, #432]	@ (800c344 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c194:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c196:	f023 0107 	bic.w	r1, r3, #7
 800c19a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c19e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c1a2:	4a68      	ldr	r2, [pc, #416]	@ (800c344 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c1a4:	430b      	orrs	r3, r1
 800c1a6:	6593      	str	r3, [r2, #88]	@ 0x58
 800c1a8:	e003      	b.n	800c1b2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1aa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c1ae:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c1b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ba:	f002 0320 	and.w	r3, r2, #32
 800c1be:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c1c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800c1cc:	460b      	mov	r3, r1
 800c1ce:	4313      	orrs	r3, r2
 800c1d0:	d055      	beq.n	800c27e <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800c1d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c1d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c1da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c1de:	d033      	beq.n	800c248 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800c1e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c1e4:	d82c      	bhi.n	800c240 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800c1e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c1ea:	d02f      	beq.n	800c24c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800c1ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c1f0:	d826      	bhi.n	800c240 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800c1f2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c1f6:	d02b      	beq.n	800c250 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800c1f8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c1fc:	d820      	bhi.n	800c240 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800c1fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c202:	d012      	beq.n	800c22a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800c204:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c208:	d81a      	bhi.n	800c240 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d022      	beq.n	800c254 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800c20e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c212:	d115      	bne.n	800c240 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c214:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c218:	3308      	adds	r3, #8
 800c21a:	2100      	movs	r1, #0
 800c21c:	4618      	mov	r0, r3
 800c21e:	f000 febd 	bl	800cf9c <RCCEx_PLL2_Config>
 800c222:	4603      	mov	r3, r0
 800c224:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c228:	e015      	b.n	800c256 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c22a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c22e:	3328      	adds	r3, #40	@ 0x28
 800c230:	2102      	movs	r1, #2
 800c232:	4618      	mov	r0, r3
 800c234:	f000 ff64 	bl	800d100 <RCCEx_PLL3_Config>
 800c238:	4603      	mov	r3, r0
 800c23a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c23e:	e00a      	b.n	800c256 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c240:	2301      	movs	r3, #1
 800c242:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c246:	e006      	b.n	800c256 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c248:	bf00      	nop
 800c24a:	e004      	b.n	800c256 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c24c:	bf00      	nop
 800c24e:	e002      	b.n	800c256 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c250:	bf00      	nop
 800c252:	e000      	b.n	800c256 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c254:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c256:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d10b      	bne.n	800c276 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c25e:	4b39      	ldr	r3, [pc, #228]	@ (800c344 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c260:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c262:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800c266:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c26a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c26e:	4a35      	ldr	r2, [pc, #212]	@ (800c344 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c270:	430b      	orrs	r3, r1
 800c272:	6553      	str	r3, [r2, #84]	@ 0x54
 800c274:	e003      	b.n	800c27e <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c276:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c27a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c27e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c282:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c286:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800c28a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c28e:	2300      	movs	r3, #0
 800c290:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c294:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800c298:	460b      	mov	r3, r1
 800c29a:	4313      	orrs	r3, r2
 800c29c:	d058      	beq.n	800c350 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c29e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c2a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c2a6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800c2aa:	d033      	beq.n	800c314 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800c2ac:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800c2b0:	d82c      	bhi.n	800c30c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c2b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c2b6:	d02f      	beq.n	800c318 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800c2b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c2bc:	d826      	bhi.n	800c30c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c2be:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c2c2:	d02b      	beq.n	800c31c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800c2c4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c2c8:	d820      	bhi.n	800c30c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c2ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c2ce:	d012      	beq.n	800c2f6 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800c2d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c2d4:	d81a      	bhi.n	800c30c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d022      	beq.n	800c320 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800c2da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c2de:	d115      	bne.n	800c30c <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c2e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c2e4:	3308      	adds	r3, #8
 800c2e6:	2100      	movs	r1, #0
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	f000 fe57 	bl	800cf9c <RCCEx_PLL2_Config>
 800c2ee:	4603      	mov	r3, r0
 800c2f0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c2f4:	e015      	b.n	800c322 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c2f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c2fa:	3328      	adds	r3, #40	@ 0x28
 800c2fc:	2102      	movs	r1, #2
 800c2fe:	4618      	mov	r0, r3
 800c300:	f000 fefe 	bl	800d100 <RCCEx_PLL3_Config>
 800c304:	4603      	mov	r3, r0
 800c306:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c30a:	e00a      	b.n	800c322 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c30c:	2301      	movs	r3, #1
 800c30e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c312:	e006      	b.n	800c322 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c314:	bf00      	nop
 800c316:	e004      	b.n	800c322 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c318:	bf00      	nop
 800c31a:	e002      	b.n	800c322 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c31c:	bf00      	nop
 800c31e:	e000      	b.n	800c322 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c320:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c322:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c326:	2b00      	cmp	r3, #0
 800c328:	d10e      	bne.n	800c348 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c32a:	4b06      	ldr	r3, [pc, #24]	@ (800c344 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c32c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c32e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800c332:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c336:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c33a:	4a02      	ldr	r2, [pc, #8]	@ (800c344 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c33c:	430b      	orrs	r3, r1
 800c33e:	6593      	str	r3, [r2, #88]	@ 0x58
 800c340:	e006      	b.n	800c350 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800c342:	bf00      	nop
 800c344:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c348:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c34c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c350:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c354:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c358:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800c35c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c360:	2300      	movs	r3, #0
 800c362:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c366:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800c36a:	460b      	mov	r3, r1
 800c36c:	4313      	orrs	r3, r2
 800c36e:	d055      	beq.n	800c41c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c370:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c374:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800c378:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800c37c:	d033      	beq.n	800c3e6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800c37e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800c382:	d82c      	bhi.n	800c3de <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c384:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c388:	d02f      	beq.n	800c3ea <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800c38a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c38e:	d826      	bhi.n	800c3de <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c390:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800c394:	d02b      	beq.n	800c3ee <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800c396:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800c39a:	d820      	bhi.n	800c3de <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c39c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c3a0:	d012      	beq.n	800c3c8 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800c3a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c3a6:	d81a      	bhi.n	800c3de <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d022      	beq.n	800c3f2 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800c3ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c3b0:	d115      	bne.n	800c3de <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c3b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c3b6:	3308      	adds	r3, #8
 800c3b8:	2100      	movs	r1, #0
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	f000 fdee 	bl	800cf9c <RCCEx_PLL2_Config>
 800c3c0:	4603      	mov	r3, r0
 800c3c2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c3c6:	e015      	b.n	800c3f4 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c3c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c3cc:	3328      	adds	r3, #40	@ 0x28
 800c3ce:	2102      	movs	r1, #2
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	f000 fe95 	bl	800d100 <RCCEx_PLL3_Config>
 800c3d6:	4603      	mov	r3, r0
 800c3d8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c3dc:	e00a      	b.n	800c3f4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c3de:	2301      	movs	r3, #1
 800c3e0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c3e4:	e006      	b.n	800c3f4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c3e6:	bf00      	nop
 800c3e8:	e004      	b.n	800c3f4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c3ea:	bf00      	nop
 800c3ec:	e002      	b.n	800c3f4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c3ee:	bf00      	nop
 800c3f0:	e000      	b.n	800c3f4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c3f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c3f4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d10b      	bne.n	800c414 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c3fc:	4ba1      	ldr	r3, [pc, #644]	@ (800c684 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c3fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c400:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800c404:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c408:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800c40c:	4a9d      	ldr	r2, [pc, #628]	@ (800c684 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c40e:	430b      	orrs	r3, r1
 800c410:	6593      	str	r3, [r2, #88]	@ 0x58
 800c412:	e003      	b.n	800c41c <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c414:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c418:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800c41c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c420:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c424:	f002 0308 	and.w	r3, r2, #8
 800c428:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c42c:	2300      	movs	r3, #0
 800c42e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c432:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800c436:	460b      	mov	r3, r1
 800c438:	4313      	orrs	r3, r2
 800c43a:	d01e      	beq.n	800c47a <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800c43c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c440:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c444:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c448:	d10c      	bne.n	800c464 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c44a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c44e:	3328      	adds	r3, #40	@ 0x28
 800c450:	2102      	movs	r1, #2
 800c452:	4618      	mov	r0, r3
 800c454:	f000 fe54 	bl	800d100 <RCCEx_PLL3_Config>
 800c458:	4603      	mov	r3, r0
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d002      	beq.n	800c464 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800c45e:	2301      	movs	r3, #1
 800c460:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c464:	4b87      	ldr	r3, [pc, #540]	@ (800c684 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c466:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c468:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c46c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c470:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c474:	4a83      	ldr	r2, [pc, #524]	@ (800c684 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c476:	430b      	orrs	r3, r1
 800c478:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c47a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c47e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c482:	f002 0310 	and.w	r3, r2, #16
 800c486:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c48a:	2300      	movs	r3, #0
 800c48c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c490:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800c494:	460b      	mov	r3, r1
 800c496:	4313      	orrs	r3, r2
 800c498:	d01e      	beq.n	800c4d8 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c49a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c49e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c4a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c4a6:	d10c      	bne.n	800c4c2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c4a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c4ac:	3328      	adds	r3, #40	@ 0x28
 800c4ae:	2102      	movs	r1, #2
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	f000 fe25 	bl	800d100 <RCCEx_PLL3_Config>
 800c4b6:	4603      	mov	r3, r0
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d002      	beq.n	800c4c2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800c4bc:	2301      	movs	r3, #1
 800c4be:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c4c2:	4b70      	ldr	r3, [pc, #448]	@ (800c684 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c4c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c4c6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800c4ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c4ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c4d2:	4a6c      	ldr	r2, [pc, #432]	@ (800c684 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c4d4:	430b      	orrs	r3, r1
 800c4d6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c4d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c4dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4e0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800c4e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c4ee:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800c4f2:	460b      	mov	r3, r1
 800c4f4:	4313      	orrs	r3, r2
 800c4f6:	d03e      	beq.n	800c576 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800c4f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c4fc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800c500:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c504:	d022      	beq.n	800c54c <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800c506:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c50a:	d81b      	bhi.n	800c544 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d003      	beq.n	800c518 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800c510:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c514:	d00b      	beq.n	800c52e <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800c516:	e015      	b.n	800c544 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c518:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c51c:	3308      	adds	r3, #8
 800c51e:	2100      	movs	r1, #0
 800c520:	4618      	mov	r0, r3
 800c522:	f000 fd3b 	bl	800cf9c <RCCEx_PLL2_Config>
 800c526:	4603      	mov	r3, r0
 800c528:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c52c:	e00f      	b.n	800c54e <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c52e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c532:	3328      	adds	r3, #40	@ 0x28
 800c534:	2102      	movs	r1, #2
 800c536:	4618      	mov	r0, r3
 800c538:	f000 fde2 	bl	800d100 <RCCEx_PLL3_Config>
 800c53c:	4603      	mov	r3, r0
 800c53e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c542:	e004      	b.n	800c54e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c544:	2301      	movs	r3, #1
 800c546:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c54a:	e000      	b.n	800c54e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800c54c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c54e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c552:	2b00      	cmp	r3, #0
 800c554:	d10b      	bne.n	800c56e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c556:	4b4b      	ldr	r3, [pc, #300]	@ (800c684 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c558:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c55a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800c55e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c562:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800c566:	4a47      	ldr	r2, [pc, #284]	@ (800c684 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c568:	430b      	orrs	r3, r1
 800c56a:	6593      	str	r3, [r2, #88]	@ 0x58
 800c56c:	e003      	b.n	800c576 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c56e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c572:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c576:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c57a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c57e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800c582:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c584:	2300      	movs	r3, #0
 800c586:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c588:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800c58c:	460b      	mov	r3, r1
 800c58e:	4313      	orrs	r3, r2
 800c590:	d03b      	beq.n	800c60a <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c592:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c596:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c59a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c59e:	d01f      	beq.n	800c5e0 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800c5a0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c5a4:	d818      	bhi.n	800c5d8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800c5a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c5aa:	d003      	beq.n	800c5b4 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800c5ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c5b0:	d007      	beq.n	800c5c2 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800c5b2:	e011      	b.n	800c5d8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c5b4:	4b33      	ldr	r3, [pc, #204]	@ (800c684 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c5b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5b8:	4a32      	ldr	r2, [pc, #200]	@ (800c684 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c5ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c5be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800c5c0:	e00f      	b.n	800c5e2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c5c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c5c6:	3328      	adds	r3, #40	@ 0x28
 800c5c8:	2101      	movs	r1, #1
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	f000 fd98 	bl	800d100 <RCCEx_PLL3_Config>
 800c5d0:	4603      	mov	r3, r0
 800c5d2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800c5d6:	e004      	b.n	800c5e2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c5d8:	2301      	movs	r3, #1
 800c5da:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c5de:	e000      	b.n	800c5e2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800c5e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c5e2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d10b      	bne.n	800c602 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c5ea:	4b26      	ldr	r3, [pc, #152]	@ (800c684 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c5ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c5ee:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800c5f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c5f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c5fa:	4a22      	ldr	r2, [pc, #136]	@ (800c684 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c5fc:	430b      	orrs	r3, r1
 800c5fe:	6553      	str	r3, [r2, #84]	@ 0x54
 800c600:	e003      	b.n	800c60a <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c602:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c606:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c60a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c60e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c612:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800c616:	673b      	str	r3, [r7, #112]	@ 0x70
 800c618:	2300      	movs	r3, #0
 800c61a:	677b      	str	r3, [r7, #116]	@ 0x74
 800c61c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800c620:	460b      	mov	r3, r1
 800c622:	4313      	orrs	r3, r2
 800c624:	d034      	beq.n	800c690 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800c626:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c62a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d003      	beq.n	800c638 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800c630:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c634:	d007      	beq.n	800c646 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800c636:	e011      	b.n	800c65c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c638:	4b12      	ldr	r3, [pc, #72]	@ (800c684 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c63a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c63c:	4a11      	ldr	r2, [pc, #68]	@ (800c684 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c63e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c642:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c644:	e00e      	b.n	800c664 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c646:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c64a:	3308      	adds	r3, #8
 800c64c:	2102      	movs	r1, #2
 800c64e:	4618      	mov	r0, r3
 800c650:	f000 fca4 	bl	800cf9c <RCCEx_PLL2_Config>
 800c654:	4603      	mov	r3, r0
 800c656:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c65a:	e003      	b.n	800c664 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800c65c:	2301      	movs	r3, #1
 800c65e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c662:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c664:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d10d      	bne.n	800c688 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c66c:	4b05      	ldr	r3, [pc, #20]	@ (800c684 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c66e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c670:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c674:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c678:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c67a:	4a02      	ldr	r2, [pc, #8]	@ (800c684 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c67c:	430b      	orrs	r3, r1
 800c67e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c680:	e006      	b.n	800c690 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800c682:	bf00      	nop
 800c684:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c688:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c68c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c690:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c694:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c698:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800c69c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c69e:	2300      	movs	r3, #0
 800c6a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c6a2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800c6a6:	460b      	mov	r3, r1
 800c6a8:	4313      	orrs	r3, r2
 800c6aa:	d00c      	beq.n	800c6c6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c6ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c6b0:	3328      	adds	r3, #40	@ 0x28
 800c6b2:	2102      	movs	r1, #2
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	f000 fd23 	bl	800d100 <RCCEx_PLL3_Config>
 800c6ba:	4603      	mov	r3, r0
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d002      	beq.n	800c6c6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800c6c0:	2301      	movs	r3, #1
 800c6c2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c6c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c6ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ce:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800c6d2:	663b      	str	r3, [r7, #96]	@ 0x60
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	667b      	str	r3, [r7, #100]	@ 0x64
 800c6d8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800c6dc:	460b      	mov	r3, r1
 800c6de:	4313      	orrs	r3, r2
 800c6e0:	d038      	beq.n	800c754 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c6e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c6e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c6ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c6ee:	d018      	beq.n	800c722 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800c6f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c6f4:	d811      	bhi.n	800c71a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800c6f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c6fa:	d014      	beq.n	800c726 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800c6fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c700:	d80b      	bhi.n	800c71a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800c702:	2b00      	cmp	r3, #0
 800c704:	d011      	beq.n	800c72a <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800c706:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c70a:	d106      	bne.n	800c71a <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c70c:	4bc3      	ldr	r3, [pc, #780]	@ (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c70e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c710:	4ac2      	ldr	r2, [pc, #776]	@ (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c712:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c716:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c718:	e008      	b.n	800c72c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c71a:	2301      	movs	r3, #1
 800c71c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c720:	e004      	b.n	800c72c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800c722:	bf00      	nop
 800c724:	e002      	b.n	800c72c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800c726:	bf00      	nop
 800c728:	e000      	b.n	800c72c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800c72a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c72c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c730:	2b00      	cmp	r3, #0
 800c732:	d10b      	bne.n	800c74c <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c734:	4bb9      	ldr	r3, [pc, #740]	@ (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c736:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c738:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800c73c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c740:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c744:	4ab5      	ldr	r2, [pc, #724]	@ (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c746:	430b      	orrs	r3, r1
 800c748:	6553      	str	r3, [r2, #84]	@ 0x54
 800c74a:	e003      	b.n	800c754 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c74c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c750:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c754:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c75c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800c760:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c762:	2300      	movs	r3, #0
 800c764:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c766:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800c76a:	460b      	mov	r3, r1
 800c76c:	4313      	orrs	r3, r2
 800c76e:	d009      	beq.n	800c784 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c770:	4baa      	ldr	r3, [pc, #680]	@ (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c772:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c774:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c778:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c77c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c77e:	4aa7      	ldr	r2, [pc, #668]	@ (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c780:	430b      	orrs	r3, r1
 800c782:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c784:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c78c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800c790:	653b      	str	r3, [r7, #80]	@ 0x50
 800c792:	2300      	movs	r3, #0
 800c794:	657b      	str	r3, [r7, #84]	@ 0x54
 800c796:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800c79a:	460b      	mov	r3, r1
 800c79c:	4313      	orrs	r3, r2
 800c79e:	d009      	beq.n	800c7b4 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c7a0:	4b9e      	ldr	r3, [pc, #632]	@ (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c7a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c7a4:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800c7a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c7ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c7ae:	4a9b      	ldr	r2, [pc, #620]	@ (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c7b0:	430b      	orrs	r3, r1
 800c7b2:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800c7b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7bc:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800c7c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c7c6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800c7ca:	460b      	mov	r3, r1
 800c7cc:	4313      	orrs	r3, r2
 800c7ce:	d009      	beq.n	800c7e4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800c7d0:	4b92      	ldr	r3, [pc, #584]	@ (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c7d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c7d4:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 800c7d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c7dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c7de:	4a8f      	ldr	r2, [pc, #572]	@ (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c7e0:	430b      	orrs	r3, r1
 800c7e2:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c7e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ec:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800c7f0:	643b      	str	r3, [r7, #64]	@ 0x40
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	647b      	str	r3, [r7, #68]	@ 0x44
 800c7f6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800c7fa:	460b      	mov	r3, r1
 800c7fc:	4313      	orrs	r3, r2
 800c7fe:	d00e      	beq.n	800c81e <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c800:	4b86      	ldr	r3, [pc, #536]	@ (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c802:	691b      	ldr	r3, [r3, #16]
 800c804:	4a85      	ldr	r2, [pc, #532]	@ (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c806:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800c80a:	6113      	str	r3, [r2, #16]
 800c80c:	4b83      	ldr	r3, [pc, #524]	@ (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c80e:	6919      	ldr	r1, [r3, #16]
 800c810:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c814:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800c818:	4a80      	ldr	r2, [pc, #512]	@ (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c81a:	430b      	orrs	r3, r1
 800c81c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c81e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c822:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c826:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800c82a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c82c:	2300      	movs	r3, #0
 800c82e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c830:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800c834:	460b      	mov	r3, r1
 800c836:	4313      	orrs	r3, r2
 800c838:	d009      	beq.n	800c84e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c83a:	4b78      	ldr	r3, [pc, #480]	@ (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c83c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c83e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800c842:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c846:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c848:	4a74      	ldr	r2, [pc, #464]	@ (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c84a:	430b      	orrs	r3, r1
 800c84c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c84e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c856:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800c85a:	633b      	str	r3, [r7, #48]	@ 0x30
 800c85c:	2300      	movs	r3, #0
 800c85e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c860:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800c864:	460b      	mov	r3, r1
 800c866:	4313      	orrs	r3, r2
 800c868:	d00a      	beq.n	800c880 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c86a:	4b6c      	ldr	r3, [pc, #432]	@ (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c86c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c86e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800c872:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c876:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c87a:	4a68      	ldr	r2, [pc, #416]	@ (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c87c:	430b      	orrs	r3, r1
 800c87e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c880:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c884:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c888:	2100      	movs	r1, #0
 800c88a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800c88c:	f003 0301 	and.w	r3, r3, #1
 800c890:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c892:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800c896:	460b      	mov	r3, r1
 800c898:	4313      	orrs	r3, r2
 800c89a:	d011      	beq.n	800c8c0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c89c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c8a0:	3308      	adds	r3, #8
 800c8a2:	2100      	movs	r1, #0
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	f000 fb79 	bl	800cf9c <RCCEx_PLL2_Config>
 800c8aa:	4603      	mov	r3, r0
 800c8ac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800c8b0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d003      	beq.n	800c8c0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c8b8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c8bc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c8c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8c8:	2100      	movs	r1, #0
 800c8ca:	6239      	str	r1, [r7, #32]
 800c8cc:	f003 0302 	and.w	r3, r3, #2
 800c8d0:	627b      	str	r3, [r7, #36]	@ 0x24
 800c8d2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c8d6:	460b      	mov	r3, r1
 800c8d8:	4313      	orrs	r3, r2
 800c8da:	d011      	beq.n	800c900 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c8dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c8e0:	3308      	adds	r3, #8
 800c8e2:	2101      	movs	r1, #1
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	f000 fb59 	bl	800cf9c <RCCEx_PLL2_Config>
 800c8ea:	4603      	mov	r3, r0
 800c8ec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800c8f0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d003      	beq.n	800c900 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c8f8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c8fc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c900:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c904:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c908:	2100      	movs	r1, #0
 800c90a:	61b9      	str	r1, [r7, #24]
 800c90c:	f003 0304 	and.w	r3, r3, #4
 800c910:	61fb      	str	r3, [r7, #28]
 800c912:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c916:	460b      	mov	r3, r1
 800c918:	4313      	orrs	r3, r2
 800c91a:	d011      	beq.n	800c940 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c91c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c920:	3308      	adds	r3, #8
 800c922:	2102      	movs	r1, #2
 800c924:	4618      	mov	r0, r3
 800c926:	f000 fb39 	bl	800cf9c <RCCEx_PLL2_Config>
 800c92a:	4603      	mov	r3, r0
 800c92c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800c930:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c934:	2b00      	cmp	r3, #0
 800c936:	d003      	beq.n	800c940 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c938:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c93c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c940:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c944:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c948:	2100      	movs	r1, #0
 800c94a:	6139      	str	r1, [r7, #16]
 800c94c:	f003 0308 	and.w	r3, r3, #8
 800c950:	617b      	str	r3, [r7, #20]
 800c952:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c956:	460b      	mov	r3, r1
 800c958:	4313      	orrs	r3, r2
 800c95a:	d011      	beq.n	800c980 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c95c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c960:	3328      	adds	r3, #40	@ 0x28
 800c962:	2100      	movs	r1, #0
 800c964:	4618      	mov	r0, r3
 800c966:	f000 fbcb 	bl	800d100 <RCCEx_PLL3_Config>
 800c96a:	4603      	mov	r3, r0
 800c96c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 800c970:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c974:	2b00      	cmp	r3, #0
 800c976:	d003      	beq.n	800c980 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c978:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c97c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c980:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c984:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c988:	2100      	movs	r1, #0
 800c98a:	60b9      	str	r1, [r7, #8]
 800c98c:	f003 0310 	and.w	r3, r3, #16
 800c990:	60fb      	str	r3, [r7, #12]
 800c992:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c996:	460b      	mov	r3, r1
 800c998:	4313      	orrs	r3, r2
 800c99a:	d011      	beq.n	800c9c0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c99c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c9a0:	3328      	adds	r3, #40	@ 0x28
 800c9a2:	2101      	movs	r1, #1
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	f000 fbab 	bl	800d100 <RCCEx_PLL3_Config>
 800c9aa:	4603      	mov	r3, r0
 800c9ac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800c9b0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d003      	beq.n	800c9c0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c9b8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c9bc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c9c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c9c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9c8:	2100      	movs	r1, #0
 800c9ca:	6039      	str	r1, [r7, #0]
 800c9cc:	f003 0320 	and.w	r3, r3, #32
 800c9d0:	607b      	str	r3, [r7, #4]
 800c9d2:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c9d6:	460b      	mov	r3, r1
 800c9d8:	4313      	orrs	r3, r2
 800c9da:	d011      	beq.n	800ca00 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c9dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c9e0:	3328      	adds	r3, #40	@ 0x28
 800c9e2:	2102      	movs	r1, #2
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	f000 fb8b 	bl	800d100 <RCCEx_PLL3_Config>
 800c9ea:	4603      	mov	r3, r0
 800c9ec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800c9f0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d003      	beq.n	800ca00 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c9f8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c9fc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 800ca00:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d101      	bne.n	800ca0c <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800ca08:	2300      	movs	r3, #0
 800ca0a:	e000      	b.n	800ca0e <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800ca0c:	2301      	movs	r3, #1
}
 800ca0e:	4618      	mov	r0, r3
 800ca10:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800ca14:	46bd      	mov	sp, r7
 800ca16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ca1a:	bf00      	nop
 800ca1c:	58024400 	.word	0x58024400

0800ca20 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800ca24:	f7fe fda0 	bl	800b568 <HAL_RCC_GetHCLKFreq>
 800ca28:	4602      	mov	r2, r0
 800ca2a:	4b06      	ldr	r3, [pc, #24]	@ (800ca44 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800ca2c:	6a1b      	ldr	r3, [r3, #32]
 800ca2e:	091b      	lsrs	r3, r3, #4
 800ca30:	f003 0307 	and.w	r3, r3, #7
 800ca34:	4904      	ldr	r1, [pc, #16]	@ (800ca48 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800ca36:	5ccb      	ldrb	r3, [r1, r3]
 800ca38:	f003 031f 	and.w	r3, r3, #31
 800ca3c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800ca40:	4618      	mov	r0, r3
 800ca42:	bd80      	pop	{r7, pc}
 800ca44:	58024400 	.word	0x58024400
 800ca48:	08019dd4 	.word	0x08019dd4

0800ca4c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800ca4c:	b480      	push	{r7}
 800ca4e:	b089      	sub	sp, #36	@ 0x24
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ca54:	4ba1      	ldr	r3, [pc, #644]	@ (800ccdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca58:	f003 0303 	and.w	r3, r3, #3
 800ca5c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800ca5e:	4b9f      	ldr	r3, [pc, #636]	@ (800ccdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca62:	0b1b      	lsrs	r3, r3, #12
 800ca64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ca68:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ca6a:	4b9c      	ldr	r3, [pc, #624]	@ (800ccdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca6e:	091b      	lsrs	r3, r3, #4
 800ca70:	f003 0301 	and.w	r3, r3, #1
 800ca74:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800ca76:	4b99      	ldr	r3, [pc, #612]	@ (800ccdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca7a:	08db      	lsrs	r3, r3, #3
 800ca7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ca80:	693a      	ldr	r2, [r7, #16]
 800ca82:	fb02 f303 	mul.w	r3, r2, r3
 800ca86:	ee07 3a90 	vmov	s15, r3
 800ca8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca8e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ca92:	697b      	ldr	r3, [r7, #20]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	f000 8111 	beq.w	800ccbc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800ca9a:	69bb      	ldr	r3, [r7, #24]
 800ca9c:	2b02      	cmp	r3, #2
 800ca9e:	f000 8083 	beq.w	800cba8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800caa2:	69bb      	ldr	r3, [r7, #24]
 800caa4:	2b02      	cmp	r3, #2
 800caa6:	f200 80a1 	bhi.w	800cbec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800caaa:	69bb      	ldr	r3, [r7, #24]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d003      	beq.n	800cab8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800cab0:	69bb      	ldr	r3, [r7, #24]
 800cab2:	2b01      	cmp	r3, #1
 800cab4:	d056      	beq.n	800cb64 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800cab6:	e099      	b.n	800cbec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cab8:	4b88      	ldr	r3, [pc, #544]	@ (800ccdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	f003 0320 	and.w	r3, r3, #32
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d02d      	beq.n	800cb20 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cac4:	4b85      	ldr	r3, [pc, #532]	@ (800ccdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	08db      	lsrs	r3, r3, #3
 800caca:	f003 0303 	and.w	r3, r3, #3
 800cace:	4a84      	ldr	r2, [pc, #528]	@ (800cce0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800cad0:	fa22 f303 	lsr.w	r3, r2, r3
 800cad4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cad6:	68bb      	ldr	r3, [r7, #8]
 800cad8:	ee07 3a90 	vmov	s15, r3
 800cadc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cae0:	697b      	ldr	r3, [r7, #20]
 800cae2:	ee07 3a90 	vmov	s15, r3
 800cae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800caea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800caee:	4b7b      	ldr	r3, [pc, #492]	@ (800ccdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800caf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800caf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800caf6:	ee07 3a90 	vmov	s15, r3
 800cafa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cafe:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb02:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800cce4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cb06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cb12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb1a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cb1e:	e087      	b.n	800cc30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cb20:	697b      	ldr	r3, [r7, #20]
 800cb22:	ee07 3a90 	vmov	s15, r3
 800cb26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb2a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800cce8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800cb2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb32:	4b6a      	ldr	r3, [pc, #424]	@ (800ccdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb3a:	ee07 3a90 	vmov	s15, r3
 800cb3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb42:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb46:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800cce4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cb4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cb56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cb62:	e065      	b.n	800cc30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cb64:	697b      	ldr	r3, [r7, #20]
 800cb66:	ee07 3a90 	vmov	s15, r3
 800cb6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb6e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800ccec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cb72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb76:	4b59      	ldr	r3, [pc, #356]	@ (800ccdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb7e:	ee07 3a90 	vmov	s15, r3
 800cb82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb86:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb8a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800cce4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cb8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cb9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cba2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cba6:	e043      	b.n	800cc30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cba8:	697b      	ldr	r3, [r7, #20]
 800cbaa:	ee07 3a90 	vmov	s15, r3
 800cbae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbb2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800ccf0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800cbb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cbba:	4b48      	ldr	r3, [pc, #288]	@ (800ccdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cbbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cbbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbc2:	ee07 3a90 	vmov	s15, r3
 800cbc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cbca:	ed97 6a03 	vldr	s12, [r7, #12]
 800cbce:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800cce4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cbd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cbd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cbda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cbde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cbe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbe6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cbea:	e021      	b.n	800cc30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cbec:	697b      	ldr	r3, [r7, #20]
 800cbee:	ee07 3a90 	vmov	s15, r3
 800cbf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbf6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800ccec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cbfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cbfe:	4b37      	ldr	r3, [pc, #220]	@ (800ccdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc06:	ee07 3a90 	vmov	s15, r3
 800cc0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc0e:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc12:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800cce4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cc16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cc22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cc2e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800cc30:	4b2a      	ldr	r3, [pc, #168]	@ (800ccdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc34:	0a5b      	lsrs	r3, r3, #9
 800cc36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cc3a:	ee07 3a90 	vmov	s15, r3
 800cc3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc42:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cc46:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cc4a:	edd7 6a07 	vldr	s13, [r7, #28]
 800cc4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cc52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc56:	ee17 2a90 	vmov	r2, s15
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800cc5e:	4b1f      	ldr	r3, [pc, #124]	@ (800ccdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc62:	0c1b      	lsrs	r3, r3, #16
 800cc64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cc68:	ee07 3a90 	vmov	s15, r3
 800cc6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc70:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cc74:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cc78:	edd7 6a07 	vldr	s13, [r7, #28]
 800cc7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cc80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc84:	ee17 2a90 	vmov	r2, s15
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800cc8c:	4b13      	ldr	r3, [pc, #76]	@ (800ccdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc90:	0e1b      	lsrs	r3, r3, #24
 800cc92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cc96:	ee07 3a90 	vmov	s15, r3
 800cc9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc9e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cca2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cca6:	edd7 6a07 	vldr	s13, [r7, #28]
 800ccaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ccae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ccb2:	ee17 2a90 	vmov	r2, s15
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ccba:	e008      	b.n	800ccce <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	2200      	movs	r2, #0
 800cccc:	609a      	str	r2, [r3, #8]
}
 800ccce:	bf00      	nop
 800ccd0:	3724      	adds	r7, #36	@ 0x24
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd8:	4770      	bx	lr
 800ccda:	bf00      	nop
 800ccdc:	58024400 	.word	0x58024400
 800cce0:	03d09000 	.word	0x03d09000
 800cce4:	46000000 	.word	0x46000000
 800cce8:	4c742400 	.word	0x4c742400
 800ccec:	4a742400 	.word	0x4a742400
 800ccf0:	4bb71b00 	.word	0x4bb71b00

0800ccf4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800ccf4:	b480      	push	{r7}
 800ccf6:	b089      	sub	sp, #36	@ 0x24
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ccfc:	4ba1      	ldr	r3, [pc, #644]	@ (800cf84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ccfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd00:	f003 0303 	and.w	r3, r3, #3
 800cd04:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800cd06:	4b9f      	ldr	r3, [pc, #636]	@ (800cf84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd0a:	0d1b      	lsrs	r3, r3, #20
 800cd0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cd10:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800cd12:	4b9c      	ldr	r3, [pc, #624]	@ (800cf84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd16:	0a1b      	lsrs	r3, r3, #8
 800cd18:	f003 0301 	and.w	r3, r3, #1
 800cd1c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800cd1e:	4b99      	ldr	r3, [pc, #612]	@ (800cf84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd22:	08db      	lsrs	r3, r3, #3
 800cd24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cd28:	693a      	ldr	r2, [r7, #16]
 800cd2a:	fb02 f303 	mul.w	r3, r2, r3
 800cd2e:	ee07 3a90 	vmov	s15, r3
 800cd32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd36:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800cd3a:	697b      	ldr	r3, [r7, #20]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	f000 8111 	beq.w	800cf64 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800cd42:	69bb      	ldr	r3, [r7, #24]
 800cd44:	2b02      	cmp	r3, #2
 800cd46:	f000 8083 	beq.w	800ce50 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800cd4a:	69bb      	ldr	r3, [r7, #24]
 800cd4c:	2b02      	cmp	r3, #2
 800cd4e:	f200 80a1 	bhi.w	800ce94 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800cd52:	69bb      	ldr	r3, [r7, #24]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d003      	beq.n	800cd60 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800cd58:	69bb      	ldr	r3, [r7, #24]
 800cd5a:	2b01      	cmp	r3, #1
 800cd5c:	d056      	beq.n	800ce0c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800cd5e:	e099      	b.n	800ce94 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cd60:	4b88      	ldr	r3, [pc, #544]	@ (800cf84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	f003 0320 	and.w	r3, r3, #32
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d02d      	beq.n	800cdc8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cd6c:	4b85      	ldr	r3, [pc, #532]	@ (800cf84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	08db      	lsrs	r3, r3, #3
 800cd72:	f003 0303 	and.w	r3, r3, #3
 800cd76:	4a84      	ldr	r2, [pc, #528]	@ (800cf88 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800cd78:	fa22 f303 	lsr.w	r3, r2, r3
 800cd7c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cd7e:	68bb      	ldr	r3, [r7, #8]
 800cd80:	ee07 3a90 	vmov	s15, r3
 800cd84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd88:	697b      	ldr	r3, [r7, #20]
 800cd8a:	ee07 3a90 	vmov	s15, r3
 800cd8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd96:	4b7b      	ldr	r3, [pc, #492]	@ (800cf84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd9e:	ee07 3a90 	vmov	s15, r3
 800cda2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cda6:	ed97 6a03 	vldr	s12, [r7, #12]
 800cdaa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800cf8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cdae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cdb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cdb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cdba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cdbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cdc2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cdc6:	e087      	b.n	800ced8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cdc8:	697b      	ldr	r3, [r7, #20]
 800cdca:	ee07 3a90 	vmov	s15, r3
 800cdce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdd2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800cf90 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800cdd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cdda:	4b6a      	ldr	r3, [pc, #424]	@ (800cf84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cdde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cde2:	ee07 3a90 	vmov	s15, r3
 800cde6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cdea:	ed97 6a03 	vldr	s12, [r7, #12]
 800cdee:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800cf8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cdf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cdf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cdfa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cdfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce02:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ce0a:	e065      	b.n	800ced8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ce0c:	697b      	ldr	r3, [r7, #20]
 800ce0e:	ee07 3a90 	vmov	s15, r3
 800ce12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce16:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800cf94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ce1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce1e:	4b59      	ldr	r3, [pc, #356]	@ (800cf84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce26:	ee07 3a90 	vmov	s15, r3
 800ce2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce2e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce32:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800cf8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ce36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ce42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce46:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ce4e:	e043      	b.n	800ced8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ce50:	697b      	ldr	r3, [r7, #20]
 800ce52:	ee07 3a90 	vmov	s15, r3
 800ce56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce5a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800cf98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ce5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce62:	4b48      	ldr	r3, [pc, #288]	@ (800cf84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce6a:	ee07 3a90 	vmov	s15, r3
 800ce6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce72:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce76:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800cf8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ce7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ce86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ce92:	e021      	b.n	800ced8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ce94:	697b      	ldr	r3, [r7, #20]
 800ce96:	ee07 3a90 	vmov	s15, r3
 800ce9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce9e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800cf94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cea2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cea6:	4b37      	ldr	r3, [pc, #220]	@ (800cf84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ceaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ceae:	ee07 3a90 	vmov	s15, r3
 800ceb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ceb6:	ed97 6a03 	vldr	s12, [r7, #12]
 800ceba:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800cf8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cebe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cec2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cec6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ceca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cece:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ced2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ced6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800ced8:	4b2a      	ldr	r3, [pc, #168]	@ (800cf84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ceda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cedc:	0a5b      	lsrs	r3, r3, #9
 800cede:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cee2:	ee07 3a90 	vmov	s15, r3
 800cee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ceea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ceee:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cef2:	edd7 6a07 	vldr	s13, [r7, #28]
 800cef6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cefa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cefe:	ee17 2a90 	vmov	r2, s15
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800cf06:	4b1f      	ldr	r3, [pc, #124]	@ (800cf84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cf08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf0a:	0c1b      	lsrs	r3, r3, #16
 800cf0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cf10:	ee07 3a90 	vmov	s15, r3
 800cf14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf18:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cf1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cf20:	edd7 6a07 	vldr	s13, [r7, #28]
 800cf24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cf28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cf2c:	ee17 2a90 	vmov	r2, s15
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800cf34:	4b13      	ldr	r3, [pc, #76]	@ (800cf84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cf36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf38:	0e1b      	lsrs	r3, r3, #24
 800cf3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cf3e:	ee07 3a90 	vmov	s15, r3
 800cf42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf46:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cf4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cf4e:	edd7 6a07 	vldr	s13, [r7, #28]
 800cf52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cf56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cf5a:	ee17 2a90 	vmov	r2, s15
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800cf62:	e008      	b.n	800cf76 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	2200      	movs	r2, #0
 800cf68:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	2200      	movs	r2, #0
 800cf6e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	2200      	movs	r2, #0
 800cf74:	609a      	str	r2, [r3, #8]
}
 800cf76:	bf00      	nop
 800cf78:	3724      	adds	r7, #36	@ 0x24
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf80:	4770      	bx	lr
 800cf82:	bf00      	nop
 800cf84:	58024400 	.word	0x58024400
 800cf88:	03d09000 	.word	0x03d09000
 800cf8c:	46000000 	.word	0x46000000
 800cf90:	4c742400 	.word	0x4c742400
 800cf94:	4a742400 	.word	0x4a742400
 800cf98:	4bb71b00 	.word	0x4bb71b00

0800cf9c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b084      	sub	sp, #16
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]
 800cfa4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cfaa:	4b53      	ldr	r3, [pc, #332]	@ (800d0f8 <RCCEx_PLL2_Config+0x15c>)
 800cfac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cfae:	f003 0303 	and.w	r3, r3, #3
 800cfb2:	2b03      	cmp	r3, #3
 800cfb4:	d101      	bne.n	800cfba <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800cfb6:	2301      	movs	r3, #1
 800cfb8:	e099      	b.n	800d0ee <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800cfba:	4b4f      	ldr	r3, [pc, #316]	@ (800d0f8 <RCCEx_PLL2_Config+0x15c>)
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	4a4e      	ldr	r2, [pc, #312]	@ (800d0f8 <RCCEx_PLL2_Config+0x15c>)
 800cfc0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800cfc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cfc6:	f7f9 fc5f 	bl	8006888 <HAL_GetTick>
 800cfca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cfcc:	e008      	b.n	800cfe0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cfce:	f7f9 fc5b 	bl	8006888 <HAL_GetTick>
 800cfd2:	4602      	mov	r2, r0
 800cfd4:	68bb      	ldr	r3, [r7, #8]
 800cfd6:	1ad3      	subs	r3, r2, r3
 800cfd8:	2b02      	cmp	r3, #2
 800cfda:	d901      	bls.n	800cfe0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cfdc:	2303      	movs	r3, #3
 800cfde:	e086      	b.n	800d0ee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cfe0:	4b45      	ldr	r3, [pc, #276]	@ (800d0f8 <RCCEx_PLL2_Config+0x15c>)
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d1f0      	bne.n	800cfce <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800cfec:	4b42      	ldr	r3, [pc, #264]	@ (800d0f8 <RCCEx_PLL2_Config+0x15c>)
 800cfee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cff0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	031b      	lsls	r3, r3, #12
 800cffa:	493f      	ldr	r1, [pc, #252]	@ (800d0f8 <RCCEx_PLL2_Config+0x15c>)
 800cffc:	4313      	orrs	r3, r2
 800cffe:	628b      	str	r3, [r1, #40]	@ 0x28
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	685b      	ldr	r3, [r3, #4]
 800d004:	3b01      	subs	r3, #1
 800d006:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	689b      	ldr	r3, [r3, #8]
 800d00e:	3b01      	subs	r3, #1
 800d010:	025b      	lsls	r3, r3, #9
 800d012:	b29b      	uxth	r3, r3
 800d014:	431a      	orrs	r2, r3
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	68db      	ldr	r3, [r3, #12]
 800d01a:	3b01      	subs	r3, #1
 800d01c:	041b      	lsls	r3, r3, #16
 800d01e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800d022:	431a      	orrs	r2, r3
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	691b      	ldr	r3, [r3, #16]
 800d028:	3b01      	subs	r3, #1
 800d02a:	061b      	lsls	r3, r3, #24
 800d02c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800d030:	4931      	ldr	r1, [pc, #196]	@ (800d0f8 <RCCEx_PLL2_Config+0x15c>)
 800d032:	4313      	orrs	r3, r2
 800d034:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d036:	4b30      	ldr	r3, [pc, #192]	@ (800d0f8 <RCCEx_PLL2_Config+0x15c>)
 800d038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d03a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	695b      	ldr	r3, [r3, #20]
 800d042:	492d      	ldr	r1, [pc, #180]	@ (800d0f8 <RCCEx_PLL2_Config+0x15c>)
 800d044:	4313      	orrs	r3, r2
 800d046:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d048:	4b2b      	ldr	r3, [pc, #172]	@ (800d0f8 <RCCEx_PLL2_Config+0x15c>)
 800d04a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d04c:	f023 0220 	bic.w	r2, r3, #32
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	699b      	ldr	r3, [r3, #24]
 800d054:	4928      	ldr	r1, [pc, #160]	@ (800d0f8 <RCCEx_PLL2_Config+0x15c>)
 800d056:	4313      	orrs	r3, r2
 800d058:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d05a:	4b27      	ldr	r3, [pc, #156]	@ (800d0f8 <RCCEx_PLL2_Config+0x15c>)
 800d05c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d05e:	4a26      	ldr	r2, [pc, #152]	@ (800d0f8 <RCCEx_PLL2_Config+0x15c>)
 800d060:	f023 0310 	bic.w	r3, r3, #16
 800d064:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d066:	4b24      	ldr	r3, [pc, #144]	@ (800d0f8 <RCCEx_PLL2_Config+0x15c>)
 800d068:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d06a:	4b24      	ldr	r3, [pc, #144]	@ (800d0fc <RCCEx_PLL2_Config+0x160>)
 800d06c:	4013      	ands	r3, r2
 800d06e:	687a      	ldr	r2, [r7, #4]
 800d070:	69d2      	ldr	r2, [r2, #28]
 800d072:	00d2      	lsls	r2, r2, #3
 800d074:	4920      	ldr	r1, [pc, #128]	@ (800d0f8 <RCCEx_PLL2_Config+0x15c>)
 800d076:	4313      	orrs	r3, r2
 800d078:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d07a:	4b1f      	ldr	r3, [pc, #124]	@ (800d0f8 <RCCEx_PLL2_Config+0x15c>)
 800d07c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d07e:	4a1e      	ldr	r2, [pc, #120]	@ (800d0f8 <RCCEx_PLL2_Config+0x15c>)
 800d080:	f043 0310 	orr.w	r3, r3, #16
 800d084:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d086:	683b      	ldr	r3, [r7, #0]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d106      	bne.n	800d09a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d08c:	4b1a      	ldr	r3, [pc, #104]	@ (800d0f8 <RCCEx_PLL2_Config+0x15c>)
 800d08e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d090:	4a19      	ldr	r2, [pc, #100]	@ (800d0f8 <RCCEx_PLL2_Config+0x15c>)
 800d092:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d096:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d098:	e00f      	b.n	800d0ba <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d09a:	683b      	ldr	r3, [r7, #0]
 800d09c:	2b01      	cmp	r3, #1
 800d09e:	d106      	bne.n	800d0ae <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d0a0:	4b15      	ldr	r3, [pc, #84]	@ (800d0f8 <RCCEx_PLL2_Config+0x15c>)
 800d0a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0a4:	4a14      	ldr	r2, [pc, #80]	@ (800d0f8 <RCCEx_PLL2_Config+0x15c>)
 800d0a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d0aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d0ac:	e005      	b.n	800d0ba <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d0ae:	4b12      	ldr	r3, [pc, #72]	@ (800d0f8 <RCCEx_PLL2_Config+0x15c>)
 800d0b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0b2:	4a11      	ldr	r2, [pc, #68]	@ (800d0f8 <RCCEx_PLL2_Config+0x15c>)
 800d0b4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800d0b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d0ba:	4b0f      	ldr	r3, [pc, #60]	@ (800d0f8 <RCCEx_PLL2_Config+0x15c>)
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	4a0e      	ldr	r2, [pc, #56]	@ (800d0f8 <RCCEx_PLL2_Config+0x15c>)
 800d0c0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800d0c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d0c6:	f7f9 fbdf 	bl	8006888 <HAL_GetTick>
 800d0ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d0cc:	e008      	b.n	800d0e0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d0ce:	f7f9 fbdb 	bl	8006888 <HAL_GetTick>
 800d0d2:	4602      	mov	r2, r0
 800d0d4:	68bb      	ldr	r3, [r7, #8]
 800d0d6:	1ad3      	subs	r3, r2, r3
 800d0d8:	2b02      	cmp	r3, #2
 800d0da:	d901      	bls.n	800d0e0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d0dc:	2303      	movs	r3, #3
 800d0de:	e006      	b.n	800d0ee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d0e0:	4b05      	ldr	r3, [pc, #20]	@ (800d0f8 <RCCEx_PLL2_Config+0x15c>)
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d0f0      	beq.n	800d0ce <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d0ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	3710      	adds	r7, #16
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	bd80      	pop	{r7, pc}
 800d0f6:	bf00      	nop
 800d0f8:	58024400 	.word	0x58024400
 800d0fc:	ffff0007 	.word	0xffff0007

0800d100 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d100:	b580      	push	{r7, lr}
 800d102:	b084      	sub	sp, #16
 800d104:	af00      	add	r7, sp, #0
 800d106:	6078      	str	r0, [r7, #4]
 800d108:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d10a:	2300      	movs	r3, #0
 800d10c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d10e:	4b53      	ldr	r3, [pc, #332]	@ (800d25c <RCCEx_PLL3_Config+0x15c>)
 800d110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d112:	f003 0303 	and.w	r3, r3, #3
 800d116:	2b03      	cmp	r3, #3
 800d118:	d101      	bne.n	800d11e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d11a:	2301      	movs	r3, #1
 800d11c:	e099      	b.n	800d252 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d11e:	4b4f      	ldr	r3, [pc, #316]	@ (800d25c <RCCEx_PLL3_Config+0x15c>)
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	4a4e      	ldr	r2, [pc, #312]	@ (800d25c <RCCEx_PLL3_Config+0x15c>)
 800d124:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d128:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d12a:	f7f9 fbad 	bl	8006888 <HAL_GetTick>
 800d12e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d130:	e008      	b.n	800d144 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d132:	f7f9 fba9 	bl	8006888 <HAL_GetTick>
 800d136:	4602      	mov	r2, r0
 800d138:	68bb      	ldr	r3, [r7, #8]
 800d13a:	1ad3      	subs	r3, r2, r3
 800d13c:	2b02      	cmp	r3, #2
 800d13e:	d901      	bls.n	800d144 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d140:	2303      	movs	r3, #3
 800d142:	e086      	b.n	800d252 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d144:	4b45      	ldr	r3, [pc, #276]	@ (800d25c <RCCEx_PLL3_Config+0x15c>)
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d1f0      	bne.n	800d132 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d150:	4b42      	ldr	r3, [pc, #264]	@ (800d25c <RCCEx_PLL3_Config+0x15c>)
 800d152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d154:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	051b      	lsls	r3, r3, #20
 800d15e:	493f      	ldr	r1, [pc, #252]	@ (800d25c <RCCEx_PLL3_Config+0x15c>)
 800d160:	4313      	orrs	r3, r2
 800d162:	628b      	str	r3, [r1, #40]	@ 0x28
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	685b      	ldr	r3, [r3, #4]
 800d168:	3b01      	subs	r3, #1
 800d16a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	689b      	ldr	r3, [r3, #8]
 800d172:	3b01      	subs	r3, #1
 800d174:	025b      	lsls	r3, r3, #9
 800d176:	b29b      	uxth	r3, r3
 800d178:	431a      	orrs	r2, r3
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	68db      	ldr	r3, [r3, #12]
 800d17e:	3b01      	subs	r3, #1
 800d180:	041b      	lsls	r3, r3, #16
 800d182:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800d186:	431a      	orrs	r2, r3
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	691b      	ldr	r3, [r3, #16]
 800d18c:	3b01      	subs	r3, #1
 800d18e:	061b      	lsls	r3, r3, #24
 800d190:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800d194:	4931      	ldr	r1, [pc, #196]	@ (800d25c <RCCEx_PLL3_Config+0x15c>)
 800d196:	4313      	orrs	r3, r2
 800d198:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d19a:	4b30      	ldr	r3, [pc, #192]	@ (800d25c <RCCEx_PLL3_Config+0x15c>)
 800d19c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d19e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	695b      	ldr	r3, [r3, #20]
 800d1a6:	492d      	ldr	r1, [pc, #180]	@ (800d25c <RCCEx_PLL3_Config+0x15c>)
 800d1a8:	4313      	orrs	r3, r2
 800d1aa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d1ac:	4b2b      	ldr	r3, [pc, #172]	@ (800d25c <RCCEx_PLL3_Config+0x15c>)
 800d1ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1b0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	699b      	ldr	r3, [r3, #24]
 800d1b8:	4928      	ldr	r1, [pc, #160]	@ (800d25c <RCCEx_PLL3_Config+0x15c>)
 800d1ba:	4313      	orrs	r3, r2
 800d1bc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d1be:	4b27      	ldr	r3, [pc, #156]	@ (800d25c <RCCEx_PLL3_Config+0x15c>)
 800d1c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1c2:	4a26      	ldr	r2, [pc, #152]	@ (800d25c <RCCEx_PLL3_Config+0x15c>)
 800d1c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d1c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d1ca:	4b24      	ldr	r3, [pc, #144]	@ (800d25c <RCCEx_PLL3_Config+0x15c>)
 800d1cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d1ce:	4b24      	ldr	r3, [pc, #144]	@ (800d260 <RCCEx_PLL3_Config+0x160>)
 800d1d0:	4013      	ands	r3, r2
 800d1d2:	687a      	ldr	r2, [r7, #4]
 800d1d4:	69d2      	ldr	r2, [r2, #28]
 800d1d6:	00d2      	lsls	r2, r2, #3
 800d1d8:	4920      	ldr	r1, [pc, #128]	@ (800d25c <RCCEx_PLL3_Config+0x15c>)
 800d1da:	4313      	orrs	r3, r2
 800d1dc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d1de:	4b1f      	ldr	r3, [pc, #124]	@ (800d25c <RCCEx_PLL3_Config+0x15c>)
 800d1e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1e2:	4a1e      	ldr	r2, [pc, #120]	@ (800d25c <RCCEx_PLL3_Config+0x15c>)
 800d1e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d1e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d1ea:	683b      	ldr	r3, [r7, #0]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d106      	bne.n	800d1fe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d1f0:	4b1a      	ldr	r3, [pc, #104]	@ (800d25c <RCCEx_PLL3_Config+0x15c>)
 800d1f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1f4:	4a19      	ldr	r2, [pc, #100]	@ (800d25c <RCCEx_PLL3_Config+0x15c>)
 800d1f6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800d1fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d1fc:	e00f      	b.n	800d21e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d1fe:	683b      	ldr	r3, [r7, #0]
 800d200:	2b01      	cmp	r3, #1
 800d202:	d106      	bne.n	800d212 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d204:	4b15      	ldr	r3, [pc, #84]	@ (800d25c <RCCEx_PLL3_Config+0x15c>)
 800d206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d208:	4a14      	ldr	r2, [pc, #80]	@ (800d25c <RCCEx_PLL3_Config+0x15c>)
 800d20a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800d20e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d210:	e005      	b.n	800d21e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d212:	4b12      	ldr	r3, [pc, #72]	@ (800d25c <RCCEx_PLL3_Config+0x15c>)
 800d214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d216:	4a11      	ldr	r2, [pc, #68]	@ (800d25c <RCCEx_PLL3_Config+0x15c>)
 800d218:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d21c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d21e:	4b0f      	ldr	r3, [pc, #60]	@ (800d25c <RCCEx_PLL3_Config+0x15c>)
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	4a0e      	ldr	r2, [pc, #56]	@ (800d25c <RCCEx_PLL3_Config+0x15c>)
 800d224:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d228:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d22a:	f7f9 fb2d 	bl	8006888 <HAL_GetTick>
 800d22e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d230:	e008      	b.n	800d244 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d232:	f7f9 fb29 	bl	8006888 <HAL_GetTick>
 800d236:	4602      	mov	r2, r0
 800d238:	68bb      	ldr	r3, [r7, #8]
 800d23a:	1ad3      	subs	r3, r2, r3
 800d23c:	2b02      	cmp	r3, #2
 800d23e:	d901      	bls.n	800d244 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d240:	2303      	movs	r3, #3
 800d242:	e006      	b.n	800d252 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d244:	4b05      	ldr	r3, [pc, #20]	@ (800d25c <RCCEx_PLL3_Config+0x15c>)
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d0f0      	beq.n	800d232 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d250:	7bfb      	ldrb	r3, [r7, #15]
}
 800d252:	4618      	mov	r0, r3
 800d254:	3710      	adds	r7, #16
 800d256:	46bd      	mov	sp, r7
 800d258:	bd80      	pop	{r7, pc}
 800d25a:	bf00      	nop
 800d25c:	58024400 	.word	0x58024400
 800d260:	ffff0007 	.word	0xffff0007

0800d264 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d264:	b580      	push	{r7, lr}
 800d266:	b084      	sub	sp, #16
 800d268:	af00      	add	r7, sp, #0
 800d26a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d101      	bne.n	800d276 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d272:	2301      	movs	r3, #1
 800d274:	e10f      	b.n	800d496 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	2200      	movs	r2, #0
 800d27a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	4a87      	ldr	r2, [pc, #540]	@ (800d4a0 <HAL_SPI_Init+0x23c>)
 800d282:	4293      	cmp	r3, r2
 800d284:	d00f      	beq.n	800d2a6 <HAL_SPI_Init+0x42>
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	4a86      	ldr	r2, [pc, #536]	@ (800d4a4 <HAL_SPI_Init+0x240>)
 800d28c:	4293      	cmp	r3, r2
 800d28e:	d00a      	beq.n	800d2a6 <HAL_SPI_Init+0x42>
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	4a84      	ldr	r2, [pc, #528]	@ (800d4a8 <HAL_SPI_Init+0x244>)
 800d296:	4293      	cmp	r3, r2
 800d298:	d005      	beq.n	800d2a6 <HAL_SPI_Init+0x42>
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	68db      	ldr	r3, [r3, #12]
 800d29e:	2b0f      	cmp	r3, #15
 800d2a0:	d901      	bls.n	800d2a6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800d2a2:	2301      	movs	r3, #1
 800d2a4:	e0f7      	b.n	800d496 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800d2a6:	6878      	ldr	r0, [r7, #4]
 800d2a8:	f001 f968 	bl	800e57c <SPI_GetPacketSize>
 800d2ac:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	4a7b      	ldr	r2, [pc, #492]	@ (800d4a0 <HAL_SPI_Init+0x23c>)
 800d2b4:	4293      	cmp	r3, r2
 800d2b6:	d00c      	beq.n	800d2d2 <HAL_SPI_Init+0x6e>
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	4a79      	ldr	r2, [pc, #484]	@ (800d4a4 <HAL_SPI_Init+0x240>)
 800d2be:	4293      	cmp	r3, r2
 800d2c0:	d007      	beq.n	800d2d2 <HAL_SPI_Init+0x6e>
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	4a78      	ldr	r2, [pc, #480]	@ (800d4a8 <HAL_SPI_Init+0x244>)
 800d2c8:	4293      	cmp	r3, r2
 800d2ca:	d002      	beq.n	800d2d2 <HAL_SPI_Init+0x6e>
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	2b08      	cmp	r3, #8
 800d2d0:	d811      	bhi.n	800d2f6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d2d6:	4a72      	ldr	r2, [pc, #456]	@ (800d4a0 <HAL_SPI_Init+0x23c>)
 800d2d8:	4293      	cmp	r3, r2
 800d2da:	d009      	beq.n	800d2f0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	4a70      	ldr	r2, [pc, #448]	@ (800d4a4 <HAL_SPI_Init+0x240>)
 800d2e2:	4293      	cmp	r3, r2
 800d2e4:	d004      	beq.n	800d2f0 <HAL_SPI_Init+0x8c>
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	4a6f      	ldr	r2, [pc, #444]	@ (800d4a8 <HAL_SPI_Init+0x244>)
 800d2ec:	4293      	cmp	r3, r2
 800d2ee:	d104      	bne.n	800d2fa <HAL_SPI_Init+0x96>
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	2b10      	cmp	r3, #16
 800d2f4:	d901      	bls.n	800d2fa <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800d2f6:	2301      	movs	r3, #1
 800d2f8:	e0cd      	b.n	800d496 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d300:	b2db      	uxtb	r3, r3
 800d302:	2b00      	cmp	r3, #0
 800d304:	d106      	bne.n	800d314 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	2200      	movs	r2, #0
 800d30a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d30e:	6878      	ldr	r0, [r7, #4]
 800d310:	f7f5 fffe 	bl	8003310 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	2202      	movs	r2, #2
 800d318:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	681a      	ldr	r2, [r3, #0]
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	f022 0201 	bic.w	r2, r2, #1
 800d32a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	689b      	ldr	r3, [r3, #8]
 800d332:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800d336:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	699b      	ldr	r3, [r3, #24]
 800d33c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d340:	d119      	bne.n	800d376 <HAL_SPI_Init+0x112>
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	685b      	ldr	r3, [r3, #4]
 800d346:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d34a:	d103      	bne.n	800d354 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800d350:	2b00      	cmp	r3, #0
 800d352:	d008      	beq.n	800d366 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d10c      	bne.n	800d376 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800d360:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d364:	d107      	bne.n	800d376 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	681a      	ldr	r2, [r3, #0]
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800d374:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	685b      	ldr	r3, [r3, #4]
 800d37a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d00f      	beq.n	800d3a2 <HAL_SPI_Init+0x13e>
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	68db      	ldr	r3, [r3, #12]
 800d386:	2b06      	cmp	r3, #6
 800d388:	d90b      	bls.n	800d3a2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	430a      	orrs	r2, r1
 800d39e:	601a      	str	r2, [r3, #0]
 800d3a0:	e007      	b.n	800d3b2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	681a      	ldr	r2, [r3, #0]
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800d3b0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	69da      	ldr	r2, [r3, #28]
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3ba:	431a      	orrs	r2, r3
 800d3bc:	68bb      	ldr	r3, [r7, #8]
 800d3be:	431a      	orrs	r2, r3
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d3c4:	ea42 0103 	orr.w	r1, r2, r3
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	68da      	ldr	r2, [r3, #12]
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	430a      	orrs	r2, r1
 800d3d2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3dc:	431a      	orrs	r2, r3
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d3e2:	431a      	orrs	r2, r3
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	699b      	ldr	r3, [r3, #24]
 800d3e8:	431a      	orrs	r2, r3
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	691b      	ldr	r3, [r3, #16]
 800d3ee:	431a      	orrs	r2, r3
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	695b      	ldr	r3, [r3, #20]
 800d3f4:	431a      	orrs	r2, r3
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	6a1b      	ldr	r3, [r3, #32]
 800d3fa:	431a      	orrs	r2, r3
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	685b      	ldr	r3, [r3, #4]
 800d400:	431a      	orrs	r2, r3
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d406:	431a      	orrs	r2, r3
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	689b      	ldr	r3, [r3, #8]
 800d40c:	431a      	orrs	r2, r3
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d412:	ea42 0103 	orr.w	r1, r2, r3
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	430a      	orrs	r2, r1
 800d420:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	685b      	ldr	r3, [r3, #4]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d113      	bne.n	800d452 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	689b      	ldr	r3, [r3, #8]
 800d430:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d43c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	689b      	ldr	r3, [r3, #8]
 800d444:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800d450:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	f022 0201 	bic.w	r2, r2, #1
 800d460:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	685b      	ldr	r3, [r3, #4]
 800d466:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d00a      	beq.n	800d484 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	68db      	ldr	r3, [r3, #12]
 800d474:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	430a      	orrs	r2, r1
 800d482:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	2200      	movs	r2, #0
 800d488:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	2201      	movs	r2, #1
 800d490:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800d494:	2300      	movs	r3, #0
}
 800d496:	4618      	mov	r0, r3
 800d498:	3710      	adds	r7, #16
 800d49a:	46bd      	mov	sp, r7
 800d49c:	bd80      	pop	{r7, pc}
 800d49e:	bf00      	nop
 800d4a0:	40013000 	.word	0x40013000
 800d4a4:	40003800 	.word	0x40003800
 800d4a8:	40003c00 	.word	0x40003c00

0800d4ac <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b088      	sub	sp, #32
 800d4b0:	af02      	add	r7, sp, #8
 800d4b2:	60f8      	str	r0, [r7, #12]
 800d4b4:	60b9      	str	r1, [r7, #8]
 800d4b6:	603b      	str	r3, [r7, #0]
 800d4b8:	4613      	mov	r3, r2
 800d4ba:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	3320      	adds	r3, #32
 800d4c2:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d4c4:	f7f9 f9e0 	bl	8006888 <HAL_GetTick>
 800d4c8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d4d0:	b2db      	uxtb	r3, r3
 800d4d2:	2b01      	cmp	r3, #1
 800d4d4:	d001      	beq.n	800d4da <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800d4d6:	2302      	movs	r3, #2
 800d4d8:	e1d1      	b.n	800d87e <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800d4da:	68bb      	ldr	r3, [r7, #8]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d002      	beq.n	800d4e6 <HAL_SPI_Transmit+0x3a>
 800d4e0:	88fb      	ldrh	r3, [r7, #6]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d101      	bne.n	800d4ea <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800d4e6:	2301      	movs	r3, #1
 800d4e8:	e1c9      	b.n	800d87e <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800d4f0:	2b01      	cmp	r3, #1
 800d4f2:	d101      	bne.n	800d4f8 <HAL_SPI_Transmit+0x4c>
 800d4f4:	2302      	movs	r3, #2
 800d4f6:	e1c2      	b.n	800d87e <HAL_SPI_Transmit+0x3d2>
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	2201      	movs	r2, #1
 800d4fc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	2203      	movs	r2, #3
 800d504:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	2200      	movs	r2, #0
 800d50c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	68ba      	ldr	r2, [r7, #8]
 800d514:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	88fa      	ldrh	r2, [r7, #6]
 800d51a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	88fa      	ldrh	r2, [r7, #6]
 800d522:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	2200      	movs	r2, #0
 800d52a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	2200      	movs	r2, #0
 800d530:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	2200      	movs	r2, #0
 800d538:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	2200      	movs	r2, #0
 800d540:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	2200      	movs	r2, #0
 800d546:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	689b      	ldr	r3, [r3, #8]
 800d54c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800d550:	d108      	bne.n	800d564 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	681a      	ldr	r2, [r3, #0]
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d560:	601a      	str	r2, [r3, #0]
 800d562:	e009      	b.n	800d578 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	68db      	ldr	r3, [r3, #12]
 800d56a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800d576:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	685a      	ldr	r2, [r3, #4]
 800d57e:	4b96      	ldr	r3, [pc, #600]	@ (800d7d8 <HAL_SPI_Transmit+0x32c>)
 800d580:	4013      	ands	r3, r2
 800d582:	88f9      	ldrh	r1, [r7, #6]
 800d584:	68fa      	ldr	r2, [r7, #12]
 800d586:	6812      	ldr	r2, [r2, #0]
 800d588:	430b      	orrs	r3, r1
 800d58a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	681a      	ldr	r2, [r3, #0]
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	f042 0201 	orr.w	r2, r2, #1
 800d59a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	685b      	ldr	r3, [r3, #4]
 800d5a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d5a4:	d107      	bne.n	800d5b6 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	681a      	ldr	r2, [r3, #0]
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d5b4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	68db      	ldr	r3, [r3, #12]
 800d5ba:	2b0f      	cmp	r3, #15
 800d5bc:	d947      	bls.n	800d64e <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800d5be:	e03f      	b.n	800d640 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	695b      	ldr	r3, [r3, #20]
 800d5c6:	f003 0302 	and.w	r3, r3, #2
 800d5ca:	2b02      	cmp	r3, #2
 800d5cc:	d114      	bne.n	800d5f8 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	6812      	ldr	r2, [r2, #0]
 800d5d8:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d5de:	1d1a      	adds	r2, r3, #4
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d5ea:	b29b      	uxth	r3, r3
 800d5ec:	3b01      	subs	r3, #1
 800d5ee:	b29a      	uxth	r2, r3
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800d5f6:	e023      	b.n	800d640 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d5f8:	f7f9 f946 	bl	8006888 <HAL_GetTick>
 800d5fc:	4602      	mov	r2, r0
 800d5fe:	693b      	ldr	r3, [r7, #16]
 800d600:	1ad3      	subs	r3, r2, r3
 800d602:	683a      	ldr	r2, [r7, #0]
 800d604:	429a      	cmp	r2, r3
 800d606:	d803      	bhi.n	800d610 <HAL_SPI_Transmit+0x164>
 800d608:	683b      	ldr	r3, [r7, #0]
 800d60a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d60e:	d102      	bne.n	800d616 <HAL_SPI_Transmit+0x16a>
 800d610:	683b      	ldr	r3, [r7, #0]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d114      	bne.n	800d640 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d616:	68f8      	ldr	r0, [r7, #12]
 800d618:	f000 fee2 	bl	800e3e0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d622:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	2201      	movs	r2, #1
 800d630:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	2200      	movs	r2, #0
 800d638:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800d63c:	2303      	movs	r3, #3
 800d63e:	e11e      	b.n	800d87e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d646:	b29b      	uxth	r3, r3
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d1b9      	bne.n	800d5c0 <HAL_SPI_Transmit+0x114>
 800d64c:	e0f1      	b.n	800d832 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	68db      	ldr	r3, [r3, #12]
 800d652:	2b07      	cmp	r3, #7
 800d654:	f240 80e6 	bls.w	800d824 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800d658:	e05d      	b.n	800d716 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	695b      	ldr	r3, [r3, #20]
 800d660:	f003 0302 	and.w	r3, r3, #2
 800d664:	2b02      	cmp	r3, #2
 800d666:	d132      	bne.n	800d6ce <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d66e:	b29b      	uxth	r3, r3
 800d670:	2b01      	cmp	r3, #1
 800d672:	d918      	bls.n	800d6a6 <HAL_SPI_Transmit+0x1fa>
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d014      	beq.n	800d6a6 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	6812      	ldr	r2, [r2, #0]
 800d686:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d68c:	1d1a      	adds	r2, r3, #4
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d698:	b29b      	uxth	r3, r3
 800d69a:	3b02      	subs	r3, #2
 800d69c:	b29a      	uxth	r2, r3
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800d6a4:	e037      	b.n	800d716 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d6aa:	881a      	ldrh	r2, [r3, #0]
 800d6ac:	697b      	ldr	r3, [r7, #20]
 800d6ae:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d6b4:	1c9a      	adds	r2, r3, #2
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d6c0:	b29b      	uxth	r3, r3
 800d6c2:	3b01      	subs	r3, #1
 800d6c4:	b29a      	uxth	r2, r3
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800d6cc:	e023      	b.n	800d716 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d6ce:	f7f9 f8db 	bl	8006888 <HAL_GetTick>
 800d6d2:	4602      	mov	r2, r0
 800d6d4:	693b      	ldr	r3, [r7, #16]
 800d6d6:	1ad3      	subs	r3, r2, r3
 800d6d8:	683a      	ldr	r2, [r7, #0]
 800d6da:	429a      	cmp	r2, r3
 800d6dc:	d803      	bhi.n	800d6e6 <HAL_SPI_Transmit+0x23a>
 800d6de:	683b      	ldr	r3, [r7, #0]
 800d6e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6e4:	d102      	bne.n	800d6ec <HAL_SPI_Transmit+0x240>
 800d6e6:	683b      	ldr	r3, [r7, #0]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d114      	bne.n	800d716 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d6ec:	68f8      	ldr	r0, [r7, #12]
 800d6ee:	f000 fe77 	bl	800e3e0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d6f8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	2201      	movs	r2, #1
 800d706:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	2200      	movs	r2, #0
 800d70e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800d712:	2303      	movs	r3, #3
 800d714:	e0b3      	b.n	800d87e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d71c:	b29b      	uxth	r3, r3
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d19b      	bne.n	800d65a <HAL_SPI_Transmit+0x1ae>
 800d722:	e086      	b.n	800d832 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	695b      	ldr	r3, [r3, #20]
 800d72a:	f003 0302 	and.w	r3, r3, #2
 800d72e:	2b02      	cmp	r3, #2
 800d730:	d154      	bne.n	800d7dc <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d738:	b29b      	uxth	r3, r3
 800d73a:	2b03      	cmp	r3, #3
 800d73c:	d918      	bls.n	800d770 <HAL_SPI_Transmit+0x2c4>
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d742:	2b40      	cmp	r3, #64	@ 0x40
 800d744:	d914      	bls.n	800d770 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	6812      	ldr	r2, [r2, #0]
 800d750:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d756:	1d1a      	adds	r2, r3, #4
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d762:	b29b      	uxth	r3, r3
 800d764:	3b04      	subs	r3, #4
 800d766:	b29a      	uxth	r2, r3
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800d76e:	e059      	b.n	800d824 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d776:	b29b      	uxth	r3, r3
 800d778:	2b01      	cmp	r3, #1
 800d77a:	d917      	bls.n	800d7ac <HAL_SPI_Transmit+0x300>
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d780:	2b00      	cmp	r3, #0
 800d782:	d013      	beq.n	800d7ac <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d788:	881a      	ldrh	r2, [r3, #0]
 800d78a:	697b      	ldr	r3, [r7, #20]
 800d78c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d792:	1c9a      	adds	r2, r3, #2
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d79e:	b29b      	uxth	r3, r3
 800d7a0:	3b02      	subs	r3, #2
 800d7a2:	b29a      	uxth	r2, r3
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800d7aa:	e03b      	b.n	800d824 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	3320      	adds	r3, #32
 800d7b6:	7812      	ldrb	r2, [r2, #0]
 800d7b8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d7be:	1c5a      	adds	r2, r3, #1
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d7ca:	b29b      	uxth	r3, r3
 800d7cc:	3b01      	subs	r3, #1
 800d7ce:	b29a      	uxth	r2, r3
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800d7d6:	e025      	b.n	800d824 <HAL_SPI_Transmit+0x378>
 800d7d8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d7dc:	f7f9 f854 	bl	8006888 <HAL_GetTick>
 800d7e0:	4602      	mov	r2, r0
 800d7e2:	693b      	ldr	r3, [r7, #16]
 800d7e4:	1ad3      	subs	r3, r2, r3
 800d7e6:	683a      	ldr	r2, [r7, #0]
 800d7e8:	429a      	cmp	r2, r3
 800d7ea:	d803      	bhi.n	800d7f4 <HAL_SPI_Transmit+0x348>
 800d7ec:	683b      	ldr	r3, [r7, #0]
 800d7ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7f2:	d102      	bne.n	800d7fa <HAL_SPI_Transmit+0x34e>
 800d7f4:	683b      	ldr	r3, [r7, #0]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d114      	bne.n	800d824 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d7fa:	68f8      	ldr	r0, [r7, #12]
 800d7fc:	f000 fdf0 	bl	800e3e0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d806:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	2201      	movs	r2, #1
 800d814:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	2200      	movs	r2, #0
 800d81c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800d820:	2303      	movs	r3, #3
 800d822:	e02c      	b.n	800d87e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d82a:	b29b      	uxth	r3, r3
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	f47f af79 	bne.w	800d724 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800d832:	693b      	ldr	r3, [r7, #16]
 800d834:	9300      	str	r3, [sp, #0]
 800d836:	683b      	ldr	r3, [r7, #0]
 800d838:	2200      	movs	r2, #0
 800d83a:	2108      	movs	r1, #8
 800d83c:	68f8      	ldr	r0, [r7, #12]
 800d83e:	f000 fe6f 	bl	800e520 <SPI_WaitOnFlagUntilTimeout>
 800d842:	4603      	mov	r3, r0
 800d844:	2b00      	cmp	r3, #0
 800d846:	d007      	beq.n	800d858 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d84e:	f043 0220 	orr.w	r2, r3, #32
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800d858:	68f8      	ldr	r0, [r7, #12]
 800d85a:	f000 fdc1 	bl	800e3e0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	2201      	movs	r2, #1
 800d862:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	2200      	movs	r2, #0
 800d86a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d874:	2b00      	cmp	r3, #0
 800d876:	d001      	beq.n	800d87c <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800d878:	2301      	movs	r3, #1
 800d87a:	e000      	b.n	800d87e <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800d87c:	2300      	movs	r3, #0
  }
}
 800d87e:	4618      	mov	r0, r3
 800d880:	3718      	adds	r7, #24
 800d882:	46bd      	mov	sp, r7
 800d884:	bd80      	pop	{r7, pc}
 800d886:	bf00      	nop

0800d888 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d888:	b580      	push	{r7, lr}
 800d88a:	b088      	sub	sp, #32
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	60f8      	str	r0, [r7, #12]
 800d890:	60b9      	str	r1, [r7, #8]
 800d892:	603b      	str	r3, [r7, #0]
 800d894:	4613      	mov	r3, r2
 800d896:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d89c:	095b      	lsrs	r3, r3, #5
 800d89e:	b29b      	uxth	r3, r3
 800d8a0:	3301      	adds	r3, #1
 800d8a2:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	3330      	adds	r3, #48	@ 0x30
 800d8aa:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d8ac:	f7f8 ffec 	bl	8006888 <HAL_GetTick>
 800d8b0:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d8b8:	b2db      	uxtb	r3, r3
 800d8ba:	2b01      	cmp	r3, #1
 800d8bc:	d001      	beq.n	800d8c2 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800d8be:	2302      	movs	r3, #2
 800d8c0:	e250      	b.n	800dd64 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800d8c2:	68bb      	ldr	r3, [r7, #8]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d002      	beq.n	800d8ce <HAL_SPI_Receive+0x46>
 800d8c8:	88fb      	ldrh	r3, [r7, #6]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d101      	bne.n	800d8d2 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800d8ce:	2301      	movs	r3, #1
 800d8d0:	e248      	b.n	800dd64 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800d8d8:	2b01      	cmp	r3, #1
 800d8da:	d101      	bne.n	800d8e0 <HAL_SPI_Receive+0x58>
 800d8dc:	2302      	movs	r3, #2
 800d8de:	e241      	b.n	800dd64 <HAL_SPI_Receive+0x4dc>
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	2201      	movs	r2, #1
 800d8e4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	2204      	movs	r2, #4
 800d8ec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	2200      	movs	r2, #0
 800d8f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	68ba      	ldr	r2, [r7, #8]
 800d8fc:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	88fa      	ldrh	r2, [r7, #6]
 800d902:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	88fa      	ldrh	r2, [r7, #6]
 800d90a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	2200      	movs	r2, #0
 800d912:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	2200      	movs	r2, #0
 800d918:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	2200      	movs	r2, #0
 800d920:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	2200      	movs	r2, #0
 800d928:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	2200      	movs	r2, #0
 800d92e:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	689b      	ldr	r3, [r3, #8]
 800d934:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800d938:	d108      	bne.n	800d94c <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	681a      	ldr	r2, [r3, #0]
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800d948:	601a      	str	r2, [r3, #0]
 800d94a:	e009      	b.n	800d960 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	68db      	ldr	r3, [r3, #12]
 800d952:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800d95e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	685a      	ldr	r2, [r3, #4]
 800d966:	4b95      	ldr	r3, [pc, #596]	@ (800dbbc <HAL_SPI_Receive+0x334>)
 800d968:	4013      	ands	r3, r2
 800d96a:	88f9      	ldrh	r1, [r7, #6]
 800d96c:	68fa      	ldr	r2, [r7, #12]
 800d96e:	6812      	ldr	r2, [r2, #0]
 800d970:	430b      	orrs	r3, r1
 800d972:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	681a      	ldr	r2, [r3, #0]
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	f042 0201 	orr.w	r2, r2, #1
 800d982:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	685b      	ldr	r3, [r3, #4]
 800d988:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d98c:	d107      	bne.n	800d99e <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	681a      	ldr	r2, [r3, #0]
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d99c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	68db      	ldr	r3, [r3, #12]
 800d9a2:	2b0f      	cmp	r3, #15
 800d9a4:	d96c      	bls.n	800da80 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800d9a6:	e064      	b.n	800da72 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	695b      	ldr	r3, [r3, #20]
 800d9ae:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	695b      	ldr	r3, [r3, #20]
 800d9b6:	f003 0301 	and.w	r3, r3, #1
 800d9ba:	2b01      	cmp	r3, #1
 800d9bc:	d114      	bne.n	800d9e8 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	681a      	ldr	r2, [r3, #0]
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d9c6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800d9c8:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d9ce:	1d1a      	adds	r2, r3, #4
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d9da:	b29b      	uxth	r3, r3
 800d9dc:	3b01      	subs	r3, #1
 800d9de:	b29a      	uxth	r2, r3
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800d9e6:	e044      	b.n	800da72 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d9ee:	b29b      	uxth	r3, r3
 800d9f0:	8bfa      	ldrh	r2, [r7, #30]
 800d9f2:	429a      	cmp	r2, r3
 800d9f4:	d919      	bls.n	800da2a <HAL_SPI_Receive+0x1a2>
 800d9f6:	693b      	ldr	r3, [r7, #16]
 800d9f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d014      	beq.n	800da2a <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	681a      	ldr	r2, [r3, #0]
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800da08:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800da0a:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800da10:	1d1a      	adds	r2, r3, #4
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800da1c:	b29b      	uxth	r3, r3
 800da1e:	3b01      	subs	r3, #1
 800da20:	b29a      	uxth	r2, r3
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800da28:	e023      	b.n	800da72 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800da2a:	f7f8 ff2d 	bl	8006888 <HAL_GetTick>
 800da2e:	4602      	mov	r2, r0
 800da30:	697b      	ldr	r3, [r7, #20]
 800da32:	1ad3      	subs	r3, r2, r3
 800da34:	683a      	ldr	r2, [r7, #0]
 800da36:	429a      	cmp	r2, r3
 800da38:	d803      	bhi.n	800da42 <HAL_SPI_Receive+0x1ba>
 800da3a:	683b      	ldr	r3, [r7, #0]
 800da3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da40:	d102      	bne.n	800da48 <HAL_SPI_Receive+0x1c0>
 800da42:	683b      	ldr	r3, [r7, #0]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d114      	bne.n	800da72 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800da48:	68f8      	ldr	r0, [r7, #12]
 800da4a:	f000 fcc9 	bl	800e3e0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800da54:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	2201      	movs	r2, #1
 800da62:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	2200      	movs	r2, #0
 800da6a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800da6e:	2303      	movs	r3, #3
 800da70:	e178      	b.n	800dd64 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800da78:	b29b      	uxth	r3, r3
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d194      	bne.n	800d9a8 <HAL_SPI_Receive+0x120>
 800da7e:	e15e      	b.n	800dd3e <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	68db      	ldr	r3, [r3, #12]
 800da84:	2b07      	cmp	r3, #7
 800da86:	f240 8153 	bls.w	800dd30 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800da8a:	e08f      	b.n	800dbac <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	695b      	ldr	r3, [r3, #20]
 800da92:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	695b      	ldr	r3, [r3, #20]
 800da9a:	f003 0301 	and.w	r3, r3, #1
 800da9e:	2b01      	cmp	r3, #1
 800daa0:	d114      	bne.n	800dacc <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800daa6:	69ba      	ldr	r2, [r7, #24]
 800daa8:	8812      	ldrh	r2, [r2, #0]
 800daaa:	b292      	uxth	r2, r2
 800daac:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dab2:	1c9a      	adds	r2, r3, #2
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800dabe:	b29b      	uxth	r3, r3
 800dac0:	3b01      	subs	r3, #1
 800dac2:	b29a      	uxth	r2, r3
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800daca:	e06f      	b.n	800dbac <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800dad2:	b29b      	uxth	r3, r3
 800dad4:	8bfa      	ldrh	r2, [r7, #30]
 800dad6:	429a      	cmp	r2, r3
 800dad8:	d924      	bls.n	800db24 <HAL_SPI_Receive+0x29c>
 800dada:	693b      	ldr	r3, [r7, #16]
 800dadc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d01f      	beq.n	800db24 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dae8:	69ba      	ldr	r2, [r7, #24]
 800daea:	8812      	ldrh	r2, [r2, #0]
 800daec:	b292      	uxth	r2, r2
 800daee:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800daf4:	1c9a      	adds	r2, r3, #2
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dafe:	69ba      	ldr	r2, [r7, #24]
 800db00:	8812      	ldrh	r2, [r2, #0]
 800db02:	b292      	uxth	r2, r2
 800db04:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800db0a:	1c9a      	adds	r2, r3, #2
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800db16:	b29b      	uxth	r3, r3
 800db18:	3b02      	subs	r3, #2
 800db1a:	b29a      	uxth	r2, r3
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800db22:	e043      	b.n	800dbac <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800db2a:	b29b      	uxth	r3, r3
 800db2c:	2b01      	cmp	r3, #1
 800db2e:	d119      	bne.n	800db64 <HAL_SPI_Receive+0x2dc>
 800db30:	693b      	ldr	r3, [r7, #16]
 800db32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800db36:	2b00      	cmp	r3, #0
 800db38:	d014      	beq.n	800db64 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800db3e:	69ba      	ldr	r2, [r7, #24]
 800db40:	8812      	ldrh	r2, [r2, #0]
 800db42:	b292      	uxth	r2, r2
 800db44:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800db4a:	1c9a      	adds	r2, r3, #2
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800db56:	b29b      	uxth	r3, r3
 800db58:	3b01      	subs	r3, #1
 800db5a:	b29a      	uxth	r2, r3
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800db62:	e023      	b.n	800dbac <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800db64:	f7f8 fe90 	bl	8006888 <HAL_GetTick>
 800db68:	4602      	mov	r2, r0
 800db6a:	697b      	ldr	r3, [r7, #20]
 800db6c:	1ad3      	subs	r3, r2, r3
 800db6e:	683a      	ldr	r2, [r7, #0]
 800db70:	429a      	cmp	r2, r3
 800db72:	d803      	bhi.n	800db7c <HAL_SPI_Receive+0x2f4>
 800db74:	683b      	ldr	r3, [r7, #0]
 800db76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db7a:	d102      	bne.n	800db82 <HAL_SPI_Receive+0x2fa>
 800db7c:	683b      	ldr	r3, [r7, #0]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d114      	bne.n	800dbac <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800db82:	68f8      	ldr	r0, [r7, #12]
 800db84:	f000 fc2c 	bl	800e3e0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800db8e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	2201      	movs	r2, #1
 800db9c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	2200      	movs	r2, #0
 800dba4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800dba8:	2303      	movs	r3, #3
 800dbaa:	e0db      	b.n	800dd64 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800dbb2:	b29b      	uxth	r3, r3
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	f47f af69 	bne.w	800da8c <HAL_SPI_Receive+0x204>
 800dbba:	e0c0      	b.n	800dd3e <HAL_SPI_Receive+0x4b6>
 800dbbc:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	695b      	ldr	r3, [r3, #20]
 800dbc6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	695b      	ldr	r3, [r3, #20]
 800dbce:	f003 0301 	and.w	r3, r3, #1
 800dbd2:	2b01      	cmp	r3, #1
 800dbd4:	d117      	bne.n	800dc06 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dbe2:	7812      	ldrb	r2, [r2, #0]
 800dbe4:	b2d2      	uxtb	r2, r2
 800dbe6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dbec:	1c5a      	adds	r2, r3, #1
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800dbf8:	b29b      	uxth	r3, r3
 800dbfa:	3b01      	subs	r3, #1
 800dbfc:	b29a      	uxth	r2, r3
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800dc04:	e094      	b.n	800dd30 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800dc0c:	b29b      	uxth	r3, r3
 800dc0e:	8bfa      	ldrh	r2, [r7, #30]
 800dc10:	429a      	cmp	r2, r3
 800dc12:	d946      	bls.n	800dca2 <HAL_SPI_Receive+0x41a>
 800dc14:	693b      	ldr	r3, [r7, #16]
 800dc16:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d041      	beq.n	800dca2 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dc2a:	7812      	ldrb	r2, [r2, #0]
 800dc2c:	b2d2      	uxtb	r2, r2
 800dc2e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dc34:	1c5a      	adds	r2, r3, #1
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dc46:	7812      	ldrb	r2, [r2, #0]
 800dc48:	b2d2      	uxtb	r2, r2
 800dc4a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dc50:	1c5a      	adds	r2, r3, #1
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dc62:	7812      	ldrb	r2, [r2, #0]
 800dc64:	b2d2      	uxtb	r2, r2
 800dc66:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dc6c:	1c5a      	adds	r2, r3, #1
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dc7e:	7812      	ldrb	r2, [r2, #0]
 800dc80:	b2d2      	uxtb	r2, r2
 800dc82:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dc88:	1c5a      	adds	r2, r3, #1
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800dc94:	b29b      	uxth	r3, r3
 800dc96:	3b04      	subs	r3, #4
 800dc98:	b29a      	uxth	r2, r3
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800dca0:	e046      	b.n	800dd30 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800dca8:	b29b      	uxth	r3, r3
 800dcaa:	2b03      	cmp	r3, #3
 800dcac:	d81c      	bhi.n	800dce8 <HAL_SPI_Receive+0x460>
 800dcae:	693b      	ldr	r3, [r7, #16]
 800dcb0:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d017      	beq.n	800dce8 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dcc4:	7812      	ldrb	r2, [r2, #0]
 800dcc6:	b2d2      	uxtb	r2, r2
 800dcc8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dcce:	1c5a      	adds	r2, r3, #1
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800dcda:	b29b      	uxth	r3, r3
 800dcdc:	3b01      	subs	r3, #1
 800dcde:	b29a      	uxth	r2, r3
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800dce6:	e023      	b.n	800dd30 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dce8:	f7f8 fdce 	bl	8006888 <HAL_GetTick>
 800dcec:	4602      	mov	r2, r0
 800dcee:	697b      	ldr	r3, [r7, #20]
 800dcf0:	1ad3      	subs	r3, r2, r3
 800dcf2:	683a      	ldr	r2, [r7, #0]
 800dcf4:	429a      	cmp	r2, r3
 800dcf6:	d803      	bhi.n	800dd00 <HAL_SPI_Receive+0x478>
 800dcf8:	683b      	ldr	r3, [r7, #0]
 800dcfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcfe:	d102      	bne.n	800dd06 <HAL_SPI_Receive+0x47e>
 800dd00:	683b      	ldr	r3, [r7, #0]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d114      	bne.n	800dd30 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800dd06:	68f8      	ldr	r0, [r7, #12]
 800dd08:	f000 fb6a 	bl	800e3e0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800dd12:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	2201      	movs	r2, #1
 800dd20:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	2200      	movs	r2, #0
 800dd28:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800dd2c:	2303      	movs	r3, #3
 800dd2e:	e019      	b.n	800dd64 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800dd36:	b29b      	uxth	r3, r3
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	f47f af41 	bne.w	800dbc0 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800dd3e:	68f8      	ldr	r0, [r7, #12]
 800dd40:	f000 fb4e 	bl	800e3e0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	2201      	movs	r2, #1
 800dd48:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	2200      	movs	r2, #0
 800dd50:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d001      	beq.n	800dd62 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800dd5e:	2301      	movs	r3, #1
 800dd60:	e000      	b.n	800dd64 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800dd62:	2300      	movs	r3, #0
  }
}
 800dd64:	4618      	mov	r0, r3
 800dd66:	3720      	adds	r7, #32
 800dd68:	46bd      	mov	sp, r7
 800dd6a:	bd80      	pop	{r7, pc}

0800dd6c <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	b08e      	sub	sp, #56	@ 0x38
 800dd70:	af02      	add	r7, sp, #8
 800dd72:	60f8      	str	r0, [r7, #12]
 800dd74:	60b9      	str	r1, [r7, #8]
 800dd76:	607a      	str	r2, [r7, #4]
 800dd78:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	3320      	adds	r3, #32
 800dd80:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	3330      	adds	r3, #48	@ 0x30
 800dd88:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dd8e:	095b      	lsrs	r3, r3, #5
 800dd90:	b29b      	uxth	r3, r3
 800dd92:	3301      	adds	r3, #1
 800dd94:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800dd96:	f7f8 fd77 	bl	8006888 <HAL_GetTick>
 800dd9a:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 800dd9c:	887b      	ldrh	r3, [r7, #2]
 800dd9e:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 800dda0:	887b      	ldrh	r3, [r7, #2]
 800dda2:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ddaa:	b2db      	uxtb	r3, r3
 800ddac:	2b01      	cmp	r3, #1
 800ddae:	d001      	beq.n	800ddb4 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 800ddb0:	2302      	movs	r3, #2
 800ddb2:	e310      	b.n	800e3d6 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800ddb4:	68bb      	ldr	r3, [r7, #8]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d005      	beq.n	800ddc6 <HAL_SPI_TransmitReceive+0x5a>
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d002      	beq.n	800ddc6 <HAL_SPI_TransmitReceive+0x5a>
 800ddc0:	887b      	ldrh	r3, [r7, #2]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d101      	bne.n	800ddca <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 800ddc6:	2301      	movs	r3, #1
 800ddc8:	e305      	b.n	800e3d6 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800ddd0:	2b01      	cmp	r3, #1
 800ddd2:	d101      	bne.n	800ddd8 <HAL_SPI_TransmitReceive+0x6c>
 800ddd4:	2302      	movs	r3, #2
 800ddd6:	e2fe      	b.n	800e3d6 <HAL_SPI_TransmitReceive+0x66a>
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	2201      	movs	r2, #1
 800dddc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	2205      	movs	r2, #5
 800dde4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	2200      	movs	r2, #0
 800ddec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	687a      	ldr	r2, [r7, #4]
 800ddf4:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	887a      	ldrh	r2, [r7, #2]
 800ddfa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	887a      	ldrh	r2, [r7, #2]
 800de02:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	68ba      	ldr	r2, [r7, #8]
 800de0a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	887a      	ldrh	r2, [r7, #2]
 800de10:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	887a      	ldrh	r2, [r7, #2]
 800de18:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	2200      	movs	r2, #0
 800de20:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	2200      	movs	r2, #0
 800de26:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	68da      	ldr	r2, [r3, #12]
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800de36:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	4a70      	ldr	r2, [pc, #448]	@ (800e000 <HAL_SPI_TransmitReceive+0x294>)
 800de3e:	4293      	cmp	r3, r2
 800de40:	d009      	beq.n	800de56 <HAL_SPI_TransmitReceive+0xea>
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	4a6f      	ldr	r2, [pc, #444]	@ (800e004 <HAL_SPI_TransmitReceive+0x298>)
 800de48:	4293      	cmp	r3, r2
 800de4a:	d004      	beq.n	800de56 <HAL_SPI_TransmitReceive+0xea>
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	4a6d      	ldr	r2, [pc, #436]	@ (800e008 <HAL_SPI_TransmitReceive+0x29c>)
 800de52:	4293      	cmp	r3, r2
 800de54:	d102      	bne.n	800de5c <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800de56:	2310      	movs	r3, #16
 800de58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800de5a:	e001      	b.n	800de60 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 800de5c:	2308      	movs	r3, #8
 800de5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	685a      	ldr	r2, [r3, #4]
 800de66:	4b69      	ldr	r3, [pc, #420]	@ (800e00c <HAL_SPI_TransmitReceive+0x2a0>)
 800de68:	4013      	ands	r3, r2
 800de6a:	8879      	ldrh	r1, [r7, #2]
 800de6c:	68fa      	ldr	r2, [r7, #12]
 800de6e:	6812      	ldr	r2, [r2, #0]
 800de70:	430b      	orrs	r3, r1
 800de72:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	681a      	ldr	r2, [r3, #0]
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	f042 0201 	orr.w	r2, r2, #1
 800de82:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	685b      	ldr	r3, [r3, #4]
 800de88:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800de8c:	d107      	bne.n	800de9e <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	681a      	ldr	r2, [r3, #0]
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800de9c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	68db      	ldr	r3, [r3, #12]
 800dea2:	2b0f      	cmp	r3, #15
 800dea4:	f240 80a2 	bls.w	800dfec <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 800dea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800deaa:	089b      	lsrs	r3, r3, #2
 800deac:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800deae:	e094      	b.n	800dfda <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	695b      	ldr	r3, [r3, #20]
 800deb6:	f003 0302 	and.w	r3, r3, #2
 800deba:	2b02      	cmp	r3, #2
 800debc:	d120      	bne.n	800df00 <HAL_SPI_TransmitReceive+0x194>
 800debe:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d01d      	beq.n	800df00 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800dec4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800dec6:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800dec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800deca:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800decc:	429a      	cmp	r2, r3
 800dece:	d217      	bcs.n	800df00 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	6812      	ldr	r2, [r2, #0]
 800deda:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dee0:	1d1a      	adds	r2, r3, #4
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800deec:	b29b      	uxth	r3, r3
 800deee:	3b01      	subs	r3, #1
 800def0:	b29a      	uxth	r2, r3
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800defe:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	695b      	ldr	r3, [r3, #20]
 800df06:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800df08:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d065      	beq.n	800dfda <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	695b      	ldr	r3, [r3, #20]
 800df14:	f003 0301 	and.w	r3, r3, #1
 800df18:	2b01      	cmp	r3, #1
 800df1a:	d118      	bne.n	800df4e <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	681a      	ldr	r2, [r3, #0]
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800df24:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800df26:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800df2c:	1d1a      	adds	r2, r3, #4
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800df38:	b29b      	uxth	r3, r3
 800df3a:	3b01      	subs	r3, #1
 800df3c:	b29a      	uxth	r2, r3
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800df4a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800df4c:	e045      	b.n	800dfda <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800df4e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800df50:	8bfb      	ldrh	r3, [r7, #30]
 800df52:	429a      	cmp	r2, r3
 800df54:	d21d      	bcs.n	800df92 <HAL_SPI_TransmitReceive+0x226>
 800df56:	697b      	ldr	r3, [r7, #20]
 800df58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d018      	beq.n	800df92 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	681a      	ldr	r2, [r3, #0]
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800df68:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800df6a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800df70:	1d1a      	adds	r2, r3, #4
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800df7c:	b29b      	uxth	r3, r3
 800df7e:	3b01      	subs	r3, #1
 800df80:	b29a      	uxth	r2, r3
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800df8e:	853b      	strh	r3, [r7, #40]	@ 0x28
 800df90:	e023      	b.n	800dfda <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800df92:	f7f8 fc79 	bl	8006888 <HAL_GetTick>
 800df96:	4602      	mov	r2, r0
 800df98:	69bb      	ldr	r3, [r7, #24]
 800df9a:	1ad3      	subs	r3, r2, r3
 800df9c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800df9e:	429a      	cmp	r2, r3
 800dfa0:	d803      	bhi.n	800dfaa <HAL_SPI_TransmitReceive+0x23e>
 800dfa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfa8:	d102      	bne.n	800dfb0 <HAL_SPI_TransmitReceive+0x244>
 800dfaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d114      	bne.n	800dfda <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800dfb0:	68f8      	ldr	r0, [r7, #12]
 800dfb2:	f000 fa15 	bl	800e3e0 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800dfbc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	2201      	movs	r2, #1
 800dfca:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	2200      	movs	r2, #0
 800dfd2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800dfd6:	2303      	movs	r3, #3
 800dfd8:	e1fd      	b.n	800e3d6 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800dfda:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	f47f af67 	bne.w	800deb0 <HAL_SPI_TransmitReceive+0x144>
 800dfe2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	f47f af63 	bne.w	800deb0 <HAL_SPI_TransmitReceive+0x144>
 800dfea:	e1ce      	b.n	800e38a <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	68db      	ldr	r3, [r3, #12]
 800dff0:	2b07      	cmp	r3, #7
 800dff2:	f240 81c2 	bls.w	800e37a <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800dff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dff8:	085b      	lsrs	r3, r3, #1
 800dffa:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800dffc:	e0c9      	b.n	800e192 <HAL_SPI_TransmitReceive+0x426>
 800dffe:	bf00      	nop
 800e000:	40013000 	.word	0x40013000
 800e004:	40003800 	.word	0x40003800
 800e008:	40003c00 	.word	0x40003c00
 800e00c:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	695b      	ldr	r3, [r3, #20]
 800e016:	f003 0302 	and.w	r3, r3, #2
 800e01a:	2b02      	cmp	r3, #2
 800e01c:	d11f      	bne.n	800e05e <HAL_SPI_TransmitReceive+0x2f2>
 800e01e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800e020:	2b00      	cmp	r3, #0
 800e022:	d01c      	beq.n	800e05e <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800e024:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800e026:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800e028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e02a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800e02c:	429a      	cmp	r2, r3
 800e02e:	d216      	bcs.n	800e05e <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e034:	881a      	ldrh	r2, [r3, #0]
 800e036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e038:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e03e:	1c9a      	adds	r2, r3, #2
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e04a:	b29b      	uxth	r3, r3
 800e04c:	3b01      	subs	r3, #1
 800e04e:	b29a      	uxth	r2, r3
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e05c:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	695b      	ldr	r3, [r3, #20]
 800e064:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800e066:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e068:	2b00      	cmp	r3, #0
 800e06a:	f000 8092 	beq.w	800e192 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	695b      	ldr	r3, [r3, #20]
 800e074:	f003 0301 	and.w	r3, r3, #1
 800e078:	2b01      	cmp	r3, #1
 800e07a:	d118      	bne.n	800e0ae <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e080:	6a3a      	ldr	r2, [r7, #32]
 800e082:	8812      	ldrh	r2, [r2, #0]
 800e084:	b292      	uxth	r2, r2
 800e086:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e08c:	1c9a      	adds	r2, r3, #2
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e098:	b29b      	uxth	r3, r3
 800e09a:	3b01      	subs	r3, #1
 800e09c:	b29a      	uxth	r2, r3
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e0aa:	853b      	strh	r3, [r7, #40]	@ 0x28
 800e0ac:	e071      	b.n	800e192 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e0ae:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800e0b0:	8bfb      	ldrh	r3, [r7, #30]
 800e0b2:	429a      	cmp	r2, r3
 800e0b4:	d228      	bcs.n	800e108 <HAL_SPI_TransmitReceive+0x39c>
 800e0b6:	697b      	ldr	r3, [r7, #20]
 800e0b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d023      	beq.n	800e108 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e0c4:	6a3a      	ldr	r2, [r7, #32]
 800e0c6:	8812      	ldrh	r2, [r2, #0]
 800e0c8:	b292      	uxth	r2, r2
 800e0ca:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e0d0:	1c9a      	adds	r2, r3, #2
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e0da:	6a3a      	ldr	r2, [r7, #32]
 800e0dc:	8812      	ldrh	r2, [r2, #0]
 800e0de:	b292      	uxth	r2, r2
 800e0e0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e0e6:	1c9a      	adds	r2, r3, #2
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e0f2:	b29b      	uxth	r3, r3
 800e0f4:	3b02      	subs	r3, #2
 800e0f6:	b29a      	uxth	r2, r3
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e104:	853b      	strh	r3, [r7, #40]	@ 0x28
 800e106:	e044      	b.n	800e192 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800e108:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e10a:	2b01      	cmp	r3, #1
 800e10c:	d11d      	bne.n	800e14a <HAL_SPI_TransmitReceive+0x3de>
 800e10e:	697b      	ldr	r3, [r7, #20]
 800e110:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e114:	2b00      	cmp	r3, #0
 800e116:	d018      	beq.n	800e14a <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e11c:	6a3a      	ldr	r2, [r7, #32]
 800e11e:	8812      	ldrh	r2, [r2, #0]
 800e120:	b292      	uxth	r2, r2
 800e122:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e128:	1c9a      	adds	r2, r3, #2
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e134:	b29b      	uxth	r3, r3
 800e136:	3b01      	subs	r3, #1
 800e138:	b29a      	uxth	r2, r3
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e146:	853b      	strh	r3, [r7, #40]	@ 0x28
 800e148:	e023      	b.n	800e192 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e14a:	f7f8 fb9d 	bl	8006888 <HAL_GetTick>
 800e14e:	4602      	mov	r2, r0
 800e150:	69bb      	ldr	r3, [r7, #24]
 800e152:	1ad3      	subs	r3, r2, r3
 800e154:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e156:	429a      	cmp	r2, r3
 800e158:	d803      	bhi.n	800e162 <HAL_SPI_TransmitReceive+0x3f6>
 800e15a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e15c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e160:	d102      	bne.n	800e168 <HAL_SPI_TransmitReceive+0x3fc>
 800e162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e164:	2b00      	cmp	r3, #0
 800e166:	d114      	bne.n	800e192 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800e168:	68f8      	ldr	r0, [r7, #12]
 800e16a:	f000 f939 	bl	800e3e0 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e174:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	2201      	movs	r2, #1
 800e182:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	2200      	movs	r2, #0
 800e18a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800e18e:	2303      	movs	r3, #3
 800e190:	e121      	b.n	800e3d6 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e192:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800e194:	2b00      	cmp	r3, #0
 800e196:	f47f af3b 	bne.w	800e010 <HAL_SPI_TransmitReceive+0x2a4>
 800e19a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	f47f af37 	bne.w	800e010 <HAL_SPI_TransmitReceive+0x2a4>
 800e1a2:	e0f2      	b.n	800e38a <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	695b      	ldr	r3, [r3, #20]
 800e1aa:	f003 0302 	and.w	r3, r3, #2
 800e1ae:	2b02      	cmp	r3, #2
 800e1b0:	d121      	bne.n	800e1f6 <HAL_SPI_TransmitReceive+0x48a>
 800e1b2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d01e      	beq.n	800e1f6 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800e1b8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800e1ba:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800e1bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1be:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800e1c0:	429a      	cmp	r2, r3
 800e1c2:	d218      	bcs.n	800e1f6 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	3320      	adds	r3, #32
 800e1ce:	7812      	ldrb	r2, [r2, #0]
 800e1d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e1d6:	1c5a      	adds	r2, r3, #1
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e1e2:	b29b      	uxth	r3, r3
 800e1e4:	3b01      	subs	r3, #1
 800e1e6:	b29a      	uxth	r2, r3
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e1f4:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	695b      	ldr	r3, [r3, #20]
 800e1fc:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800e1fe:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e200:	2b00      	cmp	r3, #0
 800e202:	f000 80ba 	beq.w	800e37a <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	695b      	ldr	r3, [r3, #20]
 800e20c:	f003 0301 	and.w	r3, r3, #1
 800e210:	2b01      	cmp	r3, #1
 800e212:	d11b      	bne.n	800e24c <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e220:	7812      	ldrb	r2, [r2, #0]
 800e222:	b2d2      	uxtb	r2, r2
 800e224:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e22a:	1c5a      	adds	r2, r3, #1
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e236:	b29b      	uxth	r3, r3
 800e238:	3b01      	subs	r3, #1
 800e23a:	b29a      	uxth	r2, r3
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e248:	853b      	strh	r3, [r7, #40]	@ 0x28
 800e24a:	e096      	b.n	800e37a <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e24c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800e24e:	8bfb      	ldrh	r3, [r7, #30]
 800e250:	429a      	cmp	r2, r3
 800e252:	d24a      	bcs.n	800e2ea <HAL_SPI_TransmitReceive+0x57e>
 800e254:	697b      	ldr	r3, [r7, #20]
 800e256:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d045      	beq.n	800e2ea <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e26a:	7812      	ldrb	r2, [r2, #0]
 800e26c:	b2d2      	uxtb	r2, r2
 800e26e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e274:	1c5a      	adds	r2, r3, #1
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e286:	7812      	ldrb	r2, [r2, #0]
 800e288:	b2d2      	uxtb	r2, r2
 800e28a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e290:	1c5a      	adds	r2, r3, #1
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e2a2:	7812      	ldrb	r2, [r2, #0]
 800e2a4:	b2d2      	uxtb	r2, r2
 800e2a6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e2ac:	1c5a      	adds	r2, r3, #1
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e2be:	7812      	ldrb	r2, [r2, #0]
 800e2c0:	b2d2      	uxtb	r2, r2
 800e2c2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e2c8:	1c5a      	adds	r2, r3, #1
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e2d4:	b29b      	uxth	r3, r3
 800e2d6:	3b04      	subs	r3, #4
 800e2d8:	b29a      	uxth	r2, r3
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e2e6:	853b      	strh	r3, [r7, #40]	@ 0x28
 800e2e8:	e047      	b.n	800e37a <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800e2ea:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e2ec:	2b03      	cmp	r3, #3
 800e2ee:	d820      	bhi.n	800e332 <HAL_SPI_TransmitReceive+0x5c6>
 800e2f0:	697b      	ldr	r3, [r7, #20]
 800e2f2:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d01b      	beq.n	800e332 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e306:	7812      	ldrb	r2, [r2, #0]
 800e308:	b2d2      	uxtb	r2, r2
 800e30a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e310:	1c5a      	adds	r2, r3, #1
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e31c:	b29b      	uxth	r3, r3
 800e31e:	3b01      	subs	r3, #1
 800e320:	b29a      	uxth	r2, r3
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e32e:	853b      	strh	r3, [r7, #40]	@ 0x28
 800e330:	e023      	b.n	800e37a <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e332:	f7f8 faa9 	bl	8006888 <HAL_GetTick>
 800e336:	4602      	mov	r2, r0
 800e338:	69bb      	ldr	r3, [r7, #24]
 800e33a:	1ad3      	subs	r3, r2, r3
 800e33c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e33e:	429a      	cmp	r2, r3
 800e340:	d803      	bhi.n	800e34a <HAL_SPI_TransmitReceive+0x5de>
 800e342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e344:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e348:	d102      	bne.n	800e350 <HAL_SPI_TransmitReceive+0x5e4>
 800e34a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d114      	bne.n	800e37a <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800e350:	68f8      	ldr	r0, [r7, #12]
 800e352:	f000 f845 	bl	800e3e0 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e35c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	2201      	movs	r2, #1
 800e36a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	2200      	movs	r2, #0
 800e372:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800e376:	2303      	movs	r3, #3
 800e378:	e02d      	b.n	800e3d6 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e37a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	f47f af11 	bne.w	800e1a4 <HAL_SPI_TransmitReceive+0x438>
 800e382:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e384:	2b00      	cmp	r3, #0
 800e386:	f47f af0d 	bne.w	800e1a4 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800e38a:	69bb      	ldr	r3, [r7, #24]
 800e38c:	9300      	str	r3, [sp, #0]
 800e38e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e390:	2200      	movs	r2, #0
 800e392:	2108      	movs	r1, #8
 800e394:	68f8      	ldr	r0, [r7, #12]
 800e396:	f000 f8c3 	bl	800e520 <SPI_WaitOnFlagUntilTimeout>
 800e39a:	4603      	mov	r3, r0
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d007      	beq.n	800e3b0 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e3a6:	f043 0220 	orr.w	r2, r3, #32
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e3b0:	68f8      	ldr	r0, [r7, #12]
 800e3b2:	f000 f815 	bl	800e3e0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	2201      	movs	r2, #1
 800e3ba:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	2200      	movs	r2, #0
 800e3c2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d001      	beq.n	800e3d4 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 800e3d0:	2301      	movs	r3, #1
 800e3d2:	e000      	b.n	800e3d6 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 800e3d4:	2300      	movs	r3, #0
  }
}
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	3730      	adds	r7, #48	@ 0x30
 800e3da:	46bd      	mov	sp, r7
 800e3dc:	bd80      	pop	{r7, pc}
 800e3de:	bf00      	nop

0800e3e0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800e3e0:	b480      	push	{r7}
 800e3e2:	b085      	sub	sp, #20
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	695b      	ldr	r3, [r3, #20]
 800e3ee:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	699a      	ldr	r2, [r3, #24]
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	f042 0208 	orr.w	r2, r2, #8
 800e3fe:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	699a      	ldr	r2, [r3, #24]
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	f042 0210 	orr.w	r2, r2, #16
 800e40e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	681a      	ldr	r2, [r3, #0]
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	f022 0201 	bic.w	r2, r2, #1
 800e41e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	6919      	ldr	r1, [r3, #16]
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	681a      	ldr	r2, [r3, #0]
 800e42a:	4b3c      	ldr	r3, [pc, #240]	@ (800e51c <SPI_CloseTransfer+0x13c>)
 800e42c:	400b      	ands	r3, r1
 800e42e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	689a      	ldr	r2, [r3, #8]
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800e43e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800e446:	b2db      	uxtb	r3, r3
 800e448:	2b04      	cmp	r3, #4
 800e44a:	d014      	beq.n	800e476 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	f003 0320 	and.w	r3, r3, #32
 800e452:	2b00      	cmp	r3, #0
 800e454:	d00f      	beq.n	800e476 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e45c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	699a      	ldr	r2, [r3, #24]
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	f042 0220 	orr.w	r2, r2, #32
 800e474:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800e47c:	b2db      	uxtb	r3, r3
 800e47e:	2b03      	cmp	r3, #3
 800e480:	d014      	beq.n	800e4ac <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d00f      	beq.n	800e4ac <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e492:	f043 0204 	orr.w	r2, r3, #4
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	699a      	ldr	r2, [r3, #24]
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e4aa:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d00f      	beq.n	800e4d6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e4bc:	f043 0201 	orr.w	r2, r3, #1
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	699a      	ldr	r2, [r3, #24]
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e4d4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d00f      	beq.n	800e500 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e4e6:	f043 0208 	orr.w	r2, r3, #8
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	699a      	ldr	r2, [r3, #24]
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e4fe:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	2200      	movs	r2, #0
 800e504:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	2200      	movs	r2, #0
 800e50c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800e510:	bf00      	nop
 800e512:	3714      	adds	r7, #20
 800e514:	46bd      	mov	sp, r7
 800e516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e51a:	4770      	bx	lr
 800e51c:	fffffc90 	.word	0xfffffc90

0800e520 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800e520:	b580      	push	{r7, lr}
 800e522:	b084      	sub	sp, #16
 800e524:	af00      	add	r7, sp, #0
 800e526:	60f8      	str	r0, [r7, #12]
 800e528:	60b9      	str	r1, [r7, #8]
 800e52a:	603b      	str	r3, [r7, #0]
 800e52c:	4613      	mov	r3, r2
 800e52e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800e530:	e010      	b.n	800e554 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e532:	f7f8 f9a9 	bl	8006888 <HAL_GetTick>
 800e536:	4602      	mov	r2, r0
 800e538:	69bb      	ldr	r3, [r7, #24]
 800e53a:	1ad3      	subs	r3, r2, r3
 800e53c:	683a      	ldr	r2, [r7, #0]
 800e53e:	429a      	cmp	r2, r3
 800e540:	d803      	bhi.n	800e54a <SPI_WaitOnFlagUntilTimeout+0x2a>
 800e542:	683b      	ldr	r3, [r7, #0]
 800e544:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e548:	d102      	bne.n	800e550 <SPI_WaitOnFlagUntilTimeout+0x30>
 800e54a:	683b      	ldr	r3, [r7, #0]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d101      	bne.n	800e554 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800e550:	2303      	movs	r3, #3
 800e552:	e00f      	b.n	800e574 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	695a      	ldr	r2, [r3, #20]
 800e55a:	68bb      	ldr	r3, [r7, #8]
 800e55c:	4013      	ands	r3, r2
 800e55e:	68ba      	ldr	r2, [r7, #8]
 800e560:	429a      	cmp	r2, r3
 800e562:	bf0c      	ite	eq
 800e564:	2301      	moveq	r3, #1
 800e566:	2300      	movne	r3, #0
 800e568:	b2db      	uxtb	r3, r3
 800e56a:	461a      	mov	r2, r3
 800e56c:	79fb      	ldrb	r3, [r7, #7]
 800e56e:	429a      	cmp	r2, r3
 800e570:	d0df      	beq.n	800e532 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800e572:	2300      	movs	r3, #0
}
 800e574:	4618      	mov	r0, r3
 800e576:	3710      	adds	r7, #16
 800e578:	46bd      	mov	sp, r7
 800e57a:	bd80      	pop	{r7, pc}

0800e57c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800e57c:	b480      	push	{r7}
 800e57e:	b085      	sub	sp, #20
 800e580:	af00      	add	r7, sp, #0
 800e582:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e588:	095b      	lsrs	r3, r3, #5
 800e58a:	3301      	adds	r3, #1
 800e58c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	68db      	ldr	r3, [r3, #12]
 800e592:	3301      	adds	r3, #1
 800e594:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e596:	68bb      	ldr	r3, [r7, #8]
 800e598:	3307      	adds	r3, #7
 800e59a:	08db      	lsrs	r3, r3, #3
 800e59c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800e59e:	68bb      	ldr	r3, [r7, #8]
 800e5a0:	68fa      	ldr	r2, [r7, #12]
 800e5a2:	fb02 f303 	mul.w	r3, r2, r3
}
 800e5a6:	4618      	mov	r0, r3
 800e5a8:	3714      	adds	r7, #20
 800e5aa:	46bd      	mov	sp, r7
 800e5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b0:	4770      	bx	lr

0800e5b2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e5b2:	b580      	push	{r7, lr}
 800e5b4:	b082      	sub	sp, #8
 800e5b6:	af00      	add	r7, sp, #0
 800e5b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d101      	bne.n	800e5c4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e5c0:	2301      	movs	r3, #1
 800e5c2:	e049      	b.n	800e658 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e5ca:	b2db      	uxtb	r3, r3
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d106      	bne.n	800e5de <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	2200      	movs	r2, #0
 800e5d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e5d8:	6878      	ldr	r0, [r7, #4]
 800e5da:	f7f5 fb4d 	bl	8003c78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	2202      	movs	r2, #2
 800e5e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	681a      	ldr	r2, [r3, #0]
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	3304      	adds	r3, #4
 800e5ee:	4619      	mov	r1, r3
 800e5f0:	4610      	mov	r0, r2
 800e5f2:	f000 fc57 	bl	800eea4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	2201      	movs	r2, #1
 800e5fa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	2201      	movs	r2, #1
 800e602:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	2201      	movs	r2, #1
 800e60a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	2201      	movs	r2, #1
 800e612:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	2201      	movs	r2, #1
 800e61a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	2201      	movs	r2, #1
 800e622:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	2201      	movs	r2, #1
 800e62a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	2201      	movs	r2, #1
 800e632:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	2201      	movs	r2, #1
 800e63a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	2201      	movs	r2, #1
 800e642:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	2201      	movs	r2, #1
 800e64a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	2201      	movs	r2, #1
 800e652:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e656:	2300      	movs	r3, #0
}
 800e658:	4618      	mov	r0, r3
 800e65a:	3708      	adds	r7, #8
 800e65c:	46bd      	mov	sp, r7
 800e65e:	bd80      	pop	{r7, pc}

0800e660 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e660:	b480      	push	{r7}
 800e662:	b085      	sub	sp, #20
 800e664:	af00      	add	r7, sp, #0
 800e666:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e66e:	b2db      	uxtb	r3, r3
 800e670:	2b01      	cmp	r3, #1
 800e672:	d001      	beq.n	800e678 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e674:	2301      	movs	r3, #1
 800e676:	e054      	b.n	800e722 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	2202      	movs	r2, #2
 800e67c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	68da      	ldr	r2, [r3, #12]
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	f042 0201 	orr.w	r2, r2, #1
 800e68e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	4a26      	ldr	r2, [pc, #152]	@ (800e730 <HAL_TIM_Base_Start_IT+0xd0>)
 800e696:	4293      	cmp	r3, r2
 800e698:	d022      	beq.n	800e6e0 <HAL_TIM_Base_Start_IT+0x80>
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e6a2:	d01d      	beq.n	800e6e0 <HAL_TIM_Base_Start_IT+0x80>
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	4a22      	ldr	r2, [pc, #136]	@ (800e734 <HAL_TIM_Base_Start_IT+0xd4>)
 800e6aa:	4293      	cmp	r3, r2
 800e6ac:	d018      	beq.n	800e6e0 <HAL_TIM_Base_Start_IT+0x80>
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	4a21      	ldr	r2, [pc, #132]	@ (800e738 <HAL_TIM_Base_Start_IT+0xd8>)
 800e6b4:	4293      	cmp	r3, r2
 800e6b6:	d013      	beq.n	800e6e0 <HAL_TIM_Base_Start_IT+0x80>
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	4a1f      	ldr	r2, [pc, #124]	@ (800e73c <HAL_TIM_Base_Start_IT+0xdc>)
 800e6be:	4293      	cmp	r3, r2
 800e6c0:	d00e      	beq.n	800e6e0 <HAL_TIM_Base_Start_IT+0x80>
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	4a1e      	ldr	r2, [pc, #120]	@ (800e740 <HAL_TIM_Base_Start_IT+0xe0>)
 800e6c8:	4293      	cmp	r3, r2
 800e6ca:	d009      	beq.n	800e6e0 <HAL_TIM_Base_Start_IT+0x80>
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	4a1c      	ldr	r2, [pc, #112]	@ (800e744 <HAL_TIM_Base_Start_IT+0xe4>)
 800e6d2:	4293      	cmp	r3, r2
 800e6d4:	d004      	beq.n	800e6e0 <HAL_TIM_Base_Start_IT+0x80>
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	4a1b      	ldr	r2, [pc, #108]	@ (800e748 <HAL_TIM_Base_Start_IT+0xe8>)
 800e6dc:	4293      	cmp	r3, r2
 800e6de:	d115      	bne.n	800e70c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	689a      	ldr	r2, [r3, #8]
 800e6e6:	4b19      	ldr	r3, [pc, #100]	@ (800e74c <HAL_TIM_Base_Start_IT+0xec>)
 800e6e8:	4013      	ands	r3, r2
 800e6ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	2b06      	cmp	r3, #6
 800e6f0:	d015      	beq.n	800e71e <HAL_TIM_Base_Start_IT+0xbe>
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e6f8:	d011      	beq.n	800e71e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	681a      	ldr	r2, [r3, #0]
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	f042 0201 	orr.w	r2, r2, #1
 800e708:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e70a:	e008      	b.n	800e71e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	681a      	ldr	r2, [r3, #0]
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	f042 0201 	orr.w	r2, r2, #1
 800e71a:	601a      	str	r2, [r3, #0]
 800e71c:	e000      	b.n	800e720 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e71e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e720:	2300      	movs	r3, #0
}
 800e722:	4618      	mov	r0, r3
 800e724:	3714      	adds	r7, #20
 800e726:	46bd      	mov	sp, r7
 800e728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e72c:	4770      	bx	lr
 800e72e:	bf00      	nop
 800e730:	40010000 	.word	0x40010000
 800e734:	40000400 	.word	0x40000400
 800e738:	40000800 	.word	0x40000800
 800e73c:	40000c00 	.word	0x40000c00
 800e740:	40010400 	.word	0x40010400
 800e744:	40001800 	.word	0x40001800
 800e748:	40014000 	.word	0x40014000
 800e74c:	00010007 	.word	0x00010007

0800e750 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e750:	b580      	push	{r7, lr}
 800e752:	b082      	sub	sp, #8
 800e754:	af00      	add	r7, sp, #0
 800e756:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d101      	bne.n	800e762 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e75e:	2301      	movs	r3, #1
 800e760:	e049      	b.n	800e7f6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e768:	b2db      	uxtb	r3, r3
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d106      	bne.n	800e77c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	2200      	movs	r2, #0
 800e772:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e776:	6878      	ldr	r0, [r7, #4]
 800e778:	f7f5 fa30 	bl	8003bdc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	2202      	movs	r2, #2
 800e780:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	681a      	ldr	r2, [r3, #0]
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	3304      	adds	r3, #4
 800e78c:	4619      	mov	r1, r3
 800e78e:	4610      	mov	r0, r2
 800e790:	f000 fb88 	bl	800eea4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	2201      	movs	r2, #1
 800e798:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	2201      	movs	r2, #1
 800e7a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	2201      	movs	r2, #1
 800e7a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	2201      	movs	r2, #1
 800e7b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	2201      	movs	r2, #1
 800e7b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	2201      	movs	r2, #1
 800e7c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	2201      	movs	r2, #1
 800e7c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	2201      	movs	r2, #1
 800e7d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	2201      	movs	r2, #1
 800e7d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	2201      	movs	r2, #1
 800e7e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	2201      	movs	r2, #1
 800e7e8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	2201      	movs	r2, #1
 800e7f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e7f4:	2300      	movs	r3, #0
}
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	3708      	adds	r7, #8
 800e7fa:	46bd      	mov	sp, r7
 800e7fc:	bd80      	pop	{r7, pc}
	...

0800e800 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e800:	b580      	push	{r7, lr}
 800e802:	b084      	sub	sp, #16
 800e804:	af00      	add	r7, sp, #0
 800e806:	6078      	str	r0, [r7, #4]
 800e808:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e80a:	683b      	ldr	r3, [r7, #0]
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d109      	bne.n	800e824 <HAL_TIM_PWM_Start+0x24>
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800e816:	b2db      	uxtb	r3, r3
 800e818:	2b01      	cmp	r3, #1
 800e81a:	bf14      	ite	ne
 800e81c:	2301      	movne	r3, #1
 800e81e:	2300      	moveq	r3, #0
 800e820:	b2db      	uxtb	r3, r3
 800e822:	e03c      	b.n	800e89e <HAL_TIM_PWM_Start+0x9e>
 800e824:	683b      	ldr	r3, [r7, #0]
 800e826:	2b04      	cmp	r3, #4
 800e828:	d109      	bne.n	800e83e <HAL_TIM_PWM_Start+0x3e>
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800e830:	b2db      	uxtb	r3, r3
 800e832:	2b01      	cmp	r3, #1
 800e834:	bf14      	ite	ne
 800e836:	2301      	movne	r3, #1
 800e838:	2300      	moveq	r3, #0
 800e83a:	b2db      	uxtb	r3, r3
 800e83c:	e02f      	b.n	800e89e <HAL_TIM_PWM_Start+0x9e>
 800e83e:	683b      	ldr	r3, [r7, #0]
 800e840:	2b08      	cmp	r3, #8
 800e842:	d109      	bne.n	800e858 <HAL_TIM_PWM_Start+0x58>
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e84a:	b2db      	uxtb	r3, r3
 800e84c:	2b01      	cmp	r3, #1
 800e84e:	bf14      	ite	ne
 800e850:	2301      	movne	r3, #1
 800e852:	2300      	moveq	r3, #0
 800e854:	b2db      	uxtb	r3, r3
 800e856:	e022      	b.n	800e89e <HAL_TIM_PWM_Start+0x9e>
 800e858:	683b      	ldr	r3, [r7, #0]
 800e85a:	2b0c      	cmp	r3, #12
 800e85c:	d109      	bne.n	800e872 <HAL_TIM_PWM_Start+0x72>
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e864:	b2db      	uxtb	r3, r3
 800e866:	2b01      	cmp	r3, #1
 800e868:	bf14      	ite	ne
 800e86a:	2301      	movne	r3, #1
 800e86c:	2300      	moveq	r3, #0
 800e86e:	b2db      	uxtb	r3, r3
 800e870:	e015      	b.n	800e89e <HAL_TIM_PWM_Start+0x9e>
 800e872:	683b      	ldr	r3, [r7, #0]
 800e874:	2b10      	cmp	r3, #16
 800e876:	d109      	bne.n	800e88c <HAL_TIM_PWM_Start+0x8c>
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e87e:	b2db      	uxtb	r3, r3
 800e880:	2b01      	cmp	r3, #1
 800e882:	bf14      	ite	ne
 800e884:	2301      	movne	r3, #1
 800e886:	2300      	moveq	r3, #0
 800e888:	b2db      	uxtb	r3, r3
 800e88a:	e008      	b.n	800e89e <HAL_TIM_PWM_Start+0x9e>
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800e892:	b2db      	uxtb	r3, r3
 800e894:	2b01      	cmp	r3, #1
 800e896:	bf14      	ite	ne
 800e898:	2301      	movne	r3, #1
 800e89a:	2300      	moveq	r3, #0
 800e89c:	b2db      	uxtb	r3, r3
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d001      	beq.n	800e8a6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800e8a2:	2301      	movs	r3, #1
 800e8a4:	e0a1      	b.n	800e9ea <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e8a6:	683b      	ldr	r3, [r7, #0]
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d104      	bne.n	800e8b6 <HAL_TIM_PWM_Start+0xb6>
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	2202      	movs	r2, #2
 800e8b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e8b4:	e023      	b.n	800e8fe <HAL_TIM_PWM_Start+0xfe>
 800e8b6:	683b      	ldr	r3, [r7, #0]
 800e8b8:	2b04      	cmp	r3, #4
 800e8ba:	d104      	bne.n	800e8c6 <HAL_TIM_PWM_Start+0xc6>
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	2202      	movs	r2, #2
 800e8c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e8c4:	e01b      	b.n	800e8fe <HAL_TIM_PWM_Start+0xfe>
 800e8c6:	683b      	ldr	r3, [r7, #0]
 800e8c8:	2b08      	cmp	r3, #8
 800e8ca:	d104      	bne.n	800e8d6 <HAL_TIM_PWM_Start+0xd6>
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	2202      	movs	r2, #2
 800e8d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e8d4:	e013      	b.n	800e8fe <HAL_TIM_PWM_Start+0xfe>
 800e8d6:	683b      	ldr	r3, [r7, #0]
 800e8d8:	2b0c      	cmp	r3, #12
 800e8da:	d104      	bne.n	800e8e6 <HAL_TIM_PWM_Start+0xe6>
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	2202      	movs	r2, #2
 800e8e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e8e4:	e00b      	b.n	800e8fe <HAL_TIM_PWM_Start+0xfe>
 800e8e6:	683b      	ldr	r3, [r7, #0]
 800e8e8:	2b10      	cmp	r3, #16
 800e8ea:	d104      	bne.n	800e8f6 <HAL_TIM_PWM_Start+0xf6>
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	2202      	movs	r2, #2
 800e8f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e8f4:	e003      	b.n	800e8fe <HAL_TIM_PWM_Start+0xfe>
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	2202      	movs	r2, #2
 800e8fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	2201      	movs	r2, #1
 800e904:	6839      	ldr	r1, [r7, #0]
 800e906:	4618      	mov	r0, r3
 800e908:	f000 fe48 	bl	800f59c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	4a38      	ldr	r2, [pc, #224]	@ (800e9f4 <HAL_TIM_PWM_Start+0x1f4>)
 800e912:	4293      	cmp	r3, r2
 800e914:	d013      	beq.n	800e93e <HAL_TIM_PWM_Start+0x13e>
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	4a37      	ldr	r2, [pc, #220]	@ (800e9f8 <HAL_TIM_PWM_Start+0x1f8>)
 800e91c:	4293      	cmp	r3, r2
 800e91e:	d00e      	beq.n	800e93e <HAL_TIM_PWM_Start+0x13e>
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	4a35      	ldr	r2, [pc, #212]	@ (800e9fc <HAL_TIM_PWM_Start+0x1fc>)
 800e926:	4293      	cmp	r3, r2
 800e928:	d009      	beq.n	800e93e <HAL_TIM_PWM_Start+0x13e>
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	4a34      	ldr	r2, [pc, #208]	@ (800ea00 <HAL_TIM_PWM_Start+0x200>)
 800e930:	4293      	cmp	r3, r2
 800e932:	d004      	beq.n	800e93e <HAL_TIM_PWM_Start+0x13e>
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	4a32      	ldr	r2, [pc, #200]	@ (800ea04 <HAL_TIM_PWM_Start+0x204>)
 800e93a:	4293      	cmp	r3, r2
 800e93c:	d101      	bne.n	800e942 <HAL_TIM_PWM_Start+0x142>
 800e93e:	2301      	movs	r3, #1
 800e940:	e000      	b.n	800e944 <HAL_TIM_PWM_Start+0x144>
 800e942:	2300      	movs	r3, #0
 800e944:	2b00      	cmp	r3, #0
 800e946:	d007      	beq.n	800e958 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e956:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	4a25      	ldr	r2, [pc, #148]	@ (800e9f4 <HAL_TIM_PWM_Start+0x1f4>)
 800e95e:	4293      	cmp	r3, r2
 800e960:	d022      	beq.n	800e9a8 <HAL_TIM_PWM_Start+0x1a8>
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e96a:	d01d      	beq.n	800e9a8 <HAL_TIM_PWM_Start+0x1a8>
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	4a25      	ldr	r2, [pc, #148]	@ (800ea08 <HAL_TIM_PWM_Start+0x208>)
 800e972:	4293      	cmp	r3, r2
 800e974:	d018      	beq.n	800e9a8 <HAL_TIM_PWM_Start+0x1a8>
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	4a24      	ldr	r2, [pc, #144]	@ (800ea0c <HAL_TIM_PWM_Start+0x20c>)
 800e97c:	4293      	cmp	r3, r2
 800e97e:	d013      	beq.n	800e9a8 <HAL_TIM_PWM_Start+0x1a8>
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	4a22      	ldr	r2, [pc, #136]	@ (800ea10 <HAL_TIM_PWM_Start+0x210>)
 800e986:	4293      	cmp	r3, r2
 800e988:	d00e      	beq.n	800e9a8 <HAL_TIM_PWM_Start+0x1a8>
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	4a1a      	ldr	r2, [pc, #104]	@ (800e9f8 <HAL_TIM_PWM_Start+0x1f8>)
 800e990:	4293      	cmp	r3, r2
 800e992:	d009      	beq.n	800e9a8 <HAL_TIM_PWM_Start+0x1a8>
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	4a1e      	ldr	r2, [pc, #120]	@ (800ea14 <HAL_TIM_PWM_Start+0x214>)
 800e99a:	4293      	cmp	r3, r2
 800e99c:	d004      	beq.n	800e9a8 <HAL_TIM_PWM_Start+0x1a8>
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	4a16      	ldr	r2, [pc, #88]	@ (800e9fc <HAL_TIM_PWM_Start+0x1fc>)
 800e9a4:	4293      	cmp	r3, r2
 800e9a6:	d115      	bne.n	800e9d4 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	689a      	ldr	r2, [r3, #8]
 800e9ae:	4b1a      	ldr	r3, [pc, #104]	@ (800ea18 <HAL_TIM_PWM_Start+0x218>)
 800e9b0:	4013      	ands	r3, r2
 800e9b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	2b06      	cmp	r3, #6
 800e9b8:	d015      	beq.n	800e9e6 <HAL_TIM_PWM_Start+0x1e6>
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e9c0:	d011      	beq.n	800e9e6 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	681a      	ldr	r2, [r3, #0]
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	f042 0201 	orr.w	r2, r2, #1
 800e9d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e9d2:	e008      	b.n	800e9e6 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	681a      	ldr	r2, [r3, #0]
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	f042 0201 	orr.w	r2, r2, #1
 800e9e2:	601a      	str	r2, [r3, #0]
 800e9e4:	e000      	b.n	800e9e8 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e9e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e9e8:	2300      	movs	r3, #0
}
 800e9ea:	4618      	mov	r0, r3
 800e9ec:	3710      	adds	r7, #16
 800e9ee:	46bd      	mov	sp, r7
 800e9f0:	bd80      	pop	{r7, pc}
 800e9f2:	bf00      	nop
 800e9f4:	40010000 	.word	0x40010000
 800e9f8:	40010400 	.word	0x40010400
 800e9fc:	40014000 	.word	0x40014000
 800ea00:	40014400 	.word	0x40014400
 800ea04:	40014800 	.word	0x40014800
 800ea08:	40000400 	.word	0x40000400
 800ea0c:	40000800 	.word	0x40000800
 800ea10:	40000c00 	.word	0x40000c00
 800ea14:	40001800 	.word	0x40001800
 800ea18:	00010007 	.word	0x00010007

0800ea1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	b084      	sub	sp, #16
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	68db      	ldr	r3, [r3, #12]
 800ea2a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	691b      	ldr	r3, [r3, #16]
 800ea32:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ea34:	68bb      	ldr	r3, [r7, #8]
 800ea36:	f003 0302 	and.w	r3, r3, #2
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d020      	beq.n	800ea80 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	f003 0302 	and.w	r3, r3, #2
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d01b      	beq.n	800ea80 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	f06f 0202 	mvn.w	r2, #2
 800ea50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	2201      	movs	r2, #1
 800ea56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	699b      	ldr	r3, [r3, #24]
 800ea5e:	f003 0303 	and.w	r3, r3, #3
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d003      	beq.n	800ea6e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ea66:	6878      	ldr	r0, [r7, #4]
 800ea68:	f000 f9fe 	bl	800ee68 <HAL_TIM_IC_CaptureCallback>
 800ea6c:	e005      	b.n	800ea7a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ea6e:	6878      	ldr	r0, [r7, #4]
 800ea70:	f000 f9f0 	bl	800ee54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ea74:	6878      	ldr	r0, [r7, #4]
 800ea76:	f000 fa01 	bl	800ee7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	2200      	movs	r2, #0
 800ea7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ea80:	68bb      	ldr	r3, [r7, #8]
 800ea82:	f003 0304 	and.w	r3, r3, #4
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d020      	beq.n	800eacc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	f003 0304 	and.w	r3, r3, #4
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d01b      	beq.n	800eacc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	f06f 0204 	mvn.w	r2, #4
 800ea9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	2202      	movs	r2, #2
 800eaa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	699b      	ldr	r3, [r3, #24]
 800eaaa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d003      	beq.n	800eaba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800eab2:	6878      	ldr	r0, [r7, #4]
 800eab4:	f000 f9d8 	bl	800ee68 <HAL_TIM_IC_CaptureCallback>
 800eab8:	e005      	b.n	800eac6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800eaba:	6878      	ldr	r0, [r7, #4]
 800eabc:	f000 f9ca 	bl	800ee54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eac0:	6878      	ldr	r0, [r7, #4]
 800eac2:	f000 f9db 	bl	800ee7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	2200      	movs	r2, #0
 800eaca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800eacc:	68bb      	ldr	r3, [r7, #8]
 800eace:	f003 0308 	and.w	r3, r3, #8
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d020      	beq.n	800eb18 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	f003 0308 	and.w	r3, r3, #8
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d01b      	beq.n	800eb18 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	f06f 0208 	mvn.w	r2, #8
 800eae8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	2204      	movs	r2, #4
 800eaee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	69db      	ldr	r3, [r3, #28]
 800eaf6:	f003 0303 	and.w	r3, r3, #3
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d003      	beq.n	800eb06 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800eafe:	6878      	ldr	r0, [r7, #4]
 800eb00:	f000 f9b2 	bl	800ee68 <HAL_TIM_IC_CaptureCallback>
 800eb04:	e005      	b.n	800eb12 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800eb06:	6878      	ldr	r0, [r7, #4]
 800eb08:	f000 f9a4 	bl	800ee54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eb0c:	6878      	ldr	r0, [r7, #4]
 800eb0e:	f000 f9b5 	bl	800ee7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	2200      	movs	r2, #0
 800eb16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800eb18:	68bb      	ldr	r3, [r7, #8]
 800eb1a:	f003 0310 	and.w	r3, r3, #16
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d020      	beq.n	800eb64 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	f003 0310 	and.w	r3, r3, #16
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d01b      	beq.n	800eb64 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	f06f 0210 	mvn.w	r2, #16
 800eb34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	2208      	movs	r2, #8
 800eb3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	69db      	ldr	r3, [r3, #28]
 800eb42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d003      	beq.n	800eb52 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800eb4a:	6878      	ldr	r0, [r7, #4]
 800eb4c:	f000 f98c 	bl	800ee68 <HAL_TIM_IC_CaptureCallback>
 800eb50:	e005      	b.n	800eb5e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800eb52:	6878      	ldr	r0, [r7, #4]
 800eb54:	f000 f97e 	bl	800ee54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eb58:	6878      	ldr	r0, [r7, #4]
 800eb5a:	f000 f98f 	bl	800ee7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	2200      	movs	r2, #0
 800eb62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800eb64:	68bb      	ldr	r3, [r7, #8]
 800eb66:	f003 0301 	and.w	r3, r3, #1
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d00c      	beq.n	800eb88 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	f003 0301 	and.w	r3, r3, #1
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d007      	beq.n	800eb88 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	f06f 0201 	mvn.w	r2, #1
 800eb80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800eb82:	6878      	ldr	r0, [r7, #4]
 800eb84:	f7f4 fb00 	bl	8003188 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800eb88:	68bb      	ldr	r3, [r7, #8]
 800eb8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d104      	bne.n	800eb9c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800eb92:	68bb      	ldr	r3, [r7, #8]
 800eb94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d00c      	beq.n	800ebb6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d007      	beq.n	800ebb6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800ebae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ebb0:	6878      	ldr	r0, [r7, #4]
 800ebb2:	f000 fdb1 	bl	800f718 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ebb6:	68bb      	ldr	r3, [r7, #8]
 800ebb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d00c      	beq.n	800ebda <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d007      	beq.n	800ebda <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800ebd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ebd4:	6878      	ldr	r0, [r7, #4]
 800ebd6:	f000 fda9 	bl	800f72c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ebda:	68bb      	ldr	r3, [r7, #8]
 800ebdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d00c      	beq.n	800ebfe <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d007      	beq.n	800ebfe <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800ebf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ebf8:	6878      	ldr	r0, [r7, #4]
 800ebfa:	f000 f949 	bl	800ee90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ebfe:	68bb      	ldr	r3, [r7, #8]
 800ec00:	f003 0320 	and.w	r3, r3, #32
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d00c      	beq.n	800ec22 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	f003 0320 	and.w	r3, r3, #32
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d007      	beq.n	800ec22 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	f06f 0220 	mvn.w	r2, #32
 800ec1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ec1c:	6878      	ldr	r0, [r7, #4]
 800ec1e:	f000 fd71 	bl	800f704 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ec22:	bf00      	nop
 800ec24:	3710      	adds	r7, #16
 800ec26:	46bd      	mov	sp, r7
 800ec28:	bd80      	pop	{r7, pc}
	...

0800ec2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ec2c:	b580      	push	{r7, lr}
 800ec2e:	b086      	sub	sp, #24
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	60f8      	str	r0, [r7, #12]
 800ec34:	60b9      	str	r1, [r7, #8]
 800ec36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ec38:	2300      	movs	r3, #0
 800ec3a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ec42:	2b01      	cmp	r3, #1
 800ec44:	d101      	bne.n	800ec4a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ec46:	2302      	movs	r3, #2
 800ec48:	e0ff      	b.n	800ee4a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	2201      	movs	r2, #1
 800ec4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	2b14      	cmp	r3, #20
 800ec56:	f200 80f0 	bhi.w	800ee3a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ec5a:	a201      	add	r2, pc, #4	@ (adr r2, 800ec60 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ec5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec60:	0800ecb5 	.word	0x0800ecb5
 800ec64:	0800ee3b 	.word	0x0800ee3b
 800ec68:	0800ee3b 	.word	0x0800ee3b
 800ec6c:	0800ee3b 	.word	0x0800ee3b
 800ec70:	0800ecf5 	.word	0x0800ecf5
 800ec74:	0800ee3b 	.word	0x0800ee3b
 800ec78:	0800ee3b 	.word	0x0800ee3b
 800ec7c:	0800ee3b 	.word	0x0800ee3b
 800ec80:	0800ed37 	.word	0x0800ed37
 800ec84:	0800ee3b 	.word	0x0800ee3b
 800ec88:	0800ee3b 	.word	0x0800ee3b
 800ec8c:	0800ee3b 	.word	0x0800ee3b
 800ec90:	0800ed77 	.word	0x0800ed77
 800ec94:	0800ee3b 	.word	0x0800ee3b
 800ec98:	0800ee3b 	.word	0x0800ee3b
 800ec9c:	0800ee3b 	.word	0x0800ee3b
 800eca0:	0800edb9 	.word	0x0800edb9
 800eca4:	0800ee3b 	.word	0x0800ee3b
 800eca8:	0800ee3b 	.word	0x0800ee3b
 800ecac:	0800ee3b 	.word	0x0800ee3b
 800ecb0:	0800edf9 	.word	0x0800edf9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	68b9      	ldr	r1, [r7, #8]
 800ecba:	4618      	mov	r0, r3
 800ecbc:	f000 f998 	bl	800eff0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	699a      	ldr	r2, [r3, #24]
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	f042 0208 	orr.w	r2, r2, #8
 800ecce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	699a      	ldr	r2, [r3, #24]
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	f022 0204 	bic.w	r2, r2, #4
 800ecde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	6999      	ldr	r1, [r3, #24]
 800ece6:	68bb      	ldr	r3, [r7, #8]
 800ece8:	691a      	ldr	r2, [r3, #16]
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	430a      	orrs	r2, r1
 800ecf0:	619a      	str	r2, [r3, #24]
      break;
 800ecf2:	e0a5      	b.n	800ee40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	68b9      	ldr	r1, [r7, #8]
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	f000 fa08 	bl	800f110 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	699a      	ldr	r2, [r3, #24]
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ed0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	699a      	ldr	r2, [r3, #24]
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ed1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	6999      	ldr	r1, [r3, #24]
 800ed26:	68bb      	ldr	r3, [r7, #8]
 800ed28:	691b      	ldr	r3, [r3, #16]
 800ed2a:	021a      	lsls	r2, r3, #8
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	430a      	orrs	r2, r1
 800ed32:	619a      	str	r2, [r3, #24]
      break;
 800ed34:	e084      	b.n	800ee40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	68b9      	ldr	r1, [r7, #8]
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	f000 fa71 	bl	800f224 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	69da      	ldr	r2, [r3, #28]
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	f042 0208 	orr.w	r2, r2, #8
 800ed50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	69da      	ldr	r2, [r3, #28]
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	f022 0204 	bic.w	r2, r2, #4
 800ed60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	69d9      	ldr	r1, [r3, #28]
 800ed68:	68bb      	ldr	r3, [r7, #8]
 800ed6a:	691a      	ldr	r2, [r3, #16]
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	430a      	orrs	r2, r1
 800ed72:	61da      	str	r2, [r3, #28]
      break;
 800ed74:	e064      	b.n	800ee40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	68b9      	ldr	r1, [r7, #8]
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	f000 fad9 	bl	800f334 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	69da      	ldr	r2, [r3, #28]
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ed90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	69da      	ldr	r2, [r3, #28]
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800eda0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	69d9      	ldr	r1, [r3, #28]
 800eda8:	68bb      	ldr	r3, [r7, #8]
 800edaa:	691b      	ldr	r3, [r3, #16]
 800edac:	021a      	lsls	r2, r3, #8
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	430a      	orrs	r2, r1
 800edb4:	61da      	str	r2, [r3, #28]
      break;
 800edb6:	e043      	b.n	800ee40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	68b9      	ldr	r1, [r7, #8]
 800edbe:	4618      	mov	r0, r3
 800edc0:	f000 fb22 	bl	800f408 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	f042 0208 	orr.w	r2, r2, #8
 800edd2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	f022 0204 	bic.w	r2, r2, #4
 800ede2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800edea:	68bb      	ldr	r3, [r7, #8]
 800edec:	691a      	ldr	r2, [r3, #16]
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	430a      	orrs	r2, r1
 800edf4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800edf6:	e023      	b.n	800ee40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	68b9      	ldr	r1, [r7, #8]
 800edfe:	4618      	mov	r0, r3
 800ee00:	f000 fb66 	bl	800f4d0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ee12:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ee22:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800ee2a:	68bb      	ldr	r3, [r7, #8]
 800ee2c:	691b      	ldr	r3, [r3, #16]
 800ee2e:	021a      	lsls	r2, r3, #8
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	430a      	orrs	r2, r1
 800ee36:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800ee38:	e002      	b.n	800ee40 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ee3a:	2301      	movs	r3, #1
 800ee3c:	75fb      	strb	r3, [r7, #23]
      break;
 800ee3e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	2200      	movs	r2, #0
 800ee44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ee48:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee4a:	4618      	mov	r0, r3
 800ee4c:	3718      	adds	r7, #24
 800ee4e:	46bd      	mov	sp, r7
 800ee50:	bd80      	pop	{r7, pc}
 800ee52:	bf00      	nop

0800ee54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ee54:	b480      	push	{r7}
 800ee56:	b083      	sub	sp, #12
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ee5c:	bf00      	nop
 800ee5e:	370c      	adds	r7, #12
 800ee60:	46bd      	mov	sp, r7
 800ee62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee66:	4770      	bx	lr

0800ee68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ee68:	b480      	push	{r7}
 800ee6a:	b083      	sub	sp, #12
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ee70:	bf00      	nop
 800ee72:	370c      	adds	r7, #12
 800ee74:	46bd      	mov	sp, r7
 800ee76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee7a:	4770      	bx	lr

0800ee7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ee7c:	b480      	push	{r7}
 800ee7e:	b083      	sub	sp, #12
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ee84:	bf00      	nop
 800ee86:	370c      	adds	r7, #12
 800ee88:	46bd      	mov	sp, r7
 800ee8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee8e:	4770      	bx	lr

0800ee90 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ee90:	b480      	push	{r7}
 800ee92:	b083      	sub	sp, #12
 800ee94:	af00      	add	r7, sp, #0
 800ee96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ee98:	bf00      	nop
 800ee9a:	370c      	adds	r7, #12
 800ee9c:	46bd      	mov	sp, r7
 800ee9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea2:	4770      	bx	lr

0800eea4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800eea4:	b480      	push	{r7}
 800eea6:	b085      	sub	sp, #20
 800eea8:	af00      	add	r7, sp, #0
 800eeaa:	6078      	str	r0, [r7, #4]
 800eeac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	4a46      	ldr	r2, [pc, #280]	@ (800efd0 <TIM_Base_SetConfig+0x12c>)
 800eeb8:	4293      	cmp	r3, r2
 800eeba:	d013      	beq.n	800eee4 <TIM_Base_SetConfig+0x40>
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eec2:	d00f      	beq.n	800eee4 <TIM_Base_SetConfig+0x40>
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	4a43      	ldr	r2, [pc, #268]	@ (800efd4 <TIM_Base_SetConfig+0x130>)
 800eec8:	4293      	cmp	r3, r2
 800eeca:	d00b      	beq.n	800eee4 <TIM_Base_SetConfig+0x40>
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	4a42      	ldr	r2, [pc, #264]	@ (800efd8 <TIM_Base_SetConfig+0x134>)
 800eed0:	4293      	cmp	r3, r2
 800eed2:	d007      	beq.n	800eee4 <TIM_Base_SetConfig+0x40>
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	4a41      	ldr	r2, [pc, #260]	@ (800efdc <TIM_Base_SetConfig+0x138>)
 800eed8:	4293      	cmp	r3, r2
 800eeda:	d003      	beq.n	800eee4 <TIM_Base_SetConfig+0x40>
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	4a40      	ldr	r2, [pc, #256]	@ (800efe0 <TIM_Base_SetConfig+0x13c>)
 800eee0:	4293      	cmp	r3, r2
 800eee2:	d108      	bne.n	800eef6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800eeea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800eeec:	683b      	ldr	r3, [r7, #0]
 800eeee:	685b      	ldr	r3, [r3, #4]
 800eef0:	68fa      	ldr	r2, [r7, #12]
 800eef2:	4313      	orrs	r3, r2
 800eef4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	4a35      	ldr	r2, [pc, #212]	@ (800efd0 <TIM_Base_SetConfig+0x12c>)
 800eefa:	4293      	cmp	r3, r2
 800eefc:	d01f      	beq.n	800ef3e <TIM_Base_SetConfig+0x9a>
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ef04:	d01b      	beq.n	800ef3e <TIM_Base_SetConfig+0x9a>
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	4a32      	ldr	r2, [pc, #200]	@ (800efd4 <TIM_Base_SetConfig+0x130>)
 800ef0a:	4293      	cmp	r3, r2
 800ef0c:	d017      	beq.n	800ef3e <TIM_Base_SetConfig+0x9a>
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	4a31      	ldr	r2, [pc, #196]	@ (800efd8 <TIM_Base_SetConfig+0x134>)
 800ef12:	4293      	cmp	r3, r2
 800ef14:	d013      	beq.n	800ef3e <TIM_Base_SetConfig+0x9a>
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	4a30      	ldr	r2, [pc, #192]	@ (800efdc <TIM_Base_SetConfig+0x138>)
 800ef1a:	4293      	cmp	r3, r2
 800ef1c:	d00f      	beq.n	800ef3e <TIM_Base_SetConfig+0x9a>
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	4a2f      	ldr	r2, [pc, #188]	@ (800efe0 <TIM_Base_SetConfig+0x13c>)
 800ef22:	4293      	cmp	r3, r2
 800ef24:	d00b      	beq.n	800ef3e <TIM_Base_SetConfig+0x9a>
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	4a2e      	ldr	r2, [pc, #184]	@ (800efe4 <TIM_Base_SetConfig+0x140>)
 800ef2a:	4293      	cmp	r3, r2
 800ef2c:	d007      	beq.n	800ef3e <TIM_Base_SetConfig+0x9a>
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	4a2d      	ldr	r2, [pc, #180]	@ (800efe8 <TIM_Base_SetConfig+0x144>)
 800ef32:	4293      	cmp	r3, r2
 800ef34:	d003      	beq.n	800ef3e <TIM_Base_SetConfig+0x9a>
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	4a2c      	ldr	r2, [pc, #176]	@ (800efec <TIM_Base_SetConfig+0x148>)
 800ef3a:	4293      	cmp	r3, r2
 800ef3c:	d108      	bne.n	800ef50 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ef44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ef46:	683b      	ldr	r3, [r7, #0]
 800ef48:	68db      	ldr	r3, [r3, #12]
 800ef4a:	68fa      	ldr	r2, [r7, #12]
 800ef4c:	4313      	orrs	r3, r2
 800ef4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ef56:	683b      	ldr	r3, [r7, #0]
 800ef58:	695b      	ldr	r3, [r3, #20]
 800ef5a:	4313      	orrs	r3, r2
 800ef5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	68fa      	ldr	r2, [r7, #12]
 800ef62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ef64:	683b      	ldr	r3, [r7, #0]
 800ef66:	689a      	ldr	r2, [r3, #8]
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ef6c:	683b      	ldr	r3, [r7, #0]
 800ef6e:	681a      	ldr	r2, [r3, #0]
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	4a16      	ldr	r2, [pc, #88]	@ (800efd0 <TIM_Base_SetConfig+0x12c>)
 800ef78:	4293      	cmp	r3, r2
 800ef7a:	d00f      	beq.n	800ef9c <TIM_Base_SetConfig+0xf8>
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	4a18      	ldr	r2, [pc, #96]	@ (800efe0 <TIM_Base_SetConfig+0x13c>)
 800ef80:	4293      	cmp	r3, r2
 800ef82:	d00b      	beq.n	800ef9c <TIM_Base_SetConfig+0xf8>
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	4a17      	ldr	r2, [pc, #92]	@ (800efe4 <TIM_Base_SetConfig+0x140>)
 800ef88:	4293      	cmp	r3, r2
 800ef8a:	d007      	beq.n	800ef9c <TIM_Base_SetConfig+0xf8>
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	4a16      	ldr	r2, [pc, #88]	@ (800efe8 <TIM_Base_SetConfig+0x144>)
 800ef90:	4293      	cmp	r3, r2
 800ef92:	d003      	beq.n	800ef9c <TIM_Base_SetConfig+0xf8>
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	4a15      	ldr	r2, [pc, #84]	@ (800efec <TIM_Base_SetConfig+0x148>)
 800ef98:	4293      	cmp	r3, r2
 800ef9a:	d103      	bne.n	800efa4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ef9c:	683b      	ldr	r3, [r7, #0]
 800ef9e:	691a      	ldr	r2, [r3, #16]
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	2201      	movs	r2, #1
 800efa8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	691b      	ldr	r3, [r3, #16]
 800efae:	f003 0301 	and.w	r3, r3, #1
 800efb2:	2b01      	cmp	r3, #1
 800efb4:	d105      	bne.n	800efc2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	691b      	ldr	r3, [r3, #16]
 800efba:	f023 0201 	bic.w	r2, r3, #1
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	611a      	str	r2, [r3, #16]
  }
}
 800efc2:	bf00      	nop
 800efc4:	3714      	adds	r7, #20
 800efc6:	46bd      	mov	sp, r7
 800efc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efcc:	4770      	bx	lr
 800efce:	bf00      	nop
 800efd0:	40010000 	.word	0x40010000
 800efd4:	40000400 	.word	0x40000400
 800efd8:	40000800 	.word	0x40000800
 800efdc:	40000c00 	.word	0x40000c00
 800efe0:	40010400 	.word	0x40010400
 800efe4:	40014000 	.word	0x40014000
 800efe8:	40014400 	.word	0x40014400
 800efec:	40014800 	.word	0x40014800

0800eff0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800eff0:	b480      	push	{r7}
 800eff2:	b087      	sub	sp, #28
 800eff4:	af00      	add	r7, sp, #0
 800eff6:	6078      	str	r0, [r7, #4]
 800eff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	6a1b      	ldr	r3, [r3, #32]
 800effe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	6a1b      	ldr	r3, [r3, #32]
 800f004:	f023 0201 	bic.w	r2, r3, #1
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	685b      	ldr	r3, [r3, #4]
 800f010:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	699b      	ldr	r3, [r3, #24]
 800f016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f018:	68fa      	ldr	r2, [r7, #12]
 800f01a:	4b37      	ldr	r3, [pc, #220]	@ (800f0f8 <TIM_OC1_SetConfig+0x108>)
 800f01c:	4013      	ands	r3, r2
 800f01e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	f023 0303 	bic.w	r3, r3, #3
 800f026:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f028:	683b      	ldr	r3, [r7, #0]
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	68fa      	ldr	r2, [r7, #12]
 800f02e:	4313      	orrs	r3, r2
 800f030:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f032:	697b      	ldr	r3, [r7, #20]
 800f034:	f023 0302 	bic.w	r3, r3, #2
 800f038:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f03a:	683b      	ldr	r3, [r7, #0]
 800f03c:	689b      	ldr	r3, [r3, #8]
 800f03e:	697a      	ldr	r2, [r7, #20]
 800f040:	4313      	orrs	r3, r2
 800f042:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	4a2d      	ldr	r2, [pc, #180]	@ (800f0fc <TIM_OC1_SetConfig+0x10c>)
 800f048:	4293      	cmp	r3, r2
 800f04a:	d00f      	beq.n	800f06c <TIM_OC1_SetConfig+0x7c>
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	4a2c      	ldr	r2, [pc, #176]	@ (800f100 <TIM_OC1_SetConfig+0x110>)
 800f050:	4293      	cmp	r3, r2
 800f052:	d00b      	beq.n	800f06c <TIM_OC1_SetConfig+0x7c>
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	4a2b      	ldr	r2, [pc, #172]	@ (800f104 <TIM_OC1_SetConfig+0x114>)
 800f058:	4293      	cmp	r3, r2
 800f05a:	d007      	beq.n	800f06c <TIM_OC1_SetConfig+0x7c>
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	4a2a      	ldr	r2, [pc, #168]	@ (800f108 <TIM_OC1_SetConfig+0x118>)
 800f060:	4293      	cmp	r3, r2
 800f062:	d003      	beq.n	800f06c <TIM_OC1_SetConfig+0x7c>
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	4a29      	ldr	r2, [pc, #164]	@ (800f10c <TIM_OC1_SetConfig+0x11c>)
 800f068:	4293      	cmp	r3, r2
 800f06a:	d10c      	bne.n	800f086 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f06c:	697b      	ldr	r3, [r7, #20]
 800f06e:	f023 0308 	bic.w	r3, r3, #8
 800f072:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f074:	683b      	ldr	r3, [r7, #0]
 800f076:	68db      	ldr	r3, [r3, #12]
 800f078:	697a      	ldr	r2, [r7, #20]
 800f07a:	4313      	orrs	r3, r2
 800f07c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f07e:	697b      	ldr	r3, [r7, #20]
 800f080:	f023 0304 	bic.w	r3, r3, #4
 800f084:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	4a1c      	ldr	r2, [pc, #112]	@ (800f0fc <TIM_OC1_SetConfig+0x10c>)
 800f08a:	4293      	cmp	r3, r2
 800f08c:	d00f      	beq.n	800f0ae <TIM_OC1_SetConfig+0xbe>
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	4a1b      	ldr	r2, [pc, #108]	@ (800f100 <TIM_OC1_SetConfig+0x110>)
 800f092:	4293      	cmp	r3, r2
 800f094:	d00b      	beq.n	800f0ae <TIM_OC1_SetConfig+0xbe>
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	4a1a      	ldr	r2, [pc, #104]	@ (800f104 <TIM_OC1_SetConfig+0x114>)
 800f09a:	4293      	cmp	r3, r2
 800f09c:	d007      	beq.n	800f0ae <TIM_OC1_SetConfig+0xbe>
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	4a19      	ldr	r2, [pc, #100]	@ (800f108 <TIM_OC1_SetConfig+0x118>)
 800f0a2:	4293      	cmp	r3, r2
 800f0a4:	d003      	beq.n	800f0ae <TIM_OC1_SetConfig+0xbe>
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	4a18      	ldr	r2, [pc, #96]	@ (800f10c <TIM_OC1_SetConfig+0x11c>)
 800f0aa:	4293      	cmp	r3, r2
 800f0ac:	d111      	bne.n	800f0d2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f0ae:	693b      	ldr	r3, [r7, #16]
 800f0b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f0b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f0b6:	693b      	ldr	r3, [r7, #16]
 800f0b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f0bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f0be:	683b      	ldr	r3, [r7, #0]
 800f0c0:	695b      	ldr	r3, [r3, #20]
 800f0c2:	693a      	ldr	r2, [r7, #16]
 800f0c4:	4313      	orrs	r3, r2
 800f0c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f0c8:	683b      	ldr	r3, [r7, #0]
 800f0ca:	699b      	ldr	r3, [r3, #24]
 800f0cc:	693a      	ldr	r2, [r7, #16]
 800f0ce:	4313      	orrs	r3, r2
 800f0d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	693a      	ldr	r2, [r7, #16]
 800f0d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	68fa      	ldr	r2, [r7, #12]
 800f0dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f0de:	683b      	ldr	r3, [r7, #0]
 800f0e0:	685a      	ldr	r2, [r3, #4]
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	697a      	ldr	r2, [r7, #20]
 800f0ea:	621a      	str	r2, [r3, #32]
}
 800f0ec:	bf00      	nop
 800f0ee:	371c      	adds	r7, #28
 800f0f0:	46bd      	mov	sp, r7
 800f0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f6:	4770      	bx	lr
 800f0f8:	fffeff8f 	.word	0xfffeff8f
 800f0fc:	40010000 	.word	0x40010000
 800f100:	40010400 	.word	0x40010400
 800f104:	40014000 	.word	0x40014000
 800f108:	40014400 	.word	0x40014400
 800f10c:	40014800 	.word	0x40014800

0800f110 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f110:	b480      	push	{r7}
 800f112:	b087      	sub	sp, #28
 800f114:	af00      	add	r7, sp, #0
 800f116:	6078      	str	r0, [r7, #4]
 800f118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	6a1b      	ldr	r3, [r3, #32]
 800f11e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	6a1b      	ldr	r3, [r3, #32]
 800f124:	f023 0210 	bic.w	r2, r3, #16
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	685b      	ldr	r3, [r3, #4]
 800f130:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	699b      	ldr	r3, [r3, #24]
 800f136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f138:	68fa      	ldr	r2, [r7, #12]
 800f13a:	4b34      	ldr	r3, [pc, #208]	@ (800f20c <TIM_OC2_SetConfig+0xfc>)
 800f13c:	4013      	ands	r3, r2
 800f13e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f146:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f148:	683b      	ldr	r3, [r7, #0]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	021b      	lsls	r3, r3, #8
 800f14e:	68fa      	ldr	r2, [r7, #12]
 800f150:	4313      	orrs	r3, r2
 800f152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f154:	697b      	ldr	r3, [r7, #20]
 800f156:	f023 0320 	bic.w	r3, r3, #32
 800f15a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f15c:	683b      	ldr	r3, [r7, #0]
 800f15e:	689b      	ldr	r3, [r3, #8]
 800f160:	011b      	lsls	r3, r3, #4
 800f162:	697a      	ldr	r2, [r7, #20]
 800f164:	4313      	orrs	r3, r2
 800f166:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	4a29      	ldr	r2, [pc, #164]	@ (800f210 <TIM_OC2_SetConfig+0x100>)
 800f16c:	4293      	cmp	r3, r2
 800f16e:	d003      	beq.n	800f178 <TIM_OC2_SetConfig+0x68>
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	4a28      	ldr	r2, [pc, #160]	@ (800f214 <TIM_OC2_SetConfig+0x104>)
 800f174:	4293      	cmp	r3, r2
 800f176:	d10d      	bne.n	800f194 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f178:	697b      	ldr	r3, [r7, #20]
 800f17a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f17e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f180:	683b      	ldr	r3, [r7, #0]
 800f182:	68db      	ldr	r3, [r3, #12]
 800f184:	011b      	lsls	r3, r3, #4
 800f186:	697a      	ldr	r2, [r7, #20]
 800f188:	4313      	orrs	r3, r2
 800f18a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f18c:	697b      	ldr	r3, [r7, #20]
 800f18e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f192:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	4a1e      	ldr	r2, [pc, #120]	@ (800f210 <TIM_OC2_SetConfig+0x100>)
 800f198:	4293      	cmp	r3, r2
 800f19a:	d00f      	beq.n	800f1bc <TIM_OC2_SetConfig+0xac>
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	4a1d      	ldr	r2, [pc, #116]	@ (800f214 <TIM_OC2_SetConfig+0x104>)
 800f1a0:	4293      	cmp	r3, r2
 800f1a2:	d00b      	beq.n	800f1bc <TIM_OC2_SetConfig+0xac>
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	4a1c      	ldr	r2, [pc, #112]	@ (800f218 <TIM_OC2_SetConfig+0x108>)
 800f1a8:	4293      	cmp	r3, r2
 800f1aa:	d007      	beq.n	800f1bc <TIM_OC2_SetConfig+0xac>
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	4a1b      	ldr	r2, [pc, #108]	@ (800f21c <TIM_OC2_SetConfig+0x10c>)
 800f1b0:	4293      	cmp	r3, r2
 800f1b2:	d003      	beq.n	800f1bc <TIM_OC2_SetConfig+0xac>
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	4a1a      	ldr	r2, [pc, #104]	@ (800f220 <TIM_OC2_SetConfig+0x110>)
 800f1b8:	4293      	cmp	r3, r2
 800f1ba:	d113      	bne.n	800f1e4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f1bc:	693b      	ldr	r3, [r7, #16]
 800f1be:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f1c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f1c4:	693b      	ldr	r3, [r7, #16]
 800f1c6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f1ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f1cc:	683b      	ldr	r3, [r7, #0]
 800f1ce:	695b      	ldr	r3, [r3, #20]
 800f1d0:	009b      	lsls	r3, r3, #2
 800f1d2:	693a      	ldr	r2, [r7, #16]
 800f1d4:	4313      	orrs	r3, r2
 800f1d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f1d8:	683b      	ldr	r3, [r7, #0]
 800f1da:	699b      	ldr	r3, [r3, #24]
 800f1dc:	009b      	lsls	r3, r3, #2
 800f1de:	693a      	ldr	r2, [r7, #16]
 800f1e0:	4313      	orrs	r3, r2
 800f1e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	693a      	ldr	r2, [r7, #16]
 800f1e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	68fa      	ldr	r2, [r7, #12]
 800f1ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f1f0:	683b      	ldr	r3, [r7, #0]
 800f1f2:	685a      	ldr	r2, [r3, #4]
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	697a      	ldr	r2, [r7, #20]
 800f1fc:	621a      	str	r2, [r3, #32]
}
 800f1fe:	bf00      	nop
 800f200:	371c      	adds	r7, #28
 800f202:	46bd      	mov	sp, r7
 800f204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f208:	4770      	bx	lr
 800f20a:	bf00      	nop
 800f20c:	feff8fff 	.word	0xfeff8fff
 800f210:	40010000 	.word	0x40010000
 800f214:	40010400 	.word	0x40010400
 800f218:	40014000 	.word	0x40014000
 800f21c:	40014400 	.word	0x40014400
 800f220:	40014800 	.word	0x40014800

0800f224 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f224:	b480      	push	{r7}
 800f226:	b087      	sub	sp, #28
 800f228:	af00      	add	r7, sp, #0
 800f22a:	6078      	str	r0, [r7, #4]
 800f22c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	6a1b      	ldr	r3, [r3, #32]
 800f232:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	6a1b      	ldr	r3, [r3, #32]
 800f238:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	685b      	ldr	r3, [r3, #4]
 800f244:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	69db      	ldr	r3, [r3, #28]
 800f24a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f24c:	68fa      	ldr	r2, [r7, #12]
 800f24e:	4b33      	ldr	r3, [pc, #204]	@ (800f31c <TIM_OC3_SetConfig+0xf8>)
 800f250:	4013      	ands	r3, r2
 800f252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	f023 0303 	bic.w	r3, r3, #3
 800f25a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f25c:	683b      	ldr	r3, [r7, #0]
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	68fa      	ldr	r2, [r7, #12]
 800f262:	4313      	orrs	r3, r2
 800f264:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f266:	697b      	ldr	r3, [r7, #20]
 800f268:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f26c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f26e:	683b      	ldr	r3, [r7, #0]
 800f270:	689b      	ldr	r3, [r3, #8]
 800f272:	021b      	lsls	r3, r3, #8
 800f274:	697a      	ldr	r2, [r7, #20]
 800f276:	4313      	orrs	r3, r2
 800f278:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	4a28      	ldr	r2, [pc, #160]	@ (800f320 <TIM_OC3_SetConfig+0xfc>)
 800f27e:	4293      	cmp	r3, r2
 800f280:	d003      	beq.n	800f28a <TIM_OC3_SetConfig+0x66>
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	4a27      	ldr	r2, [pc, #156]	@ (800f324 <TIM_OC3_SetConfig+0x100>)
 800f286:	4293      	cmp	r3, r2
 800f288:	d10d      	bne.n	800f2a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f28a:	697b      	ldr	r3, [r7, #20]
 800f28c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f290:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f292:	683b      	ldr	r3, [r7, #0]
 800f294:	68db      	ldr	r3, [r3, #12]
 800f296:	021b      	lsls	r3, r3, #8
 800f298:	697a      	ldr	r2, [r7, #20]
 800f29a:	4313      	orrs	r3, r2
 800f29c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f29e:	697b      	ldr	r3, [r7, #20]
 800f2a0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f2a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	4a1d      	ldr	r2, [pc, #116]	@ (800f320 <TIM_OC3_SetConfig+0xfc>)
 800f2aa:	4293      	cmp	r3, r2
 800f2ac:	d00f      	beq.n	800f2ce <TIM_OC3_SetConfig+0xaa>
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	4a1c      	ldr	r2, [pc, #112]	@ (800f324 <TIM_OC3_SetConfig+0x100>)
 800f2b2:	4293      	cmp	r3, r2
 800f2b4:	d00b      	beq.n	800f2ce <TIM_OC3_SetConfig+0xaa>
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	4a1b      	ldr	r2, [pc, #108]	@ (800f328 <TIM_OC3_SetConfig+0x104>)
 800f2ba:	4293      	cmp	r3, r2
 800f2bc:	d007      	beq.n	800f2ce <TIM_OC3_SetConfig+0xaa>
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	4a1a      	ldr	r2, [pc, #104]	@ (800f32c <TIM_OC3_SetConfig+0x108>)
 800f2c2:	4293      	cmp	r3, r2
 800f2c4:	d003      	beq.n	800f2ce <TIM_OC3_SetConfig+0xaa>
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	4a19      	ldr	r2, [pc, #100]	@ (800f330 <TIM_OC3_SetConfig+0x10c>)
 800f2ca:	4293      	cmp	r3, r2
 800f2cc:	d113      	bne.n	800f2f6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f2ce:	693b      	ldr	r3, [r7, #16]
 800f2d0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f2d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f2d6:	693b      	ldr	r3, [r7, #16]
 800f2d8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f2dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f2de:	683b      	ldr	r3, [r7, #0]
 800f2e0:	695b      	ldr	r3, [r3, #20]
 800f2e2:	011b      	lsls	r3, r3, #4
 800f2e4:	693a      	ldr	r2, [r7, #16]
 800f2e6:	4313      	orrs	r3, r2
 800f2e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f2ea:	683b      	ldr	r3, [r7, #0]
 800f2ec:	699b      	ldr	r3, [r3, #24]
 800f2ee:	011b      	lsls	r3, r3, #4
 800f2f0:	693a      	ldr	r2, [r7, #16]
 800f2f2:	4313      	orrs	r3, r2
 800f2f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	693a      	ldr	r2, [r7, #16]
 800f2fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	68fa      	ldr	r2, [r7, #12]
 800f300:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f302:	683b      	ldr	r3, [r7, #0]
 800f304:	685a      	ldr	r2, [r3, #4]
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	697a      	ldr	r2, [r7, #20]
 800f30e:	621a      	str	r2, [r3, #32]
}
 800f310:	bf00      	nop
 800f312:	371c      	adds	r7, #28
 800f314:	46bd      	mov	sp, r7
 800f316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f31a:	4770      	bx	lr
 800f31c:	fffeff8f 	.word	0xfffeff8f
 800f320:	40010000 	.word	0x40010000
 800f324:	40010400 	.word	0x40010400
 800f328:	40014000 	.word	0x40014000
 800f32c:	40014400 	.word	0x40014400
 800f330:	40014800 	.word	0x40014800

0800f334 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f334:	b480      	push	{r7}
 800f336:	b087      	sub	sp, #28
 800f338:	af00      	add	r7, sp, #0
 800f33a:	6078      	str	r0, [r7, #4]
 800f33c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	6a1b      	ldr	r3, [r3, #32]
 800f342:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	6a1b      	ldr	r3, [r3, #32]
 800f348:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	685b      	ldr	r3, [r3, #4]
 800f354:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	69db      	ldr	r3, [r3, #28]
 800f35a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f35c:	68fa      	ldr	r2, [r7, #12]
 800f35e:	4b24      	ldr	r3, [pc, #144]	@ (800f3f0 <TIM_OC4_SetConfig+0xbc>)
 800f360:	4013      	ands	r3, r2
 800f362:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f36a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f36c:	683b      	ldr	r3, [r7, #0]
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	021b      	lsls	r3, r3, #8
 800f372:	68fa      	ldr	r2, [r7, #12]
 800f374:	4313      	orrs	r3, r2
 800f376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f378:	693b      	ldr	r3, [r7, #16]
 800f37a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f37e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f380:	683b      	ldr	r3, [r7, #0]
 800f382:	689b      	ldr	r3, [r3, #8]
 800f384:	031b      	lsls	r3, r3, #12
 800f386:	693a      	ldr	r2, [r7, #16]
 800f388:	4313      	orrs	r3, r2
 800f38a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	4a19      	ldr	r2, [pc, #100]	@ (800f3f4 <TIM_OC4_SetConfig+0xc0>)
 800f390:	4293      	cmp	r3, r2
 800f392:	d00f      	beq.n	800f3b4 <TIM_OC4_SetConfig+0x80>
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	4a18      	ldr	r2, [pc, #96]	@ (800f3f8 <TIM_OC4_SetConfig+0xc4>)
 800f398:	4293      	cmp	r3, r2
 800f39a:	d00b      	beq.n	800f3b4 <TIM_OC4_SetConfig+0x80>
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	4a17      	ldr	r2, [pc, #92]	@ (800f3fc <TIM_OC4_SetConfig+0xc8>)
 800f3a0:	4293      	cmp	r3, r2
 800f3a2:	d007      	beq.n	800f3b4 <TIM_OC4_SetConfig+0x80>
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	4a16      	ldr	r2, [pc, #88]	@ (800f400 <TIM_OC4_SetConfig+0xcc>)
 800f3a8:	4293      	cmp	r3, r2
 800f3aa:	d003      	beq.n	800f3b4 <TIM_OC4_SetConfig+0x80>
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	4a15      	ldr	r2, [pc, #84]	@ (800f404 <TIM_OC4_SetConfig+0xd0>)
 800f3b0:	4293      	cmp	r3, r2
 800f3b2:	d109      	bne.n	800f3c8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f3b4:	697b      	ldr	r3, [r7, #20]
 800f3b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f3ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f3bc:	683b      	ldr	r3, [r7, #0]
 800f3be:	695b      	ldr	r3, [r3, #20]
 800f3c0:	019b      	lsls	r3, r3, #6
 800f3c2:	697a      	ldr	r2, [r7, #20]
 800f3c4:	4313      	orrs	r3, r2
 800f3c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	697a      	ldr	r2, [r7, #20]
 800f3cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	68fa      	ldr	r2, [r7, #12]
 800f3d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f3d4:	683b      	ldr	r3, [r7, #0]
 800f3d6:	685a      	ldr	r2, [r3, #4]
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	693a      	ldr	r2, [r7, #16]
 800f3e0:	621a      	str	r2, [r3, #32]
}
 800f3e2:	bf00      	nop
 800f3e4:	371c      	adds	r7, #28
 800f3e6:	46bd      	mov	sp, r7
 800f3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ec:	4770      	bx	lr
 800f3ee:	bf00      	nop
 800f3f0:	feff8fff 	.word	0xfeff8fff
 800f3f4:	40010000 	.word	0x40010000
 800f3f8:	40010400 	.word	0x40010400
 800f3fc:	40014000 	.word	0x40014000
 800f400:	40014400 	.word	0x40014400
 800f404:	40014800 	.word	0x40014800

0800f408 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f408:	b480      	push	{r7}
 800f40a:	b087      	sub	sp, #28
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	6078      	str	r0, [r7, #4]
 800f410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	6a1b      	ldr	r3, [r3, #32]
 800f416:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	6a1b      	ldr	r3, [r3, #32]
 800f41c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	685b      	ldr	r3, [r3, #4]
 800f428:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f42e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f430:	68fa      	ldr	r2, [r7, #12]
 800f432:	4b21      	ldr	r3, [pc, #132]	@ (800f4b8 <TIM_OC5_SetConfig+0xb0>)
 800f434:	4013      	ands	r3, r2
 800f436:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f438:	683b      	ldr	r3, [r7, #0]
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	68fa      	ldr	r2, [r7, #12]
 800f43e:	4313      	orrs	r3, r2
 800f440:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f442:	693b      	ldr	r3, [r7, #16]
 800f444:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800f448:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f44a:	683b      	ldr	r3, [r7, #0]
 800f44c:	689b      	ldr	r3, [r3, #8]
 800f44e:	041b      	lsls	r3, r3, #16
 800f450:	693a      	ldr	r2, [r7, #16]
 800f452:	4313      	orrs	r3, r2
 800f454:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	4a18      	ldr	r2, [pc, #96]	@ (800f4bc <TIM_OC5_SetConfig+0xb4>)
 800f45a:	4293      	cmp	r3, r2
 800f45c:	d00f      	beq.n	800f47e <TIM_OC5_SetConfig+0x76>
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	4a17      	ldr	r2, [pc, #92]	@ (800f4c0 <TIM_OC5_SetConfig+0xb8>)
 800f462:	4293      	cmp	r3, r2
 800f464:	d00b      	beq.n	800f47e <TIM_OC5_SetConfig+0x76>
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	4a16      	ldr	r2, [pc, #88]	@ (800f4c4 <TIM_OC5_SetConfig+0xbc>)
 800f46a:	4293      	cmp	r3, r2
 800f46c:	d007      	beq.n	800f47e <TIM_OC5_SetConfig+0x76>
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	4a15      	ldr	r2, [pc, #84]	@ (800f4c8 <TIM_OC5_SetConfig+0xc0>)
 800f472:	4293      	cmp	r3, r2
 800f474:	d003      	beq.n	800f47e <TIM_OC5_SetConfig+0x76>
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	4a14      	ldr	r2, [pc, #80]	@ (800f4cc <TIM_OC5_SetConfig+0xc4>)
 800f47a:	4293      	cmp	r3, r2
 800f47c:	d109      	bne.n	800f492 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f47e:	697b      	ldr	r3, [r7, #20]
 800f480:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f484:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f486:	683b      	ldr	r3, [r7, #0]
 800f488:	695b      	ldr	r3, [r3, #20]
 800f48a:	021b      	lsls	r3, r3, #8
 800f48c:	697a      	ldr	r2, [r7, #20]
 800f48e:	4313      	orrs	r3, r2
 800f490:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	697a      	ldr	r2, [r7, #20]
 800f496:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	68fa      	ldr	r2, [r7, #12]
 800f49c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f49e:	683b      	ldr	r3, [r7, #0]
 800f4a0:	685a      	ldr	r2, [r3, #4]
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	693a      	ldr	r2, [r7, #16]
 800f4aa:	621a      	str	r2, [r3, #32]
}
 800f4ac:	bf00      	nop
 800f4ae:	371c      	adds	r7, #28
 800f4b0:	46bd      	mov	sp, r7
 800f4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b6:	4770      	bx	lr
 800f4b8:	fffeff8f 	.word	0xfffeff8f
 800f4bc:	40010000 	.word	0x40010000
 800f4c0:	40010400 	.word	0x40010400
 800f4c4:	40014000 	.word	0x40014000
 800f4c8:	40014400 	.word	0x40014400
 800f4cc:	40014800 	.word	0x40014800

0800f4d0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f4d0:	b480      	push	{r7}
 800f4d2:	b087      	sub	sp, #28
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	6078      	str	r0, [r7, #4]
 800f4d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	6a1b      	ldr	r3, [r3, #32]
 800f4de:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	6a1b      	ldr	r3, [r3, #32]
 800f4e4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	685b      	ldr	r3, [r3, #4]
 800f4f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f4f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f4f8:	68fa      	ldr	r2, [r7, #12]
 800f4fa:	4b22      	ldr	r3, [pc, #136]	@ (800f584 <TIM_OC6_SetConfig+0xb4>)
 800f4fc:	4013      	ands	r3, r2
 800f4fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f500:	683b      	ldr	r3, [r7, #0]
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	021b      	lsls	r3, r3, #8
 800f506:	68fa      	ldr	r2, [r7, #12]
 800f508:	4313      	orrs	r3, r2
 800f50a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f50c:	693b      	ldr	r3, [r7, #16]
 800f50e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f512:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f514:	683b      	ldr	r3, [r7, #0]
 800f516:	689b      	ldr	r3, [r3, #8]
 800f518:	051b      	lsls	r3, r3, #20
 800f51a:	693a      	ldr	r2, [r7, #16]
 800f51c:	4313      	orrs	r3, r2
 800f51e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	4a19      	ldr	r2, [pc, #100]	@ (800f588 <TIM_OC6_SetConfig+0xb8>)
 800f524:	4293      	cmp	r3, r2
 800f526:	d00f      	beq.n	800f548 <TIM_OC6_SetConfig+0x78>
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	4a18      	ldr	r2, [pc, #96]	@ (800f58c <TIM_OC6_SetConfig+0xbc>)
 800f52c:	4293      	cmp	r3, r2
 800f52e:	d00b      	beq.n	800f548 <TIM_OC6_SetConfig+0x78>
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	4a17      	ldr	r2, [pc, #92]	@ (800f590 <TIM_OC6_SetConfig+0xc0>)
 800f534:	4293      	cmp	r3, r2
 800f536:	d007      	beq.n	800f548 <TIM_OC6_SetConfig+0x78>
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	4a16      	ldr	r2, [pc, #88]	@ (800f594 <TIM_OC6_SetConfig+0xc4>)
 800f53c:	4293      	cmp	r3, r2
 800f53e:	d003      	beq.n	800f548 <TIM_OC6_SetConfig+0x78>
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	4a15      	ldr	r2, [pc, #84]	@ (800f598 <TIM_OC6_SetConfig+0xc8>)
 800f544:	4293      	cmp	r3, r2
 800f546:	d109      	bne.n	800f55c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f548:	697b      	ldr	r3, [r7, #20]
 800f54a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800f54e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f550:	683b      	ldr	r3, [r7, #0]
 800f552:	695b      	ldr	r3, [r3, #20]
 800f554:	029b      	lsls	r3, r3, #10
 800f556:	697a      	ldr	r2, [r7, #20]
 800f558:	4313      	orrs	r3, r2
 800f55a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	697a      	ldr	r2, [r7, #20]
 800f560:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	68fa      	ldr	r2, [r7, #12]
 800f566:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f568:	683b      	ldr	r3, [r7, #0]
 800f56a:	685a      	ldr	r2, [r3, #4]
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	693a      	ldr	r2, [r7, #16]
 800f574:	621a      	str	r2, [r3, #32]
}
 800f576:	bf00      	nop
 800f578:	371c      	adds	r7, #28
 800f57a:	46bd      	mov	sp, r7
 800f57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f580:	4770      	bx	lr
 800f582:	bf00      	nop
 800f584:	feff8fff 	.word	0xfeff8fff
 800f588:	40010000 	.word	0x40010000
 800f58c:	40010400 	.word	0x40010400
 800f590:	40014000 	.word	0x40014000
 800f594:	40014400 	.word	0x40014400
 800f598:	40014800 	.word	0x40014800

0800f59c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f59c:	b480      	push	{r7}
 800f59e:	b087      	sub	sp, #28
 800f5a0:	af00      	add	r7, sp, #0
 800f5a2:	60f8      	str	r0, [r7, #12]
 800f5a4:	60b9      	str	r1, [r7, #8]
 800f5a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f5a8:	68bb      	ldr	r3, [r7, #8]
 800f5aa:	f003 031f 	and.w	r3, r3, #31
 800f5ae:	2201      	movs	r2, #1
 800f5b0:	fa02 f303 	lsl.w	r3, r2, r3
 800f5b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	6a1a      	ldr	r2, [r3, #32]
 800f5ba:	697b      	ldr	r3, [r7, #20]
 800f5bc:	43db      	mvns	r3, r3
 800f5be:	401a      	ands	r2, r3
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	6a1a      	ldr	r2, [r3, #32]
 800f5c8:	68bb      	ldr	r3, [r7, #8]
 800f5ca:	f003 031f 	and.w	r3, r3, #31
 800f5ce:	6879      	ldr	r1, [r7, #4]
 800f5d0:	fa01 f303 	lsl.w	r3, r1, r3
 800f5d4:	431a      	orrs	r2, r3
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	621a      	str	r2, [r3, #32]
}
 800f5da:	bf00      	nop
 800f5dc:	371c      	adds	r7, #28
 800f5de:	46bd      	mov	sp, r7
 800f5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5e4:	4770      	bx	lr
	...

0800f5e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f5e8:	b480      	push	{r7}
 800f5ea:	b085      	sub	sp, #20
 800f5ec:	af00      	add	r7, sp, #0
 800f5ee:	6078      	str	r0, [r7, #4]
 800f5f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f5f8:	2b01      	cmp	r3, #1
 800f5fa:	d101      	bne.n	800f600 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f5fc:	2302      	movs	r3, #2
 800f5fe:	e06d      	b.n	800f6dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	2201      	movs	r2, #1
 800f604:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	2202      	movs	r2, #2
 800f60c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	685b      	ldr	r3, [r3, #4]
 800f616:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	689b      	ldr	r3, [r3, #8]
 800f61e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	4a30      	ldr	r2, [pc, #192]	@ (800f6e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f626:	4293      	cmp	r3, r2
 800f628:	d004      	beq.n	800f634 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	4a2f      	ldr	r2, [pc, #188]	@ (800f6ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f630:	4293      	cmp	r3, r2
 800f632:	d108      	bne.n	800f646 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800f63a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f63c:	683b      	ldr	r3, [r7, #0]
 800f63e:	685b      	ldr	r3, [r3, #4]
 800f640:	68fa      	ldr	r2, [r7, #12]
 800f642:	4313      	orrs	r3, r2
 800f644:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f64c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f64e:	683b      	ldr	r3, [r7, #0]
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	68fa      	ldr	r2, [r7, #12]
 800f654:	4313      	orrs	r3, r2
 800f656:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	68fa      	ldr	r2, [r7, #12]
 800f65e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	4a20      	ldr	r2, [pc, #128]	@ (800f6e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f666:	4293      	cmp	r3, r2
 800f668:	d022      	beq.n	800f6b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f672:	d01d      	beq.n	800f6b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	4a1d      	ldr	r2, [pc, #116]	@ (800f6f0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800f67a:	4293      	cmp	r3, r2
 800f67c:	d018      	beq.n	800f6b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	4a1c      	ldr	r2, [pc, #112]	@ (800f6f4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800f684:	4293      	cmp	r3, r2
 800f686:	d013      	beq.n	800f6b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	4a1a      	ldr	r2, [pc, #104]	@ (800f6f8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800f68e:	4293      	cmp	r3, r2
 800f690:	d00e      	beq.n	800f6b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	4a15      	ldr	r2, [pc, #84]	@ (800f6ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f698:	4293      	cmp	r3, r2
 800f69a:	d009      	beq.n	800f6b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	4a16      	ldr	r2, [pc, #88]	@ (800f6fc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f6a2:	4293      	cmp	r3, r2
 800f6a4:	d004      	beq.n	800f6b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	4a15      	ldr	r2, [pc, #84]	@ (800f700 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f6ac:	4293      	cmp	r3, r2
 800f6ae:	d10c      	bne.n	800f6ca <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f6b0:	68bb      	ldr	r3, [r7, #8]
 800f6b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f6b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f6b8:	683b      	ldr	r3, [r7, #0]
 800f6ba:	689b      	ldr	r3, [r3, #8]
 800f6bc:	68ba      	ldr	r2, [r7, #8]
 800f6be:	4313      	orrs	r3, r2
 800f6c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	68ba      	ldr	r2, [r7, #8]
 800f6c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	2201      	movs	r2, #1
 800f6ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	2200      	movs	r2, #0
 800f6d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f6da:	2300      	movs	r3, #0
}
 800f6dc:	4618      	mov	r0, r3
 800f6de:	3714      	adds	r7, #20
 800f6e0:	46bd      	mov	sp, r7
 800f6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e6:	4770      	bx	lr
 800f6e8:	40010000 	.word	0x40010000
 800f6ec:	40010400 	.word	0x40010400
 800f6f0:	40000400 	.word	0x40000400
 800f6f4:	40000800 	.word	0x40000800
 800f6f8:	40000c00 	.word	0x40000c00
 800f6fc:	40001800 	.word	0x40001800
 800f700:	40014000 	.word	0x40014000

0800f704 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f704:	b480      	push	{r7}
 800f706:	b083      	sub	sp, #12
 800f708:	af00      	add	r7, sp, #0
 800f70a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f70c:	bf00      	nop
 800f70e:	370c      	adds	r7, #12
 800f710:	46bd      	mov	sp, r7
 800f712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f716:	4770      	bx	lr

0800f718 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f718:	b480      	push	{r7}
 800f71a:	b083      	sub	sp, #12
 800f71c:	af00      	add	r7, sp, #0
 800f71e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f720:	bf00      	nop
 800f722:	370c      	adds	r7, #12
 800f724:	46bd      	mov	sp, r7
 800f726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f72a:	4770      	bx	lr

0800f72c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f72c:	b480      	push	{r7}
 800f72e:	b083      	sub	sp, #12
 800f730:	af00      	add	r7, sp, #0
 800f732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f734:	bf00      	nop
 800f736:	370c      	adds	r7, #12
 800f738:	46bd      	mov	sp, r7
 800f73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f73e:	4770      	bx	lr

0800f740 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f740:	b580      	push	{r7, lr}
 800f742:	b082      	sub	sp, #8
 800f744:	af00      	add	r7, sp, #0
 800f746:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d101      	bne.n	800f752 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f74e:	2301      	movs	r3, #1
 800f750:	e042      	b.n	800f7d8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d106      	bne.n	800f76a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	2200      	movs	r2, #0
 800f760:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f764:	6878      	ldr	r0, [r7, #4]
 800f766:	f7f4 fc87 	bl	8004078 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	2224      	movs	r2, #36	@ 0x24
 800f76e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	681a      	ldr	r2, [r3, #0]
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	f022 0201 	bic.w	r2, r2, #1
 800f780:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f786:	2b00      	cmp	r3, #0
 800f788:	d002      	beq.n	800f790 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800f78a:	6878      	ldr	r0, [r7, #4]
 800f78c:	f001 fe0e 	bl	80113ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f790:	6878      	ldr	r0, [r7, #4]
 800f792:	f000 ff9f 	bl	80106d4 <UART_SetConfig>
 800f796:	4603      	mov	r3, r0
 800f798:	2b01      	cmp	r3, #1
 800f79a:	d101      	bne.n	800f7a0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800f79c:	2301      	movs	r3, #1
 800f79e:	e01b      	b.n	800f7d8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	685a      	ldr	r2, [r3, #4]
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f7ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	689a      	ldr	r2, [r3, #8]
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800f7be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	681a      	ldr	r2, [r3, #0]
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	f042 0201 	orr.w	r2, r2, #1
 800f7ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f7d0:	6878      	ldr	r0, [r7, #4]
 800f7d2:	f001 fe8d 	bl	80114f0 <UART_CheckIdleState>
 800f7d6:	4603      	mov	r3, r0
}
 800f7d8:	4618      	mov	r0, r3
 800f7da:	3708      	adds	r7, #8
 800f7dc:	46bd      	mov	sp, r7
 800f7de:	bd80      	pop	{r7, pc}

0800f7e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f7e0:	b580      	push	{r7, lr}
 800f7e2:	b08a      	sub	sp, #40	@ 0x28
 800f7e4:	af02      	add	r7, sp, #8
 800f7e6:	60f8      	str	r0, [r7, #12]
 800f7e8:	60b9      	str	r1, [r7, #8]
 800f7ea:	603b      	str	r3, [r7, #0]
 800f7ec:	4613      	mov	r3, r2
 800f7ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f7f6:	2b20      	cmp	r3, #32
 800f7f8:	d17b      	bne.n	800f8f2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800f7fa:	68bb      	ldr	r3, [r7, #8]
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d002      	beq.n	800f806 <HAL_UART_Transmit+0x26>
 800f800:	88fb      	ldrh	r3, [r7, #6]
 800f802:	2b00      	cmp	r3, #0
 800f804:	d101      	bne.n	800f80a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800f806:	2301      	movs	r3, #1
 800f808:	e074      	b.n	800f8f4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	2200      	movs	r2, #0
 800f80e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	2221      	movs	r2, #33	@ 0x21
 800f816:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f81a:	f7f7 f835 	bl	8006888 <HAL_GetTick>
 800f81e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	88fa      	ldrh	r2, [r7, #6]
 800f824:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	88fa      	ldrh	r2, [r7, #6]
 800f82c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	689b      	ldr	r3, [r3, #8]
 800f834:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f838:	d108      	bne.n	800f84c <HAL_UART_Transmit+0x6c>
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	691b      	ldr	r3, [r3, #16]
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d104      	bne.n	800f84c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800f842:	2300      	movs	r3, #0
 800f844:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800f846:	68bb      	ldr	r3, [r7, #8]
 800f848:	61bb      	str	r3, [r7, #24]
 800f84a:	e003      	b.n	800f854 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800f84c:	68bb      	ldr	r3, [r7, #8]
 800f84e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f850:	2300      	movs	r3, #0
 800f852:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800f854:	e030      	b.n	800f8b8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f856:	683b      	ldr	r3, [r7, #0]
 800f858:	9300      	str	r3, [sp, #0]
 800f85a:	697b      	ldr	r3, [r7, #20]
 800f85c:	2200      	movs	r2, #0
 800f85e:	2180      	movs	r1, #128	@ 0x80
 800f860:	68f8      	ldr	r0, [r7, #12]
 800f862:	f001 feef 	bl	8011644 <UART_WaitOnFlagUntilTimeout>
 800f866:	4603      	mov	r3, r0
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d005      	beq.n	800f878 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	2220      	movs	r2, #32
 800f870:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800f874:	2303      	movs	r3, #3
 800f876:	e03d      	b.n	800f8f4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800f878:	69fb      	ldr	r3, [r7, #28]
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d10b      	bne.n	800f896 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f87e:	69bb      	ldr	r3, [r7, #24]
 800f880:	881b      	ldrh	r3, [r3, #0]
 800f882:	461a      	mov	r2, r3
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f88c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800f88e:	69bb      	ldr	r3, [r7, #24]
 800f890:	3302      	adds	r3, #2
 800f892:	61bb      	str	r3, [r7, #24]
 800f894:	e007      	b.n	800f8a6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f896:	69fb      	ldr	r3, [r7, #28]
 800f898:	781a      	ldrb	r2, [r3, #0]
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800f8a0:	69fb      	ldr	r3, [r7, #28]
 800f8a2:	3301      	adds	r3, #1
 800f8a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800f8ac:	b29b      	uxth	r3, r3
 800f8ae:	3b01      	subs	r3, #1
 800f8b0:	b29a      	uxth	r2, r3
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800f8be:	b29b      	uxth	r3, r3
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d1c8      	bne.n	800f856 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f8c4:	683b      	ldr	r3, [r7, #0]
 800f8c6:	9300      	str	r3, [sp, #0]
 800f8c8:	697b      	ldr	r3, [r7, #20]
 800f8ca:	2200      	movs	r2, #0
 800f8cc:	2140      	movs	r1, #64	@ 0x40
 800f8ce:	68f8      	ldr	r0, [r7, #12]
 800f8d0:	f001 feb8 	bl	8011644 <UART_WaitOnFlagUntilTimeout>
 800f8d4:	4603      	mov	r3, r0
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d005      	beq.n	800f8e6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	2220      	movs	r2, #32
 800f8de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800f8e2:	2303      	movs	r3, #3
 800f8e4:	e006      	b.n	800f8f4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	2220      	movs	r2, #32
 800f8ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800f8ee:	2300      	movs	r3, #0
 800f8f0:	e000      	b.n	800f8f4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800f8f2:	2302      	movs	r3, #2
  }
}
 800f8f4:	4618      	mov	r0, r3
 800f8f6:	3720      	adds	r7, #32
 800f8f8:	46bd      	mov	sp, r7
 800f8fa:	bd80      	pop	{r7, pc}

0800f8fc <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800f8fc:	b480      	push	{r7}
 800f8fe:	b091      	sub	sp, #68	@ 0x44
 800f900:	af00      	add	r7, sp, #0
 800f902:	60f8      	str	r0, [r7, #12]
 800f904:	60b9      	str	r1, [r7, #8]
 800f906:	4613      	mov	r3, r2
 800f908:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f910:	2b20      	cmp	r3, #32
 800f912:	d178      	bne.n	800fa06 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800f914:	68bb      	ldr	r3, [r7, #8]
 800f916:	2b00      	cmp	r3, #0
 800f918:	d002      	beq.n	800f920 <HAL_UART_Transmit_IT+0x24>
 800f91a:	88fb      	ldrh	r3, [r7, #6]
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d101      	bne.n	800f924 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800f920:	2301      	movs	r3, #1
 800f922:	e071      	b.n	800fa08 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	68ba      	ldr	r2, [r7, #8]
 800f928:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	88fa      	ldrh	r2, [r7, #6]
 800f92e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	88fa      	ldrh	r2, [r7, #6]
 800f936:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	2200      	movs	r2, #0
 800f93e:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	2200      	movs	r2, #0
 800f944:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	2221      	movs	r2, #33	@ 0x21
 800f94c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f954:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f958:	d12a      	bne.n	800f9b0 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	689b      	ldr	r3, [r3, #8]
 800f95e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f962:	d107      	bne.n	800f974 <HAL_UART_Transmit_IT+0x78>
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	691b      	ldr	r3, [r3, #16]
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d103      	bne.n	800f974 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	4a29      	ldr	r2, [pc, #164]	@ (800fa14 <HAL_UART_Transmit_IT+0x118>)
 800f970:	679a      	str	r2, [r3, #120]	@ 0x78
 800f972:	e002      	b.n	800f97a <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	4a28      	ldr	r2, [pc, #160]	@ (800fa18 <HAL_UART_Transmit_IT+0x11c>)
 800f978:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	3308      	adds	r3, #8
 800f980:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f984:	e853 3f00 	ldrex	r3, [r3]
 800f988:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f98a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f98c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800f990:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	3308      	adds	r3, #8
 800f998:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f99a:	637a      	str	r2, [r7, #52]	@ 0x34
 800f99c:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f99e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f9a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f9a2:	e841 2300 	strex	r3, r2, [r1]
 800f9a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800f9a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d1e5      	bne.n	800f97a <HAL_UART_Transmit_IT+0x7e>
 800f9ae:	e028      	b.n	800fa02 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	689b      	ldr	r3, [r3, #8]
 800f9b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f9b8:	d107      	bne.n	800f9ca <HAL_UART_Transmit_IT+0xce>
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	691b      	ldr	r3, [r3, #16]
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d103      	bne.n	800f9ca <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	4a15      	ldr	r2, [pc, #84]	@ (800fa1c <HAL_UART_Transmit_IT+0x120>)
 800f9c6:	679a      	str	r2, [r3, #120]	@ 0x78
 800f9c8:	e002      	b.n	800f9d0 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	4a14      	ldr	r2, [pc, #80]	@ (800fa20 <HAL_UART_Transmit_IT+0x124>)
 800f9ce:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9d6:	697b      	ldr	r3, [r7, #20]
 800f9d8:	e853 3f00 	ldrex	r3, [r3]
 800f9dc:	613b      	str	r3, [r7, #16]
   return(result);
 800f9de:	693b      	ldr	r3, [r7, #16]
 800f9e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f9e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	461a      	mov	r2, r3
 800f9ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f9ee:	623b      	str	r3, [r7, #32]
 800f9f0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9f2:	69f9      	ldr	r1, [r7, #28]
 800f9f4:	6a3a      	ldr	r2, [r7, #32]
 800f9f6:	e841 2300 	strex	r3, r2, [r1]
 800f9fa:	61bb      	str	r3, [r7, #24]
   return(result);
 800f9fc:	69bb      	ldr	r3, [r7, #24]
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d1e6      	bne.n	800f9d0 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800fa02:	2300      	movs	r3, #0
 800fa04:	e000      	b.n	800fa08 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800fa06:	2302      	movs	r3, #2
  }
}
 800fa08:	4618      	mov	r0, r3
 800fa0a:	3744      	adds	r7, #68	@ 0x44
 800fa0c:	46bd      	mov	sp, r7
 800fa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa12:	4770      	bx	lr
 800fa14:	08012179 	.word	0x08012179
 800fa18:	08012099 	.word	0x08012099
 800fa1c:	08011fd7 	.word	0x08011fd7
 800fa20:	08011f1f 	.word	0x08011f1f

0800fa24 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fa24:	b580      	push	{r7, lr}
 800fa26:	b08a      	sub	sp, #40	@ 0x28
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	60f8      	str	r0, [r7, #12]
 800fa2c:	60b9      	str	r1, [r7, #8]
 800fa2e:	4613      	mov	r3, r2
 800fa30:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800fa38:	2b20      	cmp	r3, #32
 800fa3a:	d137      	bne.n	800faac <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800fa3c:	68bb      	ldr	r3, [r7, #8]
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d002      	beq.n	800fa48 <HAL_UART_Receive_IT+0x24>
 800fa42:	88fb      	ldrh	r3, [r7, #6]
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d101      	bne.n	800fa4c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800fa48:	2301      	movs	r3, #1
 800fa4a:	e030      	b.n	800faae <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	2200      	movs	r2, #0
 800fa50:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	4a18      	ldr	r2, [pc, #96]	@ (800fab8 <HAL_UART_Receive_IT+0x94>)
 800fa58:	4293      	cmp	r3, r2
 800fa5a:	d01f      	beq.n	800fa9c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	685b      	ldr	r3, [r3, #4]
 800fa62:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d018      	beq.n	800fa9c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa70:	697b      	ldr	r3, [r7, #20]
 800fa72:	e853 3f00 	ldrex	r3, [r3]
 800fa76:	613b      	str	r3, [r7, #16]
   return(result);
 800fa78:	693b      	ldr	r3, [r7, #16]
 800fa7a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800fa7e:	627b      	str	r3, [r7, #36]	@ 0x24
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	461a      	mov	r2, r3
 800fa86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa88:	623b      	str	r3, [r7, #32]
 800fa8a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa8c:	69f9      	ldr	r1, [r7, #28]
 800fa8e:	6a3a      	ldr	r2, [r7, #32]
 800fa90:	e841 2300 	strex	r3, r2, [r1]
 800fa94:	61bb      	str	r3, [r7, #24]
   return(result);
 800fa96:	69bb      	ldr	r3, [r7, #24]
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d1e6      	bne.n	800fa6a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800fa9c:	88fb      	ldrh	r3, [r7, #6]
 800fa9e:	461a      	mov	r2, r3
 800faa0:	68b9      	ldr	r1, [r7, #8]
 800faa2:	68f8      	ldr	r0, [r7, #12]
 800faa4:	f001 fe3c 	bl	8011720 <UART_Start_Receive_IT>
 800faa8:	4603      	mov	r3, r0
 800faaa:	e000      	b.n	800faae <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800faac:	2302      	movs	r3, #2
  }
}
 800faae:	4618      	mov	r0, r3
 800fab0:	3728      	adds	r7, #40	@ 0x28
 800fab2:	46bd      	mov	sp, r7
 800fab4:	bd80      	pop	{r7, pc}
 800fab6:	bf00      	nop
 800fab8:	58000c00 	.word	0x58000c00

0800fabc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fabc:	b580      	push	{r7, lr}
 800fabe:	b08a      	sub	sp, #40	@ 0x28
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	60f8      	str	r0, [r7, #12]
 800fac4:	60b9      	str	r1, [r7, #8]
 800fac6:	4613      	mov	r3, r2
 800fac8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800fad0:	2b20      	cmp	r3, #32
 800fad2:	d137      	bne.n	800fb44 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800fad4:	68bb      	ldr	r3, [r7, #8]
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d002      	beq.n	800fae0 <HAL_UART_Receive_DMA+0x24>
 800fada:	88fb      	ldrh	r3, [r7, #6]
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d101      	bne.n	800fae4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800fae0:	2301      	movs	r3, #1
 800fae2:	e030      	b.n	800fb46 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	2200      	movs	r2, #0
 800fae8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	4a18      	ldr	r2, [pc, #96]	@ (800fb50 <HAL_UART_Receive_DMA+0x94>)
 800faf0:	4293      	cmp	r3, r2
 800faf2:	d01f      	beq.n	800fb34 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	685b      	ldr	r3, [r3, #4]
 800fafa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d018      	beq.n	800fb34 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb08:	697b      	ldr	r3, [r7, #20]
 800fb0a:	e853 3f00 	ldrex	r3, [r3]
 800fb0e:	613b      	str	r3, [r7, #16]
   return(result);
 800fb10:	693b      	ldr	r3, [r7, #16]
 800fb12:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800fb16:	627b      	str	r3, [r7, #36]	@ 0x24
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	461a      	mov	r2, r3
 800fb1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb20:	623b      	str	r3, [r7, #32]
 800fb22:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb24:	69f9      	ldr	r1, [r7, #28]
 800fb26:	6a3a      	ldr	r2, [r7, #32]
 800fb28:	e841 2300 	strex	r3, r2, [r1]
 800fb2c:	61bb      	str	r3, [r7, #24]
   return(result);
 800fb2e:	69bb      	ldr	r3, [r7, #24]
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d1e6      	bne.n	800fb02 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800fb34:	88fb      	ldrh	r3, [r7, #6]
 800fb36:	461a      	mov	r2, r3
 800fb38:	68b9      	ldr	r1, [r7, #8]
 800fb3a:	68f8      	ldr	r0, [r7, #12]
 800fb3c:	f001 ff12 	bl	8011964 <UART_Start_Receive_DMA>
 800fb40:	4603      	mov	r3, r0
 800fb42:	e000      	b.n	800fb46 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800fb44:	2302      	movs	r3, #2
  }
}
 800fb46:	4618      	mov	r0, r3
 800fb48:	3728      	adds	r7, #40	@ 0x28
 800fb4a:	46bd      	mov	sp, r7
 800fb4c:	bd80      	pop	{r7, pc}
 800fb4e:	bf00      	nop
 800fb50:	58000c00 	.word	0x58000c00

0800fb54 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800fb54:	b580      	push	{r7, lr}
 800fb56:	b090      	sub	sp, #64	@ 0x40
 800fb58:	af00      	add	r7, sp, #0
 800fb5a:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fb62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800fb6a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	689b      	ldr	r3, [r3, #8]
 800fb72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fb76:	2b80      	cmp	r3, #128	@ 0x80
 800fb78:	d139      	bne.n	800fbee <HAL_UART_DMAStop+0x9a>
 800fb7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fb7c:	2b21      	cmp	r3, #33	@ 0x21
 800fb7e:	d136      	bne.n	800fbee <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	3308      	adds	r3, #8
 800fb86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb88:	6a3b      	ldr	r3, [r7, #32]
 800fb8a:	e853 3f00 	ldrex	r3, [r3]
 800fb8e:	61fb      	str	r3, [r7, #28]
   return(result);
 800fb90:	69fb      	ldr	r3, [r7, #28]
 800fb92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fb96:	637b      	str	r3, [r7, #52]	@ 0x34
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	3308      	adds	r3, #8
 800fb9e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fba0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800fba2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fba4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fba6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fba8:	e841 2300 	strex	r3, r2, [r1]
 800fbac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800fbae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d1e5      	bne.n	800fb80 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d015      	beq.n	800fbe8 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fbc0:	4618      	mov	r0, r3
 800fbc2:	f7f7 fde1 	bl	8007788 <HAL_DMA_Abort>
 800fbc6:	4603      	mov	r3, r0
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d00d      	beq.n	800fbe8 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fbd0:	4618      	mov	r0, r3
 800fbd2:	f7f9 fa9f 	bl	8009114 <HAL_DMA_GetError>
 800fbd6:	4603      	mov	r3, r0
 800fbd8:	2b20      	cmp	r3, #32
 800fbda:	d105      	bne.n	800fbe8 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	2210      	movs	r2, #16
 800fbe0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800fbe4:	2303      	movs	r3, #3
 800fbe6:	e047      	b.n	800fc78 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800fbe8:	6878      	ldr	r0, [r7, #4]
 800fbea:	f001 ff61 	bl	8011ab0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	689b      	ldr	r3, [r3, #8]
 800fbf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fbf8:	2b40      	cmp	r3, #64	@ 0x40
 800fbfa:	d13c      	bne.n	800fc76 <HAL_UART_DMAStop+0x122>
 800fbfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbfe:	2b22      	cmp	r3, #34	@ 0x22
 800fc00:	d139      	bne.n	800fc76 <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	3308      	adds	r3, #8
 800fc08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	e853 3f00 	ldrex	r3, [r3]
 800fc10:	60bb      	str	r3, [r7, #8]
   return(result);
 800fc12:	68bb      	ldr	r3, [r7, #8]
 800fc14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fc18:	633b      	str	r3, [r7, #48]	@ 0x30
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	3308      	adds	r3, #8
 800fc20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fc22:	61ba      	str	r2, [r7, #24]
 800fc24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc26:	6979      	ldr	r1, [r7, #20]
 800fc28:	69ba      	ldr	r2, [r7, #24]
 800fc2a:	e841 2300 	strex	r3, r2, [r1]
 800fc2e:	613b      	str	r3, [r7, #16]
   return(result);
 800fc30:	693b      	ldr	r3, [r7, #16]
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d1e5      	bne.n	800fc02 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d017      	beq.n	800fc70 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fc46:	4618      	mov	r0, r3
 800fc48:	f7f7 fd9e 	bl	8007788 <HAL_DMA_Abort>
 800fc4c:	4603      	mov	r3, r0
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d00e      	beq.n	800fc70 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fc58:	4618      	mov	r0, r3
 800fc5a:	f7f9 fa5b 	bl	8009114 <HAL_DMA_GetError>
 800fc5e:	4603      	mov	r3, r0
 800fc60:	2b20      	cmp	r3, #32
 800fc62:	d105      	bne.n	800fc70 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	2210      	movs	r2, #16
 800fc68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800fc6c:	2303      	movs	r3, #3
 800fc6e:	e003      	b.n	800fc78 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800fc70:	6878      	ldr	r0, [r7, #4]
 800fc72:	f001 ff5f 	bl	8011b34 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800fc76:	2300      	movs	r3, #0
}
 800fc78:	4618      	mov	r0, r3
 800fc7a:	3740      	adds	r7, #64	@ 0x40
 800fc7c:	46bd      	mov	sp, r7
 800fc7e:	bd80      	pop	{r7, pc}

0800fc80 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 800fc80:	b580      	push	{r7, lr}
 800fc82:	b0a2      	sub	sp, #136	@ 0x88
 800fc84:	af00      	add	r7, sp, #0
 800fc86:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt = 1U;
 800fc88:	2301      	movs	r3, #1
 800fc8a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

  /* Disable interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_TCIE | USART_CR1_RXNEIE_RXFNEIE |
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc94:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800fc96:	e853 3f00 	ldrex	r3, [r3]
 800fc9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800fc9c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fc9e:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 800fca2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	461a      	mov	r2, r3
 800fcac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800fcb0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800fcb2:	66ba      	str	r2, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcb4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800fcb6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800fcb8:	e841 2300 	strex	r3, r2, [r1]
 800fcbc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800fcbe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d1e4      	bne.n	800fc8e <HAL_UART_Abort_IT+0xe>
                                          USART_CR1_TXEIE_TXFNFIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	3308      	adds	r3, #8
 800fcca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fccc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fcce:	e853 3f00 	ldrex	r3, [r3]
 800fcd2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800fcd4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fcd6:	4b85      	ldr	r3, [pc, #532]	@ (800feec <HAL_UART_Abort_IT+0x26c>)
 800fcd8:	4013      	ands	r3, r2
 800fcda:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	3308      	adds	r3, #8
 800fce2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800fce4:	65ba      	str	r2, [r7, #88]	@ 0x58
 800fce6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fce8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800fcea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800fcec:	e841 2300 	strex	r3, r2, [r1]
 800fcf0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800fcf2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d1e5      	bne.n	800fcc4 <HAL_UART_Abort_IT+0x44>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fcfc:	2b01      	cmp	r3, #1
 800fcfe:	d118      	bne.n	800fd32 <HAL_UART_Abort_IT+0xb2>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd08:	e853 3f00 	ldrex	r3, [r3]
 800fd0c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800fd0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fd10:	f023 0310 	bic.w	r3, r3, #16
 800fd14:	67bb      	str	r3, [r7, #120]	@ 0x78
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	461a      	mov	r2, r3
 800fd1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800fd1e:	647b      	str	r3, [r7, #68]	@ 0x44
 800fd20:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd22:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800fd24:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fd26:	e841 2300 	strex	r3, r2, [r1]
 800fd2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800fd2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d1e6      	bne.n	800fd00 <HAL_UART_Abort_IT+0x80>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d00f      	beq.n	800fd5a <HAL_UART_Abort_IT+0xda>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	689b      	ldr	r3, [r3, #8]
 800fd40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fd44:	2b80      	cmp	r3, #128	@ 0x80
 800fd46:	d104      	bne.n	800fd52 <HAL_UART_Abort_IT+0xd2>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fd4c:	4a68      	ldr	r2, [pc, #416]	@ (800fef0 <HAL_UART_Abort_IT+0x270>)
 800fd4e:	651a      	str	r2, [r3, #80]	@ 0x50
 800fd50:	e003      	b.n	800fd5a <HAL_UART_Abort_IT+0xda>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fd56:	2200      	movs	r2, #0
 800fd58:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d011      	beq.n	800fd88 <HAL_UART_Abort_IT+0x108>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	689b      	ldr	r3, [r3, #8]
 800fd6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fd6e:	2b40      	cmp	r3, #64	@ 0x40
 800fd70:	d105      	bne.n	800fd7e <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fd78:	4a5e      	ldr	r2, [pc, #376]	@ (800fef4 <HAL_UART_Abort_IT+0x274>)
 800fd7a:	651a      	str	r2, [r3, #80]	@ 0x50
 800fd7c:	e004      	b.n	800fd88 <HAL_UART_Abort_IT+0x108>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fd84:	2200      	movs	r2, #0
 800fd86:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	689b      	ldr	r3, [r3, #8]
 800fd8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fd92:	2b80      	cmp	r3, #128	@ 0x80
 800fd94:	d12d      	bne.n	800fdf2 <HAL_UART_Abort_IT+0x172>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	3308      	adds	r3, #8
 800fd9c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fda0:	e853 3f00 	ldrex	r3, [r3]
 800fda4:	623b      	str	r3, [r7, #32]
   return(result);
 800fda6:	6a3b      	ldr	r3, [r7, #32]
 800fda8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fdac:	677b      	str	r3, [r7, #116]	@ 0x74
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	3308      	adds	r3, #8
 800fdb4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800fdb6:	633a      	str	r2, [r7, #48]	@ 0x30
 800fdb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fdbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fdbe:	e841 2300 	strex	r3, r2, [r1]
 800fdc2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800fdc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d1e5      	bne.n	800fd96 <HAL_UART_Abort_IT+0x116>

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d00f      	beq.n	800fdf2 <HAL_UART_Abort_IT+0x172>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fdd6:	4618      	mov	r0, r3
 800fdd8:	f7f7 fff4 	bl	8007dc4 <HAL_DMA_Abort_IT>
 800fddc:	4603      	mov	r3, r0
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d004      	beq.n	800fdec <HAL_UART_Abort_IT+0x16c>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fde6:	2200      	movs	r2, #0
 800fde8:	651a      	str	r2, [r3, #80]	@ 0x50
 800fdea:	e002      	b.n	800fdf2 <HAL_UART_Abort_IT+0x172>
      }
      else
      {
        abortcplt = 0U;
 800fdec:	2300      	movs	r3, #0
 800fdee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	689b      	ldr	r3, [r3, #8]
 800fdf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fdfc:	2b40      	cmp	r3, #64	@ 0x40
 800fdfe:	d133      	bne.n	800fe68 <HAL_UART_Abort_IT+0x1e8>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	3308      	adds	r3, #8
 800fe06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe08:	693b      	ldr	r3, [r7, #16]
 800fe0a:	e853 3f00 	ldrex	r3, [r3]
 800fe0e:	60fb      	str	r3, [r7, #12]
   return(result);
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fe16:	673b      	str	r3, [r7, #112]	@ 0x70
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	3308      	adds	r3, #8
 800fe1e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800fe20:	61fa      	str	r2, [r7, #28]
 800fe22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe24:	69b9      	ldr	r1, [r7, #24]
 800fe26:	69fa      	ldr	r2, [r7, #28]
 800fe28:	e841 2300 	strex	r3, r2, [r1]
 800fe2c:	617b      	str	r3, [r7, #20]
   return(result);
 800fe2e:	697b      	ldr	r3, [r7, #20]
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d1e5      	bne.n	800fe00 <HAL_UART_Abort_IT+0x180>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d014      	beq.n	800fe68 <HAL_UART_Abort_IT+0x1e8>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fe44:	4618      	mov	r0, r3
 800fe46:	f7f7 ffbd 	bl	8007dc4 <HAL_DMA_Abort_IT>
 800fe4a:	4603      	mov	r3, r0
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d008      	beq.n	800fe62 <HAL_UART_Abort_IT+0x1e2>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fe56:	2200      	movs	r2, #0
 800fe58:	651a      	str	r2, [r3, #80]	@ 0x50
        abortcplt = 1U;
 800fe5a:	2301      	movs	r3, #1
 800fe5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800fe60:	e002      	b.n	800fe68 <HAL_UART_Abort_IT+0x1e8>
      }
      else
      {
        abortcplt = 0U;
 800fe62:	2300      	movs	r3, #0
 800fe64:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (abortcplt == 1U)
 800fe68:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800fe6c:	2b01      	cmp	r3, #1
 800fe6e:	d138      	bne.n	800fee2 <HAL_UART_Abort_IT+0x262>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0U;
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	2200      	movs	r2, #0
 800fe74:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->RxXferCount = 0U;
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	2200      	movs	r2, #0
 800fe7c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Clear ISR function pointers */
    huart->RxISR = NULL;
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	2200      	movs	r2, #0
 800fe84:	675a      	str	r2, [r3, #116]	@ 0x74
    huart->TxISR = NULL;
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	2200      	movs	r2, #0
 800fe8a:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Reset errorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	2200      	movs	r2, #0
 800fe90:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	220f      	movs	r2, #15
 800fe9a:	621a      	str	r2, [r3, #32]

    /* Flush the whole TX FIFO (if needed) */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fea0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fea4:	d107      	bne.n	800feb6 <HAL_UART_Abort_IT+0x236>
    {
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	699a      	ldr	r2, [r3, #24]
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	f042 0210 	orr.w	r2, r2, #16
 800feb4:	619a      	str	r2, [r3, #24]
    }

    /* Discard the received data */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	699a      	ldr	r2, [r3, #24]
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	f042 0208 	orr.w	r2, r2, #8
 800fec4:	619a      	str	r2, [r3, #24]

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	2220      	movs	r2, #32
 800feca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    huart->RxState = HAL_UART_STATE_READY;
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	2220      	movs	r2, #32
 800fed2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	2200      	movs	r2, #0
 800feda:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 800fedc:	6878      	ldr	r0, [r7, #4]
 800fede:	f000 fbe3 	bl	80106a8 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800fee2:	2300      	movs	r3, #0
}
 800fee4:	4618      	mov	r0, r3
 800fee6:	3788      	adds	r7, #136	@ 0x88
 800fee8:	46bd      	mov	sp, r7
 800feea:	bd80      	pop	{r7, pc}
 800feec:	ef7ffffe 	.word	0xef7ffffe
 800fef0:	08011e13 	.word	0x08011e13
 800fef4:	08011e9f 	.word	0x08011e9f

0800fef8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800fef8:	b580      	push	{r7, lr}
 800fefa:	b0ba      	sub	sp, #232	@ 0xe8
 800fefc:	af00      	add	r7, sp, #0
 800fefe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	69db      	ldr	r3, [r3, #28]
 800ff06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	689b      	ldr	r3, [r3, #8]
 800ff1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ff1e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800ff22:	f640 030f 	movw	r3, #2063	@ 0x80f
 800ff26:	4013      	ands	r3, r2
 800ff28:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800ff2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d11b      	bne.n	800ff6c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ff34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ff38:	f003 0320 	and.w	r3, r3, #32
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d015      	beq.n	800ff6c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ff40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ff44:	f003 0320 	and.w	r3, r3, #32
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d105      	bne.n	800ff58 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ff4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ff50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d009      	beq.n	800ff6c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	f000 8377 	beq.w	8010650 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ff66:	6878      	ldr	r0, [r7, #4]
 800ff68:	4798      	blx	r3
      }
      return;
 800ff6a:	e371      	b.n	8010650 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ff6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	f000 8123 	beq.w	80101bc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ff76:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ff7a:	4b8d      	ldr	r3, [pc, #564]	@ (80101b0 <HAL_UART_IRQHandler+0x2b8>)
 800ff7c:	4013      	ands	r3, r2
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d106      	bne.n	800ff90 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ff82:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800ff86:	4b8b      	ldr	r3, [pc, #556]	@ (80101b4 <HAL_UART_IRQHandler+0x2bc>)
 800ff88:	4013      	ands	r3, r2
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	f000 8116 	beq.w	80101bc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ff90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ff94:	f003 0301 	and.w	r3, r3, #1
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d011      	beq.n	800ffc0 <HAL_UART_IRQHandler+0xc8>
 800ff9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ffa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d00b      	beq.n	800ffc0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	2201      	movs	r2, #1
 800ffae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ffb6:	f043 0201 	orr.w	r2, r3, #1
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ffc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ffc4:	f003 0302 	and.w	r3, r3, #2
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d011      	beq.n	800fff0 <HAL_UART_IRQHandler+0xf8>
 800ffcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ffd0:	f003 0301 	and.w	r3, r3, #1
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d00b      	beq.n	800fff0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	2202      	movs	r2, #2
 800ffde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ffe6:	f043 0204 	orr.w	r2, r3, #4
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fff0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fff4:	f003 0304 	and.w	r3, r3, #4
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d011      	beq.n	8010020 <HAL_UART_IRQHandler+0x128>
 800fffc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010000:	f003 0301 	and.w	r3, r3, #1
 8010004:	2b00      	cmp	r3, #0
 8010006:	d00b      	beq.n	8010020 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	2204      	movs	r2, #4
 801000e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010016:	f043 0202 	orr.w	r2, r3, #2
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8010020:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010024:	f003 0308 	and.w	r3, r3, #8
 8010028:	2b00      	cmp	r3, #0
 801002a:	d017      	beq.n	801005c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801002c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010030:	f003 0320 	and.w	r3, r3, #32
 8010034:	2b00      	cmp	r3, #0
 8010036:	d105      	bne.n	8010044 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8010038:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 801003c:	4b5c      	ldr	r3, [pc, #368]	@ (80101b0 <HAL_UART_IRQHandler+0x2b8>)
 801003e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010040:	2b00      	cmp	r3, #0
 8010042:	d00b      	beq.n	801005c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	2208      	movs	r2, #8
 801004a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010052:	f043 0208 	orr.w	r2, r3, #8
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801005c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010060:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010064:	2b00      	cmp	r3, #0
 8010066:	d012      	beq.n	801008e <HAL_UART_IRQHandler+0x196>
 8010068:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801006c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8010070:	2b00      	cmp	r3, #0
 8010072:	d00c      	beq.n	801008e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801007c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010084:	f043 0220 	orr.w	r2, r3, #32
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010094:	2b00      	cmp	r3, #0
 8010096:	f000 82dd 	beq.w	8010654 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801009a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801009e:	f003 0320 	and.w	r3, r3, #32
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d013      	beq.n	80100ce <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80100a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80100aa:	f003 0320 	and.w	r3, r3, #32
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d105      	bne.n	80100be <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80100b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80100b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d007      	beq.n	80100ce <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d003      	beq.n	80100ce <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80100ca:	6878      	ldr	r0, [r7, #4]
 80100cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80100d4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	689b      	ldr	r3, [r3, #8]
 80100de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80100e2:	2b40      	cmp	r3, #64	@ 0x40
 80100e4:	d005      	beq.n	80100f2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80100e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80100ea:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d054      	beq.n	801019c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80100f2:	6878      	ldr	r0, [r7, #4]
 80100f4:	f001 fd1e 	bl	8011b34 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	689b      	ldr	r3, [r3, #8]
 80100fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010102:	2b40      	cmp	r3, #64	@ 0x40
 8010104:	d146      	bne.n	8010194 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	3308      	adds	r3, #8
 801010c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010110:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8010114:	e853 3f00 	ldrex	r3, [r3]
 8010118:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 801011c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8010120:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010124:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	3308      	adds	r3, #8
 801012e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8010132:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8010136:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801013a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 801013e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8010142:	e841 2300 	strex	r3, r2, [r1]
 8010146:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 801014a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801014e:	2b00      	cmp	r3, #0
 8010150:	d1d9      	bne.n	8010106 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010158:	2b00      	cmp	r3, #0
 801015a:	d017      	beq.n	801018c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010162:	4a15      	ldr	r2, [pc, #84]	@ (80101b8 <HAL_UART_IRQHandler+0x2c0>)
 8010164:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801016c:	4618      	mov	r0, r3
 801016e:	f7f7 fe29 	bl	8007dc4 <HAL_DMA_Abort_IT>
 8010172:	4603      	mov	r3, r0
 8010174:	2b00      	cmp	r3, #0
 8010176:	d019      	beq.n	80101ac <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801017e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010180:	687a      	ldr	r2, [r7, #4]
 8010182:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8010186:	4610      	mov	r0, r2
 8010188:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801018a:	e00f      	b.n	80101ac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801018c:	6878      	ldr	r0, [r7, #4]
 801018e:	f000 fa81 	bl	8010694 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010192:	e00b      	b.n	80101ac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010194:	6878      	ldr	r0, [r7, #4]
 8010196:	f000 fa7d 	bl	8010694 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801019a:	e007      	b.n	80101ac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801019c:	6878      	ldr	r0, [r7, #4]
 801019e:	f000 fa79 	bl	8010694 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	2200      	movs	r2, #0
 80101a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80101aa:	e253      	b.n	8010654 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80101ac:	bf00      	nop
    return;
 80101ae:	e251      	b.n	8010654 <HAL_UART_IRQHandler+0x75c>
 80101b0:	10000001 	.word	0x10000001
 80101b4:	04000120 	.word	0x04000120
 80101b8:	08011de7 	.word	0x08011de7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80101c0:	2b01      	cmp	r3, #1
 80101c2:	f040 81e7 	bne.w	8010594 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80101c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80101ca:	f003 0310 	and.w	r3, r3, #16
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	f000 81e0 	beq.w	8010594 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80101d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80101d8:	f003 0310 	and.w	r3, r3, #16
 80101dc:	2b00      	cmp	r3, #0
 80101de:	f000 81d9 	beq.w	8010594 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	2210      	movs	r2, #16
 80101e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	689b      	ldr	r3, [r3, #8]
 80101f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80101f4:	2b40      	cmp	r3, #64	@ 0x40
 80101f6:	f040 8151 	bne.w	801049c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	4a96      	ldr	r2, [pc, #600]	@ (801045c <HAL_UART_IRQHandler+0x564>)
 8010204:	4293      	cmp	r3, r2
 8010206:	d068      	beq.n	80102da <HAL_UART_IRQHandler+0x3e2>
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	4a93      	ldr	r2, [pc, #588]	@ (8010460 <HAL_UART_IRQHandler+0x568>)
 8010212:	4293      	cmp	r3, r2
 8010214:	d061      	beq.n	80102da <HAL_UART_IRQHandler+0x3e2>
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	4a91      	ldr	r2, [pc, #580]	@ (8010464 <HAL_UART_IRQHandler+0x56c>)
 8010220:	4293      	cmp	r3, r2
 8010222:	d05a      	beq.n	80102da <HAL_UART_IRQHandler+0x3e2>
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	4a8e      	ldr	r2, [pc, #568]	@ (8010468 <HAL_UART_IRQHandler+0x570>)
 801022e:	4293      	cmp	r3, r2
 8010230:	d053      	beq.n	80102da <HAL_UART_IRQHandler+0x3e2>
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	4a8c      	ldr	r2, [pc, #560]	@ (801046c <HAL_UART_IRQHandler+0x574>)
 801023c:	4293      	cmp	r3, r2
 801023e:	d04c      	beq.n	80102da <HAL_UART_IRQHandler+0x3e2>
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	4a89      	ldr	r2, [pc, #548]	@ (8010470 <HAL_UART_IRQHandler+0x578>)
 801024a:	4293      	cmp	r3, r2
 801024c:	d045      	beq.n	80102da <HAL_UART_IRQHandler+0x3e2>
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	4a87      	ldr	r2, [pc, #540]	@ (8010474 <HAL_UART_IRQHandler+0x57c>)
 8010258:	4293      	cmp	r3, r2
 801025a:	d03e      	beq.n	80102da <HAL_UART_IRQHandler+0x3e2>
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	4a84      	ldr	r2, [pc, #528]	@ (8010478 <HAL_UART_IRQHandler+0x580>)
 8010266:	4293      	cmp	r3, r2
 8010268:	d037      	beq.n	80102da <HAL_UART_IRQHandler+0x3e2>
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	4a82      	ldr	r2, [pc, #520]	@ (801047c <HAL_UART_IRQHandler+0x584>)
 8010274:	4293      	cmp	r3, r2
 8010276:	d030      	beq.n	80102da <HAL_UART_IRQHandler+0x3e2>
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	4a7f      	ldr	r2, [pc, #508]	@ (8010480 <HAL_UART_IRQHandler+0x588>)
 8010282:	4293      	cmp	r3, r2
 8010284:	d029      	beq.n	80102da <HAL_UART_IRQHandler+0x3e2>
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	4a7d      	ldr	r2, [pc, #500]	@ (8010484 <HAL_UART_IRQHandler+0x58c>)
 8010290:	4293      	cmp	r3, r2
 8010292:	d022      	beq.n	80102da <HAL_UART_IRQHandler+0x3e2>
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	4a7a      	ldr	r2, [pc, #488]	@ (8010488 <HAL_UART_IRQHandler+0x590>)
 801029e:	4293      	cmp	r3, r2
 80102a0:	d01b      	beq.n	80102da <HAL_UART_IRQHandler+0x3e2>
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	4a78      	ldr	r2, [pc, #480]	@ (801048c <HAL_UART_IRQHandler+0x594>)
 80102ac:	4293      	cmp	r3, r2
 80102ae:	d014      	beq.n	80102da <HAL_UART_IRQHandler+0x3e2>
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	4a75      	ldr	r2, [pc, #468]	@ (8010490 <HAL_UART_IRQHandler+0x598>)
 80102ba:	4293      	cmp	r3, r2
 80102bc:	d00d      	beq.n	80102da <HAL_UART_IRQHandler+0x3e2>
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	4a73      	ldr	r2, [pc, #460]	@ (8010494 <HAL_UART_IRQHandler+0x59c>)
 80102c8:	4293      	cmp	r3, r2
 80102ca:	d006      	beq.n	80102da <HAL_UART_IRQHandler+0x3e2>
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	4a70      	ldr	r2, [pc, #448]	@ (8010498 <HAL_UART_IRQHandler+0x5a0>)
 80102d6:	4293      	cmp	r3, r2
 80102d8:	d106      	bne.n	80102e8 <HAL_UART_IRQHandler+0x3f0>
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	685b      	ldr	r3, [r3, #4]
 80102e4:	b29b      	uxth	r3, r3
 80102e6:	e005      	b.n	80102f4 <HAL_UART_IRQHandler+0x3fc>
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	685b      	ldr	r3, [r3, #4]
 80102f2:	b29b      	uxth	r3, r3
 80102f4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80102f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	f000 81ab 	beq.w	8010658 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010308:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 801030c:	429a      	cmp	r2, r3
 801030e:	f080 81a3 	bcs.w	8010658 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010318:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010322:	69db      	ldr	r3, [r3, #28]
 8010324:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010328:	f000 8087 	beq.w	801043a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010334:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010338:	e853 3f00 	ldrex	r3, [r3]
 801033c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8010340:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8010344:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010348:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	461a      	mov	r2, r3
 8010352:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8010356:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801035a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801035e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8010362:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8010366:	e841 2300 	strex	r3, r2, [r1]
 801036a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 801036e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010372:	2b00      	cmp	r3, #0
 8010374:	d1da      	bne.n	801032c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	3308      	adds	r3, #8
 801037c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801037e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010380:	e853 3f00 	ldrex	r3, [r3]
 8010384:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8010386:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010388:	f023 0301 	bic.w	r3, r3, #1
 801038c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	3308      	adds	r3, #8
 8010396:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 801039a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 801039e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103a0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80103a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80103a6:	e841 2300 	strex	r3, r2, [r1]
 80103aa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80103ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d1e1      	bne.n	8010376 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	3308      	adds	r3, #8
 80103b8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80103bc:	e853 3f00 	ldrex	r3, [r3]
 80103c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80103c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80103c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80103c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	3308      	adds	r3, #8
 80103d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80103d6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80103d8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103da:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80103dc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80103de:	e841 2300 	strex	r3, r2, [r1]
 80103e2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80103e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d1e3      	bne.n	80103b2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	2220      	movs	r2, #32
 80103ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	2200      	movs	r2, #0
 80103f6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	681b      	ldr	r3, [r3, #0]
 80103fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010400:	e853 3f00 	ldrex	r3, [r3]
 8010404:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8010406:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010408:	f023 0310 	bic.w	r3, r3, #16
 801040c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	461a      	mov	r2, r3
 8010416:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801041a:	65bb      	str	r3, [r7, #88]	@ 0x58
 801041c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801041e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010420:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010422:	e841 2300 	strex	r3, r2, [r1]
 8010426:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8010428:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801042a:	2b00      	cmp	r3, #0
 801042c:	d1e4      	bne.n	80103f8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010434:	4618      	mov	r0, r3
 8010436:	f7f7 f9a7 	bl	8007788 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	2202      	movs	r2, #2
 801043e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801044c:	b29b      	uxth	r3, r3
 801044e:	1ad3      	subs	r3, r2, r3
 8010450:	b29b      	uxth	r3, r3
 8010452:	4619      	mov	r1, r3
 8010454:	6878      	ldr	r0, [r7, #4]
 8010456:	f000 f931 	bl	80106bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801045a:	e0fd      	b.n	8010658 <HAL_UART_IRQHandler+0x760>
 801045c:	40020010 	.word	0x40020010
 8010460:	40020028 	.word	0x40020028
 8010464:	40020040 	.word	0x40020040
 8010468:	40020058 	.word	0x40020058
 801046c:	40020070 	.word	0x40020070
 8010470:	40020088 	.word	0x40020088
 8010474:	400200a0 	.word	0x400200a0
 8010478:	400200b8 	.word	0x400200b8
 801047c:	40020410 	.word	0x40020410
 8010480:	40020428 	.word	0x40020428
 8010484:	40020440 	.word	0x40020440
 8010488:	40020458 	.word	0x40020458
 801048c:	40020470 	.word	0x40020470
 8010490:	40020488 	.word	0x40020488
 8010494:	400204a0 	.word	0x400204a0
 8010498:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80104a8:	b29b      	uxth	r3, r3
 80104aa:	1ad3      	subs	r3, r2, r3
 80104ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80104b6:	b29b      	uxth	r3, r3
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	f000 80cf 	beq.w	801065c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80104be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	f000 80ca 	beq.w	801065c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104d0:	e853 3f00 	ldrex	r3, [r3]
 80104d4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80104d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80104d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80104dc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	461a      	mov	r2, r3
 80104e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80104ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80104ec:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104ee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80104f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80104f2:	e841 2300 	strex	r3, r2, [r1]
 80104f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80104f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d1e4      	bne.n	80104c8 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	3308      	adds	r3, #8
 8010504:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010508:	e853 3f00 	ldrex	r3, [r3]
 801050c:	623b      	str	r3, [r7, #32]
   return(result);
 801050e:	6a3a      	ldr	r2, [r7, #32]
 8010510:	4b55      	ldr	r3, [pc, #340]	@ (8010668 <HAL_UART_IRQHandler+0x770>)
 8010512:	4013      	ands	r3, r2
 8010514:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	3308      	adds	r3, #8
 801051e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8010522:	633a      	str	r2, [r7, #48]	@ 0x30
 8010524:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010526:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010528:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801052a:	e841 2300 	strex	r3, r2, [r1]
 801052e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010532:	2b00      	cmp	r3, #0
 8010534:	d1e3      	bne.n	80104fe <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	2220      	movs	r2, #32
 801053a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	2200      	movs	r2, #0
 8010542:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	2200      	movs	r2, #0
 8010548:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010550:	693b      	ldr	r3, [r7, #16]
 8010552:	e853 3f00 	ldrex	r3, [r3]
 8010556:	60fb      	str	r3, [r7, #12]
   return(result);
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	f023 0310 	bic.w	r3, r3, #16
 801055e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	461a      	mov	r2, r3
 8010568:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801056c:	61fb      	str	r3, [r7, #28]
 801056e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010570:	69b9      	ldr	r1, [r7, #24]
 8010572:	69fa      	ldr	r2, [r7, #28]
 8010574:	e841 2300 	strex	r3, r2, [r1]
 8010578:	617b      	str	r3, [r7, #20]
   return(result);
 801057a:	697b      	ldr	r3, [r7, #20]
 801057c:	2b00      	cmp	r3, #0
 801057e:	d1e4      	bne.n	801054a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	2202      	movs	r2, #2
 8010584:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010586:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 801058a:	4619      	mov	r1, r3
 801058c:	6878      	ldr	r0, [r7, #4]
 801058e:	f000 f895 	bl	80106bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010592:	e063      	b.n	801065c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8010594:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010598:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801059c:	2b00      	cmp	r3, #0
 801059e:	d00e      	beq.n	80105be <HAL_UART_IRQHandler+0x6c6>
 80105a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80105a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d008      	beq.n	80105be <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80105b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80105b6:	6878      	ldr	r0, [r7, #4]
 80105b8:	f002 fb9a 	bl	8012cf0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80105bc:	e051      	b.n	8010662 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80105be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80105c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d014      	beq.n	80105f4 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80105ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80105ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d105      	bne.n	80105e2 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80105d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80105da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d008      	beq.n	80105f4 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d03a      	beq.n	8010660 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80105ee:	6878      	ldr	r0, [r7, #4]
 80105f0:	4798      	blx	r3
    }
    return;
 80105f2:	e035      	b.n	8010660 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80105f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80105f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d009      	beq.n	8010614 <HAL_UART_IRQHandler+0x71c>
 8010600:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010604:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010608:	2b00      	cmp	r3, #0
 801060a:	d003      	beq.n	8010614 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 801060c:	6878      	ldr	r0, [r7, #4]
 801060e:	f001 fe28 	bl	8012262 <UART_EndTransmit_IT>
    return;
 8010612:	e026      	b.n	8010662 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8010614:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010618:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801061c:	2b00      	cmp	r3, #0
 801061e:	d009      	beq.n	8010634 <HAL_UART_IRQHandler+0x73c>
 8010620:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010624:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8010628:	2b00      	cmp	r3, #0
 801062a:	d003      	beq.n	8010634 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 801062c:	6878      	ldr	r0, [r7, #4]
 801062e:	f002 fb73 	bl	8012d18 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010632:	e016      	b.n	8010662 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8010634:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010638:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801063c:	2b00      	cmp	r3, #0
 801063e:	d010      	beq.n	8010662 <HAL_UART_IRQHandler+0x76a>
 8010640:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010644:	2b00      	cmp	r3, #0
 8010646:	da0c      	bge.n	8010662 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8010648:	6878      	ldr	r0, [r7, #4]
 801064a:	f002 fb5b 	bl	8012d04 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801064e:	e008      	b.n	8010662 <HAL_UART_IRQHandler+0x76a>
      return;
 8010650:	bf00      	nop
 8010652:	e006      	b.n	8010662 <HAL_UART_IRQHandler+0x76a>
    return;
 8010654:	bf00      	nop
 8010656:	e004      	b.n	8010662 <HAL_UART_IRQHandler+0x76a>
      return;
 8010658:	bf00      	nop
 801065a:	e002      	b.n	8010662 <HAL_UART_IRQHandler+0x76a>
      return;
 801065c:	bf00      	nop
 801065e:	e000      	b.n	8010662 <HAL_UART_IRQHandler+0x76a>
    return;
 8010660:	bf00      	nop
  }
}
 8010662:	37e8      	adds	r7, #232	@ 0xe8
 8010664:	46bd      	mov	sp, r7
 8010666:	bd80      	pop	{r7, pc}
 8010668:	effffffe 	.word	0xeffffffe

0801066c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801066c:	b480      	push	{r7}
 801066e:	b083      	sub	sp, #12
 8010670:	af00      	add	r7, sp, #0
 8010672:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8010674:	bf00      	nop
 8010676:	370c      	adds	r7, #12
 8010678:	46bd      	mov	sp, r7
 801067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801067e:	4770      	bx	lr

08010680 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010680:	b480      	push	{r7}
 8010682:	b083      	sub	sp, #12
 8010684:	af00      	add	r7, sp, #0
 8010686:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8010688:	bf00      	nop
 801068a:	370c      	adds	r7, #12
 801068c:	46bd      	mov	sp, r7
 801068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010692:	4770      	bx	lr

08010694 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010694:	b480      	push	{r7}
 8010696:	b083      	sub	sp, #12
 8010698:	af00      	add	r7, sp, #0
 801069a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 801069c:	bf00      	nop
 801069e:	370c      	adds	r7, #12
 80106a0:	46bd      	mov	sp, r7
 80106a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a6:	4770      	bx	lr

080106a8 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80106a8:	b480      	push	{r7}
 80106aa:	b083      	sub	sp, #12
 80106ac:	af00      	add	r7, sp, #0
 80106ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80106b0:	bf00      	nop
 80106b2:	370c      	adds	r7, #12
 80106b4:	46bd      	mov	sp, r7
 80106b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ba:	4770      	bx	lr

080106bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80106bc:	b480      	push	{r7}
 80106be:	b083      	sub	sp, #12
 80106c0:	af00      	add	r7, sp, #0
 80106c2:	6078      	str	r0, [r7, #4]
 80106c4:	460b      	mov	r3, r1
 80106c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80106c8:	bf00      	nop
 80106ca:	370c      	adds	r7, #12
 80106cc:	46bd      	mov	sp, r7
 80106ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d2:	4770      	bx	lr

080106d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80106d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80106d8:	b092      	sub	sp, #72	@ 0x48
 80106da:	af00      	add	r7, sp, #0
 80106dc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80106de:	2300      	movs	r3, #0
 80106e0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80106e4:	697b      	ldr	r3, [r7, #20]
 80106e6:	689a      	ldr	r2, [r3, #8]
 80106e8:	697b      	ldr	r3, [r7, #20]
 80106ea:	691b      	ldr	r3, [r3, #16]
 80106ec:	431a      	orrs	r2, r3
 80106ee:	697b      	ldr	r3, [r7, #20]
 80106f0:	695b      	ldr	r3, [r3, #20]
 80106f2:	431a      	orrs	r2, r3
 80106f4:	697b      	ldr	r3, [r7, #20]
 80106f6:	69db      	ldr	r3, [r3, #28]
 80106f8:	4313      	orrs	r3, r2
 80106fa:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80106fc:	697b      	ldr	r3, [r7, #20]
 80106fe:	681b      	ldr	r3, [r3, #0]
 8010700:	681a      	ldr	r2, [r3, #0]
 8010702:	4bbe      	ldr	r3, [pc, #760]	@ (80109fc <UART_SetConfig+0x328>)
 8010704:	4013      	ands	r3, r2
 8010706:	697a      	ldr	r2, [r7, #20]
 8010708:	6812      	ldr	r2, [r2, #0]
 801070a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801070c:	430b      	orrs	r3, r1
 801070e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010710:	697b      	ldr	r3, [r7, #20]
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	685b      	ldr	r3, [r3, #4]
 8010716:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801071a:	697b      	ldr	r3, [r7, #20]
 801071c:	68da      	ldr	r2, [r3, #12]
 801071e:	697b      	ldr	r3, [r7, #20]
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	430a      	orrs	r2, r1
 8010724:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010726:	697b      	ldr	r3, [r7, #20]
 8010728:	699b      	ldr	r3, [r3, #24]
 801072a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801072c:	697b      	ldr	r3, [r7, #20]
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	4ab3      	ldr	r2, [pc, #716]	@ (8010a00 <UART_SetConfig+0x32c>)
 8010732:	4293      	cmp	r3, r2
 8010734:	d004      	beq.n	8010740 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010736:	697b      	ldr	r3, [r7, #20]
 8010738:	6a1b      	ldr	r3, [r3, #32]
 801073a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801073c:	4313      	orrs	r3, r2
 801073e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010740:	697b      	ldr	r3, [r7, #20]
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	689a      	ldr	r2, [r3, #8]
 8010746:	4baf      	ldr	r3, [pc, #700]	@ (8010a04 <UART_SetConfig+0x330>)
 8010748:	4013      	ands	r3, r2
 801074a:	697a      	ldr	r2, [r7, #20]
 801074c:	6812      	ldr	r2, [r2, #0]
 801074e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010750:	430b      	orrs	r3, r1
 8010752:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010754:	697b      	ldr	r3, [r7, #20]
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801075a:	f023 010f 	bic.w	r1, r3, #15
 801075e:	697b      	ldr	r3, [r7, #20]
 8010760:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010762:	697b      	ldr	r3, [r7, #20]
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	430a      	orrs	r2, r1
 8010768:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801076a:	697b      	ldr	r3, [r7, #20]
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	4aa6      	ldr	r2, [pc, #664]	@ (8010a08 <UART_SetConfig+0x334>)
 8010770:	4293      	cmp	r3, r2
 8010772:	d177      	bne.n	8010864 <UART_SetConfig+0x190>
 8010774:	4ba5      	ldr	r3, [pc, #660]	@ (8010a0c <UART_SetConfig+0x338>)
 8010776:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010778:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801077c:	2b28      	cmp	r3, #40	@ 0x28
 801077e:	d86d      	bhi.n	801085c <UART_SetConfig+0x188>
 8010780:	a201      	add	r2, pc, #4	@ (adr r2, 8010788 <UART_SetConfig+0xb4>)
 8010782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010786:	bf00      	nop
 8010788:	0801082d 	.word	0x0801082d
 801078c:	0801085d 	.word	0x0801085d
 8010790:	0801085d 	.word	0x0801085d
 8010794:	0801085d 	.word	0x0801085d
 8010798:	0801085d 	.word	0x0801085d
 801079c:	0801085d 	.word	0x0801085d
 80107a0:	0801085d 	.word	0x0801085d
 80107a4:	0801085d 	.word	0x0801085d
 80107a8:	08010835 	.word	0x08010835
 80107ac:	0801085d 	.word	0x0801085d
 80107b0:	0801085d 	.word	0x0801085d
 80107b4:	0801085d 	.word	0x0801085d
 80107b8:	0801085d 	.word	0x0801085d
 80107bc:	0801085d 	.word	0x0801085d
 80107c0:	0801085d 	.word	0x0801085d
 80107c4:	0801085d 	.word	0x0801085d
 80107c8:	0801083d 	.word	0x0801083d
 80107cc:	0801085d 	.word	0x0801085d
 80107d0:	0801085d 	.word	0x0801085d
 80107d4:	0801085d 	.word	0x0801085d
 80107d8:	0801085d 	.word	0x0801085d
 80107dc:	0801085d 	.word	0x0801085d
 80107e0:	0801085d 	.word	0x0801085d
 80107e4:	0801085d 	.word	0x0801085d
 80107e8:	08010845 	.word	0x08010845
 80107ec:	0801085d 	.word	0x0801085d
 80107f0:	0801085d 	.word	0x0801085d
 80107f4:	0801085d 	.word	0x0801085d
 80107f8:	0801085d 	.word	0x0801085d
 80107fc:	0801085d 	.word	0x0801085d
 8010800:	0801085d 	.word	0x0801085d
 8010804:	0801085d 	.word	0x0801085d
 8010808:	0801084d 	.word	0x0801084d
 801080c:	0801085d 	.word	0x0801085d
 8010810:	0801085d 	.word	0x0801085d
 8010814:	0801085d 	.word	0x0801085d
 8010818:	0801085d 	.word	0x0801085d
 801081c:	0801085d 	.word	0x0801085d
 8010820:	0801085d 	.word	0x0801085d
 8010824:	0801085d 	.word	0x0801085d
 8010828:	08010855 	.word	0x08010855
 801082c:	2301      	movs	r3, #1
 801082e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010832:	e326      	b.n	8010e82 <UART_SetConfig+0x7ae>
 8010834:	2304      	movs	r3, #4
 8010836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801083a:	e322      	b.n	8010e82 <UART_SetConfig+0x7ae>
 801083c:	2308      	movs	r3, #8
 801083e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010842:	e31e      	b.n	8010e82 <UART_SetConfig+0x7ae>
 8010844:	2310      	movs	r3, #16
 8010846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801084a:	e31a      	b.n	8010e82 <UART_SetConfig+0x7ae>
 801084c:	2320      	movs	r3, #32
 801084e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010852:	e316      	b.n	8010e82 <UART_SetConfig+0x7ae>
 8010854:	2340      	movs	r3, #64	@ 0x40
 8010856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801085a:	e312      	b.n	8010e82 <UART_SetConfig+0x7ae>
 801085c:	2380      	movs	r3, #128	@ 0x80
 801085e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010862:	e30e      	b.n	8010e82 <UART_SetConfig+0x7ae>
 8010864:	697b      	ldr	r3, [r7, #20]
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	4a69      	ldr	r2, [pc, #420]	@ (8010a10 <UART_SetConfig+0x33c>)
 801086a:	4293      	cmp	r3, r2
 801086c:	d130      	bne.n	80108d0 <UART_SetConfig+0x1fc>
 801086e:	4b67      	ldr	r3, [pc, #412]	@ (8010a0c <UART_SetConfig+0x338>)
 8010870:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010872:	f003 0307 	and.w	r3, r3, #7
 8010876:	2b05      	cmp	r3, #5
 8010878:	d826      	bhi.n	80108c8 <UART_SetConfig+0x1f4>
 801087a:	a201      	add	r2, pc, #4	@ (adr r2, 8010880 <UART_SetConfig+0x1ac>)
 801087c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010880:	08010899 	.word	0x08010899
 8010884:	080108a1 	.word	0x080108a1
 8010888:	080108a9 	.word	0x080108a9
 801088c:	080108b1 	.word	0x080108b1
 8010890:	080108b9 	.word	0x080108b9
 8010894:	080108c1 	.word	0x080108c1
 8010898:	2300      	movs	r3, #0
 801089a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801089e:	e2f0      	b.n	8010e82 <UART_SetConfig+0x7ae>
 80108a0:	2304      	movs	r3, #4
 80108a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80108a6:	e2ec      	b.n	8010e82 <UART_SetConfig+0x7ae>
 80108a8:	2308      	movs	r3, #8
 80108aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80108ae:	e2e8      	b.n	8010e82 <UART_SetConfig+0x7ae>
 80108b0:	2310      	movs	r3, #16
 80108b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80108b6:	e2e4      	b.n	8010e82 <UART_SetConfig+0x7ae>
 80108b8:	2320      	movs	r3, #32
 80108ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80108be:	e2e0      	b.n	8010e82 <UART_SetConfig+0x7ae>
 80108c0:	2340      	movs	r3, #64	@ 0x40
 80108c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80108c6:	e2dc      	b.n	8010e82 <UART_SetConfig+0x7ae>
 80108c8:	2380      	movs	r3, #128	@ 0x80
 80108ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80108ce:	e2d8      	b.n	8010e82 <UART_SetConfig+0x7ae>
 80108d0:	697b      	ldr	r3, [r7, #20]
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	4a4f      	ldr	r2, [pc, #316]	@ (8010a14 <UART_SetConfig+0x340>)
 80108d6:	4293      	cmp	r3, r2
 80108d8:	d130      	bne.n	801093c <UART_SetConfig+0x268>
 80108da:	4b4c      	ldr	r3, [pc, #304]	@ (8010a0c <UART_SetConfig+0x338>)
 80108dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80108de:	f003 0307 	and.w	r3, r3, #7
 80108e2:	2b05      	cmp	r3, #5
 80108e4:	d826      	bhi.n	8010934 <UART_SetConfig+0x260>
 80108e6:	a201      	add	r2, pc, #4	@ (adr r2, 80108ec <UART_SetConfig+0x218>)
 80108e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108ec:	08010905 	.word	0x08010905
 80108f0:	0801090d 	.word	0x0801090d
 80108f4:	08010915 	.word	0x08010915
 80108f8:	0801091d 	.word	0x0801091d
 80108fc:	08010925 	.word	0x08010925
 8010900:	0801092d 	.word	0x0801092d
 8010904:	2300      	movs	r3, #0
 8010906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801090a:	e2ba      	b.n	8010e82 <UART_SetConfig+0x7ae>
 801090c:	2304      	movs	r3, #4
 801090e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010912:	e2b6      	b.n	8010e82 <UART_SetConfig+0x7ae>
 8010914:	2308      	movs	r3, #8
 8010916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801091a:	e2b2      	b.n	8010e82 <UART_SetConfig+0x7ae>
 801091c:	2310      	movs	r3, #16
 801091e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010922:	e2ae      	b.n	8010e82 <UART_SetConfig+0x7ae>
 8010924:	2320      	movs	r3, #32
 8010926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801092a:	e2aa      	b.n	8010e82 <UART_SetConfig+0x7ae>
 801092c:	2340      	movs	r3, #64	@ 0x40
 801092e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010932:	e2a6      	b.n	8010e82 <UART_SetConfig+0x7ae>
 8010934:	2380      	movs	r3, #128	@ 0x80
 8010936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801093a:	e2a2      	b.n	8010e82 <UART_SetConfig+0x7ae>
 801093c:	697b      	ldr	r3, [r7, #20]
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	4a35      	ldr	r2, [pc, #212]	@ (8010a18 <UART_SetConfig+0x344>)
 8010942:	4293      	cmp	r3, r2
 8010944:	d130      	bne.n	80109a8 <UART_SetConfig+0x2d4>
 8010946:	4b31      	ldr	r3, [pc, #196]	@ (8010a0c <UART_SetConfig+0x338>)
 8010948:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801094a:	f003 0307 	and.w	r3, r3, #7
 801094e:	2b05      	cmp	r3, #5
 8010950:	d826      	bhi.n	80109a0 <UART_SetConfig+0x2cc>
 8010952:	a201      	add	r2, pc, #4	@ (adr r2, 8010958 <UART_SetConfig+0x284>)
 8010954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010958:	08010971 	.word	0x08010971
 801095c:	08010979 	.word	0x08010979
 8010960:	08010981 	.word	0x08010981
 8010964:	08010989 	.word	0x08010989
 8010968:	08010991 	.word	0x08010991
 801096c:	08010999 	.word	0x08010999
 8010970:	2300      	movs	r3, #0
 8010972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010976:	e284      	b.n	8010e82 <UART_SetConfig+0x7ae>
 8010978:	2304      	movs	r3, #4
 801097a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801097e:	e280      	b.n	8010e82 <UART_SetConfig+0x7ae>
 8010980:	2308      	movs	r3, #8
 8010982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010986:	e27c      	b.n	8010e82 <UART_SetConfig+0x7ae>
 8010988:	2310      	movs	r3, #16
 801098a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801098e:	e278      	b.n	8010e82 <UART_SetConfig+0x7ae>
 8010990:	2320      	movs	r3, #32
 8010992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010996:	e274      	b.n	8010e82 <UART_SetConfig+0x7ae>
 8010998:	2340      	movs	r3, #64	@ 0x40
 801099a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801099e:	e270      	b.n	8010e82 <UART_SetConfig+0x7ae>
 80109a0:	2380      	movs	r3, #128	@ 0x80
 80109a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80109a6:	e26c      	b.n	8010e82 <UART_SetConfig+0x7ae>
 80109a8:	697b      	ldr	r3, [r7, #20]
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	4a1b      	ldr	r2, [pc, #108]	@ (8010a1c <UART_SetConfig+0x348>)
 80109ae:	4293      	cmp	r3, r2
 80109b0:	d142      	bne.n	8010a38 <UART_SetConfig+0x364>
 80109b2:	4b16      	ldr	r3, [pc, #88]	@ (8010a0c <UART_SetConfig+0x338>)
 80109b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80109b6:	f003 0307 	and.w	r3, r3, #7
 80109ba:	2b05      	cmp	r3, #5
 80109bc:	d838      	bhi.n	8010a30 <UART_SetConfig+0x35c>
 80109be:	a201      	add	r2, pc, #4	@ (adr r2, 80109c4 <UART_SetConfig+0x2f0>)
 80109c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109c4:	080109dd 	.word	0x080109dd
 80109c8:	080109e5 	.word	0x080109e5
 80109cc:	080109ed 	.word	0x080109ed
 80109d0:	080109f5 	.word	0x080109f5
 80109d4:	08010a21 	.word	0x08010a21
 80109d8:	08010a29 	.word	0x08010a29
 80109dc:	2300      	movs	r3, #0
 80109de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80109e2:	e24e      	b.n	8010e82 <UART_SetConfig+0x7ae>
 80109e4:	2304      	movs	r3, #4
 80109e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80109ea:	e24a      	b.n	8010e82 <UART_SetConfig+0x7ae>
 80109ec:	2308      	movs	r3, #8
 80109ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80109f2:	e246      	b.n	8010e82 <UART_SetConfig+0x7ae>
 80109f4:	2310      	movs	r3, #16
 80109f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80109fa:	e242      	b.n	8010e82 <UART_SetConfig+0x7ae>
 80109fc:	cfff69f3 	.word	0xcfff69f3
 8010a00:	58000c00 	.word	0x58000c00
 8010a04:	11fff4ff 	.word	0x11fff4ff
 8010a08:	40011000 	.word	0x40011000
 8010a0c:	58024400 	.word	0x58024400
 8010a10:	40004400 	.word	0x40004400
 8010a14:	40004800 	.word	0x40004800
 8010a18:	40004c00 	.word	0x40004c00
 8010a1c:	40005000 	.word	0x40005000
 8010a20:	2320      	movs	r3, #32
 8010a22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a26:	e22c      	b.n	8010e82 <UART_SetConfig+0x7ae>
 8010a28:	2340      	movs	r3, #64	@ 0x40
 8010a2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a2e:	e228      	b.n	8010e82 <UART_SetConfig+0x7ae>
 8010a30:	2380      	movs	r3, #128	@ 0x80
 8010a32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a36:	e224      	b.n	8010e82 <UART_SetConfig+0x7ae>
 8010a38:	697b      	ldr	r3, [r7, #20]
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	4ab1      	ldr	r2, [pc, #708]	@ (8010d04 <UART_SetConfig+0x630>)
 8010a3e:	4293      	cmp	r3, r2
 8010a40:	d176      	bne.n	8010b30 <UART_SetConfig+0x45c>
 8010a42:	4bb1      	ldr	r3, [pc, #708]	@ (8010d08 <UART_SetConfig+0x634>)
 8010a44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010a46:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010a4a:	2b28      	cmp	r3, #40	@ 0x28
 8010a4c:	d86c      	bhi.n	8010b28 <UART_SetConfig+0x454>
 8010a4e:	a201      	add	r2, pc, #4	@ (adr r2, 8010a54 <UART_SetConfig+0x380>)
 8010a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a54:	08010af9 	.word	0x08010af9
 8010a58:	08010b29 	.word	0x08010b29
 8010a5c:	08010b29 	.word	0x08010b29
 8010a60:	08010b29 	.word	0x08010b29
 8010a64:	08010b29 	.word	0x08010b29
 8010a68:	08010b29 	.word	0x08010b29
 8010a6c:	08010b29 	.word	0x08010b29
 8010a70:	08010b29 	.word	0x08010b29
 8010a74:	08010b01 	.word	0x08010b01
 8010a78:	08010b29 	.word	0x08010b29
 8010a7c:	08010b29 	.word	0x08010b29
 8010a80:	08010b29 	.word	0x08010b29
 8010a84:	08010b29 	.word	0x08010b29
 8010a88:	08010b29 	.word	0x08010b29
 8010a8c:	08010b29 	.word	0x08010b29
 8010a90:	08010b29 	.word	0x08010b29
 8010a94:	08010b09 	.word	0x08010b09
 8010a98:	08010b29 	.word	0x08010b29
 8010a9c:	08010b29 	.word	0x08010b29
 8010aa0:	08010b29 	.word	0x08010b29
 8010aa4:	08010b29 	.word	0x08010b29
 8010aa8:	08010b29 	.word	0x08010b29
 8010aac:	08010b29 	.word	0x08010b29
 8010ab0:	08010b29 	.word	0x08010b29
 8010ab4:	08010b11 	.word	0x08010b11
 8010ab8:	08010b29 	.word	0x08010b29
 8010abc:	08010b29 	.word	0x08010b29
 8010ac0:	08010b29 	.word	0x08010b29
 8010ac4:	08010b29 	.word	0x08010b29
 8010ac8:	08010b29 	.word	0x08010b29
 8010acc:	08010b29 	.word	0x08010b29
 8010ad0:	08010b29 	.word	0x08010b29
 8010ad4:	08010b19 	.word	0x08010b19
 8010ad8:	08010b29 	.word	0x08010b29
 8010adc:	08010b29 	.word	0x08010b29
 8010ae0:	08010b29 	.word	0x08010b29
 8010ae4:	08010b29 	.word	0x08010b29
 8010ae8:	08010b29 	.word	0x08010b29
 8010aec:	08010b29 	.word	0x08010b29
 8010af0:	08010b29 	.word	0x08010b29
 8010af4:	08010b21 	.word	0x08010b21
 8010af8:	2301      	movs	r3, #1
 8010afa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010afe:	e1c0      	b.n	8010e82 <UART_SetConfig+0x7ae>
 8010b00:	2304      	movs	r3, #4
 8010b02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b06:	e1bc      	b.n	8010e82 <UART_SetConfig+0x7ae>
 8010b08:	2308      	movs	r3, #8
 8010b0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b0e:	e1b8      	b.n	8010e82 <UART_SetConfig+0x7ae>
 8010b10:	2310      	movs	r3, #16
 8010b12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b16:	e1b4      	b.n	8010e82 <UART_SetConfig+0x7ae>
 8010b18:	2320      	movs	r3, #32
 8010b1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b1e:	e1b0      	b.n	8010e82 <UART_SetConfig+0x7ae>
 8010b20:	2340      	movs	r3, #64	@ 0x40
 8010b22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b26:	e1ac      	b.n	8010e82 <UART_SetConfig+0x7ae>
 8010b28:	2380      	movs	r3, #128	@ 0x80
 8010b2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b2e:	e1a8      	b.n	8010e82 <UART_SetConfig+0x7ae>
 8010b30:	697b      	ldr	r3, [r7, #20]
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	4a75      	ldr	r2, [pc, #468]	@ (8010d0c <UART_SetConfig+0x638>)
 8010b36:	4293      	cmp	r3, r2
 8010b38:	d130      	bne.n	8010b9c <UART_SetConfig+0x4c8>
 8010b3a:	4b73      	ldr	r3, [pc, #460]	@ (8010d08 <UART_SetConfig+0x634>)
 8010b3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010b3e:	f003 0307 	and.w	r3, r3, #7
 8010b42:	2b05      	cmp	r3, #5
 8010b44:	d826      	bhi.n	8010b94 <UART_SetConfig+0x4c0>
 8010b46:	a201      	add	r2, pc, #4	@ (adr r2, 8010b4c <UART_SetConfig+0x478>)
 8010b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b4c:	08010b65 	.word	0x08010b65
 8010b50:	08010b6d 	.word	0x08010b6d
 8010b54:	08010b75 	.word	0x08010b75
 8010b58:	08010b7d 	.word	0x08010b7d
 8010b5c:	08010b85 	.word	0x08010b85
 8010b60:	08010b8d 	.word	0x08010b8d
 8010b64:	2300      	movs	r3, #0
 8010b66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b6a:	e18a      	b.n	8010e82 <UART_SetConfig+0x7ae>
 8010b6c:	2304      	movs	r3, #4
 8010b6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b72:	e186      	b.n	8010e82 <UART_SetConfig+0x7ae>
 8010b74:	2308      	movs	r3, #8
 8010b76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b7a:	e182      	b.n	8010e82 <UART_SetConfig+0x7ae>
 8010b7c:	2310      	movs	r3, #16
 8010b7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b82:	e17e      	b.n	8010e82 <UART_SetConfig+0x7ae>
 8010b84:	2320      	movs	r3, #32
 8010b86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b8a:	e17a      	b.n	8010e82 <UART_SetConfig+0x7ae>
 8010b8c:	2340      	movs	r3, #64	@ 0x40
 8010b8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b92:	e176      	b.n	8010e82 <UART_SetConfig+0x7ae>
 8010b94:	2380      	movs	r3, #128	@ 0x80
 8010b96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b9a:	e172      	b.n	8010e82 <UART_SetConfig+0x7ae>
 8010b9c:	697b      	ldr	r3, [r7, #20]
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	4a5b      	ldr	r2, [pc, #364]	@ (8010d10 <UART_SetConfig+0x63c>)
 8010ba2:	4293      	cmp	r3, r2
 8010ba4:	d130      	bne.n	8010c08 <UART_SetConfig+0x534>
 8010ba6:	4b58      	ldr	r3, [pc, #352]	@ (8010d08 <UART_SetConfig+0x634>)
 8010ba8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010baa:	f003 0307 	and.w	r3, r3, #7
 8010bae:	2b05      	cmp	r3, #5
 8010bb0:	d826      	bhi.n	8010c00 <UART_SetConfig+0x52c>
 8010bb2:	a201      	add	r2, pc, #4	@ (adr r2, 8010bb8 <UART_SetConfig+0x4e4>)
 8010bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010bb8:	08010bd1 	.word	0x08010bd1
 8010bbc:	08010bd9 	.word	0x08010bd9
 8010bc0:	08010be1 	.word	0x08010be1
 8010bc4:	08010be9 	.word	0x08010be9
 8010bc8:	08010bf1 	.word	0x08010bf1
 8010bcc:	08010bf9 	.word	0x08010bf9
 8010bd0:	2300      	movs	r3, #0
 8010bd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010bd6:	e154      	b.n	8010e82 <UART_SetConfig+0x7ae>
 8010bd8:	2304      	movs	r3, #4
 8010bda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010bde:	e150      	b.n	8010e82 <UART_SetConfig+0x7ae>
 8010be0:	2308      	movs	r3, #8
 8010be2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010be6:	e14c      	b.n	8010e82 <UART_SetConfig+0x7ae>
 8010be8:	2310      	movs	r3, #16
 8010bea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010bee:	e148      	b.n	8010e82 <UART_SetConfig+0x7ae>
 8010bf0:	2320      	movs	r3, #32
 8010bf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010bf6:	e144      	b.n	8010e82 <UART_SetConfig+0x7ae>
 8010bf8:	2340      	movs	r3, #64	@ 0x40
 8010bfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010bfe:	e140      	b.n	8010e82 <UART_SetConfig+0x7ae>
 8010c00:	2380      	movs	r3, #128	@ 0x80
 8010c02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c06:	e13c      	b.n	8010e82 <UART_SetConfig+0x7ae>
 8010c08:	697b      	ldr	r3, [r7, #20]
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	4a41      	ldr	r2, [pc, #260]	@ (8010d14 <UART_SetConfig+0x640>)
 8010c0e:	4293      	cmp	r3, r2
 8010c10:	f040 8082 	bne.w	8010d18 <UART_SetConfig+0x644>
 8010c14:	4b3c      	ldr	r3, [pc, #240]	@ (8010d08 <UART_SetConfig+0x634>)
 8010c16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010c18:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010c1c:	2b28      	cmp	r3, #40	@ 0x28
 8010c1e:	d86d      	bhi.n	8010cfc <UART_SetConfig+0x628>
 8010c20:	a201      	add	r2, pc, #4	@ (adr r2, 8010c28 <UART_SetConfig+0x554>)
 8010c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c26:	bf00      	nop
 8010c28:	08010ccd 	.word	0x08010ccd
 8010c2c:	08010cfd 	.word	0x08010cfd
 8010c30:	08010cfd 	.word	0x08010cfd
 8010c34:	08010cfd 	.word	0x08010cfd
 8010c38:	08010cfd 	.word	0x08010cfd
 8010c3c:	08010cfd 	.word	0x08010cfd
 8010c40:	08010cfd 	.word	0x08010cfd
 8010c44:	08010cfd 	.word	0x08010cfd
 8010c48:	08010cd5 	.word	0x08010cd5
 8010c4c:	08010cfd 	.word	0x08010cfd
 8010c50:	08010cfd 	.word	0x08010cfd
 8010c54:	08010cfd 	.word	0x08010cfd
 8010c58:	08010cfd 	.word	0x08010cfd
 8010c5c:	08010cfd 	.word	0x08010cfd
 8010c60:	08010cfd 	.word	0x08010cfd
 8010c64:	08010cfd 	.word	0x08010cfd
 8010c68:	08010cdd 	.word	0x08010cdd
 8010c6c:	08010cfd 	.word	0x08010cfd
 8010c70:	08010cfd 	.word	0x08010cfd
 8010c74:	08010cfd 	.word	0x08010cfd
 8010c78:	08010cfd 	.word	0x08010cfd
 8010c7c:	08010cfd 	.word	0x08010cfd
 8010c80:	08010cfd 	.word	0x08010cfd
 8010c84:	08010cfd 	.word	0x08010cfd
 8010c88:	08010ce5 	.word	0x08010ce5
 8010c8c:	08010cfd 	.word	0x08010cfd
 8010c90:	08010cfd 	.word	0x08010cfd
 8010c94:	08010cfd 	.word	0x08010cfd
 8010c98:	08010cfd 	.word	0x08010cfd
 8010c9c:	08010cfd 	.word	0x08010cfd
 8010ca0:	08010cfd 	.word	0x08010cfd
 8010ca4:	08010cfd 	.word	0x08010cfd
 8010ca8:	08010ced 	.word	0x08010ced
 8010cac:	08010cfd 	.word	0x08010cfd
 8010cb0:	08010cfd 	.word	0x08010cfd
 8010cb4:	08010cfd 	.word	0x08010cfd
 8010cb8:	08010cfd 	.word	0x08010cfd
 8010cbc:	08010cfd 	.word	0x08010cfd
 8010cc0:	08010cfd 	.word	0x08010cfd
 8010cc4:	08010cfd 	.word	0x08010cfd
 8010cc8:	08010cf5 	.word	0x08010cf5
 8010ccc:	2301      	movs	r3, #1
 8010cce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010cd2:	e0d6      	b.n	8010e82 <UART_SetConfig+0x7ae>
 8010cd4:	2304      	movs	r3, #4
 8010cd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010cda:	e0d2      	b.n	8010e82 <UART_SetConfig+0x7ae>
 8010cdc:	2308      	movs	r3, #8
 8010cde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010ce2:	e0ce      	b.n	8010e82 <UART_SetConfig+0x7ae>
 8010ce4:	2310      	movs	r3, #16
 8010ce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010cea:	e0ca      	b.n	8010e82 <UART_SetConfig+0x7ae>
 8010cec:	2320      	movs	r3, #32
 8010cee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010cf2:	e0c6      	b.n	8010e82 <UART_SetConfig+0x7ae>
 8010cf4:	2340      	movs	r3, #64	@ 0x40
 8010cf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010cfa:	e0c2      	b.n	8010e82 <UART_SetConfig+0x7ae>
 8010cfc:	2380      	movs	r3, #128	@ 0x80
 8010cfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010d02:	e0be      	b.n	8010e82 <UART_SetConfig+0x7ae>
 8010d04:	40011400 	.word	0x40011400
 8010d08:	58024400 	.word	0x58024400
 8010d0c:	40007800 	.word	0x40007800
 8010d10:	40007c00 	.word	0x40007c00
 8010d14:	40011800 	.word	0x40011800
 8010d18:	697b      	ldr	r3, [r7, #20]
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	4aad      	ldr	r2, [pc, #692]	@ (8010fd4 <UART_SetConfig+0x900>)
 8010d1e:	4293      	cmp	r3, r2
 8010d20:	d176      	bne.n	8010e10 <UART_SetConfig+0x73c>
 8010d22:	4bad      	ldr	r3, [pc, #692]	@ (8010fd8 <UART_SetConfig+0x904>)
 8010d24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010d26:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010d2a:	2b28      	cmp	r3, #40	@ 0x28
 8010d2c:	d86c      	bhi.n	8010e08 <UART_SetConfig+0x734>
 8010d2e:	a201      	add	r2, pc, #4	@ (adr r2, 8010d34 <UART_SetConfig+0x660>)
 8010d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d34:	08010dd9 	.word	0x08010dd9
 8010d38:	08010e09 	.word	0x08010e09
 8010d3c:	08010e09 	.word	0x08010e09
 8010d40:	08010e09 	.word	0x08010e09
 8010d44:	08010e09 	.word	0x08010e09
 8010d48:	08010e09 	.word	0x08010e09
 8010d4c:	08010e09 	.word	0x08010e09
 8010d50:	08010e09 	.word	0x08010e09
 8010d54:	08010de1 	.word	0x08010de1
 8010d58:	08010e09 	.word	0x08010e09
 8010d5c:	08010e09 	.word	0x08010e09
 8010d60:	08010e09 	.word	0x08010e09
 8010d64:	08010e09 	.word	0x08010e09
 8010d68:	08010e09 	.word	0x08010e09
 8010d6c:	08010e09 	.word	0x08010e09
 8010d70:	08010e09 	.word	0x08010e09
 8010d74:	08010de9 	.word	0x08010de9
 8010d78:	08010e09 	.word	0x08010e09
 8010d7c:	08010e09 	.word	0x08010e09
 8010d80:	08010e09 	.word	0x08010e09
 8010d84:	08010e09 	.word	0x08010e09
 8010d88:	08010e09 	.word	0x08010e09
 8010d8c:	08010e09 	.word	0x08010e09
 8010d90:	08010e09 	.word	0x08010e09
 8010d94:	08010df1 	.word	0x08010df1
 8010d98:	08010e09 	.word	0x08010e09
 8010d9c:	08010e09 	.word	0x08010e09
 8010da0:	08010e09 	.word	0x08010e09
 8010da4:	08010e09 	.word	0x08010e09
 8010da8:	08010e09 	.word	0x08010e09
 8010dac:	08010e09 	.word	0x08010e09
 8010db0:	08010e09 	.word	0x08010e09
 8010db4:	08010df9 	.word	0x08010df9
 8010db8:	08010e09 	.word	0x08010e09
 8010dbc:	08010e09 	.word	0x08010e09
 8010dc0:	08010e09 	.word	0x08010e09
 8010dc4:	08010e09 	.word	0x08010e09
 8010dc8:	08010e09 	.word	0x08010e09
 8010dcc:	08010e09 	.word	0x08010e09
 8010dd0:	08010e09 	.word	0x08010e09
 8010dd4:	08010e01 	.word	0x08010e01
 8010dd8:	2301      	movs	r3, #1
 8010dda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010dde:	e050      	b.n	8010e82 <UART_SetConfig+0x7ae>
 8010de0:	2304      	movs	r3, #4
 8010de2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010de6:	e04c      	b.n	8010e82 <UART_SetConfig+0x7ae>
 8010de8:	2308      	movs	r3, #8
 8010dea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010dee:	e048      	b.n	8010e82 <UART_SetConfig+0x7ae>
 8010df0:	2310      	movs	r3, #16
 8010df2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010df6:	e044      	b.n	8010e82 <UART_SetConfig+0x7ae>
 8010df8:	2320      	movs	r3, #32
 8010dfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010dfe:	e040      	b.n	8010e82 <UART_SetConfig+0x7ae>
 8010e00:	2340      	movs	r3, #64	@ 0x40
 8010e02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010e06:	e03c      	b.n	8010e82 <UART_SetConfig+0x7ae>
 8010e08:	2380      	movs	r3, #128	@ 0x80
 8010e0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010e0e:	e038      	b.n	8010e82 <UART_SetConfig+0x7ae>
 8010e10:	697b      	ldr	r3, [r7, #20]
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	4a71      	ldr	r2, [pc, #452]	@ (8010fdc <UART_SetConfig+0x908>)
 8010e16:	4293      	cmp	r3, r2
 8010e18:	d130      	bne.n	8010e7c <UART_SetConfig+0x7a8>
 8010e1a:	4b6f      	ldr	r3, [pc, #444]	@ (8010fd8 <UART_SetConfig+0x904>)
 8010e1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010e1e:	f003 0307 	and.w	r3, r3, #7
 8010e22:	2b05      	cmp	r3, #5
 8010e24:	d826      	bhi.n	8010e74 <UART_SetConfig+0x7a0>
 8010e26:	a201      	add	r2, pc, #4	@ (adr r2, 8010e2c <UART_SetConfig+0x758>)
 8010e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e2c:	08010e45 	.word	0x08010e45
 8010e30:	08010e4d 	.word	0x08010e4d
 8010e34:	08010e55 	.word	0x08010e55
 8010e38:	08010e5d 	.word	0x08010e5d
 8010e3c:	08010e65 	.word	0x08010e65
 8010e40:	08010e6d 	.word	0x08010e6d
 8010e44:	2302      	movs	r3, #2
 8010e46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010e4a:	e01a      	b.n	8010e82 <UART_SetConfig+0x7ae>
 8010e4c:	2304      	movs	r3, #4
 8010e4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010e52:	e016      	b.n	8010e82 <UART_SetConfig+0x7ae>
 8010e54:	2308      	movs	r3, #8
 8010e56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010e5a:	e012      	b.n	8010e82 <UART_SetConfig+0x7ae>
 8010e5c:	2310      	movs	r3, #16
 8010e5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010e62:	e00e      	b.n	8010e82 <UART_SetConfig+0x7ae>
 8010e64:	2320      	movs	r3, #32
 8010e66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010e6a:	e00a      	b.n	8010e82 <UART_SetConfig+0x7ae>
 8010e6c:	2340      	movs	r3, #64	@ 0x40
 8010e6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010e72:	e006      	b.n	8010e82 <UART_SetConfig+0x7ae>
 8010e74:	2380      	movs	r3, #128	@ 0x80
 8010e76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010e7a:	e002      	b.n	8010e82 <UART_SetConfig+0x7ae>
 8010e7c:	2380      	movs	r3, #128	@ 0x80
 8010e7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010e82:	697b      	ldr	r3, [r7, #20]
 8010e84:	681b      	ldr	r3, [r3, #0]
 8010e86:	4a55      	ldr	r2, [pc, #340]	@ (8010fdc <UART_SetConfig+0x908>)
 8010e88:	4293      	cmp	r3, r2
 8010e8a:	f040 80f8 	bne.w	801107e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010e8e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8010e92:	2b20      	cmp	r3, #32
 8010e94:	dc46      	bgt.n	8010f24 <UART_SetConfig+0x850>
 8010e96:	2b02      	cmp	r3, #2
 8010e98:	db75      	blt.n	8010f86 <UART_SetConfig+0x8b2>
 8010e9a:	3b02      	subs	r3, #2
 8010e9c:	2b1e      	cmp	r3, #30
 8010e9e:	d872      	bhi.n	8010f86 <UART_SetConfig+0x8b2>
 8010ea0:	a201      	add	r2, pc, #4	@ (adr r2, 8010ea8 <UART_SetConfig+0x7d4>)
 8010ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ea6:	bf00      	nop
 8010ea8:	08010f2b 	.word	0x08010f2b
 8010eac:	08010f87 	.word	0x08010f87
 8010eb0:	08010f33 	.word	0x08010f33
 8010eb4:	08010f87 	.word	0x08010f87
 8010eb8:	08010f87 	.word	0x08010f87
 8010ebc:	08010f87 	.word	0x08010f87
 8010ec0:	08010f43 	.word	0x08010f43
 8010ec4:	08010f87 	.word	0x08010f87
 8010ec8:	08010f87 	.word	0x08010f87
 8010ecc:	08010f87 	.word	0x08010f87
 8010ed0:	08010f87 	.word	0x08010f87
 8010ed4:	08010f87 	.word	0x08010f87
 8010ed8:	08010f87 	.word	0x08010f87
 8010edc:	08010f87 	.word	0x08010f87
 8010ee0:	08010f53 	.word	0x08010f53
 8010ee4:	08010f87 	.word	0x08010f87
 8010ee8:	08010f87 	.word	0x08010f87
 8010eec:	08010f87 	.word	0x08010f87
 8010ef0:	08010f87 	.word	0x08010f87
 8010ef4:	08010f87 	.word	0x08010f87
 8010ef8:	08010f87 	.word	0x08010f87
 8010efc:	08010f87 	.word	0x08010f87
 8010f00:	08010f87 	.word	0x08010f87
 8010f04:	08010f87 	.word	0x08010f87
 8010f08:	08010f87 	.word	0x08010f87
 8010f0c:	08010f87 	.word	0x08010f87
 8010f10:	08010f87 	.word	0x08010f87
 8010f14:	08010f87 	.word	0x08010f87
 8010f18:	08010f87 	.word	0x08010f87
 8010f1c:	08010f87 	.word	0x08010f87
 8010f20:	08010f79 	.word	0x08010f79
 8010f24:	2b40      	cmp	r3, #64	@ 0x40
 8010f26:	d02a      	beq.n	8010f7e <UART_SetConfig+0x8aa>
 8010f28:	e02d      	b.n	8010f86 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8010f2a:	f7fb fd79 	bl	800ca20 <HAL_RCCEx_GetD3PCLK1Freq>
 8010f2e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010f30:	e02f      	b.n	8010f92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010f32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010f36:	4618      	mov	r0, r3
 8010f38:	f7fb fd88 	bl	800ca4c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010f40:	e027      	b.n	8010f92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010f42:	f107 0318 	add.w	r3, r7, #24
 8010f46:	4618      	mov	r0, r3
 8010f48:	f7fb fed4 	bl	800ccf4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010f4c:	69fb      	ldr	r3, [r7, #28]
 8010f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010f50:	e01f      	b.n	8010f92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010f52:	4b21      	ldr	r3, [pc, #132]	@ (8010fd8 <UART_SetConfig+0x904>)
 8010f54:	681b      	ldr	r3, [r3, #0]
 8010f56:	f003 0320 	and.w	r3, r3, #32
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d009      	beq.n	8010f72 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010f5e:	4b1e      	ldr	r3, [pc, #120]	@ (8010fd8 <UART_SetConfig+0x904>)
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	08db      	lsrs	r3, r3, #3
 8010f64:	f003 0303 	and.w	r3, r3, #3
 8010f68:	4a1d      	ldr	r2, [pc, #116]	@ (8010fe0 <UART_SetConfig+0x90c>)
 8010f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8010f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010f70:	e00f      	b.n	8010f92 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8010f72:	4b1b      	ldr	r3, [pc, #108]	@ (8010fe0 <UART_SetConfig+0x90c>)
 8010f74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010f76:	e00c      	b.n	8010f92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010f78:	4b1a      	ldr	r3, [pc, #104]	@ (8010fe4 <UART_SetConfig+0x910>)
 8010f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010f7c:	e009      	b.n	8010f92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010f7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010f84:	e005      	b.n	8010f92 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8010f86:	2300      	movs	r3, #0
 8010f88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8010f8a:	2301      	movs	r3, #1
 8010f8c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8010f90:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010f92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	f000 81ee 	beq.w	8011376 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010f9a:	697b      	ldr	r3, [r7, #20]
 8010f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f9e:	4a12      	ldr	r2, [pc, #72]	@ (8010fe8 <UART_SetConfig+0x914>)
 8010fa0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010fa4:	461a      	mov	r2, r3
 8010fa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010fa8:	fbb3 f3f2 	udiv	r3, r3, r2
 8010fac:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010fae:	697b      	ldr	r3, [r7, #20]
 8010fb0:	685a      	ldr	r2, [r3, #4]
 8010fb2:	4613      	mov	r3, r2
 8010fb4:	005b      	lsls	r3, r3, #1
 8010fb6:	4413      	add	r3, r2
 8010fb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010fba:	429a      	cmp	r2, r3
 8010fbc:	d305      	bcc.n	8010fca <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010fbe:	697b      	ldr	r3, [r7, #20]
 8010fc0:	685b      	ldr	r3, [r3, #4]
 8010fc2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010fc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010fc6:	429a      	cmp	r2, r3
 8010fc8:	d910      	bls.n	8010fec <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8010fca:	2301      	movs	r3, #1
 8010fcc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8010fd0:	e1d1      	b.n	8011376 <UART_SetConfig+0xca2>
 8010fd2:	bf00      	nop
 8010fd4:	40011c00 	.word	0x40011c00
 8010fd8:	58024400 	.word	0x58024400
 8010fdc:	58000c00 	.word	0x58000c00
 8010fe0:	03d09000 	.word	0x03d09000
 8010fe4:	003d0900 	.word	0x003d0900
 8010fe8:	08019dec 	.word	0x08019dec
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010fec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010fee:	2200      	movs	r2, #0
 8010ff0:	60bb      	str	r3, [r7, #8]
 8010ff2:	60fa      	str	r2, [r7, #12]
 8010ff4:	697b      	ldr	r3, [r7, #20]
 8010ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ff8:	4ac0      	ldr	r2, [pc, #768]	@ (80112fc <UART_SetConfig+0xc28>)
 8010ffa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010ffe:	b29b      	uxth	r3, r3
 8011000:	2200      	movs	r2, #0
 8011002:	603b      	str	r3, [r7, #0]
 8011004:	607a      	str	r2, [r7, #4]
 8011006:	e9d7 2300 	ldrd	r2, r3, [r7]
 801100a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801100e:	f7ef fbdb 	bl	80007c8 <__aeabi_uldivmod>
 8011012:	4602      	mov	r2, r0
 8011014:	460b      	mov	r3, r1
 8011016:	4610      	mov	r0, r2
 8011018:	4619      	mov	r1, r3
 801101a:	f04f 0200 	mov.w	r2, #0
 801101e:	f04f 0300 	mov.w	r3, #0
 8011022:	020b      	lsls	r3, r1, #8
 8011024:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8011028:	0202      	lsls	r2, r0, #8
 801102a:	6979      	ldr	r1, [r7, #20]
 801102c:	6849      	ldr	r1, [r1, #4]
 801102e:	0849      	lsrs	r1, r1, #1
 8011030:	2000      	movs	r0, #0
 8011032:	460c      	mov	r4, r1
 8011034:	4605      	mov	r5, r0
 8011036:	eb12 0804 	adds.w	r8, r2, r4
 801103a:	eb43 0905 	adc.w	r9, r3, r5
 801103e:	697b      	ldr	r3, [r7, #20]
 8011040:	685b      	ldr	r3, [r3, #4]
 8011042:	2200      	movs	r2, #0
 8011044:	469a      	mov	sl, r3
 8011046:	4693      	mov	fp, r2
 8011048:	4652      	mov	r2, sl
 801104a:	465b      	mov	r3, fp
 801104c:	4640      	mov	r0, r8
 801104e:	4649      	mov	r1, r9
 8011050:	f7ef fbba 	bl	80007c8 <__aeabi_uldivmod>
 8011054:	4602      	mov	r2, r0
 8011056:	460b      	mov	r3, r1
 8011058:	4613      	mov	r3, r2
 801105a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801105c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801105e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8011062:	d308      	bcc.n	8011076 <UART_SetConfig+0x9a2>
 8011064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011066:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801106a:	d204      	bcs.n	8011076 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 801106c:	697b      	ldr	r3, [r7, #20]
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011072:	60da      	str	r2, [r3, #12]
 8011074:	e17f      	b.n	8011376 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8011076:	2301      	movs	r3, #1
 8011078:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801107c:	e17b      	b.n	8011376 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801107e:	697b      	ldr	r3, [r7, #20]
 8011080:	69db      	ldr	r3, [r3, #28]
 8011082:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011086:	f040 80bd 	bne.w	8011204 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 801108a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801108e:	2b20      	cmp	r3, #32
 8011090:	dc48      	bgt.n	8011124 <UART_SetConfig+0xa50>
 8011092:	2b00      	cmp	r3, #0
 8011094:	db7b      	blt.n	801118e <UART_SetConfig+0xaba>
 8011096:	2b20      	cmp	r3, #32
 8011098:	d879      	bhi.n	801118e <UART_SetConfig+0xaba>
 801109a:	a201      	add	r2, pc, #4	@ (adr r2, 80110a0 <UART_SetConfig+0x9cc>)
 801109c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110a0:	0801112b 	.word	0x0801112b
 80110a4:	08011133 	.word	0x08011133
 80110a8:	0801118f 	.word	0x0801118f
 80110ac:	0801118f 	.word	0x0801118f
 80110b0:	0801113b 	.word	0x0801113b
 80110b4:	0801118f 	.word	0x0801118f
 80110b8:	0801118f 	.word	0x0801118f
 80110bc:	0801118f 	.word	0x0801118f
 80110c0:	0801114b 	.word	0x0801114b
 80110c4:	0801118f 	.word	0x0801118f
 80110c8:	0801118f 	.word	0x0801118f
 80110cc:	0801118f 	.word	0x0801118f
 80110d0:	0801118f 	.word	0x0801118f
 80110d4:	0801118f 	.word	0x0801118f
 80110d8:	0801118f 	.word	0x0801118f
 80110dc:	0801118f 	.word	0x0801118f
 80110e0:	0801115b 	.word	0x0801115b
 80110e4:	0801118f 	.word	0x0801118f
 80110e8:	0801118f 	.word	0x0801118f
 80110ec:	0801118f 	.word	0x0801118f
 80110f0:	0801118f 	.word	0x0801118f
 80110f4:	0801118f 	.word	0x0801118f
 80110f8:	0801118f 	.word	0x0801118f
 80110fc:	0801118f 	.word	0x0801118f
 8011100:	0801118f 	.word	0x0801118f
 8011104:	0801118f 	.word	0x0801118f
 8011108:	0801118f 	.word	0x0801118f
 801110c:	0801118f 	.word	0x0801118f
 8011110:	0801118f 	.word	0x0801118f
 8011114:	0801118f 	.word	0x0801118f
 8011118:	0801118f 	.word	0x0801118f
 801111c:	0801118f 	.word	0x0801118f
 8011120:	08011181 	.word	0x08011181
 8011124:	2b40      	cmp	r3, #64	@ 0x40
 8011126:	d02e      	beq.n	8011186 <UART_SetConfig+0xab2>
 8011128:	e031      	b.n	801118e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801112a:	f7fa fa4d 	bl	800b5c8 <HAL_RCC_GetPCLK1Freq>
 801112e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8011130:	e033      	b.n	801119a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011132:	f7fa fa5f 	bl	800b5f4 <HAL_RCC_GetPCLK2Freq>
 8011136:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8011138:	e02f      	b.n	801119a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801113a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801113e:	4618      	mov	r0, r3
 8011140:	f7fb fc84 	bl	800ca4c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011146:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011148:	e027      	b.n	801119a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801114a:	f107 0318 	add.w	r3, r7, #24
 801114e:	4618      	mov	r0, r3
 8011150:	f7fb fdd0 	bl	800ccf4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011154:	69fb      	ldr	r3, [r7, #28]
 8011156:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011158:	e01f      	b.n	801119a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801115a:	4b69      	ldr	r3, [pc, #420]	@ (8011300 <UART_SetConfig+0xc2c>)
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	f003 0320 	and.w	r3, r3, #32
 8011162:	2b00      	cmp	r3, #0
 8011164:	d009      	beq.n	801117a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011166:	4b66      	ldr	r3, [pc, #408]	@ (8011300 <UART_SetConfig+0xc2c>)
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	08db      	lsrs	r3, r3, #3
 801116c:	f003 0303 	and.w	r3, r3, #3
 8011170:	4a64      	ldr	r2, [pc, #400]	@ (8011304 <UART_SetConfig+0xc30>)
 8011172:	fa22 f303 	lsr.w	r3, r2, r3
 8011176:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011178:	e00f      	b.n	801119a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 801117a:	4b62      	ldr	r3, [pc, #392]	@ (8011304 <UART_SetConfig+0xc30>)
 801117c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801117e:	e00c      	b.n	801119a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011180:	4b61      	ldr	r3, [pc, #388]	@ (8011308 <UART_SetConfig+0xc34>)
 8011182:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011184:	e009      	b.n	801119a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011186:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801118a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801118c:	e005      	b.n	801119a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 801118e:	2300      	movs	r3, #0
 8011190:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8011192:	2301      	movs	r3, #1
 8011194:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8011198:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801119a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801119c:	2b00      	cmp	r3, #0
 801119e:	f000 80ea 	beq.w	8011376 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80111a2:	697b      	ldr	r3, [r7, #20]
 80111a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80111a6:	4a55      	ldr	r2, [pc, #340]	@ (80112fc <UART_SetConfig+0xc28>)
 80111a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80111ac:	461a      	mov	r2, r3
 80111ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80111b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80111b4:	005a      	lsls	r2, r3, #1
 80111b6:	697b      	ldr	r3, [r7, #20]
 80111b8:	685b      	ldr	r3, [r3, #4]
 80111ba:	085b      	lsrs	r3, r3, #1
 80111bc:	441a      	add	r2, r3
 80111be:	697b      	ldr	r3, [r7, #20]
 80111c0:	685b      	ldr	r3, [r3, #4]
 80111c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80111c6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80111c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111ca:	2b0f      	cmp	r3, #15
 80111cc:	d916      	bls.n	80111fc <UART_SetConfig+0xb28>
 80111ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80111d4:	d212      	bcs.n	80111fc <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80111d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111d8:	b29b      	uxth	r3, r3
 80111da:	f023 030f 	bic.w	r3, r3, #15
 80111de:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80111e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111e2:	085b      	lsrs	r3, r3, #1
 80111e4:	b29b      	uxth	r3, r3
 80111e6:	f003 0307 	and.w	r3, r3, #7
 80111ea:	b29a      	uxth	r2, r3
 80111ec:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80111ee:	4313      	orrs	r3, r2
 80111f0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80111f2:	697b      	ldr	r3, [r7, #20]
 80111f4:	681b      	ldr	r3, [r3, #0]
 80111f6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80111f8:	60da      	str	r2, [r3, #12]
 80111fa:	e0bc      	b.n	8011376 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80111fc:	2301      	movs	r3, #1
 80111fe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8011202:	e0b8      	b.n	8011376 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8011204:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8011208:	2b20      	cmp	r3, #32
 801120a:	dc4b      	bgt.n	80112a4 <UART_SetConfig+0xbd0>
 801120c:	2b00      	cmp	r3, #0
 801120e:	f2c0 8087 	blt.w	8011320 <UART_SetConfig+0xc4c>
 8011212:	2b20      	cmp	r3, #32
 8011214:	f200 8084 	bhi.w	8011320 <UART_SetConfig+0xc4c>
 8011218:	a201      	add	r2, pc, #4	@ (adr r2, 8011220 <UART_SetConfig+0xb4c>)
 801121a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801121e:	bf00      	nop
 8011220:	080112ab 	.word	0x080112ab
 8011224:	080112b3 	.word	0x080112b3
 8011228:	08011321 	.word	0x08011321
 801122c:	08011321 	.word	0x08011321
 8011230:	080112bb 	.word	0x080112bb
 8011234:	08011321 	.word	0x08011321
 8011238:	08011321 	.word	0x08011321
 801123c:	08011321 	.word	0x08011321
 8011240:	080112cb 	.word	0x080112cb
 8011244:	08011321 	.word	0x08011321
 8011248:	08011321 	.word	0x08011321
 801124c:	08011321 	.word	0x08011321
 8011250:	08011321 	.word	0x08011321
 8011254:	08011321 	.word	0x08011321
 8011258:	08011321 	.word	0x08011321
 801125c:	08011321 	.word	0x08011321
 8011260:	080112db 	.word	0x080112db
 8011264:	08011321 	.word	0x08011321
 8011268:	08011321 	.word	0x08011321
 801126c:	08011321 	.word	0x08011321
 8011270:	08011321 	.word	0x08011321
 8011274:	08011321 	.word	0x08011321
 8011278:	08011321 	.word	0x08011321
 801127c:	08011321 	.word	0x08011321
 8011280:	08011321 	.word	0x08011321
 8011284:	08011321 	.word	0x08011321
 8011288:	08011321 	.word	0x08011321
 801128c:	08011321 	.word	0x08011321
 8011290:	08011321 	.word	0x08011321
 8011294:	08011321 	.word	0x08011321
 8011298:	08011321 	.word	0x08011321
 801129c:	08011321 	.word	0x08011321
 80112a0:	08011313 	.word	0x08011313
 80112a4:	2b40      	cmp	r3, #64	@ 0x40
 80112a6:	d037      	beq.n	8011318 <UART_SetConfig+0xc44>
 80112a8:	e03a      	b.n	8011320 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80112aa:	f7fa f98d 	bl	800b5c8 <HAL_RCC_GetPCLK1Freq>
 80112ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80112b0:	e03c      	b.n	801132c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80112b2:	f7fa f99f 	bl	800b5f4 <HAL_RCC_GetPCLK2Freq>
 80112b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80112b8:	e038      	b.n	801132c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80112ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80112be:	4618      	mov	r0, r3
 80112c0:	f7fb fbc4 	bl	800ca4c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80112c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80112c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80112c8:	e030      	b.n	801132c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80112ca:	f107 0318 	add.w	r3, r7, #24
 80112ce:	4618      	mov	r0, r3
 80112d0:	f7fb fd10 	bl	800ccf4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80112d4:	69fb      	ldr	r3, [r7, #28]
 80112d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80112d8:	e028      	b.n	801132c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80112da:	4b09      	ldr	r3, [pc, #36]	@ (8011300 <UART_SetConfig+0xc2c>)
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	f003 0320 	and.w	r3, r3, #32
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d012      	beq.n	801130c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80112e6:	4b06      	ldr	r3, [pc, #24]	@ (8011300 <UART_SetConfig+0xc2c>)
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	08db      	lsrs	r3, r3, #3
 80112ec:	f003 0303 	and.w	r3, r3, #3
 80112f0:	4a04      	ldr	r2, [pc, #16]	@ (8011304 <UART_SetConfig+0xc30>)
 80112f2:	fa22 f303 	lsr.w	r3, r2, r3
 80112f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80112f8:	e018      	b.n	801132c <UART_SetConfig+0xc58>
 80112fa:	bf00      	nop
 80112fc:	08019dec 	.word	0x08019dec
 8011300:	58024400 	.word	0x58024400
 8011304:	03d09000 	.word	0x03d09000
 8011308:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 801130c:	4b24      	ldr	r3, [pc, #144]	@ (80113a0 <UART_SetConfig+0xccc>)
 801130e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011310:	e00c      	b.n	801132c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011312:	4b24      	ldr	r3, [pc, #144]	@ (80113a4 <UART_SetConfig+0xcd0>)
 8011314:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011316:	e009      	b.n	801132c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011318:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801131c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801131e:	e005      	b.n	801132c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8011320:	2300      	movs	r3, #0
 8011322:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8011324:	2301      	movs	r3, #1
 8011326:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801132a:	bf00      	nop
    }

    if (pclk != 0U)
 801132c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801132e:	2b00      	cmp	r3, #0
 8011330:	d021      	beq.n	8011376 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011332:	697b      	ldr	r3, [r7, #20]
 8011334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011336:	4a1c      	ldr	r2, [pc, #112]	@ (80113a8 <UART_SetConfig+0xcd4>)
 8011338:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801133c:	461a      	mov	r2, r3
 801133e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011340:	fbb3 f2f2 	udiv	r2, r3, r2
 8011344:	697b      	ldr	r3, [r7, #20]
 8011346:	685b      	ldr	r3, [r3, #4]
 8011348:	085b      	lsrs	r3, r3, #1
 801134a:	441a      	add	r2, r3
 801134c:	697b      	ldr	r3, [r7, #20]
 801134e:	685b      	ldr	r3, [r3, #4]
 8011350:	fbb2 f3f3 	udiv	r3, r2, r3
 8011354:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011358:	2b0f      	cmp	r3, #15
 801135a:	d909      	bls.n	8011370 <UART_SetConfig+0xc9c>
 801135c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801135e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011362:	d205      	bcs.n	8011370 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011366:	b29a      	uxth	r2, r3
 8011368:	697b      	ldr	r3, [r7, #20]
 801136a:	681b      	ldr	r3, [r3, #0]
 801136c:	60da      	str	r2, [r3, #12]
 801136e:	e002      	b.n	8011376 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8011370:	2301      	movs	r3, #1
 8011372:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8011376:	697b      	ldr	r3, [r7, #20]
 8011378:	2201      	movs	r2, #1
 801137a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 801137e:	697b      	ldr	r3, [r7, #20]
 8011380:	2201      	movs	r2, #1
 8011382:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011386:	697b      	ldr	r3, [r7, #20]
 8011388:	2200      	movs	r2, #0
 801138a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 801138c:	697b      	ldr	r3, [r7, #20]
 801138e:	2200      	movs	r2, #0
 8011390:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8011392:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8011396:	4618      	mov	r0, r3
 8011398:	3748      	adds	r7, #72	@ 0x48
 801139a:	46bd      	mov	sp, r7
 801139c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80113a0:	03d09000 	.word	0x03d09000
 80113a4:	003d0900 	.word	0x003d0900
 80113a8:	08019dec 	.word	0x08019dec

080113ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80113ac:	b480      	push	{r7}
 80113ae:	b083      	sub	sp, #12
 80113b0:	af00      	add	r7, sp, #0
 80113b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80113b8:	f003 0308 	and.w	r3, r3, #8
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d00a      	beq.n	80113d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	685b      	ldr	r3, [r3, #4]
 80113c6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	430a      	orrs	r2, r1
 80113d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80113da:	f003 0301 	and.w	r3, r3, #1
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d00a      	beq.n	80113f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	685b      	ldr	r3, [r3, #4]
 80113e8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	430a      	orrs	r2, r1
 80113f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80113fc:	f003 0302 	and.w	r3, r3, #2
 8011400:	2b00      	cmp	r3, #0
 8011402:	d00a      	beq.n	801141a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	685b      	ldr	r3, [r3, #4]
 801140a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	430a      	orrs	r2, r1
 8011418:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801141e:	f003 0304 	and.w	r3, r3, #4
 8011422:	2b00      	cmp	r3, #0
 8011424:	d00a      	beq.n	801143c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	681b      	ldr	r3, [r3, #0]
 801142a:	685b      	ldr	r3, [r3, #4]
 801142c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	430a      	orrs	r2, r1
 801143a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011440:	f003 0310 	and.w	r3, r3, #16
 8011444:	2b00      	cmp	r3, #0
 8011446:	d00a      	beq.n	801145e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	681b      	ldr	r3, [r3, #0]
 801144c:	689b      	ldr	r3, [r3, #8]
 801144e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	430a      	orrs	r2, r1
 801145c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011462:	f003 0320 	and.w	r3, r3, #32
 8011466:	2b00      	cmp	r3, #0
 8011468:	d00a      	beq.n	8011480 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	689b      	ldr	r3, [r3, #8]
 8011470:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	430a      	orrs	r2, r1
 801147e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011484:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011488:	2b00      	cmp	r3, #0
 801148a:	d01a      	beq.n	80114c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	685b      	ldr	r3, [r3, #4]
 8011492:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	430a      	orrs	r2, r1
 80114a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80114a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80114aa:	d10a      	bne.n	80114c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	685b      	ldr	r3, [r3, #4]
 80114b2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	681b      	ldr	r3, [r3, #0]
 80114be:	430a      	orrs	r2, r1
 80114c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80114c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	d00a      	beq.n	80114e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	681b      	ldr	r3, [r3, #0]
 80114d2:	685b      	ldr	r3, [r3, #4]
 80114d4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	430a      	orrs	r2, r1
 80114e2:	605a      	str	r2, [r3, #4]
  }
}
 80114e4:	bf00      	nop
 80114e6:	370c      	adds	r7, #12
 80114e8:	46bd      	mov	sp, r7
 80114ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ee:	4770      	bx	lr

080114f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80114f0:	b580      	push	{r7, lr}
 80114f2:	b098      	sub	sp, #96	@ 0x60
 80114f4:	af02      	add	r7, sp, #8
 80114f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	2200      	movs	r2, #0
 80114fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011500:	f7f5 f9c2 	bl	8006888 <HAL_GetTick>
 8011504:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	681b      	ldr	r3, [r3, #0]
 801150a:	681b      	ldr	r3, [r3, #0]
 801150c:	f003 0308 	and.w	r3, r3, #8
 8011510:	2b08      	cmp	r3, #8
 8011512:	d12f      	bne.n	8011574 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011514:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8011518:	9300      	str	r3, [sp, #0]
 801151a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801151c:	2200      	movs	r2, #0
 801151e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8011522:	6878      	ldr	r0, [r7, #4]
 8011524:	f000 f88e 	bl	8011644 <UART_WaitOnFlagUntilTimeout>
 8011528:	4603      	mov	r3, r0
 801152a:	2b00      	cmp	r3, #0
 801152c:	d022      	beq.n	8011574 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	681b      	ldr	r3, [r3, #0]
 8011532:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011536:	e853 3f00 	ldrex	r3, [r3]
 801153a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801153c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801153e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011542:	653b      	str	r3, [r7, #80]	@ 0x50
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	461a      	mov	r2, r3
 801154a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801154c:	647b      	str	r3, [r7, #68]	@ 0x44
 801154e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011550:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011552:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011554:	e841 2300 	strex	r3, r2, [r1]
 8011558:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801155a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801155c:	2b00      	cmp	r3, #0
 801155e:	d1e6      	bne.n	801152e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	2220      	movs	r2, #32
 8011564:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	2200      	movs	r2, #0
 801156c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011570:	2303      	movs	r3, #3
 8011572:	e063      	b.n	801163c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	681b      	ldr	r3, [r3, #0]
 801157a:	f003 0304 	and.w	r3, r3, #4
 801157e:	2b04      	cmp	r3, #4
 8011580:	d149      	bne.n	8011616 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011582:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8011586:	9300      	str	r3, [sp, #0]
 8011588:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801158a:	2200      	movs	r2, #0
 801158c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8011590:	6878      	ldr	r0, [r7, #4]
 8011592:	f000 f857 	bl	8011644 <UART_WaitOnFlagUntilTimeout>
 8011596:	4603      	mov	r3, r0
 8011598:	2b00      	cmp	r3, #0
 801159a:	d03c      	beq.n	8011616 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80115a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115a4:	e853 3f00 	ldrex	r3, [r3]
 80115a8:	623b      	str	r3, [r7, #32]
   return(result);
 80115aa:	6a3b      	ldr	r3, [r7, #32]
 80115ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80115b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	681b      	ldr	r3, [r3, #0]
 80115b6:	461a      	mov	r2, r3
 80115b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80115ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80115bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80115c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80115c2:	e841 2300 	strex	r3, r2, [r1]
 80115c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80115c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d1e6      	bne.n	801159c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	681b      	ldr	r3, [r3, #0]
 80115d2:	3308      	adds	r3, #8
 80115d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80115d6:	693b      	ldr	r3, [r7, #16]
 80115d8:	e853 3f00 	ldrex	r3, [r3]
 80115dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	f023 0301 	bic.w	r3, r3, #1
 80115e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	3308      	adds	r3, #8
 80115ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80115ee:	61fa      	str	r2, [r7, #28]
 80115f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115f2:	69b9      	ldr	r1, [r7, #24]
 80115f4:	69fa      	ldr	r2, [r7, #28]
 80115f6:	e841 2300 	strex	r3, r2, [r1]
 80115fa:	617b      	str	r3, [r7, #20]
   return(result);
 80115fc:	697b      	ldr	r3, [r7, #20]
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d1e5      	bne.n	80115ce <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	2220      	movs	r2, #32
 8011606:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	2200      	movs	r2, #0
 801160e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011612:	2303      	movs	r3, #3
 8011614:	e012      	b.n	801163c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	2220      	movs	r2, #32
 801161a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	2220      	movs	r2, #32
 8011622:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	2200      	movs	r2, #0
 801162a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	2200      	movs	r2, #0
 8011630:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	2200      	movs	r2, #0
 8011636:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801163a:	2300      	movs	r3, #0
}
 801163c:	4618      	mov	r0, r3
 801163e:	3758      	adds	r7, #88	@ 0x58
 8011640:	46bd      	mov	sp, r7
 8011642:	bd80      	pop	{r7, pc}

08011644 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011644:	b580      	push	{r7, lr}
 8011646:	b084      	sub	sp, #16
 8011648:	af00      	add	r7, sp, #0
 801164a:	60f8      	str	r0, [r7, #12]
 801164c:	60b9      	str	r1, [r7, #8]
 801164e:	603b      	str	r3, [r7, #0]
 8011650:	4613      	mov	r3, r2
 8011652:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011654:	e04f      	b.n	80116f6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011656:	69bb      	ldr	r3, [r7, #24]
 8011658:	f1b3 3fff 	cmp.w	r3, #4294967295
 801165c:	d04b      	beq.n	80116f6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801165e:	f7f5 f913 	bl	8006888 <HAL_GetTick>
 8011662:	4602      	mov	r2, r0
 8011664:	683b      	ldr	r3, [r7, #0]
 8011666:	1ad3      	subs	r3, r2, r3
 8011668:	69ba      	ldr	r2, [r7, #24]
 801166a:	429a      	cmp	r2, r3
 801166c:	d302      	bcc.n	8011674 <UART_WaitOnFlagUntilTimeout+0x30>
 801166e:	69bb      	ldr	r3, [r7, #24]
 8011670:	2b00      	cmp	r3, #0
 8011672:	d101      	bne.n	8011678 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011674:	2303      	movs	r3, #3
 8011676:	e04e      	b.n	8011716 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8011678:	68fb      	ldr	r3, [r7, #12]
 801167a:	681b      	ldr	r3, [r3, #0]
 801167c:	681b      	ldr	r3, [r3, #0]
 801167e:	f003 0304 	and.w	r3, r3, #4
 8011682:	2b00      	cmp	r3, #0
 8011684:	d037      	beq.n	80116f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8011686:	68bb      	ldr	r3, [r7, #8]
 8011688:	2b80      	cmp	r3, #128	@ 0x80
 801168a:	d034      	beq.n	80116f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 801168c:	68bb      	ldr	r3, [r7, #8]
 801168e:	2b40      	cmp	r3, #64	@ 0x40
 8011690:	d031      	beq.n	80116f6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	69db      	ldr	r3, [r3, #28]
 8011698:	f003 0308 	and.w	r3, r3, #8
 801169c:	2b08      	cmp	r3, #8
 801169e:	d110      	bne.n	80116c2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80116a0:	68fb      	ldr	r3, [r7, #12]
 80116a2:	681b      	ldr	r3, [r3, #0]
 80116a4:	2208      	movs	r2, #8
 80116a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80116a8:	68f8      	ldr	r0, [r7, #12]
 80116aa:	f000 fa43 	bl	8011b34 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80116ae:	68fb      	ldr	r3, [r7, #12]
 80116b0:	2208      	movs	r2, #8
 80116b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	2200      	movs	r2, #0
 80116ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80116be:	2301      	movs	r3, #1
 80116c0:	e029      	b.n	8011716 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	681b      	ldr	r3, [r3, #0]
 80116c6:	69db      	ldr	r3, [r3, #28]
 80116c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80116cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80116d0:	d111      	bne.n	80116f6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80116d2:	68fb      	ldr	r3, [r7, #12]
 80116d4:	681b      	ldr	r3, [r3, #0]
 80116d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80116da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80116dc:	68f8      	ldr	r0, [r7, #12]
 80116de:	f000 fa29 	bl	8011b34 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	2220      	movs	r2, #32
 80116e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	2200      	movs	r2, #0
 80116ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80116f2:	2303      	movs	r3, #3
 80116f4:	e00f      	b.n	8011716 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80116f6:	68fb      	ldr	r3, [r7, #12]
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	69da      	ldr	r2, [r3, #28]
 80116fc:	68bb      	ldr	r3, [r7, #8]
 80116fe:	4013      	ands	r3, r2
 8011700:	68ba      	ldr	r2, [r7, #8]
 8011702:	429a      	cmp	r2, r3
 8011704:	bf0c      	ite	eq
 8011706:	2301      	moveq	r3, #1
 8011708:	2300      	movne	r3, #0
 801170a:	b2db      	uxtb	r3, r3
 801170c:	461a      	mov	r2, r3
 801170e:	79fb      	ldrb	r3, [r7, #7]
 8011710:	429a      	cmp	r2, r3
 8011712:	d0a0      	beq.n	8011656 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011714:	2300      	movs	r3, #0
}
 8011716:	4618      	mov	r0, r3
 8011718:	3710      	adds	r7, #16
 801171a:	46bd      	mov	sp, r7
 801171c:	bd80      	pop	{r7, pc}
	...

08011720 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011720:	b480      	push	{r7}
 8011722:	b0a3      	sub	sp, #140	@ 0x8c
 8011724:	af00      	add	r7, sp, #0
 8011726:	60f8      	str	r0, [r7, #12]
 8011728:	60b9      	str	r1, [r7, #8]
 801172a:	4613      	mov	r3, r2
 801172c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	68ba      	ldr	r2, [r7, #8]
 8011732:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8011734:	68fb      	ldr	r3, [r7, #12]
 8011736:	88fa      	ldrh	r2, [r7, #6]
 8011738:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 801173c:	68fb      	ldr	r3, [r7, #12]
 801173e:	88fa      	ldrh	r2, [r7, #6]
 8011740:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8011744:	68fb      	ldr	r3, [r7, #12]
 8011746:	2200      	movs	r2, #0
 8011748:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801174a:	68fb      	ldr	r3, [r7, #12]
 801174c:	689b      	ldr	r3, [r3, #8]
 801174e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011752:	d10e      	bne.n	8011772 <UART_Start_Receive_IT+0x52>
 8011754:	68fb      	ldr	r3, [r7, #12]
 8011756:	691b      	ldr	r3, [r3, #16]
 8011758:	2b00      	cmp	r3, #0
 801175a:	d105      	bne.n	8011768 <UART_Start_Receive_IT+0x48>
 801175c:	68fb      	ldr	r3, [r7, #12]
 801175e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8011762:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8011766:	e02d      	b.n	80117c4 <UART_Start_Receive_IT+0xa4>
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	22ff      	movs	r2, #255	@ 0xff
 801176c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8011770:	e028      	b.n	80117c4 <UART_Start_Receive_IT+0xa4>
 8011772:	68fb      	ldr	r3, [r7, #12]
 8011774:	689b      	ldr	r3, [r3, #8]
 8011776:	2b00      	cmp	r3, #0
 8011778:	d10d      	bne.n	8011796 <UART_Start_Receive_IT+0x76>
 801177a:	68fb      	ldr	r3, [r7, #12]
 801177c:	691b      	ldr	r3, [r3, #16]
 801177e:	2b00      	cmp	r3, #0
 8011780:	d104      	bne.n	801178c <UART_Start_Receive_IT+0x6c>
 8011782:	68fb      	ldr	r3, [r7, #12]
 8011784:	22ff      	movs	r2, #255	@ 0xff
 8011786:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801178a:	e01b      	b.n	80117c4 <UART_Start_Receive_IT+0xa4>
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	227f      	movs	r2, #127	@ 0x7f
 8011790:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8011794:	e016      	b.n	80117c4 <UART_Start_Receive_IT+0xa4>
 8011796:	68fb      	ldr	r3, [r7, #12]
 8011798:	689b      	ldr	r3, [r3, #8]
 801179a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801179e:	d10d      	bne.n	80117bc <UART_Start_Receive_IT+0x9c>
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	691b      	ldr	r3, [r3, #16]
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d104      	bne.n	80117b2 <UART_Start_Receive_IT+0x92>
 80117a8:	68fb      	ldr	r3, [r7, #12]
 80117aa:	227f      	movs	r2, #127	@ 0x7f
 80117ac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80117b0:	e008      	b.n	80117c4 <UART_Start_Receive_IT+0xa4>
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	223f      	movs	r2, #63	@ 0x3f
 80117b6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80117ba:	e003      	b.n	80117c4 <UART_Start_Receive_IT+0xa4>
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	2200      	movs	r2, #0
 80117c0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80117c4:	68fb      	ldr	r3, [r7, #12]
 80117c6:	2200      	movs	r2, #0
 80117c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80117cc:	68fb      	ldr	r3, [r7, #12]
 80117ce:	2222      	movs	r2, #34	@ 0x22
 80117d0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80117d4:	68fb      	ldr	r3, [r7, #12]
 80117d6:	681b      	ldr	r3, [r3, #0]
 80117d8:	3308      	adds	r3, #8
 80117da:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80117dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80117de:	e853 3f00 	ldrex	r3, [r3]
 80117e2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80117e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80117e6:	f043 0301 	orr.w	r3, r3, #1
 80117ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80117ee:	68fb      	ldr	r3, [r7, #12]
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	3308      	adds	r3, #8
 80117f4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80117f8:	673a      	str	r2, [r7, #112]	@ 0x70
 80117fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117fc:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80117fe:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8011800:	e841 2300 	strex	r3, r2, [r1]
 8011804:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8011806:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011808:	2b00      	cmp	r3, #0
 801180a:	d1e3      	bne.n	80117d4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 801180c:	68fb      	ldr	r3, [r7, #12]
 801180e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011810:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011814:	d14f      	bne.n	80118b6 <UART_Start_Receive_IT+0x196>
 8011816:	68fb      	ldr	r3, [r7, #12]
 8011818:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801181c:	88fa      	ldrh	r2, [r7, #6]
 801181e:	429a      	cmp	r2, r3
 8011820:	d349      	bcc.n	80118b6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011822:	68fb      	ldr	r3, [r7, #12]
 8011824:	689b      	ldr	r3, [r3, #8]
 8011826:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801182a:	d107      	bne.n	801183c <UART_Start_Receive_IT+0x11c>
 801182c:	68fb      	ldr	r3, [r7, #12]
 801182e:	691b      	ldr	r3, [r3, #16]
 8011830:	2b00      	cmp	r3, #0
 8011832:	d103      	bne.n	801183c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8011834:	68fb      	ldr	r3, [r7, #12]
 8011836:	4a47      	ldr	r2, [pc, #284]	@ (8011954 <UART_Start_Receive_IT+0x234>)
 8011838:	675a      	str	r2, [r3, #116]	@ 0x74
 801183a:	e002      	b.n	8011842 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 801183c:	68fb      	ldr	r3, [r7, #12]
 801183e:	4a46      	ldr	r2, [pc, #280]	@ (8011958 <UART_Start_Receive_IT+0x238>)
 8011840:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8011842:	68fb      	ldr	r3, [r7, #12]
 8011844:	691b      	ldr	r3, [r3, #16]
 8011846:	2b00      	cmp	r3, #0
 8011848:	d01a      	beq.n	8011880 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801184a:	68fb      	ldr	r3, [r7, #12]
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011850:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011852:	e853 3f00 	ldrex	r3, [r3]
 8011856:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8011858:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801185a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801185e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	681b      	ldr	r3, [r3, #0]
 8011866:	461a      	mov	r2, r3
 8011868:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801186c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801186e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011870:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8011872:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8011874:	e841 2300 	strex	r3, r2, [r1]
 8011878:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 801187a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801187c:	2b00      	cmp	r3, #0
 801187e:	d1e4      	bne.n	801184a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011880:	68fb      	ldr	r3, [r7, #12]
 8011882:	681b      	ldr	r3, [r3, #0]
 8011884:	3308      	adds	r3, #8
 8011886:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011888:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801188a:	e853 3f00 	ldrex	r3, [r3]
 801188e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011892:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8011896:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8011898:	68fb      	ldr	r3, [r7, #12]
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	3308      	adds	r3, #8
 801189e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80118a0:	64ba      	str	r2, [r7, #72]	@ 0x48
 80118a2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118a4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80118a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80118a8:	e841 2300 	strex	r3, r2, [r1]
 80118ac:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80118ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d1e5      	bne.n	8011880 <UART_Start_Receive_IT+0x160>
 80118b4:	e046      	b.n	8011944 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80118b6:	68fb      	ldr	r3, [r7, #12]
 80118b8:	689b      	ldr	r3, [r3, #8]
 80118ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80118be:	d107      	bne.n	80118d0 <UART_Start_Receive_IT+0x1b0>
 80118c0:	68fb      	ldr	r3, [r7, #12]
 80118c2:	691b      	ldr	r3, [r3, #16]
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d103      	bne.n	80118d0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	4a24      	ldr	r2, [pc, #144]	@ (801195c <UART_Start_Receive_IT+0x23c>)
 80118cc:	675a      	str	r2, [r3, #116]	@ 0x74
 80118ce:	e002      	b.n	80118d6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80118d0:	68fb      	ldr	r3, [r7, #12]
 80118d2:	4a23      	ldr	r2, [pc, #140]	@ (8011960 <UART_Start_Receive_IT+0x240>)
 80118d4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80118d6:	68fb      	ldr	r3, [r7, #12]
 80118d8:	691b      	ldr	r3, [r3, #16]
 80118da:	2b00      	cmp	r3, #0
 80118dc:	d019      	beq.n	8011912 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80118de:	68fb      	ldr	r3, [r7, #12]
 80118e0:	681b      	ldr	r3, [r3, #0]
 80118e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80118e6:	e853 3f00 	ldrex	r3, [r3]
 80118ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80118ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118ee:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80118f2:	677b      	str	r3, [r7, #116]	@ 0x74
 80118f4:	68fb      	ldr	r3, [r7, #12]
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	461a      	mov	r2, r3
 80118fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80118fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80118fe:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011900:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011902:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011904:	e841 2300 	strex	r3, r2, [r1]
 8011908:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 801190a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801190c:	2b00      	cmp	r3, #0
 801190e:	d1e6      	bne.n	80118de <UART_Start_Receive_IT+0x1be>
 8011910:	e018      	b.n	8011944 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011912:	68fb      	ldr	r3, [r7, #12]
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011918:	697b      	ldr	r3, [r7, #20]
 801191a:	e853 3f00 	ldrex	r3, [r3]
 801191e:	613b      	str	r3, [r7, #16]
   return(result);
 8011920:	693b      	ldr	r3, [r7, #16]
 8011922:	f043 0320 	orr.w	r3, r3, #32
 8011926:	67bb      	str	r3, [r7, #120]	@ 0x78
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	681b      	ldr	r3, [r3, #0]
 801192c:	461a      	mov	r2, r3
 801192e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011930:	623b      	str	r3, [r7, #32]
 8011932:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011934:	69f9      	ldr	r1, [r7, #28]
 8011936:	6a3a      	ldr	r2, [r7, #32]
 8011938:	e841 2300 	strex	r3, r2, [r1]
 801193c:	61bb      	str	r3, [r7, #24]
   return(result);
 801193e:	69bb      	ldr	r3, [r7, #24]
 8011940:	2b00      	cmp	r3, #0
 8011942:	d1e6      	bne.n	8011912 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8011944:	2300      	movs	r3, #0
}
 8011946:	4618      	mov	r0, r3
 8011948:	378c      	adds	r7, #140	@ 0x8c
 801194a:	46bd      	mov	sp, r7
 801194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011950:	4770      	bx	lr
 8011952:	bf00      	nop
 8011954:	08012989 	.word	0x08012989
 8011958:	08012629 	.word	0x08012629
 801195c:	08012471 	.word	0x08012471
 8011960:	080122b9 	.word	0x080122b9

08011964 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011964:	b580      	push	{r7, lr}
 8011966:	b096      	sub	sp, #88	@ 0x58
 8011968:	af00      	add	r7, sp, #0
 801196a:	60f8      	str	r0, [r7, #12]
 801196c:	60b9      	str	r1, [r7, #8]
 801196e:	4613      	mov	r3, r2
 8011970:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8011972:	68fb      	ldr	r3, [r7, #12]
 8011974:	68ba      	ldr	r2, [r7, #8]
 8011976:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8011978:	68fb      	ldr	r3, [r7, #12]
 801197a:	88fa      	ldrh	r2, [r7, #6]
 801197c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011980:	68fb      	ldr	r3, [r7, #12]
 8011982:	2200      	movs	r2, #0
 8011984:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011988:	68fb      	ldr	r3, [r7, #12]
 801198a:	2222      	movs	r2, #34	@ 0x22
 801198c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8011990:	68fb      	ldr	r3, [r7, #12]
 8011992:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011996:	2b00      	cmp	r3, #0
 8011998:	d02d      	beq.n	80119f6 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801199a:	68fb      	ldr	r3, [r7, #12]
 801199c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80119a0:	4a40      	ldr	r2, [pc, #256]	@ (8011aa4 <UART_Start_Receive_DMA+0x140>)
 80119a2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80119a4:	68fb      	ldr	r3, [r7, #12]
 80119a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80119aa:	4a3f      	ldr	r2, [pc, #252]	@ (8011aa8 <UART_Start_Receive_DMA+0x144>)
 80119ac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80119ae:	68fb      	ldr	r3, [r7, #12]
 80119b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80119b4:	4a3d      	ldr	r2, [pc, #244]	@ (8011aac <UART_Start_Receive_DMA+0x148>)
 80119b6:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80119b8:	68fb      	ldr	r3, [r7, #12]
 80119ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80119be:	2200      	movs	r2, #0
 80119c0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80119c2:	68fb      	ldr	r3, [r7, #12]
 80119c4:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80119c8:	68fb      	ldr	r3, [r7, #12]
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	3324      	adds	r3, #36	@ 0x24
 80119ce:	4619      	mov	r1, r3
 80119d0:	68fb      	ldr	r3, [r7, #12]
 80119d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80119d4:	461a      	mov	r2, r3
 80119d6:	88fb      	ldrh	r3, [r7, #6]
 80119d8:	f7f5 fc6c 	bl	80072b4 <HAL_DMA_Start_IT>
 80119dc:	4603      	mov	r3, r0
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d009      	beq.n	80119f6 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80119e2:	68fb      	ldr	r3, [r7, #12]
 80119e4:	2210      	movs	r2, #16
 80119e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80119ea:	68fb      	ldr	r3, [r7, #12]
 80119ec:	2220      	movs	r2, #32
 80119ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 80119f2:	2301      	movs	r3, #1
 80119f4:	e051      	b.n	8011a9a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80119f6:	68fb      	ldr	r3, [r7, #12]
 80119f8:	691b      	ldr	r3, [r3, #16]
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d018      	beq.n	8011a30 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80119fe:	68fb      	ldr	r3, [r7, #12]
 8011a00:	681b      	ldr	r3, [r3, #0]
 8011a02:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011a06:	e853 3f00 	ldrex	r3, [r3]
 8011a0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011a0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8011a12:	657b      	str	r3, [r7, #84]	@ 0x54
 8011a14:	68fb      	ldr	r3, [r7, #12]
 8011a16:	681b      	ldr	r3, [r3, #0]
 8011a18:	461a      	mov	r2, r3
 8011a1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011a1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011a1e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a20:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8011a22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011a24:	e841 2300 	strex	r3, r2, [r1]
 8011a28:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8011a2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d1e6      	bne.n	80119fe <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011a30:	68fb      	ldr	r3, [r7, #12]
 8011a32:	681b      	ldr	r3, [r3, #0]
 8011a34:	3308      	adds	r3, #8
 8011a36:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a3a:	e853 3f00 	ldrex	r3, [r3]
 8011a3e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a42:	f043 0301 	orr.w	r3, r3, #1
 8011a46:	653b      	str	r3, [r7, #80]	@ 0x50
 8011a48:	68fb      	ldr	r3, [r7, #12]
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	3308      	adds	r3, #8
 8011a4e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011a50:	637a      	str	r2, [r7, #52]	@ 0x34
 8011a52:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a54:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011a56:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011a58:	e841 2300 	strex	r3, r2, [r1]
 8011a5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8011a5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d1e5      	bne.n	8011a30 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011a64:	68fb      	ldr	r3, [r7, #12]
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	3308      	adds	r3, #8
 8011a6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a6c:	697b      	ldr	r3, [r7, #20]
 8011a6e:	e853 3f00 	ldrex	r3, [r3]
 8011a72:	613b      	str	r3, [r7, #16]
   return(result);
 8011a74:	693b      	ldr	r3, [r7, #16]
 8011a76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011a7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011a7c:	68fb      	ldr	r3, [r7, #12]
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	3308      	adds	r3, #8
 8011a82:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011a84:	623a      	str	r2, [r7, #32]
 8011a86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a88:	69f9      	ldr	r1, [r7, #28]
 8011a8a:	6a3a      	ldr	r2, [r7, #32]
 8011a8c:	e841 2300 	strex	r3, r2, [r1]
 8011a90:	61bb      	str	r3, [r7, #24]
   return(result);
 8011a92:	69bb      	ldr	r3, [r7, #24]
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d1e5      	bne.n	8011a64 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8011a98:	2300      	movs	r3, #0
}
 8011a9a:	4618      	mov	r0, r3
 8011a9c:	3758      	adds	r7, #88	@ 0x58
 8011a9e:	46bd      	mov	sp, r7
 8011aa0:	bd80      	pop	{r7, pc}
 8011aa2:	bf00      	nop
 8011aa4:	08011c01 	.word	0x08011c01
 8011aa8:	08011d29 	.word	0x08011d29
 8011aac:	08011d67 	.word	0x08011d67

08011ab0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8011ab0:	b480      	push	{r7}
 8011ab2:	b08f      	sub	sp, #60	@ 0x3c
 8011ab4:	af00      	add	r7, sp, #0
 8011ab6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	681b      	ldr	r3, [r3, #0]
 8011abc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011abe:	6a3b      	ldr	r3, [r7, #32]
 8011ac0:	e853 3f00 	ldrex	r3, [r3]
 8011ac4:	61fb      	str	r3, [r7, #28]
   return(result);
 8011ac6:	69fb      	ldr	r3, [r7, #28]
 8011ac8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8011acc:	637b      	str	r3, [r7, #52]	@ 0x34
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	461a      	mov	r2, r3
 8011ad4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011ad8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ada:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011adc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011ade:	e841 2300 	strex	r3, r2, [r1]
 8011ae2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d1e6      	bne.n	8011ab8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	681b      	ldr	r3, [r3, #0]
 8011aee:	3308      	adds	r3, #8
 8011af0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011af2:	68fb      	ldr	r3, [r7, #12]
 8011af4:	e853 3f00 	ldrex	r3, [r3]
 8011af8:	60bb      	str	r3, [r7, #8]
   return(result);
 8011afa:	68bb      	ldr	r3, [r7, #8]
 8011afc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8011b00:	633b      	str	r3, [r7, #48]	@ 0x30
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	681b      	ldr	r3, [r3, #0]
 8011b06:	3308      	adds	r3, #8
 8011b08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011b0a:	61ba      	str	r2, [r7, #24]
 8011b0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b0e:	6979      	ldr	r1, [r7, #20]
 8011b10:	69ba      	ldr	r2, [r7, #24]
 8011b12:	e841 2300 	strex	r3, r2, [r1]
 8011b16:	613b      	str	r3, [r7, #16]
   return(result);
 8011b18:	693b      	ldr	r3, [r7, #16]
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d1e5      	bne.n	8011aea <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	2220      	movs	r2, #32
 8011b22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8011b26:	bf00      	nop
 8011b28:	373c      	adds	r7, #60	@ 0x3c
 8011b2a:	46bd      	mov	sp, r7
 8011b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b30:	4770      	bx	lr
	...

08011b34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011b34:	b480      	push	{r7}
 8011b36:	b095      	sub	sp, #84	@ 0x54
 8011b38:	af00      	add	r7, sp, #0
 8011b3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	681b      	ldr	r3, [r3, #0]
 8011b40:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011b44:	e853 3f00 	ldrex	r3, [r3]
 8011b48:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8011b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011b50:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	681b      	ldr	r3, [r3, #0]
 8011b56:	461a      	mov	r2, r3
 8011b58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011b5a:	643b      	str	r3, [r7, #64]	@ 0x40
 8011b5c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b5e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011b60:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011b62:	e841 2300 	strex	r3, r2, [r1]
 8011b66:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d1e6      	bne.n	8011b3c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	681b      	ldr	r3, [r3, #0]
 8011b72:	3308      	adds	r3, #8
 8011b74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b76:	6a3b      	ldr	r3, [r7, #32]
 8011b78:	e853 3f00 	ldrex	r3, [r3]
 8011b7c:	61fb      	str	r3, [r7, #28]
   return(result);
 8011b7e:	69fa      	ldr	r2, [r7, #28]
 8011b80:	4b1e      	ldr	r3, [pc, #120]	@ (8011bfc <UART_EndRxTransfer+0xc8>)
 8011b82:	4013      	ands	r3, r2
 8011b84:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	681b      	ldr	r3, [r3, #0]
 8011b8a:	3308      	adds	r3, #8
 8011b8c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011b8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011b90:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b92:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011b94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011b96:	e841 2300 	strex	r3, r2, [r1]
 8011b9a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d1e5      	bne.n	8011b6e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011ba6:	2b01      	cmp	r3, #1
 8011ba8:	d118      	bne.n	8011bdc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	681b      	ldr	r3, [r3, #0]
 8011bae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011bb0:	68fb      	ldr	r3, [r7, #12]
 8011bb2:	e853 3f00 	ldrex	r3, [r3]
 8011bb6:	60bb      	str	r3, [r7, #8]
   return(result);
 8011bb8:	68bb      	ldr	r3, [r7, #8]
 8011bba:	f023 0310 	bic.w	r3, r3, #16
 8011bbe:	647b      	str	r3, [r7, #68]	@ 0x44
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	681b      	ldr	r3, [r3, #0]
 8011bc4:	461a      	mov	r2, r3
 8011bc6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011bc8:	61bb      	str	r3, [r7, #24]
 8011bca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011bcc:	6979      	ldr	r1, [r7, #20]
 8011bce:	69ba      	ldr	r2, [r7, #24]
 8011bd0:	e841 2300 	strex	r3, r2, [r1]
 8011bd4:	613b      	str	r3, [r7, #16]
   return(result);
 8011bd6:	693b      	ldr	r3, [r7, #16]
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d1e6      	bne.n	8011baa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	2220      	movs	r2, #32
 8011be0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	2200      	movs	r2, #0
 8011be8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	2200      	movs	r2, #0
 8011bee:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8011bf0:	bf00      	nop
 8011bf2:	3754      	adds	r7, #84	@ 0x54
 8011bf4:	46bd      	mov	sp, r7
 8011bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bfa:	4770      	bx	lr
 8011bfc:	effffffe 	.word	0xeffffffe

08011c00 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8011c00:	b580      	push	{r7, lr}
 8011c02:	b09c      	sub	sp, #112	@ 0x70
 8011c04:	af00      	add	r7, sp, #0
 8011c06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011c0c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	69db      	ldr	r3, [r3, #28]
 8011c12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011c16:	d071      	beq.n	8011cfc <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8011c18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011c1a:	2200      	movs	r2, #0
 8011c1c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011c20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011c22:	681b      	ldr	r3, [r3, #0]
 8011c24:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011c28:	e853 3f00 	ldrex	r3, [r3]
 8011c2c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8011c2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011c30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011c34:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011c36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	461a      	mov	r2, r3
 8011c3c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011c3e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011c40:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c42:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8011c44:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011c46:	e841 2300 	strex	r3, r2, [r1]
 8011c4a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8011c4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	d1e6      	bne.n	8011c20 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011c52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011c54:	681b      	ldr	r3, [r3, #0]
 8011c56:	3308      	adds	r3, #8
 8011c58:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c5c:	e853 3f00 	ldrex	r3, [r3]
 8011c60:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011c62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011c64:	f023 0301 	bic.w	r3, r3, #1
 8011c68:	667b      	str	r3, [r7, #100]	@ 0x64
 8011c6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	3308      	adds	r3, #8
 8011c70:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8011c72:	647a      	str	r2, [r7, #68]	@ 0x44
 8011c74:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c76:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011c78:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011c7a:	e841 2300 	strex	r3, r2, [r1]
 8011c7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011c80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	d1e5      	bne.n	8011c52 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011c86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	3308      	adds	r3, #8
 8011c8c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c90:	e853 3f00 	ldrex	r3, [r3]
 8011c94:	623b      	str	r3, [r7, #32]
   return(result);
 8011c96:	6a3b      	ldr	r3, [r7, #32]
 8011c98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011c9c:	663b      	str	r3, [r7, #96]	@ 0x60
 8011c9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011ca0:	681b      	ldr	r3, [r3, #0]
 8011ca2:	3308      	adds	r3, #8
 8011ca4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8011ca6:	633a      	str	r2, [r7, #48]	@ 0x30
 8011ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011caa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011cac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011cae:	e841 2300 	strex	r3, r2, [r1]
 8011cb2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d1e5      	bne.n	8011c86 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8011cba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011cbc:	2220      	movs	r2, #32
 8011cbe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011cc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011cc4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011cc6:	2b01      	cmp	r3, #1
 8011cc8:	d118      	bne.n	8011cfc <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011cca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011cd0:	693b      	ldr	r3, [r7, #16]
 8011cd2:	e853 3f00 	ldrex	r3, [r3]
 8011cd6:	60fb      	str	r3, [r7, #12]
   return(result);
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	f023 0310 	bic.w	r3, r3, #16
 8011cde:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011ce0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011ce2:	681b      	ldr	r3, [r3, #0]
 8011ce4:	461a      	mov	r2, r3
 8011ce6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011ce8:	61fb      	str	r3, [r7, #28]
 8011cea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011cec:	69b9      	ldr	r1, [r7, #24]
 8011cee:	69fa      	ldr	r2, [r7, #28]
 8011cf0:	e841 2300 	strex	r3, r2, [r1]
 8011cf4:	617b      	str	r3, [r7, #20]
   return(result);
 8011cf6:	697b      	ldr	r3, [r7, #20]
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d1e6      	bne.n	8011cca <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011cfc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011cfe:	2200      	movs	r2, #0
 8011d00:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011d02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011d04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011d06:	2b01      	cmp	r3, #1
 8011d08:	d107      	bne.n	8011d1a <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011d0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011d0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8011d10:	4619      	mov	r1, r3
 8011d12:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8011d14:	f7fe fcd2 	bl	80106bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011d18:	e002      	b.n	8011d20 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8011d1a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8011d1c:	f7f1 f9be 	bl	800309c <HAL_UART_RxCpltCallback>
}
 8011d20:	bf00      	nop
 8011d22:	3770      	adds	r7, #112	@ 0x70
 8011d24:	46bd      	mov	sp, r7
 8011d26:	bd80      	pop	{r7, pc}

08011d28 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011d28:	b580      	push	{r7, lr}
 8011d2a:	b084      	sub	sp, #16
 8011d2c:	af00      	add	r7, sp, #0
 8011d2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011d34:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8011d36:	68fb      	ldr	r3, [r7, #12]
 8011d38:	2201      	movs	r2, #1
 8011d3a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011d3c:	68fb      	ldr	r3, [r7, #12]
 8011d3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011d40:	2b01      	cmp	r3, #1
 8011d42:	d109      	bne.n	8011d58 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8011d44:	68fb      	ldr	r3, [r7, #12]
 8011d46:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8011d4a:	085b      	lsrs	r3, r3, #1
 8011d4c:	b29b      	uxth	r3, r3
 8011d4e:	4619      	mov	r1, r3
 8011d50:	68f8      	ldr	r0, [r7, #12]
 8011d52:	f7fe fcb3 	bl	80106bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011d56:	e002      	b.n	8011d5e <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8011d58:	68f8      	ldr	r0, [r7, #12]
 8011d5a:	f7fe fc91 	bl	8010680 <HAL_UART_RxHalfCpltCallback>
}
 8011d5e:	bf00      	nop
 8011d60:	3710      	adds	r7, #16
 8011d62:	46bd      	mov	sp, r7
 8011d64:	bd80      	pop	{r7, pc}

08011d66 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8011d66:	b580      	push	{r7, lr}
 8011d68:	b086      	sub	sp, #24
 8011d6a:	af00      	add	r7, sp, #0
 8011d6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011d72:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8011d74:	697b      	ldr	r3, [r7, #20]
 8011d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011d7a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8011d7c:	697b      	ldr	r3, [r7, #20]
 8011d7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011d82:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8011d84:	697b      	ldr	r3, [r7, #20]
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	689b      	ldr	r3, [r3, #8]
 8011d8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011d8e:	2b80      	cmp	r3, #128	@ 0x80
 8011d90:	d109      	bne.n	8011da6 <UART_DMAError+0x40>
 8011d92:	693b      	ldr	r3, [r7, #16]
 8011d94:	2b21      	cmp	r3, #33	@ 0x21
 8011d96:	d106      	bne.n	8011da6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8011d98:	697b      	ldr	r3, [r7, #20]
 8011d9a:	2200      	movs	r2, #0
 8011d9c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8011da0:	6978      	ldr	r0, [r7, #20]
 8011da2:	f7ff fe85 	bl	8011ab0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8011da6:	697b      	ldr	r3, [r7, #20]
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	689b      	ldr	r3, [r3, #8]
 8011dac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011db0:	2b40      	cmp	r3, #64	@ 0x40
 8011db2:	d109      	bne.n	8011dc8 <UART_DMAError+0x62>
 8011db4:	68fb      	ldr	r3, [r7, #12]
 8011db6:	2b22      	cmp	r3, #34	@ 0x22
 8011db8:	d106      	bne.n	8011dc8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8011dba:	697b      	ldr	r3, [r7, #20]
 8011dbc:	2200      	movs	r2, #0
 8011dbe:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8011dc2:	6978      	ldr	r0, [r7, #20]
 8011dc4:	f7ff feb6 	bl	8011b34 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8011dc8:	697b      	ldr	r3, [r7, #20]
 8011dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011dce:	f043 0210 	orr.w	r2, r3, #16
 8011dd2:	697b      	ldr	r3, [r7, #20]
 8011dd4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011dd8:	6978      	ldr	r0, [r7, #20]
 8011dda:	f7fe fc5b 	bl	8010694 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011dde:	bf00      	nop
 8011de0:	3718      	adds	r7, #24
 8011de2:	46bd      	mov	sp, r7
 8011de4:	bd80      	pop	{r7, pc}

08011de6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011de6:	b580      	push	{r7, lr}
 8011de8:	b084      	sub	sp, #16
 8011dea:	af00      	add	r7, sp, #0
 8011dec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011df2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8011df4:	68fb      	ldr	r3, [r7, #12]
 8011df6:	2200      	movs	r2, #0
 8011df8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8011dfc:	68fb      	ldr	r3, [r7, #12]
 8011dfe:	2200      	movs	r2, #0
 8011e00:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011e04:	68f8      	ldr	r0, [r7, #12]
 8011e06:	f7fe fc45 	bl	8010694 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011e0a:	bf00      	nop
 8011e0c:	3710      	adds	r7, #16
 8011e0e:	46bd      	mov	sp, r7
 8011e10:	bd80      	pop	{r7, pc}

08011e12 <UART_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8011e12:	b580      	push	{r7, lr}
 8011e14:	b084      	sub	sp, #16
 8011e16:	af00      	add	r7, sp, #0
 8011e18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011e1e:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8011e20:	68fb      	ldr	r3, [r7, #12]
 8011e22:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011e24:	2200      	movs	r2, #0
 8011e26:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 8011e28:	68fb      	ldr	r3, [r7, #12]
 8011e2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d005      	beq.n	8011e3e <UART_DMATxAbortCallback+0x2c>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011e38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d12b      	bne.n	8011e96 <UART_DMATxAbortCallback+0x84>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 8011e3e:	68fb      	ldr	r3, [r7, #12]
 8011e40:	2200      	movs	r2, #0
 8011e42:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 8011e46:	68fb      	ldr	r3, [r7, #12]
 8011e48:	2200      	movs	r2, #0
 8011e4a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	2200      	movs	r2, #0
 8011e52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8011e56:	68fb      	ldr	r3, [r7, #12]
 8011e58:	681b      	ldr	r3, [r3, #0]
 8011e5a:	220f      	movs	r2, #15
 8011e5c:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8011e5e:	68fb      	ldr	r3, [r7, #12]
 8011e60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011e62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011e66:	d107      	bne.n	8011e78 <UART_DMATxAbortCallback+0x66>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8011e68:	68fb      	ldr	r3, [r7, #12]
 8011e6a:	681b      	ldr	r3, [r3, #0]
 8011e6c:	699a      	ldr	r2, [r3, #24]
 8011e6e:	68fb      	ldr	r3, [r7, #12]
 8011e70:	681b      	ldr	r3, [r3, #0]
 8011e72:	f042 0210 	orr.w	r2, r2, #16
 8011e76:	619a      	str	r2, [r3, #24]
  }

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8011e78:	68fb      	ldr	r3, [r7, #12]
 8011e7a:	2220      	movs	r2, #32
 8011e7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011e80:	68fb      	ldr	r3, [r7, #12]
 8011e82:	2220      	movs	r2, #32
 8011e84:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011e88:	68fb      	ldr	r3, [r7, #12]
 8011e8a:	2200      	movs	r2, #0
 8011e8c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8011e8e:	68f8      	ldr	r0, [r7, #12]
 8011e90:	f7fe fc0a 	bl	80106a8 <HAL_UART_AbortCpltCallback>
 8011e94:	e000      	b.n	8011e98 <UART_DMATxAbortCallback+0x86>
      return;
 8011e96:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011e98:	3710      	adds	r7, #16
 8011e9a:	46bd      	mov	sp, r7
 8011e9c:	bd80      	pop	{r7, pc}

08011e9e <UART_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8011e9e:	b580      	push	{r7, lr}
 8011ea0:	b084      	sub	sp, #16
 8011ea2:	af00      	add	r7, sp, #0
 8011ea4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011eaa:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8011eac:	68fb      	ldr	r3, [r7, #12]
 8011eae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011eb2:	2200      	movs	r2, #0
 8011eb4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8011eb6:	68fb      	ldr	r3, [r7, #12]
 8011eb8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d004      	beq.n	8011ec8 <UART_DMARxAbortCallback+0x2a>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8011ebe:	68fb      	ldr	r3, [r7, #12]
 8011ec0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011ec2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d126      	bne.n	8011f16 <UART_DMARxAbortCallback+0x78>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 8011ec8:	68fb      	ldr	r3, [r7, #12]
 8011eca:	2200      	movs	r2, #0
 8011ecc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 8011ed0:	68fb      	ldr	r3, [r7, #12]
 8011ed2:	2200      	movs	r2, #0
 8011ed4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011ed8:	68fb      	ldr	r3, [r7, #12]
 8011eda:	2200      	movs	r2, #0
 8011edc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8011ee0:	68fb      	ldr	r3, [r7, #12]
 8011ee2:	681b      	ldr	r3, [r3, #0]
 8011ee4:	220f      	movs	r2, #15
 8011ee6:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011ee8:	68fb      	ldr	r3, [r7, #12]
 8011eea:	681b      	ldr	r3, [r3, #0]
 8011eec:	699a      	ldr	r2, [r3, #24]
 8011eee:	68fb      	ldr	r3, [r7, #12]
 8011ef0:	681b      	ldr	r3, [r3, #0]
 8011ef2:	f042 0208 	orr.w	r2, r2, #8
 8011ef6:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8011ef8:	68fb      	ldr	r3, [r7, #12]
 8011efa:	2220      	movs	r2, #32
 8011efc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	2220      	movs	r2, #32
 8011f04:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011f08:	68fb      	ldr	r3, [r7, #12]
 8011f0a:	2200      	movs	r2, #0
 8011f0c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8011f0e:	68f8      	ldr	r0, [r7, #12]
 8011f10:	f7fe fbca 	bl	80106a8 <HAL_UART_AbortCpltCallback>
 8011f14:	e000      	b.n	8011f18 <UART_DMARxAbortCallback+0x7a>
      return;
 8011f16:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011f18:	3710      	adds	r7, #16
 8011f1a:	46bd      	mov	sp, r7
 8011f1c:	bd80      	pop	{r7, pc}

08011f1e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8011f1e:	b480      	push	{r7}
 8011f20:	b08f      	sub	sp, #60	@ 0x3c
 8011f22:	af00      	add	r7, sp, #0
 8011f24:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011f2c:	2b21      	cmp	r3, #33	@ 0x21
 8011f2e:	d14c      	bne.n	8011fca <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8011f36:	b29b      	uxth	r3, r3
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d132      	bne.n	8011fa2 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	681b      	ldr	r3, [r3, #0]
 8011f40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f42:	6a3b      	ldr	r3, [r7, #32]
 8011f44:	e853 3f00 	ldrex	r3, [r3]
 8011f48:	61fb      	str	r3, [r7, #28]
   return(result);
 8011f4a:	69fb      	ldr	r3, [r7, #28]
 8011f4c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011f50:	637b      	str	r3, [r7, #52]	@ 0x34
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	681b      	ldr	r3, [r3, #0]
 8011f56:	461a      	mov	r2, r3
 8011f58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011f5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011f5c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f5e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011f60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011f62:	e841 2300 	strex	r3, r2, [r1]
 8011f66:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d1e6      	bne.n	8011f3c <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	681b      	ldr	r3, [r3, #0]
 8011f72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f74:	68fb      	ldr	r3, [r7, #12]
 8011f76:	e853 3f00 	ldrex	r3, [r3]
 8011f7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8011f7c:	68bb      	ldr	r3, [r7, #8]
 8011f7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011f82:	633b      	str	r3, [r7, #48]	@ 0x30
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	681b      	ldr	r3, [r3, #0]
 8011f88:	461a      	mov	r2, r3
 8011f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f8c:	61bb      	str	r3, [r7, #24]
 8011f8e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f90:	6979      	ldr	r1, [r7, #20]
 8011f92:	69ba      	ldr	r2, [r7, #24]
 8011f94:	e841 2300 	strex	r3, r2, [r1]
 8011f98:	613b      	str	r3, [r7, #16]
   return(result);
 8011f9a:	693b      	ldr	r3, [r7, #16]
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d1e6      	bne.n	8011f6e <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8011fa0:	e013      	b.n	8011fca <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011fa6:	781a      	ldrb	r2, [r3, #0]
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	681b      	ldr	r3, [r3, #0]
 8011fac:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011fb2:	1c5a      	adds	r2, r3, #1
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8011fbe:	b29b      	uxth	r3, r3
 8011fc0:	3b01      	subs	r3, #1
 8011fc2:	b29a      	uxth	r2, r3
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8011fca:	bf00      	nop
 8011fcc:	373c      	adds	r7, #60	@ 0x3c
 8011fce:	46bd      	mov	sp, r7
 8011fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fd4:	4770      	bx	lr

08011fd6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8011fd6:	b480      	push	{r7}
 8011fd8:	b091      	sub	sp, #68	@ 0x44
 8011fda:	af00      	add	r7, sp, #0
 8011fdc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011fe4:	2b21      	cmp	r3, #33	@ 0x21
 8011fe6:	d151      	bne.n	801208c <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8011fee:	b29b      	uxth	r3, r3
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d132      	bne.n	801205a <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	681b      	ldr	r3, [r3, #0]
 8011ff8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ffc:	e853 3f00 	ldrex	r3, [r3]
 8012000:	623b      	str	r3, [r7, #32]
   return(result);
 8012002:	6a3b      	ldr	r3, [r7, #32]
 8012004:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8012008:	63bb      	str	r3, [r7, #56]	@ 0x38
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	681b      	ldr	r3, [r3, #0]
 801200e:	461a      	mov	r2, r3
 8012010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012012:	633b      	str	r3, [r7, #48]	@ 0x30
 8012014:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012016:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012018:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801201a:	e841 2300 	strex	r3, r2, [r1]
 801201e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8012020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012022:	2b00      	cmp	r3, #0
 8012024:	d1e6      	bne.n	8011ff4 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801202c:	693b      	ldr	r3, [r7, #16]
 801202e:	e853 3f00 	ldrex	r3, [r3]
 8012032:	60fb      	str	r3, [r7, #12]
   return(result);
 8012034:	68fb      	ldr	r3, [r7, #12]
 8012036:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801203a:	637b      	str	r3, [r7, #52]	@ 0x34
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	681b      	ldr	r3, [r3, #0]
 8012040:	461a      	mov	r2, r3
 8012042:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012044:	61fb      	str	r3, [r7, #28]
 8012046:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012048:	69b9      	ldr	r1, [r7, #24]
 801204a:	69fa      	ldr	r2, [r7, #28]
 801204c:	e841 2300 	strex	r3, r2, [r1]
 8012050:	617b      	str	r3, [r7, #20]
   return(result);
 8012052:	697b      	ldr	r3, [r7, #20]
 8012054:	2b00      	cmp	r3, #0
 8012056:	d1e6      	bne.n	8012026 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8012058:	e018      	b.n	801208c <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801205e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8012060:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012062:	881b      	ldrh	r3, [r3, #0]
 8012064:	461a      	mov	r2, r3
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	681b      	ldr	r3, [r3, #0]
 801206a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801206e:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012074:	1c9a      	adds	r2, r3, #2
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8012080:	b29b      	uxth	r3, r3
 8012082:	3b01      	subs	r3, #1
 8012084:	b29a      	uxth	r2, r3
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 801208c:	bf00      	nop
 801208e:	3744      	adds	r7, #68	@ 0x44
 8012090:	46bd      	mov	sp, r7
 8012092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012096:	4770      	bx	lr

08012098 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8012098:	b480      	push	{r7}
 801209a:	b091      	sub	sp, #68	@ 0x44
 801209c:	af00      	add	r7, sp, #0
 801209e:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80120a6:	2b21      	cmp	r3, #33	@ 0x21
 80120a8:	d160      	bne.n	801216c <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80120b0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80120b2:	e057      	b.n	8012164 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80120ba:	b29b      	uxth	r3, r3
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d133      	bne.n	8012128 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	681b      	ldr	r3, [r3, #0]
 80120c4:	3308      	adds	r3, #8
 80120c6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120ca:	e853 3f00 	ldrex	r3, [r3]
 80120ce:	623b      	str	r3, [r7, #32]
   return(result);
 80120d0:	6a3b      	ldr	r3, [r7, #32]
 80120d2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80120d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	681b      	ldr	r3, [r3, #0]
 80120dc:	3308      	adds	r3, #8
 80120de:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80120e0:	633a      	str	r2, [r7, #48]	@ 0x30
 80120e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120e4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80120e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80120e8:	e841 2300 	strex	r3, r2, [r1]
 80120ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80120ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d1e5      	bne.n	80120c0 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	681b      	ldr	r3, [r3, #0]
 80120f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120fa:	693b      	ldr	r3, [r7, #16]
 80120fc:	e853 3f00 	ldrex	r3, [r3]
 8012100:	60fb      	str	r3, [r7, #12]
   return(result);
 8012102:	68fb      	ldr	r3, [r7, #12]
 8012104:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012108:	637b      	str	r3, [r7, #52]	@ 0x34
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	681b      	ldr	r3, [r3, #0]
 801210e:	461a      	mov	r2, r3
 8012110:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012112:	61fb      	str	r3, [r7, #28]
 8012114:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012116:	69b9      	ldr	r1, [r7, #24]
 8012118:	69fa      	ldr	r2, [r7, #28]
 801211a:	e841 2300 	strex	r3, r2, [r1]
 801211e:	617b      	str	r3, [r7, #20]
   return(result);
 8012120:	697b      	ldr	r3, [r7, #20]
 8012122:	2b00      	cmp	r3, #0
 8012124:	d1e6      	bne.n	80120f4 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8012126:	e021      	b.n	801216c <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	681b      	ldr	r3, [r3, #0]
 801212c:	69db      	ldr	r3, [r3, #28]
 801212e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012132:	2b00      	cmp	r3, #0
 8012134:	d013      	beq.n	801215e <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801213a:	781a      	ldrb	r2, [r3, #0]
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	681b      	ldr	r3, [r3, #0]
 8012140:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012146:	1c5a      	adds	r2, r3, #1
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8012152:	b29b      	uxth	r3, r3
 8012154:	3b01      	subs	r3, #1
 8012156:	b29a      	uxth	r2, r3
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 801215e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012160:	3b01      	subs	r3, #1
 8012162:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8012164:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012166:	2b00      	cmp	r3, #0
 8012168:	d1a4      	bne.n	80120b4 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 801216a:	e7ff      	b.n	801216c <UART_TxISR_8BIT_FIFOEN+0xd4>
 801216c:	bf00      	nop
 801216e:	3744      	adds	r7, #68	@ 0x44
 8012170:	46bd      	mov	sp, r7
 8012172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012176:	4770      	bx	lr

08012178 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8012178:	b480      	push	{r7}
 801217a:	b091      	sub	sp, #68	@ 0x44
 801217c:	af00      	add	r7, sp, #0
 801217e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012186:	2b21      	cmp	r3, #33	@ 0x21
 8012188:	d165      	bne.n	8012256 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8012190:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8012192:	e05c      	b.n	801224e <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801219a:	b29b      	uxth	r3, r3
 801219c:	2b00      	cmp	r3, #0
 801219e:	d133      	bne.n	8012208 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	681b      	ldr	r3, [r3, #0]
 80121a4:	3308      	adds	r3, #8
 80121a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80121a8:	6a3b      	ldr	r3, [r7, #32]
 80121aa:	e853 3f00 	ldrex	r3, [r3]
 80121ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80121b0:	69fb      	ldr	r3, [r7, #28]
 80121b2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80121b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	681b      	ldr	r3, [r3, #0]
 80121bc:	3308      	adds	r3, #8
 80121be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80121c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80121c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80121c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80121c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80121c8:	e841 2300 	strex	r3, r2, [r1]
 80121cc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80121ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	d1e5      	bne.n	80121a0 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	681b      	ldr	r3, [r3, #0]
 80121d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80121da:	68fb      	ldr	r3, [r7, #12]
 80121dc:	e853 3f00 	ldrex	r3, [r3]
 80121e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80121e2:	68bb      	ldr	r3, [r7, #8]
 80121e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80121e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	681b      	ldr	r3, [r3, #0]
 80121ee:	461a      	mov	r2, r3
 80121f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80121f2:	61bb      	str	r3, [r7, #24]
 80121f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80121f6:	6979      	ldr	r1, [r7, #20]
 80121f8:	69ba      	ldr	r2, [r7, #24]
 80121fa:	e841 2300 	strex	r3, r2, [r1]
 80121fe:	613b      	str	r3, [r7, #16]
   return(result);
 8012200:	693b      	ldr	r3, [r7, #16]
 8012202:	2b00      	cmp	r3, #0
 8012204:	d1e6      	bne.n	80121d4 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8012206:	e026      	b.n	8012256 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	681b      	ldr	r3, [r3, #0]
 801220c:	69db      	ldr	r3, [r3, #28]
 801220e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012212:	2b00      	cmp	r3, #0
 8012214:	d018      	beq.n	8012248 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801221a:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 801221c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801221e:	881b      	ldrh	r3, [r3, #0]
 8012220:	461a      	mov	r2, r3
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	681b      	ldr	r3, [r3, #0]
 8012226:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801222a:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012230:	1c9a      	adds	r2, r3, #2
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801223c:	b29b      	uxth	r3, r3
 801223e:	3b01      	subs	r3, #1
 8012240:	b29a      	uxth	r2, r3
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8012248:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801224a:	3b01      	subs	r3, #1
 801224c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 801224e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012250:	2b00      	cmp	r3, #0
 8012252:	d19f      	bne.n	8012194 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8012254:	e7ff      	b.n	8012256 <UART_TxISR_16BIT_FIFOEN+0xde>
 8012256:	bf00      	nop
 8012258:	3744      	adds	r7, #68	@ 0x44
 801225a:	46bd      	mov	sp, r7
 801225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012260:	4770      	bx	lr

08012262 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8012262:	b580      	push	{r7, lr}
 8012264:	b088      	sub	sp, #32
 8012266:	af00      	add	r7, sp, #0
 8012268:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	681b      	ldr	r3, [r3, #0]
 801226e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012270:	68fb      	ldr	r3, [r7, #12]
 8012272:	e853 3f00 	ldrex	r3, [r3]
 8012276:	60bb      	str	r3, [r7, #8]
   return(result);
 8012278:	68bb      	ldr	r3, [r7, #8]
 801227a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801227e:	61fb      	str	r3, [r7, #28]
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	681b      	ldr	r3, [r3, #0]
 8012284:	461a      	mov	r2, r3
 8012286:	69fb      	ldr	r3, [r7, #28]
 8012288:	61bb      	str	r3, [r7, #24]
 801228a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801228c:	6979      	ldr	r1, [r7, #20]
 801228e:	69ba      	ldr	r2, [r7, #24]
 8012290:	e841 2300 	strex	r3, r2, [r1]
 8012294:	613b      	str	r3, [r7, #16]
   return(result);
 8012296:	693b      	ldr	r3, [r7, #16]
 8012298:	2b00      	cmp	r3, #0
 801229a:	d1e6      	bne.n	801226a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	2220      	movs	r2, #32
 80122a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	2200      	movs	r2, #0
 80122a8:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80122aa:	6878      	ldr	r0, [r7, #4]
 80122ac:	f7fe f9de 	bl	801066c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80122b0:	bf00      	nop
 80122b2:	3720      	adds	r7, #32
 80122b4:	46bd      	mov	sp, r7
 80122b6:	bd80      	pop	{r7, pc}

080122b8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80122b8:	b580      	push	{r7, lr}
 80122ba:	b09c      	sub	sp, #112	@ 0x70
 80122bc:	af00      	add	r7, sp, #0
 80122be:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80122c6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80122d0:	2b22      	cmp	r3, #34	@ 0x22
 80122d2:	f040 80be 	bne.w	8012452 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	681b      	ldr	r3, [r3, #0]
 80122da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80122dc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80122e0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80122e4:	b2d9      	uxtb	r1, r3
 80122e6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80122ea:	b2da      	uxtb	r2, r3
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80122f0:	400a      	ands	r2, r1
 80122f2:	b2d2      	uxtb	r2, r2
 80122f4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80122fa:	1c5a      	adds	r2, r3, #1
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8012306:	b29b      	uxth	r3, r3
 8012308:	3b01      	subs	r3, #1
 801230a:	b29a      	uxth	r2, r3
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8012318:	b29b      	uxth	r3, r3
 801231a:	2b00      	cmp	r3, #0
 801231c:	f040 80a1 	bne.w	8012462 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	681b      	ldr	r3, [r3, #0]
 8012324:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012326:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012328:	e853 3f00 	ldrex	r3, [r3]
 801232c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801232e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012330:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8012334:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	681b      	ldr	r3, [r3, #0]
 801233a:	461a      	mov	r2, r3
 801233c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801233e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012340:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012342:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8012344:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8012346:	e841 2300 	strex	r3, r2, [r1]
 801234a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801234c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801234e:	2b00      	cmp	r3, #0
 8012350:	d1e6      	bne.n	8012320 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	681b      	ldr	r3, [r3, #0]
 8012356:	3308      	adds	r3, #8
 8012358:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801235a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801235c:	e853 3f00 	ldrex	r3, [r3]
 8012360:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8012362:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012364:	f023 0301 	bic.w	r3, r3, #1
 8012368:	667b      	str	r3, [r7, #100]	@ 0x64
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	681b      	ldr	r3, [r3, #0]
 801236e:	3308      	adds	r3, #8
 8012370:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8012372:	647a      	str	r2, [r7, #68]	@ 0x44
 8012374:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012376:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8012378:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801237a:	e841 2300 	strex	r3, r2, [r1]
 801237e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8012380:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012382:	2b00      	cmp	r3, #0
 8012384:	d1e5      	bne.n	8012352 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	2220      	movs	r2, #32
 801238a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	2200      	movs	r2, #0
 8012392:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	2200      	movs	r2, #0
 8012398:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	681b      	ldr	r3, [r3, #0]
 801239e:	4a33      	ldr	r2, [pc, #204]	@ (801246c <UART_RxISR_8BIT+0x1b4>)
 80123a0:	4293      	cmp	r3, r2
 80123a2:	d01f      	beq.n	80123e4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	681b      	ldr	r3, [r3, #0]
 80123a8:	685b      	ldr	r3, [r3, #4]
 80123aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d018      	beq.n	80123e4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	681b      	ldr	r3, [r3, #0]
 80123b6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80123b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123ba:	e853 3f00 	ldrex	r3, [r3]
 80123be:	623b      	str	r3, [r7, #32]
   return(result);
 80123c0:	6a3b      	ldr	r3, [r7, #32]
 80123c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80123c6:	663b      	str	r3, [r7, #96]	@ 0x60
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	681b      	ldr	r3, [r3, #0]
 80123cc:	461a      	mov	r2, r3
 80123ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80123d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80123d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80123d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80123d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80123d8:	e841 2300 	strex	r3, r2, [r1]
 80123dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80123de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	d1e6      	bne.n	80123b2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80123e8:	2b01      	cmp	r3, #1
 80123ea:	d12e      	bne.n	801244a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	2200      	movs	r2, #0
 80123f0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	681b      	ldr	r3, [r3, #0]
 80123f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80123f8:	693b      	ldr	r3, [r7, #16]
 80123fa:	e853 3f00 	ldrex	r3, [r3]
 80123fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8012400:	68fb      	ldr	r3, [r7, #12]
 8012402:	f023 0310 	bic.w	r3, r3, #16
 8012406:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	681b      	ldr	r3, [r3, #0]
 801240c:	461a      	mov	r2, r3
 801240e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012410:	61fb      	str	r3, [r7, #28]
 8012412:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012414:	69b9      	ldr	r1, [r7, #24]
 8012416:	69fa      	ldr	r2, [r7, #28]
 8012418:	e841 2300 	strex	r3, r2, [r1]
 801241c:	617b      	str	r3, [r7, #20]
   return(result);
 801241e:	697b      	ldr	r3, [r7, #20]
 8012420:	2b00      	cmp	r3, #0
 8012422:	d1e6      	bne.n	80123f2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	69db      	ldr	r3, [r3, #28]
 801242a:	f003 0310 	and.w	r3, r3, #16
 801242e:	2b10      	cmp	r3, #16
 8012430:	d103      	bne.n	801243a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	2210      	movs	r2, #16
 8012438:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8012440:	4619      	mov	r1, r3
 8012442:	6878      	ldr	r0, [r7, #4]
 8012444:	f7fe f93a 	bl	80106bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012448:	e00b      	b.n	8012462 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801244a:	6878      	ldr	r0, [r7, #4]
 801244c:	f7f0 fe26 	bl	800309c <HAL_UART_RxCpltCallback>
}
 8012450:	e007      	b.n	8012462 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	699a      	ldr	r2, [r3, #24]
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	681b      	ldr	r3, [r3, #0]
 801245c:	f042 0208 	orr.w	r2, r2, #8
 8012460:	619a      	str	r2, [r3, #24]
}
 8012462:	bf00      	nop
 8012464:	3770      	adds	r7, #112	@ 0x70
 8012466:	46bd      	mov	sp, r7
 8012468:	bd80      	pop	{r7, pc}
 801246a:	bf00      	nop
 801246c:	58000c00 	.word	0x58000c00

08012470 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8012470:	b580      	push	{r7, lr}
 8012472:	b09c      	sub	sp, #112	@ 0x70
 8012474:	af00      	add	r7, sp, #0
 8012476:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801247e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8012488:	2b22      	cmp	r3, #34	@ 0x22
 801248a:	f040 80be 	bne.w	801260a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	681b      	ldr	r3, [r3, #0]
 8012492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012494:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801249c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 801249e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80124a2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80124a6:	4013      	ands	r3, r2
 80124a8:	b29a      	uxth	r2, r3
 80124aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80124ac:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80124b2:	1c9a      	adds	r2, r3, #2
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80124be:	b29b      	uxth	r3, r3
 80124c0:	3b01      	subs	r3, #1
 80124c2:	b29a      	uxth	r2, r3
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80124d0:	b29b      	uxth	r3, r3
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	f040 80a1 	bne.w	801261a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	681b      	ldr	r3, [r3, #0]
 80124dc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80124de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80124e0:	e853 3f00 	ldrex	r3, [r3]
 80124e4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80124e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80124e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80124ec:	667b      	str	r3, [r7, #100]	@ 0x64
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	681b      	ldr	r3, [r3, #0]
 80124f2:	461a      	mov	r2, r3
 80124f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80124f6:	657b      	str	r3, [r7, #84]	@ 0x54
 80124f8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80124fa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80124fc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80124fe:	e841 2300 	strex	r3, r2, [r1]
 8012502:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8012504:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012506:	2b00      	cmp	r3, #0
 8012508:	d1e6      	bne.n	80124d8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	681b      	ldr	r3, [r3, #0]
 801250e:	3308      	adds	r3, #8
 8012510:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012512:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012514:	e853 3f00 	ldrex	r3, [r3]
 8012518:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801251a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801251c:	f023 0301 	bic.w	r3, r3, #1
 8012520:	663b      	str	r3, [r7, #96]	@ 0x60
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	681b      	ldr	r3, [r3, #0]
 8012526:	3308      	adds	r3, #8
 8012528:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801252a:	643a      	str	r2, [r7, #64]	@ 0x40
 801252c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801252e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8012530:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8012532:	e841 2300 	strex	r3, r2, [r1]
 8012536:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8012538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801253a:	2b00      	cmp	r3, #0
 801253c:	d1e5      	bne.n	801250a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	2220      	movs	r2, #32
 8012542:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	2200      	movs	r2, #0
 801254a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	2200      	movs	r2, #0
 8012550:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	681b      	ldr	r3, [r3, #0]
 8012556:	4a33      	ldr	r2, [pc, #204]	@ (8012624 <UART_RxISR_16BIT+0x1b4>)
 8012558:	4293      	cmp	r3, r2
 801255a:	d01f      	beq.n	801259c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	685b      	ldr	r3, [r3, #4]
 8012562:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8012566:	2b00      	cmp	r3, #0
 8012568:	d018      	beq.n	801259c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	681b      	ldr	r3, [r3, #0]
 801256e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012570:	6a3b      	ldr	r3, [r7, #32]
 8012572:	e853 3f00 	ldrex	r3, [r3]
 8012576:	61fb      	str	r3, [r7, #28]
   return(result);
 8012578:	69fb      	ldr	r3, [r7, #28]
 801257a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801257e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	681b      	ldr	r3, [r3, #0]
 8012584:	461a      	mov	r2, r3
 8012586:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012588:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801258a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801258c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801258e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012590:	e841 2300 	strex	r3, r2, [r1]
 8012594:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8012596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012598:	2b00      	cmp	r3, #0
 801259a:	d1e6      	bne.n	801256a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80125a0:	2b01      	cmp	r3, #1
 80125a2:	d12e      	bne.n	8012602 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	2200      	movs	r2, #0
 80125a8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	681b      	ldr	r3, [r3, #0]
 80125ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80125b0:	68fb      	ldr	r3, [r7, #12]
 80125b2:	e853 3f00 	ldrex	r3, [r3]
 80125b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80125b8:	68bb      	ldr	r3, [r7, #8]
 80125ba:	f023 0310 	bic.w	r3, r3, #16
 80125be:	65bb      	str	r3, [r7, #88]	@ 0x58
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	681b      	ldr	r3, [r3, #0]
 80125c4:	461a      	mov	r2, r3
 80125c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80125c8:	61bb      	str	r3, [r7, #24]
 80125ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80125cc:	6979      	ldr	r1, [r7, #20]
 80125ce:	69ba      	ldr	r2, [r7, #24]
 80125d0:	e841 2300 	strex	r3, r2, [r1]
 80125d4:	613b      	str	r3, [r7, #16]
   return(result);
 80125d6:	693b      	ldr	r3, [r7, #16]
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d1e6      	bne.n	80125aa <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	681b      	ldr	r3, [r3, #0]
 80125e0:	69db      	ldr	r3, [r3, #28]
 80125e2:	f003 0310 	and.w	r3, r3, #16
 80125e6:	2b10      	cmp	r3, #16
 80125e8:	d103      	bne.n	80125f2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	681b      	ldr	r3, [r3, #0]
 80125ee:	2210      	movs	r2, #16
 80125f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80125f8:	4619      	mov	r1, r3
 80125fa:	6878      	ldr	r0, [r7, #4]
 80125fc:	f7fe f85e 	bl	80106bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012600:	e00b      	b.n	801261a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8012602:	6878      	ldr	r0, [r7, #4]
 8012604:	f7f0 fd4a 	bl	800309c <HAL_UART_RxCpltCallback>
}
 8012608:	e007      	b.n	801261a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	681b      	ldr	r3, [r3, #0]
 801260e:	699a      	ldr	r2, [r3, #24]
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	681b      	ldr	r3, [r3, #0]
 8012614:	f042 0208 	orr.w	r2, r2, #8
 8012618:	619a      	str	r2, [r3, #24]
}
 801261a:	bf00      	nop
 801261c:	3770      	adds	r7, #112	@ 0x70
 801261e:	46bd      	mov	sp, r7
 8012620:	bd80      	pop	{r7, pc}
 8012622:	bf00      	nop
 8012624:	58000c00 	.word	0x58000c00

08012628 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8012628:	b580      	push	{r7, lr}
 801262a:	b0ac      	sub	sp, #176	@ 0xb0
 801262c:	af00      	add	r7, sp, #0
 801262e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012636:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	681b      	ldr	r3, [r3, #0]
 801263e:	69db      	ldr	r3, [r3, #28]
 8012640:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	681b      	ldr	r3, [r3, #0]
 8012648:	681b      	ldr	r3, [r3, #0]
 801264a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	689b      	ldr	r3, [r3, #8]
 8012654:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801265e:	2b22      	cmp	r3, #34	@ 0x22
 8012660:	f040 8180 	bne.w	8012964 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801266a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801266e:	e123      	b.n	80128b8 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	681b      	ldr	r3, [r3, #0]
 8012674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012676:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801267a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 801267e:	b2d9      	uxtb	r1, r3
 8012680:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8012684:	b2da      	uxtb	r2, r3
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801268a:	400a      	ands	r2, r1
 801268c:	b2d2      	uxtb	r2, r2
 801268e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012694:	1c5a      	adds	r2, r3, #1
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80126a0:	b29b      	uxth	r3, r3
 80126a2:	3b01      	subs	r3, #1
 80126a4:	b29a      	uxth	r2, r3
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	681b      	ldr	r3, [r3, #0]
 80126b0:	69db      	ldr	r3, [r3, #28]
 80126b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80126b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80126ba:	f003 0307 	and.w	r3, r3, #7
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d053      	beq.n	801276a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80126c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80126c6:	f003 0301 	and.w	r3, r3, #1
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d011      	beq.n	80126f2 <UART_RxISR_8BIT_FIFOEN+0xca>
 80126ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80126d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d00b      	beq.n	80126f2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	2201      	movs	r2, #1
 80126e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80126e8:	f043 0201 	orr.w	r2, r3, #1
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80126f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80126f6:	f003 0302 	and.w	r3, r3, #2
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	d011      	beq.n	8012722 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80126fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012702:	f003 0301 	and.w	r3, r3, #1
 8012706:	2b00      	cmp	r3, #0
 8012708:	d00b      	beq.n	8012722 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	681b      	ldr	r3, [r3, #0]
 801270e:	2202      	movs	r2, #2
 8012710:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012718:	f043 0204 	orr.w	r2, r3, #4
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012722:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012726:	f003 0304 	and.w	r3, r3, #4
 801272a:	2b00      	cmp	r3, #0
 801272c:	d011      	beq.n	8012752 <UART_RxISR_8BIT_FIFOEN+0x12a>
 801272e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012732:	f003 0301 	and.w	r3, r3, #1
 8012736:	2b00      	cmp	r3, #0
 8012738:	d00b      	beq.n	8012752 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	681b      	ldr	r3, [r3, #0]
 801273e:	2204      	movs	r2, #4
 8012740:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012748:	f043 0202 	orr.w	r2, r3, #2
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012758:	2b00      	cmp	r3, #0
 801275a:	d006      	beq.n	801276a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801275c:	6878      	ldr	r0, [r7, #4]
 801275e:	f7fd ff99 	bl	8010694 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	2200      	movs	r2, #0
 8012766:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8012770:	b29b      	uxth	r3, r3
 8012772:	2b00      	cmp	r3, #0
 8012774:	f040 80a0 	bne.w	80128b8 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	681b      	ldr	r3, [r3, #0]
 801277c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801277e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012780:	e853 3f00 	ldrex	r3, [r3]
 8012784:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8012786:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012788:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801278c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	681b      	ldr	r3, [r3, #0]
 8012794:	461a      	mov	r2, r3
 8012796:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801279a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801279c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801279e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80127a0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80127a2:	e841 2300 	strex	r3, r2, [r1]
 80127a6:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 80127a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	d1e4      	bne.n	8012778 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	681b      	ldr	r3, [r3, #0]
 80127b2:	3308      	adds	r3, #8
 80127b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80127b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80127b8:	e853 3f00 	ldrex	r3, [r3]
 80127bc:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80127be:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80127c0:	4b6e      	ldr	r3, [pc, #440]	@ (801297c <UART_RxISR_8BIT_FIFOEN+0x354>)
 80127c2:	4013      	ands	r3, r2
 80127c4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	681b      	ldr	r3, [r3, #0]
 80127cc:	3308      	adds	r3, #8
 80127ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80127d2:	66ba      	str	r2, [r7, #104]	@ 0x68
 80127d4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80127d6:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80127d8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80127da:	e841 2300 	strex	r3, r2, [r1]
 80127de:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80127e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d1e3      	bne.n	80127ae <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	2220      	movs	r2, #32
 80127ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	2200      	movs	r2, #0
 80127f2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	2200      	movs	r2, #0
 80127f8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	681b      	ldr	r3, [r3, #0]
 80127fe:	4a60      	ldr	r2, [pc, #384]	@ (8012980 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8012800:	4293      	cmp	r3, r2
 8012802:	d021      	beq.n	8012848 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	681b      	ldr	r3, [r3, #0]
 8012808:	685b      	ldr	r3, [r3, #4]
 801280a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801280e:	2b00      	cmp	r3, #0
 8012810:	d01a      	beq.n	8012848 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012818:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801281a:	e853 3f00 	ldrex	r3, [r3]
 801281e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8012820:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012822:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8012826:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	681b      	ldr	r3, [r3, #0]
 801282e:	461a      	mov	r2, r3
 8012830:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8012834:	657b      	str	r3, [r7, #84]	@ 0x54
 8012836:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012838:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801283a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801283c:	e841 2300 	strex	r3, r2, [r1]
 8012840:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8012842:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012844:	2b00      	cmp	r3, #0
 8012846:	d1e4      	bne.n	8012812 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801284c:	2b01      	cmp	r3, #1
 801284e:	d130      	bne.n	80128b2 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	2200      	movs	r2, #0
 8012854:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	681b      	ldr	r3, [r3, #0]
 801285a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801285c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801285e:	e853 3f00 	ldrex	r3, [r3]
 8012862:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8012864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012866:	f023 0310 	bic.w	r3, r3, #16
 801286a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	681b      	ldr	r3, [r3, #0]
 8012872:	461a      	mov	r2, r3
 8012874:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012878:	643b      	str	r3, [r7, #64]	@ 0x40
 801287a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801287c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801287e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8012880:	e841 2300 	strex	r3, r2, [r1]
 8012884:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8012886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012888:	2b00      	cmp	r3, #0
 801288a:	d1e4      	bne.n	8012856 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	681b      	ldr	r3, [r3, #0]
 8012890:	69db      	ldr	r3, [r3, #28]
 8012892:	f003 0310 	and.w	r3, r3, #16
 8012896:	2b10      	cmp	r3, #16
 8012898:	d103      	bne.n	80128a2 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	681b      	ldr	r3, [r3, #0]
 801289e:	2210      	movs	r2, #16
 80128a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80128a8:	4619      	mov	r1, r3
 80128aa:	6878      	ldr	r0, [r7, #4]
 80128ac:	f7fd ff06 	bl	80106bc <HAL_UARTEx_RxEventCallback>
 80128b0:	e002      	b.n	80128b8 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80128b2:	6878      	ldr	r0, [r7, #4]
 80128b4:	f7f0 fbf2 	bl	800309c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80128b8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d006      	beq.n	80128ce <UART_RxISR_8BIT_FIFOEN+0x2a6>
 80128c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80128c4:	f003 0320 	and.w	r3, r3, #32
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	f47f aed1 	bne.w	8012670 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80128d4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80128d8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d049      	beq.n	8012974 <UART_RxISR_8BIT_FIFOEN+0x34c>
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80128e6:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 80128ea:	429a      	cmp	r2, r3
 80128ec:	d242      	bcs.n	8012974 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	681b      	ldr	r3, [r3, #0]
 80128f2:	3308      	adds	r3, #8
 80128f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80128f6:	6a3b      	ldr	r3, [r7, #32]
 80128f8:	e853 3f00 	ldrex	r3, [r3]
 80128fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80128fe:	69fb      	ldr	r3, [r7, #28]
 8012900:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8012904:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	681b      	ldr	r3, [r3, #0]
 801290c:	3308      	adds	r3, #8
 801290e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8012912:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8012914:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012916:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8012918:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801291a:	e841 2300 	strex	r3, r2, [r1]
 801291e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8012920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012922:	2b00      	cmp	r3, #0
 8012924:	d1e3      	bne.n	80128ee <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	4a16      	ldr	r2, [pc, #88]	@ (8012984 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 801292a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	681b      	ldr	r3, [r3, #0]
 8012930:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012932:	68fb      	ldr	r3, [r7, #12]
 8012934:	e853 3f00 	ldrex	r3, [r3]
 8012938:	60bb      	str	r3, [r7, #8]
   return(result);
 801293a:	68bb      	ldr	r3, [r7, #8]
 801293c:	f043 0320 	orr.w	r3, r3, #32
 8012940:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	681b      	ldr	r3, [r3, #0]
 8012948:	461a      	mov	r2, r3
 801294a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801294e:	61bb      	str	r3, [r7, #24]
 8012950:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012952:	6979      	ldr	r1, [r7, #20]
 8012954:	69ba      	ldr	r2, [r7, #24]
 8012956:	e841 2300 	strex	r3, r2, [r1]
 801295a:	613b      	str	r3, [r7, #16]
   return(result);
 801295c:	693b      	ldr	r3, [r7, #16]
 801295e:	2b00      	cmp	r3, #0
 8012960:	d1e4      	bne.n	801292c <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012962:	e007      	b.n	8012974 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	681b      	ldr	r3, [r3, #0]
 8012968:	699a      	ldr	r2, [r3, #24]
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	681b      	ldr	r3, [r3, #0]
 801296e:	f042 0208 	orr.w	r2, r2, #8
 8012972:	619a      	str	r2, [r3, #24]
}
 8012974:	bf00      	nop
 8012976:	37b0      	adds	r7, #176	@ 0xb0
 8012978:	46bd      	mov	sp, r7
 801297a:	bd80      	pop	{r7, pc}
 801297c:	effffffe 	.word	0xeffffffe
 8012980:	58000c00 	.word	0x58000c00
 8012984:	080122b9 	.word	0x080122b9

08012988 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8012988:	b580      	push	{r7, lr}
 801298a:	b0ae      	sub	sp, #184	@ 0xb8
 801298c:	af00      	add	r7, sp, #0
 801298e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012996:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	69db      	ldr	r3, [r3, #28]
 80129a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	681b      	ldr	r3, [r3, #0]
 80129a8:	681b      	ldr	r3, [r3, #0]
 80129aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	681b      	ldr	r3, [r3, #0]
 80129b2:	689b      	ldr	r3, [r3, #8]
 80129b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80129be:	2b22      	cmp	r3, #34	@ 0x22
 80129c0:	f040 8184 	bne.w	8012ccc <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80129ca:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80129ce:	e127      	b.n	8012c20 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	681b      	ldr	r3, [r3, #0]
 80129d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80129d6:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80129de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80129e2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 80129e6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80129ea:	4013      	ands	r3, r2
 80129ec:	b29a      	uxth	r2, r3
 80129ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80129f2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80129f8:	1c9a      	adds	r2, r3, #2
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8012a04:	b29b      	uxth	r3, r3
 8012a06:	3b01      	subs	r3, #1
 8012a08:	b29a      	uxth	r2, r3
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	681b      	ldr	r3, [r3, #0]
 8012a14:	69db      	ldr	r3, [r3, #28]
 8012a16:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8012a1a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8012a1e:	f003 0307 	and.w	r3, r3, #7
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	d053      	beq.n	8012ace <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012a26:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8012a2a:	f003 0301 	and.w	r3, r3, #1
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d011      	beq.n	8012a56 <UART_RxISR_16BIT_FIFOEN+0xce>
 8012a32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012a36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d00b      	beq.n	8012a56 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	681b      	ldr	r3, [r3, #0]
 8012a42:	2201      	movs	r2, #1
 8012a44:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012a4c:	f043 0201 	orr.w	r2, r3, #1
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012a56:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8012a5a:	f003 0302 	and.w	r3, r3, #2
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	d011      	beq.n	8012a86 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8012a62:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8012a66:	f003 0301 	and.w	r3, r3, #1
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d00b      	beq.n	8012a86 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	2202      	movs	r2, #2
 8012a74:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012a7c:	f043 0204 	orr.w	r2, r3, #4
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012a86:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8012a8a:	f003 0304 	and.w	r3, r3, #4
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d011      	beq.n	8012ab6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8012a92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8012a96:	f003 0301 	and.w	r3, r3, #1
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d00b      	beq.n	8012ab6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	681b      	ldr	r3, [r3, #0]
 8012aa2:	2204      	movs	r2, #4
 8012aa4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012aac:	f043 0202 	orr.w	r2, r3, #2
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012abc:	2b00      	cmp	r3, #0
 8012abe:	d006      	beq.n	8012ace <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012ac0:	6878      	ldr	r0, [r7, #4]
 8012ac2:	f7fd fde7 	bl	8010694 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	2200      	movs	r2, #0
 8012aca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8012ad4:	b29b      	uxth	r3, r3
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	f040 80a2 	bne.w	8012c20 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	681b      	ldr	r3, [r3, #0]
 8012ae0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012ae2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012ae4:	e853 3f00 	ldrex	r3, [r3]
 8012ae8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8012aea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012aec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8012af0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	681b      	ldr	r3, [r3, #0]
 8012af8:	461a      	mov	r2, r3
 8012afa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8012afe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8012b02:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b04:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8012b06:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8012b0a:	e841 2300 	strex	r3, r2, [r1]
 8012b0e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8012b10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	d1e2      	bne.n	8012adc <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	681b      	ldr	r3, [r3, #0]
 8012b1a:	3308      	adds	r3, #8
 8012b1c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b1e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012b20:	e853 3f00 	ldrex	r3, [r3]
 8012b24:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8012b26:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8012b28:	4b6e      	ldr	r3, [pc, #440]	@ (8012ce4 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8012b2a:	4013      	ands	r3, r2
 8012b2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	681b      	ldr	r3, [r3, #0]
 8012b34:	3308      	adds	r3, #8
 8012b36:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8012b3a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8012b3c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b3e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8012b40:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8012b42:	e841 2300 	strex	r3, r2, [r1]
 8012b46:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8012b48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d1e3      	bne.n	8012b16 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	2220      	movs	r2, #32
 8012b52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	2200      	movs	r2, #0
 8012b5a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	2200      	movs	r2, #0
 8012b60:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	681b      	ldr	r3, [r3, #0]
 8012b66:	4a60      	ldr	r2, [pc, #384]	@ (8012ce8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8012b68:	4293      	cmp	r3, r2
 8012b6a:	d021      	beq.n	8012bb0 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	681b      	ldr	r3, [r3, #0]
 8012b70:	685b      	ldr	r3, [r3, #4]
 8012b72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d01a      	beq.n	8012bb0 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	681b      	ldr	r3, [r3, #0]
 8012b7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012b82:	e853 3f00 	ldrex	r3, [r3]
 8012b86:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8012b88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012b8a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8012b8e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	681b      	ldr	r3, [r3, #0]
 8012b96:	461a      	mov	r2, r3
 8012b98:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8012b9c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012b9e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012ba0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8012ba2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8012ba4:	e841 2300 	strex	r3, r2, [r1]
 8012ba8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8012baa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d1e4      	bne.n	8012b7a <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012bb4:	2b01      	cmp	r3, #1
 8012bb6:	d130      	bne.n	8012c1a <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	2200      	movs	r2, #0
 8012bbc:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	681b      	ldr	r3, [r3, #0]
 8012bc2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012bc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012bc6:	e853 3f00 	ldrex	r3, [r3]
 8012bca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8012bcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012bce:	f023 0310 	bic.w	r3, r3, #16
 8012bd2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	681b      	ldr	r3, [r3, #0]
 8012bda:	461a      	mov	r2, r3
 8012bdc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8012be0:	647b      	str	r3, [r7, #68]	@ 0x44
 8012be2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012be4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8012be6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012be8:	e841 2300 	strex	r3, r2, [r1]
 8012bec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8012bee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	d1e4      	bne.n	8012bbe <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	681b      	ldr	r3, [r3, #0]
 8012bf8:	69db      	ldr	r3, [r3, #28]
 8012bfa:	f003 0310 	and.w	r3, r3, #16
 8012bfe:	2b10      	cmp	r3, #16
 8012c00:	d103      	bne.n	8012c0a <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	681b      	ldr	r3, [r3, #0]
 8012c06:	2210      	movs	r2, #16
 8012c08:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8012c10:	4619      	mov	r1, r3
 8012c12:	6878      	ldr	r0, [r7, #4]
 8012c14:	f7fd fd52 	bl	80106bc <HAL_UARTEx_RxEventCallback>
 8012c18:	e002      	b.n	8012c20 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8012c1a:	6878      	ldr	r0, [r7, #4]
 8012c1c:	f7f0 fa3e 	bl	800309c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012c20:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	d006      	beq.n	8012c36 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8012c28:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8012c2c:	f003 0320 	and.w	r3, r3, #32
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	f47f aecd 	bne.w	80129d0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8012c3c:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8012c40:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d049      	beq.n	8012cdc <UART_RxISR_16BIT_FIFOEN+0x354>
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8012c4e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8012c52:	429a      	cmp	r2, r3
 8012c54:	d242      	bcs.n	8012cdc <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	681b      	ldr	r3, [r3, #0]
 8012c5a:	3308      	adds	r3, #8
 8012c5c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c60:	e853 3f00 	ldrex	r3, [r3]
 8012c64:	623b      	str	r3, [r7, #32]
   return(result);
 8012c66:	6a3b      	ldr	r3, [r7, #32]
 8012c68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8012c6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	681b      	ldr	r3, [r3, #0]
 8012c74:	3308      	adds	r3, #8
 8012c76:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8012c7a:	633a      	str	r2, [r7, #48]	@ 0x30
 8012c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012c7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012c80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012c82:	e841 2300 	strex	r3, r2, [r1]
 8012c86:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8012c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d1e3      	bne.n	8012c56 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	4a16      	ldr	r2, [pc, #88]	@ (8012cec <UART_RxISR_16BIT_FIFOEN+0x364>)
 8012c92:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	681b      	ldr	r3, [r3, #0]
 8012c98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012c9a:	693b      	ldr	r3, [r7, #16]
 8012c9c:	e853 3f00 	ldrex	r3, [r3]
 8012ca0:	60fb      	str	r3, [r7, #12]
   return(result);
 8012ca2:	68fb      	ldr	r3, [r7, #12]
 8012ca4:	f043 0320 	orr.w	r3, r3, #32
 8012ca8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	681b      	ldr	r3, [r3, #0]
 8012cb0:	461a      	mov	r2, r3
 8012cb2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8012cb6:	61fb      	str	r3, [r7, #28]
 8012cb8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012cba:	69b9      	ldr	r1, [r7, #24]
 8012cbc:	69fa      	ldr	r2, [r7, #28]
 8012cbe:	e841 2300 	strex	r3, r2, [r1]
 8012cc2:	617b      	str	r3, [r7, #20]
   return(result);
 8012cc4:	697b      	ldr	r3, [r7, #20]
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	d1e4      	bne.n	8012c94 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012cca:	e007      	b.n	8012cdc <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	681b      	ldr	r3, [r3, #0]
 8012cd0:	699a      	ldr	r2, [r3, #24]
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	681b      	ldr	r3, [r3, #0]
 8012cd6:	f042 0208 	orr.w	r2, r2, #8
 8012cda:	619a      	str	r2, [r3, #24]
}
 8012cdc:	bf00      	nop
 8012cde:	37b8      	adds	r7, #184	@ 0xb8
 8012ce0:	46bd      	mov	sp, r7
 8012ce2:	bd80      	pop	{r7, pc}
 8012ce4:	effffffe 	.word	0xeffffffe
 8012ce8:	58000c00 	.word	0x58000c00
 8012cec:	08012471 	.word	0x08012471

08012cf0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8012cf0:	b480      	push	{r7}
 8012cf2:	b083      	sub	sp, #12
 8012cf4:	af00      	add	r7, sp, #0
 8012cf6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8012cf8:	bf00      	nop
 8012cfa:	370c      	adds	r7, #12
 8012cfc:	46bd      	mov	sp, r7
 8012cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d02:	4770      	bx	lr

08012d04 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8012d04:	b480      	push	{r7}
 8012d06:	b083      	sub	sp, #12
 8012d08:	af00      	add	r7, sp, #0
 8012d0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8012d0c:	bf00      	nop
 8012d0e:	370c      	adds	r7, #12
 8012d10:	46bd      	mov	sp, r7
 8012d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d16:	4770      	bx	lr

08012d18 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8012d18:	b480      	push	{r7}
 8012d1a:	b083      	sub	sp, #12
 8012d1c:	af00      	add	r7, sp, #0
 8012d1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8012d20:	bf00      	nop
 8012d22:	370c      	adds	r7, #12
 8012d24:	46bd      	mov	sp, r7
 8012d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d2a:	4770      	bx	lr

08012d2c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8012d2c:	b480      	push	{r7}
 8012d2e:	b085      	sub	sp, #20
 8012d30:	af00      	add	r7, sp, #0
 8012d32:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8012d3a:	2b01      	cmp	r3, #1
 8012d3c:	d101      	bne.n	8012d42 <HAL_UARTEx_DisableFifoMode+0x16>
 8012d3e:	2302      	movs	r3, #2
 8012d40:	e027      	b.n	8012d92 <HAL_UARTEx_DisableFifoMode+0x66>
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	2201      	movs	r2, #1
 8012d46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	2224      	movs	r2, #36	@ 0x24
 8012d4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	681b      	ldr	r3, [r3, #0]
 8012d56:	681b      	ldr	r3, [r3, #0]
 8012d58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	681b      	ldr	r3, [r3, #0]
 8012d5e:	681a      	ldr	r2, [r3, #0]
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	681b      	ldr	r3, [r3, #0]
 8012d64:	f022 0201 	bic.w	r2, r2, #1
 8012d68:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012d6a:	68fb      	ldr	r3, [r7, #12]
 8012d6c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8012d70:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	2200      	movs	r2, #0
 8012d76:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	681b      	ldr	r3, [r3, #0]
 8012d7c:	68fa      	ldr	r2, [r7, #12]
 8012d7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	2220      	movs	r2, #32
 8012d84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	2200      	movs	r2, #0
 8012d8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8012d90:	2300      	movs	r3, #0
}
 8012d92:	4618      	mov	r0, r3
 8012d94:	3714      	adds	r7, #20
 8012d96:	46bd      	mov	sp, r7
 8012d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d9c:	4770      	bx	lr

08012d9e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012d9e:	b580      	push	{r7, lr}
 8012da0:	b084      	sub	sp, #16
 8012da2:	af00      	add	r7, sp, #0
 8012da4:	6078      	str	r0, [r7, #4]
 8012da6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8012dae:	2b01      	cmp	r3, #1
 8012db0:	d101      	bne.n	8012db6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8012db2:	2302      	movs	r3, #2
 8012db4:	e02d      	b.n	8012e12 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	2201      	movs	r2, #1
 8012dba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	2224      	movs	r2, #36	@ 0x24
 8012dc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	681b      	ldr	r3, [r3, #0]
 8012dca:	681b      	ldr	r3, [r3, #0]
 8012dcc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	681b      	ldr	r3, [r3, #0]
 8012dd2:	681a      	ldr	r2, [r3, #0]
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	681b      	ldr	r3, [r3, #0]
 8012dd8:	f022 0201 	bic.w	r2, r2, #1
 8012ddc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	681b      	ldr	r3, [r3, #0]
 8012de2:	689b      	ldr	r3, [r3, #8]
 8012de4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	683a      	ldr	r2, [r7, #0]
 8012dee:	430a      	orrs	r2, r1
 8012df0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012df2:	6878      	ldr	r0, [r7, #4]
 8012df4:	f000 f850 	bl	8012e98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	681b      	ldr	r3, [r3, #0]
 8012dfc:	68fa      	ldr	r2, [r7, #12]
 8012dfe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	2220      	movs	r2, #32
 8012e04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	2200      	movs	r2, #0
 8012e0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8012e10:	2300      	movs	r3, #0
}
 8012e12:	4618      	mov	r0, r3
 8012e14:	3710      	adds	r7, #16
 8012e16:	46bd      	mov	sp, r7
 8012e18:	bd80      	pop	{r7, pc}

08012e1a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012e1a:	b580      	push	{r7, lr}
 8012e1c:	b084      	sub	sp, #16
 8012e1e:	af00      	add	r7, sp, #0
 8012e20:	6078      	str	r0, [r7, #4]
 8012e22:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8012e2a:	2b01      	cmp	r3, #1
 8012e2c:	d101      	bne.n	8012e32 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8012e2e:	2302      	movs	r3, #2
 8012e30:	e02d      	b.n	8012e8e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	2201      	movs	r2, #1
 8012e36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	2224      	movs	r2, #36	@ 0x24
 8012e3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	681b      	ldr	r3, [r3, #0]
 8012e46:	681b      	ldr	r3, [r3, #0]
 8012e48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	681b      	ldr	r3, [r3, #0]
 8012e4e:	681a      	ldr	r2, [r3, #0]
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	681b      	ldr	r3, [r3, #0]
 8012e54:	f022 0201 	bic.w	r2, r2, #1
 8012e58:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	681b      	ldr	r3, [r3, #0]
 8012e5e:	689b      	ldr	r3, [r3, #8]
 8012e60:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	681b      	ldr	r3, [r3, #0]
 8012e68:	683a      	ldr	r2, [r7, #0]
 8012e6a:	430a      	orrs	r2, r1
 8012e6c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012e6e:	6878      	ldr	r0, [r7, #4]
 8012e70:	f000 f812 	bl	8012e98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	681b      	ldr	r3, [r3, #0]
 8012e78:	68fa      	ldr	r2, [r7, #12]
 8012e7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	2220      	movs	r2, #32
 8012e80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	2200      	movs	r2, #0
 8012e88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8012e8c:	2300      	movs	r3, #0
}
 8012e8e:	4618      	mov	r0, r3
 8012e90:	3710      	adds	r7, #16
 8012e92:	46bd      	mov	sp, r7
 8012e94:	bd80      	pop	{r7, pc}
	...

08012e98 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8012e98:	b480      	push	{r7}
 8012e9a:	b085      	sub	sp, #20
 8012e9c:	af00      	add	r7, sp, #0
 8012e9e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d108      	bne.n	8012eba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	2201      	movs	r2, #1
 8012eac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	2201      	movs	r2, #1
 8012eb4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8012eb8:	e031      	b.n	8012f1e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8012eba:	2310      	movs	r3, #16
 8012ebc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8012ebe:	2310      	movs	r3, #16
 8012ec0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	681b      	ldr	r3, [r3, #0]
 8012ec6:	689b      	ldr	r3, [r3, #8]
 8012ec8:	0e5b      	lsrs	r3, r3, #25
 8012eca:	b2db      	uxtb	r3, r3
 8012ecc:	f003 0307 	and.w	r3, r3, #7
 8012ed0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	681b      	ldr	r3, [r3, #0]
 8012ed6:	689b      	ldr	r3, [r3, #8]
 8012ed8:	0f5b      	lsrs	r3, r3, #29
 8012eda:	b2db      	uxtb	r3, r3
 8012edc:	f003 0307 	and.w	r3, r3, #7
 8012ee0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012ee2:	7bbb      	ldrb	r3, [r7, #14]
 8012ee4:	7b3a      	ldrb	r2, [r7, #12]
 8012ee6:	4911      	ldr	r1, [pc, #68]	@ (8012f2c <UARTEx_SetNbDataToProcess+0x94>)
 8012ee8:	5c8a      	ldrb	r2, [r1, r2]
 8012eea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8012eee:	7b3a      	ldrb	r2, [r7, #12]
 8012ef0:	490f      	ldr	r1, [pc, #60]	@ (8012f30 <UARTEx_SetNbDataToProcess+0x98>)
 8012ef2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012ef4:	fb93 f3f2 	sdiv	r3, r3, r2
 8012ef8:	b29a      	uxth	r2, r3
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012f00:	7bfb      	ldrb	r3, [r7, #15]
 8012f02:	7b7a      	ldrb	r2, [r7, #13]
 8012f04:	4909      	ldr	r1, [pc, #36]	@ (8012f2c <UARTEx_SetNbDataToProcess+0x94>)
 8012f06:	5c8a      	ldrb	r2, [r1, r2]
 8012f08:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012f0c:	7b7a      	ldrb	r2, [r7, #13]
 8012f0e:	4908      	ldr	r1, [pc, #32]	@ (8012f30 <UARTEx_SetNbDataToProcess+0x98>)
 8012f10:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012f12:	fb93 f3f2 	sdiv	r3, r3, r2
 8012f16:	b29a      	uxth	r2, r3
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8012f1e:	bf00      	nop
 8012f20:	3714      	adds	r7, #20
 8012f22:	46bd      	mov	sp, r7
 8012f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f28:	4770      	bx	lr
 8012f2a:	bf00      	nop
 8012f2c:	08019e04 	.word	0x08019e04
 8012f30:	08019e0c 	.word	0x08019e0c

08012f34 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8012f34:	b580      	push	{r7, lr}
 8012f36:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8012f38:	4904      	ldr	r1, [pc, #16]	@ (8012f4c <MX_FATFS_Init+0x18>)
 8012f3a:	4805      	ldr	r0, [pc, #20]	@ (8012f50 <MX_FATFS_Init+0x1c>)
 8012f3c:	f001 fcd0 	bl	80148e0 <FATFS_LinkDriver>
 8012f40:	4603      	mov	r3, r0
 8012f42:	461a      	mov	r2, r3
 8012f44:	4b03      	ldr	r3, [pc, #12]	@ (8012f54 <MX_FATFS_Init+0x20>)
 8012f46:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8012f48:	bf00      	nop
 8012f4a:	bd80      	pop	{r7, pc}
 8012f4c:	240029c4 	.word	0x240029c4
 8012f50:	240000ac 	.word	0x240000ac
 8012f54:	240029c0 	.word	0x240029c0

08012f58 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8012f58:	b480      	push	{r7}
 8012f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8012f5c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8012f5e:	4618      	mov	r0, r3
 8012f60:	46bd      	mov	sp, r7
 8012f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f66:	4770      	bx	lr

08012f68 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8012f68:	b580      	push	{r7, lr}
 8012f6a:	b082      	sub	sp, #8
 8012f6c:	af00      	add	r7, sp, #0
 8012f6e:	4603      	mov	r3, r0
 8012f70:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8012f72:	79fb      	ldrb	r3, [r7, #7]
 8012f74:	4618      	mov	r0, r3
 8012f76:	f000 f9fd 	bl	8013374 <SD_disk_initialize>
 8012f7a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8012f7c:	4618      	mov	r0, r3
 8012f7e:	3708      	adds	r7, #8
 8012f80:	46bd      	mov	sp, r7
 8012f82:	bd80      	pop	{r7, pc}

08012f84 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8012f84:	b580      	push	{r7, lr}
 8012f86:	b082      	sub	sp, #8
 8012f88:	af00      	add	r7, sp, #0
 8012f8a:	4603      	mov	r3, r0
 8012f8c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8012f8e:	79fb      	ldrb	r3, [r7, #7]
 8012f90:	4618      	mov	r0, r3
 8012f92:	f000 fad5 	bl	8013540 <SD_disk_status>
 8012f96:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8012f98:	4618      	mov	r0, r3
 8012f9a:	3708      	adds	r7, #8
 8012f9c:	46bd      	mov	sp, r7
 8012f9e:	bd80      	pop	{r7, pc}

08012fa0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8012fa0:	b580      	push	{r7, lr}
 8012fa2:	b084      	sub	sp, #16
 8012fa4:	af00      	add	r7, sp, #0
 8012fa6:	60b9      	str	r1, [r7, #8]
 8012fa8:	607a      	str	r2, [r7, #4]
 8012faa:	603b      	str	r3, [r7, #0]
 8012fac:	4603      	mov	r3, r0
 8012fae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8012fb0:	7bf8      	ldrb	r0, [r7, #15]
 8012fb2:	683b      	ldr	r3, [r7, #0]
 8012fb4:	687a      	ldr	r2, [r7, #4]
 8012fb6:	68b9      	ldr	r1, [r7, #8]
 8012fb8:	f000 fad8 	bl	801356c <SD_disk_read>
 8012fbc:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8012fbe:	4618      	mov	r0, r3
 8012fc0:	3710      	adds	r7, #16
 8012fc2:	46bd      	mov	sp, r7
 8012fc4:	bd80      	pop	{r7, pc}

08012fc6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8012fc6:	b580      	push	{r7, lr}
 8012fc8:	b084      	sub	sp, #16
 8012fca:	af00      	add	r7, sp, #0
 8012fcc:	60b9      	str	r1, [r7, #8]
 8012fce:	607a      	str	r2, [r7, #4]
 8012fd0:	603b      	str	r3, [r7, #0]
 8012fd2:	4603      	mov	r3, r0
 8012fd4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8012fd6:	7bf8      	ldrb	r0, [r7, #15]
 8012fd8:	683b      	ldr	r3, [r7, #0]
 8012fda:	687a      	ldr	r2, [r7, #4]
 8012fdc:	68b9      	ldr	r1, [r7, #8]
 8012fde:	f000 fb2f 	bl	8013640 <SD_disk_write>
 8012fe2:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8012fe4:	4618      	mov	r0, r3
 8012fe6:	3710      	adds	r7, #16
 8012fe8:	46bd      	mov	sp, r7
 8012fea:	bd80      	pop	{r7, pc}

08012fec <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8012fec:	b580      	push	{r7, lr}
 8012fee:	b082      	sub	sp, #8
 8012ff0:	af00      	add	r7, sp, #0
 8012ff2:	4603      	mov	r3, r0
 8012ff4:	603a      	str	r2, [r7, #0]
 8012ff6:	71fb      	strb	r3, [r7, #7]
 8012ff8:	460b      	mov	r3, r1
 8012ffa:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8012ffc:	79b9      	ldrb	r1, [r7, #6]
 8012ffe:	79fb      	ldrb	r3, [r7, #7]
 8013000:	683a      	ldr	r2, [r7, #0]
 8013002:	4618      	mov	r0, r3
 8013004:	f000 fba0 	bl	8013748 <SD_disk_ioctl>
 8013008:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 801300a:	4618      	mov	r0, r3
 801300c:	3708      	adds	r7, #8
 801300e:	46bd      	mov	sp, r7
 8013010:	bd80      	pop	{r7, pc}
	...

08013014 <SELECT>:

//-----[ SPI Functions ]-----

/* slave select */
static void SELECT(void)
{
 8013014:	b580      	push	{r7, lr}
 8013016:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8013018:	2200      	movs	r2, #0
 801301a:	2110      	movs	r1, #16
 801301c:	4802      	ldr	r0, [pc, #8]	@ (8013028 <SELECT+0x14>)
 801301e:	f7f7 f9b9 	bl	800a394 <HAL_GPIO_WritePin>
}
 8013022:	bf00      	nop
 8013024:	bd80      	pop	{r7, pc}
 8013026:	bf00      	nop
 8013028:	58020000 	.word	0x58020000

0801302c <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 801302c:	b580      	push	{r7, lr}
 801302e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8013030:	2201      	movs	r2, #1
 8013032:	2110      	movs	r1, #16
 8013034:	4802      	ldr	r0, [pc, #8]	@ (8013040 <DESELECT+0x14>)
 8013036:	f7f7 f9ad 	bl	800a394 <HAL_GPIO_WritePin>
}
 801303a:	bf00      	nop
 801303c:	bd80      	pop	{r7, pc}
 801303e:	bf00      	nop
 8013040:	58020000 	.word	0x58020000

08013044 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8013044:	b580      	push	{r7, lr}
 8013046:	b082      	sub	sp, #8
 8013048:	af00      	add	r7, sp, #0
 801304a:	4603      	mov	r3, r0
 801304c:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 801304e:	bf00      	nop
 8013050:	4b08      	ldr	r3, [pc, #32]	@ (8013074 <SPI_TxByte+0x30>)
 8013052:	681b      	ldr	r3, [r3, #0]
 8013054:	695b      	ldr	r3, [r3, #20]
 8013056:	f003 0302 	and.w	r3, r3, #2
 801305a:	2b02      	cmp	r3, #2
 801305c:	d1f8      	bne.n	8013050 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 801305e:	1df9      	adds	r1, r7, #7
 8013060:	2364      	movs	r3, #100	@ 0x64
 8013062:	2201      	movs	r2, #1
 8013064:	4803      	ldr	r0, [pc, #12]	@ (8013074 <SPI_TxByte+0x30>)
 8013066:	f7fa fa21 	bl	800d4ac <HAL_SPI_Transmit>
}
 801306a:	bf00      	nop
 801306c:	3708      	adds	r7, #8
 801306e:	46bd      	mov	sp, r7
 8013070:	bd80      	pop	{r7, pc}
 8013072:	bf00      	nop
 8013074:	24000e00 	.word	0x24000e00

08013078 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8013078:	b580      	push	{r7, lr}
 801307a:	b082      	sub	sp, #8
 801307c:	af00      	add	r7, sp, #0
 801307e:	6078      	str	r0, [r7, #4]
 8013080:	460b      	mov	r3, r1
 8013082:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8013084:	bf00      	nop
 8013086:	4b08      	ldr	r3, [pc, #32]	@ (80130a8 <SPI_TxBuffer+0x30>)
 8013088:	681b      	ldr	r3, [r3, #0]
 801308a:	695b      	ldr	r3, [r3, #20]
 801308c:	f003 0302 	and.w	r3, r3, #2
 8013090:	2b02      	cmp	r3, #2
 8013092:	d1f8      	bne.n	8013086 <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8013094:	887a      	ldrh	r2, [r7, #2]
 8013096:	2364      	movs	r3, #100	@ 0x64
 8013098:	6879      	ldr	r1, [r7, #4]
 801309a:	4803      	ldr	r0, [pc, #12]	@ (80130a8 <SPI_TxBuffer+0x30>)
 801309c:	f7fa fa06 	bl	800d4ac <HAL_SPI_Transmit>
}
 80130a0:	bf00      	nop
 80130a2:	3708      	adds	r7, #8
 80130a4:	46bd      	mov	sp, r7
 80130a6:	bd80      	pop	{r7, pc}
 80130a8:	24000e00 	.word	0x24000e00

080130ac <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80130ac:	b580      	push	{r7, lr}
 80130ae:	b084      	sub	sp, #16
 80130b0:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80130b2:	23ff      	movs	r3, #255	@ 0xff
 80130b4:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80130b6:	bf00      	nop
 80130b8:	4b09      	ldr	r3, [pc, #36]	@ (80130e0 <SPI_RxByte+0x34>)
 80130ba:	681b      	ldr	r3, [r3, #0]
 80130bc:	695b      	ldr	r3, [r3, #20]
 80130be:	f003 0302 	and.w	r3, r3, #2
 80130c2:	2b02      	cmp	r3, #2
 80130c4:	d1f8      	bne.n	80130b8 <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80130c6:	1dba      	adds	r2, r7, #6
 80130c8:	1df9      	adds	r1, r7, #7
 80130ca:	2364      	movs	r3, #100	@ 0x64
 80130cc:	9300      	str	r3, [sp, #0]
 80130ce:	2301      	movs	r3, #1
 80130d0:	4803      	ldr	r0, [pc, #12]	@ (80130e0 <SPI_RxByte+0x34>)
 80130d2:	f7fa fe4b 	bl	800dd6c <HAL_SPI_TransmitReceive>
  return data;
 80130d6:	79bb      	ldrb	r3, [r7, #6]
}
 80130d8:	4618      	mov	r0, r3
 80130da:	3708      	adds	r7, #8
 80130dc:	46bd      	mov	sp, r7
 80130de:	bd80      	pop	{r7, pc}
 80130e0:	24000e00 	.word	0x24000e00

080130e4 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 80130e4:	b580      	push	{r7, lr}
 80130e6:	b082      	sub	sp, #8
 80130e8:	af00      	add	r7, sp, #0
 80130ea:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 80130ec:	f7ff ffde 	bl	80130ac <SPI_RxByte>
 80130f0:	4603      	mov	r3, r0
 80130f2:	461a      	mov	r2, r3
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	701a      	strb	r2, [r3, #0]
}
 80130f8:	bf00      	nop
 80130fa:	3708      	adds	r7, #8
 80130fc:	46bd      	mov	sp, r7
 80130fe:	bd80      	pop	{r7, pc}

08013100 <SD_ReadyWait>:

//-----[ SD Card Functions ]-----

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8013100:	b580      	push	{r7, lr}
 8013102:	b082      	sub	sp, #8
 8013104:	af00      	add	r7, sp, #0
  uint8_t res;
  /* timeout 500ms */
  Timer2 = 500;
 8013106:	4b0a      	ldr	r3, [pc, #40]	@ (8013130 <SD_ReadyWait+0x30>)
 8013108:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 801310c:	801a      	strh	r2, [r3, #0]
  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 801310e:	f7ff ffcd 	bl	80130ac <SPI_RxByte>
 8013112:	4603      	mov	r3, r0
 8013114:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8013116:	79fb      	ldrb	r3, [r7, #7]
 8013118:	2bff      	cmp	r3, #255	@ 0xff
 801311a:	d003      	beq.n	8013124 <SD_ReadyWait+0x24>
 801311c:	4b04      	ldr	r3, [pc, #16]	@ (8013130 <SD_ReadyWait+0x30>)
 801311e:	881b      	ldrh	r3, [r3, #0]
 8013120:	2b00      	cmp	r3, #0
 8013122:	d1f4      	bne.n	801310e <SD_ReadyWait+0xe>
  return res;
 8013124:	79fb      	ldrb	r3, [r7, #7]
}
 8013126:	4618      	mov	r0, r3
 8013128:	3708      	adds	r7, #8
 801312a:	46bd      	mov	sp, r7
 801312c:	bd80      	pop	{r7, pc}
 801312e:	bf00      	nop
 8013130:	240029ca 	.word	0x240029ca

08013134 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8013134:	b580      	push	{r7, lr}
 8013136:	b084      	sub	sp, #16
 8013138:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 801313a:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 801313e:	60fb      	str	r3, [r7, #12]
  /* transmit bytes to wake up */
  DESELECT();
 8013140:	f7ff ff74 	bl	801302c <DESELECT>
  for(int i = 0; i < 10; i++)
 8013144:	2300      	movs	r3, #0
 8013146:	60bb      	str	r3, [r7, #8]
 8013148:	e005      	b.n	8013156 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 801314a:	20ff      	movs	r0, #255	@ 0xff
 801314c:	f7ff ff7a 	bl	8013044 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8013150:	68bb      	ldr	r3, [r7, #8]
 8013152:	3301      	adds	r3, #1
 8013154:	60bb      	str	r3, [r7, #8]
 8013156:	68bb      	ldr	r3, [r7, #8]
 8013158:	2b09      	cmp	r3, #9
 801315a:	ddf6      	ble.n	801314a <SD_PowerOn+0x16>
  }
  /* slave select */
  SELECT();
 801315c:	f7ff ff5a 	bl	8013014 <SELECT>
  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 8013160:	2340      	movs	r3, #64	@ 0x40
 8013162:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 8013164:	2300      	movs	r3, #0
 8013166:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 8013168:	2300      	movs	r3, #0
 801316a:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 801316c:	2300      	movs	r3, #0
 801316e:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 8013170:	2300      	movs	r3, #0
 8013172:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;
 8013174:	2395      	movs	r3, #149	@ 0x95
 8013176:	717b      	strb	r3, [r7, #5]
  SPI_TxBuffer(args, sizeof(args));
 8013178:	463b      	mov	r3, r7
 801317a:	2106      	movs	r1, #6
 801317c:	4618      	mov	r0, r3
 801317e:	f7ff ff7b 	bl	8013078 <SPI_TxBuffer>
  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 8013182:	e002      	b.n	801318a <SD_PowerOn+0x56>
  {
    cnt--;
 8013184:	68fb      	ldr	r3, [r7, #12]
 8013186:	3b01      	subs	r3, #1
 8013188:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 801318a:	f7ff ff8f 	bl	80130ac <SPI_RxByte>
 801318e:	4603      	mov	r3, r0
 8013190:	2b01      	cmp	r3, #1
 8013192:	d002      	beq.n	801319a <SD_PowerOn+0x66>
 8013194:	68fb      	ldr	r3, [r7, #12]
 8013196:	2b00      	cmp	r3, #0
 8013198:	d1f4      	bne.n	8013184 <SD_PowerOn+0x50>
  }
  DESELECT();
 801319a:	f7ff ff47 	bl	801302c <DESELECT>
  SPI_TxByte(0XFF);
 801319e:	20ff      	movs	r0, #255	@ 0xff
 80131a0:	f7ff ff50 	bl	8013044 <SPI_TxByte>
  PowerFlag = 1;
 80131a4:	4b03      	ldr	r3, [pc, #12]	@ (80131b4 <SD_PowerOn+0x80>)
 80131a6:	2201      	movs	r2, #1
 80131a8:	701a      	strb	r2, [r3, #0]
}
 80131aa:	bf00      	nop
 80131ac:	3710      	adds	r7, #16
 80131ae:	46bd      	mov	sp, r7
 80131b0:	bd80      	pop	{r7, pc}
 80131b2:	bf00      	nop
 80131b4:	240029cd 	.word	0x240029cd

080131b8 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 80131b8:	b480      	push	{r7}
 80131ba:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 80131bc:	4b03      	ldr	r3, [pc, #12]	@ (80131cc <SD_PowerOff+0x14>)
 80131be:	2200      	movs	r2, #0
 80131c0:	701a      	strb	r2, [r3, #0]
}
 80131c2:	bf00      	nop
 80131c4:	46bd      	mov	sp, r7
 80131c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131ca:	4770      	bx	lr
 80131cc:	240029cd 	.word	0x240029cd

080131d0 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 80131d0:	b480      	push	{r7}
 80131d2:	af00      	add	r7, sp, #0
  return PowerFlag;
 80131d4:	4b03      	ldr	r3, [pc, #12]	@ (80131e4 <SD_CheckPower+0x14>)
 80131d6:	781b      	ldrb	r3, [r3, #0]
}
 80131d8:	4618      	mov	r0, r3
 80131da:	46bd      	mov	sp, r7
 80131dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131e0:	4770      	bx	lr
 80131e2:	bf00      	nop
 80131e4:	240029cd 	.word	0x240029cd

080131e8 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80131e8:	b580      	push	{r7, lr}
 80131ea:	b084      	sub	sp, #16
 80131ec:	af00      	add	r7, sp, #0
 80131ee:	6078      	str	r0, [r7, #4]
 80131f0:	6039      	str	r1, [r7, #0]
  uint8_t token;
  /* timeout 200ms */
  Timer1 = 200;
 80131f2:	4b13      	ldr	r3, [pc, #76]	@ (8013240 <SD_RxDataBlock+0x58>)
 80131f4:	22c8      	movs	r2, #200	@ 0xc8
 80131f6:	801a      	strh	r2, [r3, #0]
  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 80131f8:	f7ff ff58 	bl	80130ac <SPI_RxByte>
 80131fc:	4603      	mov	r3, r0
 80131fe:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8013200:	7bfb      	ldrb	r3, [r7, #15]
 8013202:	2bff      	cmp	r3, #255	@ 0xff
 8013204:	d103      	bne.n	801320e <SD_RxDataBlock+0x26>
 8013206:	4b0e      	ldr	r3, [pc, #56]	@ (8013240 <SD_RxDataBlock+0x58>)
 8013208:	881b      	ldrh	r3, [r3, #0]
 801320a:	2b00      	cmp	r3, #0
 801320c:	d1f4      	bne.n	80131f8 <SD_RxDataBlock+0x10>
  /* invalid response */
  if(token != 0xFE) return FALSE;
 801320e:	7bfb      	ldrb	r3, [r7, #15]
 8013210:	2bfe      	cmp	r3, #254	@ 0xfe
 8013212:	d001      	beq.n	8013218 <SD_RxDataBlock+0x30>
 8013214:	2300      	movs	r3, #0
 8013216:	e00f      	b.n	8013238 <SD_RxDataBlock+0x50>
  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	1c5a      	adds	r2, r3, #1
 801321c:	607a      	str	r2, [r7, #4]
 801321e:	4618      	mov	r0, r3
 8013220:	f7ff ff60 	bl	80130e4 <SPI_RxBytePtr>
  } while(len--);
 8013224:	683b      	ldr	r3, [r7, #0]
 8013226:	1e5a      	subs	r2, r3, #1
 8013228:	603a      	str	r2, [r7, #0]
 801322a:	2b00      	cmp	r3, #0
 801322c:	d1f4      	bne.n	8013218 <SD_RxDataBlock+0x30>
  /* discard CRC */
  SPI_RxByte();
 801322e:	f7ff ff3d 	bl	80130ac <SPI_RxByte>
  SPI_RxByte();
 8013232:	f7ff ff3b 	bl	80130ac <SPI_RxByte>
  return TRUE;
 8013236:	2301      	movs	r3, #1
}
 8013238:	4618      	mov	r0, r3
 801323a:	3710      	adds	r7, #16
 801323c:	46bd      	mov	sp, r7
 801323e:	bd80      	pop	{r7, pc}
 8013240:	240029c8 	.word	0x240029c8

08013244 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8013244:	b580      	push	{r7, lr}
 8013246:	b084      	sub	sp, #16
 8013248:	af00      	add	r7, sp, #0
 801324a:	6078      	str	r0, [r7, #4]
 801324c:	460b      	mov	r3, r1
 801324e:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 8013250:	2300      	movs	r3, #0
 8013252:	73bb      	strb	r3, [r7, #14]
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 8013254:	f7ff ff54 	bl	8013100 <SD_ReadyWait>
 8013258:	4603      	mov	r3, r0
 801325a:	2bff      	cmp	r3, #255	@ 0xff
 801325c:	d001      	beq.n	8013262 <SD_TxDataBlock+0x1e>
 801325e:	2300      	movs	r3, #0
 8013260:	e02f      	b.n	80132c2 <SD_TxDataBlock+0x7e>
  /* transmit token */
  SPI_TxByte(token);
 8013262:	78fb      	ldrb	r3, [r7, #3]
 8013264:	4618      	mov	r0, r3
 8013266:	f7ff feed 	bl	8013044 <SPI_TxByte>
  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 801326a:	78fb      	ldrb	r3, [r7, #3]
 801326c:	2bfd      	cmp	r3, #253	@ 0xfd
 801326e:	d020      	beq.n	80132b2 <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 8013270:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8013274:	6878      	ldr	r0, [r7, #4]
 8013276:	f7ff feff 	bl	8013078 <SPI_TxBuffer>
    /* discard CRC */
    SPI_RxByte();
 801327a:	f7ff ff17 	bl	80130ac <SPI_RxByte>
    SPI_RxByte();
 801327e:	f7ff ff15 	bl	80130ac <SPI_RxByte>
    /* receive response */
    while (i <= 64)
 8013282:	e00b      	b.n	801329c <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 8013284:	f7ff ff12 	bl	80130ac <SPI_RxByte>
 8013288:	4603      	mov	r3, r0
 801328a:	73fb      	strb	r3, [r7, #15]
      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 801328c:	7bfb      	ldrb	r3, [r7, #15]
 801328e:	f003 031f 	and.w	r3, r3, #31
 8013292:	2b05      	cmp	r3, #5
 8013294:	d006      	beq.n	80132a4 <SD_TxDataBlock+0x60>
      i++;
 8013296:	7bbb      	ldrb	r3, [r7, #14]
 8013298:	3301      	adds	r3, #1
 801329a:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 801329c:	7bbb      	ldrb	r3, [r7, #14]
 801329e:	2b40      	cmp	r3, #64	@ 0x40
 80132a0:	d9f0      	bls.n	8013284 <SD_TxDataBlock+0x40>
 80132a2:	e000      	b.n	80132a6 <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 80132a4:	bf00      	nop
    }
    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 80132a6:	bf00      	nop
 80132a8:	f7ff ff00 	bl	80130ac <SPI_RxByte>
 80132ac:	4603      	mov	r3, r0
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	d0fa      	beq.n	80132a8 <SD_TxDataBlock+0x64>
  }
  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 80132b2:	7bfb      	ldrb	r3, [r7, #15]
 80132b4:	f003 031f 	and.w	r3, r3, #31
 80132b8:	2b05      	cmp	r3, #5
 80132ba:	d101      	bne.n	80132c0 <SD_TxDataBlock+0x7c>
 80132bc:	2301      	movs	r3, #1
 80132be:	e000      	b.n	80132c2 <SD_TxDataBlock+0x7e>

  return FALSE;
 80132c0:	2300      	movs	r3, #0
}
 80132c2:	4618      	mov	r0, r3
 80132c4:	3710      	adds	r7, #16
 80132c6:	46bd      	mov	sp, r7
 80132c8:	bd80      	pop	{r7, pc}

080132ca <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80132ca:	b580      	push	{r7, lr}
 80132cc:	b084      	sub	sp, #16
 80132ce:	af00      	add	r7, sp, #0
 80132d0:	4603      	mov	r3, r0
 80132d2:	6039      	str	r1, [r7, #0]
 80132d4:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 80132d6:	f7ff ff13 	bl	8013100 <SD_ReadyWait>
 80132da:	4603      	mov	r3, r0
 80132dc:	2bff      	cmp	r3, #255	@ 0xff
 80132de:	d001      	beq.n	80132e4 <SD_SendCmd+0x1a>
 80132e0:	23ff      	movs	r3, #255	@ 0xff
 80132e2:	e042      	b.n	801336a <SD_SendCmd+0xa0>
  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 80132e4:	79fb      	ldrb	r3, [r7, #7]
 80132e6:	4618      	mov	r0, r3
 80132e8:	f7ff feac 	bl	8013044 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 80132ec:	683b      	ldr	r3, [r7, #0]
 80132ee:	0e1b      	lsrs	r3, r3, #24
 80132f0:	b2db      	uxtb	r3, r3
 80132f2:	4618      	mov	r0, r3
 80132f4:	f7ff fea6 	bl	8013044 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 80132f8:	683b      	ldr	r3, [r7, #0]
 80132fa:	0c1b      	lsrs	r3, r3, #16
 80132fc:	b2db      	uxtb	r3, r3
 80132fe:	4618      	mov	r0, r3
 8013300:	f7ff fea0 	bl	8013044 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 8013304:	683b      	ldr	r3, [r7, #0]
 8013306:	0a1b      	lsrs	r3, r3, #8
 8013308:	b2db      	uxtb	r3, r3
 801330a:	4618      	mov	r0, r3
 801330c:	f7ff fe9a 	bl	8013044 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 8013310:	683b      	ldr	r3, [r7, #0]
 8013312:	b2db      	uxtb	r3, r3
 8013314:	4618      	mov	r0, r3
 8013316:	f7ff fe95 	bl	8013044 <SPI_TxByte>
  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 801331a:	79fb      	ldrb	r3, [r7, #7]
 801331c:	2b40      	cmp	r3, #64	@ 0x40
 801331e:	d102      	bne.n	8013326 <SD_SendCmd+0x5c>
 8013320:	2395      	movs	r3, #149	@ 0x95
 8013322:	73fb      	strb	r3, [r7, #15]
 8013324:	e007      	b.n	8013336 <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 8013326:	79fb      	ldrb	r3, [r7, #7]
 8013328:	2b48      	cmp	r3, #72	@ 0x48
 801332a:	d102      	bne.n	8013332 <SD_SendCmd+0x68>
 801332c:	2387      	movs	r3, #135	@ 0x87
 801332e:	73fb      	strb	r3, [r7, #15]
 8013330:	e001      	b.n	8013336 <SD_SendCmd+0x6c>
  else crc = 1;
 8013332:	2301      	movs	r3, #1
 8013334:	73fb      	strb	r3, [r7, #15]
  /* transmit CRC */
  SPI_TxByte(crc);
 8013336:	7bfb      	ldrb	r3, [r7, #15]
 8013338:	4618      	mov	r0, r3
 801333a:	f7ff fe83 	bl	8013044 <SPI_TxByte>
  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 801333e:	79fb      	ldrb	r3, [r7, #7]
 8013340:	2b4c      	cmp	r3, #76	@ 0x4c
 8013342:	d101      	bne.n	8013348 <SD_SendCmd+0x7e>
 8013344:	f7ff feb2 	bl	80130ac <SPI_RxByte>
  /* receive response */
  uint8_t n = 10;
 8013348:	230a      	movs	r3, #10
 801334a:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 801334c:	f7ff feae 	bl	80130ac <SPI_RxByte>
 8013350:	4603      	mov	r3, r0
 8013352:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8013354:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8013358:	2b00      	cmp	r3, #0
 801335a:	da05      	bge.n	8013368 <SD_SendCmd+0x9e>
 801335c:	7bbb      	ldrb	r3, [r7, #14]
 801335e:	3b01      	subs	r3, #1
 8013360:	73bb      	strb	r3, [r7, #14]
 8013362:	7bbb      	ldrb	r3, [r7, #14]
 8013364:	2b00      	cmp	r3, #0
 8013366:	d1f1      	bne.n	801334c <SD_SendCmd+0x82>

  return res;
 8013368:	7b7b      	ldrb	r3, [r7, #13]
}
 801336a:	4618      	mov	r0, r3
 801336c:	3710      	adds	r7, #16
 801336e:	46bd      	mov	sp, r7
 8013370:	bd80      	pop	{r7, pc}
	...

08013374 <SD_disk_initialize>:

//-----[ user_diskio.c Functions ]-----

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8013374:	b590      	push	{r4, r7, lr}
 8013376:	b085      	sub	sp, #20
 8013378:	af00      	add	r7, sp, #0
 801337a:	4603      	mov	r3, r0
 801337c:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 801337e:	79fb      	ldrb	r3, [r7, #7]
 8013380:	2b00      	cmp	r3, #0
 8013382:	d001      	beq.n	8013388 <SD_disk_initialize+0x14>
 8013384:	2301      	movs	r3, #1
 8013386:	e0d1      	b.n	801352c <SD_disk_initialize+0x1b8>
  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 8013388:	4b6a      	ldr	r3, [pc, #424]	@ (8013534 <SD_disk_initialize+0x1c0>)
 801338a:	781b      	ldrb	r3, [r3, #0]
 801338c:	b2db      	uxtb	r3, r3
 801338e:	f003 0302 	and.w	r3, r3, #2
 8013392:	2b00      	cmp	r3, #0
 8013394:	d003      	beq.n	801339e <SD_disk_initialize+0x2a>
 8013396:	4b67      	ldr	r3, [pc, #412]	@ (8013534 <SD_disk_initialize+0x1c0>)
 8013398:	781b      	ldrb	r3, [r3, #0]
 801339a:	b2db      	uxtb	r3, r3
 801339c:	e0c6      	b.n	801352c <SD_disk_initialize+0x1b8>
  /* power on */
  SD_PowerOn();
 801339e:	f7ff fec9 	bl	8013134 <SD_PowerOn>
  /* slave select */
  SELECT();
 80133a2:	f7ff fe37 	bl	8013014 <SELECT>
  /* check disk type */
  type = 0;
 80133a6:	2300      	movs	r3, #0
 80133a8:	73bb      	strb	r3, [r7, #14]
  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 80133aa:	2100      	movs	r1, #0
 80133ac:	2040      	movs	r0, #64	@ 0x40
 80133ae:	f7ff ff8c 	bl	80132ca <SD_SendCmd>
 80133b2:	4603      	mov	r3, r0
 80133b4:	2b01      	cmp	r3, #1
 80133b6:	f040 80a1 	bne.w	80134fc <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 80133ba:	4b5f      	ldr	r3, [pc, #380]	@ (8013538 <SD_disk_initialize+0x1c4>)
 80133bc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80133c0:	801a      	strh	r2, [r3, #0]
    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80133c2:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80133c6:	2048      	movs	r0, #72	@ 0x48
 80133c8:	f7ff ff7f 	bl	80132ca <SD_SendCmd>
 80133cc:	4603      	mov	r3, r0
 80133ce:	2b01      	cmp	r3, #1
 80133d0:	d155      	bne.n	801347e <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 80133d2:	2300      	movs	r3, #0
 80133d4:	73fb      	strb	r3, [r7, #15]
 80133d6:	e00c      	b.n	80133f2 <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 80133d8:	7bfc      	ldrb	r4, [r7, #15]
 80133da:	f7ff fe67 	bl	80130ac <SPI_RxByte>
 80133de:	4603      	mov	r3, r0
 80133e0:	461a      	mov	r2, r3
 80133e2:	f104 0310 	add.w	r3, r4, #16
 80133e6:	443b      	add	r3, r7
 80133e8:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 80133ec:	7bfb      	ldrb	r3, [r7, #15]
 80133ee:	3301      	adds	r3, #1
 80133f0:	73fb      	strb	r3, [r7, #15]
 80133f2:	7bfb      	ldrb	r3, [r7, #15]
 80133f4:	2b03      	cmp	r3, #3
 80133f6:	d9ef      	bls.n	80133d8 <SD_disk_initialize+0x64>
      }
      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80133f8:	7abb      	ldrb	r3, [r7, #10]
 80133fa:	2b01      	cmp	r3, #1
 80133fc:	d17e      	bne.n	80134fc <SD_disk_initialize+0x188>
 80133fe:	7afb      	ldrb	r3, [r7, #11]
 8013400:	2baa      	cmp	r3, #170	@ 0xaa
 8013402:	d17b      	bne.n	80134fc <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8013404:	2100      	movs	r1, #0
 8013406:	2077      	movs	r0, #119	@ 0x77
 8013408:	f7ff ff5f 	bl	80132ca <SD_SendCmd>
 801340c:	4603      	mov	r3, r0
 801340e:	2b01      	cmp	r3, #1
 8013410:	d807      	bhi.n	8013422 <SD_disk_initialize+0xae>
 8013412:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8013416:	2069      	movs	r0, #105	@ 0x69
 8013418:	f7ff ff57 	bl	80132ca <SD_SendCmd>
 801341c:	4603      	mov	r3, r0
 801341e:	2b00      	cmp	r3, #0
 8013420:	d004      	beq.n	801342c <SD_disk_initialize+0xb8>
        } while (Timer1);
 8013422:	4b45      	ldr	r3, [pc, #276]	@ (8013538 <SD_disk_initialize+0x1c4>)
 8013424:	881b      	ldrh	r3, [r3, #0]
 8013426:	2b00      	cmp	r3, #0
 8013428:	d1ec      	bne.n	8013404 <SD_disk_initialize+0x90>
 801342a:	e000      	b.n	801342e <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 801342c:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 801342e:	4b42      	ldr	r3, [pc, #264]	@ (8013538 <SD_disk_initialize+0x1c4>)
 8013430:	881b      	ldrh	r3, [r3, #0]
 8013432:	2b00      	cmp	r3, #0
 8013434:	d062      	beq.n	80134fc <SD_disk_initialize+0x188>
 8013436:	2100      	movs	r1, #0
 8013438:	207a      	movs	r0, #122	@ 0x7a
 801343a:	f7ff ff46 	bl	80132ca <SD_SendCmd>
 801343e:	4603      	mov	r3, r0
 8013440:	2b00      	cmp	r3, #0
 8013442:	d15b      	bne.n	80134fc <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8013444:	2300      	movs	r3, #0
 8013446:	73fb      	strb	r3, [r7, #15]
 8013448:	e00c      	b.n	8013464 <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 801344a:	7bfc      	ldrb	r4, [r7, #15]
 801344c:	f7ff fe2e 	bl	80130ac <SPI_RxByte>
 8013450:	4603      	mov	r3, r0
 8013452:	461a      	mov	r2, r3
 8013454:	f104 0310 	add.w	r3, r4, #16
 8013458:	443b      	add	r3, r7
 801345a:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 801345e:	7bfb      	ldrb	r3, [r7, #15]
 8013460:	3301      	adds	r3, #1
 8013462:	73fb      	strb	r3, [r7, #15]
 8013464:	7bfb      	ldrb	r3, [r7, #15]
 8013466:	2b03      	cmp	r3, #3
 8013468:	d9ef      	bls.n	801344a <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 801346a:	7a3b      	ldrb	r3, [r7, #8]
 801346c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013470:	2b00      	cmp	r3, #0
 8013472:	d001      	beq.n	8013478 <SD_disk_initialize+0x104>
 8013474:	230c      	movs	r3, #12
 8013476:	e000      	b.n	801347a <SD_disk_initialize+0x106>
 8013478:	2304      	movs	r3, #4
 801347a:	73bb      	strb	r3, [r7, #14]
 801347c:	e03e      	b.n	80134fc <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 801347e:	2100      	movs	r1, #0
 8013480:	2077      	movs	r0, #119	@ 0x77
 8013482:	f7ff ff22 	bl	80132ca <SD_SendCmd>
 8013486:	4603      	mov	r3, r0
 8013488:	2b01      	cmp	r3, #1
 801348a:	d808      	bhi.n	801349e <SD_disk_initialize+0x12a>
 801348c:	2100      	movs	r1, #0
 801348e:	2069      	movs	r0, #105	@ 0x69
 8013490:	f7ff ff1b 	bl	80132ca <SD_SendCmd>
 8013494:	4603      	mov	r3, r0
 8013496:	2b01      	cmp	r3, #1
 8013498:	d801      	bhi.n	801349e <SD_disk_initialize+0x12a>
 801349a:	2302      	movs	r3, #2
 801349c:	e000      	b.n	80134a0 <SD_disk_initialize+0x12c>
 801349e:	2301      	movs	r3, #1
 80134a0:	73bb      	strb	r3, [r7, #14]
      do
      {
        if (type == CT_SD1)
 80134a2:	7bbb      	ldrb	r3, [r7, #14]
 80134a4:	2b02      	cmp	r3, #2
 80134a6:	d10e      	bne.n	80134c6 <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80134a8:	2100      	movs	r1, #0
 80134aa:	2077      	movs	r0, #119	@ 0x77
 80134ac:	f7ff ff0d 	bl	80132ca <SD_SendCmd>
 80134b0:	4603      	mov	r3, r0
 80134b2:	2b01      	cmp	r3, #1
 80134b4:	d80e      	bhi.n	80134d4 <SD_disk_initialize+0x160>
 80134b6:	2100      	movs	r1, #0
 80134b8:	2069      	movs	r0, #105	@ 0x69
 80134ba:	f7ff ff06 	bl	80132ca <SD_SendCmd>
 80134be:	4603      	mov	r3, r0
 80134c0:	2b00      	cmp	r3, #0
 80134c2:	d107      	bne.n	80134d4 <SD_disk_initialize+0x160>
 80134c4:	e00c      	b.n	80134e0 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80134c6:	2100      	movs	r1, #0
 80134c8:	2041      	movs	r0, #65	@ 0x41
 80134ca:	f7ff fefe 	bl	80132ca <SD_SendCmd>
 80134ce:	4603      	mov	r3, r0
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	d004      	beq.n	80134de <SD_disk_initialize+0x16a>
        }
      } while (Timer1);
 80134d4:	4b18      	ldr	r3, [pc, #96]	@ (8013538 <SD_disk_initialize+0x1c4>)
 80134d6:	881b      	ldrh	r3, [r3, #0]
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d1e2      	bne.n	80134a2 <SD_disk_initialize+0x12e>
 80134dc:	e000      	b.n	80134e0 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80134de:	bf00      	nop
      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80134e0:	4b15      	ldr	r3, [pc, #84]	@ (8013538 <SD_disk_initialize+0x1c4>)
 80134e2:	881b      	ldrh	r3, [r3, #0]
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	d007      	beq.n	80134f8 <SD_disk_initialize+0x184>
 80134e8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80134ec:	2050      	movs	r0, #80	@ 0x50
 80134ee:	f7ff feec 	bl	80132ca <SD_SendCmd>
 80134f2:	4603      	mov	r3, r0
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	d001      	beq.n	80134fc <SD_disk_initialize+0x188>
 80134f8:	2300      	movs	r3, #0
 80134fa:	73bb      	strb	r3, [r7, #14]
    }
  }
  CardType = type;
 80134fc:	4a0f      	ldr	r2, [pc, #60]	@ (801353c <SD_disk_initialize+0x1c8>)
 80134fe:	7bbb      	ldrb	r3, [r7, #14]
 8013500:	7013      	strb	r3, [r2, #0]
  /* Idle */
  DESELECT();
 8013502:	f7ff fd93 	bl	801302c <DESELECT>
  SPI_RxByte();
 8013506:	f7ff fdd1 	bl	80130ac <SPI_RxByte>
  /* Clear STA_NOINIT */
  if (type)
 801350a:	7bbb      	ldrb	r3, [r7, #14]
 801350c:	2b00      	cmp	r3, #0
 801350e:	d008      	beq.n	8013522 <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 8013510:	4b08      	ldr	r3, [pc, #32]	@ (8013534 <SD_disk_initialize+0x1c0>)
 8013512:	781b      	ldrb	r3, [r3, #0]
 8013514:	b2db      	uxtb	r3, r3
 8013516:	f023 0301 	bic.w	r3, r3, #1
 801351a:	b2da      	uxtb	r2, r3
 801351c:	4b05      	ldr	r3, [pc, #20]	@ (8013534 <SD_disk_initialize+0x1c0>)
 801351e:	701a      	strb	r2, [r3, #0]
 8013520:	e001      	b.n	8013526 <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8013522:	f7ff fe49 	bl	80131b8 <SD_PowerOff>
  }
  return Stat;
 8013526:	4b03      	ldr	r3, [pc, #12]	@ (8013534 <SD_disk_initialize+0x1c0>)
 8013528:	781b      	ldrb	r3, [r3, #0]
 801352a:	b2db      	uxtb	r3, r3
}
 801352c:	4618      	mov	r0, r3
 801352e:	3714      	adds	r7, #20
 8013530:	46bd      	mov	sp, r7
 8013532:	bd90      	pop	{r4, r7, pc}
 8013534:	240000c0 	.word	0x240000c0
 8013538:	240029c8 	.word	0x240029c8
 801353c:	240029cc 	.word	0x240029cc

08013540 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8013540:	b480      	push	{r7}
 8013542:	b083      	sub	sp, #12
 8013544:	af00      	add	r7, sp, #0
 8013546:	4603      	mov	r3, r0
 8013548:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 801354a:	79fb      	ldrb	r3, [r7, #7]
 801354c:	2b00      	cmp	r3, #0
 801354e:	d001      	beq.n	8013554 <SD_disk_status+0x14>
 8013550:	2301      	movs	r3, #1
 8013552:	e002      	b.n	801355a <SD_disk_status+0x1a>
  return Stat;
 8013554:	4b04      	ldr	r3, [pc, #16]	@ (8013568 <SD_disk_status+0x28>)
 8013556:	781b      	ldrb	r3, [r3, #0]
 8013558:	b2db      	uxtb	r3, r3
}
 801355a:	4618      	mov	r0, r3
 801355c:	370c      	adds	r7, #12
 801355e:	46bd      	mov	sp, r7
 8013560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013564:	4770      	bx	lr
 8013566:	bf00      	nop
 8013568:	240000c0 	.word	0x240000c0

0801356c <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 801356c:	b580      	push	{r7, lr}
 801356e:	b084      	sub	sp, #16
 8013570:	af00      	add	r7, sp, #0
 8013572:	60b9      	str	r1, [r7, #8]
 8013574:	607a      	str	r2, [r7, #4]
 8013576:	603b      	str	r3, [r7, #0]
 8013578:	4603      	mov	r3, r0
 801357a:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 801357c:	7bfb      	ldrb	r3, [r7, #15]
 801357e:	2b00      	cmp	r3, #0
 8013580:	d102      	bne.n	8013588 <SD_disk_read+0x1c>
 8013582:	683b      	ldr	r3, [r7, #0]
 8013584:	2b00      	cmp	r3, #0
 8013586:	d101      	bne.n	801358c <SD_disk_read+0x20>
 8013588:	2304      	movs	r3, #4
 801358a:	e051      	b.n	8013630 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801358c:	4b2a      	ldr	r3, [pc, #168]	@ (8013638 <SD_disk_read+0xcc>)
 801358e:	781b      	ldrb	r3, [r3, #0]
 8013590:	b2db      	uxtb	r3, r3
 8013592:	f003 0301 	and.w	r3, r3, #1
 8013596:	2b00      	cmp	r3, #0
 8013598:	d001      	beq.n	801359e <SD_disk_read+0x32>
 801359a:	2303      	movs	r3, #3
 801359c:	e048      	b.n	8013630 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 801359e:	4b27      	ldr	r3, [pc, #156]	@ (801363c <SD_disk_read+0xd0>)
 80135a0:	781b      	ldrb	r3, [r3, #0]
 80135a2:	f003 0304 	and.w	r3, r3, #4
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d102      	bne.n	80135b0 <SD_disk_read+0x44>
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	025b      	lsls	r3, r3, #9
 80135ae:	607b      	str	r3, [r7, #4]

  SELECT();
 80135b0:	f7ff fd30 	bl	8013014 <SELECT>

  if (count == 1)
 80135b4:	683b      	ldr	r3, [r7, #0]
 80135b6:	2b01      	cmp	r3, #1
 80135b8:	d111      	bne.n	80135de <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80135ba:	6879      	ldr	r1, [r7, #4]
 80135bc:	2051      	movs	r0, #81	@ 0x51
 80135be:	f7ff fe84 	bl	80132ca <SD_SendCmd>
 80135c2:	4603      	mov	r3, r0
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d129      	bne.n	801361c <SD_disk_read+0xb0>
 80135c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80135cc:	68b8      	ldr	r0, [r7, #8]
 80135ce:	f7ff fe0b 	bl	80131e8 <SD_RxDataBlock>
 80135d2:	4603      	mov	r3, r0
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d021      	beq.n	801361c <SD_disk_read+0xb0>
 80135d8:	2300      	movs	r3, #0
 80135da:	603b      	str	r3, [r7, #0]
 80135dc:	e01e      	b.n	801361c <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 80135de:	6879      	ldr	r1, [r7, #4]
 80135e0:	2052      	movs	r0, #82	@ 0x52
 80135e2:	f7ff fe72 	bl	80132ca <SD_SendCmd>
 80135e6:	4603      	mov	r3, r0
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	d117      	bne.n	801361c <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 80135ec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80135f0:	68b8      	ldr	r0, [r7, #8]
 80135f2:	f7ff fdf9 	bl	80131e8 <SD_RxDataBlock>
 80135f6:	4603      	mov	r3, r0
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	d00a      	beq.n	8013612 <SD_disk_read+0xa6>
        buff += 512;
 80135fc:	68bb      	ldr	r3, [r7, #8]
 80135fe:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8013602:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8013604:	683b      	ldr	r3, [r7, #0]
 8013606:	3b01      	subs	r3, #1
 8013608:	603b      	str	r3, [r7, #0]
 801360a:	683b      	ldr	r3, [r7, #0]
 801360c:	2b00      	cmp	r3, #0
 801360e:	d1ed      	bne.n	80135ec <SD_disk_read+0x80>
 8013610:	e000      	b.n	8013614 <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 8013612:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 8013614:	2100      	movs	r1, #0
 8013616:	204c      	movs	r0, #76	@ 0x4c
 8013618:	f7ff fe57 	bl	80132ca <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 801361c:	f7ff fd06 	bl	801302c <DESELECT>
  SPI_RxByte();
 8013620:	f7ff fd44 	bl	80130ac <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8013624:	683b      	ldr	r3, [r7, #0]
 8013626:	2b00      	cmp	r3, #0
 8013628:	bf14      	ite	ne
 801362a:	2301      	movne	r3, #1
 801362c:	2300      	moveq	r3, #0
 801362e:	b2db      	uxtb	r3, r3
}
 8013630:	4618      	mov	r0, r3
 8013632:	3710      	adds	r7, #16
 8013634:	46bd      	mov	sp, r7
 8013636:	bd80      	pop	{r7, pc}
 8013638:	240000c0 	.word	0x240000c0
 801363c:	240029cc 	.word	0x240029cc

08013640 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8013640:	b580      	push	{r7, lr}
 8013642:	b084      	sub	sp, #16
 8013644:	af00      	add	r7, sp, #0
 8013646:	60b9      	str	r1, [r7, #8]
 8013648:	607a      	str	r2, [r7, #4]
 801364a:	603b      	str	r3, [r7, #0]
 801364c:	4603      	mov	r3, r0
 801364e:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8013650:	7bfb      	ldrb	r3, [r7, #15]
 8013652:	2b00      	cmp	r3, #0
 8013654:	d102      	bne.n	801365c <SD_disk_write+0x1c>
 8013656:	683b      	ldr	r3, [r7, #0]
 8013658:	2b00      	cmp	r3, #0
 801365a:	d101      	bne.n	8013660 <SD_disk_write+0x20>
 801365c:	2304      	movs	r3, #4
 801365e:	e06b      	b.n	8013738 <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8013660:	4b37      	ldr	r3, [pc, #220]	@ (8013740 <SD_disk_write+0x100>)
 8013662:	781b      	ldrb	r3, [r3, #0]
 8013664:	b2db      	uxtb	r3, r3
 8013666:	f003 0301 	and.w	r3, r3, #1
 801366a:	2b00      	cmp	r3, #0
 801366c:	d001      	beq.n	8013672 <SD_disk_write+0x32>
 801366e:	2303      	movs	r3, #3
 8013670:	e062      	b.n	8013738 <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 8013672:	4b33      	ldr	r3, [pc, #204]	@ (8013740 <SD_disk_write+0x100>)
 8013674:	781b      	ldrb	r3, [r3, #0]
 8013676:	b2db      	uxtb	r3, r3
 8013678:	f003 0304 	and.w	r3, r3, #4
 801367c:	2b00      	cmp	r3, #0
 801367e:	d001      	beq.n	8013684 <SD_disk_write+0x44>
 8013680:	2302      	movs	r3, #2
 8013682:	e059      	b.n	8013738 <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8013684:	4b2f      	ldr	r3, [pc, #188]	@ (8013744 <SD_disk_write+0x104>)
 8013686:	781b      	ldrb	r3, [r3, #0]
 8013688:	f003 0304 	and.w	r3, r3, #4
 801368c:	2b00      	cmp	r3, #0
 801368e:	d102      	bne.n	8013696 <SD_disk_write+0x56>
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	025b      	lsls	r3, r3, #9
 8013694:	607b      	str	r3, [r7, #4]

  SELECT();
 8013696:	f7ff fcbd 	bl	8013014 <SELECT>

  if (count == 1)
 801369a:	683b      	ldr	r3, [r7, #0]
 801369c:	2b01      	cmp	r3, #1
 801369e:	d110      	bne.n	80136c2 <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80136a0:	6879      	ldr	r1, [r7, #4]
 80136a2:	2058      	movs	r0, #88	@ 0x58
 80136a4:	f7ff fe11 	bl	80132ca <SD_SendCmd>
 80136a8:	4603      	mov	r3, r0
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	d13a      	bne.n	8013724 <SD_disk_write+0xe4>
 80136ae:	21fe      	movs	r1, #254	@ 0xfe
 80136b0:	68b8      	ldr	r0, [r7, #8]
 80136b2:	f7ff fdc7 	bl	8013244 <SD_TxDataBlock>
 80136b6:	4603      	mov	r3, r0
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	d033      	beq.n	8013724 <SD_disk_write+0xe4>
      count = 0;
 80136bc:	2300      	movs	r3, #0
 80136be:	603b      	str	r3, [r7, #0]
 80136c0:	e030      	b.n	8013724 <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 80136c2:	4b20      	ldr	r3, [pc, #128]	@ (8013744 <SD_disk_write+0x104>)
 80136c4:	781b      	ldrb	r3, [r3, #0]
 80136c6:	f003 0302 	and.w	r3, r3, #2
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	d007      	beq.n	80136de <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 80136ce:	2100      	movs	r1, #0
 80136d0:	2077      	movs	r0, #119	@ 0x77
 80136d2:	f7ff fdfa 	bl	80132ca <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 80136d6:	6839      	ldr	r1, [r7, #0]
 80136d8:	2057      	movs	r0, #87	@ 0x57
 80136da:	f7ff fdf6 	bl	80132ca <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 80136de:	6879      	ldr	r1, [r7, #4]
 80136e0:	2059      	movs	r0, #89	@ 0x59
 80136e2:	f7ff fdf2 	bl	80132ca <SD_SendCmd>
 80136e6:	4603      	mov	r3, r0
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	d11b      	bne.n	8013724 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 80136ec:	21fc      	movs	r1, #252	@ 0xfc
 80136ee:	68b8      	ldr	r0, [r7, #8]
 80136f0:	f7ff fda8 	bl	8013244 <SD_TxDataBlock>
 80136f4:	4603      	mov	r3, r0
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	d00a      	beq.n	8013710 <SD_disk_write+0xd0>
        buff += 512;
 80136fa:	68bb      	ldr	r3, [r7, #8]
 80136fc:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8013700:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8013702:	683b      	ldr	r3, [r7, #0]
 8013704:	3b01      	subs	r3, #1
 8013706:	603b      	str	r3, [r7, #0]
 8013708:	683b      	ldr	r3, [r7, #0]
 801370a:	2b00      	cmp	r3, #0
 801370c:	d1ee      	bne.n	80136ec <SD_disk_write+0xac>
 801370e:	e000      	b.n	8013712 <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8013710:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 8013712:	21fd      	movs	r1, #253	@ 0xfd
 8013714:	2000      	movs	r0, #0
 8013716:	f7ff fd95 	bl	8013244 <SD_TxDataBlock>
 801371a:	4603      	mov	r3, r0
 801371c:	2b00      	cmp	r3, #0
 801371e:	d101      	bne.n	8013724 <SD_disk_write+0xe4>
      {
        count = 1;
 8013720:	2301      	movs	r3, #1
 8013722:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 8013724:	f7ff fc82 	bl	801302c <DESELECT>
  SPI_RxByte();
 8013728:	f7ff fcc0 	bl	80130ac <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 801372c:	683b      	ldr	r3, [r7, #0]
 801372e:	2b00      	cmp	r3, #0
 8013730:	bf14      	ite	ne
 8013732:	2301      	movne	r3, #1
 8013734:	2300      	moveq	r3, #0
 8013736:	b2db      	uxtb	r3, r3
}
 8013738:	4618      	mov	r0, r3
 801373a:	3710      	adds	r7, #16
 801373c:	46bd      	mov	sp, r7
 801373e:	bd80      	pop	{r7, pc}
 8013740:	240000c0 	.word	0x240000c0
 8013744:	240029cc 	.word	0x240029cc

08013748 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8013748:	b590      	push	{r4, r7, lr}
 801374a:	b08b      	sub	sp, #44	@ 0x2c
 801374c:	af00      	add	r7, sp, #0
 801374e:	4603      	mov	r3, r0
 8013750:	603a      	str	r2, [r7, #0]
 8013752:	71fb      	strb	r3, [r7, #7]
 8013754:	460b      	mov	r3, r1
 8013756:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 8013758:	683b      	ldr	r3, [r7, #0]
 801375a:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 801375c:	79fb      	ldrb	r3, [r7, #7]
 801375e:	2b00      	cmp	r3, #0
 8013760:	d001      	beq.n	8013766 <SD_disk_ioctl+0x1e>
 8013762:	2304      	movs	r3, #4
 8013764:	e113      	b.n	801398e <SD_disk_ioctl+0x246>
  res = RES_ERROR;
 8013766:	2301      	movs	r3, #1
 8013768:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 801376c:	79bb      	ldrb	r3, [r7, #6]
 801376e:	2b05      	cmp	r3, #5
 8013770:	d124      	bne.n	80137bc <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 8013772:	6a3b      	ldr	r3, [r7, #32]
 8013774:	781b      	ldrb	r3, [r3, #0]
 8013776:	2b02      	cmp	r3, #2
 8013778:	d012      	beq.n	80137a0 <SD_disk_ioctl+0x58>
 801377a:	2b02      	cmp	r3, #2
 801377c:	dc1a      	bgt.n	80137b4 <SD_disk_ioctl+0x6c>
 801377e:	2b00      	cmp	r3, #0
 8013780:	d002      	beq.n	8013788 <SD_disk_ioctl+0x40>
 8013782:	2b01      	cmp	r3, #1
 8013784:	d006      	beq.n	8013794 <SD_disk_ioctl+0x4c>
 8013786:	e015      	b.n	80137b4 <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 8013788:	f7ff fd16 	bl	80131b8 <SD_PowerOff>
      res = RES_OK;
 801378c:	2300      	movs	r3, #0
 801378e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8013792:	e0fa      	b.n	801398a <SD_disk_ioctl+0x242>
    case 1:
      SD_PowerOn();   /* Power On */
 8013794:	f7ff fcce 	bl	8013134 <SD_PowerOn>
      res = RES_OK;
 8013798:	2300      	movs	r3, #0
 801379a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 801379e:	e0f4      	b.n	801398a <SD_disk_ioctl+0x242>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 80137a0:	6a3b      	ldr	r3, [r7, #32]
 80137a2:	1c5c      	adds	r4, r3, #1
 80137a4:	f7ff fd14 	bl	80131d0 <SD_CheckPower>
 80137a8:	4603      	mov	r3, r0
 80137aa:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 80137ac:	2300      	movs	r3, #0
 80137ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80137b2:	e0ea      	b.n	801398a <SD_disk_ioctl+0x242>
    default:
      res = RES_PARERR;
 80137b4:	2304      	movs	r3, #4
 80137b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80137ba:	e0e6      	b.n	801398a <SD_disk_ioctl+0x242>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT){
 80137bc:	4b76      	ldr	r3, [pc, #472]	@ (8013998 <SD_disk_ioctl+0x250>)
 80137be:	781b      	ldrb	r3, [r3, #0]
 80137c0:	b2db      	uxtb	r3, r3
 80137c2:	f003 0301 	and.w	r3, r3, #1
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	d001      	beq.n	80137ce <SD_disk_ioctl+0x86>
    	return RES_NOTRDY;
 80137ca:	2303      	movs	r3, #3
 80137cc:	e0df      	b.n	801398e <SD_disk_ioctl+0x246>
    }
    SELECT();
 80137ce:	f7ff fc21 	bl	8013014 <SELECT>
    switch (ctrl)
 80137d2:	79bb      	ldrb	r3, [r7, #6]
 80137d4:	2b0d      	cmp	r3, #13
 80137d6:	f200 80c9 	bhi.w	801396c <SD_disk_ioctl+0x224>
 80137da:	a201      	add	r2, pc, #4	@ (adr r2, 80137e0 <SD_disk_ioctl+0x98>)
 80137dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80137e0:	080138d7 	.word	0x080138d7
 80137e4:	08013819 	.word	0x08013819
 80137e8:	080138c7 	.word	0x080138c7
 80137ec:	0801396d 	.word	0x0801396d
 80137f0:	0801396d 	.word	0x0801396d
 80137f4:	0801396d 	.word	0x0801396d
 80137f8:	0801396d 	.word	0x0801396d
 80137fc:	0801396d 	.word	0x0801396d
 8013800:	0801396d 	.word	0x0801396d
 8013804:	0801396d 	.word	0x0801396d
 8013808:	0801396d 	.word	0x0801396d
 801380c:	080138e9 	.word	0x080138e9
 8013810:	0801390d 	.word	0x0801390d
 8013814:	08013931 	.word	0x08013931
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8013818:	2100      	movs	r1, #0
 801381a:	2049      	movs	r0, #73	@ 0x49
 801381c:	f7ff fd55 	bl	80132ca <SD_SendCmd>
 8013820:	4603      	mov	r3, r0
 8013822:	2b00      	cmp	r3, #0
 8013824:	f040 80a6 	bne.w	8013974 <SD_disk_ioctl+0x22c>
 8013828:	f107 030c 	add.w	r3, r7, #12
 801382c:	2110      	movs	r1, #16
 801382e:	4618      	mov	r0, r3
 8013830:	f7ff fcda 	bl	80131e8 <SD_RxDataBlock>
 8013834:	4603      	mov	r3, r0
 8013836:	2b00      	cmp	r3, #0
 8013838:	f000 809c 	beq.w	8013974 <SD_disk_ioctl+0x22c>
      {
        if ((csd[0] >> 6) == 1)
 801383c:	7b3b      	ldrb	r3, [r7, #12]
 801383e:	099b      	lsrs	r3, r3, #6
 8013840:	b2db      	uxtb	r3, r3
 8013842:	2b01      	cmp	r3, #1
 8013844:	d10d      	bne.n	8013862 <SD_disk_ioctl+0x11a>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8013846:	7d7b      	ldrb	r3, [r7, #21]
 8013848:	461a      	mov	r2, r3
 801384a:	7d3b      	ldrb	r3, [r7, #20]
 801384c:	021b      	lsls	r3, r3, #8
 801384e:	b29b      	uxth	r3, r3
 8013850:	4413      	add	r3, r2
 8013852:	b29b      	uxth	r3, r3
 8013854:	3301      	adds	r3, #1
 8013856:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8013858:	8bfb      	ldrh	r3, [r7, #30]
 801385a:	029a      	lsls	r2, r3, #10
 801385c:	683b      	ldr	r3, [r7, #0]
 801385e:	601a      	str	r2, [r3, #0]
 8013860:	e02d      	b.n	80138be <SD_disk_ioctl+0x176>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8013862:	7c7b      	ldrb	r3, [r7, #17]
 8013864:	f003 030f 	and.w	r3, r3, #15
 8013868:	b2da      	uxtb	r2, r3
 801386a:	7dbb      	ldrb	r3, [r7, #22]
 801386c:	09db      	lsrs	r3, r3, #7
 801386e:	b2db      	uxtb	r3, r3
 8013870:	4413      	add	r3, r2
 8013872:	b2da      	uxtb	r2, r3
 8013874:	7d7b      	ldrb	r3, [r7, #21]
 8013876:	005b      	lsls	r3, r3, #1
 8013878:	b2db      	uxtb	r3, r3
 801387a:	f003 0306 	and.w	r3, r3, #6
 801387e:	b2db      	uxtb	r3, r3
 8013880:	4413      	add	r3, r2
 8013882:	b2db      	uxtb	r3, r3
 8013884:	3302      	adds	r3, #2
 8013886:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 801388a:	7d3b      	ldrb	r3, [r7, #20]
 801388c:	099b      	lsrs	r3, r3, #6
 801388e:	b2db      	uxtb	r3, r3
 8013890:	461a      	mov	r2, r3
 8013892:	7cfb      	ldrb	r3, [r7, #19]
 8013894:	009b      	lsls	r3, r3, #2
 8013896:	b29b      	uxth	r3, r3
 8013898:	4413      	add	r3, r2
 801389a:	b29a      	uxth	r2, r3
 801389c:	7cbb      	ldrb	r3, [r7, #18]
 801389e:	029b      	lsls	r3, r3, #10
 80138a0:	b29b      	uxth	r3, r3
 80138a2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80138a6:	b29b      	uxth	r3, r3
 80138a8:	4413      	add	r3, r2
 80138aa:	b29b      	uxth	r3, r3
 80138ac:	3301      	adds	r3, #1
 80138ae:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 80138b0:	8bfa      	ldrh	r2, [r7, #30]
 80138b2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80138b6:	3b09      	subs	r3, #9
 80138b8:	409a      	lsls	r2, r3
 80138ba:	683b      	ldr	r3, [r7, #0]
 80138bc:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 80138be:	2300      	movs	r3, #0
 80138c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 80138c4:	e056      	b.n	8013974 <SD_disk_ioctl+0x22c>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 80138c6:	683b      	ldr	r3, [r7, #0]
 80138c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80138cc:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 80138ce:	2300      	movs	r3, #0
 80138d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80138d4:	e055      	b.n	8013982 <SD_disk_ioctl+0x23a>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80138d6:	f7ff fc13 	bl	8013100 <SD_ReadyWait>
 80138da:	4603      	mov	r3, r0
 80138dc:	2bff      	cmp	r3, #255	@ 0xff
 80138de:	d14b      	bne.n	8013978 <SD_disk_ioctl+0x230>
 80138e0:	2300      	movs	r3, #0
 80138e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80138e6:	e047      	b.n	8013978 <SD_disk_ioctl+0x230>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80138e8:	2100      	movs	r1, #0
 80138ea:	2049      	movs	r0, #73	@ 0x49
 80138ec:	f7ff fced 	bl	80132ca <SD_SendCmd>
 80138f0:	4603      	mov	r3, r0
 80138f2:	2b00      	cmp	r3, #0
 80138f4:	d142      	bne.n	801397c <SD_disk_ioctl+0x234>
 80138f6:	2110      	movs	r1, #16
 80138f8:	6a38      	ldr	r0, [r7, #32]
 80138fa:	f7ff fc75 	bl	80131e8 <SD_RxDataBlock>
 80138fe:	4603      	mov	r3, r0
 8013900:	2b00      	cmp	r3, #0
 8013902:	d03b      	beq.n	801397c <SD_disk_ioctl+0x234>
 8013904:	2300      	movs	r3, #0
 8013906:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 801390a:	e037      	b.n	801397c <SD_disk_ioctl+0x234>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 801390c:	2100      	movs	r1, #0
 801390e:	204a      	movs	r0, #74	@ 0x4a
 8013910:	f7ff fcdb 	bl	80132ca <SD_SendCmd>
 8013914:	4603      	mov	r3, r0
 8013916:	2b00      	cmp	r3, #0
 8013918:	d132      	bne.n	8013980 <SD_disk_ioctl+0x238>
 801391a:	2110      	movs	r1, #16
 801391c:	6a38      	ldr	r0, [r7, #32]
 801391e:	f7ff fc63 	bl	80131e8 <SD_RxDataBlock>
 8013922:	4603      	mov	r3, r0
 8013924:	2b00      	cmp	r3, #0
 8013926:	d02b      	beq.n	8013980 <SD_disk_ioctl+0x238>
 8013928:	2300      	movs	r3, #0
 801392a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 801392e:	e027      	b.n	8013980 <SD_disk_ioctl+0x238>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 8013930:	2100      	movs	r1, #0
 8013932:	207a      	movs	r0, #122	@ 0x7a
 8013934:	f7ff fcc9 	bl	80132ca <SD_SendCmd>
 8013938:	4603      	mov	r3, r0
 801393a:	2b00      	cmp	r3, #0
 801393c:	d116      	bne.n	801396c <SD_disk_ioctl+0x224>
      {
        for (n = 0; n < 4; n++)
 801393e:	2300      	movs	r3, #0
 8013940:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8013944:	e00b      	b.n	801395e <SD_disk_ioctl+0x216>
        {
          *ptr++ = SPI_RxByte();
 8013946:	6a3c      	ldr	r4, [r7, #32]
 8013948:	1c63      	adds	r3, r4, #1
 801394a:	623b      	str	r3, [r7, #32]
 801394c:	f7ff fbae 	bl	80130ac <SPI_RxByte>
 8013950:	4603      	mov	r3, r0
 8013952:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8013954:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013958:	3301      	adds	r3, #1
 801395a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801395e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013962:	2b03      	cmp	r3, #3
 8013964:	d9ef      	bls.n	8013946 <SD_disk_ioctl+0x1fe>
        }
        res = RES_OK;
 8013966:	2300      	movs	r3, #0
 8013968:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
    default:
      res = RES_PARERR;
 801396c:	2304      	movs	r3, #4
 801396e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013972:	e006      	b.n	8013982 <SD_disk_ioctl+0x23a>
      break;
 8013974:	bf00      	nop
 8013976:	e004      	b.n	8013982 <SD_disk_ioctl+0x23a>
      break;
 8013978:	bf00      	nop
 801397a:	e002      	b.n	8013982 <SD_disk_ioctl+0x23a>
      break;
 801397c:	bf00      	nop
 801397e:	e000      	b.n	8013982 <SD_disk_ioctl+0x23a>
      break;
 8013980:	bf00      	nop
    }
    DESELECT();
 8013982:	f7ff fb53 	bl	801302c <DESELECT>
    SPI_RxByte();
 8013986:	f7ff fb91 	bl	80130ac <SPI_RxByte>
  }
  return res;
 801398a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 801398e:	4618      	mov	r0, r3
 8013990:	372c      	adds	r7, #44	@ 0x2c
 8013992:	46bd      	mov	sp, r7
 8013994:	bd90      	pop	{r4, r7, pc}
 8013996:	bf00      	nop
 8013998:	240000c0 	.word	0x240000c0

0801399c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 801399c:	b580      	push	{r7, lr}
 801399e:	b084      	sub	sp, #16
 80139a0:	af00      	add	r7, sp, #0
 80139a2:	4603      	mov	r3, r0
 80139a4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80139a6:	79fb      	ldrb	r3, [r7, #7]
 80139a8:	4a08      	ldr	r2, [pc, #32]	@ (80139cc <disk_status+0x30>)
 80139aa:	009b      	lsls	r3, r3, #2
 80139ac:	4413      	add	r3, r2
 80139ae:	685b      	ldr	r3, [r3, #4]
 80139b0:	685b      	ldr	r3, [r3, #4]
 80139b2:	79fa      	ldrb	r2, [r7, #7]
 80139b4:	4905      	ldr	r1, [pc, #20]	@ (80139cc <disk_status+0x30>)
 80139b6:	440a      	add	r2, r1
 80139b8:	7a12      	ldrb	r2, [r2, #8]
 80139ba:	4610      	mov	r0, r2
 80139bc:	4798      	blx	r3
 80139be:	4603      	mov	r3, r0
 80139c0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80139c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80139c4:	4618      	mov	r0, r3
 80139c6:	3710      	adds	r7, #16
 80139c8:	46bd      	mov	sp, r7
 80139ca:	bd80      	pop	{r7, pc}
 80139cc:	240029d0 	.word	0x240029d0

080139d0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80139d0:	b590      	push	{r4, r7, lr}
 80139d2:	b087      	sub	sp, #28
 80139d4:	af00      	add	r7, sp, #0
 80139d6:	60b9      	str	r1, [r7, #8]
 80139d8:	607a      	str	r2, [r7, #4]
 80139da:	603b      	str	r3, [r7, #0]
 80139dc:	4603      	mov	r3, r0
 80139de:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80139e0:	7bfb      	ldrb	r3, [r7, #15]
 80139e2:	4a0a      	ldr	r2, [pc, #40]	@ (8013a0c <disk_read+0x3c>)
 80139e4:	009b      	lsls	r3, r3, #2
 80139e6:	4413      	add	r3, r2
 80139e8:	685b      	ldr	r3, [r3, #4]
 80139ea:	689c      	ldr	r4, [r3, #8]
 80139ec:	7bfb      	ldrb	r3, [r7, #15]
 80139ee:	4a07      	ldr	r2, [pc, #28]	@ (8013a0c <disk_read+0x3c>)
 80139f0:	4413      	add	r3, r2
 80139f2:	7a18      	ldrb	r0, [r3, #8]
 80139f4:	683b      	ldr	r3, [r7, #0]
 80139f6:	687a      	ldr	r2, [r7, #4]
 80139f8:	68b9      	ldr	r1, [r7, #8]
 80139fa:	47a0      	blx	r4
 80139fc:	4603      	mov	r3, r0
 80139fe:	75fb      	strb	r3, [r7, #23]
  return res;
 8013a00:	7dfb      	ldrb	r3, [r7, #23]
}
 8013a02:	4618      	mov	r0, r3
 8013a04:	371c      	adds	r7, #28
 8013a06:	46bd      	mov	sp, r7
 8013a08:	bd90      	pop	{r4, r7, pc}
 8013a0a:	bf00      	nop
 8013a0c:	240029d0 	.word	0x240029d0

08013a10 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8013a10:	b590      	push	{r4, r7, lr}
 8013a12:	b087      	sub	sp, #28
 8013a14:	af00      	add	r7, sp, #0
 8013a16:	60b9      	str	r1, [r7, #8]
 8013a18:	607a      	str	r2, [r7, #4]
 8013a1a:	603b      	str	r3, [r7, #0]
 8013a1c:	4603      	mov	r3, r0
 8013a1e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8013a20:	7bfb      	ldrb	r3, [r7, #15]
 8013a22:	4a0a      	ldr	r2, [pc, #40]	@ (8013a4c <disk_write+0x3c>)
 8013a24:	009b      	lsls	r3, r3, #2
 8013a26:	4413      	add	r3, r2
 8013a28:	685b      	ldr	r3, [r3, #4]
 8013a2a:	68dc      	ldr	r4, [r3, #12]
 8013a2c:	7bfb      	ldrb	r3, [r7, #15]
 8013a2e:	4a07      	ldr	r2, [pc, #28]	@ (8013a4c <disk_write+0x3c>)
 8013a30:	4413      	add	r3, r2
 8013a32:	7a18      	ldrb	r0, [r3, #8]
 8013a34:	683b      	ldr	r3, [r7, #0]
 8013a36:	687a      	ldr	r2, [r7, #4]
 8013a38:	68b9      	ldr	r1, [r7, #8]
 8013a3a:	47a0      	blx	r4
 8013a3c:	4603      	mov	r3, r0
 8013a3e:	75fb      	strb	r3, [r7, #23]
  return res;
 8013a40:	7dfb      	ldrb	r3, [r7, #23]
}
 8013a42:	4618      	mov	r0, r3
 8013a44:	371c      	adds	r7, #28
 8013a46:	46bd      	mov	sp, r7
 8013a48:	bd90      	pop	{r4, r7, pc}
 8013a4a:	bf00      	nop
 8013a4c:	240029d0 	.word	0x240029d0

08013a50 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8013a50:	b580      	push	{r7, lr}
 8013a52:	b084      	sub	sp, #16
 8013a54:	af00      	add	r7, sp, #0
 8013a56:	4603      	mov	r3, r0
 8013a58:	603a      	str	r2, [r7, #0]
 8013a5a:	71fb      	strb	r3, [r7, #7]
 8013a5c:	460b      	mov	r3, r1
 8013a5e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8013a60:	79fb      	ldrb	r3, [r7, #7]
 8013a62:	4a09      	ldr	r2, [pc, #36]	@ (8013a88 <disk_ioctl+0x38>)
 8013a64:	009b      	lsls	r3, r3, #2
 8013a66:	4413      	add	r3, r2
 8013a68:	685b      	ldr	r3, [r3, #4]
 8013a6a:	691b      	ldr	r3, [r3, #16]
 8013a6c:	79fa      	ldrb	r2, [r7, #7]
 8013a6e:	4906      	ldr	r1, [pc, #24]	@ (8013a88 <disk_ioctl+0x38>)
 8013a70:	440a      	add	r2, r1
 8013a72:	7a10      	ldrb	r0, [r2, #8]
 8013a74:	79b9      	ldrb	r1, [r7, #6]
 8013a76:	683a      	ldr	r2, [r7, #0]
 8013a78:	4798      	blx	r3
 8013a7a:	4603      	mov	r3, r0
 8013a7c:	73fb      	strb	r3, [r7, #15]
  return res;
 8013a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013a80:	4618      	mov	r0, r3
 8013a82:	3710      	adds	r7, #16
 8013a84:	46bd      	mov	sp, r7
 8013a86:	bd80      	pop	{r7, pc}
 8013a88:	240029d0 	.word	0x240029d0

08013a8c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8013a8c:	b480      	push	{r7}
 8013a8e:	b085      	sub	sp, #20
 8013a90:	af00      	add	r7, sp, #0
 8013a92:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	3301      	adds	r3, #1
 8013a98:	781b      	ldrb	r3, [r3, #0]
 8013a9a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8013a9c:	89fb      	ldrh	r3, [r7, #14]
 8013a9e:	021b      	lsls	r3, r3, #8
 8013aa0:	b21a      	sxth	r2, r3
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	781b      	ldrb	r3, [r3, #0]
 8013aa6:	b21b      	sxth	r3, r3
 8013aa8:	4313      	orrs	r3, r2
 8013aaa:	b21b      	sxth	r3, r3
 8013aac:	81fb      	strh	r3, [r7, #14]
	return rv;
 8013aae:	89fb      	ldrh	r3, [r7, #14]
}
 8013ab0:	4618      	mov	r0, r3
 8013ab2:	3714      	adds	r7, #20
 8013ab4:	46bd      	mov	sp, r7
 8013ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aba:	4770      	bx	lr

08013abc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8013abc:	b480      	push	{r7}
 8013abe:	b085      	sub	sp, #20
 8013ac0:	af00      	add	r7, sp, #0
 8013ac2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	3303      	adds	r3, #3
 8013ac8:	781b      	ldrb	r3, [r3, #0]
 8013aca:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8013acc:	68fb      	ldr	r3, [r7, #12]
 8013ace:	021b      	lsls	r3, r3, #8
 8013ad0:	687a      	ldr	r2, [r7, #4]
 8013ad2:	3202      	adds	r2, #2
 8013ad4:	7812      	ldrb	r2, [r2, #0]
 8013ad6:	4313      	orrs	r3, r2
 8013ad8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8013ada:	68fb      	ldr	r3, [r7, #12]
 8013adc:	021b      	lsls	r3, r3, #8
 8013ade:	687a      	ldr	r2, [r7, #4]
 8013ae0:	3201      	adds	r2, #1
 8013ae2:	7812      	ldrb	r2, [r2, #0]
 8013ae4:	4313      	orrs	r3, r2
 8013ae6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8013ae8:	68fb      	ldr	r3, [r7, #12]
 8013aea:	021b      	lsls	r3, r3, #8
 8013aec:	687a      	ldr	r2, [r7, #4]
 8013aee:	7812      	ldrb	r2, [r2, #0]
 8013af0:	4313      	orrs	r3, r2
 8013af2:	60fb      	str	r3, [r7, #12]
	return rv;
 8013af4:	68fb      	ldr	r3, [r7, #12]
}
 8013af6:	4618      	mov	r0, r3
 8013af8:	3714      	adds	r7, #20
 8013afa:	46bd      	mov	sp, r7
 8013afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b00:	4770      	bx	lr

08013b02 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8013b02:	b480      	push	{r7}
 8013b04:	b083      	sub	sp, #12
 8013b06:	af00      	add	r7, sp, #0
 8013b08:	6078      	str	r0, [r7, #4]
 8013b0a:	460b      	mov	r3, r1
 8013b0c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	1c5a      	adds	r2, r3, #1
 8013b12:	607a      	str	r2, [r7, #4]
 8013b14:	887a      	ldrh	r2, [r7, #2]
 8013b16:	b2d2      	uxtb	r2, r2
 8013b18:	701a      	strb	r2, [r3, #0]
 8013b1a:	887b      	ldrh	r3, [r7, #2]
 8013b1c:	0a1b      	lsrs	r3, r3, #8
 8013b1e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	1c5a      	adds	r2, r3, #1
 8013b24:	607a      	str	r2, [r7, #4]
 8013b26:	887a      	ldrh	r2, [r7, #2]
 8013b28:	b2d2      	uxtb	r2, r2
 8013b2a:	701a      	strb	r2, [r3, #0]
}
 8013b2c:	bf00      	nop
 8013b2e:	370c      	adds	r7, #12
 8013b30:	46bd      	mov	sp, r7
 8013b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b36:	4770      	bx	lr

08013b38 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8013b38:	b480      	push	{r7}
 8013b3a:	b083      	sub	sp, #12
 8013b3c:	af00      	add	r7, sp, #0
 8013b3e:	6078      	str	r0, [r7, #4]
 8013b40:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	1c5a      	adds	r2, r3, #1
 8013b46:	607a      	str	r2, [r7, #4]
 8013b48:	683a      	ldr	r2, [r7, #0]
 8013b4a:	b2d2      	uxtb	r2, r2
 8013b4c:	701a      	strb	r2, [r3, #0]
 8013b4e:	683b      	ldr	r3, [r7, #0]
 8013b50:	0a1b      	lsrs	r3, r3, #8
 8013b52:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	1c5a      	adds	r2, r3, #1
 8013b58:	607a      	str	r2, [r7, #4]
 8013b5a:	683a      	ldr	r2, [r7, #0]
 8013b5c:	b2d2      	uxtb	r2, r2
 8013b5e:	701a      	strb	r2, [r3, #0]
 8013b60:	683b      	ldr	r3, [r7, #0]
 8013b62:	0a1b      	lsrs	r3, r3, #8
 8013b64:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	1c5a      	adds	r2, r3, #1
 8013b6a:	607a      	str	r2, [r7, #4]
 8013b6c:	683a      	ldr	r2, [r7, #0]
 8013b6e:	b2d2      	uxtb	r2, r2
 8013b70:	701a      	strb	r2, [r3, #0]
 8013b72:	683b      	ldr	r3, [r7, #0]
 8013b74:	0a1b      	lsrs	r3, r3, #8
 8013b76:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	1c5a      	adds	r2, r3, #1
 8013b7c:	607a      	str	r2, [r7, #4]
 8013b7e:	683a      	ldr	r2, [r7, #0]
 8013b80:	b2d2      	uxtb	r2, r2
 8013b82:	701a      	strb	r2, [r3, #0]
}
 8013b84:	bf00      	nop
 8013b86:	370c      	adds	r7, #12
 8013b88:	46bd      	mov	sp, r7
 8013b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b8e:	4770      	bx	lr

08013b90 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8013b90:	b480      	push	{r7}
 8013b92:	b087      	sub	sp, #28
 8013b94:	af00      	add	r7, sp, #0
 8013b96:	60f8      	str	r0, [r7, #12]
 8013b98:	60b9      	str	r1, [r7, #8]
 8013b9a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8013b9c:	68fb      	ldr	r3, [r7, #12]
 8013b9e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8013ba0:	68bb      	ldr	r3, [r7, #8]
 8013ba2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	d00d      	beq.n	8013bc6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8013baa:	693a      	ldr	r2, [r7, #16]
 8013bac:	1c53      	adds	r3, r2, #1
 8013bae:	613b      	str	r3, [r7, #16]
 8013bb0:	697b      	ldr	r3, [r7, #20]
 8013bb2:	1c59      	adds	r1, r3, #1
 8013bb4:	6179      	str	r1, [r7, #20]
 8013bb6:	7812      	ldrb	r2, [r2, #0]
 8013bb8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	3b01      	subs	r3, #1
 8013bbe:	607b      	str	r3, [r7, #4]
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	d1f1      	bne.n	8013baa <mem_cpy+0x1a>
	}
}
 8013bc6:	bf00      	nop
 8013bc8:	371c      	adds	r7, #28
 8013bca:	46bd      	mov	sp, r7
 8013bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bd0:	4770      	bx	lr

08013bd2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8013bd2:	b480      	push	{r7}
 8013bd4:	b087      	sub	sp, #28
 8013bd6:	af00      	add	r7, sp, #0
 8013bd8:	60f8      	str	r0, [r7, #12]
 8013bda:	60b9      	str	r1, [r7, #8]
 8013bdc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8013bde:	68fb      	ldr	r3, [r7, #12]
 8013be0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8013be2:	697b      	ldr	r3, [r7, #20]
 8013be4:	1c5a      	adds	r2, r3, #1
 8013be6:	617a      	str	r2, [r7, #20]
 8013be8:	68ba      	ldr	r2, [r7, #8]
 8013bea:	b2d2      	uxtb	r2, r2
 8013bec:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	3b01      	subs	r3, #1
 8013bf2:	607b      	str	r3, [r7, #4]
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	d1f3      	bne.n	8013be2 <mem_set+0x10>
}
 8013bfa:	bf00      	nop
 8013bfc:	bf00      	nop
 8013bfe:	371c      	adds	r7, #28
 8013c00:	46bd      	mov	sp, r7
 8013c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c06:	4770      	bx	lr

08013c08 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8013c08:	b580      	push	{r7, lr}
 8013c0a:	b082      	sub	sp, #8
 8013c0c:	af00      	add	r7, sp, #0
 8013c0e:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	d009      	beq.n	8013c2a <lock_fs+0x22>
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	691b      	ldr	r3, [r3, #16]
 8013c1a:	4618      	mov	r0, r3
 8013c1c:	f000 fe6f 	bl	80148fe <ff_req_grant>
 8013c20:	4603      	mov	r3, r0
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	d001      	beq.n	8013c2a <lock_fs+0x22>
 8013c26:	2301      	movs	r3, #1
 8013c28:	e000      	b.n	8013c2c <lock_fs+0x24>
 8013c2a:	2300      	movs	r3, #0
}
 8013c2c:	4618      	mov	r0, r3
 8013c2e:	3708      	adds	r7, #8
 8013c30:	46bd      	mov	sp, r7
 8013c32:	bd80      	pop	{r7, pc}

08013c34 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8013c34:	b580      	push	{r7, lr}
 8013c36:	b082      	sub	sp, #8
 8013c38:	af00      	add	r7, sp, #0
 8013c3a:	6078      	str	r0, [r7, #4]
 8013c3c:	460b      	mov	r3, r1
 8013c3e:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	2b00      	cmp	r3, #0
 8013c44:	d00d      	beq.n	8013c62 <unlock_fs+0x2e>
 8013c46:	78fb      	ldrb	r3, [r7, #3]
 8013c48:	2b0c      	cmp	r3, #12
 8013c4a:	d00a      	beq.n	8013c62 <unlock_fs+0x2e>
 8013c4c:	78fb      	ldrb	r3, [r7, #3]
 8013c4e:	2b0b      	cmp	r3, #11
 8013c50:	d007      	beq.n	8013c62 <unlock_fs+0x2e>
 8013c52:	78fb      	ldrb	r3, [r7, #3]
 8013c54:	2b0f      	cmp	r3, #15
 8013c56:	d004      	beq.n	8013c62 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	691b      	ldr	r3, [r3, #16]
 8013c5c:	4618      	mov	r0, r3
 8013c5e:	f000 fe63 	bl	8014928 <ff_rel_grant>
	}
}
 8013c62:	bf00      	nop
 8013c64:	3708      	adds	r7, #8
 8013c66:	46bd      	mov	sp, r7
 8013c68:	bd80      	pop	{r7, pc}

08013c6a <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8013c6a:	b580      	push	{r7, lr}
 8013c6c:	b086      	sub	sp, #24
 8013c6e:	af00      	add	r7, sp, #0
 8013c70:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8013c72:	2300      	movs	r3, #0
 8013c74:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	78db      	ldrb	r3, [r3, #3]
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	d034      	beq.n	8013ce8 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013c82:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	7858      	ldrb	r0, [r3, #1]
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8013c8e:	2301      	movs	r3, #1
 8013c90:	697a      	ldr	r2, [r7, #20]
 8013c92:	f7ff febd 	bl	8013a10 <disk_write>
 8013c96:	4603      	mov	r3, r0
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d002      	beq.n	8013ca2 <sync_window+0x38>
			res = FR_DISK_ERR;
 8013c9c:	2301      	movs	r3, #1
 8013c9e:	73fb      	strb	r3, [r7, #15]
 8013ca0:	e022      	b.n	8013ce8 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	2200      	movs	r2, #0
 8013ca6:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013cac:	697a      	ldr	r2, [r7, #20]
 8013cae:	1ad2      	subs	r2, r2, r3
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	6a1b      	ldr	r3, [r3, #32]
 8013cb4:	429a      	cmp	r2, r3
 8013cb6:	d217      	bcs.n	8013ce8 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	789b      	ldrb	r3, [r3, #2]
 8013cbc:	613b      	str	r3, [r7, #16]
 8013cbe:	e010      	b.n	8013ce2 <sync_window+0x78>
					wsect += fs->fsize;
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	6a1b      	ldr	r3, [r3, #32]
 8013cc4:	697a      	ldr	r2, [r7, #20]
 8013cc6:	4413      	add	r3, r2
 8013cc8:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	7858      	ldrb	r0, [r3, #1]
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8013cd4:	2301      	movs	r3, #1
 8013cd6:	697a      	ldr	r2, [r7, #20]
 8013cd8:	f7ff fe9a 	bl	8013a10 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8013cdc:	693b      	ldr	r3, [r7, #16]
 8013cde:	3b01      	subs	r3, #1
 8013ce0:	613b      	str	r3, [r7, #16]
 8013ce2:	693b      	ldr	r3, [r7, #16]
 8013ce4:	2b01      	cmp	r3, #1
 8013ce6:	d8eb      	bhi.n	8013cc0 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8013ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8013cea:	4618      	mov	r0, r3
 8013cec:	3718      	adds	r7, #24
 8013cee:	46bd      	mov	sp, r7
 8013cf0:	bd80      	pop	{r7, pc}

08013cf2 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8013cf2:	b580      	push	{r7, lr}
 8013cf4:	b084      	sub	sp, #16
 8013cf6:	af00      	add	r7, sp, #0
 8013cf8:	6078      	str	r0, [r7, #4]
 8013cfa:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8013cfc:	2300      	movs	r3, #0
 8013cfe:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013d04:	683a      	ldr	r2, [r7, #0]
 8013d06:	429a      	cmp	r2, r3
 8013d08:	d01b      	beq.n	8013d42 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8013d0a:	6878      	ldr	r0, [r7, #4]
 8013d0c:	f7ff ffad 	bl	8013c6a <sync_window>
 8013d10:	4603      	mov	r3, r0
 8013d12:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8013d14:	7bfb      	ldrb	r3, [r7, #15]
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	d113      	bne.n	8013d42 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	7858      	ldrb	r0, [r3, #1]
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8013d24:	2301      	movs	r3, #1
 8013d26:	683a      	ldr	r2, [r7, #0]
 8013d28:	f7ff fe52 	bl	80139d0 <disk_read>
 8013d2c:	4603      	mov	r3, r0
 8013d2e:	2b00      	cmp	r3, #0
 8013d30:	d004      	beq.n	8013d3c <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8013d32:	f04f 33ff 	mov.w	r3, #4294967295
 8013d36:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8013d38:	2301      	movs	r3, #1
 8013d3a:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	683a      	ldr	r2, [r7, #0]
 8013d40:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8013d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8013d44:	4618      	mov	r0, r3
 8013d46:	3710      	adds	r7, #16
 8013d48:	46bd      	mov	sp, r7
 8013d4a:	bd80      	pop	{r7, pc}

08013d4c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8013d4c:	b580      	push	{r7, lr}
 8013d4e:	b084      	sub	sp, #16
 8013d50:	af00      	add	r7, sp, #0
 8013d52:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8013d54:	6878      	ldr	r0, [r7, #4]
 8013d56:	f7ff ff88 	bl	8013c6a <sync_window>
 8013d5a:	4603      	mov	r3, r0
 8013d5c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8013d5e:	7bfb      	ldrb	r3, [r7, #15]
 8013d60:	2b00      	cmp	r3, #0
 8013d62:	d158      	bne.n	8013e16 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	781b      	ldrb	r3, [r3, #0]
 8013d68:	2b03      	cmp	r3, #3
 8013d6a:	d148      	bne.n	8013dfe <sync_fs+0xb2>
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	791b      	ldrb	r3, [r3, #4]
 8013d70:	2b01      	cmp	r3, #1
 8013d72:	d144      	bne.n	8013dfe <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	3338      	adds	r3, #56	@ 0x38
 8013d78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013d7c:	2100      	movs	r1, #0
 8013d7e:	4618      	mov	r0, r3
 8013d80:	f7ff ff27 	bl	8013bd2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	3338      	adds	r3, #56	@ 0x38
 8013d88:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8013d8c:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8013d90:	4618      	mov	r0, r3
 8013d92:	f7ff feb6 	bl	8013b02 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	3338      	adds	r3, #56	@ 0x38
 8013d9a:	4921      	ldr	r1, [pc, #132]	@ (8013e20 <sync_fs+0xd4>)
 8013d9c:	4618      	mov	r0, r3
 8013d9e:	f7ff fecb 	bl	8013b38 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	3338      	adds	r3, #56	@ 0x38
 8013da6:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8013daa:	491e      	ldr	r1, [pc, #120]	@ (8013e24 <sync_fs+0xd8>)
 8013dac:	4618      	mov	r0, r3
 8013dae:	f7ff fec3 	bl	8013b38 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	3338      	adds	r3, #56	@ 0x38
 8013db6:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	699b      	ldr	r3, [r3, #24]
 8013dbe:	4619      	mov	r1, r3
 8013dc0:	4610      	mov	r0, r2
 8013dc2:	f7ff feb9 	bl	8013b38 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	3338      	adds	r3, #56	@ 0x38
 8013dca:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	695b      	ldr	r3, [r3, #20]
 8013dd2:	4619      	mov	r1, r3
 8013dd4:	4610      	mov	r0, r2
 8013dd6:	f7ff feaf 	bl	8013b38 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013dde:	1c5a      	adds	r2, r3, #1
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	7858      	ldrb	r0, [r3, #1]
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013df2:	2301      	movs	r3, #1
 8013df4:	f7ff fe0c 	bl	8013a10 <disk_write>
			fs->fsi_flag = 0;
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	2200      	movs	r2, #0
 8013dfc:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	785b      	ldrb	r3, [r3, #1]
 8013e02:	2200      	movs	r2, #0
 8013e04:	2100      	movs	r1, #0
 8013e06:	4618      	mov	r0, r3
 8013e08:	f7ff fe22 	bl	8013a50 <disk_ioctl>
 8013e0c:	4603      	mov	r3, r0
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	d001      	beq.n	8013e16 <sync_fs+0xca>
 8013e12:	2301      	movs	r3, #1
 8013e14:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8013e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8013e18:	4618      	mov	r0, r3
 8013e1a:	3710      	adds	r7, #16
 8013e1c:	46bd      	mov	sp, r7
 8013e1e:	bd80      	pop	{r7, pc}
 8013e20:	41615252 	.word	0x41615252
 8013e24:	61417272 	.word	0x61417272

08013e28 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8013e28:	b480      	push	{r7}
 8013e2a:	b083      	sub	sp, #12
 8013e2c:	af00      	add	r7, sp, #0
 8013e2e:	6078      	str	r0, [r7, #4]
 8013e30:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8013e32:	683b      	ldr	r3, [r7, #0]
 8013e34:	3b02      	subs	r3, #2
 8013e36:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	69db      	ldr	r3, [r3, #28]
 8013e3c:	3b02      	subs	r3, #2
 8013e3e:	683a      	ldr	r2, [r7, #0]
 8013e40:	429a      	cmp	r2, r3
 8013e42:	d301      	bcc.n	8013e48 <clust2sect+0x20>
 8013e44:	2300      	movs	r3, #0
 8013e46:	e008      	b.n	8013e5a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	895b      	ldrh	r3, [r3, #10]
 8013e4c:	461a      	mov	r2, r3
 8013e4e:	683b      	ldr	r3, [r7, #0]
 8013e50:	fb03 f202 	mul.w	r2, r3, r2
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013e58:	4413      	add	r3, r2
}
 8013e5a:	4618      	mov	r0, r3
 8013e5c:	370c      	adds	r7, #12
 8013e5e:	46bd      	mov	sp, r7
 8013e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e64:	4770      	bx	lr

08013e66 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8013e66:	b580      	push	{r7, lr}
 8013e68:	b086      	sub	sp, #24
 8013e6a:	af00      	add	r7, sp, #0
 8013e6c:	6078      	str	r0, [r7, #4]
 8013e6e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	681b      	ldr	r3, [r3, #0]
 8013e74:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8013e76:	683b      	ldr	r3, [r7, #0]
 8013e78:	2b01      	cmp	r3, #1
 8013e7a:	d904      	bls.n	8013e86 <get_fat+0x20>
 8013e7c:	693b      	ldr	r3, [r7, #16]
 8013e7e:	69db      	ldr	r3, [r3, #28]
 8013e80:	683a      	ldr	r2, [r7, #0]
 8013e82:	429a      	cmp	r2, r3
 8013e84:	d302      	bcc.n	8013e8c <get_fat+0x26>
		val = 1;	/* Internal error */
 8013e86:	2301      	movs	r3, #1
 8013e88:	617b      	str	r3, [r7, #20]
 8013e8a:	e08e      	b.n	8013faa <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8013e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8013e90:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8013e92:	693b      	ldr	r3, [r7, #16]
 8013e94:	781b      	ldrb	r3, [r3, #0]
 8013e96:	2b03      	cmp	r3, #3
 8013e98:	d061      	beq.n	8013f5e <get_fat+0xf8>
 8013e9a:	2b03      	cmp	r3, #3
 8013e9c:	dc7b      	bgt.n	8013f96 <get_fat+0x130>
 8013e9e:	2b01      	cmp	r3, #1
 8013ea0:	d002      	beq.n	8013ea8 <get_fat+0x42>
 8013ea2:	2b02      	cmp	r3, #2
 8013ea4:	d041      	beq.n	8013f2a <get_fat+0xc4>
 8013ea6:	e076      	b.n	8013f96 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8013ea8:	683b      	ldr	r3, [r7, #0]
 8013eaa:	60fb      	str	r3, [r7, #12]
 8013eac:	68fb      	ldr	r3, [r7, #12]
 8013eae:	085b      	lsrs	r3, r3, #1
 8013eb0:	68fa      	ldr	r2, [r7, #12]
 8013eb2:	4413      	add	r3, r2
 8013eb4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013eb6:	693b      	ldr	r3, [r7, #16]
 8013eb8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013eba:	68fb      	ldr	r3, [r7, #12]
 8013ebc:	0a5b      	lsrs	r3, r3, #9
 8013ebe:	4413      	add	r3, r2
 8013ec0:	4619      	mov	r1, r3
 8013ec2:	6938      	ldr	r0, [r7, #16]
 8013ec4:	f7ff ff15 	bl	8013cf2 <move_window>
 8013ec8:	4603      	mov	r3, r0
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d166      	bne.n	8013f9c <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8013ece:	68fb      	ldr	r3, [r7, #12]
 8013ed0:	1c5a      	adds	r2, r3, #1
 8013ed2:	60fa      	str	r2, [r7, #12]
 8013ed4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013ed8:	693a      	ldr	r2, [r7, #16]
 8013eda:	4413      	add	r3, r2
 8013edc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8013ee0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013ee2:	693b      	ldr	r3, [r7, #16]
 8013ee4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013ee6:	68fb      	ldr	r3, [r7, #12]
 8013ee8:	0a5b      	lsrs	r3, r3, #9
 8013eea:	4413      	add	r3, r2
 8013eec:	4619      	mov	r1, r3
 8013eee:	6938      	ldr	r0, [r7, #16]
 8013ef0:	f7ff feff 	bl	8013cf2 <move_window>
 8013ef4:	4603      	mov	r3, r0
 8013ef6:	2b00      	cmp	r3, #0
 8013ef8:	d152      	bne.n	8013fa0 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8013efa:	68fb      	ldr	r3, [r7, #12]
 8013efc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013f00:	693a      	ldr	r2, [r7, #16]
 8013f02:	4413      	add	r3, r2
 8013f04:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8013f08:	021b      	lsls	r3, r3, #8
 8013f0a:	68ba      	ldr	r2, [r7, #8]
 8013f0c:	4313      	orrs	r3, r2
 8013f0e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8013f10:	683b      	ldr	r3, [r7, #0]
 8013f12:	f003 0301 	and.w	r3, r3, #1
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	d002      	beq.n	8013f20 <get_fat+0xba>
 8013f1a:	68bb      	ldr	r3, [r7, #8]
 8013f1c:	091b      	lsrs	r3, r3, #4
 8013f1e:	e002      	b.n	8013f26 <get_fat+0xc0>
 8013f20:	68bb      	ldr	r3, [r7, #8]
 8013f22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013f26:	617b      	str	r3, [r7, #20]
			break;
 8013f28:	e03f      	b.n	8013faa <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8013f2a:	693b      	ldr	r3, [r7, #16]
 8013f2c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013f2e:	683b      	ldr	r3, [r7, #0]
 8013f30:	0a1b      	lsrs	r3, r3, #8
 8013f32:	4413      	add	r3, r2
 8013f34:	4619      	mov	r1, r3
 8013f36:	6938      	ldr	r0, [r7, #16]
 8013f38:	f7ff fedb 	bl	8013cf2 <move_window>
 8013f3c:	4603      	mov	r3, r0
 8013f3e:	2b00      	cmp	r3, #0
 8013f40:	d130      	bne.n	8013fa4 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8013f42:	693b      	ldr	r3, [r7, #16]
 8013f44:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8013f48:	683b      	ldr	r3, [r7, #0]
 8013f4a:	005b      	lsls	r3, r3, #1
 8013f4c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8013f50:	4413      	add	r3, r2
 8013f52:	4618      	mov	r0, r3
 8013f54:	f7ff fd9a 	bl	8013a8c <ld_word>
 8013f58:	4603      	mov	r3, r0
 8013f5a:	617b      	str	r3, [r7, #20]
			break;
 8013f5c:	e025      	b.n	8013faa <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8013f5e:	693b      	ldr	r3, [r7, #16]
 8013f60:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013f62:	683b      	ldr	r3, [r7, #0]
 8013f64:	09db      	lsrs	r3, r3, #7
 8013f66:	4413      	add	r3, r2
 8013f68:	4619      	mov	r1, r3
 8013f6a:	6938      	ldr	r0, [r7, #16]
 8013f6c:	f7ff fec1 	bl	8013cf2 <move_window>
 8013f70:	4603      	mov	r3, r0
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	d118      	bne.n	8013fa8 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8013f76:	693b      	ldr	r3, [r7, #16]
 8013f78:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8013f7c:	683b      	ldr	r3, [r7, #0]
 8013f7e:	009b      	lsls	r3, r3, #2
 8013f80:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8013f84:	4413      	add	r3, r2
 8013f86:	4618      	mov	r0, r3
 8013f88:	f7ff fd98 	bl	8013abc <ld_dword>
 8013f8c:	4603      	mov	r3, r0
 8013f8e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8013f92:	617b      	str	r3, [r7, #20]
			break;
 8013f94:	e009      	b.n	8013faa <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8013f96:	2301      	movs	r3, #1
 8013f98:	617b      	str	r3, [r7, #20]
 8013f9a:	e006      	b.n	8013faa <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013f9c:	bf00      	nop
 8013f9e:	e004      	b.n	8013faa <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013fa0:	bf00      	nop
 8013fa2:	e002      	b.n	8013faa <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8013fa4:	bf00      	nop
 8013fa6:	e000      	b.n	8013faa <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8013fa8:	bf00      	nop
		}
	}

	return val;
 8013faa:	697b      	ldr	r3, [r7, #20]
}
 8013fac:	4618      	mov	r0, r3
 8013fae:	3718      	adds	r7, #24
 8013fb0:	46bd      	mov	sp, r7
 8013fb2:	bd80      	pop	{r7, pc}

08013fb4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8013fb4:	b590      	push	{r4, r7, lr}
 8013fb6:	b089      	sub	sp, #36	@ 0x24
 8013fb8:	af00      	add	r7, sp, #0
 8013fba:	60f8      	str	r0, [r7, #12]
 8013fbc:	60b9      	str	r1, [r7, #8]
 8013fbe:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8013fc0:	2302      	movs	r3, #2
 8013fc2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8013fc4:	68bb      	ldr	r3, [r7, #8]
 8013fc6:	2b01      	cmp	r3, #1
 8013fc8:	f240 80d9 	bls.w	801417e <put_fat+0x1ca>
 8013fcc:	68fb      	ldr	r3, [r7, #12]
 8013fce:	69db      	ldr	r3, [r3, #28]
 8013fd0:	68ba      	ldr	r2, [r7, #8]
 8013fd2:	429a      	cmp	r2, r3
 8013fd4:	f080 80d3 	bcs.w	801417e <put_fat+0x1ca>
		switch (fs->fs_type) {
 8013fd8:	68fb      	ldr	r3, [r7, #12]
 8013fda:	781b      	ldrb	r3, [r3, #0]
 8013fdc:	2b03      	cmp	r3, #3
 8013fde:	f000 8096 	beq.w	801410e <put_fat+0x15a>
 8013fe2:	2b03      	cmp	r3, #3
 8013fe4:	f300 80cb 	bgt.w	801417e <put_fat+0x1ca>
 8013fe8:	2b01      	cmp	r3, #1
 8013fea:	d002      	beq.n	8013ff2 <put_fat+0x3e>
 8013fec:	2b02      	cmp	r3, #2
 8013fee:	d06e      	beq.n	80140ce <put_fat+0x11a>
 8013ff0:	e0c5      	b.n	801417e <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8013ff2:	68bb      	ldr	r3, [r7, #8]
 8013ff4:	61bb      	str	r3, [r7, #24]
 8013ff6:	69bb      	ldr	r3, [r7, #24]
 8013ff8:	085b      	lsrs	r3, r3, #1
 8013ffa:	69ba      	ldr	r2, [r7, #24]
 8013ffc:	4413      	add	r3, r2
 8013ffe:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8014000:	68fb      	ldr	r3, [r7, #12]
 8014002:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8014004:	69bb      	ldr	r3, [r7, #24]
 8014006:	0a5b      	lsrs	r3, r3, #9
 8014008:	4413      	add	r3, r2
 801400a:	4619      	mov	r1, r3
 801400c:	68f8      	ldr	r0, [r7, #12]
 801400e:	f7ff fe70 	bl	8013cf2 <move_window>
 8014012:	4603      	mov	r3, r0
 8014014:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8014016:	7ffb      	ldrb	r3, [r7, #31]
 8014018:	2b00      	cmp	r3, #0
 801401a:	f040 80a9 	bne.w	8014170 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 801401e:	68fb      	ldr	r3, [r7, #12]
 8014020:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8014024:	69bb      	ldr	r3, [r7, #24]
 8014026:	1c59      	adds	r1, r3, #1
 8014028:	61b9      	str	r1, [r7, #24]
 801402a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801402e:	4413      	add	r3, r2
 8014030:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8014032:	68bb      	ldr	r3, [r7, #8]
 8014034:	f003 0301 	and.w	r3, r3, #1
 8014038:	2b00      	cmp	r3, #0
 801403a:	d00d      	beq.n	8014058 <put_fat+0xa4>
 801403c:	697b      	ldr	r3, [r7, #20]
 801403e:	781b      	ldrb	r3, [r3, #0]
 8014040:	b25b      	sxtb	r3, r3
 8014042:	f003 030f 	and.w	r3, r3, #15
 8014046:	b25a      	sxtb	r2, r3
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	b2db      	uxtb	r3, r3
 801404c:	011b      	lsls	r3, r3, #4
 801404e:	b25b      	sxtb	r3, r3
 8014050:	4313      	orrs	r3, r2
 8014052:	b25b      	sxtb	r3, r3
 8014054:	b2db      	uxtb	r3, r3
 8014056:	e001      	b.n	801405c <put_fat+0xa8>
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	b2db      	uxtb	r3, r3
 801405c:	697a      	ldr	r2, [r7, #20]
 801405e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8014060:	68fb      	ldr	r3, [r7, #12]
 8014062:	2201      	movs	r2, #1
 8014064:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8014066:	68fb      	ldr	r3, [r7, #12]
 8014068:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801406a:	69bb      	ldr	r3, [r7, #24]
 801406c:	0a5b      	lsrs	r3, r3, #9
 801406e:	4413      	add	r3, r2
 8014070:	4619      	mov	r1, r3
 8014072:	68f8      	ldr	r0, [r7, #12]
 8014074:	f7ff fe3d 	bl	8013cf2 <move_window>
 8014078:	4603      	mov	r3, r0
 801407a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801407c:	7ffb      	ldrb	r3, [r7, #31]
 801407e:	2b00      	cmp	r3, #0
 8014080:	d178      	bne.n	8014174 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8014082:	68fb      	ldr	r3, [r7, #12]
 8014084:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8014088:	69bb      	ldr	r3, [r7, #24]
 801408a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801408e:	4413      	add	r3, r2
 8014090:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8014092:	68bb      	ldr	r3, [r7, #8]
 8014094:	f003 0301 	and.w	r3, r3, #1
 8014098:	2b00      	cmp	r3, #0
 801409a:	d003      	beq.n	80140a4 <put_fat+0xf0>
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	091b      	lsrs	r3, r3, #4
 80140a0:	b2db      	uxtb	r3, r3
 80140a2:	e00e      	b.n	80140c2 <put_fat+0x10e>
 80140a4:	697b      	ldr	r3, [r7, #20]
 80140a6:	781b      	ldrb	r3, [r3, #0]
 80140a8:	b25b      	sxtb	r3, r3
 80140aa:	f023 030f 	bic.w	r3, r3, #15
 80140ae:	b25a      	sxtb	r2, r3
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	0a1b      	lsrs	r3, r3, #8
 80140b4:	b25b      	sxtb	r3, r3
 80140b6:	f003 030f 	and.w	r3, r3, #15
 80140ba:	b25b      	sxtb	r3, r3
 80140bc:	4313      	orrs	r3, r2
 80140be:	b25b      	sxtb	r3, r3
 80140c0:	b2db      	uxtb	r3, r3
 80140c2:	697a      	ldr	r2, [r7, #20]
 80140c4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80140c6:	68fb      	ldr	r3, [r7, #12]
 80140c8:	2201      	movs	r2, #1
 80140ca:	70da      	strb	r2, [r3, #3]
			break;
 80140cc:	e057      	b.n	801417e <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80140ce:	68fb      	ldr	r3, [r7, #12]
 80140d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80140d2:	68bb      	ldr	r3, [r7, #8]
 80140d4:	0a1b      	lsrs	r3, r3, #8
 80140d6:	4413      	add	r3, r2
 80140d8:	4619      	mov	r1, r3
 80140da:	68f8      	ldr	r0, [r7, #12]
 80140dc:	f7ff fe09 	bl	8013cf2 <move_window>
 80140e0:	4603      	mov	r3, r0
 80140e2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80140e4:	7ffb      	ldrb	r3, [r7, #31]
 80140e6:	2b00      	cmp	r3, #0
 80140e8:	d146      	bne.n	8014178 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80140ea:	68fb      	ldr	r3, [r7, #12]
 80140ec:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80140f0:	68bb      	ldr	r3, [r7, #8]
 80140f2:	005b      	lsls	r3, r3, #1
 80140f4:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80140f8:	4413      	add	r3, r2
 80140fa:	687a      	ldr	r2, [r7, #4]
 80140fc:	b292      	uxth	r2, r2
 80140fe:	4611      	mov	r1, r2
 8014100:	4618      	mov	r0, r3
 8014102:	f7ff fcfe 	bl	8013b02 <st_word>
			fs->wflag = 1;
 8014106:	68fb      	ldr	r3, [r7, #12]
 8014108:	2201      	movs	r2, #1
 801410a:	70da      	strb	r2, [r3, #3]
			break;
 801410c:	e037      	b.n	801417e <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801410e:	68fb      	ldr	r3, [r7, #12]
 8014110:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8014112:	68bb      	ldr	r3, [r7, #8]
 8014114:	09db      	lsrs	r3, r3, #7
 8014116:	4413      	add	r3, r2
 8014118:	4619      	mov	r1, r3
 801411a:	68f8      	ldr	r0, [r7, #12]
 801411c:	f7ff fde9 	bl	8013cf2 <move_window>
 8014120:	4603      	mov	r3, r0
 8014122:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8014124:	7ffb      	ldrb	r3, [r7, #31]
 8014126:	2b00      	cmp	r3, #0
 8014128:	d128      	bne.n	801417c <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8014130:	68fb      	ldr	r3, [r7, #12]
 8014132:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8014136:	68bb      	ldr	r3, [r7, #8]
 8014138:	009b      	lsls	r3, r3, #2
 801413a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 801413e:	4413      	add	r3, r2
 8014140:	4618      	mov	r0, r3
 8014142:	f7ff fcbb 	bl	8013abc <ld_dword>
 8014146:	4603      	mov	r3, r0
 8014148:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 801414c:	4323      	orrs	r3, r4
 801414e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8014150:	68fb      	ldr	r3, [r7, #12]
 8014152:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8014156:	68bb      	ldr	r3, [r7, #8]
 8014158:	009b      	lsls	r3, r3, #2
 801415a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 801415e:	4413      	add	r3, r2
 8014160:	6879      	ldr	r1, [r7, #4]
 8014162:	4618      	mov	r0, r3
 8014164:	f7ff fce8 	bl	8013b38 <st_dword>
			fs->wflag = 1;
 8014168:	68fb      	ldr	r3, [r7, #12]
 801416a:	2201      	movs	r2, #1
 801416c:	70da      	strb	r2, [r3, #3]
			break;
 801416e:	e006      	b.n	801417e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8014170:	bf00      	nop
 8014172:	e004      	b.n	801417e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8014174:	bf00      	nop
 8014176:	e002      	b.n	801417e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8014178:	bf00      	nop
 801417a:	e000      	b.n	801417e <put_fat+0x1ca>
			if (res != FR_OK) break;
 801417c:	bf00      	nop
		}
	}
	return res;
 801417e:	7ffb      	ldrb	r3, [r7, #31]
}
 8014180:	4618      	mov	r0, r3
 8014182:	3724      	adds	r7, #36	@ 0x24
 8014184:	46bd      	mov	sp, r7
 8014186:	bd90      	pop	{r4, r7, pc}

08014188 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8014188:	b580      	push	{r7, lr}
 801418a:	b088      	sub	sp, #32
 801418c:	af00      	add	r7, sp, #0
 801418e:	6078      	str	r0, [r7, #4]
 8014190:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	681b      	ldr	r3, [r3, #0]
 8014196:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8014198:	683b      	ldr	r3, [r7, #0]
 801419a:	2b00      	cmp	r3, #0
 801419c:	d10d      	bne.n	80141ba <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801419e:	693b      	ldr	r3, [r7, #16]
 80141a0:	695b      	ldr	r3, [r3, #20]
 80141a2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80141a4:	69bb      	ldr	r3, [r7, #24]
 80141a6:	2b00      	cmp	r3, #0
 80141a8:	d004      	beq.n	80141b4 <create_chain+0x2c>
 80141aa:	693b      	ldr	r3, [r7, #16]
 80141ac:	69db      	ldr	r3, [r3, #28]
 80141ae:	69ba      	ldr	r2, [r7, #24]
 80141b0:	429a      	cmp	r2, r3
 80141b2:	d31b      	bcc.n	80141ec <create_chain+0x64>
 80141b4:	2301      	movs	r3, #1
 80141b6:	61bb      	str	r3, [r7, #24]
 80141b8:	e018      	b.n	80141ec <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80141ba:	6839      	ldr	r1, [r7, #0]
 80141bc:	6878      	ldr	r0, [r7, #4]
 80141be:	f7ff fe52 	bl	8013e66 <get_fat>
 80141c2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80141c4:	68fb      	ldr	r3, [r7, #12]
 80141c6:	2b01      	cmp	r3, #1
 80141c8:	d801      	bhi.n	80141ce <create_chain+0x46>
 80141ca:	2301      	movs	r3, #1
 80141cc:	e070      	b.n	80142b0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80141ce:	68fb      	ldr	r3, [r7, #12]
 80141d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80141d4:	d101      	bne.n	80141da <create_chain+0x52>
 80141d6:	68fb      	ldr	r3, [r7, #12]
 80141d8:	e06a      	b.n	80142b0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80141da:	693b      	ldr	r3, [r7, #16]
 80141dc:	69db      	ldr	r3, [r3, #28]
 80141de:	68fa      	ldr	r2, [r7, #12]
 80141e0:	429a      	cmp	r2, r3
 80141e2:	d201      	bcs.n	80141e8 <create_chain+0x60>
 80141e4:	68fb      	ldr	r3, [r7, #12]
 80141e6:	e063      	b.n	80142b0 <create_chain+0x128>
		scl = clst;
 80141e8:	683b      	ldr	r3, [r7, #0]
 80141ea:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80141ec:	69bb      	ldr	r3, [r7, #24]
 80141ee:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80141f0:	69fb      	ldr	r3, [r7, #28]
 80141f2:	3301      	adds	r3, #1
 80141f4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80141f6:	693b      	ldr	r3, [r7, #16]
 80141f8:	69db      	ldr	r3, [r3, #28]
 80141fa:	69fa      	ldr	r2, [r7, #28]
 80141fc:	429a      	cmp	r2, r3
 80141fe:	d307      	bcc.n	8014210 <create_chain+0x88>
				ncl = 2;
 8014200:	2302      	movs	r3, #2
 8014202:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8014204:	69fa      	ldr	r2, [r7, #28]
 8014206:	69bb      	ldr	r3, [r7, #24]
 8014208:	429a      	cmp	r2, r3
 801420a:	d901      	bls.n	8014210 <create_chain+0x88>
 801420c:	2300      	movs	r3, #0
 801420e:	e04f      	b.n	80142b0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8014210:	69f9      	ldr	r1, [r7, #28]
 8014212:	6878      	ldr	r0, [r7, #4]
 8014214:	f7ff fe27 	bl	8013e66 <get_fat>
 8014218:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801421a:	68fb      	ldr	r3, [r7, #12]
 801421c:	2b00      	cmp	r3, #0
 801421e:	d00e      	beq.n	801423e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8014220:	68fb      	ldr	r3, [r7, #12]
 8014222:	2b01      	cmp	r3, #1
 8014224:	d003      	beq.n	801422e <create_chain+0xa6>
 8014226:	68fb      	ldr	r3, [r7, #12]
 8014228:	f1b3 3fff 	cmp.w	r3, #4294967295
 801422c:	d101      	bne.n	8014232 <create_chain+0xaa>
 801422e:	68fb      	ldr	r3, [r7, #12]
 8014230:	e03e      	b.n	80142b0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8014232:	69fa      	ldr	r2, [r7, #28]
 8014234:	69bb      	ldr	r3, [r7, #24]
 8014236:	429a      	cmp	r2, r3
 8014238:	d1da      	bne.n	80141f0 <create_chain+0x68>
 801423a:	2300      	movs	r3, #0
 801423c:	e038      	b.n	80142b0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801423e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8014240:	f04f 32ff 	mov.w	r2, #4294967295
 8014244:	69f9      	ldr	r1, [r7, #28]
 8014246:	6938      	ldr	r0, [r7, #16]
 8014248:	f7ff feb4 	bl	8013fb4 <put_fat>
 801424c:	4603      	mov	r3, r0
 801424e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8014250:	7dfb      	ldrb	r3, [r7, #23]
 8014252:	2b00      	cmp	r3, #0
 8014254:	d109      	bne.n	801426a <create_chain+0xe2>
 8014256:	683b      	ldr	r3, [r7, #0]
 8014258:	2b00      	cmp	r3, #0
 801425a:	d006      	beq.n	801426a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801425c:	69fa      	ldr	r2, [r7, #28]
 801425e:	6839      	ldr	r1, [r7, #0]
 8014260:	6938      	ldr	r0, [r7, #16]
 8014262:	f7ff fea7 	bl	8013fb4 <put_fat>
 8014266:	4603      	mov	r3, r0
 8014268:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801426a:	7dfb      	ldrb	r3, [r7, #23]
 801426c:	2b00      	cmp	r3, #0
 801426e:	d116      	bne.n	801429e <create_chain+0x116>
		fs->last_clst = ncl;
 8014270:	693b      	ldr	r3, [r7, #16]
 8014272:	69fa      	ldr	r2, [r7, #28]
 8014274:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8014276:	693b      	ldr	r3, [r7, #16]
 8014278:	699a      	ldr	r2, [r3, #24]
 801427a:	693b      	ldr	r3, [r7, #16]
 801427c:	69db      	ldr	r3, [r3, #28]
 801427e:	3b02      	subs	r3, #2
 8014280:	429a      	cmp	r2, r3
 8014282:	d804      	bhi.n	801428e <create_chain+0x106>
 8014284:	693b      	ldr	r3, [r7, #16]
 8014286:	699b      	ldr	r3, [r3, #24]
 8014288:	1e5a      	subs	r2, r3, #1
 801428a:	693b      	ldr	r3, [r7, #16]
 801428c:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 801428e:	693b      	ldr	r3, [r7, #16]
 8014290:	791b      	ldrb	r3, [r3, #4]
 8014292:	f043 0301 	orr.w	r3, r3, #1
 8014296:	b2da      	uxtb	r2, r3
 8014298:	693b      	ldr	r3, [r7, #16]
 801429a:	711a      	strb	r2, [r3, #4]
 801429c:	e007      	b.n	80142ae <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801429e:	7dfb      	ldrb	r3, [r7, #23]
 80142a0:	2b01      	cmp	r3, #1
 80142a2:	d102      	bne.n	80142aa <create_chain+0x122>
 80142a4:	f04f 33ff 	mov.w	r3, #4294967295
 80142a8:	e000      	b.n	80142ac <create_chain+0x124>
 80142aa:	2301      	movs	r3, #1
 80142ac:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80142ae:	69fb      	ldr	r3, [r7, #28]
}
 80142b0:	4618      	mov	r0, r3
 80142b2:	3720      	adds	r7, #32
 80142b4:	46bd      	mov	sp, r7
 80142b6:	bd80      	pop	{r7, pc}

080142b8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80142b8:	b480      	push	{r7}
 80142ba:	b087      	sub	sp, #28
 80142bc:	af00      	add	r7, sp, #0
 80142be:	6078      	str	r0, [r7, #4]
 80142c0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	681b      	ldr	r3, [r3, #0]
 80142c6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80142cc:	3304      	adds	r3, #4
 80142ce:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80142d0:	683b      	ldr	r3, [r7, #0]
 80142d2:	0a5b      	lsrs	r3, r3, #9
 80142d4:	68fa      	ldr	r2, [r7, #12]
 80142d6:	8952      	ldrh	r2, [r2, #10]
 80142d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80142dc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80142de:	693b      	ldr	r3, [r7, #16]
 80142e0:	1d1a      	adds	r2, r3, #4
 80142e2:	613a      	str	r2, [r7, #16]
 80142e4:	681b      	ldr	r3, [r3, #0]
 80142e6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80142e8:	68bb      	ldr	r3, [r7, #8]
 80142ea:	2b00      	cmp	r3, #0
 80142ec:	d101      	bne.n	80142f2 <clmt_clust+0x3a>
 80142ee:	2300      	movs	r3, #0
 80142f0:	e010      	b.n	8014314 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80142f2:	697a      	ldr	r2, [r7, #20]
 80142f4:	68bb      	ldr	r3, [r7, #8]
 80142f6:	429a      	cmp	r2, r3
 80142f8:	d307      	bcc.n	801430a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80142fa:	697a      	ldr	r2, [r7, #20]
 80142fc:	68bb      	ldr	r3, [r7, #8]
 80142fe:	1ad3      	subs	r3, r2, r3
 8014300:	617b      	str	r3, [r7, #20]
 8014302:	693b      	ldr	r3, [r7, #16]
 8014304:	3304      	adds	r3, #4
 8014306:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8014308:	e7e9      	b.n	80142de <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 801430a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801430c:	693b      	ldr	r3, [r7, #16]
 801430e:	681a      	ldr	r2, [r3, #0]
 8014310:	697b      	ldr	r3, [r7, #20]
 8014312:	4413      	add	r3, r2
}
 8014314:	4618      	mov	r0, r3
 8014316:	371c      	adds	r7, #28
 8014318:	46bd      	mov	sp, r7
 801431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801431e:	4770      	bx	lr

08014320 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8014320:	b580      	push	{r7, lr}
 8014322:	b084      	sub	sp, #16
 8014324:	af00      	add	r7, sp, #0
 8014326:	60f8      	str	r0, [r7, #12]
 8014328:	60b9      	str	r1, [r7, #8]
 801432a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801432c:	68bb      	ldr	r3, [r7, #8]
 801432e:	331a      	adds	r3, #26
 8014330:	687a      	ldr	r2, [r7, #4]
 8014332:	b292      	uxth	r2, r2
 8014334:	4611      	mov	r1, r2
 8014336:	4618      	mov	r0, r3
 8014338:	f7ff fbe3 	bl	8013b02 <st_word>
	if (fs->fs_type == FS_FAT32) {
 801433c:	68fb      	ldr	r3, [r7, #12]
 801433e:	781b      	ldrb	r3, [r3, #0]
 8014340:	2b03      	cmp	r3, #3
 8014342:	d109      	bne.n	8014358 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8014344:	68bb      	ldr	r3, [r7, #8]
 8014346:	f103 0214 	add.w	r2, r3, #20
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	0c1b      	lsrs	r3, r3, #16
 801434e:	b29b      	uxth	r3, r3
 8014350:	4619      	mov	r1, r3
 8014352:	4610      	mov	r0, r2
 8014354:	f7ff fbd5 	bl	8013b02 <st_word>
	}
}
 8014358:	bf00      	nop
 801435a:	3710      	adds	r7, #16
 801435c:	46bd      	mov	sp, r7
 801435e:	bd80      	pop	{r7, pc}

08014360 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8014360:	b580      	push	{r7, lr}
 8014362:	b084      	sub	sp, #16
 8014364:	af00      	add	r7, sp, #0
 8014366:	6078      	str	r0, [r7, #4]
 8014368:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801436a:	2309      	movs	r3, #9
 801436c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	2b00      	cmp	r3, #0
 8014372:	d02e      	beq.n	80143d2 <validate+0x72>
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	681b      	ldr	r3, [r3, #0]
 8014378:	2b00      	cmp	r3, #0
 801437a:	d02a      	beq.n	80143d2 <validate+0x72>
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	681b      	ldr	r3, [r3, #0]
 8014380:	781b      	ldrb	r3, [r3, #0]
 8014382:	2b00      	cmp	r3, #0
 8014384:	d025      	beq.n	80143d2 <validate+0x72>
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	889a      	ldrh	r2, [r3, #4]
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	681b      	ldr	r3, [r3, #0]
 801438e:	88db      	ldrh	r3, [r3, #6]
 8014390:	429a      	cmp	r2, r3
 8014392:	d11e      	bne.n	80143d2 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	681b      	ldr	r3, [r3, #0]
 8014398:	4618      	mov	r0, r3
 801439a:	f7ff fc35 	bl	8013c08 <lock_fs>
 801439e:	4603      	mov	r3, r0
 80143a0:	2b00      	cmp	r3, #0
 80143a2:	d014      	beq.n	80143ce <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	681b      	ldr	r3, [r3, #0]
 80143a8:	785b      	ldrb	r3, [r3, #1]
 80143aa:	4618      	mov	r0, r3
 80143ac:	f7ff faf6 	bl	801399c <disk_status>
 80143b0:	4603      	mov	r3, r0
 80143b2:	f003 0301 	and.w	r3, r3, #1
 80143b6:	2b00      	cmp	r3, #0
 80143b8:	d102      	bne.n	80143c0 <validate+0x60>
				res = FR_OK;
 80143ba:	2300      	movs	r3, #0
 80143bc:	73fb      	strb	r3, [r7, #15]
 80143be:	e008      	b.n	80143d2 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	681b      	ldr	r3, [r3, #0]
 80143c4:	2100      	movs	r1, #0
 80143c6:	4618      	mov	r0, r3
 80143c8:	f7ff fc34 	bl	8013c34 <unlock_fs>
 80143cc:	e001      	b.n	80143d2 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 80143ce:	230f      	movs	r3, #15
 80143d0:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80143d2:	7bfb      	ldrb	r3, [r7, #15]
 80143d4:	2b00      	cmp	r3, #0
 80143d6:	d102      	bne.n	80143de <validate+0x7e>
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	681b      	ldr	r3, [r3, #0]
 80143dc:	e000      	b.n	80143e0 <validate+0x80>
 80143de:	2300      	movs	r3, #0
 80143e0:	683a      	ldr	r2, [r7, #0]
 80143e2:	6013      	str	r3, [r2, #0]
	return res;
 80143e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80143e6:	4618      	mov	r0, r3
 80143e8:	3710      	adds	r7, #16
 80143ea:	46bd      	mov	sp, r7
 80143ec:	bd80      	pop	{r7, pc}

080143ee <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80143ee:	b580      	push	{r7, lr}
 80143f0:	b08c      	sub	sp, #48	@ 0x30
 80143f2:	af00      	add	r7, sp, #0
 80143f4:	60f8      	str	r0, [r7, #12]
 80143f6:	60b9      	str	r1, [r7, #8]
 80143f8:	607a      	str	r2, [r7, #4]
 80143fa:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80143fc:	68bb      	ldr	r3, [r7, #8]
 80143fe:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8014400:	683b      	ldr	r3, [r7, #0]
 8014402:	2200      	movs	r2, #0
 8014404:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8014406:	68fb      	ldr	r3, [r7, #12]
 8014408:	f107 0210 	add.w	r2, r7, #16
 801440c:	4611      	mov	r1, r2
 801440e:	4618      	mov	r0, r3
 8014410:	f7ff ffa6 	bl	8014360 <validate>
 8014414:	4603      	mov	r3, r0
 8014416:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801441a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801441e:	2b00      	cmp	r3, #0
 8014420:	d107      	bne.n	8014432 <f_write+0x44>
 8014422:	68fb      	ldr	r3, [r7, #12]
 8014424:	7d5b      	ldrb	r3, [r3, #21]
 8014426:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 801442a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801442e:	2b00      	cmp	r3, #0
 8014430:	d009      	beq.n	8014446 <f_write+0x58>
 8014432:	693b      	ldr	r3, [r7, #16]
 8014434:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8014438:	4611      	mov	r1, r2
 801443a:	4618      	mov	r0, r3
 801443c:	f7ff fbfa 	bl	8013c34 <unlock_fs>
 8014440:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8014444:	e173      	b.n	801472e <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8014446:	68fb      	ldr	r3, [r7, #12]
 8014448:	7d1b      	ldrb	r3, [r3, #20]
 801444a:	f003 0302 	and.w	r3, r3, #2
 801444e:	2b00      	cmp	r3, #0
 8014450:	d106      	bne.n	8014460 <f_write+0x72>
 8014452:	693b      	ldr	r3, [r7, #16]
 8014454:	2107      	movs	r1, #7
 8014456:	4618      	mov	r0, r3
 8014458:	f7ff fbec 	bl	8013c34 <unlock_fs>
 801445c:	2307      	movs	r3, #7
 801445e:	e166      	b.n	801472e <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8014460:	68fb      	ldr	r3, [r7, #12]
 8014462:	699a      	ldr	r2, [r3, #24]
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	441a      	add	r2, r3
 8014468:	68fb      	ldr	r3, [r7, #12]
 801446a:	699b      	ldr	r3, [r3, #24]
 801446c:	429a      	cmp	r2, r3
 801446e:	f080 814b 	bcs.w	8014708 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8014472:	68fb      	ldr	r3, [r7, #12]
 8014474:	699b      	ldr	r3, [r3, #24]
 8014476:	43db      	mvns	r3, r3
 8014478:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801447a:	e145      	b.n	8014708 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801447c:	68fb      	ldr	r3, [r7, #12]
 801447e:	699b      	ldr	r3, [r3, #24]
 8014480:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014484:	2b00      	cmp	r3, #0
 8014486:	f040 8101 	bne.w	801468c <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801448a:	68fb      	ldr	r3, [r7, #12]
 801448c:	699b      	ldr	r3, [r3, #24]
 801448e:	0a5b      	lsrs	r3, r3, #9
 8014490:	693a      	ldr	r2, [r7, #16]
 8014492:	8952      	ldrh	r2, [r2, #10]
 8014494:	3a01      	subs	r2, #1
 8014496:	4013      	ands	r3, r2
 8014498:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801449a:	69bb      	ldr	r3, [r7, #24]
 801449c:	2b00      	cmp	r3, #0
 801449e:	d14d      	bne.n	801453c <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80144a0:	68fb      	ldr	r3, [r7, #12]
 80144a2:	699b      	ldr	r3, [r3, #24]
 80144a4:	2b00      	cmp	r3, #0
 80144a6:	d10c      	bne.n	80144c2 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80144a8:	68fb      	ldr	r3, [r7, #12]
 80144aa:	689b      	ldr	r3, [r3, #8]
 80144ac:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80144ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	d11a      	bne.n	80144ea <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80144b4:	68fb      	ldr	r3, [r7, #12]
 80144b6:	2100      	movs	r1, #0
 80144b8:	4618      	mov	r0, r3
 80144ba:	f7ff fe65 	bl	8014188 <create_chain>
 80144be:	62b8      	str	r0, [r7, #40]	@ 0x28
 80144c0:	e013      	b.n	80144ea <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80144c2:	68fb      	ldr	r3, [r7, #12]
 80144c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	d007      	beq.n	80144da <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80144ca:	68fb      	ldr	r3, [r7, #12]
 80144cc:	699b      	ldr	r3, [r3, #24]
 80144ce:	4619      	mov	r1, r3
 80144d0:	68f8      	ldr	r0, [r7, #12]
 80144d2:	f7ff fef1 	bl	80142b8 <clmt_clust>
 80144d6:	62b8      	str	r0, [r7, #40]	@ 0x28
 80144d8:	e007      	b.n	80144ea <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80144da:	68fa      	ldr	r2, [r7, #12]
 80144dc:	68fb      	ldr	r3, [r7, #12]
 80144de:	69db      	ldr	r3, [r3, #28]
 80144e0:	4619      	mov	r1, r3
 80144e2:	4610      	mov	r0, r2
 80144e4:	f7ff fe50 	bl	8014188 <create_chain>
 80144e8:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80144ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	f000 8110 	beq.w	8014712 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80144f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80144f4:	2b01      	cmp	r3, #1
 80144f6:	d109      	bne.n	801450c <f_write+0x11e>
 80144f8:	68fb      	ldr	r3, [r7, #12]
 80144fa:	2202      	movs	r2, #2
 80144fc:	755a      	strb	r2, [r3, #21]
 80144fe:	693b      	ldr	r3, [r7, #16]
 8014500:	2102      	movs	r1, #2
 8014502:	4618      	mov	r0, r3
 8014504:	f7ff fb96 	bl	8013c34 <unlock_fs>
 8014508:	2302      	movs	r3, #2
 801450a:	e110      	b.n	801472e <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801450c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801450e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014512:	d109      	bne.n	8014528 <f_write+0x13a>
 8014514:	68fb      	ldr	r3, [r7, #12]
 8014516:	2201      	movs	r2, #1
 8014518:	755a      	strb	r2, [r3, #21]
 801451a:	693b      	ldr	r3, [r7, #16]
 801451c:	2101      	movs	r1, #1
 801451e:	4618      	mov	r0, r3
 8014520:	f7ff fb88 	bl	8013c34 <unlock_fs>
 8014524:	2301      	movs	r3, #1
 8014526:	e102      	b.n	801472e <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8014528:	68fb      	ldr	r3, [r7, #12]
 801452a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801452c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801452e:	68fb      	ldr	r3, [r7, #12]
 8014530:	689b      	ldr	r3, [r3, #8]
 8014532:	2b00      	cmp	r3, #0
 8014534:	d102      	bne.n	801453c <f_write+0x14e>
 8014536:	68fb      	ldr	r3, [r7, #12]
 8014538:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801453a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801453c:	68fb      	ldr	r3, [r7, #12]
 801453e:	7d1b      	ldrb	r3, [r3, #20]
 8014540:	b25b      	sxtb	r3, r3
 8014542:	2b00      	cmp	r3, #0
 8014544:	da1d      	bge.n	8014582 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014546:	693b      	ldr	r3, [r7, #16]
 8014548:	7858      	ldrb	r0, [r3, #1]
 801454a:	68fb      	ldr	r3, [r7, #12]
 801454c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8014550:	68fb      	ldr	r3, [r7, #12]
 8014552:	6a1a      	ldr	r2, [r3, #32]
 8014554:	2301      	movs	r3, #1
 8014556:	f7ff fa5b 	bl	8013a10 <disk_write>
 801455a:	4603      	mov	r3, r0
 801455c:	2b00      	cmp	r3, #0
 801455e:	d009      	beq.n	8014574 <f_write+0x186>
 8014560:	68fb      	ldr	r3, [r7, #12]
 8014562:	2201      	movs	r2, #1
 8014564:	755a      	strb	r2, [r3, #21]
 8014566:	693b      	ldr	r3, [r7, #16]
 8014568:	2101      	movs	r1, #1
 801456a:	4618      	mov	r0, r3
 801456c:	f7ff fb62 	bl	8013c34 <unlock_fs>
 8014570:	2301      	movs	r3, #1
 8014572:	e0dc      	b.n	801472e <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014574:	68fb      	ldr	r3, [r7, #12]
 8014576:	7d1b      	ldrb	r3, [r3, #20]
 8014578:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801457c:	b2da      	uxtb	r2, r3
 801457e:	68fb      	ldr	r3, [r7, #12]
 8014580:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8014582:	693a      	ldr	r2, [r7, #16]
 8014584:	68fb      	ldr	r3, [r7, #12]
 8014586:	69db      	ldr	r3, [r3, #28]
 8014588:	4619      	mov	r1, r3
 801458a:	4610      	mov	r0, r2
 801458c:	f7ff fc4c 	bl	8013e28 <clust2sect>
 8014590:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8014592:	697b      	ldr	r3, [r7, #20]
 8014594:	2b00      	cmp	r3, #0
 8014596:	d109      	bne.n	80145ac <f_write+0x1be>
 8014598:	68fb      	ldr	r3, [r7, #12]
 801459a:	2202      	movs	r2, #2
 801459c:	755a      	strb	r2, [r3, #21]
 801459e:	693b      	ldr	r3, [r7, #16]
 80145a0:	2102      	movs	r1, #2
 80145a2:	4618      	mov	r0, r3
 80145a4:	f7ff fb46 	bl	8013c34 <unlock_fs>
 80145a8:	2302      	movs	r3, #2
 80145aa:	e0c0      	b.n	801472e <f_write+0x340>
			sect += csect;
 80145ac:	697a      	ldr	r2, [r7, #20]
 80145ae:	69bb      	ldr	r3, [r7, #24]
 80145b0:	4413      	add	r3, r2
 80145b2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	0a5b      	lsrs	r3, r3, #9
 80145b8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80145ba:	6a3b      	ldr	r3, [r7, #32]
 80145bc:	2b00      	cmp	r3, #0
 80145be:	d041      	beq.n	8014644 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80145c0:	69ba      	ldr	r2, [r7, #24]
 80145c2:	6a3b      	ldr	r3, [r7, #32]
 80145c4:	4413      	add	r3, r2
 80145c6:	693a      	ldr	r2, [r7, #16]
 80145c8:	8952      	ldrh	r2, [r2, #10]
 80145ca:	4293      	cmp	r3, r2
 80145cc:	d905      	bls.n	80145da <f_write+0x1ec>
					cc = fs->csize - csect;
 80145ce:	693b      	ldr	r3, [r7, #16]
 80145d0:	895b      	ldrh	r3, [r3, #10]
 80145d2:	461a      	mov	r2, r3
 80145d4:	69bb      	ldr	r3, [r7, #24]
 80145d6:	1ad3      	subs	r3, r2, r3
 80145d8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80145da:	693b      	ldr	r3, [r7, #16]
 80145dc:	7858      	ldrb	r0, [r3, #1]
 80145de:	6a3b      	ldr	r3, [r7, #32]
 80145e0:	697a      	ldr	r2, [r7, #20]
 80145e2:	69f9      	ldr	r1, [r7, #28]
 80145e4:	f7ff fa14 	bl	8013a10 <disk_write>
 80145e8:	4603      	mov	r3, r0
 80145ea:	2b00      	cmp	r3, #0
 80145ec:	d009      	beq.n	8014602 <f_write+0x214>
 80145ee:	68fb      	ldr	r3, [r7, #12]
 80145f0:	2201      	movs	r2, #1
 80145f2:	755a      	strb	r2, [r3, #21]
 80145f4:	693b      	ldr	r3, [r7, #16]
 80145f6:	2101      	movs	r1, #1
 80145f8:	4618      	mov	r0, r3
 80145fa:	f7ff fb1b 	bl	8013c34 <unlock_fs>
 80145fe:	2301      	movs	r3, #1
 8014600:	e095      	b.n	801472e <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8014602:	68fb      	ldr	r3, [r7, #12]
 8014604:	6a1a      	ldr	r2, [r3, #32]
 8014606:	697b      	ldr	r3, [r7, #20]
 8014608:	1ad3      	subs	r3, r2, r3
 801460a:	6a3a      	ldr	r2, [r7, #32]
 801460c:	429a      	cmp	r2, r3
 801460e:	d915      	bls.n	801463c <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8014610:	68fb      	ldr	r3, [r7, #12]
 8014612:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8014616:	68fb      	ldr	r3, [r7, #12]
 8014618:	6a1a      	ldr	r2, [r3, #32]
 801461a:	697b      	ldr	r3, [r7, #20]
 801461c:	1ad3      	subs	r3, r2, r3
 801461e:	025b      	lsls	r3, r3, #9
 8014620:	69fa      	ldr	r2, [r7, #28]
 8014622:	4413      	add	r3, r2
 8014624:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014628:	4619      	mov	r1, r3
 801462a:	f7ff fab1 	bl	8013b90 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801462e:	68fb      	ldr	r3, [r7, #12]
 8014630:	7d1b      	ldrb	r3, [r3, #20]
 8014632:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014636:	b2da      	uxtb	r2, r3
 8014638:	68fb      	ldr	r3, [r7, #12]
 801463a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801463c:	6a3b      	ldr	r3, [r7, #32]
 801463e:	025b      	lsls	r3, r3, #9
 8014640:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8014642:	e044      	b.n	80146ce <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8014644:	68fb      	ldr	r3, [r7, #12]
 8014646:	6a1b      	ldr	r3, [r3, #32]
 8014648:	697a      	ldr	r2, [r7, #20]
 801464a:	429a      	cmp	r2, r3
 801464c:	d01b      	beq.n	8014686 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 801464e:	68fb      	ldr	r3, [r7, #12]
 8014650:	699a      	ldr	r2, [r3, #24]
 8014652:	68fb      	ldr	r3, [r7, #12]
 8014654:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8014656:	429a      	cmp	r2, r3
 8014658:	d215      	bcs.n	8014686 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801465a:	693b      	ldr	r3, [r7, #16]
 801465c:	7858      	ldrb	r0, [r3, #1]
 801465e:	68fb      	ldr	r3, [r7, #12]
 8014660:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8014664:	2301      	movs	r3, #1
 8014666:	697a      	ldr	r2, [r7, #20]
 8014668:	f7ff f9b2 	bl	80139d0 <disk_read>
 801466c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801466e:	2b00      	cmp	r3, #0
 8014670:	d009      	beq.n	8014686 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 8014672:	68fb      	ldr	r3, [r7, #12]
 8014674:	2201      	movs	r2, #1
 8014676:	755a      	strb	r2, [r3, #21]
 8014678:	693b      	ldr	r3, [r7, #16]
 801467a:	2101      	movs	r1, #1
 801467c:	4618      	mov	r0, r3
 801467e:	f7ff fad9 	bl	8013c34 <unlock_fs>
 8014682:	2301      	movs	r3, #1
 8014684:	e053      	b.n	801472e <f_write+0x340>
			}
#endif
			fp->sect = sect;
 8014686:	68fb      	ldr	r3, [r7, #12]
 8014688:	697a      	ldr	r2, [r7, #20]
 801468a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801468c:	68fb      	ldr	r3, [r7, #12]
 801468e:	699b      	ldr	r3, [r3, #24]
 8014690:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014694:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8014698:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801469a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	429a      	cmp	r2, r3
 80146a0:	d901      	bls.n	80146a6 <f_write+0x2b8>
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80146a6:	68fb      	ldr	r3, [r7, #12]
 80146a8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80146ac:	68fb      	ldr	r3, [r7, #12]
 80146ae:	699b      	ldr	r3, [r3, #24]
 80146b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80146b4:	4413      	add	r3, r2
 80146b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80146b8:	69f9      	ldr	r1, [r7, #28]
 80146ba:	4618      	mov	r0, r3
 80146bc:	f7ff fa68 	bl	8013b90 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80146c0:	68fb      	ldr	r3, [r7, #12]
 80146c2:	7d1b      	ldrb	r3, [r3, #20]
 80146c4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80146c8:	b2da      	uxtb	r2, r3
 80146ca:	68fb      	ldr	r3, [r7, #12]
 80146cc:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80146ce:	69fa      	ldr	r2, [r7, #28]
 80146d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80146d2:	4413      	add	r3, r2
 80146d4:	61fb      	str	r3, [r7, #28]
 80146d6:	68fb      	ldr	r3, [r7, #12]
 80146d8:	699a      	ldr	r2, [r3, #24]
 80146da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80146dc:	441a      	add	r2, r3
 80146de:	68fb      	ldr	r3, [r7, #12]
 80146e0:	619a      	str	r2, [r3, #24]
 80146e2:	68fb      	ldr	r3, [r7, #12]
 80146e4:	68da      	ldr	r2, [r3, #12]
 80146e6:	68fb      	ldr	r3, [r7, #12]
 80146e8:	699b      	ldr	r3, [r3, #24]
 80146ea:	429a      	cmp	r2, r3
 80146ec:	bf38      	it	cc
 80146ee:	461a      	movcc	r2, r3
 80146f0:	68fb      	ldr	r3, [r7, #12]
 80146f2:	60da      	str	r2, [r3, #12]
 80146f4:	683b      	ldr	r3, [r7, #0]
 80146f6:	681a      	ldr	r2, [r3, #0]
 80146f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80146fa:	441a      	add	r2, r3
 80146fc:	683b      	ldr	r3, [r7, #0]
 80146fe:	601a      	str	r2, [r3, #0]
 8014700:	687a      	ldr	r2, [r7, #4]
 8014702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014704:	1ad3      	subs	r3, r2, r3
 8014706:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8014708:	687b      	ldr	r3, [r7, #4]
 801470a:	2b00      	cmp	r3, #0
 801470c:	f47f aeb6 	bne.w	801447c <f_write+0x8e>
 8014710:	e000      	b.n	8014714 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8014712:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8014714:	68fb      	ldr	r3, [r7, #12]
 8014716:	7d1b      	ldrb	r3, [r3, #20]
 8014718:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801471c:	b2da      	uxtb	r2, r3
 801471e:	68fb      	ldr	r3, [r7, #12]
 8014720:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8014722:	693b      	ldr	r3, [r7, #16]
 8014724:	2100      	movs	r1, #0
 8014726:	4618      	mov	r0, r3
 8014728:	f7ff fa84 	bl	8013c34 <unlock_fs>
 801472c:	2300      	movs	r3, #0
}
 801472e:	4618      	mov	r0, r3
 8014730:	3730      	adds	r7, #48	@ 0x30
 8014732:	46bd      	mov	sp, r7
 8014734:	bd80      	pop	{r7, pc}

08014736 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8014736:	b580      	push	{r7, lr}
 8014738:	b086      	sub	sp, #24
 801473a:	af00      	add	r7, sp, #0
 801473c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	f107 0208 	add.w	r2, r7, #8
 8014744:	4611      	mov	r1, r2
 8014746:	4618      	mov	r0, r3
 8014748:	f7ff fe0a 	bl	8014360 <validate>
 801474c:	4603      	mov	r3, r0
 801474e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8014750:	7dfb      	ldrb	r3, [r7, #23]
 8014752:	2b00      	cmp	r3, #0
 8014754:	d16d      	bne.n	8014832 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	7d1b      	ldrb	r3, [r3, #20]
 801475a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801475e:	2b00      	cmp	r3, #0
 8014760:	d067      	beq.n	8014832 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	7d1b      	ldrb	r3, [r3, #20]
 8014766:	b25b      	sxtb	r3, r3
 8014768:	2b00      	cmp	r3, #0
 801476a:	da1a      	bge.n	80147a2 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801476c:	68bb      	ldr	r3, [r7, #8]
 801476e:	7858      	ldrb	r0, [r3, #1]
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	6a1a      	ldr	r2, [r3, #32]
 801477a:	2301      	movs	r3, #1
 801477c:	f7ff f948 	bl	8013a10 <disk_write>
 8014780:	4603      	mov	r3, r0
 8014782:	2b00      	cmp	r3, #0
 8014784:	d006      	beq.n	8014794 <f_sync+0x5e>
 8014786:	68bb      	ldr	r3, [r7, #8]
 8014788:	2101      	movs	r1, #1
 801478a:	4618      	mov	r0, r3
 801478c:	f7ff fa52 	bl	8013c34 <unlock_fs>
 8014790:	2301      	movs	r3, #1
 8014792:	e055      	b.n	8014840 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	7d1b      	ldrb	r3, [r3, #20]
 8014798:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801479c:	b2da      	uxtb	r2, r3
 801479e:	687b      	ldr	r3, [r7, #4]
 80147a0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80147a2:	f7fe fbd9 	bl	8012f58 <get_fattime>
 80147a6:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80147a8:	68ba      	ldr	r2, [r7, #8]
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80147ae:	4619      	mov	r1, r3
 80147b0:	4610      	mov	r0, r2
 80147b2:	f7ff fa9e 	bl	8013cf2 <move_window>
 80147b6:	4603      	mov	r3, r0
 80147b8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80147ba:	7dfb      	ldrb	r3, [r7, #23]
 80147bc:	2b00      	cmp	r3, #0
 80147be:	d138      	bne.n	8014832 <f_sync+0xfc>
					dir = fp->dir_ptr;
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80147c4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80147c6:	68fb      	ldr	r3, [r7, #12]
 80147c8:	330b      	adds	r3, #11
 80147ca:	781a      	ldrb	r2, [r3, #0]
 80147cc:	68fb      	ldr	r3, [r7, #12]
 80147ce:	330b      	adds	r3, #11
 80147d0:	f042 0220 	orr.w	r2, r2, #32
 80147d4:	b2d2      	uxtb	r2, r2
 80147d6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	6818      	ldr	r0, [r3, #0]
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	689b      	ldr	r3, [r3, #8]
 80147e0:	461a      	mov	r2, r3
 80147e2:	68f9      	ldr	r1, [r7, #12]
 80147e4:	f7ff fd9c 	bl	8014320 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80147e8:	68fb      	ldr	r3, [r7, #12]
 80147ea:	f103 021c 	add.w	r2, r3, #28
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	68db      	ldr	r3, [r3, #12]
 80147f2:	4619      	mov	r1, r3
 80147f4:	4610      	mov	r0, r2
 80147f6:	f7ff f99f 	bl	8013b38 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80147fa:	68fb      	ldr	r3, [r7, #12]
 80147fc:	3316      	adds	r3, #22
 80147fe:	6939      	ldr	r1, [r7, #16]
 8014800:	4618      	mov	r0, r3
 8014802:	f7ff f999 	bl	8013b38 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8014806:	68fb      	ldr	r3, [r7, #12]
 8014808:	3312      	adds	r3, #18
 801480a:	2100      	movs	r1, #0
 801480c:	4618      	mov	r0, r3
 801480e:	f7ff f978 	bl	8013b02 <st_word>
					fs->wflag = 1;
 8014812:	68bb      	ldr	r3, [r7, #8]
 8014814:	2201      	movs	r2, #1
 8014816:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8014818:	68bb      	ldr	r3, [r7, #8]
 801481a:	4618      	mov	r0, r3
 801481c:	f7ff fa96 	bl	8013d4c <sync_fs>
 8014820:	4603      	mov	r3, r0
 8014822:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8014824:	687b      	ldr	r3, [r7, #4]
 8014826:	7d1b      	ldrb	r3, [r3, #20]
 8014828:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801482c:	b2da      	uxtb	r2, r3
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8014832:	68bb      	ldr	r3, [r7, #8]
 8014834:	7dfa      	ldrb	r2, [r7, #23]
 8014836:	4611      	mov	r1, r2
 8014838:	4618      	mov	r0, r3
 801483a:	f7ff f9fb 	bl	8013c34 <unlock_fs>
 801483e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014840:	4618      	mov	r0, r3
 8014842:	3718      	adds	r7, #24
 8014844:	46bd      	mov	sp, r7
 8014846:	bd80      	pop	{r7, pc}

08014848 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8014848:	b480      	push	{r7}
 801484a:	b087      	sub	sp, #28
 801484c:	af00      	add	r7, sp, #0
 801484e:	60f8      	str	r0, [r7, #12]
 8014850:	60b9      	str	r1, [r7, #8]
 8014852:	4613      	mov	r3, r2
 8014854:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8014856:	2301      	movs	r3, #1
 8014858:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801485a:	2300      	movs	r3, #0
 801485c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801485e:	4b1f      	ldr	r3, [pc, #124]	@ (80148dc <FATFS_LinkDriverEx+0x94>)
 8014860:	7a5b      	ldrb	r3, [r3, #9]
 8014862:	b2db      	uxtb	r3, r3
 8014864:	2b00      	cmp	r3, #0
 8014866:	d131      	bne.n	80148cc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8014868:	4b1c      	ldr	r3, [pc, #112]	@ (80148dc <FATFS_LinkDriverEx+0x94>)
 801486a:	7a5b      	ldrb	r3, [r3, #9]
 801486c:	b2db      	uxtb	r3, r3
 801486e:	461a      	mov	r2, r3
 8014870:	4b1a      	ldr	r3, [pc, #104]	@ (80148dc <FATFS_LinkDriverEx+0x94>)
 8014872:	2100      	movs	r1, #0
 8014874:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8014876:	4b19      	ldr	r3, [pc, #100]	@ (80148dc <FATFS_LinkDriverEx+0x94>)
 8014878:	7a5b      	ldrb	r3, [r3, #9]
 801487a:	b2db      	uxtb	r3, r3
 801487c:	4a17      	ldr	r2, [pc, #92]	@ (80148dc <FATFS_LinkDriverEx+0x94>)
 801487e:	009b      	lsls	r3, r3, #2
 8014880:	4413      	add	r3, r2
 8014882:	68fa      	ldr	r2, [r7, #12]
 8014884:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8014886:	4b15      	ldr	r3, [pc, #84]	@ (80148dc <FATFS_LinkDriverEx+0x94>)
 8014888:	7a5b      	ldrb	r3, [r3, #9]
 801488a:	b2db      	uxtb	r3, r3
 801488c:	461a      	mov	r2, r3
 801488e:	4b13      	ldr	r3, [pc, #76]	@ (80148dc <FATFS_LinkDriverEx+0x94>)
 8014890:	4413      	add	r3, r2
 8014892:	79fa      	ldrb	r2, [r7, #7]
 8014894:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8014896:	4b11      	ldr	r3, [pc, #68]	@ (80148dc <FATFS_LinkDriverEx+0x94>)
 8014898:	7a5b      	ldrb	r3, [r3, #9]
 801489a:	b2db      	uxtb	r3, r3
 801489c:	1c5a      	adds	r2, r3, #1
 801489e:	b2d1      	uxtb	r1, r2
 80148a0:	4a0e      	ldr	r2, [pc, #56]	@ (80148dc <FATFS_LinkDriverEx+0x94>)
 80148a2:	7251      	strb	r1, [r2, #9]
 80148a4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80148a6:	7dbb      	ldrb	r3, [r7, #22]
 80148a8:	3330      	adds	r3, #48	@ 0x30
 80148aa:	b2da      	uxtb	r2, r3
 80148ac:	68bb      	ldr	r3, [r7, #8]
 80148ae:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80148b0:	68bb      	ldr	r3, [r7, #8]
 80148b2:	3301      	adds	r3, #1
 80148b4:	223a      	movs	r2, #58	@ 0x3a
 80148b6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80148b8:	68bb      	ldr	r3, [r7, #8]
 80148ba:	3302      	adds	r3, #2
 80148bc:	222f      	movs	r2, #47	@ 0x2f
 80148be:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80148c0:	68bb      	ldr	r3, [r7, #8]
 80148c2:	3303      	adds	r3, #3
 80148c4:	2200      	movs	r2, #0
 80148c6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80148c8:	2300      	movs	r3, #0
 80148ca:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80148cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80148ce:	4618      	mov	r0, r3
 80148d0:	371c      	adds	r7, #28
 80148d2:	46bd      	mov	sp, r7
 80148d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148d8:	4770      	bx	lr
 80148da:	bf00      	nop
 80148dc:	240029d0 	.word	0x240029d0

080148e0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80148e0:	b580      	push	{r7, lr}
 80148e2:	b082      	sub	sp, #8
 80148e4:	af00      	add	r7, sp, #0
 80148e6:	6078      	str	r0, [r7, #4]
 80148e8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80148ea:	2200      	movs	r2, #0
 80148ec:	6839      	ldr	r1, [r7, #0]
 80148ee:	6878      	ldr	r0, [r7, #4]
 80148f0:	f7ff ffaa 	bl	8014848 <FATFS_LinkDriverEx>
 80148f4:	4603      	mov	r3, r0
}
 80148f6:	4618      	mov	r0, r3
 80148f8:	3708      	adds	r7, #8
 80148fa:	46bd      	mov	sp, r7
 80148fc:	bd80      	pop	{r7, pc}

080148fe <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 80148fe:	b580      	push	{r7, lr}
 8014900:	b084      	sub	sp, #16
 8014902:	af00      	add	r7, sp, #0
 8014904:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8014906:	2300      	movs	r3, #0
 8014908:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 801490a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801490e:	6878      	ldr	r0, [r7, #4]
 8014910:	f000 f8a6 	bl	8014a60 <osSemaphoreWait>
 8014914:	4603      	mov	r3, r0
 8014916:	2b00      	cmp	r3, #0
 8014918:	d101      	bne.n	801491e <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 801491a:	2301      	movs	r3, #1
 801491c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801491e:	68fb      	ldr	r3, [r7, #12]
}
 8014920:	4618      	mov	r0, r3
 8014922:	3710      	adds	r7, #16
 8014924:	46bd      	mov	sp, r7
 8014926:	bd80      	pop	{r7, pc}

08014928 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8014928:	b580      	push	{r7, lr}
 801492a:	b082      	sub	sp, #8
 801492c:	af00      	add	r7, sp, #0
 801492e:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8014930:	6878      	ldr	r0, [r7, #4]
 8014932:	f000 f8e3 	bl	8014afc <osSemaphoreRelease>
#endif
}
 8014936:	bf00      	nop
 8014938:	3708      	adds	r7, #8
 801493a:	46bd      	mov	sp, r7
 801493c:	bd80      	pop	{r7, pc}

0801493e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 801493e:	b480      	push	{r7}
 8014940:	b085      	sub	sp, #20
 8014942:	af00      	add	r7, sp, #0
 8014944:	4603      	mov	r3, r0
 8014946:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8014948:	2300      	movs	r3, #0
 801494a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 801494c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014950:	2b84      	cmp	r3, #132	@ 0x84
 8014952:	d005      	beq.n	8014960 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8014954:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8014958:	68fb      	ldr	r3, [r7, #12]
 801495a:	4413      	add	r3, r2
 801495c:	3303      	adds	r3, #3
 801495e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8014960:	68fb      	ldr	r3, [r7, #12]
}
 8014962:	4618      	mov	r0, r3
 8014964:	3714      	adds	r7, #20
 8014966:	46bd      	mov	sp, r7
 8014968:	f85d 7b04 	ldr.w	r7, [sp], #4
 801496c:	4770      	bx	lr

0801496e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 801496e:	b480      	push	{r7}
 8014970:	b083      	sub	sp, #12
 8014972:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014974:	f3ef 8305 	mrs	r3, IPSR
 8014978:	607b      	str	r3, [r7, #4]
  return(result);
 801497a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 801497c:	2b00      	cmp	r3, #0
 801497e:	bf14      	ite	ne
 8014980:	2301      	movne	r3, #1
 8014982:	2300      	moveq	r3, #0
 8014984:	b2db      	uxtb	r3, r3
}
 8014986:	4618      	mov	r0, r3
 8014988:	370c      	adds	r7, #12
 801498a:	46bd      	mov	sp, r7
 801498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014990:	4770      	bx	lr

08014992 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8014992:	b580      	push	{r7, lr}
 8014994:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8014996:	f000 ffb5 	bl	8015904 <vTaskStartScheduler>
  
  return osOK;
 801499a:	2300      	movs	r3, #0
}
 801499c:	4618      	mov	r0, r3
 801499e:	bd80      	pop	{r7, pc}

080149a0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80149a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80149a2:	b089      	sub	sp, #36	@ 0x24
 80149a4:	af04      	add	r7, sp, #16
 80149a6:	6078      	str	r0, [r7, #4]
 80149a8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	695b      	ldr	r3, [r3, #20]
 80149ae:	2b00      	cmp	r3, #0
 80149b0:	d020      	beq.n	80149f4 <osThreadCreate+0x54>
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	699b      	ldr	r3, [r3, #24]
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	d01c      	beq.n	80149f4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	685c      	ldr	r4, [r3, #4]
 80149be:	687b      	ldr	r3, [r7, #4]
 80149c0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80149c2:	687b      	ldr	r3, [r7, #4]
 80149c4:	691e      	ldr	r6, [r3, #16]
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80149cc:	4618      	mov	r0, r3
 80149ce:	f7ff ffb6 	bl	801493e <makeFreeRtosPriority>
 80149d2:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80149d4:	687b      	ldr	r3, [r7, #4]
 80149d6:	695b      	ldr	r3, [r3, #20]
 80149d8:	687a      	ldr	r2, [r7, #4]
 80149da:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80149dc:	9202      	str	r2, [sp, #8]
 80149de:	9301      	str	r3, [sp, #4]
 80149e0:	9100      	str	r1, [sp, #0]
 80149e2:	683b      	ldr	r3, [r7, #0]
 80149e4:	4632      	mov	r2, r6
 80149e6:	4629      	mov	r1, r5
 80149e8:	4620      	mov	r0, r4
 80149ea:	f000 fdbd 	bl	8015568 <xTaskCreateStatic>
 80149ee:	4603      	mov	r3, r0
 80149f0:	60fb      	str	r3, [r7, #12]
 80149f2:	e01c      	b.n	8014a2e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	685c      	ldr	r4, [r3, #4]
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014a00:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8014a02:	687b      	ldr	r3, [r7, #4]
 8014a04:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014a08:	4618      	mov	r0, r3
 8014a0a:	f7ff ff98 	bl	801493e <makeFreeRtosPriority>
 8014a0e:	4602      	mov	r2, r0
 8014a10:	f107 030c 	add.w	r3, r7, #12
 8014a14:	9301      	str	r3, [sp, #4]
 8014a16:	9200      	str	r2, [sp, #0]
 8014a18:	683b      	ldr	r3, [r7, #0]
 8014a1a:	4632      	mov	r2, r6
 8014a1c:	4629      	mov	r1, r5
 8014a1e:	4620      	mov	r0, r4
 8014a20:	f000 fe02 	bl	8015628 <xTaskCreate>
 8014a24:	4603      	mov	r3, r0
 8014a26:	2b01      	cmp	r3, #1
 8014a28:	d001      	beq.n	8014a2e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8014a2a:	2300      	movs	r3, #0
 8014a2c:	e000      	b.n	8014a30 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8014a2e:	68fb      	ldr	r3, [r7, #12]
}
 8014a30:	4618      	mov	r0, r3
 8014a32:	3714      	adds	r7, #20
 8014a34:	46bd      	mov	sp, r7
 8014a36:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014a38 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8014a38:	b580      	push	{r7, lr}
 8014a3a:	b084      	sub	sp, #16
 8014a3c:	af00      	add	r7, sp, #0
 8014a3e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8014a44:	68fb      	ldr	r3, [r7, #12]
 8014a46:	2b00      	cmp	r3, #0
 8014a48:	d001      	beq.n	8014a4e <osDelay+0x16>
 8014a4a:	68fb      	ldr	r3, [r7, #12]
 8014a4c:	e000      	b.n	8014a50 <osDelay+0x18>
 8014a4e:	2301      	movs	r3, #1
 8014a50:	4618      	mov	r0, r3
 8014a52:	f000 ff21 	bl	8015898 <vTaskDelay>
  
  return osOK;
 8014a56:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8014a58:	4618      	mov	r0, r3
 8014a5a:	3710      	adds	r7, #16
 8014a5c:	46bd      	mov	sp, r7
 8014a5e:	bd80      	pop	{r7, pc}

08014a60 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8014a60:	b580      	push	{r7, lr}
 8014a62:	b084      	sub	sp, #16
 8014a64:	af00      	add	r7, sp, #0
 8014a66:	6078      	str	r0, [r7, #4]
 8014a68:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8014a6a:	2300      	movs	r3, #0
 8014a6c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	2b00      	cmp	r3, #0
 8014a72:	d101      	bne.n	8014a78 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8014a74:	2380      	movs	r3, #128	@ 0x80
 8014a76:	e03a      	b.n	8014aee <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8014a78:	2300      	movs	r3, #0
 8014a7a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8014a7c:	683b      	ldr	r3, [r7, #0]
 8014a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a82:	d103      	bne.n	8014a8c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8014a84:	f04f 33ff 	mov.w	r3, #4294967295
 8014a88:	60fb      	str	r3, [r7, #12]
 8014a8a:	e009      	b.n	8014aa0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8014a8c:	683b      	ldr	r3, [r7, #0]
 8014a8e:	2b00      	cmp	r3, #0
 8014a90:	d006      	beq.n	8014aa0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8014a92:	683b      	ldr	r3, [r7, #0]
 8014a94:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8014a96:	68fb      	ldr	r3, [r7, #12]
 8014a98:	2b00      	cmp	r3, #0
 8014a9a:	d101      	bne.n	8014aa0 <osSemaphoreWait+0x40>
      ticks = 1;
 8014a9c:	2301      	movs	r3, #1
 8014a9e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8014aa0:	f7ff ff65 	bl	801496e <inHandlerMode>
 8014aa4:	4603      	mov	r3, r0
 8014aa6:	2b00      	cmp	r3, #0
 8014aa8:	d017      	beq.n	8014ada <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8014aaa:	f107 0308 	add.w	r3, r7, #8
 8014aae:	461a      	mov	r2, r3
 8014ab0:	2100      	movs	r1, #0
 8014ab2:	6878      	ldr	r0, [r7, #4]
 8014ab4:	f000 fbae 	bl	8015214 <xQueueReceiveFromISR>
 8014ab8:	4603      	mov	r3, r0
 8014aba:	2b01      	cmp	r3, #1
 8014abc:	d001      	beq.n	8014ac2 <osSemaphoreWait+0x62>
      return osErrorOS;
 8014abe:	23ff      	movs	r3, #255	@ 0xff
 8014ac0:	e015      	b.n	8014aee <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8014ac2:	68bb      	ldr	r3, [r7, #8]
 8014ac4:	2b00      	cmp	r3, #0
 8014ac6:	d011      	beq.n	8014aec <osSemaphoreWait+0x8c>
 8014ac8:	4b0b      	ldr	r3, [pc, #44]	@ (8014af8 <osSemaphoreWait+0x98>)
 8014aca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014ace:	601a      	str	r2, [r3, #0]
 8014ad0:	f3bf 8f4f 	dsb	sy
 8014ad4:	f3bf 8f6f 	isb	sy
 8014ad8:	e008      	b.n	8014aec <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8014ada:	68f9      	ldr	r1, [r7, #12]
 8014adc:	6878      	ldr	r0, [r7, #4]
 8014ade:	f000 fa89 	bl	8014ff4 <xQueueSemaphoreTake>
 8014ae2:	4603      	mov	r3, r0
 8014ae4:	2b01      	cmp	r3, #1
 8014ae6:	d001      	beq.n	8014aec <osSemaphoreWait+0x8c>
    return osErrorOS;
 8014ae8:	23ff      	movs	r3, #255	@ 0xff
 8014aea:	e000      	b.n	8014aee <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8014aec:	2300      	movs	r3, #0
}
 8014aee:	4618      	mov	r0, r3
 8014af0:	3710      	adds	r7, #16
 8014af2:	46bd      	mov	sp, r7
 8014af4:	bd80      	pop	{r7, pc}
 8014af6:	bf00      	nop
 8014af8:	e000ed04 	.word	0xe000ed04

08014afc <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8014afc:	b580      	push	{r7, lr}
 8014afe:	b084      	sub	sp, #16
 8014b00:	af00      	add	r7, sp, #0
 8014b02:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8014b04:	2300      	movs	r3, #0
 8014b06:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8014b08:	2300      	movs	r3, #0
 8014b0a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8014b0c:	f7ff ff2f 	bl	801496e <inHandlerMode>
 8014b10:	4603      	mov	r3, r0
 8014b12:	2b00      	cmp	r3, #0
 8014b14:	d016      	beq.n	8014b44 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8014b16:	f107 0308 	add.w	r3, r7, #8
 8014b1a:	4619      	mov	r1, r3
 8014b1c:	6878      	ldr	r0, [r7, #4]
 8014b1e:	f000 f9d9 	bl	8014ed4 <xQueueGiveFromISR>
 8014b22:	4603      	mov	r3, r0
 8014b24:	2b01      	cmp	r3, #1
 8014b26:	d001      	beq.n	8014b2c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8014b28:	23ff      	movs	r3, #255	@ 0xff
 8014b2a:	e017      	b.n	8014b5c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8014b2c:	68bb      	ldr	r3, [r7, #8]
 8014b2e:	2b00      	cmp	r3, #0
 8014b30:	d013      	beq.n	8014b5a <osSemaphoreRelease+0x5e>
 8014b32:	4b0c      	ldr	r3, [pc, #48]	@ (8014b64 <osSemaphoreRelease+0x68>)
 8014b34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014b38:	601a      	str	r2, [r3, #0]
 8014b3a:	f3bf 8f4f 	dsb	sy
 8014b3e:	f3bf 8f6f 	isb	sy
 8014b42:	e00a      	b.n	8014b5a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8014b44:	2300      	movs	r3, #0
 8014b46:	2200      	movs	r2, #0
 8014b48:	2100      	movs	r1, #0
 8014b4a:	6878      	ldr	r0, [r7, #4]
 8014b4c:	f000 f8c0 	bl	8014cd0 <xQueueGenericSend>
 8014b50:	4603      	mov	r3, r0
 8014b52:	2b01      	cmp	r3, #1
 8014b54:	d001      	beq.n	8014b5a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8014b56:	23ff      	movs	r3, #255	@ 0xff
 8014b58:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8014b5a:	68fb      	ldr	r3, [r7, #12]
}
 8014b5c:	4618      	mov	r0, r3
 8014b5e:	3710      	adds	r7, #16
 8014b60:	46bd      	mov	sp, r7
 8014b62:	bd80      	pop	{r7, pc}
 8014b64:	e000ed04 	.word	0xe000ed04

08014b68 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8014b68:	b480      	push	{r7}
 8014b6a:	b083      	sub	sp, #12
 8014b6c:	af00      	add	r7, sp, #0
 8014b6e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	f103 0208 	add.w	r2, r3, #8
 8014b76:	687b      	ldr	r3, [r7, #4]
 8014b78:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8014b80:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	f103 0208 	add.w	r2, r3, #8
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014b8c:	687b      	ldr	r3, [r7, #4]
 8014b8e:	f103 0208 	add.w	r2, r3, #8
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8014b96:	687b      	ldr	r3, [r7, #4]
 8014b98:	2200      	movs	r2, #0
 8014b9a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8014b9c:	bf00      	nop
 8014b9e:	370c      	adds	r7, #12
 8014ba0:	46bd      	mov	sp, r7
 8014ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ba6:	4770      	bx	lr

08014ba8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8014ba8:	b480      	push	{r7}
 8014baa:	b083      	sub	sp, #12
 8014bac:	af00      	add	r7, sp, #0
 8014bae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	2200      	movs	r2, #0
 8014bb4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8014bb6:	bf00      	nop
 8014bb8:	370c      	adds	r7, #12
 8014bba:	46bd      	mov	sp, r7
 8014bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bc0:	4770      	bx	lr

08014bc2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014bc2:	b480      	push	{r7}
 8014bc4:	b085      	sub	sp, #20
 8014bc6:	af00      	add	r7, sp, #0
 8014bc8:	6078      	str	r0, [r7, #4]
 8014bca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	685b      	ldr	r3, [r3, #4]
 8014bd0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8014bd2:	683b      	ldr	r3, [r7, #0]
 8014bd4:	68fa      	ldr	r2, [r7, #12]
 8014bd6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8014bd8:	68fb      	ldr	r3, [r7, #12]
 8014bda:	689a      	ldr	r2, [r3, #8]
 8014bdc:	683b      	ldr	r3, [r7, #0]
 8014bde:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8014be0:	68fb      	ldr	r3, [r7, #12]
 8014be2:	689b      	ldr	r3, [r3, #8]
 8014be4:	683a      	ldr	r2, [r7, #0]
 8014be6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8014be8:	68fb      	ldr	r3, [r7, #12]
 8014bea:	683a      	ldr	r2, [r7, #0]
 8014bec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8014bee:	683b      	ldr	r3, [r7, #0]
 8014bf0:	687a      	ldr	r2, [r7, #4]
 8014bf2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	681b      	ldr	r3, [r3, #0]
 8014bf8:	1c5a      	adds	r2, r3, #1
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	601a      	str	r2, [r3, #0]
}
 8014bfe:	bf00      	nop
 8014c00:	3714      	adds	r7, #20
 8014c02:	46bd      	mov	sp, r7
 8014c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c08:	4770      	bx	lr

08014c0a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014c0a:	b480      	push	{r7}
 8014c0c:	b085      	sub	sp, #20
 8014c0e:	af00      	add	r7, sp, #0
 8014c10:	6078      	str	r0, [r7, #4]
 8014c12:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8014c14:	683b      	ldr	r3, [r7, #0]
 8014c16:	681b      	ldr	r3, [r3, #0]
 8014c18:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8014c1a:	68bb      	ldr	r3, [r7, #8]
 8014c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c20:	d103      	bne.n	8014c2a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	691b      	ldr	r3, [r3, #16]
 8014c26:	60fb      	str	r3, [r7, #12]
 8014c28:	e00c      	b.n	8014c44 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	3308      	adds	r3, #8
 8014c2e:	60fb      	str	r3, [r7, #12]
 8014c30:	e002      	b.n	8014c38 <vListInsert+0x2e>
 8014c32:	68fb      	ldr	r3, [r7, #12]
 8014c34:	685b      	ldr	r3, [r3, #4]
 8014c36:	60fb      	str	r3, [r7, #12]
 8014c38:	68fb      	ldr	r3, [r7, #12]
 8014c3a:	685b      	ldr	r3, [r3, #4]
 8014c3c:	681b      	ldr	r3, [r3, #0]
 8014c3e:	68ba      	ldr	r2, [r7, #8]
 8014c40:	429a      	cmp	r2, r3
 8014c42:	d2f6      	bcs.n	8014c32 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8014c44:	68fb      	ldr	r3, [r7, #12]
 8014c46:	685a      	ldr	r2, [r3, #4]
 8014c48:	683b      	ldr	r3, [r7, #0]
 8014c4a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8014c4c:	683b      	ldr	r3, [r7, #0]
 8014c4e:	685b      	ldr	r3, [r3, #4]
 8014c50:	683a      	ldr	r2, [r7, #0]
 8014c52:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8014c54:	683b      	ldr	r3, [r7, #0]
 8014c56:	68fa      	ldr	r2, [r7, #12]
 8014c58:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8014c5a:	68fb      	ldr	r3, [r7, #12]
 8014c5c:	683a      	ldr	r2, [r7, #0]
 8014c5e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8014c60:	683b      	ldr	r3, [r7, #0]
 8014c62:	687a      	ldr	r2, [r7, #4]
 8014c64:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	681b      	ldr	r3, [r3, #0]
 8014c6a:	1c5a      	adds	r2, r3, #1
 8014c6c:	687b      	ldr	r3, [r7, #4]
 8014c6e:	601a      	str	r2, [r3, #0]
}
 8014c70:	bf00      	nop
 8014c72:	3714      	adds	r7, #20
 8014c74:	46bd      	mov	sp, r7
 8014c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c7a:	4770      	bx	lr

08014c7c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8014c7c:	b480      	push	{r7}
 8014c7e:	b085      	sub	sp, #20
 8014c80:	af00      	add	r7, sp, #0
 8014c82:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	691b      	ldr	r3, [r3, #16]
 8014c88:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	685b      	ldr	r3, [r3, #4]
 8014c8e:	687a      	ldr	r2, [r7, #4]
 8014c90:	6892      	ldr	r2, [r2, #8]
 8014c92:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	689b      	ldr	r3, [r3, #8]
 8014c98:	687a      	ldr	r2, [r7, #4]
 8014c9a:	6852      	ldr	r2, [r2, #4]
 8014c9c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8014c9e:	68fb      	ldr	r3, [r7, #12]
 8014ca0:	685b      	ldr	r3, [r3, #4]
 8014ca2:	687a      	ldr	r2, [r7, #4]
 8014ca4:	429a      	cmp	r2, r3
 8014ca6:	d103      	bne.n	8014cb0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	689a      	ldr	r2, [r3, #8]
 8014cac:	68fb      	ldr	r3, [r7, #12]
 8014cae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	2200      	movs	r2, #0
 8014cb4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8014cb6:	68fb      	ldr	r3, [r7, #12]
 8014cb8:	681b      	ldr	r3, [r3, #0]
 8014cba:	1e5a      	subs	r2, r3, #1
 8014cbc:	68fb      	ldr	r3, [r7, #12]
 8014cbe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8014cc0:	68fb      	ldr	r3, [r7, #12]
 8014cc2:	681b      	ldr	r3, [r3, #0]
}
 8014cc4:	4618      	mov	r0, r3
 8014cc6:	3714      	adds	r7, #20
 8014cc8:	46bd      	mov	sp, r7
 8014cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cce:	4770      	bx	lr

08014cd0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8014cd0:	b580      	push	{r7, lr}
 8014cd2:	b08e      	sub	sp, #56	@ 0x38
 8014cd4:	af00      	add	r7, sp, #0
 8014cd6:	60f8      	str	r0, [r7, #12]
 8014cd8:	60b9      	str	r1, [r7, #8]
 8014cda:	607a      	str	r2, [r7, #4]
 8014cdc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8014cde:	2300      	movs	r3, #0
 8014ce0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014ce2:	68fb      	ldr	r3, [r7, #12]
 8014ce4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8014ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ce8:	2b00      	cmp	r3, #0
 8014cea:	d10b      	bne.n	8014d04 <xQueueGenericSend+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8014cec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014cf0:	f383 8811 	msr	BASEPRI, r3
 8014cf4:	f3bf 8f6f 	isb	sy
 8014cf8:	f3bf 8f4f 	dsb	sy
 8014cfc:	62bb      	str	r3, [r7, #40]	@ 0x28
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8014cfe:	bf00      	nop
 8014d00:	bf00      	nop
 8014d02:	e7fd      	b.n	8014d00 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014d04:	68bb      	ldr	r3, [r7, #8]
 8014d06:	2b00      	cmp	r3, #0
 8014d08:	d103      	bne.n	8014d12 <xQueueGenericSend+0x42>
 8014d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014d0e:	2b00      	cmp	r3, #0
 8014d10:	d101      	bne.n	8014d16 <xQueueGenericSend+0x46>
 8014d12:	2301      	movs	r3, #1
 8014d14:	e000      	b.n	8014d18 <xQueueGenericSend+0x48>
 8014d16:	2300      	movs	r3, #0
 8014d18:	2b00      	cmp	r3, #0
 8014d1a:	d10b      	bne.n	8014d34 <xQueueGenericSend+0x64>
	__asm volatile
 8014d1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014d20:	f383 8811 	msr	BASEPRI, r3
 8014d24:	f3bf 8f6f 	isb	sy
 8014d28:	f3bf 8f4f 	dsb	sy
 8014d2c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8014d2e:	bf00      	nop
 8014d30:	bf00      	nop
 8014d32:	e7fd      	b.n	8014d30 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014d34:	683b      	ldr	r3, [r7, #0]
 8014d36:	2b02      	cmp	r3, #2
 8014d38:	d103      	bne.n	8014d42 <xQueueGenericSend+0x72>
 8014d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014d3e:	2b01      	cmp	r3, #1
 8014d40:	d101      	bne.n	8014d46 <xQueueGenericSend+0x76>
 8014d42:	2301      	movs	r3, #1
 8014d44:	e000      	b.n	8014d48 <xQueueGenericSend+0x78>
 8014d46:	2300      	movs	r3, #0
 8014d48:	2b00      	cmp	r3, #0
 8014d4a:	d10b      	bne.n	8014d64 <xQueueGenericSend+0x94>
	__asm volatile
 8014d4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014d50:	f383 8811 	msr	BASEPRI, r3
 8014d54:	f3bf 8f6f 	isb	sy
 8014d58:	f3bf 8f4f 	dsb	sy
 8014d5c:	623b      	str	r3, [r7, #32]
}
 8014d5e:	bf00      	nop
 8014d60:	bf00      	nop
 8014d62:	e7fd      	b.n	8014d60 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014d64:	f001 f9d8 	bl	8016118 <xTaskGetSchedulerState>
 8014d68:	4603      	mov	r3, r0
 8014d6a:	2b00      	cmp	r3, #0
 8014d6c:	d102      	bne.n	8014d74 <xQueueGenericSend+0xa4>
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	2b00      	cmp	r3, #0
 8014d72:	d101      	bne.n	8014d78 <xQueueGenericSend+0xa8>
 8014d74:	2301      	movs	r3, #1
 8014d76:	e000      	b.n	8014d7a <xQueueGenericSend+0xaa>
 8014d78:	2300      	movs	r3, #0
 8014d7a:	2b00      	cmp	r3, #0
 8014d7c:	d10b      	bne.n	8014d96 <xQueueGenericSend+0xc6>
	__asm volatile
 8014d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014d82:	f383 8811 	msr	BASEPRI, r3
 8014d86:	f3bf 8f6f 	isb	sy
 8014d8a:	f3bf 8f4f 	dsb	sy
 8014d8e:	61fb      	str	r3, [r7, #28]
}
 8014d90:	bf00      	nop
 8014d92:	bf00      	nop
 8014d94:	e7fd      	b.n	8014d92 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014d96:	f001 fd17 	bl	80167c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8014d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014da0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014da2:	429a      	cmp	r2, r3
 8014da4:	d302      	bcc.n	8014dac <xQueueGenericSend+0xdc>
 8014da6:	683b      	ldr	r3, [r7, #0]
 8014da8:	2b02      	cmp	r3, #2
 8014daa:	d129      	bne.n	8014e00 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014dac:	683a      	ldr	r2, [r7, #0]
 8014dae:	68b9      	ldr	r1, [r7, #8]
 8014db0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014db2:	f000 fac9 	bl	8015348 <prvCopyDataToQueue>
 8014db6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014dbc:	2b00      	cmp	r3, #0
 8014dbe:	d010      	beq.n	8014de2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014dc2:	3324      	adds	r3, #36	@ 0x24
 8014dc4:	4618      	mov	r0, r3
 8014dc6:	f000 ffe7 	bl	8015d98 <xTaskRemoveFromEventList>
 8014dca:	4603      	mov	r3, r0
 8014dcc:	2b00      	cmp	r3, #0
 8014dce:	d013      	beq.n	8014df8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8014dd0:	4b3f      	ldr	r3, [pc, #252]	@ (8014ed0 <xQueueGenericSend+0x200>)
 8014dd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014dd6:	601a      	str	r2, [r3, #0]
 8014dd8:	f3bf 8f4f 	dsb	sy
 8014ddc:	f3bf 8f6f 	isb	sy
 8014de0:	e00a      	b.n	8014df8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8014de2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014de4:	2b00      	cmp	r3, #0
 8014de6:	d007      	beq.n	8014df8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8014de8:	4b39      	ldr	r3, [pc, #228]	@ (8014ed0 <xQueueGenericSend+0x200>)
 8014dea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014dee:	601a      	str	r2, [r3, #0]
 8014df0:	f3bf 8f4f 	dsb	sy
 8014df4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8014df8:	f001 fd18 	bl	801682c <vPortExitCritical>
				return pdPASS;
 8014dfc:	2301      	movs	r3, #1
 8014dfe:	e063      	b.n	8014ec8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	2b00      	cmp	r3, #0
 8014e04:	d103      	bne.n	8014e0e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8014e06:	f001 fd11 	bl	801682c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8014e0a:	2300      	movs	r3, #0
 8014e0c:	e05c      	b.n	8014ec8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014e0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014e10:	2b00      	cmp	r3, #0
 8014e12:	d106      	bne.n	8014e22 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014e14:	f107 0314 	add.w	r3, r7, #20
 8014e18:	4618      	mov	r0, r3
 8014e1a:	f001 f821 	bl	8015e60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014e1e:	2301      	movs	r3, #1
 8014e20:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014e22:	f001 fd03 	bl	801682c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014e26:	f000 fdcf 	bl	80159c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014e2a:	f001 fccd 	bl	80167c8 <vPortEnterCritical>
 8014e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e30:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8014e34:	b25b      	sxtb	r3, r3
 8014e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e3a:	d103      	bne.n	8014e44 <xQueueGenericSend+0x174>
 8014e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e3e:	2200      	movs	r2, #0
 8014e40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8014e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e46:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8014e4a:	b25b      	sxtb	r3, r3
 8014e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e50:	d103      	bne.n	8014e5a <xQueueGenericSend+0x18a>
 8014e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e54:	2200      	movs	r2, #0
 8014e56:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8014e5a:	f001 fce7 	bl	801682c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014e5e:	1d3a      	adds	r2, r7, #4
 8014e60:	f107 0314 	add.w	r3, r7, #20
 8014e64:	4611      	mov	r1, r2
 8014e66:	4618      	mov	r0, r3
 8014e68:	f001 f810 	bl	8015e8c <xTaskCheckForTimeOut>
 8014e6c:	4603      	mov	r3, r0
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	d124      	bne.n	8014ebc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8014e72:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014e74:	f000 fb60 	bl	8015538 <prvIsQueueFull>
 8014e78:	4603      	mov	r3, r0
 8014e7a:	2b00      	cmp	r3, #0
 8014e7c:	d018      	beq.n	8014eb0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8014e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e80:	3310      	adds	r3, #16
 8014e82:	687a      	ldr	r2, [r7, #4]
 8014e84:	4611      	mov	r1, r2
 8014e86:	4618      	mov	r0, r3
 8014e88:	f000 ff60 	bl	8015d4c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8014e8c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014e8e:	f000 faeb 	bl	8015468 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8014e92:	f000 fda7 	bl	80159e4 <xTaskResumeAll>
 8014e96:	4603      	mov	r3, r0
 8014e98:	2b00      	cmp	r3, #0
 8014e9a:	f47f af7c 	bne.w	8014d96 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8014e9e:	4b0c      	ldr	r3, [pc, #48]	@ (8014ed0 <xQueueGenericSend+0x200>)
 8014ea0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014ea4:	601a      	str	r2, [r3, #0]
 8014ea6:	f3bf 8f4f 	dsb	sy
 8014eaa:	f3bf 8f6f 	isb	sy
 8014eae:	e772      	b.n	8014d96 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8014eb0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014eb2:	f000 fad9 	bl	8015468 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014eb6:	f000 fd95 	bl	80159e4 <xTaskResumeAll>
 8014eba:	e76c      	b.n	8014d96 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8014ebc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014ebe:	f000 fad3 	bl	8015468 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014ec2:	f000 fd8f 	bl	80159e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8014ec6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8014ec8:	4618      	mov	r0, r3
 8014eca:	3738      	adds	r7, #56	@ 0x38
 8014ecc:	46bd      	mov	sp, r7
 8014ece:	bd80      	pop	{r7, pc}
 8014ed0:	e000ed04 	.word	0xe000ed04

08014ed4 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8014ed4:	b580      	push	{r7, lr}
 8014ed6:	b08e      	sub	sp, #56	@ 0x38
 8014ed8:	af00      	add	r7, sp, #0
 8014eda:	6078      	str	r0, [r7, #4]
 8014edc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8014ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ee4:	2b00      	cmp	r3, #0
 8014ee6:	d10b      	bne.n	8014f00 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8014ee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014eec:	f383 8811 	msr	BASEPRI, r3
 8014ef0:	f3bf 8f6f 	isb	sy
 8014ef4:	f3bf 8f4f 	dsb	sy
 8014ef8:	623b      	str	r3, [r7, #32]
}
 8014efa:	bf00      	nop
 8014efc:	bf00      	nop
 8014efe:	e7fd      	b.n	8014efc <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8014f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014f04:	2b00      	cmp	r3, #0
 8014f06:	d00b      	beq.n	8014f20 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8014f08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f0c:	f383 8811 	msr	BASEPRI, r3
 8014f10:	f3bf 8f6f 	isb	sy
 8014f14:	f3bf 8f4f 	dsb	sy
 8014f18:	61fb      	str	r3, [r7, #28]
}
 8014f1a:	bf00      	nop
 8014f1c:	bf00      	nop
 8014f1e:	e7fd      	b.n	8014f1c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8014f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f22:	681b      	ldr	r3, [r3, #0]
 8014f24:	2b00      	cmp	r3, #0
 8014f26:	d103      	bne.n	8014f30 <xQueueGiveFromISR+0x5c>
 8014f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f2a:	689b      	ldr	r3, [r3, #8]
 8014f2c:	2b00      	cmp	r3, #0
 8014f2e:	d101      	bne.n	8014f34 <xQueueGiveFromISR+0x60>
 8014f30:	2301      	movs	r3, #1
 8014f32:	e000      	b.n	8014f36 <xQueueGiveFromISR+0x62>
 8014f34:	2300      	movs	r3, #0
 8014f36:	2b00      	cmp	r3, #0
 8014f38:	d10b      	bne.n	8014f52 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8014f3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f3e:	f383 8811 	msr	BASEPRI, r3
 8014f42:	f3bf 8f6f 	isb	sy
 8014f46:	f3bf 8f4f 	dsb	sy
 8014f4a:	61bb      	str	r3, [r7, #24]
}
 8014f4c:	bf00      	nop
 8014f4e:	bf00      	nop
 8014f50:	e7fd      	b.n	8014f4e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014f52:	f001 fd19 	bl	8016988 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8014f56:	f3ef 8211 	mrs	r2, BASEPRI
 8014f5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f5e:	f383 8811 	msr	BASEPRI, r3
 8014f62:	f3bf 8f6f 	isb	sy
 8014f66:	f3bf 8f4f 	dsb	sy
 8014f6a:	617a      	str	r2, [r7, #20]
 8014f6c:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8014f6e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014f70:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014f76:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8014f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014f7c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014f7e:	429a      	cmp	r2, r3
 8014f80:	d22b      	bcs.n	8014fda <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8014f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f84:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8014f88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8014f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014f8e:	1c5a      	adds	r2, r3, #1
 8014f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f92:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8014f94:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8014f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f9c:	d112      	bne.n	8014fc4 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014fa2:	2b00      	cmp	r3, #0
 8014fa4:	d016      	beq.n	8014fd4 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014fa8:	3324      	adds	r3, #36	@ 0x24
 8014faa:	4618      	mov	r0, r3
 8014fac:	f000 fef4 	bl	8015d98 <xTaskRemoveFromEventList>
 8014fb0:	4603      	mov	r3, r0
 8014fb2:	2b00      	cmp	r3, #0
 8014fb4:	d00e      	beq.n	8014fd4 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8014fb6:	683b      	ldr	r3, [r7, #0]
 8014fb8:	2b00      	cmp	r3, #0
 8014fba:	d00b      	beq.n	8014fd4 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8014fbc:	683b      	ldr	r3, [r7, #0]
 8014fbe:	2201      	movs	r2, #1
 8014fc0:	601a      	str	r2, [r3, #0]
 8014fc2:	e007      	b.n	8014fd4 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8014fc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014fc8:	3301      	adds	r3, #1
 8014fca:	b2db      	uxtb	r3, r3
 8014fcc:	b25a      	sxtb	r2, r3
 8014fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014fd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8014fd4:	2301      	movs	r3, #1
 8014fd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8014fd8:	e001      	b.n	8014fde <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8014fda:	2300      	movs	r3, #0
 8014fdc:	637b      	str	r3, [r7, #52]	@ 0x34
 8014fde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014fe0:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8014fe2:	68fb      	ldr	r3, [r7, #12]
 8014fe4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8014fe8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014fea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8014fec:	4618      	mov	r0, r3
 8014fee:	3738      	adds	r7, #56	@ 0x38
 8014ff0:	46bd      	mov	sp, r7
 8014ff2:	bd80      	pop	{r7, pc}

08014ff4 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8014ff4:	b580      	push	{r7, lr}
 8014ff6:	b08e      	sub	sp, #56	@ 0x38
 8014ff8:	af00      	add	r7, sp, #0
 8014ffa:	6078      	str	r0, [r7, #4]
 8014ffc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8014ffe:	2300      	movs	r3, #0
 8015000:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8015006:	2300      	movs	r3, #0
 8015008:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801500a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801500c:	2b00      	cmp	r3, #0
 801500e:	d10b      	bne.n	8015028 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8015010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015014:	f383 8811 	msr	BASEPRI, r3
 8015018:	f3bf 8f6f 	isb	sy
 801501c:	f3bf 8f4f 	dsb	sy
 8015020:	623b      	str	r3, [r7, #32]
}
 8015022:	bf00      	nop
 8015024:	bf00      	nop
 8015026:	e7fd      	b.n	8015024 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8015028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801502a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801502c:	2b00      	cmp	r3, #0
 801502e:	d00b      	beq.n	8015048 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8015030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015034:	f383 8811 	msr	BASEPRI, r3
 8015038:	f3bf 8f6f 	isb	sy
 801503c:	f3bf 8f4f 	dsb	sy
 8015040:	61fb      	str	r3, [r7, #28]
}
 8015042:	bf00      	nop
 8015044:	bf00      	nop
 8015046:	e7fd      	b.n	8015044 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015048:	f001 f866 	bl	8016118 <xTaskGetSchedulerState>
 801504c:	4603      	mov	r3, r0
 801504e:	2b00      	cmp	r3, #0
 8015050:	d102      	bne.n	8015058 <xQueueSemaphoreTake+0x64>
 8015052:	683b      	ldr	r3, [r7, #0]
 8015054:	2b00      	cmp	r3, #0
 8015056:	d101      	bne.n	801505c <xQueueSemaphoreTake+0x68>
 8015058:	2301      	movs	r3, #1
 801505a:	e000      	b.n	801505e <xQueueSemaphoreTake+0x6a>
 801505c:	2300      	movs	r3, #0
 801505e:	2b00      	cmp	r3, #0
 8015060:	d10b      	bne.n	801507a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8015062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015066:	f383 8811 	msr	BASEPRI, r3
 801506a:	f3bf 8f6f 	isb	sy
 801506e:	f3bf 8f4f 	dsb	sy
 8015072:	61bb      	str	r3, [r7, #24]
}
 8015074:	bf00      	nop
 8015076:	bf00      	nop
 8015078:	e7fd      	b.n	8015076 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801507a:	f001 fba5 	bl	80167c8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801507e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015080:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015082:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8015084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015086:	2b00      	cmp	r3, #0
 8015088:	d024      	beq.n	80150d4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801508a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801508c:	1e5a      	subs	r2, r3, #1
 801508e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015090:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015094:	681b      	ldr	r3, [r3, #0]
 8015096:	2b00      	cmp	r3, #0
 8015098:	d104      	bne.n	80150a4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801509a:	f001 f9e9 	bl	8016470 <pvTaskIncrementMutexHeldCount>
 801509e:	4602      	mov	r2, r0
 80150a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80150a2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80150a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80150a6:	691b      	ldr	r3, [r3, #16]
 80150a8:	2b00      	cmp	r3, #0
 80150aa:	d00f      	beq.n	80150cc <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80150ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80150ae:	3310      	adds	r3, #16
 80150b0:	4618      	mov	r0, r3
 80150b2:	f000 fe71 	bl	8015d98 <xTaskRemoveFromEventList>
 80150b6:	4603      	mov	r3, r0
 80150b8:	2b00      	cmp	r3, #0
 80150ba:	d007      	beq.n	80150cc <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80150bc:	4b54      	ldr	r3, [pc, #336]	@ (8015210 <xQueueSemaphoreTake+0x21c>)
 80150be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80150c2:	601a      	str	r2, [r3, #0]
 80150c4:	f3bf 8f4f 	dsb	sy
 80150c8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80150cc:	f001 fbae 	bl	801682c <vPortExitCritical>
				return pdPASS;
 80150d0:	2301      	movs	r3, #1
 80150d2:	e098      	b.n	8015206 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80150d4:	683b      	ldr	r3, [r7, #0]
 80150d6:	2b00      	cmp	r3, #0
 80150d8:	d112      	bne.n	8015100 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80150da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80150dc:	2b00      	cmp	r3, #0
 80150de:	d00b      	beq.n	80150f8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80150e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80150e4:	f383 8811 	msr	BASEPRI, r3
 80150e8:	f3bf 8f6f 	isb	sy
 80150ec:	f3bf 8f4f 	dsb	sy
 80150f0:	617b      	str	r3, [r7, #20]
}
 80150f2:	bf00      	nop
 80150f4:	bf00      	nop
 80150f6:	e7fd      	b.n	80150f4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80150f8:	f001 fb98 	bl	801682c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80150fc:	2300      	movs	r3, #0
 80150fe:	e082      	b.n	8015206 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015100:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015102:	2b00      	cmp	r3, #0
 8015104:	d106      	bne.n	8015114 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015106:	f107 030c 	add.w	r3, r7, #12
 801510a:	4618      	mov	r0, r3
 801510c:	f000 fea8 	bl	8015e60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015110:	2301      	movs	r3, #1
 8015112:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015114:	f001 fb8a 	bl	801682c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015118:	f000 fc56 	bl	80159c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801511c:	f001 fb54 	bl	80167c8 <vPortEnterCritical>
 8015120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015122:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8015126:	b25b      	sxtb	r3, r3
 8015128:	f1b3 3fff 	cmp.w	r3, #4294967295
 801512c:	d103      	bne.n	8015136 <xQueueSemaphoreTake+0x142>
 801512e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015130:	2200      	movs	r2, #0
 8015132:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8015136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015138:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801513c:	b25b      	sxtb	r3, r3
 801513e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015142:	d103      	bne.n	801514c <xQueueSemaphoreTake+0x158>
 8015144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015146:	2200      	movs	r2, #0
 8015148:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801514c:	f001 fb6e 	bl	801682c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015150:	463a      	mov	r2, r7
 8015152:	f107 030c 	add.w	r3, r7, #12
 8015156:	4611      	mov	r1, r2
 8015158:	4618      	mov	r0, r3
 801515a:	f000 fe97 	bl	8015e8c <xTaskCheckForTimeOut>
 801515e:	4603      	mov	r3, r0
 8015160:	2b00      	cmp	r3, #0
 8015162:	d132      	bne.n	80151ca <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015164:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015166:	f000 f9d1 	bl	801550c <prvIsQueueEmpty>
 801516a:	4603      	mov	r3, r0
 801516c:	2b00      	cmp	r3, #0
 801516e:	d026      	beq.n	80151be <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015172:	681b      	ldr	r3, [r3, #0]
 8015174:	2b00      	cmp	r3, #0
 8015176:	d109      	bne.n	801518c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8015178:	f001 fb26 	bl	80167c8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 801517c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801517e:	689b      	ldr	r3, [r3, #8]
 8015180:	4618      	mov	r0, r3
 8015182:	f000 ffe7 	bl	8016154 <xTaskPriorityInherit>
 8015186:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8015188:	f001 fb50 	bl	801682c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801518c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801518e:	3324      	adds	r3, #36	@ 0x24
 8015190:	683a      	ldr	r2, [r7, #0]
 8015192:	4611      	mov	r1, r2
 8015194:	4618      	mov	r0, r3
 8015196:	f000 fdd9 	bl	8015d4c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801519a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801519c:	f000 f964 	bl	8015468 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80151a0:	f000 fc20 	bl	80159e4 <xTaskResumeAll>
 80151a4:	4603      	mov	r3, r0
 80151a6:	2b00      	cmp	r3, #0
 80151a8:	f47f af67 	bne.w	801507a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80151ac:	4b18      	ldr	r3, [pc, #96]	@ (8015210 <xQueueSemaphoreTake+0x21c>)
 80151ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80151b2:	601a      	str	r2, [r3, #0]
 80151b4:	f3bf 8f4f 	dsb	sy
 80151b8:	f3bf 8f6f 	isb	sy
 80151bc:	e75d      	b.n	801507a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80151be:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80151c0:	f000 f952 	bl	8015468 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80151c4:	f000 fc0e 	bl	80159e4 <xTaskResumeAll>
 80151c8:	e757      	b.n	801507a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80151ca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80151cc:	f000 f94c 	bl	8015468 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80151d0:	f000 fc08 	bl	80159e4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80151d4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80151d6:	f000 f999 	bl	801550c <prvIsQueueEmpty>
 80151da:	4603      	mov	r3, r0
 80151dc:	2b00      	cmp	r3, #0
 80151de:	f43f af4c 	beq.w	801507a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80151e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	d00d      	beq.n	8015204 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80151e8:	f001 faee 	bl	80167c8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80151ec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80151ee:	f000 f893 	bl	8015318 <prvGetDisinheritPriorityAfterTimeout>
 80151f2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80151f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151f6:	689b      	ldr	r3, [r3, #8]
 80151f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80151fa:	4618      	mov	r0, r3
 80151fc:	f001 f8a8 	bl	8016350 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8015200:	f001 fb14 	bl	801682c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8015204:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8015206:	4618      	mov	r0, r3
 8015208:	3738      	adds	r7, #56	@ 0x38
 801520a:	46bd      	mov	sp, r7
 801520c:	bd80      	pop	{r7, pc}
 801520e:	bf00      	nop
 8015210:	e000ed04 	.word	0xe000ed04

08015214 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8015214:	b580      	push	{r7, lr}
 8015216:	b08e      	sub	sp, #56	@ 0x38
 8015218:	af00      	add	r7, sp, #0
 801521a:	60f8      	str	r0, [r7, #12]
 801521c:	60b9      	str	r1, [r7, #8]
 801521e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015220:	68fb      	ldr	r3, [r7, #12]
 8015222:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8015224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015226:	2b00      	cmp	r3, #0
 8015228:	d10b      	bne.n	8015242 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 801522a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801522e:	f383 8811 	msr	BASEPRI, r3
 8015232:	f3bf 8f6f 	isb	sy
 8015236:	f3bf 8f4f 	dsb	sy
 801523a:	623b      	str	r3, [r7, #32]
}
 801523c:	bf00      	nop
 801523e:	bf00      	nop
 8015240:	e7fd      	b.n	801523e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015242:	68bb      	ldr	r3, [r7, #8]
 8015244:	2b00      	cmp	r3, #0
 8015246:	d103      	bne.n	8015250 <xQueueReceiveFromISR+0x3c>
 8015248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801524a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801524c:	2b00      	cmp	r3, #0
 801524e:	d101      	bne.n	8015254 <xQueueReceiveFromISR+0x40>
 8015250:	2301      	movs	r3, #1
 8015252:	e000      	b.n	8015256 <xQueueReceiveFromISR+0x42>
 8015254:	2300      	movs	r3, #0
 8015256:	2b00      	cmp	r3, #0
 8015258:	d10b      	bne.n	8015272 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 801525a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801525e:	f383 8811 	msr	BASEPRI, r3
 8015262:	f3bf 8f6f 	isb	sy
 8015266:	f3bf 8f4f 	dsb	sy
 801526a:	61fb      	str	r3, [r7, #28]
}
 801526c:	bf00      	nop
 801526e:	bf00      	nop
 8015270:	e7fd      	b.n	801526e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015272:	f001 fb89 	bl	8016988 <vPortValidateInterruptPriority>
	__asm volatile
 8015276:	f3ef 8211 	mrs	r2, BASEPRI
 801527a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801527e:	f383 8811 	msr	BASEPRI, r3
 8015282:	f3bf 8f6f 	isb	sy
 8015286:	f3bf 8f4f 	dsb	sy
 801528a:	61ba      	str	r2, [r7, #24]
 801528c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801528e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015290:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015296:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801529a:	2b00      	cmp	r3, #0
 801529c:	d02f      	beq.n	80152fe <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801529e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80152a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80152a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80152a8:	68b9      	ldr	r1, [r7, #8]
 80152aa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80152ac:	f000 f8b6 	bl	801541c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80152b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80152b2:	1e5a      	subs	r2, r3, #1
 80152b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80152b6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80152b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80152bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80152c0:	d112      	bne.n	80152e8 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80152c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80152c4:	691b      	ldr	r3, [r3, #16]
 80152c6:	2b00      	cmp	r3, #0
 80152c8:	d016      	beq.n	80152f8 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80152ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80152cc:	3310      	adds	r3, #16
 80152ce:	4618      	mov	r0, r3
 80152d0:	f000 fd62 	bl	8015d98 <xTaskRemoveFromEventList>
 80152d4:	4603      	mov	r3, r0
 80152d6:	2b00      	cmp	r3, #0
 80152d8:	d00e      	beq.n	80152f8 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	2b00      	cmp	r3, #0
 80152de:	d00b      	beq.n	80152f8 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80152e0:	687b      	ldr	r3, [r7, #4]
 80152e2:	2201      	movs	r2, #1
 80152e4:	601a      	str	r2, [r3, #0]
 80152e6:	e007      	b.n	80152f8 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80152e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80152ec:	3301      	adds	r3, #1
 80152ee:	b2db      	uxtb	r3, r3
 80152f0:	b25a      	sxtb	r2, r3
 80152f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80152f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80152f8:	2301      	movs	r3, #1
 80152fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80152fc:	e001      	b.n	8015302 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80152fe:	2300      	movs	r3, #0
 8015300:	637b      	str	r3, [r7, #52]	@ 0x34
 8015302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015304:	613b      	str	r3, [r7, #16]
	__asm volatile
 8015306:	693b      	ldr	r3, [r7, #16]
 8015308:	f383 8811 	msr	BASEPRI, r3
}
 801530c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801530e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8015310:	4618      	mov	r0, r3
 8015312:	3738      	adds	r7, #56	@ 0x38
 8015314:	46bd      	mov	sp, r7
 8015316:	bd80      	pop	{r7, pc}

08015318 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8015318:	b480      	push	{r7}
 801531a:	b085      	sub	sp, #20
 801531c:	af00      	add	r7, sp, #0
 801531e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015324:	2b00      	cmp	r3, #0
 8015326:	d006      	beq.n	8015336 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8015328:	687b      	ldr	r3, [r7, #4]
 801532a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801532c:	681b      	ldr	r3, [r3, #0]
 801532e:	f1c3 0307 	rsb	r3, r3, #7
 8015332:	60fb      	str	r3, [r7, #12]
 8015334:	e001      	b.n	801533a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8015336:	2300      	movs	r3, #0
 8015338:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801533a:	68fb      	ldr	r3, [r7, #12]
	}
 801533c:	4618      	mov	r0, r3
 801533e:	3714      	adds	r7, #20
 8015340:	46bd      	mov	sp, r7
 8015342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015346:	4770      	bx	lr

08015348 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8015348:	b580      	push	{r7, lr}
 801534a:	b086      	sub	sp, #24
 801534c:	af00      	add	r7, sp, #0
 801534e:	60f8      	str	r0, [r7, #12]
 8015350:	60b9      	str	r1, [r7, #8]
 8015352:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8015354:	2300      	movs	r3, #0
 8015356:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015358:	68fb      	ldr	r3, [r7, #12]
 801535a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801535c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801535e:	68fb      	ldr	r3, [r7, #12]
 8015360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015362:	2b00      	cmp	r3, #0
 8015364:	d10d      	bne.n	8015382 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015366:	68fb      	ldr	r3, [r7, #12]
 8015368:	681b      	ldr	r3, [r3, #0]
 801536a:	2b00      	cmp	r3, #0
 801536c:	d14d      	bne.n	801540a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801536e:	68fb      	ldr	r3, [r7, #12]
 8015370:	689b      	ldr	r3, [r3, #8]
 8015372:	4618      	mov	r0, r3
 8015374:	f000 ff64 	bl	8016240 <xTaskPriorityDisinherit>
 8015378:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801537a:	68fb      	ldr	r3, [r7, #12]
 801537c:	2200      	movs	r2, #0
 801537e:	609a      	str	r2, [r3, #8]
 8015380:	e043      	b.n	801540a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8015382:	687b      	ldr	r3, [r7, #4]
 8015384:	2b00      	cmp	r3, #0
 8015386:	d119      	bne.n	80153bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015388:	68fb      	ldr	r3, [r7, #12]
 801538a:	6858      	ldr	r0, [r3, #4]
 801538c:	68fb      	ldr	r3, [r7, #12]
 801538e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015390:	461a      	mov	r2, r3
 8015392:	68b9      	ldr	r1, [r7, #8]
 8015394:	f002 fd11 	bl	8017dba <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015398:	68fb      	ldr	r3, [r7, #12]
 801539a:	685a      	ldr	r2, [r3, #4]
 801539c:	68fb      	ldr	r3, [r7, #12]
 801539e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80153a0:	441a      	add	r2, r3
 80153a2:	68fb      	ldr	r3, [r7, #12]
 80153a4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80153a6:	68fb      	ldr	r3, [r7, #12]
 80153a8:	685a      	ldr	r2, [r3, #4]
 80153aa:	68fb      	ldr	r3, [r7, #12]
 80153ac:	689b      	ldr	r3, [r3, #8]
 80153ae:	429a      	cmp	r2, r3
 80153b0:	d32b      	bcc.n	801540a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80153b2:	68fb      	ldr	r3, [r7, #12]
 80153b4:	681a      	ldr	r2, [r3, #0]
 80153b6:	68fb      	ldr	r3, [r7, #12]
 80153b8:	605a      	str	r2, [r3, #4]
 80153ba:	e026      	b.n	801540a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80153bc:	68fb      	ldr	r3, [r7, #12]
 80153be:	68d8      	ldr	r0, [r3, #12]
 80153c0:	68fb      	ldr	r3, [r7, #12]
 80153c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80153c4:	461a      	mov	r2, r3
 80153c6:	68b9      	ldr	r1, [r7, #8]
 80153c8:	f002 fcf7 	bl	8017dba <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80153cc:	68fb      	ldr	r3, [r7, #12]
 80153ce:	68da      	ldr	r2, [r3, #12]
 80153d0:	68fb      	ldr	r3, [r7, #12]
 80153d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80153d4:	425b      	negs	r3, r3
 80153d6:	441a      	add	r2, r3
 80153d8:	68fb      	ldr	r3, [r7, #12]
 80153da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80153dc:	68fb      	ldr	r3, [r7, #12]
 80153de:	68da      	ldr	r2, [r3, #12]
 80153e0:	68fb      	ldr	r3, [r7, #12]
 80153e2:	681b      	ldr	r3, [r3, #0]
 80153e4:	429a      	cmp	r2, r3
 80153e6:	d207      	bcs.n	80153f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80153e8:	68fb      	ldr	r3, [r7, #12]
 80153ea:	689a      	ldr	r2, [r3, #8]
 80153ec:	68fb      	ldr	r3, [r7, #12]
 80153ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80153f0:	425b      	negs	r3, r3
 80153f2:	441a      	add	r2, r3
 80153f4:	68fb      	ldr	r3, [r7, #12]
 80153f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	2b02      	cmp	r3, #2
 80153fc:	d105      	bne.n	801540a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80153fe:	693b      	ldr	r3, [r7, #16]
 8015400:	2b00      	cmp	r3, #0
 8015402:	d002      	beq.n	801540a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8015404:	693b      	ldr	r3, [r7, #16]
 8015406:	3b01      	subs	r3, #1
 8015408:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801540a:	693b      	ldr	r3, [r7, #16]
 801540c:	1c5a      	adds	r2, r3, #1
 801540e:	68fb      	ldr	r3, [r7, #12]
 8015410:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8015412:	697b      	ldr	r3, [r7, #20]
}
 8015414:	4618      	mov	r0, r3
 8015416:	3718      	adds	r7, #24
 8015418:	46bd      	mov	sp, r7
 801541a:	bd80      	pop	{r7, pc}

0801541c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801541c:	b580      	push	{r7, lr}
 801541e:	b082      	sub	sp, #8
 8015420:	af00      	add	r7, sp, #0
 8015422:	6078      	str	r0, [r7, #4]
 8015424:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8015426:	687b      	ldr	r3, [r7, #4]
 8015428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801542a:	2b00      	cmp	r3, #0
 801542c:	d018      	beq.n	8015460 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801542e:	687b      	ldr	r3, [r7, #4]
 8015430:	68da      	ldr	r2, [r3, #12]
 8015432:	687b      	ldr	r3, [r7, #4]
 8015434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015436:	441a      	add	r2, r3
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801543c:	687b      	ldr	r3, [r7, #4]
 801543e:	68da      	ldr	r2, [r3, #12]
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	689b      	ldr	r3, [r3, #8]
 8015444:	429a      	cmp	r2, r3
 8015446:	d303      	bcc.n	8015450 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	681a      	ldr	r2, [r3, #0]
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015450:	687b      	ldr	r3, [r7, #4]
 8015452:	68d9      	ldr	r1, [r3, #12]
 8015454:	687b      	ldr	r3, [r7, #4]
 8015456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015458:	461a      	mov	r2, r3
 801545a:	6838      	ldr	r0, [r7, #0]
 801545c:	f002 fcad 	bl	8017dba <memcpy>
	}
}
 8015460:	bf00      	nop
 8015462:	3708      	adds	r7, #8
 8015464:	46bd      	mov	sp, r7
 8015466:	bd80      	pop	{r7, pc}

08015468 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8015468:	b580      	push	{r7, lr}
 801546a:	b084      	sub	sp, #16
 801546c:	af00      	add	r7, sp, #0
 801546e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8015470:	f001 f9aa 	bl	80167c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8015474:	687b      	ldr	r3, [r7, #4]
 8015476:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801547a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801547c:	e011      	b.n	80154a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801547e:	687b      	ldr	r3, [r7, #4]
 8015480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015482:	2b00      	cmp	r3, #0
 8015484:	d012      	beq.n	80154ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015486:	687b      	ldr	r3, [r7, #4]
 8015488:	3324      	adds	r3, #36	@ 0x24
 801548a:	4618      	mov	r0, r3
 801548c:	f000 fc84 	bl	8015d98 <xTaskRemoveFromEventList>
 8015490:	4603      	mov	r3, r0
 8015492:	2b00      	cmp	r3, #0
 8015494:	d001      	beq.n	801549a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8015496:	f000 fd5d 	bl	8015f54 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801549a:	7bfb      	ldrb	r3, [r7, #15]
 801549c:	3b01      	subs	r3, #1
 801549e:	b2db      	uxtb	r3, r3
 80154a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80154a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80154a6:	2b00      	cmp	r3, #0
 80154a8:	dce9      	bgt.n	801547e <prvUnlockQueue+0x16>
 80154aa:	e000      	b.n	80154ae <prvUnlockQueue+0x46>
					break;
 80154ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	22ff      	movs	r2, #255	@ 0xff
 80154b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80154b6:	f001 f9b9 	bl	801682c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80154ba:	f001 f985 	bl	80167c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80154be:	687b      	ldr	r3, [r7, #4]
 80154c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80154c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80154c6:	e011      	b.n	80154ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80154c8:	687b      	ldr	r3, [r7, #4]
 80154ca:	691b      	ldr	r3, [r3, #16]
 80154cc:	2b00      	cmp	r3, #0
 80154ce:	d012      	beq.n	80154f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80154d0:	687b      	ldr	r3, [r7, #4]
 80154d2:	3310      	adds	r3, #16
 80154d4:	4618      	mov	r0, r3
 80154d6:	f000 fc5f 	bl	8015d98 <xTaskRemoveFromEventList>
 80154da:	4603      	mov	r3, r0
 80154dc:	2b00      	cmp	r3, #0
 80154de:	d001      	beq.n	80154e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80154e0:	f000 fd38 	bl	8015f54 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80154e4:	7bbb      	ldrb	r3, [r7, #14]
 80154e6:	3b01      	subs	r3, #1
 80154e8:	b2db      	uxtb	r3, r3
 80154ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80154ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80154f0:	2b00      	cmp	r3, #0
 80154f2:	dce9      	bgt.n	80154c8 <prvUnlockQueue+0x60>
 80154f4:	e000      	b.n	80154f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80154f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	22ff      	movs	r2, #255	@ 0xff
 80154fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8015500:	f001 f994 	bl	801682c <vPortExitCritical>
}
 8015504:	bf00      	nop
 8015506:	3710      	adds	r7, #16
 8015508:	46bd      	mov	sp, r7
 801550a:	bd80      	pop	{r7, pc}

0801550c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801550c:	b580      	push	{r7, lr}
 801550e:	b084      	sub	sp, #16
 8015510:	af00      	add	r7, sp, #0
 8015512:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8015514:	f001 f958 	bl	80167c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801551c:	2b00      	cmp	r3, #0
 801551e:	d102      	bne.n	8015526 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8015520:	2301      	movs	r3, #1
 8015522:	60fb      	str	r3, [r7, #12]
 8015524:	e001      	b.n	801552a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8015526:	2300      	movs	r3, #0
 8015528:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801552a:	f001 f97f 	bl	801682c <vPortExitCritical>

	return xReturn;
 801552e:	68fb      	ldr	r3, [r7, #12]
}
 8015530:	4618      	mov	r0, r3
 8015532:	3710      	adds	r7, #16
 8015534:	46bd      	mov	sp, r7
 8015536:	bd80      	pop	{r7, pc}

08015538 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8015538:	b580      	push	{r7, lr}
 801553a:	b084      	sub	sp, #16
 801553c:	af00      	add	r7, sp, #0
 801553e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8015540:	f001 f942 	bl	80167c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8015544:	687b      	ldr	r3, [r7, #4]
 8015546:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015548:	687b      	ldr	r3, [r7, #4]
 801554a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801554c:	429a      	cmp	r2, r3
 801554e:	d102      	bne.n	8015556 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8015550:	2301      	movs	r3, #1
 8015552:	60fb      	str	r3, [r7, #12]
 8015554:	e001      	b.n	801555a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8015556:	2300      	movs	r3, #0
 8015558:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801555a:	f001 f967 	bl	801682c <vPortExitCritical>

	return xReturn;
 801555e:	68fb      	ldr	r3, [r7, #12]
}
 8015560:	4618      	mov	r0, r3
 8015562:	3710      	adds	r7, #16
 8015564:	46bd      	mov	sp, r7
 8015566:	bd80      	pop	{r7, pc}

08015568 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8015568:	b580      	push	{r7, lr}
 801556a:	b08e      	sub	sp, #56	@ 0x38
 801556c:	af04      	add	r7, sp, #16
 801556e:	60f8      	str	r0, [r7, #12]
 8015570:	60b9      	str	r1, [r7, #8]
 8015572:	607a      	str	r2, [r7, #4]
 8015574:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8015576:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015578:	2b00      	cmp	r3, #0
 801557a:	d10b      	bne.n	8015594 <xTaskCreateStatic+0x2c>
	__asm volatile
 801557c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015580:	f383 8811 	msr	BASEPRI, r3
 8015584:	f3bf 8f6f 	isb	sy
 8015588:	f3bf 8f4f 	dsb	sy
 801558c:	623b      	str	r3, [r7, #32]
}
 801558e:	bf00      	nop
 8015590:	bf00      	nop
 8015592:	e7fd      	b.n	8015590 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8015594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015596:	2b00      	cmp	r3, #0
 8015598:	d10b      	bne.n	80155b2 <xTaskCreateStatic+0x4a>
	__asm volatile
 801559a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801559e:	f383 8811 	msr	BASEPRI, r3
 80155a2:	f3bf 8f6f 	isb	sy
 80155a6:	f3bf 8f4f 	dsb	sy
 80155aa:	61fb      	str	r3, [r7, #28]
}
 80155ac:	bf00      	nop
 80155ae:	bf00      	nop
 80155b0:	e7fd      	b.n	80155ae <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80155b2:	2354      	movs	r3, #84	@ 0x54
 80155b4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80155b6:	693b      	ldr	r3, [r7, #16]
 80155b8:	2b54      	cmp	r3, #84	@ 0x54
 80155ba:	d00b      	beq.n	80155d4 <xTaskCreateStatic+0x6c>
	__asm volatile
 80155bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80155c0:	f383 8811 	msr	BASEPRI, r3
 80155c4:	f3bf 8f6f 	isb	sy
 80155c8:	f3bf 8f4f 	dsb	sy
 80155cc:	61bb      	str	r3, [r7, #24]
}
 80155ce:	bf00      	nop
 80155d0:	bf00      	nop
 80155d2:	e7fd      	b.n	80155d0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80155d4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80155d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80155d8:	2b00      	cmp	r3, #0
 80155da:	d01e      	beq.n	801561a <xTaskCreateStatic+0xb2>
 80155dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80155de:	2b00      	cmp	r3, #0
 80155e0:	d01b      	beq.n	801561a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80155e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80155e4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80155e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80155e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80155ea:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80155ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80155ee:	2202      	movs	r2, #2
 80155f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80155f4:	2300      	movs	r3, #0
 80155f6:	9303      	str	r3, [sp, #12]
 80155f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80155fa:	9302      	str	r3, [sp, #8]
 80155fc:	f107 0314 	add.w	r3, r7, #20
 8015600:	9301      	str	r3, [sp, #4]
 8015602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015604:	9300      	str	r3, [sp, #0]
 8015606:	683b      	ldr	r3, [r7, #0]
 8015608:	687a      	ldr	r2, [r7, #4]
 801560a:	68b9      	ldr	r1, [r7, #8]
 801560c:	68f8      	ldr	r0, [r7, #12]
 801560e:	f000 f850 	bl	80156b2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8015612:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015614:	f000 f8d6 	bl	80157c4 <prvAddNewTaskToReadyList>
 8015618:	e001      	b.n	801561e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 801561a:	2300      	movs	r3, #0
 801561c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801561e:	697b      	ldr	r3, [r7, #20]
	}
 8015620:	4618      	mov	r0, r3
 8015622:	3728      	adds	r7, #40	@ 0x28
 8015624:	46bd      	mov	sp, r7
 8015626:	bd80      	pop	{r7, pc}

08015628 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8015628:	b580      	push	{r7, lr}
 801562a:	b08c      	sub	sp, #48	@ 0x30
 801562c:	af04      	add	r7, sp, #16
 801562e:	60f8      	str	r0, [r7, #12]
 8015630:	60b9      	str	r1, [r7, #8]
 8015632:	603b      	str	r3, [r7, #0]
 8015634:	4613      	mov	r3, r2
 8015636:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8015638:	88fb      	ldrh	r3, [r7, #6]
 801563a:	009b      	lsls	r3, r3, #2
 801563c:	4618      	mov	r0, r3
 801563e:	f001 f9e5 	bl	8016a0c <pvPortMalloc>
 8015642:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8015644:	697b      	ldr	r3, [r7, #20]
 8015646:	2b00      	cmp	r3, #0
 8015648:	d00e      	beq.n	8015668 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801564a:	2054      	movs	r0, #84	@ 0x54
 801564c:	f001 f9de 	bl	8016a0c <pvPortMalloc>
 8015650:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8015652:	69fb      	ldr	r3, [r7, #28]
 8015654:	2b00      	cmp	r3, #0
 8015656:	d003      	beq.n	8015660 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8015658:	69fb      	ldr	r3, [r7, #28]
 801565a:	697a      	ldr	r2, [r7, #20]
 801565c:	631a      	str	r2, [r3, #48]	@ 0x30
 801565e:	e005      	b.n	801566c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8015660:	6978      	ldr	r0, [r7, #20]
 8015662:	f001 faa1 	bl	8016ba8 <vPortFree>
 8015666:	e001      	b.n	801566c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8015668:	2300      	movs	r3, #0
 801566a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801566c:	69fb      	ldr	r3, [r7, #28]
 801566e:	2b00      	cmp	r3, #0
 8015670:	d017      	beq.n	80156a2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8015672:	69fb      	ldr	r3, [r7, #28]
 8015674:	2200      	movs	r2, #0
 8015676:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801567a:	88fa      	ldrh	r2, [r7, #6]
 801567c:	2300      	movs	r3, #0
 801567e:	9303      	str	r3, [sp, #12]
 8015680:	69fb      	ldr	r3, [r7, #28]
 8015682:	9302      	str	r3, [sp, #8]
 8015684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015686:	9301      	str	r3, [sp, #4]
 8015688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801568a:	9300      	str	r3, [sp, #0]
 801568c:	683b      	ldr	r3, [r7, #0]
 801568e:	68b9      	ldr	r1, [r7, #8]
 8015690:	68f8      	ldr	r0, [r7, #12]
 8015692:	f000 f80e 	bl	80156b2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8015696:	69f8      	ldr	r0, [r7, #28]
 8015698:	f000 f894 	bl	80157c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801569c:	2301      	movs	r3, #1
 801569e:	61bb      	str	r3, [r7, #24]
 80156a0:	e002      	b.n	80156a8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80156a2:	f04f 33ff 	mov.w	r3, #4294967295
 80156a6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80156a8:	69bb      	ldr	r3, [r7, #24]
	}
 80156aa:	4618      	mov	r0, r3
 80156ac:	3720      	adds	r7, #32
 80156ae:	46bd      	mov	sp, r7
 80156b0:	bd80      	pop	{r7, pc}

080156b2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80156b2:	b580      	push	{r7, lr}
 80156b4:	b088      	sub	sp, #32
 80156b6:	af00      	add	r7, sp, #0
 80156b8:	60f8      	str	r0, [r7, #12]
 80156ba:	60b9      	str	r1, [r7, #8]
 80156bc:	607a      	str	r2, [r7, #4]
 80156be:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80156c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80156c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80156c4:	6879      	ldr	r1, [r7, #4]
 80156c6:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80156ca:	440b      	add	r3, r1
 80156cc:	009b      	lsls	r3, r3, #2
 80156ce:	4413      	add	r3, r2
 80156d0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80156d2:	69bb      	ldr	r3, [r7, #24]
 80156d4:	f023 0307 	bic.w	r3, r3, #7
 80156d8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80156da:	69bb      	ldr	r3, [r7, #24]
 80156dc:	f003 0307 	and.w	r3, r3, #7
 80156e0:	2b00      	cmp	r3, #0
 80156e2:	d00b      	beq.n	80156fc <prvInitialiseNewTask+0x4a>
	__asm volatile
 80156e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80156e8:	f383 8811 	msr	BASEPRI, r3
 80156ec:	f3bf 8f6f 	isb	sy
 80156f0:	f3bf 8f4f 	dsb	sy
 80156f4:	617b      	str	r3, [r7, #20]
}
 80156f6:	bf00      	nop
 80156f8:	bf00      	nop
 80156fa:	e7fd      	b.n	80156f8 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80156fc:	68bb      	ldr	r3, [r7, #8]
 80156fe:	2b00      	cmp	r3, #0
 8015700:	d01f      	beq.n	8015742 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8015702:	2300      	movs	r3, #0
 8015704:	61fb      	str	r3, [r7, #28]
 8015706:	e012      	b.n	801572e <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8015708:	68ba      	ldr	r2, [r7, #8]
 801570a:	69fb      	ldr	r3, [r7, #28]
 801570c:	4413      	add	r3, r2
 801570e:	7819      	ldrb	r1, [r3, #0]
 8015710:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015712:	69fb      	ldr	r3, [r7, #28]
 8015714:	4413      	add	r3, r2
 8015716:	3334      	adds	r3, #52	@ 0x34
 8015718:	460a      	mov	r2, r1
 801571a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801571c:	68ba      	ldr	r2, [r7, #8]
 801571e:	69fb      	ldr	r3, [r7, #28]
 8015720:	4413      	add	r3, r2
 8015722:	781b      	ldrb	r3, [r3, #0]
 8015724:	2b00      	cmp	r3, #0
 8015726:	d006      	beq.n	8015736 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8015728:	69fb      	ldr	r3, [r7, #28]
 801572a:	3301      	adds	r3, #1
 801572c:	61fb      	str	r3, [r7, #28]
 801572e:	69fb      	ldr	r3, [r7, #28]
 8015730:	2b0f      	cmp	r3, #15
 8015732:	d9e9      	bls.n	8015708 <prvInitialiseNewTask+0x56>
 8015734:	e000      	b.n	8015738 <prvInitialiseNewTask+0x86>
			{
				break;
 8015736:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8015738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801573a:	2200      	movs	r2, #0
 801573c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8015740:	e003      	b.n	801574a <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8015742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015744:	2200      	movs	r2, #0
 8015746:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801574a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801574c:	2b06      	cmp	r3, #6
 801574e:	d901      	bls.n	8015754 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8015750:	2306      	movs	r3, #6
 8015752:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8015754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015756:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015758:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801575a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801575c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801575e:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8015760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015762:	2200      	movs	r2, #0
 8015764:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8015766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015768:	3304      	adds	r3, #4
 801576a:	4618      	mov	r0, r3
 801576c:	f7ff fa1c 	bl	8014ba8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8015770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015772:	3318      	adds	r3, #24
 8015774:	4618      	mov	r0, r3
 8015776:	f7ff fa17 	bl	8014ba8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801577a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801577c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801577e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015782:	f1c3 0207 	rsb	r2, r3, #7
 8015786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015788:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801578a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801578c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801578e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8015790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015792:	2200      	movs	r2, #0
 8015794:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8015796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015798:	2200      	movs	r2, #0
 801579a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801579e:	683a      	ldr	r2, [r7, #0]
 80157a0:	68f9      	ldr	r1, [r7, #12]
 80157a2:	69b8      	ldr	r0, [r7, #24]
 80157a4:	f000 fede 	bl	8016564 <pxPortInitialiseStack>
 80157a8:	4602      	mov	r2, r0
 80157aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80157ac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80157ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80157b0:	2b00      	cmp	r3, #0
 80157b2:	d002      	beq.n	80157ba <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80157b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80157b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80157b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80157ba:	bf00      	nop
 80157bc:	3720      	adds	r7, #32
 80157be:	46bd      	mov	sp, r7
 80157c0:	bd80      	pop	{r7, pc}
	...

080157c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80157c4:	b580      	push	{r7, lr}
 80157c6:	b082      	sub	sp, #8
 80157c8:	af00      	add	r7, sp, #0
 80157ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80157cc:	f000 fffc 	bl	80167c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80157d0:	4b2a      	ldr	r3, [pc, #168]	@ (801587c <prvAddNewTaskToReadyList+0xb8>)
 80157d2:	681b      	ldr	r3, [r3, #0]
 80157d4:	3301      	adds	r3, #1
 80157d6:	4a29      	ldr	r2, [pc, #164]	@ (801587c <prvAddNewTaskToReadyList+0xb8>)
 80157d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80157da:	4b29      	ldr	r3, [pc, #164]	@ (8015880 <prvAddNewTaskToReadyList+0xbc>)
 80157dc:	681b      	ldr	r3, [r3, #0]
 80157de:	2b00      	cmp	r3, #0
 80157e0:	d109      	bne.n	80157f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80157e2:	4a27      	ldr	r2, [pc, #156]	@ (8015880 <prvAddNewTaskToReadyList+0xbc>)
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80157e8:	4b24      	ldr	r3, [pc, #144]	@ (801587c <prvAddNewTaskToReadyList+0xb8>)
 80157ea:	681b      	ldr	r3, [r3, #0]
 80157ec:	2b01      	cmp	r3, #1
 80157ee:	d110      	bne.n	8015812 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80157f0:	f000 fbd4 	bl	8015f9c <prvInitialiseTaskLists>
 80157f4:	e00d      	b.n	8015812 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80157f6:	4b23      	ldr	r3, [pc, #140]	@ (8015884 <prvAddNewTaskToReadyList+0xc0>)
 80157f8:	681b      	ldr	r3, [r3, #0]
 80157fa:	2b00      	cmp	r3, #0
 80157fc:	d109      	bne.n	8015812 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80157fe:	4b20      	ldr	r3, [pc, #128]	@ (8015880 <prvAddNewTaskToReadyList+0xbc>)
 8015800:	681b      	ldr	r3, [r3, #0]
 8015802:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015804:	687b      	ldr	r3, [r7, #4]
 8015806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015808:	429a      	cmp	r2, r3
 801580a:	d802      	bhi.n	8015812 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801580c:	4a1c      	ldr	r2, [pc, #112]	@ (8015880 <prvAddNewTaskToReadyList+0xbc>)
 801580e:	687b      	ldr	r3, [r7, #4]
 8015810:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8015812:	4b1d      	ldr	r3, [pc, #116]	@ (8015888 <prvAddNewTaskToReadyList+0xc4>)
 8015814:	681b      	ldr	r3, [r3, #0]
 8015816:	3301      	adds	r3, #1
 8015818:	4a1b      	ldr	r2, [pc, #108]	@ (8015888 <prvAddNewTaskToReadyList+0xc4>)
 801581a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015820:	2201      	movs	r2, #1
 8015822:	409a      	lsls	r2, r3
 8015824:	4b19      	ldr	r3, [pc, #100]	@ (801588c <prvAddNewTaskToReadyList+0xc8>)
 8015826:	681b      	ldr	r3, [r3, #0]
 8015828:	4313      	orrs	r3, r2
 801582a:	4a18      	ldr	r2, [pc, #96]	@ (801588c <prvAddNewTaskToReadyList+0xc8>)
 801582c:	6013      	str	r3, [r2, #0]
 801582e:	687b      	ldr	r3, [r7, #4]
 8015830:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015832:	4613      	mov	r3, r2
 8015834:	009b      	lsls	r3, r3, #2
 8015836:	4413      	add	r3, r2
 8015838:	009b      	lsls	r3, r3, #2
 801583a:	4a15      	ldr	r2, [pc, #84]	@ (8015890 <prvAddNewTaskToReadyList+0xcc>)
 801583c:	441a      	add	r2, r3
 801583e:	687b      	ldr	r3, [r7, #4]
 8015840:	3304      	adds	r3, #4
 8015842:	4619      	mov	r1, r3
 8015844:	4610      	mov	r0, r2
 8015846:	f7ff f9bc 	bl	8014bc2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801584a:	f000 ffef 	bl	801682c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801584e:	4b0d      	ldr	r3, [pc, #52]	@ (8015884 <prvAddNewTaskToReadyList+0xc0>)
 8015850:	681b      	ldr	r3, [r3, #0]
 8015852:	2b00      	cmp	r3, #0
 8015854:	d00e      	beq.n	8015874 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8015856:	4b0a      	ldr	r3, [pc, #40]	@ (8015880 <prvAddNewTaskToReadyList+0xbc>)
 8015858:	681b      	ldr	r3, [r3, #0]
 801585a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015860:	429a      	cmp	r2, r3
 8015862:	d207      	bcs.n	8015874 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8015864:	4b0b      	ldr	r3, [pc, #44]	@ (8015894 <prvAddNewTaskToReadyList+0xd0>)
 8015866:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801586a:	601a      	str	r2, [r3, #0]
 801586c:	f3bf 8f4f 	dsb	sy
 8015870:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015874:	bf00      	nop
 8015876:	3708      	adds	r7, #8
 8015878:	46bd      	mov	sp, r7
 801587a:	bd80      	pop	{r7, pc}
 801587c:	24002adc 	.word	0x24002adc
 8015880:	240029dc 	.word	0x240029dc
 8015884:	24002ae8 	.word	0x24002ae8
 8015888:	24002af8 	.word	0x24002af8
 801588c:	24002ae4 	.word	0x24002ae4
 8015890:	240029e0 	.word	0x240029e0
 8015894:	e000ed04 	.word	0xe000ed04

08015898 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8015898:	b580      	push	{r7, lr}
 801589a:	b084      	sub	sp, #16
 801589c:	af00      	add	r7, sp, #0
 801589e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80158a0:	2300      	movs	r3, #0
 80158a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80158a4:	687b      	ldr	r3, [r7, #4]
 80158a6:	2b00      	cmp	r3, #0
 80158a8:	d018      	beq.n	80158dc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80158aa:	4b14      	ldr	r3, [pc, #80]	@ (80158fc <vTaskDelay+0x64>)
 80158ac:	681b      	ldr	r3, [r3, #0]
 80158ae:	2b00      	cmp	r3, #0
 80158b0:	d00b      	beq.n	80158ca <vTaskDelay+0x32>
	__asm volatile
 80158b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80158b6:	f383 8811 	msr	BASEPRI, r3
 80158ba:	f3bf 8f6f 	isb	sy
 80158be:	f3bf 8f4f 	dsb	sy
 80158c2:	60bb      	str	r3, [r7, #8]
}
 80158c4:	bf00      	nop
 80158c6:	bf00      	nop
 80158c8:	e7fd      	b.n	80158c6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80158ca:	f000 f87d 	bl	80159c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80158ce:	2100      	movs	r1, #0
 80158d0:	6878      	ldr	r0, [r7, #4]
 80158d2:	f000 fde1 	bl	8016498 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80158d6:	f000 f885 	bl	80159e4 <xTaskResumeAll>
 80158da:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80158dc:	68fb      	ldr	r3, [r7, #12]
 80158de:	2b00      	cmp	r3, #0
 80158e0:	d107      	bne.n	80158f2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80158e2:	4b07      	ldr	r3, [pc, #28]	@ (8015900 <vTaskDelay+0x68>)
 80158e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80158e8:	601a      	str	r2, [r3, #0]
 80158ea:	f3bf 8f4f 	dsb	sy
 80158ee:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80158f2:	bf00      	nop
 80158f4:	3710      	adds	r7, #16
 80158f6:	46bd      	mov	sp, r7
 80158f8:	bd80      	pop	{r7, pc}
 80158fa:	bf00      	nop
 80158fc:	24002b04 	.word	0x24002b04
 8015900:	e000ed04 	.word	0xe000ed04

08015904 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8015904:	b580      	push	{r7, lr}
 8015906:	b08a      	sub	sp, #40	@ 0x28
 8015908:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801590a:	2300      	movs	r3, #0
 801590c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801590e:	2300      	movs	r3, #0
 8015910:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8015912:	463a      	mov	r2, r7
 8015914:	1d39      	adds	r1, r7, #4
 8015916:	f107 0308 	add.w	r3, r7, #8
 801591a:	4618      	mov	r0, r3
 801591c:	f7ec fc94 	bl	8002248 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8015920:	6839      	ldr	r1, [r7, #0]
 8015922:	687b      	ldr	r3, [r7, #4]
 8015924:	68ba      	ldr	r2, [r7, #8]
 8015926:	9202      	str	r2, [sp, #8]
 8015928:	9301      	str	r3, [sp, #4]
 801592a:	2300      	movs	r3, #0
 801592c:	9300      	str	r3, [sp, #0]
 801592e:	2300      	movs	r3, #0
 8015930:	460a      	mov	r2, r1
 8015932:	491f      	ldr	r1, [pc, #124]	@ (80159b0 <vTaskStartScheduler+0xac>)
 8015934:	481f      	ldr	r0, [pc, #124]	@ (80159b4 <vTaskStartScheduler+0xb0>)
 8015936:	f7ff fe17 	bl	8015568 <xTaskCreateStatic>
 801593a:	4603      	mov	r3, r0
 801593c:	4a1e      	ldr	r2, [pc, #120]	@ (80159b8 <vTaskStartScheduler+0xb4>)
 801593e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8015940:	4b1d      	ldr	r3, [pc, #116]	@ (80159b8 <vTaskStartScheduler+0xb4>)
 8015942:	681b      	ldr	r3, [r3, #0]
 8015944:	2b00      	cmp	r3, #0
 8015946:	d002      	beq.n	801594e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8015948:	2301      	movs	r3, #1
 801594a:	617b      	str	r3, [r7, #20]
 801594c:	e001      	b.n	8015952 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801594e:	2300      	movs	r3, #0
 8015950:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8015952:	697b      	ldr	r3, [r7, #20]
 8015954:	2b01      	cmp	r3, #1
 8015956:	d116      	bne.n	8015986 <vTaskStartScheduler+0x82>
	__asm volatile
 8015958:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801595c:	f383 8811 	msr	BASEPRI, r3
 8015960:	f3bf 8f6f 	isb	sy
 8015964:	f3bf 8f4f 	dsb	sy
 8015968:	613b      	str	r3, [r7, #16]
}
 801596a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801596c:	4b13      	ldr	r3, [pc, #76]	@ (80159bc <vTaskStartScheduler+0xb8>)
 801596e:	f04f 32ff 	mov.w	r2, #4294967295
 8015972:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8015974:	4b12      	ldr	r3, [pc, #72]	@ (80159c0 <vTaskStartScheduler+0xbc>)
 8015976:	2201      	movs	r2, #1
 8015978:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801597a:	4b12      	ldr	r3, [pc, #72]	@ (80159c4 <vTaskStartScheduler+0xc0>)
 801597c:	2200      	movs	r2, #0
 801597e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8015980:	f000 fe7e 	bl	8016680 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8015984:	e00f      	b.n	80159a6 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8015986:	697b      	ldr	r3, [r7, #20]
 8015988:	f1b3 3fff 	cmp.w	r3, #4294967295
 801598c:	d10b      	bne.n	80159a6 <vTaskStartScheduler+0xa2>
	__asm volatile
 801598e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015992:	f383 8811 	msr	BASEPRI, r3
 8015996:	f3bf 8f6f 	isb	sy
 801599a:	f3bf 8f4f 	dsb	sy
 801599e:	60fb      	str	r3, [r7, #12]
}
 80159a0:	bf00      	nop
 80159a2:	bf00      	nop
 80159a4:	e7fd      	b.n	80159a2 <vTaskStartScheduler+0x9e>
}
 80159a6:	bf00      	nop
 80159a8:	3718      	adds	r7, #24
 80159aa:	46bd      	mov	sp, r7
 80159ac:	bd80      	pop	{r7, pc}
 80159ae:	bf00      	nop
 80159b0:	08019dcc 	.word	0x08019dcc
 80159b4:	08015f6d 	.word	0x08015f6d
 80159b8:	24002b00 	.word	0x24002b00
 80159bc:	24002afc 	.word	0x24002afc
 80159c0:	24002ae8 	.word	0x24002ae8
 80159c4:	24002ae0 	.word	0x24002ae0

080159c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80159c8:	b480      	push	{r7}
 80159ca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80159cc:	4b04      	ldr	r3, [pc, #16]	@ (80159e0 <vTaskSuspendAll+0x18>)
 80159ce:	681b      	ldr	r3, [r3, #0]
 80159d0:	3301      	adds	r3, #1
 80159d2:	4a03      	ldr	r2, [pc, #12]	@ (80159e0 <vTaskSuspendAll+0x18>)
 80159d4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80159d6:	bf00      	nop
 80159d8:	46bd      	mov	sp, r7
 80159da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159de:	4770      	bx	lr
 80159e0:	24002b04 	.word	0x24002b04

080159e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80159e4:	b580      	push	{r7, lr}
 80159e6:	b084      	sub	sp, #16
 80159e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80159ea:	2300      	movs	r3, #0
 80159ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80159ee:	2300      	movs	r3, #0
 80159f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80159f2:	4b42      	ldr	r3, [pc, #264]	@ (8015afc <xTaskResumeAll+0x118>)
 80159f4:	681b      	ldr	r3, [r3, #0]
 80159f6:	2b00      	cmp	r3, #0
 80159f8:	d10b      	bne.n	8015a12 <xTaskResumeAll+0x2e>
	__asm volatile
 80159fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80159fe:	f383 8811 	msr	BASEPRI, r3
 8015a02:	f3bf 8f6f 	isb	sy
 8015a06:	f3bf 8f4f 	dsb	sy
 8015a0a:	603b      	str	r3, [r7, #0]
}
 8015a0c:	bf00      	nop
 8015a0e:	bf00      	nop
 8015a10:	e7fd      	b.n	8015a0e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8015a12:	f000 fed9 	bl	80167c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8015a16:	4b39      	ldr	r3, [pc, #228]	@ (8015afc <xTaskResumeAll+0x118>)
 8015a18:	681b      	ldr	r3, [r3, #0]
 8015a1a:	3b01      	subs	r3, #1
 8015a1c:	4a37      	ldr	r2, [pc, #220]	@ (8015afc <xTaskResumeAll+0x118>)
 8015a1e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015a20:	4b36      	ldr	r3, [pc, #216]	@ (8015afc <xTaskResumeAll+0x118>)
 8015a22:	681b      	ldr	r3, [r3, #0]
 8015a24:	2b00      	cmp	r3, #0
 8015a26:	d161      	bne.n	8015aec <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8015a28:	4b35      	ldr	r3, [pc, #212]	@ (8015b00 <xTaskResumeAll+0x11c>)
 8015a2a:	681b      	ldr	r3, [r3, #0]
 8015a2c:	2b00      	cmp	r3, #0
 8015a2e:	d05d      	beq.n	8015aec <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015a30:	e02e      	b.n	8015a90 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015a32:	4b34      	ldr	r3, [pc, #208]	@ (8015b04 <xTaskResumeAll+0x120>)
 8015a34:	68db      	ldr	r3, [r3, #12]
 8015a36:	68db      	ldr	r3, [r3, #12]
 8015a38:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015a3a:	68fb      	ldr	r3, [r7, #12]
 8015a3c:	3318      	adds	r3, #24
 8015a3e:	4618      	mov	r0, r3
 8015a40:	f7ff f91c 	bl	8014c7c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015a44:	68fb      	ldr	r3, [r7, #12]
 8015a46:	3304      	adds	r3, #4
 8015a48:	4618      	mov	r0, r3
 8015a4a:	f7ff f917 	bl	8014c7c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8015a4e:	68fb      	ldr	r3, [r7, #12]
 8015a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015a52:	2201      	movs	r2, #1
 8015a54:	409a      	lsls	r2, r3
 8015a56:	4b2c      	ldr	r3, [pc, #176]	@ (8015b08 <xTaskResumeAll+0x124>)
 8015a58:	681b      	ldr	r3, [r3, #0]
 8015a5a:	4313      	orrs	r3, r2
 8015a5c:	4a2a      	ldr	r2, [pc, #168]	@ (8015b08 <xTaskResumeAll+0x124>)
 8015a5e:	6013      	str	r3, [r2, #0]
 8015a60:	68fb      	ldr	r3, [r7, #12]
 8015a62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015a64:	4613      	mov	r3, r2
 8015a66:	009b      	lsls	r3, r3, #2
 8015a68:	4413      	add	r3, r2
 8015a6a:	009b      	lsls	r3, r3, #2
 8015a6c:	4a27      	ldr	r2, [pc, #156]	@ (8015b0c <xTaskResumeAll+0x128>)
 8015a6e:	441a      	add	r2, r3
 8015a70:	68fb      	ldr	r3, [r7, #12]
 8015a72:	3304      	adds	r3, #4
 8015a74:	4619      	mov	r1, r3
 8015a76:	4610      	mov	r0, r2
 8015a78:	f7ff f8a3 	bl	8014bc2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015a7c:	68fb      	ldr	r3, [r7, #12]
 8015a7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015a80:	4b23      	ldr	r3, [pc, #140]	@ (8015b10 <xTaskResumeAll+0x12c>)
 8015a82:	681b      	ldr	r3, [r3, #0]
 8015a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015a86:	429a      	cmp	r2, r3
 8015a88:	d302      	bcc.n	8015a90 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8015a8a:	4b22      	ldr	r3, [pc, #136]	@ (8015b14 <xTaskResumeAll+0x130>)
 8015a8c:	2201      	movs	r2, #1
 8015a8e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015a90:	4b1c      	ldr	r3, [pc, #112]	@ (8015b04 <xTaskResumeAll+0x120>)
 8015a92:	681b      	ldr	r3, [r3, #0]
 8015a94:	2b00      	cmp	r3, #0
 8015a96:	d1cc      	bne.n	8015a32 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8015a98:	68fb      	ldr	r3, [r7, #12]
 8015a9a:	2b00      	cmp	r3, #0
 8015a9c:	d001      	beq.n	8015aa2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8015a9e:	f000 fb1b 	bl	80160d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8015aa2:	4b1d      	ldr	r3, [pc, #116]	@ (8015b18 <xTaskResumeAll+0x134>)
 8015aa4:	681b      	ldr	r3, [r3, #0]
 8015aa6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	d010      	beq.n	8015ad0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8015aae:	f000 f837 	bl	8015b20 <xTaskIncrementTick>
 8015ab2:	4603      	mov	r3, r0
 8015ab4:	2b00      	cmp	r3, #0
 8015ab6:	d002      	beq.n	8015abe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8015ab8:	4b16      	ldr	r3, [pc, #88]	@ (8015b14 <xTaskResumeAll+0x130>)
 8015aba:	2201      	movs	r2, #1
 8015abc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8015abe:	687b      	ldr	r3, [r7, #4]
 8015ac0:	3b01      	subs	r3, #1
 8015ac2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8015ac4:	687b      	ldr	r3, [r7, #4]
 8015ac6:	2b00      	cmp	r3, #0
 8015ac8:	d1f1      	bne.n	8015aae <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8015aca:	4b13      	ldr	r3, [pc, #76]	@ (8015b18 <xTaskResumeAll+0x134>)
 8015acc:	2200      	movs	r2, #0
 8015ace:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8015ad0:	4b10      	ldr	r3, [pc, #64]	@ (8015b14 <xTaskResumeAll+0x130>)
 8015ad2:	681b      	ldr	r3, [r3, #0]
 8015ad4:	2b00      	cmp	r3, #0
 8015ad6:	d009      	beq.n	8015aec <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8015ad8:	2301      	movs	r3, #1
 8015ada:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8015adc:	4b0f      	ldr	r3, [pc, #60]	@ (8015b1c <xTaskResumeAll+0x138>)
 8015ade:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015ae2:	601a      	str	r2, [r3, #0]
 8015ae4:	f3bf 8f4f 	dsb	sy
 8015ae8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015aec:	f000 fe9e 	bl	801682c <vPortExitCritical>

	return xAlreadyYielded;
 8015af0:	68bb      	ldr	r3, [r7, #8]
}
 8015af2:	4618      	mov	r0, r3
 8015af4:	3710      	adds	r7, #16
 8015af6:	46bd      	mov	sp, r7
 8015af8:	bd80      	pop	{r7, pc}
 8015afa:	bf00      	nop
 8015afc:	24002b04 	.word	0x24002b04
 8015b00:	24002adc 	.word	0x24002adc
 8015b04:	24002a9c 	.word	0x24002a9c
 8015b08:	24002ae4 	.word	0x24002ae4
 8015b0c:	240029e0 	.word	0x240029e0
 8015b10:	240029dc 	.word	0x240029dc
 8015b14:	24002af0 	.word	0x24002af0
 8015b18:	24002aec 	.word	0x24002aec
 8015b1c:	e000ed04 	.word	0xe000ed04

08015b20 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8015b20:	b580      	push	{r7, lr}
 8015b22:	b086      	sub	sp, #24
 8015b24:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8015b26:	2300      	movs	r3, #0
 8015b28:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015b2a:	4b4f      	ldr	r3, [pc, #316]	@ (8015c68 <xTaskIncrementTick+0x148>)
 8015b2c:	681b      	ldr	r3, [r3, #0]
 8015b2e:	2b00      	cmp	r3, #0
 8015b30:	f040 808f 	bne.w	8015c52 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8015b34:	4b4d      	ldr	r3, [pc, #308]	@ (8015c6c <xTaskIncrementTick+0x14c>)
 8015b36:	681b      	ldr	r3, [r3, #0]
 8015b38:	3301      	adds	r3, #1
 8015b3a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8015b3c:	4a4b      	ldr	r2, [pc, #300]	@ (8015c6c <xTaskIncrementTick+0x14c>)
 8015b3e:	693b      	ldr	r3, [r7, #16]
 8015b40:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8015b42:	693b      	ldr	r3, [r7, #16]
 8015b44:	2b00      	cmp	r3, #0
 8015b46:	d121      	bne.n	8015b8c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8015b48:	4b49      	ldr	r3, [pc, #292]	@ (8015c70 <xTaskIncrementTick+0x150>)
 8015b4a:	681b      	ldr	r3, [r3, #0]
 8015b4c:	681b      	ldr	r3, [r3, #0]
 8015b4e:	2b00      	cmp	r3, #0
 8015b50:	d00b      	beq.n	8015b6a <xTaskIncrementTick+0x4a>
	__asm volatile
 8015b52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015b56:	f383 8811 	msr	BASEPRI, r3
 8015b5a:	f3bf 8f6f 	isb	sy
 8015b5e:	f3bf 8f4f 	dsb	sy
 8015b62:	603b      	str	r3, [r7, #0]
}
 8015b64:	bf00      	nop
 8015b66:	bf00      	nop
 8015b68:	e7fd      	b.n	8015b66 <xTaskIncrementTick+0x46>
 8015b6a:	4b41      	ldr	r3, [pc, #260]	@ (8015c70 <xTaskIncrementTick+0x150>)
 8015b6c:	681b      	ldr	r3, [r3, #0]
 8015b6e:	60fb      	str	r3, [r7, #12]
 8015b70:	4b40      	ldr	r3, [pc, #256]	@ (8015c74 <xTaskIncrementTick+0x154>)
 8015b72:	681b      	ldr	r3, [r3, #0]
 8015b74:	4a3e      	ldr	r2, [pc, #248]	@ (8015c70 <xTaskIncrementTick+0x150>)
 8015b76:	6013      	str	r3, [r2, #0]
 8015b78:	4a3e      	ldr	r2, [pc, #248]	@ (8015c74 <xTaskIncrementTick+0x154>)
 8015b7a:	68fb      	ldr	r3, [r7, #12]
 8015b7c:	6013      	str	r3, [r2, #0]
 8015b7e:	4b3e      	ldr	r3, [pc, #248]	@ (8015c78 <xTaskIncrementTick+0x158>)
 8015b80:	681b      	ldr	r3, [r3, #0]
 8015b82:	3301      	adds	r3, #1
 8015b84:	4a3c      	ldr	r2, [pc, #240]	@ (8015c78 <xTaskIncrementTick+0x158>)
 8015b86:	6013      	str	r3, [r2, #0]
 8015b88:	f000 faa6 	bl	80160d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8015b8c:	4b3b      	ldr	r3, [pc, #236]	@ (8015c7c <xTaskIncrementTick+0x15c>)
 8015b8e:	681b      	ldr	r3, [r3, #0]
 8015b90:	693a      	ldr	r2, [r7, #16]
 8015b92:	429a      	cmp	r2, r3
 8015b94:	d348      	bcc.n	8015c28 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015b96:	4b36      	ldr	r3, [pc, #216]	@ (8015c70 <xTaskIncrementTick+0x150>)
 8015b98:	681b      	ldr	r3, [r3, #0]
 8015b9a:	681b      	ldr	r3, [r3, #0]
 8015b9c:	2b00      	cmp	r3, #0
 8015b9e:	d104      	bne.n	8015baa <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015ba0:	4b36      	ldr	r3, [pc, #216]	@ (8015c7c <xTaskIncrementTick+0x15c>)
 8015ba2:	f04f 32ff 	mov.w	r2, #4294967295
 8015ba6:	601a      	str	r2, [r3, #0]
					break;
 8015ba8:	e03e      	b.n	8015c28 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015baa:	4b31      	ldr	r3, [pc, #196]	@ (8015c70 <xTaskIncrementTick+0x150>)
 8015bac:	681b      	ldr	r3, [r3, #0]
 8015bae:	68db      	ldr	r3, [r3, #12]
 8015bb0:	68db      	ldr	r3, [r3, #12]
 8015bb2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8015bb4:	68bb      	ldr	r3, [r7, #8]
 8015bb6:	685b      	ldr	r3, [r3, #4]
 8015bb8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8015bba:	693a      	ldr	r2, [r7, #16]
 8015bbc:	687b      	ldr	r3, [r7, #4]
 8015bbe:	429a      	cmp	r2, r3
 8015bc0:	d203      	bcs.n	8015bca <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8015bc2:	4a2e      	ldr	r2, [pc, #184]	@ (8015c7c <xTaskIncrementTick+0x15c>)
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8015bc8:	e02e      	b.n	8015c28 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015bca:	68bb      	ldr	r3, [r7, #8]
 8015bcc:	3304      	adds	r3, #4
 8015bce:	4618      	mov	r0, r3
 8015bd0:	f7ff f854 	bl	8014c7c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8015bd4:	68bb      	ldr	r3, [r7, #8]
 8015bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015bd8:	2b00      	cmp	r3, #0
 8015bda:	d004      	beq.n	8015be6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015bdc:	68bb      	ldr	r3, [r7, #8]
 8015bde:	3318      	adds	r3, #24
 8015be0:	4618      	mov	r0, r3
 8015be2:	f7ff f84b 	bl	8014c7c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8015be6:	68bb      	ldr	r3, [r7, #8]
 8015be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015bea:	2201      	movs	r2, #1
 8015bec:	409a      	lsls	r2, r3
 8015bee:	4b24      	ldr	r3, [pc, #144]	@ (8015c80 <xTaskIncrementTick+0x160>)
 8015bf0:	681b      	ldr	r3, [r3, #0]
 8015bf2:	4313      	orrs	r3, r2
 8015bf4:	4a22      	ldr	r2, [pc, #136]	@ (8015c80 <xTaskIncrementTick+0x160>)
 8015bf6:	6013      	str	r3, [r2, #0]
 8015bf8:	68bb      	ldr	r3, [r7, #8]
 8015bfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015bfc:	4613      	mov	r3, r2
 8015bfe:	009b      	lsls	r3, r3, #2
 8015c00:	4413      	add	r3, r2
 8015c02:	009b      	lsls	r3, r3, #2
 8015c04:	4a1f      	ldr	r2, [pc, #124]	@ (8015c84 <xTaskIncrementTick+0x164>)
 8015c06:	441a      	add	r2, r3
 8015c08:	68bb      	ldr	r3, [r7, #8]
 8015c0a:	3304      	adds	r3, #4
 8015c0c:	4619      	mov	r1, r3
 8015c0e:	4610      	mov	r0, r2
 8015c10:	f7fe ffd7 	bl	8014bc2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015c14:	68bb      	ldr	r3, [r7, #8]
 8015c16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015c18:	4b1b      	ldr	r3, [pc, #108]	@ (8015c88 <xTaskIncrementTick+0x168>)
 8015c1a:	681b      	ldr	r3, [r3, #0]
 8015c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015c1e:	429a      	cmp	r2, r3
 8015c20:	d3b9      	bcc.n	8015b96 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8015c22:	2301      	movs	r3, #1
 8015c24:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015c26:	e7b6      	b.n	8015b96 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8015c28:	4b17      	ldr	r3, [pc, #92]	@ (8015c88 <xTaskIncrementTick+0x168>)
 8015c2a:	681b      	ldr	r3, [r3, #0]
 8015c2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015c2e:	4915      	ldr	r1, [pc, #84]	@ (8015c84 <xTaskIncrementTick+0x164>)
 8015c30:	4613      	mov	r3, r2
 8015c32:	009b      	lsls	r3, r3, #2
 8015c34:	4413      	add	r3, r2
 8015c36:	009b      	lsls	r3, r3, #2
 8015c38:	440b      	add	r3, r1
 8015c3a:	681b      	ldr	r3, [r3, #0]
 8015c3c:	2b01      	cmp	r3, #1
 8015c3e:	d901      	bls.n	8015c44 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8015c40:	2301      	movs	r3, #1
 8015c42:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8015c44:	4b11      	ldr	r3, [pc, #68]	@ (8015c8c <xTaskIncrementTick+0x16c>)
 8015c46:	681b      	ldr	r3, [r3, #0]
 8015c48:	2b00      	cmp	r3, #0
 8015c4a:	d007      	beq.n	8015c5c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8015c4c:	2301      	movs	r3, #1
 8015c4e:	617b      	str	r3, [r7, #20]
 8015c50:	e004      	b.n	8015c5c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8015c52:	4b0f      	ldr	r3, [pc, #60]	@ (8015c90 <xTaskIncrementTick+0x170>)
 8015c54:	681b      	ldr	r3, [r3, #0]
 8015c56:	3301      	adds	r3, #1
 8015c58:	4a0d      	ldr	r2, [pc, #52]	@ (8015c90 <xTaskIncrementTick+0x170>)
 8015c5a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8015c5c:	697b      	ldr	r3, [r7, #20]
}
 8015c5e:	4618      	mov	r0, r3
 8015c60:	3718      	adds	r7, #24
 8015c62:	46bd      	mov	sp, r7
 8015c64:	bd80      	pop	{r7, pc}
 8015c66:	bf00      	nop
 8015c68:	24002b04 	.word	0x24002b04
 8015c6c:	24002ae0 	.word	0x24002ae0
 8015c70:	24002a94 	.word	0x24002a94
 8015c74:	24002a98 	.word	0x24002a98
 8015c78:	24002af4 	.word	0x24002af4
 8015c7c:	24002afc 	.word	0x24002afc
 8015c80:	24002ae4 	.word	0x24002ae4
 8015c84:	240029e0 	.word	0x240029e0
 8015c88:	240029dc 	.word	0x240029dc
 8015c8c:	24002af0 	.word	0x24002af0
 8015c90:	24002aec 	.word	0x24002aec

08015c94 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8015c94:	b480      	push	{r7}
 8015c96:	b087      	sub	sp, #28
 8015c98:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8015c9a:	4b27      	ldr	r3, [pc, #156]	@ (8015d38 <vTaskSwitchContext+0xa4>)
 8015c9c:	681b      	ldr	r3, [r3, #0]
 8015c9e:	2b00      	cmp	r3, #0
 8015ca0:	d003      	beq.n	8015caa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8015ca2:	4b26      	ldr	r3, [pc, #152]	@ (8015d3c <vTaskSwitchContext+0xa8>)
 8015ca4:	2201      	movs	r2, #1
 8015ca6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8015ca8:	e040      	b.n	8015d2c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8015caa:	4b24      	ldr	r3, [pc, #144]	@ (8015d3c <vTaskSwitchContext+0xa8>)
 8015cac:	2200      	movs	r2, #0
 8015cae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015cb0:	4b23      	ldr	r3, [pc, #140]	@ (8015d40 <vTaskSwitchContext+0xac>)
 8015cb2:	681b      	ldr	r3, [r3, #0]
 8015cb4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8015cb6:	68fb      	ldr	r3, [r7, #12]
 8015cb8:	fab3 f383 	clz	r3, r3
 8015cbc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8015cbe:	7afb      	ldrb	r3, [r7, #11]
 8015cc0:	f1c3 031f 	rsb	r3, r3, #31
 8015cc4:	617b      	str	r3, [r7, #20]
 8015cc6:	491f      	ldr	r1, [pc, #124]	@ (8015d44 <vTaskSwitchContext+0xb0>)
 8015cc8:	697a      	ldr	r2, [r7, #20]
 8015cca:	4613      	mov	r3, r2
 8015ccc:	009b      	lsls	r3, r3, #2
 8015cce:	4413      	add	r3, r2
 8015cd0:	009b      	lsls	r3, r3, #2
 8015cd2:	440b      	add	r3, r1
 8015cd4:	681b      	ldr	r3, [r3, #0]
 8015cd6:	2b00      	cmp	r3, #0
 8015cd8:	d10b      	bne.n	8015cf2 <vTaskSwitchContext+0x5e>
	__asm volatile
 8015cda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015cde:	f383 8811 	msr	BASEPRI, r3
 8015ce2:	f3bf 8f6f 	isb	sy
 8015ce6:	f3bf 8f4f 	dsb	sy
 8015cea:	607b      	str	r3, [r7, #4]
}
 8015cec:	bf00      	nop
 8015cee:	bf00      	nop
 8015cf0:	e7fd      	b.n	8015cee <vTaskSwitchContext+0x5a>
 8015cf2:	697a      	ldr	r2, [r7, #20]
 8015cf4:	4613      	mov	r3, r2
 8015cf6:	009b      	lsls	r3, r3, #2
 8015cf8:	4413      	add	r3, r2
 8015cfa:	009b      	lsls	r3, r3, #2
 8015cfc:	4a11      	ldr	r2, [pc, #68]	@ (8015d44 <vTaskSwitchContext+0xb0>)
 8015cfe:	4413      	add	r3, r2
 8015d00:	613b      	str	r3, [r7, #16]
 8015d02:	693b      	ldr	r3, [r7, #16]
 8015d04:	685b      	ldr	r3, [r3, #4]
 8015d06:	685a      	ldr	r2, [r3, #4]
 8015d08:	693b      	ldr	r3, [r7, #16]
 8015d0a:	605a      	str	r2, [r3, #4]
 8015d0c:	693b      	ldr	r3, [r7, #16]
 8015d0e:	685a      	ldr	r2, [r3, #4]
 8015d10:	693b      	ldr	r3, [r7, #16]
 8015d12:	3308      	adds	r3, #8
 8015d14:	429a      	cmp	r2, r3
 8015d16:	d104      	bne.n	8015d22 <vTaskSwitchContext+0x8e>
 8015d18:	693b      	ldr	r3, [r7, #16]
 8015d1a:	685b      	ldr	r3, [r3, #4]
 8015d1c:	685a      	ldr	r2, [r3, #4]
 8015d1e:	693b      	ldr	r3, [r7, #16]
 8015d20:	605a      	str	r2, [r3, #4]
 8015d22:	693b      	ldr	r3, [r7, #16]
 8015d24:	685b      	ldr	r3, [r3, #4]
 8015d26:	68db      	ldr	r3, [r3, #12]
 8015d28:	4a07      	ldr	r2, [pc, #28]	@ (8015d48 <vTaskSwitchContext+0xb4>)
 8015d2a:	6013      	str	r3, [r2, #0]
}
 8015d2c:	bf00      	nop
 8015d2e:	371c      	adds	r7, #28
 8015d30:	46bd      	mov	sp, r7
 8015d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d36:	4770      	bx	lr
 8015d38:	24002b04 	.word	0x24002b04
 8015d3c:	24002af0 	.word	0x24002af0
 8015d40:	24002ae4 	.word	0x24002ae4
 8015d44:	240029e0 	.word	0x240029e0
 8015d48:	240029dc 	.word	0x240029dc

08015d4c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8015d4c:	b580      	push	{r7, lr}
 8015d4e:	b084      	sub	sp, #16
 8015d50:	af00      	add	r7, sp, #0
 8015d52:	6078      	str	r0, [r7, #4]
 8015d54:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	2b00      	cmp	r3, #0
 8015d5a:	d10b      	bne.n	8015d74 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8015d5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015d60:	f383 8811 	msr	BASEPRI, r3
 8015d64:	f3bf 8f6f 	isb	sy
 8015d68:	f3bf 8f4f 	dsb	sy
 8015d6c:	60fb      	str	r3, [r7, #12]
}
 8015d6e:	bf00      	nop
 8015d70:	bf00      	nop
 8015d72:	e7fd      	b.n	8015d70 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015d74:	4b07      	ldr	r3, [pc, #28]	@ (8015d94 <vTaskPlaceOnEventList+0x48>)
 8015d76:	681b      	ldr	r3, [r3, #0]
 8015d78:	3318      	adds	r3, #24
 8015d7a:	4619      	mov	r1, r3
 8015d7c:	6878      	ldr	r0, [r7, #4]
 8015d7e:	f7fe ff44 	bl	8014c0a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8015d82:	2101      	movs	r1, #1
 8015d84:	6838      	ldr	r0, [r7, #0]
 8015d86:	f000 fb87 	bl	8016498 <prvAddCurrentTaskToDelayedList>
}
 8015d8a:	bf00      	nop
 8015d8c:	3710      	adds	r7, #16
 8015d8e:	46bd      	mov	sp, r7
 8015d90:	bd80      	pop	{r7, pc}
 8015d92:	bf00      	nop
 8015d94:	240029dc 	.word	0x240029dc

08015d98 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8015d98:	b580      	push	{r7, lr}
 8015d9a:	b086      	sub	sp, #24
 8015d9c:	af00      	add	r7, sp, #0
 8015d9e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015da0:	687b      	ldr	r3, [r7, #4]
 8015da2:	68db      	ldr	r3, [r3, #12]
 8015da4:	68db      	ldr	r3, [r3, #12]
 8015da6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8015da8:	693b      	ldr	r3, [r7, #16]
 8015daa:	2b00      	cmp	r3, #0
 8015dac:	d10b      	bne.n	8015dc6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8015dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015db2:	f383 8811 	msr	BASEPRI, r3
 8015db6:	f3bf 8f6f 	isb	sy
 8015dba:	f3bf 8f4f 	dsb	sy
 8015dbe:	60fb      	str	r3, [r7, #12]
}
 8015dc0:	bf00      	nop
 8015dc2:	bf00      	nop
 8015dc4:	e7fd      	b.n	8015dc2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8015dc6:	693b      	ldr	r3, [r7, #16]
 8015dc8:	3318      	adds	r3, #24
 8015dca:	4618      	mov	r0, r3
 8015dcc:	f7fe ff56 	bl	8014c7c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015dd0:	4b1d      	ldr	r3, [pc, #116]	@ (8015e48 <xTaskRemoveFromEventList+0xb0>)
 8015dd2:	681b      	ldr	r3, [r3, #0]
 8015dd4:	2b00      	cmp	r3, #0
 8015dd6:	d11c      	bne.n	8015e12 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8015dd8:	693b      	ldr	r3, [r7, #16]
 8015dda:	3304      	adds	r3, #4
 8015ddc:	4618      	mov	r0, r3
 8015dde:	f7fe ff4d 	bl	8014c7c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8015de2:	693b      	ldr	r3, [r7, #16]
 8015de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015de6:	2201      	movs	r2, #1
 8015de8:	409a      	lsls	r2, r3
 8015dea:	4b18      	ldr	r3, [pc, #96]	@ (8015e4c <xTaskRemoveFromEventList+0xb4>)
 8015dec:	681b      	ldr	r3, [r3, #0]
 8015dee:	4313      	orrs	r3, r2
 8015df0:	4a16      	ldr	r2, [pc, #88]	@ (8015e4c <xTaskRemoveFromEventList+0xb4>)
 8015df2:	6013      	str	r3, [r2, #0]
 8015df4:	693b      	ldr	r3, [r7, #16]
 8015df6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015df8:	4613      	mov	r3, r2
 8015dfa:	009b      	lsls	r3, r3, #2
 8015dfc:	4413      	add	r3, r2
 8015dfe:	009b      	lsls	r3, r3, #2
 8015e00:	4a13      	ldr	r2, [pc, #76]	@ (8015e50 <xTaskRemoveFromEventList+0xb8>)
 8015e02:	441a      	add	r2, r3
 8015e04:	693b      	ldr	r3, [r7, #16]
 8015e06:	3304      	adds	r3, #4
 8015e08:	4619      	mov	r1, r3
 8015e0a:	4610      	mov	r0, r2
 8015e0c:	f7fe fed9 	bl	8014bc2 <vListInsertEnd>
 8015e10:	e005      	b.n	8015e1e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8015e12:	693b      	ldr	r3, [r7, #16]
 8015e14:	3318      	adds	r3, #24
 8015e16:	4619      	mov	r1, r3
 8015e18:	480e      	ldr	r0, [pc, #56]	@ (8015e54 <xTaskRemoveFromEventList+0xbc>)
 8015e1a:	f7fe fed2 	bl	8014bc2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8015e1e:	693b      	ldr	r3, [r7, #16]
 8015e20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015e22:	4b0d      	ldr	r3, [pc, #52]	@ (8015e58 <xTaskRemoveFromEventList+0xc0>)
 8015e24:	681b      	ldr	r3, [r3, #0]
 8015e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015e28:	429a      	cmp	r2, r3
 8015e2a:	d905      	bls.n	8015e38 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8015e2c:	2301      	movs	r3, #1
 8015e2e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8015e30:	4b0a      	ldr	r3, [pc, #40]	@ (8015e5c <xTaskRemoveFromEventList+0xc4>)
 8015e32:	2201      	movs	r2, #1
 8015e34:	601a      	str	r2, [r3, #0]
 8015e36:	e001      	b.n	8015e3c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8015e38:	2300      	movs	r3, #0
 8015e3a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8015e3c:	697b      	ldr	r3, [r7, #20]
}
 8015e3e:	4618      	mov	r0, r3
 8015e40:	3718      	adds	r7, #24
 8015e42:	46bd      	mov	sp, r7
 8015e44:	bd80      	pop	{r7, pc}
 8015e46:	bf00      	nop
 8015e48:	24002b04 	.word	0x24002b04
 8015e4c:	24002ae4 	.word	0x24002ae4
 8015e50:	240029e0 	.word	0x240029e0
 8015e54:	24002a9c 	.word	0x24002a9c
 8015e58:	240029dc 	.word	0x240029dc
 8015e5c:	24002af0 	.word	0x24002af0

08015e60 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8015e60:	b480      	push	{r7}
 8015e62:	b083      	sub	sp, #12
 8015e64:	af00      	add	r7, sp, #0
 8015e66:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8015e68:	4b06      	ldr	r3, [pc, #24]	@ (8015e84 <vTaskInternalSetTimeOutState+0x24>)
 8015e6a:	681a      	ldr	r2, [r3, #0]
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8015e70:	4b05      	ldr	r3, [pc, #20]	@ (8015e88 <vTaskInternalSetTimeOutState+0x28>)
 8015e72:	681a      	ldr	r2, [r3, #0]
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	605a      	str	r2, [r3, #4]
}
 8015e78:	bf00      	nop
 8015e7a:	370c      	adds	r7, #12
 8015e7c:	46bd      	mov	sp, r7
 8015e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e82:	4770      	bx	lr
 8015e84:	24002af4 	.word	0x24002af4
 8015e88:	24002ae0 	.word	0x24002ae0

08015e8c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8015e8c:	b580      	push	{r7, lr}
 8015e8e:	b088      	sub	sp, #32
 8015e90:	af00      	add	r7, sp, #0
 8015e92:	6078      	str	r0, [r7, #4]
 8015e94:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	2b00      	cmp	r3, #0
 8015e9a:	d10b      	bne.n	8015eb4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8015e9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015ea0:	f383 8811 	msr	BASEPRI, r3
 8015ea4:	f3bf 8f6f 	isb	sy
 8015ea8:	f3bf 8f4f 	dsb	sy
 8015eac:	613b      	str	r3, [r7, #16]
}
 8015eae:	bf00      	nop
 8015eb0:	bf00      	nop
 8015eb2:	e7fd      	b.n	8015eb0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8015eb4:	683b      	ldr	r3, [r7, #0]
 8015eb6:	2b00      	cmp	r3, #0
 8015eb8:	d10b      	bne.n	8015ed2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8015eba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015ebe:	f383 8811 	msr	BASEPRI, r3
 8015ec2:	f3bf 8f6f 	isb	sy
 8015ec6:	f3bf 8f4f 	dsb	sy
 8015eca:	60fb      	str	r3, [r7, #12]
}
 8015ecc:	bf00      	nop
 8015ece:	bf00      	nop
 8015ed0:	e7fd      	b.n	8015ece <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8015ed2:	f000 fc79 	bl	80167c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8015ed6:	4b1d      	ldr	r3, [pc, #116]	@ (8015f4c <xTaskCheckForTimeOut+0xc0>)
 8015ed8:	681b      	ldr	r3, [r3, #0]
 8015eda:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	685b      	ldr	r3, [r3, #4]
 8015ee0:	69ba      	ldr	r2, [r7, #24]
 8015ee2:	1ad3      	subs	r3, r2, r3
 8015ee4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8015ee6:	683b      	ldr	r3, [r7, #0]
 8015ee8:	681b      	ldr	r3, [r3, #0]
 8015eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015eee:	d102      	bne.n	8015ef6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8015ef0:	2300      	movs	r3, #0
 8015ef2:	61fb      	str	r3, [r7, #28]
 8015ef4:	e023      	b.n	8015f3e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8015ef6:	687b      	ldr	r3, [r7, #4]
 8015ef8:	681a      	ldr	r2, [r3, #0]
 8015efa:	4b15      	ldr	r3, [pc, #84]	@ (8015f50 <xTaskCheckForTimeOut+0xc4>)
 8015efc:	681b      	ldr	r3, [r3, #0]
 8015efe:	429a      	cmp	r2, r3
 8015f00:	d007      	beq.n	8015f12 <xTaskCheckForTimeOut+0x86>
 8015f02:	687b      	ldr	r3, [r7, #4]
 8015f04:	685b      	ldr	r3, [r3, #4]
 8015f06:	69ba      	ldr	r2, [r7, #24]
 8015f08:	429a      	cmp	r2, r3
 8015f0a:	d302      	bcc.n	8015f12 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8015f0c:	2301      	movs	r3, #1
 8015f0e:	61fb      	str	r3, [r7, #28]
 8015f10:	e015      	b.n	8015f3e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8015f12:	683b      	ldr	r3, [r7, #0]
 8015f14:	681b      	ldr	r3, [r3, #0]
 8015f16:	697a      	ldr	r2, [r7, #20]
 8015f18:	429a      	cmp	r2, r3
 8015f1a:	d20b      	bcs.n	8015f34 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8015f1c:	683b      	ldr	r3, [r7, #0]
 8015f1e:	681a      	ldr	r2, [r3, #0]
 8015f20:	697b      	ldr	r3, [r7, #20]
 8015f22:	1ad2      	subs	r2, r2, r3
 8015f24:	683b      	ldr	r3, [r7, #0]
 8015f26:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8015f28:	6878      	ldr	r0, [r7, #4]
 8015f2a:	f7ff ff99 	bl	8015e60 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8015f2e:	2300      	movs	r3, #0
 8015f30:	61fb      	str	r3, [r7, #28]
 8015f32:	e004      	b.n	8015f3e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8015f34:	683b      	ldr	r3, [r7, #0]
 8015f36:	2200      	movs	r2, #0
 8015f38:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8015f3a:	2301      	movs	r3, #1
 8015f3c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8015f3e:	f000 fc75 	bl	801682c <vPortExitCritical>

	return xReturn;
 8015f42:	69fb      	ldr	r3, [r7, #28]
}
 8015f44:	4618      	mov	r0, r3
 8015f46:	3720      	adds	r7, #32
 8015f48:	46bd      	mov	sp, r7
 8015f4a:	bd80      	pop	{r7, pc}
 8015f4c:	24002ae0 	.word	0x24002ae0
 8015f50:	24002af4 	.word	0x24002af4

08015f54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8015f54:	b480      	push	{r7}
 8015f56:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8015f58:	4b03      	ldr	r3, [pc, #12]	@ (8015f68 <vTaskMissedYield+0x14>)
 8015f5a:	2201      	movs	r2, #1
 8015f5c:	601a      	str	r2, [r3, #0]
}
 8015f5e:	bf00      	nop
 8015f60:	46bd      	mov	sp, r7
 8015f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f66:	4770      	bx	lr
 8015f68:	24002af0 	.word	0x24002af0

08015f6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8015f6c:	b580      	push	{r7, lr}
 8015f6e:	b082      	sub	sp, #8
 8015f70:	af00      	add	r7, sp, #0
 8015f72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8015f74:	f000 f852 	bl	801601c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8015f78:	4b06      	ldr	r3, [pc, #24]	@ (8015f94 <prvIdleTask+0x28>)
 8015f7a:	681b      	ldr	r3, [r3, #0]
 8015f7c:	2b01      	cmp	r3, #1
 8015f7e:	d9f9      	bls.n	8015f74 <prvIdleTask+0x8>
			{
				taskYIELD();
 8015f80:	4b05      	ldr	r3, [pc, #20]	@ (8015f98 <prvIdleTask+0x2c>)
 8015f82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015f86:	601a      	str	r2, [r3, #0]
 8015f88:	f3bf 8f4f 	dsb	sy
 8015f8c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8015f90:	e7f0      	b.n	8015f74 <prvIdleTask+0x8>
 8015f92:	bf00      	nop
 8015f94:	240029e0 	.word	0x240029e0
 8015f98:	e000ed04 	.word	0xe000ed04

08015f9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8015f9c:	b580      	push	{r7, lr}
 8015f9e:	b082      	sub	sp, #8
 8015fa0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015fa2:	2300      	movs	r3, #0
 8015fa4:	607b      	str	r3, [r7, #4]
 8015fa6:	e00c      	b.n	8015fc2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8015fa8:	687a      	ldr	r2, [r7, #4]
 8015faa:	4613      	mov	r3, r2
 8015fac:	009b      	lsls	r3, r3, #2
 8015fae:	4413      	add	r3, r2
 8015fb0:	009b      	lsls	r3, r3, #2
 8015fb2:	4a12      	ldr	r2, [pc, #72]	@ (8015ffc <prvInitialiseTaskLists+0x60>)
 8015fb4:	4413      	add	r3, r2
 8015fb6:	4618      	mov	r0, r3
 8015fb8:	f7fe fdd6 	bl	8014b68 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	3301      	adds	r3, #1
 8015fc0:	607b      	str	r3, [r7, #4]
 8015fc2:	687b      	ldr	r3, [r7, #4]
 8015fc4:	2b06      	cmp	r3, #6
 8015fc6:	d9ef      	bls.n	8015fa8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8015fc8:	480d      	ldr	r0, [pc, #52]	@ (8016000 <prvInitialiseTaskLists+0x64>)
 8015fca:	f7fe fdcd 	bl	8014b68 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8015fce:	480d      	ldr	r0, [pc, #52]	@ (8016004 <prvInitialiseTaskLists+0x68>)
 8015fd0:	f7fe fdca 	bl	8014b68 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8015fd4:	480c      	ldr	r0, [pc, #48]	@ (8016008 <prvInitialiseTaskLists+0x6c>)
 8015fd6:	f7fe fdc7 	bl	8014b68 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8015fda:	480c      	ldr	r0, [pc, #48]	@ (801600c <prvInitialiseTaskLists+0x70>)
 8015fdc:	f7fe fdc4 	bl	8014b68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8015fe0:	480b      	ldr	r0, [pc, #44]	@ (8016010 <prvInitialiseTaskLists+0x74>)
 8015fe2:	f7fe fdc1 	bl	8014b68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8015fe6:	4b0b      	ldr	r3, [pc, #44]	@ (8016014 <prvInitialiseTaskLists+0x78>)
 8015fe8:	4a05      	ldr	r2, [pc, #20]	@ (8016000 <prvInitialiseTaskLists+0x64>)
 8015fea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8015fec:	4b0a      	ldr	r3, [pc, #40]	@ (8016018 <prvInitialiseTaskLists+0x7c>)
 8015fee:	4a05      	ldr	r2, [pc, #20]	@ (8016004 <prvInitialiseTaskLists+0x68>)
 8015ff0:	601a      	str	r2, [r3, #0]
}
 8015ff2:	bf00      	nop
 8015ff4:	3708      	adds	r7, #8
 8015ff6:	46bd      	mov	sp, r7
 8015ff8:	bd80      	pop	{r7, pc}
 8015ffa:	bf00      	nop
 8015ffc:	240029e0 	.word	0x240029e0
 8016000:	24002a6c 	.word	0x24002a6c
 8016004:	24002a80 	.word	0x24002a80
 8016008:	24002a9c 	.word	0x24002a9c
 801600c:	24002ab0 	.word	0x24002ab0
 8016010:	24002ac8 	.word	0x24002ac8
 8016014:	24002a94 	.word	0x24002a94
 8016018:	24002a98 	.word	0x24002a98

0801601c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801601c:	b580      	push	{r7, lr}
 801601e:	b082      	sub	sp, #8
 8016020:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016022:	e019      	b.n	8016058 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8016024:	f000 fbd0 	bl	80167c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016028:	4b10      	ldr	r3, [pc, #64]	@ (801606c <prvCheckTasksWaitingTermination+0x50>)
 801602a:	68db      	ldr	r3, [r3, #12]
 801602c:	68db      	ldr	r3, [r3, #12]
 801602e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016030:	687b      	ldr	r3, [r7, #4]
 8016032:	3304      	adds	r3, #4
 8016034:	4618      	mov	r0, r3
 8016036:	f7fe fe21 	bl	8014c7c <uxListRemove>
				--uxCurrentNumberOfTasks;
 801603a:	4b0d      	ldr	r3, [pc, #52]	@ (8016070 <prvCheckTasksWaitingTermination+0x54>)
 801603c:	681b      	ldr	r3, [r3, #0]
 801603e:	3b01      	subs	r3, #1
 8016040:	4a0b      	ldr	r2, [pc, #44]	@ (8016070 <prvCheckTasksWaitingTermination+0x54>)
 8016042:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8016044:	4b0b      	ldr	r3, [pc, #44]	@ (8016074 <prvCheckTasksWaitingTermination+0x58>)
 8016046:	681b      	ldr	r3, [r3, #0]
 8016048:	3b01      	subs	r3, #1
 801604a:	4a0a      	ldr	r2, [pc, #40]	@ (8016074 <prvCheckTasksWaitingTermination+0x58>)
 801604c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801604e:	f000 fbed 	bl	801682c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8016052:	6878      	ldr	r0, [r7, #4]
 8016054:	f000 f810 	bl	8016078 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016058:	4b06      	ldr	r3, [pc, #24]	@ (8016074 <prvCheckTasksWaitingTermination+0x58>)
 801605a:	681b      	ldr	r3, [r3, #0]
 801605c:	2b00      	cmp	r3, #0
 801605e:	d1e1      	bne.n	8016024 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8016060:	bf00      	nop
 8016062:	bf00      	nop
 8016064:	3708      	adds	r7, #8
 8016066:	46bd      	mov	sp, r7
 8016068:	bd80      	pop	{r7, pc}
 801606a:	bf00      	nop
 801606c:	24002ab0 	.word	0x24002ab0
 8016070:	24002adc 	.word	0x24002adc
 8016074:	24002ac4 	.word	0x24002ac4

08016078 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8016078:	b580      	push	{r7, lr}
 801607a:	b084      	sub	sp, #16
 801607c:	af00      	add	r7, sp, #0
 801607e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8016080:	687b      	ldr	r3, [r7, #4]
 8016082:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8016086:	2b00      	cmp	r3, #0
 8016088:	d108      	bne.n	801609c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801608a:	687b      	ldr	r3, [r7, #4]
 801608c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801608e:	4618      	mov	r0, r3
 8016090:	f000 fd8a 	bl	8016ba8 <vPortFree>
				vPortFree( pxTCB );
 8016094:	6878      	ldr	r0, [r7, #4]
 8016096:	f000 fd87 	bl	8016ba8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801609a:	e019      	b.n	80160d0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80160a2:	2b01      	cmp	r3, #1
 80160a4:	d103      	bne.n	80160ae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80160a6:	6878      	ldr	r0, [r7, #4]
 80160a8:	f000 fd7e 	bl	8016ba8 <vPortFree>
	}
 80160ac:	e010      	b.n	80160d0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80160ae:	687b      	ldr	r3, [r7, #4]
 80160b0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80160b4:	2b02      	cmp	r3, #2
 80160b6:	d00b      	beq.n	80160d0 <prvDeleteTCB+0x58>
	__asm volatile
 80160b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80160bc:	f383 8811 	msr	BASEPRI, r3
 80160c0:	f3bf 8f6f 	isb	sy
 80160c4:	f3bf 8f4f 	dsb	sy
 80160c8:	60fb      	str	r3, [r7, #12]
}
 80160ca:	bf00      	nop
 80160cc:	bf00      	nop
 80160ce:	e7fd      	b.n	80160cc <prvDeleteTCB+0x54>
	}
 80160d0:	bf00      	nop
 80160d2:	3710      	adds	r7, #16
 80160d4:	46bd      	mov	sp, r7
 80160d6:	bd80      	pop	{r7, pc}

080160d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80160d8:	b480      	push	{r7}
 80160da:	b083      	sub	sp, #12
 80160dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80160de:	4b0c      	ldr	r3, [pc, #48]	@ (8016110 <prvResetNextTaskUnblockTime+0x38>)
 80160e0:	681b      	ldr	r3, [r3, #0]
 80160e2:	681b      	ldr	r3, [r3, #0]
 80160e4:	2b00      	cmp	r3, #0
 80160e6:	d104      	bne.n	80160f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80160e8:	4b0a      	ldr	r3, [pc, #40]	@ (8016114 <prvResetNextTaskUnblockTime+0x3c>)
 80160ea:	f04f 32ff 	mov.w	r2, #4294967295
 80160ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80160f0:	e008      	b.n	8016104 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80160f2:	4b07      	ldr	r3, [pc, #28]	@ (8016110 <prvResetNextTaskUnblockTime+0x38>)
 80160f4:	681b      	ldr	r3, [r3, #0]
 80160f6:	68db      	ldr	r3, [r3, #12]
 80160f8:	68db      	ldr	r3, [r3, #12]
 80160fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	685b      	ldr	r3, [r3, #4]
 8016100:	4a04      	ldr	r2, [pc, #16]	@ (8016114 <prvResetNextTaskUnblockTime+0x3c>)
 8016102:	6013      	str	r3, [r2, #0]
}
 8016104:	bf00      	nop
 8016106:	370c      	adds	r7, #12
 8016108:	46bd      	mov	sp, r7
 801610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801610e:	4770      	bx	lr
 8016110:	24002a94 	.word	0x24002a94
 8016114:	24002afc 	.word	0x24002afc

08016118 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8016118:	b480      	push	{r7}
 801611a:	b083      	sub	sp, #12
 801611c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801611e:	4b0b      	ldr	r3, [pc, #44]	@ (801614c <xTaskGetSchedulerState+0x34>)
 8016120:	681b      	ldr	r3, [r3, #0]
 8016122:	2b00      	cmp	r3, #0
 8016124:	d102      	bne.n	801612c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8016126:	2301      	movs	r3, #1
 8016128:	607b      	str	r3, [r7, #4]
 801612a:	e008      	b.n	801613e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801612c:	4b08      	ldr	r3, [pc, #32]	@ (8016150 <xTaskGetSchedulerState+0x38>)
 801612e:	681b      	ldr	r3, [r3, #0]
 8016130:	2b00      	cmp	r3, #0
 8016132:	d102      	bne.n	801613a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8016134:	2302      	movs	r3, #2
 8016136:	607b      	str	r3, [r7, #4]
 8016138:	e001      	b.n	801613e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801613a:	2300      	movs	r3, #0
 801613c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801613e:	687b      	ldr	r3, [r7, #4]
	}
 8016140:	4618      	mov	r0, r3
 8016142:	370c      	adds	r7, #12
 8016144:	46bd      	mov	sp, r7
 8016146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801614a:	4770      	bx	lr
 801614c:	24002ae8 	.word	0x24002ae8
 8016150:	24002b04 	.word	0x24002b04

08016154 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8016154:	b580      	push	{r7, lr}
 8016156:	b084      	sub	sp, #16
 8016158:	af00      	add	r7, sp, #0
 801615a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801615c:	687b      	ldr	r3, [r7, #4]
 801615e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8016160:	2300      	movs	r3, #0
 8016162:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8016164:	687b      	ldr	r3, [r7, #4]
 8016166:	2b00      	cmp	r3, #0
 8016168:	d05e      	beq.n	8016228 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801616a:	68bb      	ldr	r3, [r7, #8]
 801616c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801616e:	4b31      	ldr	r3, [pc, #196]	@ (8016234 <xTaskPriorityInherit+0xe0>)
 8016170:	681b      	ldr	r3, [r3, #0]
 8016172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016174:	429a      	cmp	r2, r3
 8016176:	d24e      	bcs.n	8016216 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8016178:	68bb      	ldr	r3, [r7, #8]
 801617a:	699b      	ldr	r3, [r3, #24]
 801617c:	2b00      	cmp	r3, #0
 801617e:	db06      	blt.n	801618e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016180:	4b2c      	ldr	r3, [pc, #176]	@ (8016234 <xTaskPriorityInherit+0xe0>)
 8016182:	681b      	ldr	r3, [r3, #0]
 8016184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016186:	f1c3 0207 	rsb	r2, r3, #7
 801618a:	68bb      	ldr	r3, [r7, #8]
 801618c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801618e:	68bb      	ldr	r3, [r7, #8]
 8016190:	6959      	ldr	r1, [r3, #20]
 8016192:	68bb      	ldr	r3, [r7, #8]
 8016194:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016196:	4613      	mov	r3, r2
 8016198:	009b      	lsls	r3, r3, #2
 801619a:	4413      	add	r3, r2
 801619c:	009b      	lsls	r3, r3, #2
 801619e:	4a26      	ldr	r2, [pc, #152]	@ (8016238 <xTaskPriorityInherit+0xe4>)
 80161a0:	4413      	add	r3, r2
 80161a2:	4299      	cmp	r1, r3
 80161a4:	d12f      	bne.n	8016206 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80161a6:	68bb      	ldr	r3, [r7, #8]
 80161a8:	3304      	adds	r3, #4
 80161aa:	4618      	mov	r0, r3
 80161ac:	f7fe fd66 	bl	8014c7c <uxListRemove>
 80161b0:	4603      	mov	r3, r0
 80161b2:	2b00      	cmp	r3, #0
 80161b4:	d10a      	bne.n	80161cc <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80161b6:	68bb      	ldr	r3, [r7, #8]
 80161b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80161ba:	2201      	movs	r2, #1
 80161bc:	fa02 f303 	lsl.w	r3, r2, r3
 80161c0:	43da      	mvns	r2, r3
 80161c2:	4b1e      	ldr	r3, [pc, #120]	@ (801623c <xTaskPriorityInherit+0xe8>)
 80161c4:	681b      	ldr	r3, [r3, #0]
 80161c6:	4013      	ands	r3, r2
 80161c8:	4a1c      	ldr	r2, [pc, #112]	@ (801623c <xTaskPriorityInherit+0xe8>)
 80161ca:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80161cc:	4b19      	ldr	r3, [pc, #100]	@ (8016234 <xTaskPriorityInherit+0xe0>)
 80161ce:	681b      	ldr	r3, [r3, #0]
 80161d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80161d2:	68bb      	ldr	r3, [r7, #8]
 80161d4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80161d6:	68bb      	ldr	r3, [r7, #8]
 80161d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80161da:	2201      	movs	r2, #1
 80161dc:	409a      	lsls	r2, r3
 80161de:	4b17      	ldr	r3, [pc, #92]	@ (801623c <xTaskPriorityInherit+0xe8>)
 80161e0:	681b      	ldr	r3, [r3, #0]
 80161e2:	4313      	orrs	r3, r2
 80161e4:	4a15      	ldr	r2, [pc, #84]	@ (801623c <xTaskPriorityInherit+0xe8>)
 80161e6:	6013      	str	r3, [r2, #0]
 80161e8:	68bb      	ldr	r3, [r7, #8]
 80161ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80161ec:	4613      	mov	r3, r2
 80161ee:	009b      	lsls	r3, r3, #2
 80161f0:	4413      	add	r3, r2
 80161f2:	009b      	lsls	r3, r3, #2
 80161f4:	4a10      	ldr	r2, [pc, #64]	@ (8016238 <xTaskPriorityInherit+0xe4>)
 80161f6:	441a      	add	r2, r3
 80161f8:	68bb      	ldr	r3, [r7, #8]
 80161fa:	3304      	adds	r3, #4
 80161fc:	4619      	mov	r1, r3
 80161fe:	4610      	mov	r0, r2
 8016200:	f7fe fcdf 	bl	8014bc2 <vListInsertEnd>
 8016204:	e004      	b.n	8016210 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8016206:	4b0b      	ldr	r3, [pc, #44]	@ (8016234 <xTaskPriorityInherit+0xe0>)
 8016208:	681b      	ldr	r3, [r3, #0]
 801620a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801620c:	68bb      	ldr	r3, [r7, #8]
 801620e:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8016210:	2301      	movs	r3, #1
 8016212:	60fb      	str	r3, [r7, #12]
 8016214:	e008      	b.n	8016228 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8016216:	68bb      	ldr	r3, [r7, #8]
 8016218:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801621a:	4b06      	ldr	r3, [pc, #24]	@ (8016234 <xTaskPriorityInherit+0xe0>)
 801621c:	681b      	ldr	r3, [r3, #0]
 801621e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016220:	429a      	cmp	r2, r3
 8016222:	d201      	bcs.n	8016228 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8016224:	2301      	movs	r3, #1
 8016226:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8016228:	68fb      	ldr	r3, [r7, #12]
	}
 801622a:	4618      	mov	r0, r3
 801622c:	3710      	adds	r7, #16
 801622e:	46bd      	mov	sp, r7
 8016230:	bd80      	pop	{r7, pc}
 8016232:	bf00      	nop
 8016234:	240029dc 	.word	0x240029dc
 8016238:	240029e0 	.word	0x240029e0
 801623c:	24002ae4 	.word	0x24002ae4

08016240 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8016240:	b580      	push	{r7, lr}
 8016242:	b086      	sub	sp, #24
 8016244:	af00      	add	r7, sp, #0
 8016246:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8016248:	687b      	ldr	r3, [r7, #4]
 801624a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801624c:	2300      	movs	r3, #0
 801624e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8016250:	687b      	ldr	r3, [r7, #4]
 8016252:	2b00      	cmp	r3, #0
 8016254:	d070      	beq.n	8016338 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8016256:	4b3b      	ldr	r3, [pc, #236]	@ (8016344 <xTaskPriorityDisinherit+0x104>)
 8016258:	681b      	ldr	r3, [r3, #0]
 801625a:	693a      	ldr	r2, [r7, #16]
 801625c:	429a      	cmp	r2, r3
 801625e:	d00b      	beq.n	8016278 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8016260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016264:	f383 8811 	msr	BASEPRI, r3
 8016268:	f3bf 8f6f 	isb	sy
 801626c:	f3bf 8f4f 	dsb	sy
 8016270:	60fb      	str	r3, [r7, #12]
}
 8016272:	bf00      	nop
 8016274:	bf00      	nop
 8016276:	e7fd      	b.n	8016274 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8016278:	693b      	ldr	r3, [r7, #16]
 801627a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801627c:	2b00      	cmp	r3, #0
 801627e:	d10b      	bne.n	8016298 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8016280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016284:	f383 8811 	msr	BASEPRI, r3
 8016288:	f3bf 8f6f 	isb	sy
 801628c:	f3bf 8f4f 	dsb	sy
 8016290:	60bb      	str	r3, [r7, #8]
}
 8016292:	bf00      	nop
 8016294:	bf00      	nop
 8016296:	e7fd      	b.n	8016294 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8016298:	693b      	ldr	r3, [r7, #16]
 801629a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801629c:	1e5a      	subs	r2, r3, #1
 801629e:	693b      	ldr	r3, [r7, #16]
 80162a0:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80162a2:	693b      	ldr	r3, [r7, #16]
 80162a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80162a6:	693b      	ldr	r3, [r7, #16]
 80162a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80162aa:	429a      	cmp	r2, r3
 80162ac:	d044      	beq.n	8016338 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80162ae:	693b      	ldr	r3, [r7, #16]
 80162b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80162b2:	2b00      	cmp	r3, #0
 80162b4:	d140      	bne.n	8016338 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80162b6:	693b      	ldr	r3, [r7, #16]
 80162b8:	3304      	adds	r3, #4
 80162ba:	4618      	mov	r0, r3
 80162bc:	f7fe fcde 	bl	8014c7c <uxListRemove>
 80162c0:	4603      	mov	r3, r0
 80162c2:	2b00      	cmp	r3, #0
 80162c4:	d115      	bne.n	80162f2 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80162c6:	693b      	ldr	r3, [r7, #16]
 80162c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80162ca:	491f      	ldr	r1, [pc, #124]	@ (8016348 <xTaskPriorityDisinherit+0x108>)
 80162cc:	4613      	mov	r3, r2
 80162ce:	009b      	lsls	r3, r3, #2
 80162d0:	4413      	add	r3, r2
 80162d2:	009b      	lsls	r3, r3, #2
 80162d4:	440b      	add	r3, r1
 80162d6:	681b      	ldr	r3, [r3, #0]
 80162d8:	2b00      	cmp	r3, #0
 80162da:	d10a      	bne.n	80162f2 <xTaskPriorityDisinherit+0xb2>
 80162dc:	693b      	ldr	r3, [r7, #16]
 80162de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80162e0:	2201      	movs	r2, #1
 80162e2:	fa02 f303 	lsl.w	r3, r2, r3
 80162e6:	43da      	mvns	r2, r3
 80162e8:	4b18      	ldr	r3, [pc, #96]	@ (801634c <xTaskPriorityDisinherit+0x10c>)
 80162ea:	681b      	ldr	r3, [r3, #0]
 80162ec:	4013      	ands	r3, r2
 80162ee:	4a17      	ldr	r2, [pc, #92]	@ (801634c <xTaskPriorityDisinherit+0x10c>)
 80162f0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80162f2:	693b      	ldr	r3, [r7, #16]
 80162f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80162f6:	693b      	ldr	r3, [r7, #16]
 80162f8:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80162fa:	693b      	ldr	r3, [r7, #16]
 80162fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80162fe:	f1c3 0207 	rsb	r2, r3, #7
 8016302:	693b      	ldr	r3, [r7, #16]
 8016304:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8016306:	693b      	ldr	r3, [r7, #16]
 8016308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801630a:	2201      	movs	r2, #1
 801630c:	409a      	lsls	r2, r3
 801630e:	4b0f      	ldr	r3, [pc, #60]	@ (801634c <xTaskPriorityDisinherit+0x10c>)
 8016310:	681b      	ldr	r3, [r3, #0]
 8016312:	4313      	orrs	r3, r2
 8016314:	4a0d      	ldr	r2, [pc, #52]	@ (801634c <xTaskPriorityDisinherit+0x10c>)
 8016316:	6013      	str	r3, [r2, #0]
 8016318:	693b      	ldr	r3, [r7, #16]
 801631a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801631c:	4613      	mov	r3, r2
 801631e:	009b      	lsls	r3, r3, #2
 8016320:	4413      	add	r3, r2
 8016322:	009b      	lsls	r3, r3, #2
 8016324:	4a08      	ldr	r2, [pc, #32]	@ (8016348 <xTaskPriorityDisinherit+0x108>)
 8016326:	441a      	add	r2, r3
 8016328:	693b      	ldr	r3, [r7, #16]
 801632a:	3304      	adds	r3, #4
 801632c:	4619      	mov	r1, r3
 801632e:	4610      	mov	r0, r2
 8016330:	f7fe fc47 	bl	8014bc2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8016334:	2301      	movs	r3, #1
 8016336:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8016338:	697b      	ldr	r3, [r7, #20]
	}
 801633a:	4618      	mov	r0, r3
 801633c:	3718      	adds	r7, #24
 801633e:	46bd      	mov	sp, r7
 8016340:	bd80      	pop	{r7, pc}
 8016342:	bf00      	nop
 8016344:	240029dc 	.word	0x240029dc
 8016348:	240029e0 	.word	0x240029e0
 801634c:	24002ae4 	.word	0x24002ae4

08016350 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8016350:	b580      	push	{r7, lr}
 8016352:	b088      	sub	sp, #32
 8016354:	af00      	add	r7, sp, #0
 8016356:	6078      	str	r0, [r7, #4]
 8016358:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801635a:	687b      	ldr	r3, [r7, #4]
 801635c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801635e:	2301      	movs	r3, #1
 8016360:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8016362:	687b      	ldr	r3, [r7, #4]
 8016364:	2b00      	cmp	r3, #0
 8016366:	d079      	beq.n	801645c <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8016368:	69bb      	ldr	r3, [r7, #24]
 801636a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801636c:	2b00      	cmp	r3, #0
 801636e:	d10b      	bne.n	8016388 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8016370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016374:	f383 8811 	msr	BASEPRI, r3
 8016378:	f3bf 8f6f 	isb	sy
 801637c:	f3bf 8f4f 	dsb	sy
 8016380:	60fb      	str	r3, [r7, #12]
}
 8016382:	bf00      	nop
 8016384:	bf00      	nop
 8016386:	e7fd      	b.n	8016384 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8016388:	69bb      	ldr	r3, [r7, #24]
 801638a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801638c:	683a      	ldr	r2, [r7, #0]
 801638e:	429a      	cmp	r2, r3
 8016390:	d902      	bls.n	8016398 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8016392:	683b      	ldr	r3, [r7, #0]
 8016394:	61fb      	str	r3, [r7, #28]
 8016396:	e002      	b.n	801639e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8016398:	69bb      	ldr	r3, [r7, #24]
 801639a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801639c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801639e:	69bb      	ldr	r3, [r7, #24]
 80163a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80163a2:	69fa      	ldr	r2, [r7, #28]
 80163a4:	429a      	cmp	r2, r3
 80163a6:	d059      	beq.n	801645c <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80163a8:	69bb      	ldr	r3, [r7, #24]
 80163aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80163ac:	697a      	ldr	r2, [r7, #20]
 80163ae:	429a      	cmp	r2, r3
 80163b0:	d154      	bne.n	801645c <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80163b2:	4b2c      	ldr	r3, [pc, #176]	@ (8016464 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80163b4:	681b      	ldr	r3, [r3, #0]
 80163b6:	69ba      	ldr	r2, [r7, #24]
 80163b8:	429a      	cmp	r2, r3
 80163ba:	d10b      	bne.n	80163d4 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80163bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80163c0:	f383 8811 	msr	BASEPRI, r3
 80163c4:	f3bf 8f6f 	isb	sy
 80163c8:	f3bf 8f4f 	dsb	sy
 80163cc:	60bb      	str	r3, [r7, #8]
}
 80163ce:	bf00      	nop
 80163d0:	bf00      	nop
 80163d2:	e7fd      	b.n	80163d0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80163d4:	69bb      	ldr	r3, [r7, #24]
 80163d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80163d8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80163da:	69bb      	ldr	r3, [r7, #24]
 80163dc:	69fa      	ldr	r2, [r7, #28]
 80163de:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80163e0:	69bb      	ldr	r3, [r7, #24]
 80163e2:	699b      	ldr	r3, [r3, #24]
 80163e4:	2b00      	cmp	r3, #0
 80163e6:	db04      	blt.n	80163f2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80163e8:	69fb      	ldr	r3, [r7, #28]
 80163ea:	f1c3 0207 	rsb	r2, r3, #7
 80163ee:	69bb      	ldr	r3, [r7, #24]
 80163f0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80163f2:	69bb      	ldr	r3, [r7, #24]
 80163f4:	6959      	ldr	r1, [r3, #20]
 80163f6:	693a      	ldr	r2, [r7, #16]
 80163f8:	4613      	mov	r3, r2
 80163fa:	009b      	lsls	r3, r3, #2
 80163fc:	4413      	add	r3, r2
 80163fe:	009b      	lsls	r3, r3, #2
 8016400:	4a19      	ldr	r2, [pc, #100]	@ (8016468 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8016402:	4413      	add	r3, r2
 8016404:	4299      	cmp	r1, r3
 8016406:	d129      	bne.n	801645c <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016408:	69bb      	ldr	r3, [r7, #24]
 801640a:	3304      	adds	r3, #4
 801640c:	4618      	mov	r0, r3
 801640e:	f7fe fc35 	bl	8014c7c <uxListRemove>
 8016412:	4603      	mov	r3, r0
 8016414:	2b00      	cmp	r3, #0
 8016416:	d10a      	bne.n	801642e <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8016418:	69bb      	ldr	r3, [r7, #24]
 801641a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801641c:	2201      	movs	r2, #1
 801641e:	fa02 f303 	lsl.w	r3, r2, r3
 8016422:	43da      	mvns	r2, r3
 8016424:	4b11      	ldr	r3, [pc, #68]	@ (801646c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8016426:	681b      	ldr	r3, [r3, #0]
 8016428:	4013      	ands	r3, r2
 801642a:	4a10      	ldr	r2, [pc, #64]	@ (801646c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 801642c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801642e:	69bb      	ldr	r3, [r7, #24]
 8016430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016432:	2201      	movs	r2, #1
 8016434:	409a      	lsls	r2, r3
 8016436:	4b0d      	ldr	r3, [pc, #52]	@ (801646c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8016438:	681b      	ldr	r3, [r3, #0]
 801643a:	4313      	orrs	r3, r2
 801643c:	4a0b      	ldr	r2, [pc, #44]	@ (801646c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 801643e:	6013      	str	r3, [r2, #0]
 8016440:	69bb      	ldr	r3, [r7, #24]
 8016442:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016444:	4613      	mov	r3, r2
 8016446:	009b      	lsls	r3, r3, #2
 8016448:	4413      	add	r3, r2
 801644a:	009b      	lsls	r3, r3, #2
 801644c:	4a06      	ldr	r2, [pc, #24]	@ (8016468 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801644e:	441a      	add	r2, r3
 8016450:	69bb      	ldr	r3, [r7, #24]
 8016452:	3304      	adds	r3, #4
 8016454:	4619      	mov	r1, r3
 8016456:	4610      	mov	r0, r2
 8016458:	f7fe fbb3 	bl	8014bc2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801645c:	bf00      	nop
 801645e:	3720      	adds	r7, #32
 8016460:	46bd      	mov	sp, r7
 8016462:	bd80      	pop	{r7, pc}
 8016464:	240029dc 	.word	0x240029dc
 8016468:	240029e0 	.word	0x240029e0
 801646c:	24002ae4 	.word	0x24002ae4

08016470 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8016470:	b480      	push	{r7}
 8016472:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8016474:	4b07      	ldr	r3, [pc, #28]	@ (8016494 <pvTaskIncrementMutexHeldCount+0x24>)
 8016476:	681b      	ldr	r3, [r3, #0]
 8016478:	2b00      	cmp	r3, #0
 801647a:	d004      	beq.n	8016486 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801647c:	4b05      	ldr	r3, [pc, #20]	@ (8016494 <pvTaskIncrementMutexHeldCount+0x24>)
 801647e:	681b      	ldr	r3, [r3, #0]
 8016480:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8016482:	3201      	adds	r2, #1
 8016484:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8016486:	4b03      	ldr	r3, [pc, #12]	@ (8016494 <pvTaskIncrementMutexHeldCount+0x24>)
 8016488:	681b      	ldr	r3, [r3, #0]
	}
 801648a:	4618      	mov	r0, r3
 801648c:	46bd      	mov	sp, r7
 801648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016492:	4770      	bx	lr
 8016494:	240029dc 	.word	0x240029dc

08016498 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8016498:	b580      	push	{r7, lr}
 801649a:	b084      	sub	sp, #16
 801649c:	af00      	add	r7, sp, #0
 801649e:	6078      	str	r0, [r7, #4]
 80164a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80164a2:	4b29      	ldr	r3, [pc, #164]	@ (8016548 <prvAddCurrentTaskToDelayedList+0xb0>)
 80164a4:	681b      	ldr	r3, [r3, #0]
 80164a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80164a8:	4b28      	ldr	r3, [pc, #160]	@ (801654c <prvAddCurrentTaskToDelayedList+0xb4>)
 80164aa:	681b      	ldr	r3, [r3, #0]
 80164ac:	3304      	adds	r3, #4
 80164ae:	4618      	mov	r0, r3
 80164b0:	f7fe fbe4 	bl	8014c7c <uxListRemove>
 80164b4:	4603      	mov	r3, r0
 80164b6:	2b00      	cmp	r3, #0
 80164b8:	d10b      	bne.n	80164d2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80164ba:	4b24      	ldr	r3, [pc, #144]	@ (801654c <prvAddCurrentTaskToDelayedList+0xb4>)
 80164bc:	681b      	ldr	r3, [r3, #0]
 80164be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80164c0:	2201      	movs	r2, #1
 80164c2:	fa02 f303 	lsl.w	r3, r2, r3
 80164c6:	43da      	mvns	r2, r3
 80164c8:	4b21      	ldr	r3, [pc, #132]	@ (8016550 <prvAddCurrentTaskToDelayedList+0xb8>)
 80164ca:	681b      	ldr	r3, [r3, #0]
 80164cc:	4013      	ands	r3, r2
 80164ce:	4a20      	ldr	r2, [pc, #128]	@ (8016550 <prvAddCurrentTaskToDelayedList+0xb8>)
 80164d0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80164d2:	687b      	ldr	r3, [r7, #4]
 80164d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80164d8:	d10a      	bne.n	80164f0 <prvAddCurrentTaskToDelayedList+0x58>
 80164da:	683b      	ldr	r3, [r7, #0]
 80164dc:	2b00      	cmp	r3, #0
 80164de:	d007      	beq.n	80164f0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80164e0:	4b1a      	ldr	r3, [pc, #104]	@ (801654c <prvAddCurrentTaskToDelayedList+0xb4>)
 80164e2:	681b      	ldr	r3, [r3, #0]
 80164e4:	3304      	adds	r3, #4
 80164e6:	4619      	mov	r1, r3
 80164e8:	481a      	ldr	r0, [pc, #104]	@ (8016554 <prvAddCurrentTaskToDelayedList+0xbc>)
 80164ea:	f7fe fb6a 	bl	8014bc2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80164ee:	e026      	b.n	801653e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80164f0:	68fa      	ldr	r2, [r7, #12]
 80164f2:	687b      	ldr	r3, [r7, #4]
 80164f4:	4413      	add	r3, r2
 80164f6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80164f8:	4b14      	ldr	r3, [pc, #80]	@ (801654c <prvAddCurrentTaskToDelayedList+0xb4>)
 80164fa:	681b      	ldr	r3, [r3, #0]
 80164fc:	68ba      	ldr	r2, [r7, #8]
 80164fe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8016500:	68ba      	ldr	r2, [r7, #8]
 8016502:	68fb      	ldr	r3, [r7, #12]
 8016504:	429a      	cmp	r2, r3
 8016506:	d209      	bcs.n	801651c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016508:	4b13      	ldr	r3, [pc, #76]	@ (8016558 <prvAddCurrentTaskToDelayedList+0xc0>)
 801650a:	681a      	ldr	r2, [r3, #0]
 801650c:	4b0f      	ldr	r3, [pc, #60]	@ (801654c <prvAddCurrentTaskToDelayedList+0xb4>)
 801650e:	681b      	ldr	r3, [r3, #0]
 8016510:	3304      	adds	r3, #4
 8016512:	4619      	mov	r1, r3
 8016514:	4610      	mov	r0, r2
 8016516:	f7fe fb78 	bl	8014c0a <vListInsert>
}
 801651a:	e010      	b.n	801653e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801651c:	4b0f      	ldr	r3, [pc, #60]	@ (801655c <prvAddCurrentTaskToDelayedList+0xc4>)
 801651e:	681a      	ldr	r2, [r3, #0]
 8016520:	4b0a      	ldr	r3, [pc, #40]	@ (801654c <prvAddCurrentTaskToDelayedList+0xb4>)
 8016522:	681b      	ldr	r3, [r3, #0]
 8016524:	3304      	adds	r3, #4
 8016526:	4619      	mov	r1, r3
 8016528:	4610      	mov	r0, r2
 801652a:	f7fe fb6e 	bl	8014c0a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801652e:	4b0c      	ldr	r3, [pc, #48]	@ (8016560 <prvAddCurrentTaskToDelayedList+0xc8>)
 8016530:	681b      	ldr	r3, [r3, #0]
 8016532:	68ba      	ldr	r2, [r7, #8]
 8016534:	429a      	cmp	r2, r3
 8016536:	d202      	bcs.n	801653e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8016538:	4a09      	ldr	r2, [pc, #36]	@ (8016560 <prvAddCurrentTaskToDelayedList+0xc8>)
 801653a:	68bb      	ldr	r3, [r7, #8]
 801653c:	6013      	str	r3, [r2, #0]
}
 801653e:	bf00      	nop
 8016540:	3710      	adds	r7, #16
 8016542:	46bd      	mov	sp, r7
 8016544:	bd80      	pop	{r7, pc}
 8016546:	bf00      	nop
 8016548:	24002ae0 	.word	0x24002ae0
 801654c:	240029dc 	.word	0x240029dc
 8016550:	24002ae4 	.word	0x24002ae4
 8016554:	24002ac8 	.word	0x24002ac8
 8016558:	24002a98 	.word	0x24002a98
 801655c:	24002a94 	.word	0x24002a94
 8016560:	24002afc 	.word	0x24002afc

08016564 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8016564:	b480      	push	{r7}
 8016566:	b085      	sub	sp, #20
 8016568:	af00      	add	r7, sp, #0
 801656a:	60f8      	str	r0, [r7, #12]
 801656c:	60b9      	str	r1, [r7, #8]
 801656e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8016570:	68fb      	ldr	r3, [r7, #12]
 8016572:	3b04      	subs	r3, #4
 8016574:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8016576:	68fb      	ldr	r3, [r7, #12]
 8016578:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 801657c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801657e:	68fb      	ldr	r3, [r7, #12]
 8016580:	3b04      	subs	r3, #4
 8016582:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8016584:	68bb      	ldr	r3, [r7, #8]
 8016586:	f023 0201 	bic.w	r2, r3, #1
 801658a:	68fb      	ldr	r3, [r7, #12]
 801658c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801658e:	68fb      	ldr	r3, [r7, #12]
 8016590:	3b04      	subs	r3, #4
 8016592:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8016594:	4a0c      	ldr	r2, [pc, #48]	@ (80165c8 <pxPortInitialiseStack+0x64>)
 8016596:	68fb      	ldr	r3, [r7, #12]
 8016598:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801659a:	68fb      	ldr	r3, [r7, #12]
 801659c:	3b14      	subs	r3, #20
 801659e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80165a0:	687a      	ldr	r2, [r7, #4]
 80165a2:	68fb      	ldr	r3, [r7, #12]
 80165a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80165a6:	68fb      	ldr	r3, [r7, #12]
 80165a8:	3b04      	subs	r3, #4
 80165aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80165ac:	68fb      	ldr	r3, [r7, #12]
 80165ae:	f06f 0202 	mvn.w	r2, #2
 80165b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80165b4:	68fb      	ldr	r3, [r7, #12]
 80165b6:	3b20      	subs	r3, #32
 80165b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80165ba:	68fb      	ldr	r3, [r7, #12]
}
 80165bc:	4618      	mov	r0, r3
 80165be:	3714      	adds	r7, #20
 80165c0:	46bd      	mov	sp, r7
 80165c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165c6:	4770      	bx	lr
 80165c8:	080165cd 	.word	0x080165cd

080165cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80165cc:	b480      	push	{r7}
 80165ce:	b085      	sub	sp, #20
 80165d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80165d2:	2300      	movs	r3, #0
 80165d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80165d6:	4b13      	ldr	r3, [pc, #76]	@ (8016624 <prvTaskExitError+0x58>)
 80165d8:	681b      	ldr	r3, [r3, #0]
 80165da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80165de:	d00b      	beq.n	80165f8 <prvTaskExitError+0x2c>
	__asm volatile
 80165e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80165e4:	f383 8811 	msr	BASEPRI, r3
 80165e8:	f3bf 8f6f 	isb	sy
 80165ec:	f3bf 8f4f 	dsb	sy
 80165f0:	60fb      	str	r3, [r7, #12]
}
 80165f2:	bf00      	nop
 80165f4:	bf00      	nop
 80165f6:	e7fd      	b.n	80165f4 <prvTaskExitError+0x28>
	__asm volatile
 80165f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80165fc:	f383 8811 	msr	BASEPRI, r3
 8016600:	f3bf 8f6f 	isb	sy
 8016604:	f3bf 8f4f 	dsb	sy
 8016608:	60bb      	str	r3, [r7, #8]
}
 801660a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801660c:	bf00      	nop
 801660e:	687b      	ldr	r3, [r7, #4]
 8016610:	2b00      	cmp	r3, #0
 8016612:	d0fc      	beq.n	801660e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8016614:	bf00      	nop
 8016616:	bf00      	nop
 8016618:	3714      	adds	r7, #20
 801661a:	46bd      	mov	sp, r7
 801661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016620:	4770      	bx	lr
 8016622:	bf00      	nop
 8016624:	240000c4 	.word	0x240000c4
	...

08016630 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8016630:	4b07      	ldr	r3, [pc, #28]	@ (8016650 <pxCurrentTCBConst2>)
 8016632:	6819      	ldr	r1, [r3, #0]
 8016634:	6808      	ldr	r0, [r1, #0]
 8016636:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801663a:	f380 8809 	msr	PSP, r0
 801663e:	f3bf 8f6f 	isb	sy
 8016642:	f04f 0000 	mov.w	r0, #0
 8016646:	f380 8811 	msr	BASEPRI, r0
 801664a:	4770      	bx	lr
 801664c:	f3af 8000 	nop.w

08016650 <pxCurrentTCBConst2>:
 8016650:	240029dc 	.word	0x240029dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8016654:	bf00      	nop
 8016656:	bf00      	nop

08016658 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8016658:	4808      	ldr	r0, [pc, #32]	@ (801667c <prvPortStartFirstTask+0x24>)
 801665a:	6800      	ldr	r0, [r0, #0]
 801665c:	6800      	ldr	r0, [r0, #0]
 801665e:	f380 8808 	msr	MSP, r0
 8016662:	f04f 0000 	mov.w	r0, #0
 8016666:	f380 8814 	msr	CONTROL, r0
 801666a:	b662      	cpsie	i
 801666c:	b661      	cpsie	f
 801666e:	f3bf 8f4f 	dsb	sy
 8016672:	f3bf 8f6f 	isb	sy
 8016676:	df00      	svc	0
 8016678:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801667a:	bf00      	nop
 801667c:	e000ed08 	.word	0xe000ed08

08016680 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8016680:	b580      	push	{r7, lr}
 8016682:	b086      	sub	sp, #24
 8016684:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8016686:	4b47      	ldr	r3, [pc, #284]	@ (80167a4 <xPortStartScheduler+0x124>)
 8016688:	681b      	ldr	r3, [r3, #0]
 801668a:	4a47      	ldr	r2, [pc, #284]	@ (80167a8 <xPortStartScheduler+0x128>)
 801668c:	4293      	cmp	r3, r2
 801668e:	d10b      	bne.n	80166a8 <xPortStartScheduler+0x28>
	__asm volatile
 8016690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016694:	f383 8811 	msr	BASEPRI, r3
 8016698:	f3bf 8f6f 	isb	sy
 801669c:	f3bf 8f4f 	dsb	sy
 80166a0:	613b      	str	r3, [r7, #16]
}
 80166a2:	bf00      	nop
 80166a4:	bf00      	nop
 80166a6:	e7fd      	b.n	80166a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80166a8:	4b3e      	ldr	r3, [pc, #248]	@ (80167a4 <xPortStartScheduler+0x124>)
 80166aa:	681b      	ldr	r3, [r3, #0]
 80166ac:	4a3f      	ldr	r2, [pc, #252]	@ (80167ac <xPortStartScheduler+0x12c>)
 80166ae:	4293      	cmp	r3, r2
 80166b0:	d10b      	bne.n	80166ca <xPortStartScheduler+0x4a>
	__asm volatile
 80166b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80166b6:	f383 8811 	msr	BASEPRI, r3
 80166ba:	f3bf 8f6f 	isb	sy
 80166be:	f3bf 8f4f 	dsb	sy
 80166c2:	60fb      	str	r3, [r7, #12]
}
 80166c4:	bf00      	nop
 80166c6:	bf00      	nop
 80166c8:	e7fd      	b.n	80166c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80166ca:	4b39      	ldr	r3, [pc, #228]	@ (80167b0 <xPortStartScheduler+0x130>)
 80166cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80166ce:	697b      	ldr	r3, [r7, #20]
 80166d0:	781b      	ldrb	r3, [r3, #0]
 80166d2:	b2db      	uxtb	r3, r3
 80166d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80166d6:	697b      	ldr	r3, [r7, #20]
 80166d8:	22ff      	movs	r2, #255	@ 0xff
 80166da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80166dc:	697b      	ldr	r3, [r7, #20]
 80166de:	781b      	ldrb	r3, [r3, #0]
 80166e0:	b2db      	uxtb	r3, r3
 80166e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80166e4:	78fb      	ldrb	r3, [r7, #3]
 80166e6:	b2db      	uxtb	r3, r3
 80166e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80166ec:	b2da      	uxtb	r2, r3
 80166ee:	4b31      	ldr	r3, [pc, #196]	@ (80167b4 <xPortStartScheduler+0x134>)
 80166f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80166f2:	4b31      	ldr	r3, [pc, #196]	@ (80167b8 <xPortStartScheduler+0x138>)
 80166f4:	2207      	movs	r2, #7
 80166f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80166f8:	e009      	b.n	801670e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80166fa:	4b2f      	ldr	r3, [pc, #188]	@ (80167b8 <xPortStartScheduler+0x138>)
 80166fc:	681b      	ldr	r3, [r3, #0]
 80166fe:	3b01      	subs	r3, #1
 8016700:	4a2d      	ldr	r2, [pc, #180]	@ (80167b8 <xPortStartScheduler+0x138>)
 8016702:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8016704:	78fb      	ldrb	r3, [r7, #3]
 8016706:	b2db      	uxtb	r3, r3
 8016708:	005b      	lsls	r3, r3, #1
 801670a:	b2db      	uxtb	r3, r3
 801670c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801670e:	78fb      	ldrb	r3, [r7, #3]
 8016710:	b2db      	uxtb	r3, r3
 8016712:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016716:	2b80      	cmp	r3, #128	@ 0x80
 8016718:	d0ef      	beq.n	80166fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801671a:	4b27      	ldr	r3, [pc, #156]	@ (80167b8 <xPortStartScheduler+0x138>)
 801671c:	681b      	ldr	r3, [r3, #0]
 801671e:	f1c3 0307 	rsb	r3, r3, #7
 8016722:	2b04      	cmp	r3, #4
 8016724:	d00b      	beq.n	801673e <xPortStartScheduler+0xbe>
	__asm volatile
 8016726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801672a:	f383 8811 	msr	BASEPRI, r3
 801672e:	f3bf 8f6f 	isb	sy
 8016732:	f3bf 8f4f 	dsb	sy
 8016736:	60bb      	str	r3, [r7, #8]
}
 8016738:	bf00      	nop
 801673a:	bf00      	nop
 801673c:	e7fd      	b.n	801673a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801673e:	4b1e      	ldr	r3, [pc, #120]	@ (80167b8 <xPortStartScheduler+0x138>)
 8016740:	681b      	ldr	r3, [r3, #0]
 8016742:	021b      	lsls	r3, r3, #8
 8016744:	4a1c      	ldr	r2, [pc, #112]	@ (80167b8 <xPortStartScheduler+0x138>)
 8016746:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8016748:	4b1b      	ldr	r3, [pc, #108]	@ (80167b8 <xPortStartScheduler+0x138>)
 801674a:	681b      	ldr	r3, [r3, #0]
 801674c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8016750:	4a19      	ldr	r2, [pc, #100]	@ (80167b8 <xPortStartScheduler+0x138>)
 8016752:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8016754:	687b      	ldr	r3, [r7, #4]
 8016756:	b2da      	uxtb	r2, r3
 8016758:	697b      	ldr	r3, [r7, #20]
 801675a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801675c:	4b17      	ldr	r3, [pc, #92]	@ (80167bc <xPortStartScheduler+0x13c>)
 801675e:	681b      	ldr	r3, [r3, #0]
 8016760:	4a16      	ldr	r2, [pc, #88]	@ (80167bc <xPortStartScheduler+0x13c>)
 8016762:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8016766:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8016768:	4b14      	ldr	r3, [pc, #80]	@ (80167bc <xPortStartScheduler+0x13c>)
 801676a:	681b      	ldr	r3, [r3, #0]
 801676c:	4a13      	ldr	r2, [pc, #76]	@ (80167bc <xPortStartScheduler+0x13c>)
 801676e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8016772:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8016774:	f000 f8da 	bl	801692c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8016778:	4b11      	ldr	r3, [pc, #68]	@ (80167c0 <xPortStartScheduler+0x140>)
 801677a:	2200      	movs	r2, #0
 801677c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801677e:	f000 f8f9 	bl	8016974 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8016782:	4b10      	ldr	r3, [pc, #64]	@ (80167c4 <xPortStartScheduler+0x144>)
 8016784:	681b      	ldr	r3, [r3, #0]
 8016786:	4a0f      	ldr	r2, [pc, #60]	@ (80167c4 <xPortStartScheduler+0x144>)
 8016788:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801678c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801678e:	f7ff ff63 	bl	8016658 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8016792:	f7ff fa7f 	bl	8015c94 <vTaskSwitchContext>
	prvTaskExitError();
 8016796:	f7ff ff19 	bl	80165cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801679a:	2300      	movs	r3, #0
}
 801679c:	4618      	mov	r0, r3
 801679e:	3718      	adds	r7, #24
 80167a0:	46bd      	mov	sp, r7
 80167a2:	bd80      	pop	{r7, pc}
 80167a4:	e000ed00 	.word	0xe000ed00
 80167a8:	410fc271 	.word	0x410fc271
 80167ac:	410fc270 	.word	0x410fc270
 80167b0:	e000e400 	.word	0xe000e400
 80167b4:	24002b08 	.word	0x24002b08
 80167b8:	24002b0c 	.word	0x24002b0c
 80167bc:	e000ed20 	.word	0xe000ed20
 80167c0:	240000c4 	.word	0x240000c4
 80167c4:	e000ef34 	.word	0xe000ef34

080167c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80167c8:	b480      	push	{r7}
 80167ca:	b083      	sub	sp, #12
 80167cc:	af00      	add	r7, sp, #0
	__asm volatile
 80167ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80167d2:	f383 8811 	msr	BASEPRI, r3
 80167d6:	f3bf 8f6f 	isb	sy
 80167da:	f3bf 8f4f 	dsb	sy
 80167de:	607b      	str	r3, [r7, #4]
}
 80167e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80167e2:	4b10      	ldr	r3, [pc, #64]	@ (8016824 <vPortEnterCritical+0x5c>)
 80167e4:	681b      	ldr	r3, [r3, #0]
 80167e6:	3301      	adds	r3, #1
 80167e8:	4a0e      	ldr	r2, [pc, #56]	@ (8016824 <vPortEnterCritical+0x5c>)
 80167ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80167ec:	4b0d      	ldr	r3, [pc, #52]	@ (8016824 <vPortEnterCritical+0x5c>)
 80167ee:	681b      	ldr	r3, [r3, #0]
 80167f0:	2b01      	cmp	r3, #1
 80167f2:	d110      	bne.n	8016816 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80167f4:	4b0c      	ldr	r3, [pc, #48]	@ (8016828 <vPortEnterCritical+0x60>)
 80167f6:	681b      	ldr	r3, [r3, #0]
 80167f8:	b2db      	uxtb	r3, r3
 80167fa:	2b00      	cmp	r3, #0
 80167fc:	d00b      	beq.n	8016816 <vPortEnterCritical+0x4e>
	__asm volatile
 80167fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016802:	f383 8811 	msr	BASEPRI, r3
 8016806:	f3bf 8f6f 	isb	sy
 801680a:	f3bf 8f4f 	dsb	sy
 801680e:	603b      	str	r3, [r7, #0]
}
 8016810:	bf00      	nop
 8016812:	bf00      	nop
 8016814:	e7fd      	b.n	8016812 <vPortEnterCritical+0x4a>
	}
}
 8016816:	bf00      	nop
 8016818:	370c      	adds	r7, #12
 801681a:	46bd      	mov	sp, r7
 801681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016820:	4770      	bx	lr
 8016822:	bf00      	nop
 8016824:	240000c4 	.word	0x240000c4
 8016828:	e000ed04 	.word	0xe000ed04

0801682c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801682c:	b480      	push	{r7}
 801682e:	b083      	sub	sp, #12
 8016830:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8016832:	4b12      	ldr	r3, [pc, #72]	@ (801687c <vPortExitCritical+0x50>)
 8016834:	681b      	ldr	r3, [r3, #0]
 8016836:	2b00      	cmp	r3, #0
 8016838:	d10b      	bne.n	8016852 <vPortExitCritical+0x26>
	__asm volatile
 801683a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801683e:	f383 8811 	msr	BASEPRI, r3
 8016842:	f3bf 8f6f 	isb	sy
 8016846:	f3bf 8f4f 	dsb	sy
 801684a:	607b      	str	r3, [r7, #4]
}
 801684c:	bf00      	nop
 801684e:	bf00      	nop
 8016850:	e7fd      	b.n	801684e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8016852:	4b0a      	ldr	r3, [pc, #40]	@ (801687c <vPortExitCritical+0x50>)
 8016854:	681b      	ldr	r3, [r3, #0]
 8016856:	3b01      	subs	r3, #1
 8016858:	4a08      	ldr	r2, [pc, #32]	@ (801687c <vPortExitCritical+0x50>)
 801685a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801685c:	4b07      	ldr	r3, [pc, #28]	@ (801687c <vPortExitCritical+0x50>)
 801685e:	681b      	ldr	r3, [r3, #0]
 8016860:	2b00      	cmp	r3, #0
 8016862:	d105      	bne.n	8016870 <vPortExitCritical+0x44>
 8016864:	2300      	movs	r3, #0
 8016866:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016868:	683b      	ldr	r3, [r7, #0]
 801686a:	f383 8811 	msr	BASEPRI, r3
}
 801686e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8016870:	bf00      	nop
 8016872:	370c      	adds	r7, #12
 8016874:	46bd      	mov	sp, r7
 8016876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801687a:	4770      	bx	lr
 801687c:	240000c4 	.word	0x240000c4

08016880 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8016880:	f3ef 8009 	mrs	r0, PSP
 8016884:	f3bf 8f6f 	isb	sy
 8016888:	4b15      	ldr	r3, [pc, #84]	@ (80168e0 <pxCurrentTCBConst>)
 801688a:	681a      	ldr	r2, [r3, #0]
 801688c:	f01e 0f10 	tst.w	lr, #16
 8016890:	bf08      	it	eq
 8016892:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016896:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801689a:	6010      	str	r0, [r2, #0]
 801689c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80168a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80168a4:	f380 8811 	msr	BASEPRI, r0
 80168a8:	f3bf 8f4f 	dsb	sy
 80168ac:	f3bf 8f6f 	isb	sy
 80168b0:	f7ff f9f0 	bl	8015c94 <vTaskSwitchContext>
 80168b4:	f04f 0000 	mov.w	r0, #0
 80168b8:	f380 8811 	msr	BASEPRI, r0
 80168bc:	bc09      	pop	{r0, r3}
 80168be:	6819      	ldr	r1, [r3, #0]
 80168c0:	6808      	ldr	r0, [r1, #0]
 80168c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168c6:	f01e 0f10 	tst.w	lr, #16
 80168ca:	bf08      	it	eq
 80168cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80168d0:	f380 8809 	msr	PSP, r0
 80168d4:	f3bf 8f6f 	isb	sy
 80168d8:	4770      	bx	lr
 80168da:	bf00      	nop
 80168dc:	f3af 8000 	nop.w

080168e0 <pxCurrentTCBConst>:
 80168e0:	240029dc 	.word	0x240029dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80168e4:	bf00      	nop
 80168e6:	bf00      	nop

080168e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80168e8:	b580      	push	{r7, lr}
 80168ea:	b082      	sub	sp, #8
 80168ec:	af00      	add	r7, sp, #0
	__asm volatile
 80168ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80168f2:	f383 8811 	msr	BASEPRI, r3
 80168f6:	f3bf 8f6f 	isb	sy
 80168fa:	f3bf 8f4f 	dsb	sy
 80168fe:	607b      	str	r3, [r7, #4]
}
 8016900:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8016902:	f7ff f90d 	bl	8015b20 <xTaskIncrementTick>
 8016906:	4603      	mov	r3, r0
 8016908:	2b00      	cmp	r3, #0
 801690a:	d003      	beq.n	8016914 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801690c:	4b06      	ldr	r3, [pc, #24]	@ (8016928 <SysTick_Handler+0x40>)
 801690e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016912:	601a      	str	r2, [r3, #0]
 8016914:	2300      	movs	r3, #0
 8016916:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016918:	683b      	ldr	r3, [r7, #0]
 801691a:	f383 8811 	msr	BASEPRI, r3
}
 801691e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8016920:	bf00      	nop
 8016922:	3708      	adds	r7, #8
 8016924:	46bd      	mov	sp, r7
 8016926:	bd80      	pop	{r7, pc}
 8016928:	e000ed04 	.word	0xe000ed04

0801692c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801692c:	b480      	push	{r7}
 801692e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8016930:	4b0b      	ldr	r3, [pc, #44]	@ (8016960 <vPortSetupTimerInterrupt+0x34>)
 8016932:	2200      	movs	r2, #0
 8016934:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8016936:	4b0b      	ldr	r3, [pc, #44]	@ (8016964 <vPortSetupTimerInterrupt+0x38>)
 8016938:	2200      	movs	r2, #0
 801693a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801693c:	4b0a      	ldr	r3, [pc, #40]	@ (8016968 <vPortSetupTimerInterrupt+0x3c>)
 801693e:	681b      	ldr	r3, [r3, #0]
 8016940:	4a0a      	ldr	r2, [pc, #40]	@ (801696c <vPortSetupTimerInterrupt+0x40>)
 8016942:	fba2 2303 	umull	r2, r3, r2, r3
 8016946:	099b      	lsrs	r3, r3, #6
 8016948:	4a09      	ldr	r2, [pc, #36]	@ (8016970 <vPortSetupTimerInterrupt+0x44>)
 801694a:	3b01      	subs	r3, #1
 801694c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801694e:	4b04      	ldr	r3, [pc, #16]	@ (8016960 <vPortSetupTimerInterrupt+0x34>)
 8016950:	2207      	movs	r2, #7
 8016952:	601a      	str	r2, [r3, #0]
}
 8016954:	bf00      	nop
 8016956:	46bd      	mov	sp, r7
 8016958:	f85d 7b04 	ldr.w	r7, [sp], #4
 801695c:	4770      	bx	lr
 801695e:	bf00      	nop
 8016960:	e000e010 	.word	0xe000e010
 8016964:	e000e018 	.word	0xe000e018
 8016968:	24000000 	.word	0x24000000
 801696c:	10624dd3 	.word	0x10624dd3
 8016970:	e000e014 	.word	0xe000e014

08016974 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8016974:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8016984 <vPortEnableVFP+0x10>
 8016978:	6801      	ldr	r1, [r0, #0]
 801697a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801697e:	6001      	str	r1, [r0, #0]
 8016980:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8016982:	bf00      	nop
 8016984:	e000ed88 	.word	0xe000ed88

08016988 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8016988:	b480      	push	{r7}
 801698a:	b085      	sub	sp, #20
 801698c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801698e:	f3ef 8305 	mrs	r3, IPSR
 8016992:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8016994:	68fb      	ldr	r3, [r7, #12]
 8016996:	2b0f      	cmp	r3, #15
 8016998:	d915      	bls.n	80169c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801699a:	4a18      	ldr	r2, [pc, #96]	@ (80169fc <vPortValidateInterruptPriority+0x74>)
 801699c:	68fb      	ldr	r3, [r7, #12]
 801699e:	4413      	add	r3, r2
 80169a0:	781b      	ldrb	r3, [r3, #0]
 80169a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80169a4:	4b16      	ldr	r3, [pc, #88]	@ (8016a00 <vPortValidateInterruptPriority+0x78>)
 80169a6:	781b      	ldrb	r3, [r3, #0]
 80169a8:	7afa      	ldrb	r2, [r7, #11]
 80169aa:	429a      	cmp	r2, r3
 80169ac:	d20b      	bcs.n	80169c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80169ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80169b2:	f383 8811 	msr	BASEPRI, r3
 80169b6:	f3bf 8f6f 	isb	sy
 80169ba:	f3bf 8f4f 	dsb	sy
 80169be:	607b      	str	r3, [r7, #4]
}
 80169c0:	bf00      	nop
 80169c2:	bf00      	nop
 80169c4:	e7fd      	b.n	80169c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80169c6:	4b0f      	ldr	r3, [pc, #60]	@ (8016a04 <vPortValidateInterruptPriority+0x7c>)
 80169c8:	681b      	ldr	r3, [r3, #0]
 80169ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80169ce:	4b0e      	ldr	r3, [pc, #56]	@ (8016a08 <vPortValidateInterruptPriority+0x80>)
 80169d0:	681b      	ldr	r3, [r3, #0]
 80169d2:	429a      	cmp	r2, r3
 80169d4:	d90b      	bls.n	80169ee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80169d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80169da:	f383 8811 	msr	BASEPRI, r3
 80169de:	f3bf 8f6f 	isb	sy
 80169e2:	f3bf 8f4f 	dsb	sy
 80169e6:	603b      	str	r3, [r7, #0]
}
 80169e8:	bf00      	nop
 80169ea:	bf00      	nop
 80169ec:	e7fd      	b.n	80169ea <vPortValidateInterruptPriority+0x62>
	}
 80169ee:	bf00      	nop
 80169f0:	3714      	adds	r7, #20
 80169f2:	46bd      	mov	sp, r7
 80169f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169f8:	4770      	bx	lr
 80169fa:	bf00      	nop
 80169fc:	e000e3f0 	.word	0xe000e3f0
 8016a00:	24002b08 	.word	0x24002b08
 8016a04:	e000ed0c 	.word	0xe000ed0c
 8016a08:	24002b0c 	.word	0x24002b0c

08016a0c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8016a0c:	b580      	push	{r7, lr}
 8016a0e:	b08a      	sub	sp, #40	@ 0x28
 8016a10:	af00      	add	r7, sp, #0
 8016a12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8016a14:	2300      	movs	r3, #0
 8016a16:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8016a18:	f7fe ffd6 	bl	80159c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8016a1c:	4b5c      	ldr	r3, [pc, #368]	@ (8016b90 <pvPortMalloc+0x184>)
 8016a1e:	681b      	ldr	r3, [r3, #0]
 8016a20:	2b00      	cmp	r3, #0
 8016a22:	d101      	bne.n	8016a28 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8016a24:	f000 f924 	bl	8016c70 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8016a28:	4b5a      	ldr	r3, [pc, #360]	@ (8016b94 <pvPortMalloc+0x188>)
 8016a2a:	681a      	ldr	r2, [r3, #0]
 8016a2c:	687b      	ldr	r3, [r7, #4]
 8016a2e:	4013      	ands	r3, r2
 8016a30:	2b00      	cmp	r3, #0
 8016a32:	f040 8095 	bne.w	8016b60 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8016a36:	687b      	ldr	r3, [r7, #4]
 8016a38:	2b00      	cmp	r3, #0
 8016a3a:	d01e      	beq.n	8016a7a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8016a3c:	2208      	movs	r2, #8
 8016a3e:	687b      	ldr	r3, [r7, #4]
 8016a40:	4413      	add	r3, r2
 8016a42:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8016a44:	687b      	ldr	r3, [r7, #4]
 8016a46:	f003 0307 	and.w	r3, r3, #7
 8016a4a:	2b00      	cmp	r3, #0
 8016a4c:	d015      	beq.n	8016a7a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8016a4e:	687b      	ldr	r3, [r7, #4]
 8016a50:	f023 0307 	bic.w	r3, r3, #7
 8016a54:	3308      	adds	r3, #8
 8016a56:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016a58:	687b      	ldr	r3, [r7, #4]
 8016a5a:	f003 0307 	and.w	r3, r3, #7
 8016a5e:	2b00      	cmp	r3, #0
 8016a60:	d00b      	beq.n	8016a7a <pvPortMalloc+0x6e>
	__asm volatile
 8016a62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016a66:	f383 8811 	msr	BASEPRI, r3
 8016a6a:	f3bf 8f6f 	isb	sy
 8016a6e:	f3bf 8f4f 	dsb	sy
 8016a72:	617b      	str	r3, [r7, #20]
}
 8016a74:	bf00      	nop
 8016a76:	bf00      	nop
 8016a78:	e7fd      	b.n	8016a76 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8016a7a:	687b      	ldr	r3, [r7, #4]
 8016a7c:	2b00      	cmp	r3, #0
 8016a7e:	d06f      	beq.n	8016b60 <pvPortMalloc+0x154>
 8016a80:	4b45      	ldr	r3, [pc, #276]	@ (8016b98 <pvPortMalloc+0x18c>)
 8016a82:	681b      	ldr	r3, [r3, #0]
 8016a84:	687a      	ldr	r2, [r7, #4]
 8016a86:	429a      	cmp	r2, r3
 8016a88:	d86a      	bhi.n	8016b60 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8016a8a:	4b44      	ldr	r3, [pc, #272]	@ (8016b9c <pvPortMalloc+0x190>)
 8016a8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8016a8e:	4b43      	ldr	r3, [pc, #268]	@ (8016b9c <pvPortMalloc+0x190>)
 8016a90:	681b      	ldr	r3, [r3, #0]
 8016a92:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016a94:	e004      	b.n	8016aa0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8016a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8016a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a9c:	681b      	ldr	r3, [r3, #0]
 8016a9e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016aa2:	685b      	ldr	r3, [r3, #4]
 8016aa4:	687a      	ldr	r2, [r7, #4]
 8016aa6:	429a      	cmp	r2, r3
 8016aa8:	d903      	bls.n	8016ab2 <pvPortMalloc+0xa6>
 8016aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016aac:	681b      	ldr	r3, [r3, #0]
 8016aae:	2b00      	cmp	r3, #0
 8016ab0:	d1f1      	bne.n	8016a96 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8016ab2:	4b37      	ldr	r3, [pc, #220]	@ (8016b90 <pvPortMalloc+0x184>)
 8016ab4:	681b      	ldr	r3, [r3, #0]
 8016ab6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016ab8:	429a      	cmp	r2, r3
 8016aba:	d051      	beq.n	8016b60 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8016abc:	6a3b      	ldr	r3, [r7, #32]
 8016abe:	681b      	ldr	r3, [r3, #0]
 8016ac0:	2208      	movs	r2, #8
 8016ac2:	4413      	add	r3, r2
 8016ac4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8016ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ac8:	681a      	ldr	r2, [r3, #0]
 8016aca:	6a3b      	ldr	r3, [r7, #32]
 8016acc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8016ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ad0:	685a      	ldr	r2, [r3, #4]
 8016ad2:	687b      	ldr	r3, [r7, #4]
 8016ad4:	1ad2      	subs	r2, r2, r3
 8016ad6:	2308      	movs	r3, #8
 8016ad8:	005b      	lsls	r3, r3, #1
 8016ada:	429a      	cmp	r2, r3
 8016adc:	d920      	bls.n	8016b20 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8016ade:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016ae0:	687b      	ldr	r3, [r7, #4]
 8016ae2:	4413      	add	r3, r2
 8016ae4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016ae6:	69bb      	ldr	r3, [r7, #24]
 8016ae8:	f003 0307 	and.w	r3, r3, #7
 8016aec:	2b00      	cmp	r3, #0
 8016aee:	d00b      	beq.n	8016b08 <pvPortMalloc+0xfc>
	__asm volatile
 8016af0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016af4:	f383 8811 	msr	BASEPRI, r3
 8016af8:	f3bf 8f6f 	isb	sy
 8016afc:	f3bf 8f4f 	dsb	sy
 8016b00:	613b      	str	r3, [r7, #16]
}
 8016b02:	bf00      	nop
 8016b04:	bf00      	nop
 8016b06:	e7fd      	b.n	8016b04 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8016b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b0a:	685a      	ldr	r2, [r3, #4]
 8016b0c:	687b      	ldr	r3, [r7, #4]
 8016b0e:	1ad2      	subs	r2, r2, r3
 8016b10:	69bb      	ldr	r3, [r7, #24]
 8016b12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8016b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b16:	687a      	ldr	r2, [r7, #4]
 8016b18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8016b1a:	69b8      	ldr	r0, [r7, #24]
 8016b1c:	f000 f90a 	bl	8016d34 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8016b20:	4b1d      	ldr	r3, [pc, #116]	@ (8016b98 <pvPortMalloc+0x18c>)
 8016b22:	681a      	ldr	r2, [r3, #0]
 8016b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b26:	685b      	ldr	r3, [r3, #4]
 8016b28:	1ad3      	subs	r3, r2, r3
 8016b2a:	4a1b      	ldr	r2, [pc, #108]	@ (8016b98 <pvPortMalloc+0x18c>)
 8016b2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8016b2e:	4b1a      	ldr	r3, [pc, #104]	@ (8016b98 <pvPortMalloc+0x18c>)
 8016b30:	681a      	ldr	r2, [r3, #0]
 8016b32:	4b1b      	ldr	r3, [pc, #108]	@ (8016ba0 <pvPortMalloc+0x194>)
 8016b34:	681b      	ldr	r3, [r3, #0]
 8016b36:	429a      	cmp	r2, r3
 8016b38:	d203      	bcs.n	8016b42 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8016b3a:	4b17      	ldr	r3, [pc, #92]	@ (8016b98 <pvPortMalloc+0x18c>)
 8016b3c:	681b      	ldr	r3, [r3, #0]
 8016b3e:	4a18      	ldr	r2, [pc, #96]	@ (8016ba0 <pvPortMalloc+0x194>)
 8016b40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8016b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b44:	685a      	ldr	r2, [r3, #4]
 8016b46:	4b13      	ldr	r3, [pc, #76]	@ (8016b94 <pvPortMalloc+0x188>)
 8016b48:	681b      	ldr	r3, [r3, #0]
 8016b4a:	431a      	orrs	r2, r3
 8016b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8016b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b52:	2200      	movs	r2, #0
 8016b54:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8016b56:	4b13      	ldr	r3, [pc, #76]	@ (8016ba4 <pvPortMalloc+0x198>)
 8016b58:	681b      	ldr	r3, [r3, #0]
 8016b5a:	3301      	adds	r3, #1
 8016b5c:	4a11      	ldr	r2, [pc, #68]	@ (8016ba4 <pvPortMalloc+0x198>)
 8016b5e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8016b60:	f7fe ff40 	bl	80159e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8016b64:	69fb      	ldr	r3, [r7, #28]
 8016b66:	f003 0307 	and.w	r3, r3, #7
 8016b6a:	2b00      	cmp	r3, #0
 8016b6c:	d00b      	beq.n	8016b86 <pvPortMalloc+0x17a>
	__asm volatile
 8016b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016b72:	f383 8811 	msr	BASEPRI, r3
 8016b76:	f3bf 8f6f 	isb	sy
 8016b7a:	f3bf 8f4f 	dsb	sy
 8016b7e:	60fb      	str	r3, [r7, #12]
}
 8016b80:	bf00      	nop
 8016b82:	bf00      	nop
 8016b84:	e7fd      	b.n	8016b82 <pvPortMalloc+0x176>
	return pvReturn;
 8016b86:	69fb      	ldr	r3, [r7, #28]
}
 8016b88:	4618      	mov	r0, r3
 8016b8a:	3728      	adds	r7, #40	@ 0x28
 8016b8c:	46bd      	mov	sp, r7
 8016b8e:	bd80      	pop	{r7, pc}
 8016b90:	24006718 	.word	0x24006718
 8016b94:	2400672c 	.word	0x2400672c
 8016b98:	2400671c 	.word	0x2400671c
 8016b9c:	24006710 	.word	0x24006710
 8016ba0:	24006720 	.word	0x24006720
 8016ba4:	24006724 	.word	0x24006724

08016ba8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8016ba8:	b580      	push	{r7, lr}
 8016baa:	b086      	sub	sp, #24
 8016bac:	af00      	add	r7, sp, #0
 8016bae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8016bb0:	687b      	ldr	r3, [r7, #4]
 8016bb2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8016bb4:	687b      	ldr	r3, [r7, #4]
 8016bb6:	2b00      	cmp	r3, #0
 8016bb8:	d04f      	beq.n	8016c5a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8016bba:	2308      	movs	r3, #8
 8016bbc:	425b      	negs	r3, r3
 8016bbe:	697a      	ldr	r2, [r7, #20]
 8016bc0:	4413      	add	r3, r2
 8016bc2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8016bc4:	697b      	ldr	r3, [r7, #20]
 8016bc6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8016bc8:	693b      	ldr	r3, [r7, #16]
 8016bca:	685a      	ldr	r2, [r3, #4]
 8016bcc:	4b25      	ldr	r3, [pc, #148]	@ (8016c64 <vPortFree+0xbc>)
 8016bce:	681b      	ldr	r3, [r3, #0]
 8016bd0:	4013      	ands	r3, r2
 8016bd2:	2b00      	cmp	r3, #0
 8016bd4:	d10b      	bne.n	8016bee <vPortFree+0x46>
	__asm volatile
 8016bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016bda:	f383 8811 	msr	BASEPRI, r3
 8016bde:	f3bf 8f6f 	isb	sy
 8016be2:	f3bf 8f4f 	dsb	sy
 8016be6:	60fb      	str	r3, [r7, #12]
}
 8016be8:	bf00      	nop
 8016bea:	bf00      	nop
 8016bec:	e7fd      	b.n	8016bea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8016bee:	693b      	ldr	r3, [r7, #16]
 8016bf0:	681b      	ldr	r3, [r3, #0]
 8016bf2:	2b00      	cmp	r3, #0
 8016bf4:	d00b      	beq.n	8016c0e <vPortFree+0x66>
	__asm volatile
 8016bf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016bfa:	f383 8811 	msr	BASEPRI, r3
 8016bfe:	f3bf 8f6f 	isb	sy
 8016c02:	f3bf 8f4f 	dsb	sy
 8016c06:	60bb      	str	r3, [r7, #8]
}
 8016c08:	bf00      	nop
 8016c0a:	bf00      	nop
 8016c0c:	e7fd      	b.n	8016c0a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8016c0e:	693b      	ldr	r3, [r7, #16]
 8016c10:	685a      	ldr	r2, [r3, #4]
 8016c12:	4b14      	ldr	r3, [pc, #80]	@ (8016c64 <vPortFree+0xbc>)
 8016c14:	681b      	ldr	r3, [r3, #0]
 8016c16:	4013      	ands	r3, r2
 8016c18:	2b00      	cmp	r3, #0
 8016c1a:	d01e      	beq.n	8016c5a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8016c1c:	693b      	ldr	r3, [r7, #16]
 8016c1e:	681b      	ldr	r3, [r3, #0]
 8016c20:	2b00      	cmp	r3, #0
 8016c22:	d11a      	bne.n	8016c5a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016c24:	693b      	ldr	r3, [r7, #16]
 8016c26:	685a      	ldr	r2, [r3, #4]
 8016c28:	4b0e      	ldr	r3, [pc, #56]	@ (8016c64 <vPortFree+0xbc>)
 8016c2a:	681b      	ldr	r3, [r3, #0]
 8016c2c:	43db      	mvns	r3, r3
 8016c2e:	401a      	ands	r2, r3
 8016c30:	693b      	ldr	r3, [r7, #16]
 8016c32:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8016c34:	f7fe fec8 	bl	80159c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8016c38:	693b      	ldr	r3, [r7, #16]
 8016c3a:	685a      	ldr	r2, [r3, #4]
 8016c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8016c68 <vPortFree+0xc0>)
 8016c3e:	681b      	ldr	r3, [r3, #0]
 8016c40:	4413      	add	r3, r2
 8016c42:	4a09      	ldr	r2, [pc, #36]	@ (8016c68 <vPortFree+0xc0>)
 8016c44:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8016c46:	6938      	ldr	r0, [r7, #16]
 8016c48:	f000 f874 	bl	8016d34 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8016c4c:	4b07      	ldr	r3, [pc, #28]	@ (8016c6c <vPortFree+0xc4>)
 8016c4e:	681b      	ldr	r3, [r3, #0]
 8016c50:	3301      	adds	r3, #1
 8016c52:	4a06      	ldr	r2, [pc, #24]	@ (8016c6c <vPortFree+0xc4>)
 8016c54:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8016c56:	f7fe fec5 	bl	80159e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8016c5a:	bf00      	nop
 8016c5c:	3718      	adds	r7, #24
 8016c5e:	46bd      	mov	sp, r7
 8016c60:	bd80      	pop	{r7, pc}
 8016c62:	bf00      	nop
 8016c64:	2400672c 	.word	0x2400672c
 8016c68:	2400671c 	.word	0x2400671c
 8016c6c:	24006728 	.word	0x24006728

08016c70 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8016c70:	b480      	push	{r7}
 8016c72:	b085      	sub	sp, #20
 8016c74:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8016c76:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8016c7a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8016c7c:	4b27      	ldr	r3, [pc, #156]	@ (8016d1c <prvHeapInit+0xac>)
 8016c7e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8016c80:	68fb      	ldr	r3, [r7, #12]
 8016c82:	f003 0307 	and.w	r3, r3, #7
 8016c86:	2b00      	cmp	r3, #0
 8016c88:	d00c      	beq.n	8016ca4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8016c8a:	68fb      	ldr	r3, [r7, #12]
 8016c8c:	3307      	adds	r3, #7
 8016c8e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016c90:	68fb      	ldr	r3, [r7, #12]
 8016c92:	f023 0307 	bic.w	r3, r3, #7
 8016c96:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8016c98:	68ba      	ldr	r2, [r7, #8]
 8016c9a:	68fb      	ldr	r3, [r7, #12]
 8016c9c:	1ad3      	subs	r3, r2, r3
 8016c9e:	4a1f      	ldr	r2, [pc, #124]	@ (8016d1c <prvHeapInit+0xac>)
 8016ca0:	4413      	add	r3, r2
 8016ca2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016ca4:	68fb      	ldr	r3, [r7, #12]
 8016ca6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8016ca8:	4a1d      	ldr	r2, [pc, #116]	@ (8016d20 <prvHeapInit+0xb0>)
 8016caa:	687b      	ldr	r3, [r7, #4]
 8016cac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8016cae:	4b1c      	ldr	r3, [pc, #112]	@ (8016d20 <prvHeapInit+0xb0>)
 8016cb0:	2200      	movs	r2, #0
 8016cb2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016cb4:	687b      	ldr	r3, [r7, #4]
 8016cb6:	68ba      	ldr	r2, [r7, #8]
 8016cb8:	4413      	add	r3, r2
 8016cba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8016cbc:	2208      	movs	r2, #8
 8016cbe:	68fb      	ldr	r3, [r7, #12]
 8016cc0:	1a9b      	subs	r3, r3, r2
 8016cc2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016cc4:	68fb      	ldr	r3, [r7, #12]
 8016cc6:	f023 0307 	bic.w	r3, r3, #7
 8016cca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8016ccc:	68fb      	ldr	r3, [r7, #12]
 8016cce:	4a15      	ldr	r2, [pc, #84]	@ (8016d24 <prvHeapInit+0xb4>)
 8016cd0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8016cd2:	4b14      	ldr	r3, [pc, #80]	@ (8016d24 <prvHeapInit+0xb4>)
 8016cd4:	681b      	ldr	r3, [r3, #0]
 8016cd6:	2200      	movs	r2, #0
 8016cd8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8016cda:	4b12      	ldr	r3, [pc, #72]	@ (8016d24 <prvHeapInit+0xb4>)
 8016cdc:	681b      	ldr	r3, [r3, #0]
 8016cde:	2200      	movs	r2, #0
 8016ce0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8016ce2:	687b      	ldr	r3, [r7, #4]
 8016ce4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8016ce6:	683b      	ldr	r3, [r7, #0]
 8016ce8:	68fa      	ldr	r2, [r7, #12]
 8016cea:	1ad2      	subs	r2, r2, r3
 8016cec:	683b      	ldr	r3, [r7, #0]
 8016cee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8016cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8016d24 <prvHeapInit+0xb4>)
 8016cf2:	681a      	ldr	r2, [r3, #0]
 8016cf4:	683b      	ldr	r3, [r7, #0]
 8016cf6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016cf8:	683b      	ldr	r3, [r7, #0]
 8016cfa:	685b      	ldr	r3, [r3, #4]
 8016cfc:	4a0a      	ldr	r2, [pc, #40]	@ (8016d28 <prvHeapInit+0xb8>)
 8016cfe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016d00:	683b      	ldr	r3, [r7, #0]
 8016d02:	685b      	ldr	r3, [r3, #4]
 8016d04:	4a09      	ldr	r2, [pc, #36]	@ (8016d2c <prvHeapInit+0xbc>)
 8016d06:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8016d08:	4b09      	ldr	r3, [pc, #36]	@ (8016d30 <prvHeapInit+0xc0>)
 8016d0a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8016d0e:	601a      	str	r2, [r3, #0]
}
 8016d10:	bf00      	nop
 8016d12:	3714      	adds	r7, #20
 8016d14:	46bd      	mov	sp, r7
 8016d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d1a:	4770      	bx	lr
 8016d1c:	24002b10 	.word	0x24002b10
 8016d20:	24006710 	.word	0x24006710
 8016d24:	24006718 	.word	0x24006718
 8016d28:	24006720 	.word	0x24006720
 8016d2c:	2400671c 	.word	0x2400671c
 8016d30:	2400672c 	.word	0x2400672c

08016d34 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8016d34:	b480      	push	{r7}
 8016d36:	b085      	sub	sp, #20
 8016d38:	af00      	add	r7, sp, #0
 8016d3a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8016d3c:	4b28      	ldr	r3, [pc, #160]	@ (8016de0 <prvInsertBlockIntoFreeList+0xac>)
 8016d3e:	60fb      	str	r3, [r7, #12]
 8016d40:	e002      	b.n	8016d48 <prvInsertBlockIntoFreeList+0x14>
 8016d42:	68fb      	ldr	r3, [r7, #12]
 8016d44:	681b      	ldr	r3, [r3, #0]
 8016d46:	60fb      	str	r3, [r7, #12]
 8016d48:	68fb      	ldr	r3, [r7, #12]
 8016d4a:	681b      	ldr	r3, [r3, #0]
 8016d4c:	687a      	ldr	r2, [r7, #4]
 8016d4e:	429a      	cmp	r2, r3
 8016d50:	d8f7      	bhi.n	8016d42 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8016d52:	68fb      	ldr	r3, [r7, #12]
 8016d54:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8016d56:	68fb      	ldr	r3, [r7, #12]
 8016d58:	685b      	ldr	r3, [r3, #4]
 8016d5a:	68ba      	ldr	r2, [r7, #8]
 8016d5c:	4413      	add	r3, r2
 8016d5e:	687a      	ldr	r2, [r7, #4]
 8016d60:	429a      	cmp	r2, r3
 8016d62:	d108      	bne.n	8016d76 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8016d64:	68fb      	ldr	r3, [r7, #12]
 8016d66:	685a      	ldr	r2, [r3, #4]
 8016d68:	687b      	ldr	r3, [r7, #4]
 8016d6a:	685b      	ldr	r3, [r3, #4]
 8016d6c:	441a      	add	r2, r3
 8016d6e:	68fb      	ldr	r3, [r7, #12]
 8016d70:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8016d72:	68fb      	ldr	r3, [r7, #12]
 8016d74:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8016d76:	687b      	ldr	r3, [r7, #4]
 8016d78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8016d7a:	687b      	ldr	r3, [r7, #4]
 8016d7c:	685b      	ldr	r3, [r3, #4]
 8016d7e:	68ba      	ldr	r2, [r7, #8]
 8016d80:	441a      	add	r2, r3
 8016d82:	68fb      	ldr	r3, [r7, #12]
 8016d84:	681b      	ldr	r3, [r3, #0]
 8016d86:	429a      	cmp	r2, r3
 8016d88:	d118      	bne.n	8016dbc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8016d8a:	68fb      	ldr	r3, [r7, #12]
 8016d8c:	681a      	ldr	r2, [r3, #0]
 8016d8e:	4b15      	ldr	r3, [pc, #84]	@ (8016de4 <prvInsertBlockIntoFreeList+0xb0>)
 8016d90:	681b      	ldr	r3, [r3, #0]
 8016d92:	429a      	cmp	r2, r3
 8016d94:	d00d      	beq.n	8016db2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8016d96:	687b      	ldr	r3, [r7, #4]
 8016d98:	685a      	ldr	r2, [r3, #4]
 8016d9a:	68fb      	ldr	r3, [r7, #12]
 8016d9c:	681b      	ldr	r3, [r3, #0]
 8016d9e:	685b      	ldr	r3, [r3, #4]
 8016da0:	441a      	add	r2, r3
 8016da2:	687b      	ldr	r3, [r7, #4]
 8016da4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8016da6:	68fb      	ldr	r3, [r7, #12]
 8016da8:	681b      	ldr	r3, [r3, #0]
 8016daa:	681a      	ldr	r2, [r3, #0]
 8016dac:	687b      	ldr	r3, [r7, #4]
 8016dae:	601a      	str	r2, [r3, #0]
 8016db0:	e008      	b.n	8016dc4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8016db2:	4b0c      	ldr	r3, [pc, #48]	@ (8016de4 <prvInsertBlockIntoFreeList+0xb0>)
 8016db4:	681a      	ldr	r2, [r3, #0]
 8016db6:	687b      	ldr	r3, [r7, #4]
 8016db8:	601a      	str	r2, [r3, #0]
 8016dba:	e003      	b.n	8016dc4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8016dbc:	68fb      	ldr	r3, [r7, #12]
 8016dbe:	681a      	ldr	r2, [r3, #0]
 8016dc0:	687b      	ldr	r3, [r7, #4]
 8016dc2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8016dc4:	68fa      	ldr	r2, [r7, #12]
 8016dc6:	687b      	ldr	r3, [r7, #4]
 8016dc8:	429a      	cmp	r2, r3
 8016dca:	d002      	beq.n	8016dd2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8016dcc:	68fb      	ldr	r3, [r7, #12]
 8016dce:	687a      	ldr	r2, [r7, #4]
 8016dd0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016dd2:	bf00      	nop
 8016dd4:	3714      	adds	r7, #20
 8016dd6:	46bd      	mov	sp, r7
 8016dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ddc:	4770      	bx	lr
 8016dde:	bf00      	nop
 8016de0:	24006710 	.word	0x24006710
 8016de4:	24006718 	.word	0x24006718

08016de8 <atof>:
 8016de8:	2100      	movs	r1, #0
 8016dea:	f000 bdb7 	b.w	801795c <strtod>

08016dee <atoi>:
 8016dee:	220a      	movs	r2, #10
 8016df0:	2100      	movs	r1, #0
 8016df2:	f000 be39 	b.w	8017a68 <strtol>

08016df6 <sulp>:
 8016df6:	b570      	push	{r4, r5, r6, lr}
 8016df8:	4604      	mov	r4, r0
 8016dfa:	460d      	mov	r5, r1
 8016dfc:	4616      	mov	r6, r2
 8016dfe:	ec45 4b10 	vmov	d0, r4, r5
 8016e02:	f001 ffa9 	bl	8018d58 <__ulp>
 8016e06:	b17e      	cbz	r6, 8016e28 <sulp+0x32>
 8016e08:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8016e0c:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8016e10:	2b00      	cmp	r3, #0
 8016e12:	dd09      	ble.n	8016e28 <sulp+0x32>
 8016e14:	051b      	lsls	r3, r3, #20
 8016e16:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8016e1a:	2000      	movs	r0, #0
 8016e1c:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8016e20:	ec41 0b17 	vmov	d7, r0, r1
 8016e24:	ee20 0b07 	vmul.f64	d0, d0, d7
 8016e28:	bd70      	pop	{r4, r5, r6, pc}
 8016e2a:	0000      	movs	r0, r0
 8016e2c:	0000      	movs	r0, r0
	...

08016e30 <_strtod_l>:
 8016e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e34:	ed2d 8b0a 	vpush	{d8-d12}
 8016e38:	b097      	sub	sp, #92	@ 0x5c
 8016e3a:	4688      	mov	r8, r1
 8016e3c:	920e      	str	r2, [sp, #56]	@ 0x38
 8016e3e:	2200      	movs	r2, #0
 8016e40:	9212      	str	r2, [sp, #72]	@ 0x48
 8016e42:	9005      	str	r0, [sp, #20]
 8016e44:	f04f 0a00 	mov.w	sl, #0
 8016e48:	f04f 0b00 	mov.w	fp, #0
 8016e4c:	460a      	mov	r2, r1
 8016e4e:	9211      	str	r2, [sp, #68]	@ 0x44
 8016e50:	7811      	ldrb	r1, [r2, #0]
 8016e52:	292b      	cmp	r1, #43	@ 0x2b
 8016e54:	d04c      	beq.n	8016ef0 <_strtod_l+0xc0>
 8016e56:	d839      	bhi.n	8016ecc <_strtod_l+0x9c>
 8016e58:	290d      	cmp	r1, #13
 8016e5a:	d833      	bhi.n	8016ec4 <_strtod_l+0x94>
 8016e5c:	2908      	cmp	r1, #8
 8016e5e:	d833      	bhi.n	8016ec8 <_strtod_l+0x98>
 8016e60:	2900      	cmp	r1, #0
 8016e62:	d03c      	beq.n	8016ede <_strtod_l+0xae>
 8016e64:	2200      	movs	r2, #0
 8016e66:	9208      	str	r2, [sp, #32]
 8016e68:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8016e6a:	782a      	ldrb	r2, [r5, #0]
 8016e6c:	2a30      	cmp	r2, #48	@ 0x30
 8016e6e:	f040 80b5 	bne.w	8016fdc <_strtod_l+0x1ac>
 8016e72:	786a      	ldrb	r2, [r5, #1]
 8016e74:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8016e78:	2a58      	cmp	r2, #88	@ 0x58
 8016e7a:	d170      	bne.n	8016f5e <_strtod_l+0x12e>
 8016e7c:	9302      	str	r3, [sp, #8]
 8016e7e:	9b08      	ldr	r3, [sp, #32]
 8016e80:	9301      	str	r3, [sp, #4]
 8016e82:	ab12      	add	r3, sp, #72	@ 0x48
 8016e84:	9300      	str	r3, [sp, #0]
 8016e86:	4a8b      	ldr	r2, [pc, #556]	@ (80170b4 <_strtod_l+0x284>)
 8016e88:	9805      	ldr	r0, [sp, #20]
 8016e8a:	ab13      	add	r3, sp, #76	@ 0x4c
 8016e8c:	a911      	add	r1, sp, #68	@ 0x44
 8016e8e:	f001 f85d 	bl	8017f4c <__gethex>
 8016e92:	f010 060f 	ands.w	r6, r0, #15
 8016e96:	4604      	mov	r4, r0
 8016e98:	d005      	beq.n	8016ea6 <_strtod_l+0x76>
 8016e9a:	2e06      	cmp	r6, #6
 8016e9c:	d12a      	bne.n	8016ef4 <_strtod_l+0xc4>
 8016e9e:	3501      	adds	r5, #1
 8016ea0:	2300      	movs	r3, #0
 8016ea2:	9511      	str	r5, [sp, #68]	@ 0x44
 8016ea4:	9308      	str	r3, [sp, #32]
 8016ea6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016ea8:	2b00      	cmp	r3, #0
 8016eaa:	f040 852f 	bne.w	801790c <_strtod_l+0xadc>
 8016eae:	9b08      	ldr	r3, [sp, #32]
 8016eb0:	ec4b ab10 	vmov	d0, sl, fp
 8016eb4:	b1cb      	cbz	r3, 8016eea <_strtod_l+0xba>
 8016eb6:	eeb1 0b40 	vneg.f64	d0, d0
 8016eba:	b017      	add	sp, #92	@ 0x5c
 8016ebc:	ecbd 8b0a 	vpop	{d8-d12}
 8016ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ec4:	2920      	cmp	r1, #32
 8016ec6:	d1cd      	bne.n	8016e64 <_strtod_l+0x34>
 8016ec8:	3201      	adds	r2, #1
 8016eca:	e7c0      	b.n	8016e4e <_strtod_l+0x1e>
 8016ecc:	292d      	cmp	r1, #45	@ 0x2d
 8016ece:	d1c9      	bne.n	8016e64 <_strtod_l+0x34>
 8016ed0:	2101      	movs	r1, #1
 8016ed2:	9108      	str	r1, [sp, #32]
 8016ed4:	1c51      	adds	r1, r2, #1
 8016ed6:	9111      	str	r1, [sp, #68]	@ 0x44
 8016ed8:	7852      	ldrb	r2, [r2, #1]
 8016eda:	2a00      	cmp	r2, #0
 8016edc:	d1c4      	bne.n	8016e68 <_strtod_l+0x38>
 8016ede:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016ee0:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8016ee4:	2b00      	cmp	r3, #0
 8016ee6:	f040 850f 	bne.w	8017908 <_strtod_l+0xad8>
 8016eea:	ec4b ab10 	vmov	d0, sl, fp
 8016eee:	e7e4      	b.n	8016eba <_strtod_l+0x8a>
 8016ef0:	2100      	movs	r1, #0
 8016ef2:	e7ee      	b.n	8016ed2 <_strtod_l+0xa2>
 8016ef4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8016ef6:	b13a      	cbz	r2, 8016f08 <_strtod_l+0xd8>
 8016ef8:	2135      	movs	r1, #53	@ 0x35
 8016efa:	a814      	add	r0, sp, #80	@ 0x50
 8016efc:	f002 f823 	bl	8018f46 <__copybits>
 8016f00:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8016f02:	9805      	ldr	r0, [sp, #20]
 8016f04:	f001 fbf4 	bl	80186f0 <_Bfree>
 8016f08:	1e73      	subs	r3, r6, #1
 8016f0a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8016f0c:	2b04      	cmp	r3, #4
 8016f0e:	d806      	bhi.n	8016f1e <_strtod_l+0xee>
 8016f10:	e8df f003 	tbb	[pc, r3]
 8016f14:	201d0314 	.word	0x201d0314
 8016f18:	14          	.byte	0x14
 8016f19:	00          	.byte	0x00
 8016f1a:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 8016f1e:	05e3      	lsls	r3, r4, #23
 8016f20:	bf48      	it	mi
 8016f22:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8016f26:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016f2a:	0d1b      	lsrs	r3, r3, #20
 8016f2c:	051b      	lsls	r3, r3, #20
 8016f2e:	2b00      	cmp	r3, #0
 8016f30:	d1b9      	bne.n	8016ea6 <_strtod_l+0x76>
 8016f32:	f000 ff15 	bl	8017d60 <__errno>
 8016f36:	2322      	movs	r3, #34	@ 0x22
 8016f38:	6003      	str	r3, [r0, #0]
 8016f3a:	e7b4      	b.n	8016ea6 <_strtod_l+0x76>
 8016f3c:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8016f40:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8016f44:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8016f48:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8016f4c:	e7e7      	b.n	8016f1e <_strtod_l+0xee>
 8016f4e:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 80170bc <_strtod_l+0x28c>
 8016f52:	e7e4      	b.n	8016f1e <_strtod_l+0xee>
 8016f54:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8016f58:	f04f 3aff 	mov.w	sl, #4294967295
 8016f5c:	e7df      	b.n	8016f1e <_strtod_l+0xee>
 8016f5e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016f60:	1c5a      	adds	r2, r3, #1
 8016f62:	9211      	str	r2, [sp, #68]	@ 0x44
 8016f64:	785b      	ldrb	r3, [r3, #1]
 8016f66:	2b30      	cmp	r3, #48	@ 0x30
 8016f68:	d0f9      	beq.n	8016f5e <_strtod_l+0x12e>
 8016f6a:	2b00      	cmp	r3, #0
 8016f6c:	d09b      	beq.n	8016ea6 <_strtod_l+0x76>
 8016f6e:	2301      	movs	r3, #1
 8016f70:	2600      	movs	r6, #0
 8016f72:	9307      	str	r3, [sp, #28]
 8016f74:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016f76:	930a      	str	r3, [sp, #40]	@ 0x28
 8016f78:	46b1      	mov	r9, r6
 8016f7a:	4635      	mov	r5, r6
 8016f7c:	220a      	movs	r2, #10
 8016f7e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8016f80:	7804      	ldrb	r4, [r0, #0]
 8016f82:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8016f86:	b2d9      	uxtb	r1, r3
 8016f88:	2909      	cmp	r1, #9
 8016f8a:	d929      	bls.n	8016fe0 <_strtod_l+0x1b0>
 8016f8c:	494a      	ldr	r1, [pc, #296]	@ (80170b8 <_strtod_l+0x288>)
 8016f8e:	2201      	movs	r2, #1
 8016f90:	f000 fe8e 	bl	8017cb0 <strncmp>
 8016f94:	b378      	cbz	r0, 8016ff6 <_strtod_l+0x1c6>
 8016f96:	2000      	movs	r0, #0
 8016f98:	4622      	mov	r2, r4
 8016f9a:	462b      	mov	r3, r5
 8016f9c:	4607      	mov	r7, r0
 8016f9e:	9006      	str	r0, [sp, #24]
 8016fa0:	2a65      	cmp	r2, #101	@ 0x65
 8016fa2:	d001      	beq.n	8016fa8 <_strtod_l+0x178>
 8016fa4:	2a45      	cmp	r2, #69	@ 0x45
 8016fa6:	d117      	bne.n	8016fd8 <_strtod_l+0x1a8>
 8016fa8:	b91b      	cbnz	r3, 8016fb2 <_strtod_l+0x182>
 8016faa:	9b07      	ldr	r3, [sp, #28]
 8016fac:	4303      	orrs	r3, r0
 8016fae:	d096      	beq.n	8016ede <_strtod_l+0xae>
 8016fb0:	2300      	movs	r3, #0
 8016fb2:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8016fb6:	f108 0201 	add.w	r2, r8, #1
 8016fba:	9211      	str	r2, [sp, #68]	@ 0x44
 8016fbc:	f898 2001 	ldrb.w	r2, [r8, #1]
 8016fc0:	2a2b      	cmp	r2, #43	@ 0x2b
 8016fc2:	d06b      	beq.n	801709c <_strtod_l+0x26c>
 8016fc4:	2a2d      	cmp	r2, #45	@ 0x2d
 8016fc6:	d071      	beq.n	80170ac <_strtod_l+0x27c>
 8016fc8:	f04f 0e00 	mov.w	lr, #0
 8016fcc:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8016fd0:	2c09      	cmp	r4, #9
 8016fd2:	d979      	bls.n	80170c8 <_strtod_l+0x298>
 8016fd4:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8016fd8:	2400      	movs	r4, #0
 8016fda:	e094      	b.n	8017106 <_strtod_l+0x2d6>
 8016fdc:	2300      	movs	r3, #0
 8016fde:	e7c7      	b.n	8016f70 <_strtod_l+0x140>
 8016fe0:	2d08      	cmp	r5, #8
 8016fe2:	f100 0001 	add.w	r0, r0, #1
 8016fe6:	bfd4      	ite	le
 8016fe8:	fb02 3909 	mlale	r9, r2, r9, r3
 8016fec:	fb02 3606 	mlagt	r6, r2, r6, r3
 8016ff0:	3501      	adds	r5, #1
 8016ff2:	9011      	str	r0, [sp, #68]	@ 0x44
 8016ff4:	e7c3      	b.n	8016f7e <_strtod_l+0x14e>
 8016ff6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016ff8:	1c5a      	adds	r2, r3, #1
 8016ffa:	9211      	str	r2, [sp, #68]	@ 0x44
 8016ffc:	785a      	ldrb	r2, [r3, #1]
 8016ffe:	b375      	cbz	r5, 801705e <_strtod_l+0x22e>
 8017000:	4607      	mov	r7, r0
 8017002:	462b      	mov	r3, r5
 8017004:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8017008:	2909      	cmp	r1, #9
 801700a:	d913      	bls.n	8017034 <_strtod_l+0x204>
 801700c:	2101      	movs	r1, #1
 801700e:	9106      	str	r1, [sp, #24]
 8017010:	e7c6      	b.n	8016fa0 <_strtod_l+0x170>
 8017012:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8017014:	1c5a      	adds	r2, r3, #1
 8017016:	9211      	str	r2, [sp, #68]	@ 0x44
 8017018:	785a      	ldrb	r2, [r3, #1]
 801701a:	3001      	adds	r0, #1
 801701c:	2a30      	cmp	r2, #48	@ 0x30
 801701e:	d0f8      	beq.n	8017012 <_strtod_l+0x1e2>
 8017020:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8017024:	2b08      	cmp	r3, #8
 8017026:	f200 8476 	bhi.w	8017916 <_strtod_l+0xae6>
 801702a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801702c:	930a      	str	r3, [sp, #40]	@ 0x28
 801702e:	4607      	mov	r7, r0
 8017030:	2000      	movs	r0, #0
 8017032:	4603      	mov	r3, r0
 8017034:	3a30      	subs	r2, #48	@ 0x30
 8017036:	f100 0101 	add.w	r1, r0, #1
 801703a:	d023      	beq.n	8017084 <_strtod_l+0x254>
 801703c:	440f      	add	r7, r1
 801703e:	eb00 0c03 	add.w	ip, r0, r3
 8017042:	4619      	mov	r1, r3
 8017044:	240a      	movs	r4, #10
 8017046:	4561      	cmp	r1, ip
 8017048:	d10b      	bne.n	8017062 <_strtod_l+0x232>
 801704a:	1c5c      	adds	r4, r3, #1
 801704c:	4403      	add	r3, r0
 801704e:	2b08      	cmp	r3, #8
 8017050:	4404      	add	r4, r0
 8017052:	dc11      	bgt.n	8017078 <_strtod_l+0x248>
 8017054:	230a      	movs	r3, #10
 8017056:	fb03 2909 	mla	r9, r3, r9, r2
 801705a:	2100      	movs	r1, #0
 801705c:	e013      	b.n	8017086 <_strtod_l+0x256>
 801705e:	4628      	mov	r0, r5
 8017060:	e7dc      	b.n	801701c <_strtod_l+0x1ec>
 8017062:	2908      	cmp	r1, #8
 8017064:	f101 0101 	add.w	r1, r1, #1
 8017068:	dc02      	bgt.n	8017070 <_strtod_l+0x240>
 801706a:	fb04 f909 	mul.w	r9, r4, r9
 801706e:	e7ea      	b.n	8017046 <_strtod_l+0x216>
 8017070:	2910      	cmp	r1, #16
 8017072:	bfd8      	it	le
 8017074:	4366      	mulle	r6, r4
 8017076:	e7e6      	b.n	8017046 <_strtod_l+0x216>
 8017078:	2b0f      	cmp	r3, #15
 801707a:	dcee      	bgt.n	801705a <_strtod_l+0x22a>
 801707c:	230a      	movs	r3, #10
 801707e:	fb03 2606 	mla	r6, r3, r6, r2
 8017082:	e7ea      	b.n	801705a <_strtod_l+0x22a>
 8017084:	461c      	mov	r4, r3
 8017086:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8017088:	1c5a      	adds	r2, r3, #1
 801708a:	9211      	str	r2, [sp, #68]	@ 0x44
 801708c:	785a      	ldrb	r2, [r3, #1]
 801708e:	4608      	mov	r0, r1
 8017090:	4623      	mov	r3, r4
 8017092:	e7b7      	b.n	8017004 <_strtod_l+0x1d4>
 8017094:	2301      	movs	r3, #1
 8017096:	2700      	movs	r7, #0
 8017098:	9306      	str	r3, [sp, #24]
 801709a:	e786      	b.n	8016faa <_strtod_l+0x17a>
 801709c:	f04f 0e00 	mov.w	lr, #0
 80170a0:	f108 0202 	add.w	r2, r8, #2
 80170a4:	9211      	str	r2, [sp, #68]	@ 0x44
 80170a6:	f898 2002 	ldrb.w	r2, [r8, #2]
 80170aa:	e78f      	b.n	8016fcc <_strtod_l+0x19c>
 80170ac:	f04f 0e01 	mov.w	lr, #1
 80170b0:	e7f6      	b.n	80170a0 <_strtod_l+0x270>
 80170b2:	bf00      	nop
 80170b4:	08019e38 	.word	0x08019e38
 80170b8:	08019e14 	.word	0x08019e14
 80170bc:	7ff00000 	.word	0x7ff00000
 80170c0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80170c2:	1c54      	adds	r4, r2, #1
 80170c4:	9411      	str	r4, [sp, #68]	@ 0x44
 80170c6:	7852      	ldrb	r2, [r2, #1]
 80170c8:	2a30      	cmp	r2, #48	@ 0x30
 80170ca:	d0f9      	beq.n	80170c0 <_strtod_l+0x290>
 80170cc:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 80170d0:	2c08      	cmp	r4, #8
 80170d2:	d881      	bhi.n	8016fd8 <_strtod_l+0x1a8>
 80170d4:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 80170d8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80170da:	9209      	str	r2, [sp, #36]	@ 0x24
 80170dc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80170de:	1c51      	adds	r1, r2, #1
 80170e0:	9111      	str	r1, [sp, #68]	@ 0x44
 80170e2:	7852      	ldrb	r2, [r2, #1]
 80170e4:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 80170e8:	2c09      	cmp	r4, #9
 80170ea:	d938      	bls.n	801715e <_strtod_l+0x32e>
 80170ec:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80170ee:	1b0c      	subs	r4, r1, r4
 80170f0:	2c08      	cmp	r4, #8
 80170f2:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 80170f6:	dc02      	bgt.n	80170fe <_strtod_l+0x2ce>
 80170f8:	4564      	cmp	r4, ip
 80170fa:	bfa8      	it	ge
 80170fc:	4664      	movge	r4, ip
 80170fe:	f1be 0f00 	cmp.w	lr, #0
 8017102:	d000      	beq.n	8017106 <_strtod_l+0x2d6>
 8017104:	4264      	negs	r4, r4
 8017106:	2b00      	cmp	r3, #0
 8017108:	d14e      	bne.n	80171a8 <_strtod_l+0x378>
 801710a:	9b07      	ldr	r3, [sp, #28]
 801710c:	4318      	orrs	r0, r3
 801710e:	f47f aeca 	bne.w	8016ea6 <_strtod_l+0x76>
 8017112:	9b06      	ldr	r3, [sp, #24]
 8017114:	2b00      	cmp	r3, #0
 8017116:	f47f aee2 	bne.w	8016ede <_strtod_l+0xae>
 801711a:	2a69      	cmp	r2, #105	@ 0x69
 801711c:	d027      	beq.n	801716e <_strtod_l+0x33e>
 801711e:	dc24      	bgt.n	801716a <_strtod_l+0x33a>
 8017120:	2a49      	cmp	r2, #73	@ 0x49
 8017122:	d024      	beq.n	801716e <_strtod_l+0x33e>
 8017124:	2a4e      	cmp	r2, #78	@ 0x4e
 8017126:	f47f aeda 	bne.w	8016ede <_strtod_l+0xae>
 801712a:	4997      	ldr	r1, [pc, #604]	@ (8017388 <_strtod_l+0x558>)
 801712c:	a811      	add	r0, sp, #68	@ 0x44
 801712e:	f001 f92f 	bl	8018390 <__match>
 8017132:	2800      	cmp	r0, #0
 8017134:	f43f aed3 	beq.w	8016ede <_strtod_l+0xae>
 8017138:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801713a:	781b      	ldrb	r3, [r3, #0]
 801713c:	2b28      	cmp	r3, #40	@ 0x28
 801713e:	d12d      	bne.n	801719c <_strtod_l+0x36c>
 8017140:	4992      	ldr	r1, [pc, #584]	@ (801738c <_strtod_l+0x55c>)
 8017142:	aa14      	add	r2, sp, #80	@ 0x50
 8017144:	a811      	add	r0, sp, #68	@ 0x44
 8017146:	f001 f937 	bl	80183b8 <__hexnan>
 801714a:	2805      	cmp	r0, #5
 801714c:	d126      	bne.n	801719c <_strtod_l+0x36c>
 801714e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8017150:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8017154:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8017158:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801715c:	e6a3      	b.n	8016ea6 <_strtod_l+0x76>
 801715e:	240a      	movs	r4, #10
 8017160:	fb04 2c0c 	mla	ip, r4, ip, r2
 8017164:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8017168:	e7b8      	b.n	80170dc <_strtod_l+0x2ac>
 801716a:	2a6e      	cmp	r2, #110	@ 0x6e
 801716c:	e7db      	b.n	8017126 <_strtod_l+0x2f6>
 801716e:	4988      	ldr	r1, [pc, #544]	@ (8017390 <_strtod_l+0x560>)
 8017170:	a811      	add	r0, sp, #68	@ 0x44
 8017172:	f001 f90d 	bl	8018390 <__match>
 8017176:	2800      	cmp	r0, #0
 8017178:	f43f aeb1 	beq.w	8016ede <_strtod_l+0xae>
 801717c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801717e:	4985      	ldr	r1, [pc, #532]	@ (8017394 <_strtod_l+0x564>)
 8017180:	3b01      	subs	r3, #1
 8017182:	a811      	add	r0, sp, #68	@ 0x44
 8017184:	9311      	str	r3, [sp, #68]	@ 0x44
 8017186:	f001 f903 	bl	8018390 <__match>
 801718a:	b910      	cbnz	r0, 8017192 <_strtod_l+0x362>
 801718c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801718e:	3301      	adds	r3, #1
 8017190:	9311      	str	r3, [sp, #68]	@ 0x44
 8017192:	f8df b214 	ldr.w	fp, [pc, #532]	@ 80173a8 <_strtod_l+0x578>
 8017196:	f04f 0a00 	mov.w	sl, #0
 801719a:	e684      	b.n	8016ea6 <_strtod_l+0x76>
 801719c:	487e      	ldr	r0, [pc, #504]	@ (8017398 <_strtod_l+0x568>)
 801719e:	f000 fe1b 	bl	8017dd8 <nan>
 80171a2:	ec5b ab10 	vmov	sl, fp, d0
 80171a6:	e67e      	b.n	8016ea6 <_strtod_l+0x76>
 80171a8:	ee07 9a90 	vmov	s15, r9
 80171ac:	1be2      	subs	r2, r4, r7
 80171ae:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80171b2:	2d00      	cmp	r5, #0
 80171b4:	bf08      	it	eq
 80171b6:	461d      	moveq	r5, r3
 80171b8:	2b10      	cmp	r3, #16
 80171ba:	9209      	str	r2, [sp, #36]	@ 0x24
 80171bc:	461a      	mov	r2, r3
 80171be:	bfa8      	it	ge
 80171c0:	2210      	movge	r2, #16
 80171c2:	2b09      	cmp	r3, #9
 80171c4:	ec5b ab17 	vmov	sl, fp, d7
 80171c8:	dc15      	bgt.n	80171f6 <_strtod_l+0x3c6>
 80171ca:	1be1      	subs	r1, r4, r7
 80171cc:	2900      	cmp	r1, #0
 80171ce:	f43f ae6a 	beq.w	8016ea6 <_strtod_l+0x76>
 80171d2:	eba4 0107 	sub.w	r1, r4, r7
 80171d6:	dd72      	ble.n	80172be <_strtod_l+0x48e>
 80171d8:	2916      	cmp	r1, #22
 80171da:	dc59      	bgt.n	8017290 <_strtod_l+0x460>
 80171dc:	4b6f      	ldr	r3, [pc, #444]	@ (801739c <_strtod_l+0x56c>)
 80171de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80171e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80171e4:	ed93 7b00 	vldr	d7, [r3]
 80171e8:	ec4b ab16 	vmov	d6, sl, fp
 80171ec:	ee27 7b06 	vmul.f64	d7, d7, d6
 80171f0:	ec5b ab17 	vmov	sl, fp, d7
 80171f4:	e657      	b.n	8016ea6 <_strtod_l+0x76>
 80171f6:	4969      	ldr	r1, [pc, #420]	@ (801739c <_strtod_l+0x56c>)
 80171f8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80171fc:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8017200:	ee06 6a90 	vmov	s13, r6
 8017204:	2b0f      	cmp	r3, #15
 8017206:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 801720a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801720e:	ec5b ab16 	vmov	sl, fp, d6
 8017212:	ddda      	ble.n	80171ca <_strtod_l+0x39a>
 8017214:	1a9a      	subs	r2, r3, r2
 8017216:	1be1      	subs	r1, r4, r7
 8017218:	440a      	add	r2, r1
 801721a:	2a00      	cmp	r2, #0
 801721c:	f340 8094 	ble.w	8017348 <_strtod_l+0x518>
 8017220:	f012 000f 	ands.w	r0, r2, #15
 8017224:	d00a      	beq.n	801723c <_strtod_l+0x40c>
 8017226:	495d      	ldr	r1, [pc, #372]	@ (801739c <_strtod_l+0x56c>)
 8017228:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801722c:	ed91 7b00 	vldr	d7, [r1]
 8017230:	ec4b ab16 	vmov	d6, sl, fp
 8017234:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017238:	ec5b ab17 	vmov	sl, fp, d7
 801723c:	f032 020f 	bics.w	r2, r2, #15
 8017240:	d073      	beq.n	801732a <_strtod_l+0x4fa>
 8017242:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8017246:	dd47      	ble.n	80172d8 <_strtod_l+0x4a8>
 8017248:	2400      	movs	r4, #0
 801724a:	4625      	mov	r5, r4
 801724c:	9407      	str	r4, [sp, #28]
 801724e:	4626      	mov	r6, r4
 8017250:	9a05      	ldr	r2, [sp, #20]
 8017252:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80173a8 <_strtod_l+0x578>
 8017256:	2322      	movs	r3, #34	@ 0x22
 8017258:	6013      	str	r3, [r2, #0]
 801725a:	f04f 0a00 	mov.w	sl, #0
 801725e:	9b07      	ldr	r3, [sp, #28]
 8017260:	2b00      	cmp	r3, #0
 8017262:	f43f ae20 	beq.w	8016ea6 <_strtod_l+0x76>
 8017266:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8017268:	9805      	ldr	r0, [sp, #20]
 801726a:	f001 fa41 	bl	80186f0 <_Bfree>
 801726e:	9805      	ldr	r0, [sp, #20]
 8017270:	4631      	mov	r1, r6
 8017272:	f001 fa3d 	bl	80186f0 <_Bfree>
 8017276:	9805      	ldr	r0, [sp, #20]
 8017278:	4629      	mov	r1, r5
 801727a:	f001 fa39 	bl	80186f0 <_Bfree>
 801727e:	9907      	ldr	r1, [sp, #28]
 8017280:	9805      	ldr	r0, [sp, #20]
 8017282:	f001 fa35 	bl	80186f0 <_Bfree>
 8017286:	9805      	ldr	r0, [sp, #20]
 8017288:	4621      	mov	r1, r4
 801728a:	f001 fa31 	bl	80186f0 <_Bfree>
 801728e:	e60a      	b.n	8016ea6 <_strtod_l+0x76>
 8017290:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8017294:	1be0      	subs	r0, r4, r7
 8017296:	4281      	cmp	r1, r0
 8017298:	dbbc      	blt.n	8017214 <_strtod_l+0x3e4>
 801729a:	4a40      	ldr	r2, [pc, #256]	@ (801739c <_strtod_l+0x56c>)
 801729c:	f1c3 030f 	rsb	r3, r3, #15
 80172a0:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80172a4:	ed91 7b00 	vldr	d7, [r1]
 80172a8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80172aa:	ec4b ab16 	vmov	d6, sl, fp
 80172ae:	1acb      	subs	r3, r1, r3
 80172b0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80172b4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80172b8:	ed92 6b00 	vldr	d6, [r2]
 80172bc:	e796      	b.n	80171ec <_strtod_l+0x3bc>
 80172be:	3116      	adds	r1, #22
 80172c0:	dba8      	blt.n	8017214 <_strtod_l+0x3e4>
 80172c2:	4b36      	ldr	r3, [pc, #216]	@ (801739c <_strtod_l+0x56c>)
 80172c4:	1b3c      	subs	r4, r7, r4
 80172c6:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80172ca:	ed94 7b00 	vldr	d7, [r4]
 80172ce:	ec4b ab16 	vmov	d6, sl, fp
 80172d2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80172d6:	e78b      	b.n	80171f0 <_strtod_l+0x3c0>
 80172d8:	2000      	movs	r0, #0
 80172da:	ec4b ab17 	vmov	d7, sl, fp
 80172de:	4e30      	ldr	r6, [pc, #192]	@ (80173a0 <_strtod_l+0x570>)
 80172e0:	1112      	asrs	r2, r2, #4
 80172e2:	4601      	mov	r1, r0
 80172e4:	2a01      	cmp	r2, #1
 80172e6:	dc23      	bgt.n	8017330 <_strtod_l+0x500>
 80172e8:	b108      	cbz	r0, 80172ee <_strtod_l+0x4be>
 80172ea:	ec5b ab17 	vmov	sl, fp, d7
 80172ee:	4a2c      	ldr	r2, [pc, #176]	@ (80173a0 <_strtod_l+0x570>)
 80172f0:	482c      	ldr	r0, [pc, #176]	@ (80173a4 <_strtod_l+0x574>)
 80172f2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80172f6:	ed92 7b00 	vldr	d7, [r2]
 80172fa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80172fe:	ec4b ab16 	vmov	d6, sl, fp
 8017302:	4a29      	ldr	r2, [pc, #164]	@ (80173a8 <_strtod_l+0x578>)
 8017304:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017308:	ee17 1a90 	vmov	r1, s15
 801730c:	400a      	ands	r2, r1
 801730e:	4282      	cmp	r2, r0
 8017310:	ec5b ab17 	vmov	sl, fp, d7
 8017314:	d898      	bhi.n	8017248 <_strtod_l+0x418>
 8017316:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 801731a:	4282      	cmp	r2, r0
 801731c:	bf86      	itte	hi
 801731e:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 80173ac <_strtod_l+0x57c>
 8017322:	f04f 3aff 	movhi.w	sl, #4294967295
 8017326:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 801732a:	2200      	movs	r2, #0
 801732c:	9206      	str	r2, [sp, #24]
 801732e:	e076      	b.n	801741e <_strtod_l+0x5ee>
 8017330:	f012 0f01 	tst.w	r2, #1
 8017334:	d004      	beq.n	8017340 <_strtod_l+0x510>
 8017336:	ed96 6b00 	vldr	d6, [r6]
 801733a:	2001      	movs	r0, #1
 801733c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017340:	3101      	adds	r1, #1
 8017342:	1052      	asrs	r2, r2, #1
 8017344:	3608      	adds	r6, #8
 8017346:	e7cd      	b.n	80172e4 <_strtod_l+0x4b4>
 8017348:	d0ef      	beq.n	801732a <_strtod_l+0x4fa>
 801734a:	4252      	negs	r2, r2
 801734c:	f012 000f 	ands.w	r0, r2, #15
 8017350:	d00a      	beq.n	8017368 <_strtod_l+0x538>
 8017352:	4912      	ldr	r1, [pc, #72]	@ (801739c <_strtod_l+0x56c>)
 8017354:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8017358:	ed91 7b00 	vldr	d7, [r1]
 801735c:	ec4b ab16 	vmov	d6, sl, fp
 8017360:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8017364:	ec5b ab17 	vmov	sl, fp, d7
 8017368:	1112      	asrs	r2, r2, #4
 801736a:	d0de      	beq.n	801732a <_strtod_l+0x4fa>
 801736c:	2a1f      	cmp	r2, #31
 801736e:	dd1f      	ble.n	80173b0 <_strtod_l+0x580>
 8017370:	2400      	movs	r4, #0
 8017372:	4625      	mov	r5, r4
 8017374:	9407      	str	r4, [sp, #28]
 8017376:	4626      	mov	r6, r4
 8017378:	9a05      	ldr	r2, [sp, #20]
 801737a:	2322      	movs	r3, #34	@ 0x22
 801737c:	f04f 0a00 	mov.w	sl, #0
 8017380:	f04f 0b00 	mov.w	fp, #0
 8017384:	6013      	str	r3, [r2, #0]
 8017386:	e76a      	b.n	801725e <_strtod_l+0x42e>
 8017388:	08019e1f 	.word	0x08019e1f
 801738c:	08019e24 	.word	0x08019e24
 8017390:	08019e16 	.word	0x08019e16
 8017394:	08019e19 	.word	0x08019e19
 8017398:	0801a19b 	.word	0x0801a19b
 801739c:	0801a098 	.word	0x0801a098
 80173a0:	0801a070 	.word	0x0801a070
 80173a4:	7ca00000 	.word	0x7ca00000
 80173a8:	7ff00000 	.word	0x7ff00000
 80173ac:	7fefffff 	.word	0x7fefffff
 80173b0:	f012 0110 	ands.w	r1, r2, #16
 80173b4:	bf18      	it	ne
 80173b6:	216a      	movne	r1, #106	@ 0x6a
 80173b8:	9106      	str	r1, [sp, #24]
 80173ba:	ec4b ab17 	vmov	d7, sl, fp
 80173be:	49b0      	ldr	r1, [pc, #704]	@ (8017680 <_strtod_l+0x850>)
 80173c0:	2000      	movs	r0, #0
 80173c2:	07d6      	lsls	r6, r2, #31
 80173c4:	d504      	bpl.n	80173d0 <_strtod_l+0x5a0>
 80173c6:	ed91 6b00 	vldr	d6, [r1]
 80173ca:	2001      	movs	r0, #1
 80173cc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80173d0:	1052      	asrs	r2, r2, #1
 80173d2:	f101 0108 	add.w	r1, r1, #8
 80173d6:	d1f4      	bne.n	80173c2 <_strtod_l+0x592>
 80173d8:	b108      	cbz	r0, 80173de <_strtod_l+0x5ae>
 80173da:	ec5b ab17 	vmov	sl, fp, d7
 80173de:	9a06      	ldr	r2, [sp, #24]
 80173e0:	b1b2      	cbz	r2, 8017410 <_strtod_l+0x5e0>
 80173e2:	f3cb 510a 	ubfx	r1, fp, #20, #11
 80173e6:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 80173ea:	2a00      	cmp	r2, #0
 80173ec:	4658      	mov	r0, fp
 80173ee:	dd0f      	ble.n	8017410 <_strtod_l+0x5e0>
 80173f0:	2a1f      	cmp	r2, #31
 80173f2:	dd55      	ble.n	80174a0 <_strtod_l+0x670>
 80173f4:	2a34      	cmp	r2, #52	@ 0x34
 80173f6:	bfde      	ittt	le
 80173f8:	f04f 32ff 	movle.w	r2, #4294967295
 80173fc:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8017400:	408a      	lslle	r2, r1
 8017402:	f04f 0a00 	mov.w	sl, #0
 8017406:	bfcc      	ite	gt
 8017408:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 801740c:	ea02 0b00 	andle.w	fp, r2, r0
 8017410:	ec4b ab17 	vmov	d7, sl, fp
 8017414:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8017418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801741c:	d0a8      	beq.n	8017370 <_strtod_l+0x540>
 801741e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017420:	9805      	ldr	r0, [sp, #20]
 8017422:	f8cd 9000 	str.w	r9, [sp]
 8017426:	462a      	mov	r2, r5
 8017428:	f001 f9ca 	bl	80187c0 <__s2b>
 801742c:	9007      	str	r0, [sp, #28]
 801742e:	2800      	cmp	r0, #0
 8017430:	f43f af0a 	beq.w	8017248 <_strtod_l+0x418>
 8017434:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017436:	1b3f      	subs	r7, r7, r4
 8017438:	2b00      	cmp	r3, #0
 801743a:	bfb4      	ite	lt
 801743c:	463b      	movlt	r3, r7
 801743e:	2300      	movge	r3, #0
 8017440:	930a      	str	r3, [sp, #40]	@ 0x28
 8017442:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017444:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 8017670 <_strtod_l+0x840>
 8017448:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801744c:	2400      	movs	r4, #0
 801744e:	930d      	str	r3, [sp, #52]	@ 0x34
 8017450:	4625      	mov	r5, r4
 8017452:	9b07      	ldr	r3, [sp, #28]
 8017454:	9805      	ldr	r0, [sp, #20]
 8017456:	6859      	ldr	r1, [r3, #4]
 8017458:	f001 f90a 	bl	8018670 <_Balloc>
 801745c:	4606      	mov	r6, r0
 801745e:	2800      	cmp	r0, #0
 8017460:	f43f aef6 	beq.w	8017250 <_strtod_l+0x420>
 8017464:	9b07      	ldr	r3, [sp, #28]
 8017466:	691a      	ldr	r2, [r3, #16]
 8017468:	ec4b ab19 	vmov	d9, sl, fp
 801746c:	3202      	adds	r2, #2
 801746e:	f103 010c 	add.w	r1, r3, #12
 8017472:	0092      	lsls	r2, r2, #2
 8017474:	300c      	adds	r0, #12
 8017476:	f000 fca0 	bl	8017dba <memcpy>
 801747a:	eeb0 0b49 	vmov.f64	d0, d9
 801747e:	9805      	ldr	r0, [sp, #20]
 8017480:	aa14      	add	r2, sp, #80	@ 0x50
 8017482:	a913      	add	r1, sp, #76	@ 0x4c
 8017484:	f001 fcd8 	bl	8018e38 <__d2b>
 8017488:	9012      	str	r0, [sp, #72]	@ 0x48
 801748a:	2800      	cmp	r0, #0
 801748c:	f43f aee0 	beq.w	8017250 <_strtod_l+0x420>
 8017490:	9805      	ldr	r0, [sp, #20]
 8017492:	2101      	movs	r1, #1
 8017494:	f001 fa2a 	bl	80188ec <__i2b>
 8017498:	4605      	mov	r5, r0
 801749a:	b940      	cbnz	r0, 80174ae <_strtod_l+0x67e>
 801749c:	2500      	movs	r5, #0
 801749e:	e6d7      	b.n	8017250 <_strtod_l+0x420>
 80174a0:	f04f 31ff 	mov.w	r1, #4294967295
 80174a4:	fa01 f202 	lsl.w	r2, r1, r2
 80174a8:	ea02 0a0a 	and.w	sl, r2, sl
 80174ac:	e7b0      	b.n	8017410 <_strtod_l+0x5e0>
 80174ae:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 80174b0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80174b2:	2f00      	cmp	r7, #0
 80174b4:	bfab      	itete	ge
 80174b6:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 80174b8:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 80174ba:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 80174be:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 80174c2:	bfac      	ite	ge
 80174c4:	eb07 0903 	addge.w	r9, r7, r3
 80174c8:	eba3 0807 	sublt.w	r8, r3, r7
 80174cc:	9b06      	ldr	r3, [sp, #24]
 80174ce:	1aff      	subs	r7, r7, r3
 80174d0:	4417      	add	r7, r2
 80174d2:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 80174d6:	4a6b      	ldr	r2, [pc, #428]	@ (8017684 <_strtod_l+0x854>)
 80174d8:	3f01      	subs	r7, #1
 80174da:	4297      	cmp	r7, r2
 80174dc:	da51      	bge.n	8017582 <_strtod_l+0x752>
 80174de:	1bd1      	subs	r1, r2, r7
 80174e0:	291f      	cmp	r1, #31
 80174e2:	eba3 0301 	sub.w	r3, r3, r1
 80174e6:	f04f 0201 	mov.w	r2, #1
 80174ea:	dc3e      	bgt.n	801756a <_strtod_l+0x73a>
 80174ec:	408a      	lsls	r2, r1
 80174ee:	920c      	str	r2, [sp, #48]	@ 0x30
 80174f0:	2200      	movs	r2, #0
 80174f2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80174f4:	eb09 0703 	add.w	r7, r9, r3
 80174f8:	4498      	add	r8, r3
 80174fa:	9b06      	ldr	r3, [sp, #24]
 80174fc:	45b9      	cmp	r9, r7
 80174fe:	4498      	add	r8, r3
 8017500:	464b      	mov	r3, r9
 8017502:	bfa8      	it	ge
 8017504:	463b      	movge	r3, r7
 8017506:	4543      	cmp	r3, r8
 8017508:	bfa8      	it	ge
 801750a:	4643      	movge	r3, r8
 801750c:	2b00      	cmp	r3, #0
 801750e:	bfc2      	ittt	gt
 8017510:	1aff      	subgt	r7, r7, r3
 8017512:	eba8 0803 	subgt.w	r8, r8, r3
 8017516:	eba9 0903 	subgt.w	r9, r9, r3
 801751a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801751c:	2b00      	cmp	r3, #0
 801751e:	dd16      	ble.n	801754e <_strtod_l+0x71e>
 8017520:	4629      	mov	r1, r5
 8017522:	9805      	ldr	r0, [sp, #20]
 8017524:	461a      	mov	r2, r3
 8017526:	f001 faa1 	bl	8018a6c <__pow5mult>
 801752a:	4605      	mov	r5, r0
 801752c:	2800      	cmp	r0, #0
 801752e:	d0b5      	beq.n	801749c <_strtod_l+0x66c>
 8017530:	4601      	mov	r1, r0
 8017532:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8017534:	9805      	ldr	r0, [sp, #20]
 8017536:	f001 f9ef 	bl	8018918 <__multiply>
 801753a:	900f      	str	r0, [sp, #60]	@ 0x3c
 801753c:	2800      	cmp	r0, #0
 801753e:	f43f ae87 	beq.w	8017250 <_strtod_l+0x420>
 8017542:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8017544:	9805      	ldr	r0, [sp, #20]
 8017546:	f001 f8d3 	bl	80186f0 <_Bfree>
 801754a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801754c:	9312      	str	r3, [sp, #72]	@ 0x48
 801754e:	2f00      	cmp	r7, #0
 8017550:	dc1b      	bgt.n	801758a <_strtod_l+0x75a>
 8017552:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017554:	2b00      	cmp	r3, #0
 8017556:	dd21      	ble.n	801759c <_strtod_l+0x76c>
 8017558:	4631      	mov	r1, r6
 801755a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801755c:	9805      	ldr	r0, [sp, #20]
 801755e:	f001 fa85 	bl	8018a6c <__pow5mult>
 8017562:	4606      	mov	r6, r0
 8017564:	b9d0      	cbnz	r0, 801759c <_strtod_l+0x76c>
 8017566:	2600      	movs	r6, #0
 8017568:	e672      	b.n	8017250 <_strtod_l+0x420>
 801756a:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 801756e:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 8017572:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 8017576:	37e2      	adds	r7, #226	@ 0xe2
 8017578:	fa02 f107 	lsl.w	r1, r2, r7
 801757c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801757e:	920c      	str	r2, [sp, #48]	@ 0x30
 8017580:	e7b8      	b.n	80174f4 <_strtod_l+0x6c4>
 8017582:	2200      	movs	r2, #0
 8017584:	920b      	str	r2, [sp, #44]	@ 0x2c
 8017586:	2201      	movs	r2, #1
 8017588:	e7f9      	b.n	801757e <_strtod_l+0x74e>
 801758a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801758c:	9805      	ldr	r0, [sp, #20]
 801758e:	463a      	mov	r2, r7
 8017590:	f001 fac6 	bl	8018b20 <__lshift>
 8017594:	9012      	str	r0, [sp, #72]	@ 0x48
 8017596:	2800      	cmp	r0, #0
 8017598:	d1db      	bne.n	8017552 <_strtod_l+0x722>
 801759a:	e659      	b.n	8017250 <_strtod_l+0x420>
 801759c:	f1b8 0f00 	cmp.w	r8, #0
 80175a0:	dd07      	ble.n	80175b2 <_strtod_l+0x782>
 80175a2:	4631      	mov	r1, r6
 80175a4:	9805      	ldr	r0, [sp, #20]
 80175a6:	4642      	mov	r2, r8
 80175a8:	f001 faba 	bl	8018b20 <__lshift>
 80175ac:	4606      	mov	r6, r0
 80175ae:	2800      	cmp	r0, #0
 80175b0:	d0d9      	beq.n	8017566 <_strtod_l+0x736>
 80175b2:	f1b9 0f00 	cmp.w	r9, #0
 80175b6:	dd08      	ble.n	80175ca <_strtod_l+0x79a>
 80175b8:	4629      	mov	r1, r5
 80175ba:	9805      	ldr	r0, [sp, #20]
 80175bc:	464a      	mov	r2, r9
 80175be:	f001 faaf 	bl	8018b20 <__lshift>
 80175c2:	4605      	mov	r5, r0
 80175c4:	2800      	cmp	r0, #0
 80175c6:	f43f ae43 	beq.w	8017250 <_strtod_l+0x420>
 80175ca:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80175cc:	9805      	ldr	r0, [sp, #20]
 80175ce:	4632      	mov	r2, r6
 80175d0:	f001 fb2e 	bl	8018c30 <__mdiff>
 80175d4:	4604      	mov	r4, r0
 80175d6:	2800      	cmp	r0, #0
 80175d8:	f43f ae3a 	beq.w	8017250 <_strtod_l+0x420>
 80175dc:	2300      	movs	r3, #0
 80175de:	f8d0 800c 	ldr.w	r8, [r0, #12]
 80175e2:	60c3      	str	r3, [r0, #12]
 80175e4:	4629      	mov	r1, r5
 80175e6:	f001 fb07 	bl	8018bf8 <__mcmp>
 80175ea:	2800      	cmp	r0, #0
 80175ec:	da4e      	bge.n	801768c <_strtod_l+0x85c>
 80175ee:	ea58 080a 	orrs.w	r8, r8, sl
 80175f2:	d174      	bne.n	80176de <_strtod_l+0x8ae>
 80175f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80175f8:	2b00      	cmp	r3, #0
 80175fa:	d170      	bne.n	80176de <_strtod_l+0x8ae>
 80175fc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8017600:	0d1b      	lsrs	r3, r3, #20
 8017602:	051b      	lsls	r3, r3, #20
 8017604:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8017608:	d969      	bls.n	80176de <_strtod_l+0x8ae>
 801760a:	6963      	ldr	r3, [r4, #20]
 801760c:	b913      	cbnz	r3, 8017614 <_strtod_l+0x7e4>
 801760e:	6923      	ldr	r3, [r4, #16]
 8017610:	2b01      	cmp	r3, #1
 8017612:	dd64      	ble.n	80176de <_strtod_l+0x8ae>
 8017614:	4621      	mov	r1, r4
 8017616:	2201      	movs	r2, #1
 8017618:	9805      	ldr	r0, [sp, #20]
 801761a:	f001 fa81 	bl	8018b20 <__lshift>
 801761e:	4629      	mov	r1, r5
 8017620:	4604      	mov	r4, r0
 8017622:	f001 fae9 	bl	8018bf8 <__mcmp>
 8017626:	2800      	cmp	r0, #0
 8017628:	dd59      	ble.n	80176de <_strtod_l+0x8ae>
 801762a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801762e:	9a06      	ldr	r2, [sp, #24]
 8017630:	0d1b      	lsrs	r3, r3, #20
 8017632:	051b      	lsls	r3, r3, #20
 8017634:	2a00      	cmp	r2, #0
 8017636:	d070      	beq.n	801771a <_strtod_l+0x8ea>
 8017638:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801763c:	d86d      	bhi.n	801771a <_strtod_l+0x8ea>
 801763e:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8017642:	f67f ae99 	bls.w	8017378 <_strtod_l+0x548>
 8017646:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8017678 <_strtod_l+0x848>
 801764a:	ec4b ab16 	vmov	d6, sl, fp
 801764e:	4b0e      	ldr	r3, [pc, #56]	@ (8017688 <_strtod_l+0x858>)
 8017650:	ee26 7b07 	vmul.f64	d7, d6, d7
 8017654:	ee17 2a90 	vmov	r2, s15
 8017658:	4013      	ands	r3, r2
 801765a:	ec5b ab17 	vmov	sl, fp, d7
 801765e:	2b00      	cmp	r3, #0
 8017660:	f47f ae01 	bne.w	8017266 <_strtod_l+0x436>
 8017664:	9a05      	ldr	r2, [sp, #20]
 8017666:	2322      	movs	r3, #34	@ 0x22
 8017668:	6013      	str	r3, [r2, #0]
 801766a:	e5fc      	b.n	8017266 <_strtod_l+0x436>
 801766c:	f3af 8000 	nop.w
 8017670:	ffc00000 	.word	0xffc00000
 8017674:	41dfffff 	.word	0x41dfffff
 8017678:	00000000 	.word	0x00000000
 801767c:	39500000 	.word	0x39500000
 8017680:	08019e50 	.word	0x08019e50
 8017684:	fffffc02 	.word	0xfffffc02
 8017688:	7ff00000 	.word	0x7ff00000
 801768c:	46d9      	mov	r9, fp
 801768e:	d15d      	bne.n	801774c <_strtod_l+0x91c>
 8017690:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017694:	f1b8 0f00 	cmp.w	r8, #0
 8017698:	d02a      	beq.n	80176f0 <_strtod_l+0x8c0>
 801769a:	4aab      	ldr	r2, [pc, #684]	@ (8017948 <_strtod_l+0xb18>)
 801769c:	4293      	cmp	r3, r2
 801769e:	d12a      	bne.n	80176f6 <_strtod_l+0x8c6>
 80176a0:	9b06      	ldr	r3, [sp, #24]
 80176a2:	4652      	mov	r2, sl
 80176a4:	b1fb      	cbz	r3, 80176e6 <_strtod_l+0x8b6>
 80176a6:	4ba9      	ldr	r3, [pc, #676]	@ (801794c <_strtod_l+0xb1c>)
 80176a8:	ea0b 0303 	and.w	r3, fp, r3
 80176ac:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80176b0:	f04f 31ff 	mov.w	r1, #4294967295
 80176b4:	d81a      	bhi.n	80176ec <_strtod_l+0x8bc>
 80176b6:	0d1b      	lsrs	r3, r3, #20
 80176b8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80176bc:	fa01 f303 	lsl.w	r3, r1, r3
 80176c0:	429a      	cmp	r2, r3
 80176c2:	d118      	bne.n	80176f6 <_strtod_l+0x8c6>
 80176c4:	4ba2      	ldr	r3, [pc, #648]	@ (8017950 <_strtod_l+0xb20>)
 80176c6:	4599      	cmp	r9, r3
 80176c8:	d102      	bne.n	80176d0 <_strtod_l+0x8a0>
 80176ca:	3201      	adds	r2, #1
 80176cc:	f43f adc0 	beq.w	8017250 <_strtod_l+0x420>
 80176d0:	4b9e      	ldr	r3, [pc, #632]	@ (801794c <_strtod_l+0xb1c>)
 80176d2:	ea09 0303 	and.w	r3, r9, r3
 80176d6:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 80176da:	f04f 0a00 	mov.w	sl, #0
 80176de:	9b06      	ldr	r3, [sp, #24]
 80176e0:	2b00      	cmp	r3, #0
 80176e2:	d1b0      	bne.n	8017646 <_strtod_l+0x816>
 80176e4:	e5bf      	b.n	8017266 <_strtod_l+0x436>
 80176e6:	f04f 33ff 	mov.w	r3, #4294967295
 80176ea:	e7e9      	b.n	80176c0 <_strtod_l+0x890>
 80176ec:	460b      	mov	r3, r1
 80176ee:	e7e7      	b.n	80176c0 <_strtod_l+0x890>
 80176f0:	ea53 030a 	orrs.w	r3, r3, sl
 80176f4:	d099      	beq.n	801762a <_strtod_l+0x7fa>
 80176f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80176f8:	b1c3      	cbz	r3, 801772c <_strtod_l+0x8fc>
 80176fa:	ea13 0f09 	tst.w	r3, r9
 80176fe:	d0ee      	beq.n	80176de <_strtod_l+0x8ae>
 8017700:	9a06      	ldr	r2, [sp, #24]
 8017702:	4650      	mov	r0, sl
 8017704:	4659      	mov	r1, fp
 8017706:	f1b8 0f00 	cmp.w	r8, #0
 801770a:	d013      	beq.n	8017734 <_strtod_l+0x904>
 801770c:	f7ff fb73 	bl	8016df6 <sulp>
 8017710:	ee39 7b00 	vadd.f64	d7, d9, d0
 8017714:	ec5b ab17 	vmov	sl, fp, d7
 8017718:	e7e1      	b.n	80176de <_strtod_l+0x8ae>
 801771a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801771e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8017722:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8017726:	f04f 3aff 	mov.w	sl, #4294967295
 801772a:	e7d8      	b.n	80176de <_strtod_l+0x8ae>
 801772c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801772e:	ea13 0f0a 	tst.w	r3, sl
 8017732:	e7e4      	b.n	80176fe <_strtod_l+0x8ce>
 8017734:	f7ff fb5f 	bl	8016df6 <sulp>
 8017738:	ee39 0b40 	vsub.f64	d0, d9, d0
 801773c:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8017740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017744:	ec5b ab10 	vmov	sl, fp, d0
 8017748:	d1c9      	bne.n	80176de <_strtod_l+0x8ae>
 801774a:	e615      	b.n	8017378 <_strtod_l+0x548>
 801774c:	4629      	mov	r1, r5
 801774e:	4620      	mov	r0, r4
 8017750:	f001 fbca 	bl	8018ee8 <__ratio>
 8017754:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8017758:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801775c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017760:	d85d      	bhi.n	801781e <_strtod_l+0x9ee>
 8017762:	f1b8 0f00 	cmp.w	r8, #0
 8017766:	d164      	bne.n	8017832 <_strtod_l+0xa02>
 8017768:	f1ba 0f00 	cmp.w	sl, #0
 801776c:	d14b      	bne.n	8017806 <_strtod_l+0x9d6>
 801776e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017772:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8017776:	2b00      	cmp	r3, #0
 8017778:	d160      	bne.n	801783c <_strtod_l+0xa0c>
 801777a:	eeb4 0bc8 	vcmpe.f64	d0, d8
 801777e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8017782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017786:	d401      	bmi.n	801778c <_strtod_l+0x95c>
 8017788:	ee20 8b08 	vmul.f64	d8, d0, d8
 801778c:	eeb1 ab48 	vneg.f64	d10, d8
 8017790:	486e      	ldr	r0, [pc, #440]	@ (801794c <_strtod_l+0xb1c>)
 8017792:	4970      	ldr	r1, [pc, #448]	@ (8017954 <_strtod_l+0xb24>)
 8017794:	ea09 0700 	and.w	r7, r9, r0
 8017798:	428f      	cmp	r7, r1
 801779a:	ec53 2b1a 	vmov	r2, r3, d10
 801779e:	d17d      	bne.n	801789c <_strtod_l+0xa6c>
 80177a0:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 80177a4:	ec4b ab1c 	vmov	d12, sl, fp
 80177a8:	eeb0 0b4c 	vmov.f64	d0, d12
 80177ac:	f001 fad4 	bl	8018d58 <__ulp>
 80177b0:	4866      	ldr	r0, [pc, #408]	@ (801794c <_strtod_l+0xb1c>)
 80177b2:	eea0 cb0a 	vfma.f64	d12, d0, d10
 80177b6:	ee1c 3a90 	vmov	r3, s25
 80177ba:	4a67      	ldr	r2, [pc, #412]	@ (8017958 <_strtod_l+0xb28>)
 80177bc:	ea03 0100 	and.w	r1, r3, r0
 80177c0:	4291      	cmp	r1, r2
 80177c2:	ec5b ab1c 	vmov	sl, fp, d12
 80177c6:	d93c      	bls.n	8017842 <_strtod_l+0xa12>
 80177c8:	ee19 2a90 	vmov	r2, s19
 80177cc:	4b60      	ldr	r3, [pc, #384]	@ (8017950 <_strtod_l+0xb20>)
 80177ce:	429a      	cmp	r2, r3
 80177d0:	d104      	bne.n	80177dc <_strtod_l+0x9ac>
 80177d2:	ee19 3a10 	vmov	r3, s18
 80177d6:	3301      	adds	r3, #1
 80177d8:	f43f ad3a 	beq.w	8017250 <_strtod_l+0x420>
 80177dc:	f8df b170 	ldr.w	fp, [pc, #368]	@ 8017950 <_strtod_l+0xb20>
 80177e0:	f04f 3aff 	mov.w	sl, #4294967295
 80177e4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80177e6:	9805      	ldr	r0, [sp, #20]
 80177e8:	f000 ff82 	bl	80186f0 <_Bfree>
 80177ec:	9805      	ldr	r0, [sp, #20]
 80177ee:	4631      	mov	r1, r6
 80177f0:	f000 ff7e 	bl	80186f0 <_Bfree>
 80177f4:	9805      	ldr	r0, [sp, #20]
 80177f6:	4629      	mov	r1, r5
 80177f8:	f000 ff7a 	bl	80186f0 <_Bfree>
 80177fc:	9805      	ldr	r0, [sp, #20]
 80177fe:	4621      	mov	r1, r4
 8017800:	f000 ff76 	bl	80186f0 <_Bfree>
 8017804:	e625      	b.n	8017452 <_strtod_l+0x622>
 8017806:	f1ba 0f01 	cmp.w	sl, #1
 801780a:	d103      	bne.n	8017814 <_strtod_l+0x9e4>
 801780c:	f1bb 0f00 	cmp.w	fp, #0
 8017810:	f43f adb2 	beq.w	8017378 <_strtod_l+0x548>
 8017814:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8017818:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 801781c:	e7b8      	b.n	8017790 <_strtod_l+0x960>
 801781e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8017822:	ee20 8b08 	vmul.f64	d8, d0, d8
 8017826:	f1b8 0f00 	cmp.w	r8, #0
 801782a:	d0af      	beq.n	801778c <_strtod_l+0x95c>
 801782c:	eeb0 ab48 	vmov.f64	d10, d8
 8017830:	e7ae      	b.n	8017790 <_strtod_l+0x960>
 8017832:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 8017836:	eeb0 8b4a 	vmov.f64	d8, d10
 801783a:	e7a9      	b.n	8017790 <_strtod_l+0x960>
 801783c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8017840:	e7a6      	b.n	8017790 <_strtod_l+0x960>
 8017842:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8017846:	9b06      	ldr	r3, [sp, #24]
 8017848:	46d9      	mov	r9, fp
 801784a:	2b00      	cmp	r3, #0
 801784c:	d1ca      	bne.n	80177e4 <_strtod_l+0x9b4>
 801784e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8017852:	0d1b      	lsrs	r3, r3, #20
 8017854:	051b      	lsls	r3, r3, #20
 8017856:	429f      	cmp	r7, r3
 8017858:	d1c4      	bne.n	80177e4 <_strtod_l+0x9b4>
 801785a:	ec51 0b18 	vmov	r0, r1, d8
 801785e:	f7e8 ffcb 	bl	80007f8 <__aeabi_d2lz>
 8017862:	f7e8 ff33 	bl	80006cc <__aeabi_l2d>
 8017866:	f3cb 0913 	ubfx	r9, fp, #0, #20
 801786a:	ec41 0b17 	vmov	d7, r0, r1
 801786e:	ea49 090a 	orr.w	r9, r9, sl
 8017872:	ea59 0908 	orrs.w	r9, r9, r8
 8017876:	ee38 8b47 	vsub.f64	d8, d8, d7
 801787a:	d03c      	beq.n	80178f6 <_strtod_l+0xac6>
 801787c:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8017930 <_strtod_l+0xb00>
 8017880:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8017884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017888:	f53f aced 	bmi.w	8017266 <_strtod_l+0x436>
 801788c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8017938 <_strtod_l+0xb08>
 8017890:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8017894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017898:	dda4      	ble.n	80177e4 <_strtod_l+0x9b4>
 801789a:	e4e4      	b.n	8017266 <_strtod_l+0x436>
 801789c:	9906      	ldr	r1, [sp, #24]
 801789e:	b1e1      	cbz	r1, 80178da <_strtod_l+0xaaa>
 80178a0:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 80178a4:	d819      	bhi.n	80178da <_strtod_l+0xaaa>
 80178a6:	eeb4 8bcb 	vcmpe.f64	d8, d11
 80178aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80178ae:	d811      	bhi.n	80178d4 <_strtod_l+0xaa4>
 80178b0:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 80178b4:	ee18 3a10 	vmov	r3, s16
 80178b8:	2b01      	cmp	r3, #1
 80178ba:	bf38      	it	cc
 80178bc:	2301      	movcc	r3, #1
 80178be:	ee08 3a10 	vmov	s16, r3
 80178c2:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 80178c6:	f1b8 0f00 	cmp.w	r8, #0
 80178ca:	d111      	bne.n	80178f0 <_strtod_l+0xac0>
 80178cc:	eeb1 7b48 	vneg.f64	d7, d8
 80178d0:	ec53 2b17 	vmov	r2, r3, d7
 80178d4:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 80178d8:	1bcb      	subs	r3, r1, r7
 80178da:	eeb0 0b49 	vmov.f64	d0, d9
 80178de:	ec43 2b1a 	vmov	d10, r2, r3
 80178e2:	f001 fa39 	bl	8018d58 <__ulp>
 80178e6:	eeaa 9b00 	vfma.f64	d9, d10, d0
 80178ea:	ec5b ab19 	vmov	sl, fp, d9
 80178ee:	e7aa      	b.n	8017846 <_strtod_l+0xa16>
 80178f0:	eeb0 7b48 	vmov.f64	d7, d8
 80178f4:	e7ec      	b.n	80178d0 <_strtod_l+0xaa0>
 80178f6:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8017940 <_strtod_l+0xb10>
 80178fa:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80178fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017902:	f57f af6f 	bpl.w	80177e4 <_strtod_l+0x9b4>
 8017906:	e4ae      	b.n	8017266 <_strtod_l+0x436>
 8017908:	2300      	movs	r3, #0
 801790a:	9308      	str	r3, [sp, #32]
 801790c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801790e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8017910:	6013      	str	r3, [r2, #0]
 8017912:	f7ff bacc 	b.w	8016eae <_strtod_l+0x7e>
 8017916:	2a65      	cmp	r2, #101	@ 0x65
 8017918:	f43f abbc 	beq.w	8017094 <_strtod_l+0x264>
 801791c:	2a45      	cmp	r2, #69	@ 0x45
 801791e:	f43f abb9 	beq.w	8017094 <_strtod_l+0x264>
 8017922:	2301      	movs	r3, #1
 8017924:	9306      	str	r3, [sp, #24]
 8017926:	f7ff bbf0 	b.w	801710a <_strtod_l+0x2da>
 801792a:	bf00      	nop
 801792c:	f3af 8000 	nop.w
 8017930:	94a03595 	.word	0x94a03595
 8017934:	3fdfffff 	.word	0x3fdfffff
 8017938:	35afe535 	.word	0x35afe535
 801793c:	3fe00000 	.word	0x3fe00000
 8017940:	94a03595 	.word	0x94a03595
 8017944:	3fcfffff 	.word	0x3fcfffff
 8017948:	000fffff 	.word	0x000fffff
 801794c:	7ff00000 	.word	0x7ff00000
 8017950:	7fefffff 	.word	0x7fefffff
 8017954:	7fe00000 	.word	0x7fe00000
 8017958:	7c9fffff 	.word	0x7c9fffff

0801795c <strtod>:
 801795c:	460a      	mov	r2, r1
 801795e:	4601      	mov	r1, r0
 8017960:	4802      	ldr	r0, [pc, #8]	@ (801796c <strtod+0x10>)
 8017962:	4b03      	ldr	r3, [pc, #12]	@ (8017970 <strtod+0x14>)
 8017964:	6800      	ldr	r0, [r0, #0]
 8017966:	f7ff ba63 	b.w	8016e30 <_strtod_l>
 801796a:	bf00      	nop
 801796c:	24000240 	.word	0x24000240
 8017970:	240000d4 	.word	0x240000d4

08017974 <_strtol_l.constprop.0>:
 8017974:	2b24      	cmp	r3, #36	@ 0x24
 8017976:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801797a:	4686      	mov	lr, r0
 801797c:	4690      	mov	r8, r2
 801797e:	d801      	bhi.n	8017984 <_strtol_l.constprop.0+0x10>
 8017980:	2b01      	cmp	r3, #1
 8017982:	d106      	bne.n	8017992 <_strtol_l.constprop.0+0x1e>
 8017984:	f000 f9ec 	bl	8017d60 <__errno>
 8017988:	2316      	movs	r3, #22
 801798a:	6003      	str	r3, [r0, #0]
 801798c:	2000      	movs	r0, #0
 801798e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017992:	4834      	ldr	r0, [pc, #208]	@ (8017a64 <_strtol_l.constprop.0+0xf0>)
 8017994:	460d      	mov	r5, r1
 8017996:	462a      	mov	r2, r5
 8017998:	f815 4b01 	ldrb.w	r4, [r5], #1
 801799c:	5d06      	ldrb	r6, [r0, r4]
 801799e:	f016 0608 	ands.w	r6, r6, #8
 80179a2:	d1f8      	bne.n	8017996 <_strtol_l.constprop.0+0x22>
 80179a4:	2c2d      	cmp	r4, #45	@ 0x2d
 80179a6:	d12d      	bne.n	8017a04 <_strtol_l.constprop.0+0x90>
 80179a8:	782c      	ldrb	r4, [r5, #0]
 80179aa:	2601      	movs	r6, #1
 80179ac:	1c95      	adds	r5, r2, #2
 80179ae:	f033 0210 	bics.w	r2, r3, #16
 80179b2:	d109      	bne.n	80179c8 <_strtol_l.constprop.0+0x54>
 80179b4:	2c30      	cmp	r4, #48	@ 0x30
 80179b6:	d12a      	bne.n	8017a0e <_strtol_l.constprop.0+0x9a>
 80179b8:	782a      	ldrb	r2, [r5, #0]
 80179ba:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80179be:	2a58      	cmp	r2, #88	@ 0x58
 80179c0:	d125      	bne.n	8017a0e <_strtol_l.constprop.0+0x9a>
 80179c2:	786c      	ldrb	r4, [r5, #1]
 80179c4:	2310      	movs	r3, #16
 80179c6:	3502      	adds	r5, #2
 80179c8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80179cc:	f10c 3cff 	add.w	ip, ip, #4294967295
 80179d0:	2200      	movs	r2, #0
 80179d2:	fbbc f9f3 	udiv	r9, ip, r3
 80179d6:	4610      	mov	r0, r2
 80179d8:	fb03 ca19 	mls	sl, r3, r9, ip
 80179dc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80179e0:	2f09      	cmp	r7, #9
 80179e2:	d81b      	bhi.n	8017a1c <_strtol_l.constprop.0+0xa8>
 80179e4:	463c      	mov	r4, r7
 80179e6:	42a3      	cmp	r3, r4
 80179e8:	dd27      	ble.n	8017a3a <_strtol_l.constprop.0+0xc6>
 80179ea:	1c57      	adds	r7, r2, #1
 80179ec:	d007      	beq.n	80179fe <_strtol_l.constprop.0+0x8a>
 80179ee:	4581      	cmp	r9, r0
 80179f0:	d320      	bcc.n	8017a34 <_strtol_l.constprop.0+0xc0>
 80179f2:	d101      	bne.n	80179f8 <_strtol_l.constprop.0+0x84>
 80179f4:	45a2      	cmp	sl, r4
 80179f6:	db1d      	blt.n	8017a34 <_strtol_l.constprop.0+0xc0>
 80179f8:	fb00 4003 	mla	r0, r0, r3, r4
 80179fc:	2201      	movs	r2, #1
 80179fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017a02:	e7eb      	b.n	80179dc <_strtol_l.constprop.0+0x68>
 8017a04:	2c2b      	cmp	r4, #43	@ 0x2b
 8017a06:	bf04      	itt	eq
 8017a08:	782c      	ldrbeq	r4, [r5, #0]
 8017a0a:	1c95      	addeq	r5, r2, #2
 8017a0c:	e7cf      	b.n	80179ae <_strtol_l.constprop.0+0x3a>
 8017a0e:	2b00      	cmp	r3, #0
 8017a10:	d1da      	bne.n	80179c8 <_strtol_l.constprop.0+0x54>
 8017a12:	2c30      	cmp	r4, #48	@ 0x30
 8017a14:	bf0c      	ite	eq
 8017a16:	2308      	moveq	r3, #8
 8017a18:	230a      	movne	r3, #10
 8017a1a:	e7d5      	b.n	80179c8 <_strtol_l.constprop.0+0x54>
 8017a1c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8017a20:	2f19      	cmp	r7, #25
 8017a22:	d801      	bhi.n	8017a28 <_strtol_l.constprop.0+0xb4>
 8017a24:	3c37      	subs	r4, #55	@ 0x37
 8017a26:	e7de      	b.n	80179e6 <_strtol_l.constprop.0+0x72>
 8017a28:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8017a2c:	2f19      	cmp	r7, #25
 8017a2e:	d804      	bhi.n	8017a3a <_strtol_l.constprop.0+0xc6>
 8017a30:	3c57      	subs	r4, #87	@ 0x57
 8017a32:	e7d8      	b.n	80179e6 <_strtol_l.constprop.0+0x72>
 8017a34:	f04f 32ff 	mov.w	r2, #4294967295
 8017a38:	e7e1      	b.n	80179fe <_strtol_l.constprop.0+0x8a>
 8017a3a:	1c53      	adds	r3, r2, #1
 8017a3c:	d108      	bne.n	8017a50 <_strtol_l.constprop.0+0xdc>
 8017a3e:	2322      	movs	r3, #34	@ 0x22
 8017a40:	f8ce 3000 	str.w	r3, [lr]
 8017a44:	4660      	mov	r0, ip
 8017a46:	f1b8 0f00 	cmp.w	r8, #0
 8017a4a:	d0a0      	beq.n	801798e <_strtol_l.constprop.0+0x1a>
 8017a4c:	1e69      	subs	r1, r5, #1
 8017a4e:	e006      	b.n	8017a5e <_strtol_l.constprop.0+0xea>
 8017a50:	b106      	cbz	r6, 8017a54 <_strtol_l.constprop.0+0xe0>
 8017a52:	4240      	negs	r0, r0
 8017a54:	f1b8 0f00 	cmp.w	r8, #0
 8017a58:	d099      	beq.n	801798e <_strtol_l.constprop.0+0x1a>
 8017a5a:	2a00      	cmp	r2, #0
 8017a5c:	d1f6      	bne.n	8017a4c <_strtol_l.constprop.0+0xd8>
 8017a5e:	f8c8 1000 	str.w	r1, [r8]
 8017a62:	e794      	b.n	801798e <_strtol_l.constprop.0+0x1a>
 8017a64:	08019e79 	.word	0x08019e79

08017a68 <strtol>:
 8017a68:	4613      	mov	r3, r2
 8017a6a:	460a      	mov	r2, r1
 8017a6c:	4601      	mov	r1, r0
 8017a6e:	4802      	ldr	r0, [pc, #8]	@ (8017a78 <strtol+0x10>)
 8017a70:	6800      	ldr	r0, [r0, #0]
 8017a72:	f7ff bf7f 	b.w	8017974 <_strtol_l.constprop.0>
 8017a76:	bf00      	nop
 8017a78:	24000240 	.word	0x24000240

08017a7c <std>:
 8017a7c:	2300      	movs	r3, #0
 8017a7e:	b510      	push	{r4, lr}
 8017a80:	4604      	mov	r4, r0
 8017a82:	e9c0 3300 	strd	r3, r3, [r0]
 8017a86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017a8a:	6083      	str	r3, [r0, #8]
 8017a8c:	8181      	strh	r1, [r0, #12]
 8017a8e:	6643      	str	r3, [r0, #100]	@ 0x64
 8017a90:	81c2      	strh	r2, [r0, #14]
 8017a92:	6183      	str	r3, [r0, #24]
 8017a94:	4619      	mov	r1, r3
 8017a96:	2208      	movs	r2, #8
 8017a98:	305c      	adds	r0, #92	@ 0x5c
 8017a9a:	f000 f8f4 	bl	8017c86 <memset>
 8017a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8017ad4 <std+0x58>)
 8017aa0:	6263      	str	r3, [r4, #36]	@ 0x24
 8017aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8017ad8 <std+0x5c>)
 8017aa4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8017aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8017adc <std+0x60>)
 8017aa8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8017aaa:	4b0d      	ldr	r3, [pc, #52]	@ (8017ae0 <std+0x64>)
 8017aac:	6323      	str	r3, [r4, #48]	@ 0x30
 8017aae:	4b0d      	ldr	r3, [pc, #52]	@ (8017ae4 <std+0x68>)
 8017ab0:	6224      	str	r4, [r4, #32]
 8017ab2:	429c      	cmp	r4, r3
 8017ab4:	d006      	beq.n	8017ac4 <std+0x48>
 8017ab6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8017aba:	4294      	cmp	r4, r2
 8017abc:	d002      	beq.n	8017ac4 <std+0x48>
 8017abe:	33d0      	adds	r3, #208	@ 0xd0
 8017ac0:	429c      	cmp	r4, r3
 8017ac2:	d105      	bne.n	8017ad0 <std+0x54>
 8017ac4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8017ac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017acc:	f000 b972 	b.w	8017db4 <__retarget_lock_init_recursive>
 8017ad0:	bd10      	pop	{r4, pc}
 8017ad2:	bf00      	nop
 8017ad4:	08017c01 	.word	0x08017c01
 8017ad8:	08017c23 	.word	0x08017c23
 8017adc:	08017c5b 	.word	0x08017c5b
 8017ae0:	08017c7f 	.word	0x08017c7f
 8017ae4:	24006730 	.word	0x24006730

08017ae8 <stdio_exit_handler>:
 8017ae8:	4a02      	ldr	r2, [pc, #8]	@ (8017af4 <stdio_exit_handler+0xc>)
 8017aea:	4903      	ldr	r1, [pc, #12]	@ (8017af8 <stdio_exit_handler+0x10>)
 8017aec:	4803      	ldr	r0, [pc, #12]	@ (8017afc <stdio_exit_handler+0x14>)
 8017aee:	f000 b869 	b.w	8017bc4 <_fwalk_sglue>
 8017af2:	bf00      	nop
 8017af4:	240000c8 	.word	0x240000c8
 8017af8:	080190f1 	.word	0x080190f1
 8017afc:	24000244 	.word	0x24000244

08017b00 <cleanup_stdio>:
 8017b00:	6841      	ldr	r1, [r0, #4]
 8017b02:	4b0c      	ldr	r3, [pc, #48]	@ (8017b34 <cleanup_stdio+0x34>)
 8017b04:	4299      	cmp	r1, r3
 8017b06:	b510      	push	{r4, lr}
 8017b08:	4604      	mov	r4, r0
 8017b0a:	d001      	beq.n	8017b10 <cleanup_stdio+0x10>
 8017b0c:	f001 faf0 	bl	80190f0 <_fflush_r>
 8017b10:	68a1      	ldr	r1, [r4, #8]
 8017b12:	4b09      	ldr	r3, [pc, #36]	@ (8017b38 <cleanup_stdio+0x38>)
 8017b14:	4299      	cmp	r1, r3
 8017b16:	d002      	beq.n	8017b1e <cleanup_stdio+0x1e>
 8017b18:	4620      	mov	r0, r4
 8017b1a:	f001 fae9 	bl	80190f0 <_fflush_r>
 8017b1e:	68e1      	ldr	r1, [r4, #12]
 8017b20:	4b06      	ldr	r3, [pc, #24]	@ (8017b3c <cleanup_stdio+0x3c>)
 8017b22:	4299      	cmp	r1, r3
 8017b24:	d004      	beq.n	8017b30 <cleanup_stdio+0x30>
 8017b26:	4620      	mov	r0, r4
 8017b28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017b2c:	f001 bae0 	b.w	80190f0 <_fflush_r>
 8017b30:	bd10      	pop	{r4, pc}
 8017b32:	bf00      	nop
 8017b34:	24006730 	.word	0x24006730
 8017b38:	24006798 	.word	0x24006798
 8017b3c:	24006800 	.word	0x24006800

08017b40 <global_stdio_init.part.0>:
 8017b40:	b510      	push	{r4, lr}
 8017b42:	4b0b      	ldr	r3, [pc, #44]	@ (8017b70 <global_stdio_init.part.0+0x30>)
 8017b44:	4c0b      	ldr	r4, [pc, #44]	@ (8017b74 <global_stdio_init.part.0+0x34>)
 8017b46:	4a0c      	ldr	r2, [pc, #48]	@ (8017b78 <global_stdio_init.part.0+0x38>)
 8017b48:	601a      	str	r2, [r3, #0]
 8017b4a:	4620      	mov	r0, r4
 8017b4c:	2200      	movs	r2, #0
 8017b4e:	2104      	movs	r1, #4
 8017b50:	f7ff ff94 	bl	8017a7c <std>
 8017b54:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8017b58:	2201      	movs	r2, #1
 8017b5a:	2109      	movs	r1, #9
 8017b5c:	f7ff ff8e 	bl	8017a7c <std>
 8017b60:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8017b64:	2202      	movs	r2, #2
 8017b66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017b6a:	2112      	movs	r1, #18
 8017b6c:	f7ff bf86 	b.w	8017a7c <std>
 8017b70:	24006868 	.word	0x24006868
 8017b74:	24006730 	.word	0x24006730
 8017b78:	08017ae9 	.word	0x08017ae9

08017b7c <__sfp_lock_acquire>:
 8017b7c:	4801      	ldr	r0, [pc, #4]	@ (8017b84 <__sfp_lock_acquire+0x8>)
 8017b7e:	f000 b91a 	b.w	8017db6 <__retarget_lock_acquire_recursive>
 8017b82:	bf00      	nop
 8017b84:	24006871 	.word	0x24006871

08017b88 <__sfp_lock_release>:
 8017b88:	4801      	ldr	r0, [pc, #4]	@ (8017b90 <__sfp_lock_release+0x8>)
 8017b8a:	f000 b915 	b.w	8017db8 <__retarget_lock_release_recursive>
 8017b8e:	bf00      	nop
 8017b90:	24006871 	.word	0x24006871

08017b94 <__sinit>:
 8017b94:	b510      	push	{r4, lr}
 8017b96:	4604      	mov	r4, r0
 8017b98:	f7ff fff0 	bl	8017b7c <__sfp_lock_acquire>
 8017b9c:	6a23      	ldr	r3, [r4, #32]
 8017b9e:	b11b      	cbz	r3, 8017ba8 <__sinit+0x14>
 8017ba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017ba4:	f7ff bff0 	b.w	8017b88 <__sfp_lock_release>
 8017ba8:	4b04      	ldr	r3, [pc, #16]	@ (8017bbc <__sinit+0x28>)
 8017baa:	6223      	str	r3, [r4, #32]
 8017bac:	4b04      	ldr	r3, [pc, #16]	@ (8017bc0 <__sinit+0x2c>)
 8017bae:	681b      	ldr	r3, [r3, #0]
 8017bb0:	2b00      	cmp	r3, #0
 8017bb2:	d1f5      	bne.n	8017ba0 <__sinit+0xc>
 8017bb4:	f7ff ffc4 	bl	8017b40 <global_stdio_init.part.0>
 8017bb8:	e7f2      	b.n	8017ba0 <__sinit+0xc>
 8017bba:	bf00      	nop
 8017bbc:	08017b01 	.word	0x08017b01
 8017bc0:	24006868 	.word	0x24006868

08017bc4 <_fwalk_sglue>:
 8017bc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017bc8:	4607      	mov	r7, r0
 8017bca:	4688      	mov	r8, r1
 8017bcc:	4614      	mov	r4, r2
 8017bce:	2600      	movs	r6, #0
 8017bd0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017bd4:	f1b9 0901 	subs.w	r9, r9, #1
 8017bd8:	d505      	bpl.n	8017be6 <_fwalk_sglue+0x22>
 8017bda:	6824      	ldr	r4, [r4, #0]
 8017bdc:	2c00      	cmp	r4, #0
 8017bde:	d1f7      	bne.n	8017bd0 <_fwalk_sglue+0xc>
 8017be0:	4630      	mov	r0, r6
 8017be2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017be6:	89ab      	ldrh	r3, [r5, #12]
 8017be8:	2b01      	cmp	r3, #1
 8017bea:	d907      	bls.n	8017bfc <_fwalk_sglue+0x38>
 8017bec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017bf0:	3301      	adds	r3, #1
 8017bf2:	d003      	beq.n	8017bfc <_fwalk_sglue+0x38>
 8017bf4:	4629      	mov	r1, r5
 8017bf6:	4638      	mov	r0, r7
 8017bf8:	47c0      	blx	r8
 8017bfa:	4306      	orrs	r6, r0
 8017bfc:	3568      	adds	r5, #104	@ 0x68
 8017bfe:	e7e9      	b.n	8017bd4 <_fwalk_sglue+0x10>

08017c00 <__sread>:
 8017c00:	b510      	push	{r4, lr}
 8017c02:	460c      	mov	r4, r1
 8017c04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017c08:	f000 f886 	bl	8017d18 <_read_r>
 8017c0c:	2800      	cmp	r0, #0
 8017c0e:	bfab      	itete	ge
 8017c10:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8017c12:	89a3      	ldrhlt	r3, [r4, #12]
 8017c14:	181b      	addge	r3, r3, r0
 8017c16:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8017c1a:	bfac      	ite	ge
 8017c1c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8017c1e:	81a3      	strhlt	r3, [r4, #12]
 8017c20:	bd10      	pop	{r4, pc}

08017c22 <__swrite>:
 8017c22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c26:	461f      	mov	r7, r3
 8017c28:	898b      	ldrh	r3, [r1, #12]
 8017c2a:	05db      	lsls	r3, r3, #23
 8017c2c:	4605      	mov	r5, r0
 8017c2e:	460c      	mov	r4, r1
 8017c30:	4616      	mov	r6, r2
 8017c32:	d505      	bpl.n	8017c40 <__swrite+0x1e>
 8017c34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017c38:	2302      	movs	r3, #2
 8017c3a:	2200      	movs	r2, #0
 8017c3c:	f000 f85a 	bl	8017cf4 <_lseek_r>
 8017c40:	89a3      	ldrh	r3, [r4, #12]
 8017c42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017c46:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8017c4a:	81a3      	strh	r3, [r4, #12]
 8017c4c:	4632      	mov	r2, r6
 8017c4e:	463b      	mov	r3, r7
 8017c50:	4628      	mov	r0, r5
 8017c52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017c56:	f000 b871 	b.w	8017d3c <_write_r>

08017c5a <__sseek>:
 8017c5a:	b510      	push	{r4, lr}
 8017c5c:	460c      	mov	r4, r1
 8017c5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017c62:	f000 f847 	bl	8017cf4 <_lseek_r>
 8017c66:	1c43      	adds	r3, r0, #1
 8017c68:	89a3      	ldrh	r3, [r4, #12]
 8017c6a:	bf15      	itete	ne
 8017c6c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8017c6e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8017c72:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8017c76:	81a3      	strheq	r3, [r4, #12]
 8017c78:	bf18      	it	ne
 8017c7a:	81a3      	strhne	r3, [r4, #12]
 8017c7c:	bd10      	pop	{r4, pc}

08017c7e <__sclose>:
 8017c7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017c82:	f000 b827 	b.w	8017cd4 <_close_r>

08017c86 <memset>:
 8017c86:	4402      	add	r2, r0
 8017c88:	4603      	mov	r3, r0
 8017c8a:	4293      	cmp	r3, r2
 8017c8c:	d100      	bne.n	8017c90 <memset+0xa>
 8017c8e:	4770      	bx	lr
 8017c90:	f803 1b01 	strb.w	r1, [r3], #1
 8017c94:	e7f9      	b.n	8017c8a <memset+0x4>

08017c96 <strchr>:
 8017c96:	b2c9      	uxtb	r1, r1
 8017c98:	4603      	mov	r3, r0
 8017c9a:	4618      	mov	r0, r3
 8017c9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017ca0:	b112      	cbz	r2, 8017ca8 <strchr+0x12>
 8017ca2:	428a      	cmp	r2, r1
 8017ca4:	d1f9      	bne.n	8017c9a <strchr+0x4>
 8017ca6:	4770      	bx	lr
 8017ca8:	2900      	cmp	r1, #0
 8017caa:	bf18      	it	ne
 8017cac:	2000      	movne	r0, #0
 8017cae:	4770      	bx	lr

08017cb0 <strncmp>:
 8017cb0:	b510      	push	{r4, lr}
 8017cb2:	b16a      	cbz	r2, 8017cd0 <strncmp+0x20>
 8017cb4:	3901      	subs	r1, #1
 8017cb6:	1884      	adds	r4, r0, r2
 8017cb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017cbc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8017cc0:	429a      	cmp	r2, r3
 8017cc2:	d103      	bne.n	8017ccc <strncmp+0x1c>
 8017cc4:	42a0      	cmp	r0, r4
 8017cc6:	d001      	beq.n	8017ccc <strncmp+0x1c>
 8017cc8:	2a00      	cmp	r2, #0
 8017cca:	d1f5      	bne.n	8017cb8 <strncmp+0x8>
 8017ccc:	1ad0      	subs	r0, r2, r3
 8017cce:	bd10      	pop	{r4, pc}
 8017cd0:	4610      	mov	r0, r2
 8017cd2:	e7fc      	b.n	8017cce <strncmp+0x1e>

08017cd4 <_close_r>:
 8017cd4:	b538      	push	{r3, r4, r5, lr}
 8017cd6:	4d06      	ldr	r5, [pc, #24]	@ (8017cf0 <_close_r+0x1c>)
 8017cd8:	2300      	movs	r3, #0
 8017cda:	4604      	mov	r4, r0
 8017cdc:	4608      	mov	r0, r1
 8017cde:	602b      	str	r3, [r5, #0]
 8017ce0:	f7eb fd18 	bl	8003714 <_close>
 8017ce4:	1c43      	adds	r3, r0, #1
 8017ce6:	d102      	bne.n	8017cee <_close_r+0x1a>
 8017ce8:	682b      	ldr	r3, [r5, #0]
 8017cea:	b103      	cbz	r3, 8017cee <_close_r+0x1a>
 8017cec:	6023      	str	r3, [r4, #0]
 8017cee:	bd38      	pop	{r3, r4, r5, pc}
 8017cf0:	2400686c 	.word	0x2400686c

08017cf4 <_lseek_r>:
 8017cf4:	b538      	push	{r3, r4, r5, lr}
 8017cf6:	4d07      	ldr	r5, [pc, #28]	@ (8017d14 <_lseek_r+0x20>)
 8017cf8:	4604      	mov	r4, r0
 8017cfa:	4608      	mov	r0, r1
 8017cfc:	4611      	mov	r1, r2
 8017cfe:	2200      	movs	r2, #0
 8017d00:	602a      	str	r2, [r5, #0]
 8017d02:	461a      	mov	r2, r3
 8017d04:	f7eb fd2d 	bl	8003762 <_lseek>
 8017d08:	1c43      	adds	r3, r0, #1
 8017d0a:	d102      	bne.n	8017d12 <_lseek_r+0x1e>
 8017d0c:	682b      	ldr	r3, [r5, #0]
 8017d0e:	b103      	cbz	r3, 8017d12 <_lseek_r+0x1e>
 8017d10:	6023      	str	r3, [r4, #0]
 8017d12:	bd38      	pop	{r3, r4, r5, pc}
 8017d14:	2400686c 	.word	0x2400686c

08017d18 <_read_r>:
 8017d18:	b538      	push	{r3, r4, r5, lr}
 8017d1a:	4d07      	ldr	r5, [pc, #28]	@ (8017d38 <_read_r+0x20>)
 8017d1c:	4604      	mov	r4, r0
 8017d1e:	4608      	mov	r0, r1
 8017d20:	4611      	mov	r1, r2
 8017d22:	2200      	movs	r2, #0
 8017d24:	602a      	str	r2, [r5, #0]
 8017d26:	461a      	mov	r2, r3
 8017d28:	f7eb fcbb 	bl	80036a2 <_read>
 8017d2c:	1c43      	adds	r3, r0, #1
 8017d2e:	d102      	bne.n	8017d36 <_read_r+0x1e>
 8017d30:	682b      	ldr	r3, [r5, #0]
 8017d32:	b103      	cbz	r3, 8017d36 <_read_r+0x1e>
 8017d34:	6023      	str	r3, [r4, #0]
 8017d36:	bd38      	pop	{r3, r4, r5, pc}
 8017d38:	2400686c 	.word	0x2400686c

08017d3c <_write_r>:
 8017d3c:	b538      	push	{r3, r4, r5, lr}
 8017d3e:	4d07      	ldr	r5, [pc, #28]	@ (8017d5c <_write_r+0x20>)
 8017d40:	4604      	mov	r4, r0
 8017d42:	4608      	mov	r0, r1
 8017d44:	4611      	mov	r1, r2
 8017d46:	2200      	movs	r2, #0
 8017d48:	602a      	str	r2, [r5, #0]
 8017d4a:	461a      	mov	r2, r3
 8017d4c:	f7eb fcc6 	bl	80036dc <_write>
 8017d50:	1c43      	adds	r3, r0, #1
 8017d52:	d102      	bne.n	8017d5a <_write_r+0x1e>
 8017d54:	682b      	ldr	r3, [r5, #0]
 8017d56:	b103      	cbz	r3, 8017d5a <_write_r+0x1e>
 8017d58:	6023      	str	r3, [r4, #0]
 8017d5a:	bd38      	pop	{r3, r4, r5, pc}
 8017d5c:	2400686c 	.word	0x2400686c

08017d60 <__errno>:
 8017d60:	4b01      	ldr	r3, [pc, #4]	@ (8017d68 <__errno+0x8>)
 8017d62:	6818      	ldr	r0, [r3, #0]
 8017d64:	4770      	bx	lr
 8017d66:	bf00      	nop
 8017d68:	24000240 	.word	0x24000240

08017d6c <__libc_init_array>:
 8017d6c:	b570      	push	{r4, r5, r6, lr}
 8017d6e:	4d0d      	ldr	r5, [pc, #52]	@ (8017da4 <__libc_init_array+0x38>)
 8017d70:	4c0d      	ldr	r4, [pc, #52]	@ (8017da8 <__libc_init_array+0x3c>)
 8017d72:	1b64      	subs	r4, r4, r5
 8017d74:	10a4      	asrs	r4, r4, #2
 8017d76:	2600      	movs	r6, #0
 8017d78:	42a6      	cmp	r6, r4
 8017d7a:	d109      	bne.n	8017d90 <__libc_init_array+0x24>
 8017d7c:	4d0b      	ldr	r5, [pc, #44]	@ (8017dac <__libc_init_array+0x40>)
 8017d7e:	4c0c      	ldr	r4, [pc, #48]	@ (8017db0 <__libc_init_array+0x44>)
 8017d80:	f001 ff9a 	bl	8019cb8 <_init>
 8017d84:	1b64      	subs	r4, r4, r5
 8017d86:	10a4      	asrs	r4, r4, #2
 8017d88:	2600      	movs	r6, #0
 8017d8a:	42a6      	cmp	r6, r4
 8017d8c:	d105      	bne.n	8017d9a <__libc_init_array+0x2e>
 8017d8e:	bd70      	pop	{r4, r5, r6, pc}
 8017d90:	f855 3b04 	ldr.w	r3, [r5], #4
 8017d94:	4798      	blx	r3
 8017d96:	3601      	adds	r6, #1
 8017d98:	e7ee      	b.n	8017d78 <__libc_init_array+0xc>
 8017d9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8017d9e:	4798      	blx	r3
 8017da0:	3601      	adds	r6, #1
 8017da2:	e7f2      	b.n	8017d8a <__libc_init_array+0x1e>
 8017da4:	0801aa68 	.word	0x0801aa68
 8017da8:	0801aa68 	.word	0x0801aa68
 8017dac:	0801aa68 	.word	0x0801aa68
 8017db0:	0801aa6c 	.word	0x0801aa6c

08017db4 <__retarget_lock_init_recursive>:
 8017db4:	4770      	bx	lr

08017db6 <__retarget_lock_acquire_recursive>:
 8017db6:	4770      	bx	lr

08017db8 <__retarget_lock_release_recursive>:
 8017db8:	4770      	bx	lr

08017dba <memcpy>:
 8017dba:	440a      	add	r2, r1
 8017dbc:	4291      	cmp	r1, r2
 8017dbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8017dc2:	d100      	bne.n	8017dc6 <memcpy+0xc>
 8017dc4:	4770      	bx	lr
 8017dc6:	b510      	push	{r4, lr}
 8017dc8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017dcc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017dd0:	4291      	cmp	r1, r2
 8017dd2:	d1f9      	bne.n	8017dc8 <memcpy+0xe>
 8017dd4:	bd10      	pop	{r4, pc}
	...

08017dd8 <nan>:
 8017dd8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8017de0 <nan+0x8>
 8017ddc:	4770      	bx	lr
 8017dde:	bf00      	nop
 8017de0:	00000000 	.word	0x00000000
 8017de4:	7ff80000 	.word	0x7ff80000

08017de8 <_free_r>:
 8017de8:	b538      	push	{r3, r4, r5, lr}
 8017dea:	4605      	mov	r5, r0
 8017dec:	2900      	cmp	r1, #0
 8017dee:	d041      	beq.n	8017e74 <_free_r+0x8c>
 8017df0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017df4:	1f0c      	subs	r4, r1, #4
 8017df6:	2b00      	cmp	r3, #0
 8017df8:	bfb8      	it	lt
 8017dfa:	18e4      	addlt	r4, r4, r3
 8017dfc:	f000 fc2c 	bl	8018658 <__malloc_lock>
 8017e00:	4a1d      	ldr	r2, [pc, #116]	@ (8017e78 <_free_r+0x90>)
 8017e02:	6813      	ldr	r3, [r2, #0]
 8017e04:	b933      	cbnz	r3, 8017e14 <_free_r+0x2c>
 8017e06:	6063      	str	r3, [r4, #4]
 8017e08:	6014      	str	r4, [r2, #0]
 8017e0a:	4628      	mov	r0, r5
 8017e0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017e10:	f000 bc28 	b.w	8018664 <__malloc_unlock>
 8017e14:	42a3      	cmp	r3, r4
 8017e16:	d908      	bls.n	8017e2a <_free_r+0x42>
 8017e18:	6820      	ldr	r0, [r4, #0]
 8017e1a:	1821      	adds	r1, r4, r0
 8017e1c:	428b      	cmp	r3, r1
 8017e1e:	bf01      	itttt	eq
 8017e20:	6819      	ldreq	r1, [r3, #0]
 8017e22:	685b      	ldreq	r3, [r3, #4]
 8017e24:	1809      	addeq	r1, r1, r0
 8017e26:	6021      	streq	r1, [r4, #0]
 8017e28:	e7ed      	b.n	8017e06 <_free_r+0x1e>
 8017e2a:	461a      	mov	r2, r3
 8017e2c:	685b      	ldr	r3, [r3, #4]
 8017e2e:	b10b      	cbz	r3, 8017e34 <_free_r+0x4c>
 8017e30:	42a3      	cmp	r3, r4
 8017e32:	d9fa      	bls.n	8017e2a <_free_r+0x42>
 8017e34:	6811      	ldr	r1, [r2, #0]
 8017e36:	1850      	adds	r0, r2, r1
 8017e38:	42a0      	cmp	r0, r4
 8017e3a:	d10b      	bne.n	8017e54 <_free_r+0x6c>
 8017e3c:	6820      	ldr	r0, [r4, #0]
 8017e3e:	4401      	add	r1, r0
 8017e40:	1850      	adds	r0, r2, r1
 8017e42:	4283      	cmp	r3, r0
 8017e44:	6011      	str	r1, [r2, #0]
 8017e46:	d1e0      	bne.n	8017e0a <_free_r+0x22>
 8017e48:	6818      	ldr	r0, [r3, #0]
 8017e4a:	685b      	ldr	r3, [r3, #4]
 8017e4c:	6053      	str	r3, [r2, #4]
 8017e4e:	4408      	add	r0, r1
 8017e50:	6010      	str	r0, [r2, #0]
 8017e52:	e7da      	b.n	8017e0a <_free_r+0x22>
 8017e54:	d902      	bls.n	8017e5c <_free_r+0x74>
 8017e56:	230c      	movs	r3, #12
 8017e58:	602b      	str	r3, [r5, #0]
 8017e5a:	e7d6      	b.n	8017e0a <_free_r+0x22>
 8017e5c:	6820      	ldr	r0, [r4, #0]
 8017e5e:	1821      	adds	r1, r4, r0
 8017e60:	428b      	cmp	r3, r1
 8017e62:	bf04      	itt	eq
 8017e64:	6819      	ldreq	r1, [r3, #0]
 8017e66:	685b      	ldreq	r3, [r3, #4]
 8017e68:	6063      	str	r3, [r4, #4]
 8017e6a:	bf04      	itt	eq
 8017e6c:	1809      	addeq	r1, r1, r0
 8017e6e:	6021      	streq	r1, [r4, #0]
 8017e70:	6054      	str	r4, [r2, #4]
 8017e72:	e7ca      	b.n	8017e0a <_free_r+0x22>
 8017e74:	bd38      	pop	{r3, r4, r5, pc}
 8017e76:	bf00      	nop
 8017e78:	24006878 	.word	0x24006878

08017e7c <rshift>:
 8017e7c:	6903      	ldr	r3, [r0, #16]
 8017e7e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8017e82:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017e86:	ea4f 1261 	mov.w	r2, r1, asr #5
 8017e8a:	f100 0414 	add.w	r4, r0, #20
 8017e8e:	dd45      	ble.n	8017f1c <rshift+0xa0>
 8017e90:	f011 011f 	ands.w	r1, r1, #31
 8017e94:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8017e98:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8017e9c:	d10c      	bne.n	8017eb8 <rshift+0x3c>
 8017e9e:	f100 0710 	add.w	r7, r0, #16
 8017ea2:	4629      	mov	r1, r5
 8017ea4:	42b1      	cmp	r1, r6
 8017ea6:	d334      	bcc.n	8017f12 <rshift+0x96>
 8017ea8:	1a9b      	subs	r3, r3, r2
 8017eaa:	009b      	lsls	r3, r3, #2
 8017eac:	1eea      	subs	r2, r5, #3
 8017eae:	4296      	cmp	r6, r2
 8017eb0:	bf38      	it	cc
 8017eb2:	2300      	movcc	r3, #0
 8017eb4:	4423      	add	r3, r4
 8017eb6:	e015      	b.n	8017ee4 <rshift+0x68>
 8017eb8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8017ebc:	f1c1 0820 	rsb	r8, r1, #32
 8017ec0:	40cf      	lsrs	r7, r1
 8017ec2:	f105 0e04 	add.w	lr, r5, #4
 8017ec6:	46a1      	mov	r9, r4
 8017ec8:	4576      	cmp	r6, lr
 8017eca:	46f4      	mov	ip, lr
 8017ecc:	d815      	bhi.n	8017efa <rshift+0x7e>
 8017ece:	1a9a      	subs	r2, r3, r2
 8017ed0:	0092      	lsls	r2, r2, #2
 8017ed2:	3a04      	subs	r2, #4
 8017ed4:	3501      	adds	r5, #1
 8017ed6:	42ae      	cmp	r6, r5
 8017ed8:	bf38      	it	cc
 8017eda:	2200      	movcc	r2, #0
 8017edc:	18a3      	adds	r3, r4, r2
 8017ede:	50a7      	str	r7, [r4, r2]
 8017ee0:	b107      	cbz	r7, 8017ee4 <rshift+0x68>
 8017ee2:	3304      	adds	r3, #4
 8017ee4:	1b1a      	subs	r2, r3, r4
 8017ee6:	42a3      	cmp	r3, r4
 8017ee8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8017eec:	bf08      	it	eq
 8017eee:	2300      	moveq	r3, #0
 8017ef0:	6102      	str	r2, [r0, #16]
 8017ef2:	bf08      	it	eq
 8017ef4:	6143      	streq	r3, [r0, #20]
 8017ef6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017efa:	f8dc c000 	ldr.w	ip, [ip]
 8017efe:	fa0c fc08 	lsl.w	ip, ip, r8
 8017f02:	ea4c 0707 	orr.w	r7, ip, r7
 8017f06:	f849 7b04 	str.w	r7, [r9], #4
 8017f0a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8017f0e:	40cf      	lsrs	r7, r1
 8017f10:	e7da      	b.n	8017ec8 <rshift+0x4c>
 8017f12:	f851 cb04 	ldr.w	ip, [r1], #4
 8017f16:	f847 cf04 	str.w	ip, [r7, #4]!
 8017f1a:	e7c3      	b.n	8017ea4 <rshift+0x28>
 8017f1c:	4623      	mov	r3, r4
 8017f1e:	e7e1      	b.n	8017ee4 <rshift+0x68>

08017f20 <__hexdig_fun>:
 8017f20:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8017f24:	2b09      	cmp	r3, #9
 8017f26:	d802      	bhi.n	8017f2e <__hexdig_fun+0xe>
 8017f28:	3820      	subs	r0, #32
 8017f2a:	b2c0      	uxtb	r0, r0
 8017f2c:	4770      	bx	lr
 8017f2e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8017f32:	2b05      	cmp	r3, #5
 8017f34:	d801      	bhi.n	8017f3a <__hexdig_fun+0x1a>
 8017f36:	3847      	subs	r0, #71	@ 0x47
 8017f38:	e7f7      	b.n	8017f2a <__hexdig_fun+0xa>
 8017f3a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8017f3e:	2b05      	cmp	r3, #5
 8017f40:	d801      	bhi.n	8017f46 <__hexdig_fun+0x26>
 8017f42:	3827      	subs	r0, #39	@ 0x27
 8017f44:	e7f1      	b.n	8017f2a <__hexdig_fun+0xa>
 8017f46:	2000      	movs	r0, #0
 8017f48:	4770      	bx	lr
	...

08017f4c <__gethex>:
 8017f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f50:	b085      	sub	sp, #20
 8017f52:	468a      	mov	sl, r1
 8017f54:	9302      	str	r3, [sp, #8]
 8017f56:	680b      	ldr	r3, [r1, #0]
 8017f58:	9001      	str	r0, [sp, #4]
 8017f5a:	4690      	mov	r8, r2
 8017f5c:	1c9c      	adds	r4, r3, #2
 8017f5e:	46a1      	mov	r9, r4
 8017f60:	f814 0b01 	ldrb.w	r0, [r4], #1
 8017f64:	2830      	cmp	r0, #48	@ 0x30
 8017f66:	d0fa      	beq.n	8017f5e <__gethex+0x12>
 8017f68:	eba9 0303 	sub.w	r3, r9, r3
 8017f6c:	f1a3 0b02 	sub.w	fp, r3, #2
 8017f70:	f7ff ffd6 	bl	8017f20 <__hexdig_fun>
 8017f74:	4605      	mov	r5, r0
 8017f76:	2800      	cmp	r0, #0
 8017f78:	d168      	bne.n	801804c <__gethex+0x100>
 8017f7a:	49a0      	ldr	r1, [pc, #640]	@ (80181fc <__gethex+0x2b0>)
 8017f7c:	2201      	movs	r2, #1
 8017f7e:	4648      	mov	r0, r9
 8017f80:	f7ff fe96 	bl	8017cb0 <strncmp>
 8017f84:	4607      	mov	r7, r0
 8017f86:	2800      	cmp	r0, #0
 8017f88:	d167      	bne.n	801805a <__gethex+0x10e>
 8017f8a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8017f8e:	4626      	mov	r6, r4
 8017f90:	f7ff ffc6 	bl	8017f20 <__hexdig_fun>
 8017f94:	2800      	cmp	r0, #0
 8017f96:	d062      	beq.n	801805e <__gethex+0x112>
 8017f98:	4623      	mov	r3, r4
 8017f9a:	7818      	ldrb	r0, [r3, #0]
 8017f9c:	2830      	cmp	r0, #48	@ 0x30
 8017f9e:	4699      	mov	r9, r3
 8017fa0:	f103 0301 	add.w	r3, r3, #1
 8017fa4:	d0f9      	beq.n	8017f9a <__gethex+0x4e>
 8017fa6:	f7ff ffbb 	bl	8017f20 <__hexdig_fun>
 8017faa:	fab0 f580 	clz	r5, r0
 8017fae:	096d      	lsrs	r5, r5, #5
 8017fb0:	f04f 0b01 	mov.w	fp, #1
 8017fb4:	464a      	mov	r2, r9
 8017fb6:	4616      	mov	r6, r2
 8017fb8:	3201      	adds	r2, #1
 8017fba:	7830      	ldrb	r0, [r6, #0]
 8017fbc:	f7ff ffb0 	bl	8017f20 <__hexdig_fun>
 8017fc0:	2800      	cmp	r0, #0
 8017fc2:	d1f8      	bne.n	8017fb6 <__gethex+0x6a>
 8017fc4:	498d      	ldr	r1, [pc, #564]	@ (80181fc <__gethex+0x2b0>)
 8017fc6:	2201      	movs	r2, #1
 8017fc8:	4630      	mov	r0, r6
 8017fca:	f7ff fe71 	bl	8017cb0 <strncmp>
 8017fce:	2800      	cmp	r0, #0
 8017fd0:	d13f      	bne.n	8018052 <__gethex+0x106>
 8017fd2:	b944      	cbnz	r4, 8017fe6 <__gethex+0x9a>
 8017fd4:	1c74      	adds	r4, r6, #1
 8017fd6:	4622      	mov	r2, r4
 8017fd8:	4616      	mov	r6, r2
 8017fda:	3201      	adds	r2, #1
 8017fdc:	7830      	ldrb	r0, [r6, #0]
 8017fde:	f7ff ff9f 	bl	8017f20 <__hexdig_fun>
 8017fe2:	2800      	cmp	r0, #0
 8017fe4:	d1f8      	bne.n	8017fd8 <__gethex+0x8c>
 8017fe6:	1ba4      	subs	r4, r4, r6
 8017fe8:	00a7      	lsls	r7, r4, #2
 8017fea:	7833      	ldrb	r3, [r6, #0]
 8017fec:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8017ff0:	2b50      	cmp	r3, #80	@ 0x50
 8017ff2:	d13e      	bne.n	8018072 <__gethex+0x126>
 8017ff4:	7873      	ldrb	r3, [r6, #1]
 8017ff6:	2b2b      	cmp	r3, #43	@ 0x2b
 8017ff8:	d033      	beq.n	8018062 <__gethex+0x116>
 8017ffa:	2b2d      	cmp	r3, #45	@ 0x2d
 8017ffc:	d034      	beq.n	8018068 <__gethex+0x11c>
 8017ffe:	1c71      	adds	r1, r6, #1
 8018000:	2400      	movs	r4, #0
 8018002:	7808      	ldrb	r0, [r1, #0]
 8018004:	f7ff ff8c 	bl	8017f20 <__hexdig_fun>
 8018008:	1e43      	subs	r3, r0, #1
 801800a:	b2db      	uxtb	r3, r3
 801800c:	2b18      	cmp	r3, #24
 801800e:	d830      	bhi.n	8018072 <__gethex+0x126>
 8018010:	f1a0 0210 	sub.w	r2, r0, #16
 8018014:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8018018:	f7ff ff82 	bl	8017f20 <__hexdig_fun>
 801801c:	f100 3cff 	add.w	ip, r0, #4294967295
 8018020:	fa5f fc8c 	uxtb.w	ip, ip
 8018024:	f1bc 0f18 	cmp.w	ip, #24
 8018028:	f04f 030a 	mov.w	r3, #10
 801802c:	d91e      	bls.n	801806c <__gethex+0x120>
 801802e:	b104      	cbz	r4, 8018032 <__gethex+0xe6>
 8018030:	4252      	negs	r2, r2
 8018032:	4417      	add	r7, r2
 8018034:	f8ca 1000 	str.w	r1, [sl]
 8018038:	b1ed      	cbz	r5, 8018076 <__gethex+0x12a>
 801803a:	f1bb 0f00 	cmp.w	fp, #0
 801803e:	bf0c      	ite	eq
 8018040:	2506      	moveq	r5, #6
 8018042:	2500      	movne	r5, #0
 8018044:	4628      	mov	r0, r5
 8018046:	b005      	add	sp, #20
 8018048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801804c:	2500      	movs	r5, #0
 801804e:	462c      	mov	r4, r5
 8018050:	e7b0      	b.n	8017fb4 <__gethex+0x68>
 8018052:	2c00      	cmp	r4, #0
 8018054:	d1c7      	bne.n	8017fe6 <__gethex+0x9a>
 8018056:	4627      	mov	r7, r4
 8018058:	e7c7      	b.n	8017fea <__gethex+0x9e>
 801805a:	464e      	mov	r6, r9
 801805c:	462f      	mov	r7, r5
 801805e:	2501      	movs	r5, #1
 8018060:	e7c3      	b.n	8017fea <__gethex+0x9e>
 8018062:	2400      	movs	r4, #0
 8018064:	1cb1      	adds	r1, r6, #2
 8018066:	e7cc      	b.n	8018002 <__gethex+0xb6>
 8018068:	2401      	movs	r4, #1
 801806a:	e7fb      	b.n	8018064 <__gethex+0x118>
 801806c:	fb03 0002 	mla	r0, r3, r2, r0
 8018070:	e7ce      	b.n	8018010 <__gethex+0xc4>
 8018072:	4631      	mov	r1, r6
 8018074:	e7de      	b.n	8018034 <__gethex+0xe8>
 8018076:	eba6 0309 	sub.w	r3, r6, r9
 801807a:	3b01      	subs	r3, #1
 801807c:	4629      	mov	r1, r5
 801807e:	2b07      	cmp	r3, #7
 8018080:	dc0a      	bgt.n	8018098 <__gethex+0x14c>
 8018082:	9801      	ldr	r0, [sp, #4]
 8018084:	f000 faf4 	bl	8018670 <_Balloc>
 8018088:	4604      	mov	r4, r0
 801808a:	b940      	cbnz	r0, 801809e <__gethex+0x152>
 801808c:	4b5c      	ldr	r3, [pc, #368]	@ (8018200 <__gethex+0x2b4>)
 801808e:	4602      	mov	r2, r0
 8018090:	21e4      	movs	r1, #228	@ 0xe4
 8018092:	485c      	ldr	r0, [pc, #368]	@ (8018204 <__gethex+0x2b8>)
 8018094:	f001 f864 	bl	8019160 <__assert_func>
 8018098:	3101      	adds	r1, #1
 801809a:	105b      	asrs	r3, r3, #1
 801809c:	e7ef      	b.n	801807e <__gethex+0x132>
 801809e:	f100 0a14 	add.w	sl, r0, #20
 80180a2:	2300      	movs	r3, #0
 80180a4:	4655      	mov	r5, sl
 80180a6:	469b      	mov	fp, r3
 80180a8:	45b1      	cmp	r9, r6
 80180aa:	d337      	bcc.n	801811c <__gethex+0x1d0>
 80180ac:	f845 bb04 	str.w	fp, [r5], #4
 80180b0:	eba5 050a 	sub.w	r5, r5, sl
 80180b4:	10ad      	asrs	r5, r5, #2
 80180b6:	6125      	str	r5, [r4, #16]
 80180b8:	4658      	mov	r0, fp
 80180ba:	f000 fbcb 	bl	8018854 <__hi0bits>
 80180be:	016d      	lsls	r5, r5, #5
 80180c0:	f8d8 6000 	ldr.w	r6, [r8]
 80180c4:	1a2d      	subs	r5, r5, r0
 80180c6:	42b5      	cmp	r5, r6
 80180c8:	dd54      	ble.n	8018174 <__gethex+0x228>
 80180ca:	1bad      	subs	r5, r5, r6
 80180cc:	4629      	mov	r1, r5
 80180ce:	4620      	mov	r0, r4
 80180d0:	f000 ff5c 	bl	8018f8c <__any_on>
 80180d4:	4681      	mov	r9, r0
 80180d6:	b178      	cbz	r0, 80180f8 <__gethex+0x1ac>
 80180d8:	1e6b      	subs	r3, r5, #1
 80180da:	1159      	asrs	r1, r3, #5
 80180dc:	f003 021f 	and.w	r2, r3, #31
 80180e0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80180e4:	f04f 0901 	mov.w	r9, #1
 80180e8:	fa09 f202 	lsl.w	r2, r9, r2
 80180ec:	420a      	tst	r2, r1
 80180ee:	d003      	beq.n	80180f8 <__gethex+0x1ac>
 80180f0:	454b      	cmp	r3, r9
 80180f2:	dc36      	bgt.n	8018162 <__gethex+0x216>
 80180f4:	f04f 0902 	mov.w	r9, #2
 80180f8:	4629      	mov	r1, r5
 80180fa:	4620      	mov	r0, r4
 80180fc:	f7ff febe 	bl	8017e7c <rshift>
 8018100:	442f      	add	r7, r5
 8018102:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018106:	42bb      	cmp	r3, r7
 8018108:	da42      	bge.n	8018190 <__gethex+0x244>
 801810a:	9801      	ldr	r0, [sp, #4]
 801810c:	4621      	mov	r1, r4
 801810e:	f000 faef 	bl	80186f0 <_Bfree>
 8018112:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018114:	2300      	movs	r3, #0
 8018116:	6013      	str	r3, [r2, #0]
 8018118:	25a3      	movs	r5, #163	@ 0xa3
 801811a:	e793      	b.n	8018044 <__gethex+0xf8>
 801811c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8018120:	2a2e      	cmp	r2, #46	@ 0x2e
 8018122:	d012      	beq.n	801814a <__gethex+0x1fe>
 8018124:	2b20      	cmp	r3, #32
 8018126:	d104      	bne.n	8018132 <__gethex+0x1e6>
 8018128:	f845 bb04 	str.w	fp, [r5], #4
 801812c:	f04f 0b00 	mov.w	fp, #0
 8018130:	465b      	mov	r3, fp
 8018132:	7830      	ldrb	r0, [r6, #0]
 8018134:	9303      	str	r3, [sp, #12]
 8018136:	f7ff fef3 	bl	8017f20 <__hexdig_fun>
 801813a:	9b03      	ldr	r3, [sp, #12]
 801813c:	f000 000f 	and.w	r0, r0, #15
 8018140:	4098      	lsls	r0, r3
 8018142:	ea4b 0b00 	orr.w	fp, fp, r0
 8018146:	3304      	adds	r3, #4
 8018148:	e7ae      	b.n	80180a8 <__gethex+0x15c>
 801814a:	45b1      	cmp	r9, r6
 801814c:	d8ea      	bhi.n	8018124 <__gethex+0x1d8>
 801814e:	492b      	ldr	r1, [pc, #172]	@ (80181fc <__gethex+0x2b0>)
 8018150:	9303      	str	r3, [sp, #12]
 8018152:	2201      	movs	r2, #1
 8018154:	4630      	mov	r0, r6
 8018156:	f7ff fdab 	bl	8017cb0 <strncmp>
 801815a:	9b03      	ldr	r3, [sp, #12]
 801815c:	2800      	cmp	r0, #0
 801815e:	d1e1      	bne.n	8018124 <__gethex+0x1d8>
 8018160:	e7a2      	b.n	80180a8 <__gethex+0x15c>
 8018162:	1ea9      	subs	r1, r5, #2
 8018164:	4620      	mov	r0, r4
 8018166:	f000 ff11 	bl	8018f8c <__any_on>
 801816a:	2800      	cmp	r0, #0
 801816c:	d0c2      	beq.n	80180f4 <__gethex+0x1a8>
 801816e:	f04f 0903 	mov.w	r9, #3
 8018172:	e7c1      	b.n	80180f8 <__gethex+0x1ac>
 8018174:	da09      	bge.n	801818a <__gethex+0x23e>
 8018176:	1b75      	subs	r5, r6, r5
 8018178:	4621      	mov	r1, r4
 801817a:	9801      	ldr	r0, [sp, #4]
 801817c:	462a      	mov	r2, r5
 801817e:	f000 fccf 	bl	8018b20 <__lshift>
 8018182:	1b7f      	subs	r7, r7, r5
 8018184:	4604      	mov	r4, r0
 8018186:	f100 0a14 	add.w	sl, r0, #20
 801818a:	f04f 0900 	mov.w	r9, #0
 801818e:	e7b8      	b.n	8018102 <__gethex+0x1b6>
 8018190:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8018194:	42bd      	cmp	r5, r7
 8018196:	dd6f      	ble.n	8018278 <__gethex+0x32c>
 8018198:	1bed      	subs	r5, r5, r7
 801819a:	42ae      	cmp	r6, r5
 801819c:	dc34      	bgt.n	8018208 <__gethex+0x2bc>
 801819e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80181a2:	2b02      	cmp	r3, #2
 80181a4:	d022      	beq.n	80181ec <__gethex+0x2a0>
 80181a6:	2b03      	cmp	r3, #3
 80181a8:	d024      	beq.n	80181f4 <__gethex+0x2a8>
 80181aa:	2b01      	cmp	r3, #1
 80181ac:	d115      	bne.n	80181da <__gethex+0x28e>
 80181ae:	42ae      	cmp	r6, r5
 80181b0:	d113      	bne.n	80181da <__gethex+0x28e>
 80181b2:	2e01      	cmp	r6, #1
 80181b4:	d10b      	bne.n	80181ce <__gethex+0x282>
 80181b6:	9a02      	ldr	r2, [sp, #8]
 80181b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80181bc:	6013      	str	r3, [r2, #0]
 80181be:	2301      	movs	r3, #1
 80181c0:	6123      	str	r3, [r4, #16]
 80181c2:	f8ca 3000 	str.w	r3, [sl]
 80181c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80181c8:	2562      	movs	r5, #98	@ 0x62
 80181ca:	601c      	str	r4, [r3, #0]
 80181cc:	e73a      	b.n	8018044 <__gethex+0xf8>
 80181ce:	1e71      	subs	r1, r6, #1
 80181d0:	4620      	mov	r0, r4
 80181d2:	f000 fedb 	bl	8018f8c <__any_on>
 80181d6:	2800      	cmp	r0, #0
 80181d8:	d1ed      	bne.n	80181b6 <__gethex+0x26a>
 80181da:	9801      	ldr	r0, [sp, #4]
 80181dc:	4621      	mov	r1, r4
 80181de:	f000 fa87 	bl	80186f0 <_Bfree>
 80181e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80181e4:	2300      	movs	r3, #0
 80181e6:	6013      	str	r3, [r2, #0]
 80181e8:	2550      	movs	r5, #80	@ 0x50
 80181ea:	e72b      	b.n	8018044 <__gethex+0xf8>
 80181ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80181ee:	2b00      	cmp	r3, #0
 80181f0:	d1f3      	bne.n	80181da <__gethex+0x28e>
 80181f2:	e7e0      	b.n	80181b6 <__gethex+0x26a>
 80181f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80181f6:	2b00      	cmp	r3, #0
 80181f8:	d1dd      	bne.n	80181b6 <__gethex+0x26a>
 80181fa:	e7ee      	b.n	80181da <__gethex+0x28e>
 80181fc:	08019e14 	.word	0x08019e14
 8018200:	08019f81 	.word	0x08019f81
 8018204:	08019f92 	.word	0x08019f92
 8018208:	1e6f      	subs	r7, r5, #1
 801820a:	f1b9 0f00 	cmp.w	r9, #0
 801820e:	d130      	bne.n	8018272 <__gethex+0x326>
 8018210:	b127      	cbz	r7, 801821c <__gethex+0x2d0>
 8018212:	4639      	mov	r1, r7
 8018214:	4620      	mov	r0, r4
 8018216:	f000 feb9 	bl	8018f8c <__any_on>
 801821a:	4681      	mov	r9, r0
 801821c:	117a      	asrs	r2, r7, #5
 801821e:	2301      	movs	r3, #1
 8018220:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8018224:	f007 071f 	and.w	r7, r7, #31
 8018228:	40bb      	lsls	r3, r7
 801822a:	4213      	tst	r3, r2
 801822c:	4629      	mov	r1, r5
 801822e:	4620      	mov	r0, r4
 8018230:	bf18      	it	ne
 8018232:	f049 0902 	orrne.w	r9, r9, #2
 8018236:	f7ff fe21 	bl	8017e7c <rshift>
 801823a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801823e:	1b76      	subs	r6, r6, r5
 8018240:	2502      	movs	r5, #2
 8018242:	f1b9 0f00 	cmp.w	r9, #0
 8018246:	d047      	beq.n	80182d8 <__gethex+0x38c>
 8018248:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801824c:	2b02      	cmp	r3, #2
 801824e:	d015      	beq.n	801827c <__gethex+0x330>
 8018250:	2b03      	cmp	r3, #3
 8018252:	d017      	beq.n	8018284 <__gethex+0x338>
 8018254:	2b01      	cmp	r3, #1
 8018256:	d109      	bne.n	801826c <__gethex+0x320>
 8018258:	f019 0f02 	tst.w	r9, #2
 801825c:	d006      	beq.n	801826c <__gethex+0x320>
 801825e:	f8da 3000 	ldr.w	r3, [sl]
 8018262:	ea49 0903 	orr.w	r9, r9, r3
 8018266:	f019 0f01 	tst.w	r9, #1
 801826a:	d10e      	bne.n	801828a <__gethex+0x33e>
 801826c:	f045 0510 	orr.w	r5, r5, #16
 8018270:	e032      	b.n	80182d8 <__gethex+0x38c>
 8018272:	f04f 0901 	mov.w	r9, #1
 8018276:	e7d1      	b.n	801821c <__gethex+0x2d0>
 8018278:	2501      	movs	r5, #1
 801827a:	e7e2      	b.n	8018242 <__gethex+0x2f6>
 801827c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801827e:	f1c3 0301 	rsb	r3, r3, #1
 8018282:	930f      	str	r3, [sp, #60]	@ 0x3c
 8018284:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018286:	2b00      	cmp	r3, #0
 8018288:	d0f0      	beq.n	801826c <__gethex+0x320>
 801828a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801828e:	f104 0314 	add.w	r3, r4, #20
 8018292:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8018296:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801829a:	f04f 0c00 	mov.w	ip, #0
 801829e:	4618      	mov	r0, r3
 80182a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80182a4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80182a8:	d01b      	beq.n	80182e2 <__gethex+0x396>
 80182aa:	3201      	adds	r2, #1
 80182ac:	6002      	str	r2, [r0, #0]
 80182ae:	2d02      	cmp	r5, #2
 80182b0:	f104 0314 	add.w	r3, r4, #20
 80182b4:	d13c      	bne.n	8018330 <__gethex+0x3e4>
 80182b6:	f8d8 2000 	ldr.w	r2, [r8]
 80182ba:	3a01      	subs	r2, #1
 80182bc:	42b2      	cmp	r2, r6
 80182be:	d109      	bne.n	80182d4 <__gethex+0x388>
 80182c0:	1171      	asrs	r1, r6, #5
 80182c2:	2201      	movs	r2, #1
 80182c4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80182c8:	f006 061f 	and.w	r6, r6, #31
 80182cc:	fa02 f606 	lsl.w	r6, r2, r6
 80182d0:	421e      	tst	r6, r3
 80182d2:	d13a      	bne.n	801834a <__gethex+0x3fe>
 80182d4:	f045 0520 	orr.w	r5, r5, #32
 80182d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80182da:	601c      	str	r4, [r3, #0]
 80182dc:	9b02      	ldr	r3, [sp, #8]
 80182de:	601f      	str	r7, [r3, #0]
 80182e0:	e6b0      	b.n	8018044 <__gethex+0xf8>
 80182e2:	4299      	cmp	r1, r3
 80182e4:	f843 cc04 	str.w	ip, [r3, #-4]
 80182e8:	d8d9      	bhi.n	801829e <__gethex+0x352>
 80182ea:	68a3      	ldr	r3, [r4, #8]
 80182ec:	459b      	cmp	fp, r3
 80182ee:	db17      	blt.n	8018320 <__gethex+0x3d4>
 80182f0:	6861      	ldr	r1, [r4, #4]
 80182f2:	9801      	ldr	r0, [sp, #4]
 80182f4:	3101      	adds	r1, #1
 80182f6:	f000 f9bb 	bl	8018670 <_Balloc>
 80182fa:	4681      	mov	r9, r0
 80182fc:	b918      	cbnz	r0, 8018306 <__gethex+0x3ba>
 80182fe:	4b1a      	ldr	r3, [pc, #104]	@ (8018368 <__gethex+0x41c>)
 8018300:	4602      	mov	r2, r0
 8018302:	2184      	movs	r1, #132	@ 0x84
 8018304:	e6c5      	b.n	8018092 <__gethex+0x146>
 8018306:	6922      	ldr	r2, [r4, #16]
 8018308:	3202      	adds	r2, #2
 801830a:	f104 010c 	add.w	r1, r4, #12
 801830e:	0092      	lsls	r2, r2, #2
 8018310:	300c      	adds	r0, #12
 8018312:	f7ff fd52 	bl	8017dba <memcpy>
 8018316:	4621      	mov	r1, r4
 8018318:	9801      	ldr	r0, [sp, #4]
 801831a:	f000 f9e9 	bl	80186f0 <_Bfree>
 801831e:	464c      	mov	r4, r9
 8018320:	6923      	ldr	r3, [r4, #16]
 8018322:	1c5a      	adds	r2, r3, #1
 8018324:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8018328:	6122      	str	r2, [r4, #16]
 801832a:	2201      	movs	r2, #1
 801832c:	615a      	str	r2, [r3, #20]
 801832e:	e7be      	b.n	80182ae <__gethex+0x362>
 8018330:	6922      	ldr	r2, [r4, #16]
 8018332:	455a      	cmp	r2, fp
 8018334:	dd0b      	ble.n	801834e <__gethex+0x402>
 8018336:	2101      	movs	r1, #1
 8018338:	4620      	mov	r0, r4
 801833a:	f7ff fd9f 	bl	8017e7c <rshift>
 801833e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018342:	3701      	adds	r7, #1
 8018344:	42bb      	cmp	r3, r7
 8018346:	f6ff aee0 	blt.w	801810a <__gethex+0x1be>
 801834a:	2501      	movs	r5, #1
 801834c:	e7c2      	b.n	80182d4 <__gethex+0x388>
 801834e:	f016 061f 	ands.w	r6, r6, #31
 8018352:	d0fa      	beq.n	801834a <__gethex+0x3fe>
 8018354:	4453      	add	r3, sl
 8018356:	f1c6 0620 	rsb	r6, r6, #32
 801835a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801835e:	f000 fa79 	bl	8018854 <__hi0bits>
 8018362:	42b0      	cmp	r0, r6
 8018364:	dbe7      	blt.n	8018336 <__gethex+0x3ea>
 8018366:	e7f0      	b.n	801834a <__gethex+0x3fe>
 8018368:	08019f81 	.word	0x08019f81

0801836c <L_shift>:
 801836c:	f1c2 0208 	rsb	r2, r2, #8
 8018370:	0092      	lsls	r2, r2, #2
 8018372:	b570      	push	{r4, r5, r6, lr}
 8018374:	f1c2 0620 	rsb	r6, r2, #32
 8018378:	6843      	ldr	r3, [r0, #4]
 801837a:	6804      	ldr	r4, [r0, #0]
 801837c:	fa03 f506 	lsl.w	r5, r3, r6
 8018380:	432c      	orrs	r4, r5
 8018382:	40d3      	lsrs	r3, r2
 8018384:	6004      	str	r4, [r0, #0]
 8018386:	f840 3f04 	str.w	r3, [r0, #4]!
 801838a:	4288      	cmp	r0, r1
 801838c:	d3f4      	bcc.n	8018378 <L_shift+0xc>
 801838e:	bd70      	pop	{r4, r5, r6, pc}

08018390 <__match>:
 8018390:	b530      	push	{r4, r5, lr}
 8018392:	6803      	ldr	r3, [r0, #0]
 8018394:	3301      	adds	r3, #1
 8018396:	f811 4b01 	ldrb.w	r4, [r1], #1
 801839a:	b914      	cbnz	r4, 80183a2 <__match+0x12>
 801839c:	6003      	str	r3, [r0, #0]
 801839e:	2001      	movs	r0, #1
 80183a0:	bd30      	pop	{r4, r5, pc}
 80183a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80183a6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80183aa:	2d19      	cmp	r5, #25
 80183ac:	bf98      	it	ls
 80183ae:	3220      	addls	r2, #32
 80183b0:	42a2      	cmp	r2, r4
 80183b2:	d0f0      	beq.n	8018396 <__match+0x6>
 80183b4:	2000      	movs	r0, #0
 80183b6:	e7f3      	b.n	80183a0 <__match+0x10>

080183b8 <__hexnan>:
 80183b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80183bc:	680b      	ldr	r3, [r1, #0]
 80183be:	6801      	ldr	r1, [r0, #0]
 80183c0:	115e      	asrs	r6, r3, #5
 80183c2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80183c6:	f013 031f 	ands.w	r3, r3, #31
 80183ca:	b087      	sub	sp, #28
 80183cc:	bf18      	it	ne
 80183ce:	3604      	addne	r6, #4
 80183d0:	2500      	movs	r5, #0
 80183d2:	1f37      	subs	r7, r6, #4
 80183d4:	4682      	mov	sl, r0
 80183d6:	4690      	mov	r8, r2
 80183d8:	9301      	str	r3, [sp, #4]
 80183da:	f846 5c04 	str.w	r5, [r6, #-4]
 80183de:	46b9      	mov	r9, r7
 80183e0:	463c      	mov	r4, r7
 80183e2:	9502      	str	r5, [sp, #8]
 80183e4:	46ab      	mov	fp, r5
 80183e6:	784a      	ldrb	r2, [r1, #1]
 80183e8:	1c4b      	adds	r3, r1, #1
 80183ea:	9303      	str	r3, [sp, #12]
 80183ec:	b342      	cbz	r2, 8018440 <__hexnan+0x88>
 80183ee:	4610      	mov	r0, r2
 80183f0:	9105      	str	r1, [sp, #20]
 80183f2:	9204      	str	r2, [sp, #16]
 80183f4:	f7ff fd94 	bl	8017f20 <__hexdig_fun>
 80183f8:	2800      	cmp	r0, #0
 80183fa:	d151      	bne.n	80184a0 <__hexnan+0xe8>
 80183fc:	9a04      	ldr	r2, [sp, #16]
 80183fe:	9905      	ldr	r1, [sp, #20]
 8018400:	2a20      	cmp	r2, #32
 8018402:	d818      	bhi.n	8018436 <__hexnan+0x7e>
 8018404:	9b02      	ldr	r3, [sp, #8]
 8018406:	459b      	cmp	fp, r3
 8018408:	dd13      	ble.n	8018432 <__hexnan+0x7a>
 801840a:	454c      	cmp	r4, r9
 801840c:	d206      	bcs.n	801841c <__hexnan+0x64>
 801840e:	2d07      	cmp	r5, #7
 8018410:	dc04      	bgt.n	801841c <__hexnan+0x64>
 8018412:	462a      	mov	r2, r5
 8018414:	4649      	mov	r1, r9
 8018416:	4620      	mov	r0, r4
 8018418:	f7ff ffa8 	bl	801836c <L_shift>
 801841c:	4544      	cmp	r4, r8
 801841e:	d952      	bls.n	80184c6 <__hexnan+0x10e>
 8018420:	2300      	movs	r3, #0
 8018422:	f1a4 0904 	sub.w	r9, r4, #4
 8018426:	f844 3c04 	str.w	r3, [r4, #-4]
 801842a:	f8cd b008 	str.w	fp, [sp, #8]
 801842e:	464c      	mov	r4, r9
 8018430:	461d      	mov	r5, r3
 8018432:	9903      	ldr	r1, [sp, #12]
 8018434:	e7d7      	b.n	80183e6 <__hexnan+0x2e>
 8018436:	2a29      	cmp	r2, #41	@ 0x29
 8018438:	d157      	bne.n	80184ea <__hexnan+0x132>
 801843a:	3102      	adds	r1, #2
 801843c:	f8ca 1000 	str.w	r1, [sl]
 8018440:	f1bb 0f00 	cmp.w	fp, #0
 8018444:	d051      	beq.n	80184ea <__hexnan+0x132>
 8018446:	454c      	cmp	r4, r9
 8018448:	d206      	bcs.n	8018458 <__hexnan+0xa0>
 801844a:	2d07      	cmp	r5, #7
 801844c:	dc04      	bgt.n	8018458 <__hexnan+0xa0>
 801844e:	462a      	mov	r2, r5
 8018450:	4649      	mov	r1, r9
 8018452:	4620      	mov	r0, r4
 8018454:	f7ff ff8a 	bl	801836c <L_shift>
 8018458:	4544      	cmp	r4, r8
 801845a:	d936      	bls.n	80184ca <__hexnan+0x112>
 801845c:	f1a8 0204 	sub.w	r2, r8, #4
 8018460:	4623      	mov	r3, r4
 8018462:	f853 1b04 	ldr.w	r1, [r3], #4
 8018466:	f842 1f04 	str.w	r1, [r2, #4]!
 801846a:	429f      	cmp	r7, r3
 801846c:	d2f9      	bcs.n	8018462 <__hexnan+0xaa>
 801846e:	1b3b      	subs	r3, r7, r4
 8018470:	f023 0303 	bic.w	r3, r3, #3
 8018474:	3304      	adds	r3, #4
 8018476:	3401      	adds	r4, #1
 8018478:	3e03      	subs	r6, #3
 801847a:	42b4      	cmp	r4, r6
 801847c:	bf88      	it	hi
 801847e:	2304      	movhi	r3, #4
 8018480:	4443      	add	r3, r8
 8018482:	2200      	movs	r2, #0
 8018484:	f843 2b04 	str.w	r2, [r3], #4
 8018488:	429f      	cmp	r7, r3
 801848a:	d2fb      	bcs.n	8018484 <__hexnan+0xcc>
 801848c:	683b      	ldr	r3, [r7, #0]
 801848e:	b91b      	cbnz	r3, 8018498 <__hexnan+0xe0>
 8018490:	4547      	cmp	r7, r8
 8018492:	d128      	bne.n	80184e6 <__hexnan+0x12e>
 8018494:	2301      	movs	r3, #1
 8018496:	603b      	str	r3, [r7, #0]
 8018498:	2005      	movs	r0, #5
 801849a:	b007      	add	sp, #28
 801849c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80184a0:	3501      	adds	r5, #1
 80184a2:	2d08      	cmp	r5, #8
 80184a4:	f10b 0b01 	add.w	fp, fp, #1
 80184a8:	dd06      	ble.n	80184b8 <__hexnan+0x100>
 80184aa:	4544      	cmp	r4, r8
 80184ac:	d9c1      	bls.n	8018432 <__hexnan+0x7a>
 80184ae:	2300      	movs	r3, #0
 80184b0:	f844 3c04 	str.w	r3, [r4, #-4]
 80184b4:	2501      	movs	r5, #1
 80184b6:	3c04      	subs	r4, #4
 80184b8:	6822      	ldr	r2, [r4, #0]
 80184ba:	f000 000f 	and.w	r0, r0, #15
 80184be:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80184c2:	6020      	str	r0, [r4, #0]
 80184c4:	e7b5      	b.n	8018432 <__hexnan+0x7a>
 80184c6:	2508      	movs	r5, #8
 80184c8:	e7b3      	b.n	8018432 <__hexnan+0x7a>
 80184ca:	9b01      	ldr	r3, [sp, #4]
 80184cc:	2b00      	cmp	r3, #0
 80184ce:	d0dd      	beq.n	801848c <__hexnan+0xd4>
 80184d0:	f1c3 0320 	rsb	r3, r3, #32
 80184d4:	f04f 32ff 	mov.w	r2, #4294967295
 80184d8:	40da      	lsrs	r2, r3
 80184da:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80184de:	4013      	ands	r3, r2
 80184e0:	f846 3c04 	str.w	r3, [r6, #-4]
 80184e4:	e7d2      	b.n	801848c <__hexnan+0xd4>
 80184e6:	3f04      	subs	r7, #4
 80184e8:	e7d0      	b.n	801848c <__hexnan+0xd4>
 80184ea:	2004      	movs	r0, #4
 80184ec:	e7d5      	b.n	801849a <__hexnan+0xe2>
	...

080184f0 <sbrk_aligned>:
 80184f0:	b570      	push	{r4, r5, r6, lr}
 80184f2:	4e0f      	ldr	r6, [pc, #60]	@ (8018530 <sbrk_aligned+0x40>)
 80184f4:	460c      	mov	r4, r1
 80184f6:	6831      	ldr	r1, [r6, #0]
 80184f8:	4605      	mov	r5, r0
 80184fa:	b911      	cbnz	r1, 8018502 <sbrk_aligned+0x12>
 80184fc:	f000 fe20 	bl	8019140 <_sbrk_r>
 8018500:	6030      	str	r0, [r6, #0]
 8018502:	4621      	mov	r1, r4
 8018504:	4628      	mov	r0, r5
 8018506:	f000 fe1b 	bl	8019140 <_sbrk_r>
 801850a:	1c43      	adds	r3, r0, #1
 801850c:	d103      	bne.n	8018516 <sbrk_aligned+0x26>
 801850e:	f04f 34ff 	mov.w	r4, #4294967295
 8018512:	4620      	mov	r0, r4
 8018514:	bd70      	pop	{r4, r5, r6, pc}
 8018516:	1cc4      	adds	r4, r0, #3
 8018518:	f024 0403 	bic.w	r4, r4, #3
 801851c:	42a0      	cmp	r0, r4
 801851e:	d0f8      	beq.n	8018512 <sbrk_aligned+0x22>
 8018520:	1a21      	subs	r1, r4, r0
 8018522:	4628      	mov	r0, r5
 8018524:	f000 fe0c 	bl	8019140 <_sbrk_r>
 8018528:	3001      	adds	r0, #1
 801852a:	d1f2      	bne.n	8018512 <sbrk_aligned+0x22>
 801852c:	e7ef      	b.n	801850e <sbrk_aligned+0x1e>
 801852e:	bf00      	nop
 8018530:	24006874 	.word	0x24006874

08018534 <_malloc_r>:
 8018534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018538:	1ccd      	adds	r5, r1, #3
 801853a:	f025 0503 	bic.w	r5, r5, #3
 801853e:	3508      	adds	r5, #8
 8018540:	2d0c      	cmp	r5, #12
 8018542:	bf38      	it	cc
 8018544:	250c      	movcc	r5, #12
 8018546:	2d00      	cmp	r5, #0
 8018548:	4606      	mov	r6, r0
 801854a:	db01      	blt.n	8018550 <_malloc_r+0x1c>
 801854c:	42a9      	cmp	r1, r5
 801854e:	d904      	bls.n	801855a <_malloc_r+0x26>
 8018550:	230c      	movs	r3, #12
 8018552:	6033      	str	r3, [r6, #0]
 8018554:	2000      	movs	r0, #0
 8018556:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801855a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8018630 <_malloc_r+0xfc>
 801855e:	f000 f87b 	bl	8018658 <__malloc_lock>
 8018562:	f8d8 3000 	ldr.w	r3, [r8]
 8018566:	461c      	mov	r4, r3
 8018568:	bb44      	cbnz	r4, 80185bc <_malloc_r+0x88>
 801856a:	4629      	mov	r1, r5
 801856c:	4630      	mov	r0, r6
 801856e:	f7ff ffbf 	bl	80184f0 <sbrk_aligned>
 8018572:	1c43      	adds	r3, r0, #1
 8018574:	4604      	mov	r4, r0
 8018576:	d158      	bne.n	801862a <_malloc_r+0xf6>
 8018578:	f8d8 4000 	ldr.w	r4, [r8]
 801857c:	4627      	mov	r7, r4
 801857e:	2f00      	cmp	r7, #0
 8018580:	d143      	bne.n	801860a <_malloc_r+0xd6>
 8018582:	2c00      	cmp	r4, #0
 8018584:	d04b      	beq.n	801861e <_malloc_r+0xea>
 8018586:	6823      	ldr	r3, [r4, #0]
 8018588:	4639      	mov	r1, r7
 801858a:	4630      	mov	r0, r6
 801858c:	eb04 0903 	add.w	r9, r4, r3
 8018590:	f000 fdd6 	bl	8019140 <_sbrk_r>
 8018594:	4581      	cmp	r9, r0
 8018596:	d142      	bne.n	801861e <_malloc_r+0xea>
 8018598:	6821      	ldr	r1, [r4, #0]
 801859a:	1a6d      	subs	r5, r5, r1
 801859c:	4629      	mov	r1, r5
 801859e:	4630      	mov	r0, r6
 80185a0:	f7ff ffa6 	bl	80184f0 <sbrk_aligned>
 80185a4:	3001      	adds	r0, #1
 80185a6:	d03a      	beq.n	801861e <_malloc_r+0xea>
 80185a8:	6823      	ldr	r3, [r4, #0]
 80185aa:	442b      	add	r3, r5
 80185ac:	6023      	str	r3, [r4, #0]
 80185ae:	f8d8 3000 	ldr.w	r3, [r8]
 80185b2:	685a      	ldr	r2, [r3, #4]
 80185b4:	bb62      	cbnz	r2, 8018610 <_malloc_r+0xdc>
 80185b6:	f8c8 7000 	str.w	r7, [r8]
 80185ba:	e00f      	b.n	80185dc <_malloc_r+0xa8>
 80185bc:	6822      	ldr	r2, [r4, #0]
 80185be:	1b52      	subs	r2, r2, r5
 80185c0:	d420      	bmi.n	8018604 <_malloc_r+0xd0>
 80185c2:	2a0b      	cmp	r2, #11
 80185c4:	d917      	bls.n	80185f6 <_malloc_r+0xc2>
 80185c6:	1961      	adds	r1, r4, r5
 80185c8:	42a3      	cmp	r3, r4
 80185ca:	6025      	str	r5, [r4, #0]
 80185cc:	bf18      	it	ne
 80185ce:	6059      	strne	r1, [r3, #4]
 80185d0:	6863      	ldr	r3, [r4, #4]
 80185d2:	bf08      	it	eq
 80185d4:	f8c8 1000 	streq.w	r1, [r8]
 80185d8:	5162      	str	r2, [r4, r5]
 80185da:	604b      	str	r3, [r1, #4]
 80185dc:	4630      	mov	r0, r6
 80185de:	f000 f841 	bl	8018664 <__malloc_unlock>
 80185e2:	f104 000b 	add.w	r0, r4, #11
 80185e6:	1d23      	adds	r3, r4, #4
 80185e8:	f020 0007 	bic.w	r0, r0, #7
 80185ec:	1ac2      	subs	r2, r0, r3
 80185ee:	bf1c      	itt	ne
 80185f0:	1a1b      	subne	r3, r3, r0
 80185f2:	50a3      	strne	r3, [r4, r2]
 80185f4:	e7af      	b.n	8018556 <_malloc_r+0x22>
 80185f6:	6862      	ldr	r2, [r4, #4]
 80185f8:	42a3      	cmp	r3, r4
 80185fa:	bf0c      	ite	eq
 80185fc:	f8c8 2000 	streq.w	r2, [r8]
 8018600:	605a      	strne	r2, [r3, #4]
 8018602:	e7eb      	b.n	80185dc <_malloc_r+0xa8>
 8018604:	4623      	mov	r3, r4
 8018606:	6864      	ldr	r4, [r4, #4]
 8018608:	e7ae      	b.n	8018568 <_malloc_r+0x34>
 801860a:	463c      	mov	r4, r7
 801860c:	687f      	ldr	r7, [r7, #4]
 801860e:	e7b6      	b.n	801857e <_malloc_r+0x4a>
 8018610:	461a      	mov	r2, r3
 8018612:	685b      	ldr	r3, [r3, #4]
 8018614:	42a3      	cmp	r3, r4
 8018616:	d1fb      	bne.n	8018610 <_malloc_r+0xdc>
 8018618:	2300      	movs	r3, #0
 801861a:	6053      	str	r3, [r2, #4]
 801861c:	e7de      	b.n	80185dc <_malloc_r+0xa8>
 801861e:	230c      	movs	r3, #12
 8018620:	6033      	str	r3, [r6, #0]
 8018622:	4630      	mov	r0, r6
 8018624:	f000 f81e 	bl	8018664 <__malloc_unlock>
 8018628:	e794      	b.n	8018554 <_malloc_r+0x20>
 801862a:	6005      	str	r5, [r0, #0]
 801862c:	e7d6      	b.n	80185dc <_malloc_r+0xa8>
 801862e:	bf00      	nop
 8018630:	24006878 	.word	0x24006878

08018634 <__ascii_mbtowc>:
 8018634:	b082      	sub	sp, #8
 8018636:	b901      	cbnz	r1, 801863a <__ascii_mbtowc+0x6>
 8018638:	a901      	add	r1, sp, #4
 801863a:	b142      	cbz	r2, 801864e <__ascii_mbtowc+0x1a>
 801863c:	b14b      	cbz	r3, 8018652 <__ascii_mbtowc+0x1e>
 801863e:	7813      	ldrb	r3, [r2, #0]
 8018640:	600b      	str	r3, [r1, #0]
 8018642:	7812      	ldrb	r2, [r2, #0]
 8018644:	1e10      	subs	r0, r2, #0
 8018646:	bf18      	it	ne
 8018648:	2001      	movne	r0, #1
 801864a:	b002      	add	sp, #8
 801864c:	4770      	bx	lr
 801864e:	4610      	mov	r0, r2
 8018650:	e7fb      	b.n	801864a <__ascii_mbtowc+0x16>
 8018652:	f06f 0001 	mvn.w	r0, #1
 8018656:	e7f8      	b.n	801864a <__ascii_mbtowc+0x16>

08018658 <__malloc_lock>:
 8018658:	4801      	ldr	r0, [pc, #4]	@ (8018660 <__malloc_lock+0x8>)
 801865a:	f7ff bbac 	b.w	8017db6 <__retarget_lock_acquire_recursive>
 801865e:	bf00      	nop
 8018660:	24006870 	.word	0x24006870

08018664 <__malloc_unlock>:
 8018664:	4801      	ldr	r0, [pc, #4]	@ (801866c <__malloc_unlock+0x8>)
 8018666:	f7ff bba7 	b.w	8017db8 <__retarget_lock_release_recursive>
 801866a:	bf00      	nop
 801866c:	24006870 	.word	0x24006870

08018670 <_Balloc>:
 8018670:	b570      	push	{r4, r5, r6, lr}
 8018672:	69c6      	ldr	r6, [r0, #28]
 8018674:	4604      	mov	r4, r0
 8018676:	460d      	mov	r5, r1
 8018678:	b976      	cbnz	r6, 8018698 <_Balloc+0x28>
 801867a:	2010      	movs	r0, #16
 801867c:	f000 fda2 	bl	80191c4 <malloc>
 8018680:	4602      	mov	r2, r0
 8018682:	61e0      	str	r0, [r4, #28]
 8018684:	b920      	cbnz	r0, 8018690 <_Balloc+0x20>
 8018686:	4b18      	ldr	r3, [pc, #96]	@ (80186e8 <_Balloc+0x78>)
 8018688:	4818      	ldr	r0, [pc, #96]	@ (80186ec <_Balloc+0x7c>)
 801868a:	216b      	movs	r1, #107	@ 0x6b
 801868c:	f000 fd68 	bl	8019160 <__assert_func>
 8018690:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018694:	6006      	str	r6, [r0, #0]
 8018696:	60c6      	str	r6, [r0, #12]
 8018698:	69e6      	ldr	r6, [r4, #28]
 801869a:	68f3      	ldr	r3, [r6, #12]
 801869c:	b183      	cbz	r3, 80186c0 <_Balloc+0x50>
 801869e:	69e3      	ldr	r3, [r4, #28]
 80186a0:	68db      	ldr	r3, [r3, #12]
 80186a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80186a6:	b9b8      	cbnz	r0, 80186d8 <_Balloc+0x68>
 80186a8:	2101      	movs	r1, #1
 80186aa:	fa01 f605 	lsl.w	r6, r1, r5
 80186ae:	1d72      	adds	r2, r6, #5
 80186b0:	0092      	lsls	r2, r2, #2
 80186b2:	4620      	mov	r0, r4
 80186b4:	f000 fd72 	bl	801919c <_calloc_r>
 80186b8:	b160      	cbz	r0, 80186d4 <_Balloc+0x64>
 80186ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80186be:	e00e      	b.n	80186de <_Balloc+0x6e>
 80186c0:	2221      	movs	r2, #33	@ 0x21
 80186c2:	2104      	movs	r1, #4
 80186c4:	4620      	mov	r0, r4
 80186c6:	f000 fd69 	bl	801919c <_calloc_r>
 80186ca:	69e3      	ldr	r3, [r4, #28]
 80186cc:	60f0      	str	r0, [r6, #12]
 80186ce:	68db      	ldr	r3, [r3, #12]
 80186d0:	2b00      	cmp	r3, #0
 80186d2:	d1e4      	bne.n	801869e <_Balloc+0x2e>
 80186d4:	2000      	movs	r0, #0
 80186d6:	bd70      	pop	{r4, r5, r6, pc}
 80186d8:	6802      	ldr	r2, [r0, #0]
 80186da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80186de:	2300      	movs	r3, #0
 80186e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80186e4:	e7f7      	b.n	80186d6 <_Balloc+0x66>
 80186e6:	bf00      	nop
 80186e8:	08019ff2 	.word	0x08019ff2
 80186ec:	0801a009 	.word	0x0801a009

080186f0 <_Bfree>:
 80186f0:	b570      	push	{r4, r5, r6, lr}
 80186f2:	69c6      	ldr	r6, [r0, #28]
 80186f4:	4605      	mov	r5, r0
 80186f6:	460c      	mov	r4, r1
 80186f8:	b976      	cbnz	r6, 8018718 <_Bfree+0x28>
 80186fa:	2010      	movs	r0, #16
 80186fc:	f000 fd62 	bl	80191c4 <malloc>
 8018700:	4602      	mov	r2, r0
 8018702:	61e8      	str	r0, [r5, #28]
 8018704:	b920      	cbnz	r0, 8018710 <_Bfree+0x20>
 8018706:	4b09      	ldr	r3, [pc, #36]	@ (801872c <_Bfree+0x3c>)
 8018708:	4809      	ldr	r0, [pc, #36]	@ (8018730 <_Bfree+0x40>)
 801870a:	218f      	movs	r1, #143	@ 0x8f
 801870c:	f000 fd28 	bl	8019160 <__assert_func>
 8018710:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018714:	6006      	str	r6, [r0, #0]
 8018716:	60c6      	str	r6, [r0, #12]
 8018718:	b13c      	cbz	r4, 801872a <_Bfree+0x3a>
 801871a:	69eb      	ldr	r3, [r5, #28]
 801871c:	6862      	ldr	r2, [r4, #4]
 801871e:	68db      	ldr	r3, [r3, #12]
 8018720:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018724:	6021      	str	r1, [r4, #0]
 8018726:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801872a:	bd70      	pop	{r4, r5, r6, pc}
 801872c:	08019ff2 	.word	0x08019ff2
 8018730:	0801a009 	.word	0x0801a009

08018734 <__multadd>:
 8018734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018738:	690d      	ldr	r5, [r1, #16]
 801873a:	4607      	mov	r7, r0
 801873c:	460c      	mov	r4, r1
 801873e:	461e      	mov	r6, r3
 8018740:	f101 0c14 	add.w	ip, r1, #20
 8018744:	2000      	movs	r0, #0
 8018746:	f8dc 3000 	ldr.w	r3, [ip]
 801874a:	b299      	uxth	r1, r3
 801874c:	fb02 6101 	mla	r1, r2, r1, r6
 8018750:	0c1e      	lsrs	r6, r3, #16
 8018752:	0c0b      	lsrs	r3, r1, #16
 8018754:	fb02 3306 	mla	r3, r2, r6, r3
 8018758:	b289      	uxth	r1, r1
 801875a:	3001      	adds	r0, #1
 801875c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8018760:	4285      	cmp	r5, r0
 8018762:	f84c 1b04 	str.w	r1, [ip], #4
 8018766:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801876a:	dcec      	bgt.n	8018746 <__multadd+0x12>
 801876c:	b30e      	cbz	r6, 80187b2 <__multadd+0x7e>
 801876e:	68a3      	ldr	r3, [r4, #8]
 8018770:	42ab      	cmp	r3, r5
 8018772:	dc19      	bgt.n	80187a8 <__multadd+0x74>
 8018774:	6861      	ldr	r1, [r4, #4]
 8018776:	4638      	mov	r0, r7
 8018778:	3101      	adds	r1, #1
 801877a:	f7ff ff79 	bl	8018670 <_Balloc>
 801877e:	4680      	mov	r8, r0
 8018780:	b928      	cbnz	r0, 801878e <__multadd+0x5a>
 8018782:	4602      	mov	r2, r0
 8018784:	4b0c      	ldr	r3, [pc, #48]	@ (80187b8 <__multadd+0x84>)
 8018786:	480d      	ldr	r0, [pc, #52]	@ (80187bc <__multadd+0x88>)
 8018788:	21ba      	movs	r1, #186	@ 0xba
 801878a:	f000 fce9 	bl	8019160 <__assert_func>
 801878e:	6922      	ldr	r2, [r4, #16]
 8018790:	3202      	adds	r2, #2
 8018792:	f104 010c 	add.w	r1, r4, #12
 8018796:	0092      	lsls	r2, r2, #2
 8018798:	300c      	adds	r0, #12
 801879a:	f7ff fb0e 	bl	8017dba <memcpy>
 801879e:	4621      	mov	r1, r4
 80187a0:	4638      	mov	r0, r7
 80187a2:	f7ff ffa5 	bl	80186f0 <_Bfree>
 80187a6:	4644      	mov	r4, r8
 80187a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80187ac:	3501      	adds	r5, #1
 80187ae:	615e      	str	r6, [r3, #20]
 80187b0:	6125      	str	r5, [r4, #16]
 80187b2:	4620      	mov	r0, r4
 80187b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80187b8:	08019f81 	.word	0x08019f81
 80187bc:	0801a009 	.word	0x0801a009

080187c0 <__s2b>:
 80187c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80187c4:	460c      	mov	r4, r1
 80187c6:	4615      	mov	r5, r2
 80187c8:	461f      	mov	r7, r3
 80187ca:	2209      	movs	r2, #9
 80187cc:	3308      	adds	r3, #8
 80187ce:	4606      	mov	r6, r0
 80187d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80187d4:	2100      	movs	r1, #0
 80187d6:	2201      	movs	r2, #1
 80187d8:	429a      	cmp	r2, r3
 80187da:	db09      	blt.n	80187f0 <__s2b+0x30>
 80187dc:	4630      	mov	r0, r6
 80187de:	f7ff ff47 	bl	8018670 <_Balloc>
 80187e2:	b940      	cbnz	r0, 80187f6 <__s2b+0x36>
 80187e4:	4602      	mov	r2, r0
 80187e6:	4b19      	ldr	r3, [pc, #100]	@ (801884c <__s2b+0x8c>)
 80187e8:	4819      	ldr	r0, [pc, #100]	@ (8018850 <__s2b+0x90>)
 80187ea:	21d3      	movs	r1, #211	@ 0xd3
 80187ec:	f000 fcb8 	bl	8019160 <__assert_func>
 80187f0:	0052      	lsls	r2, r2, #1
 80187f2:	3101      	adds	r1, #1
 80187f4:	e7f0      	b.n	80187d8 <__s2b+0x18>
 80187f6:	9b08      	ldr	r3, [sp, #32]
 80187f8:	6143      	str	r3, [r0, #20]
 80187fa:	2d09      	cmp	r5, #9
 80187fc:	f04f 0301 	mov.w	r3, #1
 8018800:	6103      	str	r3, [r0, #16]
 8018802:	dd16      	ble.n	8018832 <__s2b+0x72>
 8018804:	f104 0909 	add.w	r9, r4, #9
 8018808:	46c8      	mov	r8, r9
 801880a:	442c      	add	r4, r5
 801880c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8018810:	4601      	mov	r1, r0
 8018812:	3b30      	subs	r3, #48	@ 0x30
 8018814:	220a      	movs	r2, #10
 8018816:	4630      	mov	r0, r6
 8018818:	f7ff ff8c 	bl	8018734 <__multadd>
 801881c:	45a0      	cmp	r8, r4
 801881e:	d1f5      	bne.n	801880c <__s2b+0x4c>
 8018820:	f1a5 0408 	sub.w	r4, r5, #8
 8018824:	444c      	add	r4, r9
 8018826:	1b2d      	subs	r5, r5, r4
 8018828:	1963      	adds	r3, r4, r5
 801882a:	42bb      	cmp	r3, r7
 801882c:	db04      	blt.n	8018838 <__s2b+0x78>
 801882e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018832:	340a      	adds	r4, #10
 8018834:	2509      	movs	r5, #9
 8018836:	e7f6      	b.n	8018826 <__s2b+0x66>
 8018838:	f814 3b01 	ldrb.w	r3, [r4], #1
 801883c:	4601      	mov	r1, r0
 801883e:	3b30      	subs	r3, #48	@ 0x30
 8018840:	220a      	movs	r2, #10
 8018842:	4630      	mov	r0, r6
 8018844:	f7ff ff76 	bl	8018734 <__multadd>
 8018848:	e7ee      	b.n	8018828 <__s2b+0x68>
 801884a:	bf00      	nop
 801884c:	08019f81 	.word	0x08019f81
 8018850:	0801a009 	.word	0x0801a009

08018854 <__hi0bits>:
 8018854:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8018858:	4603      	mov	r3, r0
 801885a:	bf36      	itet	cc
 801885c:	0403      	lslcc	r3, r0, #16
 801885e:	2000      	movcs	r0, #0
 8018860:	2010      	movcc	r0, #16
 8018862:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8018866:	bf3c      	itt	cc
 8018868:	021b      	lslcc	r3, r3, #8
 801886a:	3008      	addcc	r0, #8
 801886c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8018870:	bf3c      	itt	cc
 8018872:	011b      	lslcc	r3, r3, #4
 8018874:	3004      	addcc	r0, #4
 8018876:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801887a:	bf3c      	itt	cc
 801887c:	009b      	lslcc	r3, r3, #2
 801887e:	3002      	addcc	r0, #2
 8018880:	2b00      	cmp	r3, #0
 8018882:	db05      	blt.n	8018890 <__hi0bits+0x3c>
 8018884:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8018888:	f100 0001 	add.w	r0, r0, #1
 801888c:	bf08      	it	eq
 801888e:	2020      	moveq	r0, #32
 8018890:	4770      	bx	lr

08018892 <__lo0bits>:
 8018892:	6803      	ldr	r3, [r0, #0]
 8018894:	4602      	mov	r2, r0
 8018896:	f013 0007 	ands.w	r0, r3, #7
 801889a:	d00b      	beq.n	80188b4 <__lo0bits+0x22>
 801889c:	07d9      	lsls	r1, r3, #31
 801889e:	d421      	bmi.n	80188e4 <__lo0bits+0x52>
 80188a0:	0798      	lsls	r0, r3, #30
 80188a2:	bf49      	itett	mi
 80188a4:	085b      	lsrmi	r3, r3, #1
 80188a6:	089b      	lsrpl	r3, r3, #2
 80188a8:	2001      	movmi	r0, #1
 80188aa:	6013      	strmi	r3, [r2, #0]
 80188ac:	bf5c      	itt	pl
 80188ae:	6013      	strpl	r3, [r2, #0]
 80188b0:	2002      	movpl	r0, #2
 80188b2:	4770      	bx	lr
 80188b4:	b299      	uxth	r1, r3
 80188b6:	b909      	cbnz	r1, 80188bc <__lo0bits+0x2a>
 80188b8:	0c1b      	lsrs	r3, r3, #16
 80188ba:	2010      	movs	r0, #16
 80188bc:	b2d9      	uxtb	r1, r3
 80188be:	b909      	cbnz	r1, 80188c4 <__lo0bits+0x32>
 80188c0:	3008      	adds	r0, #8
 80188c2:	0a1b      	lsrs	r3, r3, #8
 80188c4:	0719      	lsls	r1, r3, #28
 80188c6:	bf04      	itt	eq
 80188c8:	091b      	lsreq	r3, r3, #4
 80188ca:	3004      	addeq	r0, #4
 80188cc:	0799      	lsls	r1, r3, #30
 80188ce:	bf04      	itt	eq
 80188d0:	089b      	lsreq	r3, r3, #2
 80188d2:	3002      	addeq	r0, #2
 80188d4:	07d9      	lsls	r1, r3, #31
 80188d6:	d403      	bmi.n	80188e0 <__lo0bits+0x4e>
 80188d8:	085b      	lsrs	r3, r3, #1
 80188da:	f100 0001 	add.w	r0, r0, #1
 80188de:	d003      	beq.n	80188e8 <__lo0bits+0x56>
 80188e0:	6013      	str	r3, [r2, #0]
 80188e2:	4770      	bx	lr
 80188e4:	2000      	movs	r0, #0
 80188e6:	4770      	bx	lr
 80188e8:	2020      	movs	r0, #32
 80188ea:	4770      	bx	lr

080188ec <__i2b>:
 80188ec:	b510      	push	{r4, lr}
 80188ee:	460c      	mov	r4, r1
 80188f0:	2101      	movs	r1, #1
 80188f2:	f7ff febd 	bl	8018670 <_Balloc>
 80188f6:	4602      	mov	r2, r0
 80188f8:	b928      	cbnz	r0, 8018906 <__i2b+0x1a>
 80188fa:	4b05      	ldr	r3, [pc, #20]	@ (8018910 <__i2b+0x24>)
 80188fc:	4805      	ldr	r0, [pc, #20]	@ (8018914 <__i2b+0x28>)
 80188fe:	f240 1145 	movw	r1, #325	@ 0x145
 8018902:	f000 fc2d 	bl	8019160 <__assert_func>
 8018906:	2301      	movs	r3, #1
 8018908:	6144      	str	r4, [r0, #20]
 801890a:	6103      	str	r3, [r0, #16]
 801890c:	bd10      	pop	{r4, pc}
 801890e:	bf00      	nop
 8018910:	08019f81 	.word	0x08019f81
 8018914:	0801a009 	.word	0x0801a009

08018918 <__multiply>:
 8018918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801891c:	4614      	mov	r4, r2
 801891e:	690a      	ldr	r2, [r1, #16]
 8018920:	6923      	ldr	r3, [r4, #16]
 8018922:	429a      	cmp	r2, r3
 8018924:	bfa8      	it	ge
 8018926:	4623      	movge	r3, r4
 8018928:	460f      	mov	r7, r1
 801892a:	bfa4      	itt	ge
 801892c:	460c      	movge	r4, r1
 801892e:	461f      	movge	r7, r3
 8018930:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8018934:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8018938:	68a3      	ldr	r3, [r4, #8]
 801893a:	6861      	ldr	r1, [r4, #4]
 801893c:	eb0a 0609 	add.w	r6, sl, r9
 8018940:	42b3      	cmp	r3, r6
 8018942:	b085      	sub	sp, #20
 8018944:	bfb8      	it	lt
 8018946:	3101      	addlt	r1, #1
 8018948:	f7ff fe92 	bl	8018670 <_Balloc>
 801894c:	b930      	cbnz	r0, 801895c <__multiply+0x44>
 801894e:	4602      	mov	r2, r0
 8018950:	4b44      	ldr	r3, [pc, #272]	@ (8018a64 <__multiply+0x14c>)
 8018952:	4845      	ldr	r0, [pc, #276]	@ (8018a68 <__multiply+0x150>)
 8018954:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8018958:	f000 fc02 	bl	8019160 <__assert_func>
 801895c:	f100 0514 	add.w	r5, r0, #20
 8018960:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8018964:	462b      	mov	r3, r5
 8018966:	2200      	movs	r2, #0
 8018968:	4543      	cmp	r3, r8
 801896a:	d321      	bcc.n	80189b0 <__multiply+0x98>
 801896c:	f107 0114 	add.w	r1, r7, #20
 8018970:	f104 0214 	add.w	r2, r4, #20
 8018974:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8018978:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801897c:	9302      	str	r3, [sp, #8]
 801897e:	1b13      	subs	r3, r2, r4
 8018980:	3b15      	subs	r3, #21
 8018982:	f023 0303 	bic.w	r3, r3, #3
 8018986:	3304      	adds	r3, #4
 8018988:	f104 0715 	add.w	r7, r4, #21
 801898c:	42ba      	cmp	r2, r7
 801898e:	bf38      	it	cc
 8018990:	2304      	movcc	r3, #4
 8018992:	9301      	str	r3, [sp, #4]
 8018994:	9b02      	ldr	r3, [sp, #8]
 8018996:	9103      	str	r1, [sp, #12]
 8018998:	428b      	cmp	r3, r1
 801899a:	d80c      	bhi.n	80189b6 <__multiply+0x9e>
 801899c:	2e00      	cmp	r6, #0
 801899e:	dd03      	ble.n	80189a8 <__multiply+0x90>
 80189a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80189a4:	2b00      	cmp	r3, #0
 80189a6:	d05b      	beq.n	8018a60 <__multiply+0x148>
 80189a8:	6106      	str	r6, [r0, #16]
 80189aa:	b005      	add	sp, #20
 80189ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80189b0:	f843 2b04 	str.w	r2, [r3], #4
 80189b4:	e7d8      	b.n	8018968 <__multiply+0x50>
 80189b6:	f8b1 a000 	ldrh.w	sl, [r1]
 80189ba:	f1ba 0f00 	cmp.w	sl, #0
 80189be:	d024      	beq.n	8018a0a <__multiply+0xf2>
 80189c0:	f104 0e14 	add.w	lr, r4, #20
 80189c4:	46a9      	mov	r9, r5
 80189c6:	f04f 0c00 	mov.w	ip, #0
 80189ca:	f85e 7b04 	ldr.w	r7, [lr], #4
 80189ce:	f8d9 3000 	ldr.w	r3, [r9]
 80189d2:	fa1f fb87 	uxth.w	fp, r7
 80189d6:	b29b      	uxth	r3, r3
 80189d8:	fb0a 330b 	mla	r3, sl, fp, r3
 80189dc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80189e0:	f8d9 7000 	ldr.w	r7, [r9]
 80189e4:	4463      	add	r3, ip
 80189e6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80189ea:	fb0a c70b 	mla	r7, sl, fp, ip
 80189ee:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80189f2:	b29b      	uxth	r3, r3
 80189f4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80189f8:	4572      	cmp	r2, lr
 80189fa:	f849 3b04 	str.w	r3, [r9], #4
 80189fe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8018a02:	d8e2      	bhi.n	80189ca <__multiply+0xb2>
 8018a04:	9b01      	ldr	r3, [sp, #4]
 8018a06:	f845 c003 	str.w	ip, [r5, r3]
 8018a0a:	9b03      	ldr	r3, [sp, #12]
 8018a0c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8018a10:	3104      	adds	r1, #4
 8018a12:	f1b9 0f00 	cmp.w	r9, #0
 8018a16:	d021      	beq.n	8018a5c <__multiply+0x144>
 8018a18:	682b      	ldr	r3, [r5, #0]
 8018a1a:	f104 0c14 	add.w	ip, r4, #20
 8018a1e:	46ae      	mov	lr, r5
 8018a20:	f04f 0a00 	mov.w	sl, #0
 8018a24:	f8bc b000 	ldrh.w	fp, [ip]
 8018a28:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8018a2c:	fb09 770b 	mla	r7, r9, fp, r7
 8018a30:	4457      	add	r7, sl
 8018a32:	b29b      	uxth	r3, r3
 8018a34:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8018a38:	f84e 3b04 	str.w	r3, [lr], #4
 8018a3c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8018a40:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8018a44:	f8be 3000 	ldrh.w	r3, [lr]
 8018a48:	fb09 330a 	mla	r3, r9, sl, r3
 8018a4c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8018a50:	4562      	cmp	r2, ip
 8018a52:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8018a56:	d8e5      	bhi.n	8018a24 <__multiply+0x10c>
 8018a58:	9f01      	ldr	r7, [sp, #4]
 8018a5a:	51eb      	str	r3, [r5, r7]
 8018a5c:	3504      	adds	r5, #4
 8018a5e:	e799      	b.n	8018994 <__multiply+0x7c>
 8018a60:	3e01      	subs	r6, #1
 8018a62:	e79b      	b.n	801899c <__multiply+0x84>
 8018a64:	08019f81 	.word	0x08019f81
 8018a68:	0801a009 	.word	0x0801a009

08018a6c <__pow5mult>:
 8018a6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018a70:	4615      	mov	r5, r2
 8018a72:	f012 0203 	ands.w	r2, r2, #3
 8018a76:	4607      	mov	r7, r0
 8018a78:	460e      	mov	r6, r1
 8018a7a:	d007      	beq.n	8018a8c <__pow5mult+0x20>
 8018a7c:	4c25      	ldr	r4, [pc, #148]	@ (8018b14 <__pow5mult+0xa8>)
 8018a7e:	3a01      	subs	r2, #1
 8018a80:	2300      	movs	r3, #0
 8018a82:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018a86:	f7ff fe55 	bl	8018734 <__multadd>
 8018a8a:	4606      	mov	r6, r0
 8018a8c:	10ad      	asrs	r5, r5, #2
 8018a8e:	d03d      	beq.n	8018b0c <__pow5mult+0xa0>
 8018a90:	69fc      	ldr	r4, [r7, #28]
 8018a92:	b97c      	cbnz	r4, 8018ab4 <__pow5mult+0x48>
 8018a94:	2010      	movs	r0, #16
 8018a96:	f000 fb95 	bl	80191c4 <malloc>
 8018a9a:	4602      	mov	r2, r0
 8018a9c:	61f8      	str	r0, [r7, #28]
 8018a9e:	b928      	cbnz	r0, 8018aac <__pow5mult+0x40>
 8018aa0:	4b1d      	ldr	r3, [pc, #116]	@ (8018b18 <__pow5mult+0xac>)
 8018aa2:	481e      	ldr	r0, [pc, #120]	@ (8018b1c <__pow5mult+0xb0>)
 8018aa4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8018aa8:	f000 fb5a 	bl	8019160 <__assert_func>
 8018aac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018ab0:	6004      	str	r4, [r0, #0]
 8018ab2:	60c4      	str	r4, [r0, #12]
 8018ab4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8018ab8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018abc:	b94c      	cbnz	r4, 8018ad2 <__pow5mult+0x66>
 8018abe:	f240 2171 	movw	r1, #625	@ 0x271
 8018ac2:	4638      	mov	r0, r7
 8018ac4:	f7ff ff12 	bl	80188ec <__i2b>
 8018ac8:	2300      	movs	r3, #0
 8018aca:	f8c8 0008 	str.w	r0, [r8, #8]
 8018ace:	4604      	mov	r4, r0
 8018ad0:	6003      	str	r3, [r0, #0]
 8018ad2:	f04f 0900 	mov.w	r9, #0
 8018ad6:	07eb      	lsls	r3, r5, #31
 8018ad8:	d50a      	bpl.n	8018af0 <__pow5mult+0x84>
 8018ada:	4631      	mov	r1, r6
 8018adc:	4622      	mov	r2, r4
 8018ade:	4638      	mov	r0, r7
 8018ae0:	f7ff ff1a 	bl	8018918 <__multiply>
 8018ae4:	4631      	mov	r1, r6
 8018ae6:	4680      	mov	r8, r0
 8018ae8:	4638      	mov	r0, r7
 8018aea:	f7ff fe01 	bl	80186f0 <_Bfree>
 8018aee:	4646      	mov	r6, r8
 8018af0:	106d      	asrs	r5, r5, #1
 8018af2:	d00b      	beq.n	8018b0c <__pow5mult+0xa0>
 8018af4:	6820      	ldr	r0, [r4, #0]
 8018af6:	b938      	cbnz	r0, 8018b08 <__pow5mult+0x9c>
 8018af8:	4622      	mov	r2, r4
 8018afa:	4621      	mov	r1, r4
 8018afc:	4638      	mov	r0, r7
 8018afe:	f7ff ff0b 	bl	8018918 <__multiply>
 8018b02:	6020      	str	r0, [r4, #0]
 8018b04:	f8c0 9000 	str.w	r9, [r0]
 8018b08:	4604      	mov	r4, r0
 8018b0a:	e7e4      	b.n	8018ad6 <__pow5mult+0x6a>
 8018b0c:	4630      	mov	r0, r6
 8018b0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018b12:	bf00      	nop
 8018b14:	0801a064 	.word	0x0801a064
 8018b18:	08019ff2 	.word	0x08019ff2
 8018b1c:	0801a009 	.word	0x0801a009

08018b20 <__lshift>:
 8018b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018b24:	460c      	mov	r4, r1
 8018b26:	6849      	ldr	r1, [r1, #4]
 8018b28:	6923      	ldr	r3, [r4, #16]
 8018b2a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8018b2e:	68a3      	ldr	r3, [r4, #8]
 8018b30:	4607      	mov	r7, r0
 8018b32:	4691      	mov	r9, r2
 8018b34:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018b38:	f108 0601 	add.w	r6, r8, #1
 8018b3c:	42b3      	cmp	r3, r6
 8018b3e:	db0b      	blt.n	8018b58 <__lshift+0x38>
 8018b40:	4638      	mov	r0, r7
 8018b42:	f7ff fd95 	bl	8018670 <_Balloc>
 8018b46:	4605      	mov	r5, r0
 8018b48:	b948      	cbnz	r0, 8018b5e <__lshift+0x3e>
 8018b4a:	4602      	mov	r2, r0
 8018b4c:	4b28      	ldr	r3, [pc, #160]	@ (8018bf0 <__lshift+0xd0>)
 8018b4e:	4829      	ldr	r0, [pc, #164]	@ (8018bf4 <__lshift+0xd4>)
 8018b50:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8018b54:	f000 fb04 	bl	8019160 <__assert_func>
 8018b58:	3101      	adds	r1, #1
 8018b5a:	005b      	lsls	r3, r3, #1
 8018b5c:	e7ee      	b.n	8018b3c <__lshift+0x1c>
 8018b5e:	2300      	movs	r3, #0
 8018b60:	f100 0114 	add.w	r1, r0, #20
 8018b64:	f100 0210 	add.w	r2, r0, #16
 8018b68:	4618      	mov	r0, r3
 8018b6a:	4553      	cmp	r3, sl
 8018b6c:	db33      	blt.n	8018bd6 <__lshift+0xb6>
 8018b6e:	6920      	ldr	r0, [r4, #16]
 8018b70:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018b74:	f104 0314 	add.w	r3, r4, #20
 8018b78:	f019 091f 	ands.w	r9, r9, #31
 8018b7c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018b80:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018b84:	d02b      	beq.n	8018bde <__lshift+0xbe>
 8018b86:	f1c9 0e20 	rsb	lr, r9, #32
 8018b8a:	468a      	mov	sl, r1
 8018b8c:	2200      	movs	r2, #0
 8018b8e:	6818      	ldr	r0, [r3, #0]
 8018b90:	fa00 f009 	lsl.w	r0, r0, r9
 8018b94:	4310      	orrs	r0, r2
 8018b96:	f84a 0b04 	str.w	r0, [sl], #4
 8018b9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8018b9e:	459c      	cmp	ip, r3
 8018ba0:	fa22 f20e 	lsr.w	r2, r2, lr
 8018ba4:	d8f3      	bhi.n	8018b8e <__lshift+0x6e>
 8018ba6:	ebac 0304 	sub.w	r3, ip, r4
 8018baa:	3b15      	subs	r3, #21
 8018bac:	f023 0303 	bic.w	r3, r3, #3
 8018bb0:	3304      	adds	r3, #4
 8018bb2:	f104 0015 	add.w	r0, r4, #21
 8018bb6:	4584      	cmp	ip, r0
 8018bb8:	bf38      	it	cc
 8018bba:	2304      	movcc	r3, #4
 8018bbc:	50ca      	str	r2, [r1, r3]
 8018bbe:	b10a      	cbz	r2, 8018bc4 <__lshift+0xa4>
 8018bc0:	f108 0602 	add.w	r6, r8, #2
 8018bc4:	3e01      	subs	r6, #1
 8018bc6:	4638      	mov	r0, r7
 8018bc8:	612e      	str	r6, [r5, #16]
 8018bca:	4621      	mov	r1, r4
 8018bcc:	f7ff fd90 	bl	80186f0 <_Bfree>
 8018bd0:	4628      	mov	r0, r5
 8018bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018bd6:	f842 0f04 	str.w	r0, [r2, #4]!
 8018bda:	3301      	adds	r3, #1
 8018bdc:	e7c5      	b.n	8018b6a <__lshift+0x4a>
 8018bde:	3904      	subs	r1, #4
 8018be0:	f853 2b04 	ldr.w	r2, [r3], #4
 8018be4:	f841 2f04 	str.w	r2, [r1, #4]!
 8018be8:	459c      	cmp	ip, r3
 8018bea:	d8f9      	bhi.n	8018be0 <__lshift+0xc0>
 8018bec:	e7ea      	b.n	8018bc4 <__lshift+0xa4>
 8018bee:	bf00      	nop
 8018bf0:	08019f81 	.word	0x08019f81
 8018bf4:	0801a009 	.word	0x0801a009

08018bf8 <__mcmp>:
 8018bf8:	690a      	ldr	r2, [r1, #16]
 8018bfa:	4603      	mov	r3, r0
 8018bfc:	6900      	ldr	r0, [r0, #16]
 8018bfe:	1a80      	subs	r0, r0, r2
 8018c00:	b530      	push	{r4, r5, lr}
 8018c02:	d10e      	bne.n	8018c22 <__mcmp+0x2a>
 8018c04:	3314      	adds	r3, #20
 8018c06:	3114      	adds	r1, #20
 8018c08:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8018c0c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8018c10:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8018c14:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8018c18:	4295      	cmp	r5, r2
 8018c1a:	d003      	beq.n	8018c24 <__mcmp+0x2c>
 8018c1c:	d205      	bcs.n	8018c2a <__mcmp+0x32>
 8018c1e:	f04f 30ff 	mov.w	r0, #4294967295
 8018c22:	bd30      	pop	{r4, r5, pc}
 8018c24:	42a3      	cmp	r3, r4
 8018c26:	d3f3      	bcc.n	8018c10 <__mcmp+0x18>
 8018c28:	e7fb      	b.n	8018c22 <__mcmp+0x2a>
 8018c2a:	2001      	movs	r0, #1
 8018c2c:	e7f9      	b.n	8018c22 <__mcmp+0x2a>
	...

08018c30 <__mdiff>:
 8018c30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c34:	4689      	mov	r9, r1
 8018c36:	4606      	mov	r6, r0
 8018c38:	4611      	mov	r1, r2
 8018c3a:	4648      	mov	r0, r9
 8018c3c:	4614      	mov	r4, r2
 8018c3e:	f7ff ffdb 	bl	8018bf8 <__mcmp>
 8018c42:	1e05      	subs	r5, r0, #0
 8018c44:	d112      	bne.n	8018c6c <__mdiff+0x3c>
 8018c46:	4629      	mov	r1, r5
 8018c48:	4630      	mov	r0, r6
 8018c4a:	f7ff fd11 	bl	8018670 <_Balloc>
 8018c4e:	4602      	mov	r2, r0
 8018c50:	b928      	cbnz	r0, 8018c5e <__mdiff+0x2e>
 8018c52:	4b3f      	ldr	r3, [pc, #252]	@ (8018d50 <__mdiff+0x120>)
 8018c54:	f240 2137 	movw	r1, #567	@ 0x237
 8018c58:	483e      	ldr	r0, [pc, #248]	@ (8018d54 <__mdiff+0x124>)
 8018c5a:	f000 fa81 	bl	8019160 <__assert_func>
 8018c5e:	2301      	movs	r3, #1
 8018c60:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8018c64:	4610      	mov	r0, r2
 8018c66:	b003      	add	sp, #12
 8018c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c6c:	bfbc      	itt	lt
 8018c6e:	464b      	movlt	r3, r9
 8018c70:	46a1      	movlt	r9, r4
 8018c72:	4630      	mov	r0, r6
 8018c74:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8018c78:	bfba      	itte	lt
 8018c7a:	461c      	movlt	r4, r3
 8018c7c:	2501      	movlt	r5, #1
 8018c7e:	2500      	movge	r5, #0
 8018c80:	f7ff fcf6 	bl	8018670 <_Balloc>
 8018c84:	4602      	mov	r2, r0
 8018c86:	b918      	cbnz	r0, 8018c90 <__mdiff+0x60>
 8018c88:	4b31      	ldr	r3, [pc, #196]	@ (8018d50 <__mdiff+0x120>)
 8018c8a:	f240 2145 	movw	r1, #581	@ 0x245
 8018c8e:	e7e3      	b.n	8018c58 <__mdiff+0x28>
 8018c90:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8018c94:	6926      	ldr	r6, [r4, #16]
 8018c96:	60c5      	str	r5, [r0, #12]
 8018c98:	f109 0310 	add.w	r3, r9, #16
 8018c9c:	f109 0514 	add.w	r5, r9, #20
 8018ca0:	f104 0e14 	add.w	lr, r4, #20
 8018ca4:	f100 0b14 	add.w	fp, r0, #20
 8018ca8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8018cac:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8018cb0:	9301      	str	r3, [sp, #4]
 8018cb2:	46d9      	mov	r9, fp
 8018cb4:	f04f 0c00 	mov.w	ip, #0
 8018cb8:	9b01      	ldr	r3, [sp, #4]
 8018cba:	f85e 0b04 	ldr.w	r0, [lr], #4
 8018cbe:	f853 af04 	ldr.w	sl, [r3, #4]!
 8018cc2:	9301      	str	r3, [sp, #4]
 8018cc4:	fa1f f38a 	uxth.w	r3, sl
 8018cc8:	4619      	mov	r1, r3
 8018cca:	b283      	uxth	r3, r0
 8018ccc:	1acb      	subs	r3, r1, r3
 8018cce:	0c00      	lsrs	r0, r0, #16
 8018cd0:	4463      	add	r3, ip
 8018cd2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8018cd6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8018cda:	b29b      	uxth	r3, r3
 8018cdc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8018ce0:	4576      	cmp	r6, lr
 8018ce2:	f849 3b04 	str.w	r3, [r9], #4
 8018ce6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8018cea:	d8e5      	bhi.n	8018cb8 <__mdiff+0x88>
 8018cec:	1b33      	subs	r3, r6, r4
 8018cee:	3b15      	subs	r3, #21
 8018cf0:	f023 0303 	bic.w	r3, r3, #3
 8018cf4:	3415      	adds	r4, #21
 8018cf6:	3304      	adds	r3, #4
 8018cf8:	42a6      	cmp	r6, r4
 8018cfa:	bf38      	it	cc
 8018cfc:	2304      	movcc	r3, #4
 8018cfe:	441d      	add	r5, r3
 8018d00:	445b      	add	r3, fp
 8018d02:	461e      	mov	r6, r3
 8018d04:	462c      	mov	r4, r5
 8018d06:	4544      	cmp	r4, r8
 8018d08:	d30e      	bcc.n	8018d28 <__mdiff+0xf8>
 8018d0a:	f108 0103 	add.w	r1, r8, #3
 8018d0e:	1b49      	subs	r1, r1, r5
 8018d10:	f021 0103 	bic.w	r1, r1, #3
 8018d14:	3d03      	subs	r5, #3
 8018d16:	45a8      	cmp	r8, r5
 8018d18:	bf38      	it	cc
 8018d1a:	2100      	movcc	r1, #0
 8018d1c:	440b      	add	r3, r1
 8018d1e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8018d22:	b191      	cbz	r1, 8018d4a <__mdiff+0x11a>
 8018d24:	6117      	str	r7, [r2, #16]
 8018d26:	e79d      	b.n	8018c64 <__mdiff+0x34>
 8018d28:	f854 1b04 	ldr.w	r1, [r4], #4
 8018d2c:	46e6      	mov	lr, ip
 8018d2e:	0c08      	lsrs	r0, r1, #16
 8018d30:	fa1c fc81 	uxtah	ip, ip, r1
 8018d34:	4471      	add	r1, lr
 8018d36:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8018d3a:	b289      	uxth	r1, r1
 8018d3c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8018d40:	f846 1b04 	str.w	r1, [r6], #4
 8018d44:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8018d48:	e7dd      	b.n	8018d06 <__mdiff+0xd6>
 8018d4a:	3f01      	subs	r7, #1
 8018d4c:	e7e7      	b.n	8018d1e <__mdiff+0xee>
 8018d4e:	bf00      	nop
 8018d50:	08019f81 	.word	0x08019f81
 8018d54:	0801a009 	.word	0x0801a009

08018d58 <__ulp>:
 8018d58:	b082      	sub	sp, #8
 8018d5a:	ed8d 0b00 	vstr	d0, [sp]
 8018d5e:	9a01      	ldr	r2, [sp, #4]
 8018d60:	4b0f      	ldr	r3, [pc, #60]	@ (8018da0 <__ulp+0x48>)
 8018d62:	4013      	ands	r3, r2
 8018d64:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8018d68:	2b00      	cmp	r3, #0
 8018d6a:	dc08      	bgt.n	8018d7e <__ulp+0x26>
 8018d6c:	425b      	negs	r3, r3
 8018d6e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8018d72:	ea4f 5223 	mov.w	r2, r3, asr #20
 8018d76:	da04      	bge.n	8018d82 <__ulp+0x2a>
 8018d78:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8018d7c:	4113      	asrs	r3, r2
 8018d7e:	2200      	movs	r2, #0
 8018d80:	e008      	b.n	8018d94 <__ulp+0x3c>
 8018d82:	f1a2 0314 	sub.w	r3, r2, #20
 8018d86:	2b1e      	cmp	r3, #30
 8018d88:	bfda      	itte	le
 8018d8a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8018d8e:	40da      	lsrle	r2, r3
 8018d90:	2201      	movgt	r2, #1
 8018d92:	2300      	movs	r3, #0
 8018d94:	4619      	mov	r1, r3
 8018d96:	4610      	mov	r0, r2
 8018d98:	ec41 0b10 	vmov	d0, r0, r1
 8018d9c:	b002      	add	sp, #8
 8018d9e:	4770      	bx	lr
 8018da0:	7ff00000 	.word	0x7ff00000

08018da4 <__b2d>:
 8018da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018da8:	6906      	ldr	r6, [r0, #16]
 8018daa:	f100 0814 	add.w	r8, r0, #20
 8018dae:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8018db2:	1f37      	subs	r7, r6, #4
 8018db4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8018db8:	4610      	mov	r0, r2
 8018dba:	f7ff fd4b 	bl	8018854 <__hi0bits>
 8018dbe:	f1c0 0320 	rsb	r3, r0, #32
 8018dc2:	280a      	cmp	r0, #10
 8018dc4:	600b      	str	r3, [r1, #0]
 8018dc6:	491b      	ldr	r1, [pc, #108]	@ (8018e34 <__b2d+0x90>)
 8018dc8:	dc15      	bgt.n	8018df6 <__b2d+0x52>
 8018dca:	f1c0 0c0b 	rsb	ip, r0, #11
 8018dce:	fa22 f30c 	lsr.w	r3, r2, ip
 8018dd2:	45b8      	cmp	r8, r7
 8018dd4:	ea43 0501 	orr.w	r5, r3, r1
 8018dd8:	bf34      	ite	cc
 8018dda:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8018dde:	2300      	movcs	r3, #0
 8018de0:	3015      	adds	r0, #21
 8018de2:	fa02 f000 	lsl.w	r0, r2, r0
 8018de6:	fa23 f30c 	lsr.w	r3, r3, ip
 8018dea:	4303      	orrs	r3, r0
 8018dec:	461c      	mov	r4, r3
 8018dee:	ec45 4b10 	vmov	d0, r4, r5
 8018df2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018df6:	45b8      	cmp	r8, r7
 8018df8:	bf3a      	itte	cc
 8018dfa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8018dfe:	f1a6 0708 	subcc.w	r7, r6, #8
 8018e02:	2300      	movcs	r3, #0
 8018e04:	380b      	subs	r0, #11
 8018e06:	d012      	beq.n	8018e2e <__b2d+0x8a>
 8018e08:	f1c0 0120 	rsb	r1, r0, #32
 8018e0c:	fa23 f401 	lsr.w	r4, r3, r1
 8018e10:	4082      	lsls	r2, r0
 8018e12:	4322      	orrs	r2, r4
 8018e14:	4547      	cmp	r7, r8
 8018e16:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8018e1a:	bf8c      	ite	hi
 8018e1c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8018e20:	2200      	movls	r2, #0
 8018e22:	4083      	lsls	r3, r0
 8018e24:	40ca      	lsrs	r2, r1
 8018e26:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8018e2a:	4313      	orrs	r3, r2
 8018e2c:	e7de      	b.n	8018dec <__b2d+0x48>
 8018e2e:	ea42 0501 	orr.w	r5, r2, r1
 8018e32:	e7db      	b.n	8018dec <__b2d+0x48>
 8018e34:	3ff00000 	.word	0x3ff00000

08018e38 <__d2b>:
 8018e38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018e3c:	460f      	mov	r7, r1
 8018e3e:	2101      	movs	r1, #1
 8018e40:	ec59 8b10 	vmov	r8, r9, d0
 8018e44:	4616      	mov	r6, r2
 8018e46:	f7ff fc13 	bl	8018670 <_Balloc>
 8018e4a:	4604      	mov	r4, r0
 8018e4c:	b930      	cbnz	r0, 8018e5c <__d2b+0x24>
 8018e4e:	4602      	mov	r2, r0
 8018e50:	4b23      	ldr	r3, [pc, #140]	@ (8018ee0 <__d2b+0xa8>)
 8018e52:	4824      	ldr	r0, [pc, #144]	@ (8018ee4 <__d2b+0xac>)
 8018e54:	f240 310f 	movw	r1, #783	@ 0x30f
 8018e58:	f000 f982 	bl	8019160 <__assert_func>
 8018e5c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8018e60:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018e64:	b10d      	cbz	r5, 8018e6a <__d2b+0x32>
 8018e66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8018e6a:	9301      	str	r3, [sp, #4]
 8018e6c:	f1b8 0300 	subs.w	r3, r8, #0
 8018e70:	d023      	beq.n	8018eba <__d2b+0x82>
 8018e72:	4668      	mov	r0, sp
 8018e74:	9300      	str	r3, [sp, #0]
 8018e76:	f7ff fd0c 	bl	8018892 <__lo0bits>
 8018e7a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8018e7e:	b1d0      	cbz	r0, 8018eb6 <__d2b+0x7e>
 8018e80:	f1c0 0320 	rsb	r3, r0, #32
 8018e84:	fa02 f303 	lsl.w	r3, r2, r3
 8018e88:	430b      	orrs	r3, r1
 8018e8a:	40c2      	lsrs	r2, r0
 8018e8c:	6163      	str	r3, [r4, #20]
 8018e8e:	9201      	str	r2, [sp, #4]
 8018e90:	9b01      	ldr	r3, [sp, #4]
 8018e92:	61a3      	str	r3, [r4, #24]
 8018e94:	2b00      	cmp	r3, #0
 8018e96:	bf0c      	ite	eq
 8018e98:	2201      	moveq	r2, #1
 8018e9a:	2202      	movne	r2, #2
 8018e9c:	6122      	str	r2, [r4, #16]
 8018e9e:	b1a5      	cbz	r5, 8018eca <__d2b+0x92>
 8018ea0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8018ea4:	4405      	add	r5, r0
 8018ea6:	603d      	str	r5, [r7, #0]
 8018ea8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8018eac:	6030      	str	r0, [r6, #0]
 8018eae:	4620      	mov	r0, r4
 8018eb0:	b003      	add	sp, #12
 8018eb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018eb6:	6161      	str	r1, [r4, #20]
 8018eb8:	e7ea      	b.n	8018e90 <__d2b+0x58>
 8018eba:	a801      	add	r0, sp, #4
 8018ebc:	f7ff fce9 	bl	8018892 <__lo0bits>
 8018ec0:	9b01      	ldr	r3, [sp, #4]
 8018ec2:	6163      	str	r3, [r4, #20]
 8018ec4:	3020      	adds	r0, #32
 8018ec6:	2201      	movs	r2, #1
 8018ec8:	e7e8      	b.n	8018e9c <__d2b+0x64>
 8018eca:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8018ece:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8018ed2:	6038      	str	r0, [r7, #0]
 8018ed4:	6918      	ldr	r0, [r3, #16]
 8018ed6:	f7ff fcbd 	bl	8018854 <__hi0bits>
 8018eda:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8018ede:	e7e5      	b.n	8018eac <__d2b+0x74>
 8018ee0:	08019f81 	.word	0x08019f81
 8018ee4:	0801a009 	.word	0x0801a009

08018ee8 <__ratio>:
 8018ee8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018eec:	4688      	mov	r8, r1
 8018eee:	4669      	mov	r1, sp
 8018ef0:	4681      	mov	r9, r0
 8018ef2:	f7ff ff57 	bl	8018da4 <__b2d>
 8018ef6:	a901      	add	r1, sp, #4
 8018ef8:	4640      	mov	r0, r8
 8018efa:	ec55 4b10 	vmov	r4, r5, d0
 8018efe:	f7ff ff51 	bl	8018da4 <__b2d>
 8018f02:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8018f06:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8018f0a:	1ad2      	subs	r2, r2, r3
 8018f0c:	e9dd 3100 	ldrd	r3, r1, [sp]
 8018f10:	1a5b      	subs	r3, r3, r1
 8018f12:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8018f16:	ec57 6b10 	vmov	r6, r7, d0
 8018f1a:	2b00      	cmp	r3, #0
 8018f1c:	bfd6      	itet	le
 8018f1e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8018f22:	462a      	movgt	r2, r5
 8018f24:	463a      	movle	r2, r7
 8018f26:	46ab      	mov	fp, r5
 8018f28:	46a2      	mov	sl, r4
 8018f2a:	bfce      	itee	gt
 8018f2c:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8018f30:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8018f34:	ee00 3a90 	vmovle	s1, r3
 8018f38:	ec4b ab17 	vmov	d7, sl, fp
 8018f3c:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8018f40:	b003      	add	sp, #12
 8018f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018f46 <__copybits>:
 8018f46:	3901      	subs	r1, #1
 8018f48:	b570      	push	{r4, r5, r6, lr}
 8018f4a:	1149      	asrs	r1, r1, #5
 8018f4c:	6914      	ldr	r4, [r2, #16]
 8018f4e:	3101      	adds	r1, #1
 8018f50:	f102 0314 	add.w	r3, r2, #20
 8018f54:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8018f58:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8018f5c:	1f05      	subs	r5, r0, #4
 8018f5e:	42a3      	cmp	r3, r4
 8018f60:	d30c      	bcc.n	8018f7c <__copybits+0x36>
 8018f62:	1aa3      	subs	r3, r4, r2
 8018f64:	3b11      	subs	r3, #17
 8018f66:	f023 0303 	bic.w	r3, r3, #3
 8018f6a:	3211      	adds	r2, #17
 8018f6c:	42a2      	cmp	r2, r4
 8018f6e:	bf88      	it	hi
 8018f70:	2300      	movhi	r3, #0
 8018f72:	4418      	add	r0, r3
 8018f74:	2300      	movs	r3, #0
 8018f76:	4288      	cmp	r0, r1
 8018f78:	d305      	bcc.n	8018f86 <__copybits+0x40>
 8018f7a:	bd70      	pop	{r4, r5, r6, pc}
 8018f7c:	f853 6b04 	ldr.w	r6, [r3], #4
 8018f80:	f845 6f04 	str.w	r6, [r5, #4]!
 8018f84:	e7eb      	b.n	8018f5e <__copybits+0x18>
 8018f86:	f840 3b04 	str.w	r3, [r0], #4
 8018f8a:	e7f4      	b.n	8018f76 <__copybits+0x30>

08018f8c <__any_on>:
 8018f8c:	f100 0214 	add.w	r2, r0, #20
 8018f90:	6900      	ldr	r0, [r0, #16]
 8018f92:	114b      	asrs	r3, r1, #5
 8018f94:	4298      	cmp	r0, r3
 8018f96:	b510      	push	{r4, lr}
 8018f98:	db11      	blt.n	8018fbe <__any_on+0x32>
 8018f9a:	dd0a      	ble.n	8018fb2 <__any_on+0x26>
 8018f9c:	f011 011f 	ands.w	r1, r1, #31
 8018fa0:	d007      	beq.n	8018fb2 <__any_on+0x26>
 8018fa2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8018fa6:	fa24 f001 	lsr.w	r0, r4, r1
 8018faa:	fa00 f101 	lsl.w	r1, r0, r1
 8018fae:	428c      	cmp	r4, r1
 8018fb0:	d10b      	bne.n	8018fca <__any_on+0x3e>
 8018fb2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018fb6:	4293      	cmp	r3, r2
 8018fb8:	d803      	bhi.n	8018fc2 <__any_on+0x36>
 8018fba:	2000      	movs	r0, #0
 8018fbc:	bd10      	pop	{r4, pc}
 8018fbe:	4603      	mov	r3, r0
 8018fc0:	e7f7      	b.n	8018fb2 <__any_on+0x26>
 8018fc2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8018fc6:	2900      	cmp	r1, #0
 8018fc8:	d0f5      	beq.n	8018fb6 <__any_on+0x2a>
 8018fca:	2001      	movs	r0, #1
 8018fcc:	e7f6      	b.n	8018fbc <__any_on+0x30>

08018fce <__ascii_wctomb>:
 8018fce:	4603      	mov	r3, r0
 8018fd0:	4608      	mov	r0, r1
 8018fd2:	b141      	cbz	r1, 8018fe6 <__ascii_wctomb+0x18>
 8018fd4:	2aff      	cmp	r2, #255	@ 0xff
 8018fd6:	d904      	bls.n	8018fe2 <__ascii_wctomb+0x14>
 8018fd8:	228a      	movs	r2, #138	@ 0x8a
 8018fda:	601a      	str	r2, [r3, #0]
 8018fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8018fe0:	4770      	bx	lr
 8018fe2:	700a      	strb	r2, [r1, #0]
 8018fe4:	2001      	movs	r0, #1
 8018fe6:	4770      	bx	lr

08018fe8 <__sflush_r>:
 8018fe8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018ff0:	0716      	lsls	r6, r2, #28
 8018ff2:	4605      	mov	r5, r0
 8018ff4:	460c      	mov	r4, r1
 8018ff6:	d454      	bmi.n	80190a2 <__sflush_r+0xba>
 8018ff8:	684b      	ldr	r3, [r1, #4]
 8018ffa:	2b00      	cmp	r3, #0
 8018ffc:	dc02      	bgt.n	8019004 <__sflush_r+0x1c>
 8018ffe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8019000:	2b00      	cmp	r3, #0
 8019002:	dd48      	ble.n	8019096 <__sflush_r+0xae>
 8019004:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8019006:	2e00      	cmp	r6, #0
 8019008:	d045      	beq.n	8019096 <__sflush_r+0xae>
 801900a:	2300      	movs	r3, #0
 801900c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8019010:	682f      	ldr	r7, [r5, #0]
 8019012:	6a21      	ldr	r1, [r4, #32]
 8019014:	602b      	str	r3, [r5, #0]
 8019016:	d030      	beq.n	801907a <__sflush_r+0x92>
 8019018:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801901a:	89a3      	ldrh	r3, [r4, #12]
 801901c:	0759      	lsls	r1, r3, #29
 801901e:	d505      	bpl.n	801902c <__sflush_r+0x44>
 8019020:	6863      	ldr	r3, [r4, #4]
 8019022:	1ad2      	subs	r2, r2, r3
 8019024:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8019026:	b10b      	cbz	r3, 801902c <__sflush_r+0x44>
 8019028:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801902a:	1ad2      	subs	r2, r2, r3
 801902c:	2300      	movs	r3, #0
 801902e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8019030:	6a21      	ldr	r1, [r4, #32]
 8019032:	4628      	mov	r0, r5
 8019034:	47b0      	blx	r6
 8019036:	1c43      	adds	r3, r0, #1
 8019038:	89a3      	ldrh	r3, [r4, #12]
 801903a:	d106      	bne.n	801904a <__sflush_r+0x62>
 801903c:	6829      	ldr	r1, [r5, #0]
 801903e:	291d      	cmp	r1, #29
 8019040:	d82b      	bhi.n	801909a <__sflush_r+0xb2>
 8019042:	4a2a      	ldr	r2, [pc, #168]	@ (80190ec <__sflush_r+0x104>)
 8019044:	410a      	asrs	r2, r1
 8019046:	07d6      	lsls	r6, r2, #31
 8019048:	d427      	bmi.n	801909a <__sflush_r+0xb2>
 801904a:	2200      	movs	r2, #0
 801904c:	6062      	str	r2, [r4, #4]
 801904e:	04d9      	lsls	r1, r3, #19
 8019050:	6922      	ldr	r2, [r4, #16]
 8019052:	6022      	str	r2, [r4, #0]
 8019054:	d504      	bpl.n	8019060 <__sflush_r+0x78>
 8019056:	1c42      	adds	r2, r0, #1
 8019058:	d101      	bne.n	801905e <__sflush_r+0x76>
 801905a:	682b      	ldr	r3, [r5, #0]
 801905c:	b903      	cbnz	r3, 8019060 <__sflush_r+0x78>
 801905e:	6560      	str	r0, [r4, #84]	@ 0x54
 8019060:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019062:	602f      	str	r7, [r5, #0]
 8019064:	b1b9      	cbz	r1, 8019096 <__sflush_r+0xae>
 8019066:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801906a:	4299      	cmp	r1, r3
 801906c:	d002      	beq.n	8019074 <__sflush_r+0x8c>
 801906e:	4628      	mov	r0, r5
 8019070:	f7fe feba 	bl	8017de8 <_free_r>
 8019074:	2300      	movs	r3, #0
 8019076:	6363      	str	r3, [r4, #52]	@ 0x34
 8019078:	e00d      	b.n	8019096 <__sflush_r+0xae>
 801907a:	2301      	movs	r3, #1
 801907c:	4628      	mov	r0, r5
 801907e:	47b0      	blx	r6
 8019080:	4602      	mov	r2, r0
 8019082:	1c50      	adds	r0, r2, #1
 8019084:	d1c9      	bne.n	801901a <__sflush_r+0x32>
 8019086:	682b      	ldr	r3, [r5, #0]
 8019088:	2b00      	cmp	r3, #0
 801908a:	d0c6      	beq.n	801901a <__sflush_r+0x32>
 801908c:	2b1d      	cmp	r3, #29
 801908e:	d001      	beq.n	8019094 <__sflush_r+0xac>
 8019090:	2b16      	cmp	r3, #22
 8019092:	d11e      	bne.n	80190d2 <__sflush_r+0xea>
 8019094:	602f      	str	r7, [r5, #0]
 8019096:	2000      	movs	r0, #0
 8019098:	e022      	b.n	80190e0 <__sflush_r+0xf8>
 801909a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801909e:	b21b      	sxth	r3, r3
 80190a0:	e01b      	b.n	80190da <__sflush_r+0xf2>
 80190a2:	690f      	ldr	r7, [r1, #16]
 80190a4:	2f00      	cmp	r7, #0
 80190a6:	d0f6      	beq.n	8019096 <__sflush_r+0xae>
 80190a8:	0793      	lsls	r3, r2, #30
 80190aa:	680e      	ldr	r6, [r1, #0]
 80190ac:	bf08      	it	eq
 80190ae:	694b      	ldreq	r3, [r1, #20]
 80190b0:	600f      	str	r7, [r1, #0]
 80190b2:	bf18      	it	ne
 80190b4:	2300      	movne	r3, #0
 80190b6:	eba6 0807 	sub.w	r8, r6, r7
 80190ba:	608b      	str	r3, [r1, #8]
 80190bc:	f1b8 0f00 	cmp.w	r8, #0
 80190c0:	dde9      	ble.n	8019096 <__sflush_r+0xae>
 80190c2:	6a21      	ldr	r1, [r4, #32]
 80190c4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80190c6:	4643      	mov	r3, r8
 80190c8:	463a      	mov	r2, r7
 80190ca:	4628      	mov	r0, r5
 80190cc:	47b0      	blx	r6
 80190ce:	2800      	cmp	r0, #0
 80190d0:	dc08      	bgt.n	80190e4 <__sflush_r+0xfc>
 80190d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80190d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80190da:	81a3      	strh	r3, [r4, #12]
 80190dc:	f04f 30ff 	mov.w	r0, #4294967295
 80190e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80190e4:	4407      	add	r7, r0
 80190e6:	eba8 0800 	sub.w	r8, r8, r0
 80190ea:	e7e7      	b.n	80190bc <__sflush_r+0xd4>
 80190ec:	dfbffffe 	.word	0xdfbffffe

080190f0 <_fflush_r>:
 80190f0:	b538      	push	{r3, r4, r5, lr}
 80190f2:	690b      	ldr	r3, [r1, #16]
 80190f4:	4605      	mov	r5, r0
 80190f6:	460c      	mov	r4, r1
 80190f8:	b913      	cbnz	r3, 8019100 <_fflush_r+0x10>
 80190fa:	2500      	movs	r5, #0
 80190fc:	4628      	mov	r0, r5
 80190fe:	bd38      	pop	{r3, r4, r5, pc}
 8019100:	b118      	cbz	r0, 801910a <_fflush_r+0x1a>
 8019102:	6a03      	ldr	r3, [r0, #32]
 8019104:	b90b      	cbnz	r3, 801910a <_fflush_r+0x1a>
 8019106:	f7fe fd45 	bl	8017b94 <__sinit>
 801910a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801910e:	2b00      	cmp	r3, #0
 8019110:	d0f3      	beq.n	80190fa <_fflush_r+0xa>
 8019112:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8019114:	07d0      	lsls	r0, r2, #31
 8019116:	d404      	bmi.n	8019122 <_fflush_r+0x32>
 8019118:	0599      	lsls	r1, r3, #22
 801911a:	d402      	bmi.n	8019122 <_fflush_r+0x32>
 801911c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801911e:	f7fe fe4a 	bl	8017db6 <__retarget_lock_acquire_recursive>
 8019122:	4628      	mov	r0, r5
 8019124:	4621      	mov	r1, r4
 8019126:	f7ff ff5f 	bl	8018fe8 <__sflush_r>
 801912a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801912c:	07da      	lsls	r2, r3, #31
 801912e:	4605      	mov	r5, r0
 8019130:	d4e4      	bmi.n	80190fc <_fflush_r+0xc>
 8019132:	89a3      	ldrh	r3, [r4, #12]
 8019134:	059b      	lsls	r3, r3, #22
 8019136:	d4e1      	bmi.n	80190fc <_fflush_r+0xc>
 8019138:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801913a:	f7fe fe3d 	bl	8017db8 <__retarget_lock_release_recursive>
 801913e:	e7dd      	b.n	80190fc <_fflush_r+0xc>

08019140 <_sbrk_r>:
 8019140:	b538      	push	{r3, r4, r5, lr}
 8019142:	4d06      	ldr	r5, [pc, #24]	@ (801915c <_sbrk_r+0x1c>)
 8019144:	2300      	movs	r3, #0
 8019146:	4604      	mov	r4, r0
 8019148:	4608      	mov	r0, r1
 801914a:	602b      	str	r3, [r5, #0]
 801914c:	f7ea fb16 	bl	800377c <_sbrk>
 8019150:	1c43      	adds	r3, r0, #1
 8019152:	d102      	bne.n	801915a <_sbrk_r+0x1a>
 8019154:	682b      	ldr	r3, [r5, #0]
 8019156:	b103      	cbz	r3, 801915a <_sbrk_r+0x1a>
 8019158:	6023      	str	r3, [r4, #0]
 801915a:	bd38      	pop	{r3, r4, r5, pc}
 801915c:	2400686c 	.word	0x2400686c

08019160 <__assert_func>:
 8019160:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019162:	4614      	mov	r4, r2
 8019164:	461a      	mov	r2, r3
 8019166:	4b09      	ldr	r3, [pc, #36]	@ (801918c <__assert_func+0x2c>)
 8019168:	681b      	ldr	r3, [r3, #0]
 801916a:	4605      	mov	r5, r0
 801916c:	68d8      	ldr	r0, [r3, #12]
 801916e:	b954      	cbnz	r4, 8019186 <__assert_func+0x26>
 8019170:	4b07      	ldr	r3, [pc, #28]	@ (8019190 <__assert_func+0x30>)
 8019172:	461c      	mov	r4, r3
 8019174:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019178:	9100      	str	r1, [sp, #0]
 801917a:	462b      	mov	r3, r5
 801917c:	4905      	ldr	r1, [pc, #20]	@ (8019194 <__assert_func+0x34>)
 801917e:	f000 f829 	bl	80191d4 <fiprintf>
 8019182:	f000 f839 	bl	80191f8 <abort>
 8019186:	4b04      	ldr	r3, [pc, #16]	@ (8019198 <__assert_func+0x38>)
 8019188:	e7f4      	b.n	8019174 <__assert_func+0x14>
 801918a:	bf00      	nop
 801918c:	24000240 	.word	0x24000240
 8019190:	0801a19b 	.word	0x0801a19b
 8019194:	0801a16d 	.word	0x0801a16d
 8019198:	0801a160 	.word	0x0801a160

0801919c <_calloc_r>:
 801919c:	b570      	push	{r4, r5, r6, lr}
 801919e:	fba1 5402 	umull	r5, r4, r1, r2
 80191a2:	b93c      	cbnz	r4, 80191b4 <_calloc_r+0x18>
 80191a4:	4629      	mov	r1, r5
 80191a6:	f7ff f9c5 	bl	8018534 <_malloc_r>
 80191aa:	4606      	mov	r6, r0
 80191ac:	b928      	cbnz	r0, 80191ba <_calloc_r+0x1e>
 80191ae:	2600      	movs	r6, #0
 80191b0:	4630      	mov	r0, r6
 80191b2:	bd70      	pop	{r4, r5, r6, pc}
 80191b4:	220c      	movs	r2, #12
 80191b6:	6002      	str	r2, [r0, #0]
 80191b8:	e7f9      	b.n	80191ae <_calloc_r+0x12>
 80191ba:	462a      	mov	r2, r5
 80191bc:	4621      	mov	r1, r4
 80191be:	f7fe fd62 	bl	8017c86 <memset>
 80191c2:	e7f5      	b.n	80191b0 <_calloc_r+0x14>

080191c4 <malloc>:
 80191c4:	4b02      	ldr	r3, [pc, #8]	@ (80191d0 <malloc+0xc>)
 80191c6:	4601      	mov	r1, r0
 80191c8:	6818      	ldr	r0, [r3, #0]
 80191ca:	f7ff b9b3 	b.w	8018534 <_malloc_r>
 80191ce:	bf00      	nop
 80191d0:	24000240 	.word	0x24000240

080191d4 <fiprintf>:
 80191d4:	b40e      	push	{r1, r2, r3}
 80191d6:	b503      	push	{r0, r1, lr}
 80191d8:	4601      	mov	r1, r0
 80191da:	ab03      	add	r3, sp, #12
 80191dc:	4805      	ldr	r0, [pc, #20]	@ (80191f4 <fiprintf+0x20>)
 80191de:	f853 2b04 	ldr.w	r2, [r3], #4
 80191e2:	6800      	ldr	r0, [r0, #0]
 80191e4:	9301      	str	r3, [sp, #4]
 80191e6:	f000 f837 	bl	8019258 <_vfiprintf_r>
 80191ea:	b002      	add	sp, #8
 80191ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80191f0:	b003      	add	sp, #12
 80191f2:	4770      	bx	lr
 80191f4:	24000240 	.word	0x24000240

080191f8 <abort>:
 80191f8:	b508      	push	{r3, lr}
 80191fa:	2006      	movs	r0, #6
 80191fc:	f000 fb8e 	bl	801991c <raise>
 8019200:	2001      	movs	r0, #1
 8019202:	f7ea fa43 	bl	800368c <_exit>

08019206 <__sfputc_r>:
 8019206:	6893      	ldr	r3, [r2, #8]
 8019208:	3b01      	subs	r3, #1
 801920a:	2b00      	cmp	r3, #0
 801920c:	b410      	push	{r4}
 801920e:	6093      	str	r3, [r2, #8]
 8019210:	da08      	bge.n	8019224 <__sfputc_r+0x1e>
 8019212:	6994      	ldr	r4, [r2, #24]
 8019214:	42a3      	cmp	r3, r4
 8019216:	db01      	blt.n	801921c <__sfputc_r+0x16>
 8019218:	290a      	cmp	r1, #10
 801921a:	d103      	bne.n	8019224 <__sfputc_r+0x1e>
 801921c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019220:	f000 bac0 	b.w	80197a4 <__swbuf_r>
 8019224:	6813      	ldr	r3, [r2, #0]
 8019226:	1c58      	adds	r0, r3, #1
 8019228:	6010      	str	r0, [r2, #0]
 801922a:	7019      	strb	r1, [r3, #0]
 801922c:	4608      	mov	r0, r1
 801922e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019232:	4770      	bx	lr

08019234 <__sfputs_r>:
 8019234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019236:	4606      	mov	r6, r0
 8019238:	460f      	mov	r7, r1
 801923a:	4614      	mov	r4, r2
 801923c:	18d5      	adds	r5, r2, r3
 801923e:	42ac      	cmp	r4, r5
 8019240:	d101      	bne.n	8019246 <__sfputs_r+0x12>
 8019242:	2000      	movs	r0, #0
 8019244:	e007      	b.n	8019256 <__sfputs_r+0x22>
 8019246:	f814 1b01 	ldrb.w	r1, [r4], #1
 801924a:	463a      	mov	r2, r7
 801924c:	4630      	mov	r0, r6
 801924e:	f7ff ffda 	bl	8019206 <__sfputc_r>
 8019252:	1c43      	adds	r3, r0, #1
 8019254:	d1f3      	bne.n	801923e <__sfputs_r+0xa>
 8019256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08019258 <_vfiprintf_r>:
 8019258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801925c:	460d      	mov	r5, r1
 801925e:	b09d      	sub	sp, #116	@ 0x74
 8019260:	4614      	mov	r4, r2
 8019262:	4698      	mov	r8, r3
 8019264:	4606      	mov	r6, r0
 8019266:	b118      	cbz	r0, 8019270 <_vfiprintf_r+0x18>
 8019268:	6a03      	ldr	r3, [r0, #32]
 801926a:	b90b      	cbnz	r3, 8019270 <_vfiprintf_r+0x18>
 801926c:	f7fe fc92 	bl	8017b94 <__sinit>
 8019270:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019272:	07d9      	lsls	r1, r3, #31
 8019274:	d405      	bmi.n	8019282 <_vfiprintf_r+0x2a>
 8019276:	89ab      	ldrh	r3, [r5, #12]
 8019278:	059a      	lsls	r2, r3, #22
 801927a:	d402      	bmi.n	8019282 <_vfiprintf_r+0x2a>
 801927c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801927e:	f7fe fd9a 	bl	8017db6 <__retarget_lock_acquire_recursive>
 8019282:	89ab      	ldrh	r3, [r5, #12]
 8019284:	071b      	lsls	r3, r3, #28
 8019286:	d501      	bpl.n	801928c <_vfiprintf_r+0x34>
 8019288:	692b      	ldr	r3, [r5, #16]
 801928a:	b99b      	cbnz	r3, 80192b4 <_vfiprintf_r+0x5c>
 801928c:	4629      	mov	r1, r5
 801928e:	4630      	mov	r0, r6
 8019290:	f000 fac6 	bl	8019820 <__swsetup_r>
 8019294:	b170      	cbz	r0, 80192b4 <_vfiprintf_r+0x5c>
 8019296:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019298:	07dc      	lsls	r4, r3, #31
 801929a:	d504      	bpl.n	80192a6 <_vfiprintf_r+0x4e>
 801929c:	f04f 30ff 	mov.w	r0, #4294967295
 80192a0:	b01d      	add	sp, #116	@ 0x74
 80192a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80192a6:	89ab      	ldrh	r3, [r5, #12]
 80192a8:	0598      	lsls	r0, r3, #22
 80192aa:	d4f7      	bmi.n	801929c <_vfiprintf_r+0x44>
 80192ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80192ae:	f7fe fd83 	bl	8017db8 <__retarget_lock_release_recursive>
 80192b2:	e7f3      	b.n	801929c <_vfiprintf_r+0x44>
 80192b4:	2300      	movs	r3, #0
 80192b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80192b8:	2320      	movs	r3, #32
 80192ba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80192be:	f8cd 800c 	str.w	r8, [sp, #12]
 80192c2:	2330      	movs	r3, #48	@ 0x30
 80192c4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8019474 <_vfiprintf_r+0x21c>
 80192c8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80192cc:	f04f 0901 	mov.w	r9, #1
 80192d0:	4623      	mov	r3, r4
 80192d2:	469a      	mov	sl, r3
 80192d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80192d8:	b10a      	cbz	r2, 80192de <_vfiprintf_r+0x86>
 80192da:	2a25      	cmp	r2, #37	@ 0x25
 80192dc:	d1f9      	bne.n	80192d2 <_vfiprintf_r+0x7a>
 80192de:	ebba 0b04 	subs.w	fp, sl, r4
 80192e2:	d00b      	beq.n	80192fc <_vfiprintf_r+0xa4>
 80192e4:	465b      	mov	r3, fp
 80192e6:	4622      	mov	r2, r4
 80192e8:	4629      	mov	r1, r5
 80192ea:	4630      	mov	r0, r6
 80192ec:	f7ff ffa2 	bl	8019234 <__sfputs_r>
 80192f0:	3001      	adds	r0, #1
 80192f2:	f000 80a7 	beq.w	8019444 <_vfiprintf_r+0x1ec>
 80192f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80192f8:	445a      	add	r2, fp
 80192fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80192fc:	f89a 3000 	ldrb.w	r3, [sl]
 8019300:	2b00      	cmp	r3, #0
 8019302:	f000 809f 	beq.w	8019444 <_vfiprintf_r+0x1ec>
 8019306:	2300      	movs	r3, #0
 8019308:	f04f 32ff 	mov.w	r2, #4294967295
 801930c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019310:	f10a 0a01 	add.w	sl, sl, #1
 8019314:	9304      	str	r3, [sp, #16]
 8019316:	9307      	str	r3, [sp, #28]
 8019318:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801931c:	931a      	str	r3, [sp, #104]	@ 0x68
 801931e:	4654      	mov	r4, sl
 8019320:	2205      	movs	r2, #5
 8019322:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019326:	4853      	ldr	r0, [pc, #332]	@ (8019474 <_vfiprintf_r+0x21c>)
 8019328:	f7e6 fff2 	bl	8000310 <memchr>
 801932c:	9a04      	ldr	r2, [sp, #16]
 801932e:	b9d8      	cbnz	r0, 8019368 <_vfiprintf_r+0x110>
 8019330:	06d1      	lsls	r1, r2, #27
 8019332:	bf44      	itt	mi
 8019334:	2320      	movmi	r3, #32
 8019336:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801933a:	0713      	lsls	r3, r2, #28
 801933c:	bf44      	itt	mi
 801933e:	232b      	movmi	r3, #43	@ 0x2b
 8019340:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019344:	f89a 3000 	ldrb.w	r3, [sl]
 8019348:	2b2a      	cmp	r3, #42	@ 0x2a
 801934a:	d015      	beq.n	8019378 <_vfiprintf_r+0x120>
 801934c:	9a07      	ldr	r2, [sp, #28]
 801934e:	4654      	mov	r4, sl
 8019350:	2000      	movs	r0, #0
 8019352:	f04f 0c0a 	mov.w	ip, #10
 8019356:	4621      	mov	r1, r4
 8019358:	f811 3b01 	ldrb.w	r3, [r1], #1
 801935c:	3b30      	subs	r3, #48	@ 0x30
 801935e:	2b09      	cmp	r3, #9
 8019360:	d94b      	bls.n	80193fa <_vfiprintf_r+0x1a2>
 8019362:	b1b0      	cbz	r0, 8019392 <_vfiprintf_r+0x13a>
 8019364:	9207      	str	r2, [sp, #28]
 8019366:	e014      	b.n	8019392 <_vfiprintf_r+0x13a>
 8019368:	eba0 0308 	sub.w	r3, r0, r8
 801936c:	fa09 f303 	lsl.w	r3, r9, r3
 8019370:	4313      	orrs	r3, r2
 8019372:	9304      	str	r3, [sp, #16]
 8019374:	46a2      	mov	sl, r4
 8019376:	e7d2      	b.n	801931e <_vfiprintf_r+0xc6>
 8019378:	9b03      	ldr	r3, [sp, #12]
 801937a:	1d19      	adds	r1, r3, #4
 801937c:	681b      	ldr	r3, [r3, #0]
 801937e:	9103      	str	r1, [sp, #12]
 8019380:	2b00      	cmp	r3, #0
 8019382:	bfbb      	ittet	lt
 8019384:	425b      	neglt	r3, r3
 8019386:	f042 0202 	orrlt.w	r2, r2, #2
 801938a:	9307      	strge	r3, [sp, #28]
 801938c:	9307      	strlt	r3, [sp, #28]
 801938e:	bfb8      	it	lt
 8019390:	9204      	strlt	r2, [sp, #16]
 8019392:	7823      	ldrb	r3, [r4, #0]
 8019394:	2b2e      	cmp	r3, #46	@ 0x2e
 8019396:	d10a      	bne.n	80193ae <_vfiprintf_r+0x156>
 8019398:	7863      	ldrb	r3, [r4, #1]
 801939a:	2b2a      	cmp	r3, #42	@ 0x2a
 801939c:	d132      	bne.n	8019404 <_vfiprintf_r+0x1ac>
 801939e:	9b03      	ldr	r3, [sp, #12]
 80193a0:	1d1a      	adds	r2, r3, #4
 80193a2:	681b      	ldr	r3, [r3, #0]
 80193a4:	9203      	str	r2, [sp, #12]
 80193a6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80193aa:	3402      	adds	r4, #2
 80193ac:	9305      	str	r3, [sp, #20]
 80193ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8019484 <_vfiprintf_r+0x22c>
 80193b2:	7821      	ldrb	r1, [r4, #0]
 80193b4:	2203      	movs	r2, #3
 80193b6:	4650      	mov	r0, sl
 80193b8:	f7e6 ffaa 	bl	8000310 <memchr>
 80193bc:	b138      	cbz	r0, 80193ce <_vfiprintf_r+0x176>
 80193be:	9b04      	ldr	r3, [sp, #16]
 80193c0:	eba0 000a 	sub.w	r0, r0, sl
 80193c4:	2240      	movs	r2, #64	@ 0x40
 80193c6:	4082      	lsls	r2, r0
 80193c8:	4313      	orrs	r3, r2
 80193ca:	3401      	adds	r4, #1
 80193cc:	9304      	str	r3, [sp, #16]
 80193ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80193d2:	4829      	ldr	r0, [pc, #164]	@ (8019478 <_vfiprintf_r+0x220>)
 80193d4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80193d8:	2206      	movs	r2, #6
 80193da:	f7e6 ff99 	bl	8000310 <memchr>
 80193de:	2800      	cmp	r0, #0
 80193e0:	d03f      	beq.n	8019462 <_vfiprintf_r+0x20a>
 80193e2:	4b26      	ldr	r3, [pc, #152]	@ (801947c <_vfiprintf_r+0x224>)
 80193e4:	bb1b      	cbnz	r3, 801942e <_vfiprintf_r+0x1d6>
 80193e6:	9b03      	ldr	r3, [sp, #12]
 80193e8:	3307      	adds	r3, #7
 80193ea:	f023 0307 	bic.w	r3, r3, #7
 80193ee:	3308      	adds	r3, #8
 80193f0:	9303      	str	r3, [sp, #12]
 80193f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80193f4:	443b      	add	r3, r7
 80193f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80193f8:	e76a      	b.n	80192d0 <_vfiprintf_r+0x78>
 80193fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80193fe:	460c      	mov	r4, r1
 8019400:	2001      	movs	r0, #1
 8019402:	e7a8      	b.n	8019356 <_vfiprintf_r+0xfe>
 8019404:	2300      	movs	r3, #0
 8019406:	3401      	adds	r4, #1
 8019408:	9305      	str	r3, [sp, #20]
 801940a:	4619      	mov	r1, r3
 801940c:	f04f 0c0a 	mov.w	ip, #10
 8019410:	4620      	mov	r0, r4
 8019412:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019416:	3a30      	subs	r2, #48	@ 0x30
 8019418:	2a09      	cmp	r2, #9
 801941a:	d903      	bls.n	8019424 <_vfiprintf_r+0x1cc>
 801941c:	2b00      	cmp	r3, #0
 801941e:	d0c6      	beq.n	80193ae <_vfiprintf_r+0x156>
 8019420:	9105      	str	r1, [sp, #20]
 8019422:	e7c4      	b.n	80193ae <_vfiprintf_r+0x156>
 8019424:	fb0c 2101 	mla	r1, ip, r1, r2
 8019428:	4604      	mov	r4, r0
 801942a:	2301      	movs	r3, #1
 801942c:	e7f0      	b.n	8019410 <_vfiprintf_r+0x1b8>
 801942e:	ab03      	add	r3, sp, #12
 8019430:	9300      	str	r3, [sp, #0]
 8019432:	462a      	mov	r2, r5
 8019434:	4b12      	ldr	r3, [pc, #72]	@ (8019480 <_vfiprintf_r+0x228>)
 8019436:	a904      	add	r1, sp, #16
 8019438:	4630      	mov	r0, r6
 801943a:	f3af 8000 	nop.w
 801943e:	4607      	mov	r7, r0
 8019440:	1c78      	adds	r0, r7, #1
 8019442:	d1d6      	bne.n	80193f2 <_vfiprintf_r+0x19a>
 8019444:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019446:	07d9      	lsls	r1, r3, #31
 8019448:	d405      	bmi.n	8019456 <_vfiprintf_r+0x1fe>
 801944a:	89ab      	ldrh	r3, [r5, #12]
 801944c:	059a      	lsls	r2, r3, #22
 801944e:	d402      	bmi.n	8019456 <_vfiprintf_r+0x1fe>
 8019450:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019452:	f7fe fcb1 	bl	8017db8 <__retarget_lock_release_recursive>
 8019456:	89ab      	ldrh	r3, [r5, #12]
 8019458:	065b      	lsls	r3, r3, #25
 801945a:	f53f af1f 	bmi.w	801929c <_vfiprintf_r+0x44>
 801945e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019460:	e71e      	b.n	80192a0 <_vfiprintf_r+0x48>
 8019462:	ab03      	add	r3, sp, #12
 8019464:	9300      	str	r3, [sp, #0]
 8019466:	462a      	mov	r2, r5
 8019468:	4b05      	ldr	r3, [pc, #20]	@ (8019480 <_vfiprintf_r+0x228>)
 801946a:	a904      	add	r1, sp, #16
 801946c:	4630      	mov	r0, r6
 801946e:	f000 f879 	bl	8019564 <_printf_i>
 8019472:	e7e4      	b.n	801943e <_vfiprintf_r+0x1e6>
 8019474:	0801a19c 	.word	0x0801a19c
 8019478:	0801a1a6 	.word	0x0801a1a6
 801947c:	00000000 	.word	0x00000000
 8019480:	08019235 	.word	0x08019235
 8019484:	0801a1a2 	.word	0x0801a1a2

08019488 <_printf_common>:
 8019488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801948c:	4616      	mov	r6, r2
 801948e:	4698      	mov	r8, r3
 8019490:	688a      	ldr	r2, [r1, #8]
 8019492:	690b      	ldr	r3, [r1, #16]
 8019494:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8019498:	4293      	cmp	r3, r2
 801949a:	bfb8      	it	lt
 801949c:	4613      	movlt	r3, r2
 801949e:	6033      	str	r3, [r6, #0]
 80194a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80194a4:	4607      	mov	r7, r0
 80194a6:	460c      	mov	r4, r1
 80194a8:	b10a      	cbz	r2, 80194ae <_printf_common+0x26>
 80194aa:	3301      	adds	r3, #1
 80194ac:	6033      	str	r3, [r6, #0]
 80194ae:	6823      	ldr	r3, [r4, #0]
 80194b0:	0699      	lsls	r1, r3, #26
 80194b2:	bf42      	ittt	mi
 80194b4:	6833      	ldrmi	r3, [r6, #0]
 80194b6:	3302      	addmi	r3, #2
 80194b8:	6033      	strmi	r3, [r6, #0]
 80194ba:	6825      	ldr	r5, [r4, #0]
 80194bc:	f015 0506 	ands.w	r5, r5, #6
 80194c0:	d106      	bne.n	80194d0 <_printf_common+0x48>
 80194c2:	f104 0a19 	add.w	sl, r4, #25
 80194c6:	68e3      	ldr	r3, [r4, #12]
 80194c8:	6832      	ldr	r2, [r6, #0]
 80194ca:	1a9b      	subs	r3, r3, r2
 80194cc:	42ab      	cmp	r3, r5
 80194ce:	dc26      	bgt.n	801951e <_printf_common+0x96>
 80194d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80194d4:	6822      	ldr	r2, [r4, #0]
 80194d6:	3b00      	subs	r3, #0
 80194d8:	bf18      	it	ne
 80194da:	2301      	movne	r3, #1
 80194dc:	0692      	lsls	r2, r2, #26
 80194de:	d42b      	bmi.n	8019538 <_printf_common+0xb0>
 80194e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80194e4:	4641      	mov	r1, r8
 80194e6:	4638      	mov	r0, r7
 80194e8:	47c8      	blx	r9
 80194ea:	3001      	adds	r0, #1
 80194ec:	d01e      	beq.n	801952c <_printf_common+0xa4>
 80194ee:	6823      	ldr	r3, [r4, #0]
 80194f0:	6922      	ldr	r2, [r4, #16]
 80194f2:	f003 0306 	and.w	r3, r3, #6
 80194f6:	2b04      	cmp	r3, #4
 80194f8:	bf02      	ittt	eq
 80194fa:	68e5      	ldreq	r5, [r4, #12]
 80194fc:	6833      	ldreq	r3, [r6, #0]
 80194fe:	1aed      	subeq	r5, r5, r3
 8019500:	68a3      	ldr	r3, [r4, #8]
 8019502:	bf0c      	ite	eq
 8019504:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019508:	2500      	movne	r5, #0
 801950a:	4293      	cmp	r3, r2
 801950c:	bfc4      	itt	gt
 801950e:	1a9b      	subgt	r3, r3, r2
 8019510:	18ed      	addgt	r5, r5, r3
 8019512:	2600      	movs	r6, #0
 8019514:	341a      	adds	r4, #26
 8019516:	42b5      	cmp	r5, r6
 8019518:	d11a      	bne.n	8019550 <_printf_common+0xc8>
 801951a:	2000      	movs	r0, #0
 801951c:	e008      	b.n	8019530 <_printf_common+0xa8>
 801951e:	2301      	movs	r3, #1
 8019520:	4652      	mov	r2, sl
 8019522:	4641      	mov	r1, r8
 8019524:	4638      	mov	r0, r7
 8019526:	47c8      	blx	r9
 8019528:	3001      	adds	r0, #1
 801952a:	d103      	bne.n	8019534 <_printf_common+0xac>
 801952c:	f04f 30ff 	mov.w	r0, #4294967295
 8019530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019534:	3501      	adds	r5, #1
 8019536:	e7c6      	b.n	80194c6 <_printf_common+0x3e>
 8019538:	18e1      	adds	r1, r4, r3
 801953a:	1c5a      	adds	r2, r3, #1
 801953c:	2030      	movs	r0, #48	@ 0x30
 801953e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8019542:	4422      	add	r2, r4
 8019544:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8019548:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801954c:	3302      	adds	r3, #2
 801954e:	e7c7      	b.n	80194e0 <_printf_common+0x58>
 8019550:	2301      	movs	r3, #1
 8019552:	4622      	mov	r2, r4
 8019554:	4641      	mov	r1, r8
 8019556:	4638      	mov	r0, r7
 8019558:	47c8      	blx	r9
 801955a:	3001      	adds	r0, #1
 801955c:	d0e6      	beq.n	801952c <_printf_common+0xa4>
 801955e:	3601      	adds	r6, #1
 8019560:	e7d9      	b.n	8019516 <_printf_common+0x8e>
	...

08019564 <_printf_i>:
 8019564:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019568:	7e0f      	ldrb	r7, [r1, #24]
 801956a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801956c:	2f78      	cmp	r7, #120	@ 0x78
 801956e:	4691      	mov	r9, r2
 8019570:	4680      	mov	r8, r0
 8019572:	460c      	mov	r4, r1
 8019574:	469a      	mov	sl, r3
 8019576:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801957a:	d807      	bhi.n	801958c <_printf_i+0x28>
 801957c:	2f62      	cmp	r7, #98	@ 0x62
 801957e:	d80a      	bhi.n	8019596 <_printf_i+0x32>
 8019580:	2f00      	cmp	r7, #0
 8019582:	f000 80d2 	beq.w	801972a <_printf_i+0x1c6>
 8019586:	2f58      	cmp	r7, #88	@ 0x58
 8019588:	f000 80b9 	beq.w	80196fe <_printf_i+0x19a>
 801958c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019590:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8019594:	e03a      	b.n	801960c <_printf_i+0xa8>
 8019596:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801959a:	2b15      	cmp	r3, #21
 801959c:	d8f6      	bhi.n	801958c <_printf_i+0x28>
 801959e:	a101      	add	r1, pc, #4	@ (adr r1, 80195a4 <_printf_i+0x40>)
 80195a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80195a4:	080195fd 	.word	0x080195fd
 80195a8:	08019611 	.word	0x08019611
 80195ac:	0801958d 	.word	0x0801958d
 80195b0:	0801958d 	.word	0x0801958d
 80195b4:	0801958d 	.word	0x0801958d
 80195b8:	0801958d 	.word	0x0801958d
 80195bc:	08019611 	.word	0x08019611
 80195c0:	0801958d 	.word	0x0801958d
 80195c4:	0801958d 	.word	0x0801958d
 80195c8:	0801958d 	.word	0x0801958d
 80195cc:	0801958d 	.word	0x0801958d
 80195d0:	08019711 	.word	0x08019711
 80195d4:	0801963b 	.word	0x0801963b
 80195d8:	080196cb 	.word	0x080196cb
 80195dc:	0801958d 	.word	0x0801958d
 80195e0:	0801958d 	.word	0x0801958d
 80195e4:	08019733 	.word	0x08019733
 80195e8:	0801958d 	.word	0x0801958d
 80195ec:	0801963b 	.word	0x0801963b
 80195f0:	0801958d 	.word	0x0801958d
 80195f4:	0801958d 	.word	0x0801958d
 80195f8:	080196d3 	.word	0x080196d3
 80195fc:	6833      	ldr	r3, [r6, #0]
 80195fe:	1d1a      	adds	r2, r3, #4
 8019600:	681b      	ldr	r3, [r3, #0]
 8019602:	6032      	str	r2, [r6, #0]
 8019604:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019608:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801960c:	2301      	movs	r3, #1
 801960e:	e09d      	b.n	801974c <_printf_i+0x1e8>
 8019610:	6833      	ldr	r3, [r6, #0]
 8019612:	6820      	ldr	r0, [r4, #0]
 8019614:	1d19      	adds	r1, r3, #4
 8019616:	6031      	str	r1, [r6, #0]
 8019618:	0606      	lsls	r6, r0, #24
 801961a:	d501      	bpl.n	8019620 <_printf_i+0xbc>
 801961c:	681d      	ldr	r5, [r3, #0]
 801961e:	e003      	b.n	8019628 <_printf_i+0xc4>
 8019620:	0645      	lsls	r5, r0, #25
 8019622:	d5fb      	bpl.n	801961c <_printf_i+0xb8>
 8019624:	f9b3 5000 	ldrsh.w	r5, [r3]
 8019628:	2d00      	cmp	r5, #0
 801962a:	da03      	bge.n	8019634 <_printf_i+0xd0>
 801962c:	232d      	movs	r3, #45	@ 0x2d
 801962e:	426d      	negs	r5, r5
 8019630:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019634:	4859      	ldr	r0, [pc, #356]	@ (801979c <_printf_i+0x238>)
 8019636:	230a      	movs	r3, #10
 8019638:	e011      	b.n	801965e <_printf_i+0xfa>
 801963a:	6821      	ldr	r1, [r4, #0]
 801963c:	6833      	ldr	r3, [r6, #0]
 801963e:	0608      	lsls	r0, r1, #24
 8019640:	f853 5b04 	ldr.w	r5, [r3], #4
 8019644:	d402      	bmi.n	801964c <_printf_i+0xe8>
 8019646:	0649      	lsls	r1, r1, #25
 8019648:	bf48      	it	mi
 801964a:	b2ad      	uxthmi	r5, r5
 801964c:	2f6f      	cmp	r7, #111	@ 0x6f
 801964e:	4853      	ldr	r0, [pc, #332]	@ (801979c <_printf_i+0x238>)
 8019650:	6033      	str	r3, [r6, #0]
 8019652:	bf14      	ite	ne
 8019654:	230a      	movne	r3, #10
 8019656:	2308      	moveq	r3, #8
 8019658:	2100      	movs	r1, #0
 801965a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801965e:	6866      	ldr	r6, [r4, #4]
 8019660:	60a6      	str	r6, [r4, #8]
 8019662:	2e00      	cmp	r6, #0
 8019664:	bfa2      	ittt	ge
 8019666:	6821      	ldrge	r1, [r4, #0]
 8019668:	f021 0104 	bicge.w	r1, r1, #4
 801966c:	6021      	strge	r1, [r4, #0]
 801966e:	b90d      	cbnz	r5, 8019674 <_printf_i+0x110>
 8019670:	2e00      	cmp	r6, #0
 8019672:	d04b      	beq.n	801970c <_printf_i+0x1a8>
 8019674:	4616      	mov	r6, r2
 8019676:	fbb5 f1f3 	udiv	r1, r5, r3
 801967a:	fb03 5711 	mls	r7, r3, r1, r5
 801967e:	5dc7      	ldrb	r7, [r0, r7]
 8019680:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8019684:	462f      	mov	r7, r5
 8019686:	42bb      	cmp	r3, r7
 8019688:	460d      	mov	r5, r1
 801968a:	d9f4      	bls.n	8019676 <_printf_i+0x112>
 801968c:	2b08      	cmp	r3, #8
 801968e:	d10b      	bne.n	80196a8 <_printf_i+0x144>
 8019690:	6823      	ldr	r3, [r4, #0]
 8019692:	07df      	lsls	r7, r3, #31
 8019694:	d508      	bpl.n	80196a8 <_printf_i+0x144>
 8019696:	6923      	ldr	r3, [r4, #16]
 8019698:	6861      	ldr	r1, [r4, #4]
 801969a:	4299      	cmp	r1, r3
 801969c:	bfde      	ittt	le
 801969e:	2330      	movle	r3, #48	@ 0x30
 80196a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80196a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80196a8:	1b92      	subs	r2, r2, r6
 80196aa:	6122      	str	r2, [r4, #16]
 80196ac:	f8cd a000 	str.w	sl, [sp]
 80196b0:	464b      	mov	r3, r9
 80196b2:	aa03      	add	r2, sp, #12
 80196b4:	4621      	mov	r1, r4
 80196b6:	4640      	mov	r0, r8
 80196b8:	f7ff fee6 	bl	8019488 <_printf_common>
 80196bc:	3001      	adds	r0, #1
 80196be:	d14a      	bne.n	8019756 <_printf_i+0x1f2>
 80196c0:	f04f 30ff 	mov.w	r0, #4294967295
 80196c4:	b004      	add	sp, #16
 80196c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80196ca:	6823      	ldr	r3, [r4, #0]
 80196cc:	f043 0320 	orr.w	r3, r3, #32
 80196d0:	6023      	str	r3, [r4, #0]
 80196d2:	4833      	ldr	r0, [pc, #204]	@ (80197a0 <_printf_i+0x23c>)
 80196d4:	2778      	movs	r7, #120	@ 0x78
 80196d6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80196da:	6823      	ldr	r3, [r4, #0]
 80196dc:	6831      	ldr	r1, [r6, #0]
 80196de:	061f      	lsls	r7, r3, #24
 80196e0:	f851 5b04 	ldr.w	r5, [r1], #4
 80196e4:	d402      	bmi.n	80196ec <_printf_i+0x188>
 80196e6:	065f      	lsls	r7, r3, #25
 80196e8:	bf48      	it	mi
 80196ea:	b2ad      	uxthmi	r5, r5
 80196ec:	6031      	str	r1, [r6, #0]
 80196ee:	07d9      	lsls	r1, r3, #31
 80196f0:	bf44      	itt	mi
 80196f2:	f043 0320 	orrmi.w	r3, r3, #32
 80196f6:	6023      	strmi	r3, [r4, #0]
 80196f8:	b11d      	cbz	r5, 8019702 <_printf_i+0x19e>
 80196fa:	2310      	movs	r3, #16
 80196fc:	e7ac      	b.n	8019658 <_printf_i+0xf4>
 80196fe:	4827      	ldr	r0, [pc, #156]	@ (801979c <_printf_i+0x238>)
 8019700:	e7e9      	b.n	80196d6 <_printf_i+0x172>
 8019702:	6823      	ldr	r3, [r4, #0]
 8019704:	f023 0320 	bic.w	r3, r3, #32
 8019708:	6023      	str	r3, [r4, #0]
 801970a:	e7f6      	b.n	80196fa <_printf_i+0x196>
 801970c:	4616      	mov	r6, r2
 801970e:	e7bd      	b.n	801968c <_printf_i+0x128>
 8019710:	6833      	ldr	r3, [r6, #0]
 8019712:	6825      	ldr	r5, [r4, #0]
 8019714:	6961      	ldr	r1, [r4, #20]
 8019716:	1d18      	adds	r0, r3, #4
 8019718:	6030      	str	r0, [r6, #0]
 801971a:	062e      	lsls	r6, r5, #24
 801971c:	681b      	ldr	r3, [r3, #0]
 801971e:	d501      	bpl.n	8019724 <_printf_i+0x1c0>
 8019720:	6019      	str	r1, [r3, #0]
 8019722:	e002      	b.n	801972a <_printf_i+0x1c6>
 8019724:	0668      	lsls	r0, r5, #25
 8019726:	d5fb      	bpl.n	8019720 <_printf_i+0x1bc>
 8019728:	8019      	strh	r1, [r3, #0]
 801972a:	2300      	movs	r3, #0
 801972c:	6123      	str	r3, [r4, #16]
 801972e:	4616      	mov	r6, r2
 8019730:	e7bc      	b.n	80196ac <_printf_i+0x148>
 8019732:	6833      	ldr	r3, [r6, #0]
 8019734:	1d1a      	adds	r2, r3, #4
 8019736:	6032      	str	r2, [r6, #0]
 8019738:	681e      	ldr	r6, [r3, #0]
 801973a:	6862      	ldr	r2, [r4, #4]
 801973c:	2100      	movs	r1, #0
 801973e:	4630      	mov	r0, r6
 8019740:	f7e6 fde6 	bl	8000310 <memchr>
 8019744:	b108      	cbz	r0, 801974a <_printf_i+0x1e6>
 8019746:	1b80      	subs	r0, r0, r6
 8019748:	6060      	str	r0, [r4, #4]
 801974a:	6863      	ldr	r3, [r4, #4]
 801974c:	6123      	str	r3, [r4, #16]
 801974e:	2300      	movs	r3, #0
 8019750:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019754:	e7aa      	b.n	80196ac <_printf_i+0x148>
 8019756:	6923      	ldr	r3, [r4, #16]
 8019758:	4632      	mov	r2, r6
 801975a:	4649      	mov	r1, r9
 801975c:	4640      	mov	r0, r8
 801975e:	47d0      	blx	sl
 8019760:	3001      	adds	r0, #1
 8019762:	d0ad      	beq.n	80196c0 <_printf_i+0x15c>
 8019764:	6823      	ldr	r3, [r4, #0]
 8019766:	079b      	lsls	r3, r3, #30
 8019768:	d413      	bmi.n	8019792 <_printf_i+0x22e>
 801976a:	68e0      	ldr	r0, [r4, #12]
 801976c:	9b03      	ldr	r3, [sp, #12]
 801976e:	4298      	cmp	r0, r3
 8019770:	bfb8      	it	lt
 8019772:	4618      	movlt	r0, r3
 8019774:	e7a6      	b.n	80196c4 <_printf_i+0x160>
 8019776:	2301      	movs	r3, #1
 8019778:	4632      	mov	r2, r6
 801977a:	4649      	mov	r1, r9
 801977c:	4640      	mov	r0, r8
 801977e:	47d0      	blx	sl
 8019780:	3001      	adds	r0, #1
 8019782:	d09d      	beq.n	80196c0 <_printf_i+0x15c>
 8019784:	3501      	adds	r5, #1
 8019786:	68e3      	ldr	r3, [r4, #12]
 8019788:	9903      	ldr	r1, [sp, #12]
 801978a:	1a5b      	subs	r3, r3, r1
 801978c:	42ab      	cmp	r3, r5
 801978e:	dcf2      	bgt.n	8019776 <_printf_i+0x212>
 8019790:	e7eb      	b.n	801976a <_printf_i+0x206>
 8019792:	2500      	movs	r5, #0
 8019794:	f104 0619 	add.w	r6, r4, #25
 8019798:	e7f5      	b.n	8019786 <_printf_i+0x222>
 801979a:	bf00      	nop
 801979c:	0801a1ad 	.word	0x0801a1ad
 80197a0:	0801a1be 	.word	0x0801a1be

080197a4 <__swbuf_r>:
 80197a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80197a6:	460e      	mov	r6, r1
 80197a8:	4614      	mov	r4, r2
 80197aa:	4605      	mov	r5, r0
 80197ac:	b118      	cbz	r0, 80197b6 <__swbuf_r+0x12>
 80197ae:	6a03      	ldr	r3, [r0, #32]
 80197b0:	b90b      	cbnz	r3, 80197b6 <__swbuf_r+0x12>
 80197b2:	f7fe f9ef 	bl	8017b94 <__sinit>
 80197b6:	69a3      	ldr	r3, [r4, #24]
 80197b8:	60a3      	str	r3, [r4, #8]
 80197ba:	89a3      	ldrh	r3, [r4, #12]
 80197bc:	071a      	lsls	r2, r3, #28
 80197be:	d501      	bpl.n	80197c4 <__swbuf_r+0x20>
 80197c0:	6923      	ldr	r3, [r4, #16]
 80197c2:	b943      	cbnz	r3, 80197d6 <__swbuf_r+0x32>
 80197c4:	4621      	mov	r1, r4
 80197c6:	4628      	mov	r0, r5
 80197c8:	f000 f82a 	bl	8019820 <__swsetup_r>
 80197cc:	b118      	cbz	r0, 80197d6 <__swbuf_r+0x32>
 80197ce:	f04f 37ff 	mov.w	r7, #4294967295
 80197d2:	4638      	mov	r0, r7
 80197d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80197d6:	6823      	ldr	r3, [r4, #0]
 80197d8:	6922      	ldr	r2, [r4, #16]
 80197da:	1a98      	subs	r0, r3, r2
 80197dc:	6963      	ldr	r3, [r4, #20]
 80197de:	b2f6      	uxtb	r6, r6
 80197e0:	4283      	cmp	r3, r0
 80197e2:	4637      	mov	r7, r6
 80197e4:	dc05      	bgt.n	80197f2 <__swbuf_r+0x4e>
 80197e6:	4621      	mov	r1, r4
 80197e8:	4628      	mov	r0, r5
 80197ea:	f7ff fc81 	bl	80190f0 <_fflush_r>
 80197ee:	2800      	cmp	r0, #0
 80197f0:	d1ed      	bne.n	80197ce <__swbuf_r+0x2a>
 80197f2:	68a3      	ldr	r3, [r4, #8]
 80197f4:	3b01      	subs	r3, #1
 80197f6:	60a3      	str	r3, [r4, #8]
 80197f8:	6823      	ldr	r3, [r4, #0]
 80197fa:	1c5a      	adds	r2, r3, #1
 80197fc:	6022      	str	r2, [r4, #0]
 80197fe:	701e      	strb	r6, [r3, #0]
 8019800:	6962      	ldr	r2, [r4, #20]
 8019802:	1c43      	adds	r3, r0, #1
 8019804:	429a      	cmp	r2, r3
 8019806:	d004      	beq.n	8019812 <__swbuf_r+0x6e>
 8019808:	89a3      	ldrh	r3, [r4, #12]
 801980a:	07db      	lsls	r3, r3, #31
 801980c:	d5e1      	bpl.n	80197d2 <__swbuf_r+0x2e>
 801980e:	2e0a      	cmp	r6, #10
 8019810:	d1df      	bne.n	80197d2 <__swbuf_r+0x2e>
 8019812:	4621      	mov	r1, r4
 8019814:	4628      	mov	r0, r5
 8019816:	f7ff fc6b 	bl	80190f0 <_fflush_r>
 801981a:	2800      	cmp	r0, #0
 801981c:	d0d9      	beq.n	80197d2 <__swbuf_r+0x2e>
 801981e:	e7d6      	b.n	80197ce <__swbuf_r+0x2a>

08019820 <__swsetup_r>:
 8019820:	b538      	push	{r3, r4, r5, lr}
 8019822:	4b29      	ldr	r3, [pc, #164]	@ (80198c8 <__swsetup_r+0xa8>)
 8019824:	4605      	mov	r5, r0
 8019826:	6818      	ldr	r0, [r3, #0]
 8019828:	460c      	mov	r4, r1
 801982a:	b118      	cbz	r0, 8019834 <__swsetup_r+0x14>
 801982c:	6a03      	ldr	r3, [r0, #32]
 801982e:	b90b      	cbnz	r3, 8019834 <__swsetup_r+0x14>
 8019830:	f7fe f9b0 	bl	8017b94 <__sinit>
 8019834:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019838:	0719      	lsls	r1, r3, #28
 801983a:	d422      	bmi.n	8019882 <__swsetup_r+0x62>
 801983c:	06da      	lsls	r2, r3, #27
 801983e:	d407      	bmi.n	8019850 <__swsetup_r+0x30>
 8019840:	2209      	movs	r2, #9
 8019842:	602a      	str	r2, [r5, #0]
 8019844:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019848:	81a3      	strh	r3, [r4, #12]
 801984a:	f04f 30ff 	mov.w	r0, #4294967295
 801984e:	e033      	b.n	80198b8 <__swsetup_r+0x98>
 8019850:	0758      	lsls	r0, r3, #29
 8019852:	d512      	bpl.n	801987a <__swsetup_r+0x5a>
 8019854:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019856:	b141      	cbz	r1, 801986a <__swsetup_r+0x4a>
 8019858:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801985c:	4299      	cmp	r1, r3
 801985e:	d002      	beq.n	8019866 <__swsetup_r+0x46>
 8019860:	4628      	mov	r0, r5
 8019862:	f7fe fac1 	bl	8017de8 <_free_r>
 8019866:	2300      	movs	r3, #0
 8019868:	6363      	str	r3, [r4, #52]	@ 0x34
 801986a:	89a3      	ldrh	r3, [r4, #12]
 801986c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8019870:	81a3      	strh	r3, [r4, #12]
 8019872:	2300      	movs	r3, #0
 8019874:	6063      	str	r3, [r4, #4]
 8019876:	6923      	ldr	r3, [r4, #16]
 8019878:	6023      	str	r3, [r4, #0]
 801987a:	89a3      	ldrh	r3, [r4, #12]
 801987c:	f043 0308 	orr.w	r3, r3, #8
 8019880:	81a3      	strh	r3, [r4, #12]
 8019882:	6923      	ldr	r3, [r4, #16]
 8019884:	b94b      	cbnz	r3, 801989a <__swsetup_r+0x7a>
 8019886:	89a3      	ldrh	r3, [r4, #12]
 8019888:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801988c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019890:	d003      	beq.n	801989a <__swsetup_r+0x7a>
 8019892:	4621      	mov	r1, r4
 8019894:	4628      	mov	r0, r5
 8019896:	f000 f883 	bl	80199a0 <__smakebuf_r>
 801989a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801989e:	f013 0201 	ands.w	r2, r3, #1
 80198a2:	d00a      	beq.n	80198ba <__swsetup_r+0x9a>
 80198a4:	2200      	movs	r2, #0
 80198a6:	60a2      	str	r2, [r4, #8]
 80198a8:	6962      	ldr	r2, [r4, #20]
 80198aa:	4252      	negs	r2, r2
 80198ac:	61a2      	str	r2, [r4, #24]
 80198ae:	6922      	ldr	r2, [r4, #16]
 80198b0:	b942      	cbnz	r2, 80198c4 <__swsetup_r+0xa4>
 80198b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80198b6:	d1c5      	bne.n	8019844 <__swsetup_r+0x24>
 80198b8:	bd38      	pop	{r3, r4, r5, pc}
 80198ba:	0799      	lsls	r1, r3, #30
 80198bc:	bf58      	it	pl
 80198be:	6962      	ldrpl	r2, [r4, #20]
 80198c0:	60a2      	str	r2, [r4, #8]
 80198c2:	e7f4      	b.n	80198ae <__swsetup_r+0x8e>
 80198c4:	2000      	movs	r0, #0
 80198c6:	e7f7      	b.n	80198b8 <__swsetup_r+0x98>
 80198c8:	24000240 	.word	0x24000240

080198cc <_raise_r>:
 80198cc:	291f      	cmp	r1, #31
 80198ce:	b538      	push	{r3, r4, r5, lr}
 80198d0:	4605      	mov	r5, r0
 80198d2:	460c      	mov	r4, r1
 80198d4:	d904      	bls.n	80198e0 <_raise_r+0x14>
 80198d6:	2316      	movs	r3, #22
 80198d8:	6003      	str	r3, [r0, #0]
 80198da:	f04f 30ff 	mov.w	r0, #4294967295
 80198de:	bd38      	pop	{r3, r4, r5, pc}
 80198e0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80198e2:	b112      	cbz	r2, 80198ea <_raise_r+0x1e>
 80198e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80198e8:	b94b      	cbnz	r3, 80198fe <_raise_r+0x32>
 80198ea:	4628      	mov	r0, r5
 80198ec:	f000 f830 	bl	8019950 <_getpid_r>
 80198f0:	4622      	mov	r2, r4
 80198f2:	4601      	mov	r1, r0
 80198f4:	4628      	mov	r0, r5
 80198f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80198fa:	f000 b817 	b.w	801992c <_kill_r>
 80198fe:	2b01      	cmp	r3, #1
 8019900:	d00a      	beq.n	8019918 <_raise_r+0x4c>
 8019902:	1c59      	adds	r1, r3, #1
 8019904:	d103      	bne.n	801990e <_raise_r+0x42>
 8019906:	2316      	movs	r3, #22
 8019908:	6003      	str	r3, [r0, #0]
 801990a:	2001      	movs	r0, #1
 801990c:	e7e7      	b.n	80198de <_raise_r+0x12>
 801990e:	2100      	movs	r1, #0
 8019910:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8019914:	4620      	mov	r0, r4
 8019916:	4798      	blx	r3
 8019918:	2000      	movs	r0, #0
 801991a:	e7e0      	b.n	80198de <_raise_r+0x12>

0801991c <raise>:
 801991c:	4b02      	ldr	r3, [pc, #8]	@ (8019928 <raise+0xc>)
 801991e:	4601      	mov	r1, r0
 8019920:	6818      	ldr	r0, [r3, #0]
 8019922:	f7ff bfd3 	b.w	80198cc <_raise_r>
 8019926:	bf00      	nop
 8019928:	24000240 	.word	0x24000240

0801992c <_kill_r>:
 801992c:	b538      	push	{r3, r4, r5, lr}
 801992e:	4d07      	ldr	r5, [pc, #28]	@ (801994c <_kill_r+0x20>)
 8019930:	2300      	movs	r3, #0
 8019932:	4604      	mov	r4, r0
 8019934:	4608      	mov	r0, r1
 8019936:	4611      	mov	r1, r2
 8019938:	602b      	str	r3, [r5, #0]
 801993a:	f7e9 fe97 	bl	800366c <_kill>
 801993e:	1c43      	adds	r3, r0, #1
 8019940:	d102      	bne.n	8019948 <_kill_r+0x1c>
 8019942:	682b      	ldr	r3, [r5, #0]
 8019944:	b103      	cbz	r3, 8019948 <_kill_r+0x1c>
 8019946:	6023      	str	r3, [r4, #0]
 8019948:	bd38      	pop	{r3, r4, r5, pc}
 801994a:	bf00      	nop
 801994c:	2400686c 	.word	0x2400686c

08019950 <_getpid_r>:
 8019950:	f7e9 be84 	b.w	800365c <_getpid>

08019954 <__swhatbuf_r>:
 8019954:	b570      	push	{r4, r5, r6, lr}
 8019956:	460c      	mov	r4, r1
 8019958:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801995c:	2900      	cmp	r1, #0
 801995e:	b096      	sub	sp, #88	@ 0x58
 8019960:	4615      	mov	r5, r2
 8019962:	461e      	mov	r6, r3
 8019964:	da0d      	bge.n	8019982 <__swhatbuf_r+0x2e>
 8019966:	89a3      	ldrh	r3, [r4, #12]
 8019968:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801996c:	f04f 0100 	mov.w	r1, #0
 8019970:	bf14      	ite	ne
 8019972:	2340      	movne	r3, #64	@ 0x40
 8019974:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8019978:	2000      	movs	r0, #0
 801997a:	6031      	str	r1, [r6, #0]
 801997c:	602b      	str	r3, [r5, #0]
 801997e:	b016      	add	sp, #88	@ 0x58
 8019980:	bd70      	pop	{r4, r5, r6, pc}
 8019982:	466a      	mov	r2, sp
 8019984:	f000 f848 	bl	8019a18 <_fstat_r>
 8019988:	2800      	cmp	r0, #0
 801998a:	dbec      	blt.n	8019966 <__swhatbuf_r+0x12>
 801998c:	9901      	ldr	r1, [sp, #4]
 801998e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8019992:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8019996:	4259      	negs	r1, r3
 8019998:	4159      	adcs	r1, r3
 801999a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801999e:	e7eb      	b.n	8019978 <__swhatbuf_r+0x24>

080199a0 <__smakebuf_r>:
 80199a0:	898b      	ldrh	r3, [r1, #12]
 80199a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80199a4:	079d      	lsls	r5, r3, #30
 80199a6:	4606      	mov	r6, r0
 80199a8:	460c      	mov	r4, r1
 80199aa:	d507      	bpl.n	80199bc <__smakebuf_r+0x1c>
 80199ac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80199b0:	6023      	str	r3, [r4, #0]
 80199b2:	6123      	str	r3, [r4, #16]
 80199b4:	2301      	movs	r3, #1
 80199b6:	6163      	str	r3, [r4, #20]
 80199b8:	b003      	add	sp, #12
 80199ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80199bc:	ab01      	add	r3, sp, #4
 80199be:	466a      	mov	r2, sp
 80199c0:	f7ff ffc8 	bl	8019954 <__swhatbuf_r>
 80199c4:	9f00      	ldr	r7, [sp, #0]
 80199c6:	4605      	mov	r5, r0
 80199c8:	4639      	mov	r1, r7
 80199ca:	4630      	mov	r0, r6
 80199cc:	f7fe fdb2 	bl	8018534 <_malloc_r>
 80199d0:	b948      	cbnz	r0, 80199e6 <__smakebuf_r+0x46>
 80199d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80199d6:	059a      	lsls	r2, r3, #22
 80199d8:	d4ee      	bmi.n	80199b8 <__smakebuf_r+0x18>
 80199da:	f023 0303 	bic.w	r3, r3, #3
 80199de:	f043 0302 	orr.w	r3, r3, #2
 80199e2:	81a3      	strh	r3, [r4, #12]
 80199e4:	e7e2      	b.n	80199ac <__smakebuf_r+0xc>
 80199e6:	89a3      	ldrh	r3, [r4, #12]
 80199e8:	6020      	str	r0, [r4, #0]
 80199ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80199ee:	81a3      	strh	r3, [r4, #12]
 80199f0:	9b01      	ldr	r3, [sp, #4]
 80199f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80199f6:	b15b      	cbz	r3, 8019a10 <__smakebuf_r+0x70>
 80199f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80199fc:	4630      	mov	r0, r6
 80199fe:	f000 f81d 	bl	8019a3c <_isatty_r>
 8019a02:	b128      	cbz	r0, 8019a10 <__smakebuf_r+0x70>
 8019a04:	89a3      	ldrh	r3, [r4, #12]
 8019a06:	f023 0303 	bic.w	r3, r3, #3
 8019a0a:	f043 0301 	orr.w	r3, r3, #1
 8019a0e:	81a3      	strh	r3, [r4, #12]
 8019a10:	89a3      	ldrh	r3, [r4, #12]
 8019a12:	431d      	orrs	r5, r3
 8019a14:	81a5      	strh	r5, [r4, #12]
 8019a16:	e7cf      	b.n	80199b8 <__smakebuf_r+0x18>

08019a18 <_fstat_r>:
 8019a18:	b538      	push	{r3, r4, r5, lr}
 8019a1a:	4d07      	ldr	r5, [pc, #28]	@ (8019a38 <_fstat_r+0x20>)
 8019a1c:	2300      	movs	r3, #0
 8019a1e:	4604      	mov	r4, r0
 8019a20:	4608      	mov	r0, r1
 8019a22:	4611      	mov	r1, r2
 8019a24:	602b      	str	r3, [r5, #0]
 8019a26:	f7e9 fe81 	bl	800372c <_fstat>
 8019a2a:	1c43      	adds	r3, r0, #1
 8019a2c:	d102      	bne.n	8019a34 <_fstat_r+0x1c>
 8019a2e:	682b      	ldr	r3, [r5, #0]
 8019a30:	b103      	cbz	r3, 8019a34 <_fstat_r+0x1c>
 8019a32:	6023      	str	r3, [r4, #0]
 8019a34:	bd38      	pop	{r3, r4, r5, pc}
 8019a36:	bf00      	nop
 8019a38:	2400686c 	.word	0x2400686c

08019a3c <_isatty_r>:
 8019a3c:	b538      	push	{r3, r4, r5, lr}
 8019a3e:	4d06      	ldr	r5, [pc, #24]	@ (8019a58 <_isatty_r+0x1c>)
 8019a40:	2300      	movs	r3, #0
 8019a42:	4604      	mov	r4, r0
 8019a44:	4608      	mov	r0, r1
 8019a46:	602b      	str	r3, [r5, #0]
 8019a48:	f7e9 fe80 	bl	800374c <_isatty>
 8019a4c:	1c43      	adds	r3, r0, #1
 8019a4e:	d102      	bne.n	8019a56 <_isatty_r+0x1a>
 8019a50:	682b      	ldr	r3, [r5, #0]
 8019a52:	b103      	cbz	r3, 8019a56 <_isatty_r+0x1a>
 8019a54:	6023      	str	r3, [r4, #0]
 8019a56:	bd38      	pop	{r3, r4, r5, pc}
 8019a58:	2400686c 	.word	0x2400686c
 8019a5c:	00000000 	.word	0x00000000

08019a60 <log>:
 8019a60:	b4f0      	push	{r4, r5, r6, r7}
 8019a62:	ee10 0a90 	vmov	r0, s1
 8019a66:	ee10 3a10 	vmov	r3, s0
 8019a6a:	f04f 34ff 	mov.w	r4, #4294967295
 8019a6e:	429c      	cmp	r4, r3
 8019a70:	f100 4140 	add.w	r1, r0, #3221225472	@ 0xc0000000
 8019a74:	4c70      	ldr	r4, [pc, #448]	@ (8019c38 <log+0x1d8>)
 8019a76:	f501 1190 	add.w	r1, r1, #1179648	@ 0x120000
 8019a7a:	418c      	sbcs	r4, r1
 8019a7c:	ed2d 8b02 	vpush	{d8}
 8019a80:	ea4f 4210 	mov.w	r2, r0, lsr #16
 8019a84:	d35a      	bcc.n	8019b3c <log+0xdc>
 8019a86:	4a6d      	ldr	r2, [pc, #436]	@ (8019c3c <log+0x1dc>)
 8019a88:	4290      	cmp	r0, r2
 8019a8a:	bf08      	it	eq
 8019a8c:	2b00      	cmpeq	r3, #0
 8019a8e:	f000 80c4 	beq.w	8019c1a <log+0x1ba>
 8019a92:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 8019a96:	ee30 0b47 	vsub.f64	d0, d0, d7
 8019a9a:	4b69      	ldr	r3, [pc, #420]	@ (8019c40 <log+0x1e0>)
 8019a9c:	ee20 2b00 	vmul.f64	d2, d0, d0
 8019aa0:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 8019aa4:	ee20 4b02 	vmul.f64	d4, d0, d2
 8019aa8:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 8019aac:	eea6 7b00 	vfma.f64	d7, d6, d0
 8019ab0:	ed93 6b14 	vldr	d6, [r3, #80]	@ 0x50
 8019ab4:	ed93 5b18 	vldr	d5, [r3, #96]	@ 0x60
 8019ab8:	eea6 7b02 	vfma.f64	d7, d6, d2
 8019abc:	ed93 6b16 	vldr	d6, [r3, #88]	@ 0x58
 8019ac0:	eea5 6b00 	vfma.f64	d6, d5, d0
 8019ac4:	ed93 5b1a 	vldr	d5, [r3, #104]	@ 0x68
 8019ac8:	ed93 3b1e 	vldr	d3, [r3, #120]	@ 0x78
 8019acc:	eea5 6b02 	vfma.f64	d6, d5, d2
 8019ad0:	ed93 5b1c 	vldr	d5, [r3, #112]	@ 0x70
 8019ad4:	eea3 5b00 	vfma.f64	d5, d3, d0
 8019ad8:	ed93 3b20 	vldr	d3, [r3, #128]	@ 0x80
 8019adc:	eea3 5b02 	vfma.f64	d5, d3, d2
 8019ae0:	ed93 3b22 	vldr	d3, [r3, #136]	@ 0x88
 8019ae4:	eea3 5b04 	vfma.f64	d5, d3, d4
 8019ae8:	eea5 6b04 	vfma.f64	d6, d5, d4
 8019aec:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 8019af0:	eea6 7b04 	vfma.f64	d7, d6, d4
 8019af4:	eeb0 2b47 	vmov.f64	d2, d7
 8019af8:	ed9f 7b49 	vldr	d7, [pc, #292]	@ 8019c20 <log+0x1c0>
 8019afc:	eeb0 6b40 	vmov.f64	d6, d0
 8019b00:	eeb0 3b40 	vmov.f64	d3, d0
 8019b04:	eea0 6b07 	vfma.f64	d6, d0, d7
 8019b08:	eea0 6b47 	vfms.f64	d6, d0, d7
 8019b0c:	ee30 8b46 	vsub.f64	d8, d0, d6
 8019b10:	ee26 1b06 	vmul.f64	d1, d6, d6
 8019b14:	eea1 3b05 	vfma.f64	d3, d1, d5
 8019b18:	ee30 7b43 	vsub.f64	d7, d0, d3
 8019b1c:	ee30 0b06 	vadd.f64	d0, d0, d6
 8019b20:	eea1 7b05 	vfma.f64	d7, d1, d5
 8019b24:	ee25 5b08 	vmul.f64	d5, d5, d8
 8019b28:	eea5 7b00 	vfma.f64	d7, d5, d0
 8019b2c:	eea2 7b04 	vfma.f64	d7, d2, d4
 8019b30:	ee33 0b07 	vadd.f64	d0, d3, d7
 8019b34:	ecbd 8b02 	vpop	{d8}
 8019b38:	bcf0      	pop	{r4, r5, r6, r7}
 8019b3a:	4770      	bx	lr
 8019b3c:	f1a2 0410 	sub.w	r4, r2, #16
 8019b40:	f647 71df 	movw	r1, #32735	@ 0x7fdf
 8019b44:	428c      	cmp	r4, r1
 8019b46:	d923      	bls.n	8019b90 <log+0x130>
 8019b48:	18d9      	adds	r1, r3, r3
 8019b4a:	eb40 0400 	adc.w	r4, r0, r0
 8019b4e:	4321      	orrs	r1, r4
 8019b50:	d105      	bne.n	8019b5e <log+0xfe>
 8019b52:	ecbd 8b02 	vpop	{d8}
 8019b56:	2001      	movs	r0, #1
 8019b58:	bcf0      	pop	{r4, r5, r6, r7}
 8019b5a:	f000 b885 	b.w	8019c68 <__math_divzero>
 8019b5e:	4939      	ldr	r1, [pc, #228]	@ (8019c44 <log+0x1e4>)
 8019b60:	4288      	cmp	r0, r1
 8019b62:	bf08      	it	eq
 8019b64:	2b00      	cmpeq	r3, #0
 8019b66:	d0e5      	beq.n	8019b34 <log+0xd4>
 8019b68:	0413      	lsls	r3, r2, #16
 8019b6a:	d403      	bmi.n	8019b74 <log+0x114>
 8019b6c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8019b70:	4393      	bics	r3, r2
 8019b72:	d104      	bne.n	8019b7e <log+0x11e>
 8019b74:	ecbd 8b02 	vpop	{d8}
 8019b78:	bcf0      	pop	{r4, r5, r6, r7}
 8019b7a:	f000 b88d 	b.w	8019c98 <__math_invalid>
 8019b7e:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8019c28 <log+0x1c8>
 8019b82:	ee20 7b07 	vmul.f64	d7, d0, d7
 8019b86:	ec53 2b17 	vmov	r2, r3, d7
 8019b8a:	f1a3 7050 	sub.w	r0, r3, #54525952	@ 0x3400000
 8019b8e:	4613      	mov	r3, r2
 8019b90:	f100 4240 	add.w	r2, r0, #3221225472	@ 0xc0000000
 8019b94:	492a      	ldr	r1, [pc, #168]	@ (8019c40 <log+0x1e0>)
 8019b96:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 8019b9a:	f502 12d0 	add.w	r2, r2, #1703936	@ 0x1a0000
 8019b9e:	f3c2 3446 	ubfx	r4, r2, #13, #7
 8019ba2:	0d15      	lsrs	r5, r2, #20
 8019ba4:	eb01 1c04 	add.w	ip, r1, r4, lsl #4
 8019ba8:	052d      	lsls	r5, r5, #20
 8019baa:	ed9c 7b24 	vldr	d7, [ip, #144]	@ 0x90
 8019bae:	1e1e      	subs	r6, r3, #0
 8019bb0:	1b47      	subs	r7, r0, r5
 8019bb2:	ec47 6b16 	vmov	d6, r6, r7
 8019bb6:	1512      	asrs	r2, r2, #20
 8019bb8:	eea7 5b06 	vfma.f64	d5, d7, d6
 8019bbc:	ee07 2a90 	vmov	s15, r2
 8019bc0:	ee25 2b05 	vmul.f64	d2, d5, d5
 8019bc4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8019bc8:	ed91 4b00 	vldr	d4, [r1]
 8019bcc:	ee25 1b02 	vmul.f64	d1, d5, d2
 8019bd0:	ed9c 7b26 	vldr	d7, [ip, #152]	@ 0x98
 8019bd4:	eea4 7b06 	vfma.f64	d7, d4, d6
 8019bd8:	ee35 4b07 	vadd.f64	d4, d5, d7
 8019bdc:	ee37 0b44 	vsub.f64	d0, d7, d4
 8019be0:	ed91 7b02 	vldr	d7, [r1, #8]
 8019be4:	ee30 0b05 	vadd.f64	d0, d0, d5
 8019be8:	eea7 0b06 	vfma.f64	d0, d7, d6
 8019bec:	ed91 7b04 	vldr	d7, [r1, #16]
 8019bf0:	ed91 6b08 	vldr	d6, [r1, #32]
 8019bf4:	eea7 0b02 	vfma.f64	d0, d7, d2
 8019bf8:	ed91 7b06 	vldr	d7, [r1, #24]
 8019bfc:	ed91 3b0c 	vldr	d3, [r1, #48]	@ 0x30
 8019c00:	eea6 7b05 	vfma.f64	d7, d6, d5
 8019c04:	ed91 6b0a 	vldr	d6, [r1, #40]	@ 0x28
 8019c08:	eea3 6b05 	vfma.f64	d6, d3, d5
 8019c0c:	eea6 7b02 	vfma.f64	d7, d6, d2
 8019c10:	eea1 0b07 	vfma.f64	d0, d1, d7
 8019c14:	ee30 0b04 	vadd.f64	d0, d0, d4
 8019c18:	e78c      	b.n	8019b34 <log+0xd4>
 8019c1a:	ed9f 0b05 	vldr	d0, [pc, #20]	@ 8019c30 <log+0x1d0>
 8019c1e:	e789      	b.n	8019b34 <log+0xd4>
 8019c20:	00000000 	.word	0x00000000
 8019c24:	41a00000 	.word	0x41a00000
 8019c28:	00000000 	.word	0x00000000
 8019c2c:	43300000 	.word	0x43300000
	...
 8019c38:	000308ff 	.word	0x000308ff
 8019c3c:	3ff00000 	.word	0x3ff00000
 8019c40:	0801a1d0 	.word	0x0801a1d0
 8019c44:	7ff00000 	.word	0x7ff00000

08019c48 <with_errno>:
 8019c48:	b510      	push	{r4, lr}
 8019c4a:	ed2d 8b02 	vpush	{d8}
 8019c4e:	eeb0 8b40 	vmov.f64	d8, d0
 8019c52:	4604      	mov	r4, r0
 8019c54:	f7fe f884 	bl	8017d60 <__errno>
 8019c58:	eeb0 0b48 	vmov.f64	d0, d8
 8019c5c:	ecbd 8b02 	vpop	{d8}
 8019c60:	6004      	str	r4, [r0, #0]
 8019c62:	bd10      	pop	{r4, pc}
 8019c64:	0000      	movs	r0, r0
	...

08019c68 <__math_divzero>:
 8019c68:	b082      	sub	sp, #8
 8019c6a:	2800      	cmp	r0, #0
 8019c6c:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8019c70:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 8019c74:	fe07 7b06 	vseleq.f64	d7, d7, d6
 8019c78:	ed8d 7b00 	vstr	d7, [sp]
 8019c7c:	ed9d 0b00 	vldr	d0, [sp]
 8019c80:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 8019c90 <__math_divzero+0x28>
 8019c84:	2022      	movs	r0, #34	@ 0x22
 8019c86:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8019c8a:	b002      	add	sp, #8
 8019c8c:	f7ff bfdc 	b.w	8019c48 <with_errno>
	...

08019c98 <__math_invalid>:
 8019c98:	eeb0 7b40 	vmov.f64	d7, d0
 8019c9c:	eeb4 7b47 	vcmp.f64	d7, d7
 8019ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ca4:	ee30 6b40 	vsub.f64	d6, d0, d0
 8019ca8:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8019cac:	d602      	bvs.n	8019cb4 <__math_invalid+0x1c>
 8019cae:	2021      	movs	r0, #33	@ 0x21
 8019cb0:	f7ff bfca 	b.w	8019c48 <with_errno>
 8019cb4:	4770      	bx	lr
	...

08019cb8 <_init>:
 8019cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019cba:	bf00      	nop
 8019cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019cbe:	bc08      	pop	{r3}
 8019cc0:	469e      	mov	lr, r3
 8019cc2:	4770      	bx	lr

08019cc4 <_fini>:
 8019cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019cc6:	bf00      	nop
 8019cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019cca:	bc08      	pop	{r3}
 8019ccc:	469e      	mov	lr, r3
 8019cce:	4770      	bx	lr
