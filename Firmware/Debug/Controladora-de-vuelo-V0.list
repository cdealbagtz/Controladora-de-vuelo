
Controladora-de-vuelo-V0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019b10  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d90  08019dc0  08019dc0  0001adc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801ab50  0801ab50  0001bb50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801ab58  0801ab58  0001bb58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801ab5c  0801ab5c  0001bb5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000290  24000000  0801ab60  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000066e8  24000290  0801adf0  0001c290  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24006978  0801adf0  0001c978  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001c290  2**0
                  CONTENTS, READONLY
 10 .debug_info   00035703  00000000  00000000  0001c2be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00007c8a  00000000  00000000  000519c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002950  00000000  00000000  00059650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001fd1  00000000  00000000  0005bfa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003d7e8  00000000  00000000  0005df71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0004175e  00000000  00000000  0009b759  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001616d4  00000000  00000000  000dceb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0023e58b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000bbf8  00000000  00000000  0023e5d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006a  00000000  00000000  0024a1c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000290 	.word	0x24000290
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08019da8 	.word	0x08019da8

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000294 	.word	0x24000294
 80002ec:	08019da8 	.word	0x08019da8

080002f0 <strcmp>:
 80002f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002f8:	2a01      	cmp	r2, #1
 80002fa:	bf28      	it	cs
 80002fc:	429a      	cmpcs	r2, r3
 80002fe:	d0f7      	beq.n	80002f0 <strcmp>
 8000300:	1ad0      	subs	r0, r2, r3
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	@ 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_ldivmod>:
 8000728:	b97b      	cbnz	r3, 800074a <__aeabi_ldivmod+0x22>
 800072a:	b972      	cbnz	r2, 800074a <__aeabi_ldivmod+0x22>
 800072c:	2900      	cmp	r1, #0
 800072e:	bfbe      	ittt	lt
 8000730:	2000      	movlt	r0, #0
 8000732:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000736:	e006      	blt.n	8000746 <__aeabi_ldivmod+0x1e>
 8000738:	bf08      	it	eq
 800073a:	2800      	cmpeq	r0, #0
 800073c:	bf1c      	itt	ne
 800073e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000742:	f04f 30ff 	movne.w	r0, #4294967295
 8000746:	f000 b9ed 	b.w	8000b24 <__aeabi_idiv0>
 800074a:	f1ad 0c08 	sub.w	ip, sp, #8
 800074e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000752:	2900      	cmp	r1, #0
 8000754:	db09      	blt.n	800076a <__aeabi_ldivmod+0x42>
 8000756:	2b00      	cmp	r3, #0
 8000758:	db1a      	blt.n	8000790 <__aeabi_ldivmod+0x68>
 800075a:	f000 f885 	bl	8000868 <__udivmoddi4>
 800075e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000762:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000766:	b004      	add	sp, #16
 8000768:	4770      	bx	lr
 800076a:	4240      	negs	r0, r0
 800076c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000770:	2b00      	cmp	r3, #0
 8000772:	db1b      	blt.n	80007ac <__aeabi_ldivmod+0x84>
 8000774:	f000 f878 	bl	8000868 <__udivmoddi4>
 8000778:	f8dd e004 	ldr.w	lr, [sp, #4]
 800077c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000780:	b004      	add	sp, #16
 8000782:	4240      	negs	r0, r0
 8000784:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000788:	4252      	negs	r2, r2
 800078a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800078e:	4770      	bx	lr
 8000790:	4252      	negs	r2, r2
 8000792:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000796:	f000 f867 	bl	8000868 <__udivmoddi4>
 800079a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800079e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007a2:	b004      	add	sp, #16
 80007a4:	4240      	negs	r0, r0
 80007a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007aa:	4770      	bx	lr
 80007ac:	4252      	negs	r2, r2
 80007ae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007b2:	f000 f859 	bl	8000868 <__udivmoddi4>
 80007b6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007be:	b004      	add	sp, #16
 80007c0:	4252      	negs	r2, r2
 80007c2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007c6:	4770      	bx	lr

080007c8 <__aeabi_uldivmod>:
 80007c8:	b953      	cbnz	r3, 80007e0 <__aeabi_uldivmod+0x18>
 80007ca:	b94a      	cbnz	r2, 80007e0 <__aeabi_uldivmod+0x18>
 80007cc:	2900      	cmp	r1, #0
 80007ce:	bf08      	it	eq
 80007d0:	2800      	cmpeq	r0, #0
 80007d2:	bf1c      	itt	ne
 80007d4:	f04f 31ff 	movne.w	r1, #4294967295
 80007d8:	f04f 30ff 	movne.w	r0, #4294967295
 80007dc:	f000 b9a2 	b.w	8000b24 <__aeabi_idiv0>
 80007e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80007e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007e8:	f000 f83e 	bl	8000868 <__udivmoddi4>
 80007ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007f4:	b004      	add	sp, #16
 80007f6:	4770      	bx	lr

080007f8 <__aeabi_d2lz>:
 80007f8:	b508      	push	{r3, lr}
 80007fa:	4602      	mov	r2, r0
 80007fc:	460b      	mov	r3, r1
 80007fe:	ec43 2b17 	vmov	d7, r2, r3
 8000802:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800080a:	d403      	bmi.n	8000814 <__aeabi_d2lz+0x1c>
 800080c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000810:	f000 b80a 	b.w	8000828 <__aeabi_d2ulz>
 8000814:	eeb1 7b47 	vneg.f64	d7, d7
 8000818:	ec51 0b17 	vmov	r0, r1, d7
 800081c:	f000 f804 	bl	8000828 <__aeabi_d2ulz>
 8000820:	4240      	negs	r0, r0
 8000822:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000826:	bd08      	pop	{r3, pc}

08000828 <__aeabi_d2ulz>:
 8000828:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000858 <__aeabi_d2ulz+0x30>
 800082c:	ec41 0b17 	vmov	d7, r0, r1
 8000830:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 8000860 <__aeabi_d2ulz+0x38>
 8000834:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000838:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800083c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000840:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000844:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000848:	ee16 1a10 	vmov	r1, s12
 800084c:	ee17 0a90 	vmov	r0, s15
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	f3af 8000 	nop.w
 8000858:	00000000 	.word	0x00000000
 800085c:	3df00000 	.word	0x3df00000
 8000860:	00000000 	.word	0x00000000
 8000864:	41f00000 	.word	0x41f00000

08000868 <__udivmoddi4>:
 8000868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800086c:	9d08      	ldr	r5, [sp, #32]
 800086e:	460c      	mov	r4, r1
 8000870:	2b00      	cmp	r3, #0
 8000872:	d14e      	bne.n	8000912 <__udivmoddi4+0xaa>
 8000874:	4694      	mov	ip, r2
 8000876:	458c      	cmp	ip, r1
 8000878:	4686      	mov	lr, r0
 800087a:	fab2 f282 	clz	r2, r2
 800087e:	d962      	bls.n	8000946 <__udivmoddi4+0xde>
 8000880:	b14a      	cbz	r2, 8000896 <__udivmoddi4+0x2e>
 8000882:	f1c2 0320 	rsb	r3, r2, #32
 8000886:	4091      	lsls	r1, r2
 8000888:	fa20 f303 	lsr.w	r3, r0, r3
 800088c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000890:	4319      	orrs	r1, r3
 8000892:	fa00 fe02 	lsl.w	lr, r0, r2
 8000896:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800089a:	fa1f f68c 	uxth.w	r6, ip
 800089e:	fbb1 f4f7 	udiv	r4, r1, r7
 80008a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008a6:	fb07 1114 	mls	r1, r7, r4, r1
 80008aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008ae:	fb04 f106 	mul.w	r1, r4, r6
 80008b2:	4299      	cmp	r1, r3
 80008b4:	d90a      	bls.n	80008cc <__udivmoddi4+0x64>
 80008b6:	eb1c 0303 	adds.w	r3, ip, r3
 80008ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80008be:	f080 8112 	bcs.w	8000ae6 <__udivmoddi4+0x27e>
 80008c2:	4299      	cmp	r1, r3
 80008c4:	f240 810f 	bls.w	8000ae6 <__udivmoddi4+0x27e>
 80008c8:	3c02      	subs	r4, #2
 80008ca:	4463      	add	r3, ip
 80008cc:	1a59      	subs	r1, r3, r1
 80008ce:	fa1f f38e 	uxth.w	r3, lr
 80008d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80008d6:	fb07 1110 	mls	r1, r7, r0, r1
 80008da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008de:	fb00 f606 	mul.w	r6, r0, r6
 80008e2:	429e      	cmp	r6, r3
 80008e4:	d90a      	bls.n	80008fc <__udivmoddi4+0x94>
 80008e6:	eb1c 0303 	adds.w	r3, ip, r3
 80008ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80008ee:	f080 80fc 	bcs.w	8000aea <__udivmoddi4+0x282>
 80008f2:	429e      	cmp	r6, r3
 80008f4:	f240 80f9 	bls.w	8000aea <__udivmoddi4+0x282>
 80008f8:	4463      	add	r3, ip
 80008fa:	3802      	subs	r0, #2
 80008fc:	1b9b      	subs	r3, r3, r6
 80008fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000902:	2100      	movs	r1, #0
 8000904:	b11d      	cbz	r5, 800090e <__udivmoddi4+0xa6>
 8000906:	40d3      	lsrs	r3, r2
 8000908:	2200      	movs	r2, #0
 800090a:	e9c5 3200 	strd	r3, r2, [r5]
 800090e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000912:	428b      	cmp	r3, r1
 8000914:	d905      	bls.n	8000922 <__udivmoddi4+0xba>
 8000916:	b10d      	cbz	r5, 800091c <__udivmoddi4+0xb4>
 8000918:	e9c5 0100 	strd	r0, r1, [r5]
 800091c:	2100      	movs	r1, #0
 800091e:	4608      	mov	r0, r1
 8000920:	e7f5      	b.n	800090e <__udivmoddi4+0xa6>
 8000922:	fab3 f183 	clz	r1, r3
 8000926:	2900      	cmp	r1, #0
 8000928:	d146      	bne.n	80009b8 <__udivmoddi4+0x150>
 800092a:	42a3      	cmp	r3, r4
 800092c:	d302      	bcc.n	8000934 <__udivmoddi4+0xcc>
 800092e:	4290      	cmp	r0, r2
 8000930:	f0c0 80f0 	bcc.w	8000b14 <__udivmoddi4+0x2ac>
 8000934:	1a86      	subs	r6, r0, r2
 8000936:	eb64 0303 	sbc.w	r3, r4, r3
 800093a:	2001      	movs	r0, #1
 800093c:	2d00      	cmp	r5, #0
 800093e:	d0e6      	beq.n	800090e <__udivmoddi4+0xa6>
 8000940:	e9c5 6300 	strd	r6, r3, [r5]
 8000944:	e7e3      	b.n	800090e <__udivmoddi4+0xa6>
 8000946:	2a00      	cmp	r2, #0
 8000948:	f040 8090 	bne.w	8000a6c <__udivmoddi4+0x204>
 800094c:	eba1 040c 	sub.w	r4, r1, ip
 8000950:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000954:	fa1f f78c 	uxth.w	r7, ip
 8000958:	2101      	movs	r1, #1
 800095a:	fbb4 f6f8 	udiv	r6, r4, r8
 800095e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000962:	fb08 4416 	mls	r4, r8, r6, r4
 8000966:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800096a:	fb07 f006 	mul.w	r0, r7, r6
 800096e:	4298      	cmp	r0, r3
 8000970:	d908      	bls.n	8000984 <__udivmoddi4+0x11c>
 8000972:	eb1c 0303 	adds.w	r3, ip, r3
 8000976:	f106 34ff 	add.w	r4, r6, #4294967295
 800097a:	d202      	bcs.n	8000982 <__udivmoddi4+0x11a>
 800097c:	4298      	cmp	r0, r3
 800097e:	f200 80cd 	bhi.w	8000b1c <__udivmoddi4+0x2b4>
 8000982:	4626      	mov	r6, r4
 8000984:	1a1c      	subs	r4, r3, r0
 8000986:	fa1f f38e 	uxth.w	r3, lr
 800098a:	fbb4 f0f8 	udiv	r0, r4, r8
 800098e:	fb08 4410 	mls	r4, r8, r0, r4
 8000992:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000996:	fb00 f707 	mul.w	r7, r0, r7
 800099a:	429f      	cmp	r7, r3
 800099c:	d908      	bls.n	80009b0 <__udivmoddi4+0x148>
 800099e:	eb1c 0303 	adds.w	r3, ip, r3
 80009a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80009a6:	d202      	bcs.n	80009ae <__udivmoddi4+0x146>
 80009a8:	429f      	cmp	r7, r3
 80009aa:	f200 80b0 	bhi.w	8000b0e <__udivmoddi4+0x2a6>
 80009ae:	4620      	mov	r0, r4
 80009b0:	1bdb      	subs	r3, r3, r7
 80009b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009b6:	e7a5      	b.n	8000904 <__udivmoddi4+0x9c>
 80009b8:	f1c1 0620 	rsb	r6, r1, #32
 80009bc:	408b      	lsls	r3, r1
 80009be:	fa22 f706 	lsr.w	r7, r2, r6
 80009c2:	431f      	orrs	r7, r3
 80009c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80009c8:	fa04 f301 	lsl.w	r3, r4, r1
 80009cc:	ea43 030c 	orr.w	r3, r3, ip
 80009d0:	40f4      	lsrs	r4, r6
 80009d2:	fa00 f801 	lsl.w	r8, r0, r1
 80009d6:	0c38      	lsrs	r0, r7, #16
 80009d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80009dc:	fbb4 fef0 	udiv	lr, r4, r0
 80009e0:	fa1f fc87 	uxth.w	ip, r7
 80009e4:	fb00 441e 	mls	r4, r0, lr, r4
 80009e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009ec:	fb0e f90c 	mul.w	r9, lr, ip
 80009f0:	45a1      	cmp	r9, r4
 80009f2:	fa02 f201 	lsl.w	r2, r2, r1
 80009f6:	d90a      	bls.n	8000a0e <__udivmoddi4+0x1a6>
 80009f8:	193c      	adds	r4, r7, r4
 80009fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80009fe:	f080 8084 	bcs.w	8000b0a <__udivmoddi4+0x2a2>
 8000a02:	45a1      	cmp	r9, r4
 8000a04:	f240 8081 	bls.w	8000b0a <__udivmoddi4+0x2a2>
 8000a08:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a0c:	443c      	add	r4, r7
 8000a0e:	eba4 0409 	sub.w	r4, r4, r9
 8000a12:	fa1f f983 	uxth.w	r9, r3
 8000a16:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a1a:	fb00 4413 	mls	r4, r0, r3, r4
 8000a1e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a22:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a26:	45a4      	cmp	ip, r4
 8000a28:	d907      	bls.n	8000a3a <__udivmoddi4+0x1d2>
 8000a2a:	193c      	adds	r4, r7, r4
 8000a2c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a30:	d267      	bcs.n	8000b02 <__udivmoddi4+0x29a>
 8000a32:	45a4      	cmp	ip, r4
 8000a34:	d965      	bls.n	8000b02 <__udivmoddi4+0x29a>
 8000a36:	3b02      	subs	r3, #2
 8000a38:	443c      	add	r4, r7
 8000a3a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a3e:	fba0 9302 	umull	r9, r3, r0, r2
 8000a42:	eba4 040c 	sub.w	r4, r4, ip
 8000a46:	429c      	cmp	r4, r3
 8000a48:	46ce      	mov	lr, r9
 8000a4a:	469c      	mov	ip, r3
 8000a4c:	d351      	bcc.n	8000af2 <__udivmoddi4+0x28a>
 8000a4e:	d04e      	beq.n	8000aee <__udivmoddi4+0x286>
 8000a50:	b155      	cbz	r5, 8000a68 <__udivmoddi4+0x200>
 8000a52:	ebb8 030e 	subs.w	r3, r8, lr
 8000a56:	eb64 040c 	sbc.w	r4, r4, ip
 8000a5a:	fa04 f606 	lsl.w	r6, r4, r6
 8000a5e:	40cb      	lsrs	r3, r1
 8000a60:	431e      	orrs	r6, r3
 8000a62:	40cc      	lsrs	r4, r1
 8000a64:	e9c5 6400 	strd	r6, r4, [r5]
 8000a68:	2100      	movs	r1, #0
 8000a6a:	e750      	b.n	800090e <__udivmoddi4+0xa6>
 8000a6c:	f1c2 0320 	rsb	r3, r2, #32
 8000a70:	fa20 f103 	lsr.w	r1, r0, r3
 8000a74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a78:	fa24 f303 	lsr.w	r3, r4, r3
 8000a7c:	4094      	lsls	r4, r2
 8000a7e:	430c      	orrs	r4, r1
 8000a80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a84:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a88:	fa1f f78c 	uxth.w	r7, ip
 8000a8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a90:	fb08 3110 	mls	r1, r8, r0, r3
 8000a94:	0c23      	lsrs	r3, r4, #16
 8000a96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a9a:	fb00 f107 	mul.w	r1, r0, r7
 8000a9e:	4299      	cmp	r1, r3
 8000aa0:	d908      	bls.n	8000ab4 <__udivmoddi4+0x24c>
 8000aa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000aa6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000aaa:	d22c      	bcs.n	8000b06 <__udivmoddi4+0x29e>
 8000aac:	4299      	cmp	r1, r3
 8000aae:	d92a      	bls.n	8000b06 <__udivmoddi4+0x29e>
 8000ab0:	3802      	subs	r0, #2
 8000ab2:	4463      	add	r3, ip
 8000ab4:	1a5b      	subs	r3, r3, r1
 8000ab6:	b2a4      	uxth	r4, r4
 8000ab8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000abc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ac0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ac4:	fb01 f307 	mul.w	r3, r1, r7
 8000ac8:	42a3      	cmp	r3, r4
 8000aca:	d908      	bls.n	8000ade <__udivmoddi4+0x276>
 8000acc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ad0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ad4:	d213      	bcs.n	8000afe <__udivmoddi4+0x296>
 8000ad6:	42a3      	cmp	r3, r4
 8000ad8:	d911      	bls.n	8000afe <__udivmoddi4+0x296>
 8000ada:	3902      	subs	r1, #2
 8000adc:	4464      	add	r4, ip
 8000ade:	1ae4      	subs	r4, r4, r3
 8000ae0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ae4:	e739      	b.n	800095a <__udivmoddi4+0xf2>
 8000ae6:	4604      	mov	r4, r0
 8000ae8:	e6f0      	b.n	80008cc <__udivmoddi4+0x64>
 8000aea:	4608      	mov	r0, r1
 8000aec:	e706      	b.n	80008fc <__udivmoddi4+0x94>
 8000aee:	45c8      	cmp	r8, r9
 8000af0:	d2ae      	bcs.n	8000a50 <__udivmoddi4+0x1e8>
 8000af2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000af6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000afa:	3801      	subs	r0, #1
 8000afc:	e7a8      	b.n	8000a50 <__udivmoddi4+0x1e8>
 8000afe:	4631      	mov	r1, r6
 8000b00:	e7ed      	b.n	8000ade <__udivmoddi4+0x276>
 8000b02:	4603      	mov	r3, r0
 8000b04:	e799      	b.n	8000a3a <__udivmoddi4+0x1d2>
 8000b06:	4630      	mov	r0, r6
 8000b08:	e7d4      	b.n	8000ab4 <__udivmoddi4+0x24c>
 8000b0a:	46d6      	mov	lr, sl
 8000b0c:	e77f      	b.n	8000a0e <__udivmoddi4+0x1a6>
 8000b0e:	4463      	add	r3, ip
 8000b10:	3802      	subs	r0, #2
 8000b12:	e74d      	b.n	80009b0 <__udivmoddi4+0x148>
 8000b14:	4606      	mov	r6, r0
 8000b16:	4623      	mov	r3, r4
 8000b18:	4608      	mov	r0, r1
 8000b1a:	e70f      	b.n	800093c <__udivmoddi4+0xd4>
 8000b1c:	3e02      	subs	r6, #2
 8000b1e:	4463      	add	r3, ip
 8000b20:	e730      	b.n	8000984 <__udivmoddi4+0x11c>
 8000b22:	bf00      	nop

08000b24 <__aeabi_idiv0>:
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <LPF_cmd_filter_init>:
Servo_mgmt_s servo_outs ;
FilterState filters[4] = {{0.0f}, {0.0f}, {0.0f}, {0.0f}};


void LPF_cmd_filter_init(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
	//
	COF_cmds[0] = CutOffFreq_cmd_ail;
 8000b2e:	4b40      	ldr	r3, [pc, #256]	@ (8000c30 <LPF_cmd_filter_init+0x108>)
 8000b30:	4a40      	ldr	r2, [pc, #256]	@ (8000c34 <LPF_cmd_filter_init+0x10c>)
 8000b32:	601a      	str	r2, [r3, #0]
	COF_cmds[1] = CutOffFreq_cmd_ele;
 8000b34:	4b3e      	ldr	r3, [pc, #248]	@ (8000c30 <LPF_cmd_filter_init+0x108>)
 8000b36:	4a3f      	ldr	r2, [pc, #252]	@ (8000c34 <LPF_cmd_filter_init+0x10c>)
 8000b38:	605a      	str	r2, [r3, #4]
	COF_cmds[2] = CutOffFreq_cmd_rud;
 8000b3a:	4b3d      	ldr	r3, [pc, #244]	@ (8000c30 <LPF_cmd_filter_init+0x108>)
 8000b3c:	4a3d      	ldr	r2, [pc, #244]	@ (8000c34 <LPF_cmd_filter_init+0x10c>)
 8000b3e:	609a      	str	r2, [r3, #8]
	COF_cmds[3] = CutOffFreq_cmd_thr;
 8000b40:	4b3b      	ldr	r3, [pc, #236]	@ (8000c30 <LPF_cmd_filter_init+0x108>)
 8000b42:	4a3c      	ldr	r2, [pc, #240]	@ (8000c34 <LPF_cmd_filter_init+0x10c>)
 8000b44:	60da      	str	r2, [r3, #12]

	// Arreglo de filtros (uno por señal)


	for(int idx = 0; idx < 4; idx++)
 8000b46:	2300      	movs	r3, #0
 8000b48:	607b      	str	r3, [r7, #4]
 8000b4a:	e066      	b.n	8000c1a <LPF_cmd_filter_init+0xf2>
	{
		//
		commands_fltrs[idx].inicio 		= 1;
 8000b4c:	4a3a      	ldr	r2, [pc, #232]	@ (8000c38 <LPF_cmd_filter_init+0x110>)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	212c      	movs	r1, #44	@ 0x2c
 8000b52:	fb01 f303 	mul.w	r3, r1, r3
 8000b56:	4413      	add	r3, r2
 8000b58:	3328      	adds	r3, #40	@ 0x28
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	601a      	str	r2, [r3, #0]
		commands_fltrs[idx].f_cutoff 	= COF_cmds[idx];
 8000b5e:	4a34      	ldr	r2, [pc, #208]	@ (8000c30 <LPF_cmd_filter_init+0x108>)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	009b      	lsls	r3, r3, #2
 8000b64:	4413      	add	r3, r2
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	4933      	ldr	r1, [pc, #204]	@ (8000c38 <LPF_cmd_filter_init+0x110>)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	202c      	movs	r0, #44	@ 0x2c
 8000b6e:	fb00 f303 	mul.w	r3, r0, r3
 8000b72:	440b      	add	r3, r1
 8000b74:	3318      	adds	r3, #24
 8000b76:	601a      	str	r2, [r3, #0]
		commands_fltrs[idx].t_sample 	= SAMPLE_ATT ;
 8000b78:	4a2f      	ldr	r2, [pc, #188]	@ (8000c38 <LPF_cmd_filter_init+0x110>)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	212c      	movs	r1, #44	@ 0x2c
 8000b7e:	fb01 f303 	mul.w	r3, r1, r3
 8000b82:	4413      	add	r3, r2
 8000b84:	331c      	adds	r3, #28
 8000b86:	4a2d      	ldr	r2, [pc, #180]	@ (8000c3c <LPF_cmd_filter_init+0x114>)
 8000b88:	601a      	str	r2, [r3, #0]
		commands_fltrs[idx].Y_0 		= 0.0f ;
 8000b8a:	4a2b      	ldr	r2, [pc, #172]	@ (8000c38 <LPF_cmd_filter_init+0x110>)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	212c      	movs	r1, #44	@ 0x2c
 8000b90:	fb01 f303 	mul.w	r3, r1, r3
 8000b94:	4413      	add	r3, r2
 8000b96:	3308      	adds	r3, #8
 8000b98:	f04f 0200 	mov.w	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
		commands_fltrs[idx].U_n 		= 0.0f ;
 8000b9e:	4a26      	ldr	r2, [pc, #152]	@ (8000c38 <LPF_cmd_filter_init+0x110>)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	212c      	movs	r1, #44	@ 0x2c
 8000ba4:	fb01 f303 	mul.w	r3, r1, r3
 8000ba8:	4413      	add	r3, r2
 8000baa:	330c      	adds	r3, #12
 8000bac:	f04f 0200 	mov.w	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
		commands_fltrs[idx].Y_n 		= 0.0f ;
 8000bb2:	4a21      	ldr	r2, [pc, #132]	@ (8000c38 <LPF_cmd_filter_init+0x110>)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	212c      	movs	r1, #44	@ 0x2c
 8000bb8:	fb01 f303 	mul.w	r3, r1, r3
 8000bbc:	4413      	add	r3, r2
 8000bbe:	f04f 0200 	mov.w	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
		commands_fltrs[idx].Y_nm1 		= 0.0f ;
 8000bc4:	4a1c      	ldr	r2, [pc, #112]	@ (8000c38 <LPF_cmd_filter_init+0x110>)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	212c      	movs	r1, #44	@ 0x2c
 8000bca:	fb01 f303 	mul.w	r3, r1, r3
 8000bce:	4413      	add	r3, r2
 8000bd0:	3304      	adds	r3, #4
 8000bd2:	f04f 0200 	mov.w	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
		commands_fltrs[idx].U_nm1 		= 0.0f ;
 8000bd8:	4a17      	ldr	r2, [pc, #92]	@ (8000c38 <LPF_cmd_filter_init+0x110>)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	212c      	movs	r1, #44	@ 0x2c
 8000bde:	fb01 f303 	mul.w	r3, r1, r3
 8000be2:	4413      	add	r3, r2
 8000be4:	3310      	adds	r3, #16
 8000be6:	f04f 0200 	mov.w	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
		commands_fltrs[idx].t_n 		= 0.0f ;
 8000bec:	4a12      	ldr	r2, [pc, #72]	@ (8000c38 <LPF_cmd_filter_init+0x110>)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	212c      	movs	r1, #44	@ 0x2c
 8000bf2:	fb01 f303 	mul.w	r3, r1, r3
 8000bf6:	4413      	add	r3, r2
 8000bf8:	3320      	adds	r3, #32
 8000bfa:	f04f 0200 	mov.w	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
		commands_fltrs[idx].t_nm1 		= 0.0f ;
 8000c00:	4a0d      	ldr	r2, [pc, #52]	@ (8000c38 <LPF_cmd_filter_init+0x110>)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	212c      	movs	r1, #44	@ 0x2c
 8000c06:	fb01 f303 	mul.w	r3, r1, r3
 8000c0a:	4413      	add	r3, r2
 8000c0c:	3324      	adds	r3, #36	@ 0x24
 8000c0e:	f04f 0200 	mov.w	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
	for(int idx = 0; idx < 4; idx++)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	3301      	adds	r3, #1
 8000c18:	607b      	str	r3, [r7, #4]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2b03      	cmp	r3, #3
 8000c1e:	dd95      	ble.n	8000b4c <LPF_cmd_filter_init+0x24>
	}
}
 8000c20:	bf00      	nop
 8000c22:	bf00      	nop
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	240003b0 	.word	0x240003b0
 8000c34:	41200000 	.word	0x41200000
 8000c38:	24000300 	.word	0x24000300
 8000c3c:	3c23d70a 	.word	0x3c23d70a

08000c40 <command_filtering>:

void command_filtering(void)
{
 8000c40:	b5b0      	push	{r4, r5, r7, lr}
 8000c42:	b08e      	sub	sp, #56	@ 0x38
 8000c44:	af00      	add	r7, sp, #0
	//
	commands_noise[0] = Command_out.roll   ;
 8000c46:	4b3b      	ldr	r3, [pc, #236]	@ (8000d34 <command_filtering+0xf4>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a3b      	ldr	r2, [pc, #236]	@ (8000d38 <command_filtering+0xf8>)
 8000c4c:	6013      	str	r3, [r2, #0]
	commands_noise[1] = Command_out.pitch  ;
 8000c4e:	4b39      	ldr	r3, [pc, #228]	@ (8000d34 <command_filtering+0xf4>)
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	4a39      	ldr	r2, [pc, #228]	@ (8000d38 <command_filtering+0xf8>)
 8000c54:	6053      	str	r3, [r2, #4]
	commands_noise[2] = Command_out.yaw    ;
 8000c56:	4b37      	ldr	r3, [pc, #220]	@ (8000d34 <command_filtering+0xf4>)
 8000c58:	689b      	ldr	r3, [r3, #8]
 8000c5a:	4a37      	ldr	r2, [pc, #220]	@ (8000d38 <command_filtering+0xf8>)
 8000c5c:	6093      	str	r3, [r2, #8]
	commands_noise[3] = Command_out.thrust ;
 8000c5e:	4b35      	ldr	r3, [pc, #212]	@ (8000d34 <command_filtering+0xf4>)
 8000c60:	68db      	ldr	r3, [r3, #12]
 8000c62:	4a35      	ldr	r2, [pc, #212]	@ (8000d38 <command_filtering+0xf8>)
 8000c64:	60d3      	str	r3, [r2, #12]

	for(int idx = 0; idx < 4; idx++)
 8000c66:	2300      	movs	r3, #0
 8000c68:	637b      	str	r3, [r7, #52]	@ 0x34
 8000c6a:	e04b      	b.n	8000d04 <command_filtering+0xc4>
	{
		//
		commands_fltrs[idx].U_n 	= commands_noise[idx];
 8000c6c:	4a32      	ldr	r2, [pc, #200]	@ (8000d38 <command_filtering+0xf8>)
 8000c6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	4413      	add	r3, r2
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	4931      	ldr	r1, [pc, #196]	@ (8000d3c <command_filtering+0xfc>)
 8000c78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c7a:	202c      	movs	r0, #44	@ 0x2c
 8000c7c:	fb00 f303 	mul.w	r3, r0, r3
 8000c80:	440b      	add	r3, r1
 8000c82:	330c      	adds	r3, #12
 8000c84:	601a      	str	r2, [r3, #0]
		commands_fltrs[idx] 		= filtering_lpf(&commands_fltrs[idx]);
 8000c86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c88:	222c      	movs	r2, #44	@ 0x2c
 8000c8a:	fb02 f303 	mul.w	r3, r2, r3
 8000c8e:	4a2b      	ldr	r2, [pc, #172]	@ (8000d3c <command_filtering+0xfc>)
 8000c90:	441a      	add	r2, r3
 8000c92:	492a      	ldr	r1, [pc, #168]	@ (8000d3c <command_filtering+0xfc>)
 8000c94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c96:	202c      	movs	r0, #44	@ 0x2c
 8000c98:	fb00 f303 	mul.w	r3, r0, r3
 8000c9c:	18cc      	adds	r4, r1, r3
 8000c9e:	463b      	mov	r3, r7
 8000ca0:	4611      	mov	r1, r2
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f001 f98a 	bl	8001fbc <filtering_lpf>
 8000ca8:	4625      	mov	r5, r4
 8000caa:	463c      	mov	r4, r7
 8000cac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cb4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000cb8:	e885 0007 	stmia.w	r5, {r0, r1, r2}

		ouput_fltr[idx] = filter_step(&filters[idx], commands_noise[idx],COF_cmds[idx],SAMPLE_ATT) ;
 8000cbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	4a1f      	ldr	r2, [pc, #124]	@ (8000d40 <command_filtering+0x100>)
 8000cc2:	441a      	add	r2, r3
 8000cc4:	491c      	ldr	r1, [pc, #112]	@ (8000d38 <command_filtering+0xf8>)
 8000cc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000cc8:	009b      	lsls	r3, r3, #2
 8000cca:	440b      	add	r3, r1
 8000ccc:	edd3 7a00 	vldr	s15, [r3]
 8000cd0:	491c      	ldr	r1, [pc, #112]	@ (8000d44 <command_filtering+0x104>)
 8000cd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	440b      	add	r3, r1
 8000cd8:	ed93 7a00 	vldr	s14, [r3]
 8000cdc:	ed9f 1a1a 	vldr	s2, [pc, #104]	@ 8000d48 <command_filtering+0x108>
 8000ce0:	eef0 0a47 	vmov.f32	s1, s14
 8000ce4:	eeb0 0a67 	vmov.f32	s0, s15
 8000ce8:	4610      	mov	r0, r2
 8000cea:	f001 fb0d 	bl	8002308 <filter_step>
 8000cee:	eef0 7a40 	vmov.f32	s15, s0
 8000cf2:	4a16      	ldr	r2, [pc, #88]	@ (8000d4c <command_filtering+0x10c>)
 8000cf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	4413      	add	r3, r2
 8000cfa:	edc3 7a00 	vstr	s15, [r3]
	for(int idx = 0; idx < 4; idx++)
 8000cfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d00:	3301      	adds	r3, #1
 8000d02:	637b      	str	r3, [r7, #52]	@ 0x34
 8000d04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d06:	2b03      	cmp	r3, #3
 8000d08:	ddb0      	ble.n	8000c6c <command_filtering+0x2c>

	}
	//
	Commands.roll 		= 	commands_fltrs[0].Y_n ;
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <command_filtering+0xfc>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a10      	ldr	r2, [pc, #64]	@ (8000d50 <command_filtering+0x110>)
 8000d10:	6013      	str	r3, [r2, #0]
	Commands.pitch 		= 	commands_fltrs[1].Y_n ;
 8000d12:	4b0a      	ldr	r3, [pc, #40]	@ (8000d3c <command_filtering+0xfc>)
 8000d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d16:	4a0e      	ldr	r2, [pc, #56]	@ (8000d50 <command_filtering+0x110>)
 8000d18:	6053      	str	r3, [r2, #4]
	Commands.yaw 		= 	commands_fltrs[2].Y_n ;
 8000d1a:	4b08      	ldr	r3, [pc, #32]	@ (8000d3c <command_filtering+0xfc>)
 8000d1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d1e:	4a0c      	ldr	r2, [pc, #48]	@ (8000d50 <command_filtering+0x110>)
 8000d20:	6093      	str	r3, [r2, #8]
	Commands.thrust 	= 	commands_fltrs[3].Y_n ;
 8000d22:	4b06      	ldr	r3, [pc, #24]	@ (8000d3c <command_filtering+0xfc>)
 8000d24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8000d28:	4a09      	ldr	r2, [pc, #36]	@ (8000d50 <command_filtering+0x110>)
 8000d2a:	60d3      	str	r3, [r2, #12]


}
 8000d2c:	bf00      	nop
 8000d2e:	3738      	adds	r7, #56	@ 0x38
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bdb0      	pop	{r4, r5, r7, pc}
 8000d34:	240002b0 	.word	0x240002b0
 8000d38:	240002e0 	.word	0x240002e0
 8000d3c:	24000300 	.word	0x24000300
 8000d40:	240003e0 	.word	0x240003e0
 8000d44:	240003b0 	.word	0x240003b0
 8000d48:	3c23d70a 	.word	0x3c23d70a
 8000d4c:	240002f0 	.word	0x240002f0
 8000d50:	240002d0 	.word	0x240002d0

08000d54 <control_allocator>:

void control_allocator(Cmd_s control_cmd, Cmd_s trims )
{
 8000d54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d56:	b093      	sub	sp, #76	@ 0x4c
 8000d58:	af02      	add	r7, sp, #8
 8000d5a:	eeb0 4a40 	vmov.f32	s8, s0
 8000d5e:	eef0 4a60 	vmov.f32	s9, s1
 8000d62:	eeb0 5a41 	vmov.f32	s10, s2
 8000d66:	eef0 5a61 	vmov.f32	s11, s3
 8000d6a:	eeb0 6a42 	vmov.f32	s12, s4
 8000d6e:	eef0 6a62 	vmov.f32	s13, s5
 8000d72:	eeb0 7a43 	vmov.f32	s14, s6
 8000d76:	eef0 7a63 	vmov.f32	s15, s7
 8000d7a:	ed87 4a0a 	vstr	s8, [r7, #40]	@ 0x28
 8000d7e:	edc7 4a0b 	vstr	s9, [r7, #44]	@ 0x2c
 8000d82:	ed87 5a0c 	vstr	s10, [r7, #48]	@ 0x30
 8000d86:	edc7 5a0d 	vstr	s11, [r7, #52]	@ 0x34
 8000d8a:	ed87 6a06 	vstr	s12, [r7, #24]
 8000d8e:	edc7 6a07 	vstr	s13, [r7, #28]
 8000d92:	ed87 7a08 	vstr	s14, [r7, #32]
 8000d96:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	//
	Frame = CONFIGURATION;
 8000d9a:	4b7c      	ldr	r3, [pc, #496]	@ (8000f8c <control_allocator+0x238>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	701a      	strb	r2, [r3, #0]


	switch(Frame){
 8000da0:	4b7a      	ldr	r3, [pc, #488]	@ (8000f8c <control_allocator+0x238>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	2b03      	cmp	r3, #3
 8000da6:	f200 80c3 	bhi.w	8000f30 <control_allocator+0x1dc>
 8000daa:	a201      	add	r2, pc, #4	@ (adr r2, 8000db0 <control_allocator+0x5c>)
 8000dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000db0:	08000dc1 	.word	0x08000dc1
 8000db4:	08000e1d 	.word	0x08000e1d
 8000db8:	08000e79 	.word	0x08000e79
 8000dbc:	08000ed5 	.word	0x08000ed5
		case FIX_WING:
			servo_outs = FIX_WING_MIXER(control_cmd, trims)     ;
 8000dc0:	4c73      	ldr	r4, [pc, #460]	@ (8000f90 <control_allocator+0x23c>)
 8000dc2:	463b      	mov	r3, r7
 8000dc4:	ed97 4a06 	vldr	s8, [r7, #24]
 8000dc8:	edd7 4a07 	vldr	s9, [r7, #28]
 8000dcc:	ed97 5a08 	vldr	s10, [r7, #32]
 8000dd0:	edd7 5a09 	vldr	s11, [r7, #36]	@ 0x24
 8000dd4:	ed97 6a0a 	vldr	s12, [r7, #40]	@ 0x28
 8000dd8:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8000ddc:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8000de0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000de4:	eeb0 2a44 	vmov.f32	s4, s8
 8000de8:	eef0 2a64 	vmov.f32	s5, s9
 8000dec:	eeb0 3a45 	vmov.f32	s6, s10
 8000df0:	eef0 3a65 	vmov.f32	s7, s11
 8000df4:	eeb0 0a46 	vmov.f32	s0, s12
 8000df8:	eef0 0a66 	vmov.f32	s1, s13
 8000dfc:	eeb0 1a47 	vmov.f32	s2, s14
 8000e00:	eef0 1a67 	vmov.f32	s3, s15
 8000e04:	4618      	mov	r0, r3
 8000e06:	f000 fc37 	bl	8001678 <FIX_WING_MIXER>
 8000e0a:	463d      	mov	r5, r7
 8000e0c:	6828      	ldr	r0, [r5, #0]
 8000e0e:	6869      	ldr	r1, [r5, #4]
 8000e10:	68aa      	ldr	r2, [r5, #8]
 8000e12:	68eb      	ldr	r3, [r5, #12]
 8000e14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e16:	6928      	ldr	r0, [r5, #16]
 8000e18:	6020      	str	r0, [r4, #0]
			break;
 8000e1a:	e098      	b.n	8000f4e <control_allocator+0x1fa>
		case FLYING_WING:
			servo_outs = FLYING_WING_MIXER(control_cmd, trims)  ;
 8000e1c:	4c5c      	ldr	r4, [pc, #368]	@ (8000f90 <control_allocator+0x23c>)
 8000e1e:	463b      	mov	r3, r7
 8000e20:	ed97 4a06 	vldr	s8, [r7, #24]
 8000e24:	edd7 4a07 	vldr	s9, [r7, #28]
 8000e28:	ed97 5a08 	vldr	s10, [r7, #32]
 8000e2c:	edd7 5a09 	vldr	s11, [r7, #36]	@ 0x24
 8000e30:	ed97 6a0a 	vldr	s12, [r7, #40]	@ 0x28
 8000e34:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8000e38:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8000e3c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000e40:	eeb0 2a44 	vmov.f32	s4, s8
 8000e44:	eef0 2a64 	vmov.f32	s5, s9
 8000e48:	eeb0 3a45 	vmov.f32	s6, s10
 8000e4c:	eef0 3a65 	vmov.f32	s7, s11
 8000e50:	eeb0 0a46 	vmov.f32	s0, s12
 8000e54:	eef0 0a66 	vmov.f32	s1, s13
 8000e58:	eeb0 1a47 	vmov.f32	s2, s14
 8000e5c:	eef0 1a67 	vmov.f32	s3, s15
 8000e60:	4618      	mov	r0, r3
 8000e62:	f000 fcd9 	bl	8001818 <FLYING_WING_MIXER>
 8000e66:	463d      	mov	r5, r7
 8000e68:	6828      	ldr	r0, [r5, #0]
 8000e6a:	6869      	ldr	r1, [r5, #4]
 8000e6c:	68aa      	ldr	r2, [r5, #8]
 8000e6e:	68eb      	ldr	r3, [r5, #12]
 8000e70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e72:	6928      	ldr	r0, [r5, #16]
 8000e74:	6020      	str	r0, [r4, #0]
			break;
 8000e76:	e06a      	b.n	8000f4e <control_allocator+0x1fa>
		case TANDEM_WING:
			servo_outs = TANDEM_WING_MIXER(control_cmd, trims)  ;
 8000e78:	4c45      	ldr	r4, [pc, #276]	@ (8000f90 <control_allocator+0x23c>)
 8000e7a:	463b      	mov	r3, r7
 8000e7c:	ed97 4a06 	vldr	s8, [r7, #24]
 8000e80:	edd7 4a07 	vldr	s9, [r7, #28]
 8000e84:	ed97 5a08 	vldr	s10, [r7, #32]
 8000e88:	edd7 5a09 	vldr	s11, [r7, #36]	@ 0x24
 8000e8c:	ed97 6a0a 	vldr	s12, [r7, #40]	@ 0x28
 8000e90:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8000e94:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8000e98:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000e9c:	eeb0 2a44 	vmov.f32	s4, s8
 8000ea0:	eef0 2a64 	vmov.f32	s5, s9
 8000ea4:	eeb0 3a45 	vmov.f32	s6, s10
 8000ea8:	eef0 3a65 	vmov.f32	s7, s11
 8000eac:	eeb0 0a46 	vmov.f32	s0, s12
 8000eb0:	eef0 0a66 	vmov.f32	s1, s13
 8000eb4:	eeb0 1a47 	vmov.f32	s2, s14
 8000eb8:	eef0 1a67 	vmov.f32	s3, s15
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f000 fd97 	bl	80019f0 <TANDEM_WING_MIXER>
 8000ec2:	463d      	mov	r5, r7
 8000ec4:	6828      	ldr	r0, [r5, #0]
 8000ec6:	6869      	ldr	r1, [r5, #4]
 8000ec8:	68aa      	ldr	r2, [r5, #8]
 8000eca:	68eb      	ldr	r3, [r5, #12]
 8000ecc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ece:	6928      	ldr	r0, [r5, #16]
 8000ed0:	6020      	str	r0, [r4, #0]
			break;
 8000ed2:	e03c      	b.n	8000f4e <control_allocator+0x1fa>
		case CUSTOM_FRAME:
			servo_outs = CUSTOM_FRAME_MIXER(control_cmd, trims) ;
 8000ed4:	4c2e      	ldr	r4, [pc, #184]	@ (8000f90 <control_allocator+0x23c>)
 8000ed6:	463b      	mov	r3, r7
 8000ed8:	ed97 4a06 	vldr	s8, [r7, #24]
 8000edc:	edd7 4a07 	vldr	s9, [r7, #28]
 8000ee0:	ed97 5a08 	vldr	s10, [r7, #32]
 8000ee4:	edd7 5a09 	vldr	s11, [r7, #36]	@ 0x24
 8000ee8:	ed97 6a0a 	vldr	s12, [r7, #40]	@ 0x28
 8000eec:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8000ef0:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8000ef4:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000ef8:	eeb0 2a44 	vmov.f32	s4, s8
 8000efc:	eef0 2a64 	vmov.f32	s5, s9
 8000f00:	eeb0 3a45 	vmov.f32	s6, s10
 8000f04:	eef0 3a65 	vmov.f32	s7, s11
 8000f08:	eeb0 0a46 	vmov.f32	s0, s12
 8000f0c:	eef0 0a66 	vmov.f32	s1, s13
 8000f10:	eeb0 1a47 	vmov.f32	s2, s14
 8000f14:	eef0 1a67 	vmov.f32	s3, s15
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f000 fe55 	bl	8001bc8 <CUSTOM_FRAME_MIXER>
 8000f1e:	463d      	mov	r5, r7
 8000f20:	6828      	ldr	r0, [r5, #0]
 8000f22:	6869      	ldr	r1, [r5, #4]
 8000f24:	68aa      	ldr	r2, [r5, #8]
 8000f26:	68eb      	ldr	r3, [r5, #12]
 8000f28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f2a:	6928      	ldr	r0, [r5, #16]
 8000f2c:	6020      	str	r0, [r4, #0]
			break;
 8000f2e:	e00e      	b.n	8000f4e <control_allocator+0x1fa>
		default:

			for(int i = 0; i < 10; i++)
 8000f30:	2300      	movs	r3, #0
 8000f32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000f34:	e008      	b.n	8000f48 <control_allocator+0x1f4>
			{
				//
				servo_outs.S[i] = 1500 ;
 8000f36:	4a16      	ldr	r2, [pc, #88]	@ (8000f90 <control_allocator+0x23c>)
 8000f38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000f3a:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8000f3e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int i = 0; i < 10; i++)
 8000f42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000f44:	3301      	adds	r3, #1
 8000f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000f48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000f4a:	2b09      	cmp	r3, #9
 8000f4c:	ddf3      	ble.n	8000f36 <control_allocator+0x1e2>
			}

		}

	PWM_Output = reverse_servos(servo_outs );
 8000f4e:	4e11      	ldr	r6, [pc, #68]	@ (8000f94 <control_allocator+0x240>)
 8000f50:	463c      	mov	r4, r7
 8000f52:	4b0f      	ldr	r3, [pc, #60]	@ (8000f90 <control_allocator+0x23c>)
 8000f54:	466d      	mov	r5, sp
 8000f56:	f103 020c 	add.w	r2, r3, #12
 8000f5a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f5e:	e885 0003 	stmia.w	r5, {r0, r1}
 8000f62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f64:	4620      	mov	r0, r4
 8000f66:	f000 f835 	bl	8000fd4 <reverse_servos>
 8000f6a:	4632      	mov	r2, r6
 8000f6c:	463b      	mov	r3, r7
 8000f6e:	6819      	ldr	r1, [r3, #0]
 8000f70:	685d      	ldr	r5, [r3, #4]
 8000f72:	689c      	ldr	r4, [r3, #8]
 8000f74:	68d8      	ldr	r0, [r3, #12]
 8000f76:	6011      	str	r1, [r2, #0]
 8000f78:	6055      	str	r5, [r2, #4]
 8000f7a:	6094      	str	r4, [r2, #8]
 8000f7c:	60d0      	str	r0, [r2, #12]
 8000f7e:	6919      	ldr	r1, [r3, #16]
 8000f80:	6111      	str	r1, [r2, #16]
}
 8000f82:	bf00      	nop
 8000f84:	3744      	adds	r7, #68	@ 0x44
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	240002ac 	.word	0x240002ac
 8000f90:	240003cc 	.word	0x240003cc
 8000f94:	24000068 	.word	0x24000068

08000f98 <reverse_servo_value>:

uint16_t reverse_servo_value(uint16_t input)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	80fb      	strh	r3, [r7, #6]
    // Asegurarnos que el valor esté dentro del rango válido
    if (input < 1000) input = 1000;
 8000fa2:	88fb      	ldrh	r3, [r7, #6]
 8000fa4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000fa8:	d202      	bcs.n	8000fb0 <reverse_servo_value+0x18>
 8000faa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fae:	80fb      	strh	r3, [r7, #6]
    if (input > 2000) input = 2000;
 8000fb0:	88fb      	ldrh	r3, [r7, #6]
 8000fb2:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000fb6:	d902      	bls.n	8000fbe <reverse_servo_value+0x26>
 8000fb8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000fbc:	80fb      	strh	r3, [r7, #6]

    // Calcular el valor invertido
    return 3000 - input;
 8000fbe:	88fb      	ldrh	r3, [r7, #6]
 8000fc0:	f5c3 633b 	rsb	r3, r3, #2992	@ 0xbb0
 8000fc4:	3308      	adds	r3, #8
 8000fc6:	b29b      	uxth	r3, r3
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <reverse_servos>:


Servo_mgmt_s reverse_servos(Servo_mgmt_s inputs )
{
 8000fd4:	b084      	sub	sp, #16
 8000fd6:	b5b0      	push	{r4, r5, r7, lr}
 8000fd8:	b088      	sub	sp, #32
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
 8000fde:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8000fe2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	//
	Servo_mgmt_s uotputs;

	for(int i = 0; i < 10; i++)
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61fb      	str	r3, [r7, #28]
 8000fea:	e024      	b.n	8001036 <reverse_servos+0x62>
	{
		//
		if (Reverse.S[i])
 8000fec:	4a1c      	ldr	r2, [pc, #112]	@ (8001060 <reverse_servos+0x8c>)
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d010      	beq.n	800101a <reverse_servos+0x46>
		{
			//
			uotputs.S[i] = reverse_servo_value(inputs.S[i]);
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	3330      	adds	r3, #48	@ 0x30
 8000ffe:	443b      	add	r3, r7
 8001000:	889b      	ldrh	r3, [r3, #4]
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff ffc8 	bl	8000f98 <reverse_servo_value>
 8001008:	4603      	mov	r3, r0
 800100a:	461a      	mov	r2, r3
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	3320      	adds	r3, #32
 8001012:	443b      	add	r3, r7
 8001014:	f823 2c18 	strh.w	r2, [r3, #-24]
 8001018:	e00a      	b.n	8001030 <reverse_servos+0x5c>
		}
		else
		{
			//
			uotputs.S[i] = inputs.S[i];
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	3330      	adds	r3, #48	@ 0x30
 8001020:	443b      	add	r3, r7
 8001022:	889a      	ldrh	r2, [r3, #4]
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	3320      	adds	r3, #32
 800102a:	443b      	add	r3, r7
 800102c:	f823 2c18 	strh.w	r2, [r3, #-24]
	for(int i = 0; i < 10; i++)
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	3301      	adds	r3, #1
 8001034:	61fb      	str	r3, [r7, #28]
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	2b09      	cmp	r3, #9
 800103a:	ddd7      	ble.n	8000fec <reverse_servos+0x18>
		}
	}

	return uotputs;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	461d      	mov	r5, r3
 8001040:	f107 0408 	add.w	r4, r7, #8
 8001044:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001046:	6028      	str	r0, [r5, #0]
 8001048:	6069      	str	r1, [r5, #4]
 800104a:	60aa      	str	r2, [r5, #8]
 800104c:	60eb      	str	r3, [r5, #12]
 800104e:	6820      	ldr	r0, [r4, #0]
 8001050:	6128      	str	r0, [r5, #16]
}
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	3720      	adds	r7, #32
 8001056:	46bd      	mov	sp, r7
 8001058:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800105c:	b004      	add	sp, #16
 800105e:	4770      	bx	lr
 8001060:	240003c0 	.word	0x240003c0
 8001064:	00000000 	.word	0x00000000

08001068 <get_commands_rc>:
    }
    return signal_out;
}

Cmd_s get_commands_rc(void)
{
 8001068:	b490      	push	{r4, r7}
 800106a:	b08c      	sub	sp, #48	@ 0x30
 800106c:	af00      	add	r7, sp, #0
	//
	Cmd_s out_norms;

	out_norms.roll 		= ((float)Radio_input.Canal_1 - 1500.0 ) / 500.0 ;
 800106e:	4b3e      	ldr	r3, [pc, #248]	@ (8001168 <get_commands_rc+0x100>)
 8001070:	885b      	ldrh	r3, [r3, #2]
 8001072:	ee07 3a90 	vmov	s15, r3
 8001076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800107a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800107e:	ed9f 6b34 	vldr	d6, [pc, #208]	@ 8001150 <get_commands_rc+0xe8>
 8001082:	ee37 6b46 	vsub.f64	d6, d7, d6
 8001086:	ed9f 5b34 	vldr	d5, [pc, #208]	@ 8001158 <get_commands_rc+0xf0>
 800108a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800108e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001092:	edc7 7a04 	vstr	s15, [r7, #16]

	out_norms.pitch 	= ((float)Radio_input.Canal_2 - 1500.0 ) / 500.0 ;
 8001096:	4b34      	ldr	r3, [pc, #208]	@ (8001168 <get_commands_rc+0x100>)
 8001098:	889b      	ldrh	r3, [r3, #4]
 800109a:	ee07 3a90 	vmov	s15, r3
 800109e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010a2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010a6:	ed9f 6b2a 	vldr	d6, [pc, #168]	@ 8001150 <get_commands_rc+0xe8>
 80010aa:	ee37 6b46 	vsub.f64	d6, d7, d6
 80010ae:	ed9f 5b2a 	vldr	d5, [pc, #168]	@ 8001158 <get_commands_rc+0xf0>
 80010b2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80010b6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80010ba:	edc7 7a05 	vstr	s15, [r7, #20]

	out_norms.yaw 		= ((float)Radio_input.Canal_3 - 1500.0 ) / 500.0 ;
 80010be:	4b2a      	ldr	r3, [pc, #168]	@ (8001168 <get_commands_rc+0x100>)
 80010c0:	88db      	ldrh	r3, [r3, #6]
 80010c2:	ee07 3a90 	vmov	s15, r3
 80010c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010ca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010ce:	ed9f 6b20 	vldr	d6, [pc, #128]	@ 8001150 <get_commands_rc+0xe8>
 80010d2:	ee37 6b46 	vsub.f64	d6, d7, d6
 80010d6:	ed9f 5b20 	vldr	d5, [pc, #128]	@ 8001158 <get_commands_rc+0xf0>
 80010da:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80010de:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80010e2:	edc7 7a06 	vstr	s15, [r7, #24]

	out_norms.thrust 	= ((float)Radio_input.Canal_4 - 1000.0 ) / 1000.0 ;
 80010e6:	4b20      	ldr	r3, [pc, #128]	@ (8001168 <get_commands_rc+0x100>)
 80010e8:	891b      	ldrh	r3, [r3, #8]
 80010ea:	ee07 3a90 	vmov	s15, r3
 80010ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010f2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010f6:	ed9f 6b1a 	vldr	d6, [pc, #104]	@ 8001160 <get_commands_rc+0xf8>
 80010fa:	ee37 6b46 	vsub.f64	d6, d7, d6
 80010fe:	ed9f 5b18 	vldr	d5, [pc, #96]	@ 8001160 <get_commands_rc+0xf8>
 8001102:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001106:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800110a:	edc7 7a07 	vstr	s15, [r7, #28]

	return out_norms;
 800110e:	f107 0420 	add.w	r4, r7, #32
 8001112:	f107 0310 	add.w	r3, r7, #16
 8001116:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001118:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800111c:	6a38      	ldr	r0, [r7, #32]
 800111e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001120:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001124:	ee06 0a10 	vmov	s12, r0
 8001128:	ee06 1a90 	vmov	s13, r1
 800112c:	ee07 2a10 	vmov	s14, r2
 8001130:	ee07 3a90 	vmov	s15, r3
}
 8001134:	eeb0 0a46 	vmov.f32	s0, s12
 8001138:	eef0 0a66 	vmov.f32	s1, s13
 800113c:	eeb0 1a47 	vmov.f32	s2, s14
 8001140:	eef0 1a67 	vmov.f32	s3, s15
 8001144:	3730      	adds	r7, #48	@ 0x30
 8001146:	46bd      	mov	sp, r7
 8001148:	bc90      	pop	{r4, r7}
 800114a:	4770      	bx	lr
 800114c:	f3af 8000 	nop.w
 8001150:	00000000 	.word	0x00000000
 8001154:	40977000 	.word	0x40977000
 8001158:	00000000 	.word	0x00000000
 800115c:	407f4000 	.word	0x407f4000
 8001160:	00000000 	.word	0x00000000
 8001164:	408f4000 	.word	0x408f4000
 8001168:	2400007c 	.word	0x2400007c

0800116c <get_actual_trims>:

void get_actual_trims(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
	//
	Trims.roll 		=  (float)Radio_input.Canal_10 - 1500.0 ;
 8001170:	4b17      	ldr	r3, [pc, #92]	@ (80011d0 <get_actual_trims+0x64>)
 8001172:	8a9b      	ldrh	r3, [r3, #20]
 8001174:	ee07 3a90 	vmov	s15, r3
 8001178:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800117c:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 80011d4 <get_actual_trims+0x68>
 8001180:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001184:	4b14      	ldr	r3, [pc, #80]	@ (80011d8 <get_actual_trims+0x6c>)
 8001186:	edc3 7a00 	vstr	s15, [r3]
	Trims.pitch 	=  (float)Radio_input.Canal_11 - 1500.0 ;
 800118a:	4b11      	ldr	r3, [pc, #68]	@ (80011d0 <get_actual_trims+0x64>)
 800118c:	8adb      	ldrh	r3, [r3, #22]
 800118e:	ee07 3a90 	vmov	s15, r3
 8001192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001196:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80011d4 <get_actual_trims+0x68>
 800119a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800119e:	4b0e      	ldr	r3, [pc, #56]	@ (80011d8 <get_actual_trims+0x6c>)
 80011a0:	edc3 7a01 	vstr	s15, [r3, #4]
	Trims.yaw 		=  (float)Radio_input.Canal_12 - 1500.0 ;
 80011a4:	4b0a      	ldr	r3, [pc, #40]	@ (80011d0 <get_actual_trims+0x64>)
 80011a6:	8b1b      	ldrh	r3, [r3, #24]
 80011a8:	ee07 3a90 	vmov	s15, r3
 80011ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011b0:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80011d4 <get_actual_trims+0x68>
 80011b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80011b8:	4b07      	ldr	r3, [pc, #28]	@ (80011d8 <get_actual_trims+0x6c>)
 80011ba:	edc3 7a02 	vstr	s15, [r3, #8]
	Trims.thrust 	=  0.0f ;
 80011be:	4b06      	ldr	r3, [pc, #24]	@ (80011d8 <get_actual_trims+0x6c>)
 80011c0:	f04f 0200 	mov.w	r2, #0
 80011c4:	60da      	str	r2, [r3, #12]
}
 80011c6:	bf00      	nop
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	2400007c 	.word	0x2400007c
 80011d4:	44bb8000 	.word	0x44bb8000
 80011d8:	240002c0 	.word	0x240002c0

080011dc <init_Reverse_Servos>:


void init_Reverse_Servos(Servo_reverse_s *servos)
{
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 10; i++)
 80011e4:	2300      	movs	r3, #0
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	e007      	b.n	80011fa <init_Reverse_Servos+0x1e>
    {
    	//
        servos->S[i] = false;
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	4413      	add	r3, r2
 80011f0:	2200      	movs	r2, #0
 80011f2:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 10; i++)
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	3301      	adds	r3, #1
 80011f8:	60fb      	str	r3, [r7, #12]
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	2b09      	cmp	r3, #9
 80011fe:	ddf4      	ble.n	80011ea <init_Reverse_Servos+0xe>
    }
}
 8001200:	bf00      	nop
 8001202:	bf00      	nop
 8001204:	3714      	adds	r7, #20
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
	...

08001210 <FlightTaskAttitude>:
Cmd_s rates_Gains;



void FlightTaskAttitude(void)
{
 8001210:	b598      	push	{r3, r4, r7, lr}
 8001212:	af00      	add	r7, sp, #0
	//
	attitude_parameters_refresh();
 8001214:	f000 f8e0 	bl	80013d8 <attitude_parameters_refresh>

	refresh_actual_rates();
 8001218:	f000 f9e2 	bl	80015e0 <refresh_actual_rates>

	get_flight_mode();
 800121c:	f000 f8d0 	bl	80013c0 <get_flight_mode>

	Command_in = get_commands_rc();
 8001220:	f7ff ff22 	bl	8001068 <get_commands_rc>
 8001224:	eeb0 6a40 	vmov.f32	s12, s0
 8001228:	eef0 6a60 	vmov.f32	s13, s1
 800122c:	eeb0 7a41 	vmov.f32	s14, s2
 8001230:	eef0 7a61 	vmov.f32	s15, s3
 8001234:	4b44      	ldr	r3, [pc, #272]	@ (8001348 <FlightTaskAttitude+0x138>)
 8001236:	ed83 6a00 	vstr	s12, [r3]
 800123a:	edc3 6a01 	vstr	s13, [r3, #4]
 800123e:	ed83 7a02 	vstr	s14, [r3, #8]
 8001242:	edc3 7a03 	vstr	s15, [r3, #12]


	switch(mode)
 8001246:	4b41      	ldr	r3, [pc, #260]	@ (800134c <FlightTaskAttitude+0x13c>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	2b03      	cmp	r3, #3
 800124c:	dc47      	bgt.n	80012de <FlightTaskAttitude+0xce>
 800124e:	2b02      	cmp	r3, #2
 8001250:	da4c      	bge.n	80012ec <FlightTaskAttitude+0xdc>
 8001252:	2b00      	cmp	r3, #0
 8001254:	d03c      	beq.n	80012d0 <FlightTaskAttitude+0xc0>
 8001256:	2b01      	cmp	r3, #1
 8001258:	d141      	bne.n	80012de <FlightTaskAttitude+0xce>
	case ATTITUDE_HOLD_MODE:
//		AttitudeHold();
		break;
	case RATE_MODE:
		//
		Command_out = rates_control_law(Command_in , actual_rates, rates_Gains);
 800125a:	4b3d      	ldr	r3, [pc, #244]	@ (8001350 <FlightTaskAttitude+0x140>)
 800125c:	edd3 3a00 	vldr	s7, [r3]
 8001260:	ed93 4a01 	vldr	s8, [r3, #4]
 8001264:	edd3 4a02 	vldr	s9, [r3, #8]
 8001268:	ed93 5a03 	vldr	s10, [r3, #12]
 800126c:	4b39      	ldr	r3, [pc, #228]	@ (8001354 <FlightTaskAttitude+0x144>)
 800126e:	edd3 2a00 	vldr	s5, [r3]
 8001272:	ed93 3a01 	vldr	s6, [r3, #4]
 8001276:	edd3 5a02 	vldr	s11, [r3, #8]
 800127a:	4b33      	ldr	r3, [pc, #204]	@ (8001348 <FlightTaskAttitude+0x138>)
 800127c:	ed93 6a00 	vldr	s12, [r3]
 8001280:	edd3 6a01 	vldr	s13, [r3, #4]
 8001284:	ed93 7a02 	vldr	s14, [r3, #8]
 8001288:	edd3 7a03 	vldr	s15, [r3, #12]
 800128c:	eeb0 2a62 	vmov.f32	s4, s5
 8001290:	eef0 2a43 	vmov.f32	s5, s6
 8001294:	eeb0 3a65 	vmov.f32	s6, s11
 8001298:	eeb0 0a46 	vmov.f32	s0, s12
 800129c:	eef0 0a66 	vmov.f32	s1, s13
 80012a0:	eeb0 1a47 	vmov.f32	s2, s14
 80012a4:	eef0 1a67 	vmov.f32	s3, s15
 80012a8:	f000 f8aa 	bl	8001400 <rates_control_law>
 80012ac:	eeb0 6a40 	vmov.f32	s12, s0
 80012b0:	eef0 6a60 	vmov.f32	s13, s1
 80012b4:	eeb0 7a41 	vmov.f32	s14, s2
 80012b8:	eef0 7a61 	vmov.f32	s15, s3
 80012bc:	4b26      	ldr	r3, [pc, #152]	@ (8001358 <FlightTaskAttitude+0x148>)
 80012be:	ed83 6a00 	vstr	s12, [r3]
 80012c2:	edc3 6a01 	vstr	s13, [r3, #4]
 80012c6:	ed83 7a02 	vstr	s14, [r3, #8]
 80012ca:	edc3 7a03 	vstr	s15, [r3, #12]

		break;
 80012ce:	e00e      	b.n	80012ee <FlightTaskAttitude+0xde>
	case MANUAL_MODE:
		//
		Command_out = Command_in;
 80012d0:	4a21      	ldr	r2, [pc, #132]	@ (8001358 <FlightTaskAttitude+0x148>)
 80012d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001348 <FlightTaskAttitude+0x138>)
 80012d4:	4614      	mov	r4, r2
 80012d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		break;
 80012dc:	e007      	b.n	80012ee <FlightTaskAttitude+0xde>
	default:
		//
		Command_out = Command_in;
 80012de:	4a1e      	ldr	r2, [pc, #120]	@ (8001358 <FlightTaskAttitude+0x148>)
 80012e0:	4b19      	ldr	r3, [pc, #100]	@ (8001348 <FlightTaskAttitude+0x138>)
 80012e2:	4614      	mov	r4, r2
 80012e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		break;
 80012ea:	e000      	b.n	80012ee <FlightTaskAttitude+0xde>
		break;
 80012ec:	bf00      	nop
	}

	command_filtering();
 80012ee:	f7ff fca7 	bl	8000c40 <command_filtering>

	get_actual_trims();
 80012f2:	f7ff ff3b 	bl	800116c <get_actual_trims>

	init_Reverse_Servos(&Reverse);
 80012f6:	4819      	ldr	r0, [pc, #100]	@ (800135c <FlightTaskAttitude+0x14c>)
 80012f8:	f7ff ff70 	bl	80011dc <init_Reverse_Servos>

	control_allocator(Commands , Trims );
 80012fc:	4b18      	ldr	r3, [pc, #96]	@ (8001360 <FlightTaskAttitude+0x150>)
 80012fe:	ed93 4a00 	vldr	s8, [r3]
 8001302:	edd3 4a01 	vldr	s9, [r3, #4]
 8001306:	ed93 5a02 	vldr	s10, [r3, #8]
 800130a:	edd3 5a03 	vldr	s11, [r3, #12]
 800130e:	4b15      	ldr	r3, [pc, #84]	@ (8001364 <FlightTaskAttitude+0x154>)
 8001310:	ed93 6a00 	vldr	s12, [r3]
 8001314:	edd3 6a01 	vldr	s13, [r3, #4]
 8001318:	ed93 7a02 	vldr	s14, [r3, #8]
 800131c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001320:	eeb0 2a44 	vmov.f32	s4, s8
 8001324:	eef0 2a64 	vmov.f32	s5, s9
 8001328:	eeb0 3a45 	vmov.f32	s6, s10
 800132c:	eef0 3a65 	vmov.f32	s7, s11
 8001330:	eeb0 0a46 	vmov.f32	s0, s12
 8001334:	eef0 0a66 	vmov.f32	s1, s13
 8001338:	eeb0 1a47 	vmov.f32	s2, s14
 800133c:	eef0 1a67 	vmov.f32	s3, s15
 8001340:	f7ff fd08 	bl	8000d54 <control_allocator>

}
 8001344:	bf00      	nop
 8001346:	bd98      	pop	{r3, r4, r7, pc}
 8001348:	240003f0 	.word	0x240003f0
 800134c:	24000410 	.word	0x24000410
 8001350:	24000400 	.word	0x24000400
 8001354:	240004b0 	.word	0x240004b0
 8001358:	240002b0 	.word	0x240002b0
 800135c:	240003c0 	.word	0x240003c0
 8001360:	240002c0 	.word	0x240002c0
 8001364:	240002d0 	.word	0x240002d0

08001368 <rc_three_steps_CurrentMode>:
#include "Flight_Management_Control/modes_management.h"

FlightMode_t mode ;

uint8_t rc_three_steps_CurrentMode(void)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
	//
	uint16_t pwm_value = Radio_input.Canal_5;
 800136e:	4b12      	ldr	r3, [pc, #72]	@ (80013b8 <rc_three_steps_CurrentMode+0x50>)
 8001370:	895b      	ldrh	r3, [r3, #10]
 8001372:	80fb      	strh	r3, [r7, #6]

	if (pwm_value < (PWM_MID - PWM_DEADZONE))
 8001374:	88fb      	ldrh	r3, [r7, #6]
 8001376:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800137a:	4293      	cmp	r3, r2
 800137c:	d801      	bhi.n	8001382 <rc_three_steps_CurrentMode+0x1a>
	{
	        return MANUAL_MODE;
 800137e:	2300      	movs	r3, #0
 8001380:	e014      	b.n	80013ac <rc_three_steps_CurrentMode+0x44>
	 }
	else if (pwm_value < 1750 && pwm_value > 1350)
 8001382:	88fb      	ldrh	r3, [r7, #6]
 8001384:	f240 62d5 	movw	r2, #1749	@ 0x6d5
 8001388:	4293      	cmp	r3, r2
 800138a:	d806      	bhi.n	800139a <rc_three_steps_CurrentMode+0x32>
 800138c:	88fb      	ldrh	r3, [r7, #6]
 800138e:	f240 5246 	movw	r2, #1350	@ 0x546
 8001392:	4293      	cmp	r3, r2
 8001394:	d901      	bls.n	800139a <rc_three_steps_CurrentMode+0x32>
	 {
	        return RATE_MODE;
 8001396:	2301      	movs	r3, #1
 8001398:	e008      	b.n	80013ac <rc_three_steps_CurrentMode+0x44>
	  }
	else if (pwm_value >= (PWM_MAX - PWM_DEADZONE))
 800139a:	88fb      	ldrh	r3, [r7, #6]
 800139c:	f240 62d5 	movw	r2, #1749	@ 0x6d5
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d901      	bls.n	80013a8 <rc_three_steps_CurrentMode+0x40>
	 {
	        return ATTITUDE_HOLD_MODE;
 80013a4:	2302      	movs	r3, #2
 80013a6:	e001      	b.n	80013ac <rc_three_steps_CurrentMode+0x44>
	  }
	else {
	        // Zona muerta → mantener último modo (evita oscilaciones)
	        static FlightMode_t last_mode = MANUAL_MODE;
	        return last_mode;
 80013a8:	4b04      	ldr	r3, [pc, #16]	@ (80013bc <rc_three_steps_CurrentMode+0x54>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
	    }

}
 80013ac:	4618      	mov	r0, r3
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr
 80013b8:	2400007c 	.word	0x2400007c
 80013bc:	24000411 	.word	0x24000411

080013c0 <get_flight_mode>:

void get_flight_mode(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
	//
	mode = (FlightMode_t)rc_three_steps_CurrentMode();
 80013c4:	f7ff ffd0 	bl	8001368 <rc_three_steps_CurrentMode>
 80013c8:	4603      	mov	r3, r0
 80013ca:	461a      	mov	r2, r3
 80013cc:	4b01      	ldr	r3, [pc, #4]	@ (80013d4 <get_flight_mode+0x14>)
 80013ce:	701a      	strb	r2, [r3, #0]
}
 80013d0:	bf00      	nop
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	24000410 	.word	0x24000410

080013d8 <attitude_parameters_refresh>:
#include "Flight_Management_Control/parameters_manager.h"
#include "Flight_Management_Control/flight_management.h"


void attitude_parameters_refresh(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
	//
	rates_Gains.roll  = K_P ;
 80013dc:	4b06      	ldr	r3, [pc, #24]	@ (80013f8 <attitude_parameters_refresh+0x20>)
 80013de:	4a07      	ldr	r2, [pc, #28]	@ (80013fc <attitude_parameters_refresh+0x24>)
 80013e0:	601a      	str	r2, [r3, #0]
	rates_Gains.pitch = K_Q ;
 80013e2:	4b05      	ldr	r3, [pc, #20]	@ (80013f8 <attitude_parameters_refresh+0x20>)
 80013e4:	4a05      	ldr	r2, [pc, #20]	@ (80013fc <attitude_parameters_refresh+0x24>)
 80013e6:	605a      	str	r2, [r3, #4]
	rates_Gains.yaw   = K_R ;
 80013e8:	4b03      	ldr	r3, [pc, #12]	@ (80013f8 <attitude_parameters_refresh+0x20>)
 80013ea:	4a04      	ldr	r2, [pc, #16]	@ (80013fc <attitude_parameters_refresh+0x24>)
 80013ec:	609a      	str	r2, [r3, #8]

}
 80013ee:	bf00      	nop
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	24000400 	.word	0x24000400
 80013fc:	3ba3d70a 	.word	0x3ba3d70a

08001400 <rates_control_law>:
 *      Author: rtrujillo
 */
#include "Flight_Management_Control/rates_mode.h"

Cmd_s rates_control_law(Cmd_s inputs_norms, Gyro_s actual_gyro, Cmd_s K)
{
 8001400:	b490      	push	{r4, r7}
 8001402:	b098      	sub	sp, #96	@ 0x60
 8001404:	af00      	add	r7, sp, #0
 8001406:	eef0 5a43 	vmov.f32	s11, s6
 800140a:	eeb0 6a63 	vmov.f32	s12, s7
 800140e:	eef0 6a44 	vmov.f32	s13, s8
 8001412:	eeb0 7a64 	vmov.f32	s14, s9
 8001416:	eef0 7a45 	vmov.f32	s15, s10
 800141a:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30
 800141e:	edc7 0a0d 	vstr	s1, [r7, #52]	@ 0x34
 8001422:	ed87 1a0e 	vstr	s2, [r7, #56]	@ 0x38
 8001426:	edc7 1a0f 	vstr	s3, [r7, #60]	@ 0x3c
 800142a:	ed87 2a09 	vstr	s4, [r7, #36]	@ 0x24
 800142e:	edc7 2a0a 	vstr	s5, [r7, #40]	@ 0x28
 8001432:	edc7 5a0b 	vstr	s11, [r7, #44]	@ 0x2c
 8001436:	ed87 6a05 	vstr	s12, [r7, #20]
 800143a:	edc7 6a06 	vstr	s13, [r7, #24]
 800143e:	ed87 7a07 	vstr	s14, [r7, #28]
 8001442:	edc7 7a08 	vstr	s15, [r7, #32]
	//
	Cmd_s out_puts;

	out_puts.roll   = inputs_norms.roll  -  actual_gyro.roll * K.roll ;
 8001446:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800144a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800144e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001452:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001456:	ee77 7a67 	vsub.f32	s15, s14, s15
 800145a:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
	out_puts.pitch  = inputs_norms.pitch -  actual_gyro.pitch* K.pitch ;
 800145e:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001462:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8001466:	edd7 7a06 	vldr	s15, [r7, #24]
 800146a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800146e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001472:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
	out_puts.yaw    = inputs_norms.yaw   -  actual_gyro.yaw  * K.yaw ;
 8001476:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800147a:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 800147e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001482:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001486:	ee77 7a67 	vsub.f32	s15, s14, s15
 800148a:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
	out_puts.thrust = inputs_norms.thrust ;
 800148e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001490:	64fb      	str	r3, [r7, #76]	@ 0x4c

	return out_puts ;
 8001492:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8001496:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800149a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800149c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80014a0:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80014a2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80014a4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80014a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80014a8:	ee06 0a10 	vmov	s12, r0
 80014ac:	ee06 1a90 	vmov	s13, r1
 80014b0:	ee07 2a10 	vmov	s14, r2
 80014b4:	ee07 3a90 	vmov	s15, r3
}
 80014b8:	eeb0 0a46 	vmov.f32	s0, s12
 80014bc:	eef0 0a66 	vmov.f32	s1, s13
 80014c0:	eeb0 1a47 	vmov.f32	s2, s14
 80014c4:	eef0 1a67 	vmov.f32	s3, s15
 80014c8:	3760      	adds	r7, #96	@ 0x60
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bc90      	pop	{r4, r7}
 80014ce:	4770      	bx	lr

080014d0 <LPF_gyro_filter_init>:


Gyro_s actual_rates;

void LPF_gyro_filter_init(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
	// Inicializaciones
	LPF_gyros[0] = LPF_gyro_x ;
 80014d6:	4b3e      	ldr	r3, [pc, #248]	@ (80015d0 <LPF_gyro_filter_init+0x100>)
 80014d8:	4a3e      	ldr	r2, [pc, #248]	@ (80015d4 <LPF_gyro_filter_init+0x104>)
 80014da:	601a      	str	r2, [r3, #0]
	LPF_gyros[1] = LPF_gyro_y ;
 80014dc:	4b3c      	ldr	r3, [pc, #240]	@ (80015d0 <LPF_gyro_filter_init+0x100>)
 80014de:	4a3d      	ldr	r2, [pc, #244]	@ (80015d4 <LPF_gyro_filter_init+0x104>)
 80014e0:	605a      	str	r2, [r3, #4]
	LPF_gyros[2] = LPF_gyro_z ;
 80014e2:	4b3b      	ldr	r3, [pc, #236]	@ (80015d0 <LPF_gyro_filter_init+0x100>)
 80014e4:	4a3b      	ldr	r2, [pc, #236]	@ (80015d4 <LPF_gyro_filter_init+0x104>)
 80014e6:	609a      	str	r2, [r3, #8]
	for(int idx = 0;idx < 3; idx++)
 80014e8:	2300      	movs	r3, #0
 80014ea:	607b      	str	r3, [r7, #4]
 80014ec:	e066      	b.n	80015bc <LPF_gyro_filter_init+0xec>
	{
		//
		gyros_fltrs[idx].inicio 	= 1;
 80014ee:	4a3a      	ldr	r2, [pc, #232]	@ (80015d8 <LPF_gyro_filter_init+0x108>)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	212c      	movs	r1, #44	@ 0x2c
 80014f4:	fb01 f303 	mul.w	r3, r1, r3
 80014f8:	4413      	add	r3, r2
 80014fa:	3328      	adds	r3, #40	@ 0x28
 80014fc:	2201      	movs	r2, #1
 80014fe:	601a      	str	r2, [r3, #0]
		gyros_fltrs[idx].f_cutoff 	= LPF_gyros[idx] ;
 8001500:	4a33      	ldr	r2, [pc, #204]	@ (80015d0 <LPF_gyro_filter_init+0x100>)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	4413      	add	r3, r2
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	4933      	ldr	r1, [pc, #204]	@ (80015d8 <LPF_gyro_filter_init+0x108>)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	202c      	movs	r0, #44	@ 0x2c
 8001510:	fb00 f303 	mul.w	r3, r0, r3
 8001514:	440b      	add	r3, r1
 8001516:	3318      	adds	r3, #24
 8001518:	601a      	str	r2, [r3, #0]
		gyros_fltrs[idx].t_sample 	= SAMPLE_ATT ;
 800151a:	4a2f      	ldr	r2, [pc, #188]	@ (80015d8 <LPF_gyro_filter_init+0x108>)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	212c      	movs	r1, #44	@ 0x2c
 8001520:	fb01 f303 	mul.w	r3, r1, r3
 8001524:	4413      	add	r3, r2
 8001526:	331c      	adds	r3, #28
 8001528:	4a2c      	ldr	r2, [pc, #176]	@ (80015dc <LPF_gyro_filter_init+0x10c>)
 800152a:	601a      	str	r2, [r3, #0]
		gyros_fltrs[idx].Y_0 		= 0.0f ;
 800152c:	4a2a      	ldr	r2, [pc, #168]	@ (80015d8 <LPF_gyro_filter_init+0x108>)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	212c      	movs	r1, #44	@ 0x2c
 8001532:	fb01 f303 	mul.w	r3, r1, r3
 8001536:	4413      	add	r3, r2
 8001538:	3308      	adds	r3, #8
 800153a:	f04f 0200 	mov.w	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
		gyros_fltrs[idx].U_n 		= 0.0f;
 8001540:	4a25      	ldr	r2, [pc, #148]	@ (80015d8 <LPF_gyro_filter_init+0x108>)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	212c      	movs	r1, #44	@ 0x2c
 8001546:	fb01 f303 	mul.w	r3, r1, r3
 800154a:	4413      	add	r3, r2
 800154c:	330c      	adds	r3, #12
 800154e:	f04f 0200 	mov.w	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
		gyros_fltrs[idx].Y_n 		= 0.0f;
 8001554:	4a20      	ldr	r2, [pc, #128]	@ (80015d8 <LPF_gyro_filter_init+0x108>)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	212c      	movs	r1, #44	@ 0x2c
 800155a:	fb01 f303 	mul.w	r3, r1, r3
 800155e:	4413      	add	r3, r2
 8001560:	f04f 0200 	mov.w	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
		gyros_fltrs[idx].Y_nm1 		= 0.0f;
 8001566:	4a1c      	ldr	r2, [pc, #112]	@ (80015d8 <LPF_gyro_filter_init+0x108>)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	212c      	movs	r1, #44	@ 0x2c
 800156c:	fb01 f303 	mul.w	r3, r1, r3
 8001570:	4413      	add	r3, r2
 8001572:	3304      	adds	r3, #4
 8001574:	f04f 0200 	mov.w	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
		gyros_fltrs[idx].U_nm1 		= 0.0f;
 800157a:	4a17      	ldr	r2, [pc, #92]	@ (80015d8 <LPF_gyro_filter_init+0x108>)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	212c      	movs	r1, #44	@ 0x2c
 8001580:	fb01 f303 	mul.w	r3, r1, r3
 8001584:	4413      	add	r3, r2
 8001586:	3310      	adds	r3, #16
 8001588:	f04f 0200 	mov.w	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
		gyros_fltrs[idx].t_n 		= 0.0f;
 800158e:	4a12      	ldr	r2, [pc, #72]	@ (80015d8 <LPF_gyro_filter_init+0x108>)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	212c      	movs	r1, #44	@ 0x2c
 8001594:	fb01 f303 	mul.w	r3, r1, r3
 8001598:	4413      	add	r3, r2
 800159a:	3320      	adds	r3, #32
 800159c:	f04f 0200 	mov.w	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
		gyros_fltrs[idx].t_nm1 		= 0.0f;
 80015a2:	4a0d      	ldr	r2, [pc, #52]	@ (80015d8 <LPF_gyro_filter_init+0x108>)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	212c      	movs	r1, #44	@ 0x2c
 80015a8:	fb01 f303 	mul.w	r3, r1, r3
 80015ac:	4413      	add	r3, r2
 80015ae:	3324      	adds	r3, #36	@ 0x24
 80015b0:	f04f 0200 	mov.w	r2, #0
 80015b4:	601a      	str	r2, [r3, #0]
	for(int idx = 0;idx < 3; idx++)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	3301      	adds	r3, #1
 80015ba:	607b      	str	r3, [r7, #4]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2b02      	cmp	r3, #2
 80015c0:	dd95      	ble.n	80014ee <LPF_gyro_filter_init+0x1e>

	}

}
 80015c2:	bf00      	nop
 80015c4:	bf00      	nop
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	24000498 	.word	0x24000498
 80015d4:	42480000 	.word	0x42480000
 80015d8:	24000414 	.word	0x24000414
 80015dc:	3c23d70a 	.word	0x3c23d70a

080015e0 <refresh_actual_rates>:

void refresh_actual_rates(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
	//
	imu_gyr[0] 		= IMU.GYR.x ;
 80015e6:	4b20      	ldr	r3, [pc, #128]	@ (8001668 <refresh_actual_rates+0x88>)
 80015e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015ea:	4a20      	ldr	r2, [pc, #128]	@ (800166c <refresh_actual_rates+0x8c>)
 80015ec:	6013      	str	r3, [r2, #0]
	imu_gyr[1] 		= IMU.GYR.y ;
 80015ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001668 <refresh_actual_rates+0x88>)
 80015f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015f2:	4a1e      	ldr	r2, [pc, #120]	@ (800166c <refresh_actual_rates+0x8c>)
 80015f4:	6053      	str	r3, [r2, #4]
	imu_gyr[2] 		= IMU.GYR.z ;
 80015f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001668 <refresh_actual_rates+0x88>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fa:	4a1c      	ldr	r2, [pc, #112]	@ (800166c <refresh_actual_rates+0x8c>)
 80015fc:	6093      	str	r3, [r2, #8]

	//
	for(int idx = 0; idx < 3; idx++)
 80015fe:	2300      	movs	r3, #0
 8001600:	607b      	str	r3, [r7, #4]
 8001602:	e01b      	b.n	800163c <refresh_actual_rates+0x5c>
	{
		//
		gyros_fltrs[idx].U_n = imu_gyr[idx];
 8001604:	4a19      	ldr	r2, [pc, #100]	@ (800166c <refresh_actual_rates+0x8c>)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	4413      	add	r3, r2
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	4918      	ldr	r1, [pc, #96]	@ (8001670 <refresh_actual_rates+0x90>)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	202c      	movs	r0, #44	@ 0x2c
 8001614:	fb00 f303 	mul.w	r3, r0, r3
 8001618:	440b      	add	r3, r1
 800161a:	330c      	adds	r3, #12
 800161c:	601a      	str	r2, [r3, #0]
		// El filtro no trabaja por ejfectos de prueba
		//gyros_fltrs[idx] = filtering_lpf(&gyros_fltrs[idx]);
		gyros_fltrs[idx].Y_n = imu_gyr[idx];
 800161e:	4a13      	ldr	r2, [pc, #76]	@ (800166c <refresh_actual_rates+0x8c>)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	4413      	add	r3, r2
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	4911      	ldr	r1, [pc, #68]	@ (8001670 <refresh_actual_rates+0x90>)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	202c      	movs	r0, #44	@ 0x2c
 800162e:	fb00 f303 	mul.w	r3, r0, r3
 8001632:	440b      	add	r3, r1
 8001634:	601a      	str	r2, [r3, #0]
	for(int idx = 0; idx < 3; idx++)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	3301      	adds	r3, #1
 800163a:	607b      	str	r3, [r7, #4]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2b02      	cmp	r3, #2
 8001640:	dde0      	ble.n	8001604 <refresh_actual_rates+0x24>
	}

	actual_rates.roll  = gyros_fltrs[0].Y_n ;
 8001642:	4b0b      	ldr	r3, [pc, #44]	@ (8001670 <refresh_actual_rates+0x90>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a0b      	ldr	r2, [pc, #44]	@ (8001674 <refresh_actual_rates+0x94>)
 8001648:	6013      	str	r3, [r2, #0]
	actual_rates.pitch = gyros_fltrs[1].Y_n ;
 800164a:	4b09      	ldr	r3, [pc, #36]	@ (8001670 <refresh_actual_rates+0x90>)
 800164c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800164e:	4a09      	ldr	r2, [pc, #36]	@ (8001674 <refresh_actual_rates+0x94>)
 8001650:	6053      	str	r3, [r2, #4]
	actual_rates.yaw   = gyros_fltrs[2].Y_n ;
 8001652:	4b07      	ldr	r3, [pc, #28]	@ (8001670 <refresh_actual_rates+0x90>)
 8001654:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001656:	4a07      	ldr	r2, [pc, #28]	@ (8001674 <refresh_actual_rates+0x94>)
 8001658:	6093      	str	r3, [r2, #8]
}
 800165a:	bf00      	nop
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	24001684 	.word	0x24001684
 800166c:	240004a4 	.word	0x240004a4
 8001670:	24000414 	.word	0x24000414
 8001674:	240004b0 	.word	0x240004b0

08001678 <FIX_WING_MIXER>:
#include "Flight_Management_Control/servo_mixers.h"



Servo_mgmt_s FIX_WING_MIXER(Cmd_s control_cmd, Cmd_s trims)
{
 8001678:	b4b0      	push	{r4, r5, r7}
 800167a:	b091      	sub	sp, #68	@ 0x44
 800167c:	af00      	add	r7, sp, #0
 800167e:	6278      	str	r0, [r7, #36]	@ 0x24
 8001680:	eeb0 4a40 	vmov.f32	s8, s0
 8001684:	eef0 4a60 	vmov.f32	s9, s1
 8001688:	eeb0 5a41 	vmov.f32	s10, s2
 800168c:	eef0 5a61 	vmov.f32	s11, s3
 8001690:	eeb0 6a42 	vmov.f32	s12, s4
 8001694:	eef0 6a62 	vmov.f32	s13, s5
 8001698:	eeb0 7a43 	vmov.f32	s14, s6
 800169c:	eef0 7a63 	vmov.f32	s15, s7
 80016a0:	ed87 4a05 	vstr	s8, [r7, #20]
 80016a4:	edc7 4a06 	vstr	s9, [r7, #24]
 80016a8:	ed87 5a07 	vstr	s10, [r7, #28]
 80016ac:	edc7 5a08 	vstr	s11, [r7, #32]
 80016b0:	ed87 6a01 	vstr	s12, [r7, #4]
 80016b4:	edc7 6a02 	vstr	s13, [r7, #8]
 80016b8:	ed87 7a03 	vstr	s14, [r7, #12]
 80016bc:	edc7 7a04 	vstr	s15, [r7, #16]
	//
	Servo_mgmt_s mixer_output;

	mixer_output.S[0]  = (uint16_t)(1500.0f + 500.f * control_cmd.roll  + (trims.roll  )) ;
 80016c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80016c4:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 800180c <FIX_WING_MIXER+0x194>
 80016c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016cc:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8001810 <FIX_WING_MIXER+0x198>
 80016d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80016d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80016d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016e0:	ee17 3a90 	vmov	r3, s15
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	mixer_output.S[1]  = (uint16_t)(1500.0f + 500.f * control_cmd.roll  + (trims.roll  )) ;
 80016e8:	edd7 7a05 	vldr	s15, [r7, #20]
 80016ec:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 800180c <FIX_WING_MIXER+0x194>
 80016f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016f4:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8001810 <FIX_WING_MIXER+0x198>
 80016f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80016fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001700:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001704:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001708:	ee17 3a90 	vmov	r3, s15
 800170c:	b29b      	uxth	r3, r3
 800170e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	mixer_output.S[2]  = (uint16_t)(1500.0f + 500.f * control_cmd.pitch + (trims.pitch )) ;
 8001710:	edd7 7a06 	vldr	s15, [r7, #24]
 8001714:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 800180c <FIX_WING_MIXER+0x194>
 8001718:	ee67 7a87 	vmul.f32	s15, s15, s14
 800171c:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8001810 <FIX_WING_MIXER+0x198>
 8001720:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001724:	edd7 7a02 	vldr	s15, [r7, #8]
 8001728:	ee77 7a27 	vadd.f32	s15, s14, s15
 800172c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001730:	ee17 3a90 	vmov	r3, s15
 8001734:	b29b      	uxth	r3, r3
 8001736:	863b      	strh	r3, [r7, #48]	@ 0x30
	mixer_output.S[3]  = (uint16_t)(1500.0f + 500.f * control_cmd.pitch + (trims.pitch )) ;
 8001738:	edd7 7a06 	vldr	s15, [r7, #24]
 800173c:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800180c <FIX_WING_MIXER+0x194>
 8001740:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001744:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8001810 <FIX_WING_MIXER+0x198>
 8001748:	ee37 7a87 	vadd.f32	s14, s15, s14
 800174c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001750:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001754:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001758:	ee17 3a90 	vmov	r3, s15
 800175c:	b29b      	uxth	r3, r3
 800175e:	867b      	strh	r3, [r7, #50]	@ 0x32
	mixer_output.S[4]  = (uint16_t)(1500.0f + 500.f * control_cmd.yaw   + (trims.yaw   )) ;
 8001760:	edd7 7a07 	vldr	s15, [r7, #28]
 8001764:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 800180c <FIX_WING_MIXER+0x194>
 8001768:	ee67 7a87 	vmul.f32	s15, s15, s14
 800176c:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8001810 <FIX_WING_MIXER+0x198>
 8001770:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001774:	edd7 7a03 	vldr	s15, [r7, #12]
 8001778:	ee77 7a27 	vadd.f32	s15, s14, s15
 800177c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001780:	ee17 3a90 	vmov	r3, s15
 8001784:	b29b      	uxth	r3, r3
 8001786:	86bb      	strh	r3, [r7, #52]	@ 0x34
	mixer_output.S[5]  = (uint16_t)(1500.0f + 500.f * control_cmd.yaw   + (trims.yaw   )) ;
 8001788:	edd7 7a07 	vldr	s15, [r7, #28]
 800178c:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800180c <FIX_WING_MIXER+0x194>
 8001790:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001794:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8001810 <FIX_WING_MIXER+0x198>
 8001798:	ee37 7a87 	vadd.f32	s14, s15, s14
 800179c:	edd7 7a03 	vldr	s15, [r7, #12]
 80017a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017a8:	ee17 3a90 	vmov	r3, s15
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	86fb      	strh	r3, [r7, #54]	@ 0x36
	mixer_output.S[6]  = (uint16_t)(1000.0f + 500.f * control_cmd.thrust+ (trims.thrust)) ;
 80017b0:	edd7 7a08 	vldr	s15, [r7, #32]
 80017b4:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 800180c <FIX_WING_MIXER+0x194>
 80017b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017bc:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8001814 <FIX_WING_MIXER+0x19c>
 80017c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80017c4:	edd7 7a04 	vldr	s15, [r7, #16]
 80017c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017d0:	ee17 3a90 	vmov	r3, s15
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	873b      	strh	r3, [r7, #56]	@ 0x38
	mixer_output.S[7]  = (uint16_t)(1500.0f );
 80017d8:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80017dc:	877b      	strh	r3, [r7, #58]	@ 0x3a
	mixer_output.S[8]  = (uint16_t)(1500.0f );
 80017de:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80017e2:	87bb      	strh	r3, [r7, #60]	@ 0x3c
	mixer_output.S[9]  = (uint16_t)(1500.0f );
 80017e4:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80017e8:	87fb      	strh	r3, [r7, #62]	@ 0x3e

	return mixer_output;
 80017ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ec:	461d      	mov	r5, r3
 80017ee:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 80017f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017f4:	6028      	str	r0, [r5, #0]
 80017f6:	6069      	str	r1, [r5, #4]
 80017f8:	60aa      	str	r2, [r5, #8]
 80017fa:	60eb      	str	r3, [r5, #12]
 80017fc:	6820      	ldr	r0, [r4, #0]
 80017fe:	6128      	str	r0, [r5, #16]
}
 8001800:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001802:	3744      	adds	r7, #68	@ 0x44
 8001804:	46bd      	mov	sp, r7
 8001806:	bcb0      	pop	{r4, r5, r7}
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	43fa0000 	.word	0x43fa0000
 8001810:	44bb8000 	.word	0x44bb8000
 8001814:	447a0000 	.word	0x447a0000

08001818 <FLYING_WING_MIXER>:

Servo_mgmt_s FLYING_WING_MIXER(Cmd_s control_cmd, Cmd_s trims)
{
 8001818:	b4b0      	push	{r4, r5, r7}
 800181a:	b091      	sub	sp, #68	@ 0x44
 800181c:	af00      	add	r7, sp, #0
 800181e:	6278      	str	r0, [r7, #36]	@ 0x24
 8001820:	eeb0 4a40 	vmov.f32	s8, s0
 8001824:	eef0 4a60 	vmov.f32	s9, s1
 8001828:	eeb0 5a41 	vmov.f32	s10, s2
 800182c:	eef0 5a61 	vmov.f32	s11, s3
 8001830:	eeb0 6a42 	vmov.f32	s12, s4
 8001834:	eef0 6a62 	vmov.f32	s13, s5
 8001838:	eeb0 7a43 	vmov.f32	s14, s6
 800183c:	eef0 7a63 	vmov.f32	s15, s7
 8001840:	ed87 4a05 	vstr	s8, [r7, #20]
 8001844:	edc7 4a06 	vstr	s9, [r7, #24]
 8001848:	ed87 5a07 	vstr	s10, [r7, #28]
 800184c:	edc7 5a08 	vstr	s11, [r7, #32]
 8001850:	ed87 6a01 	vstr	s12, [r7, #4]
 8001854:	edc7 6a02 	vstr	s13, [r7, #8]
 8001858:	ed87 7a03 	vstr	s14, [r7, #12]
 800185c:	edc7 7a04 	vstr	s15, [r7, #16]
	//
	Servo_mgmt_s mixer_output;

	mixer_output.S[0]  = (uint16_t)(1500.0f + 500.f * control_cmd.roll  + (1500 - trims.roll  )) ;
 8001860:	edd7 7a05 	vldr	s15, [r7, #20]
 8001864:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 80019e4 <FLYING_WING_MIXER+0x1cc>
 8001868:	ee67 7a87 	vmul.f32	s15, s15, s14
 800186c:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 80019e8 <FLYING_WING_MIXER+0x1d0>
 8001870:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001874:	edd7 7a01 	vldr	s15, [r7, #4]
 8001878:	eddf 6a5b 	vldr	s13, [pc, #364]	@ 80019e8 <FLYING_WING_MIXER+0x1d0>
 800187c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001880:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001884:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001888:	ee17 3a90 	vmov	r3, s15
 800188c:	b29b      	uxth	r3, r3
 800188e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	mixer_output.S[1]  = (uint16_t)(1500.0f + 500.f * control_cmd.roll  + (1500 - trims.roll  )) ;
 8001890:	edd7 7a05 	vldr	s15, [r7, #20]
 8001894:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 80019e4 <FLYING_WING_MIXER+0x1cc>
 8001898:	ee67 7a87 	vmul.f32	s15, s15, s14
 800189c:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 80019e8 <FLYING_WING_MIXER+0x1d0>
 80018a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80018a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80018a8:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80019e8 <FLYING_WING_MIXER+0x1d0>
 80018ac:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80018b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018b8:	ee17 3a90 	vmov	r3, s15
 80018bc:	b29b      	uxth	r3, r3
 80018be:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	mixer_output.S[2]  = (uint16_t)(1500.0f + 500.f * control_cmd.pitch + (1500 - trims.pitch )) ;
 80018c0:	edd7 7a06 	vldr	s15, [r7, #24]
 80018c4:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 80019e4 <FLYING_WING_MIXER+0x1cc>
 80018c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018cc:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 80019e8 <FLYING_WING_MIXER+0x1d0>
 80018d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80018d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80018d8:	eddf 6a43 	vldr	s13, [pc, #268]	@ 80019e8 <FLYING_WING_MIXER+0x1d0>
 80018dc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80018e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018e8:	ee17 3a90 	vmov	r3, s15
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	863b      	strh	r3, [r7, #48]	@ 0x30
	mixer_output.S[3]  = (uint16_t)(1500.0f + 500.f * control_cmd.pitch + (1500 - trims.pitch )) ;
 80018f0:	edd7 7a06 	vldr	s15, [r7, #24]
 80018f4:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 80019e4 <FLYING_WING_MIXER+0x1cc>
 80018f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018fc:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 80019e8 <FLYING_WING_MIXER+0x1d0>
 8001900:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001904:	edd7 7a02 	vldr	s15, [r7, #8]
 8001908:	eddf 6a37 	vldr	s13, [pc, #220]	@ 80019e8 <FLYING_WING_MIXER+0x1d0>
 800190c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001910:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001914:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001918:	ee17 3a90 	vmov	r3, s15
 800191c:	b29b      	uxth	r3, r3
 800191e:	867b      	strh	r3, [r7, #50]	@ 0x32
	mixer_output.S[4]  = (uint16_t)(1500.0f + 500.f * control_cmd.yaw   + (1500 - trims.yaw   )) ;
 8001920:	edd7 7a07 	vldr	s15, [r7, #28]
 8001924:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80019e4 <FLYING_WING_MIXER+0x1cc>
 8001928:	ee67 7a87 	vmul.f32	s15, s15, s14
 800192c:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 80019e8 <FLYING_WING_MIXER+0x1d0>
 8001930:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001934:	edd7 7a03 	vldr	s15, [r7, #12]
 8001938:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 80019e8 <FLYING_WING_MIXER+0x1d0>
 800193c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001940:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001944:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001948:	ee17 3a90 	vmov	r3, s15
 800194c:	b29b      	uxth	r3, r3
 800194e:	86bb      	strh	r3, [r7, #52]	@ 0x34
	mixer_output.S[5]  = (uint16_t)(1500.0f + 500.f * control_cmd.yaw   + (1500 - trims.yaw   )) ;
 8001950:	edd7 7a07 	vldr	s15, [r7, #28]
 8001954:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 80019e4 <FLYING_WING_MIXER+0x1cc>
 8001958:	ee67 7a87 	vmul.f32	s15, s15, s14
 800195c:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80019e8 <FLYING_WING_MIXER+0x1d0>
 8001960:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001964:	edd7 7a03 	vldr	s15, [r7, #12]
 8001968:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 80019e8 <FLYING_WING_MIXER+0x1d0>
 800196c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001970:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001974:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001978:	ee17 3a90 	vmov	r3, s15
 800197c:	b29b      	uxth	r3, r3
 800197e:	86fb      	strh	r3, [r7, #54]	@ 0x36
	mixer_output.S[6]  = (uint16_t)(1000.0f + 500.f * control_cmd.thrust+ (1500 - trims.thrust)) ;
 8001980:	edd7 7a08 	vldr	s15, [r7, #32]
 8001984:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80019e4 <FLYING_WING_MIXER+0x1cc>
 8001988:	ee67 7a87 	vmul.f32	s15, s15, s14
 800198c:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80019ec <FLYING_WING_MIXER+0x1d4>
 8001990:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001994:	edd7 7a04 	vldr	s15, [r7, #16]
 8001998:	eddf 6a13 	vldr	s13, [pc, #76]	@ 80019e8 <FLYING_WING_MIXER+0x1d0>
 800199c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80019a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019a8:	ee17 3a90 	vmov	r3, s15
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	873b      	strh	r3, [r7, #56]	@ 0x38
	mixer_output.S[7]  = (uint16_t)(1500.0f );
 80019b0:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80019b4:	877b      	strh	r3, [r7, #58]	@ 0x3a
	mixer_output.S[8]  = (uint16_t)(1500.0f );
 80019b6:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80019ba:	87bb      	strh	r3, [r7, #60]	@ 0x3c
	mixer_output.S[9]  = (uint16_t)(1500.0f );
 80019bc:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80019c0:	87fb      	strh	r3, [r7, #62]	@ 0x3e

	return mixer_output;
 80019c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c4:	461d      	mov	r5, r3
 80019c6:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 80019ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019cc:	6028      	str	r0, [r5, #0]
 80019ce:	6069      	str	r1, [r5, #4]
 80019d0:	60aa      	str	r2, [r5, #8]
 80019d2:	60eb      	str	r3, [r5, #12]
 80019d4:	6820      	ldr	r0, [r4, #0]
 80019d6:	6128      	str	r0, [r5, #16]
}
 80019d8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80019da:	3744      	adds	r7, #68	@ 0x44
 80019dc:	46bd      	mov	sp, r7
 80019de:	bcb0      	pop	{r4, r5, r7}
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	43fa0000 	.word	0x43fa0000
 80019e8:	44bb8000 	.word	0x44bb8000
 80019ec:	447a0000 	.word	0x447a0000

080019f0 <TANDEM_WING_MIXER>:

Servo_mgmt_s TANDEM_WING_MIXER(Cmd_s control_cmd, Cmd_s trims)
{
 80019f0:	b4b0      	push	{r4, r5, r7}
 80019f2:	b091      	sub	sp, #68	@ 0x44
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6278      	str	r0, [r7, #36]	@ 0x24
 80019f8:	eeb0 4a40 	vmov.f32	s8, s0
 80019fc:	eef0 4a60 	vmov.f32	s9, s1
 8001a00:	eeb0 5a41 	vmov.f32	s10, s2
 8001a04:	eef0 5a61 	vmov.f32	s11, s3
 8001a08:	eeb0 6a42 	vmov.f32	s12, s4
 8001a0c:	eef0 6a62 	vmov.f32	s13, s5
 8001a10:	eeb0 7a43 	vmov.f32	s14, s6
 8001a14:	eef0 7a63 	vmov.f32	s15, s7
 8001a18:	ed87 4a05 	vstr	s8, [r7, #20]
 8001a1c:	edc7 4a06 	vstr	s9, [r7, #24]
 8001a20:	ed87 5a07 	vstr	s10, [r7, #28]
 8001a24:	edc7 5a08 	vstr	s11, [r7, #32]
 8001a28:	ed87 6a01 	vstr	s12, [r7, #4]
 8001a2c:	edc7 6a02 	vstr	s13, [r7, #8]
 8001a30:	ed87 7a03 	vstr	s14, [r7, #12]
 8001a34:	edc7 7a04 	vstr	s15, [r7, #16]
	//
	Servo_mgmt_s mixer_output;

	mixer_output.S[0]  = (uint16_t)(1500.0f + 500.f * control_cmd.roll  + (1500 - trims.roll  )) ;
 8001a38:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a3c:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 8001bbc <TANDEM_WING_MIXER+0x1cc>
 8001a40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a44:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8001bc0 <TANDEM_WING_MIXER+0x1d0>
 8001a48:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001a4c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a50:	eddf 6a5b 	vldr	s13, [pc, #364]	@ 8001bc0 <TANDEM_WING_MIXER+0x1d0>
 8001a54:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001a58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a60:	ee17 3a90 	vmov	r3, s15
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	mixer_output.S[1]  = (uint16_t)(1500.0f + 500.f * control_cmd.roll  + (1500 - trims.roll  )) ;
 8001a68:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a6c:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8001bbc <TANDEM_WING_MIXER+0x1cc>
 8001a70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a74:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001bc0 <TANDEM_WING_MIXER+0x1d0>
 8001a78:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001a7c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a80:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8001bc0 <TANDEM_WING_MIXER+0x1d0>
 8001a84:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001a88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a90:	ee17 3a90 	vmov	r3, s15
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	mixer_output.S[2]  = (uint16_t)(1500.0f + 500.f * control_cmd.pitch + (1500 - trims.pitch )) ;
 8001a98:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a9c:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001bbc <TANDEM_WING_MIXER+0x1cc>
 8001aa0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001aa4:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8001bc0 <TANDEM_WING_MIXER+0x1d0>
 8001aa8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001aac:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ab0:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8001bc0 <TANDEM_WING_MIXER+0x1d0>
 8001ab4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001ab8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001abc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ac0:	ee17 3a90 	vmov	r3, s15
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	863b      	strh	r3, [r7, #48]	@ 0x30
	mixer_output.S[3]  = (uint16_t)(1500.0f + 500.f * control_cmd.pitch + (1500 - trims.pitch )) ;
 8001ac8:	edd7 7a06 	vldr	s15, [r7, #24]
 8001acc:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8001bbc <TANDEM_WING_MIXER+0x1cc>
 8001ad0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ad4:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8001bc0 <TANDEM_WING_MIXER+0x1d0>
 8001ad8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001adc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ae0:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8001bc0 <TANDEM_WING_MIXER+0x1d0>
 8001ae4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001ae8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001af0:	ee17 3a90 	vmov	r3, s15
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	867b      	strh	r3, [r7, #50]	@ 0x32
	mixer_output.S[4]  = (uint16_t)(1500.0f + 500.f * control_cmd.yaw   + (1500 - trims.yaw   )) ;
 8001af8:	edd7 7a07 	vldr	s15, [r7, #28]
 8001afc:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8001bbc <TANDEM_WING_MIXER+0x1cc>
 8001b00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b04:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8001bc0 <TANDEM_WING_MIXER+0x1d0>
 8001b08:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001b0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b10:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8001bc0 <TANDEM_WING_MIXER+0x1d0>
 8001b14:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001b18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b20:	ee17 3a90 	vmov	r3, s15
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	86bb      	strh	r3, [r7, #52]	@ 0x34
	mixer_output.S[5]  = (uint16_t)(1500.0f + 500.f * control_cmd.yaw   + (1500 - trims.yaw   )) ;
 8001b28:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b2c:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8001bbc <TANDEM_WING_MIXER+0x1cc>
 8001b30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b34:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001bc0 <TANDEM_WING_MIXER+0x1d0>
 8001b38:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001b3c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b40:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8001bc0 <TANDEM_WING_MIXER+0x1d0>
 8001b44:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001b48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b50:	ee17 3a90 	vmov	r3, s15
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	86fb      	strh	r3, [r7, #54]	@ 0x36
	mixer_output.S[6]  = (uint16_t)(1000.0f + 500.f * control_cmd.thrust+ (1500 - trims.thrust)) ;
 8001b58:	edd7 7a08 	vldr	s15, [r7, #32]
 8001b5c:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001bbc <TANDEM_WING_MIXER+0x1cc>
 8001b60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b64:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001bc4 <TANDEM_WING_MIXER+0x1d4>
 8001b68:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001b6c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b70:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8001bc0 <TANDEM_WING_MIXER+0x1d0>
 8001b74:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001b78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b80:	ee17 3a90 	vmov	r3, s15
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	873b      	strh	r3, [r7, #56]	@ 0x38
	mixer_output.S[7]  = (uint16_t)(1500.0f );
 8001b88:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8001b8c:	877b      	strh	r3, [r7, #58]	@ 0x3a
	mixer_output.S[8]  = (uint16_t)(1500.0f );
 8001b8e:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8001b92:	87bb      	strh	r3, [r7, #60]	@ 0x3c
	mixer_output.S[9]  = (uint16_t)(1500.0f );
 8001b94:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8001b98:	87fb      	strh	r3, [r7, #62]	@ 0x3e

	return mixer_output;
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b9c:	461d      	mov	r5, r3
 8001b9e:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8001ba2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ba4:	6028      	str	r0, [r5, #0]
 8001ba6:	6069      	str	r1, [r5, #4]
 8001ba8:	60aa      	str	r2, [r5, #8]
 8001baa:	60eb      	str	r3, [r5, #12]
 8001bac:	6820      	ldr	r0, [r4, #0]
 8001bae:	6128      	str	r0, [r5, #16]
}
 8001bb0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001bb2:	3744      	adds	r7, #68	@ 0x44
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bcb0      	pop	{r4, r5, r7}
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	43fa0000 	.word	0x43fa0000
 8001bc0:	44bb8000 	.word	0x44bb8000
 8001bc4:	447a0000 	.word	0x447a0000

08001bc8 <CUSTOM_FRAME_MIXER>:

Servo_mgmt_s CUSTOM_FRAME_MIXER(Cmd_s control_cmd, Cmd_s trims)
{
 8001bc8:	b4b0      	push	{r4, r5, r7}
 8001bca:	b091      	sub	sp, #68	@ 0x44
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6278      	str	r0, [r7, #36]	@ 0x24
 8001bd0:	eeb0 4a40 	vmov.f32	s8, s0
 8001bd4:	eef0 4a60 	vmov.f32	s9, s1
 8001bd8:	eeb0 5a41 	vmov.f32	s10, s2
 8001bdc:	eef0 5a61 	vmov.f32	s11, s3
 8001be0:	eeb0 6a42 	vmov.f32	s12, s4
 8001be4:	eef0 6a62 	vmov.f32	s13, s5
 8001be8:	eeb0 7a43 	vmov.f32	s14, s6
 8001bec:	eef0 7a63 	vmov.f32	s15, s7
 8001bf0:	ed87 4a05 	vstr	s8, [r7, #20]
 8001bf4:	edc7 4a06 	vstr	s9, [r7, #24]
 8001bf8:	ed87 5a07 	vstr	s10, [r7, #28]
 8001bfc:	edc7 5a08 	vstr	s11, [r7, #32]
 8001c00:	ed87 6a01 	vstr	s12, [r7, #4]
 8001c04:	edc7 6a02 	vstr	s13, [r7, #8]
 8001c08:	ed87 7a03 	vstr	s14, [r7, #12]
 8001c0c:	edc7 7a04 	vstr	s15, [r7, #16]
	//
	Servo_mgmt_s mixer_output;

	mixer_output.S[0]  = (uint16_t)(1500.0f + 500.f * control_cmd.roll  + (1500 - trims.roll  )) ;
 8001c10:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c14:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 8001d94 <CUSTOM_FRAME_MIXER+0x1cc>
 8001c18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c1c:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8001d98 <CUSTOM_FRAME_MIXER+0x1d0>
 8001c20:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001c24:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c28:	eddf 6a5b 	vldr	s13, [pc, #364]	@ 8001d98 <CUSTOM_FRAME_MIXER+0x1d0>
 8001c2c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001c30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c38:	ee17 3a90 	vmov	r3, s15
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	mixer_output.S[1]  = (uint16_t)(1500.0f + 500.f * control_cmd.roll  + (1500 - trims.roll  )) ;
 8001c40:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c44:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8001d94 <CUSTOM_FRAME_MIXER+0x1cc>
 8001c48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c4c:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001d98 <CUSTOM_FRAME_MIXER+0x1d0>
 8001c50:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001c54:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c58:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8001d98 <CUSTOM_FRAME_MIXER+0x1d0>
 8001c5c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001c60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c68:	ee17 3a90 	vmov	r3, s15
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	mixer_output.S[2]  = (uint16_t)(1500.0f + 500.f * control_cmd.pitch + (1500 - trims.pitch )) ;
 8001c70:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c74:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001d94 <CUSTOM_FRAME_MIXER+0x1cc>
 8001c78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c7c:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8001d98 <CUSTOM_FRAME_MIXER+0x1d0>
 8001c80:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001c84:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c88:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8001d98 <CUSTOM_FRAME_MIXER+0x1d0>
 8001c8c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001c90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c98:	ee17 3a90 	vmov	r3, s15
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	863b      	strh	r3, [r7, #48]	@ 0x30
	mixer_output.S[3]  = (uint16_t)(1500.0f + 500.f * control_cmd.pitch + (1500 - trims.pitch )) ;
 8001ca0:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ca4:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8001d94 <CUSTOM_FRAME_MIXER+0x1cc>
 8001ca8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cac:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8001d98 <CUSTOM_FRAME_MIXER+0x1d0>
 8001cb0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001cb4:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cb8:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8001d98 <CUSTOM_FRAME_MIXER+0x1d0>
 8001cbc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001cc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cc8:	ee17 3a90 	vmov	r3, s15
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	867b      	strh	r3, [r7, #50]	@ 0x32
	mixer_output.S[4]  = (uint16_t)(1500.0f + 500.f * control_cmd.yaw   + (1500 - trims.yaw   )) ;
 8001cd0:	edd7 7a07 	vldr	s15, [r7, #28]
 8001cd4:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8001d94 <CUSTOM_FRAME_MIXER+0x1cc>
 8001cd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cdc:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8001d98 <CUSTOM_FRAME_MIXER+0x1d0>
 8001ce0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001ce4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ce8:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8001d98 <CUSTOM_FRAME_MIXER+0x1d0>
 8001cec:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001cf0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cf8:	ee17 3a90 	vmov	r3, s15
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	86bb      	strh	r3, [r7, #52]	@ 0x34
	mixer_output.S[5]  = (uint16_t)(1500.0f + 500.f * control_cmd.yaw   + (1500 - trims.yaw   )) ;
 8001d00:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d04:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8001d94 <CUSTOM_FRAME_MIXER+0x1cc>
 8001d08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d0c:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001d98 <CUSTOM_FRAME_MIXER+0x1d0>
 8001d10:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001d14:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d18:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8001d98 <CUSTOM_FRAME_MIXER+0x1d0>
 8001d1c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001d20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d28:	ee17 3a90 	vmov	r3, s15
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	86fb      	strh	r3, [r7, #54]	@ 0x36
	mixer_output.S[6]  = (uint16_t)(1000.0f + 500.f * control_cmd.thrust+ (1500 - trims.thrust)) ;
 8001d30:	edd7 7a08 	vldr	s15, [r7, #32]
 8001d34:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001d94 <CUSTOM_FRAME_MIXER+0x1cc>
 8001d38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d3c:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001d9c <CUSTOM_FRAME_MIXER+0x1d4>
 8001d40:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001d44:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d48:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8001d98 <CUSTOM_FRAME_MIXER+0x1d0>
 8001d4c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001d50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d58:	ee17 3a90 	vmov	r3, s15
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	873b      	strh	r3, [r7, #56]	@ 0x38
	mixer_output.S[7]  = (uint16_t)(1500.0f );
 8001d60:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8001d64:	877b      	strh	r3, [r7, #58]	@ 0x3a
	mixer_output.S[8]  = (uint16_t)(1500.0f );
 8001d66:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8001d6a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
	mixer_output.S[9]  = (uint16_t)(1500.0f );
 8001d6c:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8001d70:	87fb      	strh	r3, [r7, #62]	@ 0x3e

	return mixer_output;
 8001d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d74:	461d      	mov	r5, r3
 8001d76:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8001d7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d7c:	6028      	str	r0, [r5, #0]
 8001d7e:	6069      	str	r1, [r5, #4]
 8001d80:	60aa      	str	r2, [r5, #8]
 8001d82:	60eb      	str	r3, [r5, #12]
 8001d84:	6820      	ldr	r0, [r4, #0]
 8001d86:	6128      	str	r0, [r5, #16]
}
 8001d88:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001d8a:	3744      	adds	r7, #68	@ 0x44
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bcb0      	pop	{r4, r5, r7}
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	43fa0000 	.word	0x43fa0000
 8001d98:	44bb8000 	.word	0x44bb8000
 8001d9c:	447a0000 	.word	0x447a0000

08001da0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001da6:	4b15      	ldr	r3, [pc, #84]	@ (8001dfc <MX_DMA_Init+0x5c>)
 8001da8:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8001dac:	4a13      	ldr	r2, [pc, #76]	@ (8001dfc <MX_DMA_Init+0x5c>)
 8001dae:	f043 0301 	orr.w	r3, r3, #1
 8001db2:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8001db6:	4b11      	ldr	r3, [pc, #68]	@ (8001dfc <MX_DMA_Init+0x5c>)
 8001db8:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8001dbc:	f003 0301 	and.w	r3, r3, #1
 8001dc0:	607b      	str	r3, [r7, #4]
 8001dc2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	2105      	movs	r1, #5
 8001dc8:	200b      	movs	r0, #11
 8001dca:	f004 fec1 	bl	8006b50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001dce:	200b      	movs	r0, #11
 8001dd0:	f004 fed8 	bl	8006b84 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	2105      	movs	r1, #5
 8001dd8:	200c      	movs	r0, #12
 8001dda:	f004 feb9 	bl	8006b50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001dde:	200c      	movs	r0, #12
 8001de0:	f004 fed0 	bl	8006b84 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001de4:	2200      	movs	r2, #0
 8001de6:	2105      	movs	r1, #5
 8001de8:	200d      	movs	r0, #13
 8001dea:	f004 feb1 	bl	8006b50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001dee:	200d      	movs	r0, #13
 8001df0:	f004 fec8 	bl	8006b84 <HAL_NVIC_EnableIRQ>

}
 8001df4:	bf00      	nop
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	58024400 	.word	0x58024400

08001e00 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001e04:	4b2e      	ldr	r3, [pc, #184]	@ (8001ec0 <MX_FDCAN1_Init+0xc0>)
 8001e06:	4a2f      	ldr	r2, [pc, #188]	@ (8001ec4 <MX_FDCAN1_Init+0xc4>)
 8001e08:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001e0a:	4b2d      	ldr	r3, [pc, #180]	@ (8001ec0 <MX_FDCAN1_Init+0xc0>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001e10:	4b2b      	ldr	r3, [pc, #172]	@ (8001ec0 <MX_FDCAN1_Init+0xc0>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001e16:	4b2a      	ldr	r3, [pc, #168]	@ (8001ec0 <MX_FDCAN1_Init+0xc0>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001e1c:	4b28      	ldr	r3, [pc, #160]	@ (8001ec0 <MX_FDCAN1_Init+0xc0>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001e22:	4b27      	ldr	r3, [pc, #156]	@ (8001ec0 <MX_FDCAN1_Init+0xc0>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8001e28:	4b25      	ldr	r3, [pc, #148]	@ (8001ec0 <MX_FDCAN1_Init+0xc0>)
 8001e2a:	2210      	movs	r2, #16
 8001e2c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001e2e:	4b24      	ldr	r3, [pc, #144]	@ (8001ec0 <MX_FDCAN1_Init+0xc0>)
 8001e30:	2201      	movs	r2, #1
 8001e32:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8001e34:	4b22      	ldr	r3, [pc, #136]	@ (8001ec0 <MX_FDCAN1_Init+0xc0>)
 8001e36:	2202      	movs	r2, #2
 8001e38:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001e3a:	4b21      	ldr	r3, [pc, #132]	@ (8001ec0 <MX_FDCAN1_Init+0xc0>)
 8001e3c:	2202      	movs	r2, #2
 8001e3e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001e40:	4b1f      	ldr	r3, [pc, #124]	@ (8001ec0 <MX_FDCAN1_Init+0xc0>)
 8001e42:	2201      	movs	r2, #1
 8001e44:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001e46:	4b1e      	ldr	r3, [pc, #120]	@ (8001ec0 <MX_FDCAN1_Init+0xc0>)
 8001e48:	2201      	movs	r2, #1
 8001e4a:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001e4c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ec0 <MX_FDCAN1_Init+0xc0>)
 8001e4e:	2201      	movs	r2, #1
 8001e50:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001e52:	4b1b      	ldr	r3, [pc, #108]	@ (8001ec0 <MX_FDCAN1_Init+0xc0>)
 8001e54:	2201      	movs	r2, #1
 8001e56:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8001e58:	4b19      	ldr	r3, [pc, #100]	@ (8001ec0 <MX_FDCAN1_Init+0xc0>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8001e5e:	4b18      	ldr	r3, [pc, #96]	@ (8001ec0 <MX_FDCAN1_Init+0xc0>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001e64:	4b16      	ldr	r3, [pc, #88]	@ (8001ec0 <MX_FDCAN1_Init+0xc0>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8001e6a:	4b15      	ldr	r3, [pc, #84]	@ (8001ec0 <MX_FDCAN1_Init+0xc0>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001e70:	4b13      	ldr	r3, [pc, #76]	@ (8001ec0 <MX_FDCAN1_Init+0xc0>)
 8001e72:	2204      	movs	r2, #4
 8001e74:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8001e76:	4b12      	ldr	r3, [pc, #72]	@ (8001ec0 <MX_FDCAN1_Init+0xc0>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001e7c:	4b10      	ldr	r3, [pc, #64]	@ (8001ec0 <MX_FDCAN1_Init+0xc0>)
 8001e7e:	2204      	movs	r2, #4
 8001e80:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8001e82:	4b0f      	ldr	r3, [pc, #60]	@ (8001ec0 <MX_FDCAN1_Init+0xc0>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001e88:	4b0d      	ldr	r3, [pc, #52]	@ (8001ec0 <MX_FDCAN1_Init+0xc0>)
 8001e8a:	2204      	movs	r2, #4
 8001e8c:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8001e8e:	4b0c      	ldr	r3, [pc, #48]	@ (8001ec0 <MX_FDCAN1_Init+0xc0>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8001e94:	4b0a      	ldr	r3, [pc, #40]	@ (8001ec0 <MX_FDCAN1_Init+0xc0>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8001e9a:	4b09      	ldr	r3, [pc, #36]	@ (8001ec0 <MX_FDCAN1_Init+0xc0>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001ea0:	4b07      	ldr	r3, [pc, #28]	@ (8001ec0 <MX_FDCAN1_Init+0xc0>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001ea6:	4b06      	ldr	r3, [pc, #24]	@ (8001ec0 <MX_FDCAN1_Init+0xc0>)
 8001ea8:	2204      	movs	r2, #4
 8001eaa:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001eac:	4804      	ldr	r0, [pc, #16]	@ (8001ec0 <MX_FDCAN1_Init+0xc0>)
 8001eae:	f007 fdd9 	bl	8009a64 <HAL_FDCAN_Init>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8001eb8:	f001 f9f6 	bl	80032a8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001ebc:	bf00      	nop
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	240004bc 	.word	0x240004bc
 8001ec4:	4000a000 	.word	0x4000a000

08001ec8 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b0ba      	sub	sp, #232	@ 0xe8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	605a      	str	r2, [r3, #4]
 8001eda:	609a      	str	r2, [r3, #8]
 8001edc:	60da      	str	r2, [r3, #12]
 8001ede:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ee0:	f107 0310 	add.w	r3, r7, #16
 8001ee4:	22c0      	movs	r2, #192	@ 0xc0
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f015 ff44 	bl	8017d76 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a2f      	ldr	r2, [pc, #188]	@ (8001fb0 <HAL_FDCAN_MspInit+0xe8>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d157      	bne.n	8001fa8 <HAL_FDCAN_MspInit+0xe0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001ef8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001efc:	f04f 0300 	mov.w	r3, #0
 8001f00:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001f04:	2304      	movs	r3, #4
 8001f06:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 8;
 8001f08:	2308      	movs	r3, #8
 8001f0a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 1;
 8001f10:	2301      	movs	r3, #1
 8001f12:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001f14:	2302      	movs	r3, #2
 8001f16:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001f18:	23c0      	movs	r3, #192	@ 0xc0
 8001f1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001f20:	2300      	movs	r3, #0
 8001f22:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 8001f24:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001f28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f2c:	f107 0310 	add.w	r3, r7, #16
 8001f30:	4618      	mov	r0, r3
 8001f32:	f009 fc33 	bl	800b79c <HAL_RCCEx_PeriphCLKConfig>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <HAL_FDCAN_MspInit+0x78>
    {
      Error_Handler();
 8001f3c:	f001 f9b4 	bl	80032a8 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001f40:	4b1c      	ldr	r3, [pc, #112]	@ (8001fb4 <HAL_FDCAN_MspInit+0xec>)
 8001f42:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8001f46:	4a1b      	ldr	r2, [pc, #108]	@ (8001fb4 <HAL_FDCAN_MspInit+0xec>)
 8001f48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f4c:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
 8001f50:	4b18      	ldr	r3, [pc, #96]	@ (8001fb4 <HAL_FDCAN_MspInit+0xec>)
 8001f52:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8001f56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f5a:	60fb      	str	r3, [r7, #12]
 8001f5c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f5e:	4b15      	ldr	r3, [pc, #84]	@ (8001fb4 <HAL_FDCAN_MspInit+0xec>)
 8001f60:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001f64:	4a13      	ldr	r2, [pc, #76]	@ (8001fb4 <HAL_FDCAN_MspInit+0xec>)
 8001f66:	f043 0301 	orr.w	r3, r3, #1
 8001f6a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001f6e:	4b11      	ldr	r3, [pc, #68]	@ (8001fb4 <HAL_FDCAN_MspInit+0xec>)
 8001f70:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001f74:	f003 0301 	and.w	r3, r3, #1
 8001f78:	60bb      	str	r3, [r7, #8]
 8001f7a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001f7c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001f80:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f84:	2302      	movs	r3, #2
 8001f86:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f90:	2300      	movs	r3, #0
 8001f92:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001f96:	2309      	movs	r3, #9
 8001f98:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f9c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4805      	ldr	r0, [pc, #20]	@ (8001fb8 <HAL_FDCAN_MspInit+0xf0>)
 8001fa4:	f008 f8c2 	bl	800a12c <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8001fa8:	bf00      	nop
 8001faa:	37e8      	adds	r7, #232	@ 0xe8
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	4000a000 	.word	0x4000a000
 8001fb4:	58024400 	.word	0x58024400
 8001fb8:	58020000 	.word	0x58020000

08001fbc <filtering_lpf>:
/* Includes ------------------------------------------------------------------*/
#include "filter.h"
#include <math.h>

LPF_s filtering_lpf(LPF_s *filtro)
{
 8001fbc:	b4b0      	push	{r4, r5, r7}
 8001fbe:	b097      	sub	sp, #92	@ 0x5c
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
     *   f_cutoff -> frecuencia de corte
     *   u -> Señal de entrada
     *   y -> Señal de salida
     *   */

    LPF_s resultado = *filtro;
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	f107 040c 	add.w	r4, r7, #12
 8001fcc:	461d      	mov	r5, r3
 8001fce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fd6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001fda:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    static float y_n;

    // Validación básica de parámetros
    if(filtro->f_cutoff <= 0.0f || filtro->t_sample <= 0.0f) {
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	edd3 7a06 	vldr	s15, [r3, #24]
 8001fe4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fec:	d907      	bls.n	8001ffe <filtering_lpf+0x42>
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	edd3 7a07 	vldr	s15, [r3, #28]
 8001ff4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ffc:	d80c      	bhi.n	8002018 <filtering_lpf+0x5c>
        return resultado;  // O manejar error adecuadamente
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	461d      	mov	r5, r3
 8002002:	f107 040c 	add.w	r4, r7, #12
 8002006:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002008:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800200a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800200c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800200e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002012:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8002016:	e0c6      	b.n	80021a6 <filtering_lpf+0x1ea>
    }

    const float w_0 = filtro->f_cutoff * 6.283185307179586f; // 2*PI
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	edd3 7a06 	vldr	s15, [r3, #24]
 800201e:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 80021b0 <filtering_lpf+0x1f4>
 8002022:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002026:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    if(filtro->inicio) {
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800202e:	2b00      	cmp	r3, #0
 8002030:	d016      	beq.n	8002060 <filtering_lpf+0xa4>
        y_n = resultado.Y_n = resultado.Y_nm1 = filtro->Y_0;
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	613b      	str	r3, [r7, #16]
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	4a5d      	ldr	r2, [pc, #372]	@ (80021b4 <filtering_lpf+0x1f8>)
 8002040:	6013      	str	r3, [r2, #0]
        resultado.inicio = 0;
 8002042:	2300      	movs	r3, #0
 8002044:	637b      	str	r3, [r7, #52]	@ 0x34
        return resultado;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	461d      	mov	r5, r3
 800204a:	f107 040c 	add.w	r4, r7, #12
 800204e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002050:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002052:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002054:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002056:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800205a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800205e:	e0a2      	b.n	80021a6 <filtering_lpf+0x1ea>
    }

    const float u_n = filtro->U_n;
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	653b      	str	r3, [r7, #80]	@ 0x50
    const float h = filtro->t_sample;
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	69db      	ldr	r3, [r3, #28]
 800206a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    const float h2 = h * .50f;
 800206c:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8002070:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002074:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002078:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

    // Runge-Kutta 4to orden
    const float k1 = w_0 * (u_n - y_n);
 800207c:	4b4d      	ldr	r3, [pc, #308]	@ (80021b4 <filtering_lpf+0x1f8>)
 800207e:	edd3 7a00 	vldr	s15, [r3]
 8002082:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8002086:	ee77 7a67 	vsub.f32	s15, s14, s15
 800208a:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800208e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002092:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    const float k2 = w_0 * (u_n - (y_n + k1 * h2));
 8002096:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 800209a:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800209e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020a2:	4b44      	ldr	r3, [pc, #272]	@ (80021b4 <filtering_lpf+0x1f8>)
 80020a4:	edd3 7a00 	vldr	s15, [r3]
 80020a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020ac:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80020b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020b4:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80020b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020bc:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    const float k3 = w_0 * (u_n - (y_n + k2 * h2));
 80020c0:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80020c4:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80020c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020cc:	4b39      	ldr	r3, [pc, #228]	@ (80021b4 <filtering_lpf+0x1f8>)
 80020ce:	edd3 7a00 	vldr	s15, [r3]
 80020d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020d6:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80020da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020de:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80020e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020e6:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    const float k4 = w_0 * (u_n - (y_n + k3 * h));
 80020ea:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80020ee:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80020f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020f6:	4b2f      	ldr	r3, [pc, #188]	@ (80021b4 <filtering_lpf+0x1f8>)
 80020f8:	edd3 7a00 	vldr	s15, [r3]
 80020fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002100:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8002104:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002108:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800210c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002110:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

    y_n += h * (0.166666667f * k1 + 0.333333333f * (k2 + k3) + 0.166666667f * k4);
 8002114:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002118:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 80021b8 <filtering_lpf+0x1fc>
 800211c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002120:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 8002124:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002128:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800212c:	eddf 6a23 	vldr	s13, [pc, #140]	@ 80021bc <filtering_lpf+0x200>
 8002130:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002134:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002138:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800213c:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 80021b8 <filtering_lpf+0x1fc>
 8002140:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002144:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002148:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800214c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002150:	4b18      	ldr	r3, [pc, #96]	@ (80021b4 <filtering_lpf+0x1f8>)
 8002152:	edd3 7a00 	vldr	s15, [r3]
 8002156:	ee77 7a27 	vadd.f32	s15, s14, s15
 800215a:	4b16      	ldr	r3, [pc, #88]	@ (80021b4 <filtering_lpf+0x1f8>)
 800215c:	edc3 7a00 	vstr	s15, [r3]

    // Manejo robusto de NaN (protección contra condiciones inválidas)
    y_n = isnan(y_n) ? resultado.Y_nm1 : y_n;
 8002160:	4b14      	ldr	r3, [pc, #80]	@ (80021b4 <filtering_lpf+0x1f8>)
 8002162:	edd3 7a00 	vldr	s15, [r3]
 8002166:	eef4 7a67 	vcmp.f32	s15, s15
 800216a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800216e:	d701      	bvc.n	8002174 <filtering_lpf+0x1b8>
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	e001      	b.n	8002178 <filtering_lpf+0x1bc>
 8002174:	4b0f      	ldr	r3, [pc, #60]	@ (80021b4 <filtering_lpf+0x1f8>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a0e      	ldr	r2, [pc, #56]	@ (80021b4 <filtering_lpf+0x1f8>)
 800217a:	6013      	str	r3, [r2, #0]

    // Actualizar estructura de resultado
    resultado.Y_n = resultado.Y_nm1 = y_n;
 800217c:	4b0d      	ldr	r3, [pc, #52]	@ (80021b4 <filtering_lpf+0x1f8>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	613b      	str	r3, [r7, #16]
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	60fb      	str	r3, [r7, #12]
    resultado.U_nm1 = u_n;
 8002186:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002188:	61fb      	str	r3, [r7, #28]
    resultado.t_nm1 = resultado.t_n;
 800218a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800218c:	633b      	str	r3, [r7, #48]	@ 0x30

    return resultado;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	461d      	mov	r5, r3
 8002192:	f107 040c 	add.w	r4, r7, #12
 8002196:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002198:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800219a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800219c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800219e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80021a2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	375c      	adds	r7, #92	@ 0x5c
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bcb0      	pop	{r4, r5, r7}
 80021ae:	4770      	bx	lr
 80021b0:	40c90fdb 	.word	0x40c90fdb
 80021b4:	2400055c 	.word	0x2400055c
 80021b8:	3e2aaaab 	.word	0x3e2aaaab
 80021bc:	3eaaaaab 	.word	0x3eaaaaab

080021c0 <f>:

// Derivada dx/dt = f(x,u)
float f(float x, float u,float par) {
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	ed87 0a03 	vstr	s0, [r7, #12]
 80021ca:	edc7 0a02 	vstr	s1, [r7, #8]
 80021ce:	ed87 1a01 	vstr	s2, [r7, #4]
    return (-x * par ) + (u * par);
 80021d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80021d6:	eeb1 7a67 	vneg.f32	s14, s15
 80021da:	edd7 7a01 	vldr	s15, [r7, #4]
 80021de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021e2:	edd7 6a02 	vldr	s13, [r7, #8]
 80021e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80021ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021ee:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80021f2:	eeb0 0a67 	vmov.f32	s0, s15
 80021f6:	3714      	adds	r7, #20
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <rk4_step>:

// Paso Runge-Kutta 4
void rk4_step(FilterState *state, float u, float dt, float params) {
 8002200:	b580      	push	{r7, lr}
 8002202:	b088      	sub	sp, #32
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	ed87 0a02 	vstr	s0, [r7, #8]
 800220c:	edc7 0a01 	vstr	s1, [r7, #4]
 8002210:	ed87 1a00 	vstr	s2, [r7]
    float k1, k2, k3, k4;

    k1 = f(state->x, u,params);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	edd3 7a00 	vldr	s15, [r3]
 800221a:	ed97 1a00 	vldr	s2, [r7]
 800221e:	edd7 0a02 	vldr	s1, [r7, #8]
 8002222:	eeb0 0a67 	vmov.f32	s0, s15
 8002226:	f7ff ffcb 	bl	80021c0 <f>
 800222a:	ed87 0a07 	vstr	s0, [r7, #28]
    k2 = f(state->x + 0.5f*dt*k1, u,params);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	ed93 7a00 	vldr	s14, [r3]
 8002234:	edd7 7a01 	vldr	s15, [r7, #4]
 8002238:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800223c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002240:	edd7 7a07 	vldr	s15, [r7, #28]
 8002244:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002248:	ee77 7a27 	vadd.f32	s15, s14, s15
 800224c:	ed97 1a00 	vldr	s2, [r7]
 8002250:	edd7 0a02 	vldr	s1, [r7, #8]
 8002254:	eeb0 0a67 	vmov.f32	s0, s15
 8002258:	f7ff ffb2 	bl	80021c0 <f>
 800225c:	ed87 0a06 	vstr	s0, [r7, #24]
    k3 = f(state->x + 0.5f*dt*k2, u,params);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	ed93 7a00 	vldr	s14, [r3]
 8002266:	edd7 7a01 	vldr	s15, [r7, #4]
 800226a:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800226e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002272:	edd7 7a06 	vldr	s15, [r7, #24]
 8002276:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800227a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800227e:	ed97 1a00 	vldr	s2, [r7]
 8002282:	edd7 0a02 	vldr	s1, [r7, #8]
 8002286:	eeb0 0a67 	vmov.f32	s0, s15
 800228a:	f7ff ff99 	bl	80021c0 <f>
 800228e:	ed87 0a05 	vstr	s0, [r7, #20]
    k4 = f(state->x + dt*k3, u,params);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	ed93 7a00 	vldr	s14, [r3]
 8002298:	edd7 6a01 	vldr	s13, [r7, #4]
 800229c:	edd7 7a05 	vldr	s15, [r7, #20]
 80022a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022a8:	ed97 1a00 	vldr	s2, [r7]
 80022ac:	edd7 0a02 	vldr	s1, [r7, #8]
 80022b0:	eeb0 0a67 	vmov.f32	s0, s15
 80022b4:	f7ff ff84 	bl	80021c0 <f>
 80022b8:	ed87 0a04 	vstr	s0, [r7, #16]

    state->x += (dt/6.0f)*(k1 + 2*k2 + 2*k3 + k4);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	ed93 7a00 	vldr	s14, [r3]
 80022c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80022c6:	eeb1 6a08 	vmov.f32	s12, #24	@ 0x40c00000  6.0
 80022ca:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80022ce:	edd7 7a06 	vldr	s15, [r7, #24]
 80022d2:	ee37 6aa7 	vadd.f32	s12, s15, s15
 80022d6:	edd7 7a07 	vldr	s15, [r7, #28]
 80022da:	ee36 6a27 	vadd.f32	s12, s12, s15
 80022de:	edd7 7a05 	vldr	s15, [r7, #20]
 80022e2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80022e6:	ee36 6a27 	vadd.f32	s12, s12, s15
 80022ea:	edd7 7a04 	vldr	s15, [r7, #16]
 80022ee:	ee76 7a27 	vadd.f32	s15, s12, s15
 80022f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	edc3 7a00 	vstr	s15, [r3]
}
 8002300:	bf00      	nop
 8002302:	3720      	adds	r7, #32
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <filter_step>:

// Aplicar filtro
float filter_step(FilterState *state, float u, float cut_off, float DT) {
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	ed87 0a02 	vstr	s0, [r7, #8]
 8002314:	edc7 0a01 	vstr	s1, [r7, #4]
 8002318:	ed87 1a00 	vstr	s2, [r7]
    rk4_step(state, u, DT, cut_off);
 800231c:	ed97 1a01 	vldr	s2, [r7, #4]
 8002320:	edd7 0a00 	vldr	s1, [r7]
 8002324:	ed97 0a02 	vldr	s0, [r7, #8]
 8002328:	68f8      	ldr	r0, [r7, #12]
 800232a:	f7ff ff69 	bl	8002200 <rk4_step>
    return state->x;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	ee07 3a90 	vmov	s15, r3
}
 8002336:	eeb0 0a67 	vmov.f32	s0, s15
 800233a:	3710      	adds	r7, #16
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	4a07      	ldr	r2, [pc, #28]	@ (800236c <vApplicationGetIdleTaskMemory+0x2c>)
 8002350:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	4a06      	ldr	r2, [pc, #24]	@ (8002370 <vApplicationGetIdleTaskMemory+0x30>)
 8002356:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2280      	movs	r2, #128	@ 0x80
 800235c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800235e:	bf00      	nop
 8002360:	3714      	adds	r7, #20
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	2400056c 	.word	0x2400056c
 8002370:	240005c0 	.word	0x240005c0

08002374 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002374:	b5b0      	push	{r4, r5, r7, lr}
 8002376:	b096      	sub	sp, #88	@ 0x58
 8002378:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task_1ms */
  osThreadDef(Task_1ms, fTask_1ms, osPriorityNormal, 0, 128);
 800237a:	4b1d      	ldr	r3, [pc, #116]	@ (80023f0 <MX_FREERTOS_Init+0x7c>)
 800237c:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8002380:	461d      	mov	r5, r3
 8002382:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002384:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002386:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800238a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_1msHandle = osThreadCreate(osThread(Task_1ms), NULL);
 800238e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002392:	2100      	movs	r1, #0
 8002394:	4618      	mov	r0, r3
 8002396:	f012 fb7f 	bl	8014a98 <osThreadCreate>
 800239a:	4603      	mov	r3, r0
 800239c:	4a15      	ldr	r2, [pc, #84]	@ (80023f4 <MX_FREERTOS_Init+0x80>)
 800239e:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_10ms */
  osThreadDef(Task_10ms, fTask_10ms, osPriorityNormal, 0, 128);
 80023a0:	4b15      	ldr	r3, [pc, #84]	@ (80023f8 <MX_FREERTOS_Init+0x84>)
 80023a2:	f107 0420 	add.w	r4, r7, #32
 80023a6:	461d      	mov	r5, r3
 80023a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80023b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_10msHandle = osThreadCreate(osThread(Task_10ms), NULL);
 80023b4:	f107 0320 	add.w	r3, r7, #32
 80023b8:	2100      	movs	r1, #0
 80023ba:	4618      	mov	r0, r3
 80023bc:	f012 fb6c 	bl	8014a98 <osThreadCreate>
 80023c0:	4603      	mov	r3, r0
 80023c2:	4a0e      	ldr	r2, [pc, #56]	@ (80023fc <MX_FREERTOS_Init+0x88>)
 80023c4:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_100ms */
  osThreadDef(Task_100ms, fTask_100ms, osPriorityNormal, 0, 128);
 80023c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002400 <MX_FREERTOS_Init+0x8c>)
 80023c8:	1d3c      	adds	r4, r7, #4
 80023ca:	461d      	mov	r5, r3
 80023cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80023d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_100msHandle = osThreadCreate(osThread(Task_100ms), NULL);
 80023d8:	1d3b      	adds	r3, r7, #4
 80023da:	2100      	movs	r1, #0
 80023dc:	4618      	mov	r0, r3
 80023de:	f012 fb5b 	bl	8014a98 <osThreadCreate>
 80023e2:	4603      	mov	r3, r0
 80023e4:	4a07      	ldr	r2, [pc, #28]	@ (8002404 <MX_FREERTOS_Init+0x90>)
 80023e6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80023e8:	bf00      	nop
 80023ea:	3758      	adds	r7, #88	@ 0x58
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bdb0      	pop	{r4, r5, r7, pc}
 80023f0:	08019dcc 	.word	0x08019dcc
 80023f4:	24000560 	.word	0x24000560
 80023f8:	08019df4 	.word	0x08019df4
 80023fc:	24000564 	.word	0x24000564
 8002400:	08019e1c 	.word	0x08019e1c
 8002404:	24000568 	.word	0x24000568

08002408 <fTask_1ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fTask_1ms */
void fTask_1ms(void const * argument)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fTask_1ms */
  /* Infinite loop */
	LPF_gyro_filter_init();
 8002410:	f7ff f85e 	bl	80014d0 <LPF_gyro_filter_init>
	LPF_cmd_filter_init();
 8002414:	f7fe fb88 	bl	8000b28 <LPF_cmd_filter_init>

  for(;;)
  {
	TimeOn_Counter++;
 8002418:	4b07      	ldr	r3, [pc, #28]	@ (8002438 <fTask_1ms+0x30>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	3301      	adds	r3, #1
 800241e:	4a06      	ldr	r2, [pc, #24]	@ (8002438 <fTask_1ms+0x30>)
 8002420:	6013      	str	r3, [r2, #0]
	LED_Tasks();
 8002422:	f003 fc2d 	bl	8005c80 <LED_Tasks>
	SBUS_IntegrityVerification();
 8002426:	f004 f8ed 	bl	8006604 <SBUS_IntegrityVerification>
	NMEA_process_task();
 800242a:	f000 fdb1 	bl	8002f90 <NMEA_process_task>
    osDelay(1);
 800242e:	2001      	movs	r0, #1
 8002430:	f012 fb7e 	bl	8014b30 <osDelay>
	TimeOn_Counter++;
 8002434:	bf00      	nop
 8002436:	e7ef      	b.n	8002418 <fTask_1ms+0x10>
 8002438:	24000ef8 	.word	0x24000ef8

0800243c <fTask_10ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fTask_10ms */
void fTask_10ms(void const * argument)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fTask_10ms */
  /* Infinite loop */
  for(;;)
  {
	BNO_Tasks();
 8002444:	f003 fb58 	bl	8005af8 <BNO_Tasks>
	BMP280_calculate();
 8002448:	f002 fda8 	bl	8004f9c <BMP280_calculate>

	FlightTaskAttitude();
 800244c:	f7fe fee0 	bl	8001210 <FlightTaskAttitude>

	PWM_Assign();
 8002450:	f003 fcc8 	bl	8005de4 <PWM_Assign>
	SD_blackbox_write();
 8002454:	f004 f9b8 	bl	80067c8 <SD_blackbox_write>
    osDelay(10);
 8002458:	200a      	movs	r0, #10
 800245a:	f012 fb69 	bl	8014b30 <osDelay>
  {
 800245e:	bf00      	nop
 8002460:	e7f0      	b.n	8002444 <fTask_10ms+0x8>

08002462 <fTask_100ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fTask_100ms */
void fTask_100ms(void const * argument)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b082      	sub	sp, #8
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fTask_100ms */
  /* Infinite loop */
  for(;;)
  {
	LR03_StateMachine();
 800246a:	f003 fca3 	bl	8005db4 <LR03_StateMachine>
    osDelay(100);
 800246e:	2064      	movs	r0, #100	@ 0x64
 8002470:	f012 fb5e 	bl	8014b30 <osDelay>
	LR03_StateMachine();
 8002474:	bf00      	nop
 8002476:	e7f8      	b.n	800246a <fTask_100ms+0x8>

08002478 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b08a      	sub	sp, #40	@ 0x28
 800247c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800247e:	f107 0314 	add.w	r3, r7, #20
 8002482:	2200      	movs	r2, #0
 8002484:	601a      	str	r2, [r3, #0]
 8002486:	605a      	str	r2, [r3, #4]
 8002488:	609a      	str	r2, [r3, #8]
 800248a:	60da      	str	r2, [r3, #12]
 800248c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800248e:	4b4e      	ldr	r3, [pc, #312]	@ (80025c8 <MX_GPIO_Init+0x150>)
 8002490:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002494:	4a4c      	ldr	r2, [pc, #304]	@ (80025c8 <MX_GPIO_Init+0x150>)
 8002496:	f043 0304 	orr.w	r3, r3, #4
 800249a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800249e:	4b4a      	ldr	r3, [pc, #296]	@ (80025c8 <MX_GPIO_Init+0x150>)
 80024a0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80024a4:	f003 0304 	and.w	r3, r3, #4
 80024a8:	613b      	str	r3, [r7, #16]
 80024aa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ac:	4b46      	ldr	r3, [pc, #280]	@ (80025c8 <MX_GPIO_Init+0x150>)
 80024ae:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80024b2:	4a45      	ldr	r2, [pc, #276]	@ (80025c8 <MX_GPIO_Init+0x150>)
 80024b4:	f043 0301 	orr.w	r3, r3, #1
 80024b8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80024bc:	4b42      	ldr	r3, [pc, #264]	@ (80025c8 <MX_GPIO_Init+0x150>)
 80024be:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	60fb      	str	r3, [r7, #12]
 80024c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ca:	4b3f      	ldr	r3, [pc, #252]	@ (80025c8 <MX_GPIO_Init+0x150>)
 80024cc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80024d0:	4a3d      	ldr	r2, [pc, #244]	@ (80025c8 <MX_GPIO_Init+0x150>)
 80024d2:	f043 0302 	orr.w	r3, r3, #2
 80024d6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80024da:	4b3b      	ldr	r3, [pc, #236]	@ (80025c8 <MX_GPIO_Init+0x150>)
 80024dc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	60bb      	str	r3, [r7, #8]
 80024e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80024e8:	4b37      	ldr	r3, [pc, #220]	@ (80025c8 <MX_GPIO_Init+0x150>)
 80024ea:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80024ee:	4a36      	ldr	r2, [pc, #216]	@ (80025c8 <MX_GPIO_Init+0x150>)
 80024f0:	f043 0308 	orr.w	r3, r3, #8
 80024f4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80024f8:	4b33      	ldr	r3, [pc, #204]	@ (80025c8 <MX_GPIO_Init+0x150>)
 80024fa:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80024fe:	f003 0308 	and.w	r3, r3, #8
 8002502:	607b      	str	r3, [r7, #4]
 8002504:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 8002506:	2200      	movs	r2, #0
 8002508:	f242 010f 	movw	r1, #8207	@ 0x200f
 800250c:	482f      	ldr	r0, [pc, #188]	@ (80025cc <MX_GPIO_Init+0x154>)
 800250e:	f007 ffbd 	bl	800a48c <HAL_GPIO_WritePin>
                          |LED_5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_NSS_GPIO_Port, SD_NSS_Pin, GPIO_PIN_RESET);
 8002512:	2200      	movs	r2, #0
 8002514:	2110      	movs	r1, #16
 8002516:	482e      	ldr	r0, [pc, #184]	@ (80025d0 <MX_GPIO_Init+0x158>)
 8002518:	f007 ffb8 	bl	800a48c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IMU_BOOT_Pin|BME_NSS_Pin, GPIO_PIN_RESET);
 800251c:	2200      	movs	r2, #0
 800251e:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 8002522:	482c      	ldr	r0, [pc, #176]	@ (80025d4 <MX_GPIO_Init+0x15c>)
 8002524:	f007 ffb2 	bl	800a48c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_RST_GPIO_Port, IMU_RST_Pin, GPIO_PIN_RESET);
 8002528:	2200      	movs	r2, #0
 800252a:	2104      	movs	r1, #4
 800252c:	482a      	ldr	r0, [pc, #168]	@ (80025d8 <MX_GPIO_Init+0x160>)
 800252e:	f007 ffad 	bl	800a48c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 8002532:	f242 030f 	movw	r3, #8207	@ 0x200f
 8002536:	617b      	str	r3, [r7, #20]
                          |LED_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002538:	2301      	movs	r3, #1
 800253a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253c:	2300      	movs	r3, #0
 800253e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002540:	2300      	movs	r3, #0
 8002542:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002544:	f107 0314 	add.w	r3, r7, #20
 8002548:	4619      	mov	r1, r3
 800254a:	4820      	ldr	r0, [pc, #128]	@ (80025cc <MX_GPIO_Init+0x154>)
 800254c:	f007 fdee 	bl	800a12c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_NSS_Pin;
 8002550:	2310      	movs	r3, #16
 8002552:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002554:	2301      	movs	r3, #1
 8002556:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002558:	2300      	movs	r3, #0
 800255a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800255c:	2300      	movs	r3, #0
 800255e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_NSS_GPIO_Port, &GPIO_InitStruct);
 8002560:	f107 0314 	add.w	r3, r7, #20
 8002564:	4619      	mov	r1, r3
 8002566:	481a      	ldr	r0, [pc, #104]	@ (80025d0 <MX_GPIO_Init+0x158>)
 8002568:	f007 fde0 	bl	800a12c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = IMU_BOOT_Pin|BME_NSS_Pin;
 800256c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002570:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002572:	2301      	movs	r3, #1
 8002574:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002576:	2300      	movs	r3, #0
 8002578:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800257a:	2300      	movs	r3, #0
 800257c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800257e:	f107 0314 	add.w	r3, r7, #20
 8002582:	4619      	mov	r1, r3
 8002584:	4813      	ldr	r0, [pc, #76]	@ (80025d4 <MX_GPIO_Init+0x15c>)
 8002586:	f007 fdd1 	bl	800a12c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 800258a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800258e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002590:	2300      	movs	r3, #0
 8002592:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002594:	2300      	movs	r3, #0
 8002596:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8002598:	f107 0314 	add.w	r3, r7, #20
 800259c:	4619      	mov	r1, r3
 800259e:	480b      	ldr	r0, [pc, #44]	@ (80025cc <MX_GPIO_Init+0x154>)
 80025a0:	f007 fdc4 	bl	800a12c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_RST_Pin;
 80025a4:	2304      	movs	r3, #4
 80025a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025a8:	2301      	movs	r3, #1
 80025aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ac:	2300      	movs	r3, #0
 80025ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b0:	2300      	movs	r3, #0
 80025b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IMU_RST_GPIO_Port, &GPIO_InitStruct);
 80025b4:	f107 0314 	add.w	r3, r7, #20
 80025b8:	4619      	mov	r1, r3
 80025ba:	4807      	ldr	r0, [pc, #28]	@ (80025d8 <MX_GPIO_Init+0x160>)
 80025bc:	f007 fdb6 	bl	800a12c <HAL_GPIO_Init>

}
 80025c0:	bf00      	nop
 80025c2:	3728      	adds	r7, #40	@ 0x28
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	58024400 	.word	0x58024400
 80025cc:	58020800 	.word	0x58020800
 80025d0:	58020000 	.word	0x58020000
 80025d4:	58020400 	.word	0x58020400
 80025d8:	58020c00 	.word	0x58020c00

080025dc <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80025e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002650 <MX_I2C3_Init+0x74>)
 80025e2:	4a1c      	ldr	r2, [pc, #112]	@ (8002654 <MX_I2C3_Init+0x78>)
 80025e4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20B0CCFF;
 80025e6:	4b1a      	ldr	r3, [pc, #104]	@ (8002650 <MX_I2C3_Init+0x74>)
 80025e8:	4a1b      	ldr	r2, [pc, #108]	@ (8002658 <MX_I2C3_Init+0x7c>)
 80025ea:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80025ec:	4b18      	ldr	r3, [pc, #96]	@ (8002650 <MX_I2C3_Init+0x74>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025f2:	4b17      	ldr	r3, [pc, #92]	@ (8002650 <MX_I2C3_Init+0x74>)
 80025f4:	2201      	movs	r2, #1
 80025f6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025f8:	4b15      	ldr	r3, [pc, #84]	@ (8002650 <MX_I2C3_Init+0x74>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80025fe:	4b14      	ldr	r3, [pc, #80]	@ (8002650 <MX_I2C3_Init+0x74>)
 8002600:	2200      	movs	r2, #0
 8002602:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002604:	4b12      	ldr	r3, [pc, #72]	@ (8002650 <MX_I2C3_Init+0x74>)
 8002606:	2200      	movs	r2, #0
 8002608:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800260a:	4b11      	ldr	r3, [pc, #68]	@ (8002650 <MX_I2C3_Init+0x74>)
 800260c:	2200      	movs	r2, #0
 800260e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002610:	4b0f      	ldr	r3, [pc, #60]	@ (8002650 <MX_I2C3_Init+0x74>)
 8002612:	2200      	movs	r2, #0
 8002614:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002616:	480e      	ldr	r0, [pc, #56]	@ (8002650 <MX_I2C3_Init+0x74>)
 8002618:	f007 ff52 	bl	800a4c0 <HAL_I2C_Init>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8002622:	f000 fe41 	bl	80032a8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002626:	2100      	movs	r1, #0
 8002628:	4809      	ldr	r0, [pc, #36]	@ (8002650 <MX_I2C3_Init+0x74>)
 800262a:	f007 ffe5 	bl	800a5f8 <HAL_I2CEx_ConfigAnalogFilter>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002634:	f000 fe38 	bl	80032a8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002638:	2100      	movs	r1, #0
 800263a:	4805      	ldr	r0, [pc, #20]	@ (8002650 <MX_I2C3_Init+0x74>)
 800263c:	f008 f827 	bl	800a68e <HAL_I2CEx_ConfigDigitalFilter>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8002646:	f000 fe2f 	bl	80032a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800264a:	bf00      	nop
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	240007c0 	.word	0x240007c0
 8002654:	40005c00 	.word	0x40005c00
 8002658:	20b0ccff 	.word	0x20b0ccff

0800265c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b0bc      	sub	sp, #240	@ 0xf0
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002664:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002668:	2200      	movs	r2, #0
 800266a:	601a      	str	r2, [r3, #0]
 800266c:	605a      	str	r2, [r3, #4]
 800266e:	609a      	str	r2, [r3, #8]
 8002670:	60da      	str	r2, [r3, #12]
 8002672:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002674:	f107 0318 	add.w	r3, r7, #24
 8002678:	22c0      	movs	r2, #192	@ 0xc0
 800267a:	2100      	movs	r1, #0
 800267c:	4618      	mov	r0, r3
 800267e:	f015 fb7a 	bl	8017d76 <memset>
  if(i2cHandle->Instance==I2C3)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a39      	ldr	r2, [pc, #228]	@ (800276c <HAL_I2C_MspInit+0x110>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d16b      	bne.n	8002764 <HAL_I2C_MspInit+0x108>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800268c:	f04f 0208 	mov.w	r2, #8
 8002690:	f04f 0300 	mov.w	r3, #0
 8002694:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002698:	2300      	movs	r3, #0
 800269a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800269e:	f107 0318 	add.w	r3, r7, #24
 80026a2:	4618      	mov	r0, r3
 80026a4:	f009 f87a 	bl	800b79c <HAL_RCCEx_PeriphCLKConfig>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80026ae:	f000 fdfb 	bl	80032a8 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026b2:	4b2f      	ldr	r3, [pc, #188]	@ (8002770 <HAL_I2C_MspInit+0x114>)
 80026b4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80026b8:	4a2d      	ldr	r2, [pc, #180]	@ (8002770 <HAL_I2C_MspInit+0x114>)
 80026ba:	f043 0304 	orr.w	r3, r3, #4
 80026be:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80026c2:	4b2b      	ldr	r3, [pc, #172]	@ (8002770 <HAL_I2C_MspInit+0x114>)
 80026c4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80026c8:	f003 0304 	and.w	r3, r3, #4
 80026cc:	617b      	str	r3, [r7, #20]
 80026ce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026d0:	4b27      	ldr	r3, [pc, #156]	@ (8002770 <HAL_I2C_MspInit+0x114>)
 80026d2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80026d6:	4a26      	ldr	r2, [pc, #152]	@ (8002770 <HAL_I2C_MspInit+0x114>)
 80026d8:	f043 0301 	orr.w	r3, r3, #1
 80026dc:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80026e0:	4b23      	ldr	r3, [pc, #140]	@ (8002770 <HAL_I2C_MspInit+0x114>)
 80026e2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	613b      	str	r3, [r7, #16]
 80026ec:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80026ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80026f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026f6:	2312      	movs	r3, #18
 80026f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fc:	2300      	movs	r3, #0
 80026fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002702:	2300      	movs	r3, #0
 8002704:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002708:	2304      	movs	r3, #4
 800270a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800270e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002712:	4619      	mov	r1, r3
 8002714:	4817      	ldr	r0, [pc, #92]	@ (8002774 <HAL_I2C_MspInit+0x118>)
 8002716:	f007 fd09 	bl	800a12c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800271a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800271e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002722:	2312      	movs	r3, #18
 8002724:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002728:	2300      	movs	r3, #0
 800272a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800272e:	2300      	movs	r3, #0
 8002730:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002734:	2304      	movs	r3, #4
 8002736:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800273a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800273e:	4619      	mov	r1, r3
 8002740:	480d      	ldr	r0, [pc, #52]	@ (8002778 <HAL_I2C_MspInit+0x11c>)
 8002742:	f007 fcf3 	bl	800a12c <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002746:	4b0a      	ldr	r3, [pc, #40]	@ (8002770 <HAL_I2C_MspInit+0x114>)
 8002748:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800274c:	4a08      	ldr	r2, [pc, #32]	@ (8002770 <HAL_I2C_MspInit+0x114>)
 800274e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002752:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8002756:	4b06      	ldr	r3, [pc, #24]	@ (8002770 <HAL_I2C_MspInit+0x114>)
 8002758:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800275c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002760:	60fb      	str	r3, [r7, #12]
 8002762:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8002764:	bf00      	nop
 8002766:	37f0      	adds	r7, #240	@ 0xf0
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	40005c00 	.word	0x40005c00
 8002770:	58024400 	.word	0x58024400
 8002774:	58020800 	.word	0x58020800
 8002778:	58020000 	.word	0x58020000

0800277c <default_CB>:
static float speed_fall_barrier;	/**< Barrier of decreasing speed*/
/**
 * default_CB() is a default function for all the CB pointers which do nothing.\n
 * The unregistering CB pointer is setting to pointer of this function.  
 */
static void default_CB(void){}
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
 8002780:	bf00      	nop
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
	...

0800278c <NMEA_parser>:
 * NMEA_parser is function which parses single correct NMEA message.\n
 * Inside this function all known types of NMEA message are recognized and nmea_data structure fields are set.\n
 * There is also implemented mechanism of recognizing specified events and calling corresponding to them callbacks.
 * @param[in]	message	pointer to buffer storing NMEA message.
 */
static void 	NMEA_parser(char *message){
 800278c:	b5b0      	push	{r4, r5, r7, lr}
 800278e:	b0b2      	sub	sp, #200	@ 0xc8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]

	NMEA_data previous_data = nmea_data;
 8002794:	4ba9      	ldr	r3, [pc, #676]	@ (8002a3c <NMEA_parser+0x2b0>)
 8002796:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 800279a:	461d      	mov	r5, r3
 800279c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800279e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027a8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80027ac:	e884 0003 	stmia.w	r4, {r0, r1}

	int num = 0;
 80027b0:	2300      	movs	r3, #0
 80027b2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
	char *fields[32]={NULL};
 80027b6:	f107 030c 	add.w	r3, r7, #12
 80027ba:	2280      	movs	r2, #128	@ 0x80
 80027bc:	2100      	movs	r1, #0
 80027be:	4618      	mov	r0, r3
 80027c0:	f015 fad9 	bl	8017d76 <memset>
	fields[num++]=message;
 80027c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80027c8:	1c5a      	adds	r2, r3, #1
 80027ca:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	33c8      	adds	r3, #200	@ 0xc8
 80027d2:	443b      	add	r3, r7
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	f843 2cbc 	str.w	r2, [r3, #-188]
	while ((message = strchr(message, ','))) {
 80027da:	e00f      	b.n	80027fc <NMEA_parser+0x70>
		*message++ = 0;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	1c5a      	adds	r2, r3, #1
 80027e0:	607a      	str	r2, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	701a      	strb	r2, [r3, #0]
		fields[num++]=message;
 80027e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80027ea:	1c5a      	adds	r2, r3, #1
 80027ec:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	33c8      	adds	r3, #200	@ 0xc8
 80027f4:	443b      	add	r3, r7
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	f843 2cbc 	str.w	r2, [r3, #-188]
	while ((message = strchr(message, ','))) {
 80027fc:	212c      	movs	r1, #44	@ 0x2c
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f015 fac1 	bl	8017d86 <strchr>
 8002804:	6078      	str	r0, [r7, #4]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d1e7      	bne.n	80027dc <NMEA_parser+0x50>
	}

	if(strcmp(fields[0],"$GPGLL")==0){
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	498c      	ldr	r1, [pc, #560]	@ (8002a40 <NMEA_parser+0x2b4>)
 8002810:	4618      	mov	r0, r3
 8002812:	f7fd fd6d 	bl	80002f0 <strcmp>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d11e      	bne.n	800285a <NMEA_parser+0xce>

		nmea_data.latitude = atof(fields[1]);
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	4618      	mov	r0, r3
 8002820:	f014 fb5a 	bl	8016ed8 <atof>
 8002824:	eeb0 7b40 	vmov.f64	d7, d0
 8002828:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800282c:	4b83      	ldr	r3, [pc, #524]	@ (8002a3c <NMEA_parser+0x2b0>)
 800282e:	edc3 7a02 	vstr	s15, [r3, #8]
		nmea_data.latitude_direction = *fields[2];
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	781a      	ldrb	r2, [r3, #0]
 8002836:	4b81      	ldr	r3, [pc, #516]	@ (8002a3c <NMEA_parser+0x2b0>)
 8002838:	731a      	strb	r2, [r3, #12]
		nmea_data.longitude = atof(fields[3]);
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	4618      	mov	r0, r3
 800283e:	f014 fb4b 	bl	8016ed8 <atof>
 8002842:	eeb0 7b40 	vmov.f64	d7, d0
 8002846:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800284a:	4b7c      	ldr	r3, [pc, #496]	@ (8002a3c <NMEA_parser+0x2b0>)
 800284c:	edc3 7a04 	vstr	s15, [r3, #16]
		nmea_data.longitude_direction = *fields[4];
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	781a      	ldrb	r2, [r3, #0]
 8002854:	4b79      	ldr	r3, [pc, #484]	@ (8002a3c <NMEA_parser+0x2b0>)
 8002856:	751a      	strb	r2, [r3, #20]
 8002858:	e10d      	b.n	8002a76 <NMEA_parser+0x2ea>

	}else if(strcmp(fields[0],"$GPRMC")==0){
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	4979      	ldr	r1, [pc, #484]	@ (8002a44 <NMEA_parser+0x2b8>)
 800285e:	4618      	mov	r0, r3
 8002860:	f7fd fd46 	bl	80002f0 <strcmp>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d130      	bne.n	80028cc <NMEA_parser+0x140>

		nmea_data.UTC_time = atof(fields[1]);
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	4618      	mov	r0, r3
 800286e:	f014 fb33 	bl	8016ed8 <atof>
 8002872:	eeb0 7b40 	vmov.f64	d7, d0
 8002876:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800287a:	4b70      	ldr	r3, [pc, #448]	@ (8002a3c <NMEA_parser+0x2b0>)
 800287c:	edc3 7a00 	vstr	s15, [r3]
		nmea_data.UT_date = atoi(fields[9]);
 8002880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002882:	4618      	mov	r0, r3
 8002884:	f014 fb2b 	bl	8016ede <atoi>
 8002888:	4603      	mov	r3, r0
 800288a:	4a6c      	ldr	r2, [pc, #432]	@ (8002a3c <NMEA_parser+0x2b0>)
 800288c:	6053      	str	r3, [r2, #4]

		nmea_data.latitude = atof(fields[3]);
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	4618      	mov	r0, r3
 8002892:	f014 fb21 	bl	8016ed8 <atof>
 8002896:	eeb0 7b40 	vmov.f64	d7, d0
 800289a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800289e:	4b67      	ldr	r3, [pc, #412]	@ (8002a3c <NMEA_parser+0x2b0>)
 80028a0:	edc3 7a02 	vstr	s15, [r3, #8]
		nmea_data.latitude_direction = *fields[4];
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	781a      	ldrb	r2, [r3, #0]
 80028a8:	4b64      	ldr	r3, [pc, #400]	@ (8002a3c <NMEA_parser+0x2b0>)
 80028aa:	731a      	strb	r2, [r3, #12]
		nmea_data.longitude = atof(fields[5]);
 80028ac:	6a3b      	ldr	r3, [r7, #32]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f014 fb12 	bl	8016ed8 <atof>
 80028b4:	eeb0 7b40 	vmov.f64	d7, d0
 80028b8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80028bc:	4b5f      	ldr	r3, [pc, #380]	@ (8002a3c <NMEA_parser+0x2b0>)
 80028be:	edc3 7a04 	vstr	s15, [r3, #16]
		nmea_data.longitude_direction = *fields[6];
 80028c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c4:	781a      	ldrb	r2, [r3, #0]
 80028c6:	4b5d      	ldr	r3, [pc, #372]	@ (8002a3c <NMEA_parser+0x2b0>)
 80028c8:	751a      	strb	r2, [r3, #20]
 80028ca:	e0d4      	b.n	8002a76 <NMEA_parser+0x2ea>


	}else if(strcmp(fields[0],"$GPVTG")==0){
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	495e      	ldr	r1, [pc, #376]	@ (8002a48 <NMEA_parser+0x2bc>)
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7fd fd0d 	bl	80002f0 <strcmp>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d116      	bne.n	800290a <NMEA_parser+0x17e>

		nmea_data.speed_knots =  atoi(fields[5]);
 80028dc:	6a3b      	ldr	r3, [r7, #32]
 80028de:	4618      	mov	r0, r3
 80028e0:	f014 fafd 	bl	8016ede <atoi>
 80028e4:	ee07 0a90 	vmov	s15, r0
 80028e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028ec:	4b53      	ldr	r3, [pc, #332]	@ (8002a3c <NMEA_parser+0x2b0>)
 80028ee:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
		nmea_data.speed_kmph =  atoi(fields[7]);
 80028f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028f4:	4618      	mov	r0, r3
 80028f6:	f014 faf2 	bl	8016ede <atoi>
 80028fa:	ee07 0a90 	vmov	s15, r0
 80028fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002902:	4b4e      	ldr	r3, [pc, #312]	@ (8002a3c <NMEA_parser+0x2b0>)
 8002904:	edc3 7a08 	vstr	s15, [r3, #32]
 8002908:	e0b5      	b.n	8002a76 <NMEA_parser+0x2ea>

	}else if(strcmp(fields[0],"$GPGGA")==0){
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	494f      	ldr	r1, [pc, #316]	@ (8002a4c <NMEA_parser+0x2c0>)
 800290e:	4618      	mov	r0, r3
 8002910:	f7fd fcee 	bl	80002f0 <strcmp>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d15c      	bne.n	80029d4 <NMEA_parser+0x248>

		nmea_data.UTC_time = atof(fields[1]);
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	4618      	mov	r0, r3
 800291e:	f014 fadb 	bl	8016ed8 <atof>
 8002922:	eeb0 7b40 	vmov.f64	d7, d0
 8002926:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800292a:	4b44      	ldr	r3, [pc, #272]	@ (8002a3c <NMEA_parser+0x2b0>)
 800292c:	edc3 7a00 	vstr	s15, [r3]

		nmea_data.latitude = atof(fields[2]);
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	4618      	mov	r0, r3
 8002934:	f014 fad0 	bl	8016ed8 <atof>
 8002938:	eeb0 7b40 	vmov.f64	d7, d0
 800293c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002940:	4b3e      	ldr	r3, [pc, #248]	@ (8002a3c <NMEA_parser+0x2b0>)
 8002942:	edc3 7a02 	vstr	s15, [r3, #8]
		nmea_data.latitude_direction = *fields[3];
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	781a      	ldrb	r2, [r3, #0]
 800294a:	4b3c      	ldr	r3, [pc, #240]	@ (8002a3c <NMEA_parser+0x2b0>)
 800294c:	731a      	strb	r2, [r3, #12]
		nmea_data.longitude = atof(fields[4]);
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	4618      	mov	r0, r3
 8002952:	f014 fac1 	bl	8016ed8 <atof>
 8002956:	eeb0 7b40 	vmov.f64	d7, d0
 800295a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800295e:	4b37      	ldr	r3, [pc, #220]	@ (8002a3c <NMEA_parser+0x2b0>)
 8002960:	edc3 7a04 	vstr	s15, [r3, #16]
		nmea_data.longitude_direction = *fields[5];
 8002964:	6a3b      	ldr	r3, [r7, #32]
 8002966:	781a      	ldrb	r2, [r3, #0]
 8002968:	4b34      	ldr	r3, [pc, #208]	@ (8002a3c <NMEA_parser+0x2b0>)
 800296a:	751a      	strb	r2, [r3, #20]

		nmea_data.fix = atoi(fields[6]);
 800296c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800296e:	4618      	mov	r0, r3
 8002970:	f014 fab5 	bl	8016ede <atoi>
 8002974:	4603      	mov	r3, r0
 8002976:	b2da      	uxtb	r2, r3
 8002978:	4b30      	ldr	r3, [pc, #192]	@ (8002a3c <NMEA_parser+0x2b0>)
 800297a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
		nmea_data.sat_in_use = atoi(fields[7]);
 800297e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002980:	4618      	mov	r0, r3
 8002982:	f014 faac 	bl	8016ede <atoi>
 8002986:	4603      	mov	r3, r0
 8002988:	b2da      	uxtb	r2, r3
 800298a:	4b2c      	ldr	r3, [pc, #176]	@ (8002a3c <NMEA_parser+0x2b0>)
 800298c:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
		nmea_data.HDOP = atof(fields[8]);
 8002990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002992:	4618      	mov	r0, r3
 8002994:	f014 faa0 	bl	8016ed8 <atof>
 8002998:	eeb0 7b40 	vmov.f64	d7, d0
 800299c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80029a0:	4b26      	ldr	r3, [pc, #152]	@ (8002a3c <NMEA_parser+0x2b0>)
 80029a2:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

		nmea_data.altitude = atof(fields[9]);
 80029a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029a8:	4618      	mov	r0, r3
 80029aa:	f014 fa95 	bl	8016ed8 <atof>
 80029ae:	eeb0 7b40 	vmov.f64	d7, d0
 80029b2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80029b6:	4b21      	ldr	r3, [pc, #132]	@ (8002a3c <NMEA_parser+0x2b0>)
 80029b8:	edc3 7a06 	vstr	s15, [r3, #24]
		nmea_data.geoidal_separation = atof(fields[11]);
 80029bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029be:	4618      	mov	r0, r3
 80029c0:	f014 fa8a 	bl	8016ed8 <atof>
 80029c4:	eeb0 7b40 	vmov.f64	d7, d0
 80029c8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80029cc:	4b1b      	ldr	r3, [pc, #108]	@ (8002a3c <NMEA_parser+0x2b0>)
 80029ce:	edc3 7a07 	vstr	s15, [r3, #28]
 80029d2:	e050      	b.n	8002a76 <NMEA_parser+0x2ea>

	}else if(strcmp(fields[0],"$GPGSA")==0){
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	491e      	ldr	r1, [pc, #120]	@ (8002a50 <NMEA_parser+0x2c4>)
 80029d8:	4618      	mov	r0, r3
 80029da:	f7fd fc89 	bl	80002f0 <strcmp>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d137      	bne.n	8002a54 <NMEA_parser+0x2c8>

		nmea_data.fix_mode = atoi(fields[2]);
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f014 fa79 	bl	8016ede <atoi>
 80029ec:	4603      	mov	r3, r0
 80029ee:	b2da      	uxtb	r2, r3
 80029f0:	4b12      	ldr	r3, [pc, #72]	@ (8002a3c <NMEA_parser+0x2b0>)
 80029f2:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

		nmea_data.PDOP = atof(fields[15]);
 80029f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80029f8:	4618      	mov	r0, r3
 80029fa:	f014 fa6d 	bl	8016ed8 <atof>
 80029fe:	eeb0 7b40 	vmov.f64	d7, d0
 8002a02:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002a06:	4b0d      	ldr	r3, [pc, #52]	@ (8002a3c <NMEA_parser+0x2b0>)
 8002a08:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		nmea_data.HDOP = atof(fields[16]);
 8002a0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f014 fa62 	bl	8016ed8 <atof>
 8002a14:	eeb0 7b40 	vmov.f64	d7, d0
 8002a18:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002a1c:	4b07      	ldr	r3, [pc, #28]	@ (8002a3c <NMEA_parser+0x2b0>)
 8002a1e:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
		nmea_data.VDOP = atof(fields[17]);
 8002a22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a24:	4618      	mov	r0, r3
 8002a26:	f014 fa57 	bl	8016ed8 <atof>
 8002a2a:	eeb0 7b40 	vmov.f64	d7, d0
 8002a2e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002a32:	4b02      	ldr	r3, [pc, #8]	@ (8002a3c <NMEA_parser+0x2b0>)
 8002a34:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
 8002a38:	e01d      	b.n	8002a76 <NMEA_parser+0x2ea>
 8002a3a:	bf00      	nop
 8002a3c:	24000ebc 	.word	0x24000ebc
 8002a40:	08019e38 	.word	0x08019e38
 8002a44:	08019e40 	.word	0x08019e40
 8002a48:	08019e48 	.word	0x08019e48
 8002a4c:	08019e50 	.word	0x08019e50
 8002a50:	08019e58 	.word	0x08019e58

	}else if(strcmp(fields[0],"$GPGSV")==0){
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	4931      	ldr	r1, [pc, #196]	@ (8002b1c <NMEA_parser+0x390>)
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7fd fc49 	bl	80002f0 <strcmp>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d108      	bne.n	8002a76 <NMEA_parser+0x2ea>
		nmea_data.sat_in_view = atoi(fields[3]);
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f014 fa39 	bl	8016ede <atoi>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	b2da      	uxtb	r2, r3
 8002a70:	4b2b      	ldr	r3, [pc, #172]	@ (8002b20 <NMEA_parser+0x394>)
 8002a72:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	}

	if (abs(nmea_data.speed_kmph - previous_data.speed_kmph) > speed_change_tolerance){
 8002a76:	4b2a      	ldr	r3, [pc, #168]	@ (8002b20 <NMEA_parser+0x394>)
 8002a78:	ed93 7a08 	vldr	s14, [r3, #32]
 8002a7c:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8002a80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a88:	ee17 3a90 	vmov	r3, s15
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	bfb8      	it	lt
 8002a90:	425b      	neglt	r3, r3
 8002a92:	ee07 3a90 	vmov	s15, r3
 8002a96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a9a:	4b22      	ldr	r3, [pc, #136]	@ (8002b24 <NMEA_parser+0x398>)
 8002a9c:	edd3 7a00 	vldr	s15, [r3]
 8002aa0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aa8:	dd02      	ble.n	8002ab0 <NMEA_parser+0x324>
		speed_change_CB_fun_ptr();
 8002aaa:	4b1f      	ldr	r3, [pc, #124]	@ (8002b28 <NMEA_parser+0x39c>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4798      	blx	r3
	}

	if (nmea_data.speed_kmph > speed_raise_barrier && previous_data.speed_kmph <= speed_raise_barrier){
 8002ab0:	4b1b      	ldr	r3, [pc, #108]	@ (8002b20 <NMEA_parser+0x394>)
 8002ab2:	ed93 7a08 	vldr	s14, [r3, #32]
 8002ab6:	4b1d      	ldr	r3, [pc, #116]	@ (8002b2c <NMEA_parser+0x3a0>)
 8002ab8:	edd3 7a00 	vldr	s15, [r3]
 8002abc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ac4:	dd0c      	ble.n	8002ae0 <NMEA_parser+0x354>
 8002ac6:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 8002aca:	4b18      	ldr	r3, [pc, #96]	@ (8002b2c <NMEA_parser+0x3a0>)
 8002acc:	edd3 7a00 	vldr	s15, [r3]
 8002ad0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ad8:	d802      	bhi.n	8002ae0 <NMEA_parser+0x354>
		speed_raise_barrier_CB_fun_ptr();
 8002ada:	4b15      	ldr	r3, [pc, #84]	@ (8002b30 <NMEA_parser+0x3a4>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4798      	blx	r3
	}

	if (nmea_data.speed_kmph < speed_raise_barrier && previous_data.speed_kmph >= speed_raise_barrier){
 8002ae0:	4b0f      	ldr	r3, [pc, #60]	@ (8002b20 <NMEA_parser+0x394>)
 8002ae2:	ed93 7a08 	vldr	s14, [r3, #32]
 8002ae6:	4b11      	ldr	r3, [pc, #68]	@ (8002b2c <NMEA_parser+0x3a0>)
 8002ae8:	edd3 7a00 	vldr	s15, [r3]
 8002aec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002af4:	d400      	bmi.n	8002af8 <NMEA_parser+0x36c>
		speed_fall_barrier_CB_fun_ptr();
	}
}
 8002af6:	e00d      	b.n	8002b14 <NMEA_parser+0x388>
	if (nmea_data.speed_kmph < speed_raise_barrier && previous_data.speed_kmph >= speed_raise_barrier){
 8002af8:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 8002afc:	4b0b      	ldr	r3, [pc, #44]	@ (8002b2c <NMEA_parser+0x3a0>)
 8002afe:	edd3 7a00 	vldr	s15, [r3]
 8002b02:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b0a:	da00      	bge.n	8002b0e <NMEA_parser+0x382>
}
 8002b0c:	e002      	b.n	8002b14 <NMEA_parser+0x388>
		speed_fall_barrier_CB_fun_ptr();
 8002b0e:	4b09      	ldr	r3, [pc, #36]	@ (8002b34 <NMEA_parser+0x3a8>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4798      	blx	r3
}
 8002b14:	bf00      	nop
 8002b16:	37c8      	adds	r7, #200	@ 0xc8
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bdb0      	pop	{r4, r5, r7, pc}
 8002b1c:	08019e60 	.word	0x08019e60
 8002b20:	24000ebc 	.word	0x24000ebc
 8002b24:	24000ea4 	.word	0x24000ea4
 8002b28:	24000ea0 	.word	0x24000ea0
 8002b2c:	24000eac 	.word	0x24000eac
 8002b30:	24000ea8 	.word	0x24000ea8
 8002b34:	24000eb0 	.word	0x24000eb0

08002b38 <hx2int>:
 * hx2int is function which converts hex number written using characters to corresponding integer.
 * @param[in]	n2		is older position ix hex code
 * @param[in]	n1		is younger position ix hex code
 * @param[out]	uint8_t	is integer corresponding to input hex
 */
static uint8_t hx2int(uint8_t n2, uint8_t n1){
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	4603      	mov	r3, r0
 8002b40:	460a      	mov	r2, r1
 8002b42:	71fb      	strb	r3, [r7, #7]
 8002b44:	4613      	mov	r3, r2
 8002b46:	71bb      	strb	r3, [r7, #6]
	if (n2 <= '9') n2-='0';
 8002b48:	79fb      	ldrb	r3, [r7, #7]
 8002b4a:	2b39      	cmp	r3, #57	@ 0x39
 8002b4c:	d803      	bhi.n	8002b56 <hx2int+0x1e>
 8002b4e:	79fb      	ldrb	r3, [r7, #7]
 8002b50:	3b30      	subs	r3, #48	@ 0x30
 8002b52:	71fb      	strb	r3, [r7, #7]
 8002b54:	e002      	b.n	8002b5c <hx2int+0x24>
	else n2=n2-'A'+10;
 8002b56:	79fb      	ldrb	r3, [r7, #7]
 8002b58:	3b37      	subs	r3, #55	@ 0x37
 8002b5a:	71fb      	strb	r3, [r7, #7]

	if (n1 <= '9') n1-='0';
 8002b5c:	79bb      	ldrb	r3, [r7, #6]
 8002b5e:	2b39      	cmp	r3, #57	@ 0x39
 8002b60:	d803      	bhi.n	8002b6a <hx2int+0x32>
 8002b62:	79bb      	ldrb	r3, [r7, #6]
 8002b64:	3b30      	subs	r3, #48	@ 0x30
 8002b66:	71bb      	strb	r3, [r7, #6]
 8002b68:	e002      	b.n	8002b70 <hx2int+0x38>
	else n1=n1-'A'+10;
 8002b6a:	79bb      	ldrb	r3, [r7, #6]
 8002b6c:	3b37      	subs	r3, #55	@ 0x37
 8002b6e:	71bb      	strb	r3, [r7, #6]

	return n2*16+n1;
 8002b70:	79fb      	ldrb	r3, [r7, #7]
 8002b72:	011b      	lsls	r3, r3, #4
 8002b74:	b2da      	uxtb	r2, r3
 8002b76:	79bb      	ldrb	r3, [r7, #6]
 8002b78:	4413      	add	r3, r2
 8002b7a:	b2db      	uxtb	r3, r3

}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <NMEA_checksum_clc>:
 * NMEA_checksum_clc is function which calculates checksum of the message and compares it to checksum value given in NMEA message.\n
 * To convert given checksum it uses hx2int function.
 * @param[in]	message	pointer to buffer storing NMEA message.
 * @param[out]	NMEA_status 	is a status code. It should be NMEA_OK. For more information check out NMEA_status documentation.
 */
static NMEA_status NMEA_checksum_clc(uint8_t * message){
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
	uint8_t index = 1;
 8002b90:	2301      	movs	r3, #1
 8002b92:	73fb      	strb	r3, [r7, #15]
	uint8_t checksum_clc =0;
 8002b94:	2300      	movs	r3, #0
 8002b96:	73bb      	strb	r3, [r7, #14]

	while (message[index]!='*' && index<NMEA_WORKING_BUFFER_SIZE-2){
 8002b98:	e009      	b.n	8002bae <NMEA_checksum_clc+0x26>
		checksum_clc^=message[index++];
 8002b9a:	7bfb      	ldrb	r3, [r7, #15]
 8002b9c:	1c5a      	adds	r2, r3, #1
 8002b9e:	73fa      	strb	r2, [r7, #15]
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	781a      	ldrb	r2, [r3, #0]
 8002ba8:	7bbb      	ldrb	r3, [r7, #14]
 8002baa:	4053      	eors	r3, r2
 8002bac:	73bb      	strb	r3, [r7, #14]
	while (message[index]!='*' && index<NMEA_WORKING_BUFFER_SIZE-2){
 8002bae:	7bfb      	ldrb	r3, [r7, #15]
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	2b2a      	cmp	r3, #42	@ 0x2a
 8002bb8:	d002      	beq.n	8002bc0 <NMEA_checksum_clc+0x38>
 8002bba:	7bfb      	ldrb	r3, [r7, #15]
 8002bbc:	2b7d      	cmp	r3, #125	@ 0x7d
 8002bbe:	d9ec      	bls.n	8002b9a <NMEA_checksum_clc+0x12>
	}

	uint8_t checksum = hx2int(message[index+1],message[index+2]);
 8002bc0:	7bfb      	ldrb	r3, [r7, #15]
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	7818      	ldrb	r0, [r3, #0]
 8002bca:	7bfb      	ldrb	r3, [r7, #15]
 8002bcc:	3302      	adds	r3, #2
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	f7ff ffaf 	bl	8002b38 <hx2int>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	737b      	strb	r3, [r7, #13]
	if (checksum!=checksum_clc){
 8002bde:	7b7a      	ldrb	r2, [r7, #13]
 8002be0:	7bbb      	ldrb	r3, [r7, #14]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d001      	beq.n	8002bea <NMEA_checksum_clc+0x62>
		return NMEA_CHECKSUM_ERROR;
 8002be6:	2302      	movs	r3, #2
 8002be8:	e000      	b.n	8002bec <NMEA_checksum_clc+0x64>
	}
	return NMEA_OK;
 8002bea:	2300      	movs	r3, #0


}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3710      	adds	r7, #16
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <NMEA_read_line>:

/**
 * NMEA_read_line is function which reads one NMEA message line from NMEA_UART_buffer circular buffer to NMEA_working_buffer.
 */
static void NMEA_read_line(void){
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
	int index = 0;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	607b      	str	r3, [r7, #4]
	while (index < NMEA_WORKING_BUFFER_SIZE) NMEA_working_buffer[index++]=0;	// Clean up working buffer.
 8002bfe:	e005      	b.n	8002c0c <NMEA_read_line+0x18>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	1c5a      	adds	r2, r3, #1
 8002c04:	607a      	str	r2, [r7, #4]
 8002c06:	4a2b      	ldr	r2, [pc, #172]	@ (8002cb4 <NMEA_read_line+0xc0>)
 8002c08:	2100      	movs	r1, #0
 8002c0a:	54d1      	strb	r1, [r2, r3]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2b7f      	cmp	r3, #127	@ 0x7f
 8002c10:	ddf6      	ble.n	8002c00 <NMEA_read_line+0xc>

	index = 0;
 8002c12:	2300      	movs	r3, #0
 8002c14:	607b      	str	r3, [r7, #4]
	while(NMEA_UART_buffer[UART_buffer_tail]!= '\n' && index < NMEA_WORKING_BUFFER_SIZE-2){
 8002c16:	e01c      	b.n	8002c52 <NMEA_read_line+0x5e>
		NMEA_working_buffer[index]=NMEA_UART_buffer[UART_buffer_tail];
 8002c18:	4b27      	ldr	r3, [pc, #156]	@ (8002cb8 <NMEA_read_line+0xc4>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a27      	ldr	r2, [pc, #156]	@ (8002cbc <NMEA_read_line+0xc8>)
 8002c1e:	5cd1      	ldrb	r1, [r2, r3]
 8002c20:	4a24      	ldr	r2, [pc, #144]	@ (8002cb4 <NMEA_read_line+0xc0>)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4413      	add	r3, r2
 8002c26:	460a      	mov	r2, r1
 8002c28:	701a      	strb	r2, [r3, #0]
		NMEA_UART_buffer[UART_buffer_tail] = 0;
 8002c2a:	4b23      	ldr	r3, [pc, #140]	@ (8002cb8 <NMEA_read_line+0xc4>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a23      	ldr	r2, [pc, #140]	@ (8002cbc <NMEA_read_line+0xc8>)
 8002c30:	2100      	movs	r1, #0
 8002c32:	54d1      	strb	r1, [r2, r3]
		UART_buffer_tail = (UART_buffer_tail + 1)%NMEA_UART_BUFFER_SIZE;
 8002c34:	4b20      	ldr	r3, [pc, #128]	@ (8002cb8 <NMEA_read_line+0xc4>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	3301      	adds	r3, #1
 8002c3a:	425a      	negs	r2, r3
 8002c3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c40:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002c44:	bf58      	it	pl
 8002c46:	4253      	negpl	r3, r2
 8002c48:	4a1b      	ldr	r2, [pc, #108]	@ (8002cb8 <NMEA_read_line+0xc4>)
 8002c4a:	6013      	str	r3, [r2, #0]
		++index;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	3301      	adds	r3, #1
 8002c50:	607b      	str	r3, [r7, #4]
	while(NMEA_UART_buffer[UART_buffer_tail]!= '\n' && index < NMEA_WORKING_BUFFER_SIZE-2){
 8002c52:	4b19      	ldr	r3, [pc, #100]	@ (8002cb8 <NMEA_read_line+0xc4>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a19      	ldr	r2, [pc, #100]	@ (8002cbc <NMEA_read_line+0xc8>)
 8002c58:	5cd3      	ldrb	r3, [r2, r3]
 8002c5a:	2b0a      	cmp	r3, #10
 8002c5c:	d002      	beq.n	8002c64 <NMEA_read_line+0x70>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2b7d      	cmp	r3, #125	@ 0x7d
 8002c62:	ddd9      	ble.n	8002c18 <NMEA_read_line+0x24>
	}
	NMEA_working_buffer[index]=NMEA_UART_buffer[UART_buffer_tail];
 8002c64:	4b14      	ldr	r3, [pc, #80]	@ (8002cb8 <NMEA_read_line+0xc4>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a14      	ldr	r2, [pc, #80]	@ (8002cbc <NMEA_read_line+0xc8>)
 8002c6a:	5cd1      	ldrb	r1, [r2, r3]
 8002c6c:	4a11      	ldr	r2, [pc, #68]	@ (8002cb4 <NMEA_read_line+0xc0>)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4413      	add	r3, r2
 8002c72:	460a      	mov	r2, r1
 8002c74:	701a      	strb	r2, [r3, #0]
	NMEA_UART_buffer[UART_buffer_tail] = 0;
 8002c76:	4b10      	ldr	r3, [pc, #64]	@ (8002cb8 <NMEA_read_line+0xc4>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a10      	ldr	r2, [pc, #64]	@ (8002cbc <NMEA_read_line+0xc8>)
 8002c7c:	2100      	movs	r1, #0
 8002c7e:	54d1      	strb	r1, [r2, r3]
	UART_buffer_tail = (UART_buffer_tail + 1)%NMEA_UART_BUFFER_SIZE;
 8002c80:	4b0d      	ldr	r3, [pc, #52]	@ (8002cb8 <NMEA_read_line+0xc4>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	3301      	adds	r3, #1
 8002c86:	425a      	negs	r2, r3
 8002c88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c8c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002c90:	bf58      	it	pl
 8002c92:	4253      	negpl	r3, r2
 8002c94:	4a08      	ldr	r2, [pc, #32]	@ (8002cb8 <NMEA_read_line+0xc4>)
 8002c96:	6013      	str	r3, [r2, #0]
	++index;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	607b      	str	r3, [r7, #4]
	--UART_buffer_lines;
 8002c9e:	4b08      	ldr	r3, [pc, #32]	@ (8002cc0 <NMEA_read_line+0xcc>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	4a06      	ldr	r2, [pc, #24]	@ (8002cc0 <NMEA_read_line+0xcc>)
 8002ca6:	6013      	str	r3, [r2, #0]

}
 8002ca8:	bf00      	nop
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr
 8002cb4:	24000e14 	.word	0x24000e14
 8002cb8:	24000e98 	.word	0x24000e98
 8002cbc:	24000a14 	.word	0x24000a14
 8002cc0:	24000e9c 	.word	0x24000e9c

08002cc4 <NMEA_init>:

void NMEA_init(UART_HandleTypeDef *huart, DMA_HandleTypeDef *DMA){
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
	HAL_Delay(10);
 8002cce:	200a      	movs	r0, #10
 8002cd0:	f003 fe62 	bl	8006998 <HAL_Delay>
	NMEA_huart=huart;
 8002cd4:	4a12      	ldr	r2, [pc, #72]	@ (8002d20 <NMEA_init+0x5c>)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6013      	str	r3, [r2, #0]
	NMEA_DMA=DMA;
 8002cda:	4a12      	ldr	r2, [pc, #72]	@ (8002d24 <NMEA_init+0x60>)
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	6013      	str	r3, [r2, #0]
	__HAL_UART_ENABLE_IT(NMEA_huart,UART_IT_IDLE);
 8002ce0:	4b0f      	ldr	r3, [pc, #60]	@ (8002d20 <NMEA_init+0x5c>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	4b0d      	ldr	r3, [pc, #52]	@ (8002d20 <NMEA_init+0x5c>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f042 0210 	orr.w	r2, r2, #16
 8002cf2:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(NMEA_huart, NMEA_UART_DMA_buffer, NMEA_UART_DMA_BUFFER_SIZE);
 8002cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8002d20 <NMEA_init+0x5c>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cfc:	490a      	ldr	r1, [pc, #40]	@ (8002d28 <NMEA_init+0x64>)
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f00c ff58 	bl	800fbb4 <HAL_UART_Receive_DMA>


	speed_change_CB_fun_ptr = &default_CB;
 8002d04:	4b09      	ldr	r3, [pc, #36]	@ (8002d2c <NMEA_init+0x68>)
 8002d06:	4a0a      	ldr	r2, [pc, #40]	@ (8002d30 <NMEA_init+0x6c>)
 8002d08:	601a      	str	r2, [r3, #0]
	speed_raise_barrier_CB_fun_ptr = &default_CB;
 8002d0a:	4b0a      	ldr	r3, [pc, #40]	@ (8002d34 <NMEA_init+0x70>)
 8002d0c:	4a08      	ldr	r2, [pc, #32]	@ (8002d30 <NMEA_init+0x6c>)
 8002d0e:	601a      	str	r2, [r3, #0]
	speed_fall_barrier_CB_fun_ptr = &default_CB;
 8002d10:	4b09      	ldr	r3, [pc, #36]	@ (8002d38 <NMEA_init+0x74>)
 8002d12:	4a07      	ldr	r2, [pc, #28]	@ (8002d30 <NMEA_init+0x6c>)
 8002d14:	601a      	str	r2, [r3, #0]
}
 8002d16:	bf00      	nop
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	24000eb4 	.word	0x24000eb4
 8002d24:	24000eb8 	.word	0x24000eb8
 8002d28:	24000814 	.word	0x24000814
 8002d2c:	24000ea0 	.word	0x24000ea0
 8002d30:	0800277d 	.word	0x0800277d
 8002d34:	24000ea8 	.word	0x24000ea8
 8002d38:	24000eb0 	.word	0x24000eb0

08002d3c <NMEA_UART_DMA_get_char>:
 * If buffer overflowes, the oldest NMEA message will be deleted to make space for incoming messages.\n
 * If new line character is detected ('\ n'), the line counter (UART_buffer_lines) increases.
 * @param[in]	DMA_char	character from DMA buffer
 * @param[out]	NMEA_status 	is a status code. It should be NMEA_OK. For more information check out NMEA_status documentation.
 */
static NMEA_status NMEA_UART_DMA_get_char(uint8_t DMA_char){
 8002d3c:	b480      	push	{r7}
 8002d3e:	b085      	sub	sp, #20
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	4603      	mov	r3, r0
 8002d44:	71fb      	strb	r3, [r7, #7]
	int position = (UART_buffer_head + 1)%NMEA_UART_BUFFER_SIZE;
 8002d46:	4b2d      	ldr	r3, [pc, #180]	@ (8002dfc <NMEA_UART_DMA_get_char+0xc0>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	425a      	negs	r2, r3
 8002d4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d52:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002d56:	bf58      	it	pl
 8002d58:	4253      	negpl	r3, r2
 8002d5a:	60bb      	str	r3, [r7, #8]
	NMEA_status stat=NMEA_OK;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	73fb      	strb	r3, [r7, #15]

	if (position == UART_buffer_tail){		//buffer overflowed! make space for new message
 8002d60:	4b27      	ldr	r3, [pc, #156]	@ (8002e00 <NMEA_UART_DMA_get_char+0xc4>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68ba      	ldr	r2, [r7, #8]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d130      	bne.n	8002dcc <NMEA_UART_DMA_get_char+0x90>
		while (NMEA_UART_buffer[UART_buffer_tail]!='\n' && NMEA_UART_buffer[UART_buffer_tail]!=0){
 8002d6a:	e010      	b.n	8002d8e <NMEA_UART_DMA_get_char+0x52>
			NMEA_UART_buffer[UART_buffer_tail]=0;
 8002d6c:	4b24      	ldr	r3, [pc, #144]	@ (8002e00 <NMEA_UART_DMA_get_char+0xc4>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a24      	ldr	r2, [pc, #144]	@ (8002e04 <NMEA_UART_DMA_get_char+0xc8>)
 8002d72:	2100      	movs	r1, #0
 8002d74:	54d1      	strb	r1, [r2, r3]
			UART_buffer_tail=(UART_buffer_tail + 1)%NMEA_UART_BUFFER_SIZE;
 8002d76:	4b22      	ldr	r3, [pc, #136]	@ (8002e00 <NMEA_UART_DMA_get_char+0xc4>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	425a      	negs	r2, r3
 8002d7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d82:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002d86:	bf58      	it	pl
 8002d88:	4253      	negpl	r3, r2
 8002d8a:	4a1d      	ldr	r2, [pc, #116]	@ (8002e00 <NMEA_UART_DMA_get_char+0xc4>)
 8002d8c:	6013      	str	r3, [r2, #0]
		while (NMEA_UART_buffer[UART_buffer_tail]!='\n' && NMEA_UART_buffer[UART_buffer_tail]!=0){
 8002d8e:	4b1c      	ldr	r3, [pc, #112]	@ (8002e00 <NMEA_UART_DMA_get_char+0xc4>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a1c      	ldr	r2, [pc, #112]	@ (8002e04 <NMEA_UART_DMA_get_char+0xc8>)
 8002d94:	5cd3      	ldrb	r3, [r2, r3]
 8002d96:	2b0a      	cmp	r3, #10
 8002d98:	d005      	beq.n	8002da6 <NMEA_UART_DMA_get_char+0x6a>
 8002d9a:	4b19      	ldr	r3, [pc, #100]	@ (8002e00 <NMEA_UART_DMA_get_char+0xc4>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a19      	ldr	r2, [pc, #100]	@ (8002e04 <NMEA_UART_DMA_get_char+0xc8>)
 8002da0:	5cd3      	ldrb	r3, [r2, r3]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d1e2      	bne.n	8002d6c <NMEA_UART_DMA_get_char+0x30>
		}
		NMEA_UART_buffer[UART_buffer_tail]=0;
 8002da6:	4b16      	ldr	r3, [pc, #88]	@ (8002e00 <NMEA_UART_DMA_get_char+0xc4>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a16      	ldr	r2, [pc, #88]	@ (8002e04 <NMEA_UART_DMA_get_char+0xc8>)
 8002dac:	2100      	movs	r1, #0
 8002dae:	54d1      	strb	r1, [r2, r3]
		UART_buffer_tail=(UART_buffer_tail + 1)%NMEA_UART_BUFFER_SIZE;
 8002db0:	4b13      	ldr	r3, [pc, #76]	@ (8002e00 <NMEA_UART_DMA_get_char+0xc4>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	3301      	adds	r3, #1
 8002db6:	425a      	negs	r2, r3
 8002db8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dbc:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002dc0:	bf58      	it	pl
 8002dc2:	4253      	negpl	r3, r2
 8002dc4:	4a0e      	ldr	r2, [pc, #56]	@ (8002e00 <NMEA_UART_DMA_get_char+0xc4>)
 8002dc6:	6013      	str	r3, [r2, #0]
		stat=NMEA_BUFFER_OVERFLOWED;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	73fb      	strb	r3, [r7, #15]
	}

	NMEA_UART_buffer[UART_buffer_head]=DMA_char;
 8002dcc:	4b0b      	ldr	r3, [pc, #44]	@ (8002dfc <NMEA_UART_DMA_get_char+0xc0>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	490c      	ldr	r1, [pc, #48]	@ (8002e04 <NMEA_UART_DMA_get_char+0xc8>)
 8002dd2:	79fa      	ldrb	r2, [r7, #7]
 8002dd4:	54ca      	strb	r2, [r1, r3]

	UART_buffer_head=position;
 8002dd6:	4a09      	ldr	r2, [pc, #36]	@ (8002dfc <NMEA_UART_DMA_get_char+0xc0>)
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	6013      	str	r3, [r2, #0]

	if(DMA_char=='\n'){
 8002ddc:	79fb      	ldrb	r3, [r7, #7]
 8002dde:	2b0a      	cmp	r3, #10
 8002de0:	d104      	bne.n	8002dec <NMEA_UART_DMA_get_char+0xb0>
		++UART_buffer_lines;	//increment lines counter
 8002de2:	4b09      	ldr	r3, [pc, #36]	@ (8002e08 <NMEA_UART_DMA_get_char+0xcc>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	3301      	adds	r3, #1
 8002de8:	4a07      	ldr	r2, [pc, #28]	@ (8002e08 <NMEA_UART_DMA_get_char+0xcc>)
 8002dea:	6013      	str	r3, [r2, #0]
	}

	return stat;
 8002dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3714      	adds	r7, #20
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	24000e94 	.word	0x24000e94
 8002e00:	24000e98 	.word	0x24000e98
 8002e04:	24000a14 	.word	0x24000a14
 8002e08:	24000e9c 	.word	0x24000e9c

08002e0c <NMEA_UART_DMA_copy_buffer>:
/**
 * NMEA_UART_DMA_copy_buffer is a function which copies messages from DMA buffer to UART circular buffer.\n
 * To do so, it uses NMEA_UART_DMA_get_char function for every character in NMEA_UART_DMA_buffer from 0 to (NMEA_UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(NMEA_DMA)).
 * @param[out]	NMEA_status 	is a status code. It should be NMEA_OK. For more information check out NMEA_status documentation.
 */
static NMEA_status NMEA_UART_DMA_copy_buffer(void){
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0


	NMEA_status stat=NMEA_OK;
 8002e12:	2300      	movs	r3, #0
 8002e14:	73fb      	strb	r3, [r7, #15]

	int data_length = NMEA_UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(NMEA_DMA);
 8002e16:	4b4b      	ldr	r3, [pc, #300]	@ (8002f44 <NMEA_UART_DMA_copy_buffer+0x138>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a4a      	ldr	r2, [pc, #296]	@ (8002f48 <NMEA_UART_DMA_copy_buffer+0x13c>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d059      	beq.n	8002ed6 <NMEA_UART_DMA_copy_buffer+0xca>
 8002e22:	4b48      	ldr	r3, [pc, #288]	@ (8002f44 <NMEA_UART_DMA_copy_buffer+0x138>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a48      	ldr	r2, [pc, #288]	@ (8002f4c <NMEA_UART_DMA_copy_buffer+0x140>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d053      	beq.n	8002ed6 <NMEA_UART_DMA_copy_buffer+0xca>
 8002e2e:	4b45      	ldr	r3, [pc, #276]	@ (8002f44 <NMEA_UART_DMA_copy_buffer+0x138>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a46      	ldr	r2, [pc, #280]	@ (8002f50 <NMEA_UART_DMA_copy_buffer+0x144>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d04d      	beq.n	8002ed6 <NMEA_UART_DMA_copy_buffer+0xca>
 8002e3a:	4b42      	ldr	r3, [pc, #264]	@ (8002f44 <NMEA_UART_DMA_copy_buffer+0x138>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a44      	ldr	r2, [pc, #272]	@ (8002f54 <NMEA_UART_DMA_copy_buffer+0x148>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d047      	beq.n	8002ed6 <NMEA_UART_DMA_copy_buffer+0xca>
 8002e46:	4b3f      	ldr	r3, [pc, #252]	@ (8002f44 <NMEA_UART_DMA_copy_buffer+0x138>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a42      	ldr	r2, [pc, #264]	@ (8002f58 <NMEA_UART_DMA_copy_buffer+0x14c>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d041      	beq.n	8002ed6 <NMEA_UART_DMA_copy_buffer+0xca>
 8002e52:	4b3c      	ldr	r3, [pc, #240]	@ (8002f44 <NMEA_UART_DMA_copy_buffer+0x138>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a40      	ldr	r2, [pc, #256]	@ (8002f5c <NMEA_UART_DMA_copy_buffer+0x150>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d03b      	beq.n	8002ed6 <NMEA_UART_DMA_copy_buffer+0xca>
 8002e5e:	4b39      	ldr	r3, [pc, #228]	@ (8002f44 <NMEA_UART_DMA_copy_buffer+0x138>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a3e      	ldr	r2, [pc, #248]	@ (8002f60 <NMEA_UART_DMA_copy_buffer+0x154>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d035      	beq.n	8002ed6 <NMEA_UART_DMA_copy_buffer+0xca>
 8002e6a:	4b36      	ldr	r3, [pc, #216]	@ (8002f44 <NMEA_UART_DMA_copy_buffer+0x138>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a3c      	ldr	r2, [pc, #240]	@ (8002f64 <NMEA_UART_DMA_copy_buffer+0x158>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d02f      	beq.n	8002ed6 <NMEA_UART_DMA_copy_buffer+0xca>
 8002e76:	4b33      	ldr	r3, [pc, #204]	@ (8002f44 <NMEA_UART_DMA_copy_buffer+0x138>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a3a      	ldr	r2, [pc, #232]	@ (8002f68 <NMEA_UART_DMA_copy_buffer+0x15c>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d029      	beq.n	8002ed6 <NMEA_UART_DMA_copy_buffer+0xca>
 8002e82:	4b30      	ldr	r3, [pc, #192]	@ (8002f44 <NMEA_UART_DMA_copy_buffer+0x138>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a38      	ldr	r2, [pc, #224]	@ (8002f6c <NMEA_UART_DMA_copy_buffer+0x160>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d023      	beq.n	8002ed6 <NMEA_UART_DMA_copy_buffer+0xca>
 8002e8e:	4b2d      	ldr	r3, [pc, #180]	@ (8002f44 <NMEA_UART_DMA_copy_buffer+0x138>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a36      	ldr	r2, [pc, #216]	@ (8002f70 <NMEA_UART_DMA_copy_buffer+0x164>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d01d      	beq.n	8002ed6 <NMEA_UART_DMA_copy_buffer+0xca>
 8002e9a:	4b2a      	ldr	r3, [pc, #168]	@ (8002f44 <NMEA_UART_DMA_copy_buffer+0x138>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a34      	ldr	r2, [pc, #208]	@ (8002f74 <NMEA_UART_DMA_copy_buffer+0x168>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d017      	beq.n	8002ed6 <NMEA_UART_DMA_copy_buffer+0xca>
 8002ea6:	4b27      	ldr	r3, [pc, #156]	@ (8002f44 <NMEA_UART_DMA_copy_buffer+0x138>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a32      	ldr	r2, [pc, #200]	@ (8002f78 <NMEA_UART_DMA_copy_buffer+0x16c>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d011      	beq.n	8002ed6 <NMEA_UART_DMA_copy_buffer+0xca>
 8002eb2:	4b24      	ldr	r3, [pc, #144]	@ (8002f44 <NMEA_UART_DMA_copy_buffer+0x138>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a30      	ldr	r2, [pc, #192]	@ (8002f7c <NMEA_UART_DMA_copy_buffer+0x170>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d00b      	beq.n	8002ed6 <NMEA_UART_DMA_copy_buffer+0xca>
 8002ebe:	4b21      	ldr	r3, [pc, #132]	@ (8002f44 <NMEA_UART_DMA_copy_buffer+0x138>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a2e      	ldr	r2, [pc, #184]	@ (8002f80 <NMEA_UART_DMA_copy_buffer+0x174>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d005      	beq.n	8002ed6 <NMEA_UART_DMA_copy_buffer+0xca>
 8002eca:	4b1e      	ldr	r3, [pc, #120]	@ (8002f44 <NMEA_UART_DMA_copy_buffer+0x138>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a2c      	ldr	r2, [pc, #176]	@ (8002f84 <NMEA_UART_DMA_copy_buffer+0x178>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d106      	bne.n	8002ee4 <NMEA_UART_DMA_copy_buffer+0xd8>
 8002ed6:	4b1b      	ldr	r3, [pc, #108]	@ (8002f44 <NMEA_UART_DMA_copy_buffer+0x138>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8002ee2:	e005      	b.n	8002ef0 <NMEA_UART_DMA_copy_buffer+0xe4>
 8002ee4:	4b17      	ldr	r3, [pc, #92]	@ (8002f44 <NMEA_UART_DMA_copy_buffer+0x138>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8002ef0:	607b      	str	r3, [r7, #4]

	for (int i = 0; i < data_length; i++){
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	60bb      	str	r3, [r7, #8]
 8002ef6:	e013      	b.n	8002f20 <NMEA_UART_DMA_copy_buffer+0x114>
		if (NMEA_UART_DMA_get_char(NMEA_UART_DMA_buffer[i])==NMEA_BUFFER_OVERFLOWED){
 8002ef8:	4a23      	ldr	r2, [pc, #140]	@ (8002f88 <NMEA_UART_DMA_copy_buffer+0x17c>)
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	4413      	add	r3, r2
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7ff ff1b 	bl	8002d3c <NMEA_UART_DMA_get_char>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d101      	bne.n	8002f10 <NMEA_UART_DMA_copy_buffer+0x104>
			stat=NMEA_BUFFER_OVERFLOWED;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	73fb      	strb	r3, [r7, #15]
		}
		NMEA_UART_DMA_buffer[i]=0;
 8002f10:	4a1d      	ldr	r2, [pc, #116]	@ (8002f88 <NMEA_UART_DMA_copy_buffer+0x17c>)
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	4413      	add	r3, r2
 8002f16:	2200      	movs	r2, #0
 8002f18:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < data_length; i++){
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	60bb      	str	r3, [r7, #8]
 8002f20:	68ba      	ldr	r2, [r7, #8]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	dbe7      	blt.n	8002ef8 <NMEA_UART_DMA_copy_buffer+0xec>
	}

	HAL_UART_Receive_DMA(NMEA_huart, NMEA_UART_DMA_buffer, NMEA_UART_DMA_BUFFER_SIZE);
 8002f28:	4b18      	ldr	r3, [pc, #96]	@ (8002f8c <NMEA_UART_DMA_copy_buffer+0x180>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f30:	4915      	ldr	r1, [pc, #84]	@ (8002f88 <NMEA_UART_DMA_copy_buffer+0x17c>)
 8002f32:	4618      	mov	r0, r3
 8002f34:	f00c fe3e 	bl	800fbb4 <HAL_UART_Receive_DMA>
	return stat;
 8002f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3710      	adds	r7, #16
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	24000eb8 	.word	0x24000eb8
 8002f48:	40020010 	.word	0x40020010
 8002f4c:	40020028 	.word	0x40020028
 8002f50:	40020040 	.word	0x40020040
 8002f54:	40020058 	.word	0x40020058
 8002f58:	40020070 	.word	0x40020070
 8002f5c:	40020088 	.word	0x40020088
 8002f60:	400200a0 	.word	0x400200a0
 8002f64:	400200b8 	.word	0x400200b8
 8002f68:	40020410 	.word	0x40020410
 8002f6c:	40020428 	.word	0x40020428
 8002f70:	40020440 	.word	0x40020440
 8002f74:	40020458 	.word	0x40020458
 8002f78:	40020470 	.word	0x40020470
 8002f7c:	40020488 	.word	0x40020488
 8002f80:	400204a0 	.word	0x400204a0
 8002f84:	400204b8 	.word	0x400204b8
 8002f88:	24000814 	.word	0x24000814
 8002f8c:	24000eb4 	.word	0x24000eb4

08002f90 <NMEA_process_task>:

NMEA_status NMEA_process_task(void){
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
	NMEA_status stat = NMEA_OK;
 8002f96:	2300      	movs	r3, #0
 8002f98:	71fb      	strb	r3, [r7, #7]
	while(UART_buffer_lines>0) {
 8002f9a:	e00d      	b.n	8002fb8 <NMEA_process_task+0x28>
		NMEA_read_line();
 8002f9c:	f7ff fe2a 	bl	8002bf4 <NMEA_read_line>
		if (NMEA_checksum_clc(NMEA_working_buffer) == NMEA_OK){
 8002fa0:	480a      	ldr	r0, [pc, #40]	@ (8002fcc <NMEA_process_task+0x3c>)
 8002fa2:	f7ff fdf1 	bl	8002b88 <NMEA_checksum_clc>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d103      	bne.n	8002fb4 <NMEA_process_task+0x24>
			NMEA_parser((char *)NMEA_working_buffer);
 8002fac:	4807      	ldr	r0, [pc, #28]	@ (8002fcc <NMEA_process_task+0x3c>)
 8002fae:	f7ff fbed 	bl	800278c <NMEA_parser>
 8002fb2:	e001      	b.n	8002fb8 <NMEA_process_task+0x28>
		}else stat = NMEA_CHECKSUM_ERROR;
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	71fb      	strb	r3, [r7, #7]
	while(UART_buffer_lines>0) {
 8002fb8:	4b05      	ldr	r3, [pc, #20]	@ (8002fd0 <NMEA_process_task+0x40>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	dced      	bgt.n	8002f9c <NMEA_process_task+0xc>
	}
	return stat;
 8002fc0:	79fb      	ldrb	r3, [r7, #7]
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3708      	adds	r7, #8
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	24000e14 	.word	0x24000e14
 8002fd0:	24000e9c 	.word	0x24000e9c

08002fd4 <user_UART_IDLE_IT_handler>:

NMEA_status user_UART_IDLE_IT_handler(void){
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
	NMEA_status stat = NMEA_OK;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	71fb      	strb	r3, [r7, #7]
	if (__HAL_UART_GET_FLAG(NMEA_huart, UART_FLAG_IDLE) == SET) {
 8002fde:	4b0d      	ldr	r3, [pc, #52]	@ (8003014 <user_UART_IDLE_IT_handler+0x40>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	69db      	ldr	r3, [r3, #28]
 8002fe6:	f003 0310 	and.w	r3, r3, #16
 8002fea:	2b10      	cmp	r3, #16
 8002fec:	d10d      	bne.n	800300a <user_UART_IDLE_IT_handler+0x36>
		__HAL_UART_CLEAR_FLAG(NMEA_huart,UART_FLAG_IDLE);
 8002fee:	4b09      	ldr	r3, [pc, #36]	@ (8003014 <user_UART_IDLE_IT_handler+0x40>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2210      	movs	r2, #16
 8002ff6:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(NMEA_huart);
 8002ff8:	4b06      	ldr	r3, [pc, #24]	@ (8003014 <user_UART_IDLE_IT_handler+0x40>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f00c fe25 	bl	800fc4c <HAL_UART_DMAStop>
		stat = NMEA_UART_DMA_copy_buffer();
 8003002:	f7ff ff03 	bl	8002e0c <NMEA_UART_DMA_copy_buffer>
 8003006:	4603      	mov	r3, r0
 8003008:	71fb      	strb	r3, [r7, #7]
	}
	return stat;
 800300a:	79fb      	ldrb	r3, [r7, #7]
}
 800300c:	4618      	mov	r0, r3
 800300e:	3708      	adds	r7, #8
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	24000eb4 	.word	0x24000eb4

08003018 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800301c:	f000 f906 	bl	800322c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003020:	f003 fc5e 	bl	80068e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003024:	f000 f842 	bl	80030ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003028:	f7ff fa26 	bl	8002478 <MX_GPIO_Init>
  MX_DMA_Init();
 800302c:	f7fe feb8 	bl	8001da0 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8003030:	f7fe fee6 	bl	8001e00 <MX_FDCAN1_Init>
  MX_I2C3_Init();
 8003034:	f7ff fad2 	bl	80025dc <MX_I2C3_Init>
  MX_SPI1_Init();
 8003038:	f000 f93c 	bl	80032b4 <MX_SPI1_Init>
  MX_SPI2_Init();
 800303c:	f000 f990 	bl	8003360 <MX_SPI2_Init>
  MX_TIM2_Init();
 8003040:	f000 fcc8 	bl	80039d4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003044:	f000 fd42 	bl	8003acc <MX_TIM3_Init>
  MX_TIM4_Init();
 8003048:	f000 fda6 	bl	8003b98 <MX_TIM4_Init>
  MX_UART4_Init();
 800304c:	f000 ff5e 	bl	8003f0c <MX_UART4_Init>
  MX_USART1_UART_Init();
 8003050:	f000 ffa8 	bl	8003fa4 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8003054:	f001 f842 	bl	80040dc <MX_USART6_UART_Init>
  MX_TIM13_Init();
 8003058:	f000 fe1a 	bl	8003c90 <MX_TIM13_Init>
  MX_USART3_UART_Init();
 800305c:	f000 fff2 	bl	8004044 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 8003060:	f00f ffe4 	bl	801302c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  BMP280_init();
 8003064:	f001 ff74 	bl	8004f50 <BMP280_init>
  //SD_init();
  SBUS_init();
 8003068:	f002 ff20 	bl	8005eac <SBUS_init>
  HAL_UART_Receive_DMA(&huart3, &BNO_BufferByte,1);
 800306c:	2201      	movs	r2, #1
 800306e:	4909      	ldr	r1, [pc, #36]	@ (8003094 <main+0x7c>)
 8003070:	4809      	ldr	r0, [pc, #36]	@ (8003098 <main+0x80>)
 8003072:	f00c fd9f 	bl	800fbb4 <HAL_UART_Receive_DMA>
  HAL_UART_Receive_IT(&huart6, &LR03_RxByte,1);
 8003076:	2201      	movs	r2, #1
 8003078:	4908      	ldr	r1, [pc, #32]	@ (800309c <main+0x84>)
 800307a:	4809      	ldr	r0, [pc, #36]	@ (80030a0 <main+0x88>)
 800307c:	f00c fd4e 	bl	800fb1c <HAL_UART_Receive_IT>
  NMEA_init(&huart4, &hdma_uart4_rx);
 8003080:	4908      	ldr	r1, [pc, #32]	@ (80030a4 <main+0x8c>)
 8003082:	4809      	ldr	r0, [pc, #36]	@ (80030a8 <main+0x90>)
 8003084:	f7ff fe1e 	bl	8002cc4 <NMEA_init>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8003088:	f7ff f974 	bl	8002374 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800308c:	f011 fcfd 	bl	8014a8a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003090:	bf00      	nop
 8003092:	e7fd      	b.n	8003090 <main+0x78>
 8003094:	2400167b 	.word	0x2400167b
 8003098:	240012b4 	.word	0x240012b4
 800309c:	24000ef4 	.word	0x24000ef4
 80030a0:	24001348 	.word	0x24001348
 80030a4:	240013dc 	.word	0x240013dc
 80030a8:	2400118c 	.word	0x2400118c

080030ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b09c      	sub	sp, #112	@ 0x70
 80030b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80030b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80030b6:	224c      	movs	r2, #76	@ 0x4c
 80030b8:	2100      	movs	r1, #0
 80030ba:	4618      	mov	r0, r3
 80030bc:	f014 fe5b 	bl	8017d76 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80030c0:	1d3b      	adds	r3, r7, #4
 80030c2:	2220      	movs	r2, #32
 80030c4:	2100      	movs	r1, #0
 80030c6:	4618      	mov	r0, r3
 80030c8:	f014 fe55 	bl	8017d76 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80030cc:	4b30      	ldr	r3, [pc, #192]	@ (8003190 <SystemClock_Config+0xe4>)
 80030ce:	f04f 32ff 	mov.w	r2, #4294967295
 80030d2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80030d6:	2002      	movs	r0, #2
 80030d8:	f007 fb26 	bl	800a728 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80030dc:	2300      	movs	r3, #0
 80030de:	603b      	str	r3, [r7, #0]
 80030e0:	4b2c      	ldr	r3, [pc, #176]	@ (8003194 <SystemClock_Config+0xe8>)
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	4a2b      	ldr	r2, [pc, #172]	@ (8003194 <SystemClock_Config+0xe8>)
 80030e6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80030ea:	6193      	str	r3, [r2, #24]
 80030ec:	4b29      	ldr	r3, [pc, #164]	@ (8003194 <SystemClock_Config+0xe8>)
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80030f4:	603b      	str	r3, [r7, #0]
 80030f6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80030f8:	bf00      	nop
 80030fa:	4b26      	ldr	r3, [pc, #152]	@ (8003194 <SystemClock_Config+0xe8>)
 80030fc:	699b      	ldr	r3, [r3, #24]
 80030fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003102:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003106:	d1f8      	bne.n	80030fa <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003108:	2302      	movs	r3, #2
 800310a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800310c:	2301      	movs	r3, #1
 800310e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8003110:	2340      	movs	r3, #64	@ 0x40
 8003112:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003114:	2302      	movs	r3, #2
 8003116:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003118:	2300      	movs	r3, #0
 800311a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800311c:	2304      	movs	r3, #4
 800311e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 8003120:	2323      	movs	r3, #35	@ 0x23
 8003122:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8003124:	2302      	movs	r3, #2
 8003126:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003128:	2302      	movs	r3, #2
 800312a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800312c:	2302      	movs	r3, #2
 800312e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8003130:	230c      	movs	r3, #12
 8003132:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8003134:	2300      	movs	r3, #0
 8003136:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003138:	2300      	movs	r3, #0
 800313a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800313c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003140:	4618      	mov	r0, r3
 8003142:	f007 fb2b 	bl	800a79c <HAL_RCC_OscConfig>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d001      	beq.n	8003150 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800314c:	f000 f8ac 	bl	80032a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003150:	233f      	movs	r3, #63	@ 0x3f
 8003152:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003154:	2303      	movs	r3, #3
 8003156:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003158:	2300      	movs	r3, #0
 800315a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800315c:	2300      	movs	r3, #0
 800315e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8003160:	2340      	movs	r3, #64	@ 0x40
 8003162:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8003164:	2340      	movs	r3, #64	@ 0x40
 8003166:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8003168:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800316c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800316e:	2340      	movs	r3, #64	@ 0x40
 8003170:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8003172:	1d3b      	adds	r3, r7, #4
 8003174:	2106      	movs	r1, #6
 8003176:	4618      	mov	r0, r3
 8003178:	f007 ff42 	bl	800b000 <HAL_RCC_ClockConfig>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8003182:	f000 f891 	bl	80032a8 <Error_Handler>
  }
}
 8003186:	bf00      	nop
 8003188:	3770      	adds	r7, #112	@ 0x70
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	58024400 	.word	0x58024400
 8003194:	58024800 	.word	0x58024800

08003198 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
	if (huart -> Instance == USART1){
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a18      	ldr	r2, [pc, #96]	@ (8003208 <HAL_UART_RxCpltCallback+0x70>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d10a      	bne.n	80031c0 <HAL_UART_RxCpltCallback+0x28>
		SBUS_Receive(SBUS_RxBuffer);
 80031aa:	4b18      	ldr	r3, [pc, #96]	@ (800320c <HAL_UART_RxCpltCallback+0x74>)
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f002 fe8a 	bl	8005ec8 <SBUS_Receive>
		HAL_UART_Receive_DMA(&huart1, &SBUS_RxBuffer, 1);
 80031b4:	2201      	movs	r2, #1
 80031b6:	4915      	ldr	r1, [pc, #84]	@ (800320c <HAL_UART_RxCpltCallback+0x74>)
 80031b8:	4815      	ldr	r0, [pc, #84]	@ (8003210 <HAL_UART_RxCpltCallback+0x78>)
 80031ba:	f00c fcfb 	bl	800fbb4 <HAL_UART_Receive_DMA>
    }
    else if(huart -> Instance == USART6){
    	LR03_Receive(LR03_RxByte);
    	HAL_UART_Receive_IT(&huart6, &LR03_RxByte,1);
    }
}
 80031be:	e01e      	b.n	80031fe <HAL_UART_RxCpltCallback+0x66>
    else if (huart -> Instance == USART3){
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a13      	ldr	r2, [pc, #76]	@ (8003214 <HAL_UART_RxCpltCallback+0x7c>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d10a      	bne.n	80031e0 <HAL_UART_RxCpltCallback+0x48>
        BNO_Receive(BNO_BufferByte);
 80031ca:	4b13      	ldr	r3, [pc, #76]	@ (8003218 <HAL_UART_RxCpltCallback+0x80>)
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f002 fbf2 	bl	80059b8 <BNO_Receive>
        HAL_UART_Receive_DMA(&huart3, &BNO_BufferByte,1);
 80031d4:	2201      	movs	r2, #1
 80031d6:	4910      	ldr	r1, [pc, #64]	@ (8003218 <HAL_UART_RxCpltCallback+0x80>)
 80031d8:	4810      	ldr	r0, [pc, #64]	@ (800321c <HAL_UART_RxCpltCallback+0x84>)
 80031da:	f00c fceb 	bl	800fbb4 <HAL_UART_Receive_DMA>
}
 80031de:	e00e      	b.n	80031fe <HAL_UART_RxCpltCallback+0x66>
    else if(huart -> Instance == USART6){
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a0e      	ldr	r2, [pc, #56]	@ (8003220 <HAL_UART_RxCpltCallback+0x88>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d109      	bne.n	80031fe <HAL_UART_RxCpltCallback+0x66>
    	LR03_Receive(LR03_RxByte);
 80031ea:	4b0e      	ldr	r3, [pc, #56]	@ (8003224 <HAL_UART_RxCpltCallback+0x8c>)
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f002 fdc4 	bl	8005d7c <LR03_Receive>
    	HAL_UART_Receive_IT(&huart6, &LR03_RxByte,1);
 80031f4:	2201      	movs	r2, #1
 80031f6:	490b      	ldr	r1, [pc, #44]	@ (8003224 <HAL_UART_RxCpltCallback+0x8c>)
 80031f8:	480b      	ldr	r0, [pc, #44]	@ (8003228 <HAL_UART_RxCpltCallback+0x90>)
 80031fa:	f00c fc8f 	bl	800fb1c <HAL_UART_Receive_IT>
}
 80031fe:	bf00      	nop
 8003200:	3708      	adds	r7, #8
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	40011000 	.word	0x40011000
 800320c:	24001805 	.word	0x24001805
 8003210:	24001220 	.word	0x24001220
 8003214:	40004800 	.word	0x40004800
 8003218:	2400167b 	.word	0x2400167b
 800321c:	240012b4 	.word	0x240012b4
 8003220:	40011400 	.word	0x40011400
 8003224:	24000ef4 	.word	0x24000ef4
 8003228:	24001348 	.word	0x24001348

0800322c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8003232:	463b      	mov	r3, r7
 8003234:	2200      	movs	r2, #0
 8003236:	601a      	str	r2, [r3, #0]
 8003238:	605a      	str	r2, [r3, #4]
 800323a:	609a      	str	r2, [r3, #8]
 800323c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800323e:	f003 fcaf 	bl	8006ba0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8003242:	2301      	movs	r3, #1
 8003244:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8003246:	2300      	movs	r3, #0
 8003248:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800324a:	2300      	movs	r3, #0
 800324c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800324e:	231f      	movs	r3, #31
 8003250:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8003252:	2387      	movs	r3, #135	@ 0x87
 8003254:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8003256:	2300      	movs	r3, #0
 8003258:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800325a:	2300      	movs	r3, #0
 800325c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800325e:	2301      	movs	r3, #1
 8003260:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8003262:	2301      	movs	r3, #1
 8003264:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8003266:	2300      	movs	r3, #0
 8003268:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800326a:	2300      	movs	r3, #0
 800326c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800326e:	463b      	mov	r3, r7
 8003270:	4618      	mov	r0, r3
 8003272:	f003 fccd 	bl	8006c10 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8003276:	2004      	movs	r0, #4
 8003278:	f003 fcaa 	bl	8006bd0 <HAL_MPU_Enable>

}
 800327c:	bf00      	nop
 800327e:	3710      	adds	r7, #16
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}

08003284 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a04      	ldr	r2, [pc, #16]	@ (80032a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d101      	bne.n	800329a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003296:	f003 fb5f 	bl	8006958 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800329a:	bf00      	nop
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	40014800 	.word	0x40014800

080032a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80032a8:	b480      	push	{r7}
 80032aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80032ac:	b672      	cpsid	i
}
 80032ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80032b0:	bf00      	nop
 80032b2:	e7fd      	b.n	80032b0 <Error_Handler+0x8>

080032b4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80032b8:	4b27      	ldr	r3, [pc, #156]	@ (8003358 <MX_SPI1_Init+0xa4>)
 80032ba:	4a28      	ldr	r2, [pc, #160]	@ (800335c <MX_SPI1_Init+0xa8>)
 80032bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80032be:	4b26      	ldr	r3, [pc, #152]	@ (8003358 <MX_SPI1_Init+0xa4>)
 80032c0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80032c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80032c6:	4b24      	ldr	r3, [pc, #144]	@ (8003358 <MX_SPI1_Init+0xa4>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80032cc:	4b22      	ldr	r3, [pc, #136]	@ (8003358 <MX_SPI1_Init+0xa4>)
 80032ce:	2207      	movs	r2, #7
 80032d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80032d2:	4b21      	ldr	r3, [pc, #132]	@ (8003358 <MX_SPI1_Init+0xa4>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80032d8:	4b1f      	ldr	r3, [pc, #124]	@ (8003358 <MX_SPI1_Init+0xa4>)
 80032da:	2200      	movs	r2, #0
 80032dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80032de:	4b1e      	ldr	r3, [pc, #120]	@ (8003358 <MX_SPI1_Init+0xa4>)
 80032e0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80032e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80032e6:	4b1c      	ldr	r3, [pc, #112]	@ (8003358 <MX_SPI1_Init+0xa4>)
 80032e8:	f04f 42e0 	mov.w	r2, #1879048192	@ 0x70000000
 80032ec:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80032ee:	4b1a      	ldr	r3, [pc, #104]	@ (8003358 <MX_SPI1_Init+0xa4>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80032f4:	4b18      	ldr	r3, [pc, #96]	@ (8003358 <MX_SPI1_Init+0xa4>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032fa:	4b17      	ldr	r3, [pc, #92]	@ (8003358 <MX_SPI1_Init+0xa4>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8003300:	4b15      	ldr	r3, [pc, #84]	@ (8003358 <MX_SPI1_Init+0xa4>)
 8003302:	2200      	movs	r2, #0
 8003304:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003306:	4b14      	ldr	r3, [pc, #80]	@ (8003358 <MX_SPI1_Init+0xa4>)
 8003308:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800330c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800330e:	4b12      	ldr	r3, [pc, #72]	@ (8003358 <MX_SPI1_Init+0xa4>)
 8003310:	2200      	movs	r2, #0
 8003312:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8003314:	4b10      	ldr	r3, [pc, #64]	@ (8003358 <MX_SPI1_Init+0xa4>)
 8003316:	2200      	movs	r2, #0
 8003318:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800331a:	4b0f      	ldr	r3, [pc, #60]	@ (8003358 <MX_SPI1_Init+0xa4>)
 800331c:	2200      	movs	r2, #0
 800331e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003320:	4b0d      	ldr	r3, [pc, #52]	@ (8003358 <MX_SPI1_Init+0xa4>)
 8003322:	2200      	movs	r2, #0
 8003324:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003326:	4b0c      	ldr	r3, [pc, #48]	@ (8003358 <MX_SPI1_Init+0xa4>)
 8003328:	2200      	movs	r2, #0
 800332a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800332c:	4b0a      	ldr	r3, [pc, #40]	@ (8003358 <MX_SPI1_Init+0xa4>)
 800332e:	2200      	movs	r2, #0
 8003330:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003332:	4b09      	ldr	r3, [pc, #36]	@ (8003358 <MX_SPI1_Init+0xa4>)
 8003334:	2200      	movs	r2, #0
 8003336:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003338:	4b07      	ldr	r3, [pc, #28]	@ (8003358 <MX_SPI1_Init+0xa4>)
 800333a:	2200      	movs	r2, #0
 800333c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800333e:	4b06      	ldr	r3, [pc, #24]	@ (8003358 <MX_SPI1_Init+0xa4>)
 8003340:	2200      	movs	r2, #0
 8003342:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003344:	4804      	ldr	r0, [pc, #16]	@ (8003358 <MX_SPI1_Init+0xa4>)
 8003346:	f00a f809 	bl	800d35c <HAL_SPI_Init>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d001      	beq.n	8003354 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8003350:	f7ff ffaa 	bl	80032a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003354:	bf00      	nop
 8003356:	bd80      	pop	{r7, pc}
 8003358:	24000efc 	.word	0x24000efc
 800335c:	40013000 	.word	0x40013000

08003360 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8003364:	4b27      	ldr	r3, [pc, #156]	@ (8003404 <MX_SPI2_Init+0xa4>)
 8003366:	4a28      	ldr	r2, [pc, #160]	@ (8003408 <MX_SPI2_Init+0xa8>)
 8003368:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800336a:	4b26      	ldr	r3, [pc, #152]	@ (8003404 <MX_SPI2_Init+0xa4>)
 800336c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8003370:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003372:	4b24      	ldr	r3, [pc, #144]	@ (8003404 <MX_SPI2_Init+0xa4>)
 8003374:	2200      	movs	r2, #0
 8003376:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003378:	4b22      	ldr	r3, [pc, #136]	@ (8003404 <MX_SPI2_Init+0xa4>)
 800337a:	2207      	movs	r2, #7
 800337c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800337e:	4b21      	ldr	r3, [pc, #132]	@ (8003404 <MX_SPI2_Init+0xa4>)
 8003380:	2200      	movs	r2, #0
 8003382:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003384:	4b1f      	ldr	r3, [pc, #124]	@ (8003404 <MX_SPI2_Init+0xa4>)
 8003386:	2200      	movs	r2, #0
 8003388:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800338a:	4b1e      	ldr	r3, [pc, #120]	@ (8003404 <MX_SPI2_Init+0xa4>)
 800338c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003390:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8003392:	4b1c      	ldr	r3, [pc, #112]	@ (8003404 <MX_SPI2_Init+0xa4>)
 8003394:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8003398:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800339a:	4b1a      	ldr	r3, [pc, #104]	@ (8003404 <MX_SPI2_Init+0xa4>)
 800339c:	2200      	movs	r2, #0
 800339e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80033a0:	4b18      	ldr	r3, [pc, #96]	@ (8003404 <MX_SPI2_Init+0xa4>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033a6:	4b17      	ldr	r3, [pc, #92]	@ (8003404 <MX_SPI2_Init+0xa4>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80033ac:	4b15      	ldr	r3, [pc, #84]	@ (8003404 <MX_SPI2_Init+0xa4>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80033b2:	4b14      	ldr	r3, [pc, #80]	@ (8003404 <MX_SPI2_Init+0xa4>)
 80033b4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80033b8:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80033ba:	4b12      	ldr	r3, [pc, #72]	@ (8003404 <MX_SPI2_Init+0xa4>)
 80033bc:	2200      	movs	r2, #0
 80033be:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80033c0:	4b10      	ldr	r3, [pc, #64]	@ (8003404 <MX_SPI2_Init+0xa4>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80033c6:	4b0f      	ldr	r3, [pc, #60]	@ (8003404 <MX_SPI2_Init+0xa4>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80033cc:	4b0d      	ldr	r3, [pc, #52]	@ (8003404 <MX_SPI2_Init+0xa4>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80033d2:	4b0c      	ldr	r3, [pc, #48]	@ (8003404 <MX_SPI2_Init+0xa4>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80033d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003404 <MX_SPI2_Init+0xa4>)
 80033da:	2200      	movs	r2, #0
 80033dc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80033de:	4b09      	ldr	r3, [pc, #36]	@ (8003404 <MX_SPI2_Init+0xa4>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80033e4:	4b07      	ldr	r3, [pc, #28]	@ (8003404 <MX_SPI2_Init+0xa4>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80033ea:	4b06      	ldr	r3, [pc, #24]	@ (8003404 <MX_SPI2_Init+0xa4>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80033f0:	4804      	ldr	r0, [pc, #16]	@ (8003404 <MX_SPI2_Init+0xa4>)
 80033f2:	f009 ffb3 	bl	800d35c <HAL_SPI_Init>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d001      	beq.n	8003400 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 80033fc:	f7ff ff54 	bl	80032a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003400:	bf00      	nop
 8003402:	bd80      	pop	{r7, pc}
 8003404:	24000f84 	.word	0x24000f84
 8003408:	40003800 	.word	0x40003800

0800340c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b0bc      	sub	sp, #240	@ 0xf0
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003414:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003418:	2200      	movs	r2, #0
 800341a:	601a      	str	r2, [r3, #0]
 800341c:	605a      	str	r2, [r3, #4]
 800341e:	609a      	str	r2, [r3, #8]
 8003420:	60da      	str	r2, [r3, #12]
 8003422:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003424:	f107 0318 	add.w	r3, r7, #24
 8003428:	22c0      	movs	r2, #192	@ 0xc0
 800342a:	2100      	movs	r1, #0
 800342c:	4618      	mov	r0, r3
 800342e:	f014 fca2 	bl	8017d76 <memset>
  if(spiHandle->Instance==SPI1)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a4c      	ldr	r2, [pc, #304]	@ (8003568 <HAL_SPI_MspInit+0x15c>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d145      	bne.n	80034c8 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800343c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003440:	f04f 0300 	mov.w	r3, #0
 8003444:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8003448:	2300      	movs	r3, #0
 800344a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800344c:	f107 0318 	add.w	r3, r7, #24
 8003450:	4618      	mov	r0, r3
 8003452:	f008 f9a3 	bl	800b79c <HAL_RCCEx_PeriphCLKConfig>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d001      	beq.n	8003460 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 800345c:	f7ff ff24 	bl	80032a8 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003460:	4b42      	ldr	r3, [pc, #264]	@ (800356c <HAL_SPI_MspInit+0x160>)
 8003462:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8003466:	4a41      	ldr	r2, [pc, #260]	@ (800356c <HAL_SPI_MspInit+0x160>)
 8003468:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800346c:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8003470:	4b3e      	ldr	r3, [pc, #248]	@ (800356c <HAL_SPI_MspInit+0x160>)
 8003472:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8003476:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800347a:	617b      	str	r3, [r7, #20]
 800347c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800347e:	4b3b      	ldr	r3, [pc, #236]	@ (800356c <HAL_SPI_MspInit+0x160>)
 8003480:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003484:	4a39      	ldr	r2, [pc, #228]	@ (800356c <HAL_SPI_MspInit+0x160>)
 8003486:	f043 0301 	orr.w	r3, r3, #1
 800348a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800348e:	4b37      	ldr	r3, [pc, #220]	@ (800356c <HAL_SPI_MspInit+0x160>)
 8003490:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003494:	f003 0301 	and.w	r3, r3, #1
 8003498:	613b      	str	r3, [r7, #16]
 800349a:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 800349c:	23e0      	movs	r3, #224	@ 0xe0
 800349e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a2:	2302      	movs	r3, #2
 80034a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a8:	2300      	movs	r3, #0
 80034aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ae:	2300      	movs	r3, #0
 80034b0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80034b4:	2305      	movs	r3, #5
 80034b6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034ba:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80034be:	4619      	mov	r1, r3
 80034c0:	482b      	ldr	r0, [pc, #172]	@ (8003570 <HAL_SPI_MspInit+0x164>)
 80034c2:	f006 fe33 	bl	800a12c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80034c6:	e04a      	b.n	800355e <HAL_SPI_MspInit+0x152>
  else if(spiHandle->Instance==SPI2)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a29      	ldr	r2, [pc, #164]	@ (8003574 <HAL_SPI_MspInit+0x168>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d145      	bne.n	800355e <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80034d2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80034d6:	f04f 0300 	mov.w	r3, #0
 80034da:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80034de:	2300      	movs	r3, #0
 80034e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80034e2:	f107 0318 	add.w	r3, r7, #24
 80034e6:	4618      	mov	r0, r3
 80034e8:	f008 f958 	bl	800b79c <HAL_RCCEx_PeriphCLKConfig>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <HAL_SPI_MspInit+0xea>
      Error_Handler();
 80034f2:	f7ff fed9 	bl	80032a8 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80034f6:	4b1d      	ldr	r3, [pc, #116]	@ (800356c <HAL_SPI_MspInit+0x160>)
 80034f8:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80034fc:	4a1b      	ldr	r2, [pc, #108]	@ (800356c <HAL_SPI_MspInit+0x160>)
 80034fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003502:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8003506:	4b19      	ldr	r3, [pc, #100]	@ (800356c <HAL_SPI_MspInit+0x160>)
 8003508:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800350c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003510:	60fb      	str	r3, [r7, #12]
 8003512:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003514:	4b15      	ldr	r3, [pc, #84]	@ (800356c <HAL_SPI_MspInit+0x160>)
 8003516:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800351a:	4a14      	ldr	r2, [pc, #80]	@ (800356c <HAL_SPI_MspInit+0x160>)
 800351c:	f043 0302 	orr.w	r3, r3, #2
 8003520:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003524:	4b11      	ldr	r3, [pc, #68]	@ (800356c <HAL_SPI_MspInit+0x160>)
 8003526:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	60bb      	str	r3, [r7, #8]
 8003530:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BMP_SCK_Pin|BMP_MISO_Pin|BMP_MOSI_Pin;
 8003532:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8003536:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800353a:	2302      	movs	r3, #2
 800353c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003540:	2300      	movs	r3, #0
 8003542:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003546:	2300      	movs	r3, #0
 8003548:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800354c:	2305      	movs	r3, #5
 800354e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003552:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003556:	4619      	mov	r1, r3
 8003558:	4807      	ldr	r0, [pc, #28]	@ (8003578 <HAL_SPI_MspInit+0x16c>)
 800355a:	f006 fde7 	bl	800a12c <HAL_GPIO_Init>
}
 800355e:	bf00      	nop
 8003560:	37f0      	adds	r7, #240	@ 0xf0
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	40013000 	.word	0x40013000
 800356c:	58024400 	.word	0x58024400
 8003570:	58020000 	.word	0x58020000
 8003574:	40003800 	.word	0x40003800
 8003578:	58020400 	.word	0x58020400

0800357c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003582:	4b0c      	ldr	r3, [pc, #48]	@ (80035b4 <HAL_MspInit+0x38>)
 8003584:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8003588:	4a0a      	ldr	r2, [pc, #40]	@ (80035b4 <HAL_MspInit+0x38>)
 800358a:	f043 0302 	orr.w	r3, r3, #2
 800358e:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8003592:	4b08      	ldr	r3, [pc, #32]	@ (80035b4 <HAL_MspInit+0x38>)
 8003594:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8003598:	f003 0302 	and.w	r3, r3, #2
 800359c:	607b      	str	r3, [r7, #4]
 800359e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80035a0:	2200      	movs	r2, #0
 80035a2:	210f      	movs	r1, #15
 80035a4:	f06f 0001 	mvn.w	r0, #1
 80035a8:	f003 fad2 	bl	8006b50 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035ac:	bf00      	nop
 80035ae:	3708      	adds	r7, #8
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	58024400 	.word	0x58024400

080035b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b08e      	sub	sp, #56	@ 0x38
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2b0f      	cmp	r3, #15
 80035c4:	d844      	bhi.n	8003650 <HAL_InitTick+0x98>
   {
     HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority ,0);
 80035c6:	2200      	movs	r2, #0
 80035c8:	6879      	ldr	r1, [r7, #4]
 80035ca:	2076      	movs	r0, #118	@ 0x76
 80035cc:	f003 fac0 	bl	8006b50 <HAL_NVIC_SetPriority>

     /* Enable the TIM17 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80035d0:	2076      	movs	r0, #118	@ 0x76
 80035d2:	f003 fad7 	bl	8006b84 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 80035d6:	4a24      	ldr	r2, [pc, #144]	@ (8003668 <HAL_InitTick+0xb0>)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 80035dc:	4b23      	ldr	r3, [pc, #140]	@ (800366c <HAL_InitTick+0xb4>)
 80035de:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80035e2:	4a22      	ldr	r2, [pc, #136]	@ (800366c <HAL_InitTick+0xb4>)
 80035e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035e8:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 80035ec:	4b1f      	ldr	r3, [pc, #124]	@ (800366c <HAL_InitTick+0xb4>)
 80035ee:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80035f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035f6:	60bb      	str	r3, [r7, #8]
 80035f8:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80035fa:	f107 020c 	add.w	r2, r7, #12
 80035fe:	f107 0310 	add.w	r3, r7, #16
 8003602:	4611      	mov	r1, r2
 8003604:	4618      	mov	r0, r3
 8003606:	f008 f887 	bl	800b718 <HAL_RCC_GetClockConfig>
  /* Compute TIM17 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800360a:	f008 f86f 	bl	800b6ec <HAL_RCC_GetPCLK2Freq>
 800360e:	4603      	mov	r3, r0
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003614:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003616:	4a16      	ldr	r2, [pc, #88]	@ (8003670 <HAL_InitTick+0xb8>)
 8003618:	fba2 2303 	umull	r2, r3, r2, r3
 800361c:	0c9b      	lsrs	r3, r3, #18
 800361e:	3b01      	subs	r3, #1
 8003620:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8003622:	4b14      	ldr	r3, [pc, #80]	@ (8003674 <HAL_InitTick+0xbc>)
 8003624:	4a14      	ldr	r2, [pc, #80]	@ (8003678 <HAL_InitTick+0xc0>)
 8003626:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8003628:	4b12      	ldr	r3, [pc, #72]	@ (8003674 <HAL_InitTick+0xbc>)
 800362a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800362e:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8003630:	4a10      	ldr	r2, [pc, #64]	@ (8003674 <HAL_InitTick+0xbc>)
 8003632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003634:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8003636:	4b0f      	ldr	r3, [pc, #60]	@ (8003674 <HAL_InitTick+0xbc>)
 8003638:	2200      	movs	r2, #0
 800363a:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800363c:	4b0d      	ldr	r3, [pc, #52]	@ (8003674 <HAL_InitTick+0xbc>)
 800363e:	2200      	movs	r2, #0
 8003640:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8003642:	480c      	ldr	r0, [pc, #48]	@ (8003674 <HAL_InitTick+0xbc>)
 8003644:	f00b f831 	bl	800e6aa <HAL_TIM_Base_Init>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d107      	bne.n	800365e <HAL_InitTick+0xa6>
 800364e:	e001      	b.n	8003654 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e005      	b.n	8003660 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8003654:	4807      	ldr	r0, [pc, #28]	@ (8003674 <HAL_InitTick+0xbc>)
 8003656:	f00b f87f 	bl	800e758 <HAL_TIM_Base_Start_IT>
 800365a:	4603      	mov	r3, r0
 800365c:	e000      	b.n	8003660 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
}
 8003660:	4618      	mov	r0, r3
 8003662:	3738      	adds	r7, #56	@ 0x38
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	240000a4 	.word	0x240000a4
 800366c:	58024400 	.word	0x58024400
 8003670:	431bde83 	.word	0x431bde83
 8003674:	2400100c 	.word	0x2400100c
 8003678:	40014800 	.word	0x40014800

0800367c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800367c:	b480      	push	{r7}
 800367e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003680:	bf00      	nop
 8003682:	e7fd      	b.n	8003680 <NMI_Handler+0x4>

08003684 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003684:	b480      	push	{r7}
 8003686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003688:	bf00      	nop
 800368a:	e7fd      	b.n	8003688 <HardFault_Handler+0x4>

0800368c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800368c:	b480      	push	{r7}
 800368e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003690:	bf00      	nop
 8003692:	e7fd      	b.n	8003690 <MemManage_Handler+0x4>

08003694 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003694:	b480      	push	{r7}
 8003696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003698:	bf00      	nop
 800369a:	e7fd      	b.n	8003698 <BusFault_Handler+0x4>

0800369c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800369c:	b480      	push	{r7}
 800369e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80036a0:	bf00      	nop
 80036a2:	e7fd      	b.n	80036a0 <UsageFault_Handler+0x4>

080036a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80036a4:	b480      	push	{r7}
 80036a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036a8:	bf00      	nop
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
	...

080036b4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80036b8:	4802      	ldr	r0, [pc, #8]	@ (80036c4 <DMA1_Stream0_IRQHandler+0x10>)
 80036ba:	f004 fe45 	bl	8008348 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80036be:	bf00      	nop
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	24001454 	.word	0x24001454

080036c8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80036cc:	4802      	ldr	r0, [pc, #8]	@ (80036d8 <DMA1_Stream1_IRQHandler+0x10>)
 80036ce:	f004 fe3b 	bl	8008348 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80036d2:	bf00      	nop
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	240014cc 	.word	0x240014cc

080036dc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80036e0:	4802      	ldr	r0, [pc, #8]	@ (80036ec <DMA1_Stream2_IRQHandler+0x10>)
 80036e2:	f004 fe31 	bl	8008348 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80036e6:	bf00      	nop
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	240013dc 	.word	0x240013dc

080036f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80036f4:	4802      	ldr	r0, [pc, #8]	@ (8003700 <USART1_IRQHandler+0x10>)
 80036f6:	f00c fc7b 	bl	800fff0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80036fa:	bf00      	nop
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	24001220 	.word	0x24001220

08003704 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003708:	4802      	ldr	r0, [pc, #8]	@ (8003714 <USART3_IRQHandler+0x10>)
 800370a:	f00c fc71 	bl	800fff0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800370e:	bf00      	nop
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	240012b4 	.word	0x240012b4

08003718 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	user_UART_IDLE_IT_handler();
 800371c:	f7ff fc5a 	bl	8002fd4 <user_UART_IDLE_IT_handler>
  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003720:	4802      	ldr	r0, [pc, #8]	@ (800372c <UART4_IRQHandler+0x14>)
 8003722:	f00c fc65 	bl	800fff0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003726:	bf00      	nop
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	2400118c 	.word	0x2400118c

08003730 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003734:	4802      	ldr	r0, [pc, #8]	@ (8003740 <USART6_IRQHandler+0x10>)
 8003736:	f00c fc5b 	bl	800fff0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800373a:	bf00      	nop
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	24001348 	.word	0x24001348

08003744 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8003748:	4802      	ldr	r0, [pc, #8]	@ (8003754 <TIM17_IRQHandler+0x10>)
 800374a:	f00b f9e3 	bl	800eb14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 800374e:	bf00      	nop
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	2400100c 	.word	0x2400100c

08003758 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003758:	b480      	push	{r7}
 800375a:	af00      	add	r7, sp, #0
  return 1;
 800375c:	2301      	movs	r3, #1
}
 800375e:	4618      	mov	r0, r3
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <_kill>:

int _kill(int pid, int sig)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003772:	f014 fb6d 	bl	8017e50 <__errno>
 8003776:	4603      	mov	r3, r0
 8003778:	2216      	movs	r2, #22
 800377a:	601a      	str	r2, [r3, #0]
  return -1;
 800377c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003780:	4618      	mov	r0, r3
 8003782:	3708      	adds	r7, #8
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <_exit>:

void _exit (int status)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003790:	f04f 31ff 	mov.w	r1, #4294967295
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f7ff ffe7 	bl	8003768 <_kill>
  while (1) {}    /* Make sure we hang here */
 800379a:	bf00      	nop
 800379c:	e7fd      	b.n	800379a <_exit+0x12>

0800379e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800379e:	b580      	push	{r7, lr}
 80037a0:	b086      	sub	sp, #24
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	60f8      	str	r0, [r7, #12]
 80037a6:	60b9      	str	r1, [r7, #8]
 80037a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037aa:	2300      	movs	r3, #0
 80037ac:	617b      	str	r3, [r7, #20]
 80037ae:	e00a      	b.n	80037c6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80037b0:	f3af 8000 	nop.w
 80037b4:	4601      	mov	r1, r0
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	1c5a      	adds	r2, r3, #1
 80037ba:	60ba      	str	r2, [r7, #8]
 80037bc:	b2ca      	uxtb	r2, r1
 80037be:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	3301      	adds	r3, #1
 80037c4:	617b      	str	r3, [r7, #20]
 80037c6:	697a      	ldr	r2, [r7, #20]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	dbf0      	blt.n	80037b0 <_read+0x12>
  }

  return len;
 80037ce:	687b      	ldr	r3, [r7, #4]
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3718      	adds	r7, #24
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037e4:	2300      	movs	r3, #0
 80037e6:	617b      	str	r3, [r7, #20]
 80037e8:	e009      	b.n	80037fe <_write+0x26>
  {
    __io_putchar(*ptr++);
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	1c5a      	adds	r2, r3, #1
 80037ee:	60ba      	str	r2, [r7, #8]
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	4618      	mov	r0, r3
 80037f4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	3301      	adds	r3, #1
 80037fc:	617b      	str	r3, [r7, #20]
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	429a      	cmp	r2, r3
 8003804:	dbf1      	blt.n	80037ea <_write+0x12>
  }
  return len;
 8003806:	687b      	ldr	r3, [r7, #4]
}
 8003808:	4618      	mov	r0, r3
 800380a:	3718      	adds	r7, #24
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <_close>:

int _close(int file)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003818:	f04f 33ff 	mov.w	r3, #4294967295
}
 800381c:	4618      	mov	r0, r3
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003838:	605a      	str	r2, [r3, #4]
  return 0;
 800383a:	2300      	movs	r3, #0
}
 800383c:	4618      	mov	r0, r3
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <_isatty>:

int _isatty(int file)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003850:	2301      	movs	r3, #1
}
 8003852:	4618      	mov	r0, r3
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr

0800385e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800385e:	b480      	push	{r7}
 8003860:	b085      	sub	sp, #20
 8003862:	af00      	add	r7, sp, #0
 8003864:	60f8      	str	r0, [r7, #12]
 8003866:	60b9      	str	r1, [r7, #8]
 8003868:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	3714      	adds	r7, #20
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b086      	sub	sp, #24
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003880:	4a14      	ldr	r2, [pc, #80]	@ (80038d4 <_sbrk+0x5c>)
 8003882:	4b15      	ldr	r3, [pc, #84]	@ (80038d8 <_sbrk+0x60>)
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800388c:	4b13      	ldr	r3, [pc, #76]	@ (80038dc <_sbrk+0x64>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d102      	bne.n	800389a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003894:	4b11      	ldr	r3, [pc, #68]	@ (80038dc <_sbrk+0x64>)
 8003896:	4a12      	ldr	r2, [pc, #72]	@ (80038e0 <_sbrk+0x68>)
 8003898:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800389a:	4b10      	ldr	r3, [pc, #64]	@ (80038dc <_sbrk+0x64>)
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4413      	add	r3, r2
 80038a2:	693a      	ldr	r2, [r7, #16]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d207      	bcs.n	80038b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80038a8:	f014 fad2 	bl	8017e50 <__errno>
 80038ac:	4603      	mov	r3, r0
 80038ae:	220c      	movs	r2, #12
 80038b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80038b2:	f04f 33ff 	mov.w	r3, #4294967295
 80038b6:	e009      	b.n	80038cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80038b8:	4b08      	ldr	r3, [pc, #32]	@ (80038dc <_sbrk+0x64>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80038be:	4b07      	ldr	r3, [pc, #28]	@ (80038dc <_sbrk+0x64>)
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4413      	add	r3, r2
 80038c6:	4a05      	ldr	r2, [pc, #20]	@ (80038dc <_sbrk+0x64>)
 80038c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80038ca:	68fb      	ldr	r3, [r7, #12]
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3718      	adds	r7, #24
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	24100000 	.word	0x24100000
 80038d8:	00000400 	.word	0x00000400
 80038dc:	24001058 	.word	0x24001058
 80038e0:	24006978 	.word	0x24006978

080038e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80038e4:	b480      	push	{r7}
 80038e6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80038e8:	4b32      	ldr	r3, [pc, #200]	@ (80039b4 <SystemInit+0xd0>)
 80038ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038ee:	4a31      	ldr	r2, [pc, #196]	@ (80039b4 <SystemInit+0xd0>)
 80038f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80038f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80038f8:	4b2f      	ldr	r3, [pc, #188]	@ (80039b8 <SystemInit+0xd4>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 030f 	and.w	r3, r3, #15
 8003900:	2b02      	cmp	r3, #2
 8003902:	d807      	bhi.n	8003914 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003904:	4b2c      	ldr	r3, [pc, #176]	@ (80039b8 <SystemInit+0xd4>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f023 030f 	bic.w	r3, r3, #15
 800390c:	4a2a      	ldr	r2, [pc, #168]	@ (80039b8 <SystemInit+0xd4>)
 800390e:	f043 0303 	orr.w	r3, r3, #3
 8003912:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003914:	4b29      	ldr	r3, [pc, #164]	@ (80039bc <SystemInit+0xd8>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a28      	ldr	r2, [pc, #160]	@ (80039bc <SystemInit+0xd8>)
 800391a:	f043 0301 	orr.w	r3, r3, #1
 800391e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003920:	4b26      	ldr	r3, [pc, #152]	@ (80039bc <SystemInit+0xd8>)
 8003922:	2200      	movs	r2, #0
 8003924:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003926:	4b25      	ldr	r3, [pc, #148]	@ (80039bc <SystemInit+0xd8>)
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	4924      	ldr	r1, [pc, #144]	@ (80039bc <SystemInit+0xd8>)
 800392c:	4b24      	ldr	r3, [pc, #144]	@ (80039c0 <SystemInit+0xdc>)
 800392e:	4013      	ands	r3, r2
 8003930:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003932:	4b21      	ldr	r3, [pc, #132]	@ (80039b8 <SystemInit+0xd4>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 030c 	and.w	r3, r3, #12
 800393a:	2b00      	cmp	r3, #0
 800393c:	d007      	beq.n	800394e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800393e:	4b1e      	ldr	r3, [pc, #120]	@ (80039b8 <SystemInit+0xd4>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f023 030f 	bic.w	r3, r3, #15
 8003946:	4a1c      	ldr	r2, [pc, #112]	@ (80039b8 <SystemInit+0xd4>)
 8003948:	f043 0303 	orr.w	r3, r3, #3
 800394c:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800394e:	4b1b      	ldr	r3, [pc, #108]	@ (80039bc <SystemInit+0xd8>)
 8003950:	2200      	movs	r2, #0
 8003952:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8003954:	4b19      	ldr	r3, [pc, #100]	@ (80039bc <SystemInit+0xd8>)
 8003956:	2200      	movs	r2, #0
 8003958:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800395a:	4b18      	ldr	r3, [pc, #96]	@ (80039bc <SystemInit+0xd8>)
 800395c:	2200      	movs	r2, #0
 800395e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003960:	4b16      	ldr	r3, [pc, #88]	@ (80039bc <SystemInit+0xd8>)
 8003962:	4a18      	ldr	r2, [pc, #96]	@ (80039c4 <SystemInit+0xe0>)
 8003964:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003966:	4b15      	ldr	r3, [pc, #84]	@ (80039bc <SystemInit+0xd8>)
 8003968:	4a17      	ldr	r2, [pc, #92]	@ (80039c8 <SystemInit+0xe4>)
 800396a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800396c:	4b13      	ldr	r3, [pc, #76]	@ (80039bc <SystemInit+0xd8>)
 800396e:	4a17      	ldr	r2, [pc, #92]	@ (80039cc <SystemInit+0xe8>)
 8003970:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003972:	4b12      	ldr	r3, [pc, #72]	@ (80039bc <SystemInit+0xd8>)
 8003974:	2200      	movs	r2, #0
 8003976:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003978:	4b10      	ldr	r3, [pc, #64]	@ (80039bc <SystemInit+0xd8>)
 800397a:	4a14      	ldr	r2, [pc, #80]	@ (80039cc <SystemInit+0xe8>)
 800397c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800397e:	4b0f      	ldr	r3, [pc, #60]	@ (80039bc <SystemInit+0xd8>)
 8003980:	2200      	movs	r2, #0
 8003982:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003984:	4b0d      	ldr	r3, [pc, #52]	@ (80039bc <SystemInit+0xd8>)
 8003986:	4a11      	ldr	r2, [pc, #68]	@ (80039cc <SystemInit+0xe8>)
 8003988:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800398a:	4b0c      	ldr	r3, [pc, #48]	@ (80039bc <SystemInit+0xd8>)
 800398c:	2200      	movs	r2, #0
 800398e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003990:	4b0a      	ldr	r3, [pc, #40]	@ (80039bc <SystemInit+0xd8>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a09      	ldr	r2, [pc, #36]	@ (80039bc <SystemInit+0xd8>)
 8003996:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800399a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800399c:	4b07      	ldr	r3, [pc, #28]	@ (80039bc <SystemInit+0xd8>)
 800399e:	2200      	movs	r2, #0
 80039a0:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80039a2:	4b0b      	ldr	r3, [pc, #44]	@ (80039d0 <SystemInit+0xec>)
 80039a4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80039a8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80039aa:	bf00      	nop
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr
 80039b4:	e000ed00 	.word	0xe000ed00
 80039b8:	52002000 	.word	0x52002000
 80039bc:	58024400 	.word	0x58024400
 80039c0:	eaf6ed7f 	.word	0xeaf6ed7f
 80039c4:	02020200 	.word	0x02020200
 80039c8:	01ff0000 	.word	0x01ff0000
 80039cc:	01010280 	.word	0x01010280
 80039d0:	52004000 	.word	0x52004000

080039d4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim13;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b08a      	sub	sp, #40	@ 0x28
 80039d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039da:	f107 031c 	add.w	r3, r7, #28
 80039de:	2200      	movs	r2, #0
 80039e0:	601a      	str	r2, [r3, #0]
 80039e2:	605a      	str	r2, [r3, #4]
 80039e4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80039e6:	463b      	mov	r3, r7
 80039e8:	2200      	movs	r2, #0
 80039ea:	601a      	str	r2, [r3, #0]
 80039ec:	605a      	str	r2, [r3, #4]
 80039ee:	609a      	str	r2, [r3, #8]
 80039f0:	60da      	str	r2, [r3, #12]
 80039f2:	611a      	str	r2, [r3, #16]
 80039f4:	615a      	str	r2, [r3, #20]
 80039f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80039f8:	4b33      	ldr	r3, [pc, #204]	@ (8003ac8 <MX_TIM2_Init+0xf4>)
 80039fa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80039fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 280-1;
 8003a00:	4b31      	ldr	r3, [pc, #196]	@ (8003ac8 <MX_TIM2_Init+0xf4>)
 8003a02:	f240 1217 	movw	r2, #279	@ 0x117
 8003a06:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a08:	4b2f      	ldr	r3, [pc, #188]	@ (8003ac8 <MX_TIM2_Init+0xf4>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7000;
 8003a0e:	4b2e      	ldr	r3, [pc, #184]	@ (8003ac8 <MX_TIM2_Init+0xf4>)
 8003a10:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8003a14:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a16:	4b2c      	ldr	r3, [pc, #176]	@ (8003ac8 <MX_TIM2_Init+0xf4>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003a1c:	4b2a      	ldr	r3, [pc, #168]	@ (8003ac8 <MX_TIM2_Init+0xf4>)
 8003a1e:	2280      	movs	r2, #128	@ 0x80
 8003a20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003a22:	4829      	ldr	r0, [pc, #164]	@ (8003ac8 <MX_TIM2_Init+0xf4>)
 8003a24:	f00a ff10 	bl	800e848 <HAL_TIM_PWM_Init>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d001      	beq.n	8003a32 <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 8003a2e:	f7ff fc3b 	bl	80032a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a32:	2300      	movs	r3, #0
 8003a34:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a36:	2300      	movs	r3, #0
 8003a38:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003a3a:	f107 031c 	add.w	r3, r7, #28
 8003a3e:	4619      	mov	r1, r3
 8003a40:	4821      	ldr	r0, [pc, #132]	@ (8003ac8 <MX_TIM2_Init+0xf4>)
 8003a42:	f00b fe4d 	bl	800f6e0 <HAL_TIMEx_MasterConfigSynchronization>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d001      	beq.n	8003a50 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8003a4c:	f7ff fc2c 	bl	80032a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a50:	2360      	movs	r3, #96	@ 0x60
 8003a52:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003a54:	2300      	movs	r3, #0
 8003a56:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003a60:	463b      	mov	r3, r7
 8003a62:	2200      	movs	r2, #0
 8003a64:	4619      	mov	r1, r3
 8003a66:	4818      	ldr	r0, [pc, #96]	@ (8003ac8 <MX_TIM2_Init+0xf4>)
 8003a68:	f00b f95c 	bl	800ed24 <HAL_TIM_PWM_ConfigChannel>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d001      	beq.n	8003a76 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8003a72:	f7ff fc19 	bl	80032a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003a76:	463b      	mov	r3, r7
 8003a78:	2204      	movs	r2, #4
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	4812      	ldr	r0, [pc, #72]	@ (8003ac8 <MX_TIM2_Init+0xf4>)
 8003a7e:	f00b f951 	bl	800ed24 <HAL_TIM_PWM_ConfigChannel>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d001      	beq.n	8003a8c <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8003a88:	f7ff fc0e 	bl	80032a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003a8c:	463b      	mov	r3, r7
 8003a8e:	2208      	movs	r2, #8
 8003a90:	4619      	mov	r1, r3
 8003a92:	480d      	ldr	r0, [pc, #52]	@ (8003ac8 <MX_TIM2_Init+0xf4>)
 8003a94:	f00b f946 	bl	800ed24 <HAL_TIM_PWM_ConfigChannel>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d001      	beq.n	8003aa2 <MX_TIM2_Init+0xce>
  {
    Error_Handler();
 8003a9e:	f7ff fc03 	bl	80032a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003aa2:	463b      	mov	r3, r7
 8003aa4:	220c      	movs	r2, #12
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	4807      	ldr	r0, [pc, #28]	@ (8003ac8 <MX_TIM2_Init+0xf4>)
 8003aaa:	f00b f93b 	bl	800ed24 <HAL_TIM_PWM_ConfigChannel>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d001      	beq.n	8003ab8 <MX_TIM2_Init+0xe4>
  {
    Error_Handler();
 8003ab4:	f7ff fbf8 	bl	80032a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003ab8:	4803      	ldr	r0, [pc, #12]	@ (8003ac8 <MX_TIM2_Init+0xf4>)
 8003aba:	f000 f97d 	bl	8003db8 <HAL_TIM_MspPostInit>

}
 8003abe:	bf00      	nop
 8003ac0:	3728      	adds	r7, #40	@ 0x28
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	2400105c 	.word	0x2400105c

08003acc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b08a      	sub	sp, #40	@ 0x28
 8003ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ad2:	f107 031c 	add.w	r3, r7, #28
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	601a      	str	r2, [r3, #0]
 8003ada:	605a      	str	r2, [r3, #4]
 8003adc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003ade:	463b      	mov	r3, r7
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	601a      	str	r2, [r3, #0]
 8003ae4:	605a      	str	r2, [r3, #4]
 8003ae6:	609a      	str	r2, [r3, #8]
 8003ae8:	60da      	str	r2, [r3, #12]
 8003aea:	611a      	str	r2, [r3, #16]
 8003aec:	615a      	str	r2, [r3, #20]
 8003aee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003af0:	4b27      	ldr	r3, [pc, #156]	@ (8003b90 <MX_TIM3_Init+0xc4>)
 8003af2:	4a28      	ldr	r2, [pc, #160]	@ (8003b94 <MX_TIM3_Init+0xc8>)
 8003af4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 280-1;
 8003af6:	4b26      	ldr	r3, [pc, #152]	@ (8003b90 <MX_TIM3_Init+0xc4>)
 8003af8:	f240 1217 	movw	r2, #279	@ 0x117
 8003afc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003afe:	4b24      	ldr	r3, [pc, #144]	@ (8003b90 <MX_TIM3_Init+0xc4>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7000;
 8003b04:	4b22      	ldr	r3, [pc, #136]	@ (8003b90 <MX_TIM3_Init+0xc4>)
 8003b06:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8003b0a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b0c:	4b20      	ldr	r3, [pc, #128]	@ (8003b90 <MX_TIM3_Init+0xc4>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003b12:	4b1f      	ldr	r3, [pc, #124]	@ (8003b90 <MX_TIM3_Init+0xc4>)
 8003b14:	2280      	movs	r2, #128	@ 0x80
 8003b16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003b18:	481d      	ldr	r0, [pc, #116]	@ (8003b90 <MX_TIM3_Init+0xc4>)
 8003b1a:	f00a fe95 	bl	800e848 <HAL_TIM_PWM_Init>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d001      	beq.n	8003b28 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8003b24:	f7ff fbc0 	bl	80032a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003b30:	f107 031c 	add.w	r3, r7, #28
 8003b34:	4619      	mov	r1, r3
 8003b36:	4816      	ldr	r0, [pc, #88]	@ (8003b90 <MX_TIM3_Init+0xc4>)
 8003b38:	f00b fdd2 	bl	800f6e0 <HAL_TIMEx_MasterConfigSynchronization>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d001      	beq.n	8003b46 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8003b42:	f7ff fbb1 	bl	80032a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003b46:	2360      	movs	r3, #96	@ 0x60
 8003b48:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003b52:	2300      	movs	r3, #0
 8003b54:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003b56:	463b      	mov	r3, r7
 8003b58:	2200      	movs	r2, #0
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	480c      	ldr	r0, [pc, #48]	@ (8003b90 <MX_TIM3_Init+0xc4>)
 8003b5e:	f00b f8e1 	bl	800ed24 <HAL_TIM_PWM_ConfigChannel>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d001      	beq.n	8003b6c <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8003b68:	f7ff fb9e 	bl	80032a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003b6c:	463b      	mov	r3, r7
 8003b6e:	2204      	movs	r2, #4
 8003b70:	4619      	mov	r1, r3
 8003b72:	4807      	ldr	r0, [pc, #28]	@ (8003b90 <MX_TIM3_Init+0xc4>)
 8003b74:	f00b f8d6 	bl	800ed24 <HAL_TIM_PWM_ConfigChannel>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d001      	beq.n	8003b82 <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 8003b7e:	f7ff fb93 	bl	80032a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003b82:	4803      	ldr	r0, [pc, #12]	@ (8003b90 <MX_TIM3_Init+0xc4>)
 8003b84:	f000 f918 	bl	8003db8 <HAL_TIM_MspPostInit>

}
 8003b88:	bf00      	nop
 8003b8a:	3728      	adds	r7, #40	@ 0x28
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	240010a8 	.word	0x240010a8
 8003b94:	40000400 	.word	0x40000400

08003b98 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b08a      	sub	sp, #40	@ 0x28
 8003b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b9e:	f107 031c 	add.w	r3, r7, #28
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	601a      	str	r2, [r3, #0]
 8003ba6:	605a      	str	r2, [r3, #4]
 8003ba8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003baa:	463b      	mov	r3, r7
 8003bac:	2200      	movs	r2, #0
 8003bae:	601a      	str	r2, [r3, #0]
 8003bb0:	605a      	str	r2, [r3, #4]
 8003bb2:	609a      	str	r2, [r3, #8]
 8003bb4:	60da      	str	r2, [r3, #12]
 8003bb6:	611a      	str	r2, [r3, #16]
 8003bb8:	615a      	str	r2, [r3, #20]
 8003bba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003bbc:	4b32      	ldr	r3, [pc, #200]	@ (8003c88 <MX_TIM4_Init+0xf0>)
 8003bbe:	4a33      	ldr	r2, [pc, #204]	@ (8003c8c <MX_TIM4_Init+0xf4>)
 8003bc0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 280-1;
 8003bc2:	4b31      	ldr	r3, [pc, #196]	@ (8003c88 <MX_TIM4_Init+0xf0>)
 8003bc4:	f240 1217 	movw	r2, #279	@ 0x117
 8003bc8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bca:	4b2f      	ldr	r3, [pc, #188]	@ (8003c88 <MX_TIM4_Init+0xf0>)
 8003bcc:	2200      	movs	r2, #0
 8003bce:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 7000;
 8003bd0:	4b2d      	ldr	r3, [pc, #180]	@ (8003c88 <MX_TIM4_Init+0xf0>)
 8003bd2:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8003bd6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bd8:	4b2b      	ldr	r3, [pc, #172]	@ (8003c88 <MX_TIM4_Init+0xf0>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003bde:	4b2a      	ldr	r3, [pc, #168]	@ (8003c88 <MX_TIM4_Init+0xf0>)
 8003be0:	2280      	movs	r2, #128	@ 0x80
 8003be2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003be4:	4828      	ldr	r0, [pc, #160]	@ (8003c88 <MX_TIM4_Init+0xf0>)
 8003be6:	f00a fe2f 	bl	800e848 <HAL_TIM_PWM_Init>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d001      	beq.n	8003bf4 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 8003bf0:	f7ff fb5a 	bl	80032a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003bfc:	f107 031c 	add.w	r3, r7, #28
 8003c00:	4619      	mov	r1, r3
 8003c02:	4821      	ldr	r0, [pc, #132]	@ (8003c88 <MX_TIM4_Init+0xf0>)
 8003c04:	f00b fd6c 	bl	800f6e0 <HAL_TIMEx_MasterConfigSynchronization>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d001      	beq.n	8003c12 <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 8003c0e:	f7ff fb4b 	bl	80032a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003c12:	2360      	movs	r3, #96	@ 0x60
 8003c14:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003c16:	2300      	movs	r3, #0
 8003c18:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003c22:	463b      	mov	r3, r7
 8003c24:	2200      	movs	r2, #0
 8003c26:	4619      	mov	r1, r3
 8003c28:	4817      	ldr	r0, [pc, #92]	@ (8003c88 <MX_TIM4_Init+0xf0>)
 8003c2a:	f00b f87b 	bl	800ed24 <HAL_TIM_PWM_ConfigChannel>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d001      	beq.n	8003c38 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8003c34:	f7ff fb38 	bl	80032a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003c38:	463b      	mov	r3, r7
 8003c3a:	2204      	movs	r2, #4
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	4812      	ldr	r0, [pc, #72]	@ (8003c88 <MX_TIM4_Init+0xf0>)
 8003c40:	f00b f870 	bl	800ed24 <HAL_TIM_PWM_ConfigChannel>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d001      	beq.n	8003c4e <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 8003c4a:	f7ff fb2d 	bl	80032a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003c4e:	463b      	mov	r3, r7
 8003c50:	2208      	movs	r2, #8
 8003c52:	4619      	mov	r1, r3
 8003c54:	480c      	ldr	r0, [pc, #48]	@ (8003c88 <MX_TIM4_Init+0xf0>)
 8003c56:	f00b f865 	bl	800ed24 <HAL_TIM_PWM_ConfigChannel>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d001      	beq.n	8003c64 <MX_TIM4_Init+0xcc>
  {
    Error_Handler();
 8003c60:	f7ff fb22 	bl	80032a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003c64:	463b      	mov	r3, r7
 8003c66:	220c      	movs	r2, #12
 8003c68:	4619      	mov	r1, r3
 8003c6a:	4807      	ldr	r0, [pc, #28]	@ (8003c88 <MX_TIM4_Init+0xf0>)
 8003c6c:	f00b f85a 	bl	800ed24 <HAL_TIM_PWM_ConfigChannel>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d001      	beq.n	8003c7a <MX_TIM4_Init+0xe2>
  {
    Error_Handler();
 8003c76:	f7ff fb17 	bl	80032a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003c7a:	4803      	ldr	r0, [pc, #12]	@ (8003c88 <MX_TIM4_Init+0xf0>)
 8003c7c:	f000 f89c 	bl	8003db8 <HAL_TIM_MspPostInit>

}
 8003c80:	bf00      	nop
 8003c82:	3728      	adds	r7, #40	@ 0x28
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	240010f4 	.word	0x240010f4
 8003c8c:	40000800 	.word	0x40000800

08003c90 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8003c94:	4b0e      	ldr	r3, [pc, #56]	@ (8003cd0 <MX_TIM13_Init+0x40>)
 8003c96:	4a0f      	ldr	r2, [pc, #60]	@ (8003cd4 <MX_TIM13_Init+0x44>)
 8003c98:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 280-1;
 8003c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8003cd0 <MX_TIM13_Init+0x40>)
 8003c9c:	f240 1217 	movw	r2, #279	@ 0x117
 8003ca0:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ca2:	4b0b      	ldr	r3, [pc, #44]	@ (8003cd0 <MX_TIM13_Init+0x40>)
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8003ca8:	4b09      	ldr	r3, [pc, #36]	@ (8003cd0 <MX_TIM13_Init+0x40>)
 8003caa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003cae:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003cb0:	4b07      	ldr	r3, [pc, #28]	@ (8003cd0 <MX_TIM13_Init+0x40>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003cb6:	4b06      	ldr	r3, [pc, #24]	@ (8003cd0 <MX_TIM13_Init+0x40>)
 8003cb8:	2280      	movs	r2, #128	@ 0x80
 8003cba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8003cbc:	4804      	ldr	r0, [pc, #16]	@ (8003cd0 <MX_TIM13_Init+0x40>)
 8003cbe:	f00a fcf4 	bl	800e6aa <HAL_TIM_Base_Init>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d001      	beq.n	8003ccc <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8003cc8:	f7ff faee 	bl	80032a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8003ccc:	bf00      	nop
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	24001140 	.word	0x24001140
 8003cd4:	40001c00 	.word	0x40001c00

08003cd8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b087      	sub	sp, #28
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ce8:	d10f      	bne.n	8003d0a <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003cea:	4b1f      	ldr	r3, [pc, #124]	@ (8003d68 <HAL_TIM_PWM_MspInit+0x90>)
 8003cec:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003cf0:	4a1d      	ldr	r2, [pc, #116]	@ (8003d68 <HAL_TIM_PWM_MspInit+0x90>)
 8003cf2:	f043 0301 	orr.w	r3, r3, #1
 8003cf6:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8003cfa:	4b1b      	ldr	r3, [pc, #108]	@ (8003d68 <HAL_TIM_PWM_MspInit+0x90>)
 8003cfc:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003d00:	f003 0301 	and.w	r3, r3, #1
 8003d04:	617b      	str	r3, [r7, #20]
 8003d06:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003d08:	e028      	b.n	8003d5c <HAL_TIM_PWM_MspInit+0x84>
  else if(tim_pwmHandle->Instance==TIM3)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a17      	ldr	r2, [pc, #92]	@ (8003d6c <HAL_TIM_PWM_MspInit+0x94>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d10f      	bne.n	8003d34 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003d14:	4b14      	ldr	r3, [pc, #80]	@ (8003d68 <HAL_TIM_PWM_MspInit+0x90>)
 8003d16:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003d1a:	4a13      	ldr	r2, [pc, #76]	@ (8003d68 <HAL_TIM_PWM_MspInit+0x90>)
 8003d1c:	f043 0302 	orr.w	r3, r3, #2
 8003d20:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8003d24:	4b10      	ldr	r3, [pc, #64]	@ (8003d68 <HAL_TIM_PWM_MspInit+0x90>)
 8003d26:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003d2a:	f003 0302 	and.w	r3, r3, #2
 8003d2e:	613b      	str	r3, [r7, #16]
 8003d30:	693b      	ldr	r3, [r7, #16]
}
 8003d32:	e013      	b.n	8003d5c <HAL_TIM_PWM_MspInit+0x84>
  else if(tim_pwmHandle->Instance==TIM4)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a0d      	ldr	r2, [pc, #52]	@ (8003d70 <HAL_TIM_PWM_MspInit+0x98>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d10e      	bne.n	8003d5c <HAL_TIM_PWM_MspInit+0x84>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003d3e:	4b0a      	ldr	r3, [pc, #40]	@ (8003d68 <HAL_TIM_PWM_MspInit+0x90>)
 8003d40:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003d44:	4a08      	ldr	r2, [pc, #32]	@ (8003d68 <HAL_TIM_PWM_MspInit+0x90>)
 8003d46:	f043 0304 	orr.w	r3, r3, #4
 8003d4a:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8003d4e:	4b06      	ldr	r3, [pc, #24]	@ (8003d68 <HAL_TIM_PWM_MspInit+0x90>)
 8003d50:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003d54:	f003 0304 	and.w	r3, r3, #4
 8003d58:	60fb      	str	r3, [r7, #12]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
}
 8003d5c:	bf00      	nop
 8003d5e:	371c      	adds	r7, #28
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr
 8003d68:	58024400 	.word	0x58024400
 8003d6c:	40000400 	.word	0x40000400
 8003d70:	40000800 	.word	0x40000800

08003d74 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b085      	sub	sp, #20
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM13)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a0b      	ldr	r2, [pc, #44]	@ (8003db0 <HAL_TIM_Base_MspInit+0x3c>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d10e      	bne.n	8003da4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* TIM13 clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003d86:	4b0b      	ldr	r3, [pc, #44]	@ (8003db4 <HAL_TIM_Base_MspInit+0x40>)
 8003d88:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003d8c:	4a09      	ldr	r2, [pc, #36]	@ (8003db4 <HAL_TIM_Base_MspInit+0x40>)
 8003d8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d92:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8003d96:	4b07      	ldr	r3, [pc, #28]	@ (8003db4 <HAL_TIM_Base_MspInit+0x40>)
 8003d98:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003d9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003da0:	60fb      	str	r3, [r7, #12]
 8003da2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8003da4:	bf00      	nop
 8003da6:	3714      	adds	r7, #20
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr
 8003db0:	40001c00 	.word	0x40001c00
 8003db4:	58024400 	.word	0x58024400

08003db8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b08c      	sub	sp, #48	@ 0x30
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dc0:	f107 031c 	add.w	r3, r7, #28
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	601a      	str	r2, [r3, #0]
 8003dc8:	605a      	str	r2, [r3, #4]
 8003dca:	609a      	str	r2, [r3, #8]
 8003dcc:	60da      	str	r2, [r3, #12]
 8003dce:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dd8:	d13f      	bne.n	8003e5a <HAL_TIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dda:	4b47      	ldr	r3, [pc, #284]	@ (8003ef8 <HAL_TIM_MspPostInit+0x140>)
 8003ddc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003de0:	4a45      	ldr	r2, [pc, #276]	@ (8003ef8 <HAL_TIM_MspPostInit+0x140>)
 8003de2:	f043 0301 	orr.w	r3, r3, #1
 8003de6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003dea:	4b43      	ldr	r3, [pc, #268]	@ (8003ef8 <HAL_TIM_MspPostInit+0x140>)
 8003dec:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003df0:	f003 0301 	and.w	r3, r3, #1
 8003df4:	61bb      	str	r3, [r7, #24]
 8003df6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003df8:	4b3f      	ldr	r3, [pc, #252]	@ (8003ef8 <HAL_TIM_MspPostInit+0x140>)
 8003dfa:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003dfe:	4a3e      	ldr	r2, [pc, #248]	@ (8003ef8 <HAL_TIM_MspPostInit+0x140>)
 8003e00:	f043 0302 	orr.w	r3, r3, #2
 8003e04:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003e08:	4b3b      	ldr	r3, [pc, #236]	@ (8003ef8 <HAL_TIM_MspPostInit+0x140>)
 8003e0a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003e0e:	f003 0302 	and.w	r3, r3, #2
 8003e12:	617b      	str	r3, [r7, #20]
 8003e14:	697b      	ldr	r3, [r7, #20]
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 8003e16:	f248 030c 	movw	r3, #32780	@ 0x800c
 8003e1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e1c:	2302      	movs	r3, #2
 8003e1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e20:	2300      	movs	r3, #0
 8003e22:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e24:	2300      	movs	r3, #0
 8003e26:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e2c:	f107 031c 	add.w	r3, r7, #28
 8003e30:	4619      	mov	r1, r3
 8003e32:	4832      	ldr	r0, [pc, #200]	@ (8003efc <HAL_TIM_MspPostInit+0x144>)
 8003e34:	f006 f97a 	bl	800a12c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003e38:	2308      	movs	r3, #8
 8003e3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e3c:	2302      	movs	r3, #2
 8003e3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e40:	2300      	movs	r3, #0
 8003e42:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e44:	2300      	movs	r3, #0
 8003e46:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e4c:	f107 031c 	add.w	r3, r7, #28
 8003e50:	4619      	mov	r1, r3
 8003e52:	482b      	ldr	r0, [pc, #172]	@ (8003f00 <HAL_TIM_MspPostInit+0x148>)
 8003e54:	f006 f96a 	bl	800a12c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003e58:	e049      	b.n	8003eee <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM3)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a29      	ldr	r2, [pc, #164]	@ (8003f04 <HAL_TIM_MspPostInit+0x14c>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d11f      	bne.n	8003ea4 <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e64:	4b24      	ldr	r3, [pc, #144]	@ (8003ef8 <HAL_TIM_MspPostInit+0x140>)
 8003e66:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003e6a:	4a23      	ldr	r2, [pc, #140]	@ (8003ef8 <HAL_TIM_MspPostInit+0x140>)
 8003e6c:	f043 0302 	orr.w	r3, r3, #2
 8003e70:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003e74:	4b20      	ldr	r3, [pc, #128]	@ (8003ef8 <HAL_TIM_MspPostInit+0x140>)
 8003e76:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003e7a:	f003 0302 	and.w	r3, r3, #2
 8003e7e:	613b      	str	r3, [r7, #16]
 8003e80:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003e82:	2330      	movs	r3, #48	@ 0x30
 8003e84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e86:	2302      	movs	r3, #2
 8003e88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003e92:	2302      	movs	r3, #2
 8003e94:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e96:	f107 031c 	add.w	r3, r7, #28
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	4818      	ldr	r0, [pc, #96]	@ (8003f00 <HAL_TIM_MspPostInit+0x148>)
 8003e9e:	f006 f945 	bl	800a12c <HAL_GPIO_Init>
}
 8003ea2:	e024      	b.n	8003eee <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM4)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a17      	ldr	r2, [pc, #92]	@ (8003f08 <HAL_TIM_MspPostInit+0x150>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d11f      	bne.n	8003eee <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003eae:	4b12      	ldr	r3, [pc, #72]	@ (8003ef8 <HAL_TIM_MspPostInit+0x140>)
 8003eb0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003eb4:	4a10      	ldr	r2, [pc, #64]	@ (8003ef8 <HAL_TIM_MspPostInit+0x140>)
 8003eb6:	f043 0302 	orr.w	r3, r3, #2
 8003eba:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8003ef8 <HAL_TIM_MspPostInit+0x140>)
 8003ec0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003ec4:	f003 0302 	and.w	r3, r3, #2
 8003ec8:	60fb      	str	r3, [r7, #12]
 8003eca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003ecc:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8003ed0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ed2:	2302      	movs	r3, #2
 8003ed4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003eda:	2300      	movs	r3, #0
 8003edc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003ede:	2302      	movs	r3, #2
 8003ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ee2:	f107 031c 	add.w	r3, r7, #28
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	4805      	ldr	r0, [pc, #20]	@ (8003f00 <HAL_TIM_MspPostInit+0x148>)
 8003eea:	f006 f91f 	bl	800a12c <HAL_GPIO_Init>
}
 8003eee:	bf00      	nop
 8003ef0:	3730      	adds	r7, #48	@ 0x30
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	58024400 	.word	0x58024400
 8003efc:	58020000 	.word	0x58020000
 8003f00:	58020400 	.word	0x58020400
 8003f04:	40000400 	.word	0x40000400
 8003f08:	40000800 	.word	0x40000800

08003f0c <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart1_rx;
DMA_HandleTypeDef hdma_usart3_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003f10:	4b22      	ldr	r3, [pc, #136]	@ (8003f9c <MX_UART4_Init+0x90>)
 8003f12:	4a23      	ldr	r2, [pc, #140]	@ (8003fa0 <MX_UART4_Init+0x94>)
 8003f14:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8003f16:	4b21      	ldr	r3, [pc, #132]	@ (8003f9c <MX_UART4_Init+0x90>)
 8003f18:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003f1c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003f1e:	4b1f      	ldr	r3, [pc, #124]	@ (8003f9c <MX_UART4_Init+0x90>)
 8003f20:	2200      	movs	r2, #0
 8003f22:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003f24:	4b1d      	ldr	r3, [pc, #116]	@ (8003f9c <MX_UART4_Init+0x90>)
 8003f26:	2200      	movs	r2, #0
 8003f28:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003f2a:	4b1c      	ldr	r3, [pc, #112]	@ (8003f9c <MX_UART4_Init+0x90>)
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003f30:	4b1a      	ldr	r3, [pc, #104]	@ (8003f9c <MX_UART4_Init+0x90>)
 8003f32:	220c      	movs	r2, #12
 8003f34:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f36:	4b19      	ldr	r3, [pc, #100]	@ (8003f9c <MX_UART4_Init+0x90>)
 8003f38:	2200      	movs	r2, #0
 8003f3a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f3c:	4b17      	ldr	r3, [pc, #92]	@ (8003f9c <MX_UART4_Init+0x90>)
 8003f3e:	2200      	movs	r2, #0
 8003f40:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003f42:	4b16      	ldr	r3, [pc, #88]	@ (8003f9c <MX_UART4_Init+0x90>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003f48:	4b14      	ldr	r3, [pc, #80]	@ (8003f9c <MX_UART4_Init+0x90>)
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003f4e:	4b13      	ldr	r3, [pc, #76]	@ (8003f9c <MX_UART4_Init+0x90>)
 8003f50:	2200      	movs	r2, #0
 8003f52:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003f54:	4811      	ldr	r0, [pc, #68]	@ (8003f9c <MX_UART4_Init+0x90>)
 8003f56:	f00b fc6f 	bl	800f838 <HAL_UART_Init>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d001      	beq.n	8003f64 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8003f60:	f7ff f9a2 	bl	80032a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003f64:	2100      	movs	r1, #0
 8003f66:	480d      	ldr	r0, [pc, #52]	@ (8003f9c <MX_UART4_Init+0x90>)
 8003f68:	f00e ff95 	bl	8012e96 <HAL_UARTEx_SetTxFifoThreshold>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d001      	beq.n	8003f76 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8003f72:	f7ff f999 	bl	80032a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003f76:	2100      	movs	r1, #0
 8003f78:	4808      	ldr	r0, [pc, #32]	@ (8003f9c <MX_UART4_Init+0x90>)
 8003f7a:	f00e ffca 	bl	8012f12 <HAL_UARTEx_SetRxFifoThreshold>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d001      	beq.n	8003f88 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8003f84:	f7ff f990 	bl	80032a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8003f88:	4804      	ldr	r0, [pc, #16]	@ (8003f9c <MX_UART4_Init+0x90>)
 8003f8a:	f00e ff4b 	bl	8012e24 <HAL_UARTEx_DisableFifoMode>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d001      	beq.n	8003f98 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8003f94:	f7ff f988 	bl	80032a8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003f98:	bf00      	nop
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	2400118c 	.word	0x2400118c
 8003fa0:	40004c00 	.word	0x40004c00

08003fa4 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003fa8:	4b23      	ldr	r3, [pc, #140]	@ (8004038 <MX_USART1_UART_Init+0x94>)
 8003faa:	4a24      	ldr	r2, [pc, #144]	@ (800403c <MX_USART1_UART_Init+0x98>)
 8003fac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 8003fae:	4b22      	ldr	r3, [pc, #136]	@ (8004038 <MX_USART1_UART_Init+0x94>)
 8003fb0:	4a23      	ldr	r2, [pc, #140]	@ (8004040 <MX_USART1_UART_Init+0x9c>)
 8003fb2:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8003fb4:	4b20      	ldr	r3, [pc, #128]	@ (8004038 <MX_USART1_UART_Init+0x94>)
 8003fb6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003fba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003fbc:	4b1e      	ldr	r3, [pc, #120]	@ (8004038 <MX_USART1_UART_Init+0x94>)
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8003fc2:	4b1d      	ldr	r3, [pc, #116]	@ (8004038 <MX_USART1_UART_Init+0x94>)
 8003fc4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003fc8:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003fca:	4b1b      	ldr	r3, [pc, #108]	@ (8004038 <MX_USART1_UART_Init+0x94>)
 8003fcc:	220c      	movs	r2, #12
 8003fce:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003fd0:	4b19      	ldr	r3, [pc, #100]	@ (8004038 <MX_USART1_UART_Init+0x94>)
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003fd6:	4b18      	ldr	r3, [pc, #96]	@ (8004038 <MX_USART1_UART_Init+0x94>)
 8003fd8:	2200      	movs	r2, #0
 8003fda:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003fdc:	4b16      	ldr	r3, [pc, #88]	@ (8004038 <MX_USART1_UART_Init+0x94>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003fe2:	4b15      	ldr	r3, [pc, #84]	@ (8004038 <MX_USART1_UART_Init+0x94>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003fe8:	4b13      	ldr	r3, [pc, #76]	@ (8004038 <MX_USART1_UART_Init+0x94>)
 8003fea:	2200      	movs	r2, #0
 8003fec:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003fee:	4812      	ldr	r0, [pc, #72]	@ (8004038 <MX_USART1_UART_Init+0x94>)
 8003ff0:	f00b fc22 	bl	800f838 <HAL_UART_Init>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d001      	beq.n	8003ffe <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8003ffa:	f7ff f955 	bl	80032a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003ffe:	2100      	movs	r1, #0
 8004000:	480d      	ldr	r0, [pc, #52]	@ (8004038 <MX_USART1_UART_Init+0x94>)
 8004002:	f00e ff48 	bl	8012e96 <HAL_UARTEx_SetTxFifoThreshold>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d001      	beq.n	8004010 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 800400c:	f7ff f94c 	bl	80032a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004010:	2100      	movs	r1, #0
 8004012:	4809      	ldr	r0, [pc, #36]	@ (8004038 <MX_USART1_UART_Init+0x94>)
 8004014:	f00e ff7d 	bl	8012f12 <HAL_UARTEx_SetRxFifoThreshold>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d001      	beq.n	8004022 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 800401e:	f7ff f943 	bl	80032a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004022:	4805      	ldr	r0, [pc, #20]	@ (8004038 <MX_USART1_UART_Init+0x94>)
 8004024:	f00e fefe 	bl	8012e24 <HAL_UARTEx_DisableFifoMode>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d001      	beq.n	8004032 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 800402e:	f7ff f93b 	bl	80032a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004032:	bf00      	nop
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	24001220 	.word	0x24001220
 800403c:	40011000 	.word	0x40011000
 8004040:	000186a0 	.word	0x000186a0

08004044 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004048:	4b22      	ldr	r3, [pc, #136]	@ (80040d4 <MX_USART3_UART_Init+0x90>)
 800404a:	4a23      	ldr	r2, [pc, #140]	@ (80040d8 <MX_USART3_UART_Init+0x94>)
 800404c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800404e:	4b21      	ldr	r3, [pc, #132]	@ (80040d4 <MX_USART3_UART_Init+0x90>)
 8004050:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004054:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004056:	4b1f      	ldr	r3, [pc, #124]	@ (80040d4 <MX_USART3_UART_Init+0x90>)
 8004058:	2200      	movs	r2, #0
 800405a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800405c:	4b1d      	ldr	r3, [pc, #116]	@ (80040d4 <MX_USART3_UART_Init+0x90>)
 800405e:	2200      	movs	r2, #0
 8004060:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004062:	4b1c      	ldr	r3, [pc, #112]	@ (80040d4 <MX_USART3_UART_Init+0x90>)
 8004064:	2200      	movs	r2, #0
 8004066:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004068:	4b1a      	ldr	r3, [pc, #104]	@ (80040d4 <MX_USART3_UART_Init+0x90>)
 800406a:	220c      	movs	r2, #12
 800406c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800406e:	4b19      	ldr	r3, [pc, #100]	@ (80040d4 <MX_USART3_UART_Init+0x90>)
 8004070:	2200      	movs	r2, #0
 8004072:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004074:	4b17      	ldr	r3, [pc, #92]	@ (80040d4 <MX_USART3_UART_Init+0x90>)
 8004076:	2200      	movs	r2, #0
 8004078:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800407a:	4b16      	ldr	r3, [pc, #88]	@ (80040d4 <MX_USART3_UART_Init+0x90>)
 800407c:	2200      	movs	r2, #0
 800407e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004080:	4b14      	ldr	r3, [pc, #80]	@ (80040d4 <MX_USART3_UART_Init+0x90>)
 8004082:	2200      	movs	r2, #0
 8004084:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004086:	4b13      	ldr	r3, [pc, #76]	@ (80040d4 <MX_USART3_UART_Init+0x90>)
 8004088:	2200      	movs	r2, #0
 800408a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800408c:	4811      	ldr	r0, [pc, #68]	@ (80040d4 <MX_USART3_UART_Init+0x90>)
 800408e:	f00b fbd3 	bl	800f838 <HAL_UART_Init>
 8004092:	4603      	mov	r3, r0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d001      	beq.n	800409c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8004098:	f7ff f906 	bl	80032a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800409c:	2100      	movs	r1, #0
 800409e:	480d      	ldr	r0, [pc, #52]	@ (80040d4 <MX_USART3_UART_Init+0x90>)
 80040a0:	f00e fef9 	bl	8012e96 <HAL_UARTEx_SetTxFifoThreshold>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d001      	beq.n	80040ae <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80040aa:	f7ff f8fd 	bl	80032a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80040ae:	2100      	movs	r1, #0
 80040b0:	4808      	ldr	r0, [pc, #32]	@ (80040d4 <MX_USART3_UART_Init+0x90>)
 80040b2:	f00e ff2e 	bl	8012f12 <HAL_UARTEx_SetRxFifoThreshold>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d001      	beq.n	80040c0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80040bc:	f7ff f8f4 	bl	80032a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80040c0:	4804      	ldr	r0, [pc, #16]	@ (80040d4 <MX_USART3_UART_Init+0x90>)
 80040c2:	f00e feaf 	bl	8012e24 <HAL_UARTEx_DisableFifoMode>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d001      	beq.n	80040d0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80040cc:	f7ff f8ec 	bl	80032a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80040d0:	bf00      	nop
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	240012b4 	.word	0x240012b4
 80040d8:	40004800 	.word	0x40004800

080040dc <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80040e0:	4b22      	ldr	r3, [pc, #136]	@ (800416c <MX_USART6_UART_Init+0x90>)
 80040e2:	4a23      	ldr	r2, [pc, #140]	@ (8004170 <MX_USART6_UART_Init+0x94>)
 80040e4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80040e6:	4b21      	ldr	r3, [pc, #132]	@ (800416c <MX_USART6_UART_Init+0x90>)
 80040e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80040ec:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80040ee:	4b1f      	ldr	r3, [pc, #124]	@ (800416c <MX_USART6_UART_Init+0x90>)
 80040f0:	2200      	movs	r2, #0
 80040f2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80040f4:	4b1d      	ldr	r3, [pc, #116]	@ (800416c <MX_USART6_UART_Init+0x90>)
 80040f6:	2200      	movs	r2, #0
 80040f8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80040fa:	4b1c      	ldr	r3, [pc, #112]	@ (800416c <MX_USART6_UART_Init+0x90>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004100:	4b1a      	ldr	r3, [pc, #104]	@ (800416c <MX_USART6_UART_Init+0x90>)
 8004102:	220c      	movs	r2, #12
 8004104:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004106:	4b19      	ldr	r3, [pc, #100]	@ (800416c <MX_USART6_UART_Init+0x90>)
 8004108:	2200      	movs	r2, #0
 800410a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800410c:	4b17      	ldr	r3, [pc, #92]	@ (800416c <MX_USART6_UART_Init+0x90>)
 800410e:	2200      	movs	r2, #0
 8004110:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004112:	4b16      	ldr	r3, [pc, #88]	@ (800416c <MX_USART6_UART_Init+0x90>)
 8004114:	2200      	movs	r2, #0
 8004116:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004118:	4b14      	ldr	r3, [pc, #80]	@ (800416c <MX_USART6_UART_Init+0x90>)
 800411a:	2200      	movs	r2, #0
 800411c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800411e:	4b13      	ldr	r3, [pc, #76]	@ (800416c <MX_USART6_UART_Init+0x90>)
 8004120:	2200      	movs	r2, #0
 8004122:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004124:	4811      	ldr	r0, [pc, #68]	@ (800416c <MX_USART6_UART_Init+0x90>)
 8004126:	f00b fb87 	bl	800f838 <HAL_UART_Init>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d001      	beq.n	8004134 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8004130:	f7ff f8ba 	bl	80032a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004134:	2100      	movs	r1, #0
 8004136:	480d      	ldr	r0, [pc, #52]	@ (800416c <MX_USART6_UART_Init+0x90>)
 8004138:	f00e fead 	bl	8012e96 <HAL_UARTEx_SetTxFifoThreshold>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d001      	beq.n	8004146 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8004142:	f7ff f8b1 	bl	80032a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004146:	2100      	movs	r1, #0
 8004148:	4808      	ldr	r0, [pc, #32]	@ (800416c <MX_USART6_UART_Init+0x90>)
 800414a:	f00e fee2 	bl	8012f12 <HAL_UARTEx_SetRxFifoThreshold>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d001      	beq.n	8004158 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8004154:	f7ff f8a8 	bl	80032a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8004158:	4804      	ldr	r0, [pc, #16]	@ (800416c <MX_USART6_UART_Init+0x90>)
 800415a:	f00e fe63 	bl	8012e24 <HAL_UARTEx_DisableFifoMode>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d001      	beq.n	8004168 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8004164:	f7ff f8a0 	bl	80032a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8004168:	bf00      	nop
 800416a:	bd80      	pop	{r7, pc}
 800416c:	24001348 	.word	0x24001348
 8004170:	40011400 	.word	0x40011400

08004174 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b0c0      	sub	sp, #256	@ 0x100
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800417c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8004180:	2200      	movs	r2, #0
 8004182:	601a      	str	r2, [r3, #0]
 8004184:	605a      	str	r2, [r3, #4]
 8004186:	609a      	str	r2, [r3, #8]
 8004188:	60da      	str	r2, [r3, #12]
 800418a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800418c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004190:	22c0      	movs	r2, #192	@ 0xc0
 8004192:	2100      	movs	r1, #0
 8004194:	4618      	mov	r0, r3
 8004196:	f013 fdee 	bl	8017d76 <memset>
  if(uartHandle->Instance==UART4)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a82      	ldr	r2, [pc, #520]	@ (80043a8 <HAL_UART_MspInit+0x234>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d17c      	bne.n	800429e <HAL_UART_MspInit+0x12a>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80041a4:	f04f 0202 	mov.w	r2, #2
 80041a8:	f04f 0300 	mov.w	r3, #0
 80041ac:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80041b0:	2300      	movs	r3, #0
 80041b2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80041b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80041ba:	4618      	mov	r0, r3
 80041bc:	f007 faee 	bl	800b79c <HAL_RCCEx_PeriphCLKConfig>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d001      	beq.n	80041ca <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80041c6:	f7ff f86f 	bl	80032a8 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80041ca:	4b78      	ldr	r3, [pc, #480]	@ (80043ac <HAL_UART_MspInit+0x238>)
 80041cc:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80041d0:	4a76      	ldr	r2, [pc, #472]	@ (80043ac <HAL_UART_MspInit+0x238>)
 80041d2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80041d6:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80041da:	4b74      	ldr	r3, [pc, #464]	@ (80043ac <HAL_UART_MspInit+0x238>)
 80041dc:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80041e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80041e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80041e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041e8:	4b70      	ldr	r3, [pc, #448]	@ (80043ac <HAL_UART_MspInit+0x238>)
 80041ea:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80041ee:	4a6f      	ldr	r2, [pc, #444]	@ (80043ac <HAL_UART_MspInit+0x238>)
 80041f0:	f043 0301 	orr.w	r3, r3, #1
 80041f4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80041f8:	4b6c      	ldr	r3, [pc, #432]	@ (80043ac <HAL_UART_MspInit+0x238>)
 80041fa:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80041fe:	f003 0301 	and.w	r3, r3, #1
 8004202:	623b      	str	r3, [r7, #32]
 8004204:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004206:	2303      	movs	r3, #3
 8004208:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800420c:	2302      	movs	r3, #2
 800420e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004212:	2300      	movs	r3, #0
 8004214:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004218:	2300      	movs	r3, #0
 800421a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800421e:	2308      	movs	r3, #8
 8004220:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004224:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8004228:	4619      	mov	r1, r3
 800422a:	4861      	ldr	r0, [pc, #388]	@ (80043b0 <HAL_UART_MspInit+0x23c>)
 800422c:	f005 ff7e 	bl	800a12c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8004230:	4b60      	ldr	r3, [pc, #384]	@ (80043b4 <HAL_UART_MspInit+0x240>)
 8004232:	4a61      	ldr	r2, [pc, #388]	@ (80043b8 <HAL_UART_MspInit+0x244>)
 8004234:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8004236:	4b5f      	ldr	r3, [pc, #380]	@ (80043b4 <HAL_UART_MspInit+0x240>)
 8004238:	223f      	movs	r2, #63	@ 0x3f
 800423a:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800423c:	4b5d      	ldr	r3, [pc, #372]	@ (80043b4 <HAL_UART_MspInit+0x240>)
 800423e:	2200      	movs	r2, #0
 8004240:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004242:	4b5c      	ldr	r3, [pc, #368]	@ (80043b4 <HAL_UART_MspInit+0x240>)
 8004244:	2200      	movs	r2, #0
 8004246:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004248:	4b5a      	ldr	r3, [pc, #360]	@ (80043b4 <HAL_UART_MspInit+0x240>)
 800424a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800424e:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004250:	4b58      	ldr	r3, [pc, #352]	@ (80043b4 <HAL_UART_MspInit+0x240>)
 8004252:	2200      	movs	r2, #0
 8004254:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004256:	4b57      	ldr	r3, [pc, #348]	@ (80043b4 <HAL_UART_MspInit+0x240>)
 8004258:	2200      	movs	r2, #0
 800425a:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 800425c:	4b55      	ldr	r3, [pc, #340]	@ (80043b4 <HAL_UART_MspInit+0x240>)
 800425e:	2200      	movs	r2, #0
 8004260:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004262:	4b54      	ldr	r3, [pc, #336]	@ (80043b4 <HAL_UART_MspInit+0x240>)
 8004264:	2200      	movs	r2, #0
 8004266:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004268:	4b52      	ldr	r3, [pc, #328]	@ (80043b4 <HAL_UART_MspInit+0x240>)
 800426a:	2200      	movs	r2, #0
 800426c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800426e:	4851      	ldr	r0, [pc, #324]	@ (80043b4 <HAL_UART_MspInit+0x240>)
 8004270:	f002 fd0e 	bl	8006c90 <HAL_DMA_Init>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d001      	beq.n	800427e <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 800427a:	f7ff f815 	bl	80032a8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a4c      	ldr	r2, [pc, #304]	@ (80043b4 <HAL_UART_MspInit+0x240>)
 8004282:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8004286:	4a4b      	ldr	r2, [pc, #300]	@ (80043b4 <HAL_UART_MspInit+0x240>)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800428c:	2200      	movs	r2, #0
 800428e:	2105      	movs	r1, #5
 8004290:	2034      	movs	r0, #52	@ 0x34
 8004292:	f002 fc5d 	bl	8006b50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8004296:	2034      	movs	r0, #52	@ 0x34
 8004298:	f002 fc74 	bl	8006b84 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800429c:	e16a      	b.n	8004574 <HAL_UART_MspInit+0x400>
  else if(uartHandle->Instance==USART1)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a46      	ldr	r2, [pc, #280]	@ (80043bc <HAL_UART_MspInit+0x248>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	f040 808f 	bne.w	80043c8 <HAL_UART_MspInit+0x254>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80042aa:	f04f 0201 	mov.w	r2, #1
 80042ae:	f04f 0300 	mov.w	r3, #0
 80042b2:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80042b6:	2300      	movs	r3, #0
 80042b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80042bc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80042c0:	4618      	mov	r0, r3
 80042c2:	f007 fa6b 	bl	800b79c <HAL_RCCEx_PeriphCLKConfig>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d001      	beq.n	80042d0 <HAL_UART_MspInit+0x15c>
      Error_Handler();
 80042cc:	f7fe ffec 	bl	80032a8 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80042d0:	4b36      	ldr	r3, [pc, #216]	@ (80043ac <HAL_UART_MspInit+0x238>)
 80042d2:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80042d6:	4a35      	ldr	r2, [pc, #212]	@ (80043ac <HAL_UART_MspInit+0x238>)
 80042d8:	f043 0310 	orr.w	r3, r3, #16
 80042dc:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 80042e0:	4b32      	ldr	r3, [pc, #200]	@ (80043ac <HAL_UART_MspInit+0x238>)
 80042e2:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80042e6:	f003 0310 	and.w	r3, r3, #16
 80042ea:	61fb      	str	r3, [r7, #28]
 80042ec:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042ee:	4b2f      	ldr	r3, [pc, #188]	@ (80043ac <HAL_UART_MspInit+0x238>)
 80042f0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80042f4:	4a2d      	ldr	r2, [pc, #180]	@ (80043ac <HAL_UART_MspInit+0x238>)
 80042f6:	f043 0301 	orr.w	r3, r3, #1
 80042fa:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80042fe:	4b2b      	ldr	r3, [pc, #172]	@ (80043ac <HAL_UART_MspInit+0x238>)
 8004300:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004304:	f003 0301 	and.w	r3, r3, #1
 8004308:	61bb      	str	r3, [r7, #24]
 800430a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|SBUS_RX_Pin;
 800430c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8004310:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004314:	2302      	movs	r3, #2
 8004316:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800431a:	2300      	movs	r3, #0
 800431c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004320:	2300      	movs	r3, #0
 8004322:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004326:	2307      	movs	r3, #7
 8004328:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800432c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8004330:	4619      	mov	r1, r3
 8004332:	481f      	ldr	r0, [pc, #124]	@ (80043b0 <HAL_UART_MspInit+0x23c>)
 8004334:	f005 fefa 	bl	800a12c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8004338:	4b21      	ldr	r3, [pc, #132]	@ (80043c0 <HAL_UART_MspInit+0x24c>)
 800433a:	4a22      	ldr	r2, [pc, #136]	@ (80043c4 <HAL_UART_MspInit+0x250>)
 800433c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800433e:	4b20      	ldr	r3, [pc, #128]	@ (80043c0 <HAL_UART_MspInit+0x24c>)
 8004340:	2229      	movs	r2, #41	@ 0x29
 8004342:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004344:	4b1e      	ldr	r3, [pc, #120]	@ (80043c0 <HAL_UART_MspInit+0x24c>)
 8004346:	2200      	movs	r2, #0
 8004348:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800434a:	4b1d      	ldr	r3, [pc, #116]	@ (80043c0 <HAL_UART_MspInit+0x24c>)
 800434c:	2200      	movs	r2, #0
 800434e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004350:	4b1b      	ldr	r3, [pc, #108]	@ (80043c0 <HAL_UART_MspInit+0x24c>)
 8004352:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004356:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004358:	4b19      	ldr	r3, [pc, #100]	@ (80043c0 <HAL_UART_MspInit+0x24c>)
 800435a:	2200      	movs	r2, #0
 800435c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800435e:	4b18      	ldr	r3, [pc, #96]	@ (80043c0 <HAL_UART_MspInit+0x24c>)
 8004360:	2200      	movs	r2, #0
 8004362:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8004364:	4b16      	ldr	r3, [pc, #88]	@ (80043c0 <HAL_UART_MspInit+0x24c>)
 8004366:	2200      	movs	r2, #0
 8004368:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800436a:	4b15      	ldr	r3, [pc, #84]	@ (80043c0 <HAL_UART_MspInit+0x24c>)
 800436c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004370:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004372:	4b13      	ldr	r3, [pc, #76]	@ (80043c0 <HAL_UART_MspInit+0x24c>)
 8004374:	2200      	movs	r2, #0
 8004376:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004378:	4811      	ldr	r0, [pc, #68]	@ (80043c0 <HAL_UART_MspInit+0x24c>)
 800437a:	f002 fc89 	bl	8006c90 <HAL_DMA_Init>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d001      	beq.n	8004388 <HAL_UART_MspInit+0x214>
      Error_Handler();
 8004384:	f7fe ff90 	bl	80032a8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4a0d      	ldr	r2, [pc, #52]	@ (80043c0 <HAL_UART_MspInit+0x24c>)
 800438c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8004390:	4a0b      	ldr	r2, [pc, #44]	@ (80043c0 <HAL_UART_MspInit+0x24c>)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8004396:	2200      	movs	r2, #0
 8004398:	2105      	movs	r1, #5
 800439a:	2025      	movs	r0, #37	@ 0x25
 800439c:	f002 fbd8 	bl	8006b50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80043a0:	2025      	movs	r0, #37	@ 0x25
 80043a2:	f002 fbef 	bl	8006b84 <HAL_NVIC_EnableIRQ>
}
 80043a6:	e0e5      	b.n	8004574 <HAL_UART_MspInit+0x400>
 80043a8:	40004c00 	.word	0x40004c00
 80043ac:	58024400 	.word	0x58024400
 80043b0:	58020000 	.word	0x58020000
 80043b4:	240013dc 	.word	0x240013dc
 80043b8:	40020040 	.word	0x40020040
 80043bc:	40011000 	.word	0x40011000
 80043c0:	24001454 	.word	0x24001454
 80043c4:	40020010 	.word	0x40020010
  else if(uartHandle->Instance==USART3)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a6c      	ldr	r2, [pc, #432]	@ (8004580 <HAL_UART_MspInit+0x40c>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d17d      	bne.n	80044ce <HAL_UART_MspInit+0x35a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80043d2:	f04f 0202 	mov.w	r2, #2
 80043d6:	f04f 0300 	mov.w	r3, #0
 80043da:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80043de:	2300      	movs	r3, #0
 80043e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80043e4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80043e8:	4618      	mov	r0, r3
 80043ea:	f007 f9d7 	bl	800b79c <HAL_RCCEx_PeriphCLKConfig>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d001      	beq.n	80043f8 <HAL_UART_MspInit+0x284>
      Error_Handler();
 80043f4:	f7fe ff58 	bl	80032a8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80043f8:	4b62      	ldr	r3, [pc, #392]	@ (8004584 <HAL_UART_MspInit+0x410>)
 80043fa:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80043fe:	4a61      	ldr	r2, [pc, #388]	@ (8004584 <HAL_UART_MspInit+0x410>)
 8004400:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004404:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8004408:	4b5e      	ldr	r3, [pc, #376]	@ (8004584 <HAL_UART_MspInit+0x410>)
 800440a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800440e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004412:	617b      	str	r3, [r7, #20]
 8004414:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004416:	4b5b      	ldr	r3, [pc, #364]	@ (8004584 <HAL_UART_MspInit+0x410>)
 8004418:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800441c:	4a59      	ldr	r2, [pc, #356]	@ (8004584 <HAL_UART_MspInit+0x410>)
 800441e:	f043 0304 	orr.w	r3, r3, #4
 8004422:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8004426:	4b57      	ldr	r3, [pc, #348]	@ (8004584 <HAL_UART_MspInit+0x410>)
 8004428:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800442c:	f003 0304 	and.w	r3, r3, #4
 8004430:	613b      	str	r3, [r7, #16]
 8004432:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004434:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004438:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800443c:	2302      	movs	r3, #2
 800443e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004442:	2300      	movs	r3, #0
 8004444:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004448:	2300      	movs	r3, #0
 800444a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800444e:	2307      	movs	r3, #7
 8004450:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004454:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8004458:	4619      	mov	r1, r3
 800445a:	484b      	ldr	r0, [pc, #300]	@ (8004588 <HAL_UART_MspInit+0x414>)
 800445c:	f005 fe66 	bl	800a12c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8004460:	4b4a      	ldr	r3, [pc, #296]	@ (800458c <HAL_UART_MspInit+0x418>)
 8004462:	4a4b      	ldr	r2, [pc, #300]	@ (8004590 <HAL_UART_MspInit+0x41c>)
 8004464:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8004466:	4b49      	ldr	r3, [pc, #292]	@ (800458c <HAL_UART_MspInit+0x418>)
 8004468:	222d      	movs	r2, #45	@ 0x2d
 800446a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800446c:	4b47      	ldr	r3, [pc, #284]	@ (800458c <HAL_UART_MspInit+0x418>)
 800446e:	2200      	movs	r2, #0
 8004470:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004472:	4b46      	ldr	r3, [pc, #280]	@ (800458c <HAL_UART_MspInit+0x418>)
 8004474:	2200      	movs	r2, #0
 8004476:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004478:	4b44      	ldr	r3, [pc, #272]	@ (800458c <HAL_UART_MspInit+0x418>)
 800447a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800447e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004480:	4b42      	ldr	r3, [pc, #264]	@ (800458c <HAL_UART_MspInit+0x418>)
 8004482:	2200      	movs	r2, #0
 8004484:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004486:	4b41      	ldr	r3, [pc, #260]	@ (800458c <HAL_UART_MspInit+0x418>)
 8004488:	2200      	movs	r2, #0
 800448a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800448c:	4b3f      	ldr	r3, [pc, #252]	@ (800458c <HAL_UART_MspInit+0x418>)
 800448e:	2200      	movs	r2, #0
 8004490:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004492:	4b3e      	ldr	r3, [pc, #248]	@ (800458c <HAL_UART_MspInit+0x418>)
 8004494:	2200      	movs	r2, #0
 8004496:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004498:	4b3c      	ldr	r3, [pc, #240]	@ (800458c <HAL_UART_MspInit+0x418>)
 800449a:	2200      	movs	r2, #0
 800449c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800449e:	483b      	ldr	r0, [pc, #236]	@ (800458c <HAL_UART_MspInit+0x418>)
 80044a0:	f002 fbf6 	bl	8006c90 <HAL_DMA_Init>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d001      	beq.n	80044ae <HAL_UART_MspInit+0x33a>
      Error_Handler();
 80044aa:	f7fe fefd 	bl	80032a8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a36      	ldr	r2, [pc, #216]	@ (800458c <HAL_UART_MspInit+0x418>)
 80044b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80044b6:	4a35      	ldr	r2, [pc, #212]	@ (800458c <HAL_UART_MspInit+0x418>)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80044bc:	2200      	movs	r2, #0
 80044be:	2105      	movs	r1, #5
 80044c0:	2027      	movs	r0, #39	@ 0x27
 80044c2:	f002 fb45 	bl	8006b50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80044c6:	2027      	movs	r0, #39	@ 0x27
 80044c8:	f002 fb5c 	bl	8006b84 <HAL_NVIC_EnableIRQ>
}
 80044cc:	e052      	b.n	8004574 <HAL_UART_MspInit+0x400>
  else if(uartHandle->Instance==USART6)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a30      	ldr	r2, [pc, #192]	@ (8004594 <HAL_UART_MspInit+0x420>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d14d      	bne.n	8004574 <HAL_UART_MspInit+0x400>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80044d8:	f04f 0201 	mov.w	r2, #1
 80044dc:	f04f 0300 	mov.w	r3, #0
 80044e0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80044e4:	2300      	movs	r3, #0
 80044e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80044ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80044ee:	4618      	mov	r0, r3
 80044f0:	f007 f954 	bl	800b79c <HAL_RCCEx_PeriphCLKConfig>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d001      	beq.n	80044fe <HAL_UART_MspInit+0x38a>
      Error_Handler();
 80044fa:	f7fe fed5 	bl	80032a8 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80044fe:	4b21      	ldr	r3, [pc, #132]	@ (8004584 <HAL_UART_MspInit+0x410>)
 8004500:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8004504:	4a1f      	ldr	r2, [pc, #124]	@ (8004584 <HAL_UART_MspInit+0x410>)
 8004506:	f043 0320 	orr.w	r3, r3, #32
 800450a:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 800450e:	4b1d      	ldr	r3, [pc, #116]	@ (8004584 <HAL_UART_MspInit+0x410>)
 8004510:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8004514:	f003 0320 	and.w	r3, r3, #32
 8004518:	60fb      	str	r3, [r7, #12]
 800451a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800451c:	4b19      	ldr	r3, [pc, #100]	@ (8004584 <HAL_UART_MspInit+0x410>)
 800451e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004522:	4a18      	ldr	r2, [pc, #96]	@ (8004584 <HAL_UART_MspInit+0x410>)
 8004524:	f043 0304 	orr.w	r3, r3, #4
 8004528:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800452c:	4b15      	ldr	r3, [pc, #84]	@ (8004584 <HAL_UART_MspInit+0x410>)
 800452e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004532:	f003 0304 	and.w	r3, r3, #4
 8004536:	60bb      	str	r3, [r7, #8]
 8004538:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800453a:	23c0      	movs	r3, #192	@ 0xc0
 800453c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004540:	2302      	movs	r3, #2
 8004542:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004546:	2300      	movs	r3, #0
 8004548:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800454c:	2300      	movs	r3, #0
 800454e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8004552:	2307      	movs	r3, #7
 8004554:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004558:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800455c:	4619      	mov	r1, r3
 800455e:	480a      	ldr	r0, [pc, #40]	@ (8004588 <HAL_UART_MspInit+0x414>)
 8004560:	f005 fde4 	bl	800a12c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8004564:	2200      	movs	r2, #0
 8004566:	2105      	movs	r1, #5
 8004568:	2047      	movs	r0, #71	@ 0x47
 800456a:	f002 faf1 	bl	8006b50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800456e:	2047      	movs	r0, #71	@ 0x47
 8004570:	f002 fb08 	bl	8006b84 <HAL_NVIC_EnableIRQ>
}
 8004574:	bf00      	nop
 8004576:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	40004800 	.word	0x40004800
 8004584:	58024400 	.word	0x58024400
 8004588:	58020800 	.word	0x58020800
 800458c:	240014cc 	.word	0x240014cc
 8004590:	40020028 	.word	0x40020028
 8004594:	40011400 	.word	0x40011400

08004598 <Reset_UART>:
  /* USER CODE END USART6_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void Reset_UART(UART_HandleTypeDef *huart) {
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]

      // Clear any pending error flags
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF | UART_CLEAR_FEF | UART_CLEAR_NEF | UART_CLEAR_OREF);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	220f      	movs	r2, #15
 80045a6:	621a      	str	r2, [r3, #32]

    // Abort ongoing UART transfer
    if (HAL_UART_Abort_IT(huart) != HAL_OK) {
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f00b fbe5 	bl	800fd78 <HAL_UART_Abort_IT>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d001      	beq.n	80045b8 <Reset_UART+0x20>
        // Abort Error
        Error_Handler();
 80045b4:	f7fe fe78 	bl	80032a8 <Error_Handler>
    }
     if(huart == &huart3){
    	 MX_USART3_UART_Init();
     }
*/
}
 80045b8:	bf00      	nop
 80045ba:	3708      	adds	r7, #8
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}

080045c0 <BMP280_write>:
uint16_t dig_T1, dig_P1;
int16_t  dig_T2, dig_T3, dig_P2,dig_P3, dig_P4, dig_P5, dig_P6, dig_P7, dig_P8, dig_P9;

int32_t T_raw, P_raw, t_fine;

void BMP280_write(uint8_t Address, uint8_t Data){
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	4603      	mov	r3, r0
 80045c8:	460a      	mov	r2, r1
 80045ca:	71fb      	strb	r3, [r7, #7]
 80045cc:	4613      	mov	r3, r2
 80045ce:	71bb      	strb	r3, [r7, #6]
	BMP280_select();
 80045d0:	2200      	movs	r2, #0
 80045d2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80045d6:	480f      	ldr	r0, [pc, #60]	@ (8004614 <BMP280_write+0x54>)
 80045d8:	f005 ff58 	bl	800a48c <HAL_GPIO_WritePin>
	Address &= 0x7F;
 80045dc:	79fb      	ldrb	r3, [r7, #7]
 80045de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 80045e6:	1df9      	adds	r1, r7, #7
 80045e8:	2364      	movs	r3, #100	@ 0x64
 80045ea:	2201      	movs	r2, #1
 80045ec:	480a      	ldr	r0, [pc, #40]	@ (8004618 <BMP280_write+0x58>)
 80045ee:	f008 ffd9 	bl	800d5a4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(SPI_BMP280, &Data, 1, 100);
 80045f2:	1db9      	adds	r1, r7, #6
 80045f4:	2364      	movs	r3, #100	@ 0x64
 80045f6:	2201      	movs	r2, #1
 80045f8:	4807      	ldr	r0, [pc, #28]	@ (8004618 <BMP280_write+0x58>)
 80045fa:	f008 ffd3 	bl	800d5a4 <HAL_SPI_Transmit>

	BMP280_unselect();
 80045fe:	2201      	movs	r2, #1
 8004600:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004604:	4803      	ldr	r0, [pc, #12]	@ (8004614 <BMP280_write+0x54>)
 8004606:	f005 ff41 	bl	800a48c <HAL_GPIO_WritePin>
}
 800460a:	bf00      	nop
 800460c:	3708      	adds	r7, #8
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	58020400 	.word	0x58020400
 8004618:	24000f84 	.word	0x24000f84

0800461c <BMP280_read>:

uint8_t BMP280_read(uint8_t Address){
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	4603      	mov	r3, r0
 8004624:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer = (Address|0x80);
 8004626:	79fb      	ldrb	r3, [r7, #7]
 8004628:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800462c:	b2db      	uxtb	r3, r3
 800462e:	73fb      	strb	r3, [r7, #15]
	BMP280_select();
 8004630:	2200      	movs	r2, #0
 8004632:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004636:	480e      	ldr	r0, [pc, #56]	@ (8004670 <BMP280_read+0x54>)
 8004638:	f005 ff28 	bl	800a48c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Buffer, 1, 100);
 800463c:	f107 010f 	add.w	r1, r7, #15
 8004640:	2364      	movs	r3, #100	@ 0x64
 8004642:	2201      	movs	r2, #1
 8004644:	480b      	ldr	r0, [pc, #44]	@ (8004674 <BMP280_read+0x58>)
 8004646:	f008 ffad 	bl	800d5a4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, &Buffer, 1, 100);
 800464a:	f107 010f 	add.w	r1, r7, #15
 800464e:	2364      	movs	r3, #100	@ 0x64
 8004650:	2201      	movs	r2, #1
 8004652:	4808      	ldr	r0, [pc, #32]	@ (8004674 <BMP280_read+0x58>)
 8004654:	f009 f994 	bl	800d980 <HAL_SPI_Receive>
	BMP280_unselect();
 8004658:	2201      	movs	r2, #1
 800465a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800465e:	4804      	ldr	r0, [pc, #16]	@ (8004670 <BMP280_read+0x54>)
 8004660:	f005 ff14 	bl	800a48c <HAL_GPIO_WritePin>

	return Buffer;
 8004664:	7bfb      	ldrb	r3, [r7, #15]
}
 8004666:	4618      	mov	r0, r3
 8004668:	3710      	adds	r7, #16
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	58020400 	.word	0x58020400
 8004674:	24000f84 	.word	0x24000f84

08004678 <BMP280_config>:

void BMP280_config(void){
 8004678:	b580      	push	{r7, lr}
 800467a:	af00      	add	r7, sp, #0
	BMP280_write(ctrl_meas, 0x57);
 800467c:	2157      	movs	r1, #87	@ 0x57
 800467e:	20f4      	movs	r0, #244	@ 0xf4
 8004680:	f7ff ff9e 	bl	80045c0 <BMP280_write>
	BMP280_write(config, 0x10);
 8004684:	2110      	movs	r1, #16
 8004686:	20f5      	movs	r0, #245	@ 0xf5
 8004688:	f7ff ff9a 	bl	80045c0 <BMP280_write>
}
 800468c:	bf00      	nop
 800468e:	bd80      	pop	{r7, pc}

08004690 <BMP280_calibrationData>:

void BMP280_reset(void){
	BMP280_write(reset, 0xB6);
}

void BMP280_calibrationData(void){
 8004690:	b580      	push	{r7, lr}
 8004692:	b088      	sub	sp, #32
 8004694:	af00      	add	r7, sp, #0
	uint8_t Address = 0x88;
 8004696:	2388      	movs	r3, #136	@ 0x88
 8004698:	77fb      	strb	r3, [r7, #31]
	uint8_t Buffer[24] = {0};
 800469a:	2300      	movs	r3, #0
 800469c:	607b      	str	r3, [r7, #4]
 800469e:	f107 0308 	add.w	r3, r7, #8
 80046a2:	2200      	movs	r2, #0
 80046a4:	601a      	str	r2, [r3, #0]
 80046a6:	605a      	str	r2, [r3, #4]
 80046a8:	609a      	str	r2, [r3, #8]
 80046aa:	60da      	str	r2, [r3, #12]
 80046ac:	611a      	str	r2, [r3, #16]
	BMP280_select();
 80046ae:	2200      	movs	r2, #0
 80046b0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80046b4:	4843      	ldr	r0, [pc, #268]	@ (80047c4 <BMP280_calibrationData+0x134>)
 80046b6:	f005 fee9 	bl	800a48c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 80046ba:	f107 011f 	add.w	r1, r7, #31
 80046be:	2364      	movs	r3, #100	@ 0x64
 80046c0:	2201      	movs	r2, #1
 80046c2:	4841      	ldr	r0, [pc, #260]	@ (80047c8 <BMP280_calibrationData+0x138>)
 80046c4:	f008 ff6e 	bl	800d5a4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 24, 100);
 80046c8:	1d39      	adds	r1, r7, #4
 80046ca:	2364      	movs	r3, #100	@ 0x64
 80046cc:	2218      	movs	r2, #24
 80046ce:	483e      	ldr	r0, [pc, #248]	@ (80047c8 <BMP280_calibrationData+0x138>)
 80046d0:	f009 f956 	bl	800d980 <HAL_SPI_Receive>
	BMP280_unselect();
 80046d4:	2201      	movs	r2, #1
 80046d6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80046da:	483a      	ldr	r0, [pc, #232]	@ (80047c4 <BMP280_calibrationData+0x134>)
 80046dc:	f005 fed6 	bl	800a48c <HAL_GPIO_WritePin>

	dig_T1 = (Buffer[1]<<8)|Buffer[0];
 80046e0:	797b      	ldrb	r3, [r7, #5]
 80046e2:	021b      	lsls	r3, r3, #8
 80046e4:	b21a      	sxth	r2, r3
 80046e6:	793b      	ldrb	r3, [r7, #4]
 80046e8:	b21b      	sxth	r3, r3
 80046ea:	4313      	orrs	r3, r2
 80046ec:	b21b      	sxth	r3, r3
 80046ee:	b29a      	uxth	r2, r3
 80046f0:	4b36      	ldr	r3, [pc, #216]	@ (80047cc <BMP280_calibrationData+0x13c>)
 80046f2:	801a      	strh	r2, [r3, #0]
	dig_T2 = (Buffer[3]<<8)|Buffer[2];
 80046f4:	79fb      	ldrb	r3, [r7, #7]
 80046f6:	021b      	lsls	r3, r3, #8
 80046f8:	b21a      	sxth	r2, r3
 80046fa:	79bb      	ldrb	r3, [r7, #6]
 80046fc:	b21b      	sxth	r3, r3
 80046fe:	4313      	orrs	r3, r2
 8004700:	b21a      	sxth	r2, r3
 8004702:	4b33      	ldr	r3, [pc, #204]	@ (80047d0 <BMP280_calibrationData+0x140>)
 8004704:	801a      	strh	r2, [r3, #0]
	dig_T3 = (Buffer[5]<<8)|Buffer[4];
 8004706:	7a7b      	ldrb	r3, [r7, #9]
 8004708:	021b      	lsls	r3, r3, #8
 800470a:	b21a      	sxth	r2, r3
 800470c:	7a3b      	ldrb	r3, [r7, #8]
 800470e:	b21b      	sxth	r3, r3
 8004710:	4313      	orrs	r3, r2
 8004712:	b21a      	sxth	r2, r3
 8004714:	4b2f      	ldr	r3, [pc, #188]	@ (80047d4 <BMP280_calibrationData+0x144>)
 8004716:	801a      	strh	r2, [r3, #0]

	dig_P1 = (Buffer[7]<<8)|Buffer[6];
 8004718:	7afb      	ldrb	r3, [r7, #11]
 800471a:	021b      	lsls	r3, r3, #8
 800471c:	b21a      	sxth	r2, r3
 800471e:	7abb      	ldrb	r3, [r7, #10]
 8004720:	b21b      	sxth	r3, r3
 8004722:	4313      	orrs	r3, r2
 8004724:	b21b      	sxth	r3, r3
 8004726:	b29a      	uxth	r2, r3
 8004728:	4b2b      	ldr	r3, [pc, #172]	@ (80047d8 <BMP280_calibrationData+0x148>)
 800472a:	801a      	strh	r2, [r3, #0]
	dig_P2 = (Buffer[9]<<8)|Buffer[8];
 800472c:	7b7b      	ldrb	r3, [r7, #13]
 800472e:	021b      	lsls	r3, r3, #8
 8004730:	b21a      	sxth	r2, r3
 8004732:	7b3b      	ldrb	r3, [r7, #12]
 8004734:	b21b      	sxth	r3, r3
 8004736:	4313      	orrs	r3, r2
 8004738:	b21a      	sxth	r2, r3
 800473a:	4b28      	ldr	r3, [pc, #160]	@ (80047dc <BMP280_calibrationData+0x14c>)
 800473c:	801a      	strh	r2, [r3, #0]
	dig_P3 = (Buffer[11]<<8)|Buffer[10];
 800473e:	7bfb      	ldrb	r3, [r7, #15]
 8004740:	021b      	lsls	r3, r3, #8
 8004742:	b21a      	sxth	r2, r3
 8004744:	7bbb      	ldrb	r3, [r7, #14]
 8004746:	b21b      	sxth	r3, r3
 8004748:	4313      	orrs	r3, r2
 800474a:	b21a      	sxth	r2, r3
 800474c:	4b24      	ldr	r3, [pc, #144]	@ (80047e0 <BMP280_calibrationData+0x150>)
 800474e:	801a      	strh	r2, [r3, #0]
	dig_P4 = (Buffer[13]<<8)|Buffer[12];
 8004750:	7c7b      	ldrb	r3, [r7, #17]
 8004752:	021b      	lsls	r3, r3, #8
 8004754:	b21a      	sxth	r2, r3
 8004756:	7c3b      	ldrb	r3, [r7, #16]
 8004758:	b21b      	sxth	r3, r3
 800475a:	4313      	orrs	r3, r2
 800475c:	b21a      	sxth	r2, r3
 800475e:	4b21      	ldr	r3, [pc, #132]	@ (80047e4 <BMP280_calibrationData+0x154>)
 8004760:	801a      	strh	r2, [r3, #0]
	dig_P5 = (Buffer[15]<<8)|Buffer[14];
 8004762:	7cfb      	ldrb	r3, [r7, #19]
 8004764:	021b      	lsls	r3, r3, #8
 8004766:	b21a      	sxth	r2, r3
 8004768:	7cbb      	ldrb	r3, [r7, #18]
 800476a:	b21b      	sxth	r3, r3
 800476c:	4313      	orrs	r3, r2
 800476e:	b21a      	sxth	r2, r3
 8004770:	4b1d      	ldr	r3, [pc, #116]	@ (80047e8 <BMP280_calibrationData+0x158>)
 8004772:	801a      	strh	r2, [r3, #0]
	dig_P6 = (Buffer[17]<<8)|Buffer[16];
 8004774:	7d7b      	ldrb	r3, [r7, #21]
 8004776:	021b      	lsls	r3, r3, #8
 8004778:	b21a      	sxth	r2, r3
 800477a:	7d3b      	ldrb	r3, [r7, #20]
 800477c:	b21b      	sxth	r3, r3
 800477e:	4313      	orrs	r3, r2
 8004780:	b21a      	sxth	r2, r3
 8004782:	4b1a      	ldr	r3, [pc, #104]	@ (80047ec <BMP280_calibrationData+0x15c>)
 8004784:	801a      	strh	r2, [r3, #0]
	dig_P7 = (Buffer[19]<<8)|Buffer[18];
 8004786:	7dfb      	ldrb	r3, [r7, #23]
 8004788:	021b      	lsls	r3, r3, #8
 800478a:	b21a      	sxth	r2, r3
 800478c:	7dbb      	ldrb	r3, [r7, #22]
 800478e:	b21b      	sxth	r3, r3
 8004790:	4313      	orrs	r3, r2
 8004792:	b21a      	sxth	r2, r3
 8004794:	4b16      	ldr	r3, [pc, #88]	@ (80047f0 <BMP280_calibrationData+0x160>)
 8004796:	801a      	strh	r2, [r3, #0]
	dig_P8 = (Buffer[21]<<8)|Buffer[20];
 8004798:	7e7b      	ldrb	r3, [r7, #25]
 800479a:	021b      	lsls	r3, r3, #8
 800479c:	b21a      	sxth	r2, r3
 800479e:	7e3b      	ldrb	r3, [r7, #24]
 80047a0:	b21b      	sxth	r3, r3
 80047a2:	4313      	orrs	r3, r2
 80047a4:	b21a      	sxth	r2, r3
 80047a6:	4b13      	ldr	r3, [pc, #76]	@ (80047f4 <BMP280_calibrationData+0x164>)
 80047a8:	801a      	strh	r2, [r3, #0]
	dig_P9 = (Buffer[23]<<8)|Buffer[22];
 80047aa:	7efb      	ldrb	r3, [r7, #27]
 80047ac:	021b      	lsls	r3, r3, #8
 80047ae:	b21a      	sxth	r2, r3
 80047b0:	7ebb      	ldrb	r3, [r7, #26]
 80047b2:	b21b      	sxth	r3, r3
 80047b4:	4313      	orrs	r3, r2
 80047b6:	b21a      	sxth	r2, r3
 80047b8:	4b0f      	ldr	r3, [pc, #60]	@ (80047f8 <BMP280_calibrationData+0x168>)
 80047ba:	801a      	strh	r2, [r3, #0]
}
 80047bc:	bf00      	nop
 80047be:	3720      	adds	r7, #32
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	58020400 	.word	0x58020400
 80047c8:	24000f84 	.word	0x24000f84
 80047cc:	24001558 	.word	0x24001558
 80047d0:	2400155c 	.word	0x2400155c
 80047d4:	2400155e 	.word	0x2400155e
 80047d8:	2400155a 	.word	0x2400155a
 80047dc:	24001560 	.word	0x24001560
 80047e0:	24001562 	.word	0x24001562
 80047e4:	24001564 	.word	0x24001564
 80047e8:	24001566 	.word	0x24001566
 80047ec:	24001568 	.word	0x24001568
 80047f0:	2400156a 	.word	0x2400156a
 80047f4:	2400156c 	.word	0x2400156c
 80047f8:	2400156e 	.word	0x2400156e

080047fc <BMP280_readRawValues>:

void BMP280_readRawValues(void){
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b082      	sub	sp, #8
 8004800:	af00      	add	r7, sp, #0
	uint8_t Address = press_msb;
 8004802:	23f7      	movs	r3, #247	@ 0xf7
 8004804:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[6] = {0};
 8004806:	2300      	movs	r3, #0
 8004808:	603b      	str	r3, [r7, #0]
 800480a:	2300      	movs	r3, #0
 800480c:	80bb      	strh	r3, [r7, #4]
	BMP280_select();
 800480e:	2200      	movs	r2, #0
 8004810:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004814:	4817      	ldr	r0, [pc, #92]	@ (8004874 <BMP280_readRawValues+0x78>)
 8004816:	f005 fe39 	bl	800a48c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 800481a:	1df9      	adds	r1, r7, #7
 800481c:	2364      	movs	r3, #100	@ 0x64
 800481e:	2201      	movs	r2, #1
 8004820:	4815      	ldr	r0, [pc, #84]	@ (8004878 <BMP280_readRawValues+0x7c>)
 8004822:	f008 febf 	bl	800d5a4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 6, 100);
 8004826:	4639      	mov	r1, r7
 8004828:	2364      	movs	r3, #100	@ 0x64
 800482a:	2206      	movs	r2, #6
 800482c:	4812      	ldr	r0, [pc, #72]	@ (8004878 <BMP280_readRawValues+0x7c>)
 800482e:	f009 f8a7 	bl	800d980 <HAL_SPI_Receive>
	BMP280_unselect();
 8004832:	2201      	movs	r2, #1
 8004834:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004838:	480e      	ldr	r0, [pc, #56]	@ (8004874 <BMP280_readRawValues+0x78>)
 800483a:	f005 fe27 	bl	800a48c <HAL_GPIO_WritePin>

	P_raw = (Buffer[0]<<12)|(Buffer[1]<<4)|(Buffer[2]>>4);
 800483e:	783b      	ldrb	r3, [r7, #0]
 8004840:	031a      	lsls	r2, r3, #12
 8004842:	787b      	ldrb	r3, [r7, #1]
 8004844:	011b      	lsls	r3, r3, #4
 8004846:	4313      	orrs	r3, r2
 8004848:	78ba      	ldrb	r2, [r7, #2]
 800484a:	0912      	lsrs	r2, r2, #4
 800484c:	b2d2      	uxtb	r2, r2
 800484e:	4313      	orrs	r3, r2
 8004850:	4a0a      	ldr	r2, [pc, #40]	@ (800487c <BMP280_readRawValues+0x80>)
 8004852:	6013      	str	r3, [r2, #0]
	T_raw = (Buffer[3]<<12)|(Buffer[4]<<4)|(Buffer[5]>>4);
 8004854:	78fb      	ldrb	r3, [r7, #3]
 8004856:	031a      	lsls	r2, r3, #12
 8004858:	793b      	ldrb	r3, [r7, #4]
 800485a:	011b      	lsls	r3, r3, #4
 800485c:	4313      	orrs	r3, r2
 800485e:	797a      	ldrb	r2, [r7, #5]
 8004860:	0912      	lsrs	r2, r2, #4
 8004862:	b2d2      	uxtb	r2, r2
 8004864:	4313      	orrs	r3, r2
 8004866:	4a06      	ldr	r2, [pc, #24]	@ (8004880 <BMP280_readRawValues+0x84>)
 8004868:	6013      	str	r3, [r2, #0]
}
 800486a:	bf00      	nop
 800486c:	3708      	adds	r7, #8
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	58020400 	.word	0x58020400
 8004878:	24000f84 	.word	0x24000f84
 800487c:	24001574 	.word	0x24001574
 8004880:	24001570 	.word	0x24001570

08004884 <BMP280_measureT>:

int32_t BMP280_measureT(int32_t adc_T){
 8004884:	b480      	push	{r7}
 8004886:	b087      	sub	sp, #28
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 =  ((((T_raw>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 800488c:	4b1a      	ldr	r3, [pc, #104]	@ (80048f8 <BMP280_measureT+0x74>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	10da      	asrs	r2, r3, #3
 8004892:	4b1a      	ldr	r3, [pc, #104]	@ (80048fc <BMP280_measureT+0x78>)
 8004894:	881b      	ldrh	r3, [r3, #0]
 8004896:	005b      	lsls	r3, r3, #1
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	4a19      	ldr	r2, [pc, #100]	@ (8004900 <BMP280_measureT+0x7c>)
 800489c:	f9b2 2000 	ldrsh.w	r2, [r2]
 80048a0:	fb02 f303 	mul.w	r3, r2, r3
 80048a4:	12db      	asrs	r3, r3, #11
 80048a6:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1))) >> 12) * ((int32_t)dig_T3)) >> 14;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	111b      	asrs	r3, r3, #4
 80048ac:	4a13      	ldr	r2, [pc, #76]	@ (80048fc <BMP280_measureT+0x78>)
 80048ae:	8812      	ldrh	r2, [r2, #0]
 80048b0:	1a9b      	subs	r3, r3, r2
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	1112      	asrs	r2, r2, #4
 80048b6:	4911      	ldr	r1, [pc, #68]	@ (80048fc <BMP280_measureT+0x78>)
 80048b8:	8809      	ldrh	r1, [r1, #0]
 80048ba:	1a52      	subs	r2, r2, r1
 80048bc:	fb02 f303 	mul.w	r3, r2, r3
 80048c0:	131b      	asrs	r3, r3, #12
 80048c2:	4a10      	ldr	r2, [pc, #64]	@ (8004904 <BMP280_measureT+0x80>)
 80048c4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80048c8:	fb02 f303 	mul.w	r3, r2, r3
 80048cc:	139b      	asrs	r3, r3, #14
 80048ce:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 80048d0:	697a      	ldr	r2, [r7, #20]
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	4413      	add	r3, r2
 80048d6:	4a0c      	ldr	r2, [pc, #48]	@ (8004908 <BMP280_measureT+0x84>)
 80048d8:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 80048da:	4b0b      	ldr	r3, [pc, #44]	@ (8004908 <BMP280_measureT+0x84>)
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	4613      	mov	r3, r2
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	4413      	add	r3, r2
 80048e4:	3380      	adds	r3, #128	@ 0x80
 80048e6:	121b      	asrs	r3, r3, #8
 80048e8:	60fb      	str	r3, [r7, #12]
	return T;
 80048ea:	68fb      	ldr	r3, [r7, #12]
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	371c      	adds	r7, #28
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr
 80048f8:	24001570 	.word	0x24001570
 80048fc:	24001558 	.word	0x24001558
 8004900:	2400155c 	.word	0x2400155c
 8004904:	2400155e 	.word	0x2400155e
 8004908:	24001578 	.word	0x24001578

0800490c <BMP280_measureP>:

uint32_t BMP280_measureP(int32_t adc_P){
 800490c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004910:	b0ca      	sub	sp, #296	@ 0x128
 8004912:	af00      	add	r7, sp, #0
 8004914:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 8004918:	4baf      	ldr	r3, [pc, #700]	@ (8004bd8 <BMP280_measureP+0x2cc>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	17da      	asrs	r2, r3, #31
 800491e:	461c      	mov	r4, r3
 8004920:	4615      	mov	r5, r2
 8004922:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 8004926:	f145 3bff 	adc.w	fp, r5, #4294967295
 800492a:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 800492e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8004932:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004936:	fb03 f102 	mul.w	r1, r3, r2
 800493a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800493e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004942:	fb02 f303 	mul.w	r3, r2, r3
 8004946:	18ca      	adds	r2, r1, r3
 8004948:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800494c:	fba3 8903 	umull	r8, r9, r3, r3
 8004950:	eb02 0309 	add.w	r3, r2, r9
 8004954:	4699      	mov	r9, r3
 8004956:	4ba1      	ldr	r3, [pc, #644]	@ (8004bdc <BMP280_measureP+0x2d0>)
 8004958:	f9b3 3000 	ldrsh.w	r3, [r3]
 800495c:	b21b      	sxth	r3, r3
 800495e:	17da      	asrs	r2, r3, #31
 8004960:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004964:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004968:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800496c:	4603      	mov	r3, r0
 800496e:	fb03 f209 	mul.w	r2, r3, r9
 8004972:	460b      	mov	r3, r1
 8004974:	fb08 f303 	mul.w	r3, r8, r3
 8004978:	4413      	add	r3, r2
 800497a:	4602      	mov	r2, r0
 800497c:	fba8 1202 	umull	r1, r2, r8, r2
 8004980:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004984:	460a      	mov	r2, r1
 8004986:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 800498a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800498e:	4413      	add	r3, r2
 8004990:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004994:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8004998:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 800499c:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 80049a0:	4b8f      	ldr	r3, [pc, #572]	@ (8004be0 <BMP280_measureP+0x2d4>)
 80049a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049a6:	b21b      	sxth	r3, r3
 80049a8:	17da      	asrs	r2, r3, #31
 80049aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80049ae:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80049b2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80049b6:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 80049ba:	462a      	mov	r2, r5
 80049bc:	fb02 f203 	mul.w	r2, r2, r3
 80049c0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80049c4:	4621      	mov	r1, r4
 80049c6:	fb01 f303 	mul.w	r3, r1, r3
 80049ca:	441a      	add	r2, r3
 80049cc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80049d0:	4621      	mov	r1, r4
 80049d2:	fba3 1301 	umull	r1, r3, r3, r1
 80049d6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80049da:	460b      	mov	r3, r1
 80049dc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80049e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049e4:	18d3      	adds	r3, r2, r3
 80049e6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80049ea:	f04f 0000 	mov.w	r0, #0
 80049ee:	f04f 0100 	mov.w	r1, #0
 80049f2:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 80049f6:	462b      	mov	r3, r5
 80049f8:	0459      	lsls	r1, r3, #17
 80049fa:	4623      	mov	r3, r4
 80049fc:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8004a00:	4623      	mov	r3, r4
 8004a02:	0458      	lsls	r0, r3, #17
 8004a04:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8004a08:	1814      	adds	r4, r2, r0
 8004a0a:	643c      	str	r4, [r7, #64]	@ 0x40
 8004a0c:	414b      	adcs	r3, r1
 8004a0e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a10:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8004a14:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8004a18:	4b72      	ldr	r3, [pc, #456]	@ (8004be4 <BMP280_measureP+0x2d8>)
 8004a1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a1e:	b21b      	sxth	r3, r3
 8004a20:	17da      	asrs	r2, r3, #31
 8004a22:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004a26:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004a2a:	f04f 0000 	mov.w	r0, #0
 8004a2e:	f04f 0100 	mov.w	r1, #0
 8004a32:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004a36:	00d9      	lsls	r1, r3, #3
 8004a38:	2000      	movs	r0, #0
 8004a3a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8004a3e:	1814      	adds	r4, r2, r0
 8004a40:	63bc      	str	r4, [r7, #56]	@ 0x38
 8004a42:	414b      	adcs	r3, r1
 8004a44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a46:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8004a4a:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 8004a4e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8004a52:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004a56:	fb03 f102 	mul.w	r1, r3, r2
 8004a5a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8004a5e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004a62:	fb02 f303 	mul.w	r3, r2, r3
 8004a66:	18ca      	adds	r2, r1, r3
 8004a68:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004a6c:	fba3 1303 	umull	r1, r3, r3, r3
 8004a70:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004a74:	460b      	mov	r3, r1
 8004a76:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004a7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a7e:	18d3      	adds	r3, r2, r3
 8004a80:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004a84:	4b58      	ldr	r3, [pc, #352]	@ (8004be8 <BMP280_measureP+0x2dc>)
 8004a86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a8a:	b21b      	sxth	r3, r3
 8004a8c:	17da      	asrs	r2, r3, #31
 8004a8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004a92:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004a96:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8004a9a:	462b      	mov	r3, r5
 8004a9c:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004aa0:	4642      	mov	r2, r8
 8004aa2:	fb02 f203 	mul.w	r2, r2, r3
 8004aa6:	464b      	mov	r3, r9
 8004aa8:	4621      	mov	r1, r4
 8004aaa:	fb01 f303 	mul.w	r3, r1, r3
 8004aae:	4413      	add	r3, r2
 8004ab0:	4622      	mov	r2, r4
 8004ab2:	4641      	mov	r1, r8
 8004ab4:	fba2 1201 	umull	r1, r2, r2, r1
 8004ab8:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8004abc:	460a      	mov	r2, r1
 8004abe:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8004ac2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8004ac6:	4413      	add	r3, r2
 8004ac8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004acc:	f04f 0000 	mov.w	r0, #0
 8004ad0:	f04f 0100 	mov.w	r1, #0
 8004ad4:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8004ad8:	4623      	mov	r3, r4
 8004ada:	0a18      	lsrs	r0, r3, #8
 8004adc:	462b      	mov	r3, r5
 8004ade:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8004ae2:	462b      	mov	r3, r5
 8004ae4:	1219      	asrs	r1, r3, #8
 8004ae6:	4b41      	ldr	r3, [pc, #260]	@ (8004bec <BMP280_measureP+0x2e0>)
 8004ae8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004aec:	b21b      	sxth	r3, r3
 8004aee:	17da      	asrs	r2, r3, #31
 8004af0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004af4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004af8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004afc:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8004b00:	464a      	mov	r2, r9
 8004b02:	fb02 f203 	mul.w	r2, r2, r3
 8004b06:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8004b0a:	4644      	mov	r4, r8
 8004b0c:	fb04 f303 	mul.w	r3, r4, r3
 8004b10:	441a      	add	r2, r3
 8004b12:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004b16:	4644      	mov	r4, r8
 8004b18:	fba3 4304 	umull	r4, r3, r3, r4
 8004b1c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004b20:	4623      	mov	r3, r4
 8004b22:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004b26:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8004b2a:	18d3      	adds	r3, r2, r3
 8004b2c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004b30:	f04f 0200 	mov.w	r2, #0
 8004b34:	f04f 0300 	mov.w	r3, #0
 8004b38:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8004b3c:	464c      	mov	r4, r9
 8004b3e:	0323      	lsls	r3, r4, #12
 8004b40:	4644      	mov	r4, r8
 8004b42:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8004b46:	4644      	mov	r4, r8
 8004b48:	0322      	lsls	r2, r4, #12
 8004b4a:	1884      	adds	r4, r0, r2
 8004b4c:	633c      	str	r4, [r7, #48]	@ 0x30
 8004b4e:	eb41 0303 	adc.w	r3, r1, r3
 8004b52:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b54:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8004b58:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 8004b5c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8004b60:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8004b64:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8004b68:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8004b6c:	4b20      	ldr	r3, [pc, #128]	@ (8004bf0 <BMP280_measureP+0x2e4>)
 8004b6e:	881b      	ldrh	r3, [r3, #0]
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	2200      	movs	r2, #0
 8004b74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004b78:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004b7c:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004b80:	462b      	mov	r3, r5
 8004b82:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004b86:	4642      	mov	r2, r8
 8004b88:	fb02 f203 	mul.w	r2, r2, r3
 8004b8c:	464b      	mov	r3, r9
 8004b8e:	4621      	mov	r1, r4
 8004b90:	fb01 f303 	mul.w	r3, r1, r3
 8004b94:	4413      	add	r3, r2
 8004b96:	4622      	mov	r2, r4
 8004b98:	4641      	mov	r1, r8
 8004b9a:	fba2 1201 	umull	r1, r2, r2, r1
 8004b9e:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8004ba2:	460a      	mov	r2, r1
 8004ba4:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8004ba8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004bac:	4413      	add	r3, r2
 8004bae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004bb2:	f04f 0200 	mov.w	r2, #0
 8004bb6:	f04f 0300 	mov.w	r3, #0
 8004bba:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8004bbe:	4629      	mov	r1, r5
 8004bc0:	104a      	asrs	r2, r1, #1
 8004bc2:	4629      	mov	r1, r5
 8004bc4:	17cb      	asrs	r3, r1, #31
 8004bc6:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	if (var1 == 0)
 8004bca:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	d110      	bne.n	8004bf4 <BMP280_measureP+0x2e8>
	{
	return 0;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	e154      	b.n	8004e80 <BMP280_measureP+0x574>
 8004bd6:	bf00      	nop
 8004bd8:	24001578 	.word	0x24001578
 8004bdc:	24001568 	.word	0x24001568
 8004be0:	24001566 	.word	0x24001566
 8004be4:	24001564 	.word	0x24001564
 8004be8:	24001562 	.word	0x24001562
 8004bec:	24001560 	.word	0x24001560
 8004bf0:	2400155a 	.word	0x2400155a
	}
	p = 1048576-adc_P;
 8004bf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004bf8:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8004bfc:	17da      	asrs	r2, r3, #31
 8004bfe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c00:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c02:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8004c06:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	p = (((p<<31)-var2)*3125)/var1;
 8004c0a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004c0e:	105b      	asrs	r3, r3, #1
 8004c10:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004c14:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004c18:	07db      	lsls	r3, r3, #31
 8004c1a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004c1e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8004c22:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8004c26:	4621      	mov	r1, r4
 8004c28:	1a89      	subs	r1, r1, r2
 8004c2a:	67b9      	str	r1, [r7, #120]	@ 0x78
 8004c2c:	4629      	mov	r1, r5
 8004c2e:	eb61 0303 	sbc.w	r3, r1, r3
 8004c32:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004c34:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004c38:	4622      	mov	r2, r4
 8004c3a:	462b      	mov	r3, r5
 8004c3c:	1891      	adds	r1, r2, r2
 8004c3e:	6239      	str	r1, [r7, #32]
 8004c40:	415b      	adcs	r3, r3
 8004c42:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c44:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c48:	4621      	mov	r1, r4
 8004c4a:	1851      	adds	r1, r2, r1
 8004c4c:	61b9      	str	r1, [r7, #24]
 8004c4e:	4629      	mov	r1, r5
 8004c50:	414b      	adcs	r3, r1
 8004c52:	61fb      	str	r3, [r7, #28]
 8004c54:	f04f 0200 	mov.w	r2, #0
 8004c58:	f04f 0300 	mov.w	r3, #0
 8004c5c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8004c60:	4649      	mov	r1, r9
 8004c62:	018b      	lsls	r3, r1, #6
 8004c64:	4641      	mov	r1, r8
 8004c66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c6a:	4641      	mov	r1, r8
 8004c6c:	018a      	lsls	r2, r1, #6
 8004c6e:	4641      	mov	r1, r8
 8004c70:	1889      	adds	r1, r1, r2
 8004c72:	6139      	str	r1, [r7, #16]
 8004c74:	4649      	mov	r1, r9
 8004c76:	eb43 0101 	adc.w	r1, r3, r1
 8004c7a:	6179      	str	r1, [r7, #20]
 8004c7c:	f04f 0200 	mov.w	r2, #0
 8004c80:	f04f 0300 	mov.w	r3, #0
 8004c84:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8004c88:	4649      	mov	r1, r9
 8004c8a:	008b      	lsls	r3, r1, #2
 8004c8c:	4641      	mov	r1, r8
 8004c8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c92:	4641      	mov	r1, r8
 8004c94:	008a      	lsls	r2, r1, #2
 8004c96:	4610      	mov	r0, r2
 8004c98:	4619      	mov	r1, r3
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	4622      	mov	r2, r4
 8004c9e:	189b      	adds	r3, r3, r2
 8004ca0:	60bb      	str	r3, [r7, #8]
 8004ca2:	460b      	mov	r3, r1
 8004ca4:	462a      	mov	r2, r5
 8004ca6:	eb42 0303 	adc.w	r3, r2, r3
 8004caa:	60fb      	str	r3, [r7, #12]
 8004cac:	f04f 0200 	mov.w	r2, #0
 8004cb0:	f04f 0300 	mov.w	r3, #0
 8004cb4:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8004cb8:	4649      	mov	r1, r9
 8004cba:	008b      	lsls	r3, r1, #2
 8004cbc:	4641      	mov	r1, r8
 8004cbe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cc2:	4641      	mov	r1, r8
 8004cc4:	008a      	lsls	r2, r1, #2
 8004cc6:	4610      	mov	r0, r2
 8004cc8:	4619      	mov	r1, r3
 8004cca:	4603      	mov	r3, r0
 8004ccc:	4622      	mov	r2, r4
 8004cce:	189b      	adds	r3, r3, r2
 8004cd0:	673b      	str	r3, [r7, #112]	@ 0x70
 8004cd2:	462b      	mov	r3, r5
 8004cd4:	460a      	mov	r2, r1
 8004cd6:	eb42 0303 	adc.w	r3, r2, r3
 8004cda:	677b      	str	r3, [r7, #116]	@ 0x74
 8004cdc:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8004ce0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8004ce4:	f7fb fd20 	bl	8000728 <__aeabi_ldivmod>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	460b      	mov	r3, r1
 8004cec:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8004cf0:	4b66      	ldr	r3, [pc, #408]	@ (8004e8c <BMP280_measureP+0x580>)
 8004cf2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004cf6:	b21b      	sxth	r3, r3
 8004cf8:	17da      	asrs	r2, r3, #31
 8004cfa:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004cfc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004cfe:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8004d02:	f04f 0000 	mov.w	r0, #0
 8004d06:	f04f 0100 	mov.w	r1, #0
 8004d0a:	0b50      	lsrs	r0, r2, #13
 8004d0c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8004d10:	1359      	asrs	r1, r3, #13
 8004d12:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8004d16:	462b      	mov	r3, r5
 8004d18:	fb00 f203 	mul.w	r2, r0, r3
 8004d1c:	4623      	mov	r3, r4
 8004d1e:	fb03 f301 	mul.w	r3, r3, r1
 8004d22:	4413      	add	r3, r2
 8004d24:	4622      	mov	r2, r4
 8004d26:	fba2 1200 	umull	r1, r2, r2, r0
 8004d2a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004d2e:	460a      	mov	r2, r1
 8004d30:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8004d34:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004d38:	4413      	add	r3, r2
 8004d3a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004d3e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8004d42:	f04f 0000 	mov.w	r0, #0
 8004d46:	f04f 0100 	mov.w	r1, #0
 8004d4a:	0b50      	lsrs	r0, r2, #13
 8004d4c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8004d50:	1359      	asrs	r1, r3, #13
 8004d52:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8004d56:	462b      	mov	r3, r5
 8004d58:	fb00 f203 	mul.w	r2, r0, r3
 8004d5c:	4623      	mov	r3, r4
 8004d5e:	fb03 f301 	mul.w	r3, r3, r1
 8004d62:	4413      	add	r3, r2
 8004d64:	4622      	mov	r2, r4
 8004d66:	fba2 1200 	umull	r1, r2, r2, r0
 8004d6a:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004d6e:	460a      	mov	r2, r1
 8004d70:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8004d74:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8004d78:	4413      	add	r3, r2
 8004d7a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004d7e:	f04f 0200 	mov.w	r2, #0
 8004d82:	f04f 0300 	mov.w	r3, #0
 8004d86:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8004d8a:	4621      	mov	r1, r4
 8004d8c:	0e4a      	lsrs	r2, r1, #25
 8004d8e:	4629      	mov	r1, r5
 8004d90:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8004d94:	4629      	mov	r1, r5
 8004d96:	164b      	asrs	r3, r1, #25
 8004d98:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8004d9c:	4b3c      	ldr	r3, [pc, #240]	@ (8004e90 <BMP280_measureP+0x584>)
 8004d9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004da2:	b21b      	sxth	r3, r3
 8004da4:	17da      	asrs	r2, r3, #31
 8004da6:	663b      	str	r3, [r7, #96]	@ 0x60
 8004da8:	667a      	str	r2, [r7, #100]	@ 0x64
 8004daa:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004dae:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004db2:	462a      	mov	r2, r5
 8004db4:	fb02 f203 	mul.w	r2, r2, r3
 8004db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dbc:	4621      	mov	r1, r4
 8004dbe:	fb01 f303 	mul.w	r3, r1, r3
 8004dc2:	4413      	add	r3, r2
 8004dc4:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8004dc8:	4621      	mov	r1, r4
 8004dca:	fba2 1201 	umull	r1, r2, r2, r1
 8004dce:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8004dd2:	460a      	mov	r2, r1
 8004dd4:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8004dd8:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8004ddc:	4413      	add	r3, r2
 8004dde:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004de2:	f04f 0200 	mov.w	r2, #0
 8004de6:	f04f 0300 	mov.w	r3, #0
 8004dea:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8004dee:	4621      	mov	r1, r4
 8004df0:	0cca      	lsrs	r2, r1, #19
 8004df2:	4629      	mov	r1, r5
 8004df4:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8004df8:	4629      	mov	r1, r5
 8004dfa:	14cb      	asrs	r3, r1, #19
 8004dfc:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8004e00:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8004e04:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8004e08:	1884      	adds	r4, r0, r2
 8004e0a:	65bc      	str	r4, [r7, #88]	@ 0x58
 8004e0c:	eb41 0303 	adc.w	r3, r1, r3
 8004e10:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e12:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8004e16:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8004e1a:	4621      	mov	r1, r4
 8004e1c:	1889      	adds	r1, r1, r2
 8004e1e:	6539      	str	r1, [r7, #80]	@ 0x50
 8004e20:	4629      	mov	r1, r5
 8004e22:	eb43 0101 	adc.w	r1, r3, r1
 8004e26:	6579      	str	r1, [r7, #84]	@ 0x54
 8004e28:	f04f 0000 	mov.w	r0, #0
 8004e2c:	f04f 0100 	mov.w	r1, #0
 8004e30:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8004e34:	4623      	mov	r3, r4
 8004e36:	0a18      	lsrs	r0, r3, #8
 8004e38:	462b      	mov	r3, r5
 8004e3a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8004e3e:	462b      	mov	r3, r5
 8004e40:	1219      	asrs	r1, r3, #8
 8004e42:	4b14      	ldr	r3, [pc, #80]	@ (8004e94 <BMP280_measureP+0x588>)
 8004e44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e48:	b21b      	sxth	r3, r3
 8004e4a:	17da      	asrs	r2, r3, #31
 8004e4c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e4e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004e50:	f04f 0200 	mov.w	r2, #0
 8004e54:	f04f 0300 	mov.w	r3, #0
 8004e58:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8004e5c:	464c      	mov	r4, r9
 8004e5e:	0123      	lsls	r3, r4, #4
 8004e60:	4644      	mov	r4, r8
 8004e62:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8004e66:	4644      	mov	r4, r8
 8004e68:	0122      	lsls	r2, r4, #4
 8004e6a:	1884      	adds	r4, r0, r2
 8004e6c:	603c      	str	r4, [r7, #0]
 8004e6e:	eb41 0303 	adc.w	r3, r1, r3
 8004e72:	607b      	str	r3, [r7, #4]
 8004e74:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004e78:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (uint32_t)p;
 8004e7c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004e86:	46bd      	mov	sp, r7
 8004e88:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e8c:	2400156e 	.word	0x2400156e
 8004e90:	2400156c 	.word	0x2400156c
 8004e94:	2400156a 	.word	0x2400156a

08004e98 <BMP280_measureH>:

uint16_t BMP280_measureH(uint32_t Pres, int32_t Temp){
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b088      	sub	sp, #32
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
	double var1, var2, h;

	if(Pres == 0) return 0;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d101      	bne.n	8004eac <BMP280_measureH+0x14>
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	e03d      	b.n	8004f28 <BMP280_measureH+0x90>
	var1 = -log(((double)Pres)/101325);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	ee07 3a90 	vmov	s15, r3
 8004eb2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8004eb6:	ed9f 5b1e 	vldr	d5, [pc, #120]	@ 8004f30 <BMP280_measureH+0x98>
 8004eba:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8004ebe:	eeb0 0b46 	vmov.f64	d0, d6
 8004ec2:	f014 fe45 	bl	8019b50 <log>
 8004ec6:	eeb0 7b40 	vmov.f64	d7, d0
 8004eca:	eeb1 7b47 	vneg.f64	d7, d7
 8004ece:	ed87 7b06 	vstr	d7, [r7, #24]

	if(var1 == 0) return 0;
 8004ed2:	ed97 7b06 	vldr	d7, [r7, #24]
 8004ed6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ede:	d101      	bne.n	8004ee4 <BMP280_measureH+0x4c>
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	e021      	b.n	8004f28 <BMP280_measureH+0x90>
	var2 = 0.0341663/((((double)Temp)/100)+273.15);
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	ee07 3a90 	vmov	s15, r3
 8004eea:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8004eee:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 8004f38 <BMP280_measureH+0xa0>
 8004ef2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004ef6:	ed9f 6b12 	vldr	d6, [pc, #72]	@ 8004f40 <BMP280_measureH+0xa8>
 8004efa:	ee37 6b06 	vadd.f64	d6, d7, d6
 8004efe:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 8004f48 <BMP280_measureH+0xb0>
 8004f02:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004f06:	ed87 7b04 	vstr	d7, [r7, #16]
	h = var1/var2;
 8004f0a:	ed97 5b06 	vldr	d5, [r7, #24]
 8004f0e:	ed97 6b04 	vldr	d6, [r7, #16]
 8004f12:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004f16:	ed87 7b02 	vstr	d7, [r7, #8]
	return (uint16_t)h;
 8004f1a:	ed97 7b02 	vldr	d7, [r7, #8]
 8004f1e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8004f22:	ee17 3a90 	vmov	r3, s15
 8004f26:	b29b      	uxth	r3, r3
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3720      	adds	r7, #32
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	00000000 	.word	0x00000000
 8004f34:	40f8bcd0 	.word	0x40f8bcd0
 8004f38:	00000000 	.word	0x00000000
 8004f3c:	40590000 	.word	0x40590000
 8004f40:	66666666 	.word	0x66666666
 8004f44:	40711266 	.word	0x40711266
 8004f48:	ca402a92 	.word	0xca402a92
 8004f4c:	3fa17e3e 	.word	0x3fa17e3e

08004f50 <BMP280_init>:

void BMP280_init(void){
 8004f50:	b580      	push	{r7, lr}
 8004f52:	af00      	add	r7, sp, #0
	BMP280_unselect();
 8004f54:	2201      	movs	r2, #1
 8004f56:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004f5a:	480d      	ldr	r0, [pc, #52]	@ (8004f90 <BMP280_init+0x40>)
 8004f5c:	f005 fa96 	bl	800a48c <HAL_GPIO_WritePin>
	BMP280_config();
 8004f60:	f7ff fb8a 	bl	8004678 <BMP280_config>
	BMP280.ID = BMP280_read(0x89);
 8004f64:	2089      	movs	r0, #137	@ 0x89
 8004f66:	f7ff fb59 	bl	800461c <BMP280_read>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	4b09      	ldr	r3, [pc, #36]	@ (8004f94 <BMP280_init+0x44>)
 8004f70:	701a      	strb	r2, [r3, #0]
	BMP280_calibrationData();
 8004f72:	f7ff fb8d 	bl	8004690 <BMP280_calibrationData>
	BMP280_readRawValues();
 8004f76:	f7ff fc41 	bl	80047fc <BMP280_readRawValues>
	BMP280.Temp_inicial = BMP280_measureT(T_raw);
 8004f7a:	4b07      	ldr	r3, [pc, #28]	@ (8004f98 <BMP280_init+0x48>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7ff fc80 	bl	8004884 <BMP280_measureT>
 8004f84:	4603      	mov	r3, r0
 8004f86:	4a03      	ldr	r2, [pc, #12]	@ (8004f94 <BMP280_init+0x44>)
 8004f88:	6093      	str	r3, [r2, #8]
}
 8004f8a:	bf00      	nop
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	58020400 	.word	0x58020400
 8004f94:	24001544 	.word	0x24001544
 8004f98:	24001570 	.word	0x24001570

08004f9c <BMP280_calculate>:

void BMP280_calculate(void){
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	af00      	add	r7, sp, #0
	//BMP280.ID = 0;
	BMP280.ID = BMP280_read(0x89);
 8004fa0:	2089      	movs	r0, #137	@ 0x89
 8004fa2:	f7ff fb3b 	bl	800461c <BMP280_read>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	461a      	mov	r2, r3
 8004faa:	4b16      	ldr	r3, [pc, #88]	@ (8005004 <BMP280_calculate+0x68>)
 8004fac:	701a      	strb	r2, [r3, #0]
	BMP280_readRawValues();
 8004fae:	f7ff fc25 	bl	80047fc <BMP280_readRawValues>
	BMP280.Temp = BMP280_measureT(T_raw);
 8004fb2:	4b15      	ldr	r3, [pc, #84]	@ (8005008 <BMP280_calculate+0x6c>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f7ff fc64 	bl	8004884 <BMP280_measureT>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	4a11      	ldr	r2, [pc, #68]	@ (8005004 <BMP280_calculate+0x68>)
 8004fc0:	6053      	str	r3, [r2, #4]
	BMP280.Pressure    		= BMP280_measureP(P_raw)/256;
 8004fc2:	4b12      	ldr	r3, [pc, #72]	@ (800500c <BMP280_calculate+0x70>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f7ff fca0 	bl	800490c <BMP280_measureP>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	0a1b      	lsrs	r3, r3, #8
 8004fd0:	4a0c      	ldr	r2, [pc, #48]	@ (8005004 <BMP280_calculate+0x68>)
 8004fd2:	60d3      	str	r3, [r2, #12]
	BMP280.Barometric_Altitude = BMP280_measureH(BMP280.Pressure, BMP280.Temp_inicial);
 8004fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8005004 <BMP280_calculate+0x68>)
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	4a0a      	ldr	r2, [pc, #40]	@ (8005004 <BMP280_calculate+0x68>)
 8004fda:	6892      	ldr	r2, [r2, #8]
 8004fdc:	4611      	mov	r1, r2
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f7ff ff5a 	bl	8004e98 <BMP280_measureH>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	4b06      	ldr	r3, [pc, #24]	@ (8005004 <BMP280_calculate+0x68>)
 8004fea:	821a      	strh	r2, [r3, #16]

	if(BMP280.Barometric_Altitude > BMP280.Max_Altitude) BMP280.Max_Altitude = BMP280.Barometric_Altitude;
 8004fec:	4b05      	ldr	r3, [pc, #20]	@ (8005004 <BMP280_calculate+0x68>)
 8004fee:	8a1a      	ldrh	r2, [r3, #16]
 8004ff0:	4b04      	ldr	r3, [pc, #16]	@ (8005004 <BMP280_calculate+0x68>)
 8004ff2:	8a5b      	ldrh	r3, [r3, #18]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d903      	bls.n	8005000 <BMP280_calculate+0x64>
 8004ff8:	4b02      	ldr	r3, [pc, #8]	@ (8005004 <BMP280_calculate+0x68>)
 8004ffa:	8a1a      	ldrh	r2, [r3, #16]
 8004ffc:	4b01      	ldr	r3, [pc, #4]	@ (8005004 <BMP280_calculate+0x68>)
 8004ffe:	825a      	strh	r2, [r3, #18]
}
 8005000:	bf00      	nop
 8005002:	bd80      	pop	{r7, pc}
 8005004:	24001544 	.word	0x24001544
 8005008:	24001570 	.word	0x24001570
 800500c:	24001574 	.word	0x24001574

08005010 <bno055_delay>:

BNO_CurrentState_e BNO_CurrentState = Init;

IMU_t IMU;

void bno055_delay(uint8_t time) {
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
 8005016:	4603      	mov	r3, r0
 8005018:	71fb      	strb	r3, [r7, #7]
	BNO_DelayCounter += time;
 800501a:	4b06      	ldr	r3, [pc, #24]	@ (8005034 <bno055_delay+0x24>)
 800501c:	781a      	ldrb	r2, [r3, #0]
 800501e:	79fb      	ldrb	r3, [r7, #7]
 8005020:	4413      	add	r3, r2
 8005022:	b2da      	uxtb	r2, r3
 8005024:	4b03      	ldr	r3, [pc, #12]	@ (8005034 <bno055_delay+0x24>)
 8005026:	701a      	strb	r2, [r3, #0]
}
 8005028:	bf00      	nop
 800502a:	370c      	adds	r7, #12
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr
 8005034:	2400167f 	.word	0x2400167f

08005038 <BNO_Read>:

HAL_StatusTypeDef BNO_Read(uint8_t Address,uint8_t Size){
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	4603      	mov	r3, r0
 8005040:	460a      	mov	r2, r1
 8005042:	71fb      	strb	r3, [r7, #7]
 8005044:	4613      	mov	r3, r2
 8005046:	71bb      	strb	r3, [r7, #6]
	uint8_t ReadCommand[4] = {0xAA, 0x01, Address, Size};
 8005048:	23aa      	movs	r3, #170	@ 0xaa
 800504a:	723b      	strb	r3, [r7, #8]
 800504c:	2301      	movs	r3, #1
 800504e:	727b      	strb	r3, [r7, #9]
 8005050:	79fb      	ldrb	r3, [r7, #7]
 8005052:	72bb      	strb	r3, [r7, #10]
 8005054:	79bb      	ldrb	r3, [r7, #6]
 8005056:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef uartError;

	BNO_RxBuffer[0] = Address;
 8005058:	4a08      	ldr	r2, [pc, #32]	@ (800507c <BNO_Read+0x44>)
 800505a:	79fb      	ldrb	r3, [r7, #7]
 800505c:	7013      	strb	r3, [r2, #0]

	uartError = HAL_UART_Transmit(&huart3, ReadCommand, 4,100);
 800505e:	f107 0108 	add.w	r1, r7, #8
 8005062:	2364      	movs	r3, #100	@ 0x64
 8005064:	2204      	movs	r2, #4
 8005066:	4806      	ldr	r0, [pc, #24]	@ (8005080 <BNO_Read+0x48>)
 8005068:	f00a fc36 	bl	800f8d8 <HAL_UART_Transmit>
 800506c:	4603      	mov	r3, r0
 800506e:	73fb      	strb	r3, [r7, #15]
	return uartError;
 8005070:	7bfb      	ldrb	r3, [r7, #15]
}
 8005072:	4618      	mov	r0, r3
 8005074:	3710      	adds	r7, #16
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	2400157c 	.word	0x2400157c
 8005080:	240012b4 	.word	0x240012b4

08005084 <BNO_Write>:

HAL_StatusTypeDef BNO_Write(uint8_t Address,uint8_t Data){
 8005084:	b580      	push	{r7, lr}
 8005086:	b084      	sub	sp, #16
 8005088:	af00      	add	r7, sp, #0
 800508a:	4603      	mov	r3, r0
 800508c:	460a      	mov	r2, r1
 800508e:	71fb      	strb	r3, [r7, #7]
 8005090:	4613      	mov	r3, r2
 8005092:	71bb      	strb	r3, [r7, #6]
	uint8_t WriteCommand[5];
	HAL_StatusTypeDef uartError;

	WriteCommand[0] = 0xAA;
 8005094:	23aa      	movs	r3, #170	@ 0xaa
 8005096:	723b      	strb	r3, [r7, #8]
	WriteCommand[1] = 0x00;
 8005098:	2300      	movs	r3, #0
 800509a:	727b      	strb	r3, [r7, #9]
	WriteCommand[2] = Address;
 800509c:	79fb      	ldrb	r3, [r7, #7]
 800509e:	72bb      	strb	r3, [r7, #10]
	WriteCommand[3] = 1;
 80050a0:	2301      	movs	r3, #1
 80050a2:	72fb      	strb	r3, [r7, #11]
	WriteCommand[4] = Data;
 80050a4:	79bb      	ldrb	r3, [r7, #6]
 80050a6:	733b      	strb	r3, [r7, #12]

	uartError = HAL_UART_Transmit(&huart3, WriteCommand,5,100);
 80050a8:	f107 0108 	add.w	r1, r7, #8
 80050ac:	2364      	movs	r3, #100	@ 0x64
 80050ae:	2205      	movs	r2, #5
 80050b0:	4804      	ldr	r0, [pc, #16]	@ (80050c4 <BNO_Write+0x40>)
 80050b2:	f00a fc11 	bl	800f8d8 <HAL_UART_Transmit>
 80050b6:	4603      	mov	r3, r0
 80050b8:	73fb      	strb	r3, [r7, #15]
	return uartError;
 80050ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3710      	adds	r7, #16
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	240012b4 	.word	0x240012b4

080050c8 <BNO_Write_MB>:

HAL_StatusTypeDef BNO_Write_MB(uint8_t Address,uint8_t Size, uint8_t *pData){
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b0c4      	sub	sp, #272	@ 0x110
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80050d2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80050d6:	601a      	str	r2, [r3, #0]
 80050d8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80050dc:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80050e0:	4602      	mov	r2, r0
 80050e2:	701a      	strb	r2, [r3, #0]
 80050e4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80050e8:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80050ec:	460a      	mov	r2, r1
 80050ee:	701a      	strb	r2, [r3, #0]
    uint8_t WriteCommand[255];
    HAL_StatusTypeDef uartError;

    WriteCommand[0] = 0xAA;
 80050f0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80050f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80050f8:	22aa      	movs	r2, #170	@ 0xaa
 80050fa:	701a      	strb	r2, [r3, #0]
    WriteCommand[1] = 0x00;
 80050fc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005100:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005104:	2200      	movs	r2, #0
 8005106:	705a      	strb	r2, [r3, #1]
    WriteCommand[2] = Address;
 8005108:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800510c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005110:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8005114:	f2a2 1209 	subw	r2, r2, #265	@ 0x109
 8005118:	7812      	ldrb	r2, [r2, #0]
 800511a:	709a      	strb	r2, [r3, #2]
    WriteCommand[3] = Size;
 800511c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005120:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005124:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8005128:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 800512c:	7812      	ldrb	r2, [r2, #0]
 800512e:	70da      	strb	r2, [r3, #3]

    for (uint8_t n = 0; n < Size; ++n) {
 8005130:	2300      	movs	r3, #0
 8005132:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8005136:	e015      	b.n	8005164 <BNO_Write_MB+0x9c>
        WriteCommand[n + 4] = pData[n];
 8005138:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800513c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8005140:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8005144:	6812      	ldr	r2, [r2, #0]
 8005146:	441a      	add	r2, r3
 8005148:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800514c:	3304      	adds	r3, #4
 800514e:	7811      	ldrb	r1, [r2, #0]
 8005150:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8005154:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8005158:	54d1      	strb	r1, [r2, r3]
    for (uint8_t n = 0; n < Size; ++n) {
 800515a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800515e:	3301      	adds	r3, #1
 8005160:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8005164:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005168:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800516c:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	429a      	cmp	r2, r3
 8005174:	d3e0      	bcc.n	8005138 <BNO_Write_MB+0x70>
    }

    uartError = HAL_UART_Transmit(&huart3, WriteCommand, (Size + 4),100);
 8005176:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800517a:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	b29b      	uxth	r3, r3
 8005182:	3304      	adds	r3, #4
 8005184:	b29a      	uxth	r2, r3
 8005186:	f107 010c 	add.w	r1, r7, #12
 800518a:	2364      	movs	r3, #100	@ 0x64
 800518c:	4806      	ldr	r0, [pc, #24]	@ (80051a8 <BNO_Write_MB+0xe0>)
 800518e:	f00a fba3 	bl	800f8d8 <HAL_UART_Transmit>
 8005192:	4603      	mov	r3, r0
 8005194:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
    return uartError;
 8005198:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
}
 800519c:	4618      	mov	r0, r3
 800519e:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	240012b4 	.word	0x240012b4

080051ac <BNO_Page0Adress>:

void BNO_Page0Adress(void){
 80051ac:	b480      	push	{r7}
 80051ae:	af00      	add	r7, sp, #0
	switch (BNO_RxBuffer[0]) {
 80051b0:	4ba6      	ldr	r3, [pc, #664]	@ (800544c <BNO_Page0Adress+0x2a0>)
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	2b55      	cmp	r3, #85	@ 0x55
 80051b6:	f300 8247 	bgt.w	8005648 <BNO_Page0Adress+0x49c>
 80051ba:	2b35      	cmp	r3, #53	@ 0x35
 80051bc:	da0a      	bge.n	80051d4 <BNO_Page0Adress+0x28>
 80051be:	2b08      	cmp	r3, #8
 80051c0:	f000 814a 	beq.w	8005458 <BNO_Page0Adress+0x2ac>
 80051c4:	2b08      	cmp	r3, #8
 80051c6:	f300 823f 	bgt.w	8005648 <BNO_Page0Adress+0x49c>
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d04c      	beq.n	8005268 <BNO_Page0Adress+0xbc>
 80051ce:	2b07      	cmp	r3, #7
 80051d0:	d064      	beq.n	800529c <BNO_Page0Adress+0xf0>
			IMU.Roll = ((float)((int16_t)((BNO_RxBuffer[24] << 8) | BNO_RxBuffer[23])))/16;

			BNO_ErrorHandler = ReadSucces;
			break;
		default:
			break;
 80051d2:	e239      	b.n	8005648 <BNO_Page0Adress+0x49c>
	switch (BNO_RxBuffer[0]) {
 80051d4:	3b35      	subs	r3, #53	@ 0x35
 80051d6:	2b20      	cmp	r3, #32
 80051d8:	f200 8236 	bhi.w	8005648 <BNO_Page0Adress+0x49c>
 80051dc:	a201      	add	r2, pc, #4	@ (adr r2, 80051e4 <BNO_Page0Adress+0x38>)
 80051de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e2:	bf00      	nop
 80051e4:	080052e5 	.word	0x080052e5
 80051e8:	08005649 	.word	0x08005649
 80051ec:	08005649 	.word	0x08005649
 80051f0:	08005649 	.word	0x08005649
 80051f4:	080052c1 	.word	0x080052c1
 80051f8:	08005649 	.word	0x08005649
 80051fc:	080052af 	.word	0x080052af
 8005200:	08005649 	.word	0x08005649
 8005204:	080052d3 	.word	0x080052d3
 8005208:	08005649 	.word	0x08005649
 800520c:	08005649 	.word	0x08005649
 8005210:	08005649 	.word	0x08005649
 8005214:	08005649 	.word	0x08005649
 8005218:	08005649 	.word	0x08005649
 800521c:	08005649 	.word	0x08005649
 8005220:	08005649 	.word	0x08005649
 8005224:	08005649 	.word	0x08005649
 8005228:	08005649 	.word	0x08005649
 800522c:	08005649 	.word	0x08005649
 8005230:	08005649 	.word	0x08005649
 8005234:	08005649 	.word	0x08005649
 8005238:	08005649 	.word	0x08005649
 800523c:	08005649 	.word	0x08005649
 8005240:	08005649 	.word	0x08005649
 8005244:	08005649 	.word	0x08005649
 8005248:	08005649 	.word	0x08005649
 800524c:	08005649 	.word	0x08005649
 8005250:	08005649 	.word	0x08005649
 8005254:	08005649 	.word	0x08005649
 8005258:	08005649 	.word	0x08005649
 800525c:	08005649 	.word	0x08005649
 8005260:	08005649 	.word	0x08005649
 8005264:	0800533d 	.word	0x0800533d
			if(BNO_RxBuffer[1] != 160) return;
 8005268:	4b78      	ldr	r3, [pc, #480]	@ (800544c <BNO_Page0Adress+0x2a0>)
 800526a:	785b      	ldrb	r3, [r3, #1]
 800526c:	2ba0      	cmp	r3, #160	@ 0xa0
 800526e:	f040 81ed 	bne.w	800564c <BNO_Page0Adress+0x4a0>
			IMU.ID = BNO_RxBuffer[1];
 8005272:	4b76      	ldr	r3, [pc, #472]	@ (800544c <BNO_Page0Adress+0x2a0>)
 8005274:	785a      	ldrb	r2, [r3, #1]
 8005276:	4b76      	ldr	r3, [pc, #472]	@ (8005450 <BNO_Page0Adress+0x2a4>)
 8005278:	701a      	strb	r2, [r3, #0]
			IMU.ACC.ID = BNO_RxBuffer[2];
 800527a:	4b74      	ldr	r3, [pc, #464]	@ (800544c <BNO_Page0Adress+0x2a0>)
 800527c:	789a      	ldrb	r2, [r3, #2]
 800527e:	4b74      	ldr	r3, [pc, #464]	@ (8005450 <BNO_Page0Adress+0x2a4>)
 8005280:	711a      	strb	r2, [r3, #4]
			IMU.MAG.ID = BNO_RxBuffer[3];
 8005282:	4b72      	ldr	r3, [pc, #456]	@ (800544c <BNO_Page0Adress+0x2a0>)
 8005284:	78da      	ldrb	r2, [r3, #3]
 8005286:	4b72      	ldr	r3, [pc, #456]	@ (8005450 <BNO_Page0Adress+0x2a4>)
 8005288:	751a      	strb	r2, [r3, #20]
			IMU.GYR.ID = BNO_RxBuffer[4];
 800528a:	4b70      	ldr	r3, [pc, #448]	@ (800544c <BNO_Page0Adress+0x2a0>)
 800528c:	791a      	ldrb	r2, [r3, #4]
 800528e:	4b70      	ldr	r3, [pc, #448]	@ (8005450 <BNO_Page0Adress+0x2a4>)
 8005290:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			BNO_ErrorHandler = ReadSucces;
 8005294:	4b6f      	ldr	r3, [pc, #444]	@ (8005454 <BNO_Page0Adress+0x2a8>)
 8005296:	220b      	movs	r2, #11
 8005298:	701a      	strb	r2, [r3, #0]
			break;
 800529a:	e1d8      	b.n	800564e <BNO_Page0Adress+0x4a2>
			IMU.Page = BNO_RxBuffer[1];
 800529c:	4b6b      	ldr	r3, [pc, #428]	@ (800544c <BNO_Page0Adress+0x2a0>)
 800529e:	785a      	ldrb	r2, [r3, #1]
 80052a0:	4b6b      	ldr	r3, [pc, #428]	@ (8005450 <BNO_Page0Adress+0x2a4>)
 80052a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
			BNO_ErrorHandler = ReadSucces;
 80052a6:	4b6b      	ldr	r3, [pc, #428]	@ (8005454 <BNO_Page0Adress+0x2a8>)
 80052a8:	220b      	movs	r2, #11
 80052aa:	701a      	strb	r2, [r3, #0]
			break;
 80052ac:	e1cf      	b.n	800564e <BNO_Page0Adress+0x4a2>
			IMU.Unit_Select = BNO_RxBuffer[1];
 80052ae:	4b67      	ldr	r3, [pc, #412]	@ (800544c <BNO_Page0Adress+0x2a0>)
 80052b0:	785a      	ldrb	r2, [r3, #1]
 80052b2:	4b67      	ldr	r3, [pc, #412]	@ (8005450 <BNO_Page0Adress+0x2a4>)
 80052b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
			BNO_ErrorHandler = ReadSucces;
 80052b8:	4b66      	ldr	r3, [pc, #408]	@ (8005454 <BNO_Page0Adress+0x2a8>)
 80052ba:	220b      	movs	r2, #11
 80052bc:	701a      	strb	r2, [r3, #0]
			break;
 80052be:	e1c6      	b.n	800564e <BNO_Page0Adress+0x4a2>
			IMU.System_Status = BNO_RxBuffer[1];
 80052c0:	4b62      	ldr	r3, [pc, #392]	@ (800544c <BNO_Page0Adress+0x2a0>)
 80052c2:	785a      	ldrb	r2, [r3, #1]
 80052c4:	4b62      	ldr	r3, [pc, #392]	@ (8005450 <BNO_Page0Adress+0x2a4>)
 80052c6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
			BNO_ErrorHandler = ReadSucces;
 80052ca:	4b62      	ldr	r3, [pc, #392]	@ (8005454 <BNO_Page0Adress+0x2a8>)
 80052cc:	220b      	movs	r2, #11
 80052ce:	701a      	strb	r2, [r3, #0]
			break;
 80052d0:	e1bd      	b.n	800564e <BNO_Page0Adress+0x4a2>
			IMU.Op_Mode = BNO_RxBuffer[1];
 80052d2:	4b5e      	ldr	r3, [pc, #376]	@ (800544c <BNO_Page0Adress+0x2a0>)
 80052d4:	785a      	ldrb	r2, [r3, #1]
 80052d6:	4b5e      	ldr	r3, [pc, #376]	@ (8005450 <BNO_Page0Adress+0x2a4>)
 80052d8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
			BNO_ErrorHandler = ReadSucces;
 80052dc:	4b5d      	ldr	r3, [pc, #372]	@ (8005454 <BNO_Page0Adress+0x2a8>)
 80052de:	220b      	movs	r2, #11
 80052e0:	701a      	strb	r2, [r3, #0]
			break;
 80052e2:	e1b4      	b.n	800564e <BNO_Page0Adress+0x4a2>
			IMU.CalSatus.Full = BNO_RxBuffer[1];
 80052e4:	4b59      	ldr	r3, [pc, #356]	@ (800544c <BNO_Page0Adress+0x2a0>)
 80052e6:	785a      	ldrb	r2, [r3, #1]
 80052e8:	4b59      	ldr	r3, [pc, #356]	@ (8005450 <BNO_Page0Adress+0x2a4>)
 80052ea:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			IMU.CalSatus.Sys = (BNO_RxBuffer[1] >> 6) & 0x03;
 80052ee:	4b57      	ldr	r3, [pc, #348]	@ (800544c <BNO_Page0Adress+0x2a0>)
 80052f0:	785b      	ldrb	r3, [r3, #1]
 80052f2:	099b      	lsrs	r3, r3, #6
 80052f4:	b2da      	uxtb	r2, r3
 80052f6:	4b56      	ldr	r3, [pc, #344]	@ (8005450 <BNO_Page0Adress+0x2a4>)
 80052f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			IMU.CalSatus.Gyr = (BNO_RxBuffer[1] >> 4) & 0x03;
 80052fc:	4b53      	ldr	r3, [pc, #332]	@ (800544c <BNO_Page0Adress+0x2a0>)
 80052fe:	785b      	ldrb	r3, [r3, #1]
 8005300:	091b      	lsrs	r3, r3, #4
 8005302:	b2db      	uxtb	r3, r3
 8005304:	f003 0303 	and.w	r3, r3, #3
 8005308:	b2da      	uxtb	r2, r3
 800530a:	4b51      	ldr	r3, [pc, #324]	@ (8005450 <BNO_Page0Adress+0x2a4>)
 800530c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
			IMU.CalSatus.Acc = (BNO_RxBuffer[1] >> 2) & 0x03;
 8005310:	4b4e      	ldr	r3, [pc, #312]	@ (800544c <BNO_Page0Adress+0x2a0>)
 8005312:	785b      	ldrb	r3, [r3, #1]
 8005314:	089b      	lsrs	r3, r3, #2
 8005316:	b2db      	uxtb	r3, r3
 8005318:	f003 0303 	and.w	r3, r3, #3
 800531c:	b2da      	uxtb	r2, r3
 800531e:	4b4c      	ldr	r3, [pc, #304]	@ (8005450 <BNO_Page0Adress+0x2a4>)
 8005320:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
			IMU.CalSatus.Mag = BNO_RxBuffer[1] & 0x03;
 8005324:	4b49      	ldr	r3, [pc, #292]	@ (800544c <BNO_Page0Adress+0x2a0>)
 8005326:	785b      	ldrb	r3, [r3, #1]
 8005328:	f003 0303 	and.w	r3, r3, #3
 800532c:	b2da      	uxtb	r2, r3
 800532e:	4b48      	ldr	r3, [pc, #288]	@ (8005450 <BNO_Page0Adress+0x2a4>)
 8005330:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			BNO_ErrorHandler = ReadSucces;
 8005334:	4b47      	ldr	r3, [pc, #284]	@ (8005454 <BNO_Page0Adress+0x2a8>)
 8005336:	220b      	movs	r2, #11
 8005338:	701a      	strb	r2, [r3, #0]
			break;
 800533a:	e188      	b.n	800564e <BNO_Page0Adress+0x4a2>
			IMU.Calibration_Data.offset.accel.x = (int16_t)((BNO_RxBuffer[2] << 8) | BNO_RxBuffer[1]);
 800533c:	4b43      	ldr	r3, [pc, #268]	@ (800544c <BNO_Page0Adress+0x2a0>)
 800533e:	789b      	ldrb	r3, [r3, #2]
 8005340:	021b      	lsls	r3, r3, #8
 8005342:	b21a      	sxth	r2, r3
 8005344:	4b41      	ldr	r3, [pc, #260]	@ (800544c <BNO_Page0Adress+0x2a0>)
 8005346:	785b      	ldrb	r3, [r3, #1]
 8005348:	b21b      	sxth	r3, r3
 800534a:	4313      	orrs	r3, r2
 800534c:	b21a      	sxth	r2, r3
 800534e:	4b40      	ldr	r3, [pc, #256]	@ (8005450 <BNO_Page0Adress+0x2a4>)
 8005350:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
			IMU.Calibration_Data.offset.accel.y = (int16_t)((BNO_RxBuffer[4] << 8) | BNO_RxBuffer[3]);
 8005354:	4b3d      	ldr	r3, [pc, #244]	@ (800544c <BNO_Page0Adress+0x2a0>)
 8005356:	791b      	ldrb	r3, [r3, #4]
 8005358:	021b      	lsls	r3, r3, #8
 800535a:	b21a      	sxth	r2, r3
 800535c:	4b3b      	ldr	r3, [pc, #236]	@ (800544c <BNO_Page0Adress+0x2a0>)
 800535e:	78db      	ldrb	r3, [r3, #3]
 8005360:	b21b      	sxth	r3, r3
 8005362:	4313      	orrs	r3, r2
 8005364:	b21a      	sxth	r2, r3
 8005366:	4b3a      	ldr	r3, [pc, #232]	@ (8005450 <BNO_Page0Adress+0x2a4>)
 8005368:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
			IMU.Calibration_Data.offset.accel.z = (int16_t)((BNO_RxBuffer[6] << 8) | BNO_RxBuffer[5]);
 800536c:	4b37      	ldr	r3, [pc, #220]	@ (800544c <BNO_Page0Adress+0x2a0>)
 800536e:	799b      	ldrb	r3, [r3, #6]
 8005370:	021b      	lsls	r3, r3, #8
 8005372:	b21a      	sxth	r2, r3
 8005374:	4b35      	ldr	r3, [pc, #212]	@ (800544c <BNO_Page0Adress+0x2a0>)
 8005376:	795b      	ldrb	r3, [r3, #5]
 8005378:	b21b      	sxth	r3, r3
 800537a:	4313      	orrs	r3, r2
 800537c:	b21a      	sxth	r2, r3
 800537e:	4b34      	ldr	r3, [pc, #208]	@ (8005450 <BNO_Page0Adress+0x2a4>)
 8005380:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
			IMU.Calibration_Data.offset.mag.x = (int16_t)((BNO_RxBuffer[8] << 8) | BNO_RxBuffer[7]);
 8005384:	4b31      	ldr	r3, [pc, #196]	@ (800544c <BNO_Page0Adress+0x2a0>)
 8005386:	7a1b      	ldrb	r3, [r3, #8]
 8005388:	021b      	lsls	r3, r3, #8
 800538a:	b21a      	sxth	r2, r3
 800538c:	4b2f      	ldr	r3, [pc, #188]	@ (800544c <BNO_Page0Adress+0x2a0>)
 800538e:	79db      	ldrb	r3, [r3, #7]
 8005390:	b21b      	sxth	r3, r3
 8005392:	4313      	orrs	r3, r2
 8005394:	b21a      	sxth	r2, r3
 8005396:	4b2e      	ldr	r3, [pc, #184]	@ (8005450 <BNO_Page0Adress+0x2a4>)
 8005398:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
			IMU.Calibration_Data.offset.mag.y = (int16_t)((BNO_RxBuffer[10] << 8) | BNO_RxBuffer[9]);
 800539c:	4b2b      	ldr	r3, [pc, #172]	@ (800544c <BNO_Page0Adress+0x2a0>)
 800539e:	7a9b      	ldrb	r3, [r3, #10]
 80053a0:	021b      	lsls	r3, r3, #8
 80053a2:	b21a      	sxth	r2, r3
 80053a4:	4b29      	ldr	r3, [pc, #164]	@ (800544c <BNO_Page0Adress+0x2a0>)
 80053a6:	7a5b      	ldrb	r3, [r3, #9]
 80053a8:	b21b      	sxth	r3, r3
 80053aa:	4313      	orrs	r3, r2
 80053ac:	b21a      	sxth	r2, r3
 80053ae:	4b28      	ldr	r3, [pc, #160]	@ (8005450 <BNO_Page0Adress+0x2a4>)
 80053b0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
			IMU.Calibration_Data.offset.mag.z = (int16_t)((BNO_RxBuffer[12] << 8) | BNO_RxBuffer[11]);
 80053b4:	4b25      	ldr	r3, [pc, #148]	@ (800544c <BNO_Page0Adress+0x2a0>)
 80053b6:	7b1b      	ldrb	r3, [r3, #12]
 80053b8:	021b      	lsls	r3, r3, #8
 80053ba:	b21a      	sxth	r2, r3
 80053bc:	4b23      	ldr	r3, [pc, #140]	@ (800544c <BNO_Page0Adress+0x2a0>)
 80053be:	7adb      	ldrb	r3, [r3, #11]
 80053c0:	b21b      	sxth	r3, r3
 80053c2:	4313      	orrs	r3, r2
 80053c4:	b21a      	sxth	r2, r3
 80053c6:	4b22      	ldr	r3, [pc, #136]	@ (8005450 <BNO_Page0Adress+0x2a4>)
 80053c8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
			IMU.Calibration_Data.offset.gyro.x = (int16_t)((BNO_RxBuffer[14] << 8) | BNO_RxBuffer[13]);
 80053cc:	4b1f      	ldr	r3, [pc, #124]	@ (800544c <BNO_Page0Adress+0x2a0>)
 80053ce:	7b9b      	ldrb	r3, [r3, #14]
 80053d0:	021b      	lsls	r3, r3, #8
 80053d2:	b21a      	sxth	r2, r3
 80053d4:	4b1d      	ldr	r3, [pc, #116]	@ (800544c <BNO_Page0Adress+0x2a0>)
 80053d6:	7b5b      	ldrb	r3, [r3, #13]
 80053d8:	b21b      	sxth	r3, r3
 80053da:	4313      	orrs	r3, r2
 80053dc:	b21a      	sxth	r2, r3
 80053de:	4b1c      	ldr	r3, [pc, #112]	@ (8005450 <BNO_Page0Adress+0x2a4>)
 80053e0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
			IMU.Calibration_Data.offset.gyro.y = (int16_t)((BNO_RxBuffer[16] << 8) | BNO_RxBuffer[15]);
 80053e4:	4b19      	ldr	r3, [pc, #100]	@ (800544c <BNO_Page0Adress+0x2a0>)
 80053e6:	7c1b      	ldrb	r3, [r3, #16]
 80053e8:	021b      	lsls	r3, r3, #8
 80053ea:	b21a      	sxth	r2, r3
 80053ec:	4b17      	ldr	r3, [pc, #92]	@ (800544c <BNO_Page0Adress+0x2a0>)
 80053ee:	7bdb      	ldrb	r3, [r3, #15]
 80053f0:	b21b      	sxth	r3, r3
 80053f2:	4313      	orrs	r3, r2
 80053f4:	b21a      	sxth	r2, r3
 80053f6:	4b16      	ldr	r3, [pc, #88]	@ (8005450 <BNO_Page0Adress+0x2a4>)
 80053f8:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
			IMU.Calibration_Data.offset.gyro.z = (int16_t)((BNO_RxBuffer[18] << 8) | BNO_RxBuffer[17]);
 80053fc:	4b13      	ldr	r3, [pc, #76]	@ (800544c <BNO_Page0Adress+0x2a0>)
 80053fe:	7c9b      	ldrb	r3, [r3, #18]
 8005400:	021b      	lsls	r3, r3, #8
 8005402:	b21a      	sxth	r2, r3
 8005404:	4b11      	ldr	r3, [pc, #68]	@ (800544c <BNO_Page0Adress+0x2a0>)
 8005406:	7c5b      	ldrb	r3, [r3, #17]
 8005408:	b21b      	sxth	r3, r3
 800540a:	4313      	orrs	r3, r2
 800540c:	b21a      	sxth	r2, r3
 800540e:	4b10      	ldr	r3, [pc, #64]	@ (8005450 <BNO_Page0Adress+0x2a4>)
 8005410:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
			IMU.Calibration_Data.radius.accel = (uint16_t)((BNO_RxBuffer[20] << 8) | BNO_RxBuffer[19]);
 8005414:	4b0d      	ldr	r3, [pc, #52]	@ (800544c <BNO_Page0Adress+0x2a0>)
 8005416:	7d1b      	ldrb	r3, [r3, #20]
 8005418:	021b      	lsls	r3, r3, #8
 800541a:	b21a      	sxth	r2, r3
 800541c:	4b0b      	ldr	r3, [pc, #44]	@ (800544c <BNO_Page0Adress+0x2a0>)
 800541e:	7cdb      	ldrb	r3, [r3, #19]
 8005420:	b21b      	sxth	r3, r3
 8005422:	4313      	orrs	r3, r2
 8005424:	b21b      	sxth	r3, r3
 8005426:	b29a      	uxth	r2, r3
 8005428:	4b09      	ldr	r3, [pc, #36]	@ (8005450 <BNO_Page0Adress+0x2a4>)
 800542a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
			IMU.Calibration_Data.radius.mag   = (uint16_t)((BNO_RxBuffer[22] << 8) | BNO_RxBuffer[21]);
 800542e:	4b07      	ldr	r3, [pc, #28]	@ (800544c <BNO_Page0Adress+0x2a0>)
 8005430:	7d9b      	ldrb	r3, [r3, #22]
 8005432:	021b      	lsls	r3, r3, #8
 8005434:	b21a      	sxth	r2, r3
 8005436:	4b05      	ldr	r3, [pc, #20]	@ (800544c <BNO_Page0Adress+0x2a0>)
 8005438:	7d5b      	ldrb	r3, [r3, #21]
 800543a:	b21b      	sxth	r3, r3
 800543c:	4313      	orrs	r3, r2
 800543e:	b21b      	sxth	r3, r3
 8005440:	b29a      	uxth	r2, r3
 8005442:	4b03      	ldr	r3, [pc, #12]	@ (8005450 <BNO_Page0Adress+0x2a4>)
 8005444:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
			break;
 8005448:	e101      	b.n	800564e <BNO_Page0Adress+0x4a2>
 800544a:	bf00      	nop
 800544c:	2400157c 	.word	0x2400157c
 8005450:	24001684 	.word	0x24001684
 8005454:	2400167d 	.word	0x2400167d
			IMU.ACC.x = ((float)((int16_t)((BNO_RxBuffer[2] << 8) | BNO_RxBuffer[1])))/100;
 8005458:	4b7f      	ldr	r3, [pc, #508]	@ (8005658 <BNO_Page0Adress+0x4ac>)
 800545a:	789b      	ldrb	r3, [r3, #2]
 800545c:	021b      	lsls	r3, r3, #8
 800545e:	b21a      	sxth	r2, r3
 8005460:	4b7d      	ldr	r3, [pc, #500]	@ (8005658 <BNO_Page0Adress+0x4ac>)
 8005462:	785b      	ldrb	r3, [r3, #1]
 8005464:	b21b      	sxth	r3, r3
 8005466:	4313      	orrs	r3, r2
 8005468:	b21b      	sxth	r3, r3
 800546a:	ee07 3a90 	vmov	s15, r3
 800546e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005472:	eddf 6a7a 	vldr	s13, [pc, #488]	@ 800565c <BNO_Page0Adress+0x4b0>
 8005476:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800547a:	4b79      	ldr	r3, [pc, #484]	@ (8005660 <BNO_Page0Adress+0x4b4>)
 800547c:	edc3 7a02 	vstr	s15, [r3, #8]
			IMU.ACC.y = ((float)((int16_t)((BNO_RxBuffer[4] << 8) | BNO_RxBuffer[3])))/100;
 8005480:	4b75      	ldr	r3, [pc, #468]	@ (8005658 <BNO_Page0Adress+0x4ac>)
 8005482:	791b      	ldrb	r3, [r3, #4]
 8005484:	021b      	lsls	r3, r3, #8
 8005486:	b21a      	sxth	r2, r3
 8005488:	4b73      	ldr	r3, [pc, #460]	@ (8005658 <BNO_Page0Adress+0x4ac>)
 800548a:	78db      	ldrb	r3, [r3, #3]
 800548c:	b21b      	sxth	r3, r3
 800548e:	4313      	orrs	r3, r2
 8005490:	b21b      	sxth	r3, r3
 8005492:	ee07 3a90 	vmov	s15, r3
 8005496:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800549a:	eddf 6a70 	vldr	s13, [pc, #448]	@ 800565c <BNO_Page0Adress+0x4b0>
 800549e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80054a2:	4b6f      	ldr	r3, [pc, #444]	@ (8005660 <BNO_Page0Adress+0x4b4>)
 80054a4:	edc3 7a03 	vstr	s15, [r3, #12]
			IMU.ACC.z = ((float)((int16_t)((BNO_RxBuffer[6] << 8) | BNO_RxBuffer[5])))/100;
 80054a8:	4b6b      	ldr	r3, [pc, #428]	@ (8005658 <BNO_Page0Adress+0x4ac>)
 80054aa:	799b      	ldrb	r3, [r3, #6]
 80054ac:	021b      	lsls	r3, r3, #8
 80054ae:	b21a      	sxth	r2, r3
 80054b0:	4b69      	ldr	r3, [pc, #420]	@ (8005658 <BNO_Page0Adress+0x4ac>)
 80054b2:	795b      	ldrb	r3, [r3, #5]
 80054b4:	b21b      	sxth	r3, r3
 80054b6:	4313      	orrs	r3, r2
 80054b8:	b21b      	sxth	r3, r3
 80054ba:	ee07 3a90 	vmov	s15, r3
 80054be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80054c2:	eddf 6a66 	vldr	s13, [pc, #408]	@ 800565c <BNO_Page0Adress+0x4b0>
 80054c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80054ca:	4b65      	ldr	r3, [pc, #404]	@ (8005660 <BNO_Page0Adress+0x4b4>)
 80054cc:	edc3 7a04 	vstr	s15, [r3, #16]
			IMU.MAG.x = ((float)((int16_t)((BNO_RxBuffer[8] << 8) | BNO_RxBuffer[7])))/16;
 80054d0:	4b61      	ldr	r3, [pc, #388]	@ (8005658 <BNO_Page0Adress+0x4ac>)
 80054d2:	7a1b      	ldrb	r3, [r3, #8]
 80054d4:	021b      	lsls	r3, r3, #8
 80054d6:	b21a      	sxth	r2, r3
 80054d8:	4b5f      	ldr	r3, [pc, #380]	@ (8005658 <BNO_Page0Adress+0x4ac>)
 80054da:	79db      	ldrb	r3, [r3, #7]
 80054dc:	b21b      	sxth	r3, r3
 80054de:	4313      	orrs	r3, r2
 80054e0:	b21b      	sxth	r3, r3
 80054e2:	ee07 3a90 	vmov	s15, r3
 80054e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80054ea:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80054ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80054f2:	4b5b      	ldr	r3, [pc, #364]	@ (8005660 <BNO_Page0Adress+0x4b4>)
 80054f4:	edc3 7a06 	vstr	s15, [r3, #24]
			IMU.MAG.y = ((float)((int16_t)((BNO_RxBuffer[10] << 8) | BNO_RxBuffer[9])))/16;
 80054f8:	4b57      	ldr	r3, [pc, #348]	@ (8005658 <BNO_Page0Adress+0x4ac>)
 80054fa:	7a9b      	ldrb	r3, [r3, #10]
 80054fc:	021b      	lsls	r3, r3, #8
 80054fe:	b21a      	sxth	r2, r3
 8005500:	4b55      	ldr	r3, [pc, #340]	@ (8005658 <BNO_Page0Adress+0x4ac>)
 8005502:	7a5b      	ldrb	r3, [r3, #9]
 8005504:	b21b      	sxth	r3, r3
 8005506:	4313      	orrs	r3, r2
 8005508:	b21b      	sxth	r3, r3
 800550a:	ee07 3a90 	vmov	s15, r3
 800550e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005512:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8005516:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800551a:	4b51      	ldr	r3, [pc, #324]	@ (8005660 <BNO_Page0Adress+0x4b4>)
 800551c:	edc3 7a07 	vstr	s15, [r3, #28]
			IMU.MAG.z = ((float)((int16_t)((BNO_RxBuffer[12] << 8) | BNO_RxBuffer[11])))/16;
 8005520:	4b4d      	ldr	r3, [pc, #308]	@ (8005658 <BNO_Page0Adress+0x4ac>)
 8005522:	7b1b      	ldrb	r3, [r3, #12]
 8005524:	021b      	lsls	r3, r3, #8
 8005526:	b21a      	sxth	r2, r3
 8005528:	4b4b      	ldr	r3, [pc, #300]	@ (8005658 <BNO_Page0Adress+0x4ac>)
 800552a:	7adb      	ldrb	r3, [r3, #11]
 800552c:	b21b      	sxth	r3, r3
 800552e:	4313      	orrs	r3, r2
 8005530:	b21b      	sxth	r3, r3
 8005532:	ee07 3a90 	vmov	s15, r3
 8005536:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800553a:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 800553e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005542:	4b47      	ldr	r3, [pc, #284]	@ (8005660 <BNO_Page0Adress+0x4b4>)
 8005544:	edc3 7a08 	vstr	s15, [r3, #32]
			IMU.GYR.x = ((float)((int16_t)((BNO_RxBuffer[14] << 8) | BNO_RxBuffer[13])))/16;
 8005548:	4b43      	ldr	r3, [pc, #268]	@ (8005658 <BNO_Page0Adress+0x4ac>)
 800554a:	7b9b      	ldrb	r3, [r3, #14]
 800554c:	021b      	lsls	r3, r3, #8
 800554e:	b21a      	sxth	r2, r3
 8005550:	4b41      	ldr	r3, [pc, #260]	@ (8005658 <BNO_Page0Adress+0x4ac>)
 8005552:	7b5b      	ldrb	r3, [r3, #13]
 8005554:	b21b      	sxth	r3, r3
 8005556:	4313      	orrs	r3, r2
 8005558:	b21b      	sxth	r3, r3
 800555a:	ee07 3a90 	vmov	s15, r3
 800555e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005562:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8005566:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800556a:	4b3d      	ldr	r3, [pc, #244]	@ (8005660 <BNO_Page0Adress+0x4b4>)
 800556c:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
			IMU.GYR.y = -((float)((int16_t)((BNO_RxBuffer[16] << 8) | BNO_RxBuffer[15])))/16;
 8005570:	4b39      	ldr	r3, [pc, #228]	@ (8005658 <BNO_Page0Adress+0x4ac>)
 8005572:	7c1b      	ldrb	r3, [r3, #16]
 8005574:	021b      	lsls	r3, r3, #8
 8005576:	b21a      	sxth	r2, r3
 8005578:	4b37      	ldr	r3, [pc, #220]	@ (8005658 <BNO_Page0Adress+0x4ac>)
 800557a:	7bdb      	ldrb	r3, [r3, #15]
 800557c:	b21b      	sxth	r3, r3
 800557e:	4313      	orrs	r3, r2
 8005580:	b21b      	sxth	r3, r3
 8005582:	ee07 3a90 	vmov	s15, r3
 8005586:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800558a:	eeb1 7a67 	vneg.f32	s14, s15
 800558e:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8005592:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005596:	4b32      	ldr	r3, [pc, #200]	@ (8005660 <BNO_Page0Adress+0x4b4>)
 8005598:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
			IMU.GYR.z = -((float)((int16_t)((BNO_RxBuffer[18] << 8) | BNO_RxBuffer[17])))/16;
 800559c:	4b2e      	ldr	r3, [pc, #184]	@ (8005658 <BNO_Page0Adress+0x4ac>)
 800559e:	7c9b      	ldrb	r3, [r3, #18]
 80055a0:	021b      	lsls	r3, r3, #8
 80055a2:	b21a      	sxth	r2, r3
 80055a4:	4b2c      	ldr	r3, [pc, #176]	@ (8005658 <BNO_Page0Adress+0x4ac>)
 80055a6:	7c5b      	ldrb	r3, [r3, #17]
 80055a8:	b21b      	sxth	r3, r3
 80055aa:	4313      	orrs	r3, r2
 80055ac:	b21b      	sxth	r3, r3
 80055ae:	ee07 3a90 	vmov	s15, r3
 80055b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055b6:	eeb1 7a67 	vneg.f32	s14, s15
 80055ba:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80055be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80055c2:	4b27      	ldr	r3, [pc, #156]	@ (8005660 <BNO_Page0Adress+0x4b4>)
 80055c4:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
			IMU.Heading = ((float)((int16_t)((BNO_RxBuffer[20] << 8) | BNO_RxBuffer[19])))/16;
 80055c8:	4b23      	ldr	r3, [pc, #140]	@ (8005658 <BNO_Page0Adress+0x4ac>)
 80055ca:	7d1b      	ldrb	r3, [r3, #20]
 80055cc:	021b      	lsls	r3, r3, #8
 80055ce:	b21a      	sxth	r2, r3
 80055d0:	4b21      	ldr	r3, [pc, #132]	@ (8005658 <BNO_Page0Adress+0x4ac>)
 80055d2:	7cdb      	ldrb	r3, [r3, #19]
 80055d4:	b21b      	sxth	r3, r3
 80055d6:	4313      	orrs	r3, r2
 80055d8:	b21b      	sxth	r3, r3
 80055da:	ee07 3a90 	vmov	s15, r3
 80055de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80055e2:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80055e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80055ea:	4b1d      	ldr	r3, [pc, #116]	@ (8005660 <BNO_Page0Adress+0x4b4>)
 80055ec:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
			IMU.Pitch = ((float)((int16_t)((BNO_RxBuffer[22] << 8) | BNO_RxBuffer[21])))/16;
 80055f0:	4b19      	ldr	r3, [pc, #100]	@ (8005658 <BNO_Page0Adress+0x4ac>)
 80055f2:	7d9b      	ldrb	r3, [r3, #22]
 80055f4:	021b      	lsls	r3, r3, #8
 80055f6:	b21a      	sxth	r2, r3
 80055f8:	4b17      	ldr	r3, [pc, #92]	@ (8005658 <BNO_Page0Adress+0x4ac>)
 80055fa:	7d5b      	ldrb	r3, [r3, #21]
 80055fc:	b21b      	sxth	r3, r3
 80055fe:	4313      	orrs	r3, r2
 8005600:	b21b      	sxth	r3, r3
 8005602:	ee07 3a90 	vmov	s15, r3
 8005606:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800560a:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 800560e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005612:	4b13      	ldr	r3, [pc, #76]	@ (8005660 <BNO_Page0Adress+0x4b4>)
 8005614:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
			IMU.Roll = ((float)((int16_t)((BNO_RxBuffer[24] << 8) | BNO_RxBuffer[23])))/16;
 8005618:	4b0f      	ldr	r3, [pc, #60]	@ (8005658 <BNO_Page0Adress+0x4ac>)
 800561a:	7e1b      	ldrb	r3, [r3, #24]
 800561c:	021b      	lsls	r3, r3, #8
 800561e:	b21a      	sxth	r2, r3
 8005620:	4b0d      	ldr	r3, [pc, #52]	@ (8005658 <BNO_Page0Adress+0x4ac>)
 8005622:	7ddb      	ldrb	r3, [r3, #23]
 8005624:	b21b      	sxth	r3, r3
 8005626:	4313      	orrs	r3, r2
 8005628:	b21b      	sxth	r3, r3
 800562a:	ee07 3a90 	vmov	s15, r3
 800562e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005632:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8005636:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800563a:	4b09      	ldr	r3, [pc, #36]	@ (8005660 <BNO_Page0Adress+0x4b4>)
 800563c:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
			BNO_ErrorHandler = ReadSucces;
 8005640:	4b08      	ldr	r3, [pc, #32]	@ (8005664 <BNO_Page0Adress+0x4b8>)
 8005642:	220b      	movs	r2, #11
 8005644:	701a      	strb	r2, [r3, #0]
			break;
 8005646:	e002      	b.n	800564e <BNO_Page0Adress+0x4a2>
			break;
 8005648:	bf00      	nop
 800564a:	e000      	b.n	800564e <BNO_Page0Adress+0x4a2>
			if(BNO_RxBuffer[1] != 160) return;
 800564c:	bf00      	nop
	}
}
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr
 8005656:	bf00      	nop
 8005658:	2400157c 	.word	0x2400157c
 800565c:	42c80000 	.word	0x42c80000
 8005660:	24001684 	.word	0x24001684
 8005664:	2400167d 	.word	0x2400167d

08005668 <BNO_Page1Adress>:

void BNO_Page1Adress(void){
 8005668:	b480      	push	{r7}
 800566a:	af00      	add	r7, sp, #0
	switch (BNO_RxBuffer[0]) {
 800566c:	4b09      	ldr	r3, [pc, #36]	@ (8005694 <BNO_Page1Adress+0x2c>)
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	2b07      	cmp	r3, #7
 8005672:	d108      	bne.n	8005686 <BNO_Page1Adress+0x1e>
		case BNO055_PAGE_ID:
			IMU.Page = BNO_RxBuffer[1];
 8005674:	4b07      	ldr	r3, [pc, #28]	@ (8005694 <BNO_Page1Adress+0x2c>)
 8005676:	785a      	ldrb	r2, [r3, #1]
 8005678:	4b07      	ldr	r3, [pc, #28]	@ (8005698 <BNO_Page1Adress+0x30>)
 800567a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
			BNO_ErrorHandler = ReadSucces;
 800567e:	4b07      	ldr	r3, [pc, #28]	@ (800569c <BNO_Page1Adress+0x34>)
 8005680:	220b      	movs	r2, #11
 8005682:	701a      	strb	r2, [r3, #0]
			break;
 8005684:	e000      	b.n	8005688 <BNO_Page1Adress+0x20>

		default:
			break;
 8005686:	bf00      	nop
	}
}
 8005688:	bf00      	nop
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr
 8005692:	bf00      	nop
 8005694:	2400157c 	.word	0x2400157c
 8005698:	24001684 	.word	0x24001684
 800569c:	2400167d 	.word	0x2400167d

080056a0 <BNO_EmptyingBuffer>:

void BNO_EmptyingBuffer(void){
 80056a0:	b580      	push	{r7, lr}
 80056a2:	af00      	add	r7, sp, #0
	switch (IMU.Page) {
 80056a4:	4b0a      	ldr	r3, [pc, #40]	@ (80056d0 <BNO_EmptyingBuffer+0x30>)
 80056a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d002      	beq.n	80056b4 <BNO_EmptyingBuffer+0x14>
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d003      	beq.n	80056ba <BNO_EmptyingBuffer+0x1a>
			break;
		case 1:
			BNO_Page1Adress();
			break;
		default:
			break;
 80056b2:	e005      	b.n	80056c0 <BNO_EmptyingBuffer+0x20>
			BNO_Page0Adress();
 80056b4:	f7ff fd7a 	bl	80051ac <BNO_Page0Adress>
			break;
 80056b8:	e002      	b.n	80056c0 <BNO_EmptyingBuffer+0x20>
			BNO_Page1Adress();
 80056ba:	f7ff ffd5 	bl	8005668 <BNO_Page1Adress>
			break;
 80056be:	bf00      	nop
	}
	memset(BNO_RxBuffer, 0, sizeof(BNO_RxBuffer));
 80056c0:	22ff      	movs	r2, #255	@ 0xff
 80056c2:	2100      	movs	r1, #0
 80056c4:	4803      	ldr	r0, [pc, #12]	@ (80056d4 <BNO_EmptyingBuffer+0x34>)
 80056c6:	f012 fb56 	bl	8017d76 <memset>
}
 80056ca:	bf00      	nop
 80056cc:	bd80      	pop	{r7, pc}
 80056ce:	bf00      	nop
 80056d0:	24001684 	.word	0x24001684
 80056d4:	2400157c 	.word	0x2400157c

080056d8 <BNO_SWReset>:
		default:
			break;
	}
}

void BNO_SWReset(void){
 80056d8:	b580      	push	{r7, lr}
 80056da:	af00      	add	r7, sp, #0
	BNO_Write(BNO055_SYS_TRIGGER,0x20);
 80056dc:	2120      	movs	r1, #32
 80056de:	203f      	movs	r0, #63	@ 0x3f
 80056e0:	f7ff fcd0 	bl	8005084 <BNO_Write>
	bno055_delay(70);
 80056e4:	2046      	movs	r0, #70	@ 0x46
 80056e6:	f7ff fc93 	bl	8005010 <bno055_delay>
	IMU.ID = 0x00;
 80056ea:	4b04      	ldr	r3, [pc, #16]	@ (80056fc <BNO_SWReset+0x24>)
 80056ec:	2200      	movs	r2, #0
 80056ee:	701a      	strb	r2, [r3, #0]
	BNO_CurrentState = Configuration;
 80056f0:	4b03      	ldr	r3, [pc, #12]	@ (8005700 <BNO_SWReset+0x28>)
 80056f2:	2201      	movs	r2, #1
 80056f4:	701a      	strb	r2, [r3, #0]
}
 80056f6:	bf00      	nop
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	24001684 	.word	0x24001684
 8005700:	24001680 	.word	0x24001680

08005704 <bno055_setOperationMode>:

void bno055_setOperationMode(bno055_opmode_t mode) {
 8005704:	b580      	push	{r7, lr}
 8005706:	b082      	sub	sp, #8
 8005708:	af00      	add	r7, sp, #0
 800570a:	4603      	mov	r3, r0
 800570c:	71fb      	strb	r3, [r7, #7]
  BNO_Write(BNO055_OPR_MODE, mode);
 800570e:	79fb      	ldrb	r3, [r7, #7]
 8005710:	4619      	mov	r1, r3
 8005712:	203d      	movs	r0, #61	@ 0x3d
 8005714:	f7ff fcb6 	bl	8005084 <BNO_Write>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8005718:	79fb      	ldrb	r3, [r7, #7]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d103      	bne.n	8005726 <bno055_setOperationMode+0x22>
    bno055_delay(5);
 800571e:	2005      	movs	r0, #5
 8005720:	f7ff fc76 	bl	8005010 <bno055_delay>
  } else {
    bno055_delay(3);
  }
}
 8005724:	e002      	b.n	800572c <bno055_setOperationMode+0x28>
    bno055_delay(3);
 8005726:	2003      	movs	r0, #3
 8005728:	f7ff fc72 	bl	8005010 <bno055_delay>
}
 800572c:	bf00      	nop
 800572e:	3708      	adds	r7, #8
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}

08005734 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8005734:	b580      	push	{r7, lr}
 8005736:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8005738:	2000      	movs	r0, #0
 800573a:	f7ff ffe3 	bl	8005704 <bno055_setOperationMode>
}
 800573e:	bf00      	nop
 8005740:	bd80      	pop	{r7, pc}

08005742 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8005742:	b580      	push	{r7, lr}
 8005744:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8005746:	200c      	movs	r0, #12
 8005748:	f7ff ffdc 	bl	8005704 <bno055_setOperationMode>
}
 800574c:	bf00      	nop
 800574e:	bd80      	pop	{r7, pc}

08005750 <BNO_GetCalibrationData>:

void BNO_GetCalibrationData(void){
 8005750:	b580      	push	{r7, lr}
 8005752:	af00      	add	r7, sp, #0
	BNO_Read(BNO055_ACC_OFFSET_X_LSB, 22);
 8005754:	2116      	movs	r1, #22
 8005756:	2055      	movs	r0, #85	@ 0x55
 8005758:	f7ff fc6e 	bl	8005038 <BNO_Read>
}
 800575c:	bf00      	nop
 800575e:	bd80      	pop	{r7, pc}

08005760 <BNO_SetCalibrationData>:

void BNO_SetCalibrationData(void){
 8005760:	b580      	push	{r7, lr}
 8005762:	b086      	sub	sp, #24
 8005764:	af00      	add	r7, sp, #0
	uint8_t buffer[22];

	  memcpy(&IMU.Calibration_Data.offset.accel, buffer, 6);
 8005766:	463b      	mov	r3, r7
 8005768:	2206      	movs	r2, #6
 800576a:	4619      	mov	r1, r3
 800576c:	4814      	ldr	r0, [pc, #80]	@ (80057c0 <BNO_SetCalibrationData+0x60>)
 800576e:	f012 fb9c 	bl	8017eaa <memcpy>
	  memcpy(&IMU.Calibration_Data.offset.mag, buffer + 6, 6);
 8005772:	463b      	mov	r3, r7
 8005774:	3306      	adds	r3, #6
 8005776:	2206      	movs	r2, #6
 8005778:	4619      	mov	r1, r3
 800577a:	4812      	ldr	r0, [pc, #72]	@ (80057c4 <BNO_SetCalibrationData+0x64>)
 800577c:	f012 fb95 	bl	8017eaa <memcpy>
	  memcpy(&IMU.Calibration_Data.offset.gyro, buffer + 12, 6);
 8005780:	463b      	mov	r3, r7
 8005782:	330c      	adds	r3, #12
 8005784:	2206      	movs	r2, #6
 8005786:	4619      	mov	r1, r3
 8005788:	480f      	ldr	r0, [pc, #60]	@ (80057c8 <BNO_SetCalibrationData+0x68>)
 800578a:	f012 fb8e 	bl	8017eaa <memcpy>
	  memcpy(&IMU.Calibration_Data.radius.accel, buffer + 18, 2);
 800578e:	463b      	mov	r3, r7
 8005790:	3312      	adds	r3, #18
 8005792:	881b      	ldrh	r3, [r3, #0]
 8005794:	b29a      	uxth	r2, r3
 8005796:	4b0d      	ldr	r3, [pc, #52]	@ (80057cc <BNO_SetCalibrationData+0x6c>)
 8005798:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
	  memcpy(&IMU.Calibration_Data.radius.mag, buffer + 20, 2);
 800579c:	463b      	mov	r3, r7
 800579e:	3314      	adds	r3, #20
 80057a0:	881b      	ldrh	r3, [r3, #0]
 80057a2:	b29a      	uxth	r2, r3
 80057a4:	4b09      	ldr	r3, [pc, #36]	@ (80057cc <BNO_SetCalibrationData+0x6c>)
 80057a6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

	BNO_Write_MB(BNO055_ACC_OFFSET_X_LSB, 22, buffer);
 80057aa:	463b      	mov	r3, r7
 80057ac:	461a      	mov	r2, r3
 80057ae:	2116      	movs	r1, #22
 80057b0:	2055      	movs	r0, #85	@ 0x55
 80057b2:	f7ff fc89 	bl	80050c8 <BNO_Write_MB>
}
 80057b6:	bf00      	nop
 80057b8:	3718      	adds	r7, #24
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop
 80057c0:	240016da 	.word	0x240016da
 80057c4:	240016d4 	.word	0x240016d4
 80057c8:	240016ce 	.word	0x240016ce
 80057cc:	24001684 	.word	0x24001684

080057d0 <BNO_Init>:

void BNO_Init(void){
 80057d0:	b580      	push	{r7, lr}
 80057d2:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(IMU_RST_GPIO_Port, IMU_RST_Pin, SET);
 80057d4:	2201      	movs	r2, #1
 80057d6:	2104      	movs	r1, #4
 80057d8:	4808      	ldr	r0, [pc, #32]	@ (80057fc <BNO_Init+0x2c>)
 80057da:	f004 fe57 	bl	800a48c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IMU_BOOT_GPIO_Port, IMU_BOOT_Pin, SET);
 80057de:	2201      	movs	r2, #1
 80057e0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80057e4:	4806      	ldr	r0, [pc, #24]	@ (8005800 <BNO_Init+0x30>)
 80057e6:	f004 fe51 	bl	800a48c <HAL_GPIO_WritePin>

	bno055_delay(100);
 80057ea:	2064      	movs	r0, #100	@ 0x64
 80057ec:	f7ff fc10 	bl	8005010 <bno055_delay>

	BNO_CurrentState = Reset;
 80057f0:	4b04      	ldr	r3, [pc, #16]	@ (8005804 <BNO_Init+0x34>)
 80057f2:	2204      	movs	r2, #4
 80057f4:	701a      	strb	r2, [r3, #0]
}
 80057f6:	bf00      	nop
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	58020c00 	.word	0x58020c00
 8005800:	58020400 	.word	0x58020400
 8005804:	24001680 	.word	0x24001680

08005808 <BNO_Config>:

void BNO_Config(void){
 8005808:	b580      	push	{r7, lr}
 800580a:	af00      	add	r7, sp, #0
	static uint8_t ConfigFlag = 0;

	switch (ConfigFlag) {
 800580c:	4b20      	ldr	r3, [pc, #128]	@ (8005890 <BNO_Config+0x88>)
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	2b03      	cmp	r3, #3
 8005812:	d839      	bhi.n	8005888 <BNO_Config+0x80>
 8005814:	a201      	add	r2, pc, #4	@ (adr r2, 800581c <BNO_Config+0x14>)
 8005816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800581a:	bf00      	nop
 800581c:	0800582d 	.word	0x0800582d
 8005820:	0800583d 	.word	0x0800583d
 8005824:	08005849 	.word	0x08005849
 8005828:	0800586b 	.word	0x0800586b
		case 0:
			BNO_Write(BNO055_SYS_TRIGGER,0x00);
 800582c:	2100      	movs	r1, #0
 800582e:	203f      	movs	r0, #63	@ 0x3f
 8005830:	f7ff fc28 	bl	8005084 <BNO_Write>
			ConfigFlag = 1;
 8005834:	4b16      	ldr	r3, [pc, #88]	@ (8005890 <BNO_Config+0x88>)
 8005836:	2201      	movs	r2, #1
 8005838:	701a      	strb	r2, [r3, #0]
			break;
 800583a:	e026      	b.n	800588a <BNO_Config+0x82>
		case 1:
			bno055_setOperationModeConfig();
 800583c:	f7ff ff7a 	bl	8005734 <bno055_setOperationModeConfig>
			ConfigFlag = 2;
 8005840:	4b13      	ldr	r3, [pc, #76]	@ (8005890 <BNO_Config+0x88>)
 8005842:	2202      	movs	r2, #2
 8005844:	701a      	strb	r2, [r3, #0]
			break;
 8005846:	e020      	b.n	800588a <BNO_Config+0x82>
		case 2:
			BNO_Read(BNO055_OPR_MODE, 1);
 8005848:	2101      	movs	r1, #1
 800584a:	203d      	movs	r0, #61	@ 0x3d
 800584c:	f7ff fbf4 	bl	8005038 <BNO_Read>
			if(IMU.Op_Mode == BNO055_OPERATION_MODE_CONFIG){
 8005850:	4b10      	ldr	r3, [pc, #64]	@ (8005894 <BNO_Config+0x8c>)
 8005852:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8005856:	2b00      	cmp	r3, #0
 8005858:	d103      	bne.n	8005862 <BNO_Config+0x5a>
				ConfigFlag = 3;
 800585a:	4b0d      	ldr	r3, [pc, #52]	@ (8005890 <BNO_Config+0x88>)
 800585c:	2203      	movs	r2, #3
 800585e:	701a      	strb	r2, [r3, #0]
			}
			else ConfigFlag = 1;
			break;
 8005860:	e013      	b.n	800588a <BNO_Config+0x82>
			else ConfigFlag = 1;
 8005862:	4b0b      	ldr	r3, [pc, #44]	@ (8005890 <BNO_Config+0x88>)
 8005864:	2201      	movs	r2, #1
 8005866:	701a      	strb	r2, [r3, #0]
			break;
 8005868:	e00f      	b.n	800588a <BNO_Config+0x82>
		case 3:
			BNO_Read(BNO055_CHIP_ID, 4);
 800586a:	2104      	movs	r1, #4
 800586c:	2000      	movs	r0, #0
 800586e:	f7ff fbe3 	bl	8005038 <BNO_Read>

			if(IMU.ID == BNO055_ID){
 8005872:	4b08      	ldr	r3, [pc, #32]	@ (8005894 <BNO_Config+0x8c>)
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	2ba0      	cmp	r3, #160	@ 0xa0
 8005878:	d102      	bne.n	8005880 <BNO_Config+0x78>
				BNO_CurrentState = Calibration;
 800587a:	4b07      	ldr	r3, [pc, #28]	@ (8005898 <BNO_Config+0x90>)
 800587c:	2202      	movs	r2, #2
 800587e:	701a      	strb	r2, [r3, #0]
			}
			ConfigFlag = 0;
 8005880:	4b03      	ldr	r3, [pc, #12]	@ (8005890 <BNO_Config+0x88>)
 8005882:	2200      	movs	r2, #0
 8005884:	701a      	strb	r2, [r3, #0]
			break;
 8005886:	e000      	b.n	800588a <BNO_Config+0x82>
		default:
			break;
 8005888:	bf00      	nop
	}

}
 800588a:	bf00      	nop
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	240016e4 	.word	0x240016e4
 8005894:	24001684 	.word	0x24001684
 8005898:	24001680 	.word	0x24001680

0800589c <BNO_CalibrationStatus>:

void BNO_CalibrationStatus(void){
 800589c:	b580      	push	{r7, lr}
 800589e:	af00      	add	r7, sp, #0
	static uint8_t CalibrationFlag = 0;
	static uint8_t Calibrated = 1;

	switch (CalibrationFlag) {
 80058a0:	4b3d      	ldr	r3, [pc, #244]	@ (8005998 <BNO_CalibrationStatus+0xfc>)
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	2b07      	cmp	r3, #7
 80058a6:	d870      	bhi.n	800598a <BNO_CalibrationStatus+0xee>
 80058a8:	a201      	add	r2, pc, #4	@ (adr r2, 80058b0 <BNO_CalibrationStatus+0x14>)
 80058aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ae:	bf00      	nop
 80058b0:	080058d1 	.word	0x080058d1
 80058b4:	080058e1 	.word	0x080058e1
 80058b8:	080058ed 	.word	0x080058ed
 80058bc:	08005925 	.word	0x08005925
 80058c0:	0800593f 	.word	0x0800593f
 80058c4:	0800594b 	.word	0x0800594b
 80058c8:	0800596d 	.word	0x0800596d
 80058cc:	0800597f 	.word	0x0800597f
		case 0:
			BNO_Write(BNO055_SYS_TRIGGER,0x00);
 80058d0:	2100      	movs	r1, #0
 80058d2:	203f      	movs	r0, #63	@ 0x3f
 80058d4:	f7ff fbd6 	bl	8005084 <BNO_Write>
			CalibrationFlag = 1;
 80058d8:	4b2f      	ldr	r3, [pc, #188]	@ (8005998 <BNO_CalibrationStatus+0xfc>)
 80058da:	2201      	movs	r2, #1
 80058dc:	701a      	strb	r2, [r3, #0]
			break;
 80058de:	e059      	b.n	8005994 <BNO_CalibrationStatus+0xf8>
		case 1:
			bno055_setOperationModeNDOF();
 80058e0:	f7ff ff2f 	bl	8005742 <bno055_setOperationModeNDOF>
			CalibrationFlag = 2;
 80058e4:	4b2c      	ldr	r3, [pc, #176]	@ (8005998 <BNO_CalibrationStatus+0xfc>)
 80058e6:	2202      	movs	r2, #2
 80058e8:	701a      	strb	r2, [r3, #0]
			break;
 80058ea:	e053      	b.n	8005994 <BNO_CalibrationStatus+0xf8>
		case 2:
			BNO_Read(BNO055_OPR_MODE, 1);
 80058ec:	2101      	movs	r1, #1
 80058ee:	203d      	movs	r0, #61	@ 0x3d
 80058f0:	f7ff fba2 	bl	8005038 <BNO_Read>
			if(IMU.Op_Mode == BNO055_OPERATION_MODE_NDOF){
 80058f4:	4b29      	ldr	r3, [pc, #164]	@ (800599c <BNO_CalibrationStatus+0x100>)
 80058f6:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80058fa:	2b0c      	cmp	r3, #12
 80058fc:	d10e      	bne.n	800591c <BNO_CalibrationStatus+0x80>
				if(Calibrated){
 80058fe:	4b28      	ldr	r3, [pc, #160]	@ (80059a0 <BNO_CalibrationStatus+0x104>)
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d006      	beq.n	8005914 <BNO_CalibrationStatus+0x78>
					CalibrationFlag = 0;
 8005906:	4b24      	ldr	r3, [pc, #144]	@ (8005998 <BNO_CalibrationStatus+0xfc>)
 8005908:	2200      	movs	r2, #0
 800590a:	701a      	strb	r2, [r3, #0]
					BNO_CurrentState = Operation;
 800590c:	4b25      	ldr	r3, [pc, #148]	@ (80059a4 <BNO_CalibrationStatus+0x108>)
 800590e:	2203      	movs	r2, #3
 8005910:	701a      	strb	r2, [r3, #0]
				}
				else CalibrationFlag = 3;
			}
			else CalibrationFlag = 1;
			break;
 8005912:	e03f      	b.n	8005994 <BNO_CalibrationStatus+0xf8>
				else CalibrationFlag = 3;
 8005914:	4b20      	ldr	r3, [pc, #128]	@ (8005998 <BNO_CalibrationStatus+0xfc>)
 8005916:	2203      	movs	r2, #3
 8005918:	701a      	strb	r2, [r3, #0]
			break;
 800591a:	e03b      	b.n	8005994 <BNO_CalibrationStatus+0xf8>
			else CalibrationFlag = 1;
 800591c:	4b1e      	ldr	r3, [pc, #120]	@ (8005998 <BNO_CalibrationStatus+0xfc>)
 800591e:	2201      	movs	r2, #1
 8005920:	701a      	strb	r2, [r3, #0]
			break;
 8005922:	e037      	b.n	8005994 <BNO_CalibrationStatus+0xf8>
		case 3:
			BNO_Read(BNO055_CALIB_STAT, 1);
 8005924:	2101      	movs	r1, #1
 8005926:	2035      	movs	r0, #53	@ 0x35
 8005928:	f7ff fb86 	bl	8005038 <BNO_Read>
			if(IMU.CalSatus.Full == 0xFF){
 800592c:	4b1b      	ldr	r3, [pc, #108]	@ (800599c <BNO_CalibrationStatus+0x100>)
 800592e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005932:	2bff      	cmp	r3, #255	@ 0xff
 8005934:	d12d      	bne.n	8005992 <BNO_CalibrationStatus+0xf6>
				CalibrationFlag = 4;
 8005936:	4b18      	ldr	r3, [pc, #96]	@ (8005998 <BNO_CalibrationStatus+0xfc>)
 8005938:	2204      	movs	r2, #4
 800593a:	701a      	strb	r2, [r3, #0]
			}
			break;
 800593c:	e029      	b.n	8005992 <BNO_CalibrationStatus+0xf6>
		case 4:
			bno055_setOperationModeConfig();
 800593e:	f7ff fef9 	bl	8005734 <bno055_setOperationModeConfig>
			CalibrationFlag = 5;
 8005942:	4b15      	ldr	r3, [pc, #84]	@ (8005998 <BNO_CalibrationStatus+0xfc>)
 8005944:	2205      	movs	r2, #5
 8005946:	701a      	strb	r2, [r3, #0]
			break;
 8005948:	e024      	b.n	8005994 <BNO_CalibrationStatus+0xf8>
		case 5:
			BNO_Read(BNO055_OPR_MODE, 1);
 800594a:	2101      	movs	r1, #1
 800594c:	203d      	movs	r0, #61	@ 0x3d
 800594e:	f7ff fb73 	bl	8005038 <BNO_Read>
			if(IMU.Op_Mode == BNO055_OPERATION_MODE_CONFIG){
 8005952:	4b12      	ldr	r3, [pc, #72]	@ (800599c <BNO_CalibrationStatus+0x100>)
 8005954:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8005958:	2b00      	cmp	r3, #0
 800595a:	d103      	bne.n	8005964 <BNO_CalibrationStatus+0xc8>
				CalibrationFlag = 6;
 800595c:	4b0e      	ldr	r3, [pc, #56]	@ (8005998 <BNO_CalibrationStatus+0xfc>)
 800595e:	2206      	movs	r2, #6
 8005960:	701a      	strb	r2, [r3, #0]

			}
			else CalibrationFlag = 4;
			break;
 8005962:	e017      	b.n	8005994 <BNO_CalibrationStatus+0xf8>
			else CalibrationFlag = 4;
 8005964:	4b0c      	ldr	r3, [pc, #48]	@ (8005998 <BNO_CalibrationStatus+0xfc>)
 8005966:	2204      	movs	r2, #4
 8005968:	701a      	strb	r2, [r3, #0]
			break;
 800596a:	e013      	b.n	8005994 <BNO_CalibrationStatus+0xf8>
		case 6:
			BNO_GetCalibrationData();
 800596c:	f7ff fef0 	bl	8005750 <BNO_GetCalibrationData>
			Calibrated = 1;
 8005970:	4b0b      	ldr	r3, [pc, #44]	@ (80059a0 <BNO_CalibrationStatus+0x104>)
 8005972:	2201      	movs	r2, #1
 8005974:	701a      	strb	r2, [r3, #0]
			CalibrationFlag = 1;
 8005976:	4b08      	ldr	r3, [pc, #32]	@ (8005998 <BNO_CalibrationStatus+0xfc>)
 8005978:	2201      	movs	r2, #1
 800597a:	701a      	strb	r2, [r3, #0]
			break;
 800597c:	e00a      	b.n	8005994 <BNO_CalibrationStatus+0xf8>
		case 7:
			BNO_SetCalibrationData();
 800597e:	f7ff feef 	bl	8005760 <BNO_SetCalibrationData>
			CalibrationFlag = 1;
 8005982:	4b05      	ldr	r3, [pc, #20]	@ (8005998 <BNO_CalibrationStatus+0xfc>)
 8005984:	2201      	movs	r2, #1
 8005986:	701a      	strb	r2, [r3, #0]
			break;
 8005988:	e004      	b.n	8005994 <BNO_CalibrationStatus+0xf8>
		default:
			CalibrationFlag = 0;
 800598a:	4b03      	ldr	r3, [pc, #12]	@ (8005998 <BNO_CalibrationStatus+0xfc>)
 800598c:	2200      	movs	r2, #0
 800598e:	701a      	strb	r2, [r3, #0]
			break;
 8005990:	e000      	b.n	8005994 <BNO_CalibrationStatus+0xf8>
			break;
 8005992:	bf00      	nop
    	BNO_CurrentState = Operation;
    }
    else bno055_setOperationModeNDOF();
    */

}
 8005994:	bf00      	nop
 8005996:	bd80      	pop	{r7, pc}
 8005998:	240016e5 	.word	0x240016e5
 800599c:	24001684 	.word	0x24001684
 80059a0:	24000008 	.word	0x24000008
 80059a4:	24001680 	.word	0x24001680

080059a8 <BNO_GetData>:

void BNO_GetData(void){
 80059a8:	b580      	push	{r7, lr}
 80059aa:	af00      	add	r7, sp, #0
	BNO_Read(BNO055_ACC_DATA_X_LSB,24);
 80059ac:	2118      	movs	r1, #24
 80059ae:	2008      	movs	r0, #8
 80059b0:	f7ff fb42 	bl	8005038 <BNO_Read>
}
 80059b4:	bf00      	nop
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <BNO_Receive>:

void BNO_Receive(uint8_t Buffer){
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b082      	sub	sp, #8
 80059bc:	af00      	add	r7, sp, #0
 80059be:	4603      	mov	r3, r0
 80059c0:	71fb      	strb	r3, [r7, #7]
	static uint8_t MsgSize = 0;
	static uint8_t Counter = 0;

	BNO_ComsCounter = 0;
 80059c2:	4b2c      	ldr	r3, [pc, #176]	@ (8005a74 <BNO_Receive+0xbc>)
 80059c4:	2200      	movs	r2, #0
 80059c6:	701a      	strb	r2, [r3, #0]

	switch (BNO_Rx_Status) {
 80059c8:	4b2b      	ldr	r3, [pc, #172]	@ (8005a78 <BNO_Receive+0xc0>)
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	2bff      	cmp	r3, #255	@ 0xff
 80059ce:	d027      	beq.n	8005a20 <BNO_Receive+0x68>
 80059d0:	2bff      	cmp	r3, #255	@ 0xff
 80059d2:	dc46      	bgt.n	8005a62 <BNO_Receive+0xaa>
 80059d4:	2bee      	cmp	r3, #238	@ 0xee
 80059d6:	d017      	beq.n	8005a08 <BNO_Receive+0x50>
 80059d8:	2bee      	cmp	r3, #238	@ 0xee
 80059da:	dc42      	bgt.n	8005a62 <BNO_Receive+0xaa>
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d002      	beq.n	80059e6 <BNO_Receive+0x2e>
 80059e0:	2bbb      	cmp	r3, #187	@ 0xbb
 80059e2:	d00a      	beq.n	80059fa <BNO_Receive+0x42>
				BNO_EmptyingBuffer();
			}

			break;
		default:
			break;
 80059e4:	e03d      	b.n	8005a62 <BNO_Receive+0xaa>
			if(Buffer == Read_Response || Buffer == Header) BNO_Rx_Status = Buffer;
 80059e6:	79fb      	ldrb	r3, [r7, #7]
 80059e8:	2bbb      	cmp	r3, #187	@ 0xbb
 80059ea:	d002      	beq.n	80059f2 <BNO_Receive+0x3a>
 80059ec:	79fb      	ldrb	r3, [r7, #7]
 80059ee:	2bee      	cmp	r3, #238	@ 0xee
 80059f0:	d139      	bne.n	8005a66 <BNO_Receive+0xae>
 80059f2:	4a21      	ldr	r2, [pc, #132]	@ (8005a78 <BNO_Receive+0xc0>)
 80059f4:	79fb      	ldrb	r3, [r7, #7]
 80059f6:	7013      	strb	r3, [r2, #0]
			break;
 80059f8:	e035      	b.n	8005a66 <BNO_Receive+0xae>
			MsgSize = Buffer;
 80059fa:	4a20      	ldr	r2, [pc, #128]	@ (8005a7c <BNO_Receive+0xc4>)
 80059fc:	79fb      	ldrb	r3, [r7, #7]
 80059fe:	7013      	strb	r3, [r2, #0]
			BNO_Rx_Status = Emptying_Buffer;
 8005a00:	4b1d      	ldr	r3, [pc, #116]	@ (8005a78 <BNO_Receive+0xc0>)
 8005a02:	22ff      	movs	r2, #255	@ 0xff
 8005a04:	701a      	strb	r2, [r3, #0]
			break;
 8005a06:	e031      	b.n	8005a6c <BNO_Receive+0xb4>
			BNO_ErrorHandler = Buffer;
 8005a08:	4a1d      	ldr	r2, [pc, #116]	@ (8005a80 <BNO_Receive+0xc8>)
 8005a0a:	79fb      	ldrb	r3, [r7, #7]
 8005a0c:	7013      	strb	r3, [r2, #0]
			BNO_Rx_Status = AwaitingMsg;
 8005a0e:	4b1a      	ldr	r3, [pc, #104]	@ (8005a78 <BNO_Receive+0xc0>)
 8005a10:	2200      	movs	r2, #0
 8005a12:	701a      	strb	r2, [r3, #0]
			memset(BNO_RxBuffer, 0, sizeof(BNO_RxBuffer));
 8005a14:	22ff      	movs	r2, #255	@ 0xff
 8005a16:	2100      	movs	r1, #0
 8005a18:	481a      	ldr	r0, [pc, #104]	@ (8005a84 <BNO_Receive+0xcc>)
 8005a1a:	f012 f9ac 	bl	8017d76 <memset>
			break;
 8005a1e:	e025      	b.n	8005a6c <BNO_Receive+0xb4>
			BNO_RxBuffer[Counter + 1] = Buffer;
 8005a20:	4b19      	ldr	r3, [pc, #100]	@ (8005a88 <BNO_Receive+0xd0>)
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	3301      	adds	r3, #1
 8005a26:	4917      	ldr	r1, [pc, #92]	@ (8005a84 <BNO_Receive+0xcc>)
 8005a28:	79fa      	ldrb	r2, [r7, #7]
 8005a2a:	54ca      	strb	r2, [r1, r3]
			Counter++;
 8005a2c:	4b16      	ldr	r3, [pc, #88]	@ (8005a88 <BNO_Receive+0xd0>)
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	3301      	adds	r3, #1
 8005a32:	b2da      	uxtb	r2, r3
 8005a34:	4b14      	ldr	r3, [pc, #80]	@ (8005a88 <BNO_Receive+0xd0>)
 8005a36:	701a      	strb	r2, [r3, #0]
			if(Counter == MsgSize){
 8005a38:	4b13      	ldr	r3, [pc, #76]	@ (8005a88 <BNO_Receive+0xd0>)
 8005a3a:	781a      	ldrb	r2, [r3, #0]
 8005a3c:	4b0f      	ldr	r3, [pc, #60]	@ (8005a7c <BNO_Receive+0xc4>)
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d112      	bne.n	8005a6a <BNO_Receive+0xb2>
				Counter = 0;
 8005a44:	4b10      	ldr	r3, [pc, #64]	@ (8005a88 <BNO_Receive+0xd0>)
 8005a46:	2200      	movs	r2, #0
 8005a48:	701a      	strb	r2, [r3, #0]
				MsgSize = 0;
 8005a4a:	4b0c      	ldr	r3, [pc, #48]	@ (8005a7c <BNO_Receive+0xc4>)
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	701a      	strb	r2, [r3, #0]
				BNO_Rx_Status = AwaitingMsg;
 8005a50:	4b09      	ldr	r3, [pc, #36]	@ (8005a78 <BNO_Receive+0xc0>)
 8005a52:	2200      	movs	r2, #0
 8005a54:	701a      	strb	r2, [r3, #0]
				BNO_ErrorHandler = ReadSucces;
 8005a56:	4b0a      	ldr	r3, [pc, #40]	@ (8005a80 <BNO_Receive+0xc8>)
 8005a58:	220b      	movs	r2, #11
 8005a5a:	701a      	strb	r2, [r3, #0]
				BNO_EmptyingBuffer();
 8005a5c:	f7ff fe20 	bl	80056a0 <BNO_EmptyingBuffer>
			break;
 8005a60:	e003      	b.n	8005a6a <BNO_Receive+0xb2>
			break;
 8005a62:	bf00      	nop
 8005a64:	e002      	b.n	8005a6c <BNO_Receive+0xb4>
			break;
 8005a66:	bf00      	nop
 8005a68:	e000      	b.n	8005a6c <BNO_Receive+0xb4>
			break;
 8005a6a:	bf00      	nop
	}
}
 8005a6c:	bf00      	nop
 8005a6e:	3708      	adds	r7, #8
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}
 8005a74:	2400167e 	.word	0x2400167e
 8005a78:	2400167c 	.word	0x2400167c
 8005a7c:	240016e6 	.word	0x240016e6
 8005a80:	2400167d 	.word	0x2400167d
 8005a84:	2400157c 	.word	0x2400157c
 8005a88:	240016e7 	.word	0x240016e7

08005a8c <BNO_FaultManager>:

void BNO_FaultManager(void){
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b082      	sub	sp, #8
 8005a90:	af00      	add	r7, sp, #0
	if(BNO_ComsCounter > 3){
 8005a92:	4b13      	ldr	r3, [pc, #76]	@ (8005ae0 <BNO_FaultManager+0x54>)
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	2b03      	cmp	r3, #3
 8005a98:	d90f      	bls.n	8005aba <BNO_FaultManager+0x2e>
		Reset_UART(&huart3);
 8005a9a:	4812      	ldr	r0, [pc, #72]	@ (8005ae4 <BNO_FaultManager+0x58>)
 8005a9c:	f7fe fd7c 	bl	8004598 <Reset_UART>
		BNO_Rx_Status = AwaitingMsg;
 8005aa0:	4b11      	ldr	r3, [pc, #68]	@ (8005ae8 <BNO_FaultManager+0x5c>)
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart3, &BNO_BufferByte,1);
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	4910      	ldr	r1, [pc, #64]	@ (8005aec <BNO_FaultManager+0x60>)
 8005aaa:	480e      	ldr	r0, [pc, #56]	@ (8005ae4 <BNO_FaultManager+0x58>)
 8005aac:	f00a f882 	bl	800fbb4 <HAL_UART_Receive_DMA>
		memset(BNO_RxBuffer, 0, sizeof(BNO_RxBuffer));
 8005ab0:	22ff      	movs	r2, #255	@ 0xff
 8005ab2:	2100      	movs	r1, #0
 8005ab4:	480e      	ldr	r0, [pc, #56]	@ (8005af0 <BNO_FaultManager+0x64>)
 8005ab6:	f012 f95e 	bl	8017d76 <memset>
	}
	if(BNO_ErrorHandler == WRONG_START_BYTE){
 8005aba:	4b0e      	ldr	r3, [pc, #56]	@ (8005af4 <BNO_FaultManager+0x68>)
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	2b06      	cmp	r3, #6
 8005ac0:	d10a      	bne.n	8005ad8 <BNO_FaultManager+0x4c>
		uint8_t Buffer = 0x00;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	71fb      	strb	r3, [r7, #7]

		HAL_UART_Transmit_IT(&huart3, &Buffer, 1);
 8005ac6:	1dfb      	adds	r3, r7, #7
 8005ac8:	2201      	movs	r2, #1
 8005aca:	4619      	mov	r1, r3
 8005acc:	4805      	ldr	r0, [pc, #20]	@ (8005ae4 <BNO_FaultManager+0x58>)
 8005ace:	f009 ff91 	bl	800f9f4 <HAL_UART_Transmit_IT>
		BNO_ErrorHandler = 0;
 8005ad2:	4b08      	ldr	r3, [pc, #32]	@ (8005af4 <BNO_FaultManager+0x68>)
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	701a      	strb	r2, [r3, #0]
	}
}
 8005ad8:	bf00      	nop
 8005ada:	3708      	adds	r7, #8
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}
 8005ae0:	2400167e 	.word	0x2400167e
 8005ae4:	240012b4 	.word	0x240012b4
 8005ae8:	2400167c 	.word	0x2400167c
 8005aec:	2400167b 	.word	0x2400167b
 8005af0:	2400157c 	.word	0x2400157c
 8005af4:	2400167d 	.word	0x2400167d

08005af8 <BNO_Tasks>:

void BNO_Tasks(void){
 8005af8:	b580      	push	{r7, lr}
 8005afa:	af00      	add	r7, sp, #0
	if(BNO_DelayCounter == 0){
 8005afc:	4b1b      	ldr	r3, [pc, #108]	@ (8005b6c <BNO_Tasks+0x74>)
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d128      	bne.n	8005b56 <BNO_Tasks+0x5e>
		switch (BNO_CurrentState) {
 8005b04:	4b1a      	ldr	r3, [pc, #104]	@ (8005b70 <BNO_Tasks+0x78>)
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	2b04      	cmp	r3, #4
 8005b0a:	d81c      	bhi.n	8005b46 <BNO_Tasks+0x4e>
 8005b0c:	a201      	add	r2, pc, #4	@ (adr r2, 8005b14 <BNO_Tasks+0x1c>)
 8005b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b12:	bf00      	nop
 8005b14:	08005b29 	.word	0x08005b29
 8005b18:	08005b35 	.word	0x08005b35
 8005b1c:	08005b3b 	.word	0x08005b3b
 8005b20:	08005b41 	.word	0x08005b41
 8005b24:	08005b2f 	.word	0x08005b2f
			case Init:
				BNO_Init();
 8005b28:	f7ff fe52 	bl	80057d0 <BNO_Init>
				break;
 8005b2c:	e00c      	b.n	8005b48 <BNO_Tasks+0x50>
			case Reset:
				BNO_SWReset();
 8005b2e:	f7ff fdd3 	bl	80056d8 <BNO_SWReset>
			break;
 8005b32:	e009      	b.n	8005b48 <BNO_Tasks+0x50>
			case Configuration:
				BNO_Config();
 8005b34:	f7ff fe68 	bl	8005808 <BNO_Config>
				break;
 8005b38:	e006      	b.n	8005b48 <BNO_Tasks+0x50>
			case Calibration:
				BNO_CalibrationStatus();
 8005b3a:	f7ff feaf 	bl	800589c <BNO_CalibrationStatus>
				break;
 8005b3e:	e003      	b.n	8005b48 <BNO_Tasks+0x50>
			case Operation:
				BNO_GetData();
 8005b40:	f7ff ff32 	bl	80059a8 <BNO_GetData>
				break;
 8005b44:	e000      	b.n	8005b48 <BNO_Tasks+0x50>

			default:
				break;
 8005b46:	bf00      	nop
		}
		++BNO_ComsCounter;
 8005b48:	4b0a      	ldr	r3, [pc, #40]	@ (8005b74 <BNO_Tasks+0x7c>)
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	3301      	adds	r3, #1
 8005b4e:	b2da      	uxtb	r2, r3
 8005b50:	4b08      	ldr	r3, [pc, #32]	@ (8005b74 <BNO_Tasks+0x7c>)
 8005b52:	701a      	strb	r2, [r3, #0]
 8005b54:	e005      	b.n	8005b62 <BNO_Tasks+0x6a>
	}
	else{
		--BNO_DelayCounter;
 8005b56:	4b05      	ldr	r3, [pc, #20]	@ (8005b6c <BNO_Tasks+0x74>)
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	3b01      	subs	r3, #1
 8005b5c:	b2da      	uxtb	r2, r3
 8005b5e:	4b03      	ldr	r3, [pc, #12]	@ (8005b6c <BNO_Tasks+0x74>)
 8005b60:	701a      	strb	r2, [r3, #0]
	}
	BNO_FaultManager();
 8005b62:	f7ff ff93 	bl	8005a8c <BNO_FaultManager>
}
 8005b66:	bf00      	nop
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	bf00      	nop
 8005b6c:	2400167f 	.word	0x2400167f
 8005b70:	24001680 	.word	0x24001680
 8005b74:	2400167e 	.word	0x2400167e

08005b78 <LED_blink>:

		.G_LED.LED_GPIO_GPIOx = LED_5_GPIO_Port,
		.G_LED.LED_GPIO_Pin   = LED_5_Pin
};

LED_config_t LED_blink(LED_config_t LED){
 8005b78:	b084      	sub	sp, #16
 8005b7a:	b590      	push	{r4, r7, lr}
 8005b7c:	b083      	sub	sp, #12
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	6078      	str	r0, [r7, #4]
 8005b82:	f107 001c 	add.w	r0, r7, #28
 8005b86:	e880 000e 	stmia.w	r0, {r1, r2, r3}

		switch (LED.Blink_status) {
 8005b8a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d002      	beq.n	8005b98 <LED_blink+0x20>
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d010      	beq.n	8005bb8 <LED_blink+0x40>
 8005b96:	e01f      	b.n	8005bd8 <LED_blink+0x60>
			case 0x00:
				if(LED.count >= LED.Time_Off){
 8005b98:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005b9a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d31f      	bcc.n	8005be0 <LED_blink+0x68>
					HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, SET);
 8005ba0:	69fb      	ldr	r3, [r7, #28]
 8005ba2:	8c39      	ldrh	r1, [r7, #32]
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f004 fc70 	bl	800a48c <HAL_GPIO_WritePin>
					LED.Blink_status = 1;
 8005bac:	2301      	movs	r3, #1
 8005bae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
					LED.count = 0;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	853b      	strh	r3, [r7, #40]	@ 0x28
				}
				break;
 8005bb6:	e013      	b.n	8005be0 <LED_blink+0x68>
			case 0x01:
				if(LED.count >= LED.Time_On){
 8005bb8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005bba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d311      	bcc.n	8005be4 <LED_blink+0x6c>
					HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, RESET);
 8005bc0:	69fb      	ldr	r3, [r7, #28]
 8005bc2:	8c39      	ldrh	r1, [r7, #32]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f004 fc60 	bl	800a48c <HAL_GPIO_WritePin>
					LED.Blink_status = 0;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
					LED.count = 0;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	853b      	strh	r3, [r7, #40]	@ 0x28
				}
				break;
 8005bd6:	e005      	b.n	8005be4 <LED_blink+0x6c>
			default:
				LED.Blink_status = 0;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
				break;
 8005bde:	e002      	b.n	8005be6 <LED_blink+0x6e>
				break;
 8005be0:	bf00      	nop
 8005be2:	e000      	b.n	8005be6 <LED_blink+0x6e>
				break;
 8005be4:	bf00      	nop
		}

	LED.count++;
 8005be6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005be8:	3301      	adds	r3, #1
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	853b      	strh	r3, [r7, #40]	@ 0x28
	return LED;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	461c      	mov	r4, r3
 8005bf2:	f107 031c 	add.w	r3, r7, #28
 8005bf6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005bf8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	370c      	adds	r7, #12
 8005c00:	46bd      	mov	sp, r7
 8005c02:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8005c06:	b004      	add	sp, #16
 8005c08:	4770      	bx	lr

08005c0a <LED_Rutine>:

LED_config_t LED_Rutine(LED_config_t LED){
 8005c0a:	b084      	sub	sp, #16
 8005c0c:	b590      	push	{r4, r7, lr}
 8005c0e:	b085      	sub	sp, #20
 8005c10:	af02      	add	r7, sp, #8
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	f107 001c 	add.w	r0, r7, #28
 8005c18:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if(LED.LED_status == 1){
 8005c1c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d117      	bne.n	8005c54 <LED_Rutine+0x4a>
		switch (LED.Sequence) {
 8005c24:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d002      	beq.n	8005c32 <LED_Rutine+0x28>
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d007      	beq.n	8005c40 <LED_Rutine+0x36>
				break;
			case Blink:
				LED = LED_blink(LED);
				break;
			default:
				break;
 8005c30:	e018      	b.n	8005c64 <LED_Rutine+0x5a>
				HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, SET);
 8005c32:	69fb      	ldr	r3, [r7, #28]
 8005c34:	8c39      	ldrh	r1, [r7, #32]
 8005c36:	2201      	movs	r2, #1
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f004 fc27 	bl	800a48c <HAL_GPIO_WritePin>
				break;
 8005c3e:	e011      	b.n	8005c64 <LED_Rutine+0x5a>
				LED = LED_blink(LED);
 8005c40:	f107 001c 	add.w	r0, r7, #28
 8005c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c46:	9300      	str	r3, [sp, #0]
 8005c48:	f107 031c 	add.w	r3, r7, #28
 8005c4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005c4e:	f7ff ff93 	bl	8005b78 <LED_blink>
				break;
 8005c52:	e007      	b.n	8005c64 <LED_Rutine+0x5a>
		}
	}
	else{
		HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, RESET);
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	8c39      	ldrh	r1, [r7, #32]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f004 fc16 	bl	800a48c <HAL_GPIO_WritePin>
		LED.count = 0;
 8005c60:	2300      	movs	r3, #0
 8005c62:	853b      	strh	r3, [r7, #40]	@ 0x28
	}
	return LED;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	461c      	mov	r4, r3
 8005c68:	f107 031c 	add.w	r3, r7, #28
 8005c6c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005c6e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	370c      	adds	r7, #12
 8005c76:	46bd      	mov	sp, r7
 8005c78:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8005c7c:	b004      	add	sp, #16
 8005c7e:	4770      	bx	lr

08005c80 <LED_Tasks>:

void LED_Tasks (void){
 8005c80:	b590      	push	{r4, r7, lr}
 8005c82:	b087      	sub	sp, #28
 8005c84:	af02      	add	r7, sp, #8
	LED_Info.R_LED = LED_Rutine(LED_Info.R_LED);
 8005c86:	4c24      	ldr	r4, [pc, #144]	@ (8005d18 <LED_Tasks+0x98>)
 8005c88:	4638      	mov	r0, r7
 8005c8a:	4b23      	ldr	r3, [pc, #140]	@ (8005d18 <LED_Tasks+0x98>)
 8005c8c:	68da      	ldr	r2, [r3, #12]
 8005c8e:	9200      	str	r2, [sp, #0]
 8005c90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005c92:	f7ff ffba 	bl	8005c0a <LED_Rutine>
 8005c96:	463b      	mov	r3, r7
 8005c98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005c9a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED1 = LED_Rutine(LED_Info.B_LED1);
 8005c9e:	4c1e      	ldr	r4, [pc, #120]	@ (8005d18 <LED_Tasks+0x98>)
 8005ca0:	4638      	mov	r0, r7
 8005ca2:	4b1d      	ldr	r3, [pc, #116]	@ (8005d18 <LED_Tasks+0x98>)
 8005ca4:	69da      	ldr	r2, [r3, #28]
 8005ca6:	9200      	str	r2, [sp, #0]
 8005ca8:	3310      	adds	r3, #16
 8005caa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005cac:	f7ff ffad 	bl	8005c0a <LED_Rutine>
 8005cb0:	3410      	adds	r4, #16
 8005cb2:	463b      	mov	r3, r7
 8005cb4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005cb6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED2 = LED_Rutine(LED_Info.B_LED2);
 8005cba:	4c17      	ldr	r4, [pc, #92]	@ (8005d18 <LED_Tasks+0x98>)
 8005cbc:	4638      	mov	r0, r7
 8005cbe:	4b16      	ldr	r3, [pc, #88]	@ (8005d18 <LED_Tasks+0x98>)
 8005cc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cc2:	9200      	str	r2, [sp, #0]
 8005cc4:	3320      	adds	r3, #32
 8005cc6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005cc8:	f7ff ff9f 	bl	8005c0a <LED_Rutine>
 8005ccc:	3420      	adds	r4, #32
 8005cce:	463b      	mov	r3, r7
 8005cd0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005cd2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED3 = LED_Rutine(LED_Info.B_LED3);
 8005cd6:	4c10      	ldr	r4, [pc, #64]	@ (8005d18 <LED_Tasks+0x98>)
 8005cd8:	4638      	mov	r0, r7
 8005cda:	4b0f      	ldr	r3, [pc, #60]	@ (8005d18 <LED_Tasks+0x98>)
 8005cdc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005cde:	9200      	str	r2, [sp, #0]
 8005ce0:	3330      	adds	r3, #48	@ 0x30
 8005ce2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005ce4:	f7ff ff91 	bl	8005c0a <LED_Rutine>
 8005ce8:	3430      	adds	r4, #48	@ 0x30
 8005cea:	463b      	mov	r3, r7
 8005cec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005cee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.G_LED = LED_Rutine(LED_Info.G_LED);
 8005cf2:	4c09      	ldr	r4, [pc, #36]	@ (8005d18 <LED_Tasks+0x98>)
 8005cf4:	4638      	mov	r0, r7
 8005cf6:	4b08      	ldr	r3, [pc, #32]	@ (8005d18 <LED_Tasks+0x98>)
 8005cf8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005cfa:	9200      	str	r2, [sp, #0]
 8005cfc:	3340      	adds	r3, #64	@ 0x40
 8005cfe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005d00:	f7ff ff83 	bl	8005c0a <LED_Rutine>
 8005d04:	3440      	adds	r4, #64	@ 0x40
 8005d06:	463b      	mov	r3, r7
 8005d08:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005d0a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8005d0e:	bf00      	nop
 8005d10:	3714      	adds	r7, #20
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd90      	pop	{r4, r7, pc}
 8005d16:	bf00      	nop
 8005d18:	2400000c 	.word	0x2400000c

08005d1c <LR03_AT>:

uint8_t LR03_RxBuffer[256] = {0};

uint8_t Test_1;

void LR03_AT(void){
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	af00      	add	r7, sp, #0

	HAL_UART_Transmit_IT(&huart6, (uint8_t*)"+++\r\n", 5);
 8005d20:	2205      	movs	r2, #5
 8005d22:	4903      	ldr	r1, [pc, #12]	@ (8005d30 <LR03_AT+0x14>)
 8005d24:	4803      	ldr	r0, [pc, #12]	@ (8005d34 <LR03_AT+0x18>)
 8005d26:	f009 fe65 	bl	800f9f4 <HAL_UART_Transmit_IT>
}
 8005d2a:	bf00      	nop
 8005d2c:	bd80      	pop	{r7, pc}
 8005d2e:	bf00      	nop
 8005d30:	08019e68 	.word	0x08019e68
 8005d34:	24001348 	.word	0x24001348

08005d38 <LR03_Level>:

void LR03_Level(uint8_t Level){
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b082      	sub	sp, #8
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	4603      	mov	r3, r0
 8005d40:	71fb      	strb	r3, [r7, #7]
	static uint8_t Level_Command[] = {"AT+LEVEL7\r\n"};
	if(Level > 7) Level = 7;
 8005d42:	79fb      	ldrb	r3, [r7, #7]
 8005d44:	2b07      	cmp	r3, #7
 8005d46:	d901      	bls.n	8005d4c <LR03_Level+0x14>
 8005d48:	2307      	movs	r3, #7
 8005d4a:	71fb      	strb	r3, [r7, #7]
	if(Level < 1) Level = 1;
 8005d4c:	79fb      	ldrb	r3, [r7, #7]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d101      	bne.n	8005d56 <LR03_Level+0x1e>
 8005d52:	2301      	movs	r3, #1
 8005d54:	71fb      	strb	r3, [r7, #7]
	Level_Command[8] = Level + 48;
 8005d56:	79fb      	ldrb	r3, [r7, #7]
 8005d58:	3330      	adds	r3, #48	@ 0x30
 8005d5a:	b2da      	uxtb	r2, r3
 8005d5c:	4b05      	ldr	r3, [pc, #20]	@ (8005d74 <LR03_Level+0x3c>)
 8005d5e:	721a      	strb	r2, [r3, #8]
	HAL_UART_Transmit_IT(&huart6, Level_Command, 11);
 8005d60:	220b      	movs	r2, #11
 8005d62:	4904      	ldr	r1, [pc, #16]	@ (8005d74 <LR03_Level+0x3c>)
 8005d64:	4804      	ldr	r0, [pc, #16]	@ (8005d78 <LR03_Level+0x40>)
 8005d66:	f009 fe45 	bl	800f9f4 <HAL_UART_Transmit_IT>
}
 8005d6a:	bf00      	nop
 8005d6c:	3708      	adds	r7, #8
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop
 8005d74:	2400005c 	.word	0x2400005c
 8005d78:	24001348 	.word	0x24001348

08005d7c <LR03_Receive>:

void LR03_Receive(uint8_t Data){
 8005d7c:	b480      	push	{r7}
 8005d7e:	b083      	sub	sp, #12
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	4603      	mov	r3, r0
 8005d84:	71fb      	strb	r3, [r7, #7]
	static uint8_t DataPointer = 0;
	LR03_RxBuffer[DataPointer] = Data;
 8005d86:	4b09      	ldr	r3, [pc, #36]	@ (8005dac <LR03_Receive+0x30>)
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	4619      	mov	r1, r3
 8005d8c:	4a08      	ldr	r2, [pc, #32]	@ (8005db0 <LR03_Receive+0x34>)
 8005d8e:	79fb      	ldrb	r3, [r7, #7]
 8005d90:	5453      	strb	r3, [r2, r1]
	DataPointer++;
 8005d92:	4b06      	ldr	r3, [pc, #24]	@ (8005dac <LR03_Receive+0x30>)
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	3301      	adds	r3, #1
 8005d98:	b2da      	uxtb	r2, r3
 8005d9a:	4b04      	ldr	r3, [pc, #16]	@ (8005dac <LR03_Receive+0x30>)
 8005d9c:	701a      	strb	r2, [r3, #0]
}
 8005d9e:	bf00      	nop
 8005da0:	370c      	adds	r7, #12
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr
 8005daa:	bf00      	nop
 8005dac:	240017e9 	.word	0x240017e9
 8005db0:	240016e8 	.word	0x240016e8

08005db4 <LR03_StateMachine>:

void LR03_StateMachine(void){
 8005db4:	b580      	push	{r7, lr}
 8005db6:	af00      	add	r7, sp, #0

	switch (Test_1) {
 8005db8:	4b09      	ldr	r3, [pc, #36]	@ (8005de0 <LR03_StateMachine+0x2c>)
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d002      	beq.n	8005dc6 <LR03_StateMachine+0x12>
 8005dc0:	2b02      	cmp	r3, #2
 8005dc2:	d003      	beq.n	8005dcc <LR03_StateMachine+0x18>
			break;
		case 2:
			LR03_Level(7);
			break;
		default:
			break;
 8005dc4:	e006      	b.n	8005dd4 <LR03_StateMachine+0x20>
			LR03_AT();
 8005dc6:	f7ff ffa9 	bl	8005d1c <LR03_AT>
			break;
 8005dca:	e003      	b.n	8005dd4 <LR03_StateMachine+0x20>
			LR03_Level(7);
 8005dcc:	2007      	movs	r0, #7
 8005dce:	f7ff ffb3 	bl	8005d38 <LR03_Level>
			break;
 8005dd2:	bf00      	nop
	}
	Test_1 = 0;
 8005dd4:	4b02      	ldr	r3, [pc, #8]	@ (8005de0 <LR03_StateMachine+0x2c>)
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	701a      	strb	r2, [r3, #0]
}
 8005dda:	bf00      	nop
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	bf00      	nop
 8005de0:	240017e8 	.word	0x240017e8

08005de4 <PWM_Assign>:
Servo_mgmt_s PWM_Output = {
	    .S = {1500, 1500, 1500, 1500, 1500,
	          1500, 1500, 1500, 1500, 1500}
	};

void PWM_Assign(void) {
 8005de4:	b580      	push	{r7, lr}
 8005de6:	af00      	add	r7, sp, #0
    // Timer 2 (Canales 1, 2, 10, 9)
    TIM2->CCR1 = PWM_Output.S[0];  // Canal_1 (S[0])
 8005de8:	4b2a      	ldr	r3, [pc, #168]	@ (8005e94 <PWM_Assign+0xb0>)
 8005dea:	881a      	ldrh	r2, [r3, #0]
 8005dec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005df0:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2->CCR2 = PWM_Output.S[1];  // Canal_2 (S[1])
 8005df2:	4b28      	ldr	r3, [pc, #160]	@ (8005e94 <PWM_Assign+0xb0>)
 8005df4:	885a      	ldrh	r2, [r3, #2]
 8005df6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005dfa:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM2->CCR3 = PWM_Output.S[9];  // Canal_10 (S[9])
 8005dfc:	4b25      	ldr	r3, [pc, #148]	@ (8005e94 <PWM_Assign+0xb0>)
 8005dfe:	8a5a      	ldrh	r2, [r3, #18]
 8005e00:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005e04:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2->CCR4 = PWM_Output.S[8];  // Canal_9 (S[8])
 8005e06:	4b23      	ldr	r3, [pc, #140]	@ (8005e94 <PWM_Assign+0xb0>)
 8005e08:	8a1a      	ldrh	r2, [r3, #16]
 8005e0a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005e0e:	641a      	str	r2, [r3, #64]	@ 0x40

    // Timer 3 (Canales 3, 4)
    TIM3->CCR1 = PWM_Output.S[2];  // Canal_3 (S[2])
 8005e10:	4b20      	ldr	r3, [pc, #128]	@ (8005e94 <PWM_Assign+0xb0>)
 8005e12:	889a      	ldrh	r2, [r3, #4]
 8005e14:	4b20      	ldr	r3, [pc, #128]	@ (8005e98 <PWM_Assign+0xb4>)
 8005e16:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3->CCR2 = PWM_Output.S[3];  // Canal_4 (S[3])
 8005e18:	4b1e      	ldr	r3, [pc, #120]	@ (8005e94 <PWM_Assign+0xb0>)
 8005e1a:	88da      	ldrh	r2, [r3, #6]
 8005e1c:	4b1e      	ldr	r3, [pc, #120]	@ (8005e98 <PWM_Assign+0xb4>)
 8005e1e:	639a      	str	r2, [r3, #56]	@ 0x38

    // Timer 4 (Canales 5-8)
    TIM4->CCR1 = PWM_Output.S[4];  // Canal_5 (S[4])
 8005e20:	4b1c      	ldr	r3, [pc, #112]	@ (8005e94 <PWM_Assign+0xb0>)
 8005e22:	891a      	ldrh	r2, [r3, #8]
 8005e24:	4b1d      	ldr	r3, [pc, #116]	@ (8005e9c <PWM_Assign+0xb8>)
 8005e26:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM4->CCR2 = PWM_Output.S[5];  // Canal_6 (S[5])
 8005e28:	4b1a      	ldr	r3, [pc, #104]	@ (8005e94 <PWM_Assign+0xb0>)
 8005e2a:	895a      	ldrh	r2, [r3, #10]
 8005e2c:	4b1b      	ldr	r3, [pc, #108]	@ (8005e9c <PWM_Assign+0xb8>)
 8005e2e:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM4->CCR3 = PWM_Output.S[6];  // Canal_7 (S[6])
 8005e30:	4b18      	ldr	r3, [pc, #96]	@ (8005e94 <PWM_Assign+0xb0>)
 8005e32:	899a      	ldrh	r2, [r3, #12]
 8005e34:	4b19      	ldr	r3, [pc, #100]	@ (8005e9c <PWM_Assign+0xb8>)
 8005e36:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM4->CCR4 = PWM_Output.S[7];  // Canal_8 (S[7])
 8005e38:	4b16      	ldr	r3, [pc, #88]	@ (8005e94 <PWM_Assign+0xb0>)
 8005e3a:	89da      	ldrh	r2, [r3, #14]
 8005e3c:	4b17      	ldr	r3, [pc, #92]	@ (8005e9c <PWM_Assign+0xb8>)
 8005e3e:	641a      	str	r2, [r3, #64]	@ 0x40

    // Iniciar PWM (igual que antes)
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8005e40:	2100      	movs	r1, #0
 8005e42:	4817      	ldr	r0, [pc, #92]	@ (8005ea0 <PWM_Assign+0xbc>)
 8005e44:	f008 fd58 	bl	800e8f8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8005e48:	2104      	movs	r1, #4
 8005e4a:	4815      	ldr	r0, [pc, #84]	@ (8005ea0 <PWM_Assign+0xbc>)
 8005e4c:	f008 fd54 	bl	800e8f8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8005e50:	2108      	movs	r1, #8
 8005e52:	4813      	ldr	r0, [pc, #76]	@ (8005ea0 <PWM_Assign+0xbc>)
 8005e54:	f008 fd50 	bl	800e8f8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8005e58:	210c      	movs	r1, #12
 8005e5a:	4811      	ldr	r0, [pc, #68]	@ (8005ea0 <PWM_Assign+0xbc>)
 8005e5c:	f008 fd4c 	bl	800e8f8 <HAL_TIM_PWM_Start>

    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8005e60:	2100      	movs	r1, #0
 8005e62:	4810      	ldr	r0, [pc, #64]	@ (8005ea4 <PWM_Assign+0xc0>)
 8005e64:	f008 fd48 	bl	800e8f8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8005e68:	2104      	movs	r1, #4
 8005e6a:	480e      	ldr	r0, [pc, #56]	@ (8005ea4 <PWM_Assign+0xc0>)
 8005e6c:	f008 fd44 	bl	800e8f8 <HAL_TIM_PWM_Start>

    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8005e70:	2100      	movs	r1, #0
 8005e72:	480d      	ldr	r0, [pc, #52]	@ (8005ea8 <PWM_Assign+0xc4>)
 8005e74:	f008 fd40 	bl	800e8f8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8005e78:	2104      	movs	r1, #4
 8005e7a:	480b      	ldr	r0, [pc, #44]	@ (8005ea8 <PWM_Assign+0xc4>)
 8005e7c:	f008 fd3c 	bl	800e8f8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8005e80:	2108      	movs	r1, #8
 8005e82:	4809      	ldr	r0, [pc, #36]	@ (8005ea8 <PWM_Assign+0xc4>)
 8005e84:	f008 fd38 	bl	800e8f8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8005e88:	210c      	movs	r1, #12
 8005e8a:	4807      	ldr	r0, [pc, #28]	@ (8005ea8 <PWM_Assign+0xc4>)
 8005e8c:	f008 fd34 	bl	800e8f8 <HAL_TIM_PWM_Start>
}
 8005e90:	bf00      	nop
 8005e92:	bd80      	pop	{r7, pc}
 8005e94:	24000068 	.word	0x24000068
 8005e98:	40000400 	.word	0x40000400
 8005e9c:	40000800 	.word	0x40000800
 8005ea0:	2400105c 	.word	0x2400105c
 8005ea4:	240010a8 	.word	0x240010a8
 8005ea8:	240010f4 	.word	0x240010f4

08005eac <SBUS_init>:

extern UART_HandleTypeDef huart1;
#define SBUS_UART_handler &huart1


void SBUS_init(void){
 8005eac:	b580      	push	{r7, lr}
 8005eae:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(SBUS_UART_handler, &SBUS_RxBuffer, 1);
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	4903      	ldr	r1, [pc, #12]	@ (8005ec0 <SBUS_init+0x14>)
 8005eb4:	4803      	ldr	r0, [pc, #12]	@ (8005ec4 <SBUS_init+0x18>)
 8005eb6:	f009 fe7d 	bl	800fbb4 <HAL_UART_Receive_DMA>

}
 8005eba:	bf00      	nop
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	24001805 	.word	0x24001805
 8005ec4:	24001220 	.word	0x24001220

08005ec8 <SBUS_Receive>:

void SBUS_Receive(uint8_t SBUS_RxBuffer){
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b082      	sub	sp, #8
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	4603      	mov	r3, r0
 8005ed0:	71fb      	strb	r3, [r7, #7]
	static uint8_t Actual_status = 0;
	static uint8_t RxCount;

	switch (Actual_status) {
 8005ed2:	4b20      	ldr	r3, [pc, #128]	@ (8005f54 <SBUS_Receive+0x8c>)
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d002      	beq.n	8005ee0 <SBUS_Receive+0x18>
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d017      	beq.n	8005f0e <SBUS_Receive+0x46>
 8005ede:	e02f      	b.n	8005f40 <SBUS_Receive+0x78>
		case 0:
			if(SBUS_RxBuffer == 0x0F){
 8005ee0:	79fb      	ldrb	r3, [r7, #7]
 8005ee2:	2b0f      	cmp	r3, #15
 8005ee4:	d10f      	bne.n	8005f06 <SBUS_Receive+0x3e>
				SBUS_UART_Rx[RxCount] = SBUS_RxBuffer;
 8005ee6:	4b1c      	ldr	r3, [pc, #112]	@ (8005f58 <SBUS_Receive+0x90>)
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	4619      	mov	r1, r3
 8005eec:	4a1b      	ldr	r2, [pc, #108]	@ (8005f5c <SBUS_Receive+0x94>)
 8005eee:	79fb      	ldrb	r3, [r7, #7]
 8005ef0:	5453      	strb	r3, [r2, r1]
				Actual_status = 1;
 8005ef2:	4b18      	ldr	r3, [pc, #96]	@ (8005f54 <SBUS_Receive+0x8c>)
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	701a      	strb	r2, [r3, #0]
				RxCount++;
 8005ef8:	4b17      	ldr	r3, [pc, #92]	@ (8005f58 <SBUS_Receive+0x90>)
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	3301      	adds	r3, #1
 8005efe:	b2da      	uxtb	r2, r3
 8005f00:	4b15      	ldr	r3, [pc, #84]	@ (8005f58 <SBUS_Receive+0x90>)
 8005f02:	701a      	strb	r2, [r3, #0]
			}
			else{
				RxCount = 0;
			}
			break;
 8005f04:	e021      	b.n	8005f4a <SBUS_Receive+0x82>
				RxCount = 0;
 8005f06:	4b14      	ldr	r3, [pc, #80]	@ (8005f58 <SBUS_Receive+0x90>)
 8005f08:	2200      	movs	r2, #0
 8005f0a:	701a      	strb	r2, [r3, #0]
			break;
 8005f0c:	e01d      	b.n	8005f4a <SBUS_Receive+0x82>
		case 1:
			SBUS_UART_Rx[RxCount] = SBUS_RxBuffer;
 8005f0e:	4b12      	ldr	r3, [pc, #72]	@ (8005f58 <SBUS_Receive+0x90>)
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	4619      	mov	r1, r3
 8005f14:	4a11      	ldr	r2, [pc, #68]	@ (8005f5c <SBUS_Receive+0x94>)
 8005f16:	79fb      	ldrb	r3, [r7, #7]
 8005f18:	5453      	strb	r3, [r2, r1]
			RxCount++;
 8005f1a:	4b0f      	ldr	r3, [pc, #60]	@ (8005f58 <SBUS_Receive+0x90>)
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	3301      	adds	r3, #1
 8005f20:	b2da      	uxtb	r2, r3
 8005f22:	4b0d      	ldr	r3, [pc, #52]	@ (8005f58 <SBUS_Receive+0x90>)
 8005f24:	701a      	strb	r2, [r3, #0]
			if(RxCount == 24){
 8005f26:	4b0c      	ldr	r3, [pc, #48]	@ (8005f58 <SBUS_Receive+0x90>)
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	2b18      	cmp	r3, #24
 8005f2c:	d10c      	bne.n	8005f48 <SBUS_Receive+0x80>
				RxCount = 0;
 8005f2e:	4b0a      	ldr	r3, [pc, #40]	@ (8005f58 <SBUS_Receive+0x90>)
 8005f30:	2200      	movs	r2, #0
 8005f32:	701a      	strb	r2, [r3, #0]
				Actual_status = 0;
 8005f34:	4b07      	ldr	r3, [pc, #28]	@ (8005f54 <SBUS_Receive+0x8c>)
 8005f36:	2200      	movs	r2, #0
 8005f38:	701a      	strb	r2, [r3, #0]
				SBUS_getData();
 8005f3a:	f000 f811 	bl	8005f60 <SBUS_getData>
			}
			break;
 8005f3e:	e003      	b.n	8005f48 <SBUS_Receive+0x80>
		default:
			Actual_status = 0;
 8005f40:	4b04      	ldr	r3, [pc, #16]	@ (8005f54 <SBUS_Receive+0x8c>)
 8005f42:	2200      	movs	r2, #0
 8005f44:	701a      	strb	r2, [r3, #0]
			break;
 8005f46:	e000      	b.n	8005f4a <SBUS_Receive+0x82>
			break;
 8005f48:	bf00      	nop
	}
}
 8005f4a:	bf00      	nop
 8005f4c:	3708      	adds	r7, #8
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop
 8005f54:	24001806 	.word	0x24001806
 8005f58:	24001807 	.word	0x24001807
 8005f5c:	240017ec 	.word	0x240017ec

08005f60 <SBUS_getData>:


void SBUS_getData(void){
 8005f60:	b480      	push	{r7}
 8005f62:	af00      	add	r7, sp, #0
	//Se hace el corrimiento de bits para dar la estructura de los 16 canales, donde cada canal esta compuesto por 11 bits
	//pero cada paquete es de 1 byte. Para cada canal se utilizan los 8 bits (O los que correspondan) de el byte 1
	//(O el que corresponda) como los bits menos significativos del canal 1, y los tres bits faltantes se toman los 3 bits
	// menos significativos (O los que correspondan) del byte 2 y se colocan como los 3 bits más significativos del canal 1.
	Radio_input.Canal_1 = ((SBUS_UART_Rx[1] | SBUS_UART_Rx[2] << 8) & 0x07FF);
 8005f64:	4b95      	ldr	r3, [pc, #596]	@ (80061bc <SBUS_getData+0x25c>)
 8005f66:	785b      	ldrb	r3, [r3, #1]
 8005f68:	b21a      	sxth	r2, r3
 8005f6a:	4b94      	ldr	r3, [pc, #592]	@ (80061bc <SBUS_getData+0x25c>)
 8005f6c:	789b      	ldrb	r3, [r3, #2]
 8005f6e:	021b      	lsls	r3, r3, #8
 8005f70:	b21b      	sxth	r3, r3
 8005f72:	4313      	orrs	r3, r2
 8005f74:	b21b      	sxth	r3, r3
 8005f76:	b29b      	uxth	r3, r3
 8005f78:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f7c:	b29a      	uxth	r2, r3
 8005f7e:	4b90      	ldr	r3, [pc, #576]	@ (80061c0 <SBUS_getData+0x260>)
 8005f80:	805a      	strh	r2, [r3, #2]
	Radio_input.Canal_2 = ((SBUS_UART_Rx[2] >> 3 | SBUS_UART_Rx[3] << 5) & 0x07FF);
 8005f82:	4b8e      	ldr	r3, [pc, #568]	@ (80061bc <SBUS_getData+0x25c>)
 8005f84:	789b      	ldrb	r3, [r3, #2]
 8005f86:	08db      	lsrs	r3, r3, #3
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	b21a      	sxth	r2, r3
 8005f8c:	4b8b      	ldr	r3, [pc, #556]	@ (80061bc <SBUS_getData+0x25c>)
 8005f8e:	78db      	ldrb	r3, [r3, #3]
 8005f90:	015b      	lsls	r3, r3, #5
 8005f92:	b21b      	sxth	r3, r3
 8005f94:	4313      	orrs	r3, r2
 8005f96:	b21b      	sxth	r3, r3
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f9e:	b29a      	uxth	r2, r3
 8005fa0:	4b87      	ldr	r3, [pc, #540]	@ (80061c0 <SBUS_getData+0x260>)
 8005fa2:	809a      	strh	r2, [r3, #4]
	Radio_input.Canal_3 = ((SBUS_UART_Rx[3] >> 6 | SBUS_UART_Rx[4] << 2 | SBUS_UART_Rx[5] << 10) & 0x07FF);
 8005fa4:	4b85      	ldr	r3, [pc, #532]	@ (80061bc <SBUS_getData+0x25c>)
 8005fa6:	78db      	ldrb	r3, [r3, #3]
 8005fa8:	099b      	lsrs	r3, r3, #6
 8005faa:	b2db      	uxtb	r3, r3
 8005fac:	b21a      	sxth	r2, r3
 8005fae:	4b83      	ldr	r3, [pc, #524]	@ (80061bc <SBUS_getData+0x25c>)
 8005fb0:	791b      	ldrb	r3, [r3, #4]
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	b21b      	sxth	r3, r3
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	b21a      	sxth	r2, r3
 8005fba:	4b80      	ldr	r3, [pc, #512]	@ (80061bc <SBUS_getData+0x25c>)
 8005fbc:	795b      	ldrb	r3, [r3, #5]
 8005fbe:	029b      	lsls	r3, r3, #10
 8005fc0:	b21b      	sxth	r3, r3
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	b21b      	sxth	r3, r3
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005fcc:	b29a      	uxth	r2, r3
 8005fce:	4b7c      	ldr	r3, [pc, #496]	@ (80061c0 <SBUS_getData+0x260>)
 8005fd0:	80da      	strh	r2, [r3, #6]
	Radio_input.Canal_4 = ((SBUS_UART_Rx[5] >> 1 | SBUS_UART_Rx[6] << 7) & 0x07FF);
 8005fd2:	4b7a      	ldr	r3, [pc, #488]	@ (80061bc <SBUS_getData+0x25c>)
 8005fd4:	795b      	ldrb	r3, [r3, #5]
 8005fd6:	085b      	lsrs	r3, r3, #1
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	b21a      	sxth	r2, r3
 8005fdc:	4b77      	ldr	r3, [pc, #476]	@ (80061bc <SBUS_getData+0x25c>)
 8005fde:	799b      	ldrb	r3, [r3, #6]
 8005fe0:	01db      	lsls	r3, r3, #7
 8005fe2:	b21b      	sxth	r3, r3
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	b21b      	sxth	r3, r3
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005fee:	b29a      	uxth	r2, r3
 8005ff0:	4b73      	ldr	r3, [pc, #460]	@ (80061c0 <SBUS_getData+0x260>)
 8005ff2:	811a      	strh	r2, [r3, #8]
	Radio_input.Canal_5 = ((SBUS_UART_Rx[6] >> 4 | SBUS_UART_Rx[7] << 4) & 0x07FF);
 8005ff4:	4b71      	ldr	r3, [pc, #452]	@ (80061bc <SBUS_getData+0x25c>)
 8005ff6:	799b      	ldrb	r3, [r3, #6]
 8005ff8:	091b      	lsrs	r3, r3, #4
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	b21a      	sxth	r2, r3
 8005ffe:	4b6f      	ldr	r3, [pc, #444]	@ (80061bc <SBUS_getData+0x25c>)
 8006000:	79db      	ldrb	r3, [r3, #7]
 8006002:	011b      	lsls	r3, r3, #4
 8006004:	b21b      	sxth	r3, r3
 8006006:	4313      	orrs	r3, r2
 8006008:	b21b      	sxth	r3, r3
 800600a:	b29b      	uxth	r3, r3
 800600c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006010:	b29a      	uxth	r2, r3
 8006012:	4b6b      	ldr	r3, [pc, #428]	@ (80061c0 <SBUS_getData+0x260>)
 8006014:	815a      	strh	r2, [r3, #10]
	Radio_input.Canal_6 = ((SBUS_UART_Rx[7] >> 7 | SBUS_UART_Rx[8] << 1 | SBUS_UART_Rx[9] << 9) & 0x07FF);
 8006016:	4b69      	ldr	r3, [pc, #420]	@ (80061bc <SBUS_getData+0x25c>)
 8006018:	79db      	ldrb	r3, [r3, #7]
 800601a:	09db      	lsrs	r3, r3, #7
 800601c:	b2db      	uxtb	r3, r3
 800601e:	b21a      	sxth	r2, r3
 8006020:	4b66      	ldr	r3, [pc, #408]	@ (80061bc <SBUS_getData+0x25c>)
 8006022:	7a1b      	ldrb	r3, [r3, #8]
 8006024:	005b      	lsls	r3, r3, #1
 8006026:	b21b      	sxth	r3, r3
 8006028:	4313      	orrs	r3, r2
 800602a:	b21a      	sxth	r2, r3
 800602c:	4b63      	ldr	r3, [pc, #396]	@ (80061bc <SBUS_getData+0x25c>)
 800602e:	7a5b      	ldrb	r3, [r3, #9]
 8006030:	025b      	lsls	r3, r3, #9
 8006032:	b21b      	sxth	r3, r3
 8006034:	4313      	orrs	r3, r2
 8006036:	b21b      	sxth	r3, r3
 8006038:	b29b      	uxth	r3, r3
 800603a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800603e:	b29a      	uxth	r2, r3
 8006040:	4b5f      	ldr	r3, [pc, #380]	@ (80061c0 <SBUS_getData+0x260>)
 8006042:	819a      	strh	r2, [r3, #12]
	Radio_input.Canal_7 = ((SBUS_UART_Rx[9] >> 2 | SBUS_UART_Rx[10] << 6) & 0x07FF);
 8006044:	4b5d      	ldr	r3, [pc, #372]	@ (80061bc <SBUS_getData+0x25c>)
 8006046:	7a5b      	ldrb	r3, [r3, #9]
 8006048:	089b      	lsrs	r3, r3, #2
 800604a:	b2db      	uxtb	r3, r3
 800604c:	b21a      	sxth	r2, r3
 800604e:	4b5b      	ldr	r3, [pc, #364]	@ (80061bc <SBUS_getData+0x25c>)
 8006050:	7a9b      	ldrb	r3, [r3, #10]
 8006052:	019b      	lsls	r3, r3, #6
 8006054:	b21b      	sxth	r3, r3
 8006056:	4313      	orrs	r3, r2
 8006058:	b21b      	sxth	r3, r3
 800605a:	b29b      	uxth	r3, r3
 800605c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006060:	b29a      	uxth	r2, r3
 8006062:	4b57      	ldr	r3, [pc, #348]	@ (80061c0 <SBUS_getData+0x260>)
 8006064:	81da      	strh	r2, [r3, #14]
	Radio_input.Canal_8 = ((SBUS_UART_Rx[10] >> 5 | SBUS_UART_Rx[11] << 3) & 0x07FF);
 8006066:	4b55      	ldr	r3, [pc, #340]	@ (80061bc <SBUS_getData+0x25c>)
 8006068:	7a9b      	ldrb	r3, [r3, #10]
 800606a:	095b      	lsrs	r3, r3, #5
 800606c:	b2db      	uxtb	r3, r3
 800606e:	b21a      	sxth	r2, r3
 8006070:	4b52      	ldr	r3, [pc, #328]	@ (80061bc <SBUS_getData+0x25c>)
 8006072:	7adb      	ldrb	r3, [r3, #11]
 8006074:	00db      	lsls	r3, r3, #3
 8006076:	b21b      	sxth	r3, r3
 8006078:	4313      	orrs	r3, r2
 800607a:	b21b      	sxth	r3, r3
 800607c:	b29b      	uxth	r3, r3
 800607e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006082:	b29a      	uxth	r2, r3
 8006084:	4b4e      	ldr	r3, [pc, #312]	@ (80061c0 <SBUS_getData+0x260>)
 8006086:	821a      	strh	r2, [r3, #16]
	Radio_input.Canal_9 = ((SBUS_UART_Rx[12] | SBUS_UART_Rx[13] << 8) & 0x07FF);
 8006088:	4b4c      	ldr	r3, [pc, #304]	@ (80061bc <SBUS_getData+0x25c>)
 800608a:	7b1b      	ldrb	r3, [r3, #12]
 800608c:	b21a      	sxth	r2, r3
 800608e:	4b4b      	ldr	r3, [pc, #300]	@ (80061bc <SBUS_getData+0x25c>)
 8006090:	7b5b      	ldrb	r3, [r3, #13]
 8006092:	021b      	lsls	r3, r3, #8
 8006094:	b21b      	sxth	r3, r3
 8006096:	4313      	orrs	r3, r2
 8006098:	b21b      	sxth	r3, r3
 800609a:	b29b      	uxth	r3, r3
 800609c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80060a0:	b29a      	uxth	r2, r3
 80060a2:	4b47      	ldr	r3, [pc, #284]	@ (80061c0 <SBUS_getData+0x260>)
 80060a4:	825a      	strh	r2, [r3, #18]
	Radio_input.Canal_10 = ((SBUS_UART_Rx[13] >> 3 | SBUS_UART_Rx[14] << 5) & 0x07FF);
 80060a6:	4b45      	ldr	r3, [pc, #276]	@ (80061bc <SBUS_getData+0x25c>)
 80060a8:	7b5b      	ldrb	r3, [r3, #13]
 80060aa:	08db      	lsrs	r3, r3, #3
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	b21a      	sxth	r2, r3
 80060b0:	4b42      	ldr	r3, [pc, #264]	@ (80061bc <SBUS_getData+0x25c>)
 80060b2:	7b9b      	ldrb	r3, [r3, #14]
 80060b4:	015b      	lsls	r3, r3, #5
 80060b6:	b21b      	sxth	r3, r3
 80060b8:	4313      	orrs	r3, r2
 80060ba:	b21b      	sxth	r3, r3
 80060bc:	b29b      	uxth	r3, r3
 80060be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80060c2:	b29a      	uxth	r2, r3
 80060c4:	4b3e      	ldr	r3, [pc, #248]	@ (80061c0 <SBUS_getData+0x260>)
 80060c6:	829a      	strh	r2, [r3, #20]
	Radio_input.Canal_11 = ((SBUS_UART_Rx[14] >> 6 | SBUS_UART_Rx[15] << 2 | SBUS_UART_Rx[16] << 10) & 0x07FF);
 80060c8:	4b3c      	ldr	r3, [pc, #240]	@ (80061bc <SBUS_getData+0x25c>)
 80060ca:	7b9b      	ldrb	r3, [r3, #14]
 80060cc:	099b      	lsrs	r3, r3, #6
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	b21a      	sxth	r2, r3
 80060d2:	4b3a      	ldr	r3, [pc, #232]	@ (80061bc <SBUS_getData+0x25c>)
 80060d4:	7bdb      	ldrb	r3, [r3, #15]
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	b21b      	sxth	r3, r3
 80060da:	4313      	orrs	r3, r2
 80060dc:	b21a      	sxth	r2, r3
 80060de:	4b37      	ldr	r3, [pc, #220]	@ (80061bc <SBUS_getData+0x25c>)
 80060e0:	7c1b      	ldrb	r3, [r3, #16]
 80060e2:	029b      	lsls	r3, r3, #10
 80060e4:	b21b      	sxth	r3, r3
 80060e6:	4313      	orrs	r3, r2
 80060e8:	b21b      	sxth	r3, r3
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80060f0:	b29a      	uxth	r2, r3
 80060f2:	4b33      	ldr	r3, [pc, #204]	@ (80061c0 <SBUS_getData+0x260>)
 80060f4:	82da      	strh	r2, [r3, #22]
	Radio_input.Canal_12 = ((SBUS_UART_Rx[16] >> 1 | SBUS_UART_Rx[17] << 7) & 0x07FF);
 80060f6:	4b31      	ldr	r3, [pc, #196]	@ (80061bc <SBUS_getData+0x25c>)
 80060f8:	7c1b      	ldrb	r3, [r3, #16]
 80060fa:	085b      	lsrs	r3, r3, #1
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	b21a      	sxth	r2, r3
 8006100:	4b2e      	ldr	r3, [pc, #184]	@ (80061bc <SBUS_getData+0x25c>)
 8006102:	7c5b      	ldrb	r3, [r3, #17]
 8006104:	01db      	lsls	r3, r3, #7
 8006106:	b21b      	sxth	r3, r3
 8006108:	4313      	orrs	r3, r2
 800610a:	b21b      	sxth	r3, r3
 800610c:	b29b      	uxth	r3, r3
 800610e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006112:	b29a      	uxth	r2, r3
 8006114:	4b2a      	ldr	r3, [pc, #168]	@ (80061c0 <SBUS_getData+0x260>)
 8006116:	831a      	strh	r2, [r3, #24]
	Radio_input.Canal_13 = ((SBUS_UART_Rx[17] >> 4 | SBUS_UART_Rx[18] << 4) & 0x07FF);
 8006118:	4b28      	ldr	r3, [pc, #160]	@ (80061bc <SBUS_getData+0x25c>)
 800611a:	7c5b      	ldrb	r3, [r3, #17]
 800611c:	091b      	lsrs	r3, r3, #4
 800611e:	b2db      	uxtb	r3, r3
 8006120:	b21a      	sxth	r2, r3
 8006122:	4b26      	ldr	r3, [pc, #152]	@ (80061bc <SBUS_getData+0x25c>)
 8006124:	7c9b      	ldrb	r3, [r3, #18]
 8006126:	011b      	lsls	r3, r3, #4
 8006128:	b21b      	sxth	r3, r3
 800612a:	4313      	orrs	r3, r2
 800612c:	b21b      	sxth	r3, r3
 800612e:	b29b      	uxth	r3, r3
 8006130:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006134:	b29a      	uxth	r2, r3
 8006136:	4b22      	ldr	r3, [pc, #136]	@ (80061c0 <SBUS_getData+0x260>)
 8006138:	835a      	strh	r2, [r3, #26]
	Radio_input.Canal_14 = ((SBUS_UART_Rx[18] >> 7 | SBUS_UART_Rx[19] << 1 | SBUS_UART_Rx[20] << 9) & 0x07FF);
 800613a:	4b20      	ldr	r3, [pc, #128]	@ (80061bc <SBUS_getData+0x25c>)
 800613c:	7c9b      	ldrb	r3, [r3, #18]
 800613e:	09db      	lsrs	r3, r3, #7
 8006140:	b2db      	uxtb	r3, r3
 8006142:	b21a      	sxth	r2, r3
 8006144:	4b1d      	ldr	r3, [pc, #116]	@ (80061bc <SBUS_getData+0x25c>)
 8006146:	7cdb      	ldrb	r3, [r3, #19]
 8006148:	005b      	lsls	r3, r3, #1
 800614a:	b21b      	sxth	r3, r3
 800614c:	4313      	orrs	r3, r2
 800614e:	b21a      	sxth	r2, r3
 8006150:	4b1a      	ldr	r3, [pc, #104]	@ (80061bc <SBUS_getData+0x25c>)
 8006152:	7d1b      	ldrb	r3, [r3, #20]
 8006154:	025b      	lsls	r3, r3, #9
 8006156:	b21b      	sxth	r3, r3
 8006158:	4313      	orrs	r3, r2
 800615a:	b21b      	sxth	r3, r3
 800615c:	b29b      	uxth	r3, r3
 800615e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006162:	b29a      	uxth	r2, r3
 8006164:	4b16      	ldr	r3, [pc, #88]	@ (80061c0 <SBUS_getData+0x260>)
 8006166:	839a      	strh	r2, [r3, #28]
	Radio_input.Canal_15 = ((SBUS_UART_Rx[20] >> 2 | SBUS_UART_Rx[21] << 6) & 0x07FF);
 8006168:	4b14      	ldr	r3, [pc, #80]	@ (80061bc <SBUS_getData+0x25c>)
 800616a:	7d1b      	ldrb	r3, [r3, #20]
 800616c:	089b      	lsrs	r3, r3, #2
 800616e:	b2db      	uxtb	r3, r3
 8006170:	b21a      	sxth	r2, r3
 8006172:	4b12      	ldr	r3, [pc, #72]	@ (80061bc <SBUS_getData+0x25c>)
 8006174:	7d5b      	ldrb	r3, [r3, #21]
 8006176:	019b      	lsls	r3, r3, #6
 8006178:	b21b      	sxth	r3, r3
 800617a:	4313      	orrs	r3, r2
 800617c:	b21b      	sxth	r3, r3
 800617e:	b29b      	uxth	r3, r3
 8006180:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006184:	b29a      	uxth	r2, r3
 8006186:	4b0e      	ldr	r3, [pc, #56]	@ (80061c0 <SBUS_getData+0x260>)
 8006188:	83da      	strh	r2, [r3, #30]
	Radio_input.Canal_16 = ((SBUS_UART_Rx[21] >> 5 | SBUS_UART_Rx[22] << 3) & 0x07FF);
 800618a:	4b0c      	ldr	r3, [pc, #48]	@ (80061bc <SBUS_getData+0x25c>)
 800618c:	7d5b      	ldrb	r3, [r3, #21]
 800618e:	095b      	lsrs	r3, r3, #5
 8006190:	b2db      	uxtb	r3, r3
 8006192:	b21a      	sxth	r2, r3
 8006194:	4b09      	ldr	r3, [pc, #36]	@ (80061bc <SBUS_getData+0x25c>)
 8006196:	7d9b      	ldrb	r3, [r3, #22]
 8006198:	00db      	lsls	r3, r3, #3
 800619a:	b21b      	sxth	r3, r3
 800619c:	4313      	orrs	r3, r2
 800619e:	b21b      	sxth	r3, r3
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80061a6:	b29a      	uxth	r2, r3
 80061a8:	4b05      	ldr	r3, [pc, #20]	@ (80061c0 <SBUS_getData+0x260>)
 80061aa:	841a      	strh	r2, [r3, #32]

	Radio_input.Canal_1 = (uint16_t)((((float)Radio_input.Canal_1 - 352) /1344 ) * 1000) + 1000;
 80061ac:	4b04      	ldr	r3, [pc, #16]	@ (80061c0 <SBUS_getData+0x260>)
 80061ae:	885b      	ldrh	r3, [r3, #2]
 80061b0:	ee07 3a90 	vmov	s15, r3
 80061b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061b8:	e00a      	b.n	80061d0 <SBUS_getData+0x270>
 80061ba:	bf00      	nop
 80061bc:	240017ec 	.word	0x240017ec
 80061c0:	2400007c 	.word	0x2400007c
 80061c4:	43b00000 	.word	0x43b00000
 80061c8:	44a80000 	.word	0x44a80000
 80061cc:	447a0000 	.word	0x447a0000
 80061d0:	ed1f 7a04 	vldr	s14, [pc, #-16]	@ 80061c4 <SBUS_getData+0x264>
 80061d4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80061d8:	ed5f 6a05 	vldr	s13, [pc, #-20]	@ 80061c8 <SBUS_getData+0x268>
 80061dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80061e0:	ed1f 7a06 	vldr	s14, [pc, #-24]	@ 80061cc <SBUS_getData+0x26c>
 80061e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80061e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061ec:	ee17 3a90 	vmov	r3, s15
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80061f6:	b29a      	uxth	r2, r3
 80061f8:	4bd1      	ldr	r3, [pc, #836]	@ (8006540 <SBUS_getData+0x5e0>)
 80061fa:	805a      	strh	r2, [r3, #2]
	Radio_input.Canal_2 = (uint16_t)((((float)Radio_input.Canal_2 - 352) /1344 ) * 1000) + 1000;
 80061fc:	4bd0      	ldr	r3, [pc, #832]	@ (8006540 <SBUS_getData+0x5e0>)
 80061fe:	889b      	ldrh	r3, [r3, #4]
 8006200:	ee07 3a90 	vmov	s15, r3
 8006204:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006208:	ed9f 7ace 	vldr	s14, [pc, #824]	@ 8006544 <SBUS_getData+0x5e4>
 800620c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006210:	eddf 6acd 	vldr	s13, [pc, #820]	@ 8006548 <SBUS_getData+0x5e8>
 8006214:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006218:	ed9f 7acc 	vldr	s14, [pc, #816]	@ 800654c <SBUS_getData+0x5ec>
 800621c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006220:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006224:	ee17 3a90 	vmov	r3, s15
 8006228:	b29b      	uxth	r3, r3
 800622a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800622e:	b29a      	uxth	r2, r3
 8006230:	4bc3      	ldr	r3, [pc, #780]	@ (8006540 <SBUS_getData+0x5e0>)
 8006232:	809a      	strh	r2, [r3, #4]
	Radio_input.Canal_3 = (uint16_t)((((float)Radio_input.Canal_3 - 352) /1344 ) * 1000) + 1000;
 8006234:	4bc2      	ldr	r3, [pc, #776]	@ (8006540 <SBUS_getData+0x5e0>)
 8006236:	88db      	ldrh	r3, [r3, #6]
 8006238:	ee07 3a90 	vmov	s15, r3
 800623c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006240:	ed9f 7ac0 	vldr	s14, [pc, #768]	@ 8006544 <SBUS_getData+0x5e4>
 8006244:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006248:	eddf 6abf 	vldr	s13, [pc, #764]	@ 8006548 <SBUS_getData+0x5e8>
 800624c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006250:	ed9f 7abe 	vldr	s14, [pc, #760]	@ 800654c <SBUS_getData+0x5ec>
 8006254:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006258:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800625c:	ee17 3a90 	vmov	r3, s15
 8006260:	b29b      	uxth	r3, r3
 8006262:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8006266:	b29a      	uxth	r2, r3
 8006268:	4bb5      	ldr	r3, [pc, #724]	@ (8006540 <SBUS_getData+0x5e0>)
 800626a:	80da      	strh	r2, [r3, #6]
	Radio_input.Canal_4 = (uint16_t)((((float)Radio_input.Canal_4 - 352) /1344 ) * 1000) + 1000;
 800626c:	4bb4      	ldr	r3, [pc, #720]	@ (8006540 <SBUS_getData+0x5e0>)
 800626e:	891b      	ldrh	r3, [r3, #8]
 8006270:	ee07 3a90 	vmov	s15, r3
 8006274:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006278:	ed9f 7ab2 	vldr	s14, [pc, #712]	@ 8006544 <SBUS_getData+0x5e4>
 800627c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006280:	eddf 6ab1 	vldr	s13, [pc, #708]	@ 8006548 <SBUS_getData+0x5e8>
 8006284:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006288:	ed9f 7ab0 	vldr	s14, [pc, #704]	@ 800654c <SBUS_getData+0x5ec>
 800628c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006290:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006294:	ee17 3a90 	vmov	r3, s15
 8006298:	b29b      	uxth	r3, r3
 800629a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800629e:	b29a      	uxth	r2, r3
 80062a0:	4ba7      	ldr	r3, [pc, #668]	@ (8006540 <SBUS_getData+0x5e0>)
 80062a2:	811a      	strh	r2, [r3, #8]
	Radio_input.Canal_5 = (uint16_t)((((float)Radio_input.Canal_5 - 352) /1344 ) * 1000) + 1000;
 80062a4:	4ba6      	ldr	r3, [pc, #664]	@ (8006540 <SBUS_getData+0x5e0>)
 80062a6:	895b      	ldrh	r3, [r3, #10]
 80062a8:	ee07 3a90 	vmov	s15, r3
 80062ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062b0:	ed9f 7aa4 	vldr	s14, [pc, #656]	@ 8006544 <SBUS_getData+0x5e4>
 80062b4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80062b8:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 8006548 <SBUS_getData+0x5e8>
 80062bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80062c0:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 800654c <SBUS_getData+0x5ec>
 80062c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80062c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062cc:	ee17 3a90 	vmov	r3, s15
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80062d6:	b29a      	uxth	r2, r3
 80062d8:	4b99      	ldr	r3, [pc, #612]	@ (8006540 <SBUS_getData+0x5e0>)
 80062da:	815a      	strh	r2, [r3, #10]
	Radio_input.Canal_6 = (uint16_t)((((float)Radio_input.Canal_6 - 352) /1344 ) * 1000) + 1000;
 80062dc:	4b98      	ldr	r3, [pc, #608]	@ (8006540 <SBUS_getData+0x5e0>)
 80062de:	899b      	ldrh	r3, [r3, #12]
 80062e0:	ee07 3a90 	vmov	s15, r3
 80062e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062e8:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 8006544 <SBUS_getData+0x5e4>
 80062ec:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80062f0:	eddf 6a95 	vldr	s13, [pc, #596]	@ 8006548 <SBUS_getData+0x5e8>
 80062f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80062f8:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 800654c <SBUS_getData+0x5ec>
 80062fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006300:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006304:	ee17 3a90 	vmov	r3, s15
 8006308:	b29b      	uxth	r3, r3
 800630a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800630e:	b29a      	uxth	r2, r3
 8006310:	4b8b      	ldr	r3, [pc, #556]	@ (8006540 <SBUS_getData+0x5e0>)
 8006312:	819a      	strh	r2, [r3, #12]
	Radio_input.Canal_7 = (uint16_t)((((float)Radio_input.Canal_7 - 352) /1344 ) * 1000) + 1000;
 8006314:	4b8a      	ldr	r3, [pc, #552]	@ (8006540 <SBUS_getData+0x5e0>)
 8006316:	89db      	ldrh	r3, [r3, #14]
 8006318:	ee07 3a90 	vmov	s15, r3
 800631c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006320:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 8006544 <SBUS_getData+0x5e4>
 8006324:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006328:	eddf 6a87 	vldr	s13, [pc, #540]	@ 8006548 <SBUS_getData+0x5e8>
 800632c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006330:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 800654c <SBUS_getData+0x5ec>
 8006334:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006338:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800633c:	ee17 3a90 	vmov	r3, s15
 8006340:	b29b      	uxth	r3, r3
 8006342:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8006346:	b29a      	uxth	r2, r3
 8006348:	4b7d      	ldr	r3, [pc, #500]	@ (8006540 <SBUS_getData+0x5e0>)
 800634a:	81da      	strh	r2, [r3, #14]
	Radio_input.Canal_8 = (uint16_t)((((float)Radio_input.Canal_8 - 352) /1344 ) * 1000) + 1000;
 800634c:	4b7c      	ldr	r3, [pc, #496]	@ (8006540 <SBUS_getData+0x5e0>)
 800634e:	8a1b      	ldrh	r3, [r3, #16]
 8006350:	ee07 3a90 	vmov	s15, r3
 8006354:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006358:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8006544 <SBUS_getData+0x5e4>
 800635c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006360:	eddf 6a79 	vldr	s13, [pc, #484]	@ 8006548 <SBUS_getData+0x5e8>
 8006364:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006368:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 800654c <SBUS_getData+0x5ec>
 800636c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006370:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006374:	ee17 3a90 	vmov	r3, s15
 8006378:	b29b      	uxth	r3, r3
 800637a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800637e:	b29a      	uxth	r2, r3
 8006380:	4b6f      	ldr	r3, [pc, #444]	@ (8006540 <SBUS_getData+0x5e0>)
 8006382:	821a      	strh	r2, [r3, #16]
	Radio_input.Canal_9 = (uint16_t)((((float)Radio_input.Canal_9 - 352) /1344 ) * 1000) + 1000;
 8006384:	4b6e      	ldr	r3, [pc, #440]	@ (8006540 <SBUS_getData+0x5e0>)
 8006386:	8a5b      	ldrh	r3, [r3, #18]
 8006388:	ee07 3a90 	vmov	s15, r3
 800638c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006390:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8006544 <SBUS_getData+0x5e4>
 8006394:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006398:	eddf 6a6b 	vldr	s13, [pc, #428]	@ 8006548 <SBUS_getData+0x5e8>
 800639c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80063a0:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 800654c <SBUS_getData+0x5ec>
 80063a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80063a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063ac:	ee17 3a90 	vmov	r3, s15
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80063b6:	b29a      	uxth	r2, r3
 80063b8:	4b61      	ldr	r3, [pc, #388]	@ (8006540 <SBUS_getData+0x5e0>)
 80063ba:	825a      	strh	r2, [r3, #18]
	Radio_input.Canal_10 = (uint16_t)((((float)Radio_input.Canal_10 - 352) /1344 ) * 1000) + 1000;
 80063bc:	4b60      	ldr	r3, [pc, #384]	@ (8006540 <SBUS_getData+0x5e0>)
 80063be:	8a9b      	ldrh	r3, [r3, #20]
 80063c0:	ee07 3a90 	vmov	s15, r3
 80063c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063c8:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8006544 <SBUS_getData+0x5e4>
 80063cc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80063d0:	eddf 6a5d 	vldr	s13, [pc, #372]	@ 8006548 <SBUS_getData+0x5e8>
 80063d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80063d8:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 800654c <SBUS_getData+0x5ec>
 80063dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80063e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063e4:	ee17 3a90 	vmov	r3, s15
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80063ee:	b29a      	uxth	r2, r3
 80063f0:	4b53      	ldr	r3, [pc, #332]	@ (8006540 <SBUS_getData+0x5e0>)
 80063f2:	829a      	strh	r2, [r3, #20]
	Radio_input.Canal_11 = (uint16_t)((((float)Radio_input.Canal_11 - 352) /1344 ) * 1000) + 1000;
 80063f4:	4b52      	ldr	r3, [pc, #328]	@ (8006540 <SBUS_getData+0x5e0>)
 80063f6:	8adb      	ldrh	r3, [r3, #22]
 80063f8:	ee07 3a90 	vmov	s15, r3
 80063fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006400:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8006544 <SBUS_getData+0x5e4>
 8006404:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006408:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006548 <SBUS_getData+0x5e8>
 800640c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006410:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 800654c <SBUS_getData+0x5ec>
 8006414:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006418:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800641c:	ee17 3a90 	vmov	r3, s15
 8006420:	b29b      	uxth	r3, r3
 8006422:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8006426:	b29a      	uxth	r2, r3
 8006428:	4b45      	ldr	r3, [pc, #276]	@ (8006540 <SBUS_getData+0x5e0>)
 800642a:	82da      	strh	r2, [r3, #22]
	Radio_input.Canal_12 = (uint16_t)((((float)Radio_input.Canal_12 - 352) /1344 ) * 1000) + 1000;
 800642c:	4b44      	ldr	r3, [pc, #272]	@ (8006540 <SBUS_getData+0x5e0>)
 800642e:	8b1b      	ldrh	r3, [r3, #24]
 8006430:	ee07 3a90 	vmov	s15, r3
 8006434:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006438:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8006544 <SBUS_getData+0x5e4>
 800643c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006440:	eddf 6a41 	vldr	s13, [pc, #260]	@ 8006548 <SBUS_getData+0x5e8>
 8006444:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006448:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 800654c <SBUS_getData+0x5ec>
 800644c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006450:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006454:	ee17 3a90 	vmov	r3, s15
 8006458:	b29b      	uxth	r3, r3
 800645a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800645e:	b29a      	uxth	r2, r3
 8006460:	4b37      	ldr	r3, [pc, #220]	@ (8006540 <SBUS_getData+0x5e0>)
 8006462:	831a      	strh	r2, [r3, #24]
	Radio_input.Canal_13 = (uint16_t)((((float)Radio_input.Canal_13 - 352) /1344 ) * 1000) + 1000;
 8006464:	4b36      	ldr	r3, [pc, #216]	@ (8006540 <SBUS_getData+0x5e0>)
 8006466:	8b5b      	ldrh	r3, [r3, #26]
 8006468:	ee07 3a90 	vmov	s15, r3
 800646c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006470:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8006544 <SBUS_getData+0x5e4>
 8006474:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006478:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8006548 <SBUS_getData+0x5e8>
 800647c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006480:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800654c <SBUS_getData+0x5ec>
 8006484:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006488:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800648c:	ee17 3a90 	vmov	r3, s15
 8006490:	b29b      	uxth	r3, r3
 8006492:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8006496:	b29a      	uxth	r2, r3
 8006498:	4b29      	ldr	r3, [pc, #164]	@ (8006540 <SBUS_getData+0x5e0>)
 800649a:	835a      	strh	r2, [r3, #26]
	Radio_input.Canal_14 = (uint16_t)((((float)Radio_input.Canal_14 - 352) /1344 ) * 1000) + 1000;
 800649c:	4b28      	ldr	r3, [pc, #160]	@ (8006540 <SBUS_getData+0x5e0>)
 800649e:	8b9b      	ldrh	r3, [r3, #28]
 80064a0:	ee07 3a90 	vmov	s15, r3
 80064a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064a8:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8006544 <SBUS_getData+0x5e4>
 80064ac:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80064b0:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8006548 <SBUS_getData+0x5e8>
 80064b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80064b8:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 800654c <SBUS_getData+0x5ec>
 80064bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80064c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064c4:	ee17 3a90 	vmov	r3, s15
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80064ce:	b29a      	uxth	r2, r3
 80064d0:	4b1b      	ldr	r3, [pc, #108]	@ (8006540 <SBUS_getData+0x5e0>)
 80064d2:	839a      	strh	r2, [r3, #28]
	Radio_input.Canal_15 = (uint16_t)((((float)Radio_input.Canal_15 - 352) /1344 ) * 1000) + 1000;
 80064d4:	4b1a      	ldr	r3, [pc, #104]	@ (8006540 <SBUS_getData+0x5e0>)
 80064d6:	8bdb      	ldrh	r3, [r3, #30]
 80064d8:	ee07 3a90 	vmov	s15, r3
 80064dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064e0:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8006544 <SBUS_getData+0x5e4>
 80064e4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80064e8:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8006548 <SBUS_getData+0x5e8>
 80064ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80064f0:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 800654c <SBUS_getData+0x5ec>
 80064f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80064f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064fc:	ee17 3a90 	vmov	r3, s15
 8006500:	b29b      	uxth	r3, r3
 8006502:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8006506:	b29a      	uxth	r2, r3
 8006508:	4b0d      	ldr	r3, [pc, #52]	@ (8006540 <SBUS_getData+0x5e0>)
 800650a:	83da      	strh	r2, [r3, #30]
	Radio_input.Canal_16 = (uint16_t)((((float)Radio_input.Canal_16 - 352) /1344 ) * 1000) + 1000;
 800650c:	4b0c      	ldr	r3, [pc, #48]	@ (8006540 <SBUS_getData+0x5e0>)
 800650e:	8c1b      	ldrh	r3, [r3, #32]
 8006510:	ee07 3a90 	vmov	s15, r3
 8006514:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006518:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8006544 <SBUS_getData+0x5e4>
 800651c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006520:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8006548 <SBUS_getData+0x5e8>
 8006524:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006528:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 800654c <SBUS_getData+0x5ec>
 800652c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006530:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006534:	ee17 3a90 	vmov	r3, s15
 8006538:	b29b      	uxth	r3, r3
 800653a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800653e:	e007      	b.n	8006550 <SBUS_getData+0x5f0>
 8006540:	2400007c 	.word	0x2400007c
 8006544:	43b00000 	.word	0x43b00000
 8006548:	44a80000 	.word	0x44a80000
 800654c:	447a0000 	.word	0x447a0000
 8006550:	b29a      	uxth	r2, r3
 8006552:	4b2a      	ldr	r3, [pc, #168]	@ (80065fc <SBUS_getData+0x69c>)
 8006554:	841a      	strh	r2, [r3, #32]

	//En el caso del byte 24, el primer bit menos significativo corresponde al canal 17, el segundo al canal 18, el tercero a el fail safe y
	//el cuarto a la perdida de paquetes. Los 4 restantes no se utilizan.

	Radio_input.Banderas = SBUS_UART_Rx[23];
 8006556:	4b2a      	ldr	r3, [pc, #168]	@ (8006600 <SBUS_getData+0x6a0>)
 8006558:	7dda      	ldrb	r2, [r3, #23]
 800655a:	4b28      	ldr	r3, [pc, #160]	@ (80065fc <SBUS_getData+0x69c>)
 800655c:	701a      	strb	r2, [r3, #0]
	if(SBUS_UART_Rx[23]>=8){
 800655e:	4b28      	ldr	r3, [pc, #160]	@ (8006600 <SBUS_getData+0x6a0>)
 8006560:	7ddb      	ldrb	r3, [r3, #23]
 8006562:	2b07      	cmp	r3, #7
 8006564:	d90a      	bls.n	800657c <SBUS_getData+0x61c>
		SBUS_UART_Rx[23]-=8;
 8006566:	4b26      	ldr	r3, [pc, #152]	@ (8006600 <SBUS_getData+0x6a0>)
 8006568:	7ddb      	ldrb	r3, [r3, #23]
 800656a:	3b08      	subs	r3, #8
 800656c:	b2da      	uxtb	r2, r3
 800656e:	4b24      	ldr	r3, [pc, #144]	@ (8006600 <SBUS_getData+0x6a0>)
 8006570:	75da      	strb	r2, [r3, #23]
		Radio_input.fail_safe = FailSafe;
 8006572:	4b22      	ldr	r3, [pc, #136]	@ (80065fc <SBUS_getData+0x69c>)
 8006574:	2235      	movs	r2, #53	@ 0x35
 8006576:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 800657a:	e003      	b.n	8006584 <SBUS_getData+0x624>
	}else Radio_input.fail_safe= Ok;
 800657c:	4b1f      	ldr	r3, [pc, #124]	@ (80065fc <SBUS_getData+0x69c>)
 800657e:	22aa      	movs	r2, #170	@ 0xaa
 8006580:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

	if(SBUS_UART_Rx[23]>=4){
 8006584:	4b1e      	ldr	r3, [pc, #120]	@ (8006600 <SBUS_getData+0x6a0>)
 8006586:	7ddb      	ldrb	r3, [r3, #23]
 8006588:	2b03      	cmp	r3, #3
 800658a:	d90a      	bls.n	80065a2 <SBUS_getData+0x642>
		SBUS_UART_Rx[23]-=4;
 800658c:	4b1c      	ldr	r3, [pc, #112]	@ (8006600 <SBUS_getData+0x6a0>)
 800658e:	7ddb      	ldrb	r3, [r3, #23]
 8006590:	3b04      	subs	r3, #4
 8006592:	b2da      	uxtb	r2, r3
 8006594:	4b1a      	ldr	r3, [pc, #104]	@ (8006600 <SBUS_getData+0x6a0>)
 8006596:	75da      	strb	r2, [r3, #23]
		Radio_input.pkg_lost = Pkg_Lost;
 8006598:	4b18      	ldr	r3, [pc, #96]	@ (80065fc <SBUS_getData+0x69c>)
 800659a:	2210      	movs	r2, #16
 800659c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80065a0:	e003      	b.n	80065aa <SBUS_getData+0x64a>
	}else Radio_input.pkg_lost=Ok;
 80065a2:	4b16      	ldr	r3, [pc, #88]	@ (80065fc <SBUS_getData+0x69c>)
 80065a4:	22aa      	movs	r2, #170	@ 0xaa
 80065a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if(SBUS_UART_Rx[23]>=2){
 80065aa:	4b15      	ldr	r3, [pc, #84]	@ (8006600 <SBUS_getData+0x6a0>)
 80065ac:	7ddb      	ldrb	r3, [r3, #23]
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	d90a      	bls.n	80065c8 <SBUS_getData+0x668>
		SBUS_UART_Rx[23]-=2;
 80065b2:	4b13      	ldr	r3, [pc, #76]	@ (8006600 <SBUS_getData+0x6a0>)
 80065b4:	7ddb      	ldrb	r3, [r3, #23]
 80065b6:	3b02      	subs	r3, #2
 80065b8:	b2da      	uxtb	r2, r3
 80065ba:	4b11      	ldr	r3, [pc, #68]	@ (8006600 <SBUS_getData+0x6a0>)
 80065bc:	75da      	strb	r2, [r3, #23]
		Radio_input.Interruptor_2=ON;
 80065be:	4b0f      	ldr	r3, [pc, #60]	@ (80065fc <SBUS_getData+0x69c>)
 80065c0:	2201      	movs	r2, #1
 80065c2:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
 80065c6:	e003      	b.n	80065d0 <SBUS_getData+0x670>
	}else Radio_input.Interruptor_2=OFF;
 80065c8:	4b0c      	ldr	r3, [pc, #48]	@ (80065fc <SBUS_getData+0x69c>)
 80065ca:	2200      	movs	r2, #0
 80065cc:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

	if(SBUS_UART_Rx[23]){
 80065d0:	4b0b      	ldr	r3, [pc, #44]	@ (8006600 <SBUS_getData+0x6a0>)
 80065d2:	7ddb      	ldrb	r3, [r3, #23]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d004      	beq.n	80065e2 <SBUS_getData+0x682>
		Radio_input.Interruptor_1=ON;
 80065d8:	4b08      	ldr	r3, [pc, #32]	@ (80065fc <SBUS_getData+0x69c>)
 80065da:	2201      	movs	r2, #1
 80065dc:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 80065e0:	e003      	b.n	80065ea <SBUS_getData+0x68a>
	}else Radio_input.Interruptor_1=OFF;
 80065e2:	4b06      	ldr	r3, [pc, #24]	@ (80065fc <SBUS_getData+0x69c>)
 80065e4:	2200      	movs	r2, #0
 80065e6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22


	Radio_input.Uart_Counter = 0;
 80065ea:	4b04      	ldr	r3, [pc, #16]	@ (80065fc <SBUS_getData+0x69c>)
 80065ec:	2200      	movs	r2, #0
 80065ee:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

}
 80065f2:	bf00      	nop
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr
 80065fc:	2400007c 	.word	0x2400007c
 8006600:	240017ec 	.word	0x240017ec

08006604 <SBUS_IntegrityVerification>:

void SBUS_IntegrityVerification(void){
 8006604:	b480      	push	{r7}
 8006606:	af00      	add	r7, sp, #0

	if(Radio_input.Uart_Counter != 255){
 8006608:	4b0f      	ldr	r3, [pc, #60]	@ (8006648 <SBUS_IntegrityVerification+0x44>)
 800660a:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800660e:	2bff      	cmp	r3, #255	@ 0xff
 8006610:	d00c      	beq.n	800662c <SBUS_IntegrityVerification+0x28>
		Radio_input.Uart_Counter++;
 8006612:	4b0d      	ldr	r3, [pc, #52]	@ (8006648 <SBUS_IntegrityVerification+0x44>)
 8006614:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8006618:	3301      	adds	r3, #1
 800661a:	b2da      	uxtb	r2, r3
 800661c:	4b0a      	ldr	r3, [pc, #40]	@ (8006648 <SBUS_IntegrityVerification+0x44>)
 800661e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		Radio_input.uart_error = Ok;
 8006622:	4b09      	ldr	r3, [pc, #36]	@ (8006648 <SBUS_IntegrityVerification+0x44>)
 8006624:	22aa      	movs	r2, #170	@ 0xaa
 8006626:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	}
	else{
		Radio_input.uart_error = Uart_Error;
		Radio_input.fail_safe = FailSafe;
	}
}
 800662a:	e007      	b.n	800663c <SBUS_IntegrityVerification+0x38>
		Radio_input.uart_error = Uart_Error;
 800662c:	4b06      	ldr	r3, [pc, #24]	@ (8006648 <SBUS_IntegrityVerification+0x44>)
 800662e:	2220      	movs	r2, #32
 8006630:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
		Radio_input.fail_safe = FailSafe;
 8006634:	4b04      	ldr	r3, [pc, #16]	@ (8006648 <SBUS_IntegrityVerification+0x44>)
 8006636:	2235      	movs	r2, #53	@ 0x35
 8006638:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
}
 800663c:	bf00      	nop
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr
 8006646:	bf00      	nop
 8006648:	2400007c 	.word	0x2400007c

0800664c <SD_blackbox_refresh>:
void SD_blackbox_init(void){

	f_open(&BlackBox, BlackBoxFile, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
}

void SD_blackbox_refresh(void){
 800664c:	b480      	push	{r7}
 800664e:	af00      	add	r7, sp, #0

	blackbox_data.Time = TimeOn_Counter;
 8006650:	4b58      	ldr	r3, [pc, #352]	@ (80067b4 <SD_blackbox_refresh+0x168>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a58      	ldr	r2, [pc, #352]	@ (80067b8 <SD_blackbox_refresh+0x16c>)
 8006656:	6353      	str	r3, [r2, #52]	@ 0x34

	blackbox_data.Ax = IMU.ACC.x;
 8006658:	4b58      	ldr	r3, [pc, #352]	@ (80067bc <SD_blackbox_refresh+0x170>)
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	4a56      	ldr	r2, [pc, #344]	@ (80067b8 <SD_blackbox_refresh+0x16c>)
 800665e:	6013      	str	r3, [r2, #0]
	blackbox_data.Ay = IMU.ACC.y;
 8006660:	4b56      	ldr	r3, [pc, #344]	@ (80067bc <SD_blackbox_refresh+0x170>)
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	4a54      	ldr	r2, [pc, #336]	@ (80067b8 <SD_blackbox_refresh+0x16c>)
 8006666:	6053      	str	r3, [r2, #4]
	blackbox_data.Az = IMU.ACC.z;
 8006668:	4b54      	ldr	r3, [pc, #336]	@ (80067bc <SD_blackbox_refresh+0x170>)
 800666a:	691b      	ldr	r3, [r3, #16]
 800666c:	4a52      	ldr	r2, [pc, #328]	@ (80067b8 <SD_blackbox_refresh+0x16c>)
 800666e:	6093      	str	r3, [r2, #8]

	blackbox_data.Gx = IMU.GYR.x;
 8006670:	4b52      	ldr	r3, [pc, #328]	@ (80067bc <SD_blackbox_refresh+0x170>)
 8006672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006674:	4a50      	ldr	r2, [pc, #320]	@ (80067b8 <SD_blackbox_refresh+0x16c>)
 8006676:	60d3      	str	r3, [r2, #12]
	blackbox_data.Gy = IMU.GYR.y;
 8006678:	4b50      	ldr	r3, [pc, #320]	@ (80067bc <SD_blackbox_refresh+0x170>)
 800667a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800667c:	4a4e      	ldr	r2, [pc, #312]	@ (80067b8 <SD_blackbox_refresh+0x16c>)
 800667e:	6113      	str	r3, [r2, #16]
	blackbox_data.Gz = IMU.GYR.z;
 8006680:	4b4e      	ldr	r3, [pc, #312]	@ (80067bc <SD_blackbox_refresh+0x170>)
 8006682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006684:	4a4c      	ldr	r2, [pc, #304]	@ (80067b8 <SD_blackbox_refresh+0x16c>)
 8006686:	6153      	str	r3, [r2, #20]

	blackbox_data.Gfx = 0;
 8006688:	4b4b      	ldr	r3, [pc, #300]	@ (80067b8 <SD_blackbox_refresh+0x16c>)
 800668a:	f04f 0200 	mov.w	r2, #0
 800668e:	619a      	str	r2, [r3, #24]
	blackbox_data.Gfy = 0;
 8006690:	4b49      	ldr	r3, [pc, #292]	@ (80067b8 <SD_blackbox_refresh+0x16c>)
 8006692:	f04f 0200 	mov.w	r2, #0
 8006696:	61da      	str	r2, [r3, #28]
	blackbox_data.Gfz = 0;
 8006698:	4b47      	ldr	r3, [pc, #284]	@ (80067b8 <SD_blackbox_refresh+0x16c>)
 800669a:	f04f 0200 	mov.w	r2, #0
 800669e:	621a      	str	r2, [r3, #32]

	blackbox_data.Roll    = IMU.Roll;
 80066a0:	4b46      	ldr	r3, [pc, #280]	@ (80067bc <SD_blackbox_refresh+0x170>)
 80066a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066a4:	4a44      	ldr	r2, [pc, #272]	@ (80067b8 <SD_blackbox_refresh+0x16c>)
 80066a6:	6253      	str	r3, [r2, #36]	@ 0x24
	blackbox_data.Pitch   = IMU.Pitch;
 80066a8:	4b44      	ldr	r3, [pc, #272]	@ (80067bc <SD_blackbox_refresh+0x170>)
 80066aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066ac:	4a42      	ldr	r2, [pc, #264]	@ (80067b8 <SD_blackbox_refresh+0x16c>)
 80066ae:	6293      	str	r3, [r2, #40]	@ 0x28
	blackbox_data.Heading = IMU.Heading;
 80066b0:	4b42      	ldr	r3, [pc, #264]	@ (80067bc <SD_blackbox_refresh+0x170>)
 80066b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066b4:	4a40      	ldr	r2, [pc, #256]	@ (80067b8 <SD_blackbox_refresh+0x16c>)
 80066b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

	blackbox_data.Alt = BMP280.Barometric_Altitude;
 80066b8:	4b41      	ldr	r3, [pc, #260]	@ (80067c0 <SD_blackbox_refresh+0x174>)
 80066ba:	8a1a      	ldrh	r2, [r3, #16]
 80066bc:	4b3e      	ldr	r3, [pc, #248]	@ (80067b8 <SD_blackbox_refresh+0x16c>)
 80066be:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
	blackbox_data.Latitude = 0;
 80066c2:	4b3d      	ldr	r3, [pc, #244]	@ (80067b8 <SD_blackbox_refresh+0x16c>)
 80066c4:	2200      	movs	r2, #0
 80066c6:	639a      	str	r2, [r3, #56]	@ 0x38
	blackbox_data.Longitude= 0;
 80066c8:	4b3b      	ldr	r3, [pc, #236]	@ (80067b8 <SD_blackbox_refresh+0x16c>)
 80066ca:	2200      	movs	r2, #0
 80066cc:	63da      	str	r2, [r3, #60]	@ 0x3c

	blackbox_data.ARSP = 0;
 80066ce:	4b3a      	ldr	r3, [pc, #232]	@ (80067b8 <SD_blackbox_refresh+0x16c>)
 80066d0:	2200      	movs	r2, #0
 80066d2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

	blackbox_data.Pressure = BMP280.Pressure;
 80066d6:	4b3a      	ldr	r3, [pc, #232]	@ (80067c0 <SD_blackbox_refresh+0x174>)
 80066d8:	68db      	ldr	r3, [r3, #12]
 80066da:	4a37      	ldr	r2, [pc, #220]	@ (80067b8 <SD_blackbox_refresh+0x16c>)
 80066dc:	6413      	str	r3, [r2, #64]	@ 0x40

	blackbox_data.SBUS_Flags = Radio_input.Banderas;
 80066de:	4b39      	ldr	r3, [pc, #228]	@ (80067c4 <SD_blackbox_refresh+0x178>)
 80066e0:	781a      	ldrb	r2, [r3, #0]
 80066e2:	4b35      	ldr	r3, [pc, #212]	@ (80067b8 <SD_blackbox_refresh+0x16c>)
 80066e4:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
	blackbox_data.Flight_Mode = 0;
 80066e8:	4b33      	ldr	r3, [pc, #204]	@ (80067b8 <SD_blackbox_refresh+0x16c>)
 80066ea:	2200      	movs	r2, #0
 80066ec:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

	blackbox_data.Canal_1 = Radio_input.Canal_1;
 80066f0:	4b34      	ldr	r3, [pc, #208]	@ (80067c4 <SD_blackbox_refresh+0x178>)
 80066f2:	885a      	ldrh	r2, [r3, #2]
 80066f4:	4b30      	ldr	r3, [pc, #192]	@ (80067b8 <SD_blackbox_refresh+0x16c>)
 80066f6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	blackbox_data.Canal_2 = Radio_input.Canal_2;
 80066fa:	4b32      	ldr	r3, [pc, #200]	@ (80067c4 <SD_blackbox_refresh+0x178>)
 80066fc:	889a      	ldrh	r2, [r3, #4]
 80066fe:	4b2e      	ldr	r3, [pc, #184]	@ (80067b8 <SD_blackbox_refresh+0x16c>)
 8006700:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
	blackbox_data.Canal_3 = Radio_input.Canal_3;
 8006704:	4b2f      	ldr	r3, [pc, #188]	@ (80067c4 <SD_blackbox_refresh+0x178>)
 8006706:	88da      	ldrh	r2, [r3, #6]
 8006708:	4b2b      	ldr	r3, [pc, #172]	@ (80067b8 <SD_blackbox_refresh+0x16c>)
 800670a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
	blackbox_data.Canal_4 = Radio_input.Canal_4;
 800670e:	4b2d      	ldr	r3, [pc, #180]	@ (80067c4 <SD_blackbox_refresh+0x178>)
 8006710:	891a      	ldrh	r2, [r3, #8]
 8006712:	4b29      	ldr	r3, [pc, #164]	@ (80067b8 <SD_blackbox_refresh+0x16c>)
 8006714:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
	blackbox_data.Canal_5 = Radio_input.Canal_5;
 8006718:	4b2a      	ldr	r3, [pc, #168]	@ (80067c4 <SD_blackbox_refresh+0x178>)
 800671a:	895a      	ldrh	r2, [r3, #10]
 800671c:	4b26      	ldr	r3, [pc, #152]	@ (80067b8 <SD_blackbox_refresh+0x16c>)
 800671e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
	blackbox_data.Canal_6 = Radio_input.Canal_6;
 8006722:	4b28      	ldr	r3, [pc, #160]	@ (80067c4 <SD_blackbox_refresh+0x178>)
 8006724:	899a      	ldrh	r2, [r3, #12]
 8006726:	4b24      	ldr	r3, [pc, #144]	@ (80067b8 <SD_blackbox_refresh+0x16c>)
 8006728:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
	blackbox_data.Canal_7 = Radio_input.Canal_7;
 800672c:	4b25      	ldr	r3, [pc, #148]	@ (80067c4 <SD_blackbox_refresh+0x178>)
 800672e:	89da      	ldrh	r2, [r3, #14]
 8006730:	4b21      	ldr	r3, [pc, #132]	@ (80067b8 <SD_blackbox_refresh+0x16c>)
 8006732:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
	blackbox_data.Canal_8 = Radio_input.Canal_8;
 8006736:	4b23      	ldr	r3, [pc, #140]	@ (80067c4 <SD_blackbox_refresh+0x178>)
 8006738:	8a1a      	ldrh	r2, [r3, #16]
 800673a:	4b1f      	ldr	r3, [pc, #124]	@ (80067b8 <SD_blackbox_refresh+0x16c>)
 800673c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
	blackbox_data.Canal_9 = Radio_input.Canal_9;
 8006740:	4b20      	ldr	r3, [pc, #128]	@ (80067c4 <SD_blackbox_refresh+0x178>)
 8006742:	8a5a      	ldrh	r2, [r3, #18]
 8006744:	4b1c      	ldr	r3, [pc, #112]	@ (80067b8 <SD_blackbox_refresh+0x16c>)
 8006746:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
	blackbox_data.Canal_10 = Radio_input.Canal_10;
 800674a:	4b1e      	ldr	r3, [pc, #120]	@ (80067c4 <SD_blackbox_refresh+0x178>)
 800674c:	8a9a      	ldrh	r2, [r3, #20]
 800674e:	4b1a      	ldr	r3, [pc, #104]	@ (80067b8 <SD_blackbox_refresh+0x16c>)
 8006750:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
	blackbox_data.Canal_11 = Radio_input.Canal_11;
 8006754:	4b1b      	ldr	r3, [pc, #108]	@ (80067c4 <SD_blackbox_refresh+0x178>)
 8006756:	8ada      	ldrh	r2, [r3, #22]
 8006758:	4b17      	ldr	r3, [pc, #92]	@ (80067b8 <SD_blackbox_refresh+0x16c>)
 800675a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
	blackbox_data.Canal_12 = Radio_input.Canal_12;
 800675e:	4b19      	ldr	r3, [pc, #100]	@ (80067c4 <SD_blackbox_refresh+0x178>)
 8006760:	8b1a      	ldrh	r2, [r3, #24]
 8006762:	4b15      	ldr	r3, [pc, #84]	@ (80067b8 <SD_blackbox_refresh+0x16c>)
 8006764:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
	blackbox_data.Canal_13 = Radio_input.Canal_13;
 8006768:	4b16      	ldr	r3, [pc, #88]	@ (80067c4 <SD_blackbox_refresh+0x178>)
 800676a:	8b5a      	ldrh	r2, [r3, #26]
 800676c:	4b12      	ldr	r3, [pc, #72]	@ (80067b8 <SD_blackbox_refresh+0x16c>)
 800676e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
	blackbox_data.Canal_14 = Radio_input.Canal_14;
 8006772:	4b14      	ldr	r3, [pc, #80]	@ (80067c4 <SD_blackbox_refresh+0x178>)
 8006774:	8b9a      	ldrh	r2, [r3, #28]
 8006776:	4b10      	ldr	r3, [pc, #64]	@ (80067b8 <SD_blackbox_refresh+0x16c>)
 8006778:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
	blackbox_data.Canal_15 = Radio_input.Canal_15;
 800677c:	4b11      	ldr	r3, [pc, #68]	@ (80067c4 <SD_blackbox_refresh+0x178>)
 800677e:	8bda      	ldrh	r2, [r3, #30]
 8006780:	4b0d      	ldr	r3, [pc, #52]	@ (80067b8 <SD_blackbox_refresh+0x16c>)
 8006782:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
	blackbox_data.Canal_16 = Radio_input.Canal_16;
 8006786:	4b0f      	ldr	r3, [pc, #60]	@ (80067c4 <SD_blackbox_refresh+0x178>)
 8006788:	8c1a      	ldrh	r2, [r3, #32]
 800678a:	4b0b      	ldr	r3, [pc, #44]	@ (80067b8 <SD_blackbox_refresh+0x16c>)
 800678c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

	blackbox_data.Interruptor_1 = Radio_input.Interruptor_1;
 8006790:	4b0c      	ldr	r3, [pc, #48]	@ (80067c4 <SD_blackbox_refresh+0x178>)
 8006792:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8006796:	4b08      	ldr	r3, [pc, #32]	@ (80067b8 <SD_blackbox_refresh+0x16c>)
 8006798:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
	blackbox_data.Interruptor_2 = Radio_input.Interruptor_2;
 800679c:	4b09      	ldr	r3, [pc, #36]	@ (80067c4 <SD_blackbox_refresh+0x178>)
 800679e:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 80067a2:	4b05      	ldr	r3, [pc, #20]	@ (80067b8 <SD_blackbox_refresh+0x16c>)
 80067a4:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
//	blackbox_data.OUT6  = PWM_Output.Canal_6;
//	blackbox_data.OUT7  = PWM_Output.Canal_7;
//	blackbox_data.OUT8  = PWM_Output.Canal_8;
//	blackbox_data.OUT9  = PWM_Output.Canal_9;
//	blackbox_data.OUT10 = PWM_Output.Canal_10;
}
 80067a8:	bf00      	nop
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr
 80067b2:	bf00      	nop
 80067b4:	24000ef8 	.word	0x24000ef8
 80067b8:	24002a30 	.word	0x24002a30
 80067bc:	24001684 	.word	0x24001684
 80067c0:	24001544 	.word	0x24001544
 80067c4:	2400007c 	.word	0x2400007c

080067c8 <SD_blackbox_write>:
	BlackBoxFile[4] = ActualFile[4];

	f_open(&BlackBox, BlackBoxFile, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
}

void SD_blackbox_write(void){
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af00      	add	r7, sp, #0
	static uint8_t NewFileCount = 0;
	static uint32_t DataCount = 0;
	static uint16_t WriteCount = 0;

	SD_blackbox_refresh();
 80067ce:	f7ff ff3d 	bl	800664c <SD_blackbox_refresh>

	blackbox_data.Nmsg = DataCount;
 80067d2:	4b26      	ldr	r3, [pc, #152]	@ (800686c <SD_blackbox_write+0xa4>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a26      	ldr	r2, [pc, #152]	@ (8006870 <SD_blackbox_write+0xa8>)
 80067d8:	6313      	str	r3, [r2, #48]	@ 0x30
	memcpy(&BlackBoxBuffer[WriteCount],&blackbox_data,sizeof(blackbox_data));
 80067da:	4b26      	ldr	r3, [pc, #152]	@ (8006874 <SD_blackbox_write+0xac>)
 80067dc:	881b      	ldrh	r3, [r3, #0]
 80067de:	461a      	mov	r2, r3
 80067e0:	4613      	mov	r3, r2
 80067e2:	021b      	lsls	r3, r3, #8
 80067e4:	1a9b      	subs	r3, r3, r2
 80067e6:	4a24      	ldr	r2, [pc, #144]	@ (8006878 <SD_blackbox_write+0xb0>)
 80067e8:	4413      	add	r3, r2
 80067ea:	2280      	movs	r2, #128	@ 0x80
 80067ec:	4920      	ldr	r1, [pc, #128]	@ (8006870 <SD_blackbox_write+0xa8>)
 80067ee:	4618      	mov	r0, r3
 80067f0:	f011 fb5b 	bl	8017eaa <memcpy>

	if(WriteCount == 15){
 80067f4:	4b1f      	ldr	r3, [pc, #124]	@ (8006874 <SD_blackbox_write+0xac>)
 80067f6:	881b      	ldrh	r3, [r3, #0]
 80067f8:	2b0f      	cmp	r3, #15
 80067fa:	d129      	bne.n	8006850 <SD_blackbox_write+0x88>
		for (uint8_t n = 0; n < 16; ++n) {
 80067fc:	2300      	movs	r3, #0
 80067fe:	71fb      	strb	r3, [r7, #7]
 8006800:	e00d      	b.n	800681e <SD_blackbox_write+0x56>
			f_write(&BlackBox, &BlackBoxBuffer[n], sizeof(blackbox_data), &bw);
 8006802:	79fa      	ldrb	r2, [r7, #7]
 8006804:	4613      	mov	r3, r2
 8006806:	021b      	lsls	r3, r3, #8
 8006808:	1a9b      	subs	r3, r3, r2
 800680a:	4a1b      	ldr	r2, [pc, #108]	@ (8006878 <SD_blackbox_write+0xb0>)
 800680c:	1899      	adds	r1, r3, r2
 800680e:	4b1b      	ldr	r3, [pc, #108]	@ (800687c <SD_blackbox_write+0xb4>)
 8006810:	2280      	movs	r2, #128	@ 0x80
 8006812:	481b      	ldr	r0, [pc, #108]	@ (8006880 <SD_blackbox_write+0xb8>)
 8006814:	f00d fe67 	bl	80144e6 <f_write>
		for (uint8_t n = 0; n < 16; ++n) {
 8006818:	79fb      	ldrb	r3, [r7, #7]
 800681a:	3301      	adds	r3, #1
 800681c:	71fb      	strb	r3, [r7, #7]
 800681e:	79fb      	ldrb	r3, [r7, #7]
 8006820:	2b0f      	cmp	r3, #15
 8006822:	d9ee      	bls.n	8006802 <SD_blackbox_write+0x3a>
		}
		fresult = f_sync(&BlackBox);
 8006824:	4816      	ldr	r0, [pc, #88]	@ (8006880 <SD_blackbox_write+0xb8>)
 8006826:	f00e f802 	bl	801482e <f_sync>
 800682a:	4603      	mov	r3, r0
 800682c:	461a      	mov	r2, r3
 800682e:	4b15      	ldr	r3, [pc, #84]	@ (8006884 <SD_blackbox_write+0xbc>)
 8006830:	701a      	strb	r2, [r3, #0]
		WriteCount = 0;
 8006832:	4b10      	ldr	r3, [pc, #64]	@ (8006874 <SD_blackbox_write+0xac>)
 8006834:	2200      	movs	r2, #0
 8006836:	801a      	strh	r2, [r3, #0]
		++NewFileCount;
 8006838:	4b13      	ldr	r3, [pc, #76]	@ (8006888 <SD_blackbox_write+0xc0>)
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	3301      	adds	r3, #1
 800683e:	b2da      	uxtb	r2, r3
 8006840:	4b11      	ldr	r3, [pc, #68]	@ (8006888 <SD_blackbox_write+0xc0>)
 8006842:	701a      	strb	r2, [r3, #0]
		++DataCount;
 8006844:	4b09      	ldr	r3, [pc, #36]	@ (800686c <SD_blackbox_write+0xa4>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	3301      	adds	r3, #1
 800684a:	4a08      	ldr	r2, [pc, #32]	@ (800686c <SD_blackbox_write+0xa4>)
 800684c:	6013      	str	r3, [r2, #0]
		return;
 800684e:	e00a      	b.n	8006866 <SD_blackbox_write+0x9e>
	}
	++WriteCount;
 8006850:	4b08      	ldr	r3, [pc, #32]	@ (8006874 <SD_blackbox_write+0xac>)
 8006852:	881b      	ldrh	r3, [r3, #0]
 8006854:	3301      	adds	r3, #1
 8006856:	b29a      	uxth	r2, r3
 8006858:	4b06      	ldr	r3, [pc, #24]	@ (8006874 <SD_blackbox_write+0xac>)
 800685a:	801a      	strh	r2, [r3, #0]
	++DataCount;
 800685c:	4b03      	ldr	r3, [pc, #12]	@ (800686c <SD_blackbox_write+0xa4>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	3301      	adds	r3, #1
 8006862:	4a02      	ldr	r2, [pc, #8]	@ (800686c <SD_blackbox_write+0xa4>)
 8006864:	6013      	str	r3, [r2, #0]
}
 8006866:	3708      	adds	r7, #8
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}
 800686c:	24002ab0 	.word	0x24002ab0
 8006870:	24002a30 	.word	0x24002a30
 8006874:	24002ab4 	.word	0x24002ab4
 8006878:	24001a40 	.word	0x24001a40
 800687c:	24001a3c 	.word	0x24001a3c
 8006880:	24001808 	.word	0x24001808
 8006884:	24001a38 	.word	0x24001a38
 8006888:	24002ab6 	.word	0x24002ab6

0800688c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800688c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80068c4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8006890:	f7fd f828 	bl	80038e4 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006894:	480c      	ldr	r0, [pc, #48]	@ (80068c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006896:	490d      	ldr	r1, [pc, #52]	@ (80068cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006898:	4a0d      	ldr	r2, [pc, #52]	@ (80068d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800689a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800689c:	e002      	b.n	80068a4 <LoopCopyDataInit>

0800689e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800689e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80068a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80068a2:	3304      	adds	r3, #4

080068a4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80068a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80068a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80068a8:	d3f9      	bcc.n	800689e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80068aa:	4a0a      	ldr	r2, [pc, #40]	@ (80068d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80068ac:	4c0a      	ldr	r4, [pc, #40]	@ (80068d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80068ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80068b0:	e001      	b.n	80068b6 <LoopFillZerobss>

080068b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80068b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80068b4:	3204      	adds	r2, #4

080068b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80068b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80068b8:	d3fb      	bcc.n	80068b2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80068ba:	f011 facf 	bl	8017e5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80068be:	f7fc fbab 	bl	8003018 <main>
  bx  lr
 80068c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80068c4:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80068c8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80068cc:	24000290 	.word	0x24000290
  ldr r2, =_sidata
 80068d0:	0801ab60 	.word	0x0801ab60
  ldr r2, =_sbss
 80068d4:	24000290 	.word	0x24000290
  ldr r4, =_ebss
 80068d8:	24006978 	.word	0x24006978

080068dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80068dc:	e7fe      	b.n	80068dc <ADC_IRQHandler>
	...

080068e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b082      	sub	sp, #8
 80068e4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80068e6:	2003      	movs	r0, #3
 80068e8:	f000 f927 	bl	8006b3a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80068ec:	f004 fd3e 	bl	800b36c <HAL_RCC_GetSysClockFreq>
 80068f0:	4602      	mov	r2, r0
 80068f2:	4b15      	ldr	r3, [pc, #84]	@ (8006948 <HAL_Init+0x68>)
 80068f4:	699b      	ldr	r3, [r3, #24]
 80068f6:	0a1b      	lsrs	r3, r3, #8
 80068f8:	f003 030f 	and.w	r3, r3, #15
 80068fc:	4913      	ldr	r1, [pc, #76]	@ (800694c <HAL_Init+0x6c>)
 80068fe:	5ccb      	ldrb	r3, [r1, r3]
 8006900:	f003 031f 	and.w	r3, r3, #31
 8006904:	fa22 f303 	lsr.w	r3, r2, r3
 8006908:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800690a:	4b0f      	ldr	r3, [pc, #60]	@ (8006948 <HAL_Init+0x68>)
 800690c:	699b      	ldr	r3, [r3, #24]
 800690e:	f003 030f 	and.w	r3, r3, #15
 8006912:	4a0e      	ldr	r2, [pc, #56]	@ (800694c <HAL_Init+0x6c>)
 8006914:	5cd3      	ldrb	r3, [r2, r3]
 8006916:	f003 031f 	and.w	r3, r3, #31
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	fa22 f303 	lsr.w	r3, r2, r3
 8006920:	4a0b      	ldr	r2, [pc, #44]	@ (8006950 <HAL_Init+0x70>)
 8006922:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006924:	4a0b      	ldr	r2, [pc, #44]	@ (8006954 <HAL_Init+0x74>)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800692a:	200f      	movs	r0, #15
 800692c:	f7fc fe44 	bl	80035b8 <HAL_InitTick>
 8006930:	4603      	mov	r3, r0
 8006932:	2b00      	cmp	r3, #0
 8006934:	d001      	beq.n	800693a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	e002      	b.n	8006940 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800693a:	f7fc fe1f 	bl	800357c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800693e:	2300      	movs	r3, #0
}
 8006940:	4618      	mov	r0, r3
 8006942:	3708      	adds	r7, #8
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}
 8006948:	58024400 	.word	0x58024400
 800694c:	08019ec4 	.word	0x08019ec4
 8006950:	24000004 	.word	0x24000004
 8006954:	24000000 	.word	0x24000000

08006958 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006958:	b480      	push	{r7}
 800695a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800695c:	4b06      	ldr	r3, [pc, #24]	@ (8006978 <HAL_IncTick+0x20>)
 800695e:	781b      	ldrb	r3, [r3, #0]
 8006960:	461a      	mov	r2, r3
 8006962:	4b06      	ldr	r3, [pc, #24]	@ (800697c <HAL_IncTick+0x24>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4413      	add	r3, r2
 8006968:	4a04      	ldr	r2, [pc, #16]	@ (800697c <HAL_IncTick+0x24>)
 800696a:	6013      	str	r3, [r2, #0]
}
 800696c:	bf00      	nop
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr
 8006976:	bf00      	nop
 8006978:	240000a8 	.word	0x240000a8
 800697c:	24002ab8 	.word	0x24002ab8

08006980 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006980:	b480      	push	{r7}
 8006982:	af00      	add	r7, sp, #0
  return uwTick;
 8006984:	4b03      	ldr	r3, [pc, #12]	@ (8006994 <HAL_GetTick+0x14>)
 8006986:	681b      	ldr	r3, [r3, #0]
}
 8006988:	4618      	mov	r0, r3
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr
 8006992:	bf00      	nop
 8006994:	24002ab8 	.word	0x24002ab8

08006998 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b084      	sub	sp, #16
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80069a0:	f7ff ffee 	bl	8006980 <HAL_GetTick>
 80069a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069b0:	d005      	beq.n	80069be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80069b2:	4b0a      	ldr	r3, [pc, #40]	@ (80069dc <HAL_Delay+0x44>)
 80069b4:	781b      	ldrb	r3, [r3, #0]
 80069b6:	461a      	mov	r2, r3
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	4413      	add	r3, r2
 80069bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80069be:	bf00      	nop
 80069c0:	f7ff ffde 	bl	8006980 <HAL_GetTick>
 80069c4:	4602      	mov	r2, r0
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	1ad3      	subs	r3, r2, r3
 80069ca:	68fa      	ldr	r2, [r7, #12]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d8f7      	bhi.n	80069c0 <HAL_Delay+0x28>
  {
  }
}
 80069d0:	bf00      	nop
 80069d2:	bf00      	nop
 80069d4:	3710      	adds	r7, #16
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	bf00      	nop
 80069dc:	240000a8 	.word	0x240000a8

080069e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b085      	sub	sp, #20
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f003 0307 	and.w	r3, r3, #7
 80069ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80069f0:	4b0b      	ldr	r3, [pc, #44]	@ (8006a20 <__NVIC_SetPriorityGrouping+0x40>)
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80069f6:	68ba      	ldr	r2, [r7, #8]
 80069f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80069fc:	4013      	ands	r3, r2
 80069fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006a08:	4b06      	ldr	r3, [pc, #24]	@ (8006a24 <__NVIC_SetPriorityGrouping+0x44>)
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006a0e:	4a04      	ldr	r2, [pc, #16]	@ (8006a20 <__NVIC_SetPriorityGrouping+0x40>)
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	60d3      	str	r3, [r2, #12]
}
 8006a14:	bf00      	nop
 8006a16:	3714      	adds	r7, #20
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr
 8006a20:	e000ed00 	.word	0xe000ed00
 8006a24:	05fa0000 	.word	0x05fa0000

08006a28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006a2c:	4b04      	ldr	r3, [pc, #16]	@ (8006a40 <__NVIC_GetPriorityGrouping+0x18>)
 8006a2e:	68db      	ldr	r3, [r3, #12]
 8006a30:	0a1b      	lsrs	r3, r3, #8
 8006a32:	f003 0307 	and.w	r3, r3, #7
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr
 8006a40:	e000ed00 	.word	0xe000ed00

08006a44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b083      	sub	sp, #12
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006a4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	db0b      	blt.n	8006a6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006a56:	88fb      	ldrh	r3, [r7, #6]
 8006a58:	f003 021f 	and.w	r2, r3, #31
 8006a5c:	4907      	ldr	r1, [pc, #28]	@ (8006a7c <__NVIC_EnableIRQ+0x38>)
 8006a5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006a62:	095b      	lsrs	r3, r3, #5
 8006a64:	2001      	movs	r0, #1
 8006a66:	fa00 f202 	lsl.w	r2, r0, r2
 8006a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006a6e:	bf00      	nop
 8006a70:	370c      	adds	r7, #12
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr
 8006a7a:	bf00      	nop
 8006a7c:	e000e100 	.word	0xe000e100

08006a80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b083      	sub	sp, #12
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	4603      	mov	r3, r0
 8006a88:	6039      	str	r1, [r7, #0]
 8006a8a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006a8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	db0a      	blt.n	8006aaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	b2da      	uxtb	r2, r3
 8006a98:	490c      	ldr	r1, [pc, #48]	@ (8006acc <__NVIC_SetPriority+0x4c>)
 8006a9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006a9e:	0112      	lsls	r2, r2, #4
 8006aa0:	b2d2      	uxtb	r2, r2
 8006aa2:	440b      	add	r3, r1
 8006aa4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006aa8:	e00a      	b.n	8006ac0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	b2da      	uxtb	r2, r3
 8006aae:	4908      	ldr	r1, [pc, #32]	@ (8006ad0 <__NVIC_SetPriority+0x50>)
 8006ab0:	88fb      	ldrh	r3, [r7, #6]
 8006ab2:	f003 030f 	and.w	r3, r3, #15
 8006ab6:	3b04      	subs	r3, #4
 8006ab8:	0112      	lsls	r2, r2, #4
 8006aba:	b2d2      	uxtb	r2, r2
 8006abc:	440b      	add	r3, r1
 8006abe:	761a      	strb	r2, [r3, #24]
}
 8006ac0:	bf00      	nop
 8006ac2:	370c      	adds	r7, #12
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr
 8006acc:	e000e100 	.word	0xe000e100
 8006ad0:	e000ed00 	.word	0xe000ed00

08006ad4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b089      	sub	sp, #36	@ 0x24
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	60f8      	str	r0, [r7, #12]
 8006adc:	60b9      	str	r1, [r7, #8]
 8006ade:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f003 0307 	and.w	r3, r3, #7
 8006ae6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006ae8:	69fb      	ldr	r3, [r7, #28]
 8006aea:	f1c3 0307 	rsb	r3, r3, #7
 8006aee:	2b04      	cmp	r3, #4
 8006af0:	bf28      	it	cs
 8006af2:	2304      	movcs	r3, #4
 8006af4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006af6:	69fb      	ldr	r3, [r7, #28]
 8006af8:	3304      	adds	r3, #4
 8006afa:	2b06      	cmp	r3, #6
 8006afc:	d902      	bls.n	8006b04 <NVIC_EncodePriority+0x30>
 8006afe:	69fb      	ldr	r3, [r7, #28]
 8006b00:	3b03      	subs	r3, #3
 8006b02:	e000      	b.n	8006b06 <NVIC_EncodePriority+0x32>
 8006b04:	2300      	movs	r3, #0
 8006b06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b08:	f04f 32ff 	mov.w	r2, #4294967295
 8006b0c:	69bb      	ldr	r3, [r7, #24]
 8006b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b12:	43da      	mvns	r2, r3
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	401a      	ands	r2, r3
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006b1c:	f04f 31ff 	mov.w	r1, #4294967295
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	fa01 f303 	lsl.w	r3, r1, r3
 8006b26:	43d9      	mvns	r1, r3
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b2c:	4313      	orrs	r3, r2
         );
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3724      	adds	r7, #36	@ 0x24
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr

08006b3a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006b3a:	b580      	push	{r7, lr}
 8006b3c:	b082      	sub	sp, #8
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f7ff ff4c 	bl	80069e0 <__NVIC_SetPriorityGrouping>
}
 8006b48:	bf00      	nop
 8006b4a:	3708      	adds	r7, #8
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}

08006b50 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b086      	sub	sp, #24
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	4603      	mov	r3, r0
 8006b58:	60b9      	str	r1, [r7, #8]
 8006b5a:	607a      	str	r2, [r7, #4]
 8006b5c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006b5e:	f7ff ff63 	bl	8006a28 <__NVIC_GetPriorityGrouping>
 8006b62:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	68b9      	ldr	r1, [r7, #8]
 8006b68:	6978      	ldr	r0, [r7, #20]
 8006b6a:	f7ff ffb3 	bl	8006ad4 <NVIC_EncodePriority>
 8006b6e:	4602      	mov	r2, r0
 8006b70:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006b74:	4611      	mov	r1, r2
 8006b76:	4618      	mov	r0, r3
 8006b78:	f7ff ff82 	bl	8006a80 <__NVIC_SetPriority>
}
 8006b7c:	bf00      	nop
 8006b7e:	3718      	adds	r7, #24
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b082      	sub	sp, #8
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006b8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006b92:	4618      	mov	r0, r3
 8006b94:	f7ff ff56 	bl	8006a44 <__NVIC_EnableIRQ>
}
 8006b98:	bf00      	nop
 8006b9a:	3708      	adds	r7, #8
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8006ba4:	f3bf 8f5f 	dmb	sy
}
 8006ba8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8006baa:	4b07      	ldr	r3, [pc, #28]	@ (8006bc8 <HAL_MPU_Disable+0x28>)
 8006bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bae:	4a06      	ldr	r2, [pc, #24]	@ (8006bc8 <HAL_MPU_Disable+0x28>)
 8006bb0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006bb4:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8006bb6:	4b05      	ldr	r3, [pc, #20]	@ (8006bcc <HAL_MPU_Disable+0x2c>)
 8006bb8:	2200      	movs	r2, #0
 8006bba:	605a      	str	r2, [r3, #4]
}
 8006bbc:	bf00      	nop
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr
 8006bc6:	bf00      	nop
 8006bc8:	e000ed00 	.word	0xe000ed00
 8006bcc:	e000ed90 	.word	0xe000ed90

08006bd0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b083      	sub	sp, #12
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8006bd8:	4a0b      	ldr	r2, [pc, #44]	@ (8006c08 <HAL_MPU_Enable+0x38>)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f043 0301 	orr.w	r3, r3, #1
 8006be0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8006be2:	4b0a      	ldr	r3, [pc, #40]	@ (8006c0c <HAL_MPU_Enable+0x3c>)
 8006be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006be6:	4a09      	ldr	r2, [pc, #36]	@ (8006c0c <HAL_MPU_Enable+0x3c>)
 8006be8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006bec:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8006bee:	f3bf 8f4f 	dsb	sy
}
 8006bf2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006bf4:	f3bf 8f6f 	isb	sy
}
 8006bf8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8006bfa:	bf00      	nop
 8006bfc:	370c      	adds	r7, #12
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr
 8006c06:	bf00      	nop
 8006c08:	e000ed90 	.word	0xe000ed90
 8006c0c:	e000ed00 	.word	0xe000ed00

08006c10 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b083      	sub	sp, #12
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	785a      	ldrb	r2, [r3, #1]
 8006c1c:	4b1b      	ldr	r3, [pc, #108]	@ (8006c8c <HAL_MPU_ConfigRegion+0x7c>)
 8006c1e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8006c20:	4b1a      	ldr	r3, [pc, #104]	@ (8006c8c <HAL_MPU_ConfigRegion+0x7c>)
 8006c22:	691b      	ldr	r3, [r3, #16]
 8006c24:	4a19      	ldr	r2, [pc, #100]	@ (8006c8c <HAL_MPU_ConfigRegion+0x7c>)
 8006c26:	f023 0301 	bic.w	r3, r3, #1
 8006c2a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8006c2c:	4a17      	ldr	r2, [pc, #92]	@ (8006c8c <HAL_MPU_ConfigRegion+0x7c>)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	7b1b      	ldrb	r3, [r3, #12]
 8006c38:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	7adb      	ldrb	r3, [r3, #11]
 8006c3e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006c40:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	7a9b      	ldrb	r3, [r3, #10]
 8006c46:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006c48:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	7b5b      	ldrb	r3, [r3, #13]
 8006c4e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006c50:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	7b9b      	ldrb	r3, [r3, #14]
 8006c56:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006c58:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	7bdb      	ldrb	r3, [r3, #15]
 8006c5e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006c60:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	7a5b      	ldrb	r3, [r3, #9]
 8006c66:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006c68:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	7a1b      	ldrb	r3, [r3, #8]
 8006c6e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006c70:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	7812      	ldrb	r2, [r2, #0]
 8006c76:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006c78:	4a04      	ldr	r2, [pc, #16]	@ (8006c8c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006c7a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006c7c:	6113      	str	r3, [r2, #16]
}
 8006c7e:	bf00      	nop
 8006c80:	370c      	adds	r7, #12
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr
 8006c8a:	bf00      	nop
 8006c8c:	e000ed90 	.word	0xe000ed90

08006c90 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b086      	sub	sp, #24
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8006c98:	f7ff fe72 	bl	8006980 <HAL_GetTick>
 8006c9c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d101      	bne.n	8006ca8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	e37d      	b.n	80073a4 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a66      	ldr	r2, [pc, #408]	@ (8006e48 <HAL_DMA_Init+0x1b8>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d04a      	beq.n	8006d48 <HAL_DMA_Init+0xb8>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a65      	ldr	r2, [pc, #404]	@ (8006e4c <HAL_DMA_Init+0x1bc>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d045      	beq.n	8006d48 <HAL_DMA_Init+0xb8>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a63      	ldr	r2, [pc, #396]	@ (8006e50 <HAL_DMA_Init+0x1c0>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d040      	beq.n	8006d48 <HAL_DMA_Init+0xb8>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a62      	ldr	r2, [pc, #392]	@ (8006e54 <HAL_DMA_Init+0x1c4>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d03b      	beq.n	8006d48 <HAL_DMA_Init+0xb8>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a60      	ldr	r2, [pc, #384]	@ (8006e58 <HAL_DMA_Init+0x1c8>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d036      	beq.n	8006d48 <HAL_DMA_Init+0xb8>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a5f      	ldr	r2, [pc, #380]	@ (8006e5c <HAL_DMA_Init+0x1cc>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d031      	beq.n	8006d48 <HAL_DMA_Init+0xb8>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a5d      	ldr	r2, [pc, #372]	@ (8006e60 <HAL_DMA_Init+0x1d0>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d02c      	beq.n	8006d48 <HAL_DMA_Init+0xb8>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a5c      	ldr	r2, [pc, #368]	@ (8006e64 <HAL_DMA_Init+0x1d4>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d027      	beq.n	8006d48 <HAL_DMA_Init+0xb8>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a5a      	ldr	r2, [pc, #360]	@ (8006e68 <HAL_DMA_Init+0x1d8>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d022      	beq.n	8006d48 <HAL_DMA_Init+0xb8>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a59      	ldr	r2, [pc, #356]	@ (8006e6c <HAL_DMA_Init+0x1dc>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d01d      	beq.n	8006d48 <HAL_DMA_Init+0xb8>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a57      	ldr	r2, [pc, #348]	@ (8006e70 <HAL_DMA_Init+0x1e0>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d018      	beq.n	8006d48 <HAL_DMA_Init+0xb8>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a56      	ldr	r2, [pc, #344]	@ (8006e74 <HAL_DMA_Init+0x1e4>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d013      	beq.n	8006d48 <HAL_DMA_Init+0xb8>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a54      	ldr	r2, [pc, #336]	@ (8006e78 <HAL_DMA_Init+0x1e8>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d00e      	beq.n	8006d48 <HAL_DMA_Init+0xb8>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a53      	ldr	r2, [pc, #332]	@ (8006e7c <HAL_DMA_Init+0x1ec>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d009      	beq.n	8006d48 <HAL_DMA_Init+0xb8>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a51      	ldr	r2, [pc, #324]	@ (8006e80 <HAL_DMA_Init+0x1f0>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d004      	beq.n	8006d48 <HAL_DMA_Init+0xb8>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a50      	ldr	r2, [pc, #320]	@ (8006e84 <HAL_DMA_Init+0x1f4>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d101      	bne.n	8006d4c <HAL_DMA_Init+0xbc>
 8006d48:	2301      	movs	r3, #1
 8006d4a:	e000      	b.n	8006d4e <HAL_DMA_Init+0xbe>
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	f000 813c 	beq.w	8006fcc <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2202      	movs	r2, #2
 8006d58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a37      	ldr	r2, [pc, #220]	@ (8006e48 <HAL_DMA_Init+0x1b8>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d04a      	beq.n	8006e04 <HAL_DMA_Init+0x174>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a36      	ldr	r2, [pc, #216]	@ (8006e4c <HAL_DMA_Init+0x1bc>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d045      	beq.n	8006e04 <HAL_DMA_Init+0x174>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a34      	ldr	r2, [pc, #208]	@ (8006e50 <HAL_DMA_Init+0x1c0>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d040      	beq.n	8006e04 <HAL_DMA_Init+0x174>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a33      	ldr	r2, [pc, #204]	@ (8006e54 <HAL_DMA_Init+0x1c4>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d03b      	beq.n	8006e04 <HAL_DMA_Init+0x174>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a31      	ldr	r2, [pc, #196]	@ (8006e58 <HAL_DMA_Init+0x1c8>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d036      	beq.n	8006e04 <HAL_DMA_Init+0x174>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a30      	ldr	r2, [pc, #192]	@ (8006e5c <HAL_DMA_Init+0x1cc>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d031      	beq.n	8006e04 <HAL_DMA_Init+0x174>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a2e      	ldr	r2, [pc, #184]	@ (8006e60 <HAL_DMA_Init+0x1d0>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d02c      	beq.n	8006e04 <HAL_DMA_Init+0x174>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a2d      	ldr	r2, [pc, #180]	@ (8006e64 <HAL_DMA_Init+0x1d4>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d027      	beq.n	8006e04 <HAL_DMA_Init+0x174>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a2b      	ldr	r2, [pc, #172]	@ (8006e68 <HAL_DMA_Init+0x1d8>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d022      	beq.n	8006e04 <HAL_DMA_Init+0x174>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a2a      	ldr	r2, [pc, #168]	@ (8006e6c <HAL_DMA_Init+0x1dc>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d01d      	beq.n	8006e04 <HAL_DMA_Init+0x174>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a28      	ldr	r2, [pc, #160]	@ (8006e70 <HAL_DMA_Init+0x1e0>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d018      	beq.n	8006e04 <HAL_DMA_Init+0x174>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a27      	ldr	r2, [pc, #156]	@ (8006e74 <HAL_DMA_Init+0x1e4>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d013      	beq.n	8006e04 <HAL_DMA_Init+0x174>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a25      	ldr	r2, [pc, #148]	@ (8006e78 <HAL_DMA_Init+0x1e8>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d00e      	beq.n	8006e04 <HAL_DMA_Init+0x174>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a24      	ldr	r2, [pc, #144]	@ (8006e7c <HAL_DMA_Init+0x1ec>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d009      	beq.n	8006e04 <HAL_DMA_Init+0x174>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a22      	ldr	r2, [pc, #136]	@ (8006e80 <HAL_DMA_Init+0x1f0>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d004      	beq.n	8006e04 <HAL_DMA_Init+0x174>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a21      	ldr	r2, [pc, #132]	@ (8006e84 <HAL_DMA_Init+0x1f4>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d108      	bne.n	8006e16 <HAL_DMA_Init+0x186>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f022 0201 	bic.w	r2, r2, #1
 8006e12:	601a      	str	r2, [r3, #0]
 8006e14:	e007      	b.n	8006e26 <HAL_DMA_Init+0x196>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f022 0201 	bic.w	r2, r2, #1
 8006e24:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006e26:	e02f      	b.n	8006e88 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006e28:	f7ff fdaa 	bl	8006980 <HAL_GetTick>
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	1ad3      	subs	r3, r2, r3
 8006e32:	2b05      	cmp	r3, #5
 8006e34:	d928      	bls.n	8006e88 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2220      	movs	r2, #32
 8006e3a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2203      	movs	r2, #3
 8006e40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8006e44:	2301      	movs	r3, #1
 8006e46:	e2ad      	b.n	80073a4 <HAL_DMA_Init+0x714>
 8006e48:	40020010 	.word	0x40020010
 8006e4c:	40020028 	.word	0x40020028
 8006e50:	40020040 	.word	0x40020040
 8006e54:	40020058 	.word	0x40020058
 8006e58:	40020070 	.word	0x40020070
 8006e5c:	40020088 	.word	0x40020088
 8006e60:	400200a0 	.word	0x400200a0
 8006e64:	400200b8 	.word	0x400200b8
 8006e68:	40020410 	.word	0x40020410
 8006e6c:	40020428 	.word	0x40020428
 8006e70:	40020440 	.word	0x40020440
 8006e74:	40020458 	.word	0x40020458
 8006e78:	40020470 	.word	0x40020470
 8006e7c:	40020488 	.word	0x40020488
 8006e80:	400204a0 	.word	0x400204a0
 8006e84:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f003 0301 	and.w	r3, r3, #1
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d1c8      	bne.n	8006e28 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006e9e:	697a      	ldr	r2, [r7, #20]
 8006ea0:	4b73      	ldr	r3, [pc, #460]	@ (8007070 <HAL_DMA_Init+0x3e0>)
 8006ea2:	4013      	ands	r3, r2
 8006ea4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8006eae:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	691b      	ldr	r3, [r3, #16]
 8006eb4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006eba:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	699b      	ldr	r3, [r3, #24]
 8006ec0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006ec6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6a1b      	ldr	r3, [r3, #32]
 8006ecc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8006ece:	697a      	ldr	r2, [r7, #20]
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ed8:	2b04      	cmp	r3, #4
 8006eda:	d107      	bne.n	8006eec <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	697a      	ldr	r2, [r7, #20]
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	2b28      	cmp	r3, #40	@ 0x28
 8006ef2:	d903      	bls.n	8006efc <HAL_DMA_Init+0x26c>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	2b2e      	cmp	r3, #46	@ 0x2e
 8006efa:	d91f      	bls.n	8006f3c <HAL_DMA_Init+0x2ac>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	2b3e      	cmp	r3, #62	@ 0x3e
 8006f02:	d903      	bls.n	8006f0c <HAL_DMA_Init+0x27c>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	2b42      	cmp	r3, #66	@ 0x42
 8006f0a:	d917      	bls.n	8006f3c <HAL_DMA_Init+0x2ac>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	2b46      	cmp	r3, #70	@ 0x46
 8006f12:	d903      	bls.n	8006f1c <HAL_DMA_Init+0x28c>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	2b48      	cmp	r3, #72	@ 0x48
 8006f1a:	d90f      	bls.n	8006f3c <HAL_DMA_Init+0x2ac>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	2b4e      	cmp	r3, #78	@ 0x4e
 8006f22:	d903      	bls.n	8006f2c <HAL_DMA_Init+0x29c>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	2b52      	cmp	r3, #82	@ 0x52
 8006f2a:	d907      	bls.n	8006f3c <HAL_DMA_Init+0x2ac>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	2b73      	cmp	r3, #115	@ 0x73
 8006f32:	d905      	bls.n	8006f40 <HAL_DMA_Init+0x2b0>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	2b77      	cmp	r3, #119	@ 0x77
 8006f3a:	d801      	bhi.n	8006f40 <HAL_DMA_Init+0x2b0>
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	e000      	b.n	8006f42 <HAL_DMA_Init+0x2b2>
 8006f40:	2300      	movs	r3, #0
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d003      	beq.n	8006f4e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006f4c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	697a      	ldr	r2, [r7, #20]
 8006f54:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	695b      	ldr	r3, [r3, #20]
 8006f5c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	f023 0307 	bic.w	r3, r3, #7
 8006f64:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f6a:	697a      	ldr	r2, [r7, #20]
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f74:	2b04      	cmp	r3, #4
 8006f76:	d117      	bne.n	8006fa8 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f7c:	697a      	ldr	r2, [r7, #20]
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d00e      	beq.n	8006fa8 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f002 fbe0 	bl	8009750 <DMA_CheckFifoParam>
 8006f90:	4603      	mov	r3, r0
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d008      	beq.n	8006fa8 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2240      	movs	r2, #64	@ 0x40
 8006f9a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	e1fd      	b.n	80073a4 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	697a      	ldr	r2, [r7, #20]
 8006fae:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f002 fb1b 	bl	80095ec <DMA_CalcBaseAndBitshift>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006fbe:	f003 031f 	and.w	r3, r3, #31
 8006fc2:	223f      	movs	r2, #63	@ 0x3f
 8006fc4:	409a      	lsls	r2, r3
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	609a      	str	r2, [r3, #8]
 8006fca:	e0fd      	b.n	80071c8 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a28      	ldr	r2, [pc, #160]	@ (8007074 <HAL_DMA_Init+0x3e4>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d04a      	beq.n	800706c <HAL_DMA_Init+0x3dc>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a27      	ldr	r2, [pc, #156]	@ (8007078 <HAL_DMA_Init+0x3e8>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d045      	beq.n	800706c <HAL_DMA_Init+0x3dc>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a25      	ldr	r2, [pc, #148]	@ (800707c <HAL_DMA_Init+0x3ec>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d040      	beq.n	800706c <HAL_DMA_Init+0x3dc>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a24      	ldr	r2, [pc, #144]	@ (8007080 <HAL_DMA_Init+0x3f0>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d03b      	beq.n	800706c <HAL_DMA_Init+0x3dc>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a22      	ldr	r2, [pc, #136]	@ (8007084 <HAL_DMA_Init+0x3f4>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d036      	beq.n	800706c <HAL_DMA_Init+0x3dc>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a21      	ldr	r2, [pc, #132]	@ (8007088 <HAL_DMA_Init+0x3f8>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d031      	beq.n	800706c <HAL_DMA_Init+0x3dc>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a1f      	ldr	r2, [pc, #124]	@ (800708c <HAL_DMA_Init+0x3fc>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d02c      	beq.n	800706c <HAL_DMA_Init+0x3dc>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a1e      	ldr	r2, [pc, #120]	@ (8007090 <HAL_DMA_Init+0x400>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d027      	beq.n	800706c <HAL_DMA_Init+0x3dc>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a1c      	ldr	r2, [pc, #112]	@ (8007094 <HAL_DMA_Init+0x404>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d022      	beq.n	800706c <HAL_DMA_Init+0x3dc>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a1b      	ldr	r2, [pc, #108]	@ (8007098 <HAL_DMA_Init+0x408>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d01d      	beq.n	800706c <HAL_DMA_Init+0x3dc>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a19      	ldr	r2, [pc, #100]	@ (800709c <HAL_DMA_Init+0x40c>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d018      	beq.n	800706c <HAL_DMA_Init+0x3dc>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a18      	ldr	r2, [pc, #96]	@ (80070a0 <HAL_DMA_Init+0x410>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d013      	beq.n	800706c <HAL_DMA_Init+0x3dc>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a16      	ldr	r2, [pc, #88]	@ (80070a4 <HAL_DMA_Init+0x414>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d00e      	beq.n	800706c <HAL_DMA_Init+0x3dc>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a15      	ldr	r2, [pc, #84]	@ (80070a8 <HAL_DMA_Init+0x418>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d009      	beq.n	800706c <HAL_DMA_Init+0x3dc>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a13      	ldr	r2, [pc, #76]	@ (80070ac <HAL_DMA_Init+0x41c>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d004      	beq.n	800706c <HAL_DMA_Init+0x3dc>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a12      	ldr	r2, [pc, #72]	@ (80070b0 <HAL_DMA_Init+0x420>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d123      	bne.n	80070b4 <HAL_DMA_Init+0x424>
 800706c:	2301      	movs	r3, #1
 800706e:	e022      	b.n	80070b6 <HAL_DMA_Init+0x426>
 8007070:	fe10803f 	.word	0xfe10803f
 8007074:	48022c08 	.word	0x48022c08
 8007078:	48022c1c 	.word	0x48022c1c
 800707c:	48022c30 	.word	0x48022c30
 8007080:	48022c44 	.word	0x48022c44
 8007084:	48022c58 	.word	0x48022c58
 8007088:	48022c6c 	.word	0x48022c6c
 800708c:	48022c80 	.word	0x48022c80
 8007090:	48022c94 	.word	0x48022c94
 8007094:	58025408 	.word	0x58025408
 8007098:	5802541c 	.word	0x5802541c
 800709c:	58025430 	.word	0x58025430
 80070a0:	58025444 	.word	0x58025444
 80070a4:	58025458 	.word	0x58025458
 80070a8:	5802546c 	.word	0x5802546c
 80070ac:	58025480 	.word	0x58025480
 80070b0:	58025494 	.word	0x58025494
 80070b4:	2300      	movs	r3, #0
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d07d      	beq.n	80071b6 <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a7f      	ldr	r2, [pc, #508]	@ (80072bc <HAL_DMA_Init+0x62c>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d021      	beq.n	8007108 <HAL_DMA_Init+0x478>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a7d      	ldr	r2, [pc, #500]	@ (80072c0 <HAL_DMA_Init+0x630>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d01c      	beq.n	8007108 <HAL_DMA_Init+0x478>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a7c      	ldr	r2, [pc, #496]	@ (80072c4 <HAL_DMA_Init+0x634>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d017      	beq.n	8007108 <HAL_DMA_Init+0x478>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a7a      	ldr	r2, [pc, #488]	@ (80072c8 <HAL_DMA_Init+0x638>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d012      	beq.n	8007108 <HAL_DMA_Init+0x478>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a79      	ldr	r2, [pc, #484]	@ (80072cc <HAL_DMA_Init+0x63c>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d00d      	beq.n	8007108 <HAL_DMA_Init+0x478>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a77      	ldr	r2, [pc, #476]	@ (80072d0 <HAL_DMA_Init+0x640>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d008      	beq.n	8007108 <HAL_DMA_Init+0x478>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a76      	ldr	r2, [pc, #472]	@ (80072d4 <HAL_DMA_Init+0x644>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d003      	beq.n	8007108 <HAL_DMA_Init+0x478>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a74      	ldr	r2, [pc, #464]	@ (80072d8 <HAL_DMA_Init+0x648>)
 8007106:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2202      	movs	r2, #2
 800710c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2200      	movs	r2, #0
 8007114:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8007120:	697a      	ldr	r2, [r7, #20]
 8007122:	4b6e      	ldr	r3, [pc, #440]	@ (80072dc <HAL_DMA_Init+0x64c>)
 8007124:	4013      	ands	r3, r2
 8007126:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	2b40      	cmp	r3, #64	@ 0x40
 800712e:	d008      	beq.n	8007142 <HAL_DMA_Init+0x4b2>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	689b      	ldr	r3, [r3, #8]
 8007134:	2b80      	cmp	r3, #128	@ 0x80
 8007136:	d102      	bne.n	800713e <HAL_DMA_Init+0x4ae>
 8007138:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800713c:	e002      	b.n	8007144 <HAL_DMA_Init+0x4b4>
 800713e:	2300      	movs	r3, #0
 8007140:	e000      	b.n	8007144 <HAL_DMA_Init+0x4b4>
 8007142:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007144:	687a      	ldr	r2, [r7, #4]
 8007146:	68d2      	ldr	r2, [r2, #12]
 8007148:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800714a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	691b      	ldr	r3, [r3, #16]
 8007150:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007152:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	695b      	ldr	r3, [r3, #20]
 8007158:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800715a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	699b      	ldr	r3, [r3, #24]
 8007160:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007162:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	69db      	ldr	r3, [r3, #28]
 8007168:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800716a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6a1b      	ldr	r3, [r3, #32]
 8007170:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007172:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007174:	697a      	ldr	r2, [r7, #20]
 8007176:	4313      	orrs	r3, r2
 8007178:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	697a      	ldr	r2, [r7, #20]
 8007180:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	461a      	mov	r2, r3
 8007188:	4b55      	ldr	r3, [pc, #340]	@ (80072e0 <HAL_DMA_Init+0x650>)
 800718a:	4413      	add	r3, r2
 800718c:	4a55      	ldr	r2, [pc, #340]	@ (80072e4 <HAL_DMA_Init+0x654>)
 800718e:	fba2 2303 	umull	r2, r3, r2, r3
 8007192:	091b      	lsrs	r3, r3, #4
 8007194:	009a      	lsls	r2, r3, #2
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f002 fa26 	bl	80095ec <DMA_CalcBaseAndBitshift>
 80071a0:	4603      	mov	r3, r0
 80071a2:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071a8:	f003 031f 	and.w	r3, r3, #31
 80071ac:	2201      	movs	r2, #1
 80071ae:	409a      	lsls	r2, r3
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	605a      	str	r2, [r3, #4]
 80071b4:	e008      	b.n	80071c8 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2240      	movs	r2, #64	@ 0x40
 80071ba:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2203      	movs	r2, #3
 80071c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80071c4:	2301      	movs	r3, #1
 80071c6:	e0ed      	b.n	80073a4 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a46      	ldr	r2, [pc, #280]	@ (80072e8 <HAL_DMA_Init+0x658>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d072      	beq.n	80072b8 <HAL_DMA_Init+0x628>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a45      	ldr	r2, [pc, #276]	@ (80072ec <HAL_DMA_Init+0x65c>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d06d      	beq.n	80072b8 <HAL_DMA_Init+0x628>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a43      	ldr	r2, [pc, #268]	@ (80072f0 <HAL_DMA_Init+0x660>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d068      	beq.n	80072b8 <HAL_DMA_Init+0x628>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a42      	ldr	r2, [pc, #264]	@ (80072f4 <HAL_DMA_Init+0x664>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d063      	beq.n	80072b8 <HAL_DMA_Init+0x628>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a40      	ldr	r2, [pc, #256]	@ (80072f8 <HAL_DMA_Init+0x668>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d05e      	beq.n	80072b8 <HAL_DMA_Init+0x628>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a3f      	ldr	r2, [pc, #252]	@ (80072fc <HAL_DMA_Init+0x66c>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d059      	beq.n	80072b8 <HAL_DMA_Init+0x628>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a3d      	ldr	r2, [pc, #244]	@ (8007300 <HAL_DMA_Init+0x670>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d054      	beq.n	80072b8 <HAL_DMA_Init+0x628>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a3c      	ldr	r2, [pc, #240]	@ (8007304 <HAL_DMA_Init+0x674>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d04f      	beq.n	80072b8 <HAL_DMA_Init+0x628>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a3a      	ldr	r2, [pc, #232]	@ (8007308 <HAL_DMA_Init+0x678>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d04a      	beq.n	80072b8 <HAL_DMA_Init+0x628>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a39      	ldr	r2, [pc, #228]	@ (800730c <HAL_DMA_Init+0x67c>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d045      	beq.n	80072b8 <HAL_DMA_Init+0x628>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a37      	ldr	r2, [pc, #220]	@ (8007310 <HAL_DMA_Init+0x680>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d040      	beq.n	80072b8 <HAL_DMA_Init+0x628>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a36      	ldr	r2, [pc, #216]	@ (8007314 <HAL_DMA_Init+0x684>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d03b      	beq.n	80072b8 <HAL_DMA_Init+0x628>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a34      	ldr	r2, [pc, #208]	@ (8007318 <HAL_DMA_Init+0x688>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d036      	beq.n	80072b8 <HAL_DMA_Init+0x628>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a33      	ldr	r2, [pc, #204]	@ (800731c <HAL_DMA_Init+0x68c>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d031      	beq.n	80072b8 <HAL_DMA_Init+0x628>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a31      	ldr	r2, [pc, #196]	@ (8007320 <HAL_DMA_Init+0x690>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d02c      	beq.n	80072b8 <HAL_DMA_Init+0x628>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a30      	ldr	r2, [pc, #192]	@ (8007324 <HAL_DMA_Init+0x694>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d027      	beq.n	80072b8 <HAL_DMA_Init+0x628>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a13      	ldr	r2, [pc, #76]	@ (80072bc <HAL_DMA_Init+0x62c>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d022      	beq.n	80072b8 <HAL_DMA_Init+0x628>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a12      	ldr	r2, [pc, #72]	@ (80072c0 <HAL_DMA_Init+0x630>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d01d      	beq.n	80072b8 <HAL_DMA_Init+0x628>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a10      	ldr	r2, [pc, #64]	@ (80072c4 <HAL_DMA_Init+0x634>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d018      	beq.n	80072b8 <HAL_DMA_Init+0x628>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a0f      	ldr	r2, [pc, #60]	@ (80072c8 <HAL_DMA_Init+0x638>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d013      	beq.n	80072b8 <HAL_DMA_Init+0x628>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a0d      	ldr	r2, [pc, #52]	@ (80072cc <HAL_DMA_Init+0x63c>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d00e      	beq.n	80072b8 <HAL_DMA_Init+0x628>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a0c      	ldr	r2, [pc, #48]	@ (80072d0 <HAL_DMA_Init+0x640>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d009      	beq.n	80072b8 <HAL_DMA_Init+0x628>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a0a      	ldr	r2, [pc, #40]	@ (80072d4 <HAL_DMA_Init+0x644>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d004      	beq.n	80072b8 <HAL_DMA_Init+0x628>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a09      	ldr	r2, [pc, #36]	@ (80072d8 <HAL_DMA_Init+0x648>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d137      	bne.n	8007328 <HAL_DMA_Init+0x698>
 80072b8:	2301      	movs	r3, #1
 80072ba:	e036      	b.n	800732a <HAL_DMA_Init+0x69a>
 80072bc:	58025408 	.word	0x58025408
 80072c0:	5802541c 	.word	0x5802541c
 80072c4:	58025430 	.word	0x58025430
 80072c8:	58025444 	.word	0x58025444
 80072cc:	58025458 	.word	0x58025458
 80072d0:	5802546c 	.word	0x5802546c
 80072d4:	58025480 	.word	0x58025480
 80072d8:	58025494 	.word	0x58025494
 80072dc:	fffe000f 	.word	0xfffe000f
 80072e0:	a7fdabf8 	.word	0xa7fdabf8
 80072e4:	cccccccd 	.word	0xcccccccd
 80072e8:	40020010 	.word	0x40020010
 80072ec:	40020028 	.word	0x40020028
 80072f0:	40020040 	.word	0x40020040
 80072f4:	40020058 	.word	0x40020058
 80072f8:	40020070 	.word	0x40020070
 80072fc:	40020088 	.word	0x40020088
 8007300:	400200a0 	.word	0x400200a0
 8007304:	400200b8 	.word	0x400200b8
 8007308:	40020410 	.word	0x40020410
 800730c:	40020428 	.word	0x40020428
 8007310:	40020440 	.word	0x40020440
 8007314:	40020458 	.word	0x40020458
 8007318:	40020470 	.word	0x40020470
 800731c:	40020488 	.word	0x40020488
 8007320:	400204a0 	.word	0x400204a0
 8007324:	400204b8 	.word	0x400204b8
 8007328:	2300      	movs	r3, #0
 800732a:	2b00      	cmp	r3, #0
 800732c:	d032      	beq.n	8007394 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f002 fa8a 	bl	8009848 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	689b      	ldr	r3, [r3, #8]
 8007338:	2b80      	cmp	r3, #128	@ 0x80
 800733a:	d102      	bne.n	8007342 <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	685a      	ldr	r2, [r3, #4]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800734a:	b2d2      	uxtb	r2, r2
 800734c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007356:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d010      	beq.n	8007382 <HAL_DMA_Init+0x6f2>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	2b08      	cmp	r3, #8
 8007366:	d80c      	bhi.n	8007382 <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f002 fb07 	bl	800997c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007372:	2200      	movs	r2, #0
 8007374:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800737a:	687a      	ldr	r2, [r7, #4]
 800737c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800737e:	605a      	str	r2, [r3, #4]
 8007380:	e008      	b.n	8007394 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2200      	movs	r2, #0
 8007386:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2200      	movs	r2, #0
 800738c:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2200      	movs	r2, #0
 8007392:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2200      	movs	r2, #0
 8007398:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2201      	movs	r2, #1
 800739e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80073a2:	2300      	movs	r3, #0
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3718      	adds	r7, #24
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}

080073ac <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b086      	sub	sp, #24
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	60f8      	str	r0, [r7, #12]
 80073b4:	60b9      	str	r1, [r7, #8]
 80073b6:	607a      	str	r2, [r7, #4]
 80073b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80073ba:	2300      	movs	r3, #0
 80073bc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d101      	bne.n	80073c8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80073c4:	2301      	movs	r3, #1
 80073c6:	e226      	b.n	8007816 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80073ce:	2b01      	cmp	r3, #1
 80073d0:	d101      	bne.n	80073d6 <HAL_DMA_Start_IT+0x2a>
 80073d2:	2302      	movs	r3, #2
 80073d4:	e21f      	b.n	8007816 <HAL_DMA_Start_IT+0x46a>
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2201      	movs	r2, #1
 80073da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80073e4:	b2db      	uxtb	r3, r3
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	f040 820a 	bne.w	8007800 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2202      	movs	r2, #2
 80073f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2200      	movs	r2, #0
 80073f8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a68      	ldr	r2, [pc, #416]	@ (80075a0 <HAL_DMA_Start_IT+0x1f4>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d04a      	beq.n	800749a <HAL_DMA_Start_IT+0xee>
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a66      	ldr	r2, [pc, #408]	@ (80075a4 <HAL_DMA_Start_IT+0x1f8>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d045      	beq.n	800749a <HAL_DMA_Start_IT+0xee>
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a65      	ldr	r2, [pc, #404]	@ (80075a8 <HAL_DMA_Start_IT+0x1fc>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d040      	beq.n	800749a <HAL_DMA_Start_IT+0xee>
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a63      	ldr	r2, [pc, #396]	@ (80075ac <HAL_DMA_Start_IT+0x200>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d03b      	beq.n	800749a <HAL_DMA_Start_IT+0xee>
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a62      	ldr	r2, [pc, #392]	@ (80075b0 <HAL_DMA_Start_IT+0x204>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d036      	beq.n	800749a <HAL_DMA_Start_IT+0xee>
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a60      	ldr	r2, [pc, #384]	@ (80075b4 <HAL_DMA_Start_IT+0x208>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d031      	beq.n	800749a <HAL_DMA_Start_IT+0xee>
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4a5f      	ldr	r2, [pc, #380]	@ (80075b8 <HAL_DMA_Start_IT+0x20c>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d02c      	beq.n	800749a <HAL_DMA_Start_IT+0xee>
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a5d      	ldr	r2, [pc, #372]	@ (80075bc <HAL_DMA_Start_IT+0x210>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d027      	beq.n	800749a <HAL_DMA_Start_IT+0xee>
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4a5c      	ldr	r2, [pc, #368]	@ (80075c0 <HAL_DMA_Start_IT+0x214>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d022      	beq.n	800749a <HAL_DMA_Start_IT+0xee>
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a5a      	ldr	r2, [pc, #360]	@ (80075c4 <HAL_DMA_Start_IT+0x218>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d01d      	beq.n	800749a <HAL_DMA_Start_IT+0xee>
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a59      	ldr	r2, [pc, #356]	@ (80075c8 <HAL_DMA_Start_IT+0x21c>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d018      	beq.n	800749a <HAL_DMA_Start_IT+0xee>
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a57      	ldr	r2, [pc, #348]	@ (80075cc <HAL_DMA_Start_IT+0x220>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d013      	beq.n	800749a <HAL_DMA_Start_IT+0xee>
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a56      	ldr	r2, [pc, #344]	@ (80075d0 <HAL_DMA_Start_IT+0x224>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d00e      	beq.n	800749a <HAL_DMA_Start_IT+0xee>
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a54      	ldr	r2, [pc, #336]	@ (80075d4 <HAL_DMA_Start_IT+0x228>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d009      	beq.n	800749a <HAL_DMA_Start_IT+0xee>
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a53      	ldr	r2, [pc, #332]	@ (80075d8 <HAL_DMA_Start_IT+0x22c>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d004      	beq.n	800749a <HAL_DMA_Start_IT+0xee>
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a51      	ldr	r2, [pc, #324]	@ (80075dc <HAL_DMA_Start_IT+0x230>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d108      	bne.n	80074ac <HAL_DMA_Start_IT+0x100>
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f022 0201 	bic.w	r2, r2, #1
 80074a8:	601a      	str	r2, [r3, #0]
 80074aa:	e007      	b.n	80074bc <HAL_DMA_Start_IT+0x110>
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	681a      	ldr	r2, [r3, #0]
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f022 0201 	bic.w	r2, r2, #1
 80074ba:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	68b9      	ldr	r1, [r7, #8]
 80074c2:	68f8      	ldr	r0, [r7, #12]
 80074c4:	f001 feae 	bl	8009224 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a34      	ldr	r2, [pc, #208]	@ (80075a0 <HAL_DMA_Start_IT+0x1f4>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d04a      	beq.n	8007568 <HAL_DMA_Start_IT+0x1bc>
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a33      	ldr	r2, [pc, #204]	@ (80075a4 <HAL_DMA_Start_IT+0x1f8>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d045      	beq.n	8007568 <HAL_DMA_Start_IT+0x1bc>
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a31      	ldr	r2, [pc, #196]	@ (80075a8 <HAL_DMA_Start_IT+0x1fc>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d040      	beq.n	8007568 <HAL_DMA_Start_IT+0x1bc>
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a30      	ldr	r2, [pc, #192]	@ (80075ac <HAL_DMA_Start_IT+0x200>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d03b      	beq.n	8007568 <HAL_DMA_Start_IT+0x1bc>
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a2e      	ldr	r2, [pc, #184]	@ (80075b0 <HAL_DMA_Start_IT+0x204>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d036      	beq.n	8007568 <HAL_DMA_Start_IT+0x1bc>
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a2d      	ldr	r2, [pc, #180]	@ (80075b4 <HAL_DMA_Start_IT+0x208>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d031      	beq.n	8007568 <HAL_DMA_Start_IT+0x1bc>
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a2b      	ldr	r2, [pc, #172]	@ (80075b8 <HAL_DMA_Start_IT+0x20c>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d02c      	beq.n	8007568 <HAL_DMA_Start_IT+0x1bc>
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a2a      	ldr	r2, [pc, #168]	@ (80075bc <HAL_DMA_Start_IT+0x210>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d027      	beq.n	8007568 <HAL_DMA_Start_IT+0x1bc>
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a28      	ldr	r2, [pc, #160]	@ (80075c0 <HAL_DMA_Start_IT+0x214>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d022      	beq.n	8007568 <HAL_DMA_Start_IT+0x1bc>
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a27      	ldr	r2, [pc, #156]	@ (80075c4 <HAL_DMA_Start_IT+0x218>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d01d      	beq.n	8007568 <HAL_DMA_Start_IT+0x1bc>
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a25      	ldr	r2, [pc, #148]	@ (80075c8 <HAL_DMA_Start_IT+0x21c>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d018      	beq.n	8007568 <HAL_DMA_Start_IT+0x1bc>
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a24      	ldr	r2, [pc, #144]	@ (80075cc <HAL_DMA_Start_IT+0x220>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d013      	beq.n	8007568 <HAL_DMA_Start_IT+0x1bc>
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a22      	ldr	r2, [pc, #136]	@ (80075d0 <HAL_DMA_Start_IT+0x224>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d00e      	beq.n	8007568 <HAL_DMA_Start_IT+0x1bc>
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a21      	ldr	r2, [pc, #132]	@ (80075d4 <HAL_DMA_Start_IT+0x228>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d009      	beq.n	8007568 <HAL_DMA_Start_IT+0x1bc>
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a1f      	ldr	r2, [pc, #124]	@ (80075d8 <HAL_DMA_Start_IT+0x22c>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d004      	beq.n	8007568 <HAL_DMA_Start_IT+0x1bc>
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a1e      	ldr	r2, [pc, #120]	@ (80075dc <HAL_DMA_Start_IT+0x230>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d101      	bne.n	800756c <HAL_DMA_Start_IT+0x1c0>
 8007568:	2301      	movs	r3, #1
 800756a:	e000      	b.n	800756e <HAL_DMA_Start_IT+0x1c2>
 800756c:	2300      	movs	r3, #0
 800756e:	2b00      	cmp	r3, #0
 8007570:	d036      	beq.n	80075e0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f023 021e 	bic.w	r2, r3, #30
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f042 0216 	orr.w	r2, r2, #22
 8007584:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800758a:	2b00      	cmp	r3, #0
 800758c:	d03e      	beq.n	800760c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	681a      	ldr	r2, [r3, #0]
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f042 0208 	orr.w	r2, r2, #8
 800759c:	601a      	str	r2, [r3, #0]
 800759e:	e035      	b.n	800760c <HAL_DMA_Start_IT+0x260>
 80075a0:	40020010 	.word	0x40020010
 80075a4:	40020028 	.word	0x40020028
 80075a8:	40020040 	.word	0x40020040
 80075ac:	40020058 	.word	0x40020058
 80075b0:	40020070 	.word	0x40020070
 80075b4:	40020088 	.word	0x40020088
 80075b8:	400200a0 	.word	0x400200a0
 80075bc:	400200b8 	.word	0x400200b8
 80075c0:	40020410 	.word	0x40020410
 80075c4:	40020428 	.word	0x40020428
 80075c8:	40020440 	.word	0x40020440
 80075cc:	40020458 	.word	0x40020458
 80075d0:	40020470 	.word	0x40020470
 80075d4:	40020488 	.word	0x40020488
 80075d8:	400204a0 	.word	0x400204a0
 80075dc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f023 020e 	bic.w	r2, r3, #14
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f042 020a 	orr.w	r2, r2, #10
 80075f2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d007      	beq.n	800760c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f042 0204 	orr.w	r2, r2, #4
 800760a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a83      	ldr	r2, [pc, #524]	@ (8007820 <HAL_DMA_Start_IT+0x474>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d072      	beq.n	80076fc <HAL_DMA_Start_IT+0x350>
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a82      	ldr	r2, [pc, #520]	@ (8007824 <HAL_DMA_Start_IT+0x478>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d06d      	beq.n	80076fc <HAL_DMA_Start_IT+0x350>
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a80      	ldr	r2, [pc, #512]	@ (8007828 <HAL_DMA_Start_IT+0x47c>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d068      	beq.n	80076fc <HAL_DMA_Start_IT+0x350>
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a7f      	ldr	r2, [pc, #508]	@ (800782c <HAL_DMA_Start_IT+0x480>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d063      	beq.n	80076fc <HAL_DMA_Start_IT+0x350>
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a7d      	ldr	r2, [pc, #500]	@ (8007830 <HAL_DMA_Start_IT+0x484>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d05e      	beq.n	80076fc <HAL_DMA_Start_IT+0x350>
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a7c      	ldr	r2, [pc, #496]	@ (8007834 <HAL_DMA_Start_IT+0x488>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d059      	beq.n	80076fc <HAL_DMA_Start_IT+0x350>
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a7a      	ldr	r2, [pc, #488]	@ (8007838 <HAL_DMA_Start_IT+0x48c>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d054      	beq.n	80076fc <HAL_DMA_Start_IT+0x350>
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a79      	ldr	r2, [pc, #484]	@ (800783c <HAL_DMA_Start_IT+0x490>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d04f      	beq.n	80076fc <HAL_DMA_Start_IT+0x350>
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a77      	ldr	r2, [pc, #476]	@ (8007840 <HAL_DMA_Start_IT+0x494>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d04a      	beq.n	80076fc <HAL_DMA_Start_IT+0x350>
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a76      	ldr	r2, [pc, #472]	@ (8007844 <HAL_DMA_Start_IT+0x498>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d045      	beq.n	80076fc <HAL_DMA_Start_IT+0x350>
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a74      	ldr	r2, [pc, #464]	@ (8007848 <HAL_DMA_Start_IT+0x49c>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d040      	beq.n	80076fc <HAL_DMA_Start_IT+0x350>
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a73      	ldr	r2, [pc, #460]	@ (800784c <HAL_DMA_Start_IT+0x4a0>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d03b      	beq.n	80076fc <HAL_DMA_Start_IT+0x350>
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a71      	ldr	r2, [pc, #452]	@ (8007850 <HAL_DMA_Start_IT+0x4a4>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d036      	beq.n	80076fc <HAL_DMA_Start_IT+0x350>
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a70      	ldr	r2, [pc, #448]	@ (8007854 <HAL_DMA_Start_IT+0x4a8>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d031      	beq.n	80076fc <HAL_DMA_Start_IT+0x350>
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a6e      	ldr	r2, [pc, #440]	@ (8007858 <HAL_DMA_Start_IT+0x4ac>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d02c      	beq.n	80076fc <HAL_DMA_Start_IT+0x350>
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a6d      	ldr	r2, [pc, #436]	@ (800785c <HAL_DMA_Start_IT+0x4b0>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d027      	beq.n	80076fc <HAL_DMA_Start_IT+0x350>
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a6b      	ldr	r2, [pc, #428]	@ (8007860 <HAL_DMA_Start_IT+0x4b4>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d022      	beq.n	80076fc <HAL_DMA_Start_IT+0x350>
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a6a      	ldr	r2, [pc, #424]	@ (8007864 <HAL_DMA_Start_IT+0x4b8>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d01d      	beq.n	80076fc <HAL_DMA_Start_IT+0x350>
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a68      	ldr	r2, [pc, #416]	@ (8007868 <HAL_DMA_Start_IT+0x4bc>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d018      	beq.n	80076fc <HAL_DMA_Start_IT+0x350>
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a67      	ldr	r2, [pc, #412]	@ (800786c <HAL_DMA_Start_IT+0x4c0>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d013      	beq.n	80076fc <HAL_DMA_Start_IT+0x350>
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a65      	ldr	r2, [pc, #404]	@ (8007870 <HAL_DMA_Start_IT+0x4c4>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d00e      	beq.n	80076fc <HAL_DMA_Start_IT+0x350>
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a64      	ldr	r2, [pc, #400]	@ (8007874 <HAL_DMA_Start_IT+0x4c8>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d009      	beq.n	80076fc <HAL_DMA_Start_IT+0x350>
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a62      	ldr	r2, [pc, #392]	@ (8007878 <HAL_DMA_Start_IT+0x4cc>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d004      	beq.n	80076fc <HAL_DMA_Start_IT+0x350>
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a61      	ldr	r2, [pc, #388]	@ (800787c <HAL_DMA_Start_IT+0x4d0>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d101      	bne.n	8007700 <HAL_DMA_Start_IT+0x354>
 80076fc:	2301      	movs	r3, #1
 80076fe:	e000      	b.n	8007702 <HAL_DMA_Start_IT+0x356>
 8007700:	2300      	movs	r3, #0
 8007702:	2b00      	cmp	r3, #0
 8007704:	d01a      	beq.n	800773c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007710:	2b00      	cmp	r3, #0
 8007712:	d007      	beq.n	8007724 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800771e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007722:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007728:	2b00      	cmp	r3, #0
 800772a:	d007      	beq.n	800773c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007736:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800773a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a37      	ldr	r2, [pc, #220]	@ (8007820 <HAL_DMA_Start_IT+0x474>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d04a      	beq.n	80077dc <HAL_DMA_Start_IT+0x430>
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a36      	ldr	r2, [pc, #216]	@ (8007824 <HAL_DMA_Start_IT+0x478>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d045      	beq.n	80077dc <HAL_DMA_Start_IT+0x430>
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a34      	ldr	r2, [pc, #208]	@ (8007828 <HAL_DMA_Start_IT+0x47c>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d040      	beq.n	80077dc <HAL_DMA_Start_IT+0x430>
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a33      	ldr	r2, [pc, #204]	@ (800782c <HAL_DMA_Start_IT+0x480>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d03b      	beq.n	80077dc <HAL_DMA_Start_IT+0x430>
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a31      	ldr	r2, [pc, #196]	@ (8007830 <HAL_DMA_Start_IT+0x484>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d036      	beq.n	80077dc <HAL_DMA_Start_IT+0x430>
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a30      	ldr	r2, [pc, #192]	@ (8007834 <HAL_DMA_Start_IT+0x488>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d031      	beq.n	80077dc <HAL_DMA_Start_IT+0x430>
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a2e      	ldr	r2, [pc, #184]	@ (8007838 <HAL_DMA_Start_IT+0x48c>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d02c      	beq.n	80077dc <HAL_DMA_Start_IT+0x430>
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a2d      	ldr	r2, [pc, #180]	@ (800783c <HAL_DMA_Start_IT+0x490>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d027      	beq.n	80077dc <HAL_DMA_Start_IT+0x430>
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a2b      	ldr	r2, [pc, #172]	@ (8007840 <HAL_DMA_Start_IT+0x494>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d022      	beq.n	80077dc <HAL_DMA_Start_IT+0x430>
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a2a      	ldr	r2, [pc, #168]	@ (8007844 <HAL_DMA_Start_IT+0x498>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d01d      	beq.n	80077dc <HAL_DMA_Start_IT+0x430>
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a28      	ldr	r2, [pc, #160]	@ (8007848 <HAL_DMA_Start_IT+0x49c>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d018      	beq.n	80077dc <HAL_DMA_Start_IT+0x430>
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a27      	ldr	r2, [pc, #156]	@ (800784c <HAL_DMA_Start_IT+0x4a0>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d013      	beq.n	80077dc <HAL_DMA_Start_IT+0x430>
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a25      	ldr	r2, [pc, #148]	@ (8007850 <HAL_DMA_Start_IT+0x4a4>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d00e      	beq.n	80077dc <HAL_DMA_Start_IT+0x430>
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a24      	ldr	r2, [pc, #144]	@ (8007854 <HAL_DMA_Start_IT+0x4a8>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d009      	beq.n	80077dc <HAL_DMA_Start_IT+0x430>
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a22      	ldr	r2, [pc, #136]	@ (8007858 <HAL_DMA_Start_IT+0x4ac>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d004      	beq.n	80077dc <HAL_DMA_Start_IT+0x430>
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a21      	ldr	r2, [pc, #132]	@ (800785c <HAL_DMA_Start_IT+0x4b0>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d108      	bne.n	80077ee <HAL_DMA_Start_IT+0x442>
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	681a      	ldr	r2, [r3, #0]
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f042 0201 	orr.w	r2, r2, #1
 80077ea:	601a      	str	r2, [r3, #0]
 80077ec:	e012      	b.n	8007814 <HAL_DMA_Start_IT+0x468>
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	681a      	ldr	r2, [r3, #0]
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f042 0201 	orr.w	r2, r2, #1
 80077fc:	601a      	str	r2, [r3, #0]
 80077fe:	e009      	b.n	8007814 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007806:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2200      	movs	r2, #0
 800780c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8007810:	2301      	movs	r3, #1
 8007812:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007814:	7dfb      	ldrb	r3, [r7, #23]
}
 8007816:	4618      	mov	r0, r3
 8007818:	3718      	adds	r7, #24
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}
 800781e:	bf00      	nop
 8007820:	40020010 	.word	0x40020010
 8007824:	40020028 	.word	0x40020028
 8007828:	40020040 	.word	0x40020040
 800782c:	40020058 	.word	0x40020058
 8007830:	40020070 	.word	0x40020070
 8007834:	40020088 	.word	0x40020088
 8007838:	400200a0 	.word	0x400200a0
 800783c:	400200b8 	.word	0x400200b8
 8007840:	40020410 	.word	0x40020410
 8007844:	40020428 	.word	0x40020428
 8007848:	40020440 	.word	0x40020440
 800784c:	40020458 	.word	0x40020458
 8007850:	40020470 	.word	0x40020470
 8007854:	40020488 	.word	0x40020488
 8007858:	400204a0 	.word	0x400204a0
 800785c:	400204b8 	.word	0x400204b8
 8007860:	58025408 	.word	0x58025408
 8007864:	5802541c 	.word	0x5802541c
 8007868:	58025430 	.word	0x58025430
 800786c:	58025444 	.word	0x58025444
 8007870:	58025458 	.word	0x58025458
 8007874:	5802546c 	.word	0x5802546c
 8007878:	58025480 	.word	0x58025480
 800787c:	58025494 	.word	0x58025494

08007880 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b086      	sub	sp, #24
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8007888:	f7ff f87a 	bl	8006980 <HAL_GetTick>
 800788c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d101      	bne.n	8007898 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8007894:	2301      	movs	r3, #1
 8007896:	e2dc      	b.n	8007e52 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800789e:	b2db      	uxtb	r3, r3
 80078a0:	2b02      	cmp	r3, #2
 80078a2:	d008      	beq.n	80078b6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2280      	movs	r2, #128	@ 0x80
 80078a8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2200      	movs	r2, #0
 80078ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80078b2:	2301      	movs	r3, #1
 80078b4:	e2cd      	b.n	8007e52 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a76      	ldr	r2, [pc, #472]	@ (8007a94 <HAL_DMA_Abort+0x214>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d04a      	beq.n	8007956 <HAL_DMA_Abort+0xd6>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a74      	ldr	r2, [pc, #464]	@ (8007a98 <HAL_DMA_Abort+0x218>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d045      	beq.n	8007956 <HAL_DMA_Abort+0xd6>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a73      	ldr	r2, [pc, #460]	@ (8007a9c <HAL_DMA_Abort+0x21c>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d040      	beq.n	8007956 <HAL_DMA_Abort+0xd6>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4a71      	ldr	r2, [pc, #452]	@ (8007aa0 <HAL_DMA_Abort+0x220>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d03b      	beq.n	8007956 <HAL_DMA_Abort+0xd6>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4a70      	ldr	r2, [pc, #448]	@ (8007aa4 <HAL_DMA_Abort+0x224>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d036      	beq.n	8007956 <HAL_DMA_Abort+0xd6>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a6e      	ldr	r2, [pc, #440]	@ (8007aa8 <HAL_DMA_Abort+0x228>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d031      	beq.n	8007956 <HAL_DMA_Abort+0xd6>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a6d      	ldr	r2, [pc, #436]	@ (8007aac <HAL_DMA_Abort+0x22c>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d02c      	beq.n	8007956 <HAL_DMA_Abort+0xd6>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a6b      	ldr	r2, [pc, #428]	@ (8007ab0 <HAL_DMA_Abort+0x230>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d027      	beq.n	8007956 <HAL_DMA_Abort+0xd6>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a6a      	ldr	r2, [pc, #424]	@ (8007ab4 <HAL_DMA_Abort+0x234>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d022      	beq.n	8007956 <HAL_DMA_Abort+0xd6>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a68      	ldr	r2, [pc, #416]	@ (8007ab8 <HAL_DMA_Abort+0x238>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d01d      	beq.n	8007956 <HAL_DMA_Abort+0xd6>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4a67      	ldr	r2, [pc, #412]	@ (8007abc <HAL_DMA_Abort+0x23c>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d018      	beq.n	8007956 <HAL_DMA_Abort+0xd6>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a65      	ldr	r2, [pc, #404]	@ (8007ac0 <HAL_DMA_Abort+0x240>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d013      	beq.n	8007956 <HAL_DMA_Abort+0xd6>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a64      	ldr	r2, [pc, #400]	@ (8007ac4 <HAL_DMA_Abort+0x244>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d00e      	beq.n	8007956 <HAL_DMA_Abort+0xd6>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a62      	ldr	r2, [pc, #392]	@ (8007ac8 <HAL_DMA_Abort+0x248>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d009      	beq.n	8007956 <HAL_DMA_Abort+0xd6>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4a61      	ldr	r2, [pc, #388]	@ (8007acc <HAL_DMA_Abort+0x24c>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d004      	beq.n	8007956 <HAL_DMA_Abort+0xd6>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a5f      	ldr	r2, [pc, #380]	@ (8007ad0 <HAL_DMA_Abort+0x250>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d101      	bne.n	800795a <HAL_DMA_Abort+0xda>
 8007956:	2301      	movs	r3, #1
 8007958:	e000      	b.n	800795c <HAL_DMA_Abort+0xdc>
 800795a:	2300      	movs	r3, #0
 800795c:	2b00      	cmp	r3, #0
 800795e:	d013      	beq.n	8007988 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	681a      	ldr	r2, [r3, #0]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f022 021e 	bic.w	r2, r2, #30
 800796e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	695a      	ldr	r2, [r3, #20]
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800797e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	617b      	str	r3, [r7, #20]
 8007986:	e00a      	b.n	800799e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	681a      	ldr	r2, [r3, #0]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f022 020e 	bic.w	r2, r2, #14
 8007996:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a3c      	ldr	r2, [pc, #240]	@ (8007a94 <HAL_DMA_Abort+0x214>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d072      	beq.n	8007a8e <HAL_DMA_Abort+0x20e>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a3a      	ldr	r2, [pc, #232]	@ (8007a98 <HAL_DMA_Abort+0x218>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d06d      	beq.n	8007a8e <HAL_DMA_Abort+0x20e>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a39      	ldr	r2, [pc, #228]	@ (8007a9c <HAL_DMA_Abort+0x21c>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d068      	beq.n	8007a8e <HAL_DMA_Abort+0x20e>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a37      	ldr	r2, [pc, #220]	@ (8007aa0 <HAL_DMA_Abort+0x220>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d063      	beq.n	8007a8e <HAL_DMA_Abort+0x20e>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a36      	ldr	r2, [pc, #216]	@ (8007aa4 <HAL_DMA_Abort+0x224>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d05e      	beq.n	8007a8e <HAL_DMA_Abort+0x20e>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a34      	ldr	r2, [pc, #208]	@ (8007aa8 <HAL_DMA_Abort+0x228>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d059      	beq.n	8007a8e <HAL_DMA_Abort+0x20e>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4a33      	ldr	r2, [pc, #204]	@ (8007aac <HAL_DMA_Abort+0x22c>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d054      	beq.n	8007a8e <HAL_DMA_Abort+0x20e>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4a31      	ldr	r2, [pc, #196]	@ (8007ab0 <HAL_DMA_Abort+0x230>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d04f      	beq.n	8007a8e <HAL_DMA_Abort+0x20e>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4a30      	ldr	r2, [pc, #192]	@ (8007ab4 <HAL_DMA_Abort+0x234>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d04a      	beq.n	8007a8e <HAL_DMA_Abort+0x20e>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a2e      	ldr	r2, [pc, #184]	@ (8007ab8 <HAL_DMA_Abort+0x238>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d045      	beq.n	8007a8e <HAL_DMA_Abort+0x20e>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4a2d      	ldr	r2, [pc, #180]	@ (8007abc <HAL_DMA_Abort+0x23c>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d040      	beq.n	8007a8e <HAL_DMA_Abort+0x20e>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a2b      	ldr	r2, [pc, #172]	@ (8007ac0 <HAL_DMA_Abort+0x240>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d03b      	beq.n	8007a8e <HAL_DMA_Abort+0x20e>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a2a      	ldr	r2, [pc, #168]	@ (8007ac4 <HAL_DMA_Abort+0x244>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d036      	beq.n	8007a8e <HAL_DMA_Abort+0x20e>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a28      	ldr	r2, [pc, #160]	@ (8007ac8 <HAL_DMA_Abort+0x248>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d031      	beq.n	8007a8e <HAL_DMA_Abort+0x20e>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4a27      	ldr	r2, [pc, #156]	@ (8007acc <HAL_DMA_Abort+0x24c>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d02c      	beq.n	8007a8e <HAL_DMA_Abort+0x20e>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4a25      	ldr	r2, [pc, #148]	@ (8007ad0 <HAL_DMA_Abort+0x250>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d027      	beq.n	8007a8e <HAL_DMA_Abort+0x20e>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4a24      	ldr	r2, [pc, #144]	@ (8007ad4 <HAL_DMA_Abort+0x254>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d022      	beq.n	8007a8e <HAL_DMA_Abort+0x20e>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a22      	ldr	r2, [pc, #136]	@ (8007ad8 <HAL_DMA_Abort+0x258>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d01d      	beq.n	8007a8e <HAL_DMA_Abort+0x20e>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a21      	ldr	r2, [pc, #132]	@ (8007adc <HAL_DMA_Abort+0x25c>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d018      	beq.n	8007a8e <HAL_DMA_Abort+0x20e>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a1f      	ldr	r2, [pc, #124]	@ (8007ae0 <HAL_DMA_Abort+0x260>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d013      	beq.n	8007a8e <HAL_DMA_Abort+0x20e>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a1e      	ldr	r2, [pc, #120]	@ (8007ae4 <HAL_DMA_Abort+0x264>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d00e      	beq.n	8007a8e <HAL_DMA_Abort+0x20e>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a1c      	ldr	r2, [pc, #112]	@ (8007ae8 <HAL_DMA_Abort+0x268>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d009      	beq.n	8007a8e <HAL_DMA_Abort+0x20e>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4a1b      	ldr	r2, [pc, #108]	@ (8007aec <HAL_DMA_Abort+0x26c>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d004      	beq.n	8007a8e <HAL_DMA_Abort+0x20e>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4a19      	ldr	r2, [pc, #100]	@ (8007af0 <HAL_DMA_Abort+0x270>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d132      	bne.n	8007af4 <HAL_DMA_Abort+0x274>
 8007a8e:	2301      	movs	r3, #1
 8007a90:	e031      	b.n	8007af6 <HAL_DMA_Abort+0x276>
 8007a92:	bf00      	nop
 8007a94:	40020010 	.word	0x40020010
 8007a98:	40020028 	.word	0x40020028
 8007a9c:	40020040 	.word	0x40020040
 8007aa0:	40020058 	.word	0x40020058
 8007aa4:	40020070 	.word	0x40020070
 8007aa8:	40020088 	.word	0x40020088
 8007aac:	400200a0 	.word	0x400200a0
 8007ab0:	400200b8 	.word	0x400200b8
 8007ab4:	40020410 	.word	0x40020410
 8007ab8:	40020428 	.word	0x40020428
 8007abc:	40020440 	.word	0x40020440
 8007ac0:	40020458 	.word	0x40020458
 8007ac4:	40020470 	.word	0x40020470
 8007ac8:	40020488 	.word	0x40020488
 8007acc:	400204a0 	.word	0x400204a0
 8007ad0:	400204b8 	.word	0x400204b8
 8007ad4:	58025408 	.word	0x58025408
 8007ad8:	5802541c 	.word	0x5802541c
 8007adc:	58025430 	.word	0x58025430
 8007ae0:	58025444 	.word	0x58025444
 8007ae4:	58025458 	.word	0x58025458
 8007ae8:	5802546c 	.word	0x5802546c
 8007aec:	58025480 	.word	0x58025480
 8007af0:	58025494 	.word	0x58025494
 8007af4:	2300      	movs	r3, #0
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d007      	beq.n	8007b0a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007afe:	681a      	ldr	r2, [r3, #0]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b04:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007b08:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a6d      	ldr	r2, [pc, #436]	@ (8007cc4 <HAL_DMA_Abort+0x444>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d04a      	beq.n	8007baa <HAL_DMA_Abort+0x32a>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a6b      	ldr	r2, [pc, #428]	@ (8007cc8 <HAL_DMA_Abort+0x448>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d045      	beq.n	8007baa <HAL_DMA_Abort+0x32a>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a6a      	ldr	r2, [pc, #424]	@ (8007ccc <HAL_DMA_Abort+0x44c>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d040      	beq.n	8007baa <HAL_DMA_Abort+0x32a>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a68      	ldr	r2, [pc, #416]	@ (8007cd0 <HAL_DMA_Abort+0x450>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d03b      	beq.n	8007baa <HAL_DMA_Abort+0x32a>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a67      	ldr	r2, [pc, #412]	@ (8007cd4 <HAL_DMA_Abort+0x454>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d036      	beq.n	8007baa <HAL_DMA_Abort+0x32a>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a65      	ldr	r2, [pc, #404]	@ (8007cd8 <HAL_DMA_Abort+0x458>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d031      	beq.n	8007baa <HAL_DMA_Abort+0x32a>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a64      	ldr	r2, [pc, #400]	@ (8007cdc <HAL_DMA_Abort+0x45c>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d02c      	beq.n	8007baa <HAL_DMA_Abort+0x32a>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a62      	ldr	r2, [pc, #392]	@ (8007ce0 <HAL_DMA_Abort+0x460>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d027      	beq.n	8007baa <HAL_DMA_Abort+0x32a>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4a61      	ldr	r2, [pc, #388]	@ (8007ce4 <HAL_DMA_Abort+0x464>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d022      	beq.n	8007baa <HAL_DMA_Abort+0x32a>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4a5f      	ldr	r2, [pc, #380]	@ (8007ce8 <HAL_DMA_Abort+0x468>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d01d      	beq.n	8007baa <HAL_DMA_Abort+0x32a>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a5e      	ldr	r2, [pc, #376]	@ (8007cec <HAL_DMA_Abort+0x46c>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d018      	beq.n	8007baa <HAL_DMA_Abort+0x32a>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a5c      	ldr	r2, [pc, #368]	@ (8007cf0 <HAL_DMA_Abort+0x470>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d013      	beq.n	8007baa <HAL_DMA_Abort+0x32a>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a5b      	ldr	r2, [pc, #364]	@ (8007cf4 <HAL_DMA_Abort+0x474>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d00e      	beq.n	8007baa <HAL_DMA_Abort+0x32a>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a59      	ldr	r2, [pc, #356]	@ (8007cf8 <HAL_DMA_Abort+0x478>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d009      	beq.n	8007baa <HAL_DMA_Abort+0x32a>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a58      	ldr	r2, [pc, #352]	@ (8007cfc <HAL_DMA_Abort+0x47c>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d004      	beq.n	8007baa <HAL_DMA_Abort+0x32a>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a56      	ldr	r2, [pc, #344]	@ (8007d00 <HAL_DMA_Abort+0x480>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d108      	bne.n	8007bbc <HAL_DMA_Abort+0x33c>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	681a      	ldr	r2, [r3, #0]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f022 0201 	bic.w	r2, r2, #1
 8007bb8:	601a      	str	r2, [r3, #0]
 8007bba:	e007      	b.n	8007bcc <HAL_DMA_Abort+0x34c>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	681a      	ldr	r2, [r3, #0]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f022 0201 	bic.w	r2, r2, #1
 8007bca:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007bcc:	e013      	b.n	8007bf6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007bce:	f7fe fed7 	bl	8006980 <HAL_GetTick>
 8007bd2:	4602      	mov	r2, r0
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	1ad3      	subs	r3, r2, r3
 8007bd8:	2b05      	cmp	r3, #5
 8007bda:	d90c      	bls.n	8007bf6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2220      	movs	r2, #32
 8007be0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2203      	movs	r2, #3
 8007be6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2200      	movs	r2, #0
 8007bee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	e12d      	b.n	8007e52 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f003 0301 	and.w	r3, r3, #1
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d1e5      	bne.n	8007bce <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a2f      	ldr	r2, [pc, #188]	@ (8007cc4 <HAL_DMA_Abort+0x444>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d04a      	beq.n	8007ca2 <HAL_DMA_Abort+0x422>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a2d      	ldr	r2, [pc, #180]	@ (8007cc8 <HAL_DMA_Abort+0x448>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d045      	beq.n	8007ca2 <HAL_DMA_Abort+0x422>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a2c      	ldr	r2, [pc, #176]	@ (8007ccc <HAL_DMA_Abort+0x44c>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d040      	beq.n	8007ca2 <HAL_DMA_Abort+0x422>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a2a      	ldr	r2, [pc, #168]	@ (8007cd0 <HAL_DMA_Abort+0x450>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d03b      	beq.n	8007ca2 <HAL_DMA_Abort+0x422>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4a29      	ldr	r2, [pc, #164]	@ (8007cd4 <HAL_DMA_Abort+0x454>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d036      	beq.n	8007ca2 <HAL_DMA_Abort+0x422>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a27      	ldr	r2, [pc, #156]	@ (8007cd8 <HAL_DMA_Abort+0x458>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d031      	beq.n	8007ca2 <HAL_DMA_Abort+0x422>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4a26      	ldr	r2, [pc, #152]	@ (8007cdc <HAL_DMA_Abort+0x45c>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d02c      	beq.n	8007ca2 <HAL_DMA_Abort+0x422>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a24      	ldr	r2, [pc, #144]	@ (8007ce0 <HAL_DMA_Abort+0x460>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d027      	beq.n	8007ca2 <HAL_DMA_Abort+0x422>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a23      	ldr	r2, [pc, #140]	@ (8007ce4 <HAL_DMA_Abort+0x464>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d022      	beq.n	8007ca2 <HAL_DMA_Abort+0x422>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a21      	ldr	r2, [pc, #132]	@ (8007ce8 <HAL_DMA_Abort+0x468>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d01d      	beq.n	8007ca2 <HAL_DMA_Abort+0x422>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a20      	ldr	r2, [pc, #128]	@ (8007cec <HAL_DMA_Abort+0x46c>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d018      	beq.n	8007ca2 <HAL_DMA_Abort+0x422>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a1e      	ldr	r2, [pc, #120]	@ (8007cf0 <HAL_DMA_Abort+0x470>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d013      	beq.n	8007ca2 <HAL_DMA_Abort+0x422>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a1d      	ldr	r2, [pc, #116]	@ (8007cf4 <HAL_DMA_Abort+0x474>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d00e      	beq.n	8007ca2 <HAL_DMA_Abort+0x422>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a1b      	ldr	r2, [pc, #108]	@ (8007cf8 <HAL_DMA_Abort+0x478>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d009      	beq.n	8007ca2 <HAL_DMA_Abort+0x422>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4a1a      	ldr	r2, [pc, #104]	@ (8007cfc <HAL_DMA_Abort+0x47c>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d004      	beq.n	8007ca2 <HAL_DMA_Abort+0x422>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4a18      	ldr	r2, [pc, #96]	@ (8007d00 <HAL_DMA_Abort+0x480>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d101      	bne.n	8007ca6 <HAL_DMA_Abort+0x426>
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	e000      	b.n	8007ca8 <HAL_DMA_Abort+0x428>
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d02b      	beq.n	8007d04 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cb0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007cb6:	f003 031f 	and.w	r3, r3, #31
 8007cba:	223f      	movs	r2, #63	@ 0x3f
 8007cbc:	409a      	lsls	r2, r3
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	609a      	str	r2, [r3, #8]
 8007cc2:	e02a      	b.n	8007d1a <HAL_DMA_Abort+0x49a>
 8007cc4:	40020010 	.word	0x40020010
 8007cc8:	40020028 	.word	0x40020028
 8007ccc:	40020040 	.word	0x40020040
 8007cd0:	40020058 	.word	0x40020058
 8007cd4:	40020070 	.word	0x40020070
 8007cd8:	40020088 	.word	0x40020088
 8007cdc:	400200a0 	.word	0x400200a0
 8007ce0:	400200b8 	.word	0x400200b8
 8007ce4:	40020410 	.word	0x40020410
 8007ce8:	40020428 	.word	0x40020428
 8007cec:	40020440 	.word	0x40020440
 8007cf0:	40020458 	.word	0x40020458
 8007cf4:	40020470 	.word	0x40020470
 8007cf8:	40020488 	.word	0x40020488
 8007cfc:	400204a0 	.word	0x400204a0
 8007d00:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d08:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d0e:	f003 031f 	and.w	r3, r3, #31
 8007d12:	2201      	movs	r2, #1
 8007d14:	409a      	lsls	r2, r3
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a4f      	ldr	r2, [pc, #316]	@ (8007e5c <HAL_DMA_Abort+0x5dc>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d072      	beq.n	8007e0a <HAL_DMA_Abort+0x58a>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4a4d      	ldr	r2, [pc, #308]	@ (8007e60 <HAL_DMA_Abort+0x5e0>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d06d      	beq.n	8007e0a <HAL_DMA_Abort+0x58a>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4a4c      	ldr	r2, [pc, #304]	@ (8007e64 <HAL_DMA_Abort+0x5e4>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d068      	beq.n	8007e0a <HAL_DMA_Abort+0x58a>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a4a      	ldr	r2, [pc, #296]	@ (8007e68 <HAL_DMA_Abort+0x5e8>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d063      	beq.n	8007e0a <HAL_DMA_Abort+0x58a>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a49      	ldr	r2, [pc, #292]	@ (8007e6c <HAL_DMA_Abort+0x5ec>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d05e      	beq.n	8007e0a <HAL_DMA_Abort+0x58a>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a47      	ldr	r2, [pc, #284]	@ (8007e70 <HAL_DMA_Abort+0x5f0>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d059      	beq.n	8007e0a <HAL_DMA_Abort+0x58a>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4a46      	ldr	r2, [pc, #280]	@ (8007e74 <HAL_DMA_Abort+0x5f4>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d054      	beq.n	8007e0a <HAL_DMA_Abort+0x58a>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a44      	ldr	r2, [pc, #272]	@ (8007e78 <HAL_DMA_Abort+0x5f8>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d04f      	beq.n	8007e0a <HAL_DMA_Abort+0x58a>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4a43      	ldr	r2, [pc, #268]	@ (8007e7c <HAL_DMA_Abort+0x5fc>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d04a      	beq.n	8007e0a <HAL_DMA_Abort+0x58a>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4a41      	ldr	r2, [pc, #260]	@ (8007e80 <HAL_DMA_Abort+0x600>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d045      	beq.n	8007e0a <HAL_DMA_Abort+0x58a>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4a40      	ldr	r2, [pc, #256]	@ (8007e84 <HAL_DMA_Abort+0x604>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d040      	beq.n	8007e0a <HAL_DMA_Abort+0x58a>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a3e      	ldr	r2, [pc, #248]	@ (8007e88 <HAL_DMA_Abort+0x608>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d03b      	beq.n	8007e0a <HAL_DMA_Abort+0x58a>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a3d      	ldr	r2, [pc, #244]	@ (8007e8c <HAL_DMA_Abort+0x60c>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d036      	beq.n	8007e0a <HAL_DMA_Abort+0x58a>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a3b      	ldr	r2, [pc, #236]	@ (8007e90 <HAL_DMA_Abort+0x610>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d031      	beq.n	8007e0a <HAL_DMA_Abort+0x58a>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a3a      	ldr	r2, [pc, #232]	@ (8007e94 <HAL_DMA_Abort+0x614>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d02c      	beq.n	8007e0a <HAL_DMA_Abort+0x58a>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a38      	ldr	r2, [pc, #224]	@ (8007e98 <HAL_DMA_Abort+0x618>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d027      	beq.n	8007e0a <HAL_DMA_Abort+0x58a>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a37      	ldr	r2, [pc, #220]	@ (8007e9c <HAL_DMA_Abort+0x61c>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d022      	beq.n	8007e0a <HAL_DMA_Abort+0x58a>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a35      	ldr	r2, [pc, #212]	@ (8007ea0 <HAL_DMA_Abort+0x620>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d01d      	beq.n	8007e0a <HAL_DMA_Abort+0x58a>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a34      	ldr	r2, [pc, #208]	@ (8007ea4 <HAL_DMA_Abort+0x624>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d018      	beq.n	8007e0a <HAL_DMA_Abort+0x58a>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a32      	ldr	r2, [pc, #200]	@ (8007ea8 <HAL_DMA_Abort+0x628>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d013      	beq.n	8007e0a <HAL_DMA_Abort+0x58a>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a31      	ldr	r2, [pc, #196]	@ (8007eac <HAL_DMA_Abort+0x62c>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d00e      	beq.n	8007e0a <HAL_DMA_Abort+0x58a>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a2f      	ldr	r2, [pc, #188]	@ (8007eb0 <HAL_DMA_Abort+0x630>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d009      	beq.n	8007e0a <HAL_DMA_Abort+0x58a>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a2e      	ldr	r2, [pc, #184]	@ (8007eb4 <HAL_DMA_Abort+0x634>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d004      	beq.n	8007e0a <HAL_DMA_Abort+0x58a>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a2c      	ldr	r2, [pc, #176]	@ (8007eb8 <HAL_DMA_Abort+0x638>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d101      	bne.n	8007e0e <HAL_DMA_Abort+0x58e>
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	e000      	b.n	8007e10 <HAL_DMA_Abort+0x590>
 8007e0e:	2300      	movs	r3, #0
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d015      	beq.n	8007e40 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e18:	687a      	ldr	r2, [r7, #4]
 8007e1a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007e1c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d00c      	beq.n	8007e40 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e2a:	681a      	ldr	r2, [r3, #0]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e30:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007e34:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e3a:	687a      	ldr	r2, [r7, #4]
 8007e3c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007e3e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2201      	movs	r2, #1
 8007e44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8007e50:	2300      	movs	r3, #0
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3718      	adds	r7, #24
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}
 8007e5a:	bf00      	nop
 8007e5c:	40020010 	.word	0x40020010
 8007e60:	40020028 	.word	0x40020028
 8007e64:	40020040 	.word	0x40020040
 8007e68:	40020058 	.word	0x40020058
 8007e6c:	40020070 	.word	0x40020070
 8007e70:	40020088 	.word	0x40020088
 8007e74:	400200a0 	.word	0x400200a0
 8007e78:	400200b8 	.word	0x400200b8
 8007e7c:	40020410 	.word	0x40020410
 8007e80:	40020428 	.word	0x40020428
 8007e84:	40020440 	.word	0x40020440
 8007e88:	40020458 	.word	0x40020458
 8007e8c:	40020470 	.word	0x40020470
 8007e90:	40020488 	.word	0x40020488
 8007e94:	400204a0 	.word	0x400204a0
 8007e98:	400204b8 	.word	0x400204b8
 8007e9c:	58025408 	.word	0x58025408
 8007ea0:	5802541c 	.word	0x5802541c
 8007ea4:	58025430 	.word	0x58025430
 8007ea8:	58025444 	.word	0x58025444
 8007eac:	58025458 	.word	0x58025458
 8007eb0:	5802546c 	.word	0x5802546c
 8007eb4:	58025480 	.word	0x58025480
 8007eb8:	58025494 	.word	0x58025494

08007ebc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b084      	sub	sp, #16
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d101      	bne.n	8007ece <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8007eca:	2301      	movs	r3, #1
 8007ecc:	e237      	b.n	800833e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007ed4:	b2db      	uxtb	r3, r3
 8007ed6:	2b02      	cmp	r3, #2
 8007ed8:	d004      	beq.n	8007ee4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2280      	movs	r2, #128	@ 0x80
 8007ede:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	e22c      	b.n	800833e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a5c      	ldr	r2, [pc, #368]	@ (800805c <HAL_DMA_Abort_IT+0x1a0>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d04a      	beq.n	8007f84 <HAL_DMA_Abort_IT+0xc8>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a5b      	ldr	r2, [pc, #364]	@ (8008060 <HAL_DMA_Abort_IT+0x1a4>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d045      	beq.n	8007f84 <HAL_DMA_Abort_IT+0xc8>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a59      	ldr	r2, [pc, #356]	@ (8008064 <HAL_DMA_Abort_IT+0x1a8>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d040      	beq.n	8007f84 <HAL_DMA_Abort_IT+0xc8>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a58      	ldr	r2, [pc, #352]	@ (8008068 <HAL_DMA_Abort_IT+0x1ac>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d03b      	beq.n	8007f84 <HAL_DMA_Abort_IT+0xc8>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a56      	ldr	r2, [pc, #344]	@ (800806c <HAL_DMA_Abort_IT+0x1b0>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d036      	beq.n	8007f84 <HAL_DMA_Abort_IT+0xc8>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a55      	ldr	r2, [pc, #340]	@ (8008070 <HAL_DMA_Abort_IT+0x1b4>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d031      	beq.n	8007f84 <HAL_DMA_Abort_IT+0xc8>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4a53      	ldr	r2, [pc, #332]	@ (8008074 <HAL_DMA_Abort_IT+0x1b8>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d02c      	beq.n	8007f84 <HAL_DMA_Abort_IT+0xc8>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a52      	ldr	r2, [pc, #328]	@ (8008078 <HAL_DMA_Abort_IT+0x1bc>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d027      	beq.n	8007f84 <HAL_DMA_Abort_IT+0xc8>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a50      	ldr	r2, [pc, #320]	@ (800807c <HAL_DMA_Abort_IT+0x1c0>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d022      	beq.n	8007f84 <HAL_DMA_Abort_IT+0xc8>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a4f      	ldr	r2, [pc, #316]	@ (8008080 <HAL_DMA_Abort_IT+0x1c4>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d01d      	beq.n	8007f84 <HAL_DMA_Abort_IT+0xc8>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a4d      	ldr	r2, [pc, #308]	@ (8008084 <HAL_DMA_Abort_IT+0x1c8>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d018      	beq.n	8007f84 <HAL_DMA_Abort_IT+0xc8>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4a4c      	ldr	r2, [pc, #304]	@ (8008088 <HAL_DMA_Abort_IT+0x1cc>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d013      	beq.n	8007f84 <HAL_DMA_Abort_IT+0xc8>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a4a      	ldr	r2, [pc, #296]	@ (800808c <HAL_DMA_Abort_IT+0x1d0>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d00e      	beq.n	8007f84 <HAL_DMA_Abort_IT+0xc8>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4a49      	ldr	r2, [pc, #292]	@ (8008090 <HAL_DMA_Abort_IT+0x1d4>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d009      	beq.n	8007f84 <HAL_DMA_Abort_IT+0xc8>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4a47      	ldr	r2, [pc, #284]	@ (8008094 <HAL_DMA_Abort_IT+0x1d8>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d004      	beq.n	8007f84 <HAL_DMA_Abort_IT+0xc8>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a46      	ldr	r2, [pc, #280]	@ (8008098 <HAL_DMA_Abort_IT+0x1dc>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d101      	bne.n	8007f88 <HAL_DMA_Abort_IT+0xcc>
 8007f84:	2301      	movs	r3, #1
 8007f86:	e000      	b.n	8007f8a <HAL_DMA_Abort_IT+0xce>
 8007f88:	2300      	movs	r3, #0
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	f000 8086 	beq.w	800809c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2204      	movs	r2, #4
 8007f94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a2f      	ldr	r2, [pc, #188]	@ (800805c <HAL_DMA_Abort_IT+0x1a0>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d04a      	beq.n	8008038 <HAL_DMA_Abort_IT+0x17c>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4a2e      	ldr	r2, [pc, #184]	@ (8008060 <HAL_DMA_Abort_IT+0x1a4>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d045      	beq.n	8008038 <HAL_DMA_Abort_IT+0x17c>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4a2c      	ldr	r2, [pc, #176]	@ (8008064 <HAL_DMA_Abort_IT+0x1a8>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d040      	beq.n	8008038 <HAL_DMA_Abort_IT+0x17c>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a2b      	ldr	r2, [pc, #172]	@ (8008068 <HAL_DMA_Abort_IT+0x1ac>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d03b      	beq.n	8008038 <HAL_DMA_Abort_IT+0x17c>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a29      	ldr	r2, [pc, #164]	@ (800806c <HAL_DMA_Abort_IT+0x1b0>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d036      	beq.n	8008038 <HAL_DMA_Abort_IT+0x17c>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a28      	ldr	r2, [pc, #160]	@ (8008070 <HAL_DMA_Abort_IT+0x1b4>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d031      	beq.n	8008038 <HAL_DMA_Abort_IT+0x17c>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a26      	ldr	r2, [pc, #152]	@ (8008074 <HAL_DMA_Abort_IT+0x1b8>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d02c      	beq.n	8008038 <HAL_DMA_Abort_IT+0x17c>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a25      	ldr	r2, [pc, #148]	@ (8008078 <HAL_DMA_Abort_IT+0x1bc>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d027      	beq.n	8008038 <HAL_DMA_Abort_IT+0x17c>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a23      	ldr	r2, [pc, #140]	@ (800807c <HAL_DMA_Abort_IT+0x1c0>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d022      	beq.n	8008038 <HAL_DMA_Abort_IT+0x17c>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4a22      	ldr	r2, [pc, #136]	@ (8008080 <HAL_DMA_Abort_IT+0x1c4>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d01d      	beq.n	8008038 <HAL_DMA_Abort_IT+0x17c>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4a20      	ldr	r2, [pc, #128]	@ (8008084 <HAL_DMA_Abort_IT+0x1c8>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d018      	beq.n	8008038 <HAL_DMA_Abort_IT+0x17c>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a1f      	ldr	r2, [pc, #124]	@ (8008088 <HAL_DMA_Abort_IT+0x1cc>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d013      	beq.n	8008038 <HAL_DMA_Abort_IT+0x17c>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a1d      	ldr	r2, [pc, #116]	@ (800808c <HAL_DMA_Abort_IT+0x1d0>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d00e      	beq.n	8008038 <HAL_DMA_Abort_IT+0x17c>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a1c      	ldr	r2, [pc, #112]	@ (8008090 <HAL_DMA_Abort_IT+0x1d4>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d009      	beq.n	8008038 <HAL_DMA_Abort_IT+0x17c>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a1a      	ldr	r2, [pc, #104]	@ (8008094 <HAL_DMA_Abort_IT+0x1d8>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d004      	beq.n	8008038 <HAL_DMA_Abort_IT+0x17c>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4a19      	ldr	r2, [pc, #100]	@ (8008098 <HAL_DMA_Abort_IT+0x1dc>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d108      	bne.n	800804a <HAL_DMA_Abort_IT+0x18e>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	681a      	ldr	r2, [r3, #0]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f022 0201 	bic.w	r2, r2, #1
 8008046:	601a      	str	r2, [r3, #0]
 8008048:	e178      	b.n	800833c <HAL_DMA_Abort_IT+0x480>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	681a      	ldr	r2, [r3, #0]
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f022 0201 	bic.w	r2, r2, #1
 8008058:	601a      	str	r2, [r3, #0]
 800805a:	e16f      	b.n	800833c <HAL_DMA_Abort_IT+0x480>
 800805c:	40020010 	.word	0x40020010
 8008060:	40020028 	.word	0x40020028
 8008064:	40020040 	.word	0x40020040
 8008068:	40020058 	.word	0x40020058
 800806c:	40020070 	.word	0x40020070
 8008070:	40020088 	.word	0x40020088
 8008074:	400200a0 	.word	0x400200a0
 8008078:	400200b8 	.word	0x400200b8
 800807c:	40020410 	.word	0x40020410
 8008080:	40020428 	.word	0x40020428
 8008084:	40020440 	.word	0x40020440
 8008088:	40020458 	.word	0x40020458
 800808c:	40020470 	.word	0x40020470
 8008090:	40020488 	.word	0x40020488
 8008094:	400204a0 	.word	0x400204a0
 8008098:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	681a      	ldr	r2, [r3, #0]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f022 020e 	bic.w	r2, r2, #14
 80080aa:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a6c      	ldr	r2, [pc, #432]	@ (8008264 <HAL_DMA_Abort_IT+0x3a8>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d04a      	beq.n	800814c <HAL_DMA_Abort_IT+0x290>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4a6b      	ldr	r2, [pc, #428]	@ (8008268 <HAL_DMA_Abort_IT+0x3ac>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d045      	beq.n	800814c <HAL_DMA_Abort_IT+0x290>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a69      	ldr	r2, [pc, #420]	@ (800826c <HAL_DMA_Abort_IT+0x3b0>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d040      	beq.n	800814c <HAL_DMA_Abort_IT+0x290>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4a68      	ldr	r2, [pc, #416]	@ (8008270 <HAL_DMA_Abort_IT+0x3b4>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d03b      	beq.n	800814c <HAL_DMA_Abort_IT+0x290>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a66      	ldr	r2, [pc, #408]	@ (8008274 <HAL_DMA_Abort_IT+0x3b8>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d036      	beq.n	800814c <HAL_DMA_Abort_IT+0x290>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4a65      	ldr	r2, [pc, #404]	@ (8008278 <HAL_DMA_Abort_IT+0x3bc>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d031      	beq.n	800814c <HAL_DMA_Abort_IT+0x290>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a63      	ldr	r2, [pc, #396]	@ (800827c <HAL_DMA_Abort_IT+0x3c0>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d02c      	beq.n	800814c <HAL_DMA_Abort_IT+0x290>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4a62      	ldr	r2, [pc, #392]	@ (8008280 <HAL_DMA_Abort_IT+0x3c4>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d027      	beq.n	800814c <HAL_DMA_Abort_IT+0x290>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a60      	ldr	r2, [pc, #384]	@ (8008284 <HAL_DMA_Abort_IT+0x3c8>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d022      	beq.n	800814c <HAL_DMA_Abort_IT+0x290>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a5f      	ldr	r2, [pc, #380]	@ (8008288 <HAL_DMA_Abort_IT+0x3cc>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d01d      	beq.n	800814c <HAL_DMA_Abort_IT+0x290>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a5d      	ldr	r2, [pc, #372]	@ (800828c <HAL_DMA_Abort_IT+0x3d0>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d018      	beq.n	800814c <HAL_DMA_Abort_IT+0x290>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4a5c      	ldr	r2, [pc, #368]	@ (8008290 <HAL_DMA_Abort_IT+0x3d4>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d013      	beq.n	800814c <HAL_DMA_Abort_IT+0x290>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a5a      	ldr	r2, [pc, #360]	@ (8008294 <HAL_DMA_Abort_IT+0x3d8>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d00e      	beq.n	800814c <HAL_DMA_Abort_IT+0x290>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a59      	ldr	r2, [pc, #356]	@ (8008298 <HAL_DMA_Abort_IT+0x3dc>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d009      	beq.n	800814c <HAL_DMA_Abort_IT+0x290>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a57      	ldr	r2, [pc, #348]	@ (800829c <HAL_DMA_Abort_IT+0x3e0>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d004      	beq.n	800814c <HAL_DMA_Abort_IT+0x290>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a56      	ldr	r2, [pc, #344]	@ (80082a0 <HAL_DMA_Abort_IT+0x3e4>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d108      	bne.n	800815e <HAL_DMA_Abort_IT+0x2a2>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	681a      	ldr	r2, [r3, #0]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f022 0201 	bic.w	r2, r2, #1
 800815a:	601a      	str	r2, [r3, #0]
 800815c:	e007      	b.n	800816e <HAL_DMA_Abort_IT+0x2b2>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	681a      	ldr	r2, [r3, #0]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f022 0201 	bic.w	r2, r2, #1
 800816c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4a3c      	ldr	r2, [pc, #240]	@ (8008264 <HAL_DMA_Abort_IT+0x3a8>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d072      	beq.n	800825e <HAL_DMA_Abort_IT+0x3a2>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a3a      	ldr	r2, [pc, #232]	@ (8008268 <HAL_DMA_Abort_IT+0x3ac>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d06d      	beq.n	800825e <HAL_DMA_Abort_IT+0x3a2>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a39      	ldr	r2, [pc, #228]	@ (800826c <HAL_DMA_Abort_IT+0x3b0>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d068      	beq.n	800825e <HAL_DMA_Abort_IT+0x3a2>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a37      	ldr	r2, [pc, #220]	@ (8008270 <HAL_DMA_Abort_IT+0x3b4>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d063      	beq.n	800825e <HAL_DMA_Abort_IT+0x3a2>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a36      	ldr	r2, [pc, #216]	@ (8008274 <HAL_DMA_Abort_IT+0x3b8>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d05e      	beq.n	800825e <HAL_DMA_Abort_IT+0x3a2>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4a34      	ldr	r2, [pc, #208]	@ (8008278 <HAL_DMA_Abort_IT+0x3bc>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d059      	beq.n	800825e <HAL_DMA_Abort_IT+0x3a2>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a33      	ldr	r2, [pc, #204]	@ (800827c <HAL_DMA_Abort_IT+0x3c0>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d054      	beq.n	800825e <HAL_DMA_Abort_IT+0x3a2>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4a31      	ldr	r2, [pc, #196]	@ (8008280 <HAL_DMA_Abort_IT+0x3c4>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d04f      	beq.n	800825e <HAL_DMA_Abort_IT+0x3a2>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4a30      	ldr	r2, [pc, #192]	@ (8008284 <HAL_DMA_Abort_IT+0x3c8>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d04a      	beq.n	800825e <HAL_DMA_Abort_IT+0x3a2>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a2e      	ldr	r2, [pc, #184]	@ (8008288 <HAL_DMA_Abort_IT+0x3cc>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d045      	beq.n	800825e <HAL_DMA_Abort_IT+0x3a2>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	4a2d      	ldr	r2, [pc, #180]	@ (800828c <HAL_DMA_Abort_IT+0x3d0>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d040      	beq.n	800825e <HAL_DMA_Abort_IT+0x3a2>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a2b      	ldr	r2, [pc, #172]	@ (8008290 <HAL_DMA_Abort_IT+0x3d4>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d03b      	beq.n	800825e <HAL_DMA_Abort_IT+0x3a2>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a2a      	ldr	r2, [pc, #168]	@ (8008294 <HAL_DMA_Abort_IT+0x3d8>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d036      	beq.n	800825e <HAL_DMA_Abort_IT+0x3a2>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a28      	ldr	r2, [pc, #160]	@ (8008298 <HAL_DMA_Abort_IT+0x3dc>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d031      	beq.n	800825e <HAL_DMA_Abort_IT+0x3a2>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4a27      	ldr	r2, [pc, #156]	@ (800829c <HAL_DMA_Abort_IT+0x3e0>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d02c      	beq.n	800825e <HAL_DMA_Abort_IT+0x3a2>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4a25      	ldr	r2, [pc, #148]	@ (80082a0 <HAL_DMA_Abort_IT+0x3e4>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d027      	beq.n	800825e <HAL_DMA_Abort_IT+0x3a2>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4a24      	ldr	r2, [pc, #144]	@ (80082a4 <HAL_DMA_Abort_IT+0x3e8>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d022      	beq.n	800825e <HAL_DMA_Abort_IT+0x3a2>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4a22      	ldr	r2, [pc, #136]	@ (80082a8 <HAL_DMA_Abort_IT+0x3ec>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d01d      	beq.n	800825e <HAL_DMA_Abort_IT+0x3a2>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4a21      	ldr	r2, [pc, #132]	@ (80082ac <HAL_DMA_Abort_IT+0x3f0>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d018      	beq.n	800825e <HAL_DMA_Abort_IT+0x3a2>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4a1f      	ldr	r2, [pc, #124]	@ (80082b0 <HAL_DMA_Abort_IT+0x3f4>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d013      	beq.n	800825e <HAL_DMA_Abort_IT+0x3a2>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4a1e      	ldr	r2, [pc, #120]	@ (80082b4 <HAL_DMA_Abort_IT+0x3f8>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d00e      	beq.n	800825e <HAL_DMA_Abort_IT+0x3a2>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4a1c      	ldr	r2, [pc, #112]	@ (80082b8 <HAL_DMA_Abort_IT+0x3fc>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d009      	beq.n	800825e <HAL_DMA_Abort_IT+0x3a2>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4a1b      	ldr	r2, [pc, #108]	@ (80082bc <HAL_DMA_Abort_IT+0x400>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d004      	beq.n	800825e <HAL_DMA_Abort_IT+0x3a2>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4a19      	ldr	r2, [pc, #100]	@ (80082c0 <HAL_DMA_Abort_IT+0x404>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d132      	bne.n	80082c4 <HAL_DMA_Abort_IT+0x408>
 800825e:	2301      	movs	r3, #1
 8008260:	e031      	b.n	80082c6 <HAL_DMA_Abort_IT+0x40a>
 8008262:	bf00      	nop
 8008264:	40020010 	.word	0x40020010
 8008268:	40020028 	.word	0x40020028
 800826c:	40020040 	.word	0x40020040
 8008270:	40020058 	.word	0x40020058
 8008274:	40020070 	.word	0x40020070
 8008278:	40020088 	.word	0x40020088
 800827c:	400200a0 	.word	0x400200a0
 8008280:	400200b8 	.word	0x400200b8
 8008284:	40020410 	.word	0x40020410
 8008288:	40020428 	.word	0x40020428
 800828c:	40020440 	.word	0x40020440
 8008290:	40020458 	.word	0x40020458
 8008294:	40020470 	.word	0x40020470
 8008298:	40020488 	.word	0x40020488
 800829c:	400204a0 	.word	0x400204a0
 80082a0:	400204b8 	.word	0x400204b8
 80082a4:	58025408 	.word	0x58025408
 80082a8:	5802541c 	.word	0x5802541c
 80082ac:	58025430 	.word	0x58025430
 80082b0:	58025444 	.word	0x58025444
 80082b4:	58025458 	.word	0x58025458
 80082b8:	5802546c 	.word	0x5802546c
 80082bc:	58025480 	.word	0x58025480
 80082c0:	58025494 	.word	0x58025494
 80082c4:	2300      	movs	r3, #0
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d028      	beq.n	800831c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80082ce:	681a      	ldr	r2, [r3, #0]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80082d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80082d8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082de:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80082e4:	f003 031f 	and.w	r3, r3, #31
 80082e8:	2201      	movs	r2, #1
 80082ea:	409a      	lsls	r2, r3
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80082f4:	687a      	ldr	r2, [r7, #4]
 80082f6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80082f8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d00c      	beq.n	800831c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008306:	681a      	ldr	r2, [r3, #0]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800830c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008310:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008316:	687a      	ldr	r2, [r7, #4]
 8008318:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800831a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2201      	movs	r2, #1
 8008320:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2200      	movs	r2, #0
 8008328:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008330:	2b00      	cmp	r3, #0
 8008332:	d003      	beq.n	800833c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800833c:	2300      	movs	r3, #0
}
 800833e:	4618      	mov	r0, r3
 8008340:	3710      	adds	r7, #16
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}
 8008346:	bf00      	nop

08008348 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b08a      	sub	sp, #40	@ 0x28
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8008350:	2300      	movs	r3, #0
 8008352:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008354:	4b67      	ldr	r3, [pc, #412]	@ (80084f4 <HAL_DMA_IRQHandler+0x1ac>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4a67      	ldr	r2, [pc, #412]	@ (80084f8 <HAL_DMA_IRQHandler+0x1b0>)
 800835a:	fba2 2303 	umull	r2, r3, r2, r3
 800835e:	0a9b      	lsrs	r3, r3, #10
 8008360:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008366:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800836c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800836e:	6a3b      	ldr	r3, [r7, #32]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8008374:	69fb      	ldr	r3, [r7, #28]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a5f      	ldr	r2, [pc, #380]	@ (80084fc <HAL_DMA_IRQHandler+0x1b4>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d04a      	beq.n	800841a <HAL_DMA_IRQHandler+0xd2>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4a5d      	ldr	r2, [pc, #372]	@ (8008500 <HAL_DMA_IRQHandler+0x1b8>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d045      	beq.n	800841a <HAL_DMA_IRQHandler+0xd2>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4a5c      	ldr	r2, [pc, #368]	@ (8008504 <HAL_DMA_IRQHandler+0x1bc>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d040      	beq.n	800841a <HAL_DMA_IRQHandler+0xd2>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a5a      	ldr	r2, [pc, #360]	@ (8008508 <HAL_DMA_IRQHandler+0x1c0>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d03b      	beq.n	800841a <HAL_DMA_IRQHandler+0xd2>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a59      	ldr	r2, [pc, #356]	@ (800850c <HAL_DMA_IRQHandler+0x1c4>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d036      	beq.n	800841a <HAL_DMA_IRQHandler+0xd2>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a57      	ldr	r2, [pc, #348]	@ (8008510 <HAL_DMA_IRQHandler+0x1c8>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d031      	beq.n	800841a <HAL_DMA_IRQHandler+0xd2>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4a56      	ldr	r2, [pc, #344]	@ (8008514 <HAL_DMA_IRQHandler+0x1cc>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d02c      	beq.n	800841a <HAL_DMA_IRQHandler+0xd2>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4a54      	ldr	r2, [pc, #336]	@ (8008518 <HAL_DMA_IRQHandler+0x1d0>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d027      	beq.n	800841a <HAL_DMA_IRQHandler+0xd2>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4a53      	ldr	r2, [pc, #332]	@ (800851c <HAL_DMA_IRQHandler+0x1d4>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d022      	beq.n	800841a <HAL_DMA_IRQHandler+0xd2>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a51      	ldr	r2, [pc, #324]	@ (8008520 <HAL_DMA_IRQHandler+0x1d8>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d01d      	beq.n	800841a <HAL_DMA_IRQHandler+0xd2>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4a50      	ldr	r2, [pc, #320]	@ (8008524 <HAL_DMA_IRQHandler+0x1dc>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d018      	beq.n	800841a <HAL_DMA_IRQHandler+0xd2>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a4e      	ldr	r2, [pc, #312]	@ (8008528 <HAL_DMA_IRQHandler+0x1e0>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d013      	beq.n	800841a <HAL_DMA_IRQHandler+0xd2>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4a4d      	ldr	r2, [pc, #308]	@ (800852c <HAL_DMA_IRQHandler+0x1e4>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d00e      	beq.n	800841a <HAL_DMA_IRQHandler+0xd2>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a4b      	ldr	r2, [pc, #300]	@ (8008530 <HAL_DMA_IRQHandler+0x1e8>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d009      	beq.n	800841a <HAL_DMA_IRQHandler+0xd2>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4a4a      	ldr	r2, [pc, #296]	@ (8008534 <HAL_DMA_IRQHandler+0x1ec>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d004      	beq.n	800841a <HAL_DMA_IRQHandler+0xd2>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4a48      	ldr	r2, [pc, #288]	@ (8008538 <HAL_DMA_IRQHandler+0x1f0>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d101      	bne.n	800841e <HAL_DMA_IRQHandler+0xd6>
 800841a:	2301      	movs	r3, #1
 800841c:	e000      	b.n	8008420 <HAL_DMA_IRQHandler+0xd8>
 800841e:	2300      	movs	r3, #0
 8008420:	2b00      	cmp	r3, #0
 8008422:	f000 842b 	beq.w	8008c7c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800842a:	f003 031f 	and.w	r3, r3, #31
 800842e:	2208      	movs	r2, #8
 8008430:	409a      	lsls	r2, r3
 8008432:	69bb      	ldr	r3, [r7, #24]
 8008434:	4013      	ands	r3, r2
 8008436:	2b00      	cmp	r3, #0
 8008438:	f000 80a2 	beq.w	8008580 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a2e      	ldr	r2, [pc, #184]	@ (80084fc <HAL_DMA_IRQHandler+0x1b4>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d04a      	beq.n	80084dc <HAL_DMA_IRQHandler+0x194>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4a2d      	ldr	r2, [pc, #180]	@ (8008500 <HAL_DMA_IRQHandler+0x1b8>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d045      	beq.n	80084dc <HAL_DMA_IRQHandler+0x194>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a2b      	ldr	r2, [pc, #172]	@ (8008504 <HAL_DMA_IRQHandler+0x1bc>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d040      	beq.n	80084dc <HAL_DMA_IRQHandler+0x194>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4a2a      	ldr	r2, [pc, #168]	@ (8008508 <HAL_DMA_IRQHandler+0x1c0>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d03b      	beq.n	80084dc <HAL_DMA_IRQHandler+0x194>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4a28      	ldr	r2, [pc, #160]	@ (800850c <HAL_DMA_IRQHandler+0x1c4>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d036      	beq.n	80084dc <HAL_DMA_IRQHandler+0x194>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4a27      	ldr	r2, [pc, #156]	@ (8008510 <HAL_DMA_IRQHandler+0x1c8>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d031      	beq.n	80084dc <HAL_DMA_IRQHandler+0x194>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a25      	ldr	r2, [pc, #148]	@ (8008514 <HAL_DMA_IRQHandler+0x1cc>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d02c      	beq.n	80084dc <HAL_DMA_IRQHandler+0x194>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4a24      	ldr	r2, [pc, #144]	@ (8008518 <HAL_DMA_IRQHandler+0x1d0>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d027      	beq.n	80084dc <HAL_DMA_IRQHandler+0x194>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a22      	ldr	r2, [pc, #136]	@ (800851c <HAL_DMA_IRQHandler+0x1d4>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d022      	beq.n	80084dc <HAL_DMA_IRQHandler+0x194>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a21      	ldr	r2, [pc, #132]	@ (8008520 <HAL_DMA_IRQHandler+0x1d8>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d01d      	beq.n	80084dc <HAL_DMA_IRQHandler+0x194>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a1f      	ldr	r2, [pc, #124]	@ (8008524 <HAL_DMA_IRQHandler+0x1dc>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d018      	beq.n	80084dc <HAL_DMA_IRQHandler+0x194>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a1e      	ldr	r2, [pc, #120]	@ (8008528 <HAL_DMA_IRQHandler+0x1e0>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d013      	beq.n	80084dc <HAL_DMA_IRQHandler+0x194>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4a1c      	ldr	r2, [pc, #112]	@ (800852c <HAL_DMA_IRQHandler+0x1e4>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d00e      	beq.n	80084dc <HAL_DMA_IRQHandler+0x194>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4a1b      	ldr	r2, [pc, #108]	@ (8008530 <HAL_DMA_IRQHandler+0x1e8>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d009      	beq.n	80084dc <HAL_DMA_IRQHandler+0x194>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4a19      	ldr	r2, [pc, #100]	@ (8008534 <HAL_DMA_IRQHandler+0x1ec>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d004      	beq.n	80084dc <HAL_DMA_IRQHandler+0x194>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a18      	ldr	r2, [pc, #96]	@ (8008538 <HAL_DMA_IRQHandler+0x1f0>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d12f      	bne.n	800853c <HAL_DMA_IRQHandler+0x1f4>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f003 0304 	and.w	r3, r3, #4
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	bf14      	ite	ne
 80084ea:	2301      	movne	r3, #1
 80084ec:	2300      	moveq	r3, #0
 80084ee:	b2db      	uxtb	r3, r3
 80084f0:	e02e      	b.n	8008550 <HAL_DMA_IRQHandler+0x208>
 80084f2:	bf00      	nop
 80084f4:	24000000 	.word	0x24000000
 80084f8:	1b4e81b5 	.word	0x1b4e81b5
 80084fc:	40020010 	.word	0x40020010
 8008500:	40020028 	.word	0x40020028
 8008504:	40020040 	.word	0x40020040
 8008508:	40020058 	.word	0x40020058
 800850c:	40020070 	.word	0x40020070
 8008510:	40020088 	.word	0x40020088
 8008514:	400200a0 	.word	0x400200a0
 8008518:	400200b8 	.word	0x400200b8
 800851c:	40020410 	.word	0x40020410
 8008520:	40020428 	.word	0x40020428
 8008524:	40020440 	.word	0x40020440
 8008528:	40020458 	.word	0x40020458
 800852c:	40020470 	.word	0x40020470
 8008530:	40020488 	.word	0x40020488
 8008534:	400204a0 	.word	0x400204a0
 8008538:	400204b8 	.word	0x400204b8
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f003 0308 	and.w	r3, r3, #8
 8008546:	2b00      	cmp	r3, #0
 8008548:	bf14      	ite	ne
 800854a:	2301      	movne	r3, #1
 800854c:	2300      	moveq	r3, #0
 800854e:	b2db      	uxtb	r3, r3
 8008550:	2b00      	cmp	r3, #0
 8008552:	d015      	beq.n	8008580 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	681a      	ldr	r2, [r3, #0]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f022 0204 	bic.w	r2, r2, #4
 8008562:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008568:	f003 031f 	and.w	r3, r3, #31
 800856c:	2208      	movs	r2, #8
 800856e:	409a      	lsls	r2, r3
 8008570:	6a3b      	ldr	r3, [r7, #32]
 8008572:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008578:	f043 0201 	orr.w	r2, r3, #1
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008584:	f003 031f 	and.w	r3, r3, #31
 8008588:	69ba      	ldr	r2, [r7, #24]
 800858a:	fa22 f303 	lsr.w	r3, r2, r3
 800858e:	f003 0301 	and.w	r3, r3, #1
 8008592:	2b00      	cmp	r3, #0
 8008594:	d06e      	beq.n	8008674 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a69      	ldr	r2, [pc, #420]	@ (8008740 <HAL_DMA_IRQHandler+0x3f8>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d04a      	beq.n	8008636 <HAL_DMA_IRQHandler+0x2ee>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a67      	ldr	r2, [pc, #412]	@ (8008744 <HAL_DMA_IRQHandler+0x3fc>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d045      	beq.n	8008636 <HAL_DMA_IRQHandler+0x2ee>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4a66      	ldr	r2, [pc, #408]	@ (8008748 <HAL_DMA_IRQHandler+0x400>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d040      	beq.n	8008636 <HAL_DMA_IRQHandler+0x2ee>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a64      	ldr	r2, [pc, #400]	@ (800874c <HAL_DMA_IRQHandler+0x404>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d03b      	beq.n	8008636 <HAL_DMA_IRQHandler+0x2ee>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4a63      	ldr	r2, [pc, #396]	@ (8008750 <HAL_DMA_IRQHandler+0x408>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d036      	beq.n	8008636 <HAL_DMA_IRQHandler+0x2ee>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a61      	ldr	r2, [pc, #388]	@ (8008754 <HAL_DMA_IRQHandler+0x40c>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d031      	beq.n	8008636 <HAL_DMA_IRQHandler+0x2ee>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	4a60      	ldr	r2, [pc, #384]	@ (8008758 <HAL_DMA_IRQHandler+0x410>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d02c      	beq.n	8008636 <HAL_DMA_IRQHandler+0x2ee>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4a5e      	ldr	r2, [pc, #376]	@ (800875c <HAL_DMA_IRQHandler+0x414>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d027      	beq.n	8008636 <HAL_DMA_IRQHandler+0x2ee>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a5d      	ldr	r2, [pc, #372]	@ (8008760 <HAL_DMA_IRQHandler+0x418>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d022      	beq.n	8008636 <HAL_DMA_IRQHandler+0x2ee>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a5b      	ldr	r2, [pc, #364]	@ (8008764 <HAL_DMA_IRQHandler+0x41c>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d01d      	beq.n	8008636 <HAL_DMA_IRQHandler+0x2ee>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4a5a      	ldr	r2, [pc, #360]	@ (8008768 <HAL_DMA_IRQHandler+0x420>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d018      	beq.n	8008636 <HAL_DMA_IRQHandler+0x2ee>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4a58      	ldr	r2, [pc, #352]	@ (800876c <HAL_DMA_IRQHandler+0x424>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d013      	beq.n	8008636 <HAL_DMA_IRQHandler+0x2ee>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	4a57      	ldr	r2, [pc, #348]	@ (8008770 <HAL_DMA_IRQHandler+0x428>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d00e      	beq.n	8008636 <HAL_DMA_IRQHandler+0x2ee>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4a55      	ldr	r2, [pc, #340]	@ (8008774 <HAL_DMA_IRQHandler+0x42c>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d009      	beq.n	8008636 <HAL_DMA_IRQHandler+0x2ee>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4a54      	ldr	r2, [pc, #336]	@ (8008778 <HAL_DMA_IRQHandler+0x430>)
 8008628:	4293      	cmp	r3, r2
 800862a:	d004      	beq.n	8008636 <HAL_DMA_IRQHandler+0x2ee>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a52      	ldr	r2, [pc, #328]	@ (800877c <HAL_DMA_IRQHandler+0x434>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d10a      	bne.n	800864c <HAL_DMA_IRQHandler+0x304>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	695b      	ldr	r3, [r3, #20]
 800863c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008640:	2b00      	cmp	r3, #0
 8008642:	bf14      	ite	ne
 8008644:	2301      	movne	r3, #1
 8008646:	2300      	moveq	r3, #0
 8008648:	b2db      	uxtb	r3, r3
 800864a:	e003      	b.n	8008654 <HAL_DMA_IRQHandler+0x30c>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	2300      	movs	r3, #0
 8008654:	2b00      	cmp	r3, #0
 8008656:	d00d      	beq.n	8008674 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800865c:	f003 031f 	and.w	r3, r3, #31
 8008660:	2201      	movs	r2, #1
 8008662:	409a      	lsls	r2, r3
 8008664:	6a3b      	ldr	r3, [r7, #32]
 8008666:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800866c:	f043 0202 	orr.w	r2, r3, #2
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008678:	f003 031f 	and.w	r3, r3, #31
 800867c:	2204      	movs	r2, #4
 800867e:	409a      	lsls	r2, r3
 8008680:	69bb      	ldr	r3, [r7, #24]
 8008682:	4013      	ands	r3, r2
 8008684:	2b00      	cmp	r3, #0
 8008686:	f000 808f 	beq.w	80087a8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4a2c      	ldr	r2, [pc, #176]	@ (8008740 <HAL_DMA_IRQHandler+0x3f8>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d04a      	beq.n	800872a <HAL_DMA_IRQHandler+0x3e2>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4a2a      	ldr	r2, [pc, #168]	@ (8008744 <HAL_DMA_IRQHandler+0x3fc>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d045      	beq.n	800872a <HAL_DMA_IRQHandler+0x3e2>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4a29      	ldr	r2, [pc, #164]	@ (8008748 <HAL_DMA_IRQHandler+0x400>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d040      	beq.n	800872a <HAL_DMA_IRQHandler+0x3e2>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a27      	ldr	r2, [pc, #156]	@ (800874c <HAL_DMA_IRQHandler+0x404>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d03b      	beq.n	800872a <HAL_DMA_IRQHandler+0x3e2>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	4a26      	ldr	r2, [pc, #152]	@ (8008750 <HAL_DMA_IRQHandler+0x408>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d036      	beq.n	800872a <HAL_DMA_IRQHandler+0x3e2>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4a24      	ldr	r2, [pc, #144]	@ (8008754 <HAL_DMA_IRQHandler+0x40c>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d031      	beq.n	800872a <HAL_DMA_IRQHandler+0x3e2>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4a23      	ldr	r2, [pc, #140]	@ (8008758 <HAL_DMA_IRQHandler+0x410>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d02c      	beq.n	800872a <HAL_DMA_IRQHandler+0x3e2>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4a21      	ldr	r2, [pc, #132]	@ (800875c <HAL_DMA_IRQHandler+0x414>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d027      	beq.n	800872a <HAL_DMA_IRQHandler+0x3e2>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4a20      	ldr	r2, [pc, #128]	@ (8008760 <HAL_DMA_IRQHandler+0x418>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d022      	beq.n	800872a <HAL_DMA_IRQHandler+0x3e2>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	4a1e      	ldr	r2, [pc, #120]	@ (8008764 <HAL_DMA_IRQHandler+0x41c>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d01d      	beq.n	800872a <HAL_DMA_IRQHandler+0x3e2>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4a1d      	ldr	r2, [pc, #116]	@ (8008768 <HAL_DMA_IRQHandler+0x420>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d018      	beq.n	800872a <HAL_DMA_IRQHandler+0x3e2>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4a1b      	ldr	r2, [pc, #108]	@ (800876c <HAL_DMA_IRQHandler+0x424>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d013      	beq.n	800872a <HAL_DMA_IRQHandler+0x3e2>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4a1a      	ldr	r2, [pc, #104]	@ (8008770 <HAL_DMA_IRQHandler+0x428>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d00e      	beq.n	800872a <HAL_DMA_IRQHandler+0x3e2>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4a18      	ldr	r2, [pc, #96]	@ (8008774 <HAL_DMA_IRQHandler+0x42c>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d009      	beq.n	800872a <HAL_DMA_IRQHandler+0x3e2>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4a17      	ldr	r2, [pc, #92]	@ (8008778 <HAL_DMA_IRQHandler+0x430>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d004      	beq.n	800872a <HAL_DMA_IRQHandler+0x3e2>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4a15      	ldr	r2, [pc, #84]	@ (800877c <HAL_DMA_IRQHandler+0x434>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d12a      	bne.n	8008780 <HAL_DMA_IRQHandler+0x438>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f003 0302 	and.w	r3, r3, #2
 8008734:	2b00      	cmp	r3, #0
 8008736:	bf14      	ite	ne
 8008738:	2301      	movne	r3, #1
 800873a:	2300      	moveq	r3, #0
 800873c:	b2db      	uxtb	r3, r3
 800873e:	e023      	b.n	8008788 <HAL_DMA_IRQHandler+0x440>
 8008740:	40020010 	.word	0x40020010
 8008744:	40020028 	.word	0x40020028
 8008748:	40020040 	.word	0x40020040
 800874c:	40020058 	.word	0x40020058
 8008750:	40020070 	.word	0x40020070
 8008754:	40020088 	.word	0x40020088
 8008758:	400200a0 	.word	0x400200a0
 800875c:	400200b8 	.word	0x400200b8
 8008760:	40020410 	.word	0x40020410
 8008764:	40020428 	.word	0x40020428
 8008768:	40020440 	.word	0x40020440
 800876c:	40020458 	.word	0x40020458
 8008770:	40020470 	.word	0x40020470
 8008774:	40020488 	.word	0x40020488
 8008778:	400204a0 	.word	0x400204a0
 800877c:	400204b8 	.word	0x400204b8
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	2300      	movs	r3, #0
 8008788:	2b00      	cmp	r3, #0
 800878a:	d00d      	beq.n	80087a8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008790:	f003 031f 	and.w	r3, r3, #31
 8008794:	2204      	movs	r2, #4
 8008796:	409a      	lsls	r2, r3
 8008798:	6a3b      	ldr	r3, [r7, #32]
 800879a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087a0:	f043 0204 	orr.w	r2, r3, #4
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80087ac:	f003 031f 	and.w	r3, r3, #31
 80087b0:	2210      	movs	r2, #16
 80087b2:	409a      	lsls	r2, r3
 80087b4:	69bb      	ldr	r3, [r7, #24]
 80087b6:	4013      	ands	r3, r2
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	f000 80a6 	beq.w	800890a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4a85      	ldr	r2, [pc, #532]	@ (80089d8 <HAL_DMA_IRQHandler+0x690>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d04a      	beq.n	800885e <HAL_DMA_IRQHandler+0x516>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4a83      	ldr	r2, [pc, #524]	@ (80089dc <HAL_DMA_IRQHandler+0x694>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d045      	beq.n	800885e <HAL_DMA_IRQHandler+0x516>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	4a82      	ldr	r2, [pc, #520]	@ (80089e0 <HAL_DMA_IRQHandler+0x698>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d040      	beq.n	800885e <HAL_DMA_IRQHandler+0x516>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a80      	ldr	r2, [pc, #512]	@ (80089e4 <HAL_DMA_IRQHandler+0x69c>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d03b      	beq.n	800885e <HAL_DMA_IRQHandler+0x516>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4a7f      	ldr	r2, [pc, #508]	@ (80089e8 <HAL_DMA_IRQHandler+0x6a0>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d036      	beq.n	800885e <HAL_DMA_IRQHandler+0x516>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4a7d      	ldr	r2, [pc, #500]	@ (80089ec <HAL_DMA_IRQHandler+0x6a4>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d031      	beq.n	800885e <HAL_DMA_IRQHandler+0x516>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4a7c      	ldr	r2, [pc, #496]	@ (80089f0 <HAL_DMA_IRQHandler+0x6a8>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d02c      	beq.n	800885e <HAL_DMA_IRQHandler+0x516>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4a7a      	ldr	r2, [pc, #488]	@ (80089f4 <HAL_DMA_IRQHandler+0x6ac>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d027      	beq.n	800885e <HAL_DMA_IRQHandler+0x516>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4a79      	ldr	r2, [pc, #484]	@ (80089f8 <HAL_DMA_IRQHandler+0x6b0>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d022      	beq.n	800885e <HAL_DMA_IRQHandler+0x516>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4a77      	ldr	r2, [pc, #476]	@ (80089fc <HAL_DMA_IRQHandler+0x6b4>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d01d      	beq.n	800885e <HAL_DMA_IRQHandler+0x516>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4a76      	ldr	r2, [pc, #472]	@ (8008a00 <HAL_DMA_IRQHandler+0x6b8>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d018      	beq.n	800885e <HAL_DMA_IRQHandler+0x516>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a74      	ldr	r2, [pc, #464]	@ (8008a04 <HAL_DMA_IRQHandler+0x6bc>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d013      	beq.n	800885e <HAL_DMA_IRQHandler+0x516>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a73      	ldr	r2, [pc, #460]	@ (8008a08 <HAL_DMA_IRQHandler+0x6c0>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d00e      	beq.n	800885e <HAL_DMA_IRQHandler+0x516>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a71      	ldr	r2, [pc, #452]	@ (8008a0c <HAL_DMA_IRQHandler+0x6c4>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d009      	beq.n	800885e <HAL_DMA_IRQHandler+0x516>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4a70      	ldr	r2, [pc, #448]	@ (8008a10 <HAL_DMA_IRQHandler+0x6c8>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d004      	beq.n	800885e <HAL_DMA_IRQHandler+0x516>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a6e      	ldr	r2, [pc, #440]	@ (8008a14 <HAL_DMA_IRQHandler+0x6cc>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d10a      	bne.n	8008874 <HAL_DMA_IRQHandler+0x52c>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f003 0308 	and.w	r3, r3, #8
 8008868:	2b00      	cmp	r3, #0
 800886a:	bf14      	ite	ne
 800886c:	2301      	movne	r3, #1
 800886e:	2300      	moveq	r3, #0
 8008870:	b2db      	uxtb	r3, r3
 8008872:	e009      	b.n	8008888 <HAL_DMA_IRQHandler+0x540>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f003 0304 	and.w	r3, r3, #4
 800887e:	2b00      	cmp	r3, #0
 8008880:	bf14      	ite	ne
 8008882:	2301      	movne	r3, #1
 8008884:	2300      	moveq	r3, #0
 8008886:	b2db      	uxtb	r3, r3
 8008888:	2b00      	cmp	r3, #0
 800888a:	d03e      	beq.n	800890a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008890:	f003 031f 	and.w	r3, r3, #31
 8008894:	2210      	movs	r2, #16
 8008896:	409a      	lsls	r2, r3
 8008898:	6a3b      	ldr	r3, [r7, #32]
 800889a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d018      	beq.n	80088dc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d108      	bne.n	80088ca <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d024      	beq.n	800890a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	4798      	blx	r3
 80088c8:	e01f      	b.n	800890a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d01b      	beq.n	800890a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	4798      	blx	r3
 80088da:	e016      	b.n	800890a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d107      	bne.n	80088fa <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	681a      	ldr	r2, [r3, #0]
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f022 0208 	bic.w	r2, r2, #8
 80088f8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d003      	beq.n	800890a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800890e:	f003 031f 	and.w	r3, r3, #31
 8008912:	2220      	movs	r2, #32
 8008914:	409a      	lsls	r2, r3
 8008916:	69bb      	ldr	r3, [r7, #24]
 8008918:	4013      	ands	r3, r2
 800891a:	2b00      	cmp	r3, #0
 800891c:	f000 8110 	beq.w	8008b40 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	4a2c      	ldr	r2, [pc, #176]	@ (80089d8 <HAL_DMA_IRQHandler+0x690>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d04a      	beq.n	80089c0 <HAL_DMA_IRQHandler+0x678>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	4a2b      	ldr	r2, [pc, #172]	@ (80089dc <HAL_DMA_IRQHandler+0x694>)
 8008930:	4293      	cmp	r3, r2
 8008932:	d045      	beq.n	80089c0 <HAL_DMA_IRQHandler+0x678>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4a29      	ldr	r2, [pc, #164]	@ (80089e0 <HAL_DMA_IRQHandler+0x698>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d040      	beq.n	80089c0 <HAL_DMA_IRQHandler+0x678>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	4a28      	ldr	r2, [pc, #160]	@ (80089e4 <HAL_DMA_IRQHandler+0x69c>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d03b      	beq.n	80089c0 <HAL_DMA_IRQHandler+0x678>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4a26      	ldr	r2, [pc, #152]	@ (80089e8 <HAL_DMA_IRQHandler+0x6a0>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d036      	beq.n	80089c0 <HAL_DMA_IRQHandler+0x678>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	4a25      	ldr	r2, [pc, #148]	@ (80089ec <HAL_DMA_IRQHandler+0x6a4>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d031      	beq.n	80089c0 <HAL_DMA_IRQHandler+0x678>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a23      	ldr	r2, [pc, #140]	@ (80089f0 <HAL_DMA_IRQHandler+0x6a8>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d02c      	beq.n	80089c0 <HAL_DMA_IRQHandler+0x678>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4a22      	ldr	r2, [pc, #136]	@ (80089f4 <HAL_DMA_IRQHandler+0x6ac>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d027      	beq.n	80089c0 <HAL_DMA_IRQHandler+0x678>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a20      	ldr	r2, [pc, #128]	@ (80089f8 <HAL_DMA_IRQHandler+0x6b0>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d022      	beq.n	80089c0 <HAL_DMA_IRQHandler+0x678>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4a1f      	ldr	r2, [pc, #124]	@ (80089fc <HAL_DMA_IRQHandler+0x6b4>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d01d      	beq.n	80089c0 <HAL_DMA_IRQHandler+0x678>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4a1d      	ldr	r2, [pc, #116]	@ (8008a00 <HAL_DMA_IRQHandler+0x6b8>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d018      	beq.n	80089c0 <HAL_DMA_IRQHandler+0x678>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4a1c      	ldr	r2, [pc, #112]	@ (8008a04 <HAL_DMA_IRQHandler+0x6bc>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d013      	beq.n	80089c0 <HAL_DMA_IRQHandler+0x678>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a1a      	ldr	r2, [pc, #104]	@ (8008a08 <HAL_DMA_IRQHandler+0x6c0>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d00e      	beq.n	80089c0 <HAL_DMA_IRQHandler+0x678>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4a19      	ldr	r2, [pc, #100]	@ (8008a0c <HAL_DMA_IRQHandler+0x6c4>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d009      	beq.n	80089c0 <HAL_DMA_IRQHandler+0x678>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4a17      	ldr	r2, [pc, #92]	@ (8008a10 <HAL_DMA_IRQHandler+0x6c8>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d004      	beq.n	80089c0 <HAL_DMA_IRQHandler+0x678>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	4a16      	ldr	r2, [pc, #88]	@ (8008a14 <HAL_DMA_IRQHandler+0x6cc>)
 80089bc:	4293      	cmp	r3, r2
 80089be:	d12b      	bne.n	8008a18 <HAL_DMA_IRQHandler+0x6d0>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f003 0310 	and.w	r3, r3, #16
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	bf14      	ite	ne
 80089ce:	2301      	movne	r3, #1
 80089d0:	2300      	moveq	r3, #0
 80089d2:	b2db      	uxtb	r3, r3
 80089d4:	e02a      	b.n	8008a2c <HAL_DMA_IRQHandler+0x6e4>
 80089d6:	bf00      	nop
 80089d8:	40020010 	.word	0x40020010
 80089dc:	40020028 	.word	0x40020028
 80089e0:	40020040 	.word	0x40020040
 80089e4:	40020058 	.word	0x40020058
 80089e8:	40020070 	.word	0x40020070
 80089ec:	40020088 	.word	0x40020088
 80089f0:	400200a0 	.word	0x400200a0
 80089f4:	400200b8 	.word	0x400200b8
 80089f8:	40020410 	.word	0x40020410
 80089fc:	40020428 	.word	0x40020428
 8008a00:	40020440 	.word	0x40020440
 8008a04:	40020458 	.word	0x40020458
 8008a08:	40020470 	.word	0x40020470
 8008a0c:	40020488 	.word	0x40020488
 8008a10:	400204a0 	.word	0x400204a0
 8008a14:	400204b8 	.word	0x400204b8
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f003 0302 	and.w	r3, r3, #2
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	bf14      	ite	ne
 8008a26:	2301      	movne	r3, #1
 8008a28:	2300      	moveq	r3, #0
 8008a2a:	b2db      	uxtb	r3, r3
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	f000 8087 	beq.w	8008b40 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a36:	f003 031f 	and.w	r3, r3, #31
 8008a3a:	2220      	movs	r2, #32
 8008a3c:	409a      	lsls	r2, r3
 8008a3e:	6a3b      	ldr	r3, [r7, #32]
 8008a40:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008a48:	b2db      	uxtb	r3, r3
 8008a4a:	2b04      	cmp	r3, #4
 8008a4c:	d139      	bne.n	8008ac2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	681a      	ldr	r2, [r3, #0]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f022 0216 	bic.w	r2, r2, #22
 8008a5c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	695a      	ldr	r2, [r3, #20]
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008a6c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d103      	bne.n	8008a7e <HAL_DMA_IRQHandler+0x736>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d007      	beq.n	8008a8e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	681a      	ldr	r2, [r3, #0]
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f022 0208 	bic.w	r2, r2, #8
 8008a8c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a92:	f003 031f 	and.w	r3, r3, #31
 8008a96:	223f      	movs	r2, #63	@ 0x3f
 8008a98:	409a      	lsls	r2, r3
 8008a9a:	6a3b      	ldr	r3, [r7, #32]
 8008a9c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2201      	movs	r2, #1
 8008aa2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	f000 8382 	beq.w	80091bc <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	4798      	blx	r3
          }
          return;
 8008ac0:	e37c      	b.n	80091bc <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d018      	beq.n	8008b02 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d108      	bne.n	8008af0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d02c      	beq.n	8008b40 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	4798      	blx	r3
 8008aee:	e027      	b.n	8008b40 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d023      	beq.n	8008b40 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	4798      	blx	r3
 8008b00:	e01e      	b.n	8008b40 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d10f      	bne.n	8008b30 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	681a      	ldr	r2, [r3, #0]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f022 0210 	bic.w	r2, r2, #16
 8008b1e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2201      	movs	r2, #1
 8008b24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d003      	beq.n	8008b40 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	f000 833e 	beq.w	80091c6 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b4e:	f003 0301 	and.w	r3, r3, #1
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	f000 8088 	beq.w	8008c68 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2204      	movs	r2, #4
 8008b5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4a89      	ldr	r2, [pc, #548]	@ (8008d8c <HAL_DMA_IRQHandler+0xa44>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d04a      	beq.n	8008c00 <HAL_DMA_IRQHandler+0x8b8>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	4a88      	ldr	r2, [pc, #544]	@ (8008d90 <HAL_DMA_IRQHandler+0xa48>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d045      	beq.n	8008c00 <HAL_DMA_IRQHandler+0x8b8>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4a86      	ldr	r2, [pc, #536]	@ (8008d94 <HAL_DMA_IRQHandler+0xa4c>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d040      	beq.n	8008c00 <HAL_DMA_IRQHandler+0x8b8>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4a85      	ldr	r2, [pc, #532]	@ (8008d98 <HAL_DMA_IRQHandler+0xa50>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d03b      	beq.n	8008c00 <HAL_DMA_IRQHandler+0x8b8>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	4a83      	ldr	r2, [pc, #524]	@ (8008d9c <HAL_DMA_IRQHandler+0xa54>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d036      	beq.n	8008c00 <HAL_DMA_IRQHandler+0x8b8>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4a82      	ldr	r2, [pc, #520]	@ (8008da0 <HAL_DMA_IRQHandler+0xa58>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d031      	beq.n	8008c00 <HAL_DMA_IRQHandler+0x8b8>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4a80      	ldr	r2, [pc, #512]	@ (8008da4 <HAL_DMA_IRQHandler+0xa5c>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d02c      	beq.n	8008c00 <HAL_DMA_IRQHandler+0x8b8>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	4a7f      	ldr	r2, [pc, #508]	@ (8008da8 <HAL_DMA_IRQHandler+0xa60>)
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d027      	beq.n	8008c00 <HAL_DMA_IRQHandler+0x8b8>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4a7d      	ldr	r2, [pc, #500]	@ (8008dac <HAL_DMA_IRQHandler+0xa64>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d022      	beq.n	8008c00 <HAL_DMA_IRQHandler+0x8b8>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	4a7c      	ldr	r2, [pc, #496]	@ (8008db0 <HAL_DMA_IRQHandler+0xa68>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d01d      	beq.n	8008c00 <HAL_DMA_IRQHandler+0x8b8>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	4a7a      	ldr	r2, [pc, #488]	@ (8008db4 <HAL_DMA_IRQHandler+0xa6c>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d018      	beq.n	8008c00 <HAL_DMA_IRQHandler+0x8b8>
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4a79      	ldr	r2, [pc, #484]	@ (8008db8 <HAL_DMA_IRQHandler+0xa70>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d013      	beq.n	8008c00 <HAL_DMA_IRQHandler+0x8b8>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	4a77      	ldr	r2, [pc, #476]	@ (8008dbc <HAL_DMA_IRQHandler+0xa74>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d00e      	beq.n	8008c00 <HAL_DMA_IRQHandler+0x8b8>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4a76      	ldr	r2, [pc, #472]	@ (8008dc0 <HAL_DMA_IRQHandler+0xa78>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d009      	beq.n	8008c00 <HAL_DMA_IRQHandler+0x8b8>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4a74      	ldr	r2, [pc, #464]	@ (8008dc4 <HAL_DMA_IRQHandler+0xa7c>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d004      	beq.n	8008c00 <HAL_DMA_IRQHandler+0x8b8>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	4a73      	ldr	r2, [pc, #460]	@ (8008dc8 <HAL_DMA_IRQHandler+0xa80>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d108      	bne.n	8008c12 <HAL_DMA_IRQHandler+0x8ca>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	681a      	ldr	r2, [r3, #0]
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f022 0201 	bic.w	r2, r2, #1
 8008c0e:	601a      	str	r2, [r3, #0]
 8008c10:	e007      	b.n	8008c22 <HAL_DMA_IRQHandler+0x8da>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	681a      	ldr	r2, [r3, #0]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f022 0201 	bic.w	r2, r2, #1
 8008c20:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	3301      	adds	r3, #1
 8008c26:	60fb      	str	r3, [r7, #12]
 8008c28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	d307      	bcc.n	8008c3e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f003 0301 	and.w	r3, r3, #1
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d1f2      	bne.n	8008c22 <HAL_DMA_IRQHandler+0x8da>
 8008c3c:	e000      	b.n	8008c40 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8008c3e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f003 0301 	and.w	r3, r3, #1
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d004      	beq.n	8008c58 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2203      	movs	r2, #3
 8008c52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8008c56:	e003      	b.n	8008c60 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2200      	movs	r2, #0
 8008c64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	f000 82aa 	beq.w	80091c6 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	4798      	blx	r3
 8008c7a:	e2a4      	b.n	80091c6 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	4a52      	ldr	r2, [pc, #328]	@ (8008dcc <HAL_DMA_IRQHandler+0xa84>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d04a      	beq.n	8008d1c <HAL_DMA_IRQHandler+0x9d4>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	4a51      	ldr	r2, [pc, #324]	@ (8008dd0 <HAL_DMA_IRQHandler+0xa88>)
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d045      	beq.n	8008d1c <HAL_DMA_IRQHandler+0x9d4>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	4a4f      	ldr	r2, [pc, #316]	@ (8008dd4 <HAL_DMA_IRQHandler+0xa8c>)
 8008c96:	4293      	cmp	r3, r2
 8008c98:	d040      	beq.n	8008d1c <HAL_DMA_IRQHandler+0x9d4>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	4a4e      	ldr	r2, [pc, #312]	@ (8008dd8 <HAL_DMA_IRQHandler+0xa90>)
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d03b      	beq.n	8008d1c <HAL_DMA_IRQHandler+0x9d4>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	4a4c      	ldr	r2, [pc, #304]	@ (8008ddc <HAL_DMA_IRQHandler+0xa94>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d036      	beq.n	8008d1c <HAL_DMA_IRQHandler+0x9d4>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	4a4b      	ldr	r2, [pc, #300]	@ (8008de0 <HAL_DMA_IRQHandler+0xa98>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d031      	beq.n	8008d1c <HAL_DMA_IRQHandler+0x9d4>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	4a49      	ldr	r2, [pc, #292]	@ (8008de4 <HAL_DMA_IRQHandler+0xa9c>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d02c      	beq.n	8008d1c <HAL_DMA_IRQHandler+0x9d4>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	4a48      	ldr	r2, [pc, #288]	@ (8008de8 <HAL_DMA_IRQHandler+0xaa0>)
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d027      	beq.n	8008d1c <HAL_DMA_IRQHandler+0x9d4>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	4a46      	ldr	r2, [pc, #280]	@ (8008dec <HAL_DMA_IRQHandler+0xaa4>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d022      	beq.n	8008d1c <HAL_DMA_IRQHandler+0x9d4>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	4a45      	ldr	r2, [pc, #276]	@ (8008df0 <HAL_DMA_IRQHandler+0xaa8>)
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d01d      	beq.n	8008d1c <HAL_DMA_IRQHandler+0x9d4>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	4a43      	ldr	r2, [pc, #268]	@ (8008df4 <HAL_DMA_IRQHandler+0xaac>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d018      	beq.n	8008d1c <HAL_DMA_IRQHandler+0x9d4>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	4a42      	ldr	r2, [pc, #264]	@ (8008df8 <HAL_DMA_IRQHandler+0xab0>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d013      	beq.n	8008d1c <HAL_DMA_IRQHandler+0x9d4>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	4a40      	ldr	r2, [pc, #256]	@ (8008dfc <HAL_DMA_IRQHandler+0xab4>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d00e      	beq.n	8008d1c <HAL_DMA_IRQHandler+0x9d4>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	4a3f      	ldr	r2, [pc, #252]	@ (8008e00 <HAL_DMA_IRQHandler+0xab8>)
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d009      	beq.n	8008d1c <HAL_DMA_IRQHandler+0x9d4>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	4a3d      	ldr	r2, [pc, #244]	@ (8008e04 <HAL_DMA_IRQHandler+0xabc>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d004      	beq.n	8008d1c <HAL_DMA_IRQHandler+0x9d4>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4a3c      	ldr	r2, [pc, #240]	@ (8008e08 <HAL_DMA_IRQHandler+0xac0>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d101      	bne.n	8008d20 <HAL_DMA_IRQHandler+0x9d8>
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	e000      	b.n	8008d22 <HAL_DMA_IRQHandler+0x9da>
 8008d20:	2300      	movs	r3, #0
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	f000 824f 	beq.w	80091c6 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d34:	f003 031f 	and.w	r3, r3, #31
 8008d38:	2204      	movs	r2, #4
 8008d3a:	409a      	lsls	r2, r3
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	4013      	ands	r3, r2
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	f000 80dd 	beq.w	8008f00 <HAL_DMA_IRQHandler+0xbb8>
 8008d46:	693b      	ldr	r3, [r7, #16]
 8008d48:	f003 0304 	and.w	r3, r3, #4
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	f000 80d7 	beq.w	8008f00 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d56:	f003 031f 	and.w	r3, r3, #31
 8008d5a:	2204      	movs	r2, #4
 8008d5c:	409a      	lsls	r2, r3
 8008d5e:	69fb      	ldr	r3, [r7, #28]
 8008d60:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008d62:	693b      	ldr	r3, [r7, #16]
 8008d64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d059      	beq.n	8008e20 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d14a      	bne.n	8008e0c <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	f000 8220 	beq.w	80091c0 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008d88:	e21a      	b.n	80091c0 <HAL_DMA_IRQHandler+0xe78>
 8008d8a:	bf00      	nop
 8008d8c:	40020010 	.word	0x40020010
 8008d90:	40020028 	.word	0x40020028
 8008d94:	40020040 	.word	0x40020040
 8008d98:	40020058 	.word	0x40020058
 8008d9c:	40020070 	.word	0x40020070
 8008da0:	40020088 	.word	0x40020088
 8008da4:	400200a0 	.word	0x400200a0
 8008da8:	400200b8 	.word	0x400200b8
 8008dac:	40020410 	.word	0x40020410
 8008db0:	40020428 	.word	0x40020428
 8008db4:	40020440 	.word	0x40020440
 8008db8:	40020458 	.word	0x40020458
 8008dbc:	40020470 	.word	0x40020470
 8008dc0:	40020488 	.word	0x40020488
 8008dc4:	400204a0 	.word	0x400204a0
 8008dc8:	400204b8 	.word	0x400204b8
 8008dcc:	48022c08 	.word	0x48022c08
 8008dd0:	48022c1c 	.word	0x48022c1c
 8008dd4:	48022c30 	.word	0x48022c30
 8008dd8:	48022c44 	.word	0x48022c44
 8008ddc:	48022c58 	.word	0x48022c58
 8008de0:	48022c6c 	.word	0x48022c6c
 8008de4:	48022c80 	.word	0x48022c80
 8008de8:	48022c94 	.word	0x48022c94
 8008dec:	58025408 	.word	0x58025408
 8008df0:	5802541c 	.word	0x5802541c
 8008df4:	58025430 	.word	0x58025430
 8008df8:	58025444 	.word	0x58025444
 8008dfc:	58025458 	.word	0x58025458
 8008e00:	5802546c 	.word	0x5802546c
 8008e04:	58025480 	.word	0x58025480
 8008e08:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	f000 81d5 	beq.w	80091c0 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008e1e:	e1cf      	b.n	80091c0 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	f003 0320 	and.w	r3, r3, #32
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d160      	bne.n	8008eec <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4a7f      	ldr	r2, [pc, #508]	@ (800902c <HAL_DMA_IRQHandler+0xce4>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d04a      	beq.n	8008eca <HAL_DMA_IRQHandler+0xb82>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4a7d      	ldr	r2, [pc, #500]	@ (8009030 <HAL_DMA_IRQHandler+0xce8>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d045      	beq.n	8008eca <HAL_DMA_IRQHandler+0xb82>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	4a7c      	ldr	r2, [pc, #496]	@ (8009034 <HAL_DMA_IRQHandler+0xcec>)
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d040      	beq.n	8008eca <HAL_DMA_IRQHandler+0xb82>
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	4a7a      	ldr	r2, [pc, #488]	@ (8009038 <HAL_DMA_IRQHandler+0xcf0>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d03b      	beq.n	8008eca <HAL_DMA_IRQHandler+0xb82>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	4a79      	ldr	r2, [pc, #484]	@ (800903c <HAL_DMA_IRQHandler+0xcf4>)
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d036      	beq.n	8008eca <HAL_DMA_IRQHandler+0xb82>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	4a77      	ldr	r2, [pc, #476]	@ (8009040 <HAL_DMA_IRQHandler+0xcf8>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d031      	beq.n	8008eca <HAL_DMA_IRQHandler+0xb82>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4a76      	ldr	r2, [pc, #472]	@ (8009044 <HAL_DMA_IRQHandler+0xcfc>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d02c      	beq.n	8008eca <HAL_DMA_IRQHandler+0xb82>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4a74      	ldr	r2, [pc, #464]	@ (8009048 <HAL_DMA_IRQHandler+0xd00>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d027      	beq.n	8008eca <HAL_DMA_IRQHandler+0xb82>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	4a73      	ldr	r2, [pc, #460]	@ (800904c <HAL_DMA_IRQHandler+0xd04>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d022      	beq.n	8008eca <HAL_DMA_IRQHandler+0xb82>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4a71      	ldr	r2, [pc, #452]	@ (8009050 <HAL_DMA_IRQHandler+0xd08>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d01d      	beq.n	8008eca <HAL_DMA_IRQHandler+0xb82>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4a70      	ldr	r2, [pc, #448]	@ (8009054 <HAL_DMA_IRQHandler+0xd0c>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d018      	beq.n	8008eca <HAL_DMA_IRQHandler+0xb82>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4a6e      	ldr	r2, [pc, #440]	@ (8009058 <HAL_DMA_IRQHandler+0xd10>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d013      	beq.n	8008eca <HAL_DMA_IRQHandler+0xb82>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	4a6d      	ldr	r2, [pc, #436]	@ (800905c <HAL_DMA_IRQHandler+0xd14>)
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d00e      	beq.n	8008eca <HAL_DMA_IRQHandler+0xb82>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4a6b      	ldr	r2, [pc, #428]	@ (8009060 <HAL_DMA_IRQHandler+0xd18>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d009      	beq.n	8008eca <HAL_DMA_IRQHandler+0xb82>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4a6a      	ldr	r2, [pc, #424]	@ (8009064 <HAL_DMA_IRQHandler+0xd1c>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d004      	beq.n	8008eca <HAL_DMA_IRQHandler+0xb82>
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	4a68      	ldr	r2, [pc, #416]	@ (8009068 <HAL_DMA_IRQHandler+0xd20>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d108      	bne.n	8008edc <HAL_DMA_IRQHandler+0xb94>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	681a      	ldr	r2, [r3, #0]
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f022 0208 	bic.w	r2, r2, #8
 8008ed8:	601a      	str	r2, [r3, #0]
 8008eda:	e007      	b.n	8008eec <HAL_DMA_IRQHandler+0xba4>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	681a      	ldr	r2, [r3, #0]
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f022 0204 	bic.w	r2, r2, #4
 8008eea:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	f000 8165 	beq.w	80091c0 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008efe:	e15f      	b.n	80091c0 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f04:	f003 031f 	and.w	r3, r3, #31
 8008f08:	2202      	movs	r2, #2
 8008f0a:	409a      	lsls	r2, r3
 8008f0c:	697b      	ldr	r3, [r7, #20]
 8008f0e:	4013      	ands	r3, r2
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	f000 80c5 	beq.w	80090a0 <HAL_DMA_IRQHandler+0xd58>
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	f003 0302 	and.w	r3, r3, #2
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	f000 80bf 	beq.w	80090a0 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f26:	f003 031f 	and.w	r3, r3, #31
 8008f2a:	2202      	movs	r2, #2
 8008f2c:	409a      	lsls	r2, r3
 8008f2e:	69fb      	ldr	r3, [r7, #28]
 8008f30:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d018      	beq.n	8008f6e <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d109      	bne.n	8008f5a <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	f000 813a 	beq.w	80091c4 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008f58:	e134      	b.n	80091c4 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	f000 8130 	beq.w	80091c4 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008f6c:	e12a      	b.n	80091c4 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	f003 0320 	and.w	r3, r3, #32
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	f040 8089 	bne.w	800908c <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	4a2b      	ldr	r2, [pc, #172]	@ (800902c <HAL_DMA_IRQHandler+0xce4>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d04a      	beq.n	800901a <HAL_DMA_IRQHandler+0xcd2>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	4a29      	ldr	r2, [pc, #164]	@ (8009030 <HAL_DMA_IRQHandler+0xce8>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d045      	beq.n	800901a <HAL_DMA_IRQHandler+0xcd2>
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	4a28      	ldr	r2, [pc, #160]	@ (8009034 <HAL_DMA_IRQHandler+0xcec>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d040      	beq.n	800901a <HAL_DMA_IRQHandler+0xcd2>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	4a26      	ldr	r2, [pc, #152]	@ (8009038 <HAL_DMA_IRQHandler+0xcf0>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d03b      	beq.n	800901a <HAL_DMA_IRQHandler+0xcd2>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	4a25      	ldr	r2, [pc, #148]	@ (800903c <HAL_DMA_IRQHandler+0xcf4>)
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d036      	beq.n	800901a <HAL_DMA_IRQHandler+0xcd2>
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4a23      	ldr	r2, [pc, #140]	@ (8009040 <HAL_DMA_IRQHandler+0xcf8>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d031      	beq.n	800901a <HAL_DMA_IRQHandler+0xcd2>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	4a22      	ldr	r2, [pc, #136]	@ (8009044 <HAL_DMA_IRQHandler+0xcfc>)
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d02c      	beq.n	800901a <HAL_DMA_IRQHandler+0xcd2>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	4a20      	ldr	r2, [pc, #128]	@ (8009048 <HAL_DMA_IRQHandler+0xd00>)
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	d027      	beq.n	800901a <HAL_DMA_IRQHandler+0xcd2>
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	4a1f      	ldr	r2, [pc, #124]	@ (800904c <HAL_DMA_IRQHandler+0xd04>)
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d022      	beq.n	800901a <HAL_DMA_IRQHandler+0xcd2>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	4a1d      	ldr	r2, [pc, #116]	@ (8009050 <HAL_DMA_IRQHandler+0xd08>)
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	d01d      	beq.n	800901a <HAL_DMA_IRQHandler+0xcd2>
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	4a1c      	ldr	r2, [pc, #112]	@ (8009054 <HAL_DMA_IRQHandler+0xd0c>)
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d018      	beq.n	800901a <HAL_DMA_IRQHandler+0xcd2>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	4a1a      	ldr	r2, [pc, #104]	@ (8009058 <HAL_DMA_IRQHandler+0xd10>)
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d013      	beq.n	800901a <HAL_DMA_IRQHandler+0xcd2>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	4a19      	ldr	r2, [pc, #100]	@ (800905c <HAL_DMA_IRQHandler+0xd14>)
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	d00e      	beq.n	800901a <HAL_DMA_IRQHandler+0xcd2>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	4a17      	ldr	r2, [pc, #92]	@ (8009060 <HAL_DMA_IRQHandler+0xd18>)
 8009002:	4293      	cmp	r3, r2
 8009004:	d009      	beq.n	800901a <HAL_DMA_IRQHandler+0xcd2>
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4a16      	ldr	r2, [pc, #88]	@ (8009064 <HAL_DMA_IRQHandler+0xd1c>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d004      	beq.n	800901a <HAL_DMA_IRQHandler+0xcd2>
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	4a14      	ldr	r2, [pc, #80]	@ (8009068 <HAL_DMA_IRQHandler+0xd20>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d128      	bne.n	800906c <HAL_DMA_IRQHandler+0xd24>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	681a      	ldr	r2, [r3, #0]
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f022 0214 	bic.w	r2, r2, #20
 8009028:	601a      	str	r2, [r3, #0]
 800902a:	e027      	b.n	800907c <HAL_DMA_IRQHandler+0xd34>
 800902c:	40020010 	.word	0x40020010
 8009030:	40020028 	.word	0x40020028
 8009034:	40020040 	.word	0x40020040
 8009038:	40020058 	.word	0x40020058
 800903c:	40020070 	.word	0x40020070
 8009040:	40020088 	.word	0x40020088
 8009044:	400200a0 	.word	0x400200a0
 8009048:	400200b8 	.word	0x400200b8
 800904c:	40020410 	.word	0x40020410
 8009050:	40020428 	.word	0x40020428
 8009054:	40020440 	.word	0x40020440
 8009058:	40020458 	.word	0x40020458
 800905c:	40020470 	.word	0x40020470
 8009060:	40020488 	.word	0x40020488
 8009064:	400204a0 	.word	0x400204a0
 8009068:	400204b8 	.word	0x400204b8
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	681a      	ldr	r2, [r3, #0]
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f022 020a 	bic.w	r2, r2, #10
 800907a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2201      	movs	r2, #1
 8009080:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2200      	movs	r2, #0
 8009088:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009090:	2b00      	cmp	r3, #0
 8009092:	f000 8097 	beq.w	80091c4 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800909e:	e091      	b.n	80091c4 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80090a4:	f003 031f 	and.w	r3, r3, #31
 80090a8:	2208      	movs	r2, #8
 80090aa:	409a      	lsls	r2, r3
 80090ac:	697b      	ldr	r3, [r7, #20]
 80090ae:	4013      	ands	r3, r2
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	f000 8088 	beq.w	80091c6 <HAL_DMA_IRQHandler+0xe7e>
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	f003 0308 	and.w	r3, r3, #8
 80090bc:	2b00      	cmp	r3, #0
 80090be:	f000 8082 	beq.w	80091c6 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	4a41      	ldr	r2, [pc, #260]	@ (80091cc <HAL_DMA_IRQHandler+0xe84>)
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d04a      	beq.n	8009162 <HAL_DMA_IRQHandler+0xe1a>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	4a3f      	ldr	r2, [pc, #252]	@ (80091d0 <HAL_DMA_IRQHandler+0xe88>)
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d045      	beq.n	8009162 <HAL_DMA_IRQHandler+0xe1a>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	4a3e      	ldr	r2, [pc, #248]	@ (80091d4 <HAL_DMA_IRQHandler+0xe8c>)
 80090dc:	4293      	cmp	r3, r2
 80090de:	d040      	beq.n	8009162 <HAL_DMA_IRQHandler+0xe1a>
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	4a3c      	ldr	r2, [pc, #240]	@ (80091d8 <HAL_DMA_IRQHandler+0xe90>)
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d03b      	beq.n	8009162 <HAL_DMA_IRQHandler+0xe1a>
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	4a3b      	ldr	r2, [pc, #236]	@ (80091dc <HAL_DMA_IRQHandler+0xe94>)
 80090f0:	4293      	cmp	r3, r2
 80090f2:	d036      	beq.n	8009162 <HAL_DMA_IRQHandler+0xe1a>
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	4a39      	ldr	r2, [pc, #228]	@ (80091e0 <HAL_DMA_IRQHandler+0xe98>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d031      	beq.n	8009162 <HAL_DMA_IRQHandler+0xe1a>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	4a38      	ldr	r2, [pc, #224]	@ (80091e4 <HAL_DMA_IRQHandler+0xe9c>)
 8009104:	4293      	cmp	r3, r2
 8009106:	d02c      	beq.n	8009162 <HAL_DMA_IRQHandler+0xe1a>
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	4a36      	ldr	r2, [pc, #216]	@ (80091e8 <HAL_DMA_IRQHandler+0xea0>)
 800910e:	4293      	cmp	r3, r2
 8009110:	d027      	beq.n	8009162 <HAL_DMA_IRQHandler+0xe1a>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	4a35      	ldr	r2, [pc, #212]	@ (80091ec <HAL_DMA_IRQHandler+0xea4>)
 8009118:	4293      	cmp	r3, r2
 800911a:	d022      	beq.n	8009162 <HAL_DMA_IRQHandler+0xe1a>
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	4a33      	ldr	r2, [pc, #204]	@ (80091f0 <HAL_DMA_IRQHandler+0xea8>)
 8009122:	4293      	cmp	r3, r2
 8009124:	d01d      	beq.n	8009162 <HAL_DMA_IRQHandler+0xe1a>
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	4a32      	ldr	r2, [pc, #200]	@ (80091f4 <HAL_DMA_IRQHandler+0xeac>)
 800912c:	4293      	cmp	r3, r2
 800912e:	d018      	beq.n	8009162 <HAL_DMA_IRQHandler+0xe1a>
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	4a30      	ldr	r2, [pc, #192]	@ (80091f8 <HAL_DMA_IRQHandler+0xeb0>)
 8009136:	4293      	cmp	r3, r2
 8009138:	d013      	beq.n	8009162 <HAL_DMA_IRQHandler+0xe1a>
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	4a2f      	ldr	r2, [pc, #188]	@ (80091fc <HAL_DMA_IRQHandler+0xeb4>)
 8009140:	4293      	cmp	r3, r2
 8009142:	d00e      	beq.n	8009162 <HAL_DMA_IRQHandler+0xe1a>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	4a2d      	ldr	r2, [pc, #180]	@ (8009200 <HAL_DMA_IRQHandler+0xeb8>)
 800914a:	4293      	cmp	r3, r2
 800914c:	d009      	beq.n	8009162 <HAL_DMA_IRQHandler+0xe1a>
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	4a2c      	ldr	r2, [pc, #176]	@ (8009204 <HAL_DMA_IRQHandler+0xebc>)
 8009154:	4293      	cmp	r3, r2
 8009156:	d004      	beq.n	8009162 <HAL_DMA_IRQHandler+0xe1a>
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	4a2a      	ldr	r2, [pc, #168]	@ (8009208 <HAL_DMA_IRQHandler+0xec0>)
 800915e:	4293      	cmp	r3, r2
 8009160:	d108      	bne.n	8009174 <HAL_DMA_IRQHandler+0xe2c>
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	681a      	ldr	r2, [r3, #0]
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f022 021c 	bic.w	r2, r2, #28
 8009170:	601a      	str	r2, [r3, #0]
 8009172:	e007      	b.n	8009184 <HAL_DMA_IRQHandler+0xe3c>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	681a      	ldr	r2, [r3, #0]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f022 020e 	bic.w	r2, r2, #14
 8009182:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009188:	f003 031f 	and.w	r3, r3, #31
 800918c:	2201      	movs	r2, #1
 800918e:	409a      	lsls	r2, r3
 8009190:	69fb      	ldr	r3, [r7, #28]
 8009192:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2201      	movs	r2, #1
 8009198:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2201      	movs	r2, #1
 800919e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2200      	movs	r2, #0
 80091a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d009      	beq.n	80091c6 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	4798      	blx	r3
 80091ba:	e004      	b.n	80091c6 <HAL_DMA_IRQHandler+0xe7e>
          return;
 80091bc:	bf00      	nop
 80091be:	e002      	b.n	80091c6 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80091c0:	bf00      	nop
 80091c2:	e000      	b.n	80091c6 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80091c4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80091c6:	3728      	adds	r7, #40	@ 0x28
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bd80      	pop	{r7, pc}
 80091cc:	40020010 	.word	0x40020010
 80091d0:	40020028 	.word	0x40020028
 80091d4:	40020040 	.word	0x40020040
 80091d8:	40020058 	.word	0x40020058
 80091dc:	40020070 	.word	0x40020070
 80091e0:	40020088 	.word	0x40020088
 80091e4:	400200a0 	.word	0x400200a0
 80091e8:	400200b8 	.word	0x400200b8
 80091ec:	40020410 	.word	0x40020410
 80091f0:	40020428 	.word	0x40020428
 80091f4:	40020440 	.word	0x40020440
 80091f8:	40020458 	.word	0x40020458
 80091fc:	40020470 	.word	0x40020470
 8009200:	40020488 	.word	0x40020488
 8009204:	400204a0 	.word	0x400204a0
 8009208:	400204b8 	.word	0x400204b8

0800920c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800920c:	b480      	push	{r7}
 800920e:	b083      	sub	sp, #12
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8009218:	4618      	mov	r0, r3
 800921a:	370c      	adds	r7, #12
 800921c:	46bd      	mov	sp, r7
 800921e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009222:	4770      	bx	lr

08009224 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009224:	b480      	push	{r7}
 8009226:	b087      	sub	sp, #28
 8009228:	af00      	add	r7, sp, #0
 800922a:	60f8      	str	r0, [r7, #12]
 800922c:	60b9      	str	r1, [r7, #8]
 800922e:	607a      	str	r2, [r7, #4]
 8009230:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009236:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800923c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	4a7f      	ldr	r2, [pc, #508]	@ (8009440 <DMA_SetConfig+0x21c>)
 8009244:	4293      	cmp	r3, r2
 8009246:	d072      	beq.n	800932e <DMA_SetConfig+0x10a>
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	4a7d      	ldr	r2, [pc, #500]	@ (8009444 <DMA_SetConfig+0x220>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d06d      	beq.n	800932e <DMA_SetConfig+0x10a>
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	4a7c      	ldr	r2, [pc, #496]	@ (8009448 <DMA_SetConfig+0x224>)
 8009258:	4293      	cmp	r3, r2
 800925a:	d068      	beq.n	800932e <DMA_SetConfig+0x10a>
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4a7a      	ldr	r2, [pc, #488]	@ (800944c <DMA_SetConfig+0x228>)
 8009262:	4293      	cmp	r3, r2
 8009264:	d063      	beq.n	800932e <DMA_SetConfig+0x10a>
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	4a79      	ldr	r2, [pc, #484]	@ (8009450 <DMA_SetConfig+0x22c>)
 800926c:	4293      	cmp	r3, r2
 800926e:	d05e      	beq.n	800932e <DMA_SetConfig+0x10a>
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4a77      	ldr	r2, [pc, #476]	@ (8009454 <DMA_SetConfig+0x230>)
 8009276:	4293      	cmp	r3, r2
 8009278:	d059      	beq.n	800932e <DMA_SetConfig+0x10a>
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	4a76      	ldr	r2, [pc, #472]	@ (8009458 <DMA_SetConfig+0x234>)
 8009280:	4293      	cmp	r3, r2
 8009282:	d054      	beq.n	800932e <DMA_SetConfig+0x10a>
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	4a74      	ldr	r2, [pc, #464]	@ (800945c <DMA_SetConfig+0x238>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d04f      	beq.n	800932e <DMA_SetConfig+0x10a>
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	4a73      	ldr	r2, [pc, #460]	@ (8009460 <DMA_SetConfig+0x23c>)
 8009294:	4293      	cmp	r3, r2
 8009296:	d04a      	beq.n	800932e <DMA_SetConfig+0x10a>
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	4a71      	ldr	r2, [pc, #452]	@ (8009464 <DMA_SetConfig+0x240>)
 800929e:	4293      	cmp	r3, r2
 80092a0:	d045      	beq.n	800932e <DMA_SetConfig+0x10a>
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	4a70      	ldr	r2, [pc, #448]	@ (8009468 <DMA_SetConfig+0x244>)
 80092a8:	4293      	cmp	r3, r2
 80092aa:	d040      	beq.n	800932e <DMA_SetConfig+0x10a>
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	4a6e      	ldr	r2, [pc, #440]	@ (800946c <DMA_SetConfig+0x248>)
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d03b      	beq.n	800932e <DMA_SetConfig+0x10a>
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	4a6d      	ldr	r2, [pc, #436]	@ (8009470 <DMA_SetConfig+0x24c>)
 80092bc:	4293      	cmp	r3, r2
 80092be:	d036      	beq.n	800932e <DMA_SetConfig+0x10a>
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	4a6b      	ldr	r2, [pc, #428]	@ (8009474 <DMA_SetConfig+0x250>)
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d031      	beq.n	800932e <DMA_SetConfig+0x10a>
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	4a6a      	ldr	r2, [pc, #424]	@ (8009478 <DMA_SetConfig+0x254>)
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d02c      	beq.n	800932e <DMA_SetConfig+0x10a>
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	4a68      	ldr	r2, [pc, #416]	@ (800947c <DMA_SetConfig+0x258>)
 80092da:	4293      	cmp	r3, r2
 80092dc:	d027      	beq.n	800932e <DMA_SetConfig+0x10a>
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	4a67      	ldr	r2, [pc, #412]	@ (8009480 <DMA_SetConfig+0x25c>)
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d022      	beq.n	800932e <DMA_SetConfig+0x10a>
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	4a65      	ldr	r2, [pc, #404]	@ (8009484 <DMA_SetConfig+0x260>)
 80092ee:	4293      	cmp	r3, r2
 80092f0:	d01d      	beq.n	800932e <DMA_SetConfig+0x10a>
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	4a64      	ldr	r2, [pc, #400]	@ (8009488 <DMA_SetConfig+0x264>)
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d018      	beq.n	800932e <DMA_SetConfig+0x10a>
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	4a62      	ldr	r2, [pc, #392]	@ (800948c <DMA_SetConfig+0x268>)
 8009302:	4293      	cmp	r3, r2
 8009304:	d013      	beq.n	800932e <DMA_SetConfig+0x10a>
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	4a61      	ldr	r2, [pc, #388]	@ (8009490 <DMA_SetConfig+0x26c>)
 800930c:	4293      	cmp	r3, r2
 800930e:	d00e      	beq.n	800932e <DMA_SetConfig+0x10a>
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	4a5f      	ldr	r2, [pc, #380]	@ (8009494 <DMA_SetConfig+0x270>)
 8009316:	4293      	cmp	r3, r2
 8009318:	d009      	beq.n	800932e <DMA_SetConfig+0x10a>
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	4a5e      	ldr	r2, [pc, #376]	@ (8009498 <DMA_SetConfig+0x274>)
 8009320:	4293      	cmp	r3, r2
 8009322:	d004      	beq.n	800932e <DMA_SetConfig+0x10a>
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	4a5c      	ldr	r2, [pc, #368]	@ (800949c <DMA_SetConfig+0x278>)
 800932a:	4293      	cmp	r3, r2
 800932c:	d101      	bne.n	8009332 <DMA_SetConfig+0x10e>
 800932e:	2301      	movs	r3, #1
 8009330:	e000      	b.n	8009334 <DMA_SetConfig+0x110>
 8009332:	2300      	movs	r3, #0
 8009334:	2b00      	cmp	r3, #0
 8009336:	d00d      	beq.n	8009354 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800933c:	68fa      	ldr	r2, [r7, #12]
 800933e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8009340:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009346:	2b00      	cmp	r3, #0
 8009348:	d004      	beq.n	8009354 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800934e:	68fa      	ldr	r2, [r7, #12]
 8009350:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8009352:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	4a39      	ldr	r2, [pc, #228]	@ (8009440 <DMA_SetConfig+0x21c>)
 800935a:	4293      	cmp	r3, r2
 800935c:	d04a      	beq.n	80093f4 <DMA_SetConfig+0x1d0>
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	4a38      	ldr	r2, [pc, #224]	@ (8009444 <DMA_SetConfig+0x220>)
 8009364:	4293      	cmp	r3, r2
 8009366:	d045      	beq.n	80093f4 <DMA_SetConfig+0x1d0>
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	4a36      	ldr	r2, [pc, #216]	@ (8009448 <DMA_SetConfig+0x224>)
 800936e:	4293      	cmp	r3, r2
 8009370:	d040      	beq.n	80093f4 <DMA_SetConfig+0x1d0>
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	4a35      	ldr	r2, [pc, #212]	@ (800944c <DMA_SetConfig+0x228>)
 8009378:	4293      	cmp	r3, r2
 800937a:	d03b      	beq.n	80093f4 <DMA_SetConfig+0x1d0>
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	4a33      	ldr	r2, [pc, #204]	@ (8009450 <DMA_SetConfig+0x22c>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d036      	beq.n	80093f4 <DMA_SetConfig+0x1d0>
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	4a32      	ldr	r2, [pc, #200]	@ (8009454 <DMA_SetConfig+0x230>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d031      	beq.n	80093f4 <DMA_SetConfig+0x1d0>
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	4a30      	ldr	r2, [pc, #192]	@ (8009458 <DMA_SetConfig+0x234>)
 8009396:	4293      	cmp	r3, r2
 8009398:	d02c      	beq.n	80093f4 <DMA_SetConfig+0x1d0>
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	4a2f      	ldr	r2, [pc, #188]	@ (800945c <DMA_SetConfig+0x238>)
 80093a0:	4293      	cmp	r3, r2
 80093a2:	d027      	beq.n	80093f4 <DMA_SetConfig+0x1d0>
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	4a2d      	ldr	r2, [pc, #180]	@ (8009460 <DMA_SetConfig+0x23c>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d022      	beq.n	80093f4 <DMA_SetConfig+0x1d0>
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	4a2c      	ldr	r2, [pc, #176]	@ (8009464 <DMA_SetConfig+0x240>)
 80093b4:	4293      	cmp	r3, r2
 80093b6:	d01d      	beq.n	80093f4 <DMA_SetConfig+0x1d0>
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	4a2a      	ldr	r2, [pc, #168]	@ (8009468 <DMA_SetConfig+0x244>)
 80093be:	4293      	cmp	r3, r2
 80093c0:	d018      	beq.n	80093f4 <DMA_SetConfig+0x1d0>
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	4a29      	ldr	r2, [pc, #164]	@ (800946c <DMA_SetConfig+0x248>)
 80093c8:	4293      	cmp	r3, r2
 80093ca:	d013      	beq.n	80093f4 <DMA_SetConfig+0x1d0>
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	4a27      	ldr	r2, [pc, #156]	@ (8009470 <DMA_SetConfig+0x24c>)
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d00e      	beq.n	80093f4 <DMA_SetConfig+0x1d0>
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	4a26      	ldr	r2, [pc, #152]	@ (8009474 <DMA_SetConfig+0x250>)
 80093dc:	4293      	cmp	r3, r2
 80093de:	d009      	beq.n	80093f4 <DMA_SetConfig+0x1d0>
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	4a24      	ldr	r2, [pc, #144]	@ (8009478 <DMA_SetConfig+0x254>)
 80093e6:	4293      	cmp	r3, r2
 80093e8:	d004      	beq.n	80093f4 <DMA_SetConfig+0x1d0>
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	4a23      	ldr	r2, [pc, #140]	@ (800947c <DMA_SetConfig+0x258>)
 80093f0:	4293      	cmp	r3, r2
 80093f2:	d101      	bne.n	80093f8 <DMA_SetConfig+0x1d4>
 80093f4:	2301      	movs	r3, #1
 80093f6:	e000      	b.n	80093fa <DMA_SetConfig+0x1d6>
 80093f8:	2300      	movs	r3, #0
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d059      	beq.n	80094b2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009402:	f003 031f 	and.w	r3, r3, #31
 8009406:	223f      	movs	r2, #63	@ 0x3f
 8009408:	409a      	lsls	r2, r3
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	681a      	ldr	r2, [r3, #0]
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800941c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	683a      	ldr	r2, [r7, #0]
 8009424:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	689b      	ldr	r3, [r3, #8]
 800942a:	2b40      	cmp	r3, #64	@ 0x40
 800942c:	d138      	bne.n	80094a0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	687a      	ldr	r2, [r7, #4]
 8009434:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	68ba      	ldr	r2, [r7, #8]
 800943c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800943e:	e0ae      	b.n	800959e <DMA_SetConfig+0x37a>
 8009440:	40020010 	.word	0x40020010
 8009444:	40020028 	.word	0x40020028
 8009448:	40020040 	.word	0x40020040
 800944c:	40020058 	.word	0x40020058
 8009450:	40020070 	.word	0x40020070
 8009454:	40020088 	.word	0x40020088
 8009458:	400200a0 	.word	0x400200a0
 800945c:	400200b8 	.word	0x400200b8
 8009460:	40020410 	.word	0x40020410
 8009464:	40020428 	.word	0x40020428
 8009468:	40020440 	.word	0x40020440
 800946c:	40020458 	.word	0x40020458
 8009470:	40020470 	.word	0x40020470
 8009474:	40020488 	.word	0x40020488
 8009478:	400204a0 	.word	0x400204a0
 800947c:	400204b8 	.word	0x400204b8
 8009480:	58025408 	.word	0x58025408
 8009484:	5802541c 	.word	0x5802541c
 8009488:	58025430 	.word	0x58025430
 800948c:	58025444 	.word	0x58025444
 8009490:	58025458 	.word	0x58025458
 8009494:	5802546c 	.word	0x5802546c
 8009498:	58025480 	.word	0x58025480
 800949c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	68ba      	ldr	r2, [r7, #8]
 80094a6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	687a      	ldr	r2, [r7, #4]
 80094ae:	60da      	str	r2, [r3, #12]
}
 80094b0:	e075      	b.n	800959e <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	4a3d      	ldr	r2, [pc, #244]	@ (80095ac <DMA_SetConfig+0x388>)
 80094b8:	4293      	cmp	r3, r2
 80094ba:	d04a      	beq.n	8009552 <DMA_SetConfig+0x32e>
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	4a3b      	ldr	r2, [pc, #236]	@ (80095b0 <DMA_SetConfig+0x38c>)
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d045      	beq.n	8009552 <DMA_SetConfig+0x32e>
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	4a3a      	ldr	r2, [pc, #232]	@ (80095b4 <DMA_SetConfig+0x390>)
 80094cc:	4293      	cmp	r3, r2
 80094ce:	d040      	beq.n	8009552 <DMA_SetConfig+0x32e>
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	4a38      	ldr	r2, [pc, #224]	@ (80095b8 <DMA_SetConfig+0x394>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d03b      	beq.n	8009552 <DMA_SetConfig+0x32e>
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	4a37      	ldr	r2, [pc, #220]	@ (80095bc <DMA_SetConfig+0x398>)
 80094e0:	4293      	cmp	r3, r2
 80094e2:	d036      	beq.n	8009552 <DMA_SetConfig+0x32e>
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	4a35      	ldr	r2, [pc, #212]	@ (80095c0 <DMA_SetConfig+0x39c>)
 80094ea:	4293      	cmp	r3, r2
 80094ec:	d031      	beq.n	8009552 <DMA_SetConfig+0x32e>
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	4a34      	ldr	r2, [pc, #208]	@ (80095c4 <DMA_SetConfig+0x3a0>)
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d02c      	beq.n	8009552 <DMA_SetConfig+0x32e>
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	4a32      	ldr	r2, [pc, #200]	@ (80095c8 <DMA_SetConfig+0x3a4>)
 80094fe:	4293      	cmp	r3, r2
 8009500:	d027      	beq.n	8009552 <DMA_SetConfig+0x32e>
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	4a31      	ldr	r2, [pc, #196]	@ (80095cc <DMA_SetConfig+0x3a8>)
 8009508:	4293      	cmp	r3, r2
 800950a:	d022      	beq.n	8009552 <DMA_SetConfig+0x32e>
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	4a2f      	ldr	r2, [pc, #188]	@ (80095d0 <DMA_SetConfig+0x3ac>)
 8009512:	4293      	cmp	r3, r2
 8009514:	d01d      	beq.n	8009552 <DMA_SetConfig+0x32e>
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	4a2e      	ldr	r2, [pc, #184]	@ (80095d4 <DMA_SetConfig+0x3b0>)
 800951c:	4293      	cmp	r3, r2
 800951e:	d018      	beq.n	8009552 <DMA_SetConfig+0x32e>
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	4a2c      	ldr	r2, [pc, #176]	@ (80095d8 <DMA_SetConfig+0x3b4>)
 8009526:	4293      	cmp	r3, r2
 8009528:	d013      	beq.n	8009552 <DMA_SetConfig+0x32e>
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	4a2b      	ldr	r2, [pc, #172]	@ (80095dc <DMA_SetConfig+0x3b8>)
 8009530:	4293      	cmp	r3, r2
 8009532:	d00e      	beq.n	8009552 <DMA_SetConfig+0x32e>
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	4a29      	ldr	r2, [pc, #164]	@ (80095e0 <DMA_SetConfig+0x3bc>)
 800953a:	4293      	cmp	r3, r2
 800953c:	d009      	beq.n	8009552 <DMA_SetConfig+0x32e>
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	4a28      	ldr	r2, [pc, #160]	@ (80095e4 <DMA_SetConfig+0x3c0>)
 8009544:	4293      	cmp	r3, r2
 8009546:	d004      	beq.n	8009552 <DMA_SetConfig+0x32e>
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	4a26      	ldr	r2, [pc, #152]	@ (80095e8 <DMA_SetConfig+0x3c4>)
 800954e:	4293      	cmp	r3, r2
 8009550:	d101      	bne.n	8009556 <DMA_SetConfig+0x332>
 8009552:	2301      	movs	r3, #1
 8009554:	e000      	b.n	8009558 <DMA_SetConfig+0x334>
 8009556:	2300      	movs	r3, #0
 8009558:	2b00      	cmp	r3, #0
 800955a:	d020      	beq.n	800959e <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009560:	f003 031f 	and.w	r3, r3, #31
 8009564:	2201      	movs	r2, #1
 8009566:	409a      	lsls	r2, r3
 8009568:	693b      	ldr	r3, [r7, #16]
 800956a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	683a      	ldr	r2, [r7, #0]
 8009572:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	689b      	ldr	r3, [r3, #8]
 8009578:	2b40      	cmp	r3, #64	@ 0x40
 800957a:	d108      	bne.n	800958e <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	687a      	ldr	r2, [r7, #4]
 8009582:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	68ba      	ldr	r2, [r7, #8]
 800958a:	60da      	str	r2, [r3, #12]
}
 800958c:	e007      	b.n	800959e <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	68ba      	ldr	r2, [r7, #8]
 8009594:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	687a      	ldr	r2, [r7, #4]
 800959c:	60da      	str	r2, [r3, #12]
}
 800959e:	bf00      	nop
 80095a0:	371c      	adds	r7, #28
 80095a2:	46bd      	mov	sp, r7
 80095a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a8:	4770      	bx	lr
 80095aa:	bf00      	nop
 80095ac:	48022c08 	.word	0x48022c08
 80095b0:	48022c1c 	.word	0x48022c1c
 80095b4:	48022c30 	.word	0x48022c30
 80095b8:	48022c44 	.word	0x48022c44
 80095bc:	48022c58 	.word	0x48022c58
 80095c0:	48022c6c 	.word	0x48022c6c
 80095c4:	48022c80 	.word	0x48022c80
 80095c8:	48022c94 	.word	0x48022c94
 80095cc:	58025408 	.word	0x58025408
 80095d0:	5802541c 	.word	0x5802541c
 80095d4:	58025430 	.word	0x58025430
 80095d8:	58025444 	.word	0x58025444
 80095dc:	58025458 	.word	0x58025458
 80095e0:	5802546c 	.word	0x5802546c
 80095e4:	58025480 	.word	0x58025480
 80095e8:	58025494 	.word	0x58025494

080095ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80095ec:	b480      	push	{r7}
 80095ee:	b085      	sub	sp, #20
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	4a42      	ldr	r2, [pc, #264]	@ (8009704 <DMA_CalcBaseAndBitshift+0x118>)
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d04a      	beq.n	8009694 <DMA_CalcBaseAndBitshift+0xa8>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	4a41      	ldr	r2, [pc, #260]	@ (8009708 <DMA_CalcBaseAndBitshift+0x11c>)
 8009604:	4293      	cmp	r3, r2
 8009606:	d045      	beq.n	8009694 <DMA_CalcBaseAndBitshift+0xa8>
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	4a3f      	ldr	r2, [pc, #252]	@ (800970c <DMA_CalcBaseAndBitshift+0x120>)
 800960e:	4293      	cmp	r3, r2
 8009610:	d040      	beq.n	8009694 <DMA_CalcBaseAndBitshift+0xa8>
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	4a3e      	ldr	r2, [pc, #248]	@ (8009710 <DMA_CalcBaseAndBitshift+0x124>)
 8009618:	4293      	cmp	r3, r2
 800961a:	d03b      	beq.n	8009694 <DMA_CalcBaseAndBitshift+0xa8>
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	4a3c      	ldr	r2, [pc, #240]	@ (8009714 <DMA_CalcBaseAndBitshift+0x128>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d036      	beq.n	8009694 <DMA_CalcBaseAndBitshift+0xa8>
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	4a3b      	ldr	r2, [pc, #236]	@ (8009718 <DMA_CalcBaseAndBitshift+0x12c>)
 800962c:	4293      	cmp	r3, r2
 800962e:	d031      	beq.n	8009694 <DMA_CalcBaseAndBitshift+0xa8>
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	4a39      	ldr	r2, [pc, #228]	@ (800971c <DMA_CalcBaseAndBitshift+0x130>)
 8009636:	4293      	cmp	r3, r2
 8009638:	d02c      	beq.n	8009694 <DMA_CalcBaseAndBitshift+0xa8>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	4a38      	ldr	r2, [pc, #224]	@ (8009720 <DMA_CalcBaseAndBitshift+0x134>)
 8009640:	4293      	cmp	r3, r2
 8009642:	d027      	beq.n	8009694 <DMA_CalcBaseAndBitshift+0xa8>
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	4a36      	ldr	r2, [pc, #216]	@ (8009724 <DMA_CalcBaseAndBitshift+0x138>)
 800964a:	4293      	cmp	r3, r2
 800964c:	d022      	beq.n	8009694 <DMA_CalcBaseAndBitshift+0xa8>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	4a35      	ldr	r2, [pc, #212]	@ (8009728 <DMA_CalcBaseAndBitshift+0x13c>)
 8009654:	4293      	cmp	r3, r2
 8009656:	d01d      	beq.n	8009694 <DMA_CalcBaseAndBitshift+0xa8>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	4a33      	ldr	r2, [pc, #204]	@ (800972c <DMA_CalcBaseAndBitshift+0x140>)
 800965e:	4293      	cmp	r3, r2
 8009660:	d018      	beq.n	8009694 <DMA_CalcBaseAndBitshift+0xa8>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	4a32      	ldr	r2, [pc, #200]	@ (8009730 <DMA_CalcBaseAndBitshift+0x144>)
 8009668:	4293      	cmp	r3, r2
 800966a:	d013      	beq.n	8009694 <DMA_CalcBaseAndBitshift+0xa8>
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	4a30      	ldr	r2, [pc, #192]	@ (8009734 <DMA_CalcBaseAndBitshift+0x148>)
 8009672:	4293      	cmp	r3, r2
 8009674:	d00e      	beq.n	8009694 <DMA_CalcBaseAndBitshift+0xa8>
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	4a2f      	ldr	r2, [pc, #188]	@ (8009738 <DMA_CalcBaseAndBitshift+0x14c>)
 800967c:	4293      	cmp	r3, r2
 800967e:	d009      	beq.n	8009694 <DMA_CalcBaseAndBitshift+0xa8>
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	4a2d      	ldr	r2, [pc, #180]	@ (800973c <DMA_CalcBaseAndBitshift+0x150>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d004      	beq.n	8009694 <DMA_CalcBaseAndBitshift+0xa8>
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	4a2c      	ldr	r2, [pc, #176]	@ (8009740 <DMA_CalcBaseAndBitshift+0x154>)
 8009690:	4293      	cmp	r3, r2
 8009692:	d101      	bne.n	8009698 <DMA_CalcBaseAndBitshift+0xac>
 8009694:	2301      	movs	r3, #1
 8009696:	e000      	b.n	800969a <DMA_CalcBaseAndBitshift+0xae>
 8009698:	2300      	movs	r3, #0
 800969a:	2b00      	cmp	r3, #0
 800969c:	d024      	beq.n	80096e8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	b2db      	uxtb	r3, r3
 80096a4:	3b10      	subs	r3, #16
 80096a6:	4a27      	ldr	r2, [pc, #156]	@ (8009744 <DMA_CalcBaseAndBitshift+0x158>)
 80096a8:	fba2 2303 	umull	r2, r3, r2, r3
 80096ac:	091b      	lsrs	r3, r3, #4
 80096ae:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	f003 0307 	and.w	r3, r3, #7
 80096b6:	4a24      	ldr	r2, [pc, #144]	@ (8009748 <DMA_CalcBaseAndBitshift+0x15c>)
 80096b8:	5cd3      	ldrb	r3, [r2, r3]
 80096ba:	461a      	mov	r2, r3
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	2b03      	cmp	r3, #3
 80096c4:	d908      	bls.n	80096d8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	461a      	mov	r2, r3
 80096cc:	4b1f      	ldr	r3, [pc, #124]	@ (800974c <DMA_CalcBaseAndBitshift+0x160>)
 80096ce:	4013      	ands	r3, r2
 80096d0:	1d1a      	adds	r2, r3, #4
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	659a      	str	r2, [r3, #88]	@ 0x58
 80096d6:	e00d      	b.n	80096f4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	461a      	mov	r2, r3
 80096de:	4b1b      	ldr	r3, [pc, #108]	@ (800974c <DMA_CalcBaseAndBitshift+0x160>)
 80096e0:	4013      	ands	r3, r2
 80096e2:	687a      	ldr	r2, [r7, #4]
 80096e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80096e6:	e005      	b.n	80096f4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80096f8:	4618      	mov	r0, r3
 80096fa:	3714      	adds	r7, #20
 80096fc:	46bd      	mov	sp, r7
 80096fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009702:	4770      	bx	lr
 8009704:	40020010 	.word	0x40020010
 8009708:	40020028 	.word	0x40020028
 800970c:	40020040 	.word	0x40020040
 8009710:	40020058 	.word	0x40020058
 8009714:	40020070 	.word	0x40020070
 8009718:	40020088 	.word	0x40020088
 800971c:	400200a0 	.word	0x400200a0
 8009720:	400200b8 	.word	0x400200b8
 8009724:	40020410 	.word	0x40020410
 8009728:	40020428 	.word	0x40020428
 800972c:	40020440 	.word	0x40020440
 8009730:	40020458 	.word	0x40020458
 8009734:	40020470 	.word	0x40020470
 8009738:	40020488 	.word	0x40020488
 800973c:	400204a0 	.word	0x400204a0
 8009740:	400204b8 	.word	0x400204b8
 8009744:	aaaaaaab 	.word	0xaaaaaaab
 8009748:	08019ed4 	.word	0x08019ed4
 800974c:	fffffc00 	.word	0xfffffc00

08009750 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009750:	b480      	push	{r7}
 8009752:	b085      	sub	sp, #20
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009758:	2300      	movs	r3, #0
 800975a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	699b      	ldr	r3, [r3, #24]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d120      	bne.n	80097a6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009768:	2b03      	cmp	r3, #3
 800976a:	d858      	bhi.n	800981e <DMA_CheckFifoParam+0xce>
 800976c:	a201      	add	r2, pc, #4	@ (adr r2, 8009774 <DMA_CheckFifoParam+0x24>)
 800976e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009772:	bf00      	nop
 8009774:	08009785 	.word	0x08009785
 8009778:	08009797 	.word	0x08009797
 800977c:	08009785 	.word	0x08009785
 8009780:	0800981f 	.word	0x0800981f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009788:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800978c:	2b00      	cmp	r3, #0
 800978e:	d048      	beq.n	8009822 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8009790:	2301      	movs	r3, #1
 8009792:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009794:	e045      	b.n	8009822 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800979a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800979e:	d142      	bne.n	8009826 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80097a0:	2301      	movs	r3, #1
 80097a2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80097a4:	e03f      	b.n	8009826 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	699b      	ldr	r3, [r3, #24]
 80097aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80097ae:	d123      	bne.n	80097f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097b4:	2b03      	cmp	r3, #3
 80097b6:	d838      	bhi.n	800982a <DMA_CheckFifoParam+0xda>
 80097b8:	a201      	add	r2, pc, #4	@ (adr r2, 80097c0 <DMA_CheckFifoParam+0x70>)
 80097ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097be:	bf00      	nop
 80097c0:	080097d1 	.word	0x080097d1
 80097c4:	080097d7 	.word	0x080097d7
 80097c8:	080097d1 	.word	0x080097d1
 80097cc:	080097e9 	.word	0x080097e9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80097d0:	2301      	movs	r3, #1
 80097d2:	73fb      	strb	r3, [r7, #15]
        break;
 80097d4:	e030      	b.n	8009838 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097da:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d025      	beq.n	800982e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80097e2:	2301      	movs	r3, #1
 80097e4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80097e6:	e022      	b.n	800982e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097ec:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80097f0:	d11f      	bne.n	8009832 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80097f2:	2301      	movs	r3, #1
 80097f4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80097f6:	e01c      	b.n	8009832 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097fc:	2b02      	cmp	r3, #2
 80097fe:	d902      	bls.n	8009806 <DMA_CheckFifoParam+0xb6>
 8009800:	2b03      	cmp	r3, #3
 8009802:	d003      	beq.n	800980c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8009804:	e018      	b.n	8009838 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8009806:	2301      	movs	r3, #1
 8009808:	73fb      	strb	r3, [r7, #15]
        break;
 800980a:	e015      	b.n	8009838 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009810:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009814:	2b00      	cmp	r3, #0
 8009816:	d00e      	beq.n	8009836 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8009818:	2301      	movs	r3, #1
 800981a:	73fb      	strb	r3, [r7, #15]
    break;
 800981c:	e00b      	b.n	8009836 <DMA_CheckFifoParam+0xe6>
        break;
 800981e:	bf00      	nop
 8009820:	e00a      	b.n	8009838 <DMA_CheckFifoParam+0xe8>
        break;
 8009822:	bf00      	nop
 8009824:	e008      	b.n	8009838 <DMA_CheckFifoParam+0xe8>
        break;
 8009826:	bf00      	nop
 8009828:	e006      	b.n	8009838 <DMA_CheckFifoParam+0xe8>
        break;
 800982a:	bf00      	nop
 800982c:	e004      	b.n	8009838 <DMA_CheckFifoParam+0xe8>
        break;
 800982e:	bf00      	nop
 8009830:	e002      	b.n	8009838 <DMA_CheckFifoParam+0xe8>
        break;
 8009832:	bf00      	nop
 8009834:	e000      	b.n	8009838 <DMA_CheckFifoParam+0xe8>
    break;
 8009836:	bf00      	nop
    }
  }

  return status;
 8009838:	7bfb      	ldrb	r3, [r7, #15]
}
 800983a:	4618      	mov	r0, r3
 800983c:	3714      	adds	r7, #20
 800983e:	46bd      	mov	sp, r7
 8009840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009844:	4770      	bx	lr
 8009846:	bf00      	nop

08009848 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009848:	b480      	push	{r7}
 800984a:	b085      	sub	sp, #20
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	4a38      	ldr	r2, [pc, #224]	@ (800993c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d022      	beq.n	80098a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	4a36      	ldr	r2, [pc, #216]	@ (8009940 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8009866:	4293      	cmp	r3, r2
 8009868:	d01d      	beq.n	80098a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	4a35      	ldr	r2, [pc, #212]	@ (8009944 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8009870:	4293      	cmp	r3, r2
 8009872:	d018      	beq.n	80098a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	4a33      	ldr	r2, [pc, #204]	@ (8009948 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800987a:	4293      	cmp	r3, r2
 800987c:	d013      	beq.n	80098a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	4a32      	ldr	r2, [pc, #200]	@ (800994c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8009884:	4293      	cmp	r3, r2
 8009886:	d00e      	beq.n	80098a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	4a30      	ldr	r2, [pc, #192]	@ (8009950 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800988e:	4293      	cmp	r3, r2
 8009890:	d009      	beq.n	80098a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	4a2f      	ldr	r2, [pc, #188]	@ (8009954 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8009898:	4293      	cmp	r3, r2
 800989a:	d004      	beq.n	80098a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	4a2d      	ldr	r2, [pc, #180]	@ (8009958 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80098a2:	4293      	cmp	r3, r2
 80098a4:	d101      	bne.n	80098aa <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80098a6:	2301      	movs	r3, #1
 80098a8:	e000      	b.n	80098ac <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80098aa:	2300      	movs	r3, #0
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d01a      	beq.n	80098e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	b2db      	uxtb	r3, r3
 80098b6:	3b08      	subs	r3, #8
 80098b8:	4a28      	ldr	r2, [pc, #160]	@ (800995c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80098ba:	fba2 2303 	umull	r2, r3, r2, r3
 80098be:	091b      	lsrs	r3, r3, #4
 80098c0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80098c2:	68fa      	ldr	r2, [r7, #12]
 80098c4:	4b26      	ldr	r3, [pc, #152]	@ (8009960 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80098c6:	4413      	add	r3, r2
 80098c8:	009b      	lsls	r3, r3, #2
 80098ca:	461a      	mov	r2, r3
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	4a24      	ldr	r2, [pc, #144]	@ (8009964 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80098d4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	f003 031f 	and.w	r3, r3, #31
 80098dc:	2201      	movs	r2, #1
 80098de:	409a      	lsls	r2, r3
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80098e4:	e024      	b.n	8009930 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	b2db      	uxtb	r3, r3
 80098ec:	3b10      	subs	r3, #16
 80098ee:	4a1e      	ldr	r2, [pc, #120]	@ (8009968 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80098f0:	fba2 2303 	umull	r2, r3, r2, r3
 80098f4:	091b      	lsrs	r3, r3, #4
 80098f6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	4a1c      	ldr	r2, [pc, #112]	@ (800996c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d806      	bhi.n	800990e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	4a1b      	ldr	r2, [pc, #108]	@ (8009970 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8009904:	4293      	cmp	r3, r2
 8009906:	d902      	bls.n	800990e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	3308      	adds	r3, #8
 800990c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800990e:	68fa      	ldr	r2, [r7, #12]
 8009910:	4b18      	ldr	r3, [pc, #96]	@ (8009974 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8009912:	4413      	add	r3, r2
 8009914:	009b      	lsls	r3, r3, #2
 8009916:	461a      	mov	r2, r3
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	4a16      	ldr	r2, [pc, #88]	@ (8009978 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8009920:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	f003 031f 	and.w	r3, r3, #31
 8009928:	2201      	movs	r2, #1
 800992a:	409a      	lsls	r2, r3
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009930:	bf00      	nop
 8009932:	3714      	adds	r7, #20
 8009934:	46bd      	mov	sp, r7
 8009936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993a:	4770      	bx	lr
 800993c:	58025408 	.word	0x58025408
 8009940:	5802541c 	.word	0x5802541c
 8009944:	58025430 	.word	0x58025430
 8009948:	58025444 	.word	0x58025444
 800994c:	58025458 	.word	0x58025458
 8009950:	5802546c 	.word	0x5802546c
 8009954:	58025480 	.word	0x58025480
 8009958:	58025494 	.word	0x58025494
 800995c:	cccccccd 	.word	0xcccccccd
 8009960:	16009600 	.word	0x16009600
 8009964:	58025880 	.word	0x58025880
 8009968:	aaaaaaab 	.word	0xaaaaaaab
 800996c:	400204b8 	.word	0x400204b8
 8009970:	4002040f 	.word	0x4002040f
 8009974:	10008200 	.word	0x10008200
 8009978:	40020880 	.word	0x40020880

0800997c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800997c:	b480      	push	{r7}
 800997e:	b085      	sub	sp, #20
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	685b      	ldr	r3, [r3, #4]
 8009988:	b2db      	uxtb	r3, r3
 800998a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d04a      	beq.n	8009a28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	2b08      	cmp	r3, #8
 8009996:	d847      	bhi.n	8009a28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	4a25      	ldr	r2, [pc, #148]	@ (8009a34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800999e:	4293      	cmp	r3, r2
 80099a0:	d022      	beq.n	80099e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	4a24      	ldr	r2, [pc, #144]	@ (8009a38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80099a8:	4293      	cmp	r3, r2
 80099aa:	d01d      	beq.n	80099e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	4a22      	ldr	r2, [pc, #136]	@ (8009a3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d018      	beq.n	80099e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	4a21      	ldr	r2, [pc, #132]	@ (8009a40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d013      	beq.n	80099e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	4a1f      	ldr	r2, [pc, #124]	@ (8009a44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80099c6:	4293      	cmp	r3, r2
 80099c8:	d00e      	beq.n	80099e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	4a1e      	ldr	r2, [pc, #120]	@ (8009a48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80099d0:	4293      	cmp	r3, r2
 80099d2:	d009      	beq.n	80099e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	4a1c      	ldr	r2, [pc, #112]	@ (8009a4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80099da:	4293      	cmp	r3, r2
 80099dc:	d004      	beq.n	80099e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	4a1b      	ldr	r2, [pc, #108]	@ (8009a50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80099e4:	4293      	cmp	r3, r2
 80099e6:	d101      	bne.n	80099ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80099e8:	2301      	movs	r3, #1
 80099ea:	e000      	b.n	80099ee <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80099ec:	2300      	movs	r3, #0
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d00a      	beq.n	8009a08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80099f2:	68fa      	ldr	r2, [r7, #12]
 80099f4:	4b17      	ldr	r3, [pc, #92]	@ (8009a54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80099f6:	4413      	add	r3, r2
 80099f8:	009b      	lsls	r3, r3, #2
 80099fa:	461a      	mov	r2, r3
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	4a15      	ldr	r2, [pc, #84]	@ (8009a58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8009a04:	671a      	str	r2, [r3, #112]	@ 0x70
 8009a06:	e009      	b.n	8009a1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009a08:	68fa      	ldr	r2, [r7, #12]
 8009a0a:	4b14      	ldr	r3, [pc, #80]	@ (8009a5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8009a0c:	4413      	add	r3, r2
 8009a0e:	009b      	lsls	r3, r3, #2
 8009a10:	461a      	mov	r2, r3
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	4a11      	ldr	r2, [pc, #68]	@ (8009a60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8009a1a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	3b01      	subs	r3, #1
 8009a20:	2201      	movs	r2, #1
 8009a22:	409a      	lsls	r2, r3
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8009a28:	bf00      	nop
 8009a2a:	3714      	adds	r7, #20
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a32:	4770      	bx	lr
 8009a34:	58025408 	.word	0x58025408
 8009a38:	5802541c 	.word	0x5802541c
 8009a3c:	58025430 	.word	0x58025430
 8009a40:	58025444 	.word	0x58025444
 8009a44:	58025458 	.word	0x58025458
 8009a48:	5802546c 	.word	0x5802546c
 8009a4c:	58025480 	.word	0x58025480
 8009a50:	58025494 	.word	0x58025494
 8009a54:	1600963f 	.word	0x1600963f
 8009a58:	58025940 	.word	0x58025940
 8009a5c:	1000823f 	.word	0x1000823f
 8009a60:	40020940 	.word	0x40020940

08009a64 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b098      	sub	sp, #96	@ 0x60
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8009a6c:	4a84      	ldr	r2, [pc, #528]	@ (8009c80 <HAL_FDCAN_Init+0x21c>)
 8009a6e:	f107 030c 	add.w	r3, r7, #12
 8009a72:	4611      	mov	r1, r2
 8009a74:	224c      	movs	r2, #76	@ 0x4c
 8009a76:	4618      	mov	r0, r3
 8009a78:	f00e fa17 	bl	8017eaa <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d101      	bne.n	8009a86 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8009a82:	2301      	movs	r3, #1
 8009a84:	e1c6      	b.n	8009e14 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	4a7e      	ldr	r2, [pc, #504]	@ (8009c84 <HAL_FDCAN_Init+0x220>)
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	d106      	bne.n	8009a9e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8009a98:	461a      	mov	r2, r3
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8009aa4:	b2db      	uxtb	r3, r3
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d106      	bne.n	8009ab8 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2200      	movs	r2, #0
 8009aae:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f7f8 fa08 	bl	8001ec8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	699a      	ldr	r2, [r3, #24]
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f022 0210 	bic.w	r2, r2, #16
 8009ac6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009ac8:	f7fc ff5a 	bl	8006980 <HAL_GetTick>
 8009acc:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8009ace:	e014      	b.n	8009afa <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8009ad0:	f7fc ff56 	bl	8006980 <HAL_GetTick>
 8009ad4:	4602      	mov	r2, r0
 8009ad6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009ad8:	1ad3      	subs	r3, r2, r3
 8009ada:	2b0a      	cmp	r3, #10
 8009adc:	d90d      	bls.n	8009afa <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009ae4:	f043 0201 	orr.w	r2, r3, #1
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2203      	movs	r2, #3
 8009af2:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8009af6:	2301      	movs	r3, #1
 8009af8:	e18c      	b.n	8009e14 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	699b      	ldr	r3, [r3, #24]
 8009b00:	f003 0308 	and.w	r3, r3, #8
 8009b04:	2b08      	cmp	r3, #8
 8009b06:	d0e3      	beq.n	8009ad0 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	699a      	ldr	r2, [r3, #24]
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	f042 0201 	orr.w	r2, r2, #1
 8009b16:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009b18:	f7fc ff32 	bl	8006980 <HAL_GetTick>
 8009b1c:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8009b1e:	e014      	b.n	8009b4a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8009b20:	f7fc ff2e 	bl	8006980 <HAL_GetTick>
 8009b24:	4602      	mov	r2, r0
 8009b26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009b28:	1ad3      	subs	r3, r2, r3
 8009b2a:	2b0a      	cmp	r3, #10
 8009b2c:	d90d      	bls.n	8009b4a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009b34:	f043 0201 	orr.w	r2, r3, #1
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2203      	movs	r2, #3
 8009b42:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8009b46:	2301      	movs	r3, #1
 8009b48:	e164      	b.n	8009e14 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	699b      	ldr	r3, [r3, #24]
 8009b50:	f003 0301 	and.w	r3, r3, #1
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d0e3      	beq.n	8009b20 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	699a      	ldr	r2, [r3, #24]
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f042 0202 	orr.w	r2, r2, #2
 8009b66:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	7c1b      	ldrb	r3, [r3, #16]
 8009b6c:	2b01      	cmp	r3, #1
 8009b6e:	d108      	bne.n	8009b82 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	699a      	ldr	r2, [r3, #24]
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009b7e:	619a      	str	r2, [r3, #24]
 8009b80:	e007      	b.n	8009b92 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	699a      	ldr	r2, [r3, #24]
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009b90:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	7c5b      	ldrb	r3, [r3, #17]
 8009b96:	2b01      	cmp	r3, #1
 8009b98:	d108      	bne.n	8009bac <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	699a      	ldr	r2, [r3, #24]
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009ba8:	619a      	str	r2, [r3, #24]
 8009baa:	e007      	b.n	8009bbc <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	699a      	ldr	r2, [r3, #24]
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009bba:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	7c9b      	ldrb	r3, [r3, #18]
 8009bc0:	2b01      	cmp	r3, #1
 8009bc2:	d108      	bne.n	8009bd6 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	699a      	ldr	r2, [r3, #24]
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009bd2:	619a      	str	r2, [r3, #24]
 8009bd4:	e007      	b.n	8009be6 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	699a      	ldr	r2, [r3, #24]
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009be4:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	699b      	ldr	r3, [r3, #24]
 8009bec:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	689a      	ldr	r2, [r3, #8]
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	430a      	orrs	r2, r1
 8009bfa:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	699a      	ldr	r2, [r3, #24]
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8009c0a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	691a      	ldr	r2, [r3, #16]
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	f022 0210 	bic.w	r2, r2, #16
 8009c1a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	68db      	ldr	r3, [r3, #12]
 8009c20:	2b01      	cmp	r3, #1
 8009c22:	d108      	bne.n	8009c36 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	699a      	ldr	r2, [r3, #24]
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f042 0204 	orr.w	r2, r2, #4
 8009c32:	619a      	str	r2, [r3, #24]
 8009c34:	e030      	b.n	8009c98 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	68db      	ldr	r3, [r3, #12]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d02c      	beq.n	8009c98 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	68db      	ldr	r3, [r3, #12]
 8009c42:	2b02      	cmp	r3, #2
 8009c44:	d020      	beq.n	8009c88 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	699a      	ldr	r2, [r3, #24]
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009c54:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	691a      	ldr	r2, [r3, #16]
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f042 0210 	orr.w	r2, r2, #16
 8009c64:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	68db      	ldr	r3, [r3, #12]
 8009c6a:	2b03      	cmp	r3, #3
 8009c6c:	d114      	bne.n	8009c98 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	699a      	ldr	r2, [r3, #24]
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f042 0220 	orr.w	r2, r2, #32
 8009c7c:	619a      	str	r2, [r3, #24]
 8009c7e:	e00b      	b.n	8009c98 <HAL_FDCAN_Init+0x234>
 8009c80:	08019e70 	.word	0x08019e70
 8009c84:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	699a      	ldr	r2, [r3, #24]
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f042 0220 	orr.w	r2, r2, #32
 8009c96:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	699b      	ldr	r3, [r3, #24]
 8009c9c:	3b01      	subs	r3, #1
 8009c9e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	69db      	ldr	r3, [r3, #28]
 8009ca4:	3b01      	subs	r3, #1
 8009ca6:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8009ca8:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	6a1b      	ldr	r3, [r3, #32]
 8009cae:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8009cb0:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	695b      	ldr	r3, [r3, #20]
 8009cb8:	3b01      	subs	r3, #1
 8009cba:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8009cc0:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8009cc2:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	689b      	ldr	r3, [r3, #8]
 8009cc8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009ccc:	d115      	bne.n	8009cfa <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cd2:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cd8:	3b01      	subs	r3, #1
 8009cda:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8009cdc:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ce2:	3b01      	subs	r3, #1
 8009ce4:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8009ce6:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cee:	3b01      	subs	r3, #1
 8009cf0:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8009cf6:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8009cf8:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d00a      	beq.n	8009d18 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	430a      	orrs	r2, r1
 8009d14:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009d20:	4413      	add	r3, r2
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d011      	beq.n	8009d4a <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8009d2e:	f023 0107 	bic.w	r1, r3, #7
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009d36:	009b      	lsls	r3, r3, #2
 8009d38:	3360      	adds	r3, #96	@ 0x60
 8009d3a:	443b      	add	r3, r7
 8009d3c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	430a      	orrs	r2, r1
 8009d46:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d011      	beq.n	8009d76 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009d5a:	f023 0107 	bic.w	r1, r3, #7
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d62:	009b      	lsls	r3, r3, #2
 8009d64:	3360      	adds	r3, #96	@ 0x60
 8009d66:	443b      	add	r3, r7
 8009d68:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	430a      	orrs	r2, r1
 8009d72:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d012      	beq.n	8009da4 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009d86:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009d8e:	009b      	lsls	r3, r3, #2
 8009d90:	3360      	adds	r3, #96	@ 0x60
 8009d92:	443b      	add	r3, r7
 8009d94:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8009d98:	011a      	lsls	r2, r3, #4
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	430a      	orrs	r2, r1
 8009da0:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d012      	beq.n	8009dd2 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009db4:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009dbc:	009b      	lsls	r3, r3, #2
 8009dbe:	3360      	adds	r3, #96	@ 0x60
 8009dc0:	443b      	add	r3, r7
 8009dc2:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8009dc6:	021a      	lsls	r2, r3, #8
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	430a      	orrs	r2, r1
 8009dce:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	4a11      	ldr	r2, [pc, #68]	@ (8009e1c <HAL_FDCAN_Init+0x3b8>)
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d107      	bne.n	8009dec <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	685b      	ldr	r3, [r3, #4]
 8009de0:	689a      	ldr	r2, [r3, #8]
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	685b      	ldr	r3, [r3, #4]
 8009de6:	f022 0203 	bic.w	r2, r2, #3
 8009dea:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2200      	movs	r2, #0
 8009df0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2200      	movs	r2, #0
 8009df8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2201      	movs	r2, #1
 8009e00:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f000 f80b 	bl	8009e20 <FDCAN_CalcultateRamBlockAddresses>
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8009e10:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	3760      	adds	r7, #96	@ 0x60
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}
 8009e1c:	4000a000 	.word	0x4000a000

08009e20 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8009e20:	b480      	push	{r7}
 8009e22:	b085      	sub	sp, #20
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e2c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8009e36:	4ba7      	ldr	r3, [pc, #668]	@ (800a0d4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8009e38:	4013      	ands	r3, r2
 8009e3a:	68ba      	ldr	r2, [r7, #8]
 8009e3c:	0091      	lsls	r1, r2, #2
 8009e3e:	687a      	ldr	r2, [r7, #4]
 8009e40:	6812      	ldr	r2, [r2, #0]
 8009e42:	430b      	orrs	r3, r1
 8009e44:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009e50:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e58:	041a      	lsls	r2, r3, #16
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	430a      	orrs	r2, r1
 8009e60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e68:	68ba      	ldr	r2, [r7, #8]
 8009e6a:	4413      	add	r3, r2
 8009e6c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8009e76:	4b97      	ldr	r3, [pc, #604]	@ (800a0d4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8009e78:	4013      	ands	r3, r2
 8009e7a:	68ba      	ldr	r2, [r7, #8]
 8009e7c:	0091      	lsls	r1, r2, #2
 8009e7e:	687a      	ldr	r2, [r7, #4]
 8009e80:	6812      	ldr	r2, [r2, #0]
 8009e82:	430b      	orrs	r3, r1
 8009e84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e90:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e98:	041a      	lsls	r2, r3, #16
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	430a      	orrs	r2, r1
 8009ea0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ea8:	005b      	lsls	r3, r3, #1
 8009eaa:	68ba      	ldr	r2, [r7, #8]
 8009eac:	4413      	add	r3, r2
 8009eae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8009eb8:	4b86      	ldr	r3, [pc, #536]	@ (800a0d4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8009eba:	4013      	ands	r3, r2
 8009ebc:	68ba      	ldr	r2, [r7, #8]
 8009ebe:	0091      	lsls	r1, r2, #2
 8009ec0:	687a      	ldr	r2, [r7, #4]
 8009ec2:	6812      	ldr	r2, [r2, #0]
 8009ec4:	430b      	orrs	r3, r1
 8009ec6:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009ed2:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009eda:	041a      	lsls	r2, r3, #16
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	430a      	orrs	r2, r1
 8009ee2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009eea:	687a      	ldr	r2, [r7, #4]
 8009eec:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8009eee:	fb02 f303 	mul.w	r3, r2, r3
 8009ef2:	68ba      	ldr	r2, [r7, #8]
 8009ef4:	4413      	add	r3, r2
 8009ef6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8009f00:	4b74      	ldr	r3, [pc, #464]	@ (800a0d4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8009f02:	4013      	ands	r3, r2
 8009f04:	68ba      	ldr	r2, [r7, #8]
 8009f06:	0091      	lsls	r1, r2, #2
 8009f08:	687a      	ldr	r2, [r7, #4]
 8009f0a:	6812      	ldr	r2, [r2, #0]
 8009f0c:	430b      	orrs	r3, r1
 8009f0e:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009f1a:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009f22:	041a      	lsls	r2, r3, #16
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	430a      	orrs	r2, r1
 8009f2a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009f32:	687a      	ldr	r2, [r7, #4]
 8009f34:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8009f36:	fb02 f303 	mul.w	r3, r2, r3
 8009f3a:	68ba      	ldr	r2, [r7, #8]
 8009f3c:	4413      	add	r3, r2
 8009f3e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8009f48:	4b62      	ldr	r3, [pc, #392]	@ (800a0d4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8009f4a:	4013      	ands	r3, r2
 8009f4c:	68ba      	ldr	r2, [r7, #8]
 8009f4e:	0091      	lsls	r1, r2, #2
 8009f50:	687a      	ldr	r2, [r7, #4]
 8009f52:	6812      	ldr	r2, [r2, #0]
 8009f54:	430b      	orrs	r3, r1
 8009f56:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f5e:	687a      	ldr	r2, [r7, #4]
 8009f60:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8009f62:	fb02 f303 	mul.w	r3, r2, r3
 8009f66:	68ba      	ldr	r2, [r7, #8]
 8009f68:	4413      	add	r3, r2
 8009f6a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8009f74:	4b57      	ldr	r3, [pc, #348]	@ (800a0d4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8009f76:	4013      	ands	r3, r2
 8009f78:	68ba      	ldr	r2, [r7, #8]
 8009f7a:	0091      	lsls	r1, r2, #2
 8009f7c:	687a      	ldr	r2, [r7, #4]
 8009f7e:	6812      	ldr	r2, [r2, #0]
 8009f80:	430b      	orrs	r3, r1
 8009f82:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009f8e:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f96:	041a      	lsls	r2, r3, #16
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	430a      	orrs	r2, r1
 8009f9e:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009fa6:	005b      	lsls	r3, r3, #1
 8009fa8:	68ba      	ldr	r2, [r7, #8]
 8009faa:	4413      	add	r3, r2
 8009fac:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8009fb6:	4b47      	ldr	r3, [pc, #284]	@ (800a0d4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8009fb8:	4013      	ands	r3, r2
 8009fba:	68ba      	ldr	r2, [r7, #8]
 8009fbc:	0091      	lsls	r1, r2, #2
 8009fbe:	687a      	ldr	r2, [r7, #4]
 8009fc0:	6812      	ldr	r2, [r2, #0]
 8009fc2:	430b      	orrs	r3, r1
 8009fc4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009fd0:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009fd8:	041a      	lsls	r2, r3, #16
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	430a      	orrs	r2, r1
 8009fe0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009fec:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009ff4:	061a      	lsls	r2, r3, #24
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	430a      	orrs	r2, r1
 8009ffc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a004:	4b34      	ldr	r3, [pc, #208]	@ (800a0d8 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800a006:	4413      	add	r3, r2
 800a008:	009a      	lsls	r2, r3, #2
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a016:	009b      	lsls	r3, r3, #2
 800a018:	441a      	add	r2, r3
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a026:	00db      	lsls	r3, r3, #3
 800a028:	441a      	add	r2, r3
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a036:	6879      	ldr	r1, [r7, #4]
 800a038:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 800a03a:	fb01 f303 	mul.w	r3, r1, r3
 800a03e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800a040:	441a      	add	r2, r3
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a04e:	6879      	ldr	r1, [r7, #4]
 800a050:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 800a052:	fb01 f303 	mul.w	r3, r1, r3
 800a056:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 800a058:	441a      	add	r2, r3
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a066:	6879      	ldr	r1, [r7, #4]
 800a068:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 800a06a:	fb01 f303 	mul.w	r3, r1, r3
 800a06e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800a070:	441a      	add	r2, r3
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a082:	00db      	lsls	r3, r3, #3
 800a084:	441a      	add	r2, r3
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a096:	6879      	ldr	r1, [r7, #4]
 800a098:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 800a09a:	fb01 f303 	mul.w	r3, r1, r3
 800a09e:	009b      	lsls	r3, r3, #2
 800a0a0:	441a      	add	r2, r3
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a0b2:	6879      	ldr	r1, [r7, #4]
 800a0b4:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 800a0b6:	fb01 f303 	mul.w	r3, r1, r3
 800a0ba:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 800a0bc:	441a      	add	r2, r3
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a0ca:	4a04      	ldr	r2, [pc, #16]	@ (800a0dc <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 800a0cc:	4293      	cmp	r3, r2
 800a0ce:	d915      	bls.n	800a0fc <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 800a0d0:	e006      	b.n	800a0e0 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800a0d2:	bf00      	nop
 800a0d4:	ffff0003 	.word	0xffff0003
 800a0d8:	10002b00 	.word	0x10002b00
 800a0dc:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a0e6:	f043 0220 	orr.w	r2, r3, #32
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2203      	movs	r2, #3
 800a0f4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	e010      	b.n	800a11e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a100:	60fb      	str	r3, [r7, #12]
 800a102:	e005      	b.n	800a110 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	2200      	movs	r2, #0
 800a108:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	3304      	adds	r3, #4
 800a10e:	60fb      	str	r3, [r7, #12]
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a116:	68fa      	ldr	r2, [r7, #12]
 800a118:	429a      	cmp	r2, r3
 800a11a:	d3f3      	bcc.n	800a104 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 800a11c:	2300      	movs	r3, #0
}
 800a11e:	4618      	mov	r0, r3
 800a120:	3714      	adds	r7, #20
 800a122:	46bd      	mov	sp, r7
 800a124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a128:	4770      	bx	lr
 800a12a:	bf00      	nop

0800a12c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a12c:	b480      	push	{r7}
 800a12e:	b089      	sub	sp, #36	@ 0x24
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
 800a134:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a136:	2300      	movs	r3, #0
 800a138:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800a13a:	4b89      	ldr	r3, [pc, #548]	@ (800a360 <HAL_GPIO_Init+0x234>)
 800a13c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a13e:	e194      	b.n	800a46a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	681a      	ldr	r2, [r3, #0]
 800a144:	2101      	movs	r1, #1
 800a146:	69fb      	ldr	r3, [r7, #28]
 800a148:	fa01 f303 	lsl.w	r3, r1, r3
 800a14c:	4013      	ands	r3, r2
 800a14e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800a150:	693b      	ldr	r3, [r7, #16]
 800a152:	2b00      	cmp	r3, #0
 800a154:	f000 8186 	beq.w	800a464 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	685b      	ldr	r3, [r3, #4]
 800a15c:	f003 0303 	and.w	r3, r3, #3
 800a160:	2b01      	cmp	r3, #1
 800a162:	d005      	beq.n	800a170 <HAL_GPIO_Init+0x44>
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	685b      	ldr	r3, [r3, #4]
 800a168:	f003 0303 	and.w	r3, r3, #3
 800a16c:	2b02      	cmp	r3, #2
 800a16e:	d130      	bne.n	800a1d2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	689b      	ldr	r3, [r3, #8]
 800a174:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a176:	69fb      	ldr	r3, [r7, #28]
 800a178:	005b      	lsls	r3, r3, #1
 800a17a:	2203      	movs	r2, #3
 800a17c:	fa02 f303 	lsl.w	r3, r2, r3
 800a180:	43db      	mvns	r3, r3
 800a182:	69ba      	ldr	r2, [r7, #24]
 800a184:	4013      	ands	r3, r2
 800a186:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	68da      	ldr	r2, [r3, #12]
 800a18c:	69fb      	ldr	r3, [r7, #28]
 800a18e:	005b      	lsls	r3, r3, #1
 800a190:	fa02 f303 	lsl.w	r3, r2, r3
 800a194:	69ba      	ldr	r2, [r7, #24]
 800a196:	4313      	orrs	r3, r2
 800a198:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	69ba      	ldr	r2, [r7, #24]
 800a19e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	685b      	ldr	r3, [r3, #4]
 800a1a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a1a6:	2201      	movs	r2, #1
 800a1a8:	69fb      	ldr	r3, [r7, #28]
 800a1aa:	fa02 f303 	lsl.w	r3, r2, r3
 800a1ae:	43db      	mvns	r3, r3
 800a1b0:	69ba      	ldr	r2, [r7, #24]
 800a1b2:	4013      	ands	r3, r2
 800a1b4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	685b      	ldr	r3, [r3, #4]
 800a1ba:	091b      	lsrs	r3, r3, #4
 800a1bc:	f003 0201 	and.w	r2, r3, #1
 800a1c0:	69fb      	ldr	r3, [r7, #28]
 800a1c2:	fa02 f303 	lsl.w	r3, r2, r3
 800a1c6:	69ba      	ldr	r2, [r7, #24]
 800a1c8:	4313      	orrs	r3, r2
 800a1ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	69ba      	ldr	r2, [r7, #24]
 800a1d0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	685b      	ldr	r3, [r3, #4]
 800a1d6:	f003 0303 	and.w	r3, r3, #3
 800a1da:	2b03      	cmp	r3, #3
 800a1dc:	d017      	beq.n	800a20e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	68db      	ldr	r3, [r3, #12]
 800a1e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a1e4:	69fb      	ldr	r3, [r7, #28]
 800a1e6:	005b      	lsls	r3, r3, #1
 800a1e8:	2203      	movs	r2, #3
 800a1ea:	fa02 f303 	lsl.w	r3, r2, r3
 800a1ee:	43db      	mvns	r3, r3
 800a1f0:	69ba      	ldr	r2, [r7, #24]
 800a1f2:	4013      	ands	r3, r2
 800a1f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	689a      	ldr	r2, [r3, #8]
 800a1fa:	69fb      	ldr	r3, [r7, #28]
 800a1fc:	005b      	lsls	r3, r3, #1
 800a1fe:	fa02 f303 	lsl.w	r3, r2, r3
 800a202:	69ba      	ldr	r2, [r7, #24]
 800a204:	4313      	orrs	r3, r2
 800a206:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	69ba      	ldr	r2, [r7, #24]
 800a20c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	685b      	ldr	r3, [r3, #4]
 800a212:	f003 0303 	and.w	r3, r3, #3
 800a216:	2b02      	cmp	r3, #2
 800a218:	d123      	bne.n	800a262 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a21a:	69fb      	ldr	r3, [r7, #28]
 800a21c:	08da      	lsrs	r2, r3, #3
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	3208      	adds	r2, #8
 800a222:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a226:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a228:	69fb      	ldr	r3, [r7, #28]
 800a22a:	f003 0307 	and.w	r3, r3, #7
 800a22e:	009b      	lsls	r3, r3, #2
 800a230:	220f      	movs	r2, #15
 800a232:	fa02 f303 	lsl.w	r3, r2, r3
 800a236:	43db      	mvns	r3, r3
 800a238:	69ba      	ldr	r2, [r7, #24]
 800a23a:	4013      	ands	r3, r2
 800a23c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	691a      	ldr	r2, [r3, #16]
 800a242:	69fb      	ldr	r3, [r7, #28]
 800a244:	f003 0307 	and.w	r3, r3, #7
 800a248:	009b      	lsls	r3, r3, #2
 800a24a:	fa02 f303 	lsl.w	r3, r2, r3
 800a24e:	69ba      	ldr	r2, [r7, #24]
 800a250:	4313      	orrs	r3, r2
 800a252:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a254:	69fb      	ldr	r3, [r7, #28]
 800a256:	08da      	lsrs	r2, r3, #3
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	3208      	adds	r2, #8
 800a25c:	69b9      	ldr	r1, [r7, #24]
 800a25e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a268:	69fb      	ldr	r3, [r7, #28]
 800a26a:	005b      	lsls	r3, r3, #1
 800a26c:	2203      	movs	r2, #3
 800a26e:	fa02 f303 	lsl.w	r3, r2, r3
 800a272:	43db      	mvns	r3, r3
 800a274:	69ba      	ldr	r2, [r7, #24]
 800a276:	4013      	ands	r3, r2
 800a278:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	685b      	ldr	r3, [r3, #4]
 800a27e:	f003 0203 	and.w	r2, r3, #3
 800a282:	69fb      	ldr	r3, [r7, #28]
 800a284:	005b      	lsls	r3, r3, #1
 800a286:	fa02 f303 	lsl.w	r3, r2, r3
 800a28a:	69ba      	ldr	r2, [r7, #24]
 800a28c:	4313      	orrs	r3, r2
 800a28e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	69ba      	ldr	r2, [r7, #24]
 800a294:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	685b      	ldr	r3, [r3, #4]
 800a29a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	f000 80e0 	beq.w	800a464 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a2a4:	4b2f      	ldr	r3, [pc, #188]	@ (800a364 <HAL_GPIO_Init+0x238>)
 800a2a6:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800a2aa:	4a2e      	ldr	r2, [pc, #184]	@ (800a364 <HAL_GPIO_Init+0x238>)
 800a2ac:	f043 0302 	orr.w	r3, r3, #2
 800a2b0:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 800a2b4:	4b2b      	ldr	r3, [pc, #172]	@ (800a364 <HAL_GPIO_Init+0x238>)
 800a2b6:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800a2ba:	f003 0302 	and.w	r3, r3, #2
 800a2be:	60fb      	str	r3, [r7, #12]
 800a2c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a2c2:	4a29      	ldr	r2, [pc, #164]	@ (800a368 <HAL_GPIO_Init+0x23c>)
 800a2c4:	69fb      	ldr	r3, [r7, #28]
 800a2c6:	089b      	lsrs	r3, r3, #2
 800a2c8:	3302      	adds	r3, #2
 800a2ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a2ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a2d0:	69fb      	ldr	r3, [r7, #28]
 800a2d2:	f003 0303 	and.w	r3, r3, #3
 800a2d6:	009b      	lsls	r3, r3, #2
 800a2d8:	220f      	movs	r2, #15
 800a2da:	fa02 f303 	lsl.w	r3, r2, r3
 800a2de:	43db      	mvns	r3, r3
 800a2e0:	69ba      	ldr	r2, [r7, #24]
 800a2e2:	4013      	ands	r3, r2
 800a2e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	4a20      	ldr	r2, [pc, #128]	@ (800a36c <HAL_GPIO_Init+0x240>)
 800a2ea:	4293      	cmp	r3, r2
 800a2ec:	d052      	beq.n	800a394 <HAL_GPIO_Init+0x268>
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	4a1f      	ldr	r2, [pc, #124]	@ (800a370 <HAL_GPIO_Init+0x244>)
 800a2f2:	4293      	cmp	r3, r2
 800a2f4:	d031      	beq.n	800a35a <HAL_GPIO_Init+0x22e>
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	4a1e      	ldr	r2, [pc, #120]	@ (800a374 <HAL_GPIO_Init+0x248>)
 800a2fa:	4293      	cmp	r3, r2
 800a2fc:	d02b      	beq.n	800a356 <HAL_GPIO_Init+0x22a>
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	4a1d      	ldr	r2, [pc, #116]	@ (800a378 <HAL_GPIO_Init+0x24c>)
 800a302:	4293      	cmp	r3, r2
 800a304:	d025      	beq.n	800a352 <HAL_GPIO_Init+0x226>
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	4a1c      	ldr	r2, [pc, #112]	@ (800a37c <HAL_GPIO_Init+0x250>)
 800a30a:	4293      	cmp	r3, r2
 800a30c:	d01f      	beq.n	800a34e <HAL_GPIO_Init+0x222>
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	4a1b      	ldr	r2, [pc, #108]	@ (800a380 <HAL_GPIO_Init+0x254>)
 800a312:	4293      	cmp	r3, r2
 800a314:	d019      	beq.n	800a34a <HAL_GPIO_Init+0x21e>
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	4a1a      	ldr	r2, [pc, #104]	@ (800a384 <HAL_GPIO_Init+0x258>)
 800a31a:	4293      	cmp	r3, r2
 800a31c:	d013      	beq.n	800a346 <HAL_GPIO_Init+0x21a>
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	4a19      	ldr	r2, [pc, #100]	@ (800a388 <HAL_GPIO_Init+0x25c>)
 800a322:	4293      	cmp	r3, r2
 800a324:	d00d      	beq.n	800a342 <HAL_GPIO_Init+0x216>
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	4a18      	ldr	r2, [pc, #96]	@ (800a38c <HAL_GPIO_Init+0x260>)
 800a32a:	4293      	cmp	r3, r2
 800a32c:	d007      	beq.n	800a33e <HAL_GPIO_Init+0x212>
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	4a17      	ldr	r2, [pc, #92]	@ (800a390 <HAL_GPIO_Init+0x264>)
 800a332:	4293      	cmp	r3, r2
 800a334:	d101      	bne.n	800a33a <HAL_GPIO_Init+0x20e>
 800a336:	2309      	movs	r3, #9
 800a338:	e02d      	b.n	800a396 <HAL_GPIO_Init+0x26a>
 800a33a:	230a      	movs	r3, #10
 800a33c:	e02b      	b.n	800a396 <HAL_GPIO_Init+0x26a>
 800a33e:	2308      	movs	r3, #8
 800a340:	e029      	b.n	800a396 <HAL_GPIO_Init+0x26a>
 800a342:	2307      	movs	r3, #7
 800a344:	e027      	b.n	800a396 <HAL_GPIO_Init+0x26a>
 800a346:	2306      	movs	r3, #6
 800a348:	e025      	b.n	800a396 <HAL_GPIO_Init+0x26a>
 800a34a:	2305      	movs	r3, #5
 800a34c:	e023      	b.n	800a396 <HAL_GPIO_Init+0x26a>
 800a34e:	2304      	movs	r3, #4
 800a350:	e021      	b.n	800a396 <HAL_GPIO_Init+0x26a>
 800a352:	2303      	movs	r3, #3
 800a354:	e01f      	b.n	800a396 <HAL_GPIO_Init+0x26a>
 800a356:	2302      	movs	r3, #2
 800a358:	e01d      	b.n	800a396 <HAL_GPIO_Init+0x26a>
 800a35a:	2301      	movs	r3, #1
 800a35c:	e01b      	b.n	800a396 <HAL_GPIO_Init+0x26a>
 800a35e:	bf00      	nop
 800a360:	58000080 	.word	0x58000080
 800a364:	58024400 	.word	0x58024400
 800a368:	58000400 	.word	0x58000400
 800a36c:	58020000 	.word	0x58020000
 800a370:	58020400 	.word	0x58020400
 800a374:	58020800 	.word	0x58020800
 800a378:	58020c00 	.word	0x58020c00
 800a37c:	58021000 	.word	0x58021000
 800a380:	58021400 	.word	0x58021400
 800a384:	58021800 	.word	0x58021800
 800a388:	58021c00 	.word	0x58021c00
 800a38c:	58022000 	.word	0x58022000
 800a390:	58022400 	.word	0x58022400
 800a394:	2300      	movs	r3, #0
 800a396:	69fa      	ldr	r2, [r7, #28]
 800a398:	f002 0203 	and.w	r2, r2, #3
 800a39c:	0092      	lsls	r2, r2, #2
 800a39e:	4093      	lsls	r3, r2
 800a3a0:	69ba      	ldr	r2, [r7, #24]
 800a3a2:	4313      	orrs	r3, r2
 800a3a4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a3a6:	4938      	ldr	r1, [pc, #224]	@ (800a488 <HAL_GPIO_Init+0x35c>)
 800a3a8:	69fb      	ldr	r3, [r7, #28]
 800a3aa:	089b      	lsrs	r3, r3, #2
 800a3ac:	3302      	adds	r3, #2
 800a3ae:	69ba      	ldr	r2, [r7, #24]
 800a3b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a3b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a3bc:	693b      	ldr	r3, [r7, #16]
 800a3be:	43db      	mvns	r3, r3
 800a3c0:	69ba      	ldr	r2, [r7, #24]
 800a3c2:	4013      	ands	r3, r2
 800a3c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	685b      	ldr	r3, [r3, #4]
 800a3ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d003      	beq.n	800a3da <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800a3d2:	69ba      	ldr	r2, [r7, #24]
 800a3d4:	693b      	ldr	r3, [r7, #16]
 800a3d6:	4313      	orrs	r3, r2
 800a3d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800a3da:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a3de:	69bb      	ldr	r3, [r7, #24]
 800a3e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800a3e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a3e6:	685b      	ldr	r3, [r3, #4]
 800a3e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a3ea:	693b      	ldr	r3, [r7, #16]
 800a3ec:	43db      	mvns	r3, r3
 800a3ee:	69ba      	ldr	r2, [r7, #24]
 800a3f0:	4013      	ands	r3, r2
 800a3f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	685b      	ldr	r3, [r3, #4]
 800a3f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d003      	beq.n	800a408 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800a400:	69ba      	ldr	r2, [r7, #24]
 800a402:	693b      	ldr	r3, [r7, #16]
 800a404:	4313      	orrs	r3, r2
 800a406:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800a408:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a40c:	69bb      	ldr	r3, [r7, #24]
 800a40e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800a410:	697b      	ldr	r3, [r7, #20]
 800a412:	685b      	ldr	r3, [r3, #4]
 800a414:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a416:	693b      	ldr	r3, [r7, #16]
 800a418:	43db      	mvns	r3, r3
 800a41a:	69ba      	ldr	r2, [r7, #24]
 800a41c:	4013      	ands	r3, r2
 800a41e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	685b      	ldr	r3, [r3, #4]
 800a424:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d003      	beq.n	800a434 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800a42c:	69ba      	ldr	r2, [r7, #24]
 800a42e:	693b      	ldr	r3, [r7, #16]
 800a430:	4313      	orrs	r3, r2
 800a432:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800a434:	697b      	ldr	r3, [r7, #20]
 800a436:	69ba      	ldr	r2, [r7, #24]
 800a438:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800a43a:	697b      	ldr	r3, [r7, #20]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a440:	693b      	ldr	r3, [r7, #16]
 800a442:	43db      	mvns	r3, r3
 800a444:	69ba      	ldr	r2, [r7, #24]
 800a446:	4013      	ands	r3, r2
 800a448:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	685b      	ldr	r3, [r3, #4]
 800a44e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a452:	2b00      	cmp	r3, #0
 800a454:	d003      	beq.n	800a45e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800a456:	69ba      	ldr	r2, [r7, #24]
 800a458:	693b      	ldr	r3, [r7, #16]
 800a45a:	4313      	orrs	r3, r2
 800a45c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800a45e:	697b      	ldr	r3, [r7, #20]
 800a460:	69ba      	ldr	r2, [r7, #24]
 800a462:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800a464:	69fb      	ldr	r3, [r7, #28]
 800a466:	3301      	adds	r3, #1
 800a468:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	681a      	ldr	r2, [r3, #0]
 800a46e:	69fb      	ldr	r3, [r7, #28]
 800a470:	fa22 f303 	lsr.w	r3, r2, r3
 800a474:	2b00      	cmp	r3, #0
 800a476:	f47f ae63 	bne.w	800a140 <HAL_GPIO_Init+0x14>
  }
}
 800a47a:	bf00      	nop
 800a47c:	bf00      	nop
 800a47e:	3724      	adds	r7, #36	@ 0x24
 800a480:	46bd      	mov	sp, r7
 800a482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a486:	4770      	bx	lr
 800a488:	58000400 	.word	0x58000400

0800a48c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a48c:	b480      	push	{r7}
 800a48e:	b083      	sub	sp, #12
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
 800a494:	460b      	mov	r3, r1
 800a496:	807b      	strh	r3, [r7, #2]
 800a498:	4613      	mov	r3, r2
 800a49a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a49c:	787b      	ldrb	r3, [r7, #1]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d003      	beq.n	800a4aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a4a2:	887a      	ldrh	r2, [r7, #2]
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800a4a8:	e003      	b.n	800a4b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800a4aa:	887b      	ldrh	r3, [r7, #2]
 800a4ac:	041a      	lsls	r2, r3, #16
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	619a      	str	r2, [r3, #24]
}
 800a4b2:	bf00      	nop
 800a4b4:	370c      	adds	r7, #12
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4bc:	4770      	bx	lr
	...

0800a4c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b082      	sub	sp, #8
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d101      	bne.n	800a4d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	e08b      	b.n	800a5ea <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a4d8:	b2db      	uxtb	r3, r3
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d106      	bne.n	800a4ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f7f8 f8b8 	bl	800265c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2224      	movs	r2, #36	@ 0x24
 800a4f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	681a      	ldr	r2, [r3, #0]
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f022 0201 	bic.w	r2, r2, #1
 800a502:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	685a      	ldr	r2, [r3, #4]
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800a510:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	689a      	ldr	r2, [r3, #8]
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a520:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	68db      	ldr	r3, [r3, #12]
 800a526:	2b01      	cmp	r3, #1
 800a528:	d107      	bne.n	800a53a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	689a      	ldr	r2, [r3, #8]
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a536:	609a      	str	r2, [r3, #8]
 800a538:	e006      	b.n	800a548 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	689a      	ldr	r2, [r3, #8]
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800a546:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	68db      	ldr	r3, [r3, #12]
 800a54c:	2b02      	cmp	r3, #2
 800a54e:	d108      	bne.n	800a562 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	685a      	ldr	r2, [r3, #4]
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a55e:	605a      	str	r2, [r3, #4]
 800a560:	e007      	b.n	800a572 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	685a      	ldr	r2, [r3, #4]
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a570:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	6859      	ldr	r1, [r3, #4]
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681a      	ldr	r2, [r3, #0]
 800a57c:	4b1d      	ldr	r3, [pc, #116]	@ (800a5f4 <HAL_I2C_Init+0x134>)
 800a57e:	430b      	orrs	r3, r1
 800a580:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	68da      	ldr	r2, [r3, #12]
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a590:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	691a      	ldr	r2, [r3, #16]
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	695b      	ldr	r3, [r3, #20]
 800a59a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	699b      	ldr	r3, [r3, #24]
 800a5a2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	430a      	orrs	r2, r1
 800a5aa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	69d9      	ldr	r1, [r3, #28]
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	6a1a      	ldr	r2, [r3, #32]
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	430a      	orrs	r2, r1
 800a5ba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	681a      	ldr	r2, [r3, #0]
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	f042 0201 	orr.w	r2, r2, #1
 800a5ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2220      	movs	r2, #32
 800a5d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2200      	movs	r2, #0
 800a5de:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800a5e8:	2300      	movs	r3, #0
}
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	3708      	adds	r7, #8
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	bd80      	pop	{r7, pc}
 800a5f2:	bf00      	nop
 800a5f4:	02008000 	.word	0x02008000

0800a5f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a5f8:	b480      	push	{r7}
 800a5fa:	b083      	sub	sp, #12
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
 800a600:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a608:	b2db      	uxtb	r3, r3
 800a60a:	2b20      	cmp	r3, #32
 800a60c:	d138      	bne.n	800a680 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a614:	2b01      	cmp	r3, #1
 800a616:	d101      	bne.n	800a61c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a618:	2302      	movs	r3, #2
 800a61a:	e032      	b.n	800a682 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2201      	movs	r2, #1
 800a620:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2224      	movs	r2, #36	@ 0x24
 800a628:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	681a      	ldr	r2, [r3, #0]
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	f022 0201 	bic.w	r2, r2, #1
 800a63a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	681a      	ldr	r2, [r3, #0]
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a64a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	6819      	ldr	r1, [r3, #0]
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	683a      	ldr	r2, [r7, #0]
 800a658:	430a      	orrs	r2, r1
 800a65a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	681a      	ldr	r2, [r3, #0]
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	f042 0201 	orr.w	r2, r2, #1
 800a66a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2220      	movs	r2, #32
 800a670:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2200      	movs	r2, #0
 800a678:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a67c:	2300      	movs	r3, #0
 800a67e:	e000      	b.n	800a682 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a680:	2302      	movs	r3, #2
  }
}
 800a682:	4618      	mov	r0, r3
 800a684:	370c      	adds	r7, #12
 800a686:	46bd      	mov	sp, r7
 800a688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68c:	4770      	bx	lr

0800a68e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a68e:	b480      	push	{r7}
 800a690:	b085      	sub	sp, #20
 800a692:	af00      	add	r7, sp, #0
 800a694:	6078      	str	r0, [r7, #4]
 800a696:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a69e:	b2db      	uxtb	r3, r3
 800a6a0:	2b20      	cmp	r3, #32
 800a6a2:	d139      	bne.n	800a718 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a6aa:	2b01      	cmp	r3, #1
 800a6ac:	d101      	bne.n	800a6b2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a6ae:	2302      	movs	r3, #2
 800a6b0:	e033      	b.n	800a71a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	2201      	movs	r2, #1
 800a6b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2224      	movs	r2, #36	@ 0x24
 800a6be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	681a      	ldr	r2, [r3, #0]
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	f022 0201 	bic.w	r2, r2, #1
 800a6d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800a6e0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	021b      	lsls	r3, r3, #8
 800a6e6:	68fa      	ldr	r2, [r7, #12]
 800a6e8:	4313      	orrs	r3, r2
 800a6ea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	68fa      	ldr	r2, [r7, #12]
 800a6f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	681a      	ldr	r2, [r3, #0]
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	f042 0201 	orr.w	r2, r2, #1
 800a702:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2220      	movs	r2, #32
 800a708:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2200      	movs	r2, #0
 800a710:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a714:	2300      	movs	r3, #0
 800a716:	e000      	b.n	800a71a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a718:	2302      	movs	r3, #2
  }
}
 800a71a:	4618      	mov	r0, r3
 800a71c:	3714      	adds	r7, #20
 800a71e:	46bd      	mov	sp, r7
 800a720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a724:	4770      	bx	lr
	...

0800a728 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b084      	sub	sp, #16
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a730:	4b19      	ldr	r3, [pc, #100]	@ (800a798 <HAL_PWREx_ConfigSupply+0x70>)
 800a732:	68db      	ldr	r3, [r3, #12]
 800a734:	f003 0304 	and.w	r3, r3, #4
 800a738:	2b04      	cmp	r3, #4
 800a73a:	d00a      	beq.n	800a752 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a73c:	4b16      	ldr	r3, [pc, #88]	@ (800a798 <HAL_PWREx_ConfigSupply+0x70>)
 800a73e:	68db      	ldr	r3, [r3, #12]
 800a740:	f003 0307 	and.w	r3, r3, #7
 800a744:	687a      	ldr	r2, [r7, #4]
 800a746:	429a      	cmp	r2, r3
 800a748:	d001      	beq.n	800a74e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a74a:	2301      	movs	r3, #1
 800a74c:	e01f      	b.n	800a78e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a74e:	2300      	movs	r3, #0
 800a750:	e01d      	b.n	800a78e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a752:	4b11      	ldr	r3, [pc, #68]	@ (800a798 <HAL_PWREx_ConfigSupply+0x70>)
 800a754:	68db      	ldr	r3, [r3, #12]
 800a756:	f023 0207 	bic.w	r2, r3, #7
 800a75a:	490f      	ldr	r1, [pc, #60]	@ (800a798 <HAL_PWREx_ConfigSupply+0x70>)
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	4313      	orrs	r3, r2
 800a760:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a762:	f7fc f90d 	bl	8006980 <HAL_GetTick>
 800a766:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a768:	e009      	b.n	800a77e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a76a:	f7fc f909 	bl	8006980 <HAL_GetTick>
 800a76e:	4602      	mov	r2, r0
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	1ad3      	subs	r3, r2, r3
 800a774:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a778:	d901      	bls.n	800a77e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a77a:	2301      	movs	r3, #1
 800a77c:	e007      	b.n	800a78e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a77e:	4b06      	ldr	r3, [pc, #24]	@ (800a798 <HAL_PWREx_ConfigSupply+0x70>)
 800a780:	685b      	ldr	r3, [r3, #4]
 800a782:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a786:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a78a:	d1ee      	bne.n	800a76a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a78c:	2300      	movs	r3, #0
}
 800a78e:	4618      	mov	r0, r3
 800a790:	3710      	adds	r7, #16
 800a792:	46bd      	mov	sp, r7
 800a794:	bd80      	pop	{r7, pc}
 800a796:	bf00      	nop
 800a798:	58024800 	.word	0x58024800

0800a79c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b08c      	sub	sp, #48	@ 0x30
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d102      	bne.n	800a7b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	f000 bc1f 	b.w	800afee <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	f003 0301 	and.w	r3, r3, #1
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	f000 80b3 	beq.w	800a924 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a7be:	4b95      	ldr	r3, [pc, #596]	@ (800aa14 <HAL_RCC_OscConfig+0x278>)
 800a7c0:	691b      	ldr	r3, [r3, #16]
 800a7c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a7c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a7c8:	4b92      	ldr	r3, [pc, #584]	@ (800aa14 <HAL_RCC_OscConfig+0x278>)
 800a7ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a7ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7d0:	2b10      	cmp	r3, #16
 800a7d2:	d007      	beq.n	800a7e4 <HAL_RCC_OscConfig+0x48>
 800a7d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7d6:	2b18      	cmp	r3, #24
 800a7d8:	d112      	bne.n	800a800 <HAL_RCC_OscConfig+0x64>
 800a7da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7dc:	f003 0303 	and.w	r3, r3, #3
 800a7e0:	2b02      	cmp	r3, #2
 800a7e2:	d10d      	bne.n	800a800 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a7e4:	4b8b      	ldr	r3, [pc, #556]	@ (800aa14 <HAL_RCC_OscConfig+0x278>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	f000 8098 	beq.w	800a922 <HAL_RCC_OscConfig+0x186>
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	685b      	ldr	r3, [r3, #4]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	f040 8093 	bne.w	800a922 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	e3f6      	b.n	800afee <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	685b      	ldr	r3, [r3, #4]
 800a804:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a808:	d106      	bne.n	800a818 <HAL_RCC_OscConfig+0x7c>
 800a80a:	4b82      	ldr	r3, [pc, #520]	@ (800aa14 <HAL_RCC_OscConfig+0x278>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	4a81      	ldr	r2, [pc, #516]	@ (800aa14 <HAL_RCC_OscConfig+0x278>)
 800a810:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a814:	6013      	str	r3, [r2, #0]
 800a816:	e058      	b.n	800a8ca <HAL_RCC_OscConfig+0x12e>
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	685b      	ldr	r3, [r3, #4]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d112      	bne.n	800a846 <HAL_RCC_OscConfig+0xaa>
 800a820:	4b7c      	ldr	r3, [pc, #496]	@ (800aa14 <HAL_RCC_OscConfig+0x278>)
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	4a7b      	ldr	r2, [pc, #492]	@ (800aa14 <HAL_RCC_OscConfig+0x278>)
 800a826:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a82a:	6013      	str	r3, [r2, #0]
 800a82c:	4b79      	ldr	r3, [pc, #484]	@ (800aa14 <HAL_RCC_OscConfig+0x278>)
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	4a78      	ldr	r2, [pc, #480]	@ (800aa14 <HAL_RCC_OscConfig+0x278>)
 800a832:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a836:	6013      	str	r3, [r2, #0]
 800a838:	4b76      	ldr	r3, [pc, #472]	@ (800aa14 <HAL_RCC_OscConfig+0x278>)
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	4a75      	ldr	r2, [pc, #468]	@ (800aa14 <HAL_RCC_OscConfig+0x278>)
 800a83e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a842:	6013      	str	r3, [r2, #0]
 800a844:	e041      	b.n	800a8ca <HAL_RCC_OscConfig+0x12e>
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	685b      	ldr	r3, [r3, #4]
 800a84a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a84e:	d112      	bne.n	800a876 <HAL_RCC_OscConfig+0xda>
 800a850:	4b70      	ldr	r3, [pc, #448]	@ (800aa14 <HAL_RCC_OscConfig+0x278>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	4a6f      	ldr	r2, [pc, #444]	@ (800aa14 <HAL_RCC_OscConfig+0x278>)
 800a856:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a85a:	6013      	str	r3, [r2, #0]
 800a85c:	4b6d      	ldr	r3, [pc, #436]	@ (800aa14 <HAL_RCC_OscConfig+0x278>)
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	4a6c      	ldr	r2, [pc, #432]	@ (800aa14 <HAL_RCC_OscConfig+0x278>)
 800a862:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a866:	6013      	str	r3, [r2, #0]
 800a868:	4b6a      	ldr	r3, [pc, #424]	@ (800aa14 <HAL_RCC_OscConfig+0x278>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	4a69      	ldr	r2, [pc, #420]	@ (800aa14 <HAL_RCC_OscConfig+0x278>)
 800a86e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a872:	6013      	str	r3, [r2, #0]
 800a874:	e029      	b.n	800a8ca <HAL_RCC_OscConfig+0x12e>
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	685b      	ldr	r3, [r3, #4]
 800a87a:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800a87e:	d112      	bne.n	800a8a6 <HAL_RCC_OscConfig+0x10a>
 800a880:	4b64      	ldr	r3, [pc, #400]	@ (800aa14 <HAL_RCC_OscConfig+0x278>)
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	4a63      	ldr	r2, [pc, #396]	@ (800aa14 <HAL_RCC_OscConfig+0x278>)
 800a886:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a88a:	6013      	str	r3, [r2, #0]
 800a88c:	4b61      	ldr	r3, [pc, #388]	@ (800aa14 <HAL_RCC_OscConfig+0x278>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	4a60      	ldr	r2, [pc, #384]	@ (800aa14 <HAL_RCC_OscConfig+0x278>)
 800a892:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a896:	6013      	str	r3, [r2, #0]
 800a898:	4b5e      	ldr	r3, [pc, #376]	@ (800aa14 <HAL_RCC_OscConfig+0x278>)
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	4a5d      	ldr	r2, [pc, #372]	@ (800aa14 <HAL_RCC_OscConfig+0x278>)
 800a89e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a8a2:	6013      	str	r3, [r2, #0]
 800a8a4:	e011      	b.n	800a8ca <HAL_RCC_OscConfig+0x12e>
 800a8a6:	4b5b      	ldr	r3, [pc, #364]	@ (800aa14 <HAL_RCC_OscConfig+0x278>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	4a5a      	ldr	r2, [pc, #360]	@ (800aa14 <HAL_RCC_OscConfig+0x278>)
 800a8ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a8b0:	6013      	str	r3, [r2, #0]
 800a8b2:	4b58      	ldr	r3, [pc, #352]	@ (800aa14 <HAL_RCC_OscConfig+0x278>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	4a57      	ldr	r2, [pc, #348]	@ (800aa14 <HAL_RCC_OscConfig+0x278>)
 800a8b8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a8bc:	6013      	str	r3, [r2, #0]
 800a8be:	4b55      	ldr	r3, [pc, #340]	@ (800aa14 <HAL_RCC_OscConfig+0x278>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	4a54      	ldr	r2, [pc, #336]	@ (800aa14 <HAL_RCC_OscConfig+0x278>)
 800a8c4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a8c8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	685b      	ldr	r3, [r3, #4]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d013      	beq.n	800a8fa <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8d2:	f7fc f855 	bl	8006980 <HAL_GetTick>
 800a8d6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a8d8:	e008      	b.n	800a8ec <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a8da:	f7fc f851 	bl	8006980 <HAL_GetTick>
 800a8de:	4602      	mov	r2, r0
 800a8e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8e2:	1ad3      	subs	r3, r2, r3
 800a8e4:	2b64      	cmp	r3, #100	@ 0x64
 800a8e6:	d901      	bls.n	800a8ec <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800a8e8:	2303      	movs	r3, #3
 800a8ea:	e380      	b.n	800afee <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a8ec:	4b49      	ldr	r3, [pc, #292]	@ (800aa14 <HAL_RCC_OscConfig+0x278>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d0f0      	beq.n	800a8da <HAL_RCC_OscConfig+0x13e>
 800a8f8:	e014      	b.n	800a924 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8fa:	f7fc f841 	bl	8006980 <HAL_GetTick>
 800a8fe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a900:	e008      	b.n	800a914 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a902:	f7fc f83d 	bl	8006980 <HAL_GetTick>
 800a906:	4602      	mov	r2, r0
 800a908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a90a:	1ad3      	subs	r3, r2, r3
 800a90c:	2b64      	cmp	r3, #100	@ 0x64
 800a90e:	d901      	bls.n	800a914 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 800a910:	2303      	movs	r3, #3
 800a912:	e36c      	b.n	800afee <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a914:	4b3f      	ldr	r3, [pc, #252]	@ (800aa14 <HAL_RCC_OscConfig+0x278>)
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d1f0      	bne.n	800a902 <HAL_RCC_OscConfig+0x166>
 800a920:	e000      	b.n	800a924 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a922:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	f003 0302 	and.w	r3, r3, #2
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	f000 808c 	beq.w	800aa4a <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a932:	4b38      	ldr	r3, [pc, #224]	@ (800aa14 <HAL_RCC_OscConfig+0x278>)
 800a934:	691b      	ldr	r3, [r3, #16]
 800a936:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a93a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a93c:	4b35      	ldr	r3, [pc, #212]	@ (800aa14 <HAL_RCC_OscConfig+0x278>)
 800a93e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a940:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a942:	6a3b      	ldr	r3, [r7, #32]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d007      	beq.n	800a958 <HAL_RCC_OscConfig+0x1bc>
 800a948:	6a3b      	ldr	r3, [r7, #32]
 800a94a:	2b18      	cmp	r3, #24
 800a94c:	d137      	bne.n	800a9be <HAL_RCC_OscConfig+0x222>
 800a94e:	69fb      	ldr	r3, [r7, #28]
 800a950:	f003 0303 	and.w	r3, r3, #3
 800a954:	2b00      	cmp	r3, #0
 800a956:	d132      	bne.n	800a9be <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a958:	4b2e      	ldr	r3, [pc, #184]	@ (800aa14 <HAL_RCC_OscConfig+0x278>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	f003 0304 	and.w	r3, r3, #4
 800a960:	2b00      	cmp	r3, #0
 800a962:	d005      	beq.n	800a970 <HAL_RCC_OscConfig+0x1d4>
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	68db      	ldr	r3, [r3, #12]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d101      	bne.n	800a970 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 800a96c:	2301      	movs	r3, #1
 800a96e:	e33e      	b.n	800afee <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a970:	4b28      	ldr	r3, [pc, #160]	@ (800aa14 <HAL_RCC_OscConfig+0x278>)
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	f023 0219 	bic.w	r2, r3, #25
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	68db      	ldr	r3, [r3, #12]
 800a97c:	4925      	ldr	r1, [pc, #148]	@ (800aa14 <HAL_RCC_OscConfig+0x278>)
 800a97e:	4313      	orrs	r3, r2
 800a980:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a982:	f7fb fffd 	bl	8006980 <HAL_GetTick>
 800a986:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a988:	e008      	b.n	800a99c <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a98a:	f7fb fff9 	bl	8006980 <HAL_GetTick>
 800a98e:	4602      	mov	r2, r0
 800a990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a992:	1ad3      	subs	r3, r2, r3
 800a994:	2b02      	cmp	r3, #2
 800a996:	d901      	bls.n	800a99c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800a998:	2303      	movs	r3, #3
 800a99a:	e328      	b.n	800afee <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a99c:	4b1d      	ldr	r3, [pc, #116]	@ (800aa14 <HAL_RCC_OscConfig+0x278>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	f003 0304 	and.w	r3, r3, #4
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d0f0      	beq.n	800a98a <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a9a8:	4b1a      	ldr	r3, [pc, #104]	@ (800aa14 <HAL_RCC_OscConfig+0x278>)
 800a9aa:	685b      	ldr	r3, [r3, #4]
 800a9ac:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	691b      	ldr	r3, [r3, #16]
 800a9b4:	061b      	lsls	r3, r3, #24
 800a9b6:	4917      	ldr	r1, [pc, #92]	@ (800aa14 <HAL_RCC_OscConfig+0x278>)
 800a9b8:	4313      	orrs	r3, r2
 800a9ba:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a9bc:	e045      	b.n	800aa4a <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	68db      	ldr	r3, [r3, #12]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d028      	beq.n	800aa18 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a9c6:	4b13      	ldr	r3, [pc, #76]	@ (800aa14 <HAL_RCC_OscConfig+0x278>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	f023 0219 	bic.w	r2, r3, #25
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	68db      	ldr	r3, [r3, #12]
 800a9d2:	4910      	ldr	r1, [pc, #64]	@ (800aa14 <HAL_RCC_OscConfig+0x278>)
 800a9d4:	4313      	orrs	r3, r2
 800a9d6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9d8:	f7fb ffd2 	bl	8006980 <HAL_GetTick>
 800a9dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a9de:	e008      	b.n	800a9f2 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a9e0:	f7fb ffce 	bl	8006980 <HAL_GetTick>
 800a9e4:	4602      	mov	r2, r0
 800a9e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9e8:	1ad3      	subs	r3, r2, r3
 800a9ea:	2b02      	cmp	r3, #2
 800a9ec:	d901      	bls.n	800a9f2 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800a9ee:	2303      	movs	r3, #3
 800a9f0:	e2fd      	b.n	800afee <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a9f2:	4b08      	ldr	r3, [pc, #32]	@ (800aa14 <HAL_RCC_OscConfig+0x278>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	f003 0304 	and.w	r3, r3, #4
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d0f0      	beq.n	800a9e0 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a9fe:	4b05      	ldr	r3, [pc, #20]	@ (800aa14 <HAL_RCC_OscConfig+0x278>)
 800aa00:	685b      	ldr	r3, [r3, #4]
 800aa02:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	691b      	ldr	r3, [r3, #16]
 800aa0a:	061b      	lsls	r3, r3, #24
 800aa0c:	4901      	ldr	r1, [pc, #4]	@ (800aa14 <HAL_RCC_OscConfig+0x278>)
 800aa0e:	4313      	orrs	r3, r2
 800aa10:	604b      	str	r3, [r1, #4]
 800aa12:	e01a      	b.n	800aa4a <HAL_RCC_OscConfig+0x2ae>
 800aa14:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800aa18:	4b97      	ldr	r3, [pc, #604]	@ (800ac78 <HAL_RCC_OscConfig+0x4dc>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	4a96      	ldr	r2, [pc, #600]	@ (800ac78 <HAL_RCC_OscConfig+0x4dc>)
 800aa1e:	f023 0301 	bic.w	r3, r3, #1
 800aa22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa24:	f7fb ffac 	bl	8006980 <HAL_GetTick>
 800aa28:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800aa2a:	e008      	b.n	800aa3e <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aa2c:	f7fb ffa8 	bl	8006980 <HAL_GetTick>
 800aa30:	4602      	mov	r2, r0
 800aa32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa34:	1ad3      	subs	r3, r2, r3
 800aa36:	2b02      	cmp	r3, #2
 800aa38:	d901      	bls.n	800aa3e <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800aa3a:	2303      	movs	r3, #3
 800aa3c:	e2d7      	b.n	800afee <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800aa3e:	4b8e      	ldr	r3, [pc, #568]	@ (800ac78 <HAL_RCC_OscConfig+0x4dc>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	f003 0304 	and.w	r3, r3, #4
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d1f0      	bne.n	800aa2c <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	f003 0310 	and.w	r3, r3, #16
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d06a      	beq.n	800ab2c <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aa56:	4b88      	ldr	r3, [pc, #544]	@ (800ac78 <HAL_RCC_OscConfig+0x4dc>)
 800aa58:	691b      	ldr	r3, [r3, #16]
 800aa5a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800aa5e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800aa60:	4b85      	ldr	r3, [pc, #532]	@ (800ac78 <HAL_RCC_OscConfig+0x4dc>)
 800aa62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa64:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800aa66:	69bb      	ldr	r3, [r7, #24]
 800aa68:	2b08      	cmp	r3, #8
 800aa6a:	d007      	beq.n	800aa7c <HAL_RCC_OscConfig+0x2e0>
 800aa6c:	69bb      	ldr	r3, [r7, #24]
 800aa6e:	2b18      	cmp	r3, #24
 800aa70:	d11b      	bne.n	800aaaa <HAL_RCC_OscConfig+0x30e>
 800aa72:	697b      	ldr	r3, [r7, #20]
 800aa74:	f003 0303 	and.w	r3, r3, #3
 800aa78:	2b01      	cmp	r3, #1
 800aa7a:	d116      	bne.n	800aaaa <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800aa7c:	4b7e      	ldr	r3, [pc, #504]	@ (800ac78 <HAL_RCC_OscConfig+0x4dc>)
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d005      	beq.n	800aa94 <HAL_RCC_OscConfig+0x2f8>
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	69db      	ldr	r3, [r3, #28]
 800aa8c:	2b80      	cmp	r3, #128	@ 0x80
 800aa8e:	d001      	beq.n	800aa94 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800aa90:	2301      	movs	r3, #1
 800aa92:	e2ac      	b.n	800afee <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800aa94:	4b78      	ldr	r3, [pc, #480]	@ (800ac78 <HAL_RCC_OscConfig+0x4dc>)
 800aa96:	68db      	ldr	r3, [r3, #12]
 800aa98:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	6a1b      	ldr	r3, [r3, #32]
 800aaa0:	061b      	lsls	r3, r3, #24
 800aaa2:	4975      	ldr	r1, [pc, #468]	@ (800ac78 <HAL_RCC_OscConfig+0x4dc>)
 800aaa4:	4313      	orrs	r3, r2
 800aaa6:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800aaa8:	e040      	b.n	800ab2c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	69db      	ldr	r3, [r3, #28]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d023      	beq.n	800aafa <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800aab2:	4b71      	ldr	r3, [pc, #452]	@ (800ac78 <HAL_RCC_OscConfig+0x4dc>)
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	4a70      	ldr	r2, [pc, #448]	@ (800ac78 <HAL_RCC_OscConfig+0x4dc>)
 800aab8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aabc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aabe:	f7fb ff5f 	bl	8006980 <HAL_GetTick>
 800aac2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800aac4:	e008      	b.n	800aad8 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800aac6:	f7fb ff5b 	bl	8006980 <HAL_GetTick>
 800aaca:	4602      	mov	r2, r0
 800aacc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aace:	1ad3      	subs	r3, r2, r3
 800aad0:	2b02      	cmp	r3, #2
 800aad2:	d901      	bls.n	800aad8 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 800aad4:	2303      	movs	r3, #3
 800aad6:	e28a      	b.n	800afee <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800aad8:	4b67      	ldr	r3, [pc, #412]	@ (800ac78 <HAL_RCC_OscConfig+0x4dc>)
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d0f0      	beq.n	800aac6 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800aae4:	4b64      	ldr	r3, [pc, #400]	@ (800ac78 <HAL_RCC_OscConfig+0x4dc>)
 800aae6:	68db      	ldr	r3, [r3, #12]
 800aae8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	6a1b      	ldr	r3, [r3, #32]
 800aaf0:	061b      	lsls	r3, r3, #24
 800aaf2:	4961      	ldr	r1, [pc, #388]	@ (800ac78 <HAL_RCC_OscConfig+0x4dc>)
 800aaf4:	4313      	orrs	r3, r2
 800aaf6:	60cb      	str	r3, [r1, #12]
 800aaf8:	e018      	b.n	800ab2c <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800aafa:	4b5f      	ldr	r3, [pc, #380]	@ (800ac78 <HAL_RCC_OscConfig+0x4dc>)
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	4a5e      	ldr	r2, [pc, #376]	@ (800ac78 <HAL_RCC_OscConfig+0x4dc>)
 800ab00:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ab04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab06:	f7fb ff3b 	bl	8006980 <HAL_GetTick>
 800ab0a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ab0c:	e008      	b.n	800ab20 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800ab0e:	f7fb ff37 	bl	8006980 <HAL_GetTick>
 800ab12:	4602      	mov	r2, r0
 800ab14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab16:	1ad3      	subs	r3, r2, r3
 800ab18:	2b02      	cmp	r3, #2
 800ab1a:	d901      	bls.n	800ab20 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800ab1c:	2303      	movs	r3, #3
 800ab1e:	e266      	b.n	800afee <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ab20:	4b55      	ldr	r3, [pc, #340]	@ (800ac78 <HAL_RCC_OscConfig+0x4dc>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d1f0      	bne.n	800ab0e <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	f003 0308 	and.w	r3, r3, #8
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d036      	beq.n	800aba6 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	695b      	ldr	r3, [r3, #20]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d019      	beq.n	800ab74 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ab40:	4b4d      	ldr	r3, [pc, #308]	@ (800ac78 <HAL_RCC_OscConfig+0x4dc>)
 800ab42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ab44:	4a4c      	ldr	r2, [pc, #304]	@ (800ac78 <HAL_RCC_OscConfig+0x4dc>)
 800ab46:	f043 0301 	orr.w	r3, r3, #1
 800ab4a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ab4c:	f7fb ff18 	bl	8006980 <HAL_GetTick>
 800ab50:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ab52:	e008      	b.n	800ab66 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ab54:	f7fb ff14 	bl	8006980 <HAL_GetTick>
 800ab58:	4602      	mov	r2, r0
 800ab5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab5c:	1ad3      	subs	r3, r2, r3
 800ab5e:	2b02      	cmp	r3, #2
 800ab60:	d901      	bls.n	800ab66 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800ab62:	2303      	movs	r3, #3
 800ab64:	e243      	b.n	800afee <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ab66:	4b44      	ldr	r3, [pc, #272]	@ (800ac78 <HAL_RCC_OscConfig+0x4dc>)
 800ab68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ab6a:	f003 0302 	and.w	r3, r3, #2
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d0f0      	beq.n	800ab54 <HAL_RCC_OscConfig+0x3b8>
 800ab72:	e018      	b.n	800aba6 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ab74:	4b40      	ldr	r3, [pc, #256]	@ (800ac78 <HAL_RCC_OscConfig+0x4dc>)
 800ab76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ab78:	4a3f      	ldr	r2, [pc, #252]	@ (800ac78 <HAL_RCC_OscConfig+0x4dc>)
 800ab7a:	f023 0301 	bic.w	r3, r3, #1
 800ab7e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ab80:	f7fb fefe 	bl	8006980 <HAL_GetTick>
 800ab84:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ab86:	e008      	b.n	800ab9a <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ab88:	f7fb fefa 	bl	8006980 <HAL_GetTick>
 800ab8c:	4602      	mov	r2, r0
 800ab8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab90:	1ad3      	subs	r3, r2, r3
 800ab92:	2b02      	cmp	r3, #2
 800ab94:	d901      	bls.n	800ab9a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800ab96:	2303      	movs	r3, #3
 800ab98:	e229      	b.n	800afee <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ab9a:	4b37      	ldr	r3, [pc, #220]	@ (800ac78 <HAL_RCC_OscConfig+0x4dc>)
 800ab9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ab9e:	f003 0302 	and.w	r3, r3, #2
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d1f0      	bne.n	800ab88 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	f003 0320 	and.w	r3, r3, #32
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d036      	beq.n	800ac20 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	699b      	ldr	r3, [r3, #24]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d019      	beq.n	800abee <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800abba:	4b2f      	ldr	r3, [pc, #188]	@ (800ac78 <HAL_RCC_OscConfig+0x4dc>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	4a2e      	ldr	r2, [pc, #184]	@ (800ac78 <HAL_RCC_OscConfig+0x4dc>)
 800abc0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800abc4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800abc6:	f7fb fedb 	bl	8006980 <HAL_GetTick>
 800abca:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800abcc:	e008      	b.n	800abe0 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800abce:	f7fb fed7 	bl	8006980 <HAL_GetTick>
 800abd2:	4602      	mov	r2, r0
 800abd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abd6:	1ad3      	subs	r3, r2, r3
 800abd8:	2b02      	cmp	r3, #2
 800abda:	d901      	bls.n	800abe0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800abdc:	2303      	movs	r3, #3
 800abde:	e206      	b.n	800afee <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800abe0:	4b25      	ldr	r3, [pc, #148]	@ (800ac78 <HAL_RCC_OscConfig+0x4dc>)
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d0f0      	beq.n	800abce <HAL_RCC_OscConfig+0x432>
 800abec:	e018      	b.n	800ac20 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800abee:	4b22      	ldr	r3, [pc, #136]	@ (800ac78 <HAL_RCC_OscConfig+0x4dc>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	4a21      	ldr	r2, [pc, #132]	@ (800ac78 <HAL_RCC_OscConfig+0x4dc>)
 800abf4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800abf8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800abfa:	f7fb fec1 	bl	8006980 <HAL_GetTick>
 800abfe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ac00:	e008      	b.n	800ac14 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ac02:	f7fb febd 	bl	8006980 <HAL_GetTick>
 800ac06:	4602      	mov	r2, r0
 800ac08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac0a:	1ad3      	subs	r3, r2, r3
 800ac0c:	2b02      	cmp	r3, #2
 800ac0e:	d901      	bls.n	800ac14 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800ac10:	2303      	movs	r3, #3
 800ac12:	e1ec      	b.n	800afee <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ac14:	4b18      	ldr	r3, [pc, #96]	@ (800ac78 <HAL_RCC_OscConfig+0x4dc>)
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d1f0      	bne.n	800ac02 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	f003 0304 	and.w	r3, r3, #4
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	f000 80af 	beq.w	800ad8c <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800ac2e:	4b13      	ldr	r3, [pc, #76]	@ (800ac7c <HAL_RCC_OscConfig+0x4e0>)
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	4a12      	ldr	r2, [pc, #72]	@ (800ac7c <HAL_RCC_OscConfig+0x4e0>)
 800ac34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ac38:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ac3a:	f7fb fea1 	bl	8006980 <HAL_GetTick>
 800ac3e:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ac40:	e008      	b.n	800ac54 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ac42:	f7fb fe9d 	bl	8006980 <HAL_GetTick>
 800ac46:	4602      	mov	r2, r0
 800ac48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac4a:	1ad3      	subs	r3, r2, r3
 800ac4c:	2b64      	cmp	r3, #100	@ 0x64
 800ac4e:	d901      	bls.n	800ac54 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800ac50:	2303      	movs	r3, #3
 800ac52:	e1cc      	b.n	800afee <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ac54:	4b09      	ldr	r3, [pc, #36]	@ (800ac7c <HAL_RCC_OscConfig+0x4e0>)
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d0f0      	beq.n	800ac42 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	689b      	ldr	r3, [r3, #8]
 800ac64:	2b01      	cmp	r3, #1
 800ac66:	d10b      	bne.n	800ac80 <HAL_RCC_OscConfig+0x4e4>
 800ac68:	4b03      	ldr	r3, [pc, #12]	@ (800ac78 <HAL_RCC_OscConfig+0x4dc>)
 800ac6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac6c:	4a02      	ldr	r2, [pc, #8]	@ (800ac78 <HAL_RCC_OscConfig+0x4dc>)
 800ac6e:	f043 0301 	orr.w	r3, r3, #1
 800ac72:	6713      	str	r3, [r2, #112]	@ 0x70
 800ac74:	e05b      	b.n	800ad2e <HAL_RCC_OscConfig+0x592>
 800ac76:	bf00      	nop
 800ac78:	58024400 	.word	0x58024400
 800ac7c:	58024800 	.word	0x58024800
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	689b      	ldr	r3, [r3, #8]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d112      	bne.n	800acae <HAL_RCC_OscConfig+0x512>
 800ac88:	4b9d      	ldr	r3, [pc, #628]	@ (800af00 <HAL_RCC_OscConfig+0x764>)
 800ac8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac8c:	4a9c      	ldr	r2, [pc, #624]	@ (800af00 <HAL_RCC_OscConfig+0x764>)
 800ac8e:	f023 0301 	bic.w	r3, r3, #1
 800ac92:	6713      	str	r3, [r2, #112]	@ 0x70
 800ac94:	4b9a      	ldr	r3, [pc, #616]	@ (800af00 <HAL_RCC_OscConfig+0x764>)
 800ac96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac98:	4a99      	ldr	r2, [pc, #612]	@ (800af00 <HAL_RCC_OscConfig+0x764>)
 800ac9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ac9e:	6713      	str	r3, [r2, #112]	@ 0x70
 800aca0:	4b97      	ldr	r3, [pc, #604]	@ (800af00 <HAL_RCC_OscConfig+0x764>)
 800aca2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aca4:	4a96      	ldr	r2, [pc, #600]	@ (800af00 <HAL_RCC_OscConfig+0x764>)
 800aca6:	f023 0304 	bic.w	r3, r3, #4
 800acaa:	6713      	str	r3, [r2, #112]	@ 0x70
 800acac:	e03f      	b.n	800ad2e <HAL_RCC_OscConfig+0x592>
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	689b      	ldr	r3, [r3, #8]
 800acb2:	2b05      	cmp	r3, #5
 800acb4:	d112      	bne.n	800acdc <HAL_RCC_OscConfig+0x540>
 800acb6:	4b92      	ldr	r3, [pc, #584]	@ (800af00 <HAL_RCC_OscConfig+0x764>)
 800acb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800acba:	4a91      	ldr	r2, [pc, #580]	@ (800af00 <HAL_RCC_OscConfig+0x764>)
 800acbc:	f043 0304 	orr.w	r3, r3, #4
 800acc0:	6713      	str	r3, [r2, #112]	@ 0x70
 800acc2:	4b8f      	ldr	r3, [pc, #572]	@ (800af00 <HAL_RCC_OscConfig+0x764>)
 800acc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800acc6:	4a8e      	ldr	r2, [pc, #568]	@ (800af00 <HAL_RCC_OscConfig+0x764>)
 800acc8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800accc:	6713      	str	r3, [r2, #112]	@ 0x70
 800acce:	4b8c      	ldr	r3, [pc, #560]	@ (800af00 <HAL_RCC_OscConfig+0x764>)
 800acd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800acd2:	4a8b      	ldr	r2, [pc, #556]	@ (800af00 <HAL_RCC_OscConfig+0x764>)
 800acd4:	f043 0301 	orr.w	r3, r3, #1
 800acd8:	6713      	str	r3, [r2, #112]	@ 0x70
 800acda:	e028      	b.n	800ad2e <HAL_RCC_OscConfig+0x592>
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	689b      	ldr	r3, [r3, #8]
 800ace0:	2b85      	cmp	r3, #133	@ 0x85
 800ace2:	d112      	bne.n	800ad0a <HAL_RCC_OscConfig+0x56e>
 800ace4:	4b86      	ldr	r3, [pc, #536]	@ (800af00 <HAL_RCC_OscConfig+0x764>)
 800ace6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ace8:	4a85      	ldr	r2, [pc, #532]	@ (800af00 <HAL_RCC_OscConfig+0x764>)
 800acea:	f043 0304 	orr.w	r3, r3, #4
 800acee:	6713      	str	r3, [r2, #112]	@ 0x70
 800acf0:	4b83      	ldr	r3, [pc, #524]	@ (800af00 <HAL_RCC_OscConfig+0x764>)
 800acf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800acf4:	4a82      	ldr	r2, [pc, #520]	@ (800af00 <HAL_RCC_OscConfig+0x764>)
 800acf6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800acfa:	6713      	str	r3, [r2, #112]	@ 0x70
 800acfc:	4b80      	ldr	r3, [pc, #512]	@ (800af00 <HAL_RCC_OscConfig+0x764>)
 800acfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad00:	4a7f      	ldr	r2, [pc, #508]	@ (800af00 <HAL_RCC_OscConfig+0x764>)
 800ad02:	f043 0301 	orr.w	r3, r3, #1
 800ad06:	6713      	str	r3, [r2, #112]	@ 0x70
 800ad08:	e011      	b.n	800ad2e <HAL_RCC_OscConfig+0x592>
 800ad0a:	4b7d      	ldr	r3, [pc, #500]	@ (800af00 <HAL_RCC_OscConfig+0x764>)
 800ad0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad0e:	4a7c      	ldr	r2, [pc, #496]	@ (800af00 <HAL_RCC_OscConfig+0x764>)
 800ad10:	f023 0301 	bic.w	r3, r3, #1
 800ad14:	6713      	str	r3, [r2, #112]	@ 0x70
 800ad16:	4b7a      	ldr	r3, [pc, #488]	@ (800af00 <HAL_RCC_OscConfig+0x764>)
 800ad18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad1a:	4a79      	ldr	r2, [pc, #484]	@ (800af00 <HAL_RCC_OscConfig+0x764>)
 800ad1c:	f023 0304 	bic.w	r3, r3, #4
 800ad20:	6713      	str	r3, [r2, #112]	@ 0x70
 800ad22:	4b77      	ldr	r3, [pc, #476]	@ (800af00 <HAL_RCC_OscConfig+0x764>)
 800ad24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad26:	4a76      	ldr	r2, [pc, #472]	@ (800af00 <HAL_RCC_OscConfig+0x764>)
 800ad28:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ad2c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	689b      	ldr	r3, [r3, #8]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d015      	beq.n	800ad62 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ad36:	f7fb fe23 	bl	8006980 <HAL_GetTick>
 800ad3a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ad3c:	e00a      	b.n	800ad54 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ad3e:	f7fb fe1f 	bl	8006980 <HAL_GetTick>
 800ad42:	4602      	mov	r2, r0
 800ad44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad46:	1ad3      	subs	r3, r2, r3
 800ad48:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ad4c:	4293      	cmp	r3, r2
 800ad4e:	d901      	bls.n	800ad54 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 800ad50:	2303      	movs	r3, #3
 800ad52:	e14c      	b.n	800afee <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ad54:	4b6a      	ldr	r3, [pc, #424]	@ (800af00 <HAL_RCC_OscConfig+0x764>)
 800ad56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad58:	f003 0302 	and.w	r3, r3, #2
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d0ee      	beq.n	800ad3e <HAL_RCC_OscConfig+0x5a2>
 800ad60:	e014      	b.n	800ad8c <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ad62:	f7fb fe0d 	bl	8006980 <HAL_GetTick>
 800ad66:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ad68:	e00a      	b.n	800ad80 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ad6a:	f7fb fe09 	bl	8006980 <HAL_GetTick>
 800ad6e:	4602      	mov	r2, r0
 800ad70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad72:	1ad3      	subs	r3, r2, r3
 800ad74:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ad78:	4293      	cmp	r3, r2
 800ad7a:	d901      	bls.n	800ad80 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 800ad7c:	2303      	movs	r3, #3
 800ad7e:	e136      	b.n	800afee <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ad80:	4b5f      	ldr	r3, [pc, #380]	@ (800af00 <HAL_RCC_OscConfig+0x764>)
 800ad82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad84:	f003 0302 	and.w	r3, r3, #2
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d1ee      	bne.n	800ad6a <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	f000 812b 	beq.w	800afec <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800ad96:	4b5a      	ldr	r3, [pc, #360]	@ (800af00 <HAL_RCC_OscConfig+0x764>)
 800ad98:	691b      	ldr	r3, [r3, #16]
 800ad9a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ad9e:	2b18      	cmp	r3, #24
 800ada0:	f000 80bb 	beq.w	800af1a <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ada8:	2b02      	cmp	r3, #2
 800adaa:	f040 8095 	bne.w	800aed8 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800adae:	4b54      	ldr	r3, [pc, #336]	@ (800af00 <HAL_RCC_OscConfig+0x764>)
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	4a53      	ldr	r2, [pc, #332]	@ (800af00 <HAL_RCC_OscConfig+0x764>)
 800adb4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800adb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800adba:	f7fb fde1 	bl	8006980 <HAL_GetTick>
 800adbe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800adc0:	e008      	b.n	800add4 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800adc2:	f7fb fddd 	bl	8006980 <HAL_GetTick>
 800adc6:	4602      	mov	r2, r0
 800adc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adca:	1ad3      	subs	r3, r2, r3
 800adcc:	2b02      	cmp	r3, #2
 800adce:	d901      	bls.n	800add4 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 800add0:	2303      	movs	r3, #3
 800add2:	e10c      	b.n	800afee <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800add4:	4b4a      	ldr	r3, [pc, #296]	@ (800af00 <HAL_RCC_OscConfig+0x764>)
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800addc:	2b00      	cmp	r3, #0
 800adde:	d1f0      	bne.n	800adc2 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ade0:	4b47      	ldr	r3, [pc, #284]	@ (800af00 <HAL_RCC_OscConfig+0x764>)
 800ade2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ade4:	4b47      	ldr	r3, [pc, #284]	@ (800af04 <HAL_RCC_OscConfig+0x768>)
 800ade6:	4013      	ands	r3, r2
 800ade8:	687a      	ldr	r2, [r7, #4]
 800adea:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800adec:	687a      	ldr	r2, [r7, #4]
 800adee:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800adf0:	0112      	lsls	r2, r2, #4
 800adf2:	430a      	orrs	r2, r1
 800adf4:	4942      	ldr	r1, [pc, #264]	@ (800af00 <HAL_RCC_OscConfig+0x764>)
 800adf6:	4313      	orrs	r3, r2
 800adf8:	628b      	str	r3, [r1, #40]	@ 0x28
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800adfe:	3b01      	subs	r3, #1
 800ae00:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae08:	3b01      	subs	r3, #1
 800ae0a:	025b      	lsls	r3, r3, #9
 800ae0c:	b29b      	uxth	r3, r3
 800ae0e:	431a      	orrs	r2, r3
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae14:	3b01      	subs	r3, #1
 800ae16:	041b      	lsls	r3, r3, #16
 800ae18:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800ae1c:	431a      	orrs	r2, r3
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae22:	3b01      	subs	r3, #1
 800ae24:	061b      	lsls	r3, r3, #24
 800ae26:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800ae2a:	4935      	ldr	r1, [pc, #212]	@ (800af00 <HAL_RCC_OscConfig+0x764>)
 800ae2c:	4313      	orrs	r3, r2
 800ae2e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800ae30:	4b33      	ldr	r3, [pc, #204]	@ (800af00 <HAL_RCC_OscConfig+0x764>)
 800ae32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae34:	4a32      	ldr	r2, [pc, #200]	@ (800af00 <HAL_RCC_OscConfig+0x764>)
 800ae36:	f023 0301 	bic.w	r3, r3, #1
 800ae3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ae3c:	4b30      	ldr	r3, [pc, #192]	@ (800af00 <HAL_RCC_OscConfig+0x764>)
 800ae3e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ae40:	4b31      	ldr	r3, [pc, #196]	@ (800af08 <HAL_RCC_OscConfig+0x76c>)
 800ae42:	4013      	ands	r3, r2
 800ae44:	687a      	ldr	r2, [r7, #4]
 800ae46:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800ae48:	00d2      	lsls	r2, r2, #3
 800ae4a:	492d      	ldr	r1, [pc, #180]	@ (800af00 <HAL_RCC_OscConfig+0x764>)
 800ae4c:	4313      	orrs	r3, r2
 800ae4e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800ae50:	4b2b      	ldr	r3, [pc, #172]	@ (800af00 <HAL_RCC_OscConfig+0x764>)
 800ae52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae54:	f023 020c 	bic.w	r2, r3, #12
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae5c:	4928      	ldr	r1, [pc, #160]	@ (800af00 <HAL_RCC_OscConfig+0x764>)
 800ae5e:	4313      	orrs	r3, r2
 800ae60:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800ae62:	4b27      	ldr	r3, [pc, #156]	@ (800af00 <HAL_RCC_OscConfig+0x764>)
 800ae64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae66:	f023 0202 	bic.w	r2, r3, #2
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae6e:	4924      	ldr	r1, [pc, #144]	@ (800af00 <HAL_RCC_OscConfig+0x764>)
 800ae70:	4313      	orrs	r3, r2
 800ae72:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800ae74:	4b22      	ldr	r3, [pc, #136]	@ (800af00 <HAL_RCC_OscConfig+0x764>)
 800ae76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae78:	4a21      	ldr	r2, [pc, #132]	@ (800af00 <HAL_RCC_OscConfig+0x764>)
 800ae7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ae7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae80:	4b1f      	ldr	r3, [pc, #124]	@ (800af00 <HAL_RCC_OscConfig+0x764>)
 800ae82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae84:	4a1e      	ldr	r2, [pc, #120]	@ (800af00 <HAL_RCC_OscConfig+0x764>)
 800ae86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ae8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800ae8c:	4b1c      	ldr	r3, [pc, #112]	@ (800af00 <HAL_RCC_OscConfig+0x764>)
 800ae8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae90:	4a1b      	ldr	r2, [pc, #108]	@ (800af00 <HAL_RCC_OscConfig+0x764>)
 800ae92:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ae96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800ae98:	4b19      	ldr	r3, [pc, #100]	@ (800af00 <HAL_RCC_OscConfig+0x764>)
 800ae9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae9c:	4a18      	ldr	r2, [pc, #96]	@ (800af00 <HAL_RCC_OscConfig+0x764>)
 800ae9e:	f043 0301 	orr.w	r3, r3, #1
 800aea2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800aea4:	4b16      	ldr	r3, [pc, #88]	@ (800af00 <HAL_RCC_OscConfig+0x764>)
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	4a15      	ldr	r2, [pc, #84]	@ (800af00 <HAL_RCC_OscConfig+0x764>)
 800aeaa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800aeae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aeb0:	f7fb fd66 	bl	8006980 <HAL_GetTick>
 800aeb4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800aeb6:	e008      	b.n	800aeca <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aeb8:	f7fb fd62 	bl	8006980 <HAL_GetTick>
 800aebc:	4602      	mov	r2, r0
 800aebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aec0:	1ad3      	subs	r3, r2, r3
 800aec2:	2b02      	cmp	r3, #2
 800aec4:	d901      	bls.n	800aeca <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800aec6:	2303      	movs	r3, #3
 800aec8:	e091      	b.n	800afee <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800aeca:	4b0d      	ldr	r3, [pc, #52]	@ (800af00 <HAL_RCC_OscConfig+0x764>)
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d0f0      	beq.n	800aeb8 <HAL_RCC_OscConfig+0x71c>
 800aed6:	e089      	b.n	800afec <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aed8:	4b09      	ldr	r3, [pc, #36]	@ (800af00 <HAL_RCC_OscConfig+0x764>)
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	4a08      	ldr	r2, [pc, #32]	@ (800af00 <HAL_RCC_OscConfig+0x764>)
 800aede:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800aee2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aee4:	f7fb fd4c 	bl	8006980 <HAL_GetTick>
 800aee8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800aeea:	e00f      	b.n	800af0c <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aeec:	f7fb fd48 	bl	8006980 <HAL_GetTick>
 800aef0:	4602      	mov	r2, r0
 800aef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aef4:	1ad3      	subs	r3, r2, r3
 800aef6:	2b02      	cmp	r3, #2
 800aef8:	d908      	bls.n	800af0c <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800aefa:	2303      	movs	r3, #3
 800aefc:	e077      	b.n	800afee <HAL_RCC_OscConfig+0x852>
 800aefe:	bf00      	nop
 800af00:	58024400 	.word	0x58024400
 800af04:	fffffc0c 	.word	0xfffffc0c
 800af08:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800af0c:	4b3a      	ldr	r3, [pc, #232]	@ (800aff8 <HAL_RCC_OscConfig+0x85c>)
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800af14:	2b00      	cmp	r3, #0
 800af16:	d1e9      	bne.n	800aeec <HAL_RCC_OscConfig+0x750>
 800af18:	e068      	b.n	800afec <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800af1a:	4b37      	ldr	r3, [pc, #220]	@ (800aff8 <HAL_RCC_OscConfig+0x85c>)
 800af1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af1e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800af20:	4b35      	ldr	r3, [pc, #212]	@ (800aff8 <HAL_RCC_OscConfig+0x85c>)
 800af22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af24:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af2a:	2b01      	cmp	r3, #1
 800af2c:	d031      	beq.n	800af92 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800af2e:	693b      	ldr	r3, [r7, #16]
 800af30:	f003 0203 	and.w	r2, r3, #3
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800af38:	429a      	cmp	r2, r3
 800af3a:	d12a      	bne.n	800af92 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800af3c:	693b      	ldr	r3, [r7, #16]
 800af3e:	091b      	lsrs	r3, r3, #4
 800af40:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800af48:	429a      	cmp	r2, r3
 800af4a:	d122      	bne.n	800af92 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af56:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800af58:	429a      	cmp	r2, r3
 800af5a:	d11a      	bne.n	800af92 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	0a5b      	lsrs	r3, r3, #9
 800af60:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af68:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800af6a:	429a      	cmp	r2, r3
 800af6c:	d111      	bne.n	800af92 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	0c1b      	lsrs	r3, r3, #16
 800af72:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af7a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800af7c:	429a      	cmp	r2, r3
 800af7e:	d108      	bne.n	800af92 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	0e1b      	lsrs	r3, r3, #24
 800af84:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af8c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800af8e:	429a      	cmp	r2, r3
 800af90:	d001      	beq.n	800af96 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800af92:	2301      	movs	r3, #1
 800af94:	e02b      	b.n	800afee <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800af96:	4b18      	ldr	r3, [pc, #96]	@ (800aff8 <HAL_RCC_OscConfig+0x85c>)
 800af98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af9a:	08db      	lsrs	r3, r3, #3
 800af9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800afa0:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800afa6:	693a      	ldr	r2, [r7, #16]
 800afa8:	429a      	cmp	r2, r3
 800afaa:	d01f      	beq.n	800afec <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800afac:	4b12      	ldr	r3, [pc, #72]	@ (800aff8 <HAL_RCC_OscConfig+0x85c>)
 800afae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afb0:	4a11      	ldr	r2, [pc, #68]	@ (800aff8 <HAL_RCC_OscConfig+0x85c>)
 800afb2:	f023 0301 	bic.w	r3, r3, #1
 800afb6:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800afb8:	f7fb fce2 	bl	8006980 <HAL_GetTick>
 800afbc:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800afbe:	bf00      	nop
 800afc0:	f7fb fcde 	bl	8006980 <HAL_GetTick>
 800afc4:	4602      	mov	r2, r0
 800afc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afc8:	4293      	cmp	r3, r2
 800afca:	d0f9      	beq.n	800afc0 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800afcc:	4b0a      	ldr	r3, [pc, #40]	@ (800aff8 <HAL_RCC_OscConfig+0x85c>)
 800afce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800afd0:	4b0a      	ldr	r3, [pc, #40]	@ (800affc <HAL_RCC_OscConfig+0x860>)
 800afd2:	4013      	ands	r3, r2
 800afd4:	687a      	ldr	r2, [r7, #4]
 800afd6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800afd8:	00d2      	lsls	r2, r2, #3
 800afda:	4907      	ldr	r1, [pc, #28]	@ (800aff8 <HAL_RCC_OscConfig+0x85c>)
 800afdc:	4313      	orrs	r3, r2
 800afde:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800afe0:	4b05      	ldr	r3, [pc, #20]	@ (800aff8 <HAL_RCC_OscConfig+0x85c>)
 800afe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afe4:	4a04      	ldr	r2, [pc, #16]	@ (800aff8 <HAL_RCC_OscConfig+0x85c>)
 800afe6:	f043 0301 	orr.w	r3, r3, #1
 800afea:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800afec:	2300      	movs	r3, #0
}
 800afee:	4618      	mov	r0, r3
 800aff0:	3730      	adds	r7, #48	@ 0x30
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}
 800aff6:	bf00      	nop
 800aff8:	58024400 	.word	0x58024400
 800affc:	ffff0007 	.word	0xffff0007

0800b000 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b086      	sub	sp, #24
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
 800b008:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d101      	bne.n	800b014 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b010:	2301      	movs	r3, #1
 800b012:	e19c      	b.n	800b34e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b014:	4b8a      	ldr	r3, [pc, #552]	@ (800b240 <HAL_RCC_ClockConfig+0x240>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	f003 030f 	and.w	r3, r3, #15
 800b01c:	683a      	ldr	r2, [r7, #0]
 800b01e:	429a      	cmp	r2, r3
 800b020:	d910      	bls.n	800b044 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b022:	4b87      	ldr	r3, [pc, #540]	@ (800b240 <HAL_RCC_ClockConfig+0x240>)
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	f023 020f 	bic.w	r2, r3, #15
 800b02a:	4985      	ldr	r1, [pc, #532]	@ (800b240 <HAL_RCC_ClockConfig+0x240>)
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	4313      	orrs	r3, r2
 800b030:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b032:	4b83      	ldr	r3, [pc, #524]	@ (800b240 <HAL_RCC_ClockConfig+0x240>)
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	f003 030f 	and.w	r3, r3, #15
 800b03a:	683a      	ldr	r2, [r7, #0]
 800b03c:	429a      	cmp	r2, r3
 800b03e:	d001      	beq.n	800b044 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b040:	2301      	movs	r3, #1
 800b042:	e184      	b.n	800b34e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	f003 0304 	and.w	r3, r3, #4
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d010      	beq.n	800b072 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	691a      	ldr	r2, [r3, #16]
 800b054:	4b7b      	ldr	r3, [pc, #492]	@ (800b244 <HAL_RCC_ClockConfig+0x244>)
 800b056:	699b      	ldr	r3, [r3, #24]
 800b058:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b05c:	429a      	cmp	r2, r3
 800b05e:	d908      	bls.n	800b072 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b060:	4b78      	ldr	r3, [pc, #480]	@ (800b244 <HAL_RCC_ClockConfig+0x244>)
 800b062:	699b      	ldr	r3, [r3, #24]
 800b064:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	691b      	ldr	r3, [r3, #16]
 800b06c:	4975      	ldr	r1, [pc, #468]	@ (800b244 <HAL_RCC_ClockConfig+0x244>)
 800b06e:	4313      	orrs	r3, r2
 800b070:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	f003 0308 	and.w	r3, r3, #8
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d010      	beq.n	800b0a0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	695a      	ldr	r2, [r3, #20]
 800b082:	4b70      	ldr	r3, [pc, #448]	@ (800b244 <HAL_RCC_ClockConfig+0x244>)
 800b084:	69db      	ldr	r3, [r3, #28]
 800b086:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b08a:	429a      	cmp	r2, r3
 800b08c:	d908      	bls.n	800b0a0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b08e:	4b6d      	ldr	r3, [pc, #436]	@ (800b244 <HAL_RCC_ClockConfig+0x244>)
 800b090:	69db      	ldr	r3, [r3, #28]
 800b092:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	695b      	ldr	r3, [r3, #20]
 800b09a:	496a      	ldr	r1, [pc, #424]	@ (800b244 <HAL_RCC_ClockConfig+0x244>)
 800b09c:	4313      	orrs	r3, r2
 800b09e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	f003 0310 	and.w	r3, r3, #16
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d010      	beq.n	800b0ce <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	699a      	ldr	r2, [r3, #24]
 800b0b0:	4b64      	ldr	r3, [pc, #400]	@ (800b244 <HAL_RCC_ClockConfig+0x244>)
 800b0b2:	69db      	ldr	r3, [r3, #28]
 800b0b4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b0b8:	429a      	cmp	r2, r3
 800b0ba:	d908      	bls.n	800b0ce <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b0bc:	4b61      	ldr	r3, [pc, #388]	@ (800b244 <HAL_RCC_ClockConfig+0x244>)
 800b0be:	69db      	ldr	r3, [r3, #28]
 800b0c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	699b      	ldr	r3, [r3, #24]
 800b0c8:	495e      	ldr	r1, [pc, #376]	@ (800b244 <HAL_RCC_ClockConfig+0x244>)
 800b0ca:	4313      	orrs	r3, r2
 800b0cc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	f003 0320 	and.w	r3, r3, #32
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d010      	beq.n	800b0fc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	69da      	ldr	r2, [r3, #28]
 800b0de:	4b59      	ldr	r3, [pc, #356]	@ (800b244 <HAL_RCC_ClockConfig+0x244>)
 800b0e0:	6a1b      	ldr	r3, [r3, #32]
 800b0e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b0e6:	429a      	cmp	r2, r3
 800b0e8:	d908      	bls.n	800b0fc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b0ea:	4b56      	ldr	r3, [pc, #344]	@ (800b244 <HAL_RCC_ClockConfig+0x244>)
 800b0ec:	6a1b      	ldr	r3, [r3, #32]
 800b0ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	69db      	ldr	r3, [r3, #28]
 800b0f6:	4953      	ldr	r1, [pc, #332]	@ (800b244 <HAL_RCC_ClockConfig+0x244>)
 800b0f8:	4313      	orrs	r3, r2
 800b0fa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	f003 0302 	and.w	r3, r3, #2
 800b104:	2b00      	cmp	r3, #0
 800b106:	d010      	beq.n	800b12a <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	68da      	ldr	r2, [r3, #12]
 800b10c:	4b4d      	ldr	r3, [pc, #308]	@ (800b244 <HAL_RCC_ClockConfig+0x244>)
 800b10e:	699b      	ldr	r3, [r3, #24]
 800b110:	f003 030f 	and.w	r3, r3, #15
 800b114:	429a      	cmp	r2, r3
 800b116:	d908      	bls.n	800b12a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b118:	4b4a      	ldr	r3, [pc, #296]	@ (800b244 <HAL_RCC_ClockConfig+0x244>)
 800b11a:	699b      	ldr	r3, [r3, #24]
 800b11c:	f023 020f 	bic.w	r2, r3, #15
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	68db      	ldr	r3, [r3, #12]
 800b124:	4947      	ldr	r1, [pc, #284]	@ (800b244 <HAL_RCC_ClockConfig+0x244>)
 800b126:	4313      	orrs	r3, r2
 800b128:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	f003 0301 	and.w	r3, r3, #1
 800b132:	2b00      	cmp	r3, #0
 800b134:	d055      	beq.n	800b1e2 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800b136:	4b43      	ldr	r3, [pc, #268]	@ (800b244 <HAL_RCC_ClockConfig+0x244>)
 800b138:	699b      	ldr	r3, [r3, #24]
 800b13a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	689b      	ldr	r3, [r3, #8]
 800b142:	4940      	ldr	r1, [pc, #256]	@ (800b244 <HAL_RCC_ClockConfig+0x244>)
 800b144:	4313      	orrs	r3, r2
 800b146:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	685b      	ldr	r3, [r3, #4]
 800b14c:	2b02      	cmp	r3, #2
 800b14e:	d107      	bne.n	800b160 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b150:	4b3c      	ldr	r3, [pc, #240]	@ (800b244 <HAL_RCC_ClockConfig+0x244>)
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d121      	bne.n	800b1a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b15c:	2301      	movs	r3, #1
 800b15e:	e0f6      	b.n	800b34e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	685b      	ldr	r3, [r3, #4]
 800b164:	2b03      	cmp	r3, #3
 800b166:	d107      	bne.n	800b178 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b168:	4b36      	ldr	r3, [pc, #216]	@ (800b244 <HAL_RCC_ClockConfig+0x244>)
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b170:	2b00      	cmp	r3, #0
 800b172:	d115      	bne.n	800b1a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b174:	2301      	movs	r3, #1
 800b176:	e0ea      	b.n	800b34e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	685b      	ldr	r3, [r3, #4]
 800b17c:	2b01      	cmp	r3, #1
 800b17e:	d107      	bne.n	800b190 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b180:	4b30      	ldr	r3, [pc, #192]	@ (800b244 <HAL_RCC_ClockConfig+0x244>)
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d109      	bne.n	800b1a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b18c:	2301      	movs	r3, #1
 800b18e:	e0de      	b.n	800b34e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b190:	4b2c      	ldr	r3, [pc, #176]	@ (800b244 <HAL_RCC_ClockConfig+0x244>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	f003 0304 	and.w	r3, r3, #4
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d101      	bne.n	800b1a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b19c:	2301      	movs	r3, #1
 800b19e:	e0d6      	b.n	800b34e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b1a0:	4b28      	ldr	r3, [pc, #160]	@ (800b244 <HAL_RCC_ClockConfig+0x244>)
 800b1a2:	691b      	ldr	r3, [r3, #16]
 800b1a4:	f023 0207 	bic.w	r2, r3, #7
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	685b      	ldr	r3, [r3, #4]
 800b1ac:	4925      	ldr	r1, [pc, #148]	@ (800b244 <HAL_RCC_ClockConfig+0x244>)
 800b1ae:	4313      	orrs	r3, r2
 800b1b0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b1b2:	f7fb fbe5 	bl	8006980 <HAL_GetTick>
 800b1b6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b1b8:	e00a      	b.n	800b1d0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b1ba:	f7fb fbe1 	bl	8006980 <HAL_GetTick>
 800b1be:	4602      	mov	r2, r0
 800b1c0:	697b      	ldr	r3, [r7, #20]
 800b1c2:	1ad3      	subs	r3, r2, r3
 800b1c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b1c8:	4293      	cmp	r3, r2
 800b1ca:	d901      	bls.n	800b1d0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800b1cc:	2303      	movs	r3, #3
 800b1ce:	e0be      	b.n	800b34e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b1d0:	4b1c      	ldr	r3, [pc, #112]	@ (800b244 <HAL_RCC_ClockConfig+0x244>)
 800b1d2:	691b      	ldr	r3, [r3, #16]
 800b1d4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	685b      	ldr	r3, [r3, #4]
 800b1dc:	00db      	lsls	r3, r3, #3
 800b1de:	429a      	cmp	r2, r3
 800b1e0:	d1eb      	bne.n	800b1ba <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f003 0302 	and.w	r3, r3, #2
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d010      	beq.n	800b210 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	68da      	ldr	r2, [r3, #12]
 800b1f2:	4b14      	ldr	r3, [pc, #80]	@ (800b244 <HAL_RCC_ClockConfig+0x244>)
 800b1f4:	699b      	ldr	r3, [r3, #24]
 800b1f6:	f003 030f 	and.w	r3, r3, #15
 800b1fa:	429a      	cmp	r2, r3
 800b1fc:	d208      	bcs.n	800b210 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b1fe:	4b11      	ldr	r3, [pc, #68]	@ (800b244 <HAL_RCC_ClockConfig+0x244>)
 800b200:	699b      	ldr	r3, [r3, #24]
 800b202:	f023 020f 	bic.w	r2, r3, #15
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	68db      	ldr	r3, [r3, #12]
 800b20a:	490e      	ldr	r1, [pc, #56]	@ (800b244 <HAL_RCC_ClockConfig+0x244>)
 800b20c:	4313      	orrs	r3, r2
 800b20e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b210:	4b0b      	ldr	r3, [pc, #44]	@ (800b240 <HAL_RCC_ClockConfig+0x240>)
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	f003 030f 	and.w	r3, r3, #15
 800b218:	683a      	ldr	r2, [r7, #0]
 800b21a:	429a      	cmp	r2, r3
 800b21c:	d214      	bcs.n	800b248 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b21e:	4b08      	ldr	r3, [pc, #32]	@ (800b240 <HAL_RCC_ClockConfig+0x240>)
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	f023 020f 	bic.w	r2, r3, #15
 800b226:	4906      	ldr	r1, [pc, #24]	@ (800b240 <HAL_RCC_ClockConfig+0x240>)
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	4313      	orrs	r3, r2
 800b22c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b22e:	4b04      	ldr	r3, [pc, #16]	@ (800b240 <HAL_RCC_ClockConfig+0x240>)
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	f003 030f 	and.w	r3, r3, #15
 800b236:	683a      	ldr	r2, [r7, #0]
 800b238:	429a      	cmp	r2, r3
 800b23a:	d005      	beq.n	800b248 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b23c:	2301      	movs	r3, #1
 800b23e:	e086      	b.n	800b34e <HAL_RCC_ClockConfig+0x34e>
 800b240:	52002000 	.word	0x52002000
 800b244:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	f003 0304 	and.w	r3, r3, #4
 800b250:	2b00      	cmp	r3, #0
 800b252:	d010      	beq.n	800b276 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	691a      	ldr	r2, [r3, #16]
 800b258:	4b3f      	ldr	r3, [pc, #252]	@ (800b358 <HAL_RCC_ClockConfig+0x358>)
 800b25a:	699b      	ldr	r3, [r3, #24]
 800b25c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b260:	429a      	cmp	r2, r3
 800b262:	d208      	bcs.n	800b276 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b264:	4b3c      	ldr	r3, [pc, #240]	@ (800b358 <HAL_RCC_ClockConfig+0x358>)
 800b266:	699b      	ldr	r3, [r3, #24]
 800b268:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	691b      	ldr	r3, [r3, #16]
 800b270:	4939      	ldr	r1, [pc, #228]	@ (800b358 <HAL_RCC_ClockConfig+0x358>)
 800b272:	4313      	orrs	r3, r2
 800b274:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	f003 0308 	and.w	r3, r3, #8
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d010      	beq.n	800b2a4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	695a      	ldr	r2, [r3, #20]
 800b286:	4b34      	ldr	r3, [pc, #208]	@ (800b358 <HAL_RCC_ClockConfig+0x358>)
 800b288:	69db      	ldr	r3, [r3, #28]
 800b28a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b28e:	429a      	cmp	r2, r3
 800b290:	d208      	bcs.n	800b2a4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b292:	4b31      	ldr	r3, [pc, #196]	@ (800b358 <HAL_RCC_ClockConfig+0x358>)
 800b294:	69db      	ldr	r3, [r3, #28]
 800b296:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	695b      	ldr	r3, [r3, #20]
 800b29e:	492e      	ldr	r1, [pc, #184]	@ (800b358 <HAL_RCC_ClockConfig+0x358>)
 800b2a0:	4313      	orrs	r3, r2
 800b2a2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	f003 0310 	and.w	r3, r3, #16
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d010      	beq.n	800b2d2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	699a      	ldr	r2, [r3, #24]
 800b2b4:	4b28      	ldr	r3, [pc, #160]	@ (800b358 <HAL_RCC_ClockConfig+0x358>)
 800b2b6:	69db      	ldr	r3, [r3, #28]
 800b2b8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b2bc:	429a      	cmp	r2, r3
 800b2be:	d208      	bcs.n	800b2d2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b2c0:	4b25      	ldr	r3, [pc, #148]	@ (800b358 <HAL_RCC_ClockConfig+0x358>)
 800b2c2:	69db      	ldr	r3, [r3, #28]
 800b2c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	699b      	ldr	r3, [r3, #24]
 800b2cc:	4922      	ldr	r1, [pc, #136]	@ (800b358 <HAL_RCC_ClockConfig+0x358>)
 800b2ce:	4313      	orrs	r3, r2
 800b2d0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	f003 0320 	and.w	r3, r3, #32
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d010      	beq.n	800b300 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	69da      	ldr	r2, [r3, #28]
 800b2e2:	4b1d      	ldr	r3, [pc, #116]	@ (800b358 <HAL_RCC_ClockConfig+0x358>)
 800b2e4:	6a1b      	ldr	r3, [r3, #32]
 800b2e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b2ea:	429a      	cmp	r2, r3
 800b2ec:	d208      	bcs.n	800b300 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b2ee:	4b1a      	ldr	r3, [pc, #104]	@ (800b358 <HAL_RCC_ClockConfig+0x358>)
 800b2f0:	6a1b      	ldr	r3, [r3, #32]
 800b2f2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	69db      	ldr	r3, [r3, #28]
 800b2fa:	4917      	ldr	r1, [pc, #92]	@ (800b358 <HAL_RCC_ClockConfig+0x358>)
 800b2fc:	4313      	orrs	r3, r2
 800b2fe:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800b300:	f000 f834 	bl	800b36c <HAL_RCC_GetSysClockFreq>
 800b304:	4602      	mov	r2, r0
 800b306:	4b14      	ldr	r3, [pc, #80]	@ (800b358 <HAL_RCC_ClockConfig+0x358>)
 800b308:	699b      	ldr	r3, [r3, #24]
 800b30a:	0a1b      	lsrs	r3, r3, #8
 800b30c:	f003 030f 	and.w	r3, r3, #15
 800b310:	4912      	ldr	r1, [pc, #72]	@ (800b35c <HAL_RCC_ClockConfig+0x35c>)
 800b312:	5ccb      	ldrb	r3, [r1, r3]
 800b314:	f003 031f 	and.w	r3, r3, #31
 800b318:	fa22 f303 	lsr.w	r3, r2, r3
 800b31c:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800b31e:	4b0e      	ldr	r3, [pc, #56]	@ (800b358 <HAL_RCC_ClockConfig+0x358>)
 800b320:	699b      	ldr	r3, [r3, #24]
 800b322:	f003 030f 	and.w	r3, r3, #15
 800b326:	4a0d      	ldr	r2, [pc, #52]	@ (800b35c <HAL_RCC_ClockConfig+0x35c>)
 800b328:	5cd3      	ldrb	r3, [r2, r3]
 800b32a:	f003 031f 	and.w	r3, r3, #31
 800b32e:	693a      	ldr	r2, [r7, #16]
 800b330:	fa22 f303 	lsr.w	r3, r2, r3
 800b334:	4a0a      	ldr	r2, [pc, #40]	@ (800b360 <HAL_RCC_ClockConfig+0x360>)
 800b336:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b338:	4a0a      	ldr	r2, [pc, #40]	@ (800b364 <HAL_RCC_ClockConfig+0x364>)
 800b33a:	693b      	ldr	r3, [r7, #16]
 800b33c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800b33e:	4b0a      	ldr	r3, [pc, #40]	@ (800b368 <HAL_RCC_ClockConfig+0x368>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	4618      	mov	r0, r3
 800b344:	f7f8 f938 	bl	80035b8 <HAL_InitTick>
 800b348:	4603      	mov	r3, r0
 800b34a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b34c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b34e:	4618      	mov	r0, r3
 800b350:	3718      	adds	r7, #24
 800b352:	46bd      	mov	sp, r7
 800b354:	bd80      	pop	{r7, pc}
 800b356:	bf00      	nop
 800b358:	58024400 	.word	0x58024400
 800b35c:	08019ec4 	.word	0x08019ec4
 800b360:	24000004 	.word	0x24000004
 800b364:	24000000 	.word	0x24000000
 800b368:	240000a4 	.word	0x240000a4

0800b36c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b36c:	b480      	push	{r7}
 800b36e:	b089      	sub	sp, #36	@ 0x24
 800b370:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b372:	4bb3      	ldr	r3, [pc, #716]	@ (800b640 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b374:	691b      	ldr	r3, [r3, #16]
 800b376:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b37a:	2b18      	cmp	r3, #24
 800b37c:	f200 8155 	bhi.w	800b62a <HAL_RCC_GetSysClockFreq+0x2be>
 800b380:	a201      	add	r2, pc, #4	@ (adr r2, 800b388 <HAL_RCC_GetSysClockFreq+0x1c>)
 800b382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b386:	bf00      	nop
 800b388:	0800b3ed 	.word	0x0800b3ed
 800b38c:	0800b62b 	.word	0x0800b62b
 800b390:	0800b62b 	.word	0x0800b62b
 800b394:	0800b62b 	.word	0x0800b62b
 800b398:	0800b62b 	.word	0x0800b62b
 800b39c:	0800b62b 	.word	0x0800b62b
 800b3a0:	0800b62b 	.word	0x0800b62b
 800b3a4:	0800b62b 	.word	0x0800b62b
 800b3a8:	0800b413 	.word	0x0800b413
 800b3ac:	0800b62b 	.word	0x0800b62b
 800b3b0:	0800b62b 	.word	0x0800b62b
 800b3b4:	0800b62b 	.word	0x0800b62b
 800b3b8:	0800b62b 	.word	0x0800b62b
 800b3bc:	0800b62b 	.word	0x0800b62b
 800b3c0:	0800b62b 	.word	0x0800b62b
 800b3c4:	0800b62b 	.word	0x0800b62b
 800b3c8:	0800b419 	.word	0x0800b419
 800b3cc:	0800b62b 	.word	0x0800b62b
 800b3d0:	0800b62b 	.word	0x0800b62b
 800b3d4:	0800b62b 	.word	0x0800b62b
 800b3d8:	0800b62b 	.word	0x0800b62b
 800b3dc:	0800b62b 	.word	0x0800b62b
 800b3e0:	0800b62b 	.word	0x0800b62b
 800b3e4:	0800b62b 	.word	0x0800b62b
 800b3e8:	0800b41f 	.word	0x0800b41f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b3ec:	4b94      	ldr	r3, [pc, #592]	@ (800b640 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	f003 0320 	and.w	r3, r3, #32
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d009      	beq.n	800b40c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b3f8:	4b91      	ldr	r3, [pc, #580]	@ (800b640 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	08db      	lsrs	r3, r3, #3
 800b3fe:	f003 0303 	and.w	r3, r3, #3
 800b402:	4a90      	ldr	r2, [pc, #576]	@ (800b644 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b404:	fa22 f303 	lsr.w	r3, r2, r3
 800b408:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800b40a:	e111      	b.n	800b630 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b40c:	4b8d      	ldr	r3, [pc, #564]	@ (800b644 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b40e:	61bb      	str	r3, [r7, #24]
      break;
 800b410:	e10e      	b.n	800b630 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800b412:	4b8d      	ldr	r3, [pc, #564]	@ (800b648 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b414:	61bb      	str	r3, [r7, #24]
      break;
 800b416:	e10b      	b.n	800b630 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800b418:	4b8c      	ldr	r3, [pc, #560]	@ (800b64c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b41a:	61bb      	str	r3, [r7, #24]
      break;
 800b41c:	e108      	b.n	800b630 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b41e:	4b88      	ldr	r3, [pc, #544]	@ (800b640 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b420:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b422:	f003 0303 	and.w	r3, r3, #3
 800b426:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b428:	4b85      	ldr	r3, [pc, #532]	@ (800b640 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b42a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b42c:	091b      	lsrs	r3, r3, #4
 800b42e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b432:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b434:	4b82      	ldr	r3, [pc, #520]	@ (800b640 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b438:	f003 0301 	and.w	r3, r3, #1
 800b43c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b43e:	4b80      	ldr	r3, [pc, #512]	@ (800b640 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b440:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b442:	08db      	lsrs	r3, r3, #3
 800b444:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b448:	68fa      	ldr	r2, [r7, #12]
 800b44a:	fb02 f303 	mul.w	r3, r2, r3
 800b44e:	ee07 3a90 	vmov	s15, r3
 800b452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b456:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800b45a:	693b      	ldr	r3, [r7, #16]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	f000 80e1 	beq.w	800b624 <HAL_RCC_GetSysClockFreq+0x2b8>
 800b462:	697b      	ldr	r3, [r7, #20]
 800b464:	2b02      	cmp	r3, #2
 800b466:	f000 8083 	beq.w	800b570 <HAL_RCC_GetSysClockFreq+0x204>
 800b46a:	697b      	ldr	r3, [r7, #20]
 800b46c:	2b02      	cmp	r3, #2
 800b46e:	f200 80a1 	bhi.w	800b5b4 <HAL_RCC_GetSysClockFreq+0x248>
 800b472:	697b      	ldr	r3, [r7, #20]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d003      	beq.n	800b480 <HAL_RCC_GetSysClockFreq+0x114>
 800b478:	697b      	ldr	r3, [r7, #20]
 800b47a:	2b01      	cmp	r3, #1
 800b47c:	d056      	beq.n	800b52c <HAL_RCC_GetSysClockFreq+0x1c0>
 800b47e:	e099      	b.n	800b5b4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b480:	4b6f      	ldr	r3, [pc, #444]	@ (800b640 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	f003 0320 	and.w	r3, r3, #32
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d02d      	beq.n	800b4e8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b48c:	4b6c      	ldr	r3, [pc, #432]	@ (800b640 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	08db      	lsrs	r3, r3, #3
 800b492:	f003 0303 	and.w	r3, r3, #3
 800b496:	4a6b      	ldr	r2, [pc, #428]	@ (800b644 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b498:	fa22 f303 	lsr.w	r3, r2, r3
 800b49c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	ee07 3a90 	vmov	s15, r3
 800b4a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4a8:	693b      	ldr	r3, [r7, #16]
 800b4aa:	ee07 3a90 	vmov	s15, r3
 800b4ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4b6:	4b62      	ldr	r3, [pc, #392]	@ (800b640 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b4b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4be:	ee07 3a90 	vmov	s15, r3
 800b4c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4c6:	ed97 6a02 	vldr	s12, [r7, #8]
 800b4ca:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800b650 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b4ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b4da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4e2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800b4e6:	e087      	b.n	800b5f8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b4e8:	693b      	ldr	r3, [r7, #16]
 800b4ea:	ee07 3a90 	vmov	s15, r3
 800b4ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4f2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800b654 <HAL_RCC_GetSysClockFreq+0x2e8>
 800b4f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4fa:	4b51      	ldr	r3, [pc, #324]	@ (800b640 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b4fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b502:	ee07 3a90 	vmov	s15, r3
 800b506:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b50a:	ed97 6a02 	vldr	s12, [r7, #8]
 800b50e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800b650 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b512:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b516:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b51a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b51e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b522:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b526:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b52a:	e065      	b.n	800b5f8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b52c:	693b      	ldr	r3, [r7, #16]
 800b52e:	ee07 3a90 	vmov	s15, r3
 800b532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b536:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800b658 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b53a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b53e:	4b40      	ldr	r3, [pc, #256]	@ (800b640 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b542:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b546:	ee07 3a90 	vmov	s15, r3
 800b54a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b54e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b552:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800b650 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b556:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b55a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b55e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b562:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b56a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b56e:	e043      	b.n	800b5f8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b570:	693b      	ldr	r3, [r7, #16]
 800b572:	ee07 3a90 	vmov	s15, r3
 800b576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b57a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800b65c <HAL_RCC_GetSysClockFreq+0x2f0>
 800b57e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b582:	4b2f      	ldr	r3, [pc, #188]	@ (800b640 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b58a:	ee07 3a90 	vmov	s15, r3
 800b58e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b592:	ed97 6a02 	vldr	s12, [r7, #8]
 800b596:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800b650 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b59a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b59e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b5a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b5b2:	e021      	b.n	800b5f8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b5b4:	693b      	ldr	r3, [r7, #16]
 800b5b6:	ee07 3a90 	vmov	s15, r3
 800b5ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5be:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800b658 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b5c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5c6:	4b1e      	ldr	r3, [pc, #120]	@ (800b640 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b5c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5ce:	ee07 3a90 	vmov	s15, r3
 800b5d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5d6:	ed97 6a02 	vldr	s12, [r7, #8]
 800b5da:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800b650 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b5de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b5ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b5f6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b5f8:	4b11      	ldr	r3, [pc, #68]	@ (800b640 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b5fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5fc:	0a5b      	lsrs	r3, r3, #9
 800b5fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b602:	3301      	adds	r3, #1
 800b604:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b606:	683b      	ldr	r3, [r7, #0]
 800b608:	ee07 3a90 	vmov	s15, r3
 800b60c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b610:	edd7 6a07 	vldr	s13, [r7, #28]
 800b614:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b618:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b61c:	ee17 3a90 	vmov	r3, s15
 800b620:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800b622:	e005      	b.n	800b630 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800b624:	2300      	movs	r3, #0
 800b626:	61bb      	str	r3, [r7, #24]
      break;
 800b628:	e002      	b.n	800b630 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800b62a:	4b07      	ldr	r3, [pc, #28]	@ (800b648 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b62c:	61bb      	str	r3, [r7, #24]
      break;
 800b62e:	bf00      	nop
  }

  return sysclockfreq;
 800b630:	69bb      	ldr	r3, [r7, #24]
}
 800b632:	4618      	mov	r0, r3
 800b634:	3724      	adds	r7, #36	@ 0x24
 800b636:	46bd      	mov	sp, r7
 800b638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63c:	4770      	bx	lr
 800b63e:	bf00      	nop
 800b640:	58024400 	.word	0x58024400
 800b644:	03d09000 	.word	0x03d09000
 800b648:	003d0900 	.word	0x003d0900
 800b64c:	016e3600 	.word	0x016e3600
 800b650:	46000000 	.word	0x46000000
 800b654:	4c742400 	.word	0x4c742400
 800b658:	4a742400 	.word	0x4a742400
 800b65c:	4bb71b00 	.word	0x4bb71b00

0800b660 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b082      	sub	sp, #8
 800b664:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800b666:	f7ff fe81 	bl	800b36c <HAL_RCC_GetSysClockFreq>
 800b66a:	4602      	mov	r2, r0
 800b66c:	4b10      	ldr	r3, [pc, #64]	@ (800b6b0 <HAL_RCC_GetHCLKFreq+0x50>)
 800b66e:	699b      	ldr	r3, [r3, #24]
 800b670:	0a1b      	lsrs	r3, r3, #8
 800b672:	f003 030f 	and.w	r3, r3, #15
 800b676:	490f      	ldr	r1, [pc, #60]	@ (800b6b4 <HAL_RCC_GetHCLKFreq+0x54>)
 800b678:	5ccb      	ldrb	r3, [r1, r3]
 800b67a:	f003 031f 	and.w	r3, r3, #31
 800b67e:	fa22 f303 	lsr.w	r3, r2, r3
 800b682:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800b684:	4b0a      	ldr	r3, [pc, #40]	@ (800b6b0 <HAL_RCC_GetHCLKFreq+0x50>)
 800b686:	699b      	ldr	r3, [r3, #24]
 800b688:	f003 030f 	and.w	r3, r3, #15
 800b68c:	4a09      	ldr	r2, [pc, #36]	@ (800b6b4 <HAL_RCC_GetHCLKFreq+0x54>)
 800b68e:	5cd3      	ldrb	r3, [r2, r3]
 800b690:	f003 031f 	and.w	r3, r3, #31
 800b694:	687a      	ldr	r2, [r7, #4]
 800b696:	fa22 f303 	lsr.w	r3, r2, r3
 800b69a:	4a07      	ldr	r2, [pc, #28]	@ (800b6b8 <HAL_RCC_GetHCLKFreq+0x58>)
 800b69c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b69e:	4a07      	ldr	r2, [pc, #28]	@ (800b6bc <HAL_RCC_GetHCLKFreq+0x5c>)
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b6a4:	4b04      	ldr	r3, [pc, #16]	@ (800b6b8 <HAL_RCC_GetHCLKFreq+0x58>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
}
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	3708      	adds	r7, #8
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	bd80      	pop	{r7, pc}
 800b6b0:	58024400 	.word	0x58024400
 800b6b4:	08019ec4 	.word	0x08019ec4
 800b6b8:	24000004 	.word	0x24000004
 800b6bc:	24000000 	.word	0x24000000

0800b6c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800b6c4:	f7ff ffcc 	bl	800b660 <HAL_RCC_GetHCLKFreq>
 800b6c8:	4602      	mov	r2, r0
 800b6ca:	4b06      	ldr	r3, [pc, #24]	@ (800b6e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b6cc:	69db      	ldr	r3, [r3, #28]
 800b6ce:	091b      	lsrs	r3, r3, #4
 800b6d0:	f003 0307 	and.w	r3, r3, #7
 800b6d4:	4904      	ldr	r1, [pc, #16]	@ (800b6e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b6d6:	5ccb      	ldrb	r3, [r1, r3]
 800b6d8:	f003 031f 	and.w	r3, r3, #31
 800b6dc:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	bd80      	pop	{r7, pc}
 800b6e4:	58024400 	.word	0x58024400
 800b6e8:	08019ec4 	.word	0x08019ec4

0800b6ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800b6f0:	f7ff ffb6 	bl	800b660 <HAL_RCC_GetHCLKFreq>
 800b6f4:	4602      	mov	r2, r0
 800b6f6:	4b06      	ldr	r3, [pc, #24]	@ (800b710 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b6f8:	69db      	ldr	r3, [r3, #28]
 800b6fa:	0a1b      	lsrs	r3, r3, #8
 800b6fc:	f003 0307 	and.w	r3, r3, #7
 800b700:	4904      	ldr	r1, [pc, #16]	@ (800b714 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b702:	5ccb      	ldrb	r3, [r1, r3]
 800b704:	f003 031f 	and.w	r3, r3, #31
 800b708:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800b70c:	4618      	mov	r0, r3
 800b70e:	bd80      	pop	{r7, pc}
 800b710:	58024400 	.word	0x58024400
 800b714:	08019ec4 	.word	0x08019ec4

0800b718 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b718:	b480      	push	{r7}
 800b71a:	b083      	sub	sp, #12
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
 800b720:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	223f      	movs	r2, #63	@ 0x3f
 800b726:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b728:	4b1a      	ldr	r3, [pc, #104]	@ (800b794 <HAL_RCC_GetClockConfig+0x7c>)
 800b72a:	691b      	ldr	r3, [r3, #16]
 800b72c:	f003 0207 	and.w	r2, r3, #7
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 800b734:	4b17      	ldr	r3, [pc, #92]	@ (800b794 <HAL_RCC_GetClockConfig+0x7c>)
 800b736:	699b      	ldr	r3, [r3, #24]
 800b738:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 800b740:	4b14      	ldr	r3, [pc, #80]	@ (800b794 <HAL_RCC_GetClockConfig+0x7c>)
 800b742:	699b      	ldr	r3, [r3, #24]
 800b744:	f003 020f 	and.w	r2, r3, #15
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 800b74c:	4b11      	ldr	r3, [pc, #68]	@ (800b794 <HAL_RCC_GetClockConfig+0x7c>)
 800b74e:	699b      	ldr	r3, [r3, #24]
 800b750:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 800b758:	4b0e      	ldr	r3, [pc, #56]	@ (800b794 <HAL_RCC_GetClockConfig+0x7c>)
 800b75a:	69db      	ldr	r3, [r3, #28]
 800b75c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 800b764:	4b0b      	ldr	r3, [pc, #44]	@ (800b794 <HAL_RCC_GetClockConfig+0x7c>)
 800b766:	69db      	ldr	r3, [r3, #28]
 800b768:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 800b770:	4b08      	ldr	r3, [pc, #32]	@ (800b794 <HAL_RCC_GetClockConfig+0x7c>)
 800b772:	6a1b      	ldr	r3, [r3, #32]
 800b774:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b77c:	4b06      	ldr	r3, [pc, #24]	@ (800b798 <HAL_RCC_GetClockConfig+0x80>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	f003 020f 	and.w	r2, r3, #15
 800b784:	683b      	ldr	r3, [r7, #0]
 800b786:	601a      	str	r2, [r3, #0]
}
 800b788:	bf00      	nop
 800b78a:	370c      	adds	r7, #12
 800b78c:	46bd      	mov	sp, r7
 800b78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b792:	4770      	bx	lr
 800b794:	58024400 	.word	0x58024400
 800b798:	52002000 	.word	0x52002000

0800b79c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b79c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b7a0:	b0c8      	sub	sp, #288	@ 0x120
 800b7a2:	af00      	add	r7, sp, #0
 800b7a4:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b7b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7bc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800b7c0:	2500      	movs	r5, #0
 800b7c2:	ea54 0305 	orrs.w	r3, r4, r5
 800b7c6:	d049      	beq.n	800b85c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b7c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b7ce:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b7d2:	d02f      	beq.n	800b834 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b7d4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b7d8:	d828      	bhi.n	800b82c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b7da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b7de:	d01a      	beq.n	800b816 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b7e0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b7e4:	d822      	bhi.n	800b82c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d003      	beq.n	800b7f2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b7ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b7ee:	d007      	beq.n	800b800 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b7f0:	e01c      	b.n	800b82c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b7f2:	4ba7      	ldr	r3, [pc, #668]	@ (800ba90 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b7f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7f6:	4aa6      	ldr	r2, [pc, #664]	@ (800ba90 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b7f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b7fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b7fe:	e01a      	b.n	800b836 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b800:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b804:	3308      	adds	r3, #8
 800b806:	2102      	movs	r1, #2
 800b808:	4618      	mov	r0, r3
 800b80a:	f001 fc43 	bl	800d094 <RCCEx_PLL2_Config>
 800b80e:	4603      	mov	r3, r0
 800b810:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b814:	e00f      	b.n	800b836 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b816:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b81a:	3328      	adds	r3, #40	@ 0x28
 800b81c:	2102      	movs	r1, #2
 800b81e:	4618      	mov	r0, r3
 800b820:	f001 fcea 	bl	800d1f8 <RCCEx_PLL3_Config>
 800b824:	4603      	mov	r3, r0
 800b826:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b82a:	e004      	b.n	800b836 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b82c:	2301      	movs	r3, #1
 800b82e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b832:	e000      	b.n	800b836 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b834:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b836:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d10a      	bne.n	800b854 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b83e:	4b94      	ldr	r3, [pc, #592]	@ (800ba90 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b840:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b842:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b846:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b84a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b84c:	4a90      	ldr	r2, [pc, #576]	@ (800ba90 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b84e:	430b      	orrs	r3, r1
 800b850:	6513      	str	r3, [r2, #80]	@ 0x50
 800b852:	e003      	b.n	800b85c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b854:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b858:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b85c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b860:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b864:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800b868:	f04f 0900 	mov.w	r9, #0
 800b86c:	ea58 0309 	orrs.w	r3, r8, r9
 800b870:	d047      	beq.n	800b902 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800b872:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b876:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b878:	2b04      	cmp	r3, #4
 800b87a:	d82a      	bhi.n	800b8d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b87c:	a201      	add	r2, pc, #4	@ (adr r2, 800b884 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b87e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b882:	bf00      	nop
 800b884:	0800b899 	.word	0x0800b899
 800b888:	0800b8a7 	.word	0x0800b8a7
 800b88c:	0800b8bd 	.word	0x0800b8bd
 800b890:	0800b8db 	.word	0x0800b8db
 800b894:	0800b8db 	.word	0x0800b8db
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b898:	4b7d      	ldr	r3, [pc, #500]	@ (800ba90 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b89a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b89c:	4a7c      	ldr	r2, [pc, #496]	@ (800ba90 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b89e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b8a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b8a4:	e01a      	b.n	800b8dc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b8a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8aa:	3308      	adds	r3, #8
 800b8ac:	2100      	movs	r1, #0
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	f001 fbf0 	bl	800d094 <RCCEx_PLL2_Config>
 800b8b4:	4603      	mov	r3, r0
 800b8b6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b8ba:	e00f      	b.n	800b8dc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b8bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8c0:	3328      	adds	r3, #40	@ 0x28
 800b8c2:	2100      	movs	r1, #0
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	f001 fc97 	bl	800d1f8 <RCCEx_PLL3_Config>
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b8d0:	e004      	b.n	800b8dc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b8d2:	2301      	movs	r3, #1
 800b8d4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b8d8:	e000      	b.n	800b8dc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b8da:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b8dc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d10a      	bne.n	800b8fa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b8e4:	4b6a      	ldr	r3, [pc, #424]	@ (800ba90 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b8e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b8e8:	f023 0107 	bic.w	r1, r3, #7
 800b8ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b8f2:	4a67      	ldr	r2, [pc, #412]	@ (800ba90 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b8f4:	430b      	orrs	r3, r1
 800b8f6:	6513      	str	r3, [r2, #80]	@ 0x50
 800b8f8:	e003      	b.n	800b902 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8fa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b8fe:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800b902:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b90a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800b90e:	f04f 0b00 	mov.w	fp, #0
 800b912:	ea5a 030b 	orrs.w	r3, sl, fp
 800b916:	d054      	beq.n	800b9c2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800b918:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b91c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b91e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800b922:	d036      	beq.n	800b992 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800b924:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800b928:	d82f      	bhi.n	800b98a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b92a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b92e:	d032      	beq.n	800b996 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b930:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b934:	d829      	bhi.n	800b98a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b936:	2bc0      	cmp	r3, #192	@ 0xc0
 800b938:	d02f      	beq.n	800b99a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800b93a:	2bc0      	cmp	r3, #192	@ 0xc0
 800b93c:	d825      	bhi.n	800b98a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b93e:	2b80      	cmp	r3, #128	@ 0x80
 800b940:	d018      	beq.n	800b974 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800b942:	2b80      	cmp	r3, #128	@ 0x80
 800b944:	d821      	bhi.n	800b98a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b946:	2b00      	cmp	r3, #0
 800b948:	d002      	beq.n	800b950 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800b94a:	2b40      	cmp	r3, #64	@ 0x40
 800b94c:	d007      	beq.n	800b95e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800b94e:	e01c      	b.n	800b98a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b950:	4b4f      	ldr	r3, [pc, #316]	@ (800ba90 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b954:	4a4e      	ldr	r2, [pc, #312]	@ (800ba90 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b956:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b95a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800b95c:	e01e      	b.n	800b99c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b95e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b962:	3308      	adds	r3, #8
 800b964:	2100      	movs	r1, #0
 800b966:	4618      	mov	r0, r3
 800b968:	f001 fb94 	bl	800d094 <RCCEx_PLL2_Config>
 800b96c:	4603      	mov	r3, r0
 800b96e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800b972:	e013      	b.n	800b99c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b974:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b978:	3328      	adds	r3, #40	@ 0x28
 800b97a:	2100      	movs	r1, #0
 800b97c:	4618      	mov	r0, r3
 800b97e:	f001 fc3b 	bl	800d1f8 <RCCEx_PLL3_Config>
 800b982:	4603      	mov	r3, r0
 800b984:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800b988:	e008      	b.n	800b99c <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b98a:	2301      	movs	r3, #1
 800b98c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b990:	e004      	b.n	800b99c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800b992:	bf00      	nop
 800b994:	e002      	b.n	800b99c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800b996:	bf00      	nop
 800b998:	e000      	b.n	800b99c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800b99a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b99c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d10a      	bne.n	800b9ba <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800b9a4:	4b3a      	ldr	r3, [pc, #232]	@ (800ba90 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b9a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b9a8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800b9ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b9b2:	4a37      	ldr	r2, [pc, #220]	@ (800ba90 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b9b4:	430b      	orrs	r3, r1
 800b9b6:	6513      	str	r3, [r2, #80]	@ 0x50
 800b9b8:	e003      	b.n	800b9c2 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9ba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b9be:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800b9c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ca:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800b9ce:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800b9d8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800b9dc:	460b      	mov	r3, r1
 800b9de:	4313      	orrs	r3, r2
 800b9e0:	d05c      	beq.n	800ba9c <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800b9e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b9e8:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800b9ec:	d03b      	beq.n	800ba66 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b9ee:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800b9f2:	d834      	bhi.n	800ba5e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b9f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b9f8:	d037      	beq.n	800ba6a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800b9fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b9fe:	d82e      	bhi.n	800ba5e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800ba00:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800ba04:	d033      	beq.n	800ba6e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800ba06:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800ba0a:	d828      	bhi.n	800ba5e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800ba0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ba10:	d01a      	beq.n	800ba48 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800ba12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ba16:	d822      	bhi.n	800ba5e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d003      	beq.n	800ba24 <HAL_RCCEx_PeriphCLKConfig+0x288>
 800ba1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ba20:	d007      	beq.n	800ba32 <HAL_RCCEx_PeriphCLKConfig+0x296>
 800ba22:	e01c      	b.n	800ba5e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba24:	4b1a      	ldr	r3, [pc, #104]	@ (800ba90 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ba26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba28:	4a19      	ldr	r2, [pc, #100]	@ (800ba90 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ba2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ba2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800ba30:	e01e      	b.n	800ba70 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ba32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba36:	3308      	adds	r3, #8
 800ba38:	2100      	movs	r1, #0
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	f001 fb2a 	bl	800d094 <RCCEx_PLL2_Config>
 800ba40:	4603      	mov	r3, r0
 800ba42:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800ba46:	e013      	b.n	800ba70 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ba48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba4c:	3328      	adds	r3, #40	@ 0x28
 800ba4e:	2100      	movs	r1, #0
 800ba50:	4618      	mov	r0, r3
 800ba52:	f001 fbd1 	bl	800d1f8 <RCCEx_PLL3_Config>
 800ba56:	4603      	mov	r3, r0
 800ba58:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800ba5c:	e008      	b.n	800ba70 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ba5e:	2301      	movs	r3, #1
 800ba60:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800ba64:	e004      	b.n	800ba70 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800ba66:	bf00      	nop
 800ba68:	e002      	b.n	800ba70 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800ba6a:	bf00      	nop
 800ba6c:	e000      	b.n	800ba70 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800ba6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba70:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d10d      	bne.n	800ba94 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800ba78:	4b05      	ldr	r3, [pc, #20]	@ (800ba90 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ba7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba7c:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 800ba80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ba86:	4a02      	ldr	r2, [pc, #8]	@ (800ba90 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ba88:	430b      	orrs	r3, r1
 800ba8a:	6513      	str	r3, [r2, #80]	@ 0x50
 800ba8c:	e006      	b.n	800ba9c <HAL_RCCEx_PeriphCLKConfig+0x300>
 800ba8e:	bf00      	nop
 800ba90:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba94:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ba98:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800ba9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800baa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baa4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800baa8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800baac:	2300      	movs	r3, #0
 800baae:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800bab2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800bab6:	460b      	mov	r3, r1
 800bab8:	4313      	orrs	r3, r2
 800baba:	d03a      	beq.n	800bb32 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800babc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bac0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bac2:	2b30      	cmp	r3, #48	@ 0x30
 800bac4:	d01f      	beq.n	800bb06 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800bac6:	2b30      	cmp	r3, #48	@ 0x30
 800bac8:	d819      	bhi.n	800bafe <HAL_RCCEx_PeriphCLKConfig+0x362>
 800baca:	2b20      	cmp	r3, #32
 800bacc:	d00c      	beq.n	800bae8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800bace:	2b20      	cmp	r3, #32
 800bad0:	d815      	bhi.n	800bafe <HAL_RCCEx_PeriphCLKConfig+0x362>
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d019      	beq.n	800bb0a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800bad6:	2b10      	cmp	r3, #16
 800bad8:	d111      	bne.n	800bafe <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bada:	4bae      	ldr	r3, [pc, #696]	@ (800bd94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800badc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bade:	4aad      	ldr	r2, [pc, #692]	@ (800bd94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bae0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bae4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800bae6:	e011      	b.n	800bb0c <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bae8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800baec:	3308      	adds	r3, #8
 800baee:	2102      	movs	r1, #2
 800baf0:	4618      	mov	r0, r3
 800baf2:	f001 facf 	bl	800d094 <RCCEx_PLL2_Config>
 800baf6:	4603      	mov	r3, r0
 800baf8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800bafc:	e006      	b.n	800bb0c <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800bafe:	2301      	movs	r3, #1
 800bb00:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800bb04:	e002      	b.n	800bb0c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800bb06:	bf00      	nop
 800bb08:	e000      	b.n	800bb0c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800bb0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb0c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d10a      	bne.n	800bb2a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800bb14:	4b9f      	ldr	r3, [pc, #636]	@ (800bd94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bb16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bb18:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800bb1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bb22:	4a9c      	ldr	r2, [pc, #624]	@ (800bd94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bb24:	430b      	orrs	r3, r1
 800bb26:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800bb28:	e003      	b.n	800bb32 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb2a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bb2e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800bb32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb3a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800bb3e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800bb42:	2300      	movs	r3, #0
 800bb44:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800bb48:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800bb4c:	460b      	mov	r3, r1
 800bb4e:	4313      	orrs	r3, r2
 800bb50:	d051      	beq.n	800bbf6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800bb52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bb58:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bb5c:	d035      	beq.n	800bbca <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800bb5e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bb62:	d82e      	bhi.n	800bbc2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800bb64:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bb68:	d031      	beq.n	800bbce <HAL_RCCEx_PeriphCLKConfig+0x432>
 800bb6a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bb6e:	d828      	bhi.n	800bbc2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800bb70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bb74:	d01a      	beq.n	800bbac <HAL_RCCEx_PeriphCLKConfig+0x410>
 800bb76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bb7a:	d822      	bhi.n	800bbc2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d003      	beq.n	800bb88 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800bb80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bb84:	d007      	beq.n	800bb96 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800bb86:	e01c      	b.n	800bbc2 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb88:	4b82      	ldr	r3, [pc, #520]	@ (800bd94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bb8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb8c:	4a81      	ldr	r2, [pc, #516]	@ (800bd94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bb8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bb92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bb94:	e01c      	b.n	800bbd0 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bb96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb9a:	3308      	adds	r3, #8
 800bb9c:	2100      	movs	r1, #0
 800bb9e:	4618      	mov	r0, r3
 800bba0:	f001 fa78 	bl	800d094 <RCCEx_PLL2_Config>
 800bba4:	4603      	mov	r3, r0
 800bba6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bbaa:	e011      	b.n	800bbd0 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bbac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbb0:	3328      	adds	r3, #40	@ 0x28
 800bbb2:	2100      	movs	r1, #0
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	f001 fb1f 	bl	800d1f8 <RCCEx_PLL3_Config>
 800bbba:	4603      	mov	r3, r0
 800bbbc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bbc0:	e006      	b.n	800bbd0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bbc2:	2301      	movs	r3, #1
 800bbc4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800bbc8:	e002      	b.n	800bbd0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800bbca:	bf00      	nop
 800bbcc:	e000      	b.n	800bbd0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800bbce:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bbd0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d10a      	bne.n	800bbee <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800bbd8:	4b6e      	ldr	r3, [pc, #440]	@ (800bd94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bbda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bbdc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800bbe0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbe4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bbe6:	4a6b      	ldr	r2, [pc, #428]	@ (800bd94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bbe8:	430b      	orrs	r3, r1
 800bbea:	6513      	str	r3, [r2, #80]	@ 0x50
 800bbec:	e003      	b.n	800bbf6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbee:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bbf2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800bbf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbfe:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800bc02:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800bc06:	2300      	movs	r3, #0
 800bc08:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800bc0c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800bc10:	460b      	mov	r3, r1
 800bc12:	4313      	orrs	r3, r2
 800bc14:	d053      	beq.n	800bcbe <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800bc16:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc1a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bc1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800bc20:	d033      	beq.n	800bc8a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800bc22:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800bc26:	d82c      	bhi.n	800bc82 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800bc28:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800bc2c:	d02f      	beq.n	800bc8e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800bc2e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800bc32:	d826      	bhi.n	800bc82 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800bc34:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800bc38:	d02b      	beq.n	800bc92 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bc3a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800bc3e:	d820      	bhi.n	800bc82 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800bc40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bc44:	d012      	beq.n	800bc6c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800bc46:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bc4a:	d81a      	bhi.n	800bc82 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d022      	beq.n	800bc96 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 800bc50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bc54:	d115      	bne.n	800bc82 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bc56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc5a:	3308      	adds	r3, #8
 800bc5c:	2101      	movs	r1, #1
 800bc5e:	4618      	mov	r0, r3
 800bc60:	f001 fa18 	bl	800d094 <RCCEx_PLL2_Config>
 800bc64:	4603      	mov	r3, r0
 800bc66:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800bc6a:	e015      	b.n	800bc98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bc6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc70:	3328      	adds	r3, #40	@ 0x28
 800bc72:	2101      	movs	r1, #1
 800bc74:	4618      	mov	r0, r3
 800bc76:	f001 fabf 	bl	800d1f8 <RCCEx_PLL3_Config>
 800bc7a:	4603      	mov	r3, r0
 800bc7c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800bc80:	e00a      	b.n	800bc98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bc82:	2301      	movs	r3, #1
 800bc84:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800bc88:	e006      	b.n	800bc98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800bc8a:	bf00      	nop
 800bc8c:	e004      	b.n	800bc98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800bc8e:	bf00      	nop
 800bc90:	e002      	b.n	800bc98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800bc92:	bf00      	nop
 800bc94:	e000      	b.n	800bc98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800bc96:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc98:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d10a      	bne.n	800bcb6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800bca0:	4b3c      	ldr	r3, [pc, #240]	@ (800bd94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bca2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bca4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800bca8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bcac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bcae:	4a39      	ldr	r2, [pc, #228]	@ (800bd94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bcb0:	430b      	orrs	r3, r1
 800bcb2:	6513      	str	r3, [r2, #80]	@ 0x50
 800bcb4:	e003      	b.n	800bcbe <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcb6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bcba:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800bcbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bcc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcc6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800bcca:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800bcce:	2300      	movs	r3, #0
 800bcd0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800bcd4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800bcd8:	460b      	mov	r3, r1
 800bcda:	4313      	orrs	r3, r2
 800bcdc:	d060      	beq.n	800bda0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800bcde:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bce2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800bce6:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800bcea:	d039      	beq.n	800bd60 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800bcec:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800bcf0:	d832      	bhi.n	800bd58 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800bcf2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bcf6:	d035      	beq.n	800bd64 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800bcf8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bcfc:	d82c      	bhi.n	800bd58 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800bcfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd02:	d031      	beq.n	800bd68 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800bd04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd08:	d826      	bhi.n	800bd58 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800bd0a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bd0e:	d02d      	beq.n	800bd6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800bd10:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bd14:	d820      	bhi.n	800bd58 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800bd16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bd1a:	d012      	beq.n	800bd42 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800bd1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bd20:	d81a      	bhi.n	800bd58 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d024      	beq.n	800bd70 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800bd26:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bd2a:	d115      	bne.n	800bd58 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bd2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd30:	3308      	adds	r3, #8
 800bd32:	2101      	movs	r1, #1
 800bd34:	4618      	mov	r0, r3
 800bd36:	f001 f9ad 	bl	800d094 <RCCEx_PLL2_Config>
 800bd3a:	4603      	mov	r3, r0
 800bd3c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800bd40:	e017      	b.n	800bd72 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bd42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd46:	3328      	adds	r3, #40	@ 0x28
 800bd48:	2101      	movs	r1, #1
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	f001 fa54 	bl	800d1f8 <RCCEx_PLL3_Config>
 800bd50:	4603      	mov	r3, r0
 800bd52:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800bd56:	e00c      	b.n	800bd72 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800bd58:	2301      	movs	r3, #1
 800bd5a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800bd5e:	e008      	b.n	800bd72 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bd60:	bf00      	nop
 800bd62:	e006      	b.n	800bd72 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bd64:	bf00      	nop
 800bd66:	e004      	b.n	800bd72 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bd68:	bf00      	nop
 800bd6a:	e002      	b.n	800bd72 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bd6c:	bf00      	nop
 800bd6e:	e000      	b.n	800bd72 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bd70:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd72:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d10e      	bne.n	800bd98 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800bd7a:	4b06      	ldr	r3, [pc, #24]	@ (800bd94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bd7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bd7e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800bd82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd86:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800bd8a:	4a02      	ldr	r2, [pc, #8]	@ (800bd94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bd8c:	430b      	orrs	r3, r1
 800bd8e:	6593      	str	r3, [r2, #88]	@ 0x58
 800bd90:	e006      	b.n	800bda0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800bd92:	bf00      	nop
 800bd94:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd98:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bd9c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bda0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bda4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800bdac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800bdb6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800bdba:	460b      	mov	r3, r1
 800bdbc:	4313      	orrs	r3, r2
 800bdbe:	d037      	beq.n	800be30 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800bdc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bdc4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bdc6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bdca:	d00e      	beq.n	800bdea <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800bdcc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bdd0:	d816      	bhi.n	800be00 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d018      	beq.n	800be08 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800bdd6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bdda:	d111      	bne.n	800be00 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bddc:	4bc4      	ldr	r3, [pc, #784]	@ (800c0f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bdde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bde0:	4ac3      	ldr	r2, [pc, #780]	@ (800c0f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bde2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bde6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bde8:	e00f      	b.n	800be0a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bdea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bdee:	3308      	adds	r3, #8
 800bdf0:	2101      	movs	r1, #1
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	f001 f94e 	bl	800d094 <RCCEx_PLL2_Config>
 800bdf8:	4603      	mov	r3, r0
 800bdfa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bdfe:	e004      	b.n	800be0a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800be00:	2301      	movs	r3, #1
 800be02:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800be06:	e000      	b.n	800be0a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800be08:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be0a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d10a      	bne.n	800be28 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800be12:	4bb7      	ldr	r3, [pc, #732]	@ (800c0f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800be16:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800be1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be1e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800be20:	4ab3      	ldr	r2, [pc, #716]	@ (800c0f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be22:	430b      	orrs	r3, r1
 800be24:	6513      	str	r3, [r2, #80]	@ 0x50
 800be26:	e003      	b.n	800be30 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be28:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800be2c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800be30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be38:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800be3c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800be40:	2300      	movs	r3, #0
 800be42:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800be46:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800be4a:	460b      	mov	r3, r1
 800be4c:	4313      	orrs	r3, r2
 800be4e:	d039      	beq.n	800bec4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800be50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800be56:	2b03      	cmp	r3, #3
 800be58:	d81c      	bhi.n	800be94 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800be5a:	a201      	add	r2, pc, #4	@ (adr r2, 800be60 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800be5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be60:	0800be9d 	.word	0x0800be9d
 800be64:	0800be71 	.word	0x0800be71
 800be68:	0800be7f 	.word	0x0800be7f
 800be6c:	0800be9d 	.word	0x0800be9d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800be70:	4b9f      	ldr	r3, [pc, #636]	@ (800c0f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be74:	4a9e      	ldr	r2, [pc, #632]	@ (800c0f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800be7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800be7c:	e00f      	b.n	800be9e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800be7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be82:	3308      	adds	r3, #8
 800be84:	2102      	movs	r1, #2
 800be86:	4618      	mov	r0, r3
 800be88:	f001 f904 	bl	800d094 <RCCEx_PLL2_Config>
 800be8c:	4603      	mov	r3, r0
 800be8e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800be92:	e004      	b.n	800be9e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800be94:	2301      	movs	r3, #1
 800be96:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800be9a:	e000      	b.n	800be9e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800be9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be9e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d10a      	bne.n	800bebc <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800bea6:	4b92      	ldr	r3, [pc, #584]	@ (800c0f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bea8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800beaa:	f023 0103 	bic.w	r1, r3, #3
 800beae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800beb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800beb4:	4a8e      	ldr	r2, [pc, #568]	@ (800c0f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800beb6:	430b      	orrs	r3, r1
 800beb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800beba:	e003      	b.n	800bec4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bebc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bec0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bec4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800becc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800bed0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800bed4:	2300      	movs	r3, #0
 800bed6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800beda:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800bede:	460b      	mov	r3, r1
 800bee0:	4313      	orrs	r3, r2
 800bee2:	f000 8099 	beq.w	800c018 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bee6:	4b83      	ldr	r3, [pc, #524]	@ (800c0f4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	4a82      	ldr	r2, [pc, #520]	@ (800c0f4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800beec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bef0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bef2:	f7fa fd45 	bl	8006980 <HAL_GetTick>
 800bef6:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800befa:	e00b      	b.n	800bf14 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800befc:	f7fa fd40 	bl	8006980 <HAL_GetTick>
 800bf00:	4602      	mov	r2, r0
 800bf02:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800bf06:	1ad3      	subs	r3, r2, r3
 800bf08:	2b64      	cmp	r3, #100	@ 0x64
 800bf0a:	d903      	bls.n	800bf14 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800bf0c:	2303      	movs	r3, #3
 800bf0e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800bf12:	e005      	b.n	800bf20 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bf14:	4b77      	ldr	r3, [pc, #476]	@ (800c0f4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d0ed      	beq.n	800befc <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800bf20:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d173      	bne.n	800c010 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800bf28:	4b71      	ldr	r3, [pc, #452]	@ (800c0f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf2a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800bf2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bf30:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800bf34:	4053      	eors	r3, r2
 800bf36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d015      	beq.n	800bf6a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bf3e:	4b6c      	ldr	r3, [pc, #432]	@ (800c0f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bf42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bf46:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bf4a:	4b69      	ldr	r3, [pc, #420]	@ (800c0f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bf4e:	4a68      	ldr	r2, [pc, #416]	@ (800c0f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bf54:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bf56:	4b66      	ldr	r3, [pc, #408]	@ (800c0f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bf5a:	4a65      	ldr	r2, [pc, #404]	@ (800c0f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bf60:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800bf62:	4a63      	ldr	r2, [pc, #396]	@ (800c0f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bf68:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800bf6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bf6e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800bf72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bf76:	d118      	bne.n	800bfaa <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bf78:	f7fa fd02 	bl	8006980 <HAL_GetTick>
 800bf7c:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bf80:	e00d      	b.n	800bf9e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bf82:	f7fa fcfd 	bl	8006980 <HAL_GetTick>
 800bf86:	4602      	mov	r2, r0
 800bf88:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800bf8c:	1ad2      	subs	r2, r2, r3
 800bf8e:	f241 3388 	movw	r3, #5000	@ 0x1388
 800bf92:	429a      	cmp	r2, r3
 800bf94:	d903      	bls.n	800bf9e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800bf96:	2303      	movs	r3, #3
 800bf98:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 800bf9c:	e005      	b.n	800bfaa <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bf9e:	4b54      	ldr	r3, [pc, #336]	@ (800c0f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bfa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bfa2:	f003 0302 	and.w	r3, r3, #2
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d0eb      	beq.n	800bf82 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800bfaa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d129      	bne.n	800c006 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bfb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bfb6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800bfba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bfbe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bfc2:	d10e      	bne.n	800bfe2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800bfc4:	4b4a      	ldr	r3, [pc, #296]	@ (800c0f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bfc6:	691b      	ldr	r3, [r3, #16]
 800bfc8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800bfcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bfd0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800bfd4:	091a      	lsrs	r2, r3, #4
 800bfd6:	4b48      	ldr	r3, [pc, #288]	@ (800c0f8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800bfd8:	4013      	ands	r3, r2
 800bfda:	4a45      	ldr	r2, [pc, #276]	@ (800c0f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bfdc:	430b      	orrs	r3, r1
 800bfde:	6113      	str	r3, [r2, #16]
 800bfe0:	e005      	b.n	800bfee <HAL_RCCEx_PeriphCLKConfig+0x852>
 800bfe2:	4b43      	ldr	r3, [pc, #268]	@ (800c0f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bfe4:	691b      	ldr	r3, [r3, #16]
 800bfe6:	4a42      	ldr	r2, [pc, #264]	@ (800c0f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bfe8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800bfec:	6113      	str	r3, [r2, #16]
 800bfee:	4b40      	ldr	r3, [pc, #256]	@ (800c0f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bff0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800bff2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bff6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800bffa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bffe:	4a3c      	ldr	r2, [pc, #240]	@ (800c0f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c000:	430b      	orrs	r3, r1
 800c002:	6713      	str	r3, [r2, #112]	@ 0x70
 800c004:	e008      	b.n	800c018 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c006:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c00a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 800c00e:	e003      	b.n	800c018 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c010:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c014:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c018:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c01c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c020:	f002 0301 	and.w	r3, r2, #1
 800c024:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c028:	2300      	movs	r3, #0
 800c02a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c02e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800c032:	460b      	mov	r3, r1
 800c034:	4313      	orrs	r3, r2
 800c036:	f000 8090 	beq.w	800c15a <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800c03a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c03e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c042:	2b28      	cmp	r3, #40	@ 0x28
 800c044:	d870      	bhi.n	800c128 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800c046:	a201      	add	r2, pc, #4	@ (adr r2, 800c04c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800c048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c04c:	0800c131 	.word	0x0800c131
 800c050:	0800c129 	.word	0x0800c129
 800c054:	0800c129 	.word	0x0800c129
 800c058:	0800c129 	.word	0x0800c129
 800c05c:	0800c129 	.word	0x0800c129
 800c060:	0800c129 	.word	0x0800c129
 800c064:	0800c129 	.word	0x0800c129
 800c068:	0800c129 	.word	0x0800c129
 800c06c:	0800c0fd 	.word	0x0800c0fd
 800c070:	0800c129 	.word	0x0800c129
 800c074:	0800c129 	.word	0x0800c129
 800c078:	0800c129 	.word	0x0800c129
 800c07c:	0800c129 	.word	0x0800c129
 800c080:	0800c129 	.word	0x0800c129
 800c084:	0800c129 	.word	0x0800c129
 800c088:	0800c129 	.word	0x0800c129
 800c08c:	0800c113 	.word	0x0800c113
 800c090:	0800c129 	.word	0x0800c129
 800c094:	0800c129 	.word	0x0800c129
 800c098:	0800c129 	.word	0x0800c129
 800c09c:	0800c129 	.word	0x0800c129
 800c0a0:	0800c129 	.word	0x0800c129
 800c0a4:	0800c129 	.word	0x0800c129
 800c0a8:	0800c129 	.word	0x0800c129
 800c0ac:	0800c131 	.word	0x0800c131
 800c0b0:	0800c129 	.word	0x0800c129
 800c0b4:	0800c129 	.word	0x0800c129
 800c0b8:	0800c129 	.word	0x0800c129
 800c0bc:	0800c129 	.word	0x0800c129
 800c0c0:	0800c129 	.word	0x0800c129
 800c0c4:	0800c129 	.word	0x0800c129
 800c0c8:	0800c129 	.word	0x0800c129
 800c0cc:	0800c131 	.word	0x0800c131
 800c0d0:	0800c129 	.word	0x0800c129
 800c0d4:	0800c129 	.word	0x0800c129
 800c0d8:	0800c129 	.word	0x0800c129
 800c0dc:	0800c129 	.word	0x0800c129
 800c0e0:	0800c129 	.word	0x0800c129
 800c0e4:	0800c129 	.word	0x0800c129
 800c0e8:	0800c129 	.word	0x0800c129
 800c0ec:	0800c131 	.word	0x0800c131
 800c0f0:	58024400 	.word	0x58024400
 800c0f4:	58024800 	.word	0x58024800
 800c0f8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c0fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c100:	3308      	adds	r3, #8
 800c102:	2101      	movs	r1, #1
 800c104:	4618      	mov	r0, r3
 800c106:	f000 ffc5 	bl	800d094 <RCCEx_PLL2_Config>
 800c10a:	4603      	mov	r3, r0
 800c10c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c110:	e00f      	b.n	800c132 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c112:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c116:	3328      	adds	r3, #40	@ 0x28
 800c118:	2101      	movs	r1, #1
 800c11a:	4618      	mov	r0, r3
 800c11c:	f001 f86c 	bl	800d1f8 <RCCEx_PLL3_Config>
 800c120:	4603      	mov	r3, r0
 800c122:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c126:	e004      	b.n	800c132 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c128:	2301      	movs	r3, #1
 800c12a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c12e:	e000      	b.n	800c132 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800c130:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c132:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c136:	2b00      	cmp	r3, #0
 800c138:	d10b      	bne.n	800c152 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800c13a:	4bc0      	ldr	r3, [pc, #768]	@ (800c43c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c13c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c13e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800c142:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c146:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c14a:	4abc      	ldr	r2, [pc, #752]	@ (800c43c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c14c:	430b      	orrs	r3, r1
 800c14e:	6553      	str	r3, [r2, #84]	@ 0x54
 800c150:	e003      	b.n	800c15a <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c152:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c156:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c15a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c162:	f002 0302 	and.w	r3, r2, #2
 800c166:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c16a:	2300      	movs	r3, #0
 800c16c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800c170:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800c174:	460b      	mov	r3, r1
 800c176:	4313      	orrs	r3, r2
 800c178:	d043      	beq.n	800c202 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800c17a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c17e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c182:	2b05      	cmp	r3, #5
 800c184:	d824      	bhi.n	800c1d0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800c186:	a201      	add	r2, pc, #4	@ (adr r2, 800c18c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800c188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c18c:	0800c1d9 	.word	0x0800c1d9
 800c190:	0800c1a5 	.word	0x0800c1a5
 800c194:	0800c1bb 	.word	0x0800c1bb
 800c198:	0800c1d9 	.word	0x0800c1d9
 800c19c:	0800c1d9 	.word	0x0800c1d9
 800c1a0:	0800c1d9 	.word	0x0800c1d9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c1a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c1a8:	3308      	adds	r3, #8
 800c1aa:	2101      	movs	r1, #1
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	f000 ff71 	bl	800d094 <RCCEx_PLL2_Config>
 800c1b2:	4603      	mov	r3, r0
 800c1b4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c1b8:	e00f      	b.n	800c1da <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c1ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c1be:	3328      	adds	r3, #40	@ 0x28
 800c1c0:	2101      	movs	r1, #1
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	f001 f818 	bl	800d1f8 <RCCEx_PLL3_Config>
 800c1c8:	4603      	mov	r3, r0
 800c1ca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c1ce:	e004      	b.n	800c1da <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c1d0:	2301      	movs	r3, #1
 800c1d2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c1d6:	e000      	b.n	800c1da <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 800c1d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c1da:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d10b      	bne.n	800c1fa <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c1e2:	4b96      	ldr	r3, [pc, #600]	@ (800c43c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c1e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c1e6:	f023 0107 	bic.w	r1, r3, #7
 800c1ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c1ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c1f2:	4a92      	ldr	r2, [pc, #584]	@ (800c43c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c1f4:	430b      	orrs	r3, r1
 800c1f6:	6553      	str	r3, [r2, #84]	@ 0x54
 800c1f8:	e003      	b.n	800c202 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1fa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c1fe:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c202:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c20a:	f002 0304 	and.w	r3, r2, #4
 800c20e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c212:	2300      	movs	r3, #0
 800c214:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c218:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800c21c:	460b      	mov	r3, r1
 800c21e:	4313      	orrs	r3, r2
 800c220:	d043      	beq.n	800c2aa <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800c222:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c226:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c22a:	2b05      	cmp	r3, #5
 800c22c:	d824      	bhi.n	800c278 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800c22e:	a201      	add	r2, pc, #4	@ (adr r2, 800c234 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 800c230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c234:	0800c281 	.word	0x0800c281
 800c238:	0800c24d 	.word	0x0800c24d
 800c23c:	0800c263 	.word	0x0800c263
 800c240:	0800c281 	.word	0x0800c281
 800c244:	0800c281 	.word	0x0800c281
 800c248:	0800c281 	.word	0x0800c281
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c24c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c250:	3308      	adds	r3, #8
 800c252:	2101      	movs	r1, #1
 800c254:	4618      	mov	r0, r3
 800c256:	f000 ff1d 	bl	800d094 <RCCEx_PLL2_Config>
 800c25a:	4603      	mov	r3, r0
 800c25c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c260:	e00f      	b.n	800c282 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c262:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c266:	3328      	adds	r3, #40	@ 0x28
 800c268:	2101      	movs	r1, #1
 800c26a:	4618      	mov	r0, r3
 800c26c:	f000 ffc4 	bl	800d1f8 <RCCEx_PLL3_Config>
 800c270:	4603      	mov	r3, r0
 800c272:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c276:	e004      	b.n	800c282 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c278:	2301      	movs	r3, #1
 800c27a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c27e:	e000      	b.n	800c282 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 800c280:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c282:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c286:	2b00      	cmp	r3, #0
 800c288:	d10b      	bne.n	800c2a2 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c28a:	4b6c      	ldr	r3, [pc, #432]	@ (800c43c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c28c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c28e:	f023 0107 	bic.w	r1, r3, #7
 800c292:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c296:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c29a:	4a68      	ldr	r2, [pc, #416]	@ (800c43c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c29c:	430b      	orrs	r3, r1
 800c29e:	6593      	str	r3, [r2, #88]	@ 0x58
 800c2a0:	e003      	b.n	800c2aa <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2a2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c2a6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c2aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c2ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2b2:	f002 0320 	and.w	r3, r2, #32
 800c2b6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c2c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800c2c4:	460b      	mov	r3, r1
 800c2c6:	4313      	orrs	r3, r2
 800c2c8:	d055      	beq.n	800c376 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800c2ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c2ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c2d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c2d6:	d033      	beq.n	800c340 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800c2d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c2dc:	d82c      	bhi.n	800c338 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800c2de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c2e2:	d02f      	beq.n	800c344 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800c2e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c2e8:	d826      	bhi.n	800c338 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800c2ea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c2ee:	d02b      	beq.n	800c348 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800c2f0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c2f4:	d820      	bhi.n	800c338 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800c2f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c2fa:	d012      	beq.n	800c322 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800c2fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c300:	d81a      	bhi.n	800c338 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800c302:	2b00      	cmp	r3, #0
 800c304:	d022      	beq.n	800c34c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800c306:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c30a:	d115      	bne.n	800c338 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c30c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c310:	3308      	adds	r3, #8
 800c312:	2100      	movs	r1, #0
 800c314:	4618      	mov	r0, r3
 800c316:	f000 febd 	bl	800d094 <RCCEx_PLL2_Config>
 800c31a:	4603      	mov	r3, r0
 800c31c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c320:	e015      	b.n	800c34e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c322:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c326:	3328      	adds	r3, #40	@ 0x28
 800c328:	2102      	movs	r1, #2
 800c32a:	4618      	mov	r0, r3
 800c32c:	f000 ff64 	bl	800d1f8 <RCCEx_PLL3_Config>
 800c330:	4603      	mov	r3, r0
 800c332:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c336:	e00a      	b.n	800c34e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c338:	2301      	movs	r3, #1
 800c33a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c33e:	e006      	b.n	800c34e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c340:	bf00      	nop
 800c342:	e004      	b.n	800c34e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c344:	bf00      	nop
 800c346:	e002      	b.n	800c34e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c348:	bf00      	nop
 800c34a:	e000      	b.n	800c34e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c34c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c34e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c352:	2b00      	cmp	r3, #0
 800c354:	d10b      	bne.n	800c36e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c356:	4b39      	ldr	r3, [pc, #228]	@ (800c43c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c358:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c35a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800c35e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c362:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c366:	4a35      	ldr	r2, [pc, #212]	@ (800c43c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c368:	430b      	orrs	r3, r1
 800c36a:	6553      	str	r3, [r2, #84]	@ 0x54
 800c36c:	e003      	b.n	800c376 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c36e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c372:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c376:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c37e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800c382:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c386:	2300      	movs	r3, #0
 800c388:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c38c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800c390:	460b      	mov	r3, r1
 800c392:	4313      	orrs	r3, r2
 800c394:	d058      	beq.n	800c448 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c396:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c39a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c39e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800c3a2:	d033      	beq.n	800c40c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800c3a4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800c3a8:	d82c      	bhi.n	800c404 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c3aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c3ae:	d02f      	beq.n	800c410 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800c3b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c3b4:	d826      	bhi.n	800c404 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c3b6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c3ba:	d02b      	beq.n	800c414 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800c3bc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c3c0:	d820      	bhi.n	800c404 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c3c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c3c6:	d012      	beq.n	800c3ee <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800c3c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c3cc:	d81a      	bhi.n	800c404 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d022      	beq.n	800c418 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800c3d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c3d6:	d115      	bne.n	800c404 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c3d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c3dc:	3308      	adds	r3, #8
 800c3de:	2100      	movs	r1, #0
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	f000 fe57 	bl	800d094 <RCCEx_PLL2_Config>
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c3ec:	e015      	b.n	800c41a <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c3ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c3f2:	3328      	adds	r3, #40	@ 0x28
 800c3f4:	2102      	movs	r1, #2
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	f000 fefe 	bl	800d1f8 <RCCEx_PLL3_Config>
 800c3fc:	4603      	mov	r3, r0
 800c3fe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c402:	e00a      	b.n	800c41a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c404:	2301      	movs	r3, #1
 800c406:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c40a:	e006      	b.n	800c41a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c40c:	bf00      	nop
 800c40e:	e004      	b.n	800c41a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c410:	bf00      	nop
 800c412:	e002      	b.n	800c41a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c414:	bf00      	nop
 800c416:	e000      	b.n	800c41a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c418:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c41a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d10e      	bne.n	800c440 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c422:	4b06      	ldr	r3, [pc, #24]	@ (800c43c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c424:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c426:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800c42a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c42e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c432:	4a02      	ldr	r2, [pc, #8]	@ (800c43c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c434:	430b      	orrs	r3, r1
 800c436:	6593      	str	r3, [r2, #88]	@ 0x58
 800c438:	e006      	b.n	800c448 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800c43a:	bf00      	nop
 800c43c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c440:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c444:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c448:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c44c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c450:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800c454:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c458:	2300      	movs	r3, #0
 800c45a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c45e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800c462:	460b      	mov	r3, r1
 800c464:	4313      	orrs	r3, r2
 800c466:	d055      	beq.n	800c514 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c468:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c46c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800c470:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800c474:	d033      	beq.n	800c4de <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800c476:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800c47a:	d82c      	bhi.n	800c4d6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c47c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c480:	d02f      	beq.n	800c4e2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800c482:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c486:	d826      	bhi.n	800c4d6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c488:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800c48c:	d02b      	beq.n	800c4e6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800c48e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800c492:	d820      	bhi.n	800c4d6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c494:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c498:	d012      	beq.n	800c4c0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800c49a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c49e:	d81a      	bhi.n	800c4d6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d022      	beq.n	800c4ea <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800c4a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c4a8:	d115      	bne.n	800c4d6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c4aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c4ae:	3308      	adds	r3, #8
 800c4b0:	2100      	movs	r1, #0
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	f000 fdee 	bl	800d094 <RCCEx_PLL2_Config>
 800c4b8:	4603      	mov	r3, r0
 800c4ba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c4be:	e015      	b.n	800c4ec <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c4c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c4c4:	3328      	adds	r3, #40	@ 0x28
 800c4c6:	2102      	movs	r1, #2
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	f000 fe95 	bl	800d1f8 <RCCEx_PLL3_Config>
 800c4ce:	4603      	mov	r3, r0
 800c4d0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c4d4:	e00a      	b.n	800c4ec <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c4d6:	2301      	movs	r3, #1
 800c4d8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c4dc:	e006      	b.n	800c4ec <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c4de:	bf00      	nop
 800c4e0:	e004      	b.n	800c4ec <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c4e2:	bf00      	nop
 800c4e4:	e002      	b.n	800c4ec <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c4e6:	bf00      	nop
 800c4e8:	e000      	b.n	800c4ec <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c4ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c4ec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d10b      	bne.n	800c50c <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c4f4:	4ba1      	ldr	r3, [pc, #644]	@ (800c77c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c4f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c4f8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800c4fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c500:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800c504:	4a9d      	ldr	r2, [pc, #628]	@ (800c77c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c506:	430b      	orrs	r3, r1
 800c508:	6593      	str	r3, [r2, #88]	@ 0x58
 800c50a:	e003      	b.n	800c514 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c50c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c510:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800c514:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c51c:	f002 0308 	and.w	r3, r2, #8
 800c520:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c524:	2300      	movs	r3, #0
 800c526:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c52a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800c52e:	460b      	mov	r3, r1
 800c530:	4313      	orrs	r3, r2
 800c532:	d01e      	beq.n	800c572 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800c534:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c538:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c53c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c540:	d10c      	bne.n	800c55c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c542:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c546:	3328      	adds	r3, #40	@ 0x28
 800c548:	2102      	movs	r1, #2
 800c54a:	4618      	mov	r0, r3
 800c54c:	f000 fe54 	bl	800d1f8 <RCCEx_PLL3_Config>
 800c550:	4603      	mov	r3, r0
 800c552:	2b00      	cmp	r3, #0
 800c554:	d002      	beq.n	800c55c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800c556:	2301      	movs	r3, #1
 800c558:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c55c:	4b87      	ldr	r3, [pc, #540]	@ (800c77c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c55e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c560:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c564:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c568:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c56c:	4a83      	ldr	r2, [pc, #524]	@ (800c77c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c56e:	430b      	orrs	r3, r1
 800c570:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c572:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c57a:	f002 0310 	and.w	r3, r2, #16
 800c57e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c582:	2300      	movs	r3, #0
 800c584:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c588:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800c58c:	460b      	mov	r3, r1
 800c58e:	4313      	orrs	r3, r2
 800c590:	d01e      	beq.n	800c5d0 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c592:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c596:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c59a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c59e:	d10c      	bne.n	800c5ba <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c5a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c5a4:	3328      	adds	r3, #40	@ 0x28
 800c5a6:	2102      	movs	r1, #2
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	f000 fe25 	bl	800d1f8 <RCCEx_PLL3_Config>
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d002      	beq.n	800c5ba <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800c5b4:	2301      	movs	r3, #1
 800c5b6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c5ba:	4b70      	ldr	r3, [pc, #448]	@ (800c77c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c5bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c5be:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800c5c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c5c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c5ca:	4a6c      	ldr	r2, [pc, #432]	@ (800c77c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c5cc:	430b      	orrs	r3, r1
 800c5ce:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c5d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5d8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800c5dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c5e6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800c5ea:	460b      	mov	r3, r1
 800c5ec:	4313      	orrs	r3, r2
 800c5ee:	d03e      	beq.n	800c66e <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800c5f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c5f4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800c5f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c5fc:	d022      	beq.n	800c644 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800c5fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c602:	d81b      	bhi.n	800c63c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800c604:	2b00      	cmp	r3, #0
 800c606:	d003      	beq.n	800c610 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800c608:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c60c:	d00b      	beq.n	800c626 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800c60e:	e015      	b.n	800c63c <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c610:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c614:	3308      	adds	r3, #8
 800c616:	2100      	movs	r1, #0
 800c618:	4618      	mov	r0, r3
 800c61a:	f000 fd3b 	bl	800d094 <RCCEx_PLL2_Config>
 800c61e:	4603      	mov	r3, r0
 800c620:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c624:	e00f      	b.n	800c646 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c626:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c62a:	3328      	adds	r3, #40	@ 0x28
 800c62c:	2102      	movs	r1, #2
 800c62e:	4618      	mov	r0, r3
 800c630:	f000 fde2 	bl	800d1f8 <RCCEx_PLL3_Config>
 800c634:	4603      	mov	r3, r0
 800c636:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c63a:	e004      	b.n	800c646 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c63c:	2301      	movs	r3, #1
 800c63e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c642:	e000      	b.n	800c646 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800c644:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c646:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d10b      	bne.n	800c666 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c64e:	4b4b      	ldr	r3, [pc, #300]	@ (800c77c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c650:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c652:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800c656:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c65a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800c65e:	4a47      	ldr	r2, [pc, #284]	@ (800c77c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c660:	430b      	orrs	r3, r1
 800c662:	6593      	str	r3, [r2, #88]	@ 0x58
 800c664:	e003      	b.n	800c66e <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c666:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c66a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c66e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c672:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c676:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800c67a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c67c:	2300      	movs	r3, #0
 800c67e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c680:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800c684:	460b      	mov	r3, r1
 800c686:	4313      	orrs	r3, r2
 800c688:	d03b      	beq.n	800c702 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c68a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c68e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c692:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c696:	d01f      	beq.n	800c6d8 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800c698:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c69c:	d818      	bhi.n	800c6d0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800c69e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c6a2:	d003      	beq.n	800c6ac <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800c6a4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c6a8:	d007      	beq.n	800c6ba <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800c6aa:	e011      	b.n	800c6d0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c6ac:	4b33      	ldr	r3, [pc, #204]	@ (800c77c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c6ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6b0:	4a32      	ldr	r2, [pc, #200]	@ (800c77c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c6b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c6b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800c6b8:	e00f      	b.n	800c6da <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c6ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c6be:	3328      	adds	r3, #40	@ 0x28
 800c6c0:	2101      	movs	r1, #1
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	f000 fd98 	bl	800d1f8 <RCCEx_PLL3_Config>
 800c6c8:	4603      	mov	r3, r0
 800c6ca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800c6ce:	e004      	b.n	800c6da <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c6d0:	2301      	movs	r3, #1
 800c6d2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c6d6:	e000      	b.n	800c6da <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800c6d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c6da:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d10b      	bne.n	800c6fa <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c6e2:	4b26      	ldr	r3, [pc, #152]	@ (800c77c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c6e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c6e6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800c6ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c6ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c6f2:	4a22      	ldr	r2, [pc, #136]	@ (800c77c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c6f4:	430b      	orrs	r3, r1
 800c6f6:	6553      	str	r3, [r2, #84]	@ 0x54
 800c6f8:	e003      	b.n	800c702 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c6fa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c6fe:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c702:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c70a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800c70e:	673b      	str	r3, [r7, #112]	@ 0x70
 800c710:	2300      	movs	r3, #0
 800c712:	677b      	str	r3, [r7, #116]	@ 0x74
 800c714:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800c718:	460b      	mov	r3, r1
 800c71a:	4313      	orrs	r3, r2
 800c71c:	d034      	beq.n	800c788 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800c71e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c722:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c724:	2b00      	cmp	r3, #0
 800c726:	d003      	beq.n	800c730 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800c728:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c72c:	d007      	beq.n	800c73e <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800c72e:	e011      	b.n	800c754 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c730:	4b12      	ldr	r3, [pc, #72]	@ (800c77c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c734:	4a11      	ldr	r2, [pc, #68]	@ (800c77c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c736:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c73a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c73c:	e00e      	b.n	800c75c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c73e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c742:	3308      	adds	r3, #8
 800c744:	2102      	movs	r1, #2
 800c746:	4618      	mov	r0, r3
 800c748:	f000 fca4 	bl	800d094 <RCCEx_PLL2_Config>
 800c74c:	4603      	mov	r3, r0
 800c74e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c752:	e003      	b.n	800c75c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800c754:	2301      	movs	r3, #1
 800c756:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c75a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c75c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c760:	2b00      	cmp	r3, #0
 800c762:	d10d      	bne.n	800c780 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c764:	4b05      	ldr	r3, [pc, #20]	@ (800c77c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c766:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c768:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c76c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c770:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c772:	4a02      	ldr	r2, [pc, #8]	@ (800c77c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c774:	430b      	orrs	r3, r1
 800c776:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c778:	e006      	b.n	800c788 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800c77a:	bf00      	nop
 800c77c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c780:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c784:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c788:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c78c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c790:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800c794:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c796:	2300      	movs	r3, #0
 800c798:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c79a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800c79e:	460b      	mov	r3, r1
 800c7a0:	4313      	orrs	r3, r2
 800c7a2:	d00c      	beq.n	800c7be <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c7a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c7a8:	3328      	adds	r3, #40	@ 0x28
 800c7aa:	2102      	movs	r1, #2
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	f000 fd23 	bl	800d1f8 <RCCEx_PLL3_Config>
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d002      	beq.n	800c7be <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800c7b8:	2301      	movs	r3, #1
 800c7ba:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c7be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c7c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7c6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800c7ca:	663b      	str	r3, [r7, #96]	@ 0x60
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	667b      	str	r3, [r7, #100]	@ 0x64
 800c7d0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800c7d4:	460b      	mov	r3, r1
 800c7d6:	4313      	orrs	r3, r2
 800c7d8:	d038      	beq.n	800c84c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c7da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c7de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c7e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c7e6:	d018      	beq.n	800c81a <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800c7e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c7ec:	d811      	bhi.n	800c812 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800c7ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c7f2:	d014      	beq.n	800c81e <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800c7f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c7f8:	d80b      	bhi.n	800c812 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d011      	beq.n	800c822 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800c7fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c802:	d106      	bne.n	800c812 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c804:	4bc3      	ldr	r3, [pc, #780]	@ (800cb14 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c808:	4ac2      	ldr	r2, [pc, #776]	@ (800cb14 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c80a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c80e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c810:	e008      	b.n	800c824 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c812:	2301      	movs	r3, #1
 800c814:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c818:	e004      	b.n	800c824 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800c81a:	bf00      	nop
 800c81c:	e002      	b.n	800c824 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800c81e:	bf00      	nop
 800c820:	e000      	b.n	800c824 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800c822:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c824:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d10b      	bne.n	800c844 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c82c:	4bb9      	ldr	r3, [pc, #740]	@ (800cb14 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c82e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c830:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800c834:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c838:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c83c:	4ab5      	ldr	r2, [pc, #724]	@ (800cb14 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c83e:	430b      	orrs	r3, r1
 800c840:	6553      	str	r3, [r2, #84]	@ 0x54
 800c842:	e003      	b.n	800c84c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c844:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c848:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c84c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c850:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c854:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800c858:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c85a:	2300      	movs	r3, #0
 800c85c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c85e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800c862:	460b      	mov	r3, r1
 800c864:	4313      	orrs	r3, r2
 800c866:	d009      	beq.n	800c87c <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c868:	4baa      	ldr	r3, [pc, #680]	@ (800cb14 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c86a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c86c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c870:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c874:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c876:	4aa7      	ldr	r2, [pc, #668]	@ (800cb14 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c878:	430b      	orrs	r3, r1
 800c87a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c87c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c880:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c884:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800c888:	653b      	str	r3, [r7, #80]	@ 0x50
 800c88a:	2300      	movs	r3, #0
 800c88c:	657b      	str	r3, [r7, #84]	@ 0x54
 800c88e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800c892:	460b      	mov	r3, r1
 800c894:	4313      	orrs	r3, r2
 800c896:	d009      	beq.n	800c8ac <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c898:	4b9e      	ldr	r3, [pc, #632]	@ (800cb14 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c89a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c89c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800c8a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c8a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c8a6:	4a9b      	ldr	r2, [pc, #620]	@ (800cb14 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c8a8:	430b      	orrs	r3, r1
 800c8aa:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800c8ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c8b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8b4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800c8b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c8be:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800c8c2:	460b      	mov	r3, r1
 800c8c4:	4313      	orrs	r3, r2
 800c8c6:	d009      	beq.n	800c8dc <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800c8c8:	4b92      	ldr	r3, [pc, #584]	@ (800cb14 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c8ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c8cc:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 800c8d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c8d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c8d6:	4a8f      	ldr	r2, [pc, #572]	@ (800cb14 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c8d8:	430b      	orrs	r3, r1
 800c8da:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c8dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c8e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8e4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800c8e8:	643b      	str	r3, [r7, #64]	@ 0x40
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	647b      	str	r3, [r7, #68]	@ 0x44
 800c8ee:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800c8f2:	460b      	mov	r3, r1
 800c8f4:	4313      	orrs	r3, r2
 800c8f6:	d00e      	beq.n	800c916 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c8f8:	4b86      	ldr	r3, [pc, #536]	@ (800cb14 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c8fa:	691b      	ldr	r3, [r3, #16]
 800c8fc:	4a85      	ldr	r2, [pc, #532]	@ (800cb14 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c8fe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800c902:	6113      	str	r3, [r2, #16]
 800c904:	4b83      	ldr	r3, [pc, #524]	@ (800cb14 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c906:	6919      	ldr	r1, [r3, #16]
 800c908:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c90c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800c910:	4a80      	ldr	r2, [pc, #512]	@ (800cb14 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c912:	430b      	orrs	r3, r1
 800c914:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c916:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c91a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c91e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800c922:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c924:	2300      	movs	r3, #0
 800c926:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c928:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800c92c:	460b      	mov	r3, r1
 800c92e:	4313      	orrs	r3, r2
 800c930:	d009      	beq.n	800c946 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c932:	4b78      	ldr	r3, [pc, #480]	@ (800cb14 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c934:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c936:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800c93a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c93e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c940:	4a74      	ldr	r2, [pc, #464]	@ (800cb14 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c942:	430b      	orrs	r3, r1
 800c944:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c946:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c94a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c94e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800c952:	633b      	str	r3, [r7, #48]	@ 0x30
 800c954:	2300      	movs	r3, #0
 800c956:	637b      	str	r3, [r7, #52]	@ 0x34
 800c958:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800c95c:	460b      	mov	r3, r1
 800c95e:	4313      	orrs	r3, r2
 800c960:	d00a      	beq.n	800c978 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c962:	4b6c      	ldr	r3, [pc, #432]	@ (800cb14 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c964:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c966:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800c96a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c96e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c972:	4a68      	ldr	r2, [pc, #416]	@ (800cb14 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c974:	430b      	orrs	r3, r1
 800c976:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c978:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c97c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c980:	2100      	movs	r1, #0
 800c982:	62b9      	str	r1, [r7, #40]	@ 0x28
 800c984:	f003 0301 	and.w	r3, r3, #1
 800c988:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c98a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800c98e:	460b      	mov	r3, r1
 800c990:	4313      	orrs	r3, r2
 800c992:	d011      	beq.n	800c9b8 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c994:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c998:	3308      	adds	r3, #8
 800c99a:	2100      	movs	r1, #0
 800c99c:	4618      	mov	r0, r3
 800c99e:	f000 fb79 	bl	800d094 <RCCEx_PLL2_Config>
 800c9a2:	4603      	mov	r3, r0
 800c9a4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800c9a8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d003      	beq.n	800c9b8 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c9b0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c9b4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c9b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c9bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9c0:	2100      	movs	r1, #0
 800c9c2:	6239      	str	r1, [r7, #32]
 800c9c4:	f003 0302 	and.w	r3, r3, #2
 800c9c8:	627b      	str	r3, [r7, #36]	@ 0x24
 800c9ca:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c9ce:	460b      	mov	r3, r1
 800c9d0:	4313      	orrs	r3, r2
 800c9d2:	d011      	beq.n	800c9f8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c9d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c9d8:	3308      	adds	r3, #8
 800c9da:	2101      	movs	r1, #1
 800c9dc:	4618      	mov	r0, r3
 800c9de:	f000 fb59 	bl	800d094 <RCCEx_PLL2_Config>
 800c9e2:	4603      	mov	r3, r0
 800c9e4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800c9e8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d003      	beq.n	800c9f8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c9f0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c9f4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c9f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c9fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca00:	2100      	movs	r1, #0
 800ca02:	61b9      	str	r1, [r7, #24]
 800ca04:	f003 0304 	and.w	r3, r3, #4
 800ca08:	61fb      	str	r3, [r7, #28]
 800ca0a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800ca0e:	460b      	mov	r3, r1
 800ca10:	4313      	orrs	r3, r2
 800ca12:	d011      	beq.n	800ca38 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ca14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ca18:	3308      	adds	r3, #8
 800ca1a:	2102      	movs	r1, #2
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	f000 fb39 	bl	800d094 <RCCEx_PLL2_Config>
 800ca22:	4603      	mov	r3, r0
 800ca24:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800ca28:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d003      	beq.n	800ca38 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca30:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ca34:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800ca38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ca3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca40:	2100      	movs	r1, #0
 800ca42:	6139      	str	r1, [r7, #16]
 800ca44:	f003 0308 	and.w	r3, r3, #8
 800ca48:	617b      	str	r3, [r7, #20]
 800ca4a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800ca4e:	460b      	mov	r3, r1
 800ca50:	4313      	orrs	r3, r2
 800ca52:	d011      	beq.n	800ca78 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ca54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ca58:	3328      	adds	r3, #40	@ 0x28
 800ca5a:	2100      	movs	r1, #0
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	f000 fbcb 	bl	800d1f8 <RCCEx_PLL3_Config>
 800ca62:	4603      	mov	r3, r0
 800ca64:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 800ca68:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d003      	beq.n	800ca78 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca70:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ca74:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800ca78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ca7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca80:	2100      	movs	r1, #0
 800ca82:	60b9      	str	r1, [r7, #8]
 800ca84:	f003 0310 	and.w	r3, r3, #16
 800ca88:	60fb      	str	r3, [r7, #12]
 800ca8a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800ca8e:	460b      	mov	r3, r1
 800ca90:	4313      	orrs	r3, r2
 800ca92:	d011      	beq.n	800cab8 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ca94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ca98:	3328      	adds	r3, #40	@ 0x28
 800ca9a:	2101      	movs	r1, #1
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	f000 fbab 	bl	800d1f8 <RCCEx_PLL3_Config>
 800caa2:	4603      	mov	r3, r0
 800caa4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800caa8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800caac:	2b00      	cmp	r3, #0
 800caae:	d003      	beq.n	800cab8 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cab0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800cab4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800cab8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800cabc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cac0:	2100      	movs	r1, #0
 800cac2:	6039      	str	r1, [r7, #0]
 800cac4:	f003 0320 	and.w	r3, r3, #32
 800cac8:	607b      	str	r3, [r7, #4]
 800caca:	e9d7 1200 	ldrd	r1, r2, [r7]
 800cace:	460b      	mov	r3, r1
 800cad0:	4313      	orrs	r3, r2
 800cad2:	d011      	beq.n	800caf8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800cad4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800cad8:	3328      	adds	r3, #40	@ 0x28
 800cada:	2102      	movs	r1, #2
 800cadc:	4618      	mov	r0, r3
 800cade:	f000 fb8b 	bl	800d1f8 <RCCEx_PLL3_Config>
 800cae2:	4603      	mov	r3, r0
 800cae4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800cae8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800caec:	2b00      	cmp	r3, #0
 800caee:	d003      	beq.n	800caf8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800caf0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800caf4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 800caf8:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d101      	bne.n	800cb04 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800cb00:	2300      	movs	r3, #0
 800cb02:	e000      	b.n	800cb06 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800cb04:	2301      	movs	r3, #1
}
 800cb06:	4618      	mov	r0, r3
 800cb08:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cb12:	bf00      	nop
 800cb14:	58024400 	.word	0x58024400

0800cb18 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800cb1c:	f7fe fda0 	bl	800b660 <HAL_RCC_GetHCLKFreq>
 800cb20:	4602      	mov	r2, r0
 800cb22:	4b06      	ldr	r3, [pc, #24]	@ (800cb3c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800cb24:	6a1b      	ldr	r3, [r3, #32]
 800cb26:	091b      	lsrs	r3, r3, #4
 800cb28:	f003 0307 	and.w	r3, r3, #7
 800cb2c:	4904      	ldr	r1, [pc, #16]	@ (800cb40 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800cb2e:	5ccb      	ldrb	r3, [r1, r3]
 800cb30:	f003 031f 	and.w	r3, r3, #31
 800cb34:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800cb38:	4618      	mov	r0, r3
 800cb3a:	bd80      	pop	{r7, pc}
 800cb3c:	58024400 	.word	0x58024400
 800cb40:	08019ec4 	.word	0x08019ec4

0800cb44 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800cb44:	b480      	push	{r7}
 800cb46:	b089      	sub	sp, #36	@ 0x24
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cb4c:	4ba1      	ldr	r3, [pc, #644]	@ (800cdd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb50:	f003 0303 	and.w	r3, r3, #3
 800cb54:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800cb56:	4b9f      	ldr	r3, [pc, #636]	@ (800cdd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb5a:	0b1b      	lsrs	r3, r3, #12
 800cb5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cb60:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800cb62:	4b9c      	ldr	r3, [pc, #624]	@ (800cdd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb66:	091b      	lsrs	r3, r3, #4
 800cb68:	f003 0301 	and.w	r3, r3, #1
 800cb6c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800cb6e:	4b99      	ldr	r3, [pc, #612]	@ (800cdd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cb72:	08db      	lsrs	r3, r3, #3
 800cb74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cb78:	693a      	ldr	r2, [r7, #16]
 800cb7a:	fb02 f303 	mul.w	r3, r2, r3
 800cb7e:	ee07 3a90 	vmov	s15, r3
 800cb82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb86:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800cb8a:	697b      	ldr	r3, [r7, #20]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	f000 8111 	beq.w	800cdb4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800cb92:	69bb      	ldr	r3, [r7, #24]
 800cb94:	2b02      	cmp	r3, #2
 800cb96:	f000 8083 	beq.w	800cca0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800cb9a:	69bb      	ldr	r3, [r7, #24]
 800cb9c:	2b02      	cmp	r3, #2
 800cb9e:	f200 80a1 	bhi.w	800cce4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800cba2:	69bb      	ldr	r3, [r7, #24]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d003      	beq.n	800cbb0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800cba8:	69bb      	ldr	r3, [r7, #24]
 800cbaa:	2b01      	cmp	r3, #1
 800cbac:	d056      	beq.n	800cc5c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800cbae:	e099      	b.n	800cce4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cbb0:	4b88      	ldr	r3, [pc, #544]	@ (800cdd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	f003 0320 	and.w	r3, r3, #32
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d02d      	beq.n	800cc18 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cbbc:	4b85      	ldr	r3, [pc, #532]	@ (800cdd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	08db      	lsrs	r3, r3, #3
 800cbc2:	f003 0303 	and.w	r3, r3, #3
 800cbc6:	4a84      	ldr	r2, [pc, #528]	@ (800cdd8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800cbc8:	fa22 f303 	lsr.w	r3, r2, r3
 800cbcc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cbce:	68bb      	ldr	r3, [r7, #8]
 800cbd0:	ee07 3a90 	vmov	s15, r3
 800cbd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cbd8:	697b      	ldr	r3, [r7, #20]
 800cbda:	ee07 3a90 	vmov	s15, r3
 800cbde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cbe6:	4b7b      	ldr	r3, [pc, #492]	@ (800cdd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cbe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cbea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbee:	ee07 3a90 	vmov	s15, r3
 800cbf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cbf6:	ed97 6a03 	vldr	s12, [r7, #12]
 800cbfa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800cddc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cbfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cc0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc12:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cc16:	e087      	b.n	800cd28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cc18:	697b      	ldr	r3, [r7, #20]
 800cc1a:	ee07 3a90 	vmov	s15, r3
 800cc1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc22:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800cde0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800cc26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc2a:	4b6a      	ldr	r3, [pc, #424]	@ (800cdd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc32:	ee07 3a90 	vmov	s15, r3
 800cc36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc3a:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc3e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800cddc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cc42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cc4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cc5a:	e065      	b.n	800cd28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cc5c:	697b      	ldr	r3, [r7, #20]
 800cc5e:	ee07 3a90 	vmov	s15, r3
 800cc62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc66:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800cde4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cc6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc6e:	4b59      	ldr	r3, [pc, #356]	@ (800cdd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc76:	ee07 3a90 	vmov	s15, r3
 800cc7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc7e:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc82:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800cddc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cc86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cc92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cc9e:	e043      	b.n	800cd28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cca0:	697b      	ldr	r3, [r7, #20]
 800cca2:	ee07 3a90 	vmov	s15, r3
 800cca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccaa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800cde8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ccae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ccb2:	4b48      	ldr	r3, [pc, #288]	@ (800cdd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ccb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ccb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccba:	ee07 3a90 	vmov	s15, r3
 800ccbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ccc2:	ed97 6a03 	vldr	s12, [r7, #12]
 800ccc6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800cddc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ccca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ccce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ccd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ccd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ccda:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ccde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cce2:	e021      	b.n	800cd28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cce4:	697b      	ldr	r3, [r7, #20]
 800cce6:	ee07 3a90 	vmov	s15, r3
 800ccea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccee:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800cde4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ccf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ccf6:	4b37      	ldr	r3, [pc, #220]	@ (800cdd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ccf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ccfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccfe:	ee07 3a90 	vmov	s15, r3
 800cd02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd06:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd0a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800cddc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cd0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cd1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cd26:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800cd28:	4b2a      	ldr	r3, [pc, #168]	@ (800cdd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cd2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd2c:	0a5b      	lsrs	r3, r3, #9
 800cd2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cd32:	ee07 3a90 	vmov	s15, r3
 800cd36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd3a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cd3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cd42:	edd7 6a07 	vldr	s13, [r7, #28]
 800cd46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cd4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd4e:	ee17 2a90 	vmov	r2, s15
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800cd56:	4b1f      	ldr	r3, [pc, #124]	@ (800cdd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cd58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd5a:	0c1b      	lsrs	r3, r3, #16
 800cd5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cd60:	ee07 3a90 	vmov	s15, r3
 800cd64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd68:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cd6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cd70:	edd7 6a07 	vldr	s13, [r7, #28]
 800cd74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cd78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd7c:	ee17 2a90 	vmov	r2, s15
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800cd84:	4b13      	ldr	r3, [pc, #76]	@ (800cdd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cd86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd88:	0e1b      	lsrs	r3, r3, #24
 800cd8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cd8e:	ee07 3a90 	vmov	s15, r3
 800cd92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd96:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cd9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cd9e:	edd7 6a07 	vldr	s13, [r7, #28]
 800cda2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cda6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cdaa:	ee17 2a90 	vmov	r2, s15
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800cdb2:	e008      	b.n	800cdc6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	2200      	movs	r2, #0
 800cdb8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	2200      	movs	r2, #0
 800cdbe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	2200      	movs	r2, #0
 800cdc4:	609a      	str	r2, [r3, #8]
}
 800cdc6:	bf00      	nop
 800cdc8:	3724      	adds	r7, #36	@ 0x24
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd0:	4770      	bx	lr
 800cdd2:	bf00      	nop
 800cdd4:	58024400 	.word	0x58024400
 800cdd8:	03d09000 	.word	0x03d09000
 800cddc:	46000000 	.word	0x46000000
 800cde0:	4c742400 	.word	0x4c742400
 800cde4:	4a742400 	.word	0x4a742400
 800cde8:	4bb71b00 	.word	0x4bb71b00

0800cdec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800cdec:	b480      	push	{r7}
 800cdee:	b089      	sub	sp, #36	@ 0x24
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cdf4:	4ba1      	ldr	r3, [pc, #644]	@ (800d07c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cdf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cdf8:	f003 0303 	and.w	r3, r3, #3
 800cdfc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800cdfe:	4b9f      	ldr	r3, [pc, #636]	@ (800d07c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce02:	0d1b      	lsrs	r3, r3, #20
 800ce04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ce08:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ce0a:	4b9c      	ldr	r3, [pc, #624]	@ (800d07c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce0e:	0a1b      	lsrs	r3, r3, #8
 800ce10:	f003 0301 	and.w	r3, r3, #1
 800ce14:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800ce16:	4b99      	ldr	r3, [pc, #612]	@ (800d07c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce1a:	08db      	lsrs	r3, r3, #3
 800ce1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ce20:	693a      	ldr	r2, [r7, #16]
 800ce22:	fb02 f303 	mul.w	r3, r2, r3
 800ce26:	ee07 3a90 	vmov	s15, r3
 800ce2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce2e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ce32:	697b      	ldr	r3, [r7, #20]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	f000 8111 	beq.w	800d05c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ce3a:	69bb      	ldr	r3, [r7, #24]
 800ce3c:	2b02      	cmp	r3, #2
 800ce3e:	f000 8083 	beq.w	800cf48 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ce42:	69bb      	ldr	r3, [r7, #24]
 800ce44:	2b02      	cmp	r3, #2
 800ce46:	f200 80a1 	bhi.w	800cf8c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ce4a:	69bb      	ldr	r3, [r7, #24]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d003      	beq.n	800ce58 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ce50:	69bb      	ldr	r3, [r7, #24]
 800ce52:	2b01      	cmp	r3, #1
 800ce54:	d056      	beq.n	800cf04 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ce56:	e099      	b.n	800cf8c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ce58:	4b88      	ldr	r3, [pc, #544]	@ (800d07c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	f003 0320 	and.w	r3, r3, #32
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d02d      	beq.n	800cec0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ce64:	4b85      	ldr	r3, [pc, #532]	@ (800d07c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	08db      	lsrs	r3, r3, #3
 800ce6a:	f003 0303 	and.w	r3, r3, #3
 800ce6e:	4a84      	ldr	r2, [pc, #528]	@ (800d080 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ce70:	fa22 f303 	lsr.w	r3, r2, r3
 800ce74:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ce76:	68bb      	ldr	r3, [r7, #8]
 800ce78:	ee07 3a90 	vmov	s15, r3
 800ce7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce80:	697b      	ldr	r3, [r7, #20]
 800ce82:	ee07 3a90 	vmov	s15, r3
 800ce86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce8e:	4b7b      	ldr	r3, [pc, #492]	@ (800d07c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce96:	ee07 3a90 	vmov	s15, r3
 800ce9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce9e:	ed97 6a03 	vldr	s12, [r7, #12]
 800cea2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800d084 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cea6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ceaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ceae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ceb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ceb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ceba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cebe:	e087      	b.n	800cfd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cec0:	697b      	ldr	r3, [r7, #20]
 800cec2:	ee07 3a90 	vmov	s15, r3
 800cec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ceca:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800d088 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800cece:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ced2:	4b6a      	ldr	r3, [pc, #424]	@ (800d07c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ced4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ced6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ceda:	ee07 3a90 	vmov	s15, r3
 800cede:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cee2:	ed97 6a03 	vldr	s12, [r7, #12]
 800cee6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800d084 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ceea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ceee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cef2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cefa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cefe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cf02:	e065      	b.n	800cfd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cf04:	697b      	ldr	r3, [r7, #20]
 800cf06:	ee07 3a90 	vmov	s15, r3
 800cf0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf0e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800d08c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cf12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf16:	4b59      	ldr	r3, [pc, #356]	@ (800d07c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cf18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf1e:	ee07 3a90 	vmov	s15, r3
 800cf22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf26:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf2a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800d084 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cf2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cf3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cf46:	e043      	b.n	800cfd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cf48:	697b      	ldr	r3, [r7, #20]
 800cf4a:	ee07 3a90 	vmov	s15, r3
 800cf4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf52:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800d090 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800cf56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf5a:	4b48      	ldr	r3, [pc, #288]	@ (800d07c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cf5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf62:	ee07 3a90 	vmov	s15, r3
 800cf66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf6a:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf6e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800d084 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cf72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cf7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cf8a:	e021      	b.n	800cfd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cf8c:	697b      	ldr	r3, [r7, #20]
 800cf8e:	ee07 3a90 	vmov	s15, r3
 800cf92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf96:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800d08c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cf9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf9e:	4b37      	ldr	r3, [pc, #220]	@ (800d07c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cfa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cfa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfa6:	ee07 3a90 	vmov	s15, r3
 800cfaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cfae:	ed97 6a03 	vldr	s12, [r7, #12]
 800cfb2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800d084 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cfb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cfba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cfbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cfc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cfc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cfca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cfce:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800cfd0:	4b2a      	ldr	r3, [pc, #168]	@ (800d07c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cfd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cfd4:	0a5b      	lsrs	r3, r3, #9
 800cfd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cfda:	ee07 3a90 	vmov	s15, r3
 800cfde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfe2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cfe6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cfea:	edd7 6a07 	vldr	s13, [r7, #28]
 800cfee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cff2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cff6:	ee17 2a90 	vmov	r2, s15
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800cffe:	4b1f      	ldr	r3, [pc, #124]	@ (800d07c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d002:	0c1b      	lsrs	r3, r3, #16
 800d004:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d008:	ee07 3a90 	vmov	s15, r3
 800d00c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d010:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d014:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d018:	edd7 6a07 	vldr	s13, [r7, #28]
 800d01c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d020:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d024:	ee17 2a90 	vmov	r2, s15
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d02c:	4b13      	ldr	r3, [pc, #76]	@ (800d07c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d02e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d030:	0e1b      	lsrs	r3, r3, #24
 800d032:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d036:	ee07 3a90 	vmov	s15, r3
 800d03a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d03e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d042:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d046:	edd7 6a07 	vldr	s13, [r7, #28]
 800d04a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d04e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d052:	ee17 2a90 	vmov	r2, s15
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d05a:	e008      	b.n	800d06e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	2200      	movs	r2, #0
 800d060:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	2200      	movs	r2, #0
 800d066:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	2200      	movs	r2, #0
 800d06c:	609a      	str	r2, [r3, #8]
}
 800d06e:	bf00      	nop
 800d070:	3724      	adds	r7, #36	@ 0x24
 800d072:	46bd      	mov	sp, r7
 800d074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d078:	4770      	bx	lr
 800d07a:	bf00      	nop
 800d07c:	58024400 	.word	0x58024400
 800d080:	03d09000 	.word	0x03d09000
 800d084:	46000000 	.word	0x46000000
 800d088:	4c742400 	.word	0x4c742400
 800d08c:	4a742400 	.word	0x4a742400
 800d090:	4bb71b00 	.word	0x4bb71b00

0800d094 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d094:	b580      	push	{r7, lr}
 800d096:	b084      	sub	sp, #16
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
 800d09c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d09e:	2300      	movs	r3, #0
 800d0a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d0a2:	4b53      	ldr	r3, [pc, #332]	@ (800d1f0 <RCCEx_PLL2_Config+0x15c>)
 800d0a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d0a6:	f003 0303 	and.w	r3, r3, #3
 800d0aa:	2b03      	cmp	r3, #3
 800d0ac:	d101      	bne.n	800d0b2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d0ae:	2301      	movs	r3, #1
 800d0b0:	e099      	b.n	800d1e6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d0b2:	4b4f      	ldr	r3, [pc, #316]	@ (800d1f0 <RCCEx_PLL2_Config+0x15c>)
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	4a4e      	ldr	r2, [pc, #312]	@ (800d1f0 <RCCEx_PLL2_Config+0x15c>)
 800d0b8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d0bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d0be:	f7f9 fc5f 	bl	8006980 <HAL_GetTick>
 800d0c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d0c4:	e008      	b.n	800d0d8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d0c6:	f7f9 fc5b 	bl	8006980 <HAL_GetTick>
 800d0ca:	4602      	mov	r2, r0
 800d0cc:	68bb      	ldr	r3, [r7, #8]
 800d0ce:	1ad3      	subs	r3, r2, r3
 800d0d0:	2b02      	cmp	r3, #2
 800d0d2:	d901      	bls.n	800d0d8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d0d4:	2303      	movs	r3, #3
 800d0d6:	e086      	b.n	800d1e6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d0d8:	4b45      	ldr	r3, [pc, #276]	@ (800d1f0 <RCCEx_PLL2_Config+0x15c>)
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d1f0      	bne.n	800d0c6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d0e4:	4b42      	ldr	r3, [pc, #264]	@ (800d1f0 <RCCEx_PLL2_Config+0x15c>)
 800d0e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d0e8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	031b      	lsls	r3, r3, #12
 800d0f2:	493f      	ldr	r1, [pc, #252]	@ (800d1f0 <RCCEx_PLL2_Config+0x15c>)
 800d0f4:	4313      	orrs	r3, r2
 800d0f6:	628b      	str	r3, [r1, #40]	@ 0x28
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	685b      	ldr	r3, [r3, #4]
 800d0fc:	3b01      	subs	r3, #1
 800d0fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	689b      	ldr	r3, [r3, #8]
 800d106:	3b01      	subs	r3, #1
 800d108:	025b      	lsls	r3, r3, #9
 800d10a:	b29b      	uxth	r3, r3
 800d10c:	431a      	orrs	r2, r3
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	68db      	ldr	r3, [r3, #12]
 800d112:	3b01      	subs	r3, #1
 800d114:	041b      	lsls	r3, r3, #16
 800d116:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800d11a:	431a      	orrs	r2, r3
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	691b      	ldr	r3, [r3, #16]
 800d120:	3b01      	subs	r3, #1
 800d122:	061b      	lsls	r3, r3, #24
 800d124:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800d128:	4931      	ldr	r1, [pc, #196]	@ (800d1f0 <RCCEx_PLL2_Config+0x15c>)
 800d12a:	4313      	orrs	r3, r2
 800d12c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d12e:	4b30      	ldr	r3, [pc, #192]	@ (800d1f0 <RCCEx_PLL2_Config+0x15c>)
 800d130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d132:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	695b      	ldr	r3, [r3, #20]
 800d13a:	492d      	ldr	r1, [pc, #180]	@ (800d1f0 <RCCEx_PLL2_Config+0x15c>)
 800d13c:	4313      	orrs	r3, r2
 800d13e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d140:	4b2b      	ldr	r3, [pc, #172]	@ (800d1f0 <RCCEx_PLL2_Config+0x15c>)
 800d142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d144:	f023 0220 	bic.w	r2, r3, #32
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	699b      	ldr	r3, [r3, #24]
 800d14c:	4928      	ldr	r1, [pc, #160]	@ (800d1f0 <RCCEx_PLL2_Config+0x15c>)
 800d14e:	4313      	orrs	r3, r2
 800d150:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d152:	4b27      	ldr	r3, [pc, #156]	@ (800d1f0 <RCCEx_PLL2_Config+0x15c>)
 800d154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d156:	4a26      	ldr	r2, [pc, #152]	@ (800d1f0 <RCCEx_PLL2_Config+0x15c>)
 800d158:	f023 0310 	bic.w	r3, r3, #16
 800d15c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d15e:	4b24      	ldr	r3, [pc, #144]	@ (800d1f0 <RCCEx_PLL2_Config+0x15c>)
 800d160:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d162:	4b24      	ldr	r3, [pc, #144]	@ (800d1f4 <RCCEx_PLL2_Config+0x160>)
 800d164:	4013      	ands	r3, r2
 800d166:	687a      	ldr	r2, [r7, #4]
 800d168:	69d2      	ldr	r2, [r2, #28]
 800d16a:	00d2      	lsls	r2, r2, #3
 800d16c:	4920      	ldr	r1, [pc, #128]	@ (800d1f0 <RCCEx_PLL2_Config+0x15c>)
 800d16e:	4313      	orrs	r3, r2
 800d170:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d172:	4b1f      	ldr	r3, [pc, #124]	@ (800d1f0 <RCCEx_PLL2_Config+0x15c>)
 800d174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d176:	4a1e      	ldr	r2, [pc, #120]	@ (800d1f0 <RCCEx_PLL2_Config+0x15c>)
 800d178:	f043 0310 	orr.w	r3, r3, #16
 800d17c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d17e:	683b      	ldr	r3, [r7, #0]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d106      	bne.n	800d192 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d184:	4b1a      	ldr	r3, [pc, #104]	@ (800d1f0 <RCCEx_PLL2_Config+0x15c>)
 800d186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d188:	4a19      	ldr	r2, [pc, #100]	@ (800d1f0 <RCCEx_PLL2_Config+0x15c>)
 800d18a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d18e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d190:	e00f      	b.n	800d1b2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d192:	683b      	ldr	r3, [r7, #0]
 800d194:	2b01      	cmp	r3, #1
 800d196:	d106      	bne.n	800d1a6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d198:	4b15      	ldr	r3, [pc, #84]	@ (800d1f0 <RCCEx_PLL2_Config+0x15c>)
 800d19a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d19c:	4a14      	ldr	r2, [pc, #80]	@ (800d1f0 <RCCEx_PLL2_Config+0x15c>)
 800d19e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d1a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d1a4:	e005      	b.n	800d1b2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d1a6:	4b12      	ldr	r3, [pc, #72]	@ (800d1f0 <RCCEx_PLL2_Config+0x15c>)
 800d1a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1aa:	4a11      	ldr	r2, [pc, #68]	@ (800d1f0 <RCCEx_PLL2_Config+0x15c>)
 800d1ac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800d1b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d1b2:	4b0f      	ldr	r3, [pc, #60]	@ (800d1f0 <RCCEx_PLL2_Config+0x15c>)
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	4a0e      	ldr	r2, [pc, #56]	@ (800d1f0 <RCCEx_PLL2_Config+0x15c>)
 800d1b8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800d1bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d1be:	f7f9 fbdf 	bl	8006980 <HAL_GetTick>
 800d1c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d1c4:	e008      	b.n	800d1d8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d1c6:	f7f9 fbdb 	bl	8006980 <HAL_GetTick>
 800d1ca:	4602      	mov	r2, r0
 800d1cc:	68bb      	ldr	r3, [r7, #8]
 800d1ce:	1ad3      	subs	r3, r2, r3
 800d1d0:	2b02      	cmp	r3, #2
 800d1d2:	d901      	bls.n	800d1d8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d1d4:	2303      	movs	r3, #3
 800d1d6:	e006      	b.n	800d1e6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d1d8:	4b05      	ldr	r3, [pc, #20]	@ (800d1f0 <RCCEx_PLL2_Config+0x15c>)
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d0f0      	beq.n	800d1c6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d1e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	3710      	adds	r7, #16
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	bd80      	pop	{r7, pc}
 800d1ee:	bf00      	nop
 800d1f0:	58024400 	.word	0x58024400
 800d1f4:	ffff0007 	.word	0xffff0007

0800d1f8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d1f8:	b580      	push	{r7, lr}
 800d1fa:	b084      	sub	sp, #16
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	6078      	str	r0, [r7, #4]
 800d200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d202:	2300      	movs	r3, #0
 800d204:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d206:	4b53      	ldr	r3, [pc, #332]	@ (800d354 <RCCEx_PLL3_Config+0x15c>)
 800d208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d20a:	f003 0303 	and.w	r3, r3, #3
 800d20e:	2b03      	cmp	r3, #3
 800d210:	d101      	bne.n	800d216 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d212:	2301      	movs	r3, #1
 800d214:	e099      	b.n	800d34a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d216:	4b4f      	ldr	r3, [pc, #316]	@ (800d354 <RCCEx_PLL3_Config+0x15c>)
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	4a4e      	ldr	r2, [pc, #312]	@ (800d354 <RCCEx_PLL3_Config+0x15c>)
 800d21c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d220:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d222:	f7f9 fbad 	bl	8006980 <HAL_GetTick>
 800d226:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d228:	e008      	b.n	800d23c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d22a:	f7f9 fba9 	bl	8006980 <HAL_GetTick>
 800d22e:	4602      	mov	r2, r0
 800d230:	68bb      	ldr	r3, [r7, #8]
 800d232:	1ad3      	subs	r3, r2, r3
 800d234:	2b02      	cmp	r3, #2
 800d236:	d901      	bls.n	800d23c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d238:	2303      	movs	r3, #3
 800d23a:	e086      	b.n	800d34a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d23c:	4b45      	ldr	r3, [pc, #276]	@ (800d354 <RCCEx_PLL3_Config+0x15c>)
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d244:	2b00      	cmp	r3, #0
 800d246:	d1f0      	bne.n	800d22a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d248:	4b42      	ldr	r3, [pc, #264]	@ (800d354 <RCCEx_PLL3_Config+0x15c>)
 800d24a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d24c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	051b      	lsls	r3, r3, #20
 800d256:	493f      	ldr	r1, [pc, #252]	@ (800d354 <RCCEx_PLL3_Config+0x15c>)
 800d258:	4313      	orrs	r3, r2
 800d25a:	628b      	str	r3, [r1, #40]	@ 0x28
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	685b      	ldr	r3, [r3, #4]
 800d260:	3b01      	subs	r3, #1
 800d262:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	689b      	ldr	r3, [r3, #8]
 800d26a:	3b01      	subs	r3, #1
 800d26c:	025b      	lsls	r3, r3, #9
 800d26e:	b29b      	uxth	r3, r3
 800d270:	431a      	orrs	r2, r3
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	68db      	ldr	r3, [r3, #12]
 800d276:	3b01      	subs	r3, #1
 800d278:	041b      	lsls	r3, r3, #16
 800d27a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800d27e:	431a      	orrs	r2, r3
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	691b      	ldr	r3, [r3, #16]
 800d284:	3b01      	subs	r3, #1
 800d286:	061b      	lsls	r3, r3, #24
 800d288:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800d28c:	4931      	ldr	r1, [pc, #196]	@ (800d354 <RCCEx_PLL3_Config+0x15c>)
 800d28e:	4313      	orrs	r3, r2
 800d290:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d292:	4b30      	ldr	r3, [pc, #192]	@ (800d354 <RCCEx_PLL3_Config+0x15c>)
 800d294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d296:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	695b      	ldr	r3, [r3, #20]
 800d29e:	492d      	ldr	r1, [pc, #180]	@ (800d354 <RCCEx_PLL3_Config+0x15c>)
 800d2a0:	4313      	orrs	r3, r2
 800d2a2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d2a4:	4b2b      	ldr	r3, [pc, #172]	@ (800d354 <RCCEx_PLL3_Config+0x15c>)
 800d2a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2a8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	699b      	ldr	r3, [r3, #24]
 800d2b0:	4928      	ldr	r1, [pc, #160]	@ (800d354 <RCCEx_PLL3_Config+0x15c>)
 800d2b2:	4313      	orrs	r3, r2
 800d2b4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d2b6:	4b27      	ldr	r3, [pc, #156]	@ (800d354 <RCCEx_PLL3_Config+0x15c>)
 800d2b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2ba:	4a26      	ldr	r2, [pc, #152]	@ (800d354 <RCCEx_PLL3_Config+0x15c>)
 800d2bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d2c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d2c2:	4b24      	ldr	r3, [pc, #144]	@ (800d354 <RCCEx_PLL3_Config+0x15c>)
 800d2c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d2c6:	4b24      	ldr	r3, [pc, #144]	@ (800d358 <RCCEx_PLL3_Config+0x160>)
 800d2c8:	4013      	ands	r3, r2
 800d2ca:	687a      	ldr	r2, [r7, #4]
 800d2cc:	69d2      	ldr	r2, [r2, #28]
 800d2ce:	00d2      	lsls	r2, r2, #3
 800d2d0:	4920      	ldr	r1, [pc, #128]	@ (800d354 <RCCEx_PLL3_Config+0x15c>)
 800d2d2:	4313      	orrs	r3, r2
 800d2d4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d2d6:	4b1f      	ldr	r3, [pc, #124]	@ (800d354 <RCCEx_PLL3_Config+0x15c>)
 800d2d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2da:	4a1e      	ldr	r2, [pc, #120]	@ (800d354 <RCCEx_PLL3_Config+0x15c>)
 800d2dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d2e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d2e2:	683b      	ldr	r3, [r7, #0]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d106      	bne.n	800d2f6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d2e8:	4b1a      	ldr	r3, [pc, #104]	@ (800d354 <RCCEx_PLL3_Config+0x15c>)
 800d2ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2ec:	4a19      	ldr	r2, [pc, #100]	@ (800d354 <RCCEx_PLL3_Config+0x15c>)
 800d2ee:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800d2f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d2f4:	e00f      	b.n	800d316 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d2f6:	683b      	ldr	r3, [r7, #0]
 800d2f8:	2b01      	cmp	r3, #1
 800d2fa:	d106      	bne.n	800d30a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d2fc:	4b15      	ldr	r3, [pc, #84]	@ (800d354 <RCCEx_PLL3_Config+0x15c>)
 800d2fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d300:	4a14      	ldr	r2, [pc, #80]	@ (800d354 <RCCEx_PLL3_Config+0x15c>)
 800d302:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800d306:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d308:	e005      	b.n	800d316 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d30a:	4b12      	ldr	r3, [pc, #72]	@ (800d354 <RCCEx_PLL3_Config+0x15c>)
 800d30c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d30e:	4a11      	ldr	r2, [pc, #68]	@ (800d354 <RCCEx_PLL3_Config+0x15c>)
 800d310:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d314:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d316:	4b0f      	ldr	r3, [pc, #60]	@ (800d354 <RCCEx_PLL3_Config+0x15c>)
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	4a0e      	ldr	r2, [pc, #56]	@ (800d354 <RCCEx_PLL3_Config+0x15c>)
 800d31c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d320:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d322:	f7f9 fb2d 	bl	8006980 <HAL_GetTick>
 800d326:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d328:	e008      	b.n	800d33c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d32a:	f7f9 fb29 	bl	8006980 <HAL_GetTick>
 800d32e:	4602      	mov	r2, r0
 800d330:	68bb      	ldr	r3, [r7, #8]
 800d332:	1ad3      	subs	r3, r2, r3
 800d334:	2b02      	cmp	r3, #2
 800d336:	d901      	bls.n	800d33c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d338:	2303      	movs	r3, #3
 800d33a:	e006      	b.n	800d34a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d33c:	4b05      	ldr	r3, [pc, #20]	@ (800d354 <RCCEx_PLL3_Config+0x15c>)
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d344:	2b00      	cmp	r3, #0
 800d346:	d0f0      	beq.n	800d32a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d348:	7bfb      	ldrb	r3, [r7, #15]
}
 800d34a:	4618      	mov	r0, r3
 800d34c:	3710      	adds	r7, #16
 800d34e:	46bd      	mov	sp, r7
 800d350:	bd80      	pop	{r7, pc}
 800d352:	bf00      	nop
 800d354:	58024400 	.word	0x58024400
 800d358:	ffff0007 	.word	0xffff0007

0800d35c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d35c:	b580      	push	{r7, lr}
 800d35e:	b084      	sub	sp, #16
 800d360:	af00      	add	r7, sp, #0
 800d362:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	2b00      	cmp	r3, #0
 800d368:	d101      	bne.n	800d36e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d36a:	2301      	movs	r3, #1
 800d36c:	e10f      	b.n	800d58e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	2200      	movs	r2, #0
 800d372:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	4a87      	ldr	r2, [pc, #540]	@ (800d598 <HAL_SPI_Init+0x23c>)
 800d37a:	4293      	cmp	r3, r2
 800d37c:	d00f      	beq.n	800d39e <HAL_SPI_Init+0x42>
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	4a86      	ldr	r2, [pc, #536]	@ (800d59c <HAL_SPI_Init+0x240>)
 800d384:	4293      	cmp	r3, r2
 800d386:	d00a      	beq.n	800d39e <HAL_SPI_Init+0x42>
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	4a84      	ldr	r2, [pc, #528]	@ (800d5a0 <HAL_SPI_Init+0x244>)
 800d38e:	4293      	cmp	r3, r2
 800d390:	d005      	beq.n	800d39e <HAL_SPI_Init+0x42>
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	68db      	ldr	r3, [r3, #12]
 800d396:	2b0f      	cmp	r3, #15
 800d398:	d901      	bls.n	800d39e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800d39a:	2301      	movs	r3, #1
 800d39c:	e0f7      	b.n	800d58e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800d39e:	6878      	ldr	r0, [r7, #4]
 800d3a0:	f001 f968 	bl	800e674 <SPI_GetPacketSize>
 800d3a4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	4a7b      	ldr	r2, [pc, #492]	@ (800d598 <HAL_SPI_Init+0x23c>)
 800d3ac:	4293      	cmp	r3, r2
 800d3ae:	d00c      	beq.n	800d3ca <HAL_SPI_Init+0x6e>
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	4a79      	ldr	r2, [pc, #484]	@ (800d59c <HAL_SPI_Init+0x240>)
 800d3b6:	4293      	cmp	r3, r2
 800d3b8:	d007      	beq.n	800d3ca <HAL_SPI_Init+0x6e>
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	4a78      	ldr	r2, [pc, #480]	@ (800d5a0 <HAL_SPI_Init+0x244>)
 800d3c0:	4293      	cmp	r3, r2
 800d3c2:	d002      	beq.n	800d3ca <HAL_SPI_Init+0x6e>
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	2b08      	cmp	r3, #8
 800d3c8:	d811      	bhi.n	800d3ee <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d3ce:	4a72      	ldr	r2, [pc, #456]	@ (800d598 <HAL_SPI_Init+0x23c>)
 800d3d0:	4293      	cmp	r3, r2
 800d3d2:	d009      	beq.n	800d3e8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	4a70      	ldr	r2, [pc, #448]	@ (800d59c <HAL_SPI_Init+0x240>)
 800d3da:	4293      	cmp	r3, r2
 800d3dc:	d004      	beq.n	800d3e8 <HAL_SPI_Init+0x8c>
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	4a6f      	ldr	r2, [pc, #444]	@ (800d5a0 <HAL_SPI_Init+0x244>)
 800d3e4:	4293      	cmp	r3, r2
 800d3e6:	d104      	bne.n	800d3f2 <HAL_SPI_Init+0x96>
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	2b10      	cmp	r3, #16
 800d3ec:	d901      	bls.n	800d3f2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800d3ee:	2301      	movs	r3, #1
 800d3f0:	e0cd      	b.n	800d58e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d3f8:	b2db      	uxtb	r3, r3
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d106      	bne.n	800d40c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	2200      	movs	r2, #0
 800d402:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d406:	6878      	ldr	r0, [r7, #4]
 800d408:	f7f6 f800 	bl	800340c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	2202      	movs	r2, #2
 800d410:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	681a      	ldr	r2, [r3, #0]
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	f022 0201 	bic.w	r2, r2, #1
 800d422:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	689b      	ldr	r3, [r3, #8]
 800d42a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800d42e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	699b      	ldr	r3, [r3, #24]
 800d434:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d438:	d119      	bne.n	800d46e <HAL_SPI_Init+0x112>
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	685b      	ldr	r3, [r3, #4]
 800d43e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d442:	d103      	bne.n	800d44c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d008      	beq.n	800d45e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d450:	2b00      	cmp	r3, #0
 800d452:	d10c      	bne.n	800d46e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800d458:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d45c:	d107      	bne.n	800d46e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	681a      	ldr	r2, [r3, #0]
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800d46c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	685b      	ldr	r3, [r3, #4]
 800d472:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d476:	2b00      	cmp	r3, #0
 800d478:	d00f      	beq.n	800d49a <HAL_SPI_Init+0x13e>
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	68db      	ldr	r3, [r3, #12]
 800d47e:	2b06      	cmp	r3, #6
 800d480:	d90b      	bls.n	800d49a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	430a      	orrs	r2, r1
 800d496:	601a      	str	r2, [r3, #0]
 800d498:	e007      	b.n	800d4aa <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	681a      	ldr	r2, [r3, #0]
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800d4a8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	69da      	ldr	r2, [r3, #28]
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4b2:	431a      	orrs	r2, r3
 800d4b4:	68bb      	ldr	r3, [r7, #8]
 800d4b6:	431a      	orrs	r2, r3
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d4bc:	ea42 0103 	orr.w	r1, r2, r3
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	68da      	ldr	r2, [r3, #12]
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	430a      	orrs	r2, r1
 800d4ca:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4d4:	431a      	orrs	r2, r3
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d4da:	431a      	orrs	r2, r3
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	699b      	ldr	r3, [r3, #24]
 800d4e0:	431a      	orrs	r2, r3
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	691b      	ldr	r3, [r3, #16]
 800d4e6:	431a      	orrs	r2, r3
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	695b      	ldr	r3, [r3, #20]
 800d4ec:	431a      	orrs	r2, r3
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	6a1b      	ldr	r3, [r3, #32]
 800d4f2:	431a      	orrs	r2, r3
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	685b      	ldr	r3, [r3, #4]
 800d4f8:	431a      	orrs	r2, r3
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d4fe:	431a      	orrs	r2, r3
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	689b      	ldr	r3, [r3, #8]
 800d504:	431a      	orrs	r2, r3
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d50a:	ea42 0103 	orr.w	r1, r2, r3
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	430a      	orrs	r2, r1
 800d518:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	685b      	ldr	r3, [r3, #4]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d113      	bne.n	800d54a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	689b      	ldr	r3, [r3, #8]
 800d528:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d534:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	689b      	ldr	r3, [r3, #8]
 800d53c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800d548:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	f022 0201 	bic.w	r2, r2, #1
 800d558:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	685b      	ldr	r3, [r3, #4]
 800d55e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d562:	2b00      	cmp	r3, #0
 800d564:	d00a      	beq.n	800d57c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	68db      	ldr	r3, [r3, #12]
 800d56c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	430a      	orrs	r2, r1
 800d57a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	2200      	movs	r2, #0
 800d580:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	2201      	movs	r2, #1
 800d588:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800d58c:	2300      	movs	r3, #0
}
 800d58e:	4618      	mov	r0, r3
 800d590:	3710      	adds	r7, #16
 800d592:	46bd      	mov	sp, r7
 800d594:	bd80      	pop	{r7, pc}
 800d596:	bf00      	nop
 800d598:	40013000 	.word	0x40013000
 800d59c:	40003800 	.word	0x40003800
 800d5a0:	40003c00 	.word	0x40003c00

0800d5a4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d5a4:	b580      	push	{r7, lr}
 800d5a6:	b088      	sub	sp, #32
 800d5a8:	af02      	add	r7, sp, #8
 800d5aa:	60f8      	str	r0, [r7, #12]
 800d5ac:	60b9      	str	r1, [r7, #8]
 800d5ae:	603b      	str	r3, [r7, #0]
 800d5b0:	4613      	mov	r3, r2
 800d5b2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	3320      	adds	r3, #32
 800d5ba:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d5bc:	f7f9 f9e0 	bl	8006980 <HAL_GetTick>
 800d5c0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d5c8:	b2db      	uxtb	r3, r3
 800d5ca:	2b01      	cmp	r3, #1
 800d5cc:	d001      	beq.n	800d5d2 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800d5ce:	2302      	movs	r3, #2
 800d5d0:	e1d1      	b.n	800d976 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800d5d2:	68bb      	ldr	r3, [r7, #8]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d002      	beq.n	800d5de <HAL_SPI_Transmit+0x3a>
 800d5d8:	88fb      	ldrh	r3, [r7, #6]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d101      	bne.n	800d5e2 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800d5de:	2301      	movs	r3, #1
 800d5e0:	e1c9      	b.n	800d976 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800d5e8:	2b01      	cmp	r3, #1
 800d5ea:	d101      	bne.n	800d5f0 <HAL_SPI_Transmit+0x4c>
 800d5ec:	2302      	movs	r3, #2
 800d5ee:	e1c2      	b.n	800d976 <HAL_SPI_Transmit+0x3d2>
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	2201      	movs	r2, #1
 800d5f4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	2203      	movs	r2, #3
 800d5fc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	2200      	movs	r2, #0
 800d604:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	68ba      	ldr	r2, [r7, #8]
 800d60c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	88fa      	ldrh	r2, [r7, #6]
 800d612:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	88fa      	ldrh	r2, [r7, #6]
 800d61a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	2200      	movs	r2, #0
 800d622:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	2200      	movs	r2, #0
 800d628:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	2200      	movs	r2, #0
 800d630:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	2200      	movs	r2, #0
 800d638:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	2200      	movs	r2, #0
 800d63e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	689b      	ldr	r3, [r3, #8]
 800d644:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800d648:	d108      	bne.n	800d65c <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	681a      	ldr	r2, [r3, #0]
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d658:	601a      	str	r2, [r3, #0]
 800d65a:	e009      	b.n	800d670 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	68db      	ldr	r3, [r3, #12]
 800d662:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800d66e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	685a      	ldr	r2, [r3, #4]
 800d676:	4b96      	ldr	r3, [pc, #600]	@ (800d8d0 <HAL_SPI_Transmit+0x32c>)
 800d678:	4013      	ands	r3, r2
 800d67a:	88f9      	ldrh	r1, [r7, #6]
 800d67c:	68fa      	ldr	r2, [r7, #12]
 800d67e:	6812      	ldr	r2, [r2, #0]
 800d680:	430b      	orrs	r3, r1
 800d682:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	681a      	ldr	r2, [r3, #0]
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	f042 0201 	orr.w	r2, r2, #1
 800d692:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	685b      	ldr	r3, [r3, #4]
 800d698:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d69c:	d107      	bne.n	800d6ae <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	681a      	ldr	r2, [r3, #0]
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d6ac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	68db      	ldr	r3, [r3, #12]
 800d6b2:	2b0f      	cmp	r3, #15
 800d6b4:	d947      	bls.n	800d746 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800d6b6:	e03f      	b.n	800d738 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	695b      	ldr	r3, [r3, #20]
 800d6be:	f003 0302 	and.w	r3, r3, #2
 800d6c2:	2b02      	cmp	r3, #2
 800d6c4:	d114      	bne.n	800d6f0 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	6812      	ldr	r2, [r2, #0]
 800d6d0:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d6d6:	1d1a      	adds	r2, r3, #4
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d6e2:	b29b      	uxth	r3, r3
 800d6e4:	3b01      	subs	r3, #1
 800d6e6:	b29a      	uxth	r2, r3
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800d6ee:	e023      	b.n	800d738 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d6f0:	f7f9 f946 	bl	8006980 <HAL_GetTick>
 800d6f4:	4602      	mov	r2, r0
 800d6f6:	693b      	ldr	r3, [r7, #16]
 800d6f8:	1ad3      	subs	r3, r2, r3
 800d6fa:	683a      	ldr	r2, [r7, #0]
 800d6fc:	429a      	cmp	r2, r3
 800d6fe:	d803      	bhi.n	800d708 <HAL_SPI_Transmit+0x164>
 800d700:	683b      	ldr	r3, [r7, #0]
 800d702:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d706:	d102      	bne.n	800d70e <HAL_SPI_Transmit+0x16a>
 800d708:	683b      	ldr	r3, [r7, #0]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d114      	bne.n	800d738 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d70e:	68f8      	ldr	r0, [r7, #12]
 800d710:	f000 fee2 	bl	800e4d8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d71a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	2201      	movs	r2, #1
 800d728:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	2200      	movs	r2, #0
 800d730:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800d734:	2303      	movs	r3, #3
 800d736:	e11e      	b.n	800d976 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d73e:	b29b      	uxth	r3, r3
 800d740:	2b00      	cmp	r3, #0
 800d742:	d1b9      	bne.n	800d6b8 <HAL_SPI_Transmit+0x114>
 800d744:	e0f1      	b.n	800d92a <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	68db      	ldr	r3, [r3, #12]
 800d74a:	2b07      	cmp	r3, #7
 800d74c:	f240 80e6 	bls.w	800d91c <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800d750:	e05d      	b.n	800d80e <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	695b      	ldr	r3, [r3, #20]
 800d758:	f003 0302 	and.w	r3, r3, #2
 800d75c:	2b02      	cmp	r3, #2
 800d75e:	d132      	bne.n	800d7c6 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d766:	b29b      	uxth	r3, r3
 800d768:	2b01      	cmp	r3, #1
 800d76a:	d918      	bls.n	800d79e <HAL_SPI_Transmit+0x1fa>
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d770:	2b00      	cmp	r3, #0
 800d772:	d014      	beq.n	800d79e <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	6812      	ldr	r2, [r2, #0]
 800d77e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d784:	1d1a      	adds	r2, r3, #4
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d790:	b29b      	uxth	r3, r3
 800d792:	3b02      	subs	r3, #2
 800d794:	b29a      	uxth	r2, r3
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800d79c:	e037      	b.n	800d80e <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d7a2:	881a      	ldrh	r2, [r3, #0]
 800d7a4:	697b      	ldr	r3, [r7, #20]
 800d7a6:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d7ac:	1c9a      	adds	r2, r3, #2
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d7b8:	b29b      	uxth	r3, r3
 800d7ba:	3b01      	subs	r3, #1
 800d7bc:	b29a      	uxth	r2, r3
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800d7c4:	e023      	b.n	800d80e <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d7c6:	f7f9 f8db 	bl	8006980 <HAL_GetTick>
 800d7ca:	4602      	mov	r2, r0
 800d7cc:	693b      	ldr	r3, [r7, #16]
 800d7ce:	1ad3      	subs	r3, r2, r3
 800d7d0:	683a      	ldr	r2, [r7, #0]
 800d7d2:	429a      	cmp	r2, r3
 800d7d4:	d803      	bhi.n	800d7de <HAL_SPI_Transmit+0x23a>
 800d7d6:	683b      	ldr	r3, [r7, #0]
 800d7d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7dc:	d102      	bne.n	800d7e4 <HAL_SPI_Transmit+0x240>
 800d7de:	683b      	ldr	r3, [r7, #0]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d114      	bne.n	800d80e <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d7e4:	68f8      	ldr	r0, [r7, #12]
 800d7e6:	f000 fe77 	bl	800e4d8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d7f0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	2201      	movs	r2, #1
 800d7fe:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	2200      	movs	r2, #0
 800d806:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800d80a:	2303      	movs	r3, #3
 800d80c:	e0b3      	b.n	800d976 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d814:	b29b      	uxth	r3, r3
 800d816:	2b00      	cmp	r3, #0
 800d818:	d19b      	bne.n	800d752 <HAL_SPI_Transmit+0x1ae>
 800d81a:	e086      	b.n	800d92a <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	695b      	ldr	r3, [r3, #20]
 800d822:	f003 0302 	and.w	r3, r3, #2
 800d826:	2b02      	cmp	r3, #2
 800d828:	d154      	bne.n	800d8d4 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d830:	b29b      	uxth	r3, r3
 800d832:	2b03      	cmp	r3, #3
 800d834:	d918      	bls.n	800d868 <HAL_SPI_Transmit+0x2c4>
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d83a:	2b40      	cmp	r3, #64	@ 0x40
 800d83c:	d914      	bls.n	800d868 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	6812      	ldr	r2, [r2, #0]
 800d848:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d84e:	1d1a      	adds	r2, r3, #4
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d85a:	b29b      	uxth	r3, r3
 800d85c:	3b04      	subs	r3, #4
 800d85e:	b29a      	uxth	r2, r3
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800d866:	e059      	b.n	800d91c <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d86e:	b29b      	uxth	r3, r3
 800d870:	2b01      	cmp	r3, #1
 800d872:	d917      	bls.n	800d8a4 <HAL_SPI_Transmit+0x300>
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d013      	beq.n	800d8a4 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d880:	881a      	ldrh	r2, [r3, #0]
 800d882:	697b      	ldr	r3, [r7, #20]
 800d884:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d88a:	1c9a      	adds	r2, r3, #2
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d896:	b29b      	uxth	r3, r3
 800d898:	3b02      	subs	r3, #2
 800d89a:	b29a      	uxth	r2, r3
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800d8a2:	e03b      	b.n	800d91c <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	3320      	adds	r3, #32
 800d8ae:	7812      	ldrb	r2, [r2, #0]
 800d8b0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d8b6:	1c5a      	adds	r2, r3, #1
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d8c2:	b29b      	uxth	r3, r3
 800d8c4:	3b01      	subs	r3, #1
 800d8c6:	b29a      	uxth	r2, r3
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800d8ce:	e025      	b.n	800d91c <HAL_SPI_Transmit+0x378>
 800d8d0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d8d4:	f7f9 f854 	bl	8006980 <HAL_GetTick>
 800d8d8:	4602      	mov	r2, r0
 800d8da:	693b      	ldr	r3, [r7, #16]
 800d8dc:	1ad3      	subs	r3, r2, r3
 800d8de:	683a      	ldr	r2, [r7, #0]
 800d8e0:	429a      	cmp	r2, r3
 800d8e2:	d803      	bhi.n	800d8ec <HAL_SPI_Transmit+0x348>
 800d8e4:	683b      	ldr	r3, [r7, #0]
 800d8e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8ea:	d102      	bne.n	800d8f2 <HAL_SPI_Transmit+0x34e>
 800d8ec:	683b      	ldr	r3, [r7, #0]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d114      	bne.n	800d91c <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d8f2:	68f8      	ldr	r0, [r7, #12]
 800d8f4:	f000 fdf0 	bl	800e4d8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d8fe:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	2201      	movs	r2, #1
 800d90c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	2200      	movs	r2, #0
 800d914:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800d918:	2303      	movs	r3, #3
 800d91a:	e02c      	b.n	800d976 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d922:	b29b      	uxth	r3, r3
 800d924:	2b00      	cmp	r3, #0
 800d926:	f47f af79 	bne.w	800d81c <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800d92a:	693b      	ldr	r3, [r7, #16]
 800d92c:	9300      	str	r3, [sp, #0]
 800d92e:	683b      	ldr	r3, [r7, #0]
 800d930:	2200      	movs	r2, #0
 800d932:	2108      	movs	r1, #8
 800d934:	68f8      	ldr	r0, [r7, #12]
 800d936:	f000 fe6f 	bl	800e618 <SPI_WaitOnFlagUntilTimeout>
 800d93a:	4603      	mov	r3, r0
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d007      	beq.n	800d950 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d946:	f043 0220 	orr.w	r2, r3, #32
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800d950:	68f8      	ldr	r0, [r7, #12]
 800d952:	f000 fdc1 	bl	800e4d8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	2201      	movs	r2, #1
 800d95a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	2200      	movs	r2, #0
 800d962:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d001      	beq.n	800d974 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800d970:	2301      	movs	r3, #1
 800d972:	e000      	b.n	800d976 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800d974:	2300      	movs	r3, #0
  }
}
 800d976:	4618      	mov	r0, r3
 800d978:	3718      	adds	r7, #24
 800d97a:	46bd      	mov	sp, r7
 800d97c:	bd80      	pop	{r7, pc}
 800d97e:	bf00      	nop

0800d980 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d980:	b580      	push	{r7, lr}
 800d982:	b088      	sub	sp, #32
 800d984:	af00      	add	r7, sp, #0
 800d986:	60f8      	str	r0, [r7, #12]
 800d988:	60b9      	str	r1, [r7, #8]
 800d98a:	603b      	str	r3, [r7, #0]
 800d98c:	4613      	mov	r3, r2
 800d98e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d994:	095b      	lsrs	r3, r3, #5
 800d996:	b29b      	uxth	r3, r3
 800d998:	3301      	adds	r3, #1
 800d99a:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	3330      	adds	r3, #48	@ 0x30
 800d9a2:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d9a4:	f7f8 ffec 	bl	8006980 <HAL_GetTick>
 800d9a8:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d9b0:	b2db      	uxtb	r3, r3
 800d9b2:	2b01      	cmp	r3, #1
 800d9b4:	d001      	beq.n	800d9ba <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800d9b6:	2302      	movs	r3, #2
 800d9b8:	e250      	b.n	800de5c <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800d9ba:	68bb      	ldr	r3, [r7, #8]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d002      	beq.n	800d9c6 <HAL_SPI_Receive+0x46>
 800d9c0:	88fb      	ldrh	r3, [r7, #6]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d101      	bne.n	800d9ca <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800d9c6:	2301      	movs	r3, #1
 800d9c8:	e248      	b.n	800de5c <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800d9d0:	2b01      	cmp	r3, #1
 800d9d2:	d101      	bne.n	800d9d8 <HAL_SPI_Receive+0x58>
 800d9d4:	2302      	movs	r3, #2
 800d9d6:	e241      	b.n	800de5c <HAL_SPI_Receive+0x4dc>
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	2201      	movs	r2, #1
 800d9dc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	2204      	movs	r2, #4
 800d9e4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	2200      	movs	r2, #0
 800d9ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	68ba      	ldr	r2, [r7, #8]
 800d9f4:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	88fa      	ldrh	r2, [r7, #6]
 800d9fa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	88fa      	ldrh	r2, [r7, #6]
 800da02:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	2200      	movs	r2, #0
 800da0a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	2200      	movs	r2, #0
 800da10:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	2200      	movs	r2, #0
 800da18:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	2200      	movs	r2, #0
 800da20:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	2200      	movs	r2, #0
 800da26:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	689b      	ldr	r3, [r3, #8]
 800da2c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800da30:	d108      	bne.n	800da44 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	681a      	ldr	r2, [r3, #0]
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800da40:	601a      	str	r2, [r3, #0]
 800da42:	e009      	b.n	800da58 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	68db      	ldr	r3, [r3, #12]
 800da4a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800da56:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	685a      	ldr	r2, [r3, #4]
 800da5e:	4b95      	ldr	r3, [pc, #596]	@ (800dcb4 <HAL_SPI_Receive+0x334>)
 800da60:	4013      	ands	r3, r2
 800da62:	88f9      	ldrh	r1, [r7, #6]
 800da64:	68fa      	ldr	r2, [r7, #12]
 800da66:	6812      	ldr	r2, [r2, #0]
 800da68:	430b      	orrs	r3, r1
 800da6a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	681a      	ldr	r2, [r3, #0]
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	f042 0201 	orr.w	r2, r2, #1
 800da7a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	685b      	ldr	r3, [r3, #4]
 800da80:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800da84:	d107      	bne.n	800da96 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	681a      	ldr	r2, [r3, #0]
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800da94:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	68db      	ldr	r3, [r3, #12]
 800da9a:	2b0f      	cmp	r3, #15
 800da9c:	d96c      	bls.n	800db78 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800da9e:	e064      	b.n	800db6a <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	695b      	ldr	r3, [r3, #20]
 800daa6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	695b      	ldr	r3, [r3, #20]
 800daae:	f003 0301 	and.w	r3, r3, #1
 800dab2:	2b01      	cmp	r3, #1
 800dab4:	d114      	bne.n	800dae0 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	681a      	ldr	r2, [r3, #0]
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dabe:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800dac0:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dac6:	1d1a      	adds	r2, r3, #4
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800dad2:	b29b      	uxth	r3, r3
 800dad4:	3b01      	subs	r3, #1
 800dad6:	b29a      	uxth	r2, r3
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800dade:	e044      	b.n	800db6a <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800dae6:	b29b      	uxth	r3, r3
 800dae8:	8bfa      	ldrh	r2, [r7, #30]
 800daea:	429a      	cmp	r2, r3
 800daec:	d919      	bls.n	800db22 <HAL_SPI_Receive+0x1a2>
 800daee:	693b      	ldr	r3, [r7, #16]
 800daf0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d014      	beq.n	800db22 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	681a      	ldr	r2, [r3, #0]
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800db00:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800db02:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800db08:	1d1a      	adds	r2, r3, #4
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800db14:	b29b      	uxth	r3, r3
 800db16:	3b01      	subs	r3, #1
 800db18:	b29a      	uxth	r2, r3
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800db20:	e023      	b.n	800db6a <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800db22:	f7f8 ff2d 	bl	8006980 <HAL_GetTick>
 800db26:	4602      	mov	r2, r0
 800db28:	697b      	ldr	r3, [r7, #20]
 800db2a:	1ad3      	subs	r3, r2, r3
 800db2c:	683a      	ldr	r2, [r7, #0]
 800db2e:	429a      	cmp	r2, r3
 800db30:	d803      	bhi.n	800db3a <HAL_SPI_Receive+0x1ba>
 800db32:	683b      	ldr	r3, [r7, #0]
 800db34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db38:	d102      	bne.n	800db40 <HAL_SPI_Receive+0x1c0>
 800db3a:	683b      	ldr	r3, [r7, #0]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d114      	bne.n	800db6a <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800db40:	68f8      	ldr	r0, [r7, #12]
 800db42:	f000 fcc9 	bl	800e4d8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800db4c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	2201      	movs	r2, #1
 800db5a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	2200      	movs	r2, #0
 800db62:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800db66:	2303      	movs	r3, #3
 800db68:	e178      	b.n	800de5c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800db70:	b29b      	uxth	r3, r3
 800db72:	2b00      	cmp	r3, #0
 800db74:	d194      	bne.n	800daa0 <HAL_SPI_Receive+0x120>
 800db76:	e15e      	b.n	800de36 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	68db      	ldr	r3, [r3, #12]
 800db7c:	2b07      	cmp	r3, #7
 800db7e:	f240 8153 	bls.w	800de28 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800db82:	e08f      	b.n	800dca4 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	695b      	ldr	r3, [r3, #20]
 800db8a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	695b      	ldr	r3, [r3, #20]
 800db92:	f003 0301 	and.w	r3, r3, #1
 800db96:	2b01      	cmp	r3, #1
 800db98:	d114      	bne.n	800dbc4 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800db9e:	69ba      	ldr	r2, [r7, #24]
 800dba0:	8812      	ldrh	r2, [r2, #0]
 800dba2:	b292      	uxth	r2, r2
 800dba4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dbaa:	1c9a      	adds	r2, r3, #2
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800dbb6:	b29b      	uxth	r3, r3
 800dbb8:	3b01      	subs	r3, #1
 800dbba:	b29a      	uxth	r2, r3
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800dbc2:	e06f      	b.n	800dca4 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800dbca:	b29b      	uxth	r3, r3
 800dbcc:	8bfa      	ldrh	r2, [r7, #30]
 800dbce:	429a      	cmp	r2, r3
 800dbd0:	d924      	bls.n	800dc1c <HAL_SPI_Receive+0x29c>
 800dbd2:	693b      	ldr	r3, [r7, #16]
 800dbd4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d01f      	beq.n	800dc1c <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dbe0:	69ba      	ldr	r2, [r7, #24]
 800dbe2:	8812      	ldrh	r2, [r2, #0]
 800dbe4:	b292      	uxth	r2, r2
 800dbe6:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dbec:	1c9a      	adds	r2, r3, #2
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dbf6:	69ba      	ldr	r2, [r7, #24]
 800dbf8:	8812      	ldrh	r2, [r2, #0]
 800dbfa:	b292      	uxth	r2, r2
 800dbfc:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dc02:	1c9a      	adds	r2, r3, #2
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800dc0e:	b29b      	uxth	r3, r3
 800dc10:	3b02      	subs	r3, #2
 800dc12:	b29a      	uxth	r2, r3
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800dc1a:	e043      	b.n	800dca4 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800dc22:	b29b      	uxth	r3, r3
 800dc24:	2b01      	cmp	r3, #1
 800dc26:	d119      	bne.n	800dc5c <HAL_SPI_Receive+0x2dc>
 800dc28:	693b      	ldr	r3, [r7, #16]
 800dc2a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d014      	beq.n	800dc5c <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dc36:	69ba      	ldr	r2, [r7, #24]
 800dc38:	8812      	ldrh	r2, [r2, #0]
 800dc3a:	b292      	uxth	r2, r2
 800dc3c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dc42:	1c9a      	adds	r2, r3, #2
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800dc4e:	b29b      	uxth	r3, r3
 800dc50:	3b01      	subs	r3, #1
 800dc52:	b29a      	uxth	r2, r3
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800dc5a:	e023      	b.n	800dca4 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dc5c:	f7f8 fe90 	bl	8006980 <HAL_GetTick>
 800dc60:	4602      	mov	r2, r0
 800dc62:	697b      	ldr	r3, [r7, #20]
 800dc64:	1ad3      	subs	r3, r2, r3
 800dc66:	683a      	ldr	r2, [r7, #0]
 800dc68:	429a      	cmp	r2, r3
 800dc6a:	d803      	bhi.n	800dc74 <HAL_SPI_Receive+0x2f4>
 800dc6c:	683b      	ldr	r3, [r7, #0]
 800dc6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc72:	d102      	bne.n	800dc7a <HAL_SPI_Receive+0x2fa>
 800dc74:	683b      	ldr	r3, [r7, #0]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d114      	bne.n	800dca4 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800dc7a:	68f8      	ldr	r0, [r7, #12]
 800dc7c:	f000 fc2c 	bl	800e4d8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800dc86:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	2201      	movs	r2, #1
 800dc94:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	2200      	movs	r2, #0
 800dc9c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800dca0:	2303      	movs	r3, #3
 800dca2:	e0db      	b.n	800de5c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800dcaa:	b29b      	uxth	r3, r3
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	f47f af69 	bne.w	800db84 <HAL_SPI_Receive+0x204>
 800dcb2:	e0c0      	b.n	800de36 <HAL_SPI_Receive+0x4b6>
 800dcb4:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	695b      	ldr	r3, [r3, #20]
 800dcbe:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	695b      	ldr	r3, [r3, #20]
 800dcc6:	f003 0301 	and.w	r3, r3, #1
 800dcca:	2b01      	cmp	r3, #1
 800dccc:	d117      	bne.n	800dcfe <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dcda:	7812      	ldrb	r2, [r2, #0]
 800dcdc:	b2d2      	uxtb	r2, r2
 800dcde:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dce4:	1c5a      	adds	r2, r3, #1
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800dcf0:	b29b      	uxth	r3, r3
 800dcf2:	3b01      	subs	r3, #1
 800dcf4:	b29a      	uxth	r2, r3
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800dcfc:	e094      	b.n	800de28 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800dd04:	b29b      	uxth	r3, r3
 800dd06:	8bfa      	ldrh	r2, [r7, #30]
 800dd08:	429a      	cmp	r2, r3
 800dd0a:	d946      	bls.n	800dd9a <HAL_SPI_Receive+0x41a>
 800dd0c:	693b      	ldr	r3, [r7, #16]
 800dd0e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d041      	beq.n	800dd9a <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dd22:	7812      	ldrb	r2, [r2, #0]
 800dd24:	b2d2      	uxtb	r2, r2
 800dd26:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dd2c:	1c5a      	adds	r2, r3, #1
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dd3e:	7812      	ldrb	r2, [r2, #0]
 800dd40:	b2d2      	uxtb	r2, r2
 800dd42:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dd48:	1c5a      	adds	r2, r3, #1
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dd5a:	7812      	ldrb	r2, [r2, #0]
 800dd5c:	b2d2      	uxtb	r2, r2
 800dd5e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dd64:	1c5a      	adds	r2, r3, #1
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dd76:	7812      	ldrb	r2, [r2, #0]
 800dd78:	b2d2      	uxtb	r2, r2
 800dd7a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dd80:	1c5a      	adds	r2, r3, #1
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800dd8c:	b29b      	uxth	r3, r3
 800dd8e:	3b04      	subs	r3, #4
 800dd90:	b29a      	uxth	r2, r3
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800dd98:	e046      	b.n	800de28 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800dda0:	b29b      	uxth	r3, r3
 800dda2:	2b03      	cmp	r3, #3
 800dda4:	d81c      	bhi.n	800dde0 <HAL_SPI_Receive+0x460>
 800dda6:	693b      	ldr	r3, [r7, #16]
 800dda8:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d017      	beq.n	800dde0 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ddbc:	7812      	ldrb	r2, [r2, #0]
 800ddbe:	b2d2      	uxtb	r2, r2
 800ddc0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ddc6:	1c5a      	adds	r2, r3, #1
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ddd2:	b29b      	uxth	r3, r3
 800ddd4:	3b01      	subs	r3, #1
 800ddd6:	b29a      	uxth	r2, r3
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800ddde:	e023      	b.n	800de28 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dde0:	f7f8 fdce 	bl	8006980 <HAL_GetTick>
 800dde4:	4602      	mov	r2, r0
 800dde6:	697b      	ldr	r3, [r7, #20]
 800dde8:	1ad3      	subs	r3, r2, r3
 800ddea:	683a      	ldr	r2, [r7, #0]
 800ddec:	429a      	cmp	r2, r3
 800ddee:	d803      	bhi.n	800ddf8 <HAL_SPI_Receive+0x478>
 800ddf0:	683b      	ldr	r3, [r7, #0]
 800ddf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddf6:	d102      	bne.n	800ddfe <HAL_SPI_Receive+0x47e>
 800ddf8:	683b      	ldr	r3, [r7, #0]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d114      	bne.n	800de28 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ddfe:	68f8      	ldr	r0, [r7, #12]
 800de00:	f000 fb6a 	bl	800e4d8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800de0a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	2201      	movs	r2, #1
 800de18:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	2200      	movs	r2, #0
 800de20:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800de24:	2303      	movs	r3, #3
 800de26:	e019      	b.n	800de5c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800de2e:	b29b      	uxth	r3, r3
 800de30:	2b00      	cmp	r3, #0
 800de32:	f47f af41 	bne.w	800dcb8 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800de36:	68f8      	ldr	r0, [r7, #12]
 800de38:	f000 fb4e 	bl	800e4d8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	2201      	movs	r2, #1
 800de40:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	2200      	movs	r2, #0
 800de48:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800de52:	2b00      	cmp	r3, #0
 800de54:	d001      	beq.n	800de5a <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800de56:	2301      	movs	r3, #1
 800de58:	e000      	b.n	800de5c <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800de5a:	2300      	movs	r3, #0
  }
}
 800de5c:	4618      	mov	r0, r3
 800de5e:	3720      	adds	r7, #32
 800de60:	46bd      	mov	sp, r7
 800de62:	bd80      	pop	{r7, pc}

0800de64 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800de64:	b580      	push	{r7, lr}
 800de66:	b08e      	sub	sp, #56	@ 0x38
 800de68:	af02      	add	r7, sp, #8
 800de6a:	60f8      	str	r0, [r7, #12]
 800de6c:	60b9      	str	r1, [r7, #8]
 800de6e:	607a      	str	r2, [r7, #4]
 800de70:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	3320      	adds	r3, #32
 800de78:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	3330      	adds	r3, #48	@ 0x30
 800de80:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800de86:	095b      	lsrs	r3, r3, #5
 800de88:	b29b      	uxth	r3, r3
 800de8a:	3301      	adds	r3, #1
 800de8c:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800de8e:	f7f8 fd77 	bl	8006980 <HAL_GetTick>
 800de92:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 800de94:	887b      	ldrh	r3, [r7, #2]
 800de96:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 800de98:	887b      	ldrh	r3, [r7, #2]
 800de9a:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800dea2:	b2db      	uxtb	r3, r3
 800dea4:	2b01      	cmp	r3, #1
 800dea6:	d001      	beq.n	800deac <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 800dea8:	2302      	movs	r3, #2
 800deaa:	e310      	b.n	800e4ce <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800deac:	68bb      	ldr	r3, [r7, #8]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d005      	beq.n	800debe <HAL_SPI_TransmitReceive+0x5a>
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d002      	beq.n	800debe <HAL_SPI_TransmitReceive+0x5a>
 800deb8:	887b      	ldrh	r3, [r7, #2]
 800deba:	2b00      	cmp	r3, #0
 800debc:	d101      	bne.n	800dec2 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 800debe:	2301      	movs	r3, #1
 800dec0:	e305      	b.n	800e4ce <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800dec8:	2b01      	cmp	r3, #1
 800deca:	d101      	bne.n	800ded0 <HAL_SPI_TransmitReceive+0x6c>
 800decc:	2302      	movs	r3, #2
 800dece:	e2fe      	b.n	800e4ce <HAL_SPI_TransmitReceive+0x66a>
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	2201      	movs	r2, #1
 800ded4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	2205      	movs	r2, #5
 800dedc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	2200      	movs	r2, #0
 800dee4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	687a      	ldr	r2, [r7, #4]
 800deec:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	887a      	ldrh	r2, [r7, #2]
 800def2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	887a      	ldrh	r2, [r7, #2]
 800defa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	68ba      	ldr	r2, [r7, #8]
 800df02:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	887a      	ldrh	r2, [r7, #2]
 800df08:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	887a      	ldrh	r2, [r7, #2]
 800df10:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	2200      	movs	r2, #0
 800df18:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	2200      	movs	r2, #0
 800df1e:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	68da      	ldr	r2, [r3, #12]
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800df2e:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	4a70      	ldr	r2, [pc, #448]	@ (800e0f8 <HAL_SPI_TransmitReceive+0x294>)
 800df36:	4293      	cmp	r3, r2
 800df38:	d009      	beq.n	800df4e <HAL_SPI_TransmitReceive+0xea>
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	4a6f      	ldr	r2, [pc, #444]	@ (800e0fc <HAL_SPI_TransmitReceive+0x298>)
 800df40:	4293      	cmp	r3, r2
 800df42:	d004      	beq.n	800df4e <HAL_SPI_TransmitReceive+0xea>
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	4a6d      	ldr	r2, [pc, #436]	@ (800e100 <HAL_SPI_TransmitReceive+0x29c>)
 800df4a:	4293      	cmp	r3, r2
 800df4c:	d102      	bne.n	800df54 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800df4e:	2310      	movs	r3, #16
 800df50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800df52:	e001      	b.n	800df58 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 800df54:	2308      	movs	r3, #8
 800df56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	685a      	ldr	r2, [r3, #4]
 800df5e:	4b69      	ldr	r3, [pc, #420]	@ (800e104 <HAL_SPI_TransmitReceive+0x2a0>)
 800df60:	4013      	ands	r3, r2
 800df62:	8879      	ldrh	r1, [r7, #2]
 800df64:	68fa      	ldr	r2, [r7, #12]
 800df66:	6812      	ldr	r2, [r2, #0]
 800df68:	430b      	orrs	r3, r1
 800df6a:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	681a      	ldr	r2, [r3, #0]
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	f042 0201 	orr.w	r2, r2, #1
 800df7a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	685b      	ldr	r3, [r3, #4]
 800df80:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800df84:	d107      	bne.n	800df96 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	681a      	ldr	r2, [r3, #0]
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800df94:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	68db      	ldr	r3, [r3, #12]
 800df9a:	2b0f      	cmp	r3, #15
 800df9c:	f240 80a2 	bls.w	800e0e4 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 800dfa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfa2:	089b      	lsrs	r3, r3, #2
 800dfa4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800dfa6:	e094      	b.n	800e0d2 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	695b      	ldr	r3, [r3, #20]
 800dfae:	f003 0302 	and.w	r3, r3, #2
 800dfb2:	2b02      	cmp	r3, #2
 800dfb4:	d120      	bne.n	800dff8 <HAL_SPI_TransmitReceive+0x194>
 800dfb6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d01d      	beq.n	800dff8 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800dfbc:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800dfbe:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800dfc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfc2:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800dfc4:	429a      	cmp	r2, r3
 800dfc6:	d217      	bcs.n	800dff8 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	6812      	ldr	r2, [r2, #0]
 800dfd2:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dfd8:	1d1a      	adds	r2, r3, #4
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800dfe4:	b29b      	uxth	r3, r3
 800dfe6:	3b01      	subs	r3, #1
 800dfe8:	b29a      	uxth	r2, r3
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800dff6:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	695b      	ldr	r3, [r3, #20]
 800dffe:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800e000:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e002:	2b00      	cmp	r3, #0
 800e004:	d065      	beq.n	800e0d2 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	695b      	ldr	r3, [r3, #20]
 800e00c:	f003 0301 	and.w	r3, r3, #1
 800e010:	2b01      	cmp	r3, #1
 800e012:	d118      	bne.n	800e046 <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	681a      	ldr	r2, [r3, #0]
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e01c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800e01e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e024:	1d1a      	adds	r2, r3, #4
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e030:	b29b      	uxth	r3, r3
 800e032:	3b01      	subs	r3, #1
 800e034:	b29a      	uxth	r2, r3
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e042:	853b      	strh	r3, [r7, #40]	@ 0x28
 800e044:	e045      	b.n	800e0d2 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e046:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800e048:	8bfb      	ldrh	r3, [r7, #30]
 800e04a:	429a      	cmp	r2, r3
 800e04c:	d21d      	bcs.n	800e08a <HAL_SPI_TransmitReceive+0x226>
 800e04e:	697b      	ldr	r3, [r7, #20]
 800e050:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e054:	2b00      	cmp	r3, #0
 800e056:	d018      	beq.n	800e08a <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	681a      	ldr	r2, [r3, #0]
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e060:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800e062:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e068:	1d1a      	adds	r2, r3, #4
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e074:	b29b      	uxth	r3, r3
 800e076:	3b01      	subs	r3, #1
 800e078:	b29a      	uxth	r2, r3
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e086:	853b      	strh	r3, [r7, #40]	@ 0x28
 800e088:	e023      	b.n	800e0d2 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e08a:	f7f8 fc79 	bl	8006980 <HAL_GetTick>
 800e08e:	4602      	mov	r2, r0
 800e090:	69bb      	ldr	r3, [r7, #24]
 800e092:	1ad3      	subs	r3, r2, r3
 800e094:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e096:	429a      	cmp	r2, r3
 800e098:	d803      	bhi.n	800e0a2 <HAL_SPI_TransmitReceive+0x23e>
 800e09a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e09c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0a0:	d102      	bne.n	800e0a8 <HAL_SPI_TransmitReceive+0x244>
 800e0a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d114      	bne.n	800e0d2 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800e0a8:	68f8      	ldr	r0, [r7, #12]
 800e0aa:	f000 fa15 	bl	800e4d8 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e0b4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	2201      	movs	r2, #1
 800e0c2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	2200      	movs	r2, #0
 800e0ca:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800e0ce:	2303      	movs	r3, #3
 800e0d0:	e1fd      	b.n	800e4ce <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e0d2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	f47f af67 	bne.w	800dfa8 <HAL_SPI_TransmitReceive+0x144>
 800e0da:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	f47f af63 	bne.w	800dfa8 <HAL_SPI_TransmitReceive+0x144>
 800e0e2:	e1ce      	b.n	800e482 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	68db      	ldr	r3, [r3, #12]
 800e0e8:	2b07      	cmp	r3, #7
 800e0ea:	f240 81c2 	bls.w	800e472 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800e0ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0f0:	085b      	lsrs	r3, r3, #1
 800e0f2:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e0f4:	e0c9      	b.n	800e28a <HAL_SPI_TransmitReceive+0x426>
 800e0f6:	bf00      	nop
 800e0f8:	40013000 	.word	0x40013000
 800e0fc:	40003800 	.word	0x40003800
 800e100:	40003c00 	.word	0x40003c00
 800e104:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	695b      	ldr	r3, [r3, #20]
 800e10e:	f003 0302 	and.w	r3, r3, #2
 800e112:	2b02      	cmp	r3, #2
 800e114:	d11f      	bne.n	800e156 <HAL_SPI_TransmitReceive+0x2f2>
 800e116:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d01c      	beq.n	800e156 <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800e11c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800e11e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800e120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e122:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800e124:	429a      	cmp	r2, r3
 800e126:	d216      	bcs.n	800e156 <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e12c:	881a      	ldrh	r2, [r3, #0]
 800e12e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e130:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e136:	1c9a      	adds	r2, r3, #2
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e142:	b29b      	uxth	r3, r3
 800e144:	3b01      	subs	r3, #1
 800e146:	b29a      	uxth	r2, r3
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e154:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	695b      	ldr	r3, [r3, #20]
 800e15c:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800e15e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e160:	2b00      	cmp	r3, #0
 800e162:	f000 8092 	beq.w	800e28a <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	695b      	ldr	r3, [r3, #20]
 800e16c:	f003 0301 	and.w	r3, r3, #1
 800e170:	2b01      	cmp	r3, #1
 800e172:	d118      	bne.n	800e1a6 <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e178:	6a3a      	ldr	r2, [r7, #32]
 800e17a:	8812      	ldrh	r2, [r2, #0]
 800e17c:	b292      	uxth	r2, r2
 800e17e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e184:	1c9a      	adds	r2, r3, #2
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e190:	b29b      	uxth	r3, r3
 800e192:	3b01      	subs	r3, #1
 800e194:	b29a      	uxth	r2, r3
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e1a2:	853b      	strh	r3, [r7, #40]	@ 0x28
 800e1a4:	e071      	b.n	800e28a <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e1a6:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800e1a8:	8bfb      	ldrh	r3, [r7, #30]
 800e1aa:	429a      	cmp	r2, r3
 800e1ac:	d228      	bcs.n	800e200 <HAL_SPI_TransmitReceive+0x39c>
 800e1ae:	697b      	ldr	r3, [r7, #20]
 800e1b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d023      	beq.n	800e200 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e1bc:	6a3a      	ldr	r2, [r7, #32]
 800e1be:	8812      	ldrh	r2, [r2, #0]
 800e1c0:	b292      	uxth	r2, r2
 800e1c2:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e1c8:	1c9a      	adds	r2, r3, #2
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e1d2:	6a3a      	ldr	r2, [r7, #32]
 800e1d4:	8812      	ldrh	r2, [r2, #0]
 800e1d6:	b292      	uxth	r2, r2
 800e1d8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e1de:	1c9a      	adds	r2, r3, #2
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e1ea:	b29b      	uxth	r3, r3
 800e1ec:	3b02      	subs	r3, #2
 800e1ee:	b29a      	uxth	r2, r3
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e1fc:	853b      	strh	r3, [r7, #40]	@ 0x28
 800e1fe:	e044      	b.n	800e28a <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800e200:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e202:	2b01      	cmp	r3, #1
 800e204:	d11d      	bne.n	800e242 <HAL_SPI_TransmitReceive+0x3de>
 800e206:	697b      	ldr	r3, [r7, #20]
 800e208:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d018      	beq.n	800e242 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e214:	6a3a      	ldr	r2, [r7, #32]
 800e216:	8812      	ldrh	r2, [r2, #0]
 800e218:	b292      	uxth	r2, r2
 800e21a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e220:	1c9a      	adds	r2, r3, #2
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e22c:	b29b      	uxth	r3, r3
 800e22e:	3b01      	subs	r3, #1
 800e230:	b29a      	uxth	r2, r3
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e23e:	853b      	strh	r3, [r7, #40]	@ 0x28
 800e240:	e023      	b.n	800e28a <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e242:	f7f8 fb9d 	bl	8006980 <HAL_GetTick>
 800e246:	4602      	mov	r2, r0
 800e248:	69bb      	ldr	r3, [r7, #24]
 800e24a:	1ad3      	subs	r3, r2, r3
 800e24c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e24e:	429a      	cmp	r2, r3
 800e250:	d803      	bhi.n	800e25a <HAL_SPI_TransmitReceive+0x3f6>
 800e252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e254:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e258:	d102      	bne.n	800e260 <HAL_SPI_TransmitReceive+0x3fc>
 800e25a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d114      	bne.n	800e28a <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800e260:	68f8      	ldr	r0, [r7, #12]
 800e262:	f000 f939 	bl	800e4d8 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e26c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	2201      	movs	r2, #1
 800e27a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	2200      	movs	r2, #0
 800e282:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800e286:	2303      	movs	r3, #3
 800e288:	e121      	b.n	800e4ce <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e28a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	f47f af3b 	bne.w	800e108 <HAL_SPI_TransmitReceive+0x2a4>
 800e292:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e294:	2b00      	cmp	r3, #0
 800e296:	f47f af37 	bne.w	800e108 <HAL_SPI_TransmitReceive+0x2a4>
 800e29a:	e0f2      	b.n	800e482 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	695b      	ldr	r3, [r3, #20]
 800e2a2:	f003 0302 	and.w	r3, r3, #2
 800e2a6:	2b02      	cmp	r3, #2
 800e2a8:	d121      	bne.n	800e2ee <HAL_SPI_TransmitReceive+0x48a>
 800e2aa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d01e      	beq.n	800e2ee <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800e2b0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800e2b2:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800e2b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2b6:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800e2b8:	429a      	cmp	r2, r3
 800e2ba:	d218      	bcs.n	800e2ee <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	3320      	adds	r3, #32
 800e2c6:	7812      	ldrb	r2, [r2, #0]
 800e2c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e2ce:	1c5a      	adds	r2, r3, #1
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e2da:	b29b      	uxth	r3, r3
 800e2dc:	3b01      	subs	r3, #1
 800e2de:	b29a      	uxth	r2, r3
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e2ec:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	695b      	ldr	r3, [r3, #20]
 800e2f4:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800e2f6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	f000 80ba 	beq.w	800e472 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	695b      	ldr	r3, [r3, #20]
 800e304:	f003 0301 	and.w	r3, r3, #1
 800e308:	2b01      	cmp	r3, #1
 800e30a:	d11b      	bne.n	800e344 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e318:	7812      	ldrb	r2, [r2, #0]
 800e31a:	b2d2      	uxtb	r2, r2
 800e31c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e322:	1c5a      	adds	r2, r3, #1
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e32e:	b29b      	uxth	r3, r3
 800e330:	3b01      	subs	r3, #1
 800e332:	b29a      	uxth	r2, r3
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e340:	853b      	strh	r3, [r7, #40]	@ 0x28
 800e342:	e096      	b.n	800e472 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e344:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800e346:	8bfb      	ldrh	r3, [r7, #30]
 800e348:	429a      	cmp	r2, r3
 800e34a:	d24a      	bcs.n	800e3e2 <HAL_SPI_TransmitReceive+0x57e>
 800e34c:	697b      	ldr	r3, [r7, #20]
 800e34e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e352:	2b00      	cmp	r3, #0
 800e354:	d045      	beq.n	800e3e2 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e362:	7812      	ldrb	r2, [r2, #0]
 800e364:	b2d2      	uxtb	r2, r2
 800e366:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e36c:	1c5a      	adds	r2, r3, #1
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e37e:	7812      	ldrb	r2, [r2, #0]
 800e380:	b2d2      	uxtb	r2, r2
 800e382:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e388:	1c5a      	adds	r2, r3, #1
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e39a:	7812      	ldrb	r2, [r2, #0]
 800e39c:	b2d2      	uxtb	r2, r2
 800e39e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e3a4:	1c5a      	adds	r2, r3, #1
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e3b6:	7812      	ldrb	r2, [r2, #0]
 800e3b8:	b2d2      	uxtb	r2, r2
 800e3ba:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e3c0:	1c5a      	adds	r2, r3, #1
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e3cc:	b29b      	uxth	r3, r3
 800e3ce:	3b04      	subs	r3, #4
 800e3d0:	b29a      	uxth	r2, r3
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e3de:	853b      	strh	r3, [r7, #40]	@ 0x28
 800e3e0:	e047      	b.n	800e472 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800e3e2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e3e4:	2b03      	cmp	r3, #3
 800e3e6:	d820      	bhi.n	800e42a <HAL_SPI_TransmitReceive+0x5c6>
 800e3e8:	697b      	ldr	r3, [r7, #20]
 800e3ea:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d01b      	beq.n	800e42a <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e3fe:	7812      	ldrb	r2, [r2, #0]
 800e400:	b2d2      	uxtb	r2, r2
 800e402:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e408:	1c5a      	adds	r2, r3, #1
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e414:	b29b      	uxth	r3, r3
 800e416:	3b01      	subs	r3, #1
 800e418:	b29a      	uxth	r2, r3
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e426:	853b      	strh	r3, [r7, #40]	@ 0x28
 800e428:	e023      	b.n	800e472 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e42a:	f7f8 faa9 	bl	8006980 <HAL_GetTick>
 800e42e:	4602      	mov	r2, r0
 800e430:	69bb      	ldr	r3, [r7, #24]
 800e432:	1ad3      	subs	r3, r2, r3
 800e434:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e436:	429a      	cmp	r2, r3
 800e438:	d803      	bhi.n	800e442 <HAL_SPI_TransmitReceive+0x5de>
 800e43a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e43c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e440:	d102      	bne.n	800e448 <HAL_SPI_TransmitReceive+0x5e4>
 800e442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e444:	2b00      	cmp	r3, #0
 800e446:	d114      	bne.n	800e472 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800e448:	68f8      	ldr	r0, [r7, #12]
 800e44a:	f000 f845 	bl	800e4d8 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e454:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	2201      	movs	r2, #1
 800e462:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	2200      	movs	r2, #0
 800e46a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800e46e:	2303      	movs	r3, #3
 800e470:	e02d      	b.n	800e4ce <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e472:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800e474:	2b00      	cmp	r3, #0
 800e476:	f47f af11 	bne.w	800e29c <HAL_SPI_TransmitReceive+0x438>
 800e47a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	f47f af0d 	bne.w	800e29c <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800e482:	69bb      	ldr	r3, [r7, #24]
 800e484:	9300      	str	r3, [sp, #0]
 800e486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e488:	2200      	movs	r2, #0
 800e48a:	2108      	movs	r1, #8
 800e48c:	68f8      	ldr	r0, [r7, #12]
 800e48e:	f000 f8c3 	bl	800e618 <SPI_WaitOnFlagUntilTimeout>
 800e492:	4603      	mov	r3, r0
 800e494:	2b00      	cmp	r3, #0
 800e496:	d007      	beq.n	800e4a8 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e49e:	f043 0220 	orr.w	r2, r3, #32
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e4a8:	68f8      	ldr	r0, [r7, #12]
 800e4aa:	f000 f815 	bl	800e4d8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	2201      	movs	r2, #1
 800e4b2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	2200      	movs	r2, #0
 800e4ba:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d001      	beq.n	800e4cc <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 800e4c8:	2301      	movs	r3, #1
 800e4ca:	e000      	b.n	800e4ce <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 800e4cc:	2300      	movs	r3, #0
  }
}
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	3730      	adds	r7, #48	@ 0x30
 800e4d2:	46bd      	mov	sp, r7
 800e4d4:	bd80      	pop	{r7, pc}
 800e4d6:	bf00      	nop

0800e4d8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800e4d8:	b480      	push	{r7}
 800e4da:	b085      	sub	sp, #20
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	695b      	ldr	r3, [r3, #20]
 800e4e6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	699a      	ldr	r2, [r3, #24]
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	f042 0208 	orr.w	r2, r2, #8
 800e4f6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	699a      	ldr	r2, [r3, #24]
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	f042 0210 	orr.w	r2, r2, #16
 800e506:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	681a      	ldr	r2, [r3, #0]
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	f022 0201 	bic.w	r2, r2, #1
 800e516:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	6919      	ldr	r1, [r3, #16]
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	681a      	ldr	r2, [r3, #0]
 800e522:	4b3c      	ldr	r3, [pc, #240]	@ (800e614 <SPI_CloseTransfer+0x13c>)
 800e524:	400b      	ands	r3, r1
 800e526:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	689a      	ldr	r2, [r3, #8]
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800e536:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800e53e:	b2db      	uxtb	r3, r3
 800e540:	2b04      	cmp	r3, #4
 800e542:	d014      	beq.n	800e56e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	f003 0320 	and.w	r3, r3, #32
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d00f      	beq.n	800e56e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e554:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	699a      	ldr	r2, [r3, #24]
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	f042 0220 	orr.w	r2, r2, #32
 800e56c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800e574:	b2db      	uxtb	r3, r3
 800e576:	2b03      	cmp	r3, #3
 800e578:	d014      	beq.n	800e5a4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e580:	2b00      	cmp	r3, #0
 800e582:	d00f      	beq.n	800e5a4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e58a:	f043 0204 	orr.w	r2, r3, #4
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	699a      	ldr	r2, [r3, #24]
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e5a2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d00f      	beq.n	800e5ce <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e5b4:	f043 0201 	orr.w	r2, r3, #1
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	699a      	ldr	r2, [r3, #24]
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e5cc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d00f      	beq.n	800e5f8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e5de:	f043 0208 	orr.w	r2, r3, #8
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	699a      	ldr	r2, [r3, #24]
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e5f6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	2200      	movs	r2, #0
 800e5fc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	2200      	movs	r2, #0
 800e604:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800e608:	bf00      	nop
 800e60a:	3714      	adds	r7, #20
 800e60c:	46bd      	mov	sp, r7
 800e60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e612:	4770      	bx	lr
 800e614:	fffffc90 	.word	0xfffffc90

0800e618 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800e618:	b580      	push	{r7, lr}
 800e61a:	b084      	sub	sp, #16
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	60f8      	str	r0, [r7, #12]
 800e620:	60b9      	str	r1, [r7, #8]
 800e622:	603b      	str	r3, [r7, #0]
 800e624:	4613      	mov	r3, r2
 800e626:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800e628:	e010      	b.n	800e64c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e62a:	f7f8 f9a9 	bl	8006980 <HAL_GetTick>
 800e62e:	4602      	mov	r2, r0
 800e630:	69bb      	ldr	r3, [r7, #24]
 800e632:	1ad3      	subs	r3, r2, r3
 800e634:	683a      	ldr	r2, [r7, #0]
 800e636:	429a      	cmp	r2, r3
 800e638:	d803      	bhi.n	800e642 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800e63a:	683b      	ldr	r3, [r7, #0]
 800e63c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e640:	d102      	bne.n	800e648 <SPI_WaitOnFlagUntilTimeout+0x30>
 800e642:	683b      	ldr	r3, [r7, #0]
 800e644:	2b00      	cmp	r3, #0
 800e646:	d101      	bne.n	800e64c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800e648:	2303      	movs	r3, #3
 800e64a:	e00f      	b.n	800e66c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	695a      	ldr	r2, [r3, #20]
 800e652:	68bb      	ldr	r3, [r7, #8]
 800e654:	4013      	ands	r3, r2
 800e656:	68ba      	ldr	r2, [r7, #8]
 800e658:	429a      	cmp	r2, r3
 800e65a:	bf0c      	ite	eq
 800e65c:	2301      	moveq	r3, #1
 800e65e:	2300      	movne	r3, #0
 800e660:	b2db      	uxtb	r3, r3
 800e662:	461a      	mov	r2, r3
 800e664:	79fb      	ldrb	r3, [r7, #7]
 800e666:	429a      	cmp	r2, r3
 800e668:	d0df      	beq.n	800e62a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800e66a:	2300      	movs	r3, #0
}
 800e66c:	4618      	mov	r0, r3
 800e66e:	3710      	adds	r7, #16
 800e670:	46bd      	mov	sp, r7
 800e672:	bd80      	pop	{r7, pc}

0800e674 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800e674:	b480      	push	{r7}
 800e676:	b085      	sub	sp, #20
 800e678:	af00      	add	r7, sp, #0
 800e67a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e680:	095b      	lsrs	r3, r3, #5
 800e682:	3301      	adds	r3, #1
 800e684:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	68db      	ldr	r3, [r3, #12]
 800e68a:	3301      	adds	r3, #1
 800e68c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e68e:	68bb      	ldr	r3, [r7, #8]
 800e690:	3307      	adds	r3, #7
 800e692:	08db      	lsrs	r3, r3, #3
 800e694:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800e696:	68bb      	ldr	r3, [r7, #8]
 800e698:	68fa      	ldr	r2, [r7, #12]
 800e69a:	fb02 f303 	mul.w	r3, r2, r3
}
 800e69e:	4618      	mov	r0, r3
 800e6a0:	3714      	adds	r7, #20
 800e6a2:	46bd      	mov	sp, r7
 800e6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a8:	4770      	bx	lr

0800e6aa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e6aa:	b580      	push	{r7, lr}
 800e6ac:	b082      	sub	sp, #8
 800e6ae:	af00      	add	r7, sp, #0
 800e6b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d101      	bne.n	800e6bc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e6b8:	2301      	movs	r3, #1
 800e6ba:	e049      	b.n	800e750 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e6c2:	b2db      	uxtb	r3, r3
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d106      	bne.n	800e6d6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	2200      	movs	r2, #0
 800e6cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e6d0:	6878      	ldr	r0, [r7, #4]
 800e6d2:	f7f5 fb4f 	bl	8003d74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	2202      	movs	r2, #2
 800e6da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	681a      	ldr	r2, [r3, #0]
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	3304      	adds	r3, #4
 800e6e6:	4619      	mov	r1, r3
 800e6e8:	4610      	mov	r0, r2
 800e6ea:	f000 fc57 	bl	800ef9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	2201      	movs	r2, #1
 800e6f2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	2201      	movs	r2, #1
 800e6fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	2201      	movs	r2, #1
 800e702:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	2201      	movs	r2, #1
 800e70a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	2201      	movs	r2, #1
 800e712:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	2201      	movs	r2, #1
 800e71a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	2201      	movs	r2, #1
 800e722:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	2201      	movs	r2, #1
 800e72a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	2201      	movs	r2, #1
 800e732:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	2201      	movs	r2, #1
 800e73a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	2201      	movs	r2, #1
 800e742:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	2201      	movs	r2, #1
 800e74a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e74e:	2300      	movs	r3, #0
}
 800e750:	4618      	mov	r0, r3
 800e752:	3708      	adds	r7, #8
 800e754:	46bd      	mov	sp, r7
 800e756:	bd80      	pop	{r7, pc}

0800e758 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e758:	b480      	push	{r7}
 800e75a:	b085      	sub	sp, #20
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e766:	b2db      	uxtb	r3, r3
 800e768:	2b01      	cmp	r3, #1
 800e76a:	d001      	beq.n	800e770 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e76c:	2301      	movs	r3, #1
 800e76e:	e054      	b.n	800e81a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	2202      	movs	r2, #2
 800e774:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	68da      	ldr	r2, [r3, #12]
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	f042 0201 	orr.w	r2, r2, #1
 800e786:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	4a26      	ldr	r2, [pc, #152]	@ (800e828 <HAL_TIM_Base_Start_IT+0xd0>)
 800e78e:	4293      	cmp	r3, r2
 800e790:	d022      	beq.n	800e7d8 <HAL_TIM_Base_Start_IT+0x80>
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e79a:	d01d      	beq.n	800e7d8 <HAL_TIM_Base_Start_IT+0x80>
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	4a22      	ldr	r2, [pc, #136]	@ (800e82c <HAL_TIM_Base_Start_IT+0xd4>)
 800e7a2:	4293      	cmp	r3, r2
 800e7a4:	d018      	beq.n	800e7d8 <HAL_TIM_Base_Start_IT+0x80>
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	4a21      	ldr	r2, [pc, #132]	@ (800e830 <HAL_TIM_Base_Start_IT+0xd8>)
 800e7ac:	4293      	cmp	r3, r2
 800e7ae:	d013      	beq.n	800e7d8 <HAL_TIM_Base_Start_IT+0x80>
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	4a1f      	ldr	r2, [pc, #124]	@ (800e834 <HAL_TIM_Base_Start_IT+0xdc>)
 800e7b6:	4293      	cmp	r3, r2
 800e7b8:	d00e      	beq.n	800e7d8 <HAL_TIM_Base_Start_IT+0x80>
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	4a1e      	ldr	r2, [pc, #120]	@ (800e838 <HAL_TIM_Base_Start_IT+0xe0>)
 800e7c0:	4293      	cmp	r3, r2
 800e7c2:	d009      	beq.n	800e7d8 <HAL_TIM_Base_Start_IT+0x80>
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	4a1c      	ldr	r2, [pc, #112]	@ (800e83c <HAL_TIM_Base_Start_IT+0xe4>)
 800e7ca:	4293      	cmp	r3, r2
 800e7cc:	d004      	beq.n	800e7d8 <HAL_TIM_Base_Start_IT+0x80>
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	4a1b      	ldr	r2, [pc, #108]	@ (800e840 <HAL_TIM_Base_Start_IT+0xe8>)
 800e7d4:	4293      	cmp	r3, r2
 800e7d6:	d115      	bne.n	800e804 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	689a      	ldr	r2, [r3, #8]
 800e7de:	4b19      	ldr	r3, [pc, #100]	@ (800e844 <HAL_TIM_Base_Start_IT+0xec>)
 800e7e0:	4013      	ands	r3, r2
 800e7e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	2b06      	cmp	r3, #6
 800e7e8:	d015      	beq.n	800e816 <HAL_TIM_Base_Start_IT+0xbe>
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e7f0:	d011      	beq.n	800e816 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	681a      	ldr	r2, [r3, #0]
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	f042 0201 	orr.w	r2, r2, #1
 800e800:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e802:	e008      	b.n	800e816 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	681a      	ldr	r2, [r3, #0]
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	f042 0201 	orr.w	r2, r2, #1
 800e812:	601a      	str	r2, [r3, #0]
 800e814:	e000      	b.n	800e818 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e816:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e818:	2300      	movs	r3, #0
}
 800e81a:	4618      	mov	r0, r3
 800e81c:	3714      	adds	r7, #20
 800e81e:	46bd      	mov	sp, r7
 800e820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e824:	4770      	bx	lr
 800e826:	bf00      	nop
 800e828:	40010000 	.word	0x40010000
 800e82c:	40000400 	.word	0x40000400
 800e830:	40000800 	.word	0x40000800
 800e834:	40000c00 	.word	0x40000c00
 800e838:	40010400 	.word	0x40010400
 800e83c:	40001800 	.word	0x40001800
 800e840:	40014000 	.word	0x40014000
 800e844:	00010007 	.word	0x00010007

0800e848 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e848:	b580      	push	{r7, lr}
 800e84a:	b082      	sub	sp, #8
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	2b00      	cmp	r3, #0
 800e854:	d101      	bne.n	800e85a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e856:	2301      	movs	r3, #1
 800e858:	e049      	b.n	800e8ee <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e860:	b2db      	uxtb	r3, r3
 800e862:	2b00      	cmp	r3, #0
 800e864:	d106      	bne.n	800e874 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	2200      	movs	r2, #0
 800e86a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e86e:	6878      	ldr	r0, [r7, #4]
 800e870:	f7f5 fa32 	bl	8003cd8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	2202      	movs	r2, #2
 800e878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	681a      	ldr	r2, [r3, #0]
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	3304      	adds	r3, #4
 800e884:	4619      	mov	r1, r3
 800e886:	4610      	mov	r0, r2
 800e888:	f000 fb88 	bl	800ef9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	2201      	movs	r2, #1
 800e890:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	2201      	movs	r2, #1
 800e898:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	2201      	movs	r2, #1
 800e8a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	2201      	movs	r2, #1
 800e8a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	2201      	movs	r2, #1
 800e8b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	2201      	movs	r2, #1
 800e8b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	2201      	movs	r2, #1
 800e8c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	2201      	movs	r2, #1
 800e8c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	2201      	movs	r2, #1
 800e8d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	2201      	movs	r2, #1
 800e8d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	2201      	movs	r2, #1
 800e8e0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	2201      	movs	r2, #1
 800e8e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e8ec:	2300      	movs	r3, #0
}
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	3708      	adds	r7, #8
 800e8f2:	46bd      	mov	sp, r7
 800e8f4:	bd80      	pop	{r7, pc}
	...

0800e8f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e8f8:	b580      	push	{r7, lr}
 800e8fa:	b084      	sub	sp, #16
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	6078      	str	r0, [r7, #4]
 800e900:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e902:	683b      	ldr	r3, [r7, #0]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d109      	bne.n	800e91c <HAL_TIM_PWM_Start+0x24>
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800e90e:	b2db      	uxtb	r3, r3
 800e910:	2b01      	cmp	r3, #1
 800e912:	bf14      	ite	ne
 800e914:	2301      	movne	r3, #1
 800e916:	2300      	moveq	r3, #0
 800e918:	b2db      	uxtb	r3, r3
 800e91a:	e03c      	b.n	800e996 <HAL_TIM_PWM_Start+0x9e>
 800e91c:	683b      	ldr	r3, [r7, #0]
 800e91e:	2b04      	cmp	r3, #4
 800e920:	d109      	bne.n	800e936 <HAL_TIM_PWM_Start+0x3e>
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800e928:	b2db      	uxtb	r3, r3
 800e92a:	2b01      	cmp	r3, #1
 800e92c:	bf14      	ite	ne
 800e92e:	2301      	movne	r3, #1
 800e930:	2300      	moveq	r3, #0
 800e932:	b2db      	uxtb	r3, r3
 800e934:	e02f      	b.n	800e996 <HAL_TIM_PWM_Start+0x9e>
 800e936:	683b      	ldr	r3, [r7, #0]
 800e938:	2b08      	cmp	r3, #8
 800e93a:	d109      	bne.n	800e950 <HAL_TIM_PWM_Start+0x58>
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e942:	b2db      	uxtb	r3, r3
 800e944:	2b01      	cmp	r3, #1
 800e946:	bf14      	ite	ne
 800e948:	2301      	movne	r3, #1
 800e94a:	2300      	moveq	r3, #0
 800e94c:	b2db      	uxtb	r3, r3
 800e94e:	e022      	b.n	800e996 <HAL_TIM_PWM_Start+0x9e>
 800e950:	683b      	ldr	r3, [r7, #0]
 800e952:	2b0c      	cmp	r3, #12
 800e954:	d109      	bne.n	800e96a <HAL_TIM_PWM_Start+0x72>
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e95c:	b2db      	uxtb	r3, r3
 800e95e:	2b01      	cmp	r3, #1
 800e960:	bf14      	ite	ne
 800e962:	2301      	movne	r3, #1
 800e964:	2300      	moveq	r3, #0
 800e966:	b2db      	uxtb	r3, r3
 800e968:	e015      	b.n	800e996 <HAL_TIM_PWM_Start+0x9e>
 800e96a:	683b      	ldr	r3, [r7, #0]
 800e96c:	2b10      	cmp	r3, #16
 800e96e:	d109      	bne.n	800e984 <HAL_TIM_PWM_Start+0x8c>
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e976:	b2db      	uxtb	r3, r3
 800e978:	2b01      	cmp	r3, #1
 800e97a:	bf14      	ite	ne
 800e97c:	2301      	movne	r3, #1
 800e97e:	2300      	moveq	r3, #0
 800e980:	b2db      	uxtb	r3, r3
 800e982:	e008      	b.n	800e996 <HAL_TIM_PWM_Start+0x9e>
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800e98a:	b2db      	uxtb	r3, r3
 800e98c:	2b01      	cmp	r3, #1
 800e98e:	bf14      	ite	ne
 800e990:	2301      	movne	r3, #1
 800e992:	2300      	moveq	r3, #0
 800e994:	b2db      	uxtb	r3, r3
 800e996:	2b00      	cmp	r3, #0
 800e998:	d001      	beq.n	800e99e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800e99a:	2301      	movs	r3, #1
 800e99c:	e0a1      	b.n	800eae2 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e99e:	683b      	ldr	r3, [r7, #0]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d104      	bne.n	800e9ae <HAL_TIM_PWM_Start+0xb6>
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	2202      	movs	r2, #2
 800e9a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e9ac:	e023      	b.n	800e9f6 <HAL_TIM_PWM_Start+0xfe>
 800e9ae:	683b      	ldr	r3, [r7, #0]
 800e9b0:	2b04      	cmp	r3, #4
 800e9b2:	d104      	bne.n	800e9be <HAL_TIM_PWM_Start+0xc6>
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	2202      	movs	r2, #2
 800e9b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e9bc:	e01b      	b.n	800e9f6 <HAL_TIM_PWM_Start+0xfe>
 800e9be:	683b      	ldr	r3, [r7, #0]
 800e9c0:	2b08      	cmp	r3, #8
 800e9c2:	d104      	bne.n	800e9ce <HAL_TIM_PWM_Start+0xd6>
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	2202      	movs	r2, #2
 800e9c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e9cc:	e013      	b.n	800e9f6 <HAL_TIM_PWM_Start+0xfe>
 800e9ce:	683b      	ldr	r3, [r7, #0]
 800e9d0:	2b0c      	cmp	r3, #12
 800e9d2:	d104      	bne.n	800e9de <HAL_TIM_PWM_Start+0xe6>
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	2202      	movs	r2, #2
 800e9d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e9dc:	e00b      	b.n	800e9f6 <HAL_TIM_PWM_Start+0xfe>
 800e9de:	683b      	ldr	r3, [r7, #0]
 800e9e0:	2b10      	cmp	r3, #16
 800e9e2:	d104      	bne.n	800e9ee <HAL_TIM_PWM_Start+0xf6>
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	2202      	movs	r2, #2
 800e9e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e9ec:	e003      	b.n	800e9f6 <HAL_TIM_PWM_Start+0xfe>
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	2202      	movs	r2, #2
 800e9f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	2201      	movs	r2, #1
 800e9fc:	6839      	ldr	r1, [r7, #0]
 800e9fe:	4618      	mov	r0, r3
 800ea00:	f000 fe48 	bl	800f694 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	4a38      	ldr	r2, [pc, #224]	@ (800eaec <HAL_TIM_PWM_Start+0x1f4>)
 800ea0a:	4293      	cmp	r3, r2
 800ea0c:	d013      	beq.n	800ea36 <HAL_TIM_PWM_Start+0x13e>
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	4a37      	ldr	r2, [pc, #220]	@ (800eaf0 <HAL_TIM_PWM_Start+0x1f8>)
 800ea14:	4293      	cmp	r3, r2
 800ea16:	d00e      	beq.n	800ea36 <HAL_TIM_PWM_Start+0x13e>
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	4a35      	ldr	r2, [pc, #212]	@ (800eaf4 <HAL_TIM_PWM_Start+0x1fc>)
 800ea1e:	4293      	cmp	r3, r2
 800ea20:	d009      	beq.n	800ea36 <HAL_TIM_PWM_Start+0x13e>
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	4a34      	ldr	r2, [pc, #208]	@ (800eaf8 <HAL_TIM_PWM_Start+0x200>)
 800ea28:	4293      	cmp	r3, r2
 800ea2a:	d004      	beq.n	800ea36 <HAL_TIM_PWM_Start+0x13e>
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	4a32      	ldr	r2, [pc, #200]	@ (800eafc <HAL_TIM_PWM_Start+0x204>)
 800ea32:	4293      	cmp	r3, r2
 800ea34:	d101      	bne.n	800ea3a <HAL_TIM_PWM_Start+0x142>
 800ea36:	2301      	movs	r3, #1
 800ea38:	e000      	b.n	800ea3c <HAL_TIM_PWM_Start+0x144>
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d007      	beq.n	800ea50 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ea4e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	4a25      	ldr	r2, [pc, #148]	@ (800eaec <HAL_TIM_PWM_Start+0x1f4>)
 800ea56:	4293      	cmp	r3, r2
 800ea58:	d022      	beq.n	800eaa0 <HAL_TIM_PWM_Start+0x1a8>
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ea62:	d01d      	beq.n	800eaa0 <HAL_TIM_PWM_Start+0x1a8>
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	4a25      	ldr	r2, [pc, #148]	@ (800eb00 <HAL_TIM_PWM_Start+0x208>)
 800ea6a:	4293      	cmp	r3, r2
 800ea6c:	d018      	beq.n	800eaa0 <HAL_TIM_PWM_Start+0x1a8>
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	4a24      	ldr	r2, [pc, #144]	@ (800eb04 <HAL_TIM_PWM_Start+0x20c>)
 800ea74:	4293      	cmp	r3, r2
 800ea76:	d013      	beq.n	800eaa0 <HAL_TIM_PWM_Start+0x1a8>
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	4a22      	ldr	r2, [pc, #136]	@ (800eb08 <HAL_TIM_PWM_Start+0x210>)
 800ea7e:	4293      	cmp	r3, r2
 800ea80:	d00e      	beq.n	800eaa0 <HAL_TIM_PWM_Start+0x1a8>
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	4a1a      	ldr	r2, [pc, #104]	@ (800eaf0 <HAL_TIM_PWM_Start+0x1f8>)
 800ea88:	4293      	cmp	r3, r2
 800ea8a:	d009      	beq.n	800eaa0 <HAL_TIM_PWM_Start+0x1a8>
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	4a1e      	ldr	r2, [pc, #120]	@ (800eb0c <HAL_TIM_PWM_Start+0x214>)
 800ea92:	4293      	cmp	r3, r2
 800ea94:	d004      	beq.n	800eaa0 <HAL_TIM_PWM_Start+0x1a8>
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	4a16      	ldr	r2, [pc, #88]	@ (800eaf4 <HAL_TIM_PWM_Start+0x1fc>)
 800ea9c:	4293      	cmp	r3, r2
 800ea9e:	d115      	bne.n	800eacc <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	689a      	ldr	r2, [r3, #8]
 800eaa6:	4b1a      	ldr	r3, [pc, #104]	@ (800eb10 <HAL_TIM_PWM_Start+0x218>)
 800eaa8:	4013      	ands	r3, r2
 800eaaa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	2b06      	cmp	r3, #6
 800eab0:	d015      	beq.n	800eade <HAL_TIM_PWM_Start+0x1e6>
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800eab8:	d011      	beq.n	800eade <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	681a      	ldr	r2, [r3, #0]
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	f042 0201 	orr.w	r2, r2, #1
 800eac8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eaca:	e008      	b.n	800eade <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	681a      	ldr	r2, [r3, #0]
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	f042 0201 	orr.w	r2, r2, #1
 800eada:	601a      	str	r2, [r3, #0]
 800eadc:	e000      	b.n	800eae0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eade:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800eae0:	2300      	movs	r3, #0
}
 800eae2:	4618      	mov	r0, r3
 800eae4:	3710      	adds	r7, #16
 800eae6:	46bd      	mov	sp, r7
 800eae8:	bd80      	pop	{r7, pc}
 800eaea:	bf00      	nop
 800eaec:	40010000 	.word	0x40010000
 800eaf0:	40010400 	.word	0x40010400
 800eaf4:	40014000 	.word	0x40014000
 800eaf8:	40014400 	.word	0x40014400
 800eafc:	40014800 	.word	0x40014800
 800eb00:	40000400 	.word	0x40000400
 800eb04:	40000800 	.word	0x40000800
 800eb08:	40000c00 	.word	0x40000c00
 800eb0c:	40001800 	.word	0x40001800
 800eb10:	00010007 	.word	0x00010007

0800eb14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800eb14:	b580      	push	{r7, lr}
 800eb16:	b084      	sub	sp, #16
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	68db      	ldr	r3, [r3, #12]
 800eb22:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	691b      	ldr	r3, [r3, #16]
 800eb2a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800eb2c:	68bb      	ldr	r3, [r7, #8]
 800eb2e:	f003 0302 	and.w	r3, r3, #2
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d020      	beq.n	800eb78 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	f003 0302 	and.w	r3, r3, #2
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d01b      	beq.n	800eb78 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	f06f 0202 	mvn.w	r2, #2
 800eb48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	2201      	movs	r2, #1
 800eb4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	699b      	ldr	r3, [r3, #24]
 800eb56:	f003 0303 	and.w	r3, r3, #3
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d003      	beq.n	800eb66 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800eb5e:	6878      	ldr	r0, [r7, #4]
 800eb60:	f000 f9fe 	bl	800ef60 <HAL_TIM_IC_CaptureCallback>
 800eb64:	e005      	b.n	800eb72 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800eb66:	6878      	ldr	r0, [r7, #4]
 800eb68:	f000 f9f0 	bl	800ef4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eb6c:	6878      	ldr	r0, [r7, #4]
 800eb6e:	f000 fa01 	bl	800ef74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	2200      	movs	r2, #0
 800eb76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800eb78:	68bb      	ldr	r3, [r7, #8]
 800eb7a:	f003 0304 	and.w	r3, r3, #4
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d020      	beq.n	800ebc4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	f003 0304 	and.w	r3, r3, #4
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d01b      	beq.n	800ebc4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	f06f 0204 	mvn.w	r2, #4
 800eb94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	2202      	movs	r2, #2
 800eb9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	699b      	ldr	r3, [r3, #24]
 800eba2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d003      	beq.n	800ebb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ebaa:	6878      	ldr	r0, [r7, #4]
 800ebac:	f000 f9d8 	bl	800ef60 <HAL_TIM_IC_CaptureCallback>
 800ebb0:	e005      	b.n	800ebbe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ebb2:	6878      	ldr	r0, [r7, #4]
 800ebb4:	f000 f9ca 	bl	800ef4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ebb8:	6878      	ldr	r0, [r7, #4]
 800ebba:	f000 f9db 	bl	800ef74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	2200      	movs	r2, #0
 800ebc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ebc4:	68bb      	ldr	r3, [r7, #8]
 800ebc6:	f003 0308 	and.w	r3, r3, #8
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d020      	beq.n	800ec10 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	f003 0308 	and.w	r3, r3, #8
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d01b      	beq.n	800ec10 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	f06f 0208 	mvn.w	r2, #8
 800ebe0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	2204      	movs	r2, #4
 800ebe6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	69db      	ldr	r3, [r3, #28]
 800ebee:	f003 0303 	and.w	r3, r3, #3
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d003      	beq.n	800ebfe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ebf6:	6878      	ldr	r0, [r7, #4]
 800ebf8:	f000 f9b2 	bl	800ef60 <HAL_TIM_IC_CaptureCallback>
 800ebfc:	e005      	b.n	800ec0a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ebfe:	6878      	ldr	r0, [r7, #4]
 800ec00:	f000 f9a4 	bl	800ef4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ec04:	6878      	ldr	r0, [r7, #4]
 800ec06:	f000 f9b5 	bl	800ef74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	2200      	movs	r2, #0
 800ec0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800ec10:	68bb      	ldr	r3, [r7, #8]
 800ec12:	f003 0310 	and.w	r3, r3, #16
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d020      	beq.n	800ec5c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	f003 0310 	and.w	r3, r3, #16
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d01b      	beq.n	800ec5c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	f06f 0210 	mvn.w	r2, #16
 800ec2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	2208      	movs	r2, #8
 800ec32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	69db      	ldr	r3, [r3, #28]
 800ec3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d003      	beq.n	800ec4a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ec42:	6878      	ldr	r0, [r7, #4]
 800ec44:	f000 f98c 	bl	800ef60 <HAL_TIM_IC_CaptureCallback>
 800ec48:	e005      	b.n	800ec56 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ec4a:	6878      	ldr	r0, [r7, #4]
 800ec4c:	f000 f97e 	bl	800ef4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ec50:	6878      	ldr	r0, [r7, #4]
 800ec52:	f000 f98f 	bl	800ef74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	2200      	movs	r2, #0
 800ec5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ec5c:	68bb      	ldr	r3, [r7, #8]
 800ec5e:	f003 0301 	and.w	r3, r3, #1
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d00c      	beq.n	800ec80 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	f003 0301 	and.w	r3, r3, #1
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d007      	beq.n	800ec80 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	f06f 0201 	mvn.w	r2, #1
 800ec78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ec7a:	6878      	ldr	r0, [r7, #4]
 800ec7c:	f7f4 fb02 	bl	8003284 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ec80:	68bb      	ldr	r3, [r7, #8]
 800ec82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d104      	bne.n	800ec94 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800ec8a:	68bb      	ldr	r3, [r7, #8]
 800ec8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d00c      	beq.n	800ecae <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d007      	beq.n	800ecae <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800eca6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800eca8:	6878      	ldr	r0, [r7, #4]
 800ecaa:	f000 fdb1 	bl	800f810 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ecae:	68bb      	ldr	r3, [r7, #8]
 800ecb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d00c      	beq.n	800ecd2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d007      	beq.n	800ecd2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800ecca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800eccc:	6878      	ldr	r0, [r7, #4]
 800ecce:	f000 fda9 	bl	800f824 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ecd2:	68bb      	ldr	r3, [r7, #8]
 800ecd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d00c      	beq.n	800ecf6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d007      	beq.n	800ecf6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800ecee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ecf0:	6878      	ldr	r0, [r7, #4]
 800ecf2:	f000 f949 	bl	800ef88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ecf6:	68bb      	ldr	r3, [r7, #8]
 800ecf8:	f003 0320 	and.w	r3, r3, #32
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d00c      	beq.n	800ed1a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	f003 0320 	and.w	r3, r3, #32
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d007      	beq.n	800ed1a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	f06f 0220 	mvn.w	r2, #32
 800ed12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ed14:	6878      	ldr	r0, [r7, #4]
 800ed16:	f000 fd71 	bl	800f7fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ed1a:	bf00      	nop
 800ed1c:	3710      	adds	r7, #16
 800ed1e:	46bd      	mov	sp, r7
 800ed20:	bd80      	pop	{r7, pc}
	...

0800ed24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ed24:	b580      	push	{r7, lr}
 800ed26:	b086      	sub	sp, #24
 800ed28:	af00      	add	r7, sp, #0
 800ed2a:	60f8      	str	r0, [r7, #12]
 800ed2c:	60b9      	str	r1, [r7, #8]
 800ed2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ed30:	2300      	movs	r3, #0
 800ed32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ed3a:	2b01      	cmp	r3, #1
 800ed3c:	d101      	bne.n	800ed42 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ed3e:	2302      	movs	r3, #2
 800ed40:	e0ff      	b.n	800ef42 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	2201      	movs	r2, #1
 800ed46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	2b14      	cmp	r3, #20
 800ed4e:	f200 80f0 	bhi.w	800ef32 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ed52:	a201      	add	r2, pc, #4	@ (adr r2, 800ed58 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ed54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed58:	0800edad 	.word	0x0800edad
 800ed5c:	0800ef33 	.word	0x0800ef33
 800ed60:	0800ef33 	.word	0x0800ef33
 800ed64:	0800ef33 	.word	0x0800ef33
 800ed68:	0800eded 	.word	0x0800eded
 800ed6c:	0800ef33 	.word	0x0800ef33
 800ed70:	0800ef33 	.word	0x0800ef33
 800ed74:	0800ef33 	.word	0x0800ef33
 800ed78:	0800ee2f 	.word	0x0800ee2f
 800ed7c:	0800ef33 	.word	0x0800ef33
 800ed80:	0800ef33 	.word	0x0800ef33
 800ed84:	0800ef33 	.word	0x0800ef33
 800ed88:	0800ee6f 	.word	0x0800ee6f
 800ed8c:	0800ef33 	.word	0x0800ef33
 800ed90:	0800ef33 	.word	0x0800ef33
 800ed94:	0800ef33 	.word	0x0800ef33
 800ed98:	0800eeb1 	.word	0x0800eeb1
 800ed9c:	0800ef33 	.word	0x0800ef33
 800eda0:	0800ef33 	.word	0x0800ef33
 800eda4:	0800ef33 	.word	0x0800ef33
 800eda8:	0800eef1 	.word	0x0800eef1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	68b9      	ldr	r1, [r7, #8]
 800edb2:	4618      	mov	r0, r3
 800edb4:	f000 f998 	bl	800f0e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	699a      	ldr	r2, [r3, #24]
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	f042 0208 	orr.w	r2, r2, #8
 800edc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	699a      	ldr	r2, [r3, #24]
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	f022 0204 	bic.w	r2, r2, #4
 800edd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	6999      	ldr	r1, [r3, #24]
 800edde:	68bb      	ldr	r3, [r7, #8]
 800ede0:	691a      	ldr	r2, [r3, #16]
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	430a      	orrs	r2, r1
 800ede8:	619a      	str	r2, [r3, #24]
      break;
 800edea:	e0a5      	b.n	800ef38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	68b9      	ldr	r1, [r7, #8]
 800edf2:	4618      	mov	r0, r3
 800edf4:	f000 fa08 	bl	800f208 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	699a      	ldr	r2, [r3, #24]
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ee06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	699a      	ldr	r2, [r3, #24]
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ee16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	6999      	ldr	r1, [r3, #24]
 800ee1e:	68bb      	ldr	r3, [r7, #8]
 800ee20:	691b      	ldr	r3, [r3, #16]
 800ee22:	021a      	lsls	r2, r3, #8
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	430a      	orrs	r2, r1
 800ee2a:	619a      	str	r2, [r3, #24]
      break;
 800ee2c:	e084      	b.n	800ef38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	68b9      	ldr	r1, [r7, #8]
 800ee34:	4618      	mov	r0, r3
 800ee36:	f000 fa71 	bl	800f31c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	69da      	ldr	r2, [r3, #28]
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	f042 0208 	orr.w	r2, r2, #8
 800ee48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	69da      	ldr	r2, [r3, #28]
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	f022 0204 	bic.w	r2, r2, #4
 800ee58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	69d9      	ldr	r1, [r3, #28]
 800ee60:	68bb      	ldr	r3, [r7, #8]
 800ee62:	691a      	ldr	r2, [r3, #16]
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	430a      	orrs	r2, r1
 800ee6a:	61da      	str	r2, [r3, #28]
      break;
 800ee6c:	e064      	b.n	800ef38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	68b9      	ldr	r1, [r7, #8]
 800ee74:	4618      	mov	r0, r3
 800ee76:	f000 fad9 	bl	800f42c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	69da      	ldr	r2, [r3, #28]
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ee88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	69da      	ldr	r2, [r3, #28]
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ee98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	69d9      	ldr	r1, [r3, #28]
 800eea0:	68bb      	ldr	r3, [r7, #8]
 800eea2:	691b      	ldr	r3, [r3, #16]
 800eea4:	021a      	lsls	r2, r3, #8
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	430a      	orrs	r2, r1
 800eeac:	61da      	str	r2, [r3, #28]
      break;
 800eeae:	e043      	b.n	800ef38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	68b9      	ldr	r1, [r7, #8]
 800eeb6:	4618      	mov	r0, r3
 800eeb8:	f000 fb22 	bl	800f500 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	f042 0208 	orr.w	r2, r2, #8
 800eeca:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	f022 0204 	bic.w	r2, r2, #4
 800eeda:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800eee2:	68bb      	ldr	r3, [r7, #8]
 800eee4:	691a      	ldr	r2, [r3, #16]
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	430a      	orrs	r2, r1
 800eeec:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800eeee:	e023      	b.n	800ef38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	68b9      	ldr	r1, [r7, #8]
 800eef6:	4618      	mov	r0, r3
 800eef8:	f000 fb66 	bl	800f5c8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ef0a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ef1a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800ef22:	68bb      	ldr	r3, [r7, #8]
 800ef24:	691b      	ldr	r3, [r3, #16]
 800ef26:	021a      	lsls	r2, r3, #8
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	430a      	orrs	r2, r1
 800ef2e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800ef30:	e002      	b.n	800ef38 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ef32:	2301      	movs	r3, #1
 800ef34:	75fb      	strb	r3, [r7, #23]
      break;
 800ef36:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	2200      	movs	r2, #0
 800ef3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ef40:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef42:	4618      	mov	r0, r3
 800ef44:	3718      	adds	r7, #24
 800ef46:	46bd      	mov	sp, r7
 800ef48:	bd80      	pop	{r7, pc}
 800ef4a:	bf00      	nop

0800ef4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ef4c:	b480      	push	{r7}
 800ef4e:	b083      	sub	sp, #12
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ef54:	bf00      	nop
 800ef56:	370c      	adds	r7, #12
 800ef58:	46bd      	mov	sp, r7
 800ef5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef5e:	4770      	bx	lr

0800ef60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ef60:	b480      	push	{r7}
 800ef62:	b083      	sub	sp, #12
 800ef64:	af00      	add	r7, sp, #0
 800ef66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ef68:	bf00      	nop
 800ef6a:	370c      	adds	r7, #12
 800ef6c:	46bd      	mov	sp, r7
 800ef6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef72:	4770      	bx	lr

0800ef74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ef74:	b480      	push	{r7}
 800ef76:	b083      	sub	sp, #12
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ef7c:	bf00      	nop
 800ef7e:	370c      	adds	r7, #12
 800ef80:	46bd      	mov	sp, r7
 800ef82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef86:	4770      	bx	lr

0800ef88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ef88:	b480      	push	{r7}
 800ef8a:	b083      	sub	sp, #12
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ef90:	bf00      	nop
 800ef92:	370c      	adds	r7, #12
 800ef94:	46bd      	mov	sp, r7
 800ef96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef9a:	4770      	bx	lr

0800ef9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ef9c:	b480      	push	{r7}
 800ef9e:	b085      	sub	sp, #20
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	6078      	str	r0, [r7, #4]
 800efa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	4a46      	ldr	r2, [pc, #280]	@ (800f0c8 <TIM_Base_SetConfig+0x12c>)
 800efb0:	4293      	cmp	r3, r2
 800efb2:	d013      	beq.n	800efdc <TIM_Base_SetConfig+0x40>
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800efba:	d00f      	beq.n	800efdc <TIM_Base_SetConfig+0x40>
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	4a43      	ldr	r2, [pc, #268]	@ (800f0cc <TIM_Base_SetConfig+0x130>)
 800efc0:	4293      	cmp	r3, r2
 800efc2:	d00b      	beq.n	800efdc <TIM_Base_SetConfig+0x40>
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	4a42      	ldr	r2, [pc, #264]	@ (800f0d0 <TIM_Base_SetConfig+0x134>)
 800efc8:	4293      	cmp	r3, r2
 800efca:	d007      	beq.n	800efdc <TIM_Base_SetConfig+0x40>
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	4a41      	ldr	r2, [pc, #260]	@ (800f0d4 <TIM_Base_SetConfig+0x138>)
 800efd0:	4293      	cmp	r3, r2
 800efd2:	d003      	beq.n	800efdc <TIM_Base_SetConfig+0x40>
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	4a40      	ldr	r2, [pc, #256]	@ (800f0d8 <TIM_Base_SetConfig+0x13c>)
 800efd8:	4293      	cmp	r3, r2
 800efda:	d108      	bne.n	800efee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800efe2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800efe4:	683b      	ldr	r3, [r7, #0]
 800efe6:	685b      	ldr	r3, [r3, #4]
 800efe8:	68fa      	ldr	r2, [r7, #12]
 800efea:	4313      	orrs	r3, r2
 800efec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	4a35      	ldr	r2, [pc, #212]	@ (800f0c8 <TIM_Base_SetConfig+0x12c>)
 800eff2:	4293      	cmp	r3, r2
 800eff4:	d01f      	beq.n	800f036 <TIM_Base_SetConfig+0x9a>
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800effc:	d01b      	beq.n	800f036 <TIM_Base_SetConfig+0x9a>
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	4a32      	ldr	r2, [pc, #200]	@ (800f0cc <TIM_Base_SetConfig+0x130>)
 800f002:	4293      	cmp	r3, r2
 800f004:	d017      	beq.n	800f036 <TIM_Base_SetConfig+0x9a>
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	4a31      	ldr	r2, [pc, #196]	@ (800f0d0 <TIM_Base_SetConfig+0x134>)
 800f00a:	4293      	cmp	r3, r2
 800f00c:	d013      	beq.n	800f036 <TIM_Base_SetConfig+0x9a>
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	4a30      	ldr	r2, [pc, #192]	@ (800f0d4 <TIM_Base_SetConfig+0x138>)
 800f012:	4293      	cmp	r3, r2
 800f014:	d00f      	beq.n	800f036 <TIM_Base_SetConfig+0x9a>
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	4a2f      	ldr	r2, [pc, #188]	@ (800f0d8 <TIM_Base_SetConfig+0x13c>)
 800f01a:	4293      	cmp	r3, r2
 800f01c:	d00b      	beq.n	800f036 <TIM_Base_SetConfig+0x9a>
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	4a2e      	ldr	r2, [pc, #184]	@ (800f0dc <TIM_Base_SetConfig+0x140>)
 800f022:	4293      	cmp	r3, r2
 800f024:	d007      	beq.n	800f036 <TIM_Base_SetConfig+0x9a>
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	4a2d      	ldr	r2, [pc, #180]	@ (800f0e0 <TIM_Base_SetConfig+0x144>)
 800f02a:	4293      	cmp	r3, r2
 800f02c:	d003      	beq.n	800f036 <TIM_Base_SetConfig+0x9a>
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	4a2c      	ldr	r2, [pc, #176]	@ (800f0e4 <TIM_Base_SetConfig+0x148>)
 800f032:	4293      	cmp	r3, r2
 800f034:	d108      	bne.n	800f048 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f03c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f03e:	683b      	ldr	r3, [r7, #0]
 800f040:	68db      	ldr	r3, [r3, #12]
 800f042:	68fa      	ldr	r2, [r7, #12]
 800f044:	4313      	orrs	r3, r2
 800f046:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800f04e:	683b      	ldr	r3, [r7, #0]
 800f050:	695b      	ldr	r3, [r3, #20]
 800f052:	4313      	orrs	r3, r2
 800f054:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	68fa      	ldr	r2, [r7, #12]
 800f05a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f05c:	683b      	ldr	r3, [r7, #0]
 800f05e:	689a      	ldr	r2, [r3, #8]
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f064:	683b      	ldr	r3, [r7, #0]
 800f066:	681a      	ldr	r2, [r3, #0]
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	4a16      	ldr	r2, [pc, #88]	@ (800f0c8 <TIM_Base_SetConfig+0x12c>)
 800f070:	4293      	cmp	r3, r2
 800f072:	d00f      	beq.n	800f094 <TIM_Base_SetConfig+0xf8>
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	4a18      	ldr	r2, [pc, #96]	@ (800f0d8 <TIM_Base_SetConfig+0x13c>)
 800f078:	4293      	cmp	r3, r2
 800f07a:	d00b      	beq.n	800f094 <TIM_Base_SetConfig+0xf8>
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	4a17      	ldr	r2, [pc, #92]	@ (800f0dc <TIM_Base_SetConfig+0x140>)
 800f080:	4293      	cmp	r3, r2
 800f082:	d007      	beq.n	800f094 <TIM_Base_SetConfig+0xf8>
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	4a16      	ldr	r2, [pc, #88]	@ (800f0e0 <TIM_Base_SetConfig+0x144>)
 800f088:	4293      	cmp	r3, r2
 800f08a:	d003      	beq.n	800f094 <TIM_Base_SetConfig+0xf8>
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	4a15      	ldr	r2, [pc, #84]	@ (800f0e4 <TIM_Base_SetConfig+0x148>)
 800f090:	4293      	cmp	r3, r2
 800f092:	d103      	bne.n	800f09c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f094:	683b      	ldr	r3, [r7, #0]
 800f096:	691a      	ldr	r2, [r3, #16]
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	2201      	movs	r2, #1
 800f0a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	691b      	ldr	r3, [r3, #16]
 800f0a6:	f003 0301 	and.w	r3, r3, #1
 800f0aa:	2b01      	cmp	r3, #1
 800f0ac:	d105      	bne.n	800f0ba <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	691b      	ldr	r3, [r3, #16]
 800f0b2:	f023 0201 	bic.w	r2, r3, #1
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	611a      	str	r2, [r3, #16]
  }
}
 800f0ba:	bf00      	nop
 800f0bc:	3714      	adds	r7, #20
 800f0be:	46bd      	mov	sp, r7
 800f0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c4:	4770      	bx	lr
 800f0c6:	bf00      	nop
 800f0c8:	40010000 	.word	0x40010000
 800f0cc:	40000400 	.word	0x40000400
 800f0d0:	40000800 	.word	0x40000800
 800f0d4:	40000c00 	.word	0x40000c00
 800f0d8:	40010400 	.word	0x40010400
 800f0dc:	40014000 	.word	0x40014000
 800f0e0:	40014400 	.word	0x40014400
 800f0e4:	40014800 	.word	0x40014800

0800f0e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f0e8:	b480      	push	{r7}
 800f0ea:	b087      	sub	sp, #28
 800f0ec:	af00      	add	r7, sp, #0
 800f0ee:	6078      	str	r0, [r7, #4]
 800f0f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	6a1b      	ldr	r3, [r3, #32]
 800f0f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	6a1b      	ldr	r3, [r3, #32]
 800f0fc:	f023 0201 	bic.w	r2, r3, #1
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	685b      	ldr	r3, [r3, #4]
 800f108:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	699b      	ldr	r3, [r3, #24]
 800f10e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f110:	68fa      	ldr	r2, [r7, #12]
 800f112:	4b37      	ldr	r3, [pc, #220]	@ (800f1f0 <TIM_OC1_SetConfig+0x108>)
 800f114:	4013      	ands	r3, r2
 800f116:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	f023 0303 	bic.w	r3, r3, #3
 800f11e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f120:	683b      	ldr	r3, [r7, #0]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	68fa      	ldr	r2, [r7, #12]
 800f126:	4313      	orrs	r3, r2
 800f128:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f12a:	697b      	ldr	r3, [r7, #20]
 800f12c:	f023 0302 	bic.w	r3, r3, #2
 800f130:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f132:	683b      	ldr	r3, [r7, #0]
 800f134:	689b      	ldr	r3, [r3, #8]
 800f136:	697a      	ldr	r2, [r7, #20]
 800f138:	4313      	orrs	r3, r2
 800f13a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	4a2d      	ldr	r2, [pc, #180]	@ (800f1f4 <TIM_OC1_SetConfig+0x10c>)
 800f140:	4293      	cmp	r3, r2
 800f142:	d00f      	beq.n	800f164 <TIM_OC1_SetConfig+0x7c>
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	4a2c      	ldr	r2, [pc, #176]	@ (800f1f8 <TIM_OC1_SetConfig+0x110>)
 800f148:	4293      	cmp	r3, r2
 800f14a:	d00b      	beq.n	800f164 <TIM_OC1_SetConfig+0x7c>
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	4a2b      	ldr	r2, [pc, #172]	@ (800f1fc <TIM_OC1_SetConfig+0x114>)
 800f150:	4293      	cmp	r3, r2
 800f152:	d007      	beq.n	800f164 <TIM_OC1_SetConfig+0x7c>
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	4a2a      	ldr	r2, [pc, #168]	@ (800f200 <TIM_OC1_SetConfig+0x118>)
 800f158:	4293      	cmp	r3, r2
 800f15a:	d003      	beq.n	800f164 <TIM_OC1_SetConfig+0x7c>
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	4a29      	ldr	r2, [pc, #164]	@ (800f204 <TIM_OC1_SetConfig+0x11c>)
 800f160:	4293      	cmp	r3, r2
 800f162:	d10c      	bne.n	800f17e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f164:	697b      	ldr	r3, [r7, #20]
 800f166:	f023 0308 	bic.w	r3, r3, #8
 800f16a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f16c:	683b      	ldr	r3, [r7, #0]
 800f16e:	68db      	ldr	r3, [r3, #12]
 800f170:	697a      	ldr	r2, [r7, #20]
 800f172:	4313      	orrs	r3, r2
 800f174:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f176:	697b      	ldr	r3, [r7, #20]
 800f178:	f023 0304 	bic.w	r3, r3, #4
 800f17c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	4a1c      	ldr	r2, [pc, #112]	@ (800f1f4 <TIM_OC1_SetConfig+0x10c>)
 800f182:	4293      	cmp	r3, r2
 800f184:	d00f      	beq.n	800f1a6 <TIM_OC1_SetConfig+0xbe>
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	4a1b      	ldr	r2, [pc, #108]	@ (800f1f8 <TIM_OC1_SetConfig+0x110>)
 800f18a:	4293      	cmp	r3, r2
 800f18c:	d00b      	beq.n	800f1a6 <TIM_OC1_SetConfig+0xbe>
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	4a1a      	ldr	r2, [pc, #104]	@ (800f1fc <TIM_OC1_SetConfig+0x114>)
 800f192:	4293      	cmp	r3, r2
 800f194:	d007      	beq.n	800f1a6 <TIM_OC1_SetConfig+0xbe>
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	4a19      	ldr	r2, [pc, #100]	@ (800f200 <TIM_OC1_SetConfig+0x118>)
 800f19a:	4293      	cmp	r3, r2
 800f19c:	d003      	beq.n	800f1a6 <TIM_OC1_SetConfig+0xbe>
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	4a18      	ldr	r2, [pc, #96]	@ (800f204 <TIM_OC1_SetConfig+0x11c>)
 800f1a2:	4293      	cmp	r3, r2
 800f1a4:	d111      	bne.n	800f1ca <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f1a6:	693b      	ldr	r3, [r7, #16]
 800f1a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f1ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f1ae:	693b      	ldr	r3, [r7, #16]
 800f1b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f1b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f1b6:	683b      	ldr	r3, [r7, #0]
 800f1b8:	695b      	ldr	r3, [r3, #20]
 800f1ba:	693a      	ldr	r2, [r7, #16]
 800f1bc:	4313      	orrs	r3, r2
 800f1be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f1c0:	683b      	ldr	r3, [r7, #0]
 800f1c2:	699b      	ldr	r3, [r3, #24]
 800f1c4:	693a      	ldr	r2, [r7, #16]
 800f1c6:	4313      	orrs	r3, r2
 800f1c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	693a      	ldr	r2, [r7, #16]
 800f1ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	68fa      	ldr	r2, [r7, #12]
 800f1d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f1d6:	683b      	ldr	r3, [r7, #0]
 800f1d8:	685a      	ldr	r2, [r3, #4]
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	697a      	ldr	r2, [r7, #20]
 800f1e2:	621a      	str	r2, [r3, #32]
}
 800f1e4:	bf00      	nop
 800f1e6:	371c      	adds	r7, #28
 800f1e8:	46bd      	mov	sp, r7
 800f1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ee:	4770      	bx	lr
 800f1f0:	fffeff8f 	.word	0xfffeff8f
 800f1f4:	40010000 	.word	0x40010000
 800f1f8:	40010400 	.word	0x40010400
 800f1fc:	40014000 	.word	0x40014000
 800f200:	40014400 	.word	0x40014400
 800f204:	40014800 	.word	0x40014800

0800f208 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f208:	b480      	push	{r7}
 800f20a:	b087      	sub	sp, #28
 800f20c:	af00      	add	r7, sp, #0
 800f20e:	6078      	str	r0, [r7, #4]
 800f210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	6a1b      	ldr	r3, [r3, #32]
 800f216:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	6a1b      	ldr	r3, [r3, #32]
 800f21c:	f023 0210 	bic.w	r2, r3, #16
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	685b      	ldr	r3, [r3, #4]
 800f228:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	699b      	ldr	r3, [r3, #24]
 800f22e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f230:	68fa      	ldr	r2, [r7, #12]
 800f232:	4b34      	ldr	r3, [pc, #208]	@ (800f304 <TIM_OC2_SetConfig+0xfc>)
 800f234:	4013      	ands	r3, r2
 800f236:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f23e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f240:	683b      	ldr	r3, [r7, #0]
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	021b      	lsls	r3, r3, #8
 800f246:	68fa      	ldr	r2, [r7, #12]
 800f248:	4313      	orrs	r3, r2
 800f24a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f24c:	697b      	ldr	r3, [r7, #20]
 800f24e:	f023 0320 	bic.w	r3, r3, #32
 800f252:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f254:	683b      	ldr	r3, [r7, #0]
 800f256:	689b      	ldr	r3, [r3, #8]
 800f258:	011b      	lsls	r3, r3, #4
 800f25a:	697a      	ldr	r2, [r7, #20]
 800f25c:	4313      	orrs	r3, r2
 800f25e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	4a29      	ldr	r2, [pc, #164]	@ (800f308 <TIM_OC2_SetConfig+0x100>)
 800f264:	4293      	cmp	r3, r2
 800f266:	d003      	beq.n	800f270 <TIM_OC2_SetConfig+0x68>
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	4a28      	ldr	r2, [pc, #160]	@ (800f30c <TIM_OC2_SetConfig+0x104>)
 800f26c:	4293      	cmp	r3, r2
 800f26e:	d10d      	bne.n	800f28c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f270:	697b      	ldr	r3, [r7, #20]
 800f272:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f276:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f278:	683b      	ldr	r3, [r7, #0]
 800f27a:	68db      	ldr	r3, [r3, #12]
 800f27c:	011b      	lsls	r3, r3, #4
 800f27e:	697a      	ldr	r2, [r7, #20]
 800f280:	4313      	orrs	r3, r2
 800f282:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f284:	697b      	ldr	r3, [r7, #20]
 800f286:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f28a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	4a1e      	ldr	r2, [pc, #120]	@ (800f308 <TIM_OC2_SetConfig+0x100>)
 800f290:	4293      	cmp	r3, r2
 800f292:	d00f      	beq.n	800f2b4 <TIM_OC2_SetConfig+0xac>
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	4a1d      	ldr	r2, [pc, #116]	@ (800f30c <TIM_OC2_SetConfig+0x104>)
 800f298:	4293      	cmp	r3, r2
 800f29a:	d00b      	beq.n	800f2b4 <TIM_OC2_SetConfig+0xac>
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	4a1c      	ldr	r2, [pc, #112]	@ (800f310 <TIM_OC2_SetConfig+0x108>)
 800f2a0:	4293      	cmp	r3, r2
 800f2a2:	d007      	beq.n	800f2b4 <TIM_OC2_SetConfig+0xac>
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	4a1b      	ldr	r2, [pc, #108]	@ (800f314 <TIM_OC2_SetConfig+0x10c>)
 800f2a8:	4293      	cmp	r3, r2
 800f2aa:	d003      	beq.n	800f2b4 <TIM_OC2_SetConfig+0xac>
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	4a1a      	ldr	r2, [pc, #104]	@ (800f318 <TIM_OC2_SetConfig+0x110>)
 800f2b0:	4293      	cmp	r3, r2
 800f2b2:	d113      	bne.n	800f2dc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f2b4:	693b      	ldr	r3, [r7, #16]
 800f2b6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f2ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f2bc:	693b      	ldr	r3, [r7, #16]
 800f2be:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f2c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f2c4:	683b      	ldr	r3, [r7, #0]
 800f2c6:	695b      	ldr	r3, [r3, #20]
 800f2c8:	009b      	lsls	r3, r3, #2
 800f2ca:	693a      	ldr	r2, [r7, #16]
 800f2cc:	4313      	orrs	r3, r2
 800f2ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f2d0:	683b      	ldr	r3, [r7, #0]
 800f2d2:	699b      	ldr	r3, [r3, #24]
 800f2d4:	009b      	lsls	r3, r3, #2
 800f2d6:	693a      	ldr	r2, [r7, #16]
 800f2d8:	4313      	orrs	r3, r2
 800f2da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	693a      	ldr	r2, [r7, #16]
 800f2e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	68fa      	ldr	r2, [r7, #12]
 800f2e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f2e8:	683b      	ldr	r3, [r7, #0]
 800f2ea:	685a      	ldr	r2, [r3, #4]
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	697a      	ldr	r2, [r7, #20]
 800f2f4:	621a      	str	r2, [r3, #32]
}
 800f2f6:	bf00      	nop
 800f2f8:	371c      	adds	r7, #28
 800f2fa:	46bd      	mov	sp, r7
 800f2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f300:	4770      	bx	lr
 800f302:	bf00      	nop
 800f304:	feff8fff 	.word	0xfeff8fff
 800f308:	40010000 	.word	0x40010000
 800f30c:	40010400 	.word	0x40010400
 800f310:	40014000 	.word	0x40014000
 800f314:	40014400 	.word	0x40014400
 800f318:	40014800 	.word	0x40014800

0800f31c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f31c:	b480      	push	{r7}
 800f31e:	b087      	sub	sp, #28
 800f320:	af00      	add	r7, sp, #0
 800f322:	6078      	str	r0, [r7, #4]
 800f324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	6a1b      	ldr	r3, [r3, #32]
 800f32a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	6a1b      	ldr	r3, [r3, #32]
 800f330:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	685b      	ldr	r3, [r3, #4]
 800f33c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	69db      	ldr	r3, [r3, #28]
 800f342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f344:	68fa      	ldr	r2, [r7, #12]
 800f346:	4b33      	ldr	r3, [pc, #204]	@ (800f414 <TIM_OC3_SetConfig+0xf8>)
 800f348:	4013      	ands	r3, r2
 800f34a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	f023 0303 	bic.w	r3, r3, #3
 800f352:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f354:	683b      	ldr	r3, [r7, #0]
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	68fa      	ldr	r2, [r7, #12]
 800f35a:	4313      	orrs	r3, r2
 800f35c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f35e:	697b      	ldr	r3, [r7, #20]
 800f360:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f364:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f366:	683b      	ldr	r3, [r7, #0]
 800f368:	689b      	ldr	r3, [r3, #8]
 800f36a:	021b      	lsls	r3, r3, #8
 800f36c:	697a      	ldr	r2, [r7, #20]
 800f36e:	4313      	orrs	r3, r2
 800f370:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	4a28      	ldr	r2, [pc, #160]	@ (800f418 <TIM_OC3_SetConfig+0xfc>)
 800f376:	4293      	cmp	r3, r2
 800f378:	d003      	beq.n	800f382 <TIM_OC3_SetConfig+0x66>
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	4a27      	ldr	r2, [pc, #156]	@ (800f41c <TIM_OC3_SetConfig+0x100>)
 800f37e:	4293      	cmp	r3, r2
 800f380:	d10d      	bne.n	800f39e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f382:	697b      	ldr	r3, [r7, #20]
 800f384:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f388:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f38a:	683b      	ldr	r3, [r7, #0]
 800f38c:	68db      	ldr	r3, [r3, #12]
 800f38e:	021b      	lsls	r3, r3, #8
 800f390:	697a      	ldr	r2, [r7, #20]
 800f392:	4313      	orrs	r3, r2
 800f394:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f396:	697b      	ldr	r3, [r7, #20]
 800f398:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f39c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	4a1d      	ldr	r2, [pc, #116]	@ (800f418 <TIM_OC3_SetConfig+0xfc>)
 800f3a2:	4293      	cmp	r3, r2
 800f3a4:	d00f      	beq.n	800f3c6 <TIM_OC3_SetConfig+0xaa>
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	4a1c      	ldr	r2, [pc, #112]	@ (800f41c <TIM_OC3_SetConfig+0x100>)
 800f3aa:	4293      	cmp	r3, r2
 800f3ac:	d00b      	beq.n	800f3c6 <TIM_OC3_SetConfig+0xaa>
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	4a1b      	ldr	r2, [pc, #108]	@ (800f420 <TIM_OC3_SetConfig+0x104>)
 800f3b2:	4293      	cmp	r3, r2
 800f3b4:	d007      	beq.n	800f3c6 <TIM_OC3_SetConfig+0xaa>
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	4a1a      	ldr	r2, [pc, #104]	@ (800f424 <TIM_OC3_SetConfig+0x108>)
 800f3ba:	4293      	cmp	r3, r2
 800f3bc:	d003      	beq.n	800f3c6 <TIM_OC3_SetConfig+0xaa>
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	4a19      	ldr	r2, [pc, #100]	@ (800f428 <TIM_OC3_SetConfig+0x10c>)
 800f3c2:	4293      	cmp	r3, r2
 800f3c4:	d113      	bne.n	800f3ee <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f3c6:	693b      	ldr	r3, [r7, #16]
 800f3c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f3cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f3ce:	693b      	ldr	r3, [r7, #16]
 800f3d0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f3d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f3d6:	683b      	ldr	r3, [r7, #0]
 800f3d8:	695b      	ldr	r3, [r3, #20]
 800f3da:	011b      	lsls	r3, r3, #4
 800f3dc:	693a      	ldr	r2, [r7, #16]
 800f3de:	4313      	orrs	r3, r2
 800f3e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f3e2:	683b      	ldr	r3, [r7, #0]
 800f3e4:	699b      	ldr	r3, [r3, #24]
 800f3e6:	011b      	lsls	r3, r3, #4
 800f3e8:	693a      	ldr	r2, [r7, #16]
 800f3ea:	4313      	orrs	r3, r2
 800f3ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	693a      	ldr	r2, [r7, #16]
 800f3f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	68fa      	ldr	r2, [r7, #12]
 800f3f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f3fa:	683b      	ldr	r3, [r7, #0]
 800f3fc:	685a      	ldr	r2, [r3, #4]
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	697a      	ldr	r2, [r7, #20]
 800f406:	621a      	str	r2, [r3, #32]
}
 800f408:	bf00      	nop
 800f40a:	371c      	adds	r7, #28
 800f40c:	46bd      	mov	sp, r7
 800f40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f412:	4770      	bx	lr
 800f414:	fffeff8f 	.word	0xfffeff8f
 800f418:	40010000 	.word	0x40010000
 800f41c:	40010400 	.word	0x40010400
 800f420:	40014000 	.word	0x40014000
 800f424:	40014400 	.word	0x40014400
 800f428:	40014800 	.word	0x40014800

0800f42c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f42c:	b480      	push	{r7}
 800f42e:	b087      	sub	sp, #28
 800f430:	af00      	add	r7, sp, #0
 800f432:	6078      	str	r0, [r7, #4]
 800f434:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	6a1b      	ldr	r3, [r3, #32]
 800f43a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	6a1b      	ldr	r3, [r3, #32]
 800f440:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	685b      	ldr	r3, [r3, #4]
 800f44c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	69db      	ldr	r3, [r3, #28]
 800f452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f454:	68fa      	ldr	r2, [r7, #12]
 800f456:	4b24      	ldr	r3, [pc, #144]	@ (800f4e8 <TIM_OC4_SetConfig+0xbc>)
 800f458:	4013      	ands	r3, r2
 800f45a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f462:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f464:	683b      	ldr	r3, [r7, #0]
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	021b      	lsls	r3, r3, #8
 800f46a:	68fa      	ldr	r2, [r7, #12]
 800f46c:	4313      	orrs	r3, r2
 800f46e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f470:	693b      	ldr	r3, [r7, #16]
 800f472:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f476:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f478:	683b      	ldr	r3, [r7, #0]
 800f47a:	689b      	ldr	r3, [r3, #8]
 800f47c:	031b      	lsls	r3, r3, #12
 800f47e:	693a      	ldr	r2, [r7, #16]
 800f480:	4313      	orrs	r3, r2
 800f482:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	4a19      	ldr	r2, [pc, #100]	@ (800f4ec <TIM_OC4_SetConfig+0xc0>)
 800f488:	4293      	cmp	r3, r2
 800f48a:	d00f      	beq.n	800f4ac <TIM_OC4_SetConfig+0x80>
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	4a18      	ldr	r2, [pc, #96]	@ (800f4f0 <TIM_OC4_SetConfig+0xc4>)
 800f490:	4293      	cmp	r3, r2
 800f492:	d00b      	beq.n	800f4ac <TIM_OC4_SetConfig+0x80>
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	4a17      	ldr	r2, [pc, #92]	@ (800f4f4 <TIM_OC4_SetConfig+0xc8>)
 800f498:	4293      	cmp	r3, r2
 800f49a:	d007      	beq.n	800f4ac <TIM_OC4_SetConfig+0x80>
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	4a16      	ldr	r2, [pc, #88]	@ (800f4f8 <TIM_OC4_SetConfig+0xcc>)
 800f4a0:	4293      	cmp	r3, r2
 800f4a2:	d003      	beq.n	800f4ac <TIM_OC4_SetConfig+0x80>
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	4a15      	ldr	r2, [pc, #84]	@ (800f4fc <TIM_OC4_SetConfig+0xd0>)
 800f4a8:	4293      	cmp	r3, r2
 800f4aa:	d109      	bne.n	800f4c0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f4ac:	697b      	ldr	r3, [r7, #20]
 800f4ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f4b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f4b4:	683b      	ldr	r3, [r7, #0]
 800f4b6:	695b      	ldr	r3, [r3, #20]
 800f4b8:	019b      	lsls	r3, r3, #6
 800f4ba:	697a      	ldr	r2, [r7, #20]
 800f4bc:	4313      	orrs	r3, r2
 800f4be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	697a      	ldr	r2, [r7, #20]
 800f4c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	68fa      	ldr	r2, [r7, #12]
 800f4ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f4cc:	683b      	ldr	r3, [r7, #0]
 800f4ce:	685a      	ldr	r2, [r3, #4]
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	693a      	ldr	r2, [r7, #16]
 800f4d8:	621a      	str	r2, [r3, #32]
}
 800f4da:	bf00      	nop
 800f4dc:	371c      	adds	r7, #28
 800f4de:	46bd      	mov	sp, r7
 800f4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e4:	4770      	bx	lr
 800f4e6:	bf00      	nop
 800f4e8:	feff8fff 	.word	0xfeff8fff
 800f4ec:	40010000 	.word	0x40010000
 800f4f0:	40010400 	.word	0x40010400
 800f4f4:	40014000 	.word	0x40014000
 800f4f8:	40014400 	.word	0x40014400
 800f4fc:	40014800 	.word	0x40014800

0800f500 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f500:	b480      	push	{r7}
 800f502:	b087      	sub	sp, #28
 800f504:	af00      	add	r7, sp, #0
 800f506:	6078      	str	r0, [r7, #4]
 800f508:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	6a1b      	ldr	r3, [r3, #32]
 800f50e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	6a1b      	ldr	r3, [r3, #32]
 800f514:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	685b      	ldr	r3, [r3, #4]
 800f520:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f528:	68fa      	ldr	r2, [r7, #12]
 800f52a:	4b21      	ldr	r3, [pc, #132]	@ (800f5b0 <TIM_OC5_SetConfig+0xb0>)
 800f52c:	4013      	ands	r3, r2
 800f52e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f530:	683b      	ldr	r3, [r7, #0]
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	68fa      	ldr	r2, [r7, #12]
 800f536:	4313      	orrs	r3, r2
 800f538:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f53a:	693b      	ldr	r3, [r7, #16]
 800f53c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800f540:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f542:	683b      	ldr	r3, [r7, #0]
 800f544:	689b      	ldr	r3, [r3, #8]
 800f546:	041b      	lsls	r3, r3, #16
 800f548:	693a      	ldr	r2, [r7, #16]
 800f54a:	4313      	orrs	r3, r2
 800f54c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	4a18      	ldr	r2, [pc, #96]	@ (800f5b4 <TIM_OC5_SetConfig+0xb4>)
 800f552:	4293      	cmp	r3, r2
 800f554:	d00f      	beq.n	800f576 <TIM_OC5_SetConfig+0x76>
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	4a17      	ldr	r2, [pc, #92]	@ (800f5b8 <TIM_OC5_SetConfig+0xb8>)
 800f55a:	4293      	cmp	r3, r2
 800f55c:	d00b      	beq.n	800f576 <TIM_OC5_SetConfig+0x76>
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	4a16      	ldr	r2, [pc, #88]	@ (800f5bc <TIM_OC5_SetConfig+0xbc>)
 800f562:	4293      	cmp	r3, r2
 800f564:	d007      	beq.n	800f576 <TIM_OC5_SetConfig+0x76>
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	4a15      	ldr	r2, [pc, #84]	@ (800f5c0 <TIM_OC5_SetConfig+0xc0>)
 800f56a:	4293      	cmp	r3, r2
 800f56c:	d003      	beq.n	800f576 <TIM_OC5_SetConfig+0x76>
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	4a14      	ldr	r2, [pc, #80]	@ (800f5c4 <TIM_OC5_SetConfig+0xc4>)
 800f572:	4293      	cmp	r3, r2
 800f574:	d109      	bne.n	800f58a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f576:	697b      	ldr	r3, [r7, #20]
 800f578:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f57c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f57e:	683b      	ldr	r3, [r7, #0]
 800f580:	695b      	ldr	r3, [r3, #20]
 800f582:	021b      	lsls	r3, r3, #8
 800f584:	697a      	ldr	r2, [r7, #20]
 800f586:	4313      	orrs	r3, r2
 800f588:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	697a      	ldr	r2, [r7, #20]
 800f58e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	68fa      	ldr	r2, [r7, #12]
 800f594:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f596:	683b      	ldr	r3, [r7, #0]
 800f598:	685a      	ldr	r2, [r3, #4]
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	693a      	ldr	r2, [r7, #16]
 800f5a2:	621a      	str	r2, [r3, #32]
}
 800f5a4:	bf00      	nop
 800f5a6:	371c      	adds	r7, #28
 800f5a8:	46bd      	mov	sp, r7
 800f5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ae:	4770      	bx	lr
 800f5b0:	fffeff8f 	.word	0xfffeff8f
 800f5b4:	40010000 	.word	0x40010000
 800f5b8:	40010400 	.word	0x40010400
 800f5bc:	40014000 	.word	0x40014000
 800f5c0:	40014400 	.word	0x40014400
 800f5c4:	40014800 	.word	0x40014800

0800f5c8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f5c8:	b480      	push	{r7}
 800f5ca:	b087      	sub	sp, #28
 800f5cc:	af00      	add	r7, sp, #0
 800f5ce:	6078      	str	r0, [r7, #4]
 800f5d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	6a1b      	ldr	r3, [r3, #32]
 800f5d6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	6a1b      	ldr	r3, [r3, #32]
 800f5dc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	685b      	ldr	r3, [r3, #4]
 800f5e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f5ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f5f0:	68fa      	ldr	r2, [r7, #12]
 800f5f2:	4b22      	ldr	r3, [pc, #136]	@ (800f67c <TIM_OC6_SetConfig+0xb4>)
 800f5f4:	4013      	ands	r3, r2
 800f5f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f5f8:	683b      	ldr	r3, [r7, #0]
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	021b      	lsls	r3, r3, #8
 800f5fe:	68fa      	ldr	r2, [r7, #12]
 800f600:	4313      	orrs	r3, r2
 800f602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f604:	693b      	ldr	r3, [r7, #16]
 800f606:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f60a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f60c:	683b      	ldr	r3, [r7, #0]
 800f60e:	689b      	ldr	r3, [r3, #8]
 800f610:	051b      	lsls	r3, r3, #20
 800f612:	693a      	ldr	r2, [r7, #16]
 800f614:	4313      	orrs	r3, r2
 800f616:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	4a19      	ldr	r2, [pc, #100]	@ (800f680 <TIM_OC6_SetConfig+0xb8>)
 800f61c:	4293      	cmp	r3, r2
 800f61e:	d00f      	beq.n	800f640 <TIM_OC6_SetConfig+0x78>
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	4a18      	ldr	r2, [pc, #96]	@ (800f684 <TIM_OC6_SetConfig+0xbc>)
 800f624:	4293      	cmp	r3, r2
 800f626:	d00b      	beq.n	800f640 <TIM_OC6_SetConfig+0x78>
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	4a17      	ldr	r2, [pc, #92]	@ (800f688 <TIM_OC6_SetConfig+0xc0>)
 800f62c:	4293      	cmp	r3, r2
 800f62e:	d007      	beq.n	800f640 <TIM_OC6_SetConfig+0x78>
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	4a16      	ldr	r2, [pc, #88]	@ (800f68c <TIM_OC6_SetConfig+0xc4>)
 800f634:	4293      	cmp	r3, r2
 800f636:	d003      	beq.n	800f640 <TIM_OC6_SetConfig+0x78>
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	4a15      	ldr	r2, [pc, #84]	@ (800f690 <TIM_OC6_SetConfig+0xc8>)
 800f63c:	4293      	cmp	r3, r2
 800f63e:	d109      	bne.n	800f654 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f640:	697b      	ldr	r3, [r7, #20]
 800f642:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800f646:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f648:	683b      	ldr	r3, [r7, #0]
 800f64a:	695b      	ldr	r3, [r3, #20]
 800f64c:	029b      	lsls	r3, r3, #10
 800f64e:	697a      	ldr	r2, [r7, #20]
 800f650:	4313      	orrs	r3, r2
 800f652:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	697a      	ldr	r2, [r7, #20]
 800f658:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	68fa      	ldr	r2, [r7, #12]
 800f65e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f660:	683b      	ldr	r3, [r7, #0]
 800f662:	685a      	ldr	r2, [r3, #4]
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	693a      	ldr	r2, [r7, #16]
 800f66c:	621a      	str	r2, [r3, #32]
}
 800f66e:	bf00      	nop
 800f670:	371c      	adds	r7, #28
 800f672:	46bd      	mov	sp, r7
 800f674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f678:	4770      	bx	lr
 800f67a:	bf00      	nop
 800f67c:	feff8fff 	.word	0xfeff8fff
 800f680:	40010000 	.word	0x40010000
 800f684:	40010400 	.word	0x40010400
 800f688:	40014000 	.word	0x40014000
 800f68c:	40014400 	.word	0x40014400
 800f690:	40014800 	.word	0x40014800

0800f694 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f694:	b480      	push	{r7}
 800f696:	b087      	sub	sp, #28
 800f698:	af00      	add	r7, sp, #0
 800f69a:	60f8      	str	r0, [r7, #12]
 800f69c:	60b9      	str	r1, [r7, #8]
 800f69e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f6a0:	68bb      	ldr	r3, [r7, #8]
 800f6a2:	f003 031f 	and.w	r3, r3, #31
 800f6a6:	2201      	movs	r2, #1
 800f6a8:	fa02 f303 	lsl.w	r3, r2, r3
 800f6ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	6a1a      	ldr	r2, [r3, #32]
 800f6b2:	697b      	ldr	r3, [r7, #20]
 800f6b4:	43db      	mvns	r3, r3
 800f6b6:	401a      	ands	r2, r3
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	6a1a      	ldr	r2, [r3, #32]
 800f6c0:	68bb      	ldr	r3, [r7, #8]
 800f6c2:	f003 031f 	and.w	r3, r3, #31
 800f6c6:	6879      	ldr	r1, [r7, #4]
 800f6c8:	fa01 f303 	lsl.w	r3, r1, r3
 800f6cc:	431a      	orrs	r2, r3
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	621a      	str	r2, [r3, #32]
}
 800f6d2:	bf00      	nop
 800f6d4:	371c      	adds	r7, #28
 800f6d6:	46bd      	mov	sp, r7
 800f6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6dc:	4770      	bx	lr
	...

0800f6e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f6e0:	b480      	push	{r7}
 800f6e2:	b085      	sub	sp, #20
 800f6e4:	af00      	add	r7, sp, #0
 800f6e6:	6078      	str	r0, [r7, #4]
 800f6e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f6f0:	2b01      	cmp	r3, #1
 800f6f2:	d101      	bne.n	800f6f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f6f4:	2302      	movs	r3, #2
 800f6f6:	e06d      	b.n	800f7d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	2201      	movs	r2, #1
 800f6fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	2202      	movs	r2, #2
 800f704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	685b      	ldr	r3, [r3, #4]
 800f70e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	689b      	ldr	r3, [r3, #8]
 800f716:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	4a30      	ldr	r2, [pc, #192]	@ (800f7e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f71e:	4293      	cmp	r3, r2
 800f720:	d004      	beq.n	800f72c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	4a2f      	ldr	r2, [pc, #188]	@ (800f7e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f728:	4293      	cmp	r3, r2
 800f72a:	d108      	bne.n	800f73e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800f732:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f734:	683b      	ldr	r3, [r7, #0]
 800f736:	685b      	ldr	r3, [r3, #4]
 800f738:	68fa      	ldr	r2, [r7, #12]
 800f73a:	4313      	orrs	r3, r2
 800f73c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f744:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f746:	683b      	ldr	r3, [r7, #0]
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	68fa      	ldr	r2, [r7, #12]
 800f74c:	4313      	orrs	r3, r2
 800f74e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	68fa      	ldr	r2, [r7, #12]
 800f756:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	4a20      	ldr	r2, [pc, #128]	@ (800f7e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f75e:	4293      	cmp	r3, r2
 800f760:	d022      	beq.n	800f7a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f76a:	d01d      	beq.n	800f7a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	4a1d      	ldr	r2, [pc, #116]	@ (800f7e8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800f772:	4293      	cmp	r3, r2
 800f774:	d018      	beq.n	800f7a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	4a1c      	ldr	r2, [pc, #112]	@ (800f7ec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800f77c:	4293      	cmp	r3, r2
 800f77e:	d013      	beq.n	800f7a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	4a1a      	ldr	r2, [pc, #104]	@ (800f7f0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800f786:	4293      	cmp	r3, r2
 800f788:	d00e      	beq.n	800f7a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	4a15      	ldr	r2, [pc, #84]	@ (800f7e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f790:	4293      	cmp	r3, r2
 800f792:	d009      	beq.n	800f7a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	4a16      	ldr	r2, [pc, #88]	@ (800f7f4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f79a:	4293      	cmp	r3, r2
 800f79c:	d004      	beq.n	800f7a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	4a15      	ldr	r2, [pc, #84]	@ (800f7f8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f7a4:	4293      	cmp	r3, r2
 800f7a6:	d10c      	bne.n	800f7c2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f7a8:	68bb      	ldr	r3, [r7, #8]
 800f7aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f7ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f7b0:	683b      	ldr	r3, [r7, #0]
 800f7b2:	689b      	ldr	r3, [r3, #8]
 800f7b4:	68ba      	ldr	r2, [r7, #8]
 800f7b6:	4313      	orrs	r3, r2
 800f7b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	68ba      	ldr	r2, [r7, #8]
 800f7c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	2201      	movs	r2, #1
 800f7c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	2200      	movs	r2, #0
 800f7ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f7d2:	2300      	movs	r3, #0
}
 800f7d4:	4618      	mov	r0, r3
 800f7d6:	3714      	adds	r7, #20
 800f7d8:	46bd      	mov	sp, r7
 800f7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7de:	4770      	bx	lr
 800f7e0:	40010000 	.word	0x40010000
 800f7e4:	40010400 	.word	0x40010400
 800f7e8:	40000400 	.word	0x40000400
 800f7ec:	40000800 	.word	0x40000800
 800f7f0:	40000c00 	.word	0x40000c00
 800f7f4:	40001800 	.word	0x40001800
 800f7f8:	40014000 	.word	0x40014000

0800f7fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f7fc:	b480      	push	{r7}
 800f7fe:	b083      	sub	sp, #12
 800f800:	af00      	add	r7, sp, #0
 800f802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f804:	bf00      	nop
 800f806:	370c      	adds	r7, #12
 800f808:	46bd      	mov	sp, r7
 800f80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f80e:	4770      	bx	lr

0800f810 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f810:	b480      	push	{r7}
 800f812:	b083      	sub	sp, #12
 800f814:	af00      	add	r7, sp, #0
 800f816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f818:	bf00      	nop
 800f81a:	370c      	adds	r7, #12
 800f81c:	46bd      	mov	sp, r7
 800f81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f822:	4770      	bx	lr

0800f824 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f824:	b480      	push	{r7}
 800f826:	b083      	sub	sp, #12
 800f828:	af00      	add	r7, sp, #0
 800f82a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f82c:	bf00      	nop
 800f82e:	370c      	adds	r7, #12
 800f830:	46bd      	mov	sp, r7
 800f832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f836:	4770      	bx	lr

0800f838 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f838:	b580      	push	{r7, lr}
 800f83a:	b082      	sub	sp, #8
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	2b00      	cmp	r3, #0
 800f844:	d101      	bne.n	800f84a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f846:	2301      	movs	r3, #1
 800f848:	e042      	b.n	800f8d0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f850:	2b00      	cmp	r3, #0
 800f852:	d106      	bne.n	800f862 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	2200      	movs	r2, #0
 800f858:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f85c:	6878      	ldr	r0, [r7, #4]
 800f85e:	f7f4 fc89 	bl	8004174 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	2224      	movs	r2, #36	@ 0x24
 800f866:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	681a      	ldr	r2, [r3, #0]
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	f022 0201 	bic.w	r2, r2, #1
 800f878:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d002      	beq.n	800f888 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800f882:	6878      	ldr	r0, [r7, #4]
 800f884:	f001 fe0e 	bl	80114a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f888:	6878      	ldr	r0, [r7, #4]
 800f88a:	f000 ff9f 	bl	80107cc <UART_SetConfig>
 800f88e:	4603      	mov	r3, r0
 800f890:	2b01      	cmp	r3, #1
 800f892:	d101      	bne.n	800f898 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800f894:	2301      	movs	r3, #1
 800f896:	e01b      	b.n	800f8d0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	685a      	ldr	r2, [r3, #4]
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f8a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	689a      	ldr	r2, [r3, #8]
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800f8b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	681a      	ldr	r2, [r3, #0]
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	f042 0201 	orr.w	r2, r2, #1
 800f8c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f8c8:	6878      	ldr	r0, [r7, #4]
 800f8ca:	f001 fe8d 	bl	80115e8 <UART_CheckIdleState>
 800f8ce:	4603      	mov	r3, r0
}
 800f8d0:	4618      	mov	r0, r3
 800f8d2:	3708      	adds	r7, #8
 800f8d4:	46bd      	mov	sp, r7
 800f8d6:	bd80      	pop	{r7, pc}

0800f8d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	b08a      	sub	sp, #40	@ 0x28
 800f8dc:	af02      	add	r7, sp, #8
 800f8de:	60f8      	str	r0, [r7, #12]
 800f8e0:	60b9      	str	r1, [r7, #8]
 800f8e2:	603b      	str	r3, [r7, #0]
 800f8e4:	4613      	mov	r3, r2
 800f8e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f8ee:	2b20      	cmp	r3, #32
 800f8f0:	d17b      	bne.n	800f9ea <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800f8f2:	68bb      	ldr	r3, [r7, #8]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d002      	beq.n	800f8fe <HAL_UART_Transmit+0x26>
 800f8f8:	88fb      	ldrh	r3, [r7, #6]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d101      	bne.n	800f902 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800f8fe:	2301      	movs	r3, #1
 800f900:	e074      	b.n	800f9ec <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	2200      	movs	r2, #0
 800f906:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	2221      	movs	r2, #33	@ 0x21
 800f90e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f912:	f7f7 f835 	bl	8006980 <HAL_GetTick>
 800f916:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	88fa      	ldrh	r2, [r7, #6]
 800f91c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	88fa      	ldrh	r2, [r7, #6]
 800f924:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	689b      	ldr	r3, [r3, #8]
 800f92c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f930:	d108      	bne.n	800f944 <HAL_UART_Transmit+0x6c>
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	691b      	ldr	r3, [r3, #16]
 800f936:	2b00      	cmp	r3, #0
 800f938:	d104      	bne.n	800f944 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800f93a:	2300      	movs	r3, #0
 800f93c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800f93e:	68bb      	ldr	r3, [r7, #8]
 800f940:	61bb      	str	r3, [r7, #24]
 800f942:	e003      	b.n	800f94c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800f944:	68bb      	ldr	r3, [r7, #8]
 800f946:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f948:	2300      	movs	r3, #0
 800f94a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800f94c:	e030      	b.n	800f9b0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f94e:	683b      	ldr	r3, [r7, #0]
 800f950:	9300      	str	r3, [sp, #0]
 800f952:	697b      	ldr	r3, [r7, #20]
 800f954:	2200      	movs	r2, #0
 800f956:	2180      	movs	r1, #128	@ 0x80
 800f958:	68f8      	ldr	r0, [r7, #12]
 800f95a:	f001 feef 	bl	801173c <UART_WaitOnFlagUntilTimeout>
 800f95e:	4603      	mov	r3, r0
 800f960:	2b00      	cmp	r3, #0
 800f962:	d005      	beq.n	800f970 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	2220      	movs	r2, #32
 800f968:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800f96c:	2303      	movs	r3, #3
 800f96e:	e03d      	b.n	800f9ec <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800f970:	69fb      	ldr	r3, [r7, #28]
 800f972:	2b00      	cmp	r3, #0
 800f974:	d10b      	bne.n	800f98e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f976:	69bb      	ldr	r3, [r7, #24]
 800f978:	881b      	ldrh	r3, [r3, #0]
 800f97a:	461a      	mov	r2, r3
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f984:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800f986:	69bb      	ldr	r3, [r7, #24]
 800f988:	3302      	adds	r3, #2
 800f98a:	61bb      	str	r3, [r7, #24]
 800f98c:	e007      	b.n	800f99e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f98e:	69fb      	ldr	r3, [r7, #28]
 800f990:	781a      	ldrb	r2, [r3, #0]
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800f998:	69fb      	ldr	r3, [r7, #28]
 800f99a:	3301      	adds	r3, #1
 800f99c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800f9a4:	b29b      	uxth	r3, r3
 800f9a6:	3b01      	subs	r3, #1
 800f9a8:	b29a      	uxth	r2, r3
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800f9b6:	b29b      	uxth	r3, r3
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d1c8      	bne.n	800f94e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f9bc:	683b      	ldr	r3, [r7, #0]
 800f9be:	9300      	str	r3, [sp, #0]
 800f9c0:	697b      	ldr	r3, [r7, #20]
 800f9c2:	2200      	movs	r2, #0
 800f9c4:	2140      	movs	r1, #64	@ 0x40
 800f9c6:	68f8      	ldr	r0, [r7, #12]
 800f9c8:	f001 feb8 	bl	801173c <UART_WaitOnFlagUntilTimeout>
 800f9cc:	4603      	mov	r3, r0
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d005      	beq.n	800f9de <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	2220      	movs	r2, #32
 800f9d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800f9da:	2303      	movs	r3, #3
 800f9dc:	e006      	b.n	800f9ec <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	2220      	movs	r2, #32
 800f9e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800f9e6:	2300      	movs	r3, #0
 800f9e8:	e000      	b.n	800f9ec <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800f9ea:	2302      	movs	r3, #2
  }
}
 800f9ec:	4618      	mov	r0, r3
 800f9ee:	3720      	adds	r7, #32
 800f9f0:	46bd      	mov	sp, r7
 800f9f2:	bd80      	pop	{r7, pc}

0800f9f4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800f9f4:	b480      	push	{r7}
 800f9f6:	b091      	sub	sp, #68	@ 0x44
 800f9f8:	af00      	add	r7, sp, #0
 800f9fa:	60f8      	str	r0, [r7, #12]
 800f9fc:	60b9      	str	r1, [r7, #8]
 800f9fe:	4613      	mov	r3, r2
 800fa00:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fa08:	2b20      	cmp	r3, #32
 800fa0a:	d178      	bne.n	800fafe <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800fa0c:	68bb      	ldr	r3, [r7, #8]
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d002      	beq.n	800fa18 <HAL_UART_Transmit_IT+0x24>
 800fa12:	88fb      	ldrh	r3, [r7, #6]
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d101      	bne.n	800fa1c <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800fa18:	2301      	movs	r3, #1
 800fa1a:	e071      	b.n	800fb00 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	68ba      	ldr	r2, [r7, #8]
 800fa20:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	88fa      	ldrh	r2, [r7, #6]
 800fa26:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	88fa      	ldrh	r2, [r7, #6]
 800fa2e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	2200      	movs	r2, #0
 800fa36:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	2200      	movs	r2, #0
 800fa3c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	2221      	movs	r2, #33	@ 0x21
 800fa44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fa4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fa50:	d12a      	bne.n	800faa8 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	689b      	ldr	r3, [r3, #8]
 800fa56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fa5a:	d107      	bne.n	800fa6c <HAL_UART_Transmit_IT+0x78>
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	691b      	ldr	r3, [r3, #16]
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d103      	bne.n	800fa6c <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	4a29      	ldr	r2, [pc, #164]	@ (800fb0c <HAL_UART_Transmit_IT+0x118>)
 800fa68:	679a      	str	r2, [r3, #120]	@ 0x78
 800fa6a:	e002      	b.n	800fa72 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	4a28      	ldr	r2, [pc, #160]	@ (800fb10 <HAL_UART_Transmit_IT+0x11c>)
 800fa70:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	3308      	adds	r3, #8
 800fa78:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa7c:	e853 3f00 	ldrex	r3, [r3]
 800fa80:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800fa82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa84:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800fa88:	63bb      	str	r3, [r7, #56]	@ 0x38
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	3308      	adds	r3, #8
 800fa90:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fa92:	637a      	str	r2, [r7, #52]	@ 0x34
 800fa94:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa96:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800fa98:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fa9a:	e841 2300 	strex	r3, r2, [r1]
 800fa9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800faa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d1e5      	bne.n	800fa72 <HAL_UART_Transmit_IT+0x7e>
 800faa6:	e028      	b.n	800fafa <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	689b      	ldr	r3, [r3, #8]
 800faac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fab0:	d107      	bne.n	800fac2 <HAL_UART_Transmit_IT+0xce>
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	691b      	ldr	r3, [r3, #16]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d103      	bne.n	800fac2 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	4a15      	ldr	r2, [pc, #84]	@ (800fb14 <HAL_UART_Transmit_IT+0x120>)
 800fabe:	679a      	str	r2, [r3, #120]	@ 0x78
 800fac0:	e002      	b.n	800fac8 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	4a14      	ldr	r2, [pc, #80]	@ (800fb18 <HAL_UART_Transmit_IT+0x124>)
 800fac6:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800face:	697b      	ldr	r3, [r7, #20]
 800fad0:	e853 3f00 	ldrex	r3, [r3]
 800fad4:	613b      	str	r3, [r7, #16]
   return(result);
 800fad6:	693b      	ldr	r3, [r7, #16]
 800fad8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fadc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	461a      	mov	r2, r3
 800fae4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fae6:	623b      	str	r3, [r7, #32]
 800fae8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800faea:	69f9      	ldr	r1, [r7, #28]
 800faec:	6a3a      	ldr	r2, [r7, #32]
 800faee:	e841 2300 	strex	r3, r2, [r1]
 800faf2:	61bb      	str	r3, [r7, #24]
   return(result);
 800faf4:	69bb      	ldr	r3, [r7, #24]
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d1e6      	bne.n	800fac8 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800fafa:	2300      	movs	r3, #0
 800fafc:	e000      	b.n	800fb00 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800fafe:	2302      	movs	r3, #2
  }
}
 800fb00:	4618      	mov	r0, r3
 800fb02:	3744      	adds	r7, #68	@ 0x44
 800fb04:	46bd      	mov	sp, r7
 800fb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb0a:	4770      	bx	lr
 800fb0c:	08012271 	.word	0x08012271
 800fb10:	08012191 	.word	0x08012191
 800fb14:	080120cf 	.word	0x080120cf
 800fb18:	08012017 	.word	0x08012017

0800fb1c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fb1c:	b580      	push	{r7, lr}
 800fb1e:	b08a      	sub	sp, #40	@ 0x28
 800fb20:	af00      	add	r7, sp, #0
 800fb22:	60f8      	str	r0, [r7, #12]
 800fb24:	60b9      	str	r1, [r7, #8]
 800fb26:	4613      	mov	r3, r2
 800fb28:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800fb30:	2b20      	cmp	r3, #32
 800fb32:	d137      	bne.n	800fba4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800fb34:	68bb      	ldr	r3, [r7, #8]
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d002      	beq.n	800fb40 <HAL_UART_Receive_IT+0x24>
 800fb3a:	88fb      	ldrh	r3, [r7, #6]
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d101      	bne.n	800fb44 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800fb40:	2301      	movs	r3, #1
 800fb42:	e030      	b.n	800fba6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	2200      	movs	r2, #0
 800fb48:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	4a18      	ldr	r2, [pc, #96]	@ (800fbb0 <HAL_UART_Receive_IT+0x94>)
 800fb50:	4293      	cmp	r3, r2
 800fb52:	d01f      	beq.n	800fb94 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	685b      	ldr	r3, [r3, #4]
 800fb5a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d018      	beq.n	800fb94 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb68:	697b      	ldr	r3, [r7, #20]
 800fb6a:	e853 3f00 	ldrex	r3, [r3]
 800fb6e:	613b      	str	r3, [r7, #16]
   return(result);
 800fb70:	693b      	ldr	r3, [r7, #16]
 800fb72:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800fb76:	627b      	str	r3, [r7, #36]	@ 0x24
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	461a      	mov	r2, r3
 800fb7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb80:	623b      	str	r3, [r7, #32]
 800fb82:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb84:	69f9      	ldr	r1, [r7, #28]
 800fb86:	6a3a      	ldr	r2, [r7, #32]
 800fb88:	e841 2300 	strex	r3, r2, [r1]
 800fb8c:	61bb      	str	r3, [r7, #24]
   return(result);
 800fb8e:	69bb      	ldr	r3, [r7, #24]
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d1e6      	bne.n	800fb62 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800fb94:	88fb      	ldrh	r3, [r7, #6]
 800fb96:	461a      	mov	r2, r3
 800fb98:	68b9      	ldr	r1, [r7, #8]
 800fb9a:	68f8      	ldr	r0, [r7, #12]
 800fb9c:	f001 fe3c 	bl	8011818 <UART_Start_Receive_IT>
 800fba0:	4603      	mov	r3, r0
 800fba2:	e000      	b.n	800fba6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800fba4:	2302      	movs	r3, #2
  }
}
 800fba6:	4618      	mov	r0, r3
 800fba8:	3728      	adds	r7, #40	@ 0x28
 800fbaa:	46bd      	mov	sp, r7
 800fbac:	bd80      	pop	{r7, pc}
 800fbae:	bf00      	nop
 800fbb0:	58000c00 	.word	0x58000c00

0800fbb4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fbb4:	b580      	push	{r7, lr}
 800fbb6:	b08a      	sub	sp, #40	@ 0x28
 800fbb8:	af00      	add	r7, sp, #0
 800fbba:	60f8      	str	r0, [r7, #12]
 800fbbc:	60b9      	str	r1, [r7, #8]
 800fbbe:	4613      	mov	r3, r2
 800fbc0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800fbc8:	2b20      	cmp	r3, #32
 800fbca:	d137      	bne.n	800fc3c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800fbcc:	68bb      	ldr	r3, [r7, #8]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d002      	beq.n	800fbd8 <HAL_UART_Receive_DMA+0x24>
 800fbd2:	88fb      	ldrh	r3, [r7, #6]
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d101      	bne.n	800fbdc <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800fbd8:	2301      	movs	r3, #1
 800fbda:	e030      	b.n	800fc3e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	2200      	movs	r2, #0
 800fbe0:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	4a18      	ldr	r2, [pc, #96]	@ (800fc48 <HAL_UART_Receive_DMA+0x94>)
 800fbe8:	4293      	cmp	r3, r2
 800fbea:	d01f      	beq.n	800fc2c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	685b      	ldr	r3, [r3, #4]
 800fbf2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d018      	beq.n	800fc2c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc00:	697b      	ldr	r3, [r7, #20]
 800fc02:	e853 3f00 	ldrex	r3, [r3]
 800fc06:	613b      	str	r3, [r7, #16]
   return(result);
 800fc08:	693b      	ldr	r3, [r7, #16]
 800fc0a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800fc0e:	627b      	str	r3, [r7, #36]	@ 0x24
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	461a      	mov	r2, r3
 800fc16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc18:	623b      	str	r3, [r7, #32]
 800fc1a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc1c:	69f9      	ldr	r1, [r7, #28]
 800fc1e:	6a3a      	ldr	r2, [r7, #32]
 800fc20:	e841 2300 	strex	r3, r2, [r1]
 800fc24:	61bb      	str	r3, [r7, #24]
   return(result);
 800fc26:	69bb      	ldr	r3, [r7, #24]
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d1e6      	bne.n	800fbfa <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800fc2c:	88fb      	ldrh	r3, [r7, #6]
 800fc2e:	461a      	mov	r2, r3
 800fc30:	68b9      	ldr	r1, [r7, #8]
 800fc32:	68f8      	ldr	r0, [r7, #12]
 800fc34:	f001 ff12 	bl	8011a5c <UART_Start_Receive_DMA>
 800fc38:	4603      	mov	r3, r0
 800fc3a:	e000      	b.n	800fc3e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800fc3c:	2302      	movs	r3, #2
  }
}
 800fc3e:	4618      	mov	r0, r3
 800fc40:	3728      	adds	r7, #40	@ 0x28
 800fc42:	46bd      	mov	sp, r7
 800fc44:	bd80      	pop	{r7, pc}
 800fc46:	bf00      	nop
 800fc48:	58000c00 	.word	0x58000c00

0800fc4c <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800fc4c:	b580      	push	{r7, lr}
 800fc4e:	b090      	sub	sp, #64	@ 0x40
 800fc50:	af00      	add	r7, sp, #0
 800fc52:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fc5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800fc62:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	689b      	ldr	r3, [r3, #8]
 800fc6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fc6e:	2b80      	cmp	r3, #128	@ 0x80
 800fc70:	d139      	bne.n	800fce6 <HAL_UART_DMAStop+0x9a>
 800fc72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc74:	2b21      	cmp	r3, #33	@ 0x21
 800fc76:	d136      	bne.n	800fce6 <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	3308      	adds	r3, #8
 800fc7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc80:	6a3b      	ldr	r3, [r7, #32]
 800fc82:	e853 3f00 	ldrex	r3, [r3]
 800fc86:	61fb      	str	r3, [r7, #28]
   return(result);
 800fc88:	69fb      	ldr	r3, [r7, #28]
 800fc8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fc8e:	637b      	str	r3, [r7, #52]	@ 0x34
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	3308      	adds	r3, #8
 800fc96:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fc98:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800fc9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fc9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fca0:	e841 2300 	strex	r3, r2, [r1]
 800fca4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800fca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d1e5      	bne.n	800fc78 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d015      	beq.n	800fce0 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fcb8:	4618      	mov	r0, r3
 800fcba:	f7f7 fde1 	bl	8007880 <HAL_DMA_Abort>
 800fcbe:	4603      	mov	r3, r0
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d00d      	beq.n	800fce0 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fcc8:	4618      	mov	r0, r3
 800fcca:	f7f9 fa9f 	bl	800920c <HAL_DMA_GetError>
 800fcce:	4603      	mov	r3, r0
 800fcd0:	2b20      	cmp	r3, #32
 800fcd2:	d105      	bne.n	800fce0 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	2210      	movs	r2, #16
 800fcd8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800fcdc:	2303      	movs	r3, #3
 800fcde:	e047      	b.n	800fd70 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800fce0:	6878      	ldr	r0, [r7, #4]
 800fce2:	f001 ff61 	bl	8011ba8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	689b      	ldr	r3, [r3, #8]
 800fcec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fcf0:	2b40      	cmp	r3, #64	@ 0x40
 800fcf2:	d13c      	bne.n	800fd6e <HAL_UART_DMAStop+0x122>
 800fcf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcf6:	2b22      	cmp	r3, #34	@ 0x22
 800fcf8:	d139      	bne.n	800fd6e <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	3308      	adds	r3, #8
 800fd00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	e853 3f00 	ldrex	r3, [r3]
 800fd08:	60bb      	str	r3, [r7, #8]
   return(result);
 800fd0a:	68bb      	ldr	r3, [r7, #8]
 800fd0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fd10:	633b      	str	r3, [r7, #48]	@ 0x30
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	3308      	adds	r3, #8
 800fd18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fd1a:	61ba      	str	r2, [r7, #24]
 800fd1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd1e:	6979      	ldr	r1, [r7, #20]
 800fd20:	69ba      	ldr	r2, [r7, #24]
 800fd22:	e841 2300 	strex	r3, r2, [r1]
 800fd26:	613b      	str	r3, [r7, #16]
   return(result);
 800fd28:	693b      	ldr	r3, [r7, #16]
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d1e5      	bne.n	800fcfa <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d017      	beq.n	800fd68 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fd3e:	4618      	mov	r0, r3
 800fd40:	f7f7 fd9e 	bl	8007880 <HAL_DMA_Abort>
 800fd44:	4603      	mov	r3, r0
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d00e      	beq.n	800fd68 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fd50:	4618      	mov	r0, r3
 800fd52:	f7f9 fa5b 	bl	800920c <HAL_DMA_GetError>
 800fd56:	4603      	mov	r3, r0
 800fd58:	2b20      	cmp	r3, #32
 800fd5a:	d105      	bne.n	800fd68 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	2210      	movs	r2, #16
 800fd60:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800fd64:	2303      	movs	r3, #3
 800fd66:	e003      	b.n	800fd70 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800fd68:	6878      	ldr	r0, [r7, #4]
 800fd6a:	f001 ff5f 	bl	8011c2c <UART_EndRxTransfer>
  }

  return HAL_OK;
 800fd6e:	2300      	movs	r3, #0
}
 800fd70:	4618      	mov	r0, r3
 800fd72:	3740      	adds	r7, #64	@ 0x40
 800fd74:	46bd      	mov	sp, r7
 800fd76:	bd80      	pop	{r7, pc}

0800fd78 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 800fd78:	b580      	push	{r7, lr}
 800fd7a:	b0a2      	sub	sp, #136	@ 0x88
 800fd7c:	af00      	add	r7, sp, #0
 800fd7e:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt = 1U;
 800fd80:	2301      	movs	r3, #1
 800fd82:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

  /* Disable interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_TCIE | USART_CR1_RXNEIE_RXFNEIE |
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd8c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800fd8e:	e853 3f00 	ldrex	r3, [r3]
 800fd92:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800fd94:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fd96:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 800fd9a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	461a      	mov	r2, r3
 800fda4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800fda8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800fdaa:	66ba      	str	r2, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdac:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800fdae:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800fdb0:	e841 2300 	strex	r3, r2, [r1]
 800fdb4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800fdb6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d1e4      	bne.n	800fd86 <HAL_UART_Abort_IT+0xe>
                                          USART_CR1_TXEIE_TXFNFIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	3308      	adds	r3, #8
 800fdc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fdc6:	e853 3f00 	ldrex	r3, [r3]
 800fdca:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800fdcc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fdce:	4b85      	ldr	r3, [pc, #532]	@ (800ffe4 <HAL_UART_Abort_IT+0x26c>)
 800fdd0:	4013      	ands	r3, r2
 800fdd2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	3308      	adds	r3, #8
 800fdda:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800fddc:	65ba      	str	r2, [r7, #88]	@ 0x58
 800fdde:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fde0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800fde2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800fde4:	e841 2300 	strex	r3, r2, [r1]
 800fde8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800fdea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d1e5      	bne.n	800fdbc <HAL_UART_Abort_IT+0x44>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fdf4:	2b01      	cmp	r3, #1
 800fdf6:	d118      	bne.n	800fe2a <HAL_UART_Abort_IT+0xb2>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe00:	e853 3f00 	ldrex	r3, [r3]
 800fe04:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800fe06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fe08:	f023 0310 	bic.w	r3, r3, #16
 800fe0c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	461a      	mov	r2, r3
 800fe14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800fe16:	647b      	str	r3, [r7, #68]	@ 0x44
 800fe18:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe1a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800fe1c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fe1e:	e841 2300 	strex	r3, r2, [r1]
 800fe22:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800fe24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d1e6      	bne.n	800fdf8 <HAL_UART_Abort_IT+0x80>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d00f      	beq.n	800fe52 <HAL_UART_Abort_IT+0xda>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	689b      	ldr	r3, [r3, #8]
 800fe38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fe3c:	2b80      	cmp	r3, #128	@ 0x80
 800fe3e:	d104      	bne.n	800fe4a <HAL_UART_Abort_IT+0xd2>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fe44:	4a68      	ldr	r2, [pc, #416]	@ (800ffe8 <HAL_UART_Abort_IT+0x270>)
 800fe46:	651a      	str	r2, [r3, #80]	@ 0x50
 800fe48:	e003      	b.n	800fe52 <HAL_UART_Abort_IT+0xda>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fe4e:	2200      	movs	r2, #0
 800fe50:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d011      	beq.n	800fe80 <HAL_UART_Abort_IT+0x108>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	689b      	ldr	r3, [r3, #8]
 800fe62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fe66:	2b40      	cmp	r3, #64	@ 0x40
 800fe68:	d105      	bne.n	800fe76 <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fe70:	4a5e      	ldr	r2, [pc, #376]	@ (800ffec <HAL_UART_Abort_IT+0x274>)
 800fe72:	651a      	str	r2, [r3, #80]	@ 0x50
 800fe74:	e004      	b.n	800fe80 <HAL_UART_Abort_IT+0x108>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fe7c:	2200      	movs	r2, #0
 800fe7e:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	689b      	ldr	r3, [r3, #8]
 800fe86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fe8a:	2b80      	cmp	r3, #128	@ 0x80
 800fe8c:	d12d      	bne.n	800feea <HAL_UART_Abort_IT+0x172>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	3308      	adds	r3, #8
 800fe94:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe98:	e853 3f00 	ldrex	r3, [r3]
 800fe9c:	623b      	str	r3, [r7, #32]
   return(result);
 800fe9e:	6a3b      	ldr	r3, [r7, #32]
 800fea0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fea4:	677b      	str	r3, [r7, #116]	@ 0x74
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	3308      	adds	r3, #8
 800feac:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800feae:	633a      	str	r2, [r7, #48]	@ 0x30
 800feb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800feb2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800feb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800feb6:	e841 2300 	strex	r3, r2, [r1]
 800feba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800febc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d1e5      	bne.n	800fe8e <HAL_UART_Abort_IT+0x116>

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d00f      	beq.n	800feea <HAL_UART_Abort_IT+0x172>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fece:	4618      	mov	r0, r3
 800fed0:	f7f7 fff4 	bl	8007ebc <HAL_DMA_Abort_IT>
 800fed4:	4603      	mov	r3, r0
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d004      	beq.n	800fee4 <HAL_UART_Abort_IT+0x16c>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fede:	2200      	movs	r2, #0
 800fee0:	651a      	str	r2, [r3, #80]	@ 0x50
 800fee2:	e002      	b.n	800feea <HAL_UART_Abort_IT+0x172>
      }
      else
      {
        abortcplt = 0U;
 800fee4:	2300      	movs	r3, #0
 800fee6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	689b      	ldr	r3, [r3, #8]
 800fef0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fef4:	2b40      	cmp	r3, #64	@ 0x40
 800fef6:	d133      	bne.n	800ff60 <HAL_UART_Abort_IT+0x1e8>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	3308      	adds	r3, #8
 800fefe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff00:	693b      	ldr	r3, [r7, #16]
 800ff02:	e853 3f00 	ldrex	r3, [r3]
 800ff06:	60fb      	str	r3, [r7, #12]
   return(result);
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ff0e:	673b      	str	r3, [r7, #112]	@ 0x70
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	3308      	adds	r3, #8
 800ff16:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800ff18:	61fa      	str	r2, [r7, #28]
 800ff1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff1c:	69b9      	ldr	r1, [r7, #24]
 800ff1e:	69fa      	ldr	r2, [r7, #28]
 800ff20:	e841 2300 	strex	r3, r2, [r1]
 800ff24:	617b      	str	r3, [r7, #20]
   return(result);
 800ff26:	697b      	ldr	r3, [r7, #20]
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d1e5      	bne.n	800fef8 <HAL_UART_Abort_IT+0x180>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d014      	beq.n	800ff60 <HAL_UART_Abort_IT+0x1e8>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ff3c:	4618      	mov	r0, r3
 800ff3e:	f7f7 ffbd 	bl	8007ebc <HAL_DMA_Abort_IT>
 800ff42:	4603      	mov	r3, r0
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d008      	beq.n	800ff5a <HAL_UART_Abort_IT+0x1e2>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ff4e:	2200      	movs	r2, #0
 800ff50:	651a      	str	r2, [r3, #80]	@ 0x50
        abortcplt = 1U;
 800ff52:	2301      	movs	r3, #1
 800ff54:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ff58:	e002      	b.n	800ff60 <HAL_UART_Abort_IT+0x1e8>
      }
      else
      {
        abortcplt = 0U;
 800ff5a:	2300      	movs	r3, #0
 800ff5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (abortcplt == 1U)
 800ff60:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ff64:	2b01      	cmp	r3, #1
 800ff66:	d138      	bne.n	800ffda <HAL_UART_Abort_IT+0x262>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0U;
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	2200      	movs	r2, #0
 800ff6c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->RxXferCount = 0U;
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	2200      	movs	r2, #0
 800ff74:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Clear ISR function pointers */
    huart->RxISR = NULL;
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	2200      	movs	r2, #0
 800ff7c:	675a      	str	r2, [r3, #116]	@ 0x74
    huart->TxISR = NULL;
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	2200      	movs	r2, #0
 800ff82:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Reset errorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	2200      	movs	r2, #0
 800ff88:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	220f      	movs	r2, #15
 800ff92:	621a      	str	r2, [r3, #32]

    /* Flush the whole TX FIFO (if needed) */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ff98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ff9c:	d107      	bne.n	800ffae <HAL_UART_Abort_IT+0x236>
    {
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	699a      	ldr	r2, [r3, #24]
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	f042 0210 	orr.w	r2, r2, #16
 800ffac:	619a      	str	r2, [r3, #24]
    }

    /* Discard the received data */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	699a      	ldr	r2, [r3, #24]
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	f042 0208 	orr.w	r2, r2, #8
 800ffbc:	619a      	str	r2, [r3, #24]

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	2220      	movs	r2, #32
 800ffc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    huart->RxState = HAL_UART_STATE_READY;
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	2220      	movs	r2, #32
 800ffca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	2200      	movs	r2, #0
 800ffd2:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 800ffd4:	6878      	ldr	r0, [r7, #4]
 800ffd6:	f000 fbe3 	bl	80107a0 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800ffda:	2300      	movs	r3, #0
}
 800ffdc:	4618      	mov	r0, r3
 800ffde:	3788      	adds	r7, #136	@ 0x88
 800ffe0:	46bd      	mov	sp, r7
 800ffe2:	bd80      	pop	{r7, pc}
 800ffe4:	ef7ffffe 	.word	0xef7ffffe
 800ffe8:	08011f0b 	.word	0x08011f0b
 800ffec:	08011f97 	.word	0x08011f97

0800fff0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800fff0:	b580      	push	{r7, lr}
 800fff2:	b0ba      	sub	sp, #232	@ 0xe8
 800fff4:	af00      	add	r7, sp, #0
 800fff6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	69db      	ldr	r3, [r3, #28]
 800fffe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	689b      	ldr	r3, [r3, #8]
 8010012:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8010016:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 801001a:	f640 030f 	movw	r3, #2063	@ 0x80f
 801001e:	4013      	ands	r3, r2
 8010020:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8010024:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010028:	2b00      	cmp	r3, #0
 801002a:	d11b      	bne.n	8010064 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801002c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010030:	f003 0320 	and.w	r3, r3, #32
 8010034:	2b00      	cmp	r3, #0
 8010036:	d015      	beq.n	8010064 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010038:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801003c:	f003 0320 	and.w	r3, r3, #32
 8010040:	2b00      	cmp	r3, #0
 8010042:	d105      	bne.n	8010050 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010044:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010048:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801004c:	2b00      	cmp	r3, #0
 801004e:	d009      	beq.n	8010064 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010054:	2b00      	cmp	r3, #0
 8010056:	f000 8377 	beq.w	8010748 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801005e:	6878      	ldr	r0, [r7, #4]
 8010060:	4798      	blx	r3
      }
      return;
 8010062:	e371      	b.n	8010748 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8010064:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010068:	2b00      	cmp	r3, #0
 801006a:	f000 8123 	beq.w	80102b4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801006e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8010072:	4b8d      	ldr	r3, [pc, #564]	@ (80102a8 <HAL_UART_IRQHandler+0x2b8>)
 8010074:	4013      	ands	r3, r2
 8010076:	2b00      	cmp	r3, #0
 8010078:	d106      	bne.n	8010088 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801007a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 801007e:	4b8b      	ldr	r3, [pc, #556]	@ (80102ac <HAL_UART_IRQHandler+0x2bc>)
 8010080:	4013      	ands	r3, r2
 8010082:	2b00      	cmp	r3, #0
 8010084:	f000 8116 	beq.w	80102b4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010088:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801008c:	f003 0301 	and.w	r3, r3, #1
 8010090:	2b00      	cmp	r3, #0
 8010092:	d011      	beq.n	80100b8 <HAL_UART_IRQHandler+0xc8>
 8010094:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010098:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801009c:	2b00      	cmp	r3, #0
 801009e:	d00b      	beq.n	80100b8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	2201      	movs	r2, #1
 80100a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80100ae:	f043 0201 	orr.w	r2, r3, #1
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80100b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80100bc:	f003 0302 	and.w	r3, r3, #2
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d011      	beq.n	80100e8 <HAL_UART_IRQHandler+0xf8>
 80100c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80100c8:	f003 0301 	and.w	r3, r3, #1
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d00b      	beq.n	80100e8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	2202      	movs	r2, #2
 80100d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80100de:	f043 0204 	orr.w	r2, r3, #4
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80100e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80100ec:	f003 0304 	and.w	r3, r3, #4
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d011      	beq.n	8010118 <HAL_UART_IRQHandler+0x128>
 80100f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80100f8:	f003 0301 	and.w	r3, r3, #1
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d00b      	beq.n	8010118 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	2204      	movs	r2, #4
 8010106:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801010e:	f043 0202 	orr.w	r2, r3, #2
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8010118:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801011c:	f003 0308 	and.w	r3, r3, #8
 8010120:	2b00      	cmp	r3, #0
 8010122:	d017      	beq.n	8010154 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010124:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010128:	f003 0320 	and.w	r3, r3, #32
 801012c:	2b00      	cmp	r3, #0
 801012e:	d105      	bne.n	801013c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8010130:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8010134:	4b5c      	ldr	r3, [pc, #368]	@ (80102a8 <HAL_UART_IRQHandler+0x2b8>)
 8010136:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010138:	2b00      	cmp	r3, #0
 801013a:	d00b      	beq.n	8010154 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	2208      	movs	r2, #8
 8010142:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801014a:	f043 0208 	orr.w	r2, r3, #8
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8010154:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010158:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801015c:	2b00      	cmp	r3, #0
 801015e:	d012      	beq.n	8010186 <HAL_UART_IRQHandler+0x196>
 8010160:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010164:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8010168:	2b00      	cmp	r3, #0
 801016a:	d00c      	beq.n	8010186 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010174:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801017c:	f043 0220 	orr.w	r2, r3, #32
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801018c:	2b00      	cmp	r3, #0
 801018e:	f000 82dd 	beq.w	801074c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010196:	f003 0320 	and.w	r3, r3, #32
 801019a:	2b00      	cmp	r3, #0
 801019c:	d013      	beq.n	80101c6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801019e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80101a2:	f003 0320 	and.w	r3, r3, #32
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d105      	bne.n	80101b6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80101aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80101ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d007      	beq.n	80101c6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d003      	beq.n	80101c6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80101c2:	6878      	ldr	r0, [r7, #4]
 80101c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80101cc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	689b      	ldr	r3, [r3, #8]
 80101d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80101da:	2b40      	cmp	r3, #64	@ 0x40
 80101dc:	d005      	beq.n	80101ea <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80101de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80101e2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d054      	beq.n	8010294 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80101ea:	6878      	ldr	r0, [r7, #4]
 80101ec:	f001 fd1e 	bl	8011c2c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	689b      	ldr	r3, [r3, #8]
 80101f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80101fa:	2b40      	cmp	r3, #64	@ 0x40
 80101fc:	d146      	bne.n	801028c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	3308      	adds	r3, #8
 8010204:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010208:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801020c:	e853 3f00 	ldrex	r3, [r3]
 8010210:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8010214:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8010218:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801021c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	3308      	adds	r3, #8
 8010226:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 801022a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 801022e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010232:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8010236:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 801023a:	e841 2300 	strex	r3, r2, [r1]
 801023e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8010242:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8010246:	2b00      	cmp	r3, #0
 8010248:	d1d9      	bne.n	80101fe <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010250:	2b00      	cmp	r3, #0
 8010252:	d017      	beq.n	8010284 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801025a:	4a15      	ldr	r2, [pc, #84]	@ (80102b0 <HAL_UART_IRQHandler+0x2c0>)
 801025c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010264:	4618      	mov	r0, r3
 8010266:	f7f7 fe29 	bl	8007ebc <HAL_DMA_Abort_IT>
 801026a:	4603      	mov	r3, r0
 801026c:	2b00      	cmp	r3, #0
 801026e:	d019      	beq.n	80102a4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010276:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010278:	687a      	ldr	r2, [r7, #4]
 801027a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 801027e:	4610      	mov	r0, r2
 8010280:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010282:	e00f      	b.n	80102a4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010284:	6878      	ldr	r0, [r7, #4]
 8010286:	f000 fa81 	bl	801078c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801028a:	e00b      	b.n	80102a4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801028c:	6878      	ldr	r0, [r7, #4]
 801028e:	f000 fa7d 	bl	801078c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010292:	e007      	b.n	80102a4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010294:	6878      	ldr	r0, [r7, #4]
 8010296:	f000 fa79 	bl	801078c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	2200      	movs	r2, #0
 801029e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80102a2:	e253      	b.n	801074c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80102a4:	bf00      	nop
    return;
 80102a6:	e251      	b.n	801074c <HAL_UART_IRQHandler+0x75c>
 80102a8:	10000001 	.word	0x10000001
 80102ac:	04000120 	.word	0x04000120
 80102b0:	08011edf 	.word	0x08011edf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80102b8:	2b01      	cmp	r3, #1
 80102ba:	f040 81e7 	bne.w	801068c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80102be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80102c2:	f003 0310 	and.w	r3, r3, #16
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	f000 81e0 	beq.w	801068c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80102cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80102d0:	f003 0310 	and.w	r3, r3, #16
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	f000 81d9 	beq.w	801068c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	2210      	movs	r2, #16
 80102e0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	689b      	ldr	r3, [r3, #8]
 80102e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80102ec:	2b40      	cmp	r3, #64	@ 0x40
 80102ee:	f040 8151 	bne.w	8010594 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	4a96      	ldr	r2, [pc, #600]	@ (8010554 <HAL_UART_IRQHandler+0x564>)
 80102fc:	4293      	cmp	r3, r2
 80102fe:	d068      	beq.n	80103d2 <HAL_UART_IRQHandler+0x3e2>
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	4a93      	ldr	r2, [pc, #588]	@ (8010558 <HAL_UART_IRQHandler+0x568>)
 801030a:	4293      	cmp	r3, r2
 801030c:	d061      	beq.n	80103d2 <HAL_UART_IRQHandler+0x3e2>
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	4a91      	ldr	r2, [pc, #580]	@ (801055c <HAL_UART_IRQHandler+0x56c>)
 8010318:	4293      	cmp	r3, r2
 801031a:	d05a      	beq.n	80103d2 <HAL_UART_IRQHandler+0x3e2>
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	4a8e      	ldr	r2, [pc, #568]	@ (8010560 <HAL_UART_IRQHandler+0x570>)
 8010326:	4293      	cmp	r3, r2
 8010328:	d053      	beq.n	80103d2 <HAL_UART_IRQHandler+0x3e2>
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	4a8c      	ldr	r2, [pc, #560]	@ (8010564 <HAL_UART_IRQHandler+0x574>)
 8010334:	4293      	cmp	r3, r2
 8010336:	d04c      	beq.n	80103d2 <HAL_UART_IRQHandler+0x3e2>
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	4a89      	ldr	r2, [pc, #548]	@ (8010568 <HAL_UART_IRQHandler+0x578>)
 8010342:	4293      	cmp	r3, r2
 8010344:	d045      	beq.n	80103d2 <HAL_UART_IRQHandler+0x3e2>
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	4a87      	ldr	r2, [pc, #540]	@ (801056c <HAL_UART_IRQHandler+0x57c>)
 8010350:	4293      	cmp	r3, r2
 8010352:	d03e      	beq.n	80103d2 <HAL_UART_IRQHandler+0x3e2>
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	4a84      	ldr	r2, [pc, #528]	@ (8010570 <HAL_UART_IRQHandler+0x580>)
 801035e:	4293      	cmp	r3, r2
 8010360:	d037      	beq.n	80103d2 <HAL_UART_IRQHandler+0x3e2>
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	4a82      	ldr	r2, [pc, #520]	@ (8010574 <HAL_UART_IRQHandler+0x584>)
 801036c:	4293      	cmp	r3, r2
 801036e:	d030      	beq.n	80103d2 <HAL_UART_IRQHandler+0x3e2>
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	4a7f      	ldr	r2, [pc, #508]	@ (8010578 <HAL_UART_IRQHandler+0x588>)
 801037a:	4293      	cmp	r3, r2
 801037c:	d029      	beq.n	80103d2 <HAL_UART_IRQHandler+0x3e2>
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	4a7d      	ldr	r2, [pc, #500]	@ (801057c <HAL_UART_IRQHandler+0x58c>)
 8010388:	4293      	cmp	r3, r2
 801038a:	d022      	beq.n	80103d2 <HAL_UART_IRQHandler+0x3e2>
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	4a7a      	ldr	r2, [pc, #488]	@ (8010580 <HAL_UART_IRQHandler+0x590>)
 8010396:	4293      	cmp	r3, r2
 8010398:	d01b      	beq.n	80103d2 <HAL_UART_IRQHandler+0x3e2>
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	4a78      	ldr	r2, [pc, #480]	@ (8010584 <HAL_UART_IRQHandler+0x594>)
 80103a4:	4293      	cmp	r3, r2
 80103a6:	d014      	beq.n	80103d2 <HAL_UART_IRQHandler+0x3e2>
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	4a75      	ldr	r2, [pc, #468]	@ (8010588 <HAL_UART_IRQHandler+0x598>)
 80103b2:	4293      	cmp	r3, r2
 80103b4:	d00d      	beq.n	80103d2 <HAL_UART_IRQHandler+0x3e2>
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	4a73      	ldr	r2, [pc, #460]	@ (801058c <HAL_UART_IRQHandler+0x59c>)
 80103c0:	4293      	cmp	r3, r2
 80103c2:	d006      	beq.n	80103d2 <HAL_UART_IRQHandler+0x3e2>
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	4a70      	ldr	r2, [pc, #448]	@ (8010590 <HAL_UART_IRQHandler+0x5a0>)
 80103ce:	4293      	cmp	r3, r2
 80103d0:	d106      	bne.n	80103e0 <HAL_UART_IRQHandler+0x3f0>
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	685b      	ldr	r3, [r3, #4]
 80103dc:	b29b      	uxth	r3, r3
 80103de:	e005      	b.n	80103ec <HAL_UART_IRQHandler+0x3fc>
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	685b      	ldr	r3, [r3, #4]
 80103ea:	b29b      	uxth	r3, r3
 80103ec:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80103f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	f000 81ab 	beq.w	8010750 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010400:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010404:	429a      	cmp	r2, r3
 8010406:	f080 81a3 	bcs.w	8010750 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010410:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801041a:	69db      	ldr	r3, [r3, #28]
 801041c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010420:	f000 8087 	beq.w	8010532 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801042c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010430:	e853 3f00 	ldrex	r3, [r3]
 8010434:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8010438:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801043c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010440:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	461a      	mov	r2, r3
 801044a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801044e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8010452:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010456:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801045a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801045e:	e841 2300 	strex	r3, r2, [r1]
 8010462:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8010466:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801046a:	2b00      	cmp	r3, #0
 801046c:	d1da      	bne.n	8010424 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	3308      	adds	r3, #8
 8010474:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010476:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010478:	e853 3f00 	ldrex	r3, [r3]
 801047c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 801047e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010480:	f023 0301 	bic.w	r3, r3, #1
 8010484:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	3308      	adds	r3, #8
 801048e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8010492:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8010496:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010498:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801049a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801049e:	e841 2300 	strex	r3, r2, [r1]
 80104a2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80104a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d1e1      	bne.n	801046e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	3308      	adds	r3, #8
 80104b0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80104b4:	e853 3f00 	ldrex	r3, [r3]
 80104b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80104ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80104bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80104c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	3308      	adds	r3, #8
 80104ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80104ce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80104d0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104d2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80104d4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80104d6:	e841 2300 	strex	r3, r2, [r1]
 80104da:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80104dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d1e3      	bne.n	80104aa <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	2220      	movs	r2, #32
 80104e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	2200      	movs	r2, #0
 80104ee:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80104f8:	e853 3f00 	ldrex	r3, [r3]
 80104fc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80104fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010500:	f023 0310 	bic.w	r3, r3, #16
 8010504:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	461a      	mov	r2, r3
 801050e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010512:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010514:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010516:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010518:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801051a:	e841 2300 	strex	r3, r2, [r1]
 801051e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8010520:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010522:	2b00      	cmp	r3, #0
 8010524:	d1e4      	bne.n	80104f0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801052c:	4618      	mov	r0, r3
 801052e:	f7f7 f9a7 	bl	8007880 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	2202      	movs	r2, #2
 8010536:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010544:	b29b      	uxth	r3, r3
 8010546:	1ad3      	subs	r3, r2, r3
 8010548:	b29b      	uxth	r3, r3
 801054a:	4619      	mov	r1, r3
 801054c:	6878      	ldr	r0, [r7, #4]
 801054e:	f000 f931 	bl	80107b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010552:	e0fd      	b.n	8010750 <HAL_UART_IRQHandler+0x760>
 8010554:	40020010 	.word	0x40020010
 8010558:	40020028 	.word	0x40020028
 801055c:	40020040 	.word	0x40020040
 8010560:	40020058 	.word	0x40020058
 8010564:	40020070 	.word	0x40020070
 8010568:	40020088 	.word	0x40020088
 801056c:	400200a0 	.word	0x400200a0
 8010570:	400200b8 	.word	0x400200b8
 8010574:	40020410 	.word	0x40020410
 8010578:	40020428 	.word	0x40020428
 801057c:	40020440 	.word	0x40020440
 8010580:	40020458 	.word	0x40020458
 8010584:	40020470 	.word	0x40020470
 8010588:	40020488 	.word	0x40020488
 801058c:	400204a0 	.word	0x400204a0
 8010590:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80105a0:	b29b      	uxth	r3, r3
 80105a2:	1ad3      	subs	r3, r2, r3
 80105a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80105ae:	b29b      	uxth	r3, r3
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	f000 80cf 	beq.w	8010754 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80105b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	f000 80ca 	beq.w	8010754 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105c8:	e853 3f00 	ldrex	r3, [r3]
 80105cc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80105ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80105d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80105d4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	461a      	mov	r2, r3
 80105de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80105e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80105e4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105e6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80105e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80105ea:	e841 2300 	strex	r3, r2, [r1]
 80105ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80105f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d1e4      	bne.n	80105c0 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	3308      	adds	r3, #8
 80105fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010600:	e853 3f00 	ldrex	r3, [r3]
 8010604:	623b      	str	r3, [r7, #32]
   return(result);
 8010606:	6a3a      	ldr	r2, [r7, #32]
 8010608:	4b55      	ldr	r3, [pc, #340]	@ (8010760 <HAL_UART_IRQHandler+0x770>)
 801060a:	4013      	ands	r3, r2
 801060c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	3308      	adds	r3, #8
 8010616:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 801061a:	633a      	str	r2, [r7, #48]	@ 0x30
 801061c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801061e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010620:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010622:	e841 2300 	strex	r3, r2, [r1]
 8010626:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801062a:	2b00      	cmp	r3, #0
 801062c:	d1e3      	bne.n	80105f6 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	2220      	movs	r2, #32
 8010632:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	2200      	movs	r2, #0
 801063a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	2200      	movs	r2, #0
 8010640:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010648:	693b      	ldr	r3, [r7, #16]
 801064a:	e853 3f00 	ldrex	r3, [r3]
 801064e:	60fb      	str	r3, [r7, #12]
   return(result);
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	f023 0310 	bic.w	r3, r3, #16
 8010656:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	461a      	mov	r2, r3
 8010660:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8010664:	61fb      	str	r3, [r7, #28]
 8010666:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010668:	69b9      	ldr	r1, [r7, #24]
 801066a:	69fa      	ldr	r2, [r7, #28]
 801066c:	e841 2300 	strex	r3, r2, [r1]
 8010670:	617b      	str	r3, [r7, #20]
   return(result);
 8010672:	697b      	ldr	r3, [r7, #20]
 8010674:	2b00      	cmp	r3, #0
 8010676:	d1e4      	bne.n	8010642 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	2202      	movs	r2, #2
 801067c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801067e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8010682:	4619      	mov	r1, r3
 8010684:	6878      	ldr	r0, [r7, #4]
 8010686:	f000 f895 	bl	80107b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801068a:	e063      	b.n	8010754 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801068c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010690:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8010694:	2b00      	cmp	r3, #0
 8010696:	d00e      	beq.n	80106b6 <HAL_UART_IRQHandler+0x6c6>
 8010698:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801069c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d008      	beq.n	80106b6 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80106ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80106ae:	6878      	ldr	r0, [r7, #4]
 80106b0:	f002 fb9a 	bl	8012de8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80106b4:	e051      	b.n	801075a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80106b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80106ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d014      	beq.n	80106ec <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80106c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80106c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d105      	bne.n	80106da <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80106ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80106d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d008      	beq.n	80106ec <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d03a      	beq.n	8010758 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80106e6:	6878      	ldr	r0, [r7, #4]
 80106e8:	4798      	blx	r3
    }
    return;
 80106ea:	e035      	b.n	8010758 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80106ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80106f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d009      	beq.n	801070c <HAL_UART_IRQHandler+0x71c>
 80106f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80106fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010700:	2b00      	cmp	r3, #0
 8010702:	d003      	beq.n	801070c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8010704:	6878      	ldr	r0, [r7, #4]
 8010706:	f001 fe28 	bl	801235a <UART_EndTransmit_IT>
    return;
 801070a:	e026      	b.n	801075a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 801070c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010710:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010714:	2b00      	cmp	r3, #0
 8010716:	d009      	beq.n	801072c <HAL_UART_IRQHandler+0x73c>
 8010718:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801071c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8010720:	2b00      	cmp	r3, #0
 8010722:	d003      	beq.n	801072c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8010724:	6878      	ldr	r0, [r7, #4]
 8010726:	f002 fb73 	bl	8012e10 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801072a:	e016      	b.n	801075a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 801072c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010730:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8010734:	2b00      	cmp	r3, #0
 8010736:	d010      	beq.n	801075a <HAL_UART_IRQHandler+0x76a>
 8010738:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801073c:	2b00      	cmp	r3, #0
 801073e:	da0c      	bge.n	801075a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8010740:	6878      	ldr	r0, [r7, #4]
 8010742:	f002 fb5b 	bl	8012dfc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010746:	e008      	b.n	801075a <HAL_UART_IRQHandler+0x76a>
      return;
 8010748:	bf00      	nop
 801074a:	e006      	b.n	801075a <HAL_UART_IRQHandler+0x76a>
    return;
 801074c:	bf00      	nop
 801074e:	e004      	b.n	801075a <HAL_UART_IRQHandler+0x76a>
      return;
 8010750:	bf00      	nop
 8010752:	e002      	b.n	801075a <HAL_UART_IRQHandler+0x76a>
      return;
 8010754:	bf00      	nop
 8010756:	e000      	b.n	801075a <HAL_UART_IRQHandler+0x76a>
    return;
 8010758:	bf00      	nop
  }
}
 801075a:	37e8      	adds	r7, #232	@ 0xe8
 801075c:	46bd      	mov	sp, r7
 801075e:	bd80      	pop	{r7, pc}
 8010760:	effffffe 	.word	0xeffffffe

08010764 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010764:	b480      	push	{r7}
 8010766:	b083      	sub	sp, #12
 8010768:	af00      	add	r7, sp, #0
 801076a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801076c:	bf00      	nop
 801076e:	370c      	adds	r7, #12
 8010770:	46bd      	mov	sp, r7
 8010772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010776:	4770      	bx	lr

08010778 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010778:	b480      	push	{r7}
 801077a:	b083      	sub	sp, #12
 801077c:	af00      	add	r7, sp, #0
 801077e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8010780:	bf00      	nop
 8010782:	370c      	adds	r7, #12
 8010784:	46bd      	mov	sp, r7
 8010786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801078a:	4770      	bx	lr

0801078c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801078c:	b480      	push	{r7}
 801078e:	b083      	sub	sp, #12
 8010790:	af00      	add	r7, sp, #0
 8010792:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8010794:	bf00      	nop
 8010796:	370c      	adds	r7, #12
 8010798:	46bd      	mov	sp, r7
 801079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801079e:	4770      	bx	lr

080107a0 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80107a0:	b480      	push	{r7}
 80107a2:	b083      	sub	sp, #12
 80107a4:	af00      	add	r7, sp, #0
 80107a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80107a8:	bf00      	nop
 80107aa:	370c      	adds	r7, #12
 80107ac:	46bd      	mov	sp, r7
 80107ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107b2:	4770      	bx	lr

080107b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80107b4:	b480      	push	{r7}
 80107b6:	b083      	sub	sp, #12
 80107b8:	af00      	add	r7, sp, #0
 80107ba:	6078      	str	r0, [r7, #4]
 80107bc:	460b      	mov	r3, r1
 80107be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80107c0:	bf00      	nop
 80107c2:	370c      	adds	r7, #12
 80107c4:	46bd      	mov	sp, r7
 80107c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ca:	4770      	bx	lr

080107cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80107cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80107d0:	b092      	sub	sp, #72	@ 0x48
 80107d2:	af00      	add	r7, sp, #0
 80107d4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80107d6:	2300      	movs	r3, #0
 80107d8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80107dc:	697b      	ldr	r3, [r7, #20]
 80107de:	689a      	ldr	r2, [r3, #8]
 80107e0:	697b      	ldr	r3, [r7, #20]
 80107e2:	691b      	ldr	r3, [r3, #16]
 80107e4:	431a      	orrs	r2, r3
 80107e6:	697b      	ldr	r3, [r7, #20]
 80107e8:	695b      	ldr	r3, [r3, #20]
 80107ea:	431a      	orrs	r2, r3
 80107ec:	697b      	ldr	r3, [r7, #20]
 80107ee:	69db      	ldr	r3, [r3, #28]
 80107f0:	4313      	orrs	r3, r2
 80107f2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80107f4:	697b      	ldr	r3, [r7, #20]
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	681a      	ldr	r2, [r3, #0]
 80107fa:	4bbe      	ldr	r3, [pc, #760]	@ (8010af4 <UART_SetConfig+0x328>)
 80107fc:	4013      	ands	r3, r2
 80107fe:	697a      	ldr	r2, [r7, #20]
 8010800:	6812      	ldr	r2, [r2, #0]
 8010802:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010804:	430b      	orrs	r3, r1
 8010806:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010808:	697b      	ldr	r3, [r7, #20]
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	685b      	ldr	r3, [r3, #4]
 801080e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8010812:	697b      	ldr	r3, [r7, #20]
 8010814:	68da      	ldr	r2, [r3, #12]
 8010816:	697b      	ldr	r3, [r7, #20]
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	430a      	orrs	r2, r1
 801081c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801081e:	697b      	ldr	r3, [r7, #20]
 8010820:	699b      	ldr	r3, [r3, #24]
 8010822:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010824:	697b      	ldr	r3, [r7, #20]
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	4ab3      	ldr	r2, [pc, #716]	@ (8010af8 <UART_SetConfig+0x32c>)
 801082a:	4293      	cmp	r3, r2
 801082c:	d004      	beq.n	8010838 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801082e:	697b      	ldr	r3, [r7, #20]
 8010830:	6a1b      	ldr	r3, [r3, #32]
 8010832:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010834:	4313      	orrs	r3, r2
 8010836:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010838:	697b      	ldr	r3, [r7, #20]
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	689a      	ldr	r2, [r3, #8]
 801083e:	4baf      	ldr	r3, [pc, #700]	@ (8010afc <UART_SetConfig+0x330>)
 8010840:	4013      	ands	r3, r2
 8010842:	697a      	ldr	r2, [r7, #20]
 8010844:	6812      	ldr	r2, [r2, #0]
 8010846:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010848:	430b      	orrs	r3, r1
 801084a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801084c:	697b      	ldr	r3, [r7, #20]
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010852:	f023 010f 	bic.w	r1, r3, #15
 8010856:	697b      	ldr	r3, [r7, #20]
 8010858:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801085a:	697b      	ldr	r3, [r7, #20]
 801085c:	681b      	ldr	r3, [r3, #0]
 801085e:	430a      	orrs	r2, r1
 8010860:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010862:	697b      	ldr	r3, [r7, #20]
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	4aa6      	ldr	r2, [pc, #664]	@ (8010b00 <UART_SetConfig+0x334>)
 8010868:	4293      	cmp	r3, r2
 801086a:	d177      	bne.n	801095c <UART_SetConfig+0x190>
 801086c:	4ba5      	ldr	r3, [pc, #660]	@ (8010b04 <UART_SetConfig+0x338>)
 801086e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010870:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010874:	2b28      	cmp	r3, #40	@ 0x28
 8010876:	d86d      	bhi.n	8010954 <UART_SetConfig+0x188>
 8010878:	a201      	add	r2, pc, #4	@ (adr r2, 8010880 <UART_SetConfig+0xb4>)
 801087a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801087e:	bf00      	nop
 8010880:	08010925 	.word	0x08010925
 8010884:	08010955 	.word	0x08010955
 8010888:	08010955 	.word	0x08010955
 801088c:	08010955 	.word	0x08010955
 8010890:	08010955 	.word	0x08010955
 8010894:	08010955 	.word	0x08010955
 8010898:	08010955 	.word	0x08010955
 801089c:	08010955 	.word	0x08010955
 80108a0:	0801092d 	.word	0x0801092d
 80108a4:	08010955 	.word	0x08010955
 80108a8:	08010955 	.word	0x08010955
 80108ac:	08010955 	.word	0x08010955
 80108b0:	08010955 	.word	0x08010955
 80108b4:	08010955 	.word	0x08010955
 80108b8:	08010955 	.word	0x08010955
 80108bc:	08010955 	.word	0x08010955
 80108c0:	08010935 	.word	0x08010935
 80108c4:	08010955 	.word	0x08010955
 80108c8:	08010955 	.word	0x08010955
 80108cc:	08010955 	.word	0x08010955
 80108d0:	08010955 	.word	0x08010955
 80108d4:	08010955 	.word	0x08010955
 80108d8:	08010955 	.word	0x08010955
 80108dc:	08010955 	.word	0x08010955
 80108e0:	0801093d 	.word	0x0801093d
 80108e4:	08010955 	.word	0x08010955
 80108e8:	08010955 	.word	0x08010955
 80108ec:	08010955 	.word	0x08010955
 80108f0:	08010955 	.word	0x08010955
 80108f4:	08010955 	.word	0x08010955
 80108f8:	08010955 	.word	0x08010955
 80108fc:	08010955 	.word	0x08010955
 8010900:	08010945 	.word	0x08010945
 8010904:	08010955 	.word	0x08010955
 8010908:	08010955 	.word	0x08010955
 801090c:	08010955 	.word	0x08010955
 8010910:	08010955 	.word	0x08010955
 8010914:	08010955 	.word	0x08010955
 8010918:	08010955 	.word	0x08010955
 801091c:	08010955 	.word	0x08010955
 8010920:	0801094d 	.word	0x0801094d
 8010924:	2301      	movs	r3, #1
 8010926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801092a:	e326      	b.n	8010f7a <UART_SetConfig+0x7ae>
 801092c:	2304      	movs	r3, #4
 801092e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010932:	e322      	b.n	8010f7a <UART_SetConfig+0x7ae>
 8010934:	2308      	movs	r3, #8
 8010936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801093a:	e31e      	b.n	8010f7a <UART_SetConfig+0x7ae>
 801093c:	2310      	movs	r3, #16
 801093e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010942:	e31a      	b.n	8010f7a <UART_SetConfig+0x7ae>
 8010944:	2320      	movs	r3, #32
 8010946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801094a:	e316      	b.n	8010f7a <UART_SetConfig+0x7ae>
 801094c:	2340      	movs	r3, #64	@ 0x40
 801094e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010952:	e312      	b.n	8010f7a <UART_SetConfig+0x7ae>
 8010954:	2380      	movs	r3, #128	@ 0x80
 8010956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801095a:	e30e      	b.n	8010f7a <UART_SetConfig+0x7ae>
 801095c:	697b      	ldr	r3, [r7, #20]
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	4a69      	ldr	r2, [pc, #420]	@ (8010b08 <UART_SetConfig+0x33c>)
 8010962:	4293      	cmp	r3, r2
 8010964:	d130      	bne.n	80109c8 <UART_SetConfig+0x1fc>
 8010966:	4b67      	ldr	r3, [pc, #412]	@ (8010b04 <UART_SetConfig+0x338>)
 8010968:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801096a:	f003 0307 	and.w	r3, r3, #7
 801096e:	2b05      	cmp	r3, #5
 8010970:	d826      	bhi.n	80109c0 <UART_SetConfig+0x1f4>
 8010972:	a201      	add	r2, pc, #4	@ (adr r2, 8010978 <UART_SetConfig+0x1ac>)
 8010974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010978:	08010991 	.word	0x08010991
 801097c:	08010999 	.word	0x08010999
 8010980:	080109a1 	.word	0x080109a1
 8010984:	080109a9 	.word	0x080109a9
 8010988:	080109b1 	.word	0x080109b1
 801098c:	080109b9 	.word	0x080109b9
 8010990:	2300      	movs	r3, #0
 8010992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010996:	e2f0      	b.n	8010f7a <UART_SetConfig+0x7ae>
 8010998:	2304      	movs	r3, #4
 801099a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801099e:	e2ec      	b.n	8010f7a <UART_SetConfig+0x7ae>
 80109a0:	2308      	movs	r3, #8
 80109a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80109a6:	e2e8      	b.n	8010f7a <UART_SetConfig+0x7ae>
 80109a8:	2310      	movs	r3, #16
 80109aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80109ae:	e2e4      	b.n	8010f7a <UART_SetConfig+0x7ae>
 80109b0:	2320      	movs	r3, #32
 80109b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80109b6:	e2e0      	b.n	8010f7a <UART_SetConfig+0x7ae>
 80109b8:	2340      	movs	r3, #64	@ 0x40
 80109ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80109be:	e2dc      	b.n	8010f7a <UART_SetConfig+0x7ae>
 80109c0:	2380      	movs	r3, #128	@ 0x80
 80109c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80109c6:	e2d8      	b.n	8010f7a <UART_SetConfig+0x7ae>
 80109c8:	697b      	ldr	r3, [r7, #20]
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	4a4f      	ldr	r2, [pc, #316]	@ (8010b0c <UART_SetConfig+0x340>)
 80109ce:	4293      	cmp	r3, r2
 80109d0:	d130      	bne.n	8010a34 <UART_SetConfig+0x268>
 80109d2:	4b4c      	ldr	r3, [pc, #304]	@ (8010b04 <UART_SetConfig+0x338>)
 80109d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80109d6:	f003 0307 	and.w	r3, r3, #7
 80109da:	2b05      	cmp	r3, #5
 80109dc:	d826      	bhi.n	8010a2c <UART_SetConfig+0x260>
 80109de:	a201      	add	r2, pc, #4	@ (adr r2, 80109e4 <UART_SetConfig+0x218>)
 80109e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109e4:	080109fd 	.word	0x080109fd
 80109e8:	08010a05 	.word	0x08010a05
 80109ec:	08010a0d 	.word	0x08010a0d
 80109f0:	08010a15 	.word	0x08010a15
 80109f4:	08010a1d 	.word	0x08010a1d
 80109f8:	08010a25 	.word	0x08010a25
 80109fc:	2300      	movs	r3, #0
 80109fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a02:	e2ba      	b.n	8010f7a <UART_SetConfig+0x7ae>
 8010a04:	2304      	movs	r3, #4
 8010a06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a0a:	e2b6      	b.n	8010f7a <UART_SetConfig+0x7ae>
 8010a0c:	2308      	movs	r3, #8
 8010a0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a12:	e2b2      	b.n	8010f7a <UART_SetConfig+0x7ae>
 8010a14:	2310      	movs	r3, #16
 8010a16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a1a:	e2ae      	b.n	8010f7a <UART_SetConfig+0x7ae>
 8010a1c:	2320      	movs	r3, #32
 8010a1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a22:	e2aa      	b.n	8010f7a <UART_SetConfig+0x7ae>
 8010a24:	2340      	movs	r3, #64	@ 0x40
 8010a26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a2a:	e2a6      	b.n	8010f7a <UART_SetConfig+0x7ae>
 8010a2c:	2380      	movs	r3, #128	@ 0x80
 8010a2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a32:	e2a2      	b.n	8010f7a <UART_SetConfig+0x7ae>
 8010a34:	697b      	ldr	r3, [r7, #20]
 8010a36:	681b      	ldr	r3, [r3, #0]
 8010a38:	4a35      	ldr	r2, [pc, #212]	@ (8010b10 <UART_SetConfig+0x344>)
 8010a3a:	4293      	cmp	r3, r2
 8010a3c:	d130      	bne.n	8010aa0 <UART_SetConfig+0x2d4>
 8010a3e:	4b31      	ldr	r3, [pc, #196]	@ (8010b04 <UART_SetConfig+0x338>)
 8010a40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010a42:	f003 0307 	and.w	r3, r3, #7
 8010a46:	2b05      	cmp	r3, #5
 8010a48:	d826      	bhi.n	8010a98 <UART_SetConfig+0x2cc>
 8010a4a:	a201      	add	r2, pc, #4	@ (adr r2, 8010a50 <UART_SetConfig+0x284>)
 8010a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a50:	08010a69 	.word	0x08010a69
 8010a54:	08010a71 	.word	0x08010a71
 8010a58:	08010a79 	.word	0x08010a79
 8010a5c:	08010a81 	.word	0x08010a81
 8010a60:	08010a89 	.word	0x08010a89
 8010a64:	08010a91 	.word	0x08010a91
 8010a68:	2300      	movs	r3, #0
 8010a6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a6e:	e284      	b.n	8010f7a <UART_SetConfig+0x7ae>
 8010a70:	2304      	movs	r3, #4
 8010a72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a76:	e280      	b.n	8010f7a <UART_SetConfig+0x7ae>
 8010a78:	2308      	movs	r3, #8
 8010a7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a7e:	e27c      	b.n	8010f7a <UART_SetConfig+0x7ae>
 8010a80:	2310      	movs	r3, #16
 8010a82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a86:	e278      	b.n	8010f7a <UART_SetConfig+0x7ae>
 8010a88:	2320      	movs	r3, #32
 8010a8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a8e:	e274      	b.n	8010f7a <UART_SetConfig+0x7ae>
 8010a90:	2340      	movs	r3, #64	@ 0x40
 8010a92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a96:	e270      	b.n	8010f7a <UART_SetConfig+0x7ae>
 8010a98:	2380      	movs	r3, #128	@ 0x80
 8010a9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a9e:	e26c      	b.n	8010f7a <UART_SetConfig+0x7ae>
 8010aa0:	697b      	ldr	r3, [r7, #20]
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	4a1b      	ldr	r2, [pc, #108]	@ (8010b14 <UART_SetConfig+0x348>)
 8010aa6:	4293      	cmp	r3, r2
 8010aa8:	d142      	bne.n	8010b30 <UART_SetConfig+0x364>
 8010aaa:	4b16      	ldr	r3, [pc, #88]	@ (8010b04 <UART_SetConfig+0x338>)
 8010aac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010aae:	f003 0307 	and.w	r3, r3, #7
 8010ab2:	2b05      	cmp	r3, #5
 8010ab4:	d838      	bhi.n	8010b28 <UART_SetConfig+0x35c>
 8010ab6:	a201      	add	r2, pc, #4	@ (adr r2, 8010abc <UART_SetConfig+0x2f0>)
 8010ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010abc:	08010ad5 	.word	0x08010ad5
 8010ac0:	08010add 	.word	0x08010add
 8010ac4:	08010ae5 	.word	0x08010ae5
 8010ac8:	08010aed 	.word	0x08010aed
 8010acc:	08010b19 	.word	0x08010b19
 8010ad0:	08010b21 	.word	0x08010b21
 8010ad4:	2300      	movs	r3, #0
 8010ad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010ada:	e24e      	b.n	8010f7a <UART_SetConfig+0x7ae>
 8010adc:	2304      	movs	r3, #4
 8010ade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010ae2:	e24a      	b.n	8010f7a <UART_SetConfig+0x7ae>
 8010ae4:	2308      	movs	r3, #8
 8010ae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010aea:	e246      	b.n	8010f7a <UART_SetConfig+0x7ae>
 8010aec:	2310      	movs	r3, #16
 8010aee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010af2:	e242      	b.n	8010f7a <UART_SetConfig+0x7ae>
 8010af4:	cfff69f3 	.word	0xcfff69f3
 8010af8:	58000c00 	.word	0x58000c00
 8010afc:	11fff4ff 	.word	0x11fff4ff
 8010b00:	40011000 	.word	0x40011000
 8010b04:	58024400 	.word	0x58024400
 8010b08:	40004400 	.word	0x40004400
 8010b0c:	40004800 	.word	0x40004800
 8010b10:	40004c00 	.word	0x40004c00
 8010b14:	40005000 	.word	0x40005000
 8010b18:	2320      	movs	r3, #32
 8010b1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b1e:	e22c      	b.n	8010f7a <UART_SetConfig+0x7ae>
 8010b20:	2340      	movs	r3, #64	@ 0x40
 8010b22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b26:	e228      	b.n	8010f7a <UART_SetConfig+0x7ae>
 8010b28:	2380      	movs	r3, #128	@ 0x80
 8010b2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b2e:	e224      	b.n	8010f7a <UART_SetConfig+0x7ae>
 8010b30:	697b      	ldr	r3, [r7, #20]
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	4ab1      	ldr	r2, [pc, #708]	@ (8010dfc <UART_SetConfig+0x630>)
 8010b36:	4293      	cmp	r3, r2
 8010b38:	d176      	bne.n	8010c28 <UART_SetConfig+0x45c>
 8010b3a:	4bb1      	ldr	r3, [pc, #708]	@ (8010e00 <UART_SetConfig+0x634>)
 8010b3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010b3e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010b42:	2b28      	cmp	r3, #40	@ 0x28
 8010b44:	d86c      	bhi.n	8010c20 <UART_SetConfig+0x454>
 8010b46:	a201      	add	r2, pc, #4	@ (adr r2, 8010b4c <UART_SetConfig+0x380>)
 8010b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b4c:	08010bf1 	.word	0x08010bf1
 8010b50:	08010c21 	.word	0x08010c21
 8010b54:	08010c21 	.word	0x08010c21
 8010b58:	08010c21 	.word	0x08010c21
 8010b5c:	08010c21 	.word	0x08010c21
 8010b60:	08010c21 	.word	0x08010c21
 8010b64:	08010c21 	.word	0x08010c21
 8010b68:	08010c21 	.word	0x08010c21
 8010b6c:	08010bf9 	.word	0x08010bf9
 8010b70:	08010c21 	.word	0x08010c21
 8010b74:	08010c21 	.word	0x08010c21
 8010b78:	08010c21 	.word	0x08010c21
 8010b7c:	08010c21 	.word	0x08010c21
 8010b80:	08010c21 	.word	0x08010c21
 8010b84:	08010c21 	.word	0x08010c21
 8010b88:	08010c21 	.word	0x08010c21
 8010b8c:	08010c01 	.word	0x08010c01
 8010b90:	08010c21 	.word	0x08010c21
 8010b94:	08010c21 	.word	0x08010c21
 8010b98:	08010c21 	.word	0x08010c21
 8010b9c:	08010c21 	.word	0x08010c21
 8010ba0:	08010c21 	.word	0x08010c21
 8010ba4:	08010c21 	.word	0x08010c21
 8010ba8:	08010c21 	.word	0x08010c21
 8010bac:	08010c09 	.word	0x08010c09
 8010bb0:	08010c21 	.word	0x08010c21
 8010bb4:	08010c21 	.word	0x08010c21
 8010bb8:	08010c21 	.word	0x08010c21
 8010bbc:	08010c21 	.word	0x08010c21
 8010bc0:	08010c21 	.word	0x08010c21
 8010bc4:	08010c21 	.word	0x08010c21
 8010bc8:	08010c21 	.word	0x08010c21
 8010bcc:	08010c11 	.word	0x08010c11
 8010bd0:	08010c21 	.word	0x08010c21
 8010bd4:	08010c21 	.word	0x08010c21
 8010bd8:	08010c21 	.word	0x08010c21
 8010bdc:	08010c21 	.word	0x08010c21
 8010be0:	08010c21 	.word	0x08010c21
 8010be4:	08010c21 	.word	0x08010c21
 8010be8:	08010c21 	.word	0x08010c21
 8010bec:	08010c19 	.word	0x08010c19
 8010bf0:	2301      	movs	r3, #1
 8010bf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010bf6:	e1c0      	b.n	8010f7a <UART_SetConfig+0x7ae>
 8010bf8:	2304      	movs	r3, #4
 8010bfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010bfe:	e1bc      	b.n	8010f7a <UART_SetConfig+0x7ae>
 8010c00:	2308      	movs	r3, #8
 8010c02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c06:	e1b8      	b.n	8010f7a <UART_SetConfig+0x7ae>
 8010c08:	2310      	movs	r3, #16
 8010c0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c0e:	e1b4      	b.n	8010f7a <UART_SetConfig+0x7ae>
 8010c10:	2320      	movs	r3, #32
 8010c12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c16:	e1b0      	b.n	8010f7a <UART_SetConfig+0x7ae>
 8010c18:	2340      	movs	r3, #64	@ 0x40
 8010c1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c1e:	e1ac      	b.n	8010f7a <UART_SetConfig+0x7ae>
 8010c20:	2380      	movs	r3, #128	@ 0x80
 8010c22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c26:	e1a8      	b.n	8010f7a <UART_SetConfig+0x7ae>
 8010c28:	697b      	ldr	r3, [r7, #20]
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	4a75      	ldr	r2, [pc, #468]	@ (8010e04 <UART_SetConfig+0x638>)
 8010c2e:	4293      	cmp	r3, r2
 8010c30:	d130      	bne.n	8010c94 <UART_SetConfig+0x4c8>
 8010c32:	4b73      	ldr	r3, [pc, #460]	@ (8010e00 <UART_SetConfig+0x634>)
 8010c34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010c36:	f003 0307 	and.w	r3, r3, #7
 8010c3a:	2b05      	cmp	r3, #5
 8010c3c:	d826      	bhi.n	8010c8c <UART_SetConfig+0x4c0>
 8010c3e:	a201      	add	r2, pc, #4	@ (adr r2, 8010c44 <UART_SetConfig+0x478>)
 8010c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c44:	08010c5d 	.word	0x08010c5d
 8010c48:	08010c65 	.word	0x08010c65
 8010c4c:	08010c6d 	.word	0x08010c6d
 8010c50:	08010c75 	.word	0x08010c75
 8010c54:	08010c7d 	.word	0x08010c7d
 8010c58:	08010c85 	.word	0x08010c85
 8010c5c:	2300      	movs	r3, #0
 8010c5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c62:	e18a      	b.n	8010f7a <UART_SetConfig+0x7ae>
 8010c64:	2304      	movs	r3, #4
 8010c66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c6a:	e186      	b.n	8010f7a <UART_SetConfig+0x7ae>
 8010c6c:	2308      	movs	r3, #8
 8010c6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c72:	e182      	b.n	8010f7a <UART_SetConfig+0x7ae>
 8010c74:	2310      	movs	r3, #16
 8010c76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c7a:	e17e      	b.n	8010f7a <UART_SetConfig+0x7ae>
 8010c7c:	2320      	movs	r3, #32
 8010c7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c82:	e17a      	b.n	8010f7a <UART_SetConfig+0x7ae>
 8010c84:	2340      	movs	r3, #64	@ 0x40
 8010c86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c8a:	e176      	b.n	8010f7a <UART_SetConfig+0x7ae>
 8010c8c:	2380      	movs	r3, #128	@ 0x80
 8010c8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c92:	e172      	b.n	8010f7a <UART_SetConfig+0x7ae>
 8010c94:	697b      	ldr	r3, [r7, #20]
 8010c96:	681b      	ldr	r3, [r3, #0]
 8010c98:	4a5b      	ldr	r2, [pc, #364]	@ (8010e08 <UART_SetConfig+0x63c>)
 8010c9a:	4293      	cmp	r3, r2
 8010c9c:	d130      	bne.n	8010d00 <UART_SetConfig+0x534>
 8010c9e:	4b58      	ldr	r3, [pc, #352]	@ (8010e00 <UART_SetConfig+0x634>)
 8010ca0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010ca2:	f003 0307 	and.w	r3, r3, #7
 8010ca6:	2b05      	cmp	r3, #5
 8010ca8:	d826      	bhi.n	8010cf8 <UART_SetConfig+0x52c>
 8010caa:	a201      	add	r2, pc, #4	@ (adr r2, 8010cb0 <UART_SetConfig+0x4e4>)
 8010cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cb0:	08010cc9 	.word	0x08010cc9
 8010cb4:	08010cd1 	.word	0x08010cd1
 8010cb8:	08010cd9 	.word	0x08010cd9
 8010cbc:	08010ce1 	.word	0x08010ce1
 8010cc0:	08010ce9 	.word	0x08010ce9
 8010cc4:	08010cf1 	.word	0x08010cf1
 8010cc8:	2300      	movs	r3, #0
 8010cca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010cce:	e154      	b.n	8010f7a <UART_SetConfig+0x7ae>
 8010cd0:	2304      	movs	r3, #4
 8010cd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010cd6:	e150      	b.n	8010f7a <UART_SetConfig+0x7ae>
 8010cd8:	2308      	movs	r3, #8
 8010cda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010cde:	e14c      	b.n	8010f7a <UART_SetConfig+0x7ae>
 8010ce0:	2310      	movs	r3, #16
 8010ce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010ce6:	e148      	b.n	8010f7a <UART_SetConfig+0x7ae>
 8010ce8:	2320      	movs	r3, #32
 8010cea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010cee:	e144      	b.n	8010f7a <UART_SetConfig+0x7ae>
 8010cf0:	2340      	movs	r3, #64	@ 0x40
 8010cf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010cf6:	e140      	b.n	8010f7a <UART_SetConfig+0x7ae>
 8010cf8:	2380      	movs	r3, #128	@ 0x80
 8010cfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010cfe:	e13c      	b.n	8010f7a <UART_SetConfig+0x7ae>
 8010d00:	697b      	ldr	r3, [r7, #20]
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	4a41      	ldr	r2, [pc, #260]	@ (8010e0c <UART_SetConfig+0x640>)
 8010d06:	4293      	cmp	r3, r2
 8010d08:	f040 8082 	bne.w	8010e10 <UART_SetConfig+0x644>
 8010d0c:	4b3c      	ldr	r3, [pc, #240]	@ (8010e00 <UART_SetConfig+0x634>)
 8010d0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010d10:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010d14:	2b28      	cmp	r3, #40	@ 0x28
 8010d16:	d86d      	bhi.n	8010df4 <UART_SetConfig+0x628>
 8010d18:	a201      	add	r2, pc, #4	@ (adr r2, 8010d20 <UART_SetConfig+0x554>)
 8010d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d1e:	bf00      	nop
 8010d20:	08010dc5 	.word	0x08010dc5
 8010d24:	08010df5 	.word	0x08010df5
 8010d28:	08010df5 	.word	0x08010df5
 8010d2c:	08010df5 	.word	0x08010df5
 8010d30:	08010df5 	.word	0x08010df5
 8010d34:	08010df5 	.word	0x08010df5
 8010d38:	08010df5 	.word	0x08010df5
 8010d3c:	08010df5 	.word	0x08010df5
 8010d40:	08010dcd 	.word	0x08010dcd
 8010d44:	08010df5 	.word	0x08010df5
 8010d48:	08010df5 	.word	0x08010df5
 8010d4c:	08010df5 	.word	0x08010df5
 8010d50:	08010df5 	.word	0x08010df5
 8010d54:	08010df5 	.word	0x08010df5
 8010d58:	08010df5 	.word	0x08010df5
 8010d5c:	08010df5 	.word	0x08010df5
 8010d60:	08010dd5 	.word	0x08010dd5
 8010d64:	08010df5 	.word	0x08010df5
 8010d68:	08010df5 	.word	0x08010df5
 8010d6c:	08010df5 	.word	0x08010df5
 8010d70:	08010df5 	.word	0x08010df5
 8010d74:	08010df5 	.word	0x08010df5
 8010d78:	08010df5 	.word	0x08010df5
 8010d7c:	08010df5 	.word	0x08010df5
 8010d80:	08010ddd 	.word	0x08010ddd
 8010d84:	08010df5 	.word	0x08010df5
 8010d88:	08010df5 	.word	0x08010df5
 8010d8c:	08010df5 	.word	0x08010df5
 8010d90:	08010df5 	.word	0x08010df5
 8010d94:	08010df5 	.word	0x08010df5
 8010d98:	08010df5 	.word	0x08010df5
 8010d9c:	08010df5 	.word	0x08010df5
 8010da0:	08010de5 	.word	0x08010de5
 8010da4:	08010df5 	.word	0x08010df5
 8010da8:	08010df5 	.word	0x08010df5
 8010dac:	08010df5 	.word	0x08010df5
 8010db0:	08010df5 	.word	0x08010df5
 8010db4:	08010df5 	.word	0x08010df5
 8010db8:	08010df5 	.word	0x08010df5
 8010dbc:	08010df5 	.word	0x08010df5
 8010dc0:	08010ded 	.word	0x08010ded
 8010dc4:	2301      	movs	r3, #1
 8010dc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010dca:	e0d6      	b.n	8010f7a <UART_SetConfig+0x7ae>
 8010dcc:	2304      	movs	r3, #4
 8010dce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010dd2:	e0d2      	b.n	8010f7a <UART_SetConfig+0x7ae>
 8010dd4:	2308      	movs	r3, #8
 8010dd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010dda:	e0ce      	b.n	8010f7a <UART_SetConfig+0x7ae>
 8010ddc:	2310      	movs	r3, #16
 8010dde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010de2:	e0ca      	b.n	8010f7a <UART_SetConfig+0x7ae>
 8010de4:	2320      	movs	r3, #32
 8010de6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010dea:	e0c6      	b.n	8010f7a <UART_SetConfig+0x7ae>
 8010dec:	2340      	movs	r3, #64	@ 0x40
 8010dee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010df2:	e0c2      	b.n	8010f7a <UART_SetConfig+0x7ae>
 8010df4:	2380      	movs	r3, #128	@ 0x80
 8010df6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010dfa:	e0be      	b.n	8010f7a <UART_SetConfig+0x7ae>
 8010dfc:	40011400 	.word	0x40011400
 8010e00:	58024400 	.word	0x58024400
 8010e04:	40007800 	.word	0x40007800
 8010e08:	40007c00 	.word	0x40007c00
 8010e0c:	40011800 	.word	0x40011800
 8010e10:	697b      	ldr	r3, [r7, #20]
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	4aad      	ldr	r2, [pc, #692]	@ (80110cc <UART_SetConfig+0x900>)
 8010e16:	4293      	cmp	r3, r2
 8010e18:	d176      	bne.n	8010f08 <UART_SetConfig+0x73c>
 8010e1a:	4bad      	ldr	r3, [pc, #692]	@ (80110d0 <UART_SetConfig+0x904>)
 8010e1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010e1e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010e22:	2b28      	cmp	r3, #40	@ 0x28
 8010e24:	d86c      	bhi.n	8010f00 <UART_SetConfig+0x734>
 8010e26:	a201      	add	r2, pc, #4	@ (adr r2, 8010e2c <UART_SetConfig+0x660>)
 8010e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e2c:	08010ed1 	.word	0x08010ed1
 8010e30:	08010f01 	.word	0x08010f01
 8010e34:	08010f01 	.word	0x08010f01
 8010e38:	08010f01 	.word	0x08010f01
 8010e3c:	08010f01 	.word	0x08010f01
 8010e40:	08010f01 	.word	0x08010f01
 8010e44:	08010f01 	.word	0x08010f01
 8010e48:	08010f01 	.word	0x08010f01
 8010e4c:	08010ed9 	.word	0x08010ed9
 8010e50:	08010f01 	.word	0x08010f01
 8010e54:	08010f01 	.word	0x08010f01
 8010e58:	08010f01 	.word	0x08010f01
 8010e5c:	08010f01 	.word	0x08010f01
 8010e60:	08010f01 	.word	0x08010f01
 8010e64:	08010f01 	.word	0x08010f01
 8010e68:	08010f01 	.word	0x08010f01
 8010e6c:	08010ee1 	.word	0x08010ee1
 8010e70:	08010f01 	.word	0x08010f01
 8010e74:	08010f01 	.word	0x08010f01
 8010e78:	08010f01 	.word	0x08010f01
 8010e7c:	08010f01 	.word	0x08010f01
 8010e80:	08010f01 	.word	0x08010f01
 8010e84:	08010f01 	.word	0x08010f01
 8010e88:	08010f01 	.word	0x08010f01
 8010e8c:	08010ee9 	.word	0x08010ee9
 8010e90:	08010f01 	.word	0x08010f01
 8010e94:	08010f01 	.word	0x08010f01
 8010e98:	08010f01 	.word	0x08010f01
 8010e9c:	08010f01 	.word	0x08010f01
 8010ea0:	08010f01 	.word	0x08010f01
 8010ea4:	08010f01 	.word	0x08010f01
 8010ea8:	08010f01 	.word	0x08010f01
 8010eac:	08010ef1 	.word	0x08010ef1
 8010eb0:	08010f01 	.word	0x08010f01
 8010eb4:	08010f01 	.word	0x08010f01
 8010eb8:	08010f01 	.word	0x08010f01
 8010ebc:	08010f01 	.word	0x08010f01
 8010ec0:	08010f01 	.word	0x08010f01
 8010ec4:	08010f01 	.word	0x08010f01
 8010ec8:	08010f01 	.word	0x08010f01
 8010ecc:	08010ef9 	.word	0x08010ef9
 8010ed0:	2301      	movs	r3, #1
 8010ed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010ed6:	e050      	b.n	8010f7a <UART_SetConfig+0x7ae>
 8010ed8:	2304      	movs	r3, #4
 8010eda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010ede:	e04c      	b.n	8010f7a <UART_SetConfig+0x7ae>
 8010ee0:	2308      	movs	r3, #8
 8010ee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010ee6:	e048      	b.n	8010f7a <UART_SetConfig+0x7ae>
 8010ee8:	2310      	movs	r3, #16
 8010eea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010eee:	e044      	b.n	8010f7a <UART_SetConfig+0x7ae>
 8010ef0:	2320      	movs	r3, #32
 8010ef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010ef6:	e040      	b.n	8010f7a <UART_SetConfig+0x7ae>
 8010ef8:	2340      	movs	r3, #64	@ 0x40
 8010efa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010efe:	e03c      	b.n	8010f7a <UART_SetConfig+0x7ae>
 8010f00:	2380      	movs	r3, #128	@ 0x80
 8010f02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010f06:	e038      	b.n	8010f7a <UART_SetConfig+0x7ae>
 8010f08:	697b      	ldr	r3, [r7, #20]
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	4a71      	ldr	r2, [pc, #452]	@ (80110d4 <UART_SetConfig+0x908>)
 8010f0e:	4293      	cmp	r3, r2
 8010f10:	d130      	bne.n	8010f74 <UART_SetConfig+0x7a8>
 8010f12:	4b6f      	ldr	r3, [pc, #444]	@ (80110d0 <UART_SetConfig+0x904>)
 8010f14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010f16:	f003 0307 	and.w	r3, r3, #7
 8010f1a:	2b05      	cmp	r3, #5
 8010f1c:	d826      	bhi.n	8010f6c <UART_SetConfig+0x7a0>
 8010f1e:	a201      	add	r2, pc, #4	@ (adr r2, 8010f24 <UART_SetConfig+0x758>)
 8010f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f24:	08010f3d 	.word	0x08010f3d
 8010f28:	08010f45 	.word	0x08010f45
 8010f2c:	08010f4d 	.word	0x08010f4d
 8010f30:	08010f55 	.word	0x08010f55
 8010f34:	08010f5d 	.word	0x08010f5d
 8010f38:	08010f65 	.word	0x08010f65
 8010f3c:	2302      	movs	r3, #2
 8010f3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010f42:	e01a      	b.n	8010f7a <UART_SetConfig+0x7ae>
 8010f44:	2304      	movs	r3, #4
 8010f46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010f4a:	e016      	b.n	8010f7a <UART_SetConfig+0x7ae>
 8010f4c:	2308      	movs	r3, #8
 8010f4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010f52:	e012      	b.n	8010f7a <UART_SetConfig+0x7ae>
 8010f54:	2310      	movs	r3, #16
 8010f56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010f5a:	e00e      	b.n	8010f7a <UART_SetConfig+0x7ae>
 8010f5c:	2320      	movs	r3, #32
 8010f5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010f62:	e00a      	b.n	8010f7a <UART_SetConfig+0x7ae>
 8010f64:	2340      	movs	r3, #64	@ 0x40
 8010f66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010f6a:	e006      	b.n	8010f7a <UART_SetConfig+0x7ae>
 8010f6c:	2380      	movs	r3, #128	@ 0x80
 8010f6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010f72:	e002      	b.n	8010f7a <UART_SetConfig+0x7ae>
 8010f74:	2380      	movs	r3, #128	@ 0x80
 8010f76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010f7a:	697b      	ldr	r3, [r7, #20]
 8010f7c:	681b      	ldr	r3, [r3, #0]
 8010f7e:	4a55      	ldr	r2, [pc, #340]	@ (80110d4 <UART_SetConfig+0x908>)
 8010f80:	4293      	cmp	r3, r2
 8010f82:	f040 80f8 	bne.w	8011176 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010f86:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8010f8a:	2b20      	cmp	r3, #32
 8010f8c:	dc46      	bgt.n	801101c <UART_SetConfig+0x850>
 8010f8e:	2b02      	cmp	r3, #2
 8010f90:	db75      	blt.n	801107e <UART_SetConfig+0x8b2>
 8010f92:	3b02      	subs	r3, #2
 8010f94:	2b1e      	cmp	r3, #30
 8010f96:	d872      	bhi.n	801107e <UART_SetConfig+0x8b2>
 8010f98:	a201      	add	r2, pc, #4	@ (adr r2, 8010fa0 <UART_SetConfig+0x7d4>)
 8010f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f9e:	bf00      	nop
 8010fa0:	08011023 	.word	0x08011023
 8010fa4:	0801107f 	.word	0x0801107f
 8010fa8:	0801102b 	.word	0x0801102b
 8010fac:	0801107f 	.word	0x0801107f
 8010fb0:	0801107f 	.word	0x0801107f
 8010fb4:	0801107f 	.word	0x0801107f
 8010fb8:	0801103b 	.word	0x0801103b
 8010fbc:	0801107f 	.word	0x0801107f
 8010fc0:	0801107f 	.word	0x0801107f
 8010fc4:	0801107f 	.word	0x0801107f
 8010fc8:	0801107f 	.word	0x0801107f
 8010fcc:	0801107f 	.word	0x0801107f
 8010fd0:	0801107f 	.word	0x0801107f
 8010fd4:	0801107f 	.word	0x0801107f
 8010fd8:	0801104b 	.word	0x0801104b
 8010fdc:	0801107f 	.word	0x0801107f
 8010fe0:	0801107f 	.word	0x0801107f
 8010fe4:	0801107f 	.word	0x0801107f
 8010fe8:	0801107f 	.word	0x0801107f
 8010fec:	0801107f 	.word	0x0801107f
 8010ff0:	0801107f 	.word	0x0801107f
 8010ff4:	0801107f 	.word	0x0801107f
 8010ff8:	0801107f 	.word	0x0801107f
 8010ffc:	0801107f 	.word	0x0801107f
 8011000:	0801107f 	.word	0x0801107f
 8011004:	0801107f 	.word	0x0801107f
 8011008:	0801107f 	.word	0x0801107f
 801100c:	0801107f 	.word	0x0801107f
 8011010:	0801107f 	.word	0x0801107f
 8011014:	0801107f 	.word	0x0801107f
 8011018:	08011071 	.word	0x08011071
 801101c:	2b40      	cmp	r3, #64	@ 0x40
 801101e:	d02a      	beq.n	8011076 <UART_SetConfig+0x8aa>
 8011020:	e02d      	b.n	801107e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8011022:	f7fb fd79 	bl	800cb18 <HAL_RCCEx_GetD3PCLK1Freq>
 8011026:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8011028:	e02f      	b.n	801108a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801102a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801102e:	4618      	mov	r0, r3
 8011030:	f7fb fd88 	bl	800cb44 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011036:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011038:	e027      	b.n	801108a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801103a:	f107 0318 	add.w	r3, r7, #24
 801103e:	4618      	mov	r0, r3
 8011040:	f7fb fed4 	bl	800cdec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011044:	69fb      	ldr	r3, [r7, #28]
 8011046:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011048:	e01f      	b.n	801108a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801104a:	4b21      	ldr	r3, [pc, #132]	@ (80110d0 <UART_SetConfig+0x904>)
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	f003 0320 	and.w	r3, r3, #32
 8011052:	2b00      	cmp	r3, #0
 8011054:	d009      	beq.n	801106a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011056:	4b1e      	ldr	r3, [pc, #120]	@ (80110d0 <UART_SetConfig+0x904>)
 8011058:	681b      	ldr	r3, [r3, #0]
 801105a:	08db      	lsrs	r3, r3, #3
 801105c:	f003 0303 	and.w	r3, r3, #3
 8011060:	4a1d      	ldr	r2, [pc, #116]	@ (80110d8 <UART_SetConfig+0x90c>)
 8011062:	fa22 f303 	lsr.w	r3, r2, r3
 8011066:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011068:	e00f      	b.n	801108a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801106a:	4b1b      	ldr	r3, [pc, #108]	@ (80110d8 <UART_SetConfig+0x90c>)
 801106c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801106e:	e00c      	b.n	801108a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011070:	4b1a      	ldr	r3, [pc, #104]	@ (80110dc <UART_SetConfig+0x910>)
 8011072:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011074:	e009      	b.n	801108a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011076:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801107a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801107c:	e005      	b.n	801108a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 801107e:	2300      	movs	r3, #0
 8011080:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8011082:	2301      	movs	r3, #1
 8011084:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8011088:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801108a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801108c:	2b00      	cmp	r3, #0
 801108e:	f000 81ee 	beq.w	801146e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8011092:	697b      	ldr	r3, [r7, #20]
 8011094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011096:	4a12      	ldr	r2, [pc, #72]	@ (80110e0 <UART_SetConfig+0x914>)
 8011098:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801109c:	461a      	mov	r2, r3
 801109e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80110a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80110a4:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80110a6:	697b      	ldr	r3, [r7, #20]
 80110a8:	685a      	ldr	r2, [r3, #4]
 80110aa:	4613      	mov	r3, r2
 80110ac:	005b      	lsls	r3, r3, #1
 80110ae:	4413      	add	r3, r2
 80110b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80110b2:	429a      	cmp	r2, r3
 80110b4:	d305      	bcc.n	80110c2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80110b6:	697b      	ldr	r3, [r7, #20]
 80110b8:	685b      	ldr	r3, [r3, #4]
 80110ba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80110bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80110be:	429a      	cmp	r2, r3
 80110c0:	d910      	bls.n	80110e4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80110c2:	2301      	movs	r3, #1
 80110c4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80110c8:	e1d1      	b.n	801146e <UART_SetConfig+0xca2>
 80110ca:	bf00      	nop
 80110cc:	40011c00 	.word	0x40011c00
 80110d0:	58024400 	.word	0x58024400
 80110d4:	58000c00 	.word	0x58000c00
 80110d8:	03d09000 	.word	0x03d09000
 80110dc:	003d0900 	.word	0x003d0900
 80110e0:	08019edc 	.word	0x08019edc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80110e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80110e6:	2200      	movs	r2, #0
 80110e8:	60bb      	str	r3, [r7, #8]
 80110ea:	60fa      	str	r2, [r7, #12]
 80110ec:	697b      	ldr	r3, [r7, #20]
 80110ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80110f0:	4ac0      	ldr	r2, [pc, #768]	@ (80113f4 <UART_SetConfig+0xc28>)
 80110f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80110f6:	b29b      	uxth	r3, r3
 80110f8:	2200      	movs	r2, #0
 80110fa:	603b      	str	r3, [r7, #0]
 80110fc:	607a      	str	r2, [r7, #4]
 80110fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011102:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011106:	f7ef fb5f 	bl	80007c8 <__aeabi_uldivmod>
 801110a:	4602      	mov	r2, r0
 801110c:	460b      	mov	r3, r1
 801110e:	4610      	mov	r0, r2
 8011110:	4619      	mov	r1, r3
 8011112:	f04f 0200 	mov.w	r2, #0
 8011116:	f04f 0300 	mov.w	r3, #0
 801111a:	020b      	lsls	r3, r1, #8
 801111c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8011120:	0202      	lsls	r2, r0, #8
 8011122:	6979      	ldr	r1, [r7, #20]
 8011124:	6849      	ldr	r1, [r1, #4]
 8011126:	0849      	lsrs	r1, r1, #1
 8011128:	2000      	movs	r0, #0
 801112a:	460c      	mov	r4, r1
 801112c:	4605      	mov	r5, r0
 801112e:	eb12 0804 	adds.w	r8, r2, r4
 8011132:	eb43 0905 	adc.w	r9, r3, r5
 8011136:	697b      	ldr	r3, [r7, #20]
 8011138:	685b      	ldr	r3, [r3, #4]
 801113a:	2200      	movs	r2, #0
 801113c:	469a      	mov	sl, r3
 801113e:	4693      	mov	fp, r2
 8011140:	4652      	mov	r2, sl
 8011142:	465b      	mov	r3, fp
 8011144:	4640      	mov	r0, r8
 8011146:	4649      	mov	r1, r9
 8011148:	f7ef fb3e 	bl	80007c8 <__aeabi_uldivmod>
 801114c:	4602      	mov	r2, r0
 801114e:	460b      	mov	r3, r1
 8011150:	4613      	mov	r3, r2
 8011152:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011156:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801115a:	d308      	bcc.n	801116e <UART_SetConfig+0x9a2>
 801115c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801115e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011162:	d204      	bcs.n	801116e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8011164:	697b      	ldr	r3, [r7, #20]
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801116a:	60da      	str	r2, [r3, #12]
 801116c:	e17f      	b.n	801146e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 801116e:	2301      	movs	r3, #1
 8011170:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8011174:	e17b      	b.n	801146e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011176:	697b      	ldr	r3, [r7, #20]
 8011178:	69db      	ldr	r3, [r3, #28]
 801117a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801117e:	f040 80bd 	bne.w	80112fc <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8011182:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8011186:	2b20      	cmp	r3, #32
 8011188:	dc48      	bgt.n	801121c <UART_SetConfig+0xa50>
 801118a:	2b00      	cmp	r3, #0
 801118c:	db7b      	blt.n	8011286 <UART_SetConfig+0xaba>
 801118e:	2b20      	cmp	r3, #32
 8011190:	d879      	bhi.n	8011286 <UART_SetConfig+0xaba>
 8011192:	a201      	add	r2, pc, #4	@ (adr r2, 8011198 <UART_SetConfig+0x9cc>)
 8011194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011198:	08011223 	.word	0x08011223
 801119c:	0801122b 	.word	0x0801122b
 80111a0:	08011287 	.word	0x08011287
 80111a4:	08011287 	.word	0x08011287
 80111a8:	08011233 	.word	0x08011233
 80111ac:	08011287 	.word	0x08011287
 80111b0:	08011287 	.word	0x08011287
 80111b4:	08011287 	.word	0x08011287
 80111b8:	08011243 	.word	0x08011243
 80111bc:	08011287 	.word	0x08011287
 80111c0:	08011287 	.word	0x08011287
 80111c4:	08011287 	.word	0x08011287
 80111c8:	08011287 	.word	0x08011287
 80111cc:	08011287 	.word	0x08011287
 80111d0:	08011287 	.word	0x08011287
 80111d4:	08011287 	.word	0x08011287
 80111d8:	08011253 	.word	0x08011253
 80111dc:	08011287 	.word	0x08011287
 80111e0:	08011287 	.word	0x08011287
 80111e4:	08011287 	.word	0x08011287
 80111e8:	08011287 	.word	0x08011287
 80111ec:	08011287 	.word	0x08011287
 80111f0:	08011287 	.word	0x08011287
 80111f4:	08011287 	.word	0x08011287
 80111f8:	08011287 	.word	0x08011287
 80111fc:	08011287 	.word	0x08011287
 8011200:	08011287 	.word	0x08011287
 8011204:	08011287 	.word	0x08011287
 8011208:	08011287 	.word	0x08011287
 801120c:	08011287 	.word	0x08011287
 8011210:	08011287 	.word	0x08011287
 8011214:	08011287 	.word	0x08011287
 8011218:	08011279 	.word	0x08011279
 801121c:	2b40      	cmp	r3, #64	@ 0x40
 801121e:	d02e      	beq.n	801127e <UART_SetConfig+0xab2>
 8011220:	e031      	b.n	8011286 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011222:	f7fa fa4d 	bl	800b6c0 <HAL_RCC_GetPCLK1Freq>
 8011226:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8011228:	e033      	b.n	8011292 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801122a:	f7fa fa5f 	bl	800b6ec <HAL_RCC_GetPCLK2Freq>
 801122e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8011230:	e02f      	b.n	8011292 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011232:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8011236:	4618      	mov	r0, r3
 8011238:	f7fb fc84 	bl	800cb44 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801123c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801123e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011240:	e027      	b.n	8011292 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011242:	f107 0318 	add.w	r3, r7, #24
 8011246:	4618      	mov	r0, r3
 8011248:	f7fb fdd0 	bl	800cdec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801124c:	69fb      	ldr	r3, [r7, #28]
 801124e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011250:	e01f      	b.n	8011292 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011252:	4b69      	ldr	r3, [pc, #420]	@ (80113f8 <UART_SetConfig+0xc2c>)
 8011254:	681b      	ldr	r3, [r3, #0]
 8011256:	f003 0320 	and.w	r3, r3, #32
 801125a:	2b00      	cmp	r3, #0
 801125c:	d009      	beq.n	8011272 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801125e:	4b66      	ldr	r3, [pc, #408]	@ (80113f8 <UART_SetConfig+0xc2c>)
 8011260:	681b      	ldr	r3, [r3, #0]
 8011262:	08db      	lsrs	r3, r3, #3
 8011264:	f003 0303 	and.w	r3, r3, #3
 8011268:	4a64      	ldr	r2, [pc, #400]	@ (80113fc <UART_SetConfig+0xc30>)
 801126a:	fa22 f303 	lsr.w	r3, r2, r3
 801126e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011270:	e00f      	b.n	8011292 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8011272:	4b62      	ldr	r3, [pc, #392]	@ (80113fc <UART_SetConfig+0xc30>)
 8011274:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011276:	e00c      	b.n	8011292 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011278:	4b61      	ldr	r3, [pc, #388]	@ (8011400 <UART_SetConfig+0xc34>)
 801127a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801127c:	e009      	b.n	8011292 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801127e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011282:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011284:	e005      	b.n	8011292 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8011286:	2300      	movs	r3, #0
 8011288:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801128a:	2301      	movs	r3, #1
 801128c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8011290:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011292:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011294:	2b00      	cmp	r3, #0
 8011296:	f000 80ea 	beq.w	801146e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801129a:	697b      	ldr	r3, [r7, #20]
 801129c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801129e:	4a55      	ldr	r2, [pc, #340]	@ (80113f4 <UART_SetConfig+0xc28>)
 80112a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80112a4:	461a      	mov	r2, r3
 80112a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80112a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80112ac:	005a      	lsls	r2, r3, #1
 80112ae:	697b      	ldr	r3, [r7, #20]
 80112b0:	685b      	ldr	r3, [r3, #4]
 80112b2:	085b      	lsrs	r3, r3, #1
 80112b4:	441a      	add	r2, r3
 80112b6:	697b      	ldr	r3, [r7, #20]
 80112b8:	685b      	ldr	r3, [r3, #4]
 80112ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80112be:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80112c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112c2:	2b0f      	cmp	r3, #15
 80112c4:	d916      	bls.n	80112f4 <UART_SetConfig+0xb28>
 80112c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80112cc:	d212      	bcs.n	80112f4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80112ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112d0:	b29b      	uxth	r3, r3
 80112d2:	f023 030f 	bic.w	r3, r3, #15
 80112d6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80112d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112da:	085b      	lsrs	r3, r3, #1
 80112dc:	b29b      	uxth	r3, r3
 80112de:	f003 0307 	and.w	r3, r3, #7
 80112e2:	b29a      	uxth	r2, r3
 80112e4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80112e6:	4313      	orrs	r3, r2
 80112e8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80112ea:	697b      	ldr	r3, [r7, #20]
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80112f0:	60da      	str	r2, [r3, #12]
 80112f2:	e0bc      	b.n	801146e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80112f4:	2301      	movs	r3, #1
 80112f6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80112fa:	e0b8      	b.n	801146e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80112fc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8011300:	2b20      	cmp	r3, #32
 8011302:	dc4b      	bgt.n	801139c <UART_SetConfig+0xbd0>
 8011304:	2b00      	cmp	r3, #0
 8011306:	f2c0 8087 	blt.w	8011418 <UART_SetConfig+0xc4c>
 801130a:	2b20      	cmp	r3, #32
 801130c:	f200 8084 	bhi.w	8011418 <UART_SetConfig+0xc4c>
 8011310:	a201      	add	r2, pc, #4	@ (adr r2, 8011318 <UART_SetConfig+0xb4c>)
 8011312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011316:	bf00      	nop
 8011318:	080113a3 	.word	0x080113a3
 801131c:	080113ab 	.word	0x080113ab
 8011320:	08011419 	.word	0x08011419
 8011324:	08011419 	.word	0x08011419
 8011328:	080113b3 	.word	0x080113b3
 801132c:	08011419 	.word	0x08011419
 8011330:	08011419 	.word	0x08011419
 8011334:	08011419 	.word	0x08011419
 8011338:	080113c3 	.word	0x080113c3
 801133c:	08011419 	.word	0x08011419
 8011340:	08011419 	.word	0x08011419
 8011344:	08011419 	.word	0x08011419
 8011348:	08011419 	.word	0x08011419
 801134c:	08011419 	.word	0x08011419
 8011350:	08011419 	.word	0x08011419
 8011354:	08011419 	.word	0x08011419
 8011358:	080113d3 	.word	0x080113d3
 801135c:	08011419 	.word	0x08011419
 8011360:	08011419 	.word	0x08011419
 8011364:	08011419 	.word	0x08011419
 8011368:	08011419 	.word	0x08011419
 801136c:	08011419 	.word	0x08011419
 8011370:	08011419 	.word	0x08011419
 8011374:	08011419 	.word	0x08011419
 8011378:	08011419 	.word	0x08011419
 801137c:	08011419 	.word	0x08011419
 8011380:	08011419 	.word	0x08011419
 8011384:	08011419 	.word	0x08011419
 8011388:	08011419 	.word	0x08011419
 801138c:	08011419 	.word	0x08011419
 8011390:	08011419 	.word	0x08011419
 8011394:	08011419 	.word	0x08011419
 8011398:	0801140b 	.word	0x0801140b
 801139c:	2b40      	cmp	r3, #64	@ 0x40
 801139e:	d037      	beq.n	8011410 <UART_SetConfig+0xc44>
 80113a0:	e03a      	b.n	8011418 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80113a2:	f7fa f98d 	bl	800b6c0 <HAL_RCC_GetPCLK1Freq>
 80113a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80113a8:	e03c      	b.n	8011424 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80113aa:	f7fa f99f 	bl	800b6ec <HAL_RCC_GetPCLK2Freq>
 80113ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80113b0:	e038      	b.n	8011424 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80113b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80113b6:	4618      	mov	r0, r3
 80113b8:	f7fb fbc4 	bl	800cb44 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80113bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80113be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80113c0:	e030      	b.n	8011424 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80113c2:	f107 0318 	add.w	r3, r7, #24
 80113c6:	4618      	mov	r0, r3
 80113c8:	f7fb fd10 	bl	800cdec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80113cc:	69fb      	ldr	r3, [r7, #28]
 80113ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80113d0:	e028      	b.n	8011424 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80113d2:	4b09      	ldr	r3, [pc, #36]	@ (80113f8 <UART_SetConfig+0xc2c>)
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	f003 0320 	and.w	r3, r3, #32
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d012      	beq.n	8011404 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80113de:	4b06      	ldr	r3, [pc, #24]	@ (80113f8 <UART_SetConfig+0xc2c>)
 80113e0:	681b      	ldr	r3, [r3, #0]
 80113e2:	08db      	lsrs	r3, r3, #3
 80113e4:	f003 0303 	and.w	r3, r3, #3
 80113e8:	4a04      	ldr	r2, [pc, #16]	@ (80113fc <UART_SetConfig+0xc30>)
 80113ea:	fa22 f303 	lsr.w	r3, r2, r3
 80113ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80113f0:	e018      	b.n	8011424 <UART_SetConfig+0xc58>
 80113f2:	bf00      	nop
 80113f4:	08019edc 	.word	0x08019edc
 80113f8:	58024400 	.word	0x58024400
 80113fc:	03d09000 	.word	0x03d09000
 8011400:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8011404:	4b24      	ldr	r3, [pc, #144]	@ (8011498 <UART_SetConfig+0xccc>)
 8011406:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011408:	e00c      	b.n	8011424 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801140a:	4b24      	ldr	r3, [pc, #144]	@ (801149c <UART_SetConfig+0xcd0>)
 801140c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801140e:	e009      	b.n	8011424 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011410:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011414:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011416:	e005      	b.n	8011424 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8011418:	2300      	movs	r3, #0
 801141a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801141c:	2301      	movs	r3, #1
 801141e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8011422:	bf00      	nop
    }

    if (pclk != 0U)
 8011424:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011426:	2b00      	cmp	r3, #0
 8011428:	d021      	beq.n	801146e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801142a:	697b      	ldr	r3, [r7, #20]
 801142c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801142e:	4a1c      	ldr	r2, [pc, #112]	@ (80114a0 <UART_SetConfig+0xcd4>)
 8011430:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011434:	461a      	mov	r2, r3
 8011436:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011438:	fbb3 f2f2 	udiv	r2, r3, r2
 801143c:	697b      	ldr	r3, [r7, #20]
 801143e:	685b      	ldr	r3, [r3, #4]
 8011440:	085b      	lsrs	r3, r3, #1
 8011442:	441a      	add	r2, r3
 8011444:	697b      	ldr	r3, [r7, #20]
 8011446:	685b      	ldr	r3, [r3, #4]
 8011448:	fbb2 f3f3 	udiv	r3, r2, r3
 801144c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801144e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011450:	2b0f      	cmp	r3, #15
 8011452:	d909      	bls.n	8011468 <UART_SetConfig+0xc9c>
 8011454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011456:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801145a:	d205      	bcs.n	8011468 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801145c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801145e:	b29a      	uxth	r2, r3
 8011460:	697b      	ldr	r3, [r7, #20]
 8011462:	681b      	ldr	r3, [r3, #0]
 8011464:	60da      	str	r2, [r3, #12]
 8011466:	e002      	b.n	801146e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8011468:	2301      	movs	r3, #1
 801146a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801146e:	697b      	ldr	r3, [r7, #20]
 8011470:	2201      	movs	r2, #1
 8011472:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8011476:	697b      	ldr	r3, [r7, #20]
 8011478:	2201      	movs	r2, #1
 801147a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801147e:	697b      	ldr	r3, [r7, #20]
 8011480:	2200      	movs	r2, #0
 8011482:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8011484:	697b      	ldr	r3, [r7, #20]
 8011486:	2200      	movs	r2, #0
 8011488:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 801148a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 801148e:	4618      	mov	r0, r3
 8011490:	3748      	adds	r7, #72	@ 0x48
 8011492:	46bd      	mov	sp, r7
 8011494:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011498:	03d09000 	.word	0x03d09000
 801149c:	003d0900 	.word	0x003d0900
 80114a0:	08019edc 	.word	0x08019edc

080114a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80114a4:	b480      	push	{r7}
 80114a6:	b083      	sub	sp, #12
 80114a8:	af00      	add	r7, sp, #0
 80114aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80114b0:	f003 0308 	and.w	r3, r3, #8
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d00a      	beq.n	80114ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	685b      	ldr	r3, [r3, #4]
 80114be:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	430a      	orrs	r2, r1
 80114cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80114d2:	f003 0301 	and.w	r3, r3, #1
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d00a      	beq.n	80114f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	681b      	ldr	r3, [r3, #0]
 80114de:	685b      	ldr	r3, [r3, #4]
 80114e0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	430a      	orrs	r2, r1
 80114ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80114f4:	f003 0302 	and.w	r3, r3, #2
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d00a      	beq.n	8011512 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	685b      	ldr	r3, [r3, #4]
 8011502:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	681b      	ldr	r3, [r3, #0]
 801150e:	430a      	orrs	r2, r1
 8011510:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011516:	f003 0304 	and.w	r3, r3, #4
 801151a:	2b00      	cmp	r3, #0
 801151c:	d00a      	beq.n	8011534 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	681b      	ldr	r3, [r3, #0]
 8011522:	685b      	ldr	r3, [r3, #4]
 8011524:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	681b      	ldr	r3, [r3, #0]
 8011530:	430a      	orrs	r2, r1
 8011532:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011538:	f003 0310 	and.w	r3, r3, #16
 801153c:	2b00      	cmp	r3, #0
 801153e:	d00a      	beq.n	8011556 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	689b      	ldr	r3, [r3, #8]
 8011546:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	430a      	orrs	r2, r1
 8011554:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801155a:	f003 0320 	and.w	r3, r3, #32
 801155e:	2b00      	cmp	r3, #0
 8011560:	d00a      	beq.n	8011578 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	689b      	ldr	r3, [r3, #8]
 8011568:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	681b      	ldr	r3, [r3, #0]
 8011574:	430a      	orrs	r2, r1
 8011576:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801157c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011580:	2b00      	cmp	r3, #0
 8011582:	d01a      	beq.n	80115ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	685b      	ldr	r3, [r3, #4]
 801158a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	681b      	ldr	r3, [r3, #0]
 8011596:	430a      	orrs	r2, r1
 8011598:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801159e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80115a2:	d10a      	bne.n	80115ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	685b      	ldr	r3, [r3, #4]
 80115aa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	681b      	ldr	r3, [r3, #0]
 80115b6:	430a      	orrs	r2, r1
 80115b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80115be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d00a      	beq.n	80115dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	681b      	ldr	r3, [r3, #0]
 80115ca:	685b      	ldr	r3, [r3, #4]
 80115cc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	681b      	ldr	r3, [r3, #0]
 80115d8:	430a      	orrs	r2, r1
 80115da:	605a      	str	r2, [r3, #4]
  }
}
 80115dc:	bf00      	nop
 80115de:	370c      	adds	r7, #12
 80115e0:	46bd      	mov	sp, r7
 80115e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115e6:	4770      	bx	lr

080115e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80115e8:	b580      	push	{r7, lr}
 80115ea:	b098      	sub	sp, #96	@ 0x60
 80115ec:	af02      	add	r7, sp, #8
 80115ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	2200      	movs	r2, #0
 80115f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80115f8:	f7f5 f9c2 	bl	8006980 <HAL_GetTick>
 80115fc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	f003 0308 	and.w	r3, r3, #8
 8011608:	2b08      	cmp	r3, #8
 801160a:	d12f      	bne.n	801166c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801160c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8011610:	9300      	str	r3, [sp, #0]
 8011612:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011614:	2200      	movs	r2, #0
 8011616:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801161a:	6878      	ldr	r0, [r7, #4]
 801161c:	f000 f88e 	bl	801173c <UART_WaitOnFlagUntilTimeout>
 8011620:	4603      	mov	r3, r0
 8011622:	2b00      	cmp	r3, #0
 8011624:	d022      	beq.n	801166c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	681b      	ldr	r3, [r3, #0]
 801162a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801162c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801162e:	e853 3f00 	ldrex	r3, [r3]
 8011632:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011634:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011636:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801163a:	653b      	str	r3, [r7, #80]	@ 0x50
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	461a      	mov	r2, r3
 8011642:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011644:	647b      	str	r3, [r7, #68]	@ 0x44
 8011646:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011648:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801164a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801164c:	e841 2300 	strex	r3, r2, [r1]
 8011650:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011652:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011654:	2b00      	cmp	r3, #0
 8011656:	d1e6      	bne.n	8011626 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	2220      	movs	r2, #32
 801165c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	2200      	movs	r2, #0
 8011664:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011668:	2303      	movs	r3, #3
 801166a:	e063      	b.n	8011734 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	681b      	ldr	r3, [r3, #0]
 8011672:	f003 0304 	and.w	r3, r3, #4
 8011676:	2b04      	cmp	r3, #4
 8011678:	d149      	bne.n	801170e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801167a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801167e:	9300      	str	r3, [sp, #0]
 8011680:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011682:	2200      	movs	r2, #0
 8011684:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8011688:	6878      	ldr	r0, [r7, #4]
 801168a:	f000 f857 	bl	801173c <UART_WaitOnFlagUntilTimeout>
 801168e:	4603      	mov	r3, r0
 8011690:	2b00      	cmp	r3, #0
 8011692:	d03c      	beq.n	801170e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	681b      	ldr	r3, [r3, #0]
 8011698:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801169a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801169c:	e853 3f00 	ldrex	r3, [r3]
 80116a0:	623b      	str	r3, [r7, #32]
   return(result);
 80116a2:	6a3b      	ldr	r3, [r7, #32]
 80116a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80116a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	681b      	ldr	r3, [r3, #0]
 80116ae:	461a      	mov	r2, r3
 80116b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80116b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80116b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80116b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80116b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80116ba:	e841 2300 	strex	r3, r2, [r1]
 80116be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80116c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d1e6      	bne.n	8011694 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	681b      	ldr	r3, [r3, #0]
 80116ca:	3308      	adds	r3, #8
 80116cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80116ce:	693b      	ldr	r3, [r7, #16]
 80116d0:	e853 3f00 	ldrex	r3, [r3]
 80116d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80116d6:	68fb      	ldr	r3, [r7, #12]
 80116d8:	f023 0301 	bic.w	r3, r3, #1
 80116dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	3308      	adds	r3, #8
 80116e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80116e6:	61fa      	str	r2, [r7, #28]
 80116e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80116ea:	69b9      	ldr	r1, [r7, #24]
 80116ec:	69fa      	ldr	r2, [r7, #28]
 80116ee:	e841 2300 	strex	r3, r2, [r1]
 80116f2:	617b      	str	r3, [r7, #20]
   return(result);
 80116f4:	697b      	ldr	r3, [r7, #20]
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d1e5      	bne.n	80116c6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	2220      	movs	r2, #32
 80116fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	2200      	movs	r2, #0
 8011706:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801170a:	2303      	movs	r3, #3
 801170c:	e012      	b.n	8011734 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	2220      	movs	r2, #32
 8011712:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	2220      	movs	r2, #32
 801171a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	2200      	movs	r2, #0
 8011722:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	2200      	movs	r2, #0
 8011728:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	2200      	movs	r2, #0
 801172e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011732:	2300      	movs	r3, #0
}
 8011734:	4618      	mov	r0, r3
 8011736:	3758      	adds	r7, #88	@ 0x58
 8011738:	46bd      	mov	sp, r7
 801173a:	bd80      	pop	{r7, pc}

0801173c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801173c:	b580      	push	{r7, lr}
 801173e:	b084      	sub	sp, #16
 8011740:	af00      	add	r7, sp, #0
 8011742:	60f8      	str	r0, [r7, #12]
 8011744:	60b9      	str	r1, [r7, #8]
 8011746:	603b      	str	r3, [r7, #0]
 8011748:	4613      	mov	r3, r2
 801174a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801174c:	e04f      	b.n	80117ee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801174e:	69bb      	ldr	r3, [r7, #24]
 8011750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011754:	d04b      	beq.n	80117ee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011756:	f7f5 f913 	bl	8006980 <HAL_GetTick>
 801175a:	4602      	mov	r2, r0
 801175c:	683b      	ldr	r3, [r7, #0]
 801175e:	1ad3      	subs	r3, r2, r3
 8011760:	69ba      	ldr	r2, [r7, #24]
 8011762:	429a      	cmp	r2, r3
 8011764:	d302      	bcc.n	801176c <UART_WaitOnFlagUntilTimeout+0x30>
 8011766:	69bb      	ldr	r3, [r7, #24]
 8011768:	2b00      	cmp	r3, #0
 801176a:	d101      	bne.n	8011770 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801176c:	2303      	movs	r3, #3
 801176e:	e04e      	b.n	801180e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8011770:	68fb      	ldr	r3, [r7, #12]
 8011772:	681b      	ldr	r3, [r3, #0]
 8011774:	681b      	ldr	r3, [r3, #0]
 8011776:	f003 0304 	and.w	r3, r3, #4
 801177a:	2b00      	cmp	r3, #0
 801177c:	d037      	beq.n	80117ee <UART_WaitOnFlagUntilTimeout+0xb2>
 801177e:	68bb      	ldr	r3, [r7, #8]
 8011780:	2b80      	cmp	r3, #128	@ 0x80
 8011782:	d034      	beq.n	80117ee <UART_WaitOnFlagUntilTimeout+0xb2>
 8011784:	68bb      	ldr	r3, [r7, #8]
 8011786:	2b40      	cmp	r3, #64	@ 0x40
 8011788:	d031      	beq.n	80117ee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801178a:	68fb      	ldr	r3, [r7, #12]
 801178c:	681b      	ldr	r3, [r3, #0]
 801178e:	69db      	ldr	r3, [r3, #28]
 8011790:	f003 0308 	and.w	r3, r3, #8
 8011794:	2b08      	cmp	r3, #8
 8011796:	d110      	bne.n	80117ba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	2208      	movs	r2, #8
 801179e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80117a0:	68f8      	ldr	r0, [r7, #12]
 80117a2:	f000 fa43 	bl	8011c2c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80117a6:	68fb      	ldr	r3, [r7, #12]
 80117a8:	2208      	movs	r2, #8
 80117aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80117ae:	68fb      	ldr	r3, [r7, #12]
 80117b0:	2200      	movs	r2, #0
 80117b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80117b6:	2301      	movs	r3, #1
 80117b8:	e029      	b.n	801180e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	681b      	ldr	r3, [r3, #0]
 80117be:	69db      	ldr	r3, [r3, #28]
 80117c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80117c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80117c8:	d111      	bne.n	80117ee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80117ca:	68fb      	ldr	r3, [r7, #12]
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80117d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80117d4:	68f8      	ldr	r0, [r7, #12]
 80117d6:	f000 fa29 	bl	8011c2c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80117da:	68fb      	ldr	r3, [r7, #12]
 80117dc:	2220      	movs	r2, #32
 80117de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	2200      	movs	r2, #0
 80117e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80117ea:	2303      	movs	r3, #3
 80117ec:	e00f      	b.n	801180e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80117ee:	68fb      	ldr	r3, [r7, #12]
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	69da      	ldr	r2, [r3, #28]
 80117f4:	68bb      	ldr	r3, [r7, #8]
 80117f6:	4013      	ands	r3, r2
 80117f8:	68ba      	ldr	r2, [r7, #8]
 80117fa:	429a      	cmp	r2, r3
 80117fc:	bf0c      	ite	eq
 80117fe:	2301      	moveq	r3, #1
 8011800:	2300      	movne	r3, #0
 8011802:	b2db      	uxtb	r3, r3
 8011804:	461a      	mov	r2, r3
 8011806:	79fb      	ldrb	r3, [r7, #7]
 8011808:	429a      	cmp	r2, r3
 801180a:	d0a0      	beq.n	801174e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801180c:	2300      	movs	r3, #0
}
 801180e:	4618      	mov	r0, r3
 8011810:	3710      	adds	r7, #16
 8011812:	46bd      	mov	sp, r7
 8011814:	bd80      	pop	{r7, pc}
	...

08011818 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011818:	b480      	push	{r7}
 801181a:	b0a3      	sub	sp, #140	@ 0x8c
 801181c:	af00      	add	r7, sp, #0
 801181e:	60f8      	str	r0, [r7, #12]
 8011820:	60b9      	str	r1, [r7, #8]
 8011822:	4613      	mov	r3, r2
 8011824:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8011826:	68fb      	ldr	r3, [r7, #12]
 8011828:	68ba      	ldr	r2, [r7, #8]
 801182a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 801182c:	68fb      	ldr	r3, [r7, #12]
 801182e:	88fa      	ldrh	r2, [r7, #6]
 8011830:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8011834:	68fb      	ldr	r3, [r7, #12]
 8011836:	88fa      	ldrh	r2, [r7, #6]
 8011838:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 801183c:	68fb      	ldr	r3, [r7, #12]
 801183e:	2200      	movs	r2, #0
 8011840:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8011842:	68fb      	ldr	r3, [r7, #12]
 8011844:	689b      	ldr	r3, [r3, #8]
 8011846:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801184a:	d10e      	bne.n	801186a <UART_Start_Receive_IT+0x52>
 801184c:	68fb      	ldr	r3, [r7, #12]
 801184e:	691b      	ldr	r3, [r3, #16]
 8011850:	2b00      	cmp	r3, #0
 8011852:	d105      	bne.n	8011860 <UART_Start_Receive_IT+0x48>
 8011854:	68fb      	ldr	r3, [r7, #12]
 8011856:	f240 12ff 	movw	r2, #511	@ 0x1ff
 801185a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801185e:	e02d      	b.n	80118bc <UART_Start_Receive_IT+0xa4>
 8011860:	68fb      	ldr	r3, [r7, #12]
 8011862:	22ff      	movs	r2, #255	@ 0xff
 8011864:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8011868:	e028      	b.n	80118bc <UART_Start_Receive_IT+0xa4>
 801186a:	68fb      	ldr	r3, [r7, #12]
 801186c:	689b      	ldr	r3, [r3, #8]
 801186e:	2b00      	cmp	r3, #0
 8011870:	d10d      	bne.n	801188e <UART_Start_Receive_IT+0x76>
 8011872:	68fb      	ldr	r3, [r7, #12]
 8011874:	691b      	ldr	r3, [r3, #16]
 8011876:	2b00      	cmp	r3, #0
 8011878:	d104      	bne.n	8011884 <UART_Start_Receive_IT+0x6c>
 801187a:	68fb      	ldr	r3, [r7, #12]
 801187c:	22ff      	movs	r2, #255	@ 0xff
 801187e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8011882:	e01b      	b.n	80118bc <UART_Start_Receive_IT+0xa4>
 8011884:	68fb      	ldr	r3, [r7, #12]
 8011886:	227f      	movs	r2, #127	@ 0x7f
 8011888:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801188c:	e016      	b.n	80118bc <UART_Start_Receive_IT+0xa4>
 801188e:	68fb      	ldr	r3, [r7, #12]
 8011890:	689b      	ldr	r3, [r3, #8]
 8011892:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011896:	d10d      	bne.n	80118b4 <UART_Start_Receive_IT+0x9c>
 8011898:	68fb      	ldr	r3, [r7, #12]
 801189a:	691b      	ldr	r3, [r3, #16]
 801189c:	2b00      	cmp	r3, #0
 801189e:	d104      	bne.n	80118aa <UART_Start_Receive_IT+0x92>
 80118a0:	68fb      	ldr	r3, [r7, #12]
 80118a2:	227f      	movs	r2, #127	@ 0x7f
 80118a4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80118a8:	e008      	b.n	80118bc <UART_Start_Receive_IT+0xa4>
 80118aa:	68fb      	ldr	r3, [r7, #12]
 80118ac:	223f      	movs	r2, #63	@ 0x3f
 80118ae:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80118b2:	e003      	b.n	80118bc <UART_Start_Receive_IT+0xa4>
 80118b4:	68fb      	ldr	r3, [r7, #12]
 80118b6:	2200      	movs	r2, #0
 80118b8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80118bc:	68fb      	ldr	r3, [r7, #12]
 80118be:	2200      	movs	r2, #0
 80118c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80118c4:	68fb      	ldr	r3, [r7, #12]
 80118c6:	2222      	movs	r2, #34	@ 0x22
 80118c8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80118cc:	68fb      	ldr	r3, [r7, #12]
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	3308      	adds	r3, #8
 80118d2:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80118d6:	e853 3f00 	ldrex	r3, [r3]
 80118da:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80118dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80118de:	f043 0301 	orr.w	r3, r3, #1
 80118e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80118e6:	68fb      	ldr	r3, [r7, #12]
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	3308      	adds	r3, #8
 80118ec:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80118f0:	673a      	str	r2, [r7, #112]	@ 0x70
 80118f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118f4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80118f6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80118f8:	e841 2300 	strex	r3, r2, [r1]
 80118fc:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80118fe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011900:	2b00      	cmp	r3, #0
 8011902:	d1e3      	bne.n	80118cc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011908:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801190c:	d14f      	bne.n	80119ae <UART_Start_Receive_IT+0x196>
 801190e:	68fb      	ldr	r3, [r7, #12]
 8011910:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8011914:	88fa      	ldrh	r2, [r7, #6]
 8011916:	429a      	cmp	r2, r3
 8011918:	d349      	bcc.n	80119ae <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801191a:	68fb      	ldr	r3, [r7, #12]
 801191c:	689b      	ldr	r3, [r3, #8]
 801191e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011922:	d107      	bne.n	8011934 <UART_Start_Receive_IT+0x11c>
 8011924:	68fb      	ldr	r3, [r7, #12]
 8011926:	691b      	ldr	r3, [r3, #16]
 8011928:	2b00      	cmp	r3, #0
 801192a:	d103      	bne.n	8011934 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 801192c:	68fb      	ldr	r3, [r7, #12]
 801192e:	4a47      	ldr	r2, [pc, #284]	@ (8011a4c <UART_Start_Receive_IT+0x234>)
 8011930:	675a      	str	r2, [r3, #116]	@ 0x74
 8011932:	e002      	b.n	801193a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8011934:	68fb      	ldr	r3, [r7, #12]
 8011936:	4a46      	ldr	r2, [pc, #280]	@ (8011a50 <UART_Start_Receive_IT+0x238>)
 8011938:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801193a:	68fb      	ldr	r3, [r7, #12]
 801193c:	691b      	ldr	r3, [r3, #16]
 801193e:	2b00      	cmp	r3, #0
 8011940:	d01a      	beq.n	8011978 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011942:	68fb      	ldr	r3, [r7, #12]
 8011944:	681b      	ldr	r3, [r3, #0]
 8011946:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011948:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801194a:	e853 3f00 	ldrex	r3, [r3]
 801194e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8011950:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011952:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8011956:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801195a:	68fb      	ldr	r3, [r7, #12]
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	461a      	mov	r2, r3
 8011960:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8011964:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011966:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011968:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801196a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801196c:	e841 2300 	strex	r3, r2, [r1]
 8011970:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8011972:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011974:	2b00      	cmp	r3, #0
 8011976:	d1e4      	bne.n	8011942 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011978:	68fb      	ldr	r3, [r7, #12]
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	3308      	adds	r3, #8
 801197e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011980:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011982:	e853 3f00 	ldrex	r3, [r3]
 8011986:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801198a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801198e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8011990:	68fb      	ldr	r3, [r7, #12]
 8011992:	681b      	ldr	r3, [r3, #0]
 8011994:	3308      	adds	r3, #8
 8011996:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8011998:	64ba      	str	r2, [r7, #72]	@ 0x48
 801199a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801199c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801199e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80119a0:	e841 2300 	strex	r3, r2, [r1]
 80119a4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80119a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d1e5      	bne.n	8011978 <UART_Start_Receive_IT+0x160>
 80119ac:	e046      	b.n	8011a3c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80119ae:	68fb      	ldr	r3, [r7, #12]
 80119b0:	689b      	ldr	r3, [r3, #8]
 80119b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80119b6:	d107      	bne.n	80119c8 <UART_Start_Receive_IT+0x1b0>
 80119b8:	68fb      	ldr	r3, [r7, #12]
 80119ba:	691b      	ldr	r3, [r3, #16]
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d103      	bne.n	80119c8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80119c0:	68fb      	ldr	r3, [r7, #12]
 80119c2:	4a24      	ldr	r2, [pc, #144]	@ (8011a54 <UART_Start_Receive_IT+0x23c>)
 80119c4:	675a      	str	r2, [r3, #116]	@ 0x74
 80119c6:	e002      	b.n	80119ce <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80119c8:	68fb      	ldr	r3, [r7, #12]
 80119ca:	4a23      	ldr	r2, [pc, #140]	@ (8011a58 <UART_Start_Receive_IT+0x240>)
 80119cc:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80119ce:	68fb      	ldr	r3, [r7, #12]
 80119d0:	691b      	ldr	r3, [r3, #16]
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d019      	beq.n	8011a0a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80119d6:	68fb      	ldr	r3, [r7, #12]
 80119d8:	681b      	ldr	r3, [r3, #0]
 80119da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119de:	e853 3f00 	ldrex	r3, [r3]
 80119e2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80119e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119e6:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80119ea:	677b      	str	r3, [r7, #116]	@ 0x74
 80119ec:	68fb      	ldr	r3, [r7, #12]
 80119ee:	681b      	ldr	r3, [r3, #0]
 80119f0:	461a      	mov	r2, r3
 80119f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80119f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80119f6:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119f8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80119fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80119fc:	e841 2300 	strex	r3, r2, [r1]
 8011a00:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8011a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d1e6      	bne.n	80119d6 <UART_Start_Receive_IT+0x1be>
 8011a08:	e018      	b.n	8011a3c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011a0a:	68fb      	ldr	r3, [r7, #12]
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a10:	697b      	ldr	r3, [r7, #20]
 8011a12:	e853 3f00 	ldrex	r3, [r3]
 8011a16:	613b      	str	r3, [r7, #16]
   return(result);
 8011a18:	693b      	ldr	r3, [r7, #16]
 8011a1a:	f043 0320 	orr.w	r3, r3, #32
 8011a1e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8011a20:	68fb      	ldr	r3, [r7, #12]
 8011a22:	681b      	ldr	r3, [r3, #0]
 8011a24:	461a      	mov	r2, r3
 8011a26:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011a28:	623b      	str	r3, [r7, #32]
 8011a2a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a2c:	69f9      	ldr	r1, [r7, #28]
 8011a2e:	6a3a      	ldr	r2, [r7, #32]
 8011a30:	e841 2300 	strex	r3, r2, [r1]
 8011a34:	61bb      	str	r3, [r7, #24]
   return(result);
 8011a36:	69bb      	ldr	r3, [r7, #24]
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d1e6      	bne.n	8011a0a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8011a3c:	2300      	movs	r3, #0
}
 8011a3e:	4618      	mov	r0, r3
 8011a40:	378c      	adds	r7, #140	@ 0x8c
 8011a42:	46bd      	mov	sp, r7
 8011a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a48:	4770      	bx	lr
 8011a4a:	bf00      	nop
 8011a4c:	08012a81 	.word	0x08012a81
 8011a50:	08012721 	.word	0x08012721
 8011a54:	08012569 	.word	0x08012569
 8011a58:	080123b1 	.word	0x080123b1

08011a5c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011a5c:	b580      	push	{r7, lr}
 8011a5e:	b096      	sub	sp, #88	@ 0x58
 8011a60:	af00      	add	r7, sp, #0
 8011a62:	60f8      	str	r0, [r7, #12]
 8011a64:	60b9      	str	r1, [r7, #8]
 8011a66:	4613      	mov	r3, r2
 8011a68:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	68ba      	ldr	r2, [r7, #8]
 8011a6e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8011a70:	68fb      	ldr	r3, [r7, #12]
 8011a72:	88fa      	ldrh	r2, [r7, #6]
 8011a74:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011a78:	68fb      	ldr	r3, [r7, #12]
 8011a7a:	2200      	movs	r2, #0
 8011a7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011a80:	68fb      	ldr	r3, [r7, #12]
 8011a82:	2222      	movs	r2, #34	@ 0x22
 8011a84:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d02d      	beq.n	8011aee <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8011a92:	68fb      	ldr	r3, [r7, #12]
 8011a94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011a98:	4a40      	ldr	r2, [pc, #256]	@ (8011b9c <UART_Start_Receive_DMA+0x140>)
 8011a9a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8011a9c:	68fb      	ldr	r3, [r7, #12]
 8011a9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011aa2:	4a3f      	ldr	r2, [pc, #252]	@ (8011ba0 <UART_Start_Receive_DMA+0x144>)
 8011aa4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8011aa6:	68fb      	ldr	r3, [r7, #12]
 8011aa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011aac:	4a3d      	ldr	r2, [pc, #244]	@ (8011ba4 <UART_Start_Receive_DMA+0x148>)
 8011aae:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8011ab0:	68fb      	ldr	r3, [r7, #12]
 8011ab2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011ab6:	2200      	movs	r2, #0
 8011ab8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8011aba:	68fb      	ldr	r3, [r7, #12]
 8011abc:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8011ac0:	68fb      	ldr	r3, [r7, #12]
 8011ac2:	681b      	ldr	r3, [r3, #0]
 8011ac4:	3324      	adds	r3, #36	@ 0x24
 8011ac6:	4619      	mov	r1, r3
 8011ac8:	68fb      	ldr	r3, [r7, #12]
 8011aca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011acc:	461a      	mov	r2, r3
 8011ace:	88fb      	ldrh	r3, [r7, #6]
 8011ad0:	f7f5 fc6c 	bl	80073ac <HAL_DMA_Start_IT>
 8011ad4:	4603      	mov	r3, r0
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d009      	beq.n	8011aee <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8011ada:	68fb      	ldr	r3, [r7, #12]
 8011adc:	2210      	movs	r2, #16
 8011ade:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011ae2:	68fb      	ldr	r3, [r7, #12]
 8011ae4:	2220      	movs	r2, #32
 8011ae6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8011aea:	2301      	movs	r3, #1
 8011aec:	e051      	b.n	8011b92 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8011aee:	68fb      	ldr	r3, [r7, #12]
 8011af0:	691b      	ldr	r3, [r3, #16]
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d018      	beq.n	8011b28 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011af6:	68fb      	ldr	r3, [r7, #12]
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011afc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011afe:	e853 3f00 	ldrex	r3, [r3]
 8011b02:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8011b0a:	657b      	str	r3, [r7, #84]	@ 0x54
 8011b0c:	68fb      	ldr	r3, [r7, #12]
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	461a      	mov	r2, r3
 8011b12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011b14:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011b16:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b18:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8011b1a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011b1c:	e841 2300 	strex	r3, r2, [r1]
 8011b20:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8011b22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d1e6      	bne.n	8011af6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	681b      	ldr	r3, [r3, #0]
 8011b2c:	3308      	adds	r3, #8
 8011b2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b32:	e853 3f00 	ldrex	r3, [r3]
 8011b36:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b3a:	f043 0301 	orr.w	r3, r3, #1
 8011b3e:	653b      	str	r3, [r7, #80]	@ 0x50
 8011b40:	68fb      	ldr	r3, [r7, #12]
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	3308      	adds	r3, #8
 8011b46:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011b48:	637a      	str	r2, [r7, #52]	@ 0x34
 8011b4a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b4c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011b4e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011b50:	e841 2300 	strex	r3, r2, [r1]
 8011b54:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8011b56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d1e5      	bne.n	8011b28 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011b5c:	68fb      	ldr	r3, [r7, #12]
 8011b5e:	681b      	ldr	r3, [r3, #0]
 8011b60:	3308      	adds	r3, #8
 8011b62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b64:	697b      	ldr	r3, [r7, #20]
 8011b66:	e853 3f00 	ldrex	r3, [r3]
 8011b6a:	613b      	str	r3, [r7, #16]
   return(result);
 8011b6c:	693b      	ldr	r3, [r7, #16]
 8011b6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011b72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011b74:	68fb      	ldr	r3, [r7, #12]
 8011b76:	681b      	ldr	r3, [r3, #0]
 8011b78:	3308      	adds	r3, #8
 8011b7a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011b7c:	623a      	str	r2, [r7, #32]
 8011b7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b80:	69f9      	ldr	r1, [r7, #28]
 8011b82:	6a3a      	ldr	r2, [r7, #32]
 8011b84:	e841 2300 	strex	r3, r2, [r1]
 8011b88:	61bb      	str	r3, [r7, #24]
   return(result);
 8011b8a:	69bb      	ldr	r3, [r7, #24]
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d1e5      	bne.n	8011b5c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8011b90:	2300      	movs	r3, #0
}
 8011b92:	4618      	mov	r0, r3
 8011b94:	3758      	adds	r7, #88	@ 0x58
 8011b96:	46bd      	mov	sp, r7
 8011b98:	bd80      	pop	{r7, pc}
 8011b9a:	bf00      	nop
 8011b9c:	08011cf9 	.word	0x08011cf9
 8011ba0:	08011e21 	.word	0x08011e21
 8011ba4:	08011e5f 	.word	0x08011e5f

08011ba8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8011ba8:	b480      	push	{r7}
 8011baa:	b08f      	sub	sp, #60	@ 0x3c
 8011bac:	af00      	add	r7, sp, #0
 8011bae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	681b      	ldr	r3, [r3, #0]
 8011bb4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011bb6:	6a3b      	ldr	r3, [r7, #32]
 8011bb8:	e853 3f00 	ldrex	r3, [r3]
 8011bbc:	61fb      	str	r3, [r7, #28]
   return(result);
 8011bbe:	69fb      	ldr	r3, [r7, #28]
 8011bc0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8011bc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	461a      	mov	r2, r3
 8011bcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011bce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011bd0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011bd2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011bd4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011bd6:	e841 2300 	strex	r3, r2, [r1]
 8011bda:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d1e6      	bne.n	8011bb0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	681b      	ldr	r3, [r3, #0]
 8011be6:	3308      	adds	r3, #8
 8011be8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	e853 3f00 	ldrex	r3, [r3]
 8011bf0:	60bb      	str	r3, [r7, #8]
   return(result);
 8011bf2:	68bb      	ldr	r3, [r7, #8]
 8011bf4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8011bf8:	633b      	str	r3, [r7, #48]	@ 0x30
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	681b      	ldr	r3, [r3, #0]
 8011bfe:	3308      	adds	r3, #8
 8011c00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011c02:	61ba      	str	r2, [r7, #24]
 8011c04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c06:	6979      	ldr	r1, [r7, #20]
 8011c08:	69ba      	ldr	r2, [r7, #24]
 8011c0a:	e841 2300 	strex	r3, r2, [r1]
 8011c0e:	613b      	str	r3, [r7, #16]
   return(result);
 8011c10:	693b      	ldr	r3, [r7, #16]
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d1e5      	bne.n	8011be2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	2220      	movs	r2, #32
 8011c1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8011c1e:	bf00      	nop
 8011c20:	373c      	adds	r7, #60	@ 0x3c
 8011c22:	46bd      	mov	sp, r7
 8011c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c28:	4770      	bx	lr
	...

08011c2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011c2c:	b480      	push	{r7}
 8011c2e:	b095      	sub	sp, #84	@ 0x54
 8011c30:	af00      	add	r7, sp, #0
 8011c32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011c3c:	e853 3f00 	ldrex	r3, [r3]
 8011c40:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8011c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011c48:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	681b      	ldr	r3, [r3, #0]
 8011c4e:	461a      	mov	r2, r3
 8011c50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011c52:	643b      	str	r3, [r7, #64]	@ 0x40
 8011c54:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c56:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011c58:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011c5a:	e841 2300 	strex	r3, r2, [r1]
 8011c5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d1e6      	bne.n	8011c34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	681b      	ldr	r3, [r3, #0]
 8011c6a:	3308      	adds	r3, #8
 8011c6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c6e:	6a3b      	ldr	r3, [r7, #32]
 8011c70:	e853 3f00 	ldrex	r3, [r3]
 8011c74:	61fb      	str	r3, [r7, #28]
   return(result);
 8011c76:	69fa      	ldr	r2, [r7, #28]
 8011c78:	4b1e      	ldr	r3, [pc, #120]	@ (8011cf4 <UART_EndRxTransfer+0xc8>)
 8011c7a:	4013      	ands	r3, r2
 8011c7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	681b      	ldr	r3, [r3, #0]
 8011c82:	3308      	adds	r3, #8
 8011c84:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011c86:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011c88:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c8a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011c8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011c8e:	e841 2300 	strex	r3, r2, [r1]
 8011c92:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d1e5      	bne.n	8011c66 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011c9e:	2b01      	cmp	r3, #1
 8011ca0:	d118      	bne.n	8011cd4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	681b      	ldr	r3, [r3, #0]
 8011ca6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ca8:	68fb      	ldr	r3, [r7, #12]
 8011caa:	e853 3f00 	ldrex	r3, [r3]
 8011cae:	60bb      	str	r3, [r7, #8]
   return(result);
 8011cb0:	68bb      	ldr	r3, [r7, #8]
 8011cb2:	f023 0310 	bic.w	r3, r3, #16
 8011cb6:	647b      	str	r3, [r7, #68]	@ 0x44
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	681b      	ldr	r3, [r3, #0]
 8011cbc:	461a      	mov	r2, r3
 8011cbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011cc0:	61bb      	str	r3, [r7, #24]
 8011cc2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011cc4:	6979      	ldr	r1, [r7, #20]
 8011cc6:	69ba      	ldr	r2, [r7, #24]
 8011cc8:	e841 2300 	strex	r3, r2, [r1]
 8011ccc:	613b      	str	r3, [r7, #16]
   return(result);
 8011cce:	693b      	ldr	r3, [r7, #16]
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d1e6      	bne.n	8011ca2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	2220      	movs	r2, #32
 8011cd8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	2200      	movs	r2, #0
 8011ce0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	2200      	movs	r2, #0
 8011ce6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8011ce8:	bf00      	nop
 8011cea:	3754      	adds	r7, #84	@ 0x54
 8011cec:	46bd      	mov	sp, r7
 8011cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cf2:	4770      	bx	lr
 8011cf4:	effffffe 	.word	0xeffffffe

08011cf8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8011cf8:	b580      	push	{r7, lr}
 8011cfa:	b09c      	sub	sp, #112	@ 0x70
 8011cfc:	af00      	add	r7, sp, #0
 8011cfe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011d04:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	69db      	ldr	r3, [r3, #28]
 8011d0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011d0e:	d071      	beq.n	8011df4 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8011d10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011d12:	2200      	movs	r2, #0
 8011d14:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011d18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011d1a:	681b      	ldr	r3, [r3, #0]
 8011d1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011d20:	e853 3f00 	ldrex	r3, [r3]
 8011d24:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8011d26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011d28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011d2c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011d2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011d30:	681b      	ldr	r3, [r3, #0]
 8011d32:	461a      	mov	r2, r3
 8011d34:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011d36:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011d38:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d3a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8011d3c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011d3e:	e841 2300 	strex	r3, r2, [r1]
 8011d42:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8011d44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	d1e6      	bne.n	8011d18 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011d4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011d4c:	681b      	ldr	r3, [r3, #0]
 8011d4e:	3308      	adds	r3, #8
 8011d50:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d54:	e853 3f00 	ldrex	r3, [r3]
 8011d58:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011d5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011d5c:	f023 0301 	bic.w	r3, r3, #1
 8011d60:	667b      	str	r3, [r7, #100]	@ 0x64
 8011d62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011d64:	681b      	ldr	r3, [r3, #0]
 8011d66:	3308      	adds	r3, #8
 8011d68:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8011d6a:	647a      	str	r2, [r7, #68]	@ 0x44
 8011d6c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d6e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011d70:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011d72:	e841 2300 	strex	r3, r2, [r1]
 8011d76:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011d78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d1e5      	bne.n	8011d4a <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011d7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011d80:	681b      	ldr	r3, [r3, #0]
 8011d82:	3308      	adds	r3, #8
 8011d84:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d88:	e853 3f00 	ldrex	r3, [r3]
 8011d8c:	623b      	str	r3, [r7, #32]
   return(result);
 8011d8e:	6a3b      	ldr	r3, [r7, #32]
 8011d90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011d94:	663b      	str	r3, [r7, #96]	@ 0x60
 8011d96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011d98:	681b      	ldr	r3, [r3, #0]
 8011d9a:	3308      	adds	r3, #8
 8011d9c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8011d9e:	633a      	str	r2, [r7, #48]	@ 0x30
 8011da0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011da2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011da4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011da6:	e841 2300 	strex	r3, r2, [r1]
 8011daa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d1e5      	bne.n	8011d7e <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8011db2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011db4:	2220      	movs	r2, #32
 8011db6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011dba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011dbc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011dbe:	2b01      	cmp	r3, #1
 8011dc0:	d118      	bne.n	8011df4 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011dc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011dc8:	693b      	ldr	r3, [r7, #16]
 8011dca:	e853 3f00 	ldrex	r3, [r3]
 8011dce:	60fb      	str	r3, [r7, #12]
   return(result);
 8011dd0:	68fb      	ldr	r3, [r7, #12]
 8011dd2:	f023 0310 	bic.w	r3, r3, #16
 8011dd6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011dd8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	461a      	mov	r2, r3
 8011dde:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011de0:	61fb      	str	r3, [r7, #28]
 8011de2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011de4:	69b9      	ldr	r1, [r7, #24]
 8011de6:	69fa      	ldr	r2, [r7, #28]
 8011de8:	e841 2300 	strex	r3, r2, [r1]
 8011dec:	617b      	str	r3, [r7, #20]
   return(result);
 8011dee:	697b      	ldr	r3, [r7, #20]
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d1e6      	bne.n	8011dc2 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011df4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011df6:	2200      	movs	r2, #0
 8011df8:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011dfa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011dfc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011dfe:	2b01      	cmp	r3, #1
 8011e00:	d107      	bne.n	8011e12 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011e02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011e04:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8011e08:	4619      	mov	r1, r3
 8011e0a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8011e0c:	f7fe fcd2 	bl	80107b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011e10:	e002      	b.n	8011e18 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8011e12:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8011e14:	f7f1 f9c0 	bl	8003198 <HAL_UART_RxCpltCallback>
}
 8011e18:	bf00      	nop
 8011e1a:	3770      	adds	r7, #112	@ 0x70
 8011e1c:	46bd      	mov	sp, r7
 8011e1e:	bd80      	pop	{r7, pc}

08011e20 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011e20:	b580      	push	{r7, lr}
 8011e22:	b084      	sub	sp, #16
 8011e24:	af00      	add	r7, sp, #0
 8011e26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011e2c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8011e2e:	68fb      	ldr	r3, [r7, #12]
 8011e30:	2201      	movs	r2, #1
 8011e32:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011e34:	68fb      	ldr	r3, [r7, #12]
 8011e36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011e38:	2b01      	cmp	r3, #1
 8011e3a:	d109      	bne.n	8011e50 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8011e3c:	68fb      	ldr	r3, [r7, #12]
 8011e3e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8011e42:	085b      	lsrs	r3, r3, #1
 8011e44:	b29b      	uxth	r3, r3
 8011e46:	4619      	mov	r1, r3
 8011e48:	68f8      	ldr	r0, [r7, #12]
 8011e4a:	f7fe fcb3 	bl	80107b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011e4e:	e002      	b.n	8011e56 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8011e50:	68f8      	ldr	r0, [r7, #12]
 8011e52:	f7fe fc91 	bl	8010778 <HAL_UART_RxHalfCpltCallback>
}
 8011e56:	bf00      	nop
 8011e58:	3710      	adds	r7, #16
 8011e5a:	46bd      	mov	sp, r7
 8011e5c:	bd80      	pop	{r7, pc}

08011e5e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8011e5e:	b580      	push	{r7, lr}
 8011e60:	b086      	sub	sp, #24
 8011e62:	af00      	add	r7, sp, #0
 8011e64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011e6a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8011e6c:	697b      	ldr	r3, [r7, #20]
 8011e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011e72:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8011e74:	697b      	ldr	r3, [r7, #20]
 8011e76:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011e7a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8011e7c:	697b      	ldr	r3, [r7, #20]
 8011e7e:	681b      	ldr	r3, [r3, #0]
 8011e80:	689b      	ldr	r3, [r3, #8]
 8011e82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011e86:	2b80      	cmp	r3, #128	@ 0x80
 8011e88:	d109      	bne.n	8011e9e <UART_DMAError+0x40>
 8011e8a:	693b      	ldr	r3, [r7, #16]
 8011e8c:	2b21      	cmp	r3, #33	@ 0x21
 8011e8e:	d106      	bne.n	8011e9e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8011e90:	697b      	ldr	r3, [r7, #20]
 8011e92:	2200      	movs	r2, #0
 8011e94:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8011e98:	6978      	ldr	r0, [r7, #20]
 8011e9a:	f7ff fe85 	bl	8011ba8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8011e9e:	697b      	ldr	r3, [r7, #20]
 8011ea0:	681b      	ldr	r3, [r3, #0]
 8011ea2:	689b      	ldr	r3, [r3, #8]
 8011ea4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011ea8:	2b40      	cmp	r3, #64	@ 0x40
 8011eaa:	d109      	bne.n	8011ec0 <UART_DMAError+0x62>
 8011eac:	68fb      	ldr	r3, [r7, #12]
 8011eae:	2b22      	cmp	r3, #34	@ 0x22
 8011eb0:	d106      	bne.n	8011ec0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8011eb2:	697b      	ldr	r3, [r7, #20]
 8011eb4:	2200      	movs	r2, #0
 8011eb6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8011eba:	6978      	ldr	r0, [r7, #20]
 8011ebc:	f7ff feb6 	bl	8011c2c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8011ec0:	697b      	ldr	r3, [r7, #20]
 8011ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011ec6:	f043 0210 	orr.w	r2, r3, #16
 8011eca:	697b      	ldr	r3, [r7, #20]
 8011ecc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011ed0:	6978      	ldr	r0, [r7, #20]
 8011ed2:	f7fe fc5b 	bl	801078c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011ed6:	bf00      	nop
 8011ed8:	3718      	adds	r7, #24
 8011eda:	46bd      	mov	sp, r7
 8011edc:	bd80      	pop	{r7, pc}

08011ede <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011ede:	b580      	push	{r7, lr}
 8011ee0:	b084      	sub	sp, #16
 8011ee2:	af00      	add	r7, sp, #0
 8011ee4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011eea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8011eec:	68fb      	ldr	r3, [r7, #12]
 8011eee:	2200      	movs	r2, #0
 8011ef0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8011ef4:	68fb      	ldr	r3, [r7, #12]
 8011ef6:	2200      	movs	r2, #0
 8011ef8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011efc:	68f8      	ldr	r0, [r7, #12]
 8011efe:	f7fe fc45 	bl	801078c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011f02:	bf00      	nop
 8011f04:	3710      	adds	r7, #16
 8011f06:	46bd      	mov	sp, r7
 8011f08:	bd80      	pop	{r7, pc}

08011f0a <UART_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8011f0a:	b580      	push	{r7, lr}
 8011f0c:	b084      	sub	sp, #16
 8011f0e:	af00      	add	r7, sp, #0
 8011f10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011f16:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8011f18:	68fb      	ldr	r3, [r7, #12]
 8011f1a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011f1c:	2200      	movs	r2, #0
 8011f1e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 8011f20:	68fb      	ldr	r3, [r7, #12]
 8011f22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d005      	beq.n	8011f36 <UART_DMATxAbortCallback+0x2c>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8011f2a:	68fb      	ldr	r3, [r7, #12]
 8011f2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011f30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d12b      	bne.n	8011f8e <UART_DMATxAbortCallback+0x84>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 8011f36:	68fb      	ldr	r3, [r7, #12]
 8011f38:	2200      	movs	r2, #0
 8011f3a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 8011f3e:	68fb      	ldr	r3, [r7, #12]
 8011f40:	2200      	movs	r2, #0
 8011f42:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011f46:	68fb      	ldr	r3, [r7, #12]
 8011f48:	2200      	movs	r2, #0
 8011f4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8011f4e:	68fb      	ldr	r3, [r7, #12]
 8011f50:	681b      	ldr	r3, [r3, #0]
 8011f52:	220f      	movs	r2, #15
 8011f54:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8011f56:	68fb      	ldr	r3, [r7, #12]
 8011f58:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011f5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011f5e:	d107      	bne.n	8011f70 <UART_DMATxAbortCallback+0x66>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8011f60:	68fb      	ldr	r3, [r7, #12]
 8011f62:	681b      	ldr	r3, [r3, #0]
 8011f64:	699a      	ldr	r2, [r3, #24]
 8011f66:	68fb      	ldr	r3, [r7, #12]
 8011f68:	681b      	ldr	r3, [r3, #0]
 8011f6a:	f042 0210 	orr.w	r2, r2, #16
 8011f6e:	619a      	str	r2, [r3, #24]
  }

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8011f70:	68fb      	ldr	r3, [r7, #12]
 8011f72:	2220      	movs	r2, #32
 8011f74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	2220      	movs	r2, #32
 8011f7c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011f80:	68fb      	ldr	r3, [r7, #12]
 8011f82:	2200      	movs	r2, #0
 8011f84:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8011f86:	68f8      	ldr	r0, [r7, #12]
 8011f88:	f7fe fc0a 	bl	80107a0 <HAL_UART_AbortCpltCallback>
 8011f8c:	e000      	b.n	8011f90 <UART_DMATxAbortCallback+0x86>
      return;
 8011f8e:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011f90:	3710      	adds	r7, #16
 8011f92:	46bd      	mov	sp, r7
 8011f94:	bd80      	pop	{r7, pc}

08011f96 <UART_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8011f96:	b580      	push	{r7, lr}
 8011f98:	b084      	sub	sp, #16
 8011f9a:	af00      	add	r7, sp, #0
 8011f9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011fa2:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8011fa4:	68fb      	ldr	r3, [r7, #12]
 8011fa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011faa:	2200      	movs	r2, #0
 8011fac:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8011fae:	68fb      	ldr	r3, [r7, #12]
 8011fb0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d004      	beq.n	8011fc0 <UART_DMARxAbortCallback+0x2a>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8011fb6:	68fb      	ldr	r3, [r7, #12]
 8011fb8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011fba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d126      	bne.n	801200e <UART_DMARxAbortCallback+0x78>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 8011fc0:	68fb      	ldr	r3, [r7, #12]
 8011fc2:	2200      	movs	r2, #0
 8011fc4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 8011fc8:	68fb      	ldr	r3, [r7, #12]
 8011fca:	2200      	movs	r2, #0
 8011fcc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011fd0:	68fb      	ldr	r3, [r7, #12]
 8011fd2:	2200      	movs	r2, #0
 8011fd4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8011fd8:	68fb      	ldr	r3, [r7, #12]
 8011fda:	681b      	ldr	r3, [r3, #0]
 8011fdc:	220f      	movs	r2, #15
 8011fde:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011fe0:	68fb      	ldr	r3, [r7, #12]
 8011fe2:	681b      	ldr	r3, [r3, #0]
 8011fe4:	699a      	ldr	r2, [r3, #24]
 8011fe6:	68fb      	ldr	r3, [r7, #12]
 8011fe8:	681b      	ldr	r3, [r3, #0]
 8011fea:	f042 0208 	orr.w	r2, r2, #8
 8011fee:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8011ff0:	68fb      	ldr	r3, [r7, #12]
 8011ff2:	2220      	movs	r2, #32
 8011ff4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011ff8:	68fb      	ldr	r3, [r7, #12]
 8011ffa:	2220      	movs	r2, #32
 8011ffc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012000:	68fb      	ldr	r3, [r7, #12]
 8012002:	2200      	movs	r2, #0
 8012004:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8012006:	68f8      	ldr	r0, [r7, #12]
 8012008:	f7fe fbca 	bl	80107a0 <HAL_UART_AbortCpltCallback>
 801200c:	e000      	b.n	8012010 <UART_DMARxAbortCallback+0x7a>
      return;
 801200e:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012010:	3710      	adds	r7, #16
 8012012:	46bd      	mov	sp, r7
 8012014:	bd80      	pop	{r7, pc}

08012016 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8012016:	b480      	push	{r7}
 8012018:	b08f      	sub	sp, #60	@ 0x3c
 801201a:	af00      	add	r7, sp, #0
 801201c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012024:	2b21      	cmp	r3, #33	@ 0x21
 8012026:	d14c      	bne.n	80120c2 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801202e:	b29b      	uxth	r3, r3
 8012030:	2b00      	cmp	r3, #0
 8012032:	d132      	bne.n	801209a <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	681b      	ldr	r3, [r3, #0]
 8012038:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801203a:	6a3b      	ldr	r3, [r7, #32]
 801203c:	e853 3f00 	ldrex	r3, [r3]
 8012040:	61fb      	str	r3, [r7, #28]
   return(result);
 8012042:	69fb      	ldr	r3, [r7, #28]
 8012044:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8012048:	637b      	str	r3, [r7, #52]	@ 0x34
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	681b      	ldr	r3, [r3, #0]
 801204e:	461a      	mov	r2, r3
 8012050:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012052:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012054:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012056:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8012058:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801205a:	e841 2300 	strex	r3, r2, [r1]
 801205e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8012060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012062:	2b00      	cmp	r3, #0
 8012064:	d1e6      	bne.n	8012034 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	681b      	ldr	r3, [r3, #0]
 801206a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801206c:	68fb      	ldr	r3, [r7, #12]
 801206e:	e853 3f00 	ldrex	r3, [r3]
 8012072:	60bb      	str	r3, [r7, #8]
   return(result);
 8012074:	68bb      	ldr	r3, [r7, #8]
 8012076:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801207a:	633b      	str	r3, [r7, #48]	@ 0x30
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	681b      	ldr	r3, [r3, #0]
 8012080:	461a      	mov	r2, r3
 8012082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012084:	61bb      	str	r3, [r7, #24]
 8012086:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012088:	6979      	ldr	r1, [r7, #20]
 801208a:	69ba      	ldr	r2, [r7, #24]
 801208c:	e841 2300 	strex	r3, r2, [r1]
 8012090:	613b      	str	r3, [r7, #16]
   return(result);
 8012092:	693b      	ldr	r3, [r7, #16]
 8012094:	2b00      	cmp	r3, #0
 8012096:	d1e6      	bne.n	8012066 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8012098:	e013      	b.n	80120c2 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801209e:	781a      	ldrb	r2, [r3, #0]
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	681b      	ldr	r3, [r3, #0]
 80120a4:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80120aa:	1c5a      	adds	r2, r3, #1
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80120b6:	b29b      	uxth	r3, r3
 80120b8:	3b01      	subs	r3, #1
 80120ba:	b29a      	uxth	r2, r3
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 80120c2:	bf00      	nop
 80120c4:	373c      	adds	r7, #60	@ 0x3c
 80120c6:	46bd      	mov	sp, r7
 80120c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120cc:	4770      	bx	lr

080120ce <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80120ce:	b480      	push	{r7}
 80120d0:	b091      	sub	sp, #68	@ 0x44
 80120d2:	af00      	add	r7, sp, #0
 80120d4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80120dc:	2b21      	cmp	r3, #33	@ 0x21
 80120de:	d151      	bne.n	8012184 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80120e6:	b29b      	uxth	r3, r3
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d132      	bne.n	8012152 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	681b      	ldr	r3, [r3, #0]
 80120f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120f4:	e853 3f00 	ldrex	r3, [r3]
 80120f8:	623b      	str	r3, [r7, #32]
   return(result);
 80120fa:	6a3b      	ldr	r3, [r7, #32]
 80120fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8012100:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	681b      	ldr	r3, [r3, #0]
 8012106:	461a      	mov	r2, r3
 8012108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801210a:	633b      	str	r3, [r7, #48]	@ 0x30
 801210c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801210e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012110:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012112:	e841 2300 	strex	r3, r2, [r1]
 8012116:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8012118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801211a:	2b00      	cmp	r3, #0
 801211c:	d1e6      	bne.n	80120ec <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	681b      	ldr	r3, [r3, #0]
 8012122:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012124:	693b      	ldr	r3, [r7, #16]
 8012126:	e853 3f00 	ldrex	r3, [r3]
 801212a:	60fb      	str	r3, [r7, #12]
   return(result);
 801212c:	68fb      	ldr	r3, [r7, #12]
 801212e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012132:	637b      	str	r3, [r7, #52]	@ 0x34
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	681b      	ldr	r3, [r3, #0]
 8012138:	461a      	mov	r2, r3
 801213a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801213c:	61fb      	str	r3, [r7, #28]
 801213e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012140:	69b9      	ldr	r1, [r7, #24]
 8012142:	69fa      	ldr	r2, [r7, #28]
 8012144:	e841 2300 	strex	r3, r2, [r1]
 8012148:	617b      	str	r3, [r7, #20]
   return(result);
 801214a:	697b      	ldr	r3, [r7, #20]
 801214c:	2b00      	cmp	r3, #0
 801214e:	d1e6      	bne.n	801211e <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8012150:	e018      	b.n	8012184 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012156:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8012158:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801215a:	881b      	ldrh	r3, [r3, #0]
 801215c:	461a      	mov	r2, r3
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	681b      	ldr	r3, [r3, #0]
 8012162:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8012166:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801216c:	1c9a      	adds	r2, r3, #2
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8012178:	b29b      	uxth	r3, r3
 801217a:	3b01      	subs	r3, #1
 801217c:	b29a      	uxth	r2, r3
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8012184:	bf00      	nop
 8012186:	3744      	adds	r7, #68	@ 0x44
 8012188:	46bd      	mov	sp, r7
 801218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801218e:	4770      	bx	lr

08012190 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8012190:	b480      	push	{r7}
 8012192:	b091      	sub	sp, #68	@ 0x44
 8012194:	af00      	add	r7, sp, #0
 8012196:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801219e:	2b21      	cmp	r3, #33	@ 0x21
 80121a0:	d160      	bne.n	8012264 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80121a8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80121aa:	e057      	b.n	801225c <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80121b2:	b29b      	uxth	r3, r3
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d133      	bne.n	8012220 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	681b      	ldr	r3, [r3, #0]
 80121bc:	3308      	adds	r3, #8
 80121be:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80121c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121c2:	e853 3f00 	ldrex	r3, [r3]
 80121c6:	623b      	str	r3, [r7, #32]
   return(result);
 80121c8:	6a3b      	ldr	r3, [r7, #32]
 80121ca:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80121ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	681b      	ldr	r3, [r3, #0]
 80121d4:	3308      	adds	r3, #8
 80121d6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80121d8:	633a      	str	r2, [r7, #48]	@ 0x30
 80121da:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80121dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80121de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80121e0:	e841 2300 	strex	r3, r2, [r1]
 80121e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80121e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d1e5      	bne.n	80121b8 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	681b      	ldr	r3, [r3, #0]
 80121f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80121f2:	693b      	ldr	r3, [r7, #16]
 80121f4:	e853 3f00 	ldrex	r3, [r3]
 80121f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80121fa:	68fb      	ldr	r3, [r7, #12]
 80121fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012200:	637b      	str	r3, [r7, #52]	@ 0x34
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	681b      	ldr	r3, [r3, #0]
 8012206:	461a      	mov	r2, r3
 8012208:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801220a:	61fb      	str	r3, [r7, #28]
 801220c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801220e:	69b9      	ldr	r1, [r7, #24]
 8012210:	69fa      	ldr	r2, [r7, #28]
 8012212:	e841 2300 	strex	r3, r2, [r1]
 8012216:	617b      	str	r3, [r7, #20]
   return(result);
 8012218:	697b      	ldr	r3, [r7, #20]
 801221a:	2b00      	cmp	r3, #0
 801221c:	d1e6      	bne.n	80121ec <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 801221e:	e021      	b.n	8012264 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	681b      	ldr	r3, [r3, #0]
 8012224:	69db      	ldr	r3, [r3, #28]
 8012226:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801222a:	2b00      	cmp	r3, #0
 801222c:	d013      	beq.n	8012256 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012232:	781a      	ldrb	r2, [r3, #0]
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	681b      	ldr	r3, [r3, #0]
 8012238:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801223e:	1c5a      	adds	r2, r3, #1
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801224a:	b29b      	uxth	r3, r3
 801224c:	3b01      	subs	r3, #1
 801224e:	b29a      	uxth	r2, r3
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8012256:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012258:	3b01      	subs	r3, #1
 801225a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 801225c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801225e:	2b00      	cmp	r3, #0
 8012260:	d1a4      	bne.n	80121ac <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8012262:	e7ff      	b.n	8012264 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8012264:	bf00      	nop
 8012266:	3744      	adds	r7, #68	@ 0x44
 8012268:	46bd      	mov	sp, r7
 801226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801226e:	4770      	bx	lr

08012270 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8012270:	b480      	push	{r7}
 8012272:	b091      	sub	sp, #68	@ 0x44
 8012274:	af00      	add	r7, sp, #0
 8012276:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801227e:	2b21      	cmp	r3, #33	@ 0x21
 8012280:	d165      	bne.n	801234e <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8012288:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 801228a:	e05c      	b.n	8012346 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8012292:	b29b      	uxth	r3, r3
 8012294:	2b00      	cmp	r3, #0
 8012296:	d133      	bne.n	8012300 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	3308      	adds	r3, #8
 801229e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122a0:	6a3b      	ldr	r3, [r7, #32]
 80122a2:	e853 3f00 	ldrex	r3, [r3]
 80122a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80122a8:	69fb      	ldr	r3, [r7, #28]
 80122aa:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80122ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	681b      	ldr	r3, [r3, #0]
 80122b4:	3308      	adds	r3, #8
 80122b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80122b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80122ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80122be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80122c0:	e841 2300 	strex	r3, r2, [r1]
 80122c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80122c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	d1e5      	bne.n	8012298 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122d2:	68fb      	ldr	r3, [r7, #12]
 80122d4:	e853 3f00 	ldrex	r3, [r3]
 80122d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80122da:	68bb      	ldr	r3, [r7, #8]
 80122dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80122e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	681b      	ldr	r3, [r3, #0]
 80122e6:	461a      	mov	r2, r3
 80122e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122ea:	61bb      	str	r3, [r7, #24]
 80122ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122ee:	6979      	ldr	r1, [r7, #20]
 80122f0:	69ba      	ldr	r2, [r7, #24]
 80122f2:	e841 2300 	strex	r3, r2, [r1]
 80122f6:	613b      	str	r3, [r7, #16]
   return(result);
 80122f8:	693b      	ldr	r3, [r7, #16]
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d1e6      	bne.n	80122cc <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80122fe:	e026      	b.n	801234e <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	681b      	ldr	r3, [r3, #0]
 8012304:	69db      	ldr	r3, [r3, #28]
 8012306:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801230a:	2b00      	cmp	r3, #0
 801230c:	d018      	beq.n	8012340 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012312:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8012314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012316:	881b      	ldrh	r3, [r3, #0]
 8012318:	461a      	mov	r2, r3
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	681b      	ldr	r3, [r3, #0]
 801231e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8012322:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012328:	1c9a      	adds	r2, r3, #2
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8012334:	b29b      	uxth	r3, r3
 8012336:	3b01      	subs	r3, #1
 8012338:	b29a      	uxth	r2, r3
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8012340:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012342:	3b01      	subs	r3, #1
 8012344:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8012346:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012348:	2b00      	cmp	r3, #0
 801234a:	d19f      	bne.n	801228c <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 801234c:	e7ff      	b.n	801234e <UART_TxISR_16BIT_FIFOEN+0xde>
 801234e:	bf00      	nop
 8012350:	3744      	adds	r7, #68	@ 0x44
 8012352:	46bd      	mov	sp, r7
 8012354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012358:	4770      	bx	lr

0801235a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801235a:	b580      	push	{r7, lr}
 801235c:	b088      	sub	sp, #32
 801235e:	af00      	add	r7, sp, #0
 8012360:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	681b      	ldr	r3, [r3, #0]
 8012366:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012368:	68fb      	ldr	r3, [r7, #12]
 801236a:	e853 3f00 	ldrex	r3, [r3]
 801236e:	60bb      	str	r3, [r7, #8]
   return(result);
 8012370:	68bb      	ldr	r3, [r7, #8]
 8012372:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012376:	61fb      	str	r3, [r7, #28]
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	461a      	mov	r2, r3
 801237e:	69fb      	ldr	r3, [r7, #28]
 8012380:	61bb      	str	r3, [r7, #24]
 8012382:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012384:	6979      	ldr	r1, [r7, #20]
 8012386:	69ba      	ldr	r2, [r7, #24]
 8012388:	e841 2300 	strex	r3, r2, [r1]
 801238c:	613b      	str	r3, [r7, #16]
   return(result);
 801238e:	693b      	ldr	r3, [r7, #16]
 8012390:	2b00      	cmp	r3, #0
 8012392:	d1e6      	bne.n	8012362 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	2220      	movs	r2, #32
 8012398:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	2200      	movs	r2, #0
 80123a0:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80123a2:	6878      	ldr	r0, [r7, #4]
 80123a4:	f7fe f9de 	bl	8010764 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80123a8:	bf00      	nop
 80123aa:	3720      	adds	r7, #32
 80123ac:	46bd      	mov	sp, r7
 80123ae:	bd80      	pop	{r7, pc}

080123b0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80123b0:	b580      	push	{r7, lr}
 80123b2:	b09c      	sub	sp, #112	@ 0x70
 80123b4:	af00      	add	r7, sp, #0
 80123b6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80123be:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80123c8:	2b22      	cmp	r3, #34	@ 0x22
 80123ca:	f040 80be 	bne.w	801254a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	681b      	ldr	r3, [r3, #0]
 80123d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80123d4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80123d8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80123dc:	b2d9      	uxtb	r1, r3
 80123de:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80123e2:	b2da      	uxtb	r2, r3
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80123e8:	400a      	ands	r2, r1
 80123ea:	b2d2      	uxtb	r2, r2
 80123ec:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80123f2:	1c5a      	adds	r2, r3, #1
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80123fe:	b29b      	uxth	r3, r3
 8012400:	3b01      	subs	r3, #1
 8012402:	b29a      	uxth	r2, r3
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8012410:	b29b      	uxth	r3, r3
 8012412:	2b00      	cmp	r3, #0
 8012414:	f040 80a1 	bne.w	801255a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	681b      	ldr	r3, [r3, #0]
 801241c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801241e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012420:	e853 3f00 	ldrex	r3, [r3]
 8012424:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8012426:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012428:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801242c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	681b      	ldr	r3, [r3, #0]
 8012432:	461a      	mov	r2, r3
 8012434:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012436:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012438:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801243a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801243c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801243e:	e841 2300 	strex	r3, r2, [r1]
 8012442:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8012444:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012446:	2b00      	cmp	r3, #0
 8012448:	d1e6      	bne.n	8012418 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	681b      	ldr	r3, [r3, #0]
 801244e:	3308      	adds	r3, #8
 8012450:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012454:	e853 3f00 	ldrex	r3, [r3]
 8012458:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801245a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801245c:	f023 0301 	bic.w	r3, r3, #1
 8012460:	667b      	str	r3, [r7, #100]	@ 0x64
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	681b      	ldr	r3, [r3, #0]
 8012466:	3308      	adds	r3, #8
 8012468:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801246a:	647a      	str	r2, [r7, #68]	@ 0x44
 801246c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801246e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8012470:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012472:	e841 2300 	strex	r3, r2, [r1]
 8012476:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8012478:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801247a:	2b00      	cmp	r3, #0
 801247c:	d1e5      	bne.n	801244a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	2220      	movs	r2, #32
 8012482:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	2200      	movs	r2, #0
 801248a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	2200      	movs	r2, #0
 8012490:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	681b      	ldr	r3, [r3, #0]
 8012496:	4a33      	ldr	r2, [pc, #204]	@ (8012564 <UART_RxISR_8BIT+0x1b4>)
 8012498:	4293      	cmp	r3, r2
 801249a:	d01f      	beq.n	80124dc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	681b      	ldr	r3, [r3, #0]
 80124a0:	685b      	ldr	r3, [r3, #4]
 80124a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	d018      	beq.n	80124dc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	681b      	ldr	r3, [r3, #0]
 80124ae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80124b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80124b2:	e853 3f00 	ldrex	r3, [r3]
 80124b6:	623b      	str	r3, [r7, #32]
   return(result);
 80124b8:	6a3b      	ldr	r3, [r7, #32]
 80124ba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80124be:	663b      	str	r3, [r7, #96]	@ 0x60
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	681b      	ldr	r3, [r3, #0]
 80124c4:	461a      	mov	r2, r3
 80124c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80124c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80124ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80124cc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80124ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80124d0:	e841 2300 	strex	r3, r2, [r1]
 80124d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80124d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d1e6      	bne.n	80124aa <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80124e0:	2b01      	cmp	r3, #1
 80124e2:	d12e      	bne.n	8012542 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	2200      	movs	r2, #0
 80124e8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	681b      	ldr	r3, [r3, #0]
 80124ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80124f0:	693b      	ldr	r3, [r7, #16]
 80124f2:	e853 3f00 	ldrex	r3, [r3]
 80124f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80124f8:	68fb      	ldr	r3, [r7, #12]
 80124fa:	f023 0310 	bic.w	r3, r3, #16
 80124fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	681b      	ldr	r3, [r3, #0]
 8012504:	461a      	mov	r2, r3
 8012506:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012508:	61fb      	str	r3, [r7, #28]
 801250a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801250c:	69b9      	ldr	r1, [r7, #24]
 801250e:	69fa      	ldr	r2, [r7, #28]
 8012510:	e841 2300 	strex	r3, r2, [r1]
 8012514:	617b      	str	r3, [r7, #20]
   return(result);
 8012516:	697b      	ldr	r3, [r7, #20]
 8012518:	2b00      	cmp	r3, #0
 801251a:	d1e6      	bne.n	80124ea <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	69db      	ldr	r3, [r3, #28]
 8012522:	f003 0310 	and.w	r3, r3, #16
 8012526:	2b10      	cmp	r3, #16
 8012528:	d103      	bne.n	8012532 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	681b      	ldr	r3, [r3, #0]
 801252e:	2210      	movs	r2, #16
 8012530:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8012538:	4619      	mov	r1, r3
 801253a:	6878      	ldr	r0, [r7, #4]
 801253c:	f7fe f93a 	bl	80107b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012540:	e00b      	b.n	801255a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8012542:	6878      	ldr	r0, [r7, #4]
 8012544:	f7f0 fe28 	bl	8003198 <HAL_UART_RxCpltCallback>
}
 8012548:	e007      	b.n	801255a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	681b      	ldr	r3, [r3, #0]
 801254e:	699a      	ldr	r2, [r3, #24]
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	681b      	ldr	r3, [r3, #0]
 8012554:	f042 0208 	orr.w	r2, r2, #8
 8012558:	619a      	str	r2, [r3, #24]
}
 801255a:	bf00      	nop
 801255c:	3770      	adds	r7, #112	@ 0x70
 801255e:	46bd      	mov	sp, r7
 8012560:	bd80      	pop	{r7, pc}
 8012562:	bf00      	nop
 8012564:	58000c00 	.word	0x58000c00

08012568 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8012568:	b580      	push	{r7, lr}
 801256a:	b09c      	sub	sp, #112	@ 0x70
 801256c:	af00      	add	r7, sp, #0
 801256e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012576:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8012580:	2b22      	cmp	r3, #34	@ 0x22
 8012582:	f040 80be 	bne.w	8012702 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	681b      	ldr	r3, [r3, #0]
 801258a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801258c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012594:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8012596:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 801259a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 801259e:	4013      	ands	r3, r2
 80125a0:	b29a      	uxth	r2, r3
 80125a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80125a4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80125aa:	1c9a      	adds	r2, r3, #2
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80125b6:	b29b      	uxth	r3, r3
 80125b8:	3b01      	subs	r3, #1
 80125ba:	b29a      	uxth	r2, r3
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80125c8:	b29b      	uxth	r3, r3
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	f040 80a1 	bne.w	8012712 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	681b      	ldr	r3, [r3, #0]
 80125d4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80125d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80125d8:	e853 3f00 	ldrex	r3, [r3]
 80125dc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80125de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80125e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80125e4:	667b      	str	r3, [r7, #100]	@ 0x64
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	681b      	ldr	r3, [r3, #0]
 80125ea:	461a      	mov	r2, r3
 80125ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80125ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80125f0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80125f2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80125f4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80125f6:	e841 2300 	strex	r3, r2, [r1]
 80125fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80125fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80125fe:	2b00      	cmp	r3, #0
 8012600:	d1e6      	bne.n	80125d0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	681b      	ldr	r3, [r3, #0]
 8012606:	3308      	adds	r3, #8
 8012608:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801260a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801260c:	e853 3f00 	ldrex	r3, [r3]
 8012610:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8012612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012614:	f023 0301 	bic.w	r3, r3, #1
 8012618:	663b      	str	r3, [r7, #96]	@ 0x60
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	681b      	ldr	r3, [r3, #0]
 801261e:	3308      	adds	r3, #8
 8012620:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8012622:	643a      	str	r2, [r7, #64]	@ 0x40
 8012624:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012626:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8012628:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801262a:	e841 2300 	strex	r3, r2, [r1]
 801262e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8012630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012632:	2b00      	cmp	r3, #0
 8012634:	d1e5      	bne.n	8012602 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	2220      	movs	r2, #32
 801263a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	2200      	movs	r2, #0
 8012642:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	2200      	movs	r2, #0
 8012648:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	681b      	ldr	r3, [r3, #0]
 801264e:	4a33      	ldr	r2, [pc, #204]	@ (801271c <UART_RxISR_16BIT+0x1b4>)
 8012650:	4293      	cmp	r3, r2
 8012652:	d01f      	beq.n	8012694 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	681b      	ldr	r3, [r3, #0]
 8012658:	685b      	ldr	r3, [r3, #4]
 801265a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801265e:	2b00      	cmp	r3, #0
 8012660:	d018      	beq.n	8012694 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	681b      	ldr	r3, [r3, #0]
 8012666:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012668:	6a3b      	ldr	r3, [r7, #32]
 801266a:	e853 3f00 	ldrex	r3, [r3]
 801266e:	61fb      	str	r3, [r7, #28]
   return(result);
 8012670:	69fb      	ldr	r3, [r7, #28]
 8012672:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8012676:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	681b      	ldr	r3, [r3, #0]
 801267c:	461a      	mov	r2, r3
 801267e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012680:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012682:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012684:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8012686:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012688:	e841 2300 	strex	r3, r2, [r1]
 801268c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801268e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012690:	2b00      	cmp	r3, #0
 8012692:	d1e6      	bne.n	8012662 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012698:	2b01      	cmp	r3, #1
 801269a:	d12e      	bne.n	80126fa <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	2200      	movs	r2, #0
 80126a0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	681b      	ldr	r3, [r3, #0]
 80126a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80126a8:	68fb      	ldr	r3, [r7, #12]
 80126aa:	e853 3f00 	ldrex	r3, [r3]
 80126ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80126b0:	68bb      	ldr	r3, [r7, #8]
 80126b2:	f023 0310 	bic.w	r3, r3, #16
 80126b6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	681b      	ldr	r3, [r3, #0]
 80126bc:	461a      	mov	r2, r3
 80126be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80126c0:	61bb      	str	r3, [r7, #24]
 80126c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80126c4:	6979      	ldr	r1, [r7, #20]
 80126c6:	69ba      	ldr	r2, [r7, #24]
 80126c8:	e841 2300 	strex	r3, r2, [r1]
 80126cc:	613b      	str	r3, [r7, #16]
   return(result);
 80126ce:	693b      	ldr	r3, [r7, #16]
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d1e6      	bne.n	80126a2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	681b      	ldr	r3, [r3, #0]
 80126d8:	69db      	ldr	r3, [r3, #28]
 80126da:	f003 0310 	and.w	r3, r3, #16
 80126de:	2b10      	cmp	r3, #16
 80126e0:	d103      	bne.n	80126ea <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	681b      	ldr	r3, [r3, #0]
 80126e6:	2210      	movs	r2, #16
 80126e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80126f0:	4619      	mov	r1, r3
 80126f2:	6878      	ldr	r0, [r7, #4]
 80126f4:	f7fe f85e 	bl	80107b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80126f8:	e00b      	b.n	8012712 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80126fa:	6878      	ldr	r0, [r7, #4]
 80126fc:	f7f0 fd4c 	bl	8003198 <HAL_UART_RxCpltCallback>
}
 8012700:	e007      	b.n	8012712 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	681b      	ldr	r3, [r3, #0]
 8012706:	699a      	ldr	r2, [r3, #24]
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	681b      	ldr	r3, [r3, #0]
 801270c:	f042 0208 	orr.w	r2, r2, #8
 8012710:	619a      	str	r2, [r3, #24]
}
 8012712:	bf00      	nop
 8012714:	3770      	adds	r7, #112	@ 0x70
 8012716:	46bd      	mov	sp, r7
 8012718:	bd80      	pop	{r7, pc}
 801271a:	bf00      	nop
 801271c:	58000c00 	.word	0x58000c00

08012720 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8012720:	b580      	push	{r7, lr}
 8012722:	b0ac      	sub	sp, #176	@ 0xb0
 8012724:	af00      	add	r7, sp, #0
 8012726:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801272e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	69db      	ldr	r3, [r3, #28]
 8012738:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	681b      	ldr	r3, [r3, #0]
 8012740:	681b      	ldr	r3, [r3, #0]
 8012742:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	681b      	ldr	r3, [r3, #0]
 801274a:	689b      	ldr	r3, [r3, #8]
 801274c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8012756:	2b22      	cmp	r3, #34	@ 0x22
 8012758:	f040 8180 	bne.w	8012a5c <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8012762:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012766:	e123      	b.n	80129b0 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	681b      	ldr	r3, [r3, #0]
 801276c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801276e:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8012772:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8012776:	b2d9      	uxtb	r1, r3
 8012778:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 801277c:	b2da      	uxtb	r2, r3
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012782:	400a      	ands	r2, r1
 8012784:	b2d2      	uxtb	r2, r2
 8012786:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801278c:	1c5a      	adds	r2, r3, #1
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8012798:	b29b      	uxth	r3, r3
 801279a:	3b01      	subs	r3, #1
 801279c:	b29a      	uxth	r2, r3
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	681b      	ldr	r3, [r3, #0]
 80127a8:	69db      	ldr	r3, [r3, #28]
 80127aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80127ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80127b2:	f003 0307 	and.w	r3, r3, #7
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d053      	beq.n	8012862 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80127ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80127be:	f003 0301 	and.w	r3, r3, #1
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d011      	beq.n	80127ea <UART_RxISR_8BIT_FIFOEN+0xca>
 80127c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80127ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d00b      	beq.n	80127ea <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	681b      	ldr	r3, [r3, #0]
 80127d6:	2201      	movs	r2, #1
 80127d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80127e0:	f043 0201 	orr.w	r2, r3, #1
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80127ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80127ee:	f003 0302 	and.w	r3, r3, #2
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	d011      	beq.n	801281a <UART_RxISR_8BIT_FIFOEN+0xfa>
 80127f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80127fa:	f003 0301 	and.w	r3, r3, #1
 80127fe:	2b00      	cmp	r3, #0
 8012800:	d00b      	beq.n	801281a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	681b      	ldr	r3, [r3, #0]
 8012806:	2202      	movs	r2, #2
 8012808:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012810:	f043 0204 	orr.w	r2, r3, #4
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801281a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801281e:	f003 0304 	and.w	r3, r3, #4
 8012822:	2b00      	cmp	r3, #0
 8012824:	d011      	beq.n	801284a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8012826:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801282a:	f003 0301 	and.w	r3, r3, #1
 801282e:	2b00      	cmp	r3, #0
 8012830:	d00b      	beq.n	801284a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	681b      	ldr	r3, [r3, #0]
 8012836:	2204      	movs	r2, #4
 8012838:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012840:	f043 0202 	orr.w	r2, r3, #2
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012850:	2b00      	cmp	r3, #0
 8012852:	d006      	beq.n	8012862 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012854:	6878      	ldr	r0, [r7, #4]
 8012856:	f7fd ff99 	bl	801078c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	2200      	movs	r2, #0
 801285e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8012868:	b29b      	uxth	r3, r3
 801286a:	2b00      	cmp	r3, #0
 801286c:	f040 80a0 	bne.w	80129b0 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	681b      	ldr	r3, [r3, #0]
 8012874:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012876:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012878:	e853 3f00 	ldrex	r3, [r3]
 801287c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 801287e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012880:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8012884:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	681b      	ldr	r3, [r3, #0]
 801288c:	461a      	mov	r2, r3
 801288e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8012892:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8012894:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012896:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8012898:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801289a:	e841 2300 	strex	r3, r2, [r1]
 801289e:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 80128a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	d1e4      	bne.n	8012870 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	681b      	ldr	r3, [r3, #0]
 80128aa:	3308      	adds	r3, #8
 80128ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80128ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80128b0:	e853 3f00 	ldrex	r3, [r3]
 80128b4:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80128b6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80128b8:	4b6e      	ldr	r3, [pc, #440]	@ (8012a74 <UART_RxISR_8BIT_FIFOEN+0x354>)
 80128ba:	4013      	ands	r3, r2
 80128bc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	681b      	ldr	r3, [r3, #0]
 80128c4:	3308      	adds	r3, #8
 80128c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80128ca:	66ba      	str	r2, [r7, #104]	@ 0x68
 80128cc:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80128ce:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80128d0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80128d2:	e841 2300 	strex	r3, r2, [r1]
 80128d6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80128d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d1e3      	bne.n	80128a6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	2220      	movs	r2, #32
 80128e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	2200      	movs	r2, #0
 80128ea:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	2200      	movs	r2, #0
 80128f0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	681b      	ldr	r3, [r3, #0]
 80128f6:	4a60      	ldr	r2, [pc, #384]	@ (8012a78 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80128f8:	4293      	cmp	r3, r2
 80128fa:	d021      	beq.n	8012940 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	681b      	ldr	r3, [r3, #0]
 8012900:	685b      	ldr	r3, [r3, #4]
 8012902:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8012906:	2b00      	cmp	r3, #0
 8012908:	d01a      	beq.n	8012940 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	681b      	ldr	r3, [r3, #0]
 801290e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012910:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012912:	e853 3f00 	ldrex	r3, [r3]
 8012916:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8012918:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801291a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801291e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	681b      	ldr	r3, [r3, #0]
 8012926:	461a      	mov	r2, r3
 8012928:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801292c:	657b      	str	r3, [r7, #84]	@ 0x54
 801292e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012930:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8012932:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8012934:	e841 2300 	strex	r3, r2, [r1]
 8012938:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 801293a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801293c:	2b00      	cmp	r3, #0
 801293e:	d1e4      	bne.n	801290a <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012944:	2b01      	cmp	r3, #1
 8012946:	d130      	bne.n	80129aa <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	2200      	movs	r2, #0
 801294c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	681b      	ldr	r3, [r3, #0]
 8012952:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012954:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012956:	e853 3f00 	ldrex	r3, [r3]
 801295a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801295c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801295e:	f023 0310 	bic.w	r3, r3, #16
 8012962:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	681b      	ldr	r3, [r3, #0]
 801296a:	461a      	mov	r2, r3
 801296c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012970:	643b      	str	r3, [r7, #64]	@ 0x40
 8012972:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012974:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8012976:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8012978:	e841 2300 	strex	r3, r2, [r1]
 801297c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801297e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012980:	2b00      	cmp	r3, #0
 8012982:	d1e4      	bne.n	801294e <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	681b      	ldr	r3, [r3, #0]
 8012988:	69db      	ldr	r3, [r3, #28]
 801298a:	f003 0310 	and.w	r3, r3, #16
 801298e:	2b10      	cmp	r3, #16
 8012990:	d103      	bne.n	801299a <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	681b      	ldr	r3, [r3, #0]
 8012996:	2210      	movs	r2, #16
 8012998:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80129a0:	4619      	mov	r1, r3
 80129a2:	6878      	ldr	r0, [r7, #4]
 80129a4:	f7fd ff06 	bl	80107b4 <HAL_UARTEx_RxEventCallback>
 80129a8:	e002      	b.n	80129b0 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80129aa:	6878      	ldr	r0, [r7, #4]
 80129ac:	f7f0 fbf4 	bl	8003198 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80129b0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d006      	beq.n	80129c6 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 80129b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80129bc:	f003 0320 	and.w	r3, r3, #32
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	f47f aed1 	bne.w	8012768 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80129cc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80129d0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d049      	beq.n	8012a6c <UART_RxISR_8BIT_FIFOEN+0x34c>
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80129de:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 80129e2:	429a      	cmp	r2, r3
 80129e4:	d242      	bcs.n	8012a6c <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	681b      	ldr	r3, [r3, #0]
 80129ea:	3308      	adds	r3, #8
 80129ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80129ee:	6a3b      	ldr	r3, [r7, #32]
 80129f0:	e853 3f00 	ldrex	r3, [r3]
 80129f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80129f6:	69fb      	ldr	r3, [r7, #28]
 80129f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80129fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	681b      	ldr	r3, [r3, #0]
 8012a04:	3308      	adds	r3, #8
 8012a06:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8012a0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8012a0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a0e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8012a10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012a12:	e841 2300 	strex	r3, r2, [r1]
 8012a16:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8012a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d1e3      	bne.n	80129e6 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	4a16      	ldr	r2, [pc, #88]	@ (8012a7c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8012a22:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	681b      	ldr	r3, [r3, #0]
 8012a28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a2a:	68fb      	ldr	r3, [r7, #12]
 8012a2c:	e853 3f00 	ldrex	r3, [r3]
 8012a30:	60bb      	str	r3, [r7, #8]
   return(result);
 8012a32:	68bb      	ldr	r3, [r7, #8]
 8012a34:	f043 0320 	orr.w	r3, r3, #32
 8012a38:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	681b      	ldr	r3, [r3, #0]
 8012a40:	461a      	mov	r2, r3
 8012a42:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8012a46:	61bb      	str	r3, [r7, #24]
 8012a48:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a4a:	6979      	ldr	r1, [r7, #20]
 8012a4c:	69ba      	ldr	r2, [r7, #24]
 8012a4e:	e841 2300 	strex	r3, r2, [r1]
 8012a52:	613b      	str	r3, [r7, #16]
   return(result);
 8012a54:	693b      	ldr	r3, [r7, #16]
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	d1e4      	bne.n	8012a24 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012a5a:	e007      	b.n	8012a6c <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	681b      	ldr	r3, [r3, #0]
 8012a60:	699a      	ldr	r2, [r3, #24]
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	681b      	ldr	r3, [r3, #0]
 8012a66:	f042 0208 	orr.w	r2, r2, #8
 8012a6a:	619a      	str	r2, [r3, #24]
}
 8012a6c:	bf00      	nop
 8012a6e:	37b0      	adds	r7, #176	@ 0xb0
 8012a70:	46bd      	mov	sp, r7
 8012a72:	bd80      	pop	{r7, pc}
 8012a74:	effffffe 	.word	0xeffffffe
 8012a78:	58000c00 	.word	0x58000c00
 8012a7c:	080123b1 	.word	0x080123b1

08012a80 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8012a80:	b580      	push	{r7, lr}
 8012a82:	b0ae      	sub	sp, #184	@ 0xb8
 8012a84:	af00      	add	r7, sp, #0
 8012a86:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012a8e:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	681b      	ldr	r3, [r3, #0]
 8012a96:	69db      	ldr	r3, [r3, #28]
 8012a98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	681b      	ldr	r3, [r3, #0]
 8012aa0:	681b      	ldr	r3, [r3, #0]
 8012aa2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	681b      	ldr	r3, [r3, #0]
 8012aaa:	689b      	ldr	r3, [r3, #8]
 8012aac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8012ab6:	2b22      	cmp	r3, #34	@ 0x22
 8012ab8:	f040 8184 	bne.w	8012dc4 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8012ac2:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012ac6:	e127      	b.n	8012d18 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	681b      	ldr	r3, [r3, #0]
 8012acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012ace:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012ad6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8012ada:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8012ade:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8012ae2:	4013      	ands	r3, r2
 8012ae4:	b29a      	uxth	r2, r3
 8012ae6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012aea:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012af0:	1c9a      	adds	r2, r3, #2
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8012afc:	b29b      	uxth	r3, r3
 8012afe:	3b01      	subs	r3, #1
 8012b00:	b29a      	uxth	r2, r3
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	681b      	ldr	r3, [r3, #0]
 8012b0c:	69db      	ldr	r3, [r3, #28]
 8012b0e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8012b12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8012b16:	f003 0307 	and.w	r3, r3, #7
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d053      	beq.n	8012bc6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012b1e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8012b22:	f003 0301 	and.w	r3, r3, #1
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d011      	beq.n	8012b4e <UART_RxISR_16BIT_FIFOEN+0xce>
 8012b2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012b2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d00b      	beq.n	8012b4e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	681b      	ldr	r3, [r3, #0]
 8012b3a:	2201      	movs	r2, #1
 8012b3c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012b44:	f043 0201 	orr.w	r2, r3, #1
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012b4e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8012b52:	f003 0302 	and.w	r3, r3, #2
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	d011      	beq.n	8012b7e <UART_RxISR_16BIT_FIFOEN+0xfe>
 8012b5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8012b5e:	f003 0301 	and.w	r3, r3, #1
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	d00b      	beq.n	8012b7e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	681b      	ldr	r3, [r3, #0]
 8012b6a:	2202      	movs	r2, #2
 8012b6c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012b74:	f043 0204 	orr.w	r2, r3, #4
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012b7e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8012b82:	f003 0304 	and.w	r3, r3, #4
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d011      	beq.n	8012bae <UART_RxISR_16BIT_FIFOEN+0x12e>
 8012b8a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8012b8e:	f003 0301 	and.w	r3, r3, #1
 8012b92:	2b00      	cmp	r3, #0
 8012b94:	d00b      	beq.n	8012bae <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	681b      	ldr	r3, [r3, #0]
 8012b9a:	2204      	movs	r2, #4
 8012b9c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012ba4:	f043 0202 	orr.w	r2, r3, #2
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	d006      	beq.n	8012bc6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012bb8:	6878      	ldr	r0, [r7, #4]
 8012bba:	f7fd fde7 	bl	801078c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	2200      	movs	r2, #0
 8012bc2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8012bcc:	b29b      	uxth	r3, r3
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	f040 80a2 	bne.w	8012d18 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	681b      	ldr	r3, [r3, #0]
 8012bd8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012bda:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012bdc:	e853 3f00 	ldrex	r3, [r3]
 8012be0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8012be2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012be4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8012be8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	681b      	ldr	r3, [r3, #0]
 8012bf0:	461a      	mov	r2, r3
 8012bf2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8012bf6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8012bfa:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012bfc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8012bfe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8012c02:	e841 2300 	strex	r3, r2, [r1]
 8012c06:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8012c08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	d1e2      	bne.n	8012bd4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	681b      	ldr	r3, [r3, #0]
 8012c12:	3308      	adds	r3, #8
 8012c14:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012c16:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012c18:	e853 3f00 	ldrex	r3, [r3]
 8012c1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8012c1e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8012c20:	4b6e      	ldr	r3, [pc, #440]	@ (8012ddc <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8012c22:	4013      	ands	r3, r2
 8012c24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	681b      	ldr	r3, [r3, #0]
 8012c2c:	3308      	adds	r3, #8
 8012c2e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8012c32:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8012c34:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012c36:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8012c38:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8012c3a:	e841 2300 	strex	r3, r2, [r1]
 8012c3e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8012c40:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d1e3      	bne.n	8012c0e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	2220      	movs	r2, #32
 8012c4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	2200      	movs	r2, #0
 8012c52:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	2200      	movs	r2, #0
 8012c58:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	681b      	ldr	r3, [r3, #0]
 8012c5e:	4a60      	ldr	r2, [pc, #384]	@ (8012de0 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8012c60:	4293      	cmp	r3, r2
 8012c62:	d021      	beq.n	8012ca8 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	681b      	ldr	r3, [r3, #0]
 8012c68:	685b      	ldr	r3, [r3, #4]
 8012c6a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d01a      	beq.n	8012ca8 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	681b      	ldr	r3, [r3, #0]
 8012c76:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012c78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012c7a:	e853 3f00 	ldrex	r3, [r3]
 8012c7e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8012c80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012c82:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8012c86:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	681b      	ldr	r3, [r3, #0]
 8012c8e:	461a      	mov	r2, r3
 8012c90:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8012c94:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012c96:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012c98:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8012c9a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8012c9c:	e841 2300 	strex	r3, r2, [r1]
 8012ca0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8012ca2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	d1e4      	bne.n	8012c72 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012cac:	2b01      	cmp	r3, #1
 8012cae:	d130      	bne.n	8012d12 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	2200      	movs	r2, #0
 8012cb4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	681b      	ldr	r3, [r3, #0]
 8012cba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012cbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012cbe:	e853 3f00 	ldrex	r3, [r3]
 8012cc2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8012cc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012cc6:	f023 0310 	bic.w	r3, r3, #16
 8012cca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	681b      	ldr	r3, [r3, #0]
 8012cd2:	461a      	mov	r2, r3
 8012cd4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8012cd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8012cda:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012cdc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8012cde:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012ce0:	e841 2300 	strex	r3, r2, [r1]
 8012ce4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8012ce6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	d1e4      	bne.n	8012cb6 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	681b      	ldr	r3, [r3, #0]
 8012cf0:	69db      	ldr	r3, [r3, #28]
 8012cf2:	f003 0310 	and.w	r3, r3, #16
 8012cf6:	2b10      	cmp	r3, #16
 8012cf8:	d103      	bne.n	8012d02 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	681b      	ldr	r3, [r3, #0]
 8012cfe:	2210      	movs	r2, #16
 8012d00:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8012d08:	4619      	mov	r1, r3
 8012d0a:	6878      	ldr	r0, [r7, #4]
 8012d0c:	f7fd fd52 	bl	80107b4 <HAL_UARTEx_RxEventCallback>
 8012d10:	e002      	b.n	8012d18 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8012d12:	6878      	ldr	r0, [r7, #4]
 8012d14:	f7f0 fa40 	bl	8003198 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012d18:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	d006      	beq.n	8012d2e <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8012d20:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8012d24:	f003 0320 	and.w	r3, r3, #32
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	f47f aecd 	bne.w	8012ac8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8012d34:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8012d38:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d049      	beq.n	8012dd4 <UART_RxISR_16BIT_FIFOEN+0x354>
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8012d46:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8012d4a:	429a      	cmp	r2, r3
 8012d4c:	d242      	bcs.n	8012dd4 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	681b      	ldr	r3, [r3, #0]
 8012d52:	3308      	adds	r3, #8
 8012d54:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d58:	e853 3f00 	ldrex	r3, [r3]
 8012d5c:	623b      	str	r3, [r7, #32]
   return(result);
 8012d5e:	6a3b      	ldr	r3, [r7, #32]
 8012d60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8012d64:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	681b      	ldr	r3, [r3, #0]
 8012d6c:	3308      	adds	r3, #8
 8012d6e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8012d72:	633a      	str	r2, [r7, #48]	@ 0x30
 8012d74:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012d76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012d78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012d7a:	e841 2300 	strex	r3, r2, [r1]
 8012d7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8012d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	d1e3      	bne.n	8012d4e <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	4a16      	ldr	r2, [pc, #88]	@ (8012de4 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8012d8a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	681b      	ldr	r3, [r3, #0]
 8012d90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012d92:	693b      	ldr	r3, [r7, #16]
 8012d94:	e853 3f00 	ldrex	r3, [r3]
 8012d98:	60fb      	str	r3, [r7, #12]
   return(result);
 8012d9a:	68fb      	ldr	r3, [r7, #12]
 8012d9c:	f043 0320 	orr.w	r3, r3, #32
 8012da0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	681b      	ldr	r3, [r3, #0]
 8012da8:	461a      	mov	r2, r3
 8012daa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8012dae:	61fb      	str	r3, [r7, #28]
 8012db0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012db2:	69b9      	ldr	r1, [r7, #24]
 8012db4:	69fa      	ldr	r2, [r7, #28]
 8012db6:	e841 2300 	strex	r3, r2, [r1]
 8012dba:	617b      	str	r3, [r7, #20]
   return(result);
 8012dbc:	697b      	ldr	r3, [r7, #20]
 8012dbe:	2b00      	cmp	r3, #0
 8012dc0:	d1e4      	bne.n	8012d8c <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012dc2:	e007      	b.n	8012dd4 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	681b      	ldr	r3, [r3, #0]
 8012dc8:	699a      	ldr	r2, [r3, #24]
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	681b      	ldr	r3, [r3, #0]
 8012dce:	f042 0208 	orr.w	r2, r2, #8
 8012dd2:	619a      	str	r2, [r3, #24]
}
 8012dd4:	bf00      	nop
 8012dd6:	37b8      	adds	r7, #184	@ 0xb8
 8012dd8:	46bd      	mov	sp, r7
 8012dda:	bd80      	pop	{r7, pc}
 8012ddc:	effffffe 	.word	0xeffffffe
 8012de0:	58000c00 	.word	0x58000c00
 8012de4:	08012569 	.word	0x08012569

08012de8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8012de8:	b480      	push	{r7}
 8012dea:	b083      	sub	sp, #12
 8012dec:	af00      	add	r7, sp, #0
 8012dee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8012df0:	bf00      	nop
 8012df2:	370c      	adds	r7, #12
 8012df4:	46bd      	mov	sp, r7
 8012df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dfa:	4770      	bx	lr

08012dfc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8012dfc:	b480      	push	{r7}
 8012dfe:	b083      	sub	sp, #12
 8012e00:	af00      	add	r7, sp, #0
 8012e02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8012e04:	bf00      	nop
 8012e06:	370c      	adds	r7, #12
 8012e08:	46bd      	mov	sp, r7
 8012e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e0e:	4770      	bx	lr

08012e10 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8012e10:	b480      	push	{r7}
 8012e12:	b083      	sub	sp, #12
 8012e14:	af00      	add	r7, sp, #0
 8012e16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8012e18:	bf00      	nop
 8012e1a:	370c      	adds	r7, #12
 8012e1c:	46bd      	mov	sp, r7
 8012e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e22:	4770      	bx	lr

08012e24 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8012e24:	b480      	push	{r7}
 8012e26:	b085      	sub	sp, #20
 8012e28:	af00      	add	r7, sp, #0
 8012e2a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8012e32:	2b01      	cmp	r3, #1
 8012e34:	d101      	bne.n	8012e3a <HAL_UARTEx_DisableFifoMode+0x16>
 8012e36:	2302      	movs	r3, #2
 8012e38:	e027      	b.n	8012e8a <HAL_UARTEx_DisableFifoMode+0x66>
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	2201      	movs	r2, #1
 8012e3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	2224      	movs	r2, #36	@ 0x24
 8012e46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	681b      	ldr	r3, [r3, #0]
 8012e4e:	681b      	ldr	r3, [r3, #0]
 8012e50:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	681b      	ldr	r3, [r3, #0]
 8012e56:	681a      	ldr	r2, [r3, #0]
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	681b      	ldr	r3, [r3, #0]
 8012e5c:	f022 0201 	bic.w	r2, r2, #1
 8012e60:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012e62:	68fb      	ldr	r3, [r7, #12]
 8012e64:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8012e68:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	2200      	movs	r2, #0
 8012e6e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	681b      	ldr	r3, [r3, #0]
 8012e74:	68fa      	ldr	r2, [r7, #12]
 8012e76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	2220      	movs	r2, #32
 8012e7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	2200      	movs	r2, #0
 8012e84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8012e88:	2300      	movs	r3, #0
}
 8012e8a:	4618      	mov	r0, r3
 8012e8c:	3714      	adds	r7, #20
 8012e8e:	46bd      	mov	sp, r7
 8012e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e94:	4770      	bx	lr

08012e96 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012e96:	b580      	push	{r7, lr}
 8012e98:	b084      	sub	sp, #16
 8012e9a:	af00      	add	r7, sp, #0
 8012e9c:	6078      	str	r0, [r7, #4]
 8012e9e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8012ea6:	2b01      	cmp	r3, #1
 8012ea8:	d101      	bne.n	8012eae <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8012eaa:	2302      	movs	r3, #2
 8012eac:	e02d      	b.n	8012f0a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	2201      	movs	r2, #1
 8012eb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	2224      	movs	r2, #36	@ 0x24
 8012eba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	681b      	ldr	r3, [r3, #0]
 8012ec2:	681b      	ldr	r3, [r3, #0]
 8012ec4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	681b      	ldr	r3, [r3, #0]
 8012eca:	681a      	ldr	r2, [r3, #0]
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	681b      	ldr	r3, [r3, #0]
 8012ed0:	f022 0201 	bic.w	r2, r2, #1
 8012ed4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	681b      	ldr	r3, [r3, #0]
 8012eda:	689b      	ldr	r3, [r3, #8]
 8012edc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	681b      	ldr	r3, [r3, #0]
 8012ee4:	683a      	ldr	r2, [r7, #0]
 8012ee6:	430a      	orrs	r2, r1
 8012ee8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012eea:	6878      	ldr	r0, [r7, #4]
 8012eec:	f000 f850 	bl	8012f90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	681b      	ldr	r3, [r3, #0]
 8012ef4:	68fa      	ldr	r2, [r7, #12]
 8012ef6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	2220      	movs	r2, #32
 8012efc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	2200      	movs	r2, #0
 8012f04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8012f08:	2300      	movs	r3, #0
}
 8012f0a:	4618      	mov	r0, r3
 8012f0c:	3710      	adds	r7, #16
 8012f0e:	46bd      	mov	sp, r7
 8012f10:	bd80      	pop	{r7, pc}

08012f12 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012f12:	b580      	push	{r7, lr}
 8012f14:	b084      	sub	sp, #16
 8012f16:	af00      	add	r7, sp, #0
 8012f18:	6078      	str	r0, [r7, #4]
 8012f1a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8012f22:	2b01      	cmp	r3, #1
 8012f24:	d101      	bne.n	8012f2a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8012f26:	2302      	movs	r3, #2
 8012f28:	e02d      	b.n	8012f86 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	2201      	movs	r2, #1
 8012f2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	2224      	movs	r2, #36	@ 0x24
 8012f36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	681b      	ldr	r3, [r3, #0]
 8012f3e:	681b      	ldr	r3, [r3, #0]
 8012f40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	681b      	ldr	r3, [r3, #0]
 8012f46:	681a      	ldr	r2, [r3, #0]
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	681b      	ldr	r3, [r3, #0]
 8012f4c:	f022 0201 	bic.w	r2, r2, #1
 8012f50:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	681b      	ldr	r3, [r3, #0]
 8012f56:	689b      	ldr	r3, [r3, #8]
 8012f58:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	681b      	ldr	r3, [r3, #0]
 8012f60:	683a      	ldr	r2, [r7, #0]
 8012f62:	430a      	orrs	r2, r1
 8012f64:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012f66:	6878      	ldr	r0, [r7, #4]
 8012f68:	f000 f812 	bl	8012f90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	681b      	ldr	r3, [r3, #0]
 8012f70:	68fa      	ldr	r2, [r7, #12]
 8012f72:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	2220      	movs	r2, #32
 8012f78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	2200      	movs	r2, #0
 8012f80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8012f84:	2300      	movs	r3, #0
}
 8012f86:	4618      	mov	r0, r3
 8012f88:	3710      	adds	r7, #16
 8012f8a:	46bd      	mov	sp, r7
 8012f8c:	bd80      	pop	{r7, pc}
	...

08012f90 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8012f90:	b480      	push	{r7}
 8012f92:	b085      	sub	sp, #20
 8012f94:	af00      	add	r7, sp, #0
 8012f96:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	d108      	bne.n	8012fb2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	2201      	movs	r2, #1
 8012fa4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	2201      	movs	r2, #1
 8012fac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8012fb0:	e031      	b.n	8013016 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8012fb2:	2310      	movs	r3, #16
 8012fb4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8012fb6:	2310      	movs	r3, #16
 8012fb8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	681b      	ldr	r3, [r3, #0]
 8012fbe:	689b      	ldr	r3, [r3, #8]
 8012fc0:	0e5b      	lsrs	r3, r3, #25
 8012fc2:	b2db      	uxtb	r3, r3
 8012fc4:	f003 0307 	and.w	r3, r3, #7
 8012fc8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	681b      	ldr	r3, [r3, #0]
 8012fce:	689b      	ldr	r3, [r3, #8]
 8012fd0:	0f5b      	lsrs	r3, r3, #29
 8012fd2:	b2db      	uxtb	r3, r3
 8012fd4:	f003 0307 	and.w	r3, r3, #7
 8012fd8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012fda:	7bbb      	ldrb	r3, [r7, #14]
 8012fdc:	7b3a      	ldrb	r2, [r7, #12]
 8012fde:	4911      	ldr	r1, [pc, #68]	@ (8013024 <UARTEx_SetNbDataToProcess+0x94>)
 8012fe0:	5c8a      	ldrb	r2, [r1, r2]
 8012fe2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8012fe6:	7b3a      	ldrb	r2, [r7, #12]
 8012fe8:	490f      	ldr	r1, [pc, #60]	@ (8013028 <UARTEx_SetNbDataToProcess+0x98>)
 8012fea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012fec:	fb93 f3f2 	sdiv	r3, r3, r2
 8012ff0:	b29a      	uxth	r2, r3
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012ff8:	7bfb      	ldrb	r3, [r7, #15]
 8012ffa:	7b7a      	ldrb	r2, [r7, #13]
 8012ffc:	4909      	ldr	r1, [pc, #36]	@ (8013024 <UARTEx_SetNbDataToProcess+0x94>)
 8012ffe:	5c8a      	ldrb	r2, [r1, r2]
 8013000:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8013004:	7b7a      	ldrb	r2, [r7, #13]
 8013006:	4908      	ldr	r1, [pc, #32]	@ (8013028 <UARTEx_SetNbDataToProcess+0x98>)
 8013008:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801300a:	fb93 f3f2 	sdiv	r3, r3, r2
 801300e:	b29a      	uxth	r2, r3
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8013016:	bf00      	nop
 8013018:	3714      	adds	r7, #20
 801301a:	46bd      	mov	sp, r7
 801301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013020:	4770      	bx	lr
 8013022:	bf00      	nop
 8013024:	08019ef4 	.word	0x08019ef4
 8013028:	08019efc 	.word	0x08019efc

0801302c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 801302c:	b580      	push	{r7, lr}
 801302e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8013030:	4904      	ldr	r1, [pc, #16]	@ (8013044 <MX_FATFS_Init+0x18>)
 8013032:	4805      	ldr	r0, [pc, #20]	@ (8013048 <MX_FATFS_Init+0x1c>)
 8013034:	f001 fcd0 	bl	80149d8 <FATFS_LinkDriver>
 8013038:	4603      	mov	r3, r0
 801303a:	461a      	mov	r2, r3
 801303c:	4b03      	ldr	r3, [pc, #12]	@ (801304c <MX_FATFS_Init+0x20>)
 801303e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8013040:	bf00      	nop
 8013042:	bd80      	pop	{r7, pc}
 8013044:	24002ac0 	.word	0x24002ac0
 8013048:	240000ac 	.word	0x240000ac
 801304c:	24002abc 	.word	0x24002abc

08013050 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8013050:	b480      	push	{r7}
 8013052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8013054:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8013056:	4618      	mov	r0, r3
 8013058:	46bd      	mov	sp, r7
 801305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801305e:	4770      	bx	lr

08013060 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8013060:	b580      	push	{r7, lr}
 8013062:	b082      	sub	sp, #8
 8013064:	af00      	add	r7, sp, #0
 8013066:	4603      	mov	r3, r0
 8013068:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 801306a:	79fb      	ldrb	r3, [r7, #7]
 801306c:	4618      	mov	r0, r3
 801306e:	f000 f9fd 	bl	801346c <SD_disk_initialize>
 8013072:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8013074:	4618      	mov	r0, r3
 8013076:	3708      	adds	r7, #8
 8013078:	46bd      	mov	sp, r7
 801307a:	bd80      	pop	{r7, pc}

0801307c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 801307c:	b580      	push	{r7, lr}
 801307e:	b082      	sub	sp, #8
 8013080:	af00      	add	r7, sp, #0
 8013082:	4603      	mov	r3, r0
 8013084:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8013086:	79fb      	ldrb	r3, [r7, #7]
 8013088:	4618      	mov	r0, r3
 801308a:	f000 fad5 	bl	8013638 <SD_disk_status>
 801308e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8013090:	4618      	mov	r0, r3
 8013092:	3708      	adds	r7, #8
 8013094:	46bd      	mov	sp, r7
 8013096:	bd80      	pop	{r7, pc}

08013098 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8013098:	b580      	push	{r7, lr}
 801309a:	b084      	sub	sp, #16
 801309c:	af00      	add	r7, sp, #0
 801309e:	60b9      	str	r1, [r7, #8]
 80130a0:	607a      	str	r2, [r7, #4]
 80130a2:	603b      	str	r3, [r7, #0]
 80130a4:	4603      	mov	r3, r0
 80130a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 80130a8:	7bf8      	ldrb	r0, [r7, #15]
 80130aa:	683b      	ldr	r3, [r7, #0]
 80130ac:	687a      	ldr	r2, [r7, #4]
 80130ae:	68b9      	ldr	r1, [r7, #8]
 80130b0:	f000 fad8 	bl	8013664 <SD_disk_read>
 80130b4:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80130b6:	4618      	mov	r0, r3
 80130b8:	3710      	adds	r7, #16
 80130ba:	46bd      	mov	sp, r7
 80130bc:	bd80      	pop	{r7, pc}

080130be <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80130be:	b580      	push	{r7, lr}
 80130c0:	b084      	sub	sp, #16
 80130c2:	af00      	add	r7, sp, #0
 80130c4:	60b9      	str	r1, [r7, #8]
 80130c6:	607a      	str	r2, [r7, #4]
 80130c8:	603b      	str	r3, [r7, #0]
 80130ca:	4603      	mov	r3, r0
 80130cc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 80130ce:	7bf8      	ldrb	r0, [r7, #15]
 80130d0:	683b      	ldr	r3, [r7, #0]
 80130d2:	687a      	ldr	r2, [r7, #4]
 80130d4:	68b9      	ldr	r1, [r7, #8]
 80130d6:	f000 fb2f 	bl	8013738 <SD_disk_write>
 80130da:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80130dc:	4618      	mov	r0, r3
 80130de:	3710      	adds	r7, #16
 80130e0:	46bd      	mov	sp, r7
 80130e2:	bd80      	pop	{r7, pc}

080130e4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80130e4:	b580      	push	{r7, lr}
 80130e6:	b082      	sub	sp, #8
 80130e8:	af00      	add	r7, sp, #0
 80130ea:	4603      	mov	r3, r0
 80130ec:	603a      	str	r2, [r7, #0]
 80130ee:	71fb      	strb	r3, [r7, #7]
 80130f0:	460b      	mov	r3, r1
 80130f2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 80130f4:	79b9      	ldrb	r1, [r7, #6]
 80130f6:	79fb      	ldrb	r3, [r7, #7]
 80130f8:	683a      	ldr	r2, [r7, #0]
 80130fa:	4618      	mov	r0, r3
 80130fc:	f000 fba0 	bl	8013840 <SD_disk_ioctl>
 8013100:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8013102:	4618      	mov	r0, r3
 8013104:	3708      	adds	r7, #8
 8013106:	46bd      	mov	sp, r7
 8013108:	bd80      	pop	{r7, pc}
	...

0801310c <SELECT>:

//-----[ SPI Functions ]-----

/* slave select */
static void SELECT(void)
{
 801310c:	b580      	push	{r7, lr}
 801310e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8013110:	2200      	movs	r2, #0
 8013112:	2110      	movs	r1, #16
 8013114:	4802      	ldr	r0, [pc, #8]	@ (8013120 <SELECT+0x14>)
 8013116:	f7f7 f9b9 	bl	800a48c <HAL_GPIO_WritePin>
}
 801311a:	bf00      	nop
 801311c:	bd80      	pop	{r7, pc}
 801311e:	bf00      	nop
 8013120:	58020000 	.word	0x58020000

08013124 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8013124:	b580      	push	{r7, lr}
 8013126:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8013128:	2201      	movs	r2, #1
 801312a:	2110      	movs	r1, #16
 801312c:	4802      	ldr	r0, [pc, #8]	@ (8013138 <DESELECT+0x14>)
 801312e:	f7f7 f9ad 	bl	800a48c <HAL_GPIO_WritePin>
}
 8013132:	bf00      	nop
 8013134:	bd80      	pop	{r7, pc}
 8013136:	bf00      	nop
 8013138:	58020000 	.word	0x58020000

0801313c <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 801313c:	b580      	push	{r7, lr}
 801313e:	b082      	sub	sp, #8
 8013140:	af00      	add	r7, sp, #0
 8013142:	4603      	mov	r3, r0
 8013144:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8013146:	bf00      	nop
 8013148:	4b08      	ldr	r3, [pc, #32]	@ (801316c <SPI_TxByte+0x30>)
 801314a:	681b      	ldr	r3, [r3, #0]
 801314c:	695b      	ldr	r3, [r3, #20]
 801314e:	f003 0302 	and.w	r3, r3, #2
 8013152:	2b02      	cmp	r3, #2
 8013154:	d1f8      	bne.n	8013148 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8013156:	1df9      	adds	r1, r7, #7
 8013158:	2364      	movs	r3, #100	@ 0x64
 801315a:	2201      	movs	r2, #1
 801315c:	4803      	ldr	r0, [pc, #12]	@ (801316c <SPI_TxByte+0x30>)
 801315e:	f7fa fa21 	bl	800d5a4 <HAL_SPI_Transmit>
}
 8013162:	bf00      	nop
 8013164:	3708      	adds	r7, #8
 8013166:	46bd      	mov	sp, r7
 8013168:	bd80      	pop	{r7, pc}
 801316a:	bf00      	nop
 801316c:	24000efc 	.word	0x24000efc

08013170 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8013170:	b580      	push	{r7, lr}
 8013172:	b082      	sub	sp, #8
 8013174:	af00      	add	r7, sp, #0
 8013176:	6078      	str	r0, [r7, #4]
 8013178:	460b      	mov	r3, r1
 801317a:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 801317c:	bf00      	nop
 801317e:	4b08      	ldr	r3, [pc, #32]	@ (80131a0 <SPI_TxBuffer+0x30>)
 8013180:	681b      	ldr	r3, [r3, #0]
 8013182:	695b      	ldr	r3, [r3, #20]
 8013184:	f003 0302 	and.w	r3, r3, #2
 8013188:	2b02      	cmp	r3, #2
 801318a:	d1f8      	bne.n	801317e <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 801318c:	887a      	ldrh	r2, [r7, #2]
 801318e:	2364      	movs	r3, #100	@ 0x64
 8013190:	6879      	ldr	r1, [r7, #4]
 8013192:	4803      	ldr	r0, [pc, #12]	@ (80131a0 <SPI_TxBuffer+0x30>)
 8013194:	f7fa fa06 	bl	800d5a4 <HAL_SPI_Transmit>
}
 8013198:	bf00      	nop
 801319a:	3708      	adds	r7, #8
 801319c:	46bd      	mov	sp, r7
 801319e:	bd80      	pop	{r7, pc}
 80131a0:	24000efc 	.word	0x24000efc

080131a4 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80131a4:	b580      	push	{r7, lr}
 80131a6:	b084      	sub	sp, #16
 80131a8:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80131aa:	23ff      	movs	r3, #255	@ 0xff
 80131ac:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80131ae:	bf00      	nop
 80131b0:	4b09      	ldr	r3, [pc, #36]	@ (80131d8 <SPI_RxByte+0x34>)
 80131b2:	681b      	ldr	r3, [r3, #0]
 80131b4:	695b      	ldr	r3, [r3, #20]
 80131b6:	f003 0302 	and.w	r3, r3, #2
 80131ba:	2b02      	cmp	r3, #2
 80131bc:	d1f8      	bne.n	80131b0 <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80131be:	1dba      	adds	r2, r7, #6
 80131c0:	1df9      	adds	r1, r7, #7
 80131c2:	2364      	movs	r3, #100	@ 0x64
 80131c4:	9300      	str	r3, [sp, #0]
 80131c6:	2301      	movs	r3, #1
 80131c8:	4803      	ldr	r0, [pc, #12]	@ (80131d8 <SPI_RxByte+0x34>)
 80131ca:	f7fa fe4b 	bl	800de64 <HAL_SPI_TransmitReceive>
  return data;
 80131ce:	79bb      	ldrb	r3, [r7, #6]
}
 80131d0:	4618      	mov	r0, r3
 80131d2:	3708      	adds	r7, #8
 80131d4:	46bd      	mov	sp, r7
 80131d6:	bd80      	pop	{r7, pc}
 80131d8:	24000efc 	.word	0x24000efc

080131dc <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 80131dc:	b580      	push	{r7, lr}
 80131de:	b082      	sub	sp, #8
 80131e0:	af00      	add	r7, sp, #0
 80131e2:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 80131e4:	f7ff ffde 	bl	80131a4 <SPI_RxByte>
 80131e8:	4603      	mov	r3, r0
 80131ea:	461a      	mov	r2, r3
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	701a      	strb	r2, [r3, #0]
}
 80131f0:	bf00      	nop
 80131f2:	3708      	adds	r7, #8
 80131f4:	46bd      	mov	sp, r7
 80131f6:	bd80      	pop	{r7, pc}

080131f8 <SD_ReadyWait>:

//-----[ SD Card Functions ]-----

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80131f8:	b580      	push	{r7, lr}
 80131fa:	b082      	sub	sp, #8
 80131fc:	af00      	add	r7, sp, #0
  uint8_t res;
  /* timeout 500ms */
  Timer2 = 500;
 80131fe:	4b0a      	ldr	r3, [pc, #40]	@ (8013228 <SD_ReadyWait+0x30>)
 8013200:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8013204:	801a      	strh	r2, [r3, #0]
  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 8013206:	f7ff ffcd 	bl	80131a4 <SPI_RxByte>
 801320a:	4603      	mov	r3, r0
 801320c:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 801320e:	79fb      	ldrb	r3, [r7, #7]
 8013210:	2bff      	cmp	r3, #255	@ 0xff
 8013212:	d003      	beq.n	801321c <SD_ReadyWait+0x24>
 8013214:	4b04      	ldr	r3, [pc, #16]	@ (8013228 <SD_ReadyWait+0x30>)
 8013216:	881b      	ldrh	r3, [r3, #0]
 8013218:	2b00      	cmp	r3, #0
 801321a:	d1f4      	bne.n	8013206 <SD_ReadyWait+0xe>
  return res;
 801321c:	79fb      	ldrb	r3, [r7, #7]
}
 801321e:	4618      	mov	r0, r3
 8013220:	3708      	adds	r7, #8
 8013222:	46bd      	mov	sp, r7
 8013224:	bd80      	pop	{r7, pc}
 8013226:	bf00      	nop
 8013228:	24002ac6 	.word	0x24002ac6

0801322c <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 801322c:	b580      	push	{r7, lr}
 801322e:	b084      	sub	sp, #16
 8013230:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 8013232:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8013236:	60fb      	str	r3, [r7, #12]
  /* transmit bytes to wake up */
  DESELECT();
 8013238:	f7ff ff74 	bl	8013124 <DESELECT>
  for(int i = 0; i < 10; i++)
 801323c:	2300      	movs	r3, #0
 801323e:	60bb      	str	r3, [r7, #8]
 8013240:	e005      	b.n	801324e <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8013242:	20ff      	movs	r0, #255	@ 0xff
 8013244:	f7ff ff7a 	bl	801313c <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8013248:	68bb      	ldr	r3, [r7, #8]
 801324a:	3301      	adds	r3, #1
 801324c:	60bb      	str	r3, [r7, #8]
 801324e:	68bb      	ldr	r3, [r7, #8]
 8013250:	2b09      	cmp	r3, #9
 8013252:	ddf6      	ble.n	8013242 <SD_PowerOn+0x16>
  }
  /* slave select */
  SELECT();
 8013254:	f7ff ff5a 	bl	801310c <SELECT>
  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 8013258:	2340      	movs	r3, #64	@ 0x40
 801325a:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 801325c:	2300      	movs	r3, #0
 801325e:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 8013260:	2300      	movs	r3, #0
 8013262:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 8013264:	2300      	movs	r3, #0
 8013266:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 8013268:	2300      	movs	r3, #0
 801326a:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;
 801326c:	2395      	movs	r3, #149	@ 0x95
 801326e:	717b      	strb	r3, [r7, #5]
  SPI_TxBuffer(args, sizeof(args));
 8013270:	463b      	mov	r3, r7
 8013272:	2106      	movs	r1, #6
 8013274:	4618      	mov	r0, r3
 8013276:	f7ff ff7b 	bl	8013170 <SPI_TxBuffer>
  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 801327a:	e002      	b.n	8013282 <SD_PowerOn+0x56>
  {
    cnt--;
 801327c:	68fb      	ldr	r3, [r7, #12]
 801327e:	3b01      	subs	r3, #1
 8013280:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 8013282:	f7ff ff8f 	bl	80131a4 <SPI_RxByte>
 8013286:	4603      	mov	r3, r0
 8013288:	2b01      	cmp	r3, #1
 801328a:	d002      	beq.n	8013292 <SD_PowerOn+0x66>
 801328c:	68fb      	ldr	r3, [r7, #12]
 801328e:	2b00      	cmp	r3, #0
 8013290:	d1f4      	bne.n	801327c <SD_PowerOn+0x50>
  }
  DESELECT();
 8013292:	f7ff ff47 	bl	8013124 <DESELECT>
  SPI_TxByte(0XFF);
 8013296:	20ff      	movs	r0, #255	@ 0xff
 8013298:	f7ff ff50 	bl	801313c <SPI_TxByte>
  PowerFlag = 1;
 801329c:	4b03      	ldr	r3, [pc, #12]	@ (80132ac <SD_PowerOn+0x80>)
 801329e:	2201      	movs	r2, #1
 80132a0:	701a      	strb	r2, [r3, #0]
}
 80132a2:	bf00      	nop
 80132a4:	3710      	adds	r7, #16
 80132a6:	46bd      	mov	sp, r7
 80132a8:	bd80      	pop	{r7, pc}
 80132aa:	bf00      	nop
 80132ac:	24002ac9 	.word	0x24002ac9

080132b0 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 80132b0:	b480      	push	{r7}
 80132b2:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 80132b4:	4b03      	ldr	r3, [pc, #12]	@ (80132c4 <SD_PowerOff+0x14>)
 80132b6:	2200      	movs	r2, #0
 80132b8:	701a      	strb	r2, [r3, #0]
}
 80132ba:	bf00      	nop
 80132bc:	46bd      	mov	sp, r7
 80132be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132c2:	4770      	bx	lr
 80132c4:	24002ac9 	.word	0x24002ac9

080132c8 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 80132c8:	b480      	push	{r7}
 80132ca:	af00      	add	r7, sp, #0
  return PowerFlag;
 80132cc:	4b03      	ldr	r3, [pc, #12]	@ (80132dc <SD_CheckPower+0x14>)
 80132ce:	781b      	ldrb	r3, [r3, #0]
}
 80132d0:	4618      	mov	r0, r3
 80132d2:	46bd      	mov	sp, r7
 80132d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132d8:	4770      	bx	lr
 80132da:	bf00      	nop
 80132dc:	24002ac9 	.word	0x24002ac9

080132e0 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80132e0:	b580      	push	{r7, lr}
 80132e2:	b084      	sub	sp, #16
 80132e4:	af00      	add	r7, sp, #0
 80132e6:	6078      	str	r0, [r7, #4]
 80132e8:	6039      	str	r1, [r7, #0]
  uint8_t token;
  /* timeout 200ms */
  Timer1 = 200;
 80132ea:	4b13      	ldr	r3, [pc, #76]	@ (8013338 <SD_RxDataBlock+0x58>)
 80132ec:	22c8      	movs	r2, #200	@ 0xc8
 80132ee:	801a      	strh	r2, [r3, #0]
  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 80132f0:	f7ff ff58 	bl	80131a4 <SPI_RxByte>
 80132f4:	4603      	mov	r3, r0
 80132f6:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 80132f8:	7bfb      	ldrb	r3, [r7, #15]
 80132fa:	2bff      	cmp	r3, #255	@ 0xff
 80132fc:	d103      	bne.n	8013306 <SD_RxDataBlock+0x26>
 80132fe:	4b0e      	ldr	r3, [pc, #56]	@ (8013338 <SD_RxDataBlock+0x58>)
 8013300:	881b      	ldrh	r3, [r3, #0]
 8013302:	2b00      	cmp	r3, #0
 8013304:	d1f4      	bne.n	80132f0 <SD_RxDataBlock+0x10>
  /* invalid response */
  if(token != 0xFE) return FALSE;
 8013306:	7bfb      	ldrb	r3, [r7, #15]
 8013308:	2bfe      	cmp	r3, #254	@ 0xfe
 801330a:	d001      	beq.n	8013310 <SD_RxDataBlock+0x30>
 801330c:	2300      	movs	r3, #0
 801330e:	e00f      	b.n	8013330 <SD_RxDataBlock+0x50>
  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	1c5a      	adds	r2, r3, #1
 8013314:	607a      	str	r2, [r7, #4]
 8013316:	4618      	mov	r0, r3
 8013318:	f7ff ff60 	bl	80131dc <SPI_RxBytePtr>
  } while(len--);
 801331c:	683b      	ldr	r3, [r7, #0]
 801331e:	1e5a      	subs	r2, r3, #1
 8013320:	603a      	str	r2, [r7, #0]
 8013322:	2b00      	cmp	r3, #0
 8013324:	d1f4      	bne.n	8013310 <SD_RxDataBlock+0x30>
  /* discard CRC */
  SPI_RxByte();
 8013326:	f7ff ff3d 	bl	80131a4 <SPI_RxByte>
  SPI_RxByte();
 801332a:	f7ff ff3b 	bl	80131a4 <SPI_RxByte>
  return TRUE;
 801332e:	2301      	movs	r3, #1
}
 8013330:	4618      	mov	r0, r3
 8013332:	3710      	adds	r7, #16
 8013334:	46bd      	mov	sp, r7
 8013336:	bd80      	pop	{r7, pc}
 8013338:	24002ac4 	.word	0x24002ac4

0801333c <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 801333c:	b580      	push	{r7, lr}
 801333e:	b084      	sub	sp, #16
 8013340:	af00      	add	r7, sp, #0
 8013342:	6078      	str	r0, [r7, #4]
 8013344:	460b      	mov	r3, r1
 8013346:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 8013348:	2300      	movs	r3, #0
 801334a:	73bb      	strb	r3, [r7, #14]
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 801334c:	f7ff ff54 	bl	80131f8 <SD_ReadyWait>
 8013350:	4603      	mov	r3, r0
 8013352:	2bff      	cmp	r3, #255	@ 0xff
 8013354:	d001      	beq.n	801335a <SD_TxDataBlock+0x1e>
 8013356:	2300      	movs	r3, #0
 8013358:	e02f      	b.n	80133ba <SD_TxDataBlock+0x7e>
  /* transmit token */
  SPI_TxByte(token);
 801335a:	78fb      	ldrb	r3, [r7, #3]
 801335c:	4618      	mov	r0, r3
 801335e:	f7ff feed 	bl	801313c <SPI_TxByte>
  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 8013362:	78fb      	ldrb	r3, [r7, #3]
 8013364:	2bfd      	cmp	r3, #253	@ 0xfd
 8013366:	d020      	beq.n	80133aa <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 8013368:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801336c:	6878      	ldr	r0, [r7, #4]
 801336e:	f7ff feff 	bl	8013170 <SPI_TxBuffer>
    /* discard CRC */
    SPI_RxByte();
 8013372:	f7ff ff17 	bl	80131a4 <SPI_RxByte>
    SPI_RxByte();
 8013376:	f7ff ff15 	bl	80131a4 <SPI_RxByte>
    /* receive response */
    while (i <= 64)
 801337a:	e00b      	b.n	8013394 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 801337c:	f7ff ff12 	bl	80131a4 <SPI_RxByte>
 8013380:	4603      	mov	r3, r0
 8013382:	73fb      	strb	r3, [r7, #15]
      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 8013384:	7bfb      	ldrb	r3, [r7, #15]
 8013386:	f003 031f 	and.w	r3, r3, #31
 801338a:	2b05      	cmp	r3, #5
 801338c:	d006      	beq.n	801339c <SD_TxDataBlock+0x60>
      i++;
 801338e:	7bbb      	ldrb	r3, [r7, #14]
 8013390:	3301      	adds	r3, #1
 8013392:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 8013394:	7bbb      	ldrb	r3, [r7, #14]
 8013396:	2b40      	cmp	r3, #64	@ 0x40
 8013398:	d9f0      	bls.n	801337c <SD_TxDataBlock+0x40>
 801339a:	e000      	b.n	801339e <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 801339c:	bf00      	nop
    }
    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 801339e:	bf00      	nop
 80133a0:	f7ff ff00 	bl	80131a4 <SPI_RxByte>
 80133a4:	4603      	mov	r3, r0
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d0fa      	beq.n	80133a0 <SD_TxDataBlock+0x64>
  }
  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 80133aa:	7bfb      	ldrb	r3, [r7, #15]
 80133ac:	f003 031f 	and.w	r3, r3, #31
 80133b0:	2b05      	cmp	r3, #5
 80133b2:	d101      	bne.n	80133b8 <SD_TxDataBlock+0x7c>
 80133b4:	2301      	movs	r3, #1
 80133b6:	e000      	b.n	80133ba <SD_TxDataBlock+0x7e>

  return FALSE;
 80133b8:	2300      	movs	r3, #0
}
 80133ba:	4618      	mov	r0, r3
 80133bc:	3710      	adds	r7, #16
 80133be:	46bd      	mov	sp, r7
 80133c0:	bd80      	pop	{r7, pc}

080133c2 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80133c2:	b580      	push	{r7, lr}
 80133c4:	b084      	sub	sp, #16
 80133c6:	af00      	add	r7, sp, #0
 80133c8:	4603      	mov	r3, r0
 80133ca:	6039      	str	r1, [r7, #0]
 80133cc:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 80133ce:	f7ff ff13 	bl	80131f8 <SD_ReadyWait>
 80133d2:	4603      	mov	r3, r0
 80133d4:	2bff      	cmp	r3, #255	@ 0xff
 80133d6:	d001      	beq.n	80133dc <SD_SendCmd+0x1a>
 80133d8:	23ff      	movs	r3, #255	@ 0xff
 80133da:	e042      	b.n	8013462 <SD_SendCmd+0xa0>
  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 80133dc:	79fb      	ldrb	r3, [r7, #7]
 80133de:	4618      	mov	r0, r3
 80133e0:	f7ff feac 	bl	801313c <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 80133e4:	683b      	ldr	r3, [r7, #0]
 80133e6:	0e1b      	lsrs	r3, r3, #24
 80133e8:	b2db      	uxtb	r3, r3
 80133ea:	4618      	mov	r0, r3
 80133ec:	f7ff fea6 	bl	801313c <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 80133f0:	683b      	ldr	r3, [r7, #0]
 80133f2:	0c1b      	lsrs	r3, r3, #16
 80133f4:	b2db      	uxtb	r3, r3
 80133f6:	4618      	mov	r0, r3
 80133f8:	f7ff fea0 	bl	801313c <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 80133fc:	683b      	ldr	r3, [r7, #0]
 80133fe:	0a1b      	lsrs	r3, r3, #8
 8013400:	b2db      	uxtb	r3, r3
 8013402:	4618      	mov	r0, r3
 8013404:	f7ff fe9a 	bl	801313c <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 8013408:	683b      	ldr	r3, [r7, #0]
 801340a:	b2db      	uxtb	r3, r3
 801340c:	4618      	mov	r0, r3
 801340e:	f7ff fe95 	bl	801313c <SPI_TxByte>
  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 8013412:	79fb      	ldrb	r3, [r7, #7]
 8013414:	2b40      	cmp	r3, #64	@ 0x40
 8013416:	d102      	bne.n	801341e <SD_SendCmd+0x5c>
 8013418:	2395      	movs	r3, #149	@ 0x95
 801341a:	73fb      	strb	r3, [r7, #15]
 801341c:	e007      	b.n	801342e <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 801341e:	79fb      	ldrb	r3, [r7, #7]
 8013420:	2b48      	cmp	r3, #72	@ 0x48
 8013422:	d102      	bne.n	801342a <SD_SendCmd+0x68>
 8013424:	2387      	movs	r3, #135	@ 0x87
 8013426:	73fb      	strb	r3, [r7, #15]
 8013428:	e001      	b.n	801342e <SD_SendCmd+0x6c>
  else crc = 1;
 801342a:	2301      	movs	r3, #1
 801342c:	73fb      	strb	r3, [r7, #15]
  /* transmit CRC */
  SPI_TxByte(crc);
 801342e:	7bfb      	ldrb	r3, [r7, #15]
 8013430:	4618      	mov	r0, r3
 8013432:	f7ff fe83 	bl	801313c <SPI_TxByte>
  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 8013436:	79fb      	ldrb	r3, [r7, #7]
 8013438:	2b4c      	cmp	r3, #76	@ 0x4c
 801343a:	d101      	bne.n	8013440 <SD_SendCmd+0x7e>
 801343c:	f7ff feb2 	bl	80131a4 <SPI_RxByte>
  /* receive response */
  uint8_t n = 10;
 8013440:	230a      	movs	r3, #10
 8013442:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 8013444:	f7ff feae 	bl	80131a4 <SPI_RxByte>
 8013448:	4603      	mov	r3, r0
 801344a:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 801344c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8013450:	2b00      	cmp	r3, #0
 8013452:	da05      	bge.n	8013460 <SD_SendCmd+0x9e>
 8013454:	7bbb      	ldrb	r3, [r7, #14]
 8013456:	3b01      	subs	r3, #1
 8013458:	73bb      	strb	r3, [r7, #14]
 801345a:	7bbb      	ldrb	r3, [r7, #14]
 801345c:	2b00      	cmp	r3, #0
 801345e:	d1f1      	bne.n	8013444 <SD_SendCmd+0x82>

  return res;
 8013460:	7b7b      	ldrb	r3, [r7, #13]
}
 8013462:	4618      	mov	r0, r3
 8013464:	3710      	adds	r7, #16
 8013466:	46bd      	mov	sp, r7
 8013468:	bd80      	pop	{r7, pc}
	...

0801346c <SD_disk_initialize>:

//-----[ user_diskio.c Functions ]-----

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 801346c:	b590      	push	{r4, r7, lr}
 801346e:	b085      	sub	sp, #20
 8013470:	af00      	add	r7, sp, #0
 8013472:	4603      	mov	r3, r0
 8013474:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 8013476:	79fb      	ldrb	r3, [r7, #7]
 8013478:	2b00      	cmp	r3, #0
 801347a:	d001      	beq.n	8013480 <SD_disk_initialize+0x14>
 801347c:	2301      	movs	r3, #1
 801347e:	e0d1      	b.n	8013624 <SD_disk_initialize+0x1b8>
  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 8013480:	4b6a      	ldr	r3, [pc, #424]	@ (801362c <SD_disk_initialize+0x1c0>)
 8013482:	781b      	ldrb	r3, [r3, #0]
 8013484:	b2db      	uxtb	r3, r3
 8013486:	f003 0302 	and.w	r3, r3, #2
 801348a:	2b00      	cmp	r3, #0
 801348c:	d003      	beq.n	8013496 <SD_disk_initialize+0x2a>
 801348e:	4b67      	ldr	r3, [pc, #412]	@ (801362c <SD_disk_initialize+0x1c0>)
 8013490:	781b      	ldrb	r3, [r3, #0]
 8013492:	b2db      	uxtb	r3, r3
 8013494:	e0c6      	b.n	8013624 <SD_disk_initialize+0x1b8>
  /* power on */
  SD_PowerOn();
 8013496:	f7ff fec9 	bl	801322c <SD_PowerOn>
  /* slave select */
  SELECT();
 801349a:	f7ff fe37 	bl	801310c <SELECT>
  /* check disk type */
  type = 0;
 801349e:	2300      	movs	r3, #0
 80134a0:	73bb      	strb	r3, [r7, #14]
  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 80134a2:	2100      	movs	r1, #0
 80134a4:	2040      	movs	r0, #64	@ 0x40
 80134a6:	f7ff ff8c 	bl	80133c2 <SD_SendCmd>
 80134aa:	4603      	mov	r3, r0
 80134ac:	2b01      	cmp	r3, #1
 80134ae:	f040 80a1 	bne.w	80135f4 <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 80134b2:	4b5f      	ldr	r3, [pc, #380]	@ (8013630 <SD_disk_initialize+0x1c4>)
 80134b4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80134b8:	801a      	strh	r2, [r3, #0]
    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80134ba:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80134be:	2048      	movs	r0, #72	@ 0x48
 80134c0:	f7ff ff7f 	bl	80133c2 <SD_SendCmd>
 80134c4:	4603      	mov	r3, r0
 80134c6:	2b01      	cmp	r3, #1
 80134c8:	d155      	bne.n	8013576 <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 80134ca:	2300      	movs	r3, #0
 80134cc:	73fb      	strb	r3, [r7, #15]
 80134ce:	e00c      	b.n	80134ea <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 80134d0:	7bfc      	ldrb	r4, [r7, #15]
 80134d2:	f7ff fe67 	bl	80131a4 <SPI_RxByte>
 80134d6:	4603      	mov	r3, r0
 80134d8:	461a      	mov	r2, r3
 80134da:	f104 0310 	add.w	r3, r4, #16
 80134de:	443b      	add	r3, r7
 80134e0:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 80134e4:	7bfb      	ldrb	r3, [r7, #15]
 80134e6:	3301      	adds	r3, #1
 80134e8:	73fb      	strb	r3, [r7, #15]
 80134ea:	7bfb      	ldrb	r3, [r7, #15]
 80134ec:	2b03      	cmp	r3, #3
 80134ee:	d9ef      	bls.n	80134d0 <SD_disk_initialize+0x64>
      }
      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80134f0:	7abb      	ldrb	r3, [r7, #10]
 80134f2:	2b01      	cmp	r3, #1
 80134f4:	d17e      	bne.n	80135f4 <SD_disk_initialize+0x188>
 80134f6:	7afb      	ldrb	r3, [r7, #11]
 80134f8:	2baa      	cmp	r3, #170	@ 0xaa
 80134fa:	d17b      	bne.n	80135f4 <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80134fc:	2100      	movs	r1, #0
 80134fe:	2077      	movs	r0, #119	@ 0x77
 8013500:	f7ff ff5f 	bl	80133c2 <SD_SendCmd>
 8013504:	4603      	mov	r3, r0
 8013506:	2b01      	cmp	r3, #1
 8013508:	d807      	bhi.n	801351a <SD_disk_initialize+0xae>
 801350a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 801350e:	2069      	movs	r0, #105	@ 0x69
 8013510:	f7ff ff57 	bl	80133c2 <SD_SendCmd>
 8013514:	4603      	mov	r3, r0
 8013516:	2b00      	cmp	r3, #0
 8013518:	d004      	beq.n	8013524 <SD_disk_initialize+0xb8>
        } while (Timer1);
 801351a:	4b45      	ldr	r3, [pc, #276]	@ (8013630 <SD_disk_initialize+0x1c4>)
 801351c:	881b      	ldrh	r3, [r3, #0]
 801351e:	2b00      	cmp	r3, #0
 8013520:	d1ec      	bne.n	80134fc <SD_disk_initialize+0x90>
 8013522:	e000      	b.n	8013526 <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8013524:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8013526:	4b42      	ldr	r3, [pc, #264]	@ (8013630 <SD_disk_initialize+0x1c4>)
 8013528:	881b      	ldrh	r3, [r3, #0]
 801352a:	2b00      	cmp	r3, #0
 801352c:	d062      	beq.n	80135f4 <SD_disk_initialize+0x188>
 801352e:	2100      	movs	r1, #0
 8013530:	207a      	movs	r0, #122	@ 0x7a
 8013532:	f7ff ff46 	bl	80133c2 <SD_SendCmd>
 8013536:	4603      	mov	r3, r0
 8013538:	2b00      	cmp	r3, #0
 801353a:	d15b      	bne.n	80135f4 <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 801353c:	2300      	movs	r3, #0
 801353e:	73fb      	strb	r3, [r7, #15]
 8013540:	e00c      	b.n	801355c <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 8013542:	7bfc      	ldrb	r4, [r7, #15]
 8013544:	f7ff fe2e 	bl	80131a4 <SPI_RxByte>
 8013548:	4603      	mov	r3, r0
 801354a:	461a      	mov	r2, r3
 801354c:	f104 0310 	add.w	r3, r4, #16
 8013550:	443b      	add	r3, r7
 8013552:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8013556:	7bfb      	ldrb	r3, [r7, #15]
 8013558:	3301      	adds	r3, #1
 801355a:	73fb      	strb	r3, [r7, #15]
 801355c:	7bfb      	ldrb	r3, [r7, #15]
 801355e:	2b03      	cmp	r3, #3
 8013560:	d9ef      	bls.n	8013542 <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8013562:	7a3b      	ldrb	r3, [r7, #8]
 8013564:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013568:	2b00      	cmp	r3, #0
 801356a:	d001      	beq.n	8013570 <SD_disk_initialize+0x104>
 801356c:	230c      	movs	r3, #12
 801356e:	e000      	b.n	8013572 <SD_disk_initialize+0x106>
 8013570:	2304      	movs	r3, #4
 8013572:	73bb      	strb	r3, [r7, #14]
 8013574:	e03e      	b.n	80135f4 <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8013576:	2100      	movs	r1, #0
 8013578:	2077      	movs	r0, #119	@ 0x77
 801357a:	f7ff ff22 	bl	80133c2 <SD_SendCmd>
 801357e:	4603      	mov	r3, r0
 8013580:	2b01      	cmp	r3, #1
 8013582:	d808      	bhi.n	8013596 <SD_disk_initialize+0x12a>
 8013584:	2100      	movs	r1, #0
 8013586:	2069      	movs	r0, #105	@ 0x69
 8013588:	f7ff ff1b 	bl	80133c2 <SD_SendCmd>
 801358c:	4603      	mov	r3, r0
 801358e:	2b01      	cmp	r3, #1
 8013590:	d801      	bhi.n	8013596 <SD_disk_initialize+0x12a>
 8013592:	2302      	movs	r3, #2
 8013594:	e000      	b.n	8013598 <SD_disk_initialize+0x12c>
 8013596:	2301      	movs	r3, #1
 8013598:	73bb      	strb	r3, [r7, #14]
      do
      {
        if (type == CT_SD1)
 801359a:	7bbb      	ldrb	r3, [r7, #14]
 801359c:	2b02      	cmp	r3, #2
 801359e:	d10e      	bne.n	80135be <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80135a0:	2100      	movs	r1, #0
 80135a2:	2077      	movs	r0, #119	@ 0x77
 80135a4:	f7ff ff0d 	bl	80133c2 <SD_SendCmd>
 80135a8:	4603      	mov	r3, r0
 80135aa:	2b01      	cmp	r3, #1
 80135ac:	d80e      	bhi.n	80135cc <SD_disk_initialize+0x160>
 80135ae:	2100      	movs	r1, #0
 80135b0:	2069      	movs	r0, #105	@ 0x69
 80135b2:	f7ff ff06 	bl	80133c2 <SD_SendCmd>
 80135b6:	4603      	mov	r3, r0
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	d107      	bne.n	80135cc <SD_disk_initialize+0x160>
 80135bc:	e00c      	b.n	80135d8 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80135be:	2100      	movs	r1, #0
 80135c0:	2041      	movs	r0, #65	@ 0x41
 80135c2:	f7ff fefe 	bl	80133c2 <SD_SendCmd>
 80135c6:	4603      	mov	r3, r0
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	d004      	beq.n	80135d6 <SD_disk_initialize+0x16a>
        }
      } while (Timer1);
 80135cc:	4b18      	ldr	r3, [pc, #96]	@ (8013630 <SD_disk_initialize+0x1c4>)
 80135ce:	881b      	ldrh	r3, [r3, #0]
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d1e2      	bne.n	801359a <SD_disk_initialize+0x12e>
 80135d4:	e000      	b.n	80135d8 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80135d6:	bf00      	nop
      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80135d8:	4b15      	ldr	r3, [pc, #84]	@ (8013630 <SD_disk_initialize+0x1c4>)
 80135da:	881b      	ldrh	r3, [r3, #0]
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d007      	beq.n	80135f0 <SD_disk_initialize+0x184>
 80135e0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80135e4:	2050      	movs	r0, #80	@ 0x50
 80135e6:	f7ff feec 	bl	80133c2 <SD_SendCmd>
 80135ea:	4603      	mov	r3, r0
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d001      	beq.n	80135f4 <SD_disk_initialize+0x188>
 80135f0:	2300      	movs	r3, #0
 80135f2:	73bb      	strb	r3, [r7, #14]
    }
  }
  CardType = type;
 80135f4:	4a0f      	ldr	r2, [pc, #60]	@ (8013634 <SD_disk_initialize+0x1c8>)
 80135f6:	7bbb      	ldrb	r3, [r7, #14]
 80135f8:	7013      	strb	r3, [r2, #0]
  /* Idle */
  DESELECT();
 80135fa:	f7ff fd93 	bl	8013124 <DESELECT>
  SPI_RxByte();
 80135fe:	f7ff fdd1 	bl	80131a4 <SPI_RxByte>
  /* Clear STA_NOINIT */
  if (type)
 8013602:	7bbb      	ldrb	r3, [r7, #14]
 8013604:	2b00      	cmp	r3, #0
 8013606:	d008      	beq.n	801361a <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 8013608:	4b08      	ldr	r3, [pc, #32]	@ (801362c <SD_disk_initialize+0x1c0>)
 801360a:	781b      	ldrb	r3, [r3, #0]
 801360c:	b2db      	uxtb	r3, r3
 801360e:	f023 0301 	bic.w	r3, r3, #1
 8013612:	b2da      	uxtb	r2, r3
 8013614:	4b05      	ldr	r3, [pc, #20]	@ (801362c <SD_disk_initialize+0x1c0>)
 8013616:	701a      	strb	r2, [r3, #0]
 8013618:	e001      	b.n	801361e <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 801361a:	f7ff fe49 	bl	80132b0 <SD_PowerOff>
  }
  return Stat;
 801361e:	4b03      	ldr	r3, [pc, #12]	@ (801362c <SD_disk_initialize+0x1c0>)
 8013620:	781b      	ldrb	r3, [r3, #0]
 8013622:	b2db      	uxtb	r3, r3
}
 8013624:	4618      	mov	r0, r3
 8013626:	3714      	adds	r7, #20
 8013628:	46bd      	mov	sp, r7
 801362a:	bd90      	pop	{r4, r7, pc}
 801362c:	240000c0 	.word	0x240000c0
 8013630:	24002ac4 	.word	0x24002ac4
 8013634:	24002ac8 	.word	0x24002ac8

08013638 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8013638:	b480      	push	{r7}
 801363a:	b083      	sub	sp, #12
 801363c:	af00      	add	r7, sp, #0
 801363e:	4603      	mov	r3, r0
 8013640:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 8013642:	79fb      	ldrb	r3, [r7, #7]
 8013644:	2b00      	cmp	r3, #0
 8013646:	d001      	beq.n	801364c <SD_disk_status+0x14>
 8013648:	2301      	movs	r3, #1
 801364a:	e002      	b.n	8013652 <SD_disk_status+0x1a>
  return Stat;
 801364c:	4b04      	ldr	r3, [pc, #16]	@ (8013660 <SD_disk_status+0x28>)
 801364e:	781b      	ldrb	r3, [r3, #0]
 8013650:	b2db      	uxtb	r3, r3
}
 8013652:	4618      	mov	r0, r3
 8013654:	370c      	adds	r7, #12
 8013656:	46bd      	mov	sp, r7
 8013658:	f85d 7b04 	ldr.w	r7, [sp], #4
 801365c:	4770      	bx	lr
 801365e:	bf00      	nop
 8013660:	240000c0 	.word	0x240000c0

08013664 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8013664:	b580      	push	{r7, lr}
 8013666:	b084      	sub	sp, #16
 8013668:	af00      	add	r7, sp, #0
 801366a:	60b9      	str	r1, [r7, #8]
 801366c:	607a      	str	r2, [r7, #4]
 801366e:	603b      	str	r3, [r7, #0]
 8013670:	4603      	mov	r3, r0
 8013672:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8013674:	7bfb      	ldrb	r3, [r7, #15]
 8013676:	2b00      	cmp	r3, #0
 8013678:	d102      	bne.n	8013680 <SD_disk_read+0x1c>
 801367a:	683b      	ldr	r3, [r7, #0]
 801367c:	2b00      	cmp	r3, #0
 801367e:	d101      	bne.n	8013684 <SD_disk_read+0x20>
 8013680:	2304      	movs	r3, #4
 8013682:	e051      	b.n	8013728 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8013684:	4b2a      	ldr	r3, [pc, #168]	@ (8013730 <SD_disk_read+0xcc>)
 8013686:	781b      	ldrb	r3, [r3, #0]
 8013688:	b2db      	uxtb	r3, r3
 801368a:	f003 0301 	and.w	r3, r3, #1
 801368e:	2b00      	cmp	r3, #0
 8013690:	d001      	beq.n	8013696 <SD_disk_read+0x32>
 8013692:	2303      	movs	r3, #3
 8013694:	e048      	b.n	8013728 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8013696:	4b27      	ldr	r3, [pc, #156]	@ (8013734 <SD_disk_read+0xd0>)
 8013698:	781b      	ldrb	r3, [r3, #0]
 801369a:	f003 0304 	and.w	r3, r3, #4
 801369e:	2b00      	cmp	r3, #0
 80136a0:	d102      	bne.n	80136a8 <SD_disk_read+0x44>
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	025b      	lsls	r3, r3, #9
 80136a6:	607b      	str	r3, [r7, #4]

  SELECT();
 80136a8:	f7ff fd30 	bl	801310c <SELECT>

  if (count == 1)
 80136ac:	683b      	ldr	r3, [r7, #0]
 80136ae:	2b01      	cmp	r3, #1
 80136b0:	d111      	bne.n	80136d6 <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80136b2:	6879      	ldr	r1, [r7, #4]
 80136b4:	2051      	movs	r0, #81	@ 0x51
 80136b6:	f7ff fe84 	bl	80133c2 <SD_SendCmd>
 80136ba:	4603      	mov	r3, r0
 80136bc:	2b00      	cmp	r3, #0
 80136be:	d129      	bne.n	8013714 <SD_disk_read+0xb0>
 80136c0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80136c4:	68b8      	ldr	r0, [r7, #8]
 80136c6:	f7ff fe0b 	bl	80132e0 <SD_RxDataBlock>
 80136ca:	4603      	mov	r3, r0
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	d021      	beq.n	8013714 <SD_disk_read+0xb0>
 80136d0:	2300      	movs	r3, #0
 80136d2:	603b      	str	r3, [r7, #0]
 80136d4:	e01e      	b.n	8013714 <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 80136d6:	6879      	ldr	r1, [r7, #4]
 80136d8:	2052      	movs	r0, #82	@ 0x52
 80136da:	f7ff fe72 	bl	80133c2 <SD_SendCmd>
 80136de:	4603      	mov	r3, r0
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	d117      	bne.n	8013714 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 80136e4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80136e8:	68b8      	ldr	r0, [r7, #8]
 80136ea:	f7ff fdf9 	bl	80132e0 <SD_RxDataBlock>
 80136ee:	4603      	mov	r3, r0
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d00a      	beq.n	801370a <SD_disk_read+0xa6>
        buff += 512;
 80136f4:	68bb      	ldr	r3, [r7, #8]
 80136f6:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80136fa:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80136fc:	683b      	ldr	r3, [r7, #0]
 80136fe:	3b01      	subs	r3, #1
 8013700:	603b      	str	r3, [r7, #0]
 8013702:	683b      	ldr	r3, [r7, #0]
 8013704:	2b00      	cmp	r3, #0
 8013706:	d1ed      	bne.n	80136e4 <SD_disk_read+0x80>
 8013708:	e000      	b.n	801370c <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 801370a:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 801370c:	2100      	movs	r1, #0
 801370e:	204c      	movs	r0, #76	@ 0x4c
 8013710:	f7ff fe57 	bl	80133c2 <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 8013714:	f7ff fd06 	bl	8013124 <DESELECT>
  SPI_RxByte();
 8013718:	f7ff fd44 	bl	80131a4 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 801371c:	683b      	ldr	r3, [r7, #0]
 801371e:	2b00      	cmp	r3, #0
 8013720:	bf14      	ite	ne
 8013722:	2301      	movne	r3, #1
 8013724:	2300      	moveq	r3, #0
 8013726:	b2db      	uxtb	r3, r3
}
 8013728:	4618      	mov	r0, r3
 801372a:	3710      	adds	r7, #16
 801372c:	46bd      	mov	sp, r7
 801372e:	bd80      	pop	{r7, pc}
 8013730:	240000c0 	.word	0x240000c0
 8013734:	24002ac8 	.word	0x24002ac8

08013738 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8013738:	b580      	push	{r7, lr}
 801373a:	b084      	sub	sp, #16
 801373c:	af00      	add	r7, sp, #0
 801373e:	60b9      	str	r1, [r7, #8]
 8013740:	607a      	str	r2, [r7, #4]
 8013742:	603b      	str	r3, [r7, #0]
 8013744:	4603      	mov	r3, r0
 8013746:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8013748:	7bfb      	ldrb	r3, [r7, #15]
 801374a:	2b00      	cmp	r3, #0
 801374c:	d102      	bne.n	8013754 <SD_disk_write+0x1c>
 801374e:	683b      	ldr	r3, [r7, #0]
 8013750:	2b00      	cmp	r3, #0
 8013752:	d101      	bne.n	8013758 <SD_disk_write+0x20>
 8013754:	2304      	movs	r3, #4
 8013756:	e06b      	b.n	8013830 <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8013758:	4b37      	ldr	r3, [pc, #220]	@ (8013838 <SD_disk_write+0x100>)
 801375a:	781b      	ldrb	r3, [r3, #0]
 801375c:	b2db      	uxtb	r3, r3
 801375e:	f003 0301 	and.w	r3, r3, #1
 8013762:	2b00      	cmp	r3, #0
 8013764:	d001      	beq.n	801376a <SD_disk_write+0x32>
 8013766:	2303      	movs	r3, #3
 8013768:	e062      	b.n	8013830 <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 801376a:	4b33      	ldr	r3, [pc, #204]	@ (8013838 <SD_disk_write+0x100>)
 801376c:	781b      	ldrb	r3, [r3, #0]
 801376e:	b2db      	uxtb	r3, r3
 8013770:	f003 0304 	and.w	r3, r3, #4
 8013774:	2b00      	cmp	r3, #0
 8013776:	d001      	beq.n	801377c <SD_disk_write+0x44>
 8013778:	2302      	movs	r3, #2
 801377a:	e059      	b.n	8013830 <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 801377c:	4b2f      	ldr	r3, [pc, #188]	@ (801383c <SD_disk_write+0x104>)
 801377e:	781b      	ldrb	r3, [r3, #0]
 8013780:	f003 0304 	and.w	r3, r3, #4
 8013784:	2b00      	cmp	r3, #0
 8013786:	d102      	bne.n	801378e <SD_disk_write+0x56>
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	025b      	lsls	r3, r3, #9
 801378c:	607b      	str	r3, [r7, #4]

  SELECT();
 801378e:	f7ff fcbd 	bl	801310c <SELECT>

  if (count == 1)
 8013792:	683b      	ldr	r3, [r7, #0]
 8013794:	2b01      	cmp	r3, #1
 8013796:	d110      	bne.n	80137ba <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8013798:	6879      	ldr	r1, [r7, #4]
 801379a:	2058      	movs	r0, #88	@ 0x58
 801379c:	f7ff fe11 	bl	80133c2 <SD_SendCmd>
 80137a0:	4603      	mov	r3, r0
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	d13a      	bne.n	801381c <SD_disk_write+0xe4>
 80137a6:	21fe      	movs	r1, #254	@ 0xfe
 80137a8:	68b8      	ldr	r0, [r7, #8]
 80137aa:	f7ff fdc7 	bl	801333c <SD_TxDataBlock>
 80137ae:	4603      	mov	r3, r0
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d033      	beq.n	801381c <SD_disk_write+0xe4>
      count = 0;
 80137b4:	2300      	movs	r3, #0
 80137b6:	603b      	str	r3, [r7, #0]
 80137b8:	e030      	b.n	801381c <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 80137ba:	4b20      	ldr	r3, [pc, #128]	@ (801383c <SD_disk_write+0x104>)
 80137bc:	781b      	ldrb	r3, [r3, #0]
 80137be:	f003 0302 	and.w	r3, r3, #2
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d007      	beq.n	80137d6 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 80137c6:	2100      	movs	r1, #0
 80137c8:	2077      	movs	r0, #119	@ 0x77
 80137ca:	f7ff fdfa 	bl	80133c2 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 80137ce:	6839      	ldr	r1, [r7, #0]
 80137d0:	2057      	movs	r0, #87	@ 0x57
 80137d2:	f7ff fdf6 	bl	80133c2 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 80137d6:	6879      	ldr	r1, [r7, #4]
 80137d8:	2059      	movs	r0, #89	@ 0x59
 80137da:	f7ff fdf2 	bl	80133c2 <SD_SendCmd>
 80137de:	4603      	mov	r3, r0
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d11b      	bne.n	801381c <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 80137e4:	21fc      	movs	r1, #252	@ 0xfc
 80137e6:	68b8      	ldr	r0, [r7, #8]
 80137e8:	f7ff fda8 	bl	801333c <SD_TxDataBlock>
 80137ec:	4603      	mov	r3, r0
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d00a      	beq.n	8013808 <SD_disk_write+0xd0>
        buff += 512;
 80137f2:	68bb      	ldr	r3, [r7, #8]
 80137f4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80137f8:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80137fa:	683b      	ldr	r3, [r7, #0]
 80137fc:	3b01      	subs	r3, #1
 80137fe:	603b      	str	r3, [r7, #0]
 8013800:	683b      	ldr	r3, [r7, #0]
 8013802:	2b00      	cmp	r3, #0
 8013804:	d1ee      	bne.n	80137e4 <SD_disk_write+0xac>
 8013806:	e000      	b.n	801380a <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8013808:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 801380a:	21fd      	movs	r1, #253	@ 0xfd
 801380c:	2000      	movs	r0, #0
 801380e:	f7ff fd95 	bl	801333c <SD_TxDataBlock>
 8013812:	4603      	mov	r3, r0
 8013814:	2b00      	cmp	r3, #0
 8013816:	d101      	bne.n	801381c <SD_disk_write+0xe4>
      {
        count = 1;
 8013818:	2301      	movs	r3, #1
 801381a:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 801381c:	f7ff fc82 	bl	8013124 <DESELECT>
  SPI_RxByte();
 8013820:	f7ff fcc0 	bl	80131a4 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8013824:	683b      	ldr	r3, [r7, #0]
 8013826:	2b00      	cmp	r3, #0
 8013828:	bf14      	ite	ne
 801382a:	2301      	movne	r3, #1
 801382c:	2300      	moveq	r3, #0
 801382e:	b2db      	uxtb	r3, r3
}
 8013830:	4618      	mov	r0, r3
 8013832:	3710      	adds	r7, #16
 8013834:	46bd      	mov	sp, r7
 8013836:	bd80      	pop	{r7, pc}
 8013838:	240000c0 	.word	0x240000c0
 801383c:	24002ac8 	.word	0x24002ac8

08013840 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8013840:	b590      	push	{r4, r7, lr}
 8013842:	b08b      	sub	sp, #44	@ 0x2c
 8013844:	af00      	add	r7, sp, #0
 8013846:	4603      	mov	r3, r0
 8013848:	603a      	str	r2, [r7, #0]
 801384a:	71fb      	strb	r3, [r7, #7]
 801384c:	460b      	mov	r3, r1
 801384e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 8013850:	683b      	ldr	r3, [r7, #0]
 8013852:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 8013854:	79fb      	ldrb	r3, [r7, #7]
 8013856:	2b00      	cmp	r3, #0
 8013858:	d001      	beq.n	801385e <SD_disk_ioctl+0x1e>
 801385a:	2304      	movs	r3, #4
 801385c:	e113      	b.n	8013a86 <SD_disk_ioctl+0x246>
  res = RES_ERROR;
 801385e:	2301      	movs	r3, #1
 8013860:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 8013864:	79bb      	ldrb	r3, [r7, #6]
 8013866:	2b05      	cmp	r3, #5
 8013868:	d124      	bne.n	80138b4 <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 801386a:	6a3b      	ldr	r3, [r7, #32]
 801386c:	781b      	ldrb	r3, [r3, #0]
 801386e:	2b02      	cmp	r3, #2
 8013870:	d012      	beq.n	8013898 <SD_disk_ioctl+0x58>
 8013872:	2b02      	cmp	r3, #2
 8013874:	dc1a      	bgt.n	80138ac <SD_disk_ioctl+0x6c>
 8013876:	2b00      	cmp	r3, #0
 8013878:	d002      	beq.n	8013880 <SD_disk_ioctl+0x40>
 801387a:	2b01      	cmp	r3, #1
 801387c:	d006      	beq.n	801388c <SD_disk_ioctl+0x4c>
 801387e:	e015      	b.n	80138ac <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 8013880:	f7ff fd16 	bl	80132b0 <SD_PowerOff>
      res = RES_OK;
 8013884:	2300      	movs	r3, #0
 8013886:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 801388a:	e0fa      	b.n	8013a82 <SD_disk_ioctl+0x242>
    case 1:
      SD_PowerOn();   /* Power On */
 801388c:	f7ff fcce 	bl	801322c <SD_PowerOn>
      res = RES_OK;
 8013890:	2300      	movs	r3, #0
 8013892:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8013896:	e0f4      	b.n	8013a82 <SD_disk_ioctl+0x242>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 8013898:	6a3b      	ldr	r3, [r7, #32]
 801389a:	1c5c      	adds	r4, r3, #1
 801389c:	f7ff fd14 	bl	80132c8 <SD_CheckPower>
 80138a0:	4603      	mov	r3, r0
 80138a2:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 80138a4:	2300      	movs	r3, #0
 80138a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80138aa:	e0ea      	b.n	8013a82 <SD_disk_ioctl+0x242>
    default:
      res = RES_PARERR;
 80138ac:	2304      	movs	r3, #4
 80138ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80138b2:	e0e6      	b.n	8013a82 <SD_disk_ioctl+0x242>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT){
 80138b4:	4b76      	ldr	r3, [pc, #472]	@ (8013a90 <SD_disk_ioctl+0x250>)
 80138b6:	781b      	ldrb	r3, [r3, #0]
 80138b8:	b2db      	uxtb	r3, r3
 80138ba:	f003 0301 	and.w	r3, r3, #1
 80138be:	2b00      	cmp	r3, #0
 80138c0:	d001      	beq.n	80138c6 <SD_disk_ioctl+0x86>
    	return RES_NOTRDY;
 80138c2:	2303      	movs	r3, #3
 80138c4:	e0df      	b.n	8013a86 <SD_disk_ioctl+0x246>
    }
    SELECT();
 80138c6:	f7ff fc21 	bl	801310c <SELECT>
    switch (ctrl)
 80138ca:	79bb      	ldrb	r3, [r7, #6]
 80138cc:	2b0d      	cmp	r3, #13
 80138ce:	f200 80c9 	bhi.w	8013a64 <SD_disk_ioctl+0x224>
 80138d2:	a201      	add	r2, pc, #4	@ (adr r2, 80138d8 <SD_disk_ioctl+0x98>)
 80138d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80138d8:	080139cf 	.word	0x080139cf
 80138dc:	08013911 	.word	0x08013911
 80138e0:	080139bf 	.word	0x080139bf
 80138e4:	08013a65 	.word	0x08013a65
 80138e8:	08013a65 	.word	0x08013a65
 80138ec:	08013a65 	.word	0x08013a65
 80138f0:	08013a65 	.word	0x08013a65
 80138f4:	08013a65 	.word	0x08013a65
 80138f8:	08013a65 	.word	0x08013a65
 80138fc:	08013a65 	.word	0x08013a65
 8013900:	08013a65 	.word	0x08013a65
 8013904:	080139e1 	.word	0x080139e1
 8013908:	08013a05 	.word	0x08013a05
 801390c:	08013a29 	.word	0x08013a29
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8013910:	2100      	movs	r1, #0
 8013912:	2049      	movs	r0, #73	@ 0x49
 8013914:	f7ff fd55 	bl	80133c2 <SD_SendCmd>
 8013918:	4603      	mov	r3, r0
 801391a:	2b00      	cmp	r3, #0
 801391c:	f040 80a6 	bne.w	8013a6c <SD_disk_ioctl+0x22c>
 8013920:	f107 030c 	add.w	r3, r7, #12
 8013924:	2110      	movs	r1, #16
 8013926:	4618      	mov	r0, r3
 8013928:	f7ff fcda 	bl	80132e0 <SD_RxDataBlock>
 801392c:	4603      	mov	r3, r0
 801392e:	2b00      	cmp	r3, #0
 8013930:	f000 809c 	beq.w	8013a6c <SD_disk_ioctl+0x22c>
      {
        if ((csd[0] >> 6) == 1)
 8013934:	7b3b      	ldrb	r3, [r7, #12]
 8013936:	099b      	lsrs	r3, r3, #6
 8013938:	b2db      	uxtb	r3, r3
 801393a:	2b01      	cmp	r3, #1
 801393c:	d10d      	bne.n	801395a <SD_disk_ioctl+0x11a>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 801393e:	7d7b      	ldrb	r3, [r7, #21]
 8013940:	461a      	mov	r2, r3
 8013942:	7d3b      	ldrb	r3, [r7, #20]
 8013944:	021b      	lsls	r3, r3, #8
 8013946:	b29b      	uxth	r3, r3
 8013948:	4413      	add	r3, r2
 801394a:	b29b      	uxth	r3, r3
 801394c:	3301      	adds	r3, #1
 801394e:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8013950:	8bfb      	ldrh	r3, [r7, #30]
 8013952:	029a      	lsls	r2, r3, #10
 8013954:	683b      	ldr	r3, [r7, #0]
 8013956:	601a      	str	r2, [r3, #0]
 8013958:	e02d      	b.n	80139b6 <SD_disk_ioctl+0x176>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 801395a:	7c7b      	ldrb	r3, [r7, #17]
 801395c:	f003 030f 	and.w	r3, r3, #15
 8013960:	b2da      	uxtb	r2, r3
 8013962:	7dbb      	ldrb	r3, [r7, #22]
 8013964:	09db      	lsrs	r3, r3, #7
 8013966:	b2db      	uxtb	r3, r3
 8013968:	4413      	add	r3, r2
 801396a:	b2da      	uxtb	r2, r3
 801396c:	7d7b      	ldrb	r3, [r7, #21]
 801396e:	005b      	lsls	r3, r3, #1
 8013970:	b2db      	uxtb	r3, r3
 8013972:	f003 0306 	and.w	r3, r3, #6
 8013976:	b2db      	uxtb	r3, r3
 8013978:	4413      	add	r3, r2
 801397a:	b2db      	uxtb	r3, r3
 801397c:	3302      	adds	r3, #2
 801397e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8013982:	7d3b      	ldrb	r3, [r7, #20]
 8013984:	099b      	lsrs	r3, r3, #6
 8013986:	b2db      	uxtb	r3, r3
 8013988:	461a      	mov	r2, r3
 801398a:	7cfb      	ldrb	r3, [r7, #19]
 801398c:	009b      	lsls	r3, r3, #2
 801398e:	b29b      	uxth	r3, r3
 8013990:	4413      	add	r3, r2
 8013992:	b29a      	uxth	r2, r3
 8013994:	7cbb      	ldrb	r3, [r7, #18]
 8013996:	029b      	lsls	r3, r3, #10
 8013998:	b29b      	uxth	r3, r3
 801399a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 801399e:	b29b      	uxth	r3, r3
 80139a0:	4413      	add	r3, r2
 80139a2:	b29b      	uxth	r3, r3
 80139a4:	3301      	adds	r3, #1
 80139a6:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 80139a8:	8bfa      	ldrh	r2, [r7, #30]
 80139aa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80139ae:	3b09      	subs	r3, #9
 80139b0:	409a      	lsls	r2, r3
 80139b2:	683b      	ldr	r3, [r7, #0]
 80139b4:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 80139b6:	2300      	movs	r3, #0
 80139b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 80139bc:	e056      	b.n	8013a6c <SD_disk_ioctl+0x22c>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 80139be:	683b      	ldr	r3, [r7, #0]
 80139c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80139c4:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 80139c6:	2300      	movs	r3, #0
 80139c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80139cc:	e055      	b.n	8013a7a <SD_disk_ioctl+0x23a>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80139ce:	f7ff fc13 	bl	80131f8 <SD_ReadyWait>
 80139d2:	4603      	mov	r3, r0
 80139d4:	2bff      	cmp	r3, #255	@ 0xff
 80139d6:	d14b      	bne.n	8013a70 <SD_disk_ioctl+0x230>
 80139d8:	2300      	movs	r3, #0
 80139da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80139de:	e047      	b.n	8013a70 <SD_disk_ioctl+0x230>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80139e0:	2100      	movs	r1, #0
 80139e2:	2049      	movs	r0, #73	@ 0x49
 80139e4:	f7ff fced 	bl	80133c2 <SD_SendCmd>
 80139e8:	4603      	mov	r3, r0
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	d142      	bne.n	8013a74 <SD_disk_ioctl+0x234>
 80139ee:	2110      	movs	r1, #16
 80139f0:	6a38      	ldr	r0, [r7, #32]
 80139f2:	f7ff fc75 	bl	80132e0 <SD_RxDataBlock>
 80139f6:	4603      	mov	r3, r0
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d03b      	beq.n	8013a74 <SD_disk_ioctl+0x234>
 80139fc:	2300      	movs	r3, #0
 80139fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8013a02:	e037      	b.n	8013a74 <SD_disk_ioctl+0x234>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8013a04:	2100      	movs	r1, #0
 8013a06:	204a      	movs	r0, #74	@ 0x4a
 8013a08:	f7ff fcdb 	bl	80133c2 <SD_SendCmd>
 8013a0c:	4603      	mov	r3, r0
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	d132      	bne.n	8013a78 <SD_disk_ioctl+0x238>
 8013a12:	2110      	movs	r1, #16
 8013a14:	6a38      	ldr	r0, [r7, #32]
 8013a16:	f7ff fc63 	bl	80132e0 <SD_RxDataBlock>
 8013a1a:	4603      	mov	r3, r0
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	d02b      	beq.n	8013a78 <SD_disk_ioctl+0x238>
 8013a20:	2300      	movs	r3, #0
 8013a22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8013a26:	e027      	b.n	8013a78 <SD_disk_ioctl+0x238>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 8013a28:	2100      	movs	r1, #0
 8013a2a:	207a      	movs	r0, #122	@ 0x7a
 8013a2c:	f7ff fcc9 	bl	80133c2 <SD_SendCmd>
 8013a30:	4603      	mov	r3, r0
 8013a32:	2b00      	cmp	r3, #0
 8013a34:	d116      	bne.n	8013a64 <SD_disk_ioctl+0x224>
      {
        for (n = 0; n < 4; n++)
 8013a36:	2300      	movs	r3, #0
 8013a38:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8013a3c:	e00b      	b.n	8013a56 <SD_disk_ioctl+0x216>
        {
          *ptr++ = SPI_RxByte();
 8013a3e:	6a3c      	ldr	r4, [r7, #32]
 8013a40:	1c63      	adds	r3, r4, #1
 8013a42:	623b      	str	r3, [r7, #32]
 8013a44:	f7ff fbae 	bl	80131a4 <SPI_RxByte>
 8013a48:	4603      	mov	r3, r0
 8013a4a:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8013a4c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013a50:	3301      	adds	r3, #1
 8013a52:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8013a56:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013a5a:	2b03      	cmp	r3, #3
 8013a5c:	d9ef      	bls.n	8013a3e <SD_disk_ioctl+0x1fe>
        }
        res = RES_OK;
 8013a5e:	2300      	movs	r3, #0
 8013a60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
    default:
      res = RES_PARERR;
 8013a64:	2304      	movs	r3, #4
 8013a66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013a6a:	e006      	b.n	8013a7a <SD_disk_ioctl+0x23a>
      break;
 8013a6c:	bf00      	nop
 8013a6e:	e004      	b.n	8013a7a <SD_disk_ioctl+0x23a>
      break;
 8013a70:	bf00      	nop
 8013a72:	e002      	b.n	8013a7a <SD_disk_ioctl+0x23a>
      break;
 8013a74:	bf00      	nop
 8013a76:	e000      	b.n	8013a7a <SD_disk_ioctl+0x23a>
      break;
 8013a78:	bf00      	nop
    }
    DESELECT();
 8013a7a:	f7ff fb53 	bl	8013124 <DESELECT>
    SPI_RxByte();
 8013a7e:	f7ff fb91 	bl	80131a4 <SPI_RxByte>
  }
  return res;
 8013a82:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8013a86:	4618      	mov	r0, r3
 8013a88:	372c      	adds	r7, #44	@ 0x2c
 8013a8a:	46bd      	mov	sp, r7
 8013a8c:	bd90      	pop	{r4, r7, pc}
 8013a8e:	bf00      	nop
 8013a90:	240000c0 	.word	0x240000c0

08013a94 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8013a94:	b580      	push	{r7, lr}
 8013a96:	b084      	sub	sp, #16
 8013a98:	af00      	add	r7, sp, #0
 8013a9a:	4603      	mov	r3, r0
 8013a9c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8013a9e:	79fb      	ldrb	r3, [r7, #7]
 8013aa0:	4a08      	ldr	r2, [pc, #32]	@ (8013ac4 <disk_status+0x30>)
 8013aa2:	009b      	lsls	r3, r3, #2
 8013aa4:	4413      	add	r3, r2
 8013aa6:	685b      	ldr	r3, [r3, #4]
 8013aa8:	685b      	ldr	r3, [r3, #4]
 8013aaa:	79fa      	ldrb	r2, [r7, #7]
 8013aac:	4905      	ldr	r1, [pc, #20]	@ (8013ac4 <disk_status+0x30>)
 8013aae:	440a      	add	r2, r1
 8013ab0:	7a12      	ldrb	r2, [r2, #8]
 8013ab2:	4610      	mov	r0, r2
 8013ab4:	4798      	blx	r3
 8013ab6:	4603      	mov	r3, r0
 8013ab8:	73fb      	strb	r3, [r7, #15]
  return stat;
 8013aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8013abc:	4618      	mov	r0, r3
 8013abe:	3710      	adds	r7, #16
 8013ac0:	46bd      	mov	sp, r7
 8013ac2:	bd80      	pop	{r7, pc}
 8013ac4:	24002acc 	.word	0x24002acc

08013ac8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8013ac8:	b590      	push	{r4, r7, lr}
 8013aca:	b087      	sub	sp, #28
 8013acc:	af00      	add	r7, sp, #0
 8013ace:	60b9      	str	r1, [r7, #8]
 8013ad0:	607a      	str	r2, [r7, #4]
 8013ad2:	603b      	str	r3, [r7, #0]
 8013ad4:	4603      	mov	r3, r0
 8013ad6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8013ad8:	7bfb      	ldrb	r3, [r7, #15]
 8013ada:	4a0a      	ldr	r2, [pc, #40]	@ (8013b04 <disk_read+0x3c>)
 8013adc:	009b      	lsls	r3, r3, #2
 8013ade:	4413      	add	r3, r2
 8013ae0:	685b      	ldr	r3, [r3, #4]
 8013ae2:	689c      	ldr	r4, [r3, #8]
 8013ae4:	7bfb      	ldrb	r3, [r7, #15]
 8013ae6:	4a07      	ldr	r2, [pc, #28]	@ (8013b04 <disk_read+0x3c>)
 8013ae8:	4413      	add	r3, r2
 8013aea:	7a18      	ldrb	r0, [r3, #8]
 8013aec:	683b      	ldr	r3, [r7, #0]
 8013aee:	687a      	ldr	r2, [r7, #4]
 8013af0:	68b9      	ldr	r1, [r7, #8]
 8013af2:	47a0      	blx	r4
 8013af4:	4603      	mov	r3, r0
 8013af6:	75fb      	strb	r3, [r7, #23]
  return res;
 8013af8:	7dfb      	ldrb	r3, [r7, #23]
}
 8013afa:	4618      	mov	r0, r3
 8013afc:	371c      	adds	r7, #28
 8013afe:	46bd      	mov	sp, r7
 8013b00:	bd90      	pop	{r4, r7, pc}
 8013b02:	bf00      	nop
 8013b04:	24002acc 	.word	0x24002acc

08013b08 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8013b08:	b590      	push	{r4, r7, lr}
 8013b0a:	b087      	sub	sp, #28
 8013b0c:	af00      	add	r7, sp, #0
 8013b0e:	60b9      	str	r1, [r7, #8]
 8013b10:	607a      	str	r2, [r7, #4]
 8013b12:	603b      	str	r3, [r7, #0]
 8013b14:	4603      	mov	r3, r0
 8013b16:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8013b18:	7bfb      	ldrb	r3, [r7, #15]
 8013b1a:	4a0a      	ldr	r2, [pc, #40]	@ (8013b44 <disk_write+0x3c>)
 8013b1c:	009b      	lsls	r3, r3, #2
 8013b1e:	4413      	add	r3, r2
 8013b20:	685b      	ldr	r3, [r3, #4]
 8013b22:	68dc      	ldr	r4, [r3, #12]
 8013b24:	7bfb      	ldrb	r3, [r7, #15]
 8013b26:	4a07      	ldr	r2, [pc, #28]	@ (8013b44 <disk_write+0x3c>)
 8013b28:	4413      	add	r3, r2
 8013b2a:	7a18      	ldrb	r0, [r3, #8]
 8013b2c:	683b      	ldr	r3, [r7, #0]
 8013b2e:	687a      	ldr	r2, [r7, #4]
 8013b30:	68b9      	ldr	r1, [r7, #8]
 8013b32:	47a0      	blx	r4
 8013b34:	4603      	mov	r3, r0
 8013b36:	75fb      	strb	r3, [r7, #23]
  return res;
 8013b38:	7dfb      	ldrb	r3, [r7, #23]
}
 8013b3a:	4618      	mov	r0, r3
 8013b3c:	371c      	adds	r7, #28
 8013b3e:	46bd      	mov	sp, r7
 8013b40:	bd90      	pop	{r4, r7, pc}
 8013b42:	bf00      	nop
 8013b44:	24002acc 	.word	0x24002acc

08013b48 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8013b48:	b580      	push	{r7, lr}
 8013b4a:	b084      	sub	sp, #16
 8013b4c:	af00      	add	r7, sp, #0
 8013b4e:	4603      	mov	r3, r0
 8013b50:	603a      	str	r2, [r7, #0]
 8013b52:	71fb      	strb	r3, [r7, #7]
 8013b54:	460b      	mov	r3, r1
 8013b56:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8013b58:	79fb      	ldrb	r3, [r7, #7]
 8013b5a:	4a09      	ldr	r2, [pc, #36]	@ (8013b80 <disk_ioctl+0x38>)
 8013b5c:	009b      	lsls	r3, r3, #2
 8013b5e:	4413      	add	r3, r2
 8013b60:	685b      	ldr	r3, [r3, #4]
 8013b62:	691b      	ldr	r3, [r3, #16]
 8013b64:	79fa      	ldrb	r2, [r7, #7]
 8013b66:	4906      	ldr	r1, [pc, #24]	@ (8013b80 <disk_ioctl+0x38>)
 8013b68:	440a      	add	r2, r1
 8013b6a:	7a10      	ldrb	r0, [r2, #8]
 8013b6c:	79b9      	ldrb	r1, [r7, #6]
 8013b6e:	683a      	ldr	r2, [r7, #0]
 8013b70:	4798      	blx	r3
 8013b72:	4603      	mov	r3, r0
 8013b74:	73fb      	strb	r3, [r7, #15]
  return res;
 8013b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8013b78:	4618      	mov	r0, r3
 8013b7a:	3710      	adds	r7, #16
 8013b7c:	46bd      	mov	sp, r7
 8013b7e:	bd80      	pop	{r7, pc}
 8013b80:	24002acc 	.word	0x24002acc

08013b84 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8013b84:	b480      	push	{r7}
 8013b86:	b085      	sub	sp, #20
 8013b88:	af00      	add	r7, sp, #0
 8013b8a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	3301      	adds	r3, #1
 8013b90:	781b      	ldrb	r3, [r3, #0]
 8013b92:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8013b94:	89fb      	ldrh	r3, [r7, #14]
 8013b96:	021b      	lsls	r3, r3, #8
 8013b98:	b21a      	sxth	r2, r3
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	781b      	ldrb	r3, [r3, #0]
 8013b9e:	b21b      	sxth	r3, r3
 8013ba0:	4313      	orrs	r3, r2
 8013ba2:	b21b      	sxth	r3, r3
 8013ba4:	81fb      	strh	r3, [r7, #14]
	return rv;
 8013ba6:	89fb      	ldrh	r3, [r7, #14]
}
 8013ba8:	4618      	mov	r0, r3
 8013baa:	3714      	adds	r7, #20
 8013bac:	46bd      	mov	sp, r7
 8013bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bb2:	4770      	bx	lr

08013bb4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8013bb4:	b480      	push	{r7}
 8013bb6:	b085      	sub	sp, #20
 8013bb8:	af00      	add	r7, sp, #0
 8013bba:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	3303      	adds	r3, #3
 8013bc0:	781b      	ldrb	r3, [r3, #0]
 8013bc2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8013bc4:	68fb      	ldr	r3, [r7, #12]
 8013bc6:	021b      	lsls	r3, r3, #8
 8013bc8:	687a      	ldr	r2, [r7, #4]
 8013bca:	3202      	adds	r2, #2
 8013bcc:	7812      	ldrb	r2, [r2, #0]
 8013bce:	4313      	orrs	r3, r2
 8013bd0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8013bd2:	68fb      	ldr	r3, [r7, #12]
 8013bd4:	021b      	lsls	r3, r3, #8
 8013bd6:	687a      	ldr	r2, [r7, #4]
 8013bd8:	3201      	adds	r2, #1
 8013bda:	7812      	ldrb	r2, [r2, #0]
 8013bdc:	4313      	orrs	r3, r2
 8013bde:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8013be0:	68fb      	ldr	r3, [r7, #12]
 8013be2:	021b      	lsls	r3, r3, #8
 8013be4:	687a      	ldr	r2, [r7, #4]
 8013be6:	7812      	ldrb	r2, [r2, #0]
 8013be8:	4313      	orrs	r3, r2
 8013bea:	60fb      	str	r3, [r7, #12]
	return rv;
 8013bec:	68fb      	ldr	r3, [r7, #12]
}
 8013bee:	4618      	mov	r0, r3
 8013bf0:	3714      	adds	r7, #20
 8013bf2:	46bd      	mov	sp, r7
 8013bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bf8:	4770      	bx	lr

08013bfa <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8013bfa:	b480      	push	{r7}
 8013bfc:	b083      	sub	sp, #12
 8013bfe:	af00      	add	r7, sp, #0
 8013c00:	6078      	str	r0, [r7, #4]
 8013c02:	460b      	mov	r3, r1
 8013c04:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	1c5a      	adds	r2, r3, #1
 8013c0a:	607a      	str	r2, [r7, #4]
 8013c0c:	887a      	ldrh	r2, [r7, #2]
 8013c0e:	b2d2      	uxtb	r2, r2
 8013c10:	701a      	strb	r2, [r3, #0]
 8013c12:	887b      	ldrh	r3, [r7, #2]
 8013c14:	0a1b      	lsrs	r3, r3, #8
 8013c16:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	1c5a      	adds	r2, r3, #1
 8013c1c:	607a      	str	r2, [r7, #4]
 8013c1e:	887a      	ldrh	r2, [r7, #2]
 8013c20:	b2d2      	uxtb	r2, r2
 8013c22:	701a      	strb	r2, [r3, #0]
}
 8013c24:	bf00      	nop
 8013c26:	370c      	adds	r7, #12
 8013c28:	46bd      	mov	sp, r7
 8013c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c2e:	4770      	bx	lr

08013c30 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8013c30:	b480      	push	{r7}
 8013c32:	b083      	sub	sp, #12
 8013c34:	af00      	add	r7, sp, #0
 8013c36:	6078      	str	r0, [r7, #4]
 8013c38:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	1c5a      	adds	r2, r3, #1
 8013c3e:	607a      	str	r2, [r7, #4]
 8013c40:	683a      	ldr	r2, [r7, #0]
 8013c42:	b2d2      	uxtb	r2, r2
 8013c44:	701a      	strb	r2, [r3, #0]
 8013c46:	683b      	ldr	r3, [r7, #0]
 8013c48:	0a1b      	lsrs	r3, r3, #8
 8013c4a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	1c5a      	adds	r2, r3, #1
 8013c50:	607a      	str	r2, [r7, #4]
 8013c52:	683a      	ldr	r2, [r7, #0]
 8013c54:	b2d2      	uxtb	r2, r2
 8013c56:	701a      	strb	r2, [r3, #0]
 8013c58:	683b      	ldr	r3, [r7, #0]
 8013c5a:	0a1b      	lsrs	r3, r3, #8
 8013c5c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	1c5a      	adds	r2, r3, #1
 8013c62:	607a      	str	r2, [r7, #4]
 8013c64:	683a      	ldr	r2, [r7, #0]
 8013c66:	b2d2      	uxtb	r2, r2
 8013c68:	701a      	strb	r2, [r3, #0]
 8013c6a:	683b      	ldr	r3, [r7, #0]
 8013c6c:	0a1b      	lsrs	r3, r3, #8
 8013c6e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	1c5a      	adds	r2, r3, #1
 8013c74:	607a      	str	r2, [r7, #4]
 8013c76:	683a      	ldr	r2, [r7, #0]
 8013c78:	b2d2      	uxtb	r2, r2
 8013c7a:	701a      	strb	r2, [r3, #0]
}
 8013c7c:	bf00      	nop
 8013c7e:	370c      	adds	r7, #12
 8013c80:	46bd      	mov	sp, r7
 8013c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c86:	4770      	bx	lr

08013c88 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8013c88:	b480      	push	{r7}
 8013c8a:	b087      	sub	sp, #28
 8013c8c:	af00      	add	r7, sp, #0
 8013c8e:	60f8      	str	r0, [r7, #12]
 8013c90:	60b9      	str	r1, [r7, #8]
 8013c92:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8013c94:	68fb      	ldr	r3, [r7, #12]
 8013c96:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8013c98:	68bb      	ldr	r3, [r7, #8]
 8013c9a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	d00d      	beq.n	8013cbe <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8013ca2:	693a      	ldr	r2, [r7, #16]
 8013ca4:	1c53      	adds	r3, r2, #1
 8013ca6:	613b      	str	r3, [r7, #16]
 8013ca8:	697b      	ldr	r3, [r7, #20]
 8013caa:	1c59      	adds	r1, r3, #1
 8013cac:	6179      	str	r1, [r7, #20]
 8013cae:	7812      	ldrb	r2, [r2, #0]
 8013cb0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	3b01      	subs	r3, #1
 8013cb6:	607b      	str	r3, [r7, #4]
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	2b00      	cmp	r3, #0
 8013cbc:	d1f1      	bne.n	8013ca2 <mem_cpy+0x1a>
	}
}
 8013cbe:	bf00      	nop
 8013cc0:	371c      	adds	r7, #28
 8013cc2:	46bd      	mov	sp, r7
 8013cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cc8:	4770      	bx	lr

08013cca <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8013cca:	b480      	push	{r7}
 8013ccc:	b087      	sub	sp, #28
 8013cce:	af00      	add	r7, sp, #0
 8013cd0:	60f8      	str	r0, [r7, #12]
 8013cd2:	60b9      	str	r1, [r7, #8]
 8013cd4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8013cd6:	68fb      	ldr	r3, [r7, #12]
 8013cd8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8013cda:	697b      	ldr	r3, [r7, #20]
 8013cdc:	1c5a      	adds	r2, r3, #1
 8013cde:	617a      	str	r2, [r7, #20]
 8013ce0:	68ba      	ldr	r2, [r7, #8]
 8013ce2:	b2d2      	uxtb	r2, r2
 8013ce4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	3b01      	subs	r3, #1
 8013cea:	607b      	str	r3, [r7, #4]
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d1f3      	bne.n	8013cda <mem_set+0x10>
}
 8013cf2:	bf00      	nop
 8013cf4:	bf00      	nop
 8013cf6:	371c      	adds	r7, #28
 8013cf8:	46bd      	mov	sp, r7
 8013cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cfe:	4770      	bx	lr

08013d00 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8013d00:	b580      	push	{r7, lr}
 8013d02:	b082      	sub	sp, #8
 8013d04:	af00      	add	r7, sp, #0
 8013d06:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	2b00      	cmp	r3, #0
 8013d0c:	d009      	beq.n	8013d22 <lock_fs+0x22>
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	691b      	ldr	r3, [r3, #16]
 8013d12:	4618      	mov	r0, r3
 8013d14:	f000 fe6f 	bl	80149f6 <ff_req_grant>
 8013d18:	4603      	mov	r3, r0
 8013d1a:	2b00      	cmp	r3, #0
 8013d1c:	d001      	beq.n	8013d22 <lock_fs+0x22>
 8013d1e:	2301      	movs	r3, #1
 8013d20:	e000      	b.n	8013d24 <lock_fs+0x24>
 8013d22:	2300      	movs	r3, #0
}
 8013d24:	4618      	mov	r0, r3
 8013d26:	3708      	adds	r7, #8
 8013d28:	46bd      	mov	sp, r7
 8013d2a:	bd80      	pop	{r7, pc}

08013d2c <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8013d2c:	b580      	push	{r7, lr}
 8013d2e:	b082      	sub	sp, #8
 8013d30:	af00      	add	r7, sp, #0
 8013d32:	6078      	str	r0, [r7, #4]
 8013d34:	460b      	mov	r3, r1
 8013d36:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	2b00      	cmp	r3, #0
 8013d3c:	d00d      	beq.n	8013d5a <unlock_fs+0x2e>
 8013d3e:	78fb      	ldrb	r3, [r7, #3]
 8013d40:	2b0c      	cmp	r3, #12
 8013d42:	d00a      	beq.n	8013d5a <unlock_fs+0x2e>
 8013d44:	78fb      	ldrb	r3, [r7, #3]
 8013d46:	2b0b      	cmp	r3, #11
 8013d48:	d007      	beq.n	8013d5a <unlock_fs+0x2e>
 8013d4a:	78fb      	ldrb	r3, [r7, #3]
 8013d4c:	2b0f      	cmp	r3, #15
 8013d4e:	d004      	beq.n	8013d5a <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	691b      	ldr	r3, [r3, #16]
 8013d54:	4618      	mov	r0, r3
 8013d56:	f000 fe63 	bl	8014a20 <ff_rel_grant>
	}
}
 8013d5a:	bf00      	nop
 8013d5c:	3708      	adds	r7, #8
 8013d5e:	46bd      	mov	sp, r7
 8013d60:	bd80      	pop	{r7, pc}

08013d62 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8013d62:	b580      	push	{r7, lr}
 8013d64:	b086      	sub	sp, #24
 8013d66:	af00      	add	r7, sp, #0
 8013d68:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8013d6a:	2300      	movs	r3, #0
 8013d6c:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	78db      	ldrb	r3, [r3, #3]
 8013d72:	2b00      	cmp	r3, #0
 8013d74:	d034      	beq.n	8013de0 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013d7a:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	7858      	ldrb	r0, [r3, #1]
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8013d86:	2301      	movs	r3, #1
 8013d88:	697a      	ldr	r2, [r7, #20]
 8013d8a:	f7ff febd 	bl	8013b08 <disk_write>
 8013d8e:	4603      	mov	r3, r0
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	d002      	beq.n	8013d9a <sync_window+0x38>
			res = FR_DISK_ERR;
 8013d94:	2301      	movs	r3, #1
 8013d96:	73fb      	strb	r3, [r7, #15]
 8013d98:	e022      	b.n	8013de0 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	2200      	movs	r2, #0
 8013d9e:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013da4:	697a      	ldr	r2, [r7, #20]
 8013da6:	1ad2      	subs	r2, r2, r3
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	6a1b      	ldr	r3, [r3, #32]
 8013dac:	429a      	cmp	r2, r3
 8013dae:	d217      	bcs.n	8013de0 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	789b      	ldrb	r3, [r3, #2]
 8013db4:	613b      	str	r3, [r7, #16]
 8013db6:	e010      	b.n	8013dda <sync_window+0x78>
					wsect += fs->fsize;
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	6a1b      	ldr	r3, [r3, #32]
 8013dbc:	697a      	ldr	r2, [r7, #20]
 8013dbe:	4413      	add	r3, r2
 8013dc0:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	7858      	ldrb	r0, [r3, #1]
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8013dcc:	2301      	movs	r3, #1
 8013dce:	697a      	ldr	r2, [r7, #20]
 8013dd0:	f7ff fe9a 	bl	8013b08 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8013dd4:	693b      	ldr	r3, [r7, #16]
 8013dd6:	3b01      	subs	r3, #1
 8013dd8:	613b      	str	r3, [r7, #16]
 8013dda:	693b      	ldr	r3, [r7, #16]
 8013ddc:	2b01      	cmp	r3, #1
 8013dde:	d8eb      	bhi.n	8013db8 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8013de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8013de2:	4618      	mov	r0, r3
 8013de4:	3718      	adds	r7, #24
 8013de6:	46bd      	mov	sp, r7
 8013de8:	bd80      	pop	{r7, pc}

08013dea <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8013dea:	b580      	push	{r7, lr}
 8013dec:	b084      	sub	sp, #16
 8013dee:	af00      	add	r7, sp, #0
 8013df0:	6078      	str	r0, [r7, #4]
 8013df2:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8013df4:	2300      	movs	r3, #0
 8013df6:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013dfc:	683a      	ldr	r2, [r7, #0]
 8013dfe:	429a      	cmp	r2, r3
 8013e00:	d01b      	beq.n	8013e3a <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8013e02:	6878      	ldr	r0, [r7, #4]
 8013e04:	f7ff ffad 	bl	8013d62 <sync_window>
 8013e08:	4603      	mov	r3, r0
 8013e0a:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8013e0c:	7bfb      	ldrb	r3, [r7, #15]
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	d113      	bne.n	8013e3a <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	7858      	ldrb	r0, [r3, #1]
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8013e1c:	2301      	movs	r3, #1
 8013e1e:	683a      	ldr	r2, [r7, #0]
 8013e20:	f7ff fe52 	bl	8013ac8 <disk_read>
 8013e24:	4603      	mov	r3, r0
 8013e26:	2b00      	cmp	r3, #0
 8013e28:	d004      	beq.n	8013e34 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8013e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8013e2e:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8013e30:	2301      	movs	r3, #1
 8013e32:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	683a      	ldr	r2, [r7, #0]
 8013e38:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8013e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8013e3c:	4618      	mov	r0, r3
 8013e3e:	3710      	adds	r7, #16
 8013e40:	46bd      	mov	sp, r7
 8013e42:	bd80      	pop	{r7, pc}

08013e44 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8013e44:	b580      	push	{r7, lr}
 8013e46:	b084      	sub	sp, #16
 8013e48:	af00      	add	r7, sp, #0
 8013e4a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8013e4c:	6878      	ldr	r0, [r7, #4]
 8013e4e:	f7ff ff88 	bl	8013d62 <sync_window>
 8013e52:	4603      	mov	r3, r0
 8013e54:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8013e56:	7bfb      	ldrb	r3, [r7, #15]
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	d158      	bne.n	8013f0e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	781b      	ldrb	r3, [r3, #0]
 8013e60:	2b03      	cmp	r3, #3
 8013e62:	d148      	bne.n	8013ef6 <sync_fs+0xb2>
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	791b      	ldrb	r3, [r3, #4]
 8013e68:	2b01      	cmp	r3, #1
 8013e6a:	d144      	bne.n	8013ef6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	3338      	adds	r3, #56	@ 0x38
 8013e70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013e74:	2100      	movs	r1, #0
 8013e76:	4618      	mov	r0, r3
 8013e78:	f7ff ff27 	bl	8013cca <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	3338      	adds	r3, #56	@ 0x38
 8013e80:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8013e84:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8013e88:	4618      	mov	r0, r3
 8013e8a:	f7ff feb6 	bl	8013bfa <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	3338      	adds	r3, #56	@ 0x38
 8013e92:	4921      	ldr	r1, [pc, #132]	@ (8013f18 <sync_fs+0xd4>)
 8013e94:	4618      	mov	r0, r3
 8013e96:	f7ff fecb 	bl	8013c30 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	3338      	adds	r3, #56	@ 0x38
 8013e9e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8013ea2:	491e      	ldr	r1, [pc, #120]	@ (8013f1c <sync_fs+0xd8>)
 8013ea4:	4618      	mov	r0, r3
 8013ea6:	f7ff fec3 	bl	8013c30 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	3338      	adds	r3, #56	@ 0x38
 8013eae:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	699b      	ldr	r3, [r3, #24]
 8013eb6:	4619      	mov	r1, r3
 8013eb8:	4610      	mov	r0, r2
 8013eba:	f7ff feb9 	bl	8013c30 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	3338      	adds	r3, #56	@ 0x38
 8013ec2:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	695b      	ldr	r3, [r3, #20]
 8013eca:	4619      	mov	r1, r3
 8013ecc:	4610      	mov	r0, r2
 8013ece:	f7ff feaf 	bl	8013c30 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013ed6:	1c5a      	adds	r2, r3, #1
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	7858      	ldrb	r0, [r3, #1]
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013eea:	2301      	movs	r3, #1
 8013eec:	f7ff fe0c 	bl	8013b08 <disk_write>
			fs->fsi_flag = 0;
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	2200      	movs	r2, #0
 8013ef4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	785b      	ldrb	r3, [r3, #1]
 8013efa:	2200      	movs	r2, #0
 8013efc:	2100      	movs	r1, #0
 8013efe:	4618      	mov	r0, r3
 8013f00:	f7ff fe22 	bl	8013b48 <disk_ioctl>
 8013f04:	4603      	mov	r3, r0
 8013f06:	2b00      	cmp	r3, #0
 8013f08:	d001      	beq.n	8013f0e <sync_fs+0xca>
 8013f0a:	2301      	movs	r3, #1
 8013f0c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8013f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013f10:	4618      	mov	r0, r3
 8013f12:	3710      	adds	r7, #16
 8013f14:	46bd      	mov	sp, r7
 8013f16:	bd80      	pop	{r7, pc}
 8013f18:	41615252 	.word	0x41615252
 8013f1c:	61417272 	.word	0x61417272

08013f20 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8013f20:	b480      	push	{r7}
 8013f22:	b083      	sub	sp, #12
 8013f24:	af00      	add	r7, sp, #0
 8013f26:	6078      	str	r0, [r7, #4]
 8013f28:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8013f2a:	683b      	ldr	r3, [r7, #0]
 8013f2c:	3b02      	subs	r3, #2
 8013f2e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	69db      	ldr	r3, [r3, #28]
 8013f34:	3b02      	subs	r3, #2
 8013f36:	683a      	ldr	r2, [r7, #0]
 8013f38:	429a      	cmp	r2, r3
 8013f3a:	d301      	bcc.n	8013f40 <clust2sect+0x20>
 8013f3c:	2300      	movs	r3, #0
 8013f3e:	e008      	b.n	8013f52 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	895b      	ldrh	r3, [r3, #10]
 8013f44:	461a      	mov	r2, r3
 8013f46:	683b      	ldr	r3, [r7, #0]
 8013f48:	fb03 f202 	mul.w	r2, r3, r2
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013f50:	4413      	add	r3, r2
}
 8013f52:	4618      	mov	r0, r3
 8013f54:	370c      	adds	r7, #12
 8013f56:	46bd      	mov	sp, r7
 8013f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f5c:	4770      	bx	lr

08013f5e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8013f5e:	b580      	push	{r7, lr}
 8013f60:	b086      	sub	sp, #24
 8013f62:	af00      	add	r7, sp, #0
 8013f64:	6078      	str	r0, [r7, #4]
 8013f66:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	681b      	ldr	r3, [r3, #0]
 8013f6c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8013f6e:	683b      	ldr	r3, [r7, #0]
 8013f70:	2b01      	cmp	r3, #1
 8013f72:	d904      	bls.n	8013f7e <get_fat+0x20>
 8013f74:	693b      	ldr	r3, [r7, #16]
 8013f76:	69db      	ldr	r3, [r3, #28]
 8013f78:	683a      	ldr	r2, [r7, #0]
 8013f7a:	429a      	cmp	r2, r3
 8013f7c:	d302      	bcc.n	8013f84 <get_fat+0x26>
		val = 1;	/* Internal error */
 8013f7e:	2301      	movs	r3, #1
 8013f80:	617b      	str	r3, [r7, #20]
 8013f82:	e08e      	b.n	80140a2 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8013f84:	f04f 33ff 	mov.w	r3, #4294967295
 8013f88:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8013f8a:	693b      	ldr	r3, [r7, #16]
 8013f8c:	781b      	ldrb	r3, [r3, #0]
 8013f8e:	2b03      	cmp	r3, #3
 8013f90:	d061      	beq.n	8014056 <get_fat+0xf8>
 8013f92:	2b03      	cmp	r3, #3
 8013f94:	dc7b      	bgt.n	801408e <get_fat+0x130>
 8013f96:	2b01      	cmp	r3, #1
 8013f98:	d002      	beq.n	8013fa0 <get_fat+0x42>
 8013f9a:	2b02      	cmp	r3, #2
 8013f9c:	d041      	beq.n	8014022 <get_fat+0xc4>
 8013f9e:	e076      	b.n	801408e <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8013fa0:	683b      	ldr	r3, [r7, #0]
 8013fa2:	60fb      	str	r3, [r7, #12]
 8013fa4:	68fb      	ldr	r3, [r7, #12]
 8013fa6:	085b      	lsrs	r3, r3, #1
 8013fa8:	68fa      	ldr	r2, [r7, #12]
 8013faa:	4413      	add	r3, r2
 8013fac:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013fae:	693b      	ldr	r3, [r7, #16]
 8013fb0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013fb2:	68fb      	ldr	r3, [r7, #12]
 8013fb4:	0a5b      	lsrs	r3, r3, #9
 8013fb6:	4413      	add	r3, r2
 8013fb8:	4619      	mov	r1, r3
 8013fba:	6938      	ldr	r0, [r7, #16]
 8013fbc:	f7ff ff15 	bl	8013dea <move_window>
 8013fc0:	4603      	mov	r3, r0
 8013fc2:	2b00      	cmp	r3, #0
 8013fc4:	d166      	bne.n	8014094 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8013fc6:	68fb      	ldr	r3, [r7, #12]
 8013fc8:	1c5a      	adds	r2, r3, #1
 8013fca:	60fa      	str	r2, [r7, #12]
 8013fcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013fd0:	693a      	ldr	r2, [r7, #16]
 8013fd2:	4413      	add	r3, r2
 8013fd4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8013fd8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013fda:	693b      	ldr	r3, [r7, #16]
 8013fdc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013fde:	68fb      	ldr	r3, [r7, #12]
 8013fe0:	0a5b      	lsrs	r3, r3, #9
 8013fe2:	4413      	add	r3, r2
 8013fe4:	4619      	mov	r1, r3
 8013fe6:	6938      	ldr	r0, [r7, #16]
 8013fe8:	f7ff feff 	bl	8013dea <move_window>
 8013fec:	4603      	mov	r3, r0
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	d152      	bne.n	8014098 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8013ff2:	68fb      	ldr	r3, [r7, #12]
 8013ff4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013ff8:	693a      	ldr	r2, [r7, #16]
 8013ffa:	4413      	add	r3, r2
 8013ffc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8014000:	021b      	lsls	r3, r3, #8
 8014002:	68ba      	ldr	r2, [r7, #8]
 8014004:	4313      	orrs	r3, r2
 8014006:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8014008:	683b      	ldr	r3, [r7, #0]
 801400a:	f003 0301 	and.w	r3, r3, #1
 801400e:	2b00      	cmp	r3, #0
 8014010:	d002      	beq.n	8014018 <get_fat+0xba>
 8014012:	68bb      	ldr	r3, [r7, #8]
 8014014:	091b      	lsrs	r3, r3, #4
 8014016:	e002      	b.n	801401e <get_fat+0xc0>
 8014018:	68bb      	ldr	r3, [r7, #8]
 801401a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801401e:	617b      	str	r3, [r7, #20]
			break;
 8014020:	e03f      	b.n	80140a2 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8014022:	693b      	ldr	r3, [r7, #16]
 8014024:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8014026:	683b      	ldr	r3, [r7, #0]
 8014028:	0a1b      	lsrs	r3, r3, #8
 801402a:	4413      	add	r3, r2
 801402c:	4619      	mov	r1, r3
 801402e:	6938      	ldr	r0, [r7, #16]
 8014030:	f7ff fedb 	bl	8013dea <move_window>
 8014034:	4603      	mov	r3, r0
 8014036:	2b00      	cmp	r3, #0
 8014038:	d130      	bne.n	801409c <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801403a:	693b      	ldr	r3, [r7, #16]
 801403c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8014040:	683b      	ldr	r3, [r7, #0]
 8014042:	005b      	lsls	r3, r3, #1
 8014044:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8014048:	4413      	add	r3, r2
 801404a:	4618      	mov	r0, r3
 801404c:	f7ff fd9a 	bl	8013b84 <ld_word>
 8014050:	4603      	mov	r3, r0
 8014052:	617b      	str	r3, [r7, #20]
			break;
 8014054:	e025      	b.n	80140a2 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8014056:	693b      	ldr	r3, [r7, #16]
 8014058:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801405a:	683b      	ldr	r3, [r7, #0]
 801405c:	09db      	lsrs	r3, r3, #7
 801405e:	4413      	add	r3, r2
 8014060:	4619      	mov	r1, r3
 8014062:	6938      	ldr	r0, [r7, #16]
 8014064:	f7ff fec1 	bl	8013dea <move_window>
 8014068:	4603      	mov	r3, r0
 801406a:	2b00      	cmp	r3, #0
 801406c:	d118      	bne.n	80140a0 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801406e:	693b      	ldr	r3, [r7, #16]
 8014070:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8014074:	683b      	ldr	r3, [r7, #0]
 8014076:	009b      	lsls	r3, r3, #2
 8014078:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 801407c:	4413      	add	r3, r2
 801407e:	4618      	mov	r0, r3
 8014080:	f7ff fd98 	bl	8013bb4 <ld_dword>
 8014084:	4603      	mov	r3, r0
 8014086:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 801408a:	617b      	str	r3, [r7, #20]
			break;
 801408c:	e009      	b.n	80140a2 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801408e:	2301      	movs	r3, #1
 8014090:	617b      	str	r3, [r7, #20]
 8014092:	e006      	b.n	80140a2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014094:	bf00      	nop
 8014096:	e004      	b.n	80140a2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014098:	bf00      	nop
 801409a:	e002      	b.n	80140a2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801409c:	bf00      	nop
 801409e:	e000      	b.n	80140a2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80140a0:	bf00      	nop
		}
	}

	return val;
 80140a2:	697b      	ldr	r3, [r7, #20]
}
 80140a4:	4618      	mov	r0, r3
 80140a6:	3718      	adds	r7, #24
 80140a8:	46bd      	mov	sp, r7
 80140aa:	bd80      	pop	{r7, pc}

080140ac <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80140ac:	b590      	push	{r4, r7, lr}
 80140ae:	b089      	sub	sp, #36	@ 0x24
 80140b0:	af00      	add	r7, sp, #0
 80140b2:	60f8      	str	r0, [r7, #12]
 80140b4:	60b9      	str	r1, [r7, #8]
 80140b6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80140b8:	2302      	movs	r3, #2
 80140ba:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80140bc:	68bb      	ldr	r3, [r7, #8]
 80140be:	2b01      	cmp	r3, #1
 80140c0:	f240 80d9 	bls.w	8014276 <put_fat+0x1ca>
 80140c4:	68fb      	ldr	r3, [r7, #12]
 80140c6:	69db      	ldr	r3, [r3, #28]
 80140c8:	68ba      	ldr	r2, [r7, #8]
 80140ca:	429a      	cmp	r2, r3
 80140cc:	f080 80d3 	bcs.w	8014276 <put_fat+0x1ca>
		switch (fs->fs_type) {
 80140d0:	68fb      	ldr	r3, [r7, #12]
 80140d2:	781b      	ldrb	r3, [r3, #0]
 80140d4:	2b03      	cmp	r3, #3
 80140d6:	f000 8096 	beq.w	8014206 <put_fat+0x15a>
 80140da:	2b03      	cmp	r3, #3
 80140dc:	f300 80cb 	bgt.w	8014276 <put_fat+0x1ca>
 80140e0:	2b01      	cmp	r3, #1
 80140e2:	d002      	beq.n	80140ea <put_fat+0x3e>
 80140e4:	2b02      	cmp	r3, #2
 80140e6:	d06e      	beq.n	80141c6 <put_fat+0x11a>
 80140e8:	e0c5      	b.n	8014276 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80140ea:	68bb      	ldr	r3, [r7, #8]
 80140ec:	61bb      	str	r3, [r7, #24]
 80140ee:	69bb      	ldr	r3, [r7, #24]
 80140f0:	085b      	lsrs	r3, r3, #1
 80140f2:	69ba      	ldr	r2, [r7, #24]
 80140f4:	4413      	add	r3, r2
 80140f6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80140f8:	68fb      	ldr	r3, [r7, #12]
 80140fa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80140fc:	69bb      	ldr	r3, [r7, #24]
 80140fe:	0a5b      	lsrs	r3, r3, #9
 8014100:	4413      	add	r3, r2
 8014102:	4619      	mov	r1, r3
 8014104:	68f8      	ldr	r0, [r7, #12]
 8014106:	f7ff fe70 	bl	8013dea <move_window>
 801410a:	4603      	mov	r3, r0
 801410c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801410e:	7ffb      	ldrb	r3, [r7, #31]
 8014110:	2b00      	cmp	r3, #0
 8014112:	f040 80a9 	bne.w	8014268 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8014116:	68fb      	ldr	r3, [r7, #12]
 8014118:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 801411c:	69bb      	ldr	r3, [r7, #24]
 801411e:	1c59      	adds	r1, r3, #1
 8014120:	61b9      	str	r1, [r7, #24]
 8014122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014126:	4413      	add	r3, r2
 8014128:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801412a:	68bb      	ldr	r3, [r7, #8]
 801412c:	f003 0301 	and.w	r3, r3, #1
 8014130:	2b00      	cmp	r3, #0
 8014132:	d00d      	beq.n	8014150 <put_fat+0xa4>
 8014134:	697b      	ldr	r3, [r7, #20]
 8014136:	781b      	ldrb	r3, [r3, #0]
 8014138:	b25b      	sxtb	r3, r3
 801413a:	f003 030f 	and.w	r3, r3, #15
 801413e:	b25a      	sxtb	r2, r3
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	b2db      	uxtb	r3, r3
 8014144:	011b      	lsls	r3, r3, #4
 8014146:	b25b      	sxtb	r3, r3
 8014148:	4313      	orrs	r3, r2
 801414a:	b25b      	sxtb	r3, r3
 801414c:	b2db      	uxtb	r3, r3
 801414e:	e001      	b.n	8014154 <put_fat+0xa8>
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	b2db      	uxtb	r3, r3
 8014154:	697a      	ldr	r2, [r7, #20]
 8014156:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8014158:	68fb      	ldr	r3, [r7, #12]
 801415a:	2201      	movs	r2, #1
 801415c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801415e:	68fb      	ldr	r3, [r7, #12]
 8014160:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8014162:	69bb      	ldr	r3, [r7, #24]
 8014164:	0a5b      	lsrs	r3, r3, #9
 8014166:	4413      	add	r3, r2
 8014168:	4619      	mov	r1, r3
 801416a:	68f8      	ldr	r0, [r7, #12]
 801416c:	f7ff fe3d 	bl	8013dea <move_window>
 8014170:	4603      	mov	r3, r0
 8014172:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8014174:	7ffb      	ldrb	r3, [r7, #31]
 8014176:	2b00      	cmp	r3, #0
 8014178:	d178      	bne.n	801426c <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 801417a:	68fb      	ldr	r3, [r7, #12]
 801417c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8014180:	69bb      	ldr	r3, [r7, #24]
 8014182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014186:	4413      	add	r3, r2
 8014188:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801418a:	68bb      	ldr	r3, [r7, #8]
 801418c:	f003 0301 	and.w	r3, r3, #1
 8014190:	2b00      	cmp	r3, #0
 8014192:	d003      	beq.n	801419c <put_fat+0xf0>
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	091b      	lsrs	r3, r3, #4
 8014198:	b2db      	uxtb	r3, r3
 801419a:	e00e      	b.n	80141ba <put_fat+0x10e>
 801419c:	697b      	ldr	r3, [r7, #20]
 801419e:	781b      	ldrb	r3, [r3, #0]
 80141a0:	b25b      	sxtb	r3, r3
 80141a2:	f023 030f 	bic.w	r3, r3, #15
 80141a6:	b25a      	sxtb	r2, r3
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	0a1b      	lsrs	r3, r3, #8
 80141ac:	b25b      	sxtb	r3, r3
 80141ae:	f003 030f 	and.w	r3, r3, #15
 80141b2:	b25b      	sxtb	r3, r3
 80141b4:	4313      	orrs	r3, r2
 80141b6:	b25b      	sxtb	r3, r3
 80141b8:	b2db      	uxtb	r3, r3
 80141ba:	697a      	ldr	r2, [r7, #20]
 80141bc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80141be:	68fb      	ldr	r3, [r7, #12]
 80141c0:	2201      	movs	r2, #1
 80141c2:	70da      	strb	r2, [r3, #3]
			break;
 80141c4:	e057      	b.n	8014276 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80141c6:	68fb      	ldr	r3, [r7, #12]
 80141c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80141ca:	68bb      	ldr	r3, [r7, #8]
 80141cc:	0a1b      	lsrs	r3, r3, #8
 80141ce:	4413      	add	r3, r2
 80141d0:	4619      	mov	r1, r3
 80141d2:	68f8      	ldr	r0, [r7, #12]
 80141d4:	f7ff fe09 	bl	8013dea <move_window>
 80141d8:	4603      	mov	r3, r0
 80141da:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80141dc:	7ffb      	ldrb	r3, [r7, #31]
 80141de:	2b00      	cmp	r3, #0
 80141e0:	d146      	bne.n	8014270 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80141e2:	68fb      	ldr	r3, [r7, #12]
 80141e4:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80141e8:	68bb      	ldr	r3, [r7, #8]
 80141ea:	005b      	lsls	r3, r3, #1
 80141ec:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80141f0:	4413      	add	r3, r2
 80141f2:	687a      	ldr	r2, [r7, #4]
 80141f4:	b292      	uxth	r2, r2
 80141f6:	4611      	mov	r1, r2
 80141f8:	4618      	mov	r0, r3
 80141fa:	f7ff fcfe 	bl	8013bfa <st_word>
			fs->wflag = 1;
 80141fe:	68fb      	ldr	r3, [r7, #12]
 8014200:	2201      	movs	r2, #1
 8014202:	70da      	strb	r2, [r3, #3]
			break;
 8014204:	e037      	b.n	8014276 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8014206:	68fb      	ldr	r3, [r7, #12]
 8014208:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801420a:	68bb      	ldr	r3, [r7, #8]
 801420c:	09db      	lsrs	r3, r3, #7
 801420e:	4413      	add	r3, r2
 8014210:	4619      	mov	r1, r3
 8014212:	68f8      	ldr	r0, [r7, #12]
 8014214:	f7ff fde9 	bl	8013dea <move_window>
 8014218:	4603      	mov	r3, r0
 801421a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801421c:	7ffb      	ldrb	r3, [r7, #31]
 801421e:	2b00      	cmp	r3, #0
 8014220:	d128      	bne.n	8014274 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8014228:	68fb      	ldr	r3, [r7, #12]
 801422a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 801422e:	68bb      	ldr	r3, [r7, #8]
 8014230:	009b      	lsls	r3, r3, #2
 8014232:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8014236:	4413      	add	r3, r2
 8014238:	4618      	mov	r0, r3
 801423a:	f7ff fcbb 	bl	8013bb4 <ld_dword>
 801423e:	4603      	mov	r3, r0
 8014240:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8014244:	4323      	orrs	r3, r4
 8014246:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8014248:	68fb      	ldr	r3, [r7, #12]
 801424a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 801424e:	68bb      	ldr	r3, [r7, #8]
 8014250:	009b      	lsls	r3, r3, #2
 8014252:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8014256:	4413      	add	r3, r2
 8014258:	6879      	ldr	r1, [r7, #4]
 801425a:	4618      	mov	r0, r3
 801425c:	f7ff fce8 	bl	8013c30 <st_dword>
			fs->wflag = 1;
 8014260:	68fb      	ldr	r3, [r7, #12]
 8014262:	2201      	movs	r2, #1
 8014264:	70da      	strb	r2, [r3, #3]
			break;
 8014266:	e006      	b.n	8014276 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8014268:	bf00      	nop
 801426a:	e004      	b.n	8014276 <put_fat+0x1ca>
			if (res != FR_OK) break;
 801426c:	bf00      	nop
 801426e:	e002      	b.n	8014276 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8014270:	bf00      	nop
 8014272:	e000      	b.n	8014276 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8014274:	bf00      	nop
		}
	}
	return res;
 8014276:	7ffb      	ldrb	r3, [r7, #31]
}
 8014278:	4618      	mov	r0, r3
 801427a:	3724      	adds	r7, #36	@ 0x24
 801427c:	46bd      	mov	sp, r7
 801427e:	bd90      	pop	{r4, r7, pc}

08014280 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8014280:	b580      	push	{r7, lr}
 8014282:	b088      	sub	sp, #32
 8014284:	af00      	add	r7, sp, #0
 8014286:	6078      	str	r0, [r7, #4]
 8014288:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	681b      	ldr	r3, [r3, #0]
 801428e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8014290:	683b      	ldr	r3, [r7, #0]
 8014292:	2b00      	cmp	r3, #0
 8014294:	d10d      	bne.n	80142b2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8014296:	693b      	ldr	r3, [r7, #16]
 8014298:	695b      	ldr	r3, [r3, #20]
 801429a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801429c:	69bb      	ldr	r3, [r7, #24]
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d004      	beq.n	80142ac <create_chain+0x2c>
 80142a2:	693b      	ldr	r3, [r7, #16]
 80142a4:	69db      	ldr	r3, [r3, #28]
 80142a6:	69ba      	ldr	r2, [r7, #24]
 80142a8:	429a      	cmp	r2, r3
 80142aa:	d31b      	bcc.n	80142e4 <create_chain+0x64>
 80142ac:	2301      	movs	r3, #1
 80142ae:	61bb      	str	r3, [r7, #24]
 80142b0:	e018      	b.n	80142e4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80142b2:	6839      	ldr	r1, [r7, #0]
 80142b4:	6878      	ldr	r0, [r7, #4]
 80142b6:	f7ff fe52 	bl	8013f5e <get_fat>
 80142ba:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80142bc:	68fb      	ldr	r3, [r7, #12]
 80142be:	2b01      	cmp	r3, #1
 80142c0:	d801      	bhi.n	80142c6 <create_chain+0x46>
 80142c2:	2301      	movs	r3, #1
 80142c4:	e070      	b.n	80143a8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80142c6:	68fb      	ldr	r3, [r7, #12]
 80142c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80142cc:	d101      	bne.n	80142d2 <create_chain+0x52>
 80142ce:	68fb      	ldr	r3, [r7, #12]
 80142d0:	e06a      	b.n	80143a8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80142d2:	693b      	ldr	r3, [r7, #16]
 80142d4:	69db      	ldr	r3, [r3, #28]
 80142d6:	68fa      	ldr	r2, [r7, #12]
 80142d8:	429a      	cmp	r2, r3
 80142da:	d201      	bcs.n	80142e0 <create_chain+0x60>
 80142dc:	68fb      	ldr	r3, [r7, #12]
 80142de:	e063      	b.n	80143a8 <create_chain+0x128>
		scl = clst;
 80142e0:	683b      	ldr	r3, [r7, #0]
 80142e2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80142e4:	69bb      	ldr	r3, [r7, #24]
 80142e6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80142e8:	69fb      	ldr	r3, [r7, #28]
 80142ea:	3301      	adds	r3, #1
 80142ec:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80142ee:	693b      	ldr	r3, [r7, #16]
 80142f0:	69db      	ldr	r3, [r3, #28]
 80142f2:	69fa      	ldr	r2, [r7, #28]
 80142f4:	429a      	cmp	r2, r3
 80142f6:	d307      	bcc.n	8014308 <create_chain+0x88>
				ncl = 2;
 80142f8:	2302      	movs	r3, #2
 80142fa:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80142fc:	69fa      	ldr	r2, [r7, #28]
 80142fe:	69bb      	ldr	r3, [r7, #24]
 8014300:	429a      	cmp	r2, r3
 8014302:	d901      	bls.n	8014308 <create_chain+0x88>
 8014304:	2300      	movs	r3, #0
 8014306:	e04f      	b.n	80143a8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8014308:	69f9      	ldr	r1, [r7, #28]
 801430a:	6878      	ldr	r0, [r7, #4]
 801430c:	f7ff fe27 	bl	8013f5e <get_fat>
 8014310:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8014312:	68fb      	ldr	r3, [r7, #12]
 8014314:	2b00      	cmp	r3, #0
 8014316:	d00e      	beq.n	8014336 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8014318:	68fb      	ldr	r3, [r7, #12]
 801431a:	2b01      	cmp	r3, #1
 801431c:	d003      	beq.n	8014326 <create_chain+0xa6>
 801431e:	68fb      	ldr	r3, [r7, #12]
 8014320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014324:	d101      	bne.n	801432a <create_chain+0xaa>
 8014326:	68fb      	ldr	r3, [r7, #12]
 8014328:	e03e      	b.n	80143a8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801432a:	69fa      	ldr	r2, [r7, #28]
 801432c:	69bb      	ldr	r3, [r7, #24]
 801432e:	429a      	cmp	r2, r3
 8014330:	d1da      	bne.n	80142e8 <create_chain+0x68>
 8014332:	2300      	movs	r3, #0
 8014334:	e038      	b.n	80143a8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8014336:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8014338:	f04f 32ff 	mov.w	r2, #4294967295
 801433c:	69f9      	ldr	r1, [r7, #28]
 801433e:	6938      	ldr	r0, [r7, #16]
 8014340:	f7ff feb4 	bl	80140ac <put_fat>
 8014344:	4603      	mov	r3, r0
 8014346:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8014348:	7dfb      	ldrb	r3, [r7, #23]
 801434a:	2b00      	cmp	r3, #0
 801434c:	d109      	bne.n	8014362 <create_chain+0xe2>
 801434e:	683b      	ldr	r3, [r7, #0]
 8014350:	2b00      	cmp	r3, #0
 8014352:	d006      	beq.n	8014362 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8014354:	69fa      	ldr	r2, [r7, #28]
 8014356:	6839      	ldr	r1, [r7, #0]
 8014358:	6938      	ldr	r0, [r7, #16]
 801435a:	f7ff fea7 	bl	80140ac <put_fat>
 801435e:	4603      	mov	r3, r0
 8014360:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8014362:	7dfb      	ldrb	r3, [r7, #23]
 8014364:	2b00      	cmp	r3, #0
 8014366:	d116      	bne.n	8014396 <create_chain+0x116>
		fs->last_clst = ncl;
 8014368:	693b      	ldr	r3, [r7, #16]
 801436a:	69fa      	ldr	r2, [r7, #28]
 801436c:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801436e:	693b      	ldr	r3, [r7, #16]
 8014370:	699a      	ldr	r2, [r3, #24]
 8014372:	693b      	ldr	r3, [r7, #16]
 8014374:	69db      	ldr	r3, [r3, #28]
 8014376:	3b02      	subs	r3, #2
 8014378:	429a      	cmp	r2, r3
 801437a:	d804      	bhi.n	8014386 <create_chain+0x106>
 801437c:	693b      	ldr	r3, [r7, #16]
 801437e:	699b      	ldr	r3, [r3, #24]
 8014380:	1e5a      	subs	r2, r3, #1
 8014382:	693b      	ldr	r3, [r7, #16]
 8014384:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8014386:	693b      	ldr	r3, [r7, #16]
 8014388:	791b      	ldrb	r3, [r3, #4]
 801438a:	f043 0301 	orr.w	r3, r3, #1
 801438e:	b2da      	uxtb	r2, r3
 8014390:	693b      	ldr	r3, [r7, #16]
 8014392:	711a      	strb	r2, [r3, #4]
 8014394:	e007      	b.n	80143a6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8014396:	7dfb      	ldrb	r3, [r7, #23]
 8014398:	2b01      	cmp	r3, #1
 801439a:	d102      	bne.n	80143a2 <create_chain+0x122>
 801439c:	f04f 33ff 	mov.w	r3, #4294967295
 80143a0:	e000      	b.n	80143a4 <create_chain+0x124>
 80143a2:	2301      	movs	r3, #1
 80143a4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80143a6:	69fb      	ldr	r3, [r7, #28]
}
 80143a8:	4618      	mov	r0, r3
 80143aa:	3720      	adds	r7, #32
 80143ac:	46bd      	mov	sp, r7
 80143ae:	bd80      	pop	{r7, pc}

080143b0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80143b0:	b480      	push	{r7}
 80143b2:	b087      	sub	sp, #28
 80143b4:	af00      	add	r7, sp, #0
 80143b6:	6078      	str	r0, [r7, #4]
 80143b8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	681b      	ldr	r3, [r3, #0]
 80143be:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80143c4:	3304      	adds	r3, #4
 80143c6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80143c8:	683b      	ldr	r3, [r7, #0]
 80143ca:	0a5b      	lsrs	r3, r3, #9
 80143cc:	68fa      	ldr	r2, [r7, #12]
 80143ce:	8952      	ldrh	r2, [r2, #10]
 80143d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80143d4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80143d6:	693b      	ldr	r3, [r7, #16]
 80143d8:	1d1a      	adds	r2, r3, #4
 80143da:	613a      	str	r2, [r7, #16]
 80143dc:	681b      	ldr	r3, [r3, #0]
 80143de:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80143e0:	68bb      	ldr	r3, [r7, #8]
 80143e2:	2b00      	cmp	r3, #0
 80143e4:	d101      	bne.n	80143ea <clmt_clust+0x3a>
 80143e6:	2300      	movs	r3, #0
 80143e8:	e010      	b.n	801440c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80143ea:	697a      	ldr	r2, [r7, #20]
 80143ec:	68bb      	ldr	r3, [r7, #8]
 80143ee:	429a      	cmp	r2, r3
 80143f0:	d307      	bcc.n	8014402 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80143f2:	697a      	ldr	r2, [r7, #20]
 80143f4:	68bb      	ldr	r3, [r7, #8]
 80143f6:	1ad3      	subs	r3, r2, r3
 80143f8:	617b      	str	r3, [r7, #20]
 80143fa:	693b      	ldr	r3, [r7, #16]
 80143fc:	3304      	adds	r3, #4
 80143fe:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8014400:	e7e9      	b.n	80143d6 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8014402:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8014404:	693b      	ldr	r3, [r7, #16]
 8014406:	681a      	ldr	r2, [r3, #0]
 8014408:	697b      	ldr	r3, [r7, #20]
 801440a:	4413      	add	r3, r2
}
 801440c:	4618      	mov	r0, r3
 801440e:	371c      	adds	r7, #28
 8014410:	46bd      	mov	sp, r7
 8014412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014416:	4770      	bx	lr

08014418 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8014418:	b580      	push	{r7, lr}
 801441a:	b084      	sub	sp, #16
 801441c:	af00      	add	r7, sp, #0
 801441e:	60f8      	str	r0, [r7, #12]
 8014420:	60b9      	str	r1, [r7, #8]
 8014422:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8014424:	68bb      	ldr	r3, [r7, #8]
 8014426:	331a      	adds	r3, #26
 8014428:	687a      	ldr	r2, [r7, #4]
 801442a:	b292      	uxth	r2, r2
 801442c:	4611      	mov	r1, r2
 801442e:	4618      	mov	r0, r3
 8014430:	f7ff fbe3 	bl	8013bfa <st_word>
	if (fs->fs_type == FS_FAT32) {
 8014434:	68fb      	ldr	r3, [r7, #12]
 8014436:	781b      	ldrb	r3, [r3, #0]
 8014438:	2b03      	cmp	r3, #3
 801443a:	d109      	bne.n	8014450 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801443c:	68bb      	ldr	r3, [r7, #8]
 801443e:	f103 0214 	add.w	r2, r3, #20
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	0c1b      	lsrs	r3, r3, #16
 8014446:	b29b      	uxth	r3, r3
 8014448:	4619      	mov	r1, r3
 801444a:	4610      	mov	r0, r2
 801444c:	f7ff fbd5 	bl	8013bfa <st_word>
	}
}
 8014450:	bf00      	nop
 8014452:	3710      	adds	r7, #16
 8014454:	46bd      	mov	sp, r7
 8014456:	bd80      	pop	{r7, pc}

08014458 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8014458:	b580      	push	{r7, lr}
 801445a:	b084      	sub	sp, #16
 801445c:	af00      	add	r7, sp, #0
 801445e:	6078      	str	r0, [r7, #4]
 8014460:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8014462:	2309      	movs	r3, #9
 8014464:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	2b00      	cmp	r3, #0
 801446a:	d02e      	beq.n	80144ca <validate+0x72>
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	681b      	ldr	r3, [r3, #0]
 8014470:	2b00      	cmp	r3, #0
 8014472:	d02a      	beq.n	80144ca <validate+0x72>
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	681b      	ldr	r3, [r3, #0]
 8014478:	781b      	ldrb	r3, [r3, #0]
 801447a:	2b00      	cmp	r3, #0
 801447c:	d025      	beq.n	80144ca <validate+0x72>
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	889a      	ldrh	r2, [r3, #4]
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	681b      	ldr	r3, [r3, #0]
 8014486:	88db      	ldrh	r3, [r3, #6]
 8014488:	429a      	cmp	r2, r3
 801448a:	d11e      	bne.n	80144ca <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	681b      	ldr	r3, [r3, #0]
 8014490:	4618      	mov	r0, r3
 8014492:	f7ff fc35 	bl	8013d00 <lock_fs>
 8014496:	4603      	mov	r3, r0
 8014498:	2b00      	cmp	r3, #0
 801449a:	d014      	beq.n	80144c6 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	681b      	ldr	r3, [r3, #0]
 80144a0:	785b      	ldrb	r3, [r3, #1]
 80144a2:	4618      	mov	r0, r3
 80144a4:	f7ff faf6 	bl	8013a94 <disk_status>
 80144a8:	4603      	mov	r3, r0
 80144aa:	f003 0301 	and.w	r3, r3, #1
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	d102      	bne.n	80144b8 <validate+0x60>
				res = FR_OK;
 80144b2:	2300      	movs	r3, #0
 80144b4:	73fb      	strb	r3, [r7, #15]
 80144b6:	e008      	b.n	80144ca <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	681b      	ldr	r3, [r3, #0]
 80144bc:	2100      	movs	r1, #0
 80144be:	4618      	mov	r0, r3
 80144c0:	f7ff fc34 	bl	8013d2c <unlock_fs>
 80144c4:	e001      	b.n	80144ca <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 80144c6:	230f      	movs	r3, #15
 80144c8:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80144ca:	7bfb      	ldrb	r3, [r7, #15]
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	d102      	bne.n	80144d6 <validate+0x7e>
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	681b      	ldr	r3, [r3, #0]
 80144d4:	e000      	b.n	80144d8 <validate+0x80>
 80144d6:	2300      	movs	r3, #0
 80144d8:	683a      	ldr	r2, [r7, #0]
 80144da:	6013      	str	r3, [r2, #0]
	return res;
 80144dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80144de:	4618      	mov	r0, r3
 80144e0:	3710      	adds	r7, #16
 80144e2:	46bd      	mov	sp, r7
 80144e4:	bd80      	pop	{r7, pc}

080144e6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80144e6:	b580      	push	{r7, lr}
 80144e8:	b08c      	sub	sp, #48	@ 0x30
 80144ea:	af00      	add	r7, sp, #0
 80144ec:	60f8      	str	r0, [r7, #12]
 80144ee:	60b9      	str	r1, [r7, #8]
 80144f0:	607a      	str	r2, [r7, #4]
 80144f2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80144f4:	68bb      	ldr	r3, [r7, #8]
 80144f6:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80144f8:	683b      	ldr	r3, [r7, #0]
 80144fa:	2200      	movs	r2, #0
 80144fc:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80144fe:	68fb      	ldr	r3, [r7, #12]
 8014500:	f107 0210 	add.w	r2, r7, #16
 8014504:	4611      	mov	r1, r2
 8014506:	4618      	mov	r0, r3
 8014508:	f7ff ffa6 	bl	8014458 <validate>
 801450c:	4603      	mov	r3, r0
 801450e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8014512:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8014516:	2b00      	cmp	r3, #0
 8014518:	d107      	bne.n	801452a <f_write+0x44>
 801451a:	68fb      	ldr	r3, [r7, #12]
 801451c:	7d5b      	ldrb	r3, [r3, #21]
 801451e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8014522:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8014526:	2b00      	cmp	r3, #0
 8014528:	d009      	beq.n	801453e <f_write+0x58>
 801452a:	693b      	ldr	r3, [r7, #16]
 801452c:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8014530:	4611      	mov	r1, r2
 8014532:	4618      	mov	r0, r3
 8014534:	f7ff fbfa 	bl	8013d2c <unlock_fs>
 8014538:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801453c:	e173      	b.n	8014826 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801453e:	68fb      	ldr	r3, [r7, #12]
 8014540:	7d1b      	ldrb	r3, [r3, #20]
 8014542:	f003 0302 	and.w	r3, r3, #2
 8014546:	2b00      	cmp	r3, #0
 8014548:	d106      	bne.n	8014558 <f_write+0x72>
 801454a:	693b      	ldr	r3, [r7, #16]
 801454c:	2107      	movs	r1, #7
 801454e:	4618      	mov	r0, r3
 8014550:	f7ff fbec 	bl	8013d2c <unlock_fs>
 8014554:	2307      	movs	r3, #7
 8014556:	e166      	b.n	8014826 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8014558:	68fb      	ldr	r3, [r7, #12]
 801455a:	699a      	ldr	r2, [r3, #24]
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	441a      	add	r2, r3
 8014560:	68fb      	ldr	r3, [r7, #12]
 8014562:	699b      	ldr	r3, [r3, #24]
 8014564:	429a      	cmp	r2, r3
 8014566:	f080 814b 	bcs.w	8014800 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801456a:	68fb      	ldr	r3, [r7, #12]
 801456c:	699b      	ldr	r3, [r3, #24]
 801456e:	43db      	mvns	r3, r3
 8014570:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8014572:	e145      	b.n	8014800 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8014574:	68fb      	ldr	r3, [r7, #12]
 8014576:	699b      	ldr	r3, [r3, #24]
 8014578:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801457c:	2b00      	cmp	r3, #0
 801457e:	f040 8101 	bne.w	8014784 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8014582:	68fb      	ldr	r3, [r7, #12]
 8014584:	699b      	ldr	r3, [r3, #24]
 8014586:	0a5b      	lsrs	r3, r3, #9
 8014588:	693a      	ldr	r2, [r7, #16]
 801458a:	8952      	ldrh	r2, [r2, #10]
 801458c:	3a01      	subs	r2, #1
 801458e:	4013      	ands	r3, r2
 8014590:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8014592:	69bb      	ldr	r3, [r7, #24]
 8014594:	2b00      	cmp	r3, #0
 8014596:	d14d      	bne.n	8014634 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8014598:	68fb      	ldr	r3, [r7, #12]
 801459a:	699b      	ldr	r3, [r3, #24]
 801459c:	2b00      	cmp	r3, #0
 801459e:	d10c      	bne.n	80145ba <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80145a0:	68fb      	ldr	r3, [r7, #12]
 80145a2:	689b      	ldr	r3, [r3, #8]
 80145a4:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80145a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80145a8:	2b00      	cmp	r3, #0
 80145aa:	d11a      	bne.n	80145e2 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80145ac:	68fb      	ldr	r3, [r7, #12]
 80145ae:	2100      	movs	r1, #0
 80145b0:	4618      	mov	r0, r3
 80145b2:	f7ff fe65 	bl	8014280 <create_chain>
 80145b6:	62b8      	str	r0, [r7, #40]	@ 0x28
 80145b8:	e013      	b.n	80145e2 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80145ba:	68fb      	ldr	r3, [r7, #12]
 80145bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80145be:	2b00      	cmp	r3, #0
 80145c0:	d007      	beq.n	80145d2 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80145c2:	68fb      	ldr	r3, [r7, #12]
 80145c4:	699b      	ldr	r3, [r3, #24]
 80145c6:	4619      	mov	r1, r3
 80145c8:	68f8      	ldr	r0, [r7, #12]
 80145ca:	f7ff fef1 	bl	80143b0 <clmt_clust>
 80145ce:	62b8      	str	r0, [r7, #40]	@ 0x28
 80145d0:	e007      	b.n	80145e2 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80145d2:	68fa      	ldr	r2, [r7, #12]
 80145d4:	68fb      	ldr	r3, [r7, #12]
 80145d6:	69db      	ldr	r3, [r3, #28]
 80145d8:	4619      	mov	r1, r3
 80145da:	4610      	mov	r0, r2
 80145dc:	f7ff fe50 	bl	8014280 <create_chain>
 80145e0:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80145e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	f000 8110 	beq.w	801480a <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80145ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80145ec:	2b01      	cmp	r3, #1
 80145ee:	d109      	bne.n	8014604 <f_write+0x11e>
 80145f0:	68fb      	ldr	r3, [r7, #12]
 80145f2:	2202      	movs	r2, #2
 80145f4:	755a      	strb	r2, [r3, #21]
 80145f6:	693b      	ldr	r3, [r7, #16]
 80145f8:	2102      	movs	r1, #2
 80145fa:	4618      	mov	r0, r3
 80145fc:	f7ff fb96 	bl	8013d2c <unlock_fs>
 8014600:	2302      	movs	r3, #2
 8014602:	e110      	b.n	8014826 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014606:	f1b3 3fff 	cmp.w	r3, #4294967295
 801460a:	d109      	bne.n	8014620 <f_write+0x13a>
 801460c:	68fb      	ldr	r3, [r7, #12]
 801460e:	2201      	movs	r2, #1
 8014610:	755a      	strb	r2, [r3, #21]
 8014612:	693b      	ldr	r3, [r7, #16]
 8014614:	2101      	movs	r1, #1
 8014616:	4618      	mov	r0, r3
 8014618:	f7ff fb88 	bl	8013d2c <unlock_fs>
 801461c:	2301      	movs	r3, #1
 801461e:	e102      	b.n	8014826 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8014620:	68fb      	ldr	r3, [r7, #12]
 8014622:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014624:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8014626:	68fb      	ldr	r3, [r7, #12]
 8014628:	689b      	ldr	r3, [r3, #8]
 801462a:	2b00      	cmp	r3, #0
 801462c:	d102      	bne.n	8014634 <f_write+0x14e>
 801462e:	68fb      	ldr	r3, [r7, #12]
 8014630:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014632:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8014634:	68fb      	ldr	r3, [r7, #12]
 8014636:	7d1b      	ldrb	r3, [r3, #20]
 8014638:	b25b      	sxtb	r3, r3
 801463a:	2b00      	cmp	r3, #0
 801463c:	da1d      	bge.n	801467a <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801463e:	693b      	ldr	r3, [r7, #16]
 8014640:	7858      	ldrb	r0, [r3, #1]
 8014642:	68fb      	ldr	r3, [r7, #12]
 8014644:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8014648:	68fb      	ldr	r3, [r7, #12]
 801464a:	6a1a      	ldr	r2, [r3, #32]
 801464c:	2301      	movs	r3, #1
 801464e:	f7ff fa5b 	bl	8013b08 <disk_write>
 8014652:	4603      	mov	r3, r0
 8014654:	2b00      	cmp	r3, #0
 8014656:	d009      	beq.n	801466c <f_write+0x186>
 8014658:	68fb      	ldr	r3, [r7, #12]
 801465a:	2201      	movs	r2, #1
 801465c:	755a      	strb	r2, [r3, #21]
 801465e:	693b      	ldr	r3, [r7, #16]
 8014660:	2101      	movs	r1, #1
 8014662:	4618      	mov	r0, r3
 8014664:	f7ff fb62 	bl	8013d2c <unlock_fs>
 8014668:	2301      	movs	r3, #1
 801466a:	e0dc      	b.n	8014826 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 801466c:	68fb      	ldr	r3, [r7, #12]
 801466e:	7d1b      	ldrb	r3, [r3, #20]
 8014670:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014674:	b2da      	uxtb	r2, r3
 8014676:	68fb      	ldr	r3, [r7, #12]
 8014678:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801467a:	693a      	ldr	r2, [r7, #16]
 801467c:	68fb      	ldr	r3, [r7, #12]
 801467e:	69db      	ldr	r3, [r3, #28]
 8014680:	4619      	mov	r1, r3
 8014682:	4610      	mov	r0, r2
 8014684:	f7ff fc4c 	bl	8013f20 <clust2sect>
 8014688:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801468a:	697b      	ldr	r3, [r7, #20]
 801468c:	2b00      	cmp	r3, #0
 801468e:	d109      	bne.n	80146a4 <f_write+0x1be>
 8014690:	68fb      	ldr	r3, [r7, #12]
 8014692:	2202      	movs	r2, #2
 8014694:	755a      	strb	r2, [r3, #21]
 8014696:	693b      	ldr	r3, [r7, #16]
 8014698:	2102      	movs	r1, #2
 801469a:	4618      	mov	r0, r3
 801469c:	f7ff fb46 	bl	8013d2c <unlock_fs>
 80146a0:	2302      	movs	r3, #2
 80146a2:	e0c0      	b.n	8014826 <f_write+0x340>
			sect += csect;
 80146a4:	697a      	ldr	r2, [r7, #20]
 80146a6:	69bb      	ldr	r3, [r7, #24]
 80146a8:	4413      	add	r3, r2
 80146aa:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	0a5b      	lsrs	r3, r3, #9
 80146b0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80146b2:	6a3b      	ldr	r3, [r7, #32]
 80146b4:	2b00      	cmp	r3, #0
 80146b6:	d041      	beq.n	801473c <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80146b8:	69ba      	ldr	r2, [r7, #24]
 80146ba:	6a3b      	ldr	r3, [r7, #32]
 80146bc:	4413      	add	r3, r2
 80146be:	693a      	ldr	r2, [r7, #16]
 80146c0:	8952      	ldrh	r2, [r2, #10]
 80146c2:	4293      	cmp	r3, r2
 80146c4:	d905      	bls.n	80146d2 <f_write+0x1ec>
					cc = fs->csize - csect;
 80146c6:	693b      	ldr	r3, [r7, #16]
 80146c8:	895b      	ldrh	r3, [r3, #10]
 80146ca:	461a      	mov	r2, r3
 80146cc:	69bb      	ldr	r3, [r7, #24]
 80146ce:	1ad3      	subs	r3, r2, r3
 80146d0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80146d2:	693b      	ldr	r3, [r7, #16]
 80146d4:	7858      	ldrb	r0, [r3, #1]
 80146d6:	6a3b      	ldr	r3, [r7, #32]
 80146d8:	697a      	ldr	r2, [r7, #20]
 80146da:	69f9      	ldr	r1, [r7, #28]
 80146dc:	f7ff fa14 	bl	8013b08 <disk_write>
 80146e0:	4603      	mov	r3, r0
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	d009      	beq.n	80146fa <f_write+0x214>
 80146e6:	68fb      	ldr	r3, [r7, #12]
 80146e8:	2201      	movs	r2, #1
 80146ea:	755a      	strb	r2, [r3, #21]
 80146ec:	693b      	ldr	r3, [r7, #16]
 80146ee:	2101      	movs	r1, #1
 80146f0:	4618      	mov	r0, r3
 80146f2:	f7ff fb1b 	bl	8013d2c <unlock_fs>
 80146f6:	2301      	movs	r3, #1
 80146f8:	e095      	b.n	8014826 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80146fa:	68fb      	ldr	r3, [r7, #12]
 80146fc:	6a1a      	ldr	r2, [r3, #32]
 80146fe:	697b      	ldr	r3, [r7, #20]
 8014700:	1ad3      	subs	r3, r2, r3
 8014702:	6a3a      	ldr	r2, [r7, #32]
 8014704:	429a      	cmp	r2, r3
 8014706:	d915      	bls.n	8014734 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8014708:	68fb      	ldr	r3, [r7, #12]
 801470a:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 801470e:	68fb      	ldr	r3, [r7, #12]
 8014710:	6a1a      	ldr	r2, [r3, #32]
 8014712:	697b      	ldr	r3, [r7, #20]
 8014714:	1ad3      	subs	r3, r2, r3
 8014716:	025b      	lsls	r3, r3, #9
 8014718:	69fa      	ldr	r2, [r7, #28]
 801471a:	4413      	add	r3, r2
 801471c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014720:	4619      	mov	r1, r3
 8014722:	f7ff fab1 	bl	8013c88 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8014726:	68fb      	ldr	r3, [r7, #12]
 8014728:	7d1b      	ldrb	r3, [r3, #20]
 801472a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801472e:	b2da      	uxtb	r2, r3
 8014730:	68fb      	ldr	r3, [r7, #12]
 8014732:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8014734:	6a3b      	ldr	r3, [r7, #32]
 8014736:	025b      	lsls	r3, r3, #9
 8014738:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 801473a:	e044      	b.n	80147c6 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801473c:	68fb      	ldr	r3, [r7, #12]
 801473e:	6a1b      	ldr	r3, [r3, #32]
 8014740:	697a      	ldr	r2, [r7, #20]
 8014742:	429a      	cmp	r2, r3
 8014744:	d01b      	beq.n	801477e <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 8014746:	68fb      	ldr	r3, [r7, #12]
 8014748:	699a      	ldr	r2, [r3, #24]
 801474a:	68fb      	ldr	r3, [r7, #12]
 801474c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801474e:	429a      	cmp	r2, r3
 8014750:	d215      	bcs.n	801477e <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8014752:	693b      	ldr	r3, [r7, #16]
 8014754:	7858      	ldrb	r0, [r3, #1]
 8014756:	68fb      	ldr	r3, [r7, #12]
 8014758:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801475c:	2301      	movs	r3, #1
 801475e:	697a      	ldr	r2, [r7, #20]
 8014760:	f7ff f9b2 	bl	8013ac8 <disk_read>
 8014764:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8014766:	2b00      	cmp	r3, #0
 8014768:	d009      	beq.n	801477e <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 801476a:	68fb      	ldr	r3, [r7, #12]
 801476c:	2201      	movs	r2, #1
 801476e:	755a      	strb	r2, [r3, #21]
 8014770:	693b      	ldr	r3, [r7, #16]
 8014772:	2101      	movs	r1, #1
 8014774:	4618      	mov	r0, r3
 8014776:	f7ff fad9 	bl	8013d2c <unlock_fs>
 801477a:	2301      	movs	r3, #1
 801477c:	e053      	b.n	8014826 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 801477e:	68fb      	ldr	r3, [r7, #12]
 8014780:	697a      	ldr	r2, [r7, #20]
 8014782:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8014784:	68fb      	ldr	r3, [r7, #12]
 8014786:	699b      	ldr	r3, [r3, #24]
 8014788:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801478c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8014790:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8014792:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	429a      	cmp	r2, r3
 8014798:	d901      	bls.n	801479e <f_write+0x2b8>
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801479e:	68fb      	ldr	r3, [r7, #12]
 80147a0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80147a4:	68fb      	ldr	r3, [r7, #12]
 80147a6:	699b      	ldr	r3, [r3, #24]
 80147a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80147ac:	4413      	add	r3, r2
 80147ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80147b0:	69f9      	ldr	r1, [r7, #28]
 80147b2:	4618      	mov	r0, r3
 80147b4:	f7ff fa68 	bl	8013c88 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80147b8:	68fb      	ldr	r3, [r7, #12]
 80147ba:	7d1b      	ldrb	r3, [r3, #20]
 80147bc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80147c0:	b2da      	uxtb	r2, r3
 80147c2:	68fb      	ldr	r3, [r7, #12]
 80147c4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80147c6:	69fa      	ldr	r2, [r7, #28]
 80147c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80147ca:	4413      	add	r3, r2
 80147cc:	61fb      	str	r3, [r7, #28]
 80147ce:	68fb      	ldr	r3, [r7, #12]
 80147d0:	699a      	ldr	r2, [r3, #24]
 80147d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80147d4:	441a      	add	r2, r3
 80147d6:	68fb      	ldr	r3, [r7, #12]
 80147d8:	619a      	str	r2, [r3, #24]
 80147da:	68fb      	ldr	r3, [r7, #12]
 80147dc:	68da      	ldr	r2, [r3, #12]
 80147de:	68fb      	ldr	r3, [r7, #12]
 80147e0:	699b      	ldr	r3, [r3, #24]
 80147e2:	429a      	cmp	r2, r3
 80147e4:	bf38      	it	cc
 80147e6:	461a      	movcc	r2, r3
 80147e8:	68fb      	ldr	r3, [r7, #12]
 80147ea:	60da      	str	r2, [r3, #12]
 80147ec:	683b      	ldr	r3, [r7, #0]
 80147ee:	681a      	ldr	r2, [r3, #0]
 80147f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80147f2:	441a      	add	r2, r3
 80147f4:	683b      	ldr	r3, [r7, #0]
 80147f6:	601a      	str	r2, [r3, #0]
 80147f8:	687a      	ldr	r2, [r7, #4]
 80147fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80147fc:	1ad3      	subs	r3, r2, r3
 80147fe:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	2b00      	cmp	r3, #0
 8014804:	f47f aeb6 	bne.w	8014574 <f_write+0x8e>
 8014808:	e000      	b.n	801480c <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801480a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801480c:	68fb      	ldr	r3, [r7, #12]
 801480e:	7d1b      	ldrb	r3, [r3, #20]
 8014810:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014814:	b2da      	uxtb	r2, r3
 8014816:	68fb      	ldr	r3, [r7, #12]
 8014818:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801481a:	693b      	ldr	r3, [r7, #16]
 801481c:	2100      	movs	r1, #0
 801481e:	4618      	mov	r0, r3
 8014820:	f7ff fa84 	bl	8013d2c <unlock_fs>
 8014824:	2300      	movs	r3, #0
}
 8014826:	4618      	mov	r0, r3
 8014828:	3730      	adds	r7, #48	@ 0x30
 801482a:	46bd      	mov	sp, r7
 801482c:	bd80      	pop	{r7, pc}

0801482e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801482e:	b580      	push	{r7, lr}
 8014830:	b086      	sub	sp, #24
 8014832:	af00      	add	r7, sp, #0
 8014834:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	f107 0208 	add.w	r2, r7, #8
 801483c:	4611      	mov	r1, r2
 801483e:	4618      	mov	r0, r3
 8014840:	f7ff fe0a 	bl	8014458 <validate>
 8014844:	4603      	mov	r3, r0
 8014846:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8014848:	7dfb      	ldrb	r3, [r7, #23]
 801484a:	2b00      	cmp	r3, #0
 801484c:	d16d      	bne.n	801492a <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	7d1b      	ldrb	r3, [r3, #20]
 8014852:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014856:	2b00      	cmp	r3, #0
 8014858:	d067      	beq.n	801492a <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	7d1b      	ldrb	r3, [r3, #20]
 801485e:	b25b      	sxtb	r3, r3
 8014860:	2b00      	cmp	r3, #0
 8014862:	da1a      	bge.n	801489a <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8014864:	68bb      	ldr	r3, [r7, #8]
 8014866:	7858      	ldrb	r0, [r3, #1]
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	6a1a      	ldr	r2, [r3, #32]
 8014872:	2301      	movs	r3, #1
 8014874:	f7ff f948 	bl	8013b08 <disk_write>
 8014878:	4603      	mov	r3, r0
 801487a:	2b00      	cmp	r3, #0
 801487c:	d006      	beq.n	801488c <f_sync+0x5e>
 801487e:	68bb      	ldr	r3, [r7, #8]
 8014880:	2101      	movs	r1, #1
 8014882:	4618      	mov	r0, r3
 8014884:	f7ff fa52 	bl	8013d2c <unlock_fs>
 8014888:	2301      	movs	r3, #1
 801488a:	e055      	b.n	8014938 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	7d1b      	ldrb	r3, [r3, #20]
 8014890:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014894:	b2da      	uxtb	r2, r3
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801489a:	f7fe fbd9 	bl	8013050 <get_fattime>
 801489e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80148a0:	68ba      	ldr	r2, [r7, #8]
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80148a6:	4619      	mov	r1, r3
 80148a8:	4610      	mov	r0, r2
 80148aa:	f7ff fa9e 	bl	8013dea <move_window>
 80148ae:	4603      	mov	r3, r0
 80148b0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80148b2:	7dfb      	ldrb	r3, [r7, #23]
 80148b4:	2b00      	cmp	r3, #0
 80148b6:	d138      	bne.n	801492a <f_sync+0xfc>
					dir = fp->dir_ptr;
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80148bc:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80148be:	68fb      	ldr	r3, [r7, #12]
 80148c0:	330b      	adds	r3, #11
 80148c2:	781a      	ldrb	r2, [r3, #0]
 80148c4:	68fb      	ldr	r3, [r7, #12]
 80148c6:	330b      	adds	r3, #11
 80148c8:	f042 0220 	orr.w	r2, r2, #32
 80148cc:	b2d2      	uxtb	r2, r2
 80148ce:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	6818      	ldr	r0, [r3, #0]
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	689b      	ldr	r3, [r3, #8]
 80148d8:	461a      	mov	r2, r3
 80148da:	68f9      	ldr	r1, [r7, #12]
 80148dc:	f7ff fd9c 	bl	8014418 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80148e0:	68fb      	ldr	r3, [r7, #12]
 80148e2:	f103 021c 	add.w	r2, r3, #28
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	68db      	ldr	r3, [r3, #12]
 80148ea:	4619      	mov	r1, r3
 80148ec:	4610      	mov	r0, r2
 80148ee:	f7ff f99f 	bl	8013c30 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80148f2:	68fb      	ldr	r3, [r7, #12]
 80148f4:	3316      	adds	r3, #22
 80148f6:	6939      	ldr	r1, [r7, #16]
 80148f8:	4618      	mov	r0, r3
 80148fa:	f7ff f999 	bl	8013c30 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80148fe:	68fb      	ldr	r3, [r7, #12]
 8014900:	3312      	adds	r3, #18
 8014902:	2100      	movs	r1, #0
 8014904:	4618      	mov	r0, r3
 8014906:	f7ff f978 	bl	8013bfa <st_word>
					fs->wflag = 1;
 801490a:	68bb      	ldr	r3, [r7, #8]
 801490c:	2201      	movs	r2, #1
 801490e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8014910:	68bb      	ldr	r3, [r7, #8]
 8014912:	4618      	mov	r0, r3
 8014914:	f7ff fa96 	bl	8013e44 <sync_fs>
 8014918:	4603      	mov	r3, r0
 801491a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801491c:	687b      	ldr	r3, [r7, #4]
 801491e:	7d1b      	ldrb	r3, [r3, #20]
 8014920:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8014924:	b2da      	uxtb	r2, r3
 8014926:	687b      	ldr	r3, [r7, #4]
 8014928:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801492a:	68bb      	ldr	r3, [r7, #8]
 801492c:	7dfa      	ldrb	r2, [r7, #23]
 801492e:	4611      	mov	r1, r2
 8014930:	4618      	mov	r0, r3
 8014932:	f7ff f9fb 	bl	8013d2c <unlock_fs>
 8014936:	7dfb      	ldrb	r3, [r7, #23]
}
 8014938:	4618      	mov	r0, r3
 801493a:	3718      	adds	r7, #24
 801493c:	46bd      	mov	sp, r7
 801493e:	bd80      	pop	{r7, pc}

08014940 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8014940:	b480      	push	{r7}
 8014942:	b087      	sub	sp, #28
 8014944:	af00      	add	r7, sp, #0
 8014946:	60f8      	str	r0, [r7, #12]
 8014948:	60b9      	str	r1, [r7, #8]
 801494a:	4613      	mov	r3, r2
 801494c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801494e:	2301      	movs	r3, #1
 8014950:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8014952:	2300      	movs	r3, #0
 8014954:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8014956:	4b1f      	ldr	r3, [pc, #124]	@ (80149d4 <FATFS_LinkDriverEx+0x94>)
 8014958:	7a5b      	ldrb	r3, [r3, #9]
 801495a:	b2db      	uxtb	r3, r3
 801495c:	2b00      	cmp	r3, #0
 801495e:	d131      	bne.n	80149c4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8014960:	4b1c      	ldr	r3, [pc, #112]	@ (80149d4 <FATFS_LinkDriverEx+0x94>)
 8014962:	7a5b      	ldrb	r3, [r3, #9]
 8014964:	b2db      	uxtb	r3, r3
 8014966:	461a      	mov	r2, r3
 8014968:	4b1a      	ldr	r3, [pc, #104]	@ (80149d4 <FATFS_LinkDriverEx+0x94>)
 801496a:	2100      	movs	r1, #0
 801496c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801496e:	4b19      	ldr	r3, [pc, #100]	@ (80149d4 <FATFS_LinkDriverEx+0x94>)
 8014970:	7a5b      	ldrb	r3, [r3, #9]
 8014972:	b2db      	uxtb	r3, r3
 8014974:	4a17      	ldr	r2, [pc, #92]	@ (80149d4 <FATFS_LinkDriverEx+0x94>)
 8014976:	009b      	lsls	r3, r3, #2
 8014978:	4413      	add	r3, r2
 801497a:	68fa      	ldr	r2, [r7, #12]
 801497c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801497e:	4b15      	ldr	r3, [pc, #84]	@ (80149d4 <FATFS_LinkDriverEx+0x94>)
 8014980:	7a5b      	ldrb	r3, [r3, #9]
 8014982:	b2db      	uxtb	r3, r3
 8014984:	461a      	mov	r2, r3
 8014986:	4b13      	ldr	r3, [pc, #76]	@ (80149d4 <FATFS_LinkDriverEx+0x94>)
 8014988:	4413      	add	r3, r2
 801498a:	79fa      	ldrb	r2, [r7, #7]
 801498c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801498e:	4b11      	ldr	r3, [pc, #68]	@ (80149d4 <FATFS_LinkDriverEx+0x94>)
 8014990:	7a5b      	ldrb	r3, [r3, #9]
 8014992:	b2db      	uxtb	r3, r3
 8014994:	1c5a      	adds	r2, r3, #1
 8014996:	b2d1      	uxtb	r1, r2
 8014998:	4a0e      	ldr	r2, [pc, #56]	@ (80149d4 <FATFS_LinkDriverEx+0x94>)
 801499a:	7251      	strb	r1, [r2, #9]
 801499c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801499e:	7dbb      	ldrb	r3, [r7, #22]
 80149a0:	3330      	adds	r3, #48	@ 0x30
 80149a2:	b2da      	uxtb	r2, r3
 80149a4:	68bb      	ldr	r3, [r7, #8]
 80149a6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80149a8:	68bb      	ldr	r3, [r7, #8]
 80149aa:	3301      	adds	r3, #1
 80149ac:	223a      	movs	r2, #58	@ 0x3a
 80149ae:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80149b0:	68bb      	ldr	r3, [r7, #8]
 80149b2:	3302      	adds	r3, #2
 80149b4:	222f      	movs	r2, #47	@ 0x2f
 80149b6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80149b8:	68bb      	ldr	r3, [r7, #8]
 80149ba:	3303      	adds	r3, #3
 80149bc:	2200      	movs	r2, #0
 80149be:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80149c0:	2300      	movs	r3, #0
 80149c2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80149c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80149c6:	4618      	mov	r0, r3
 80149c8:	371c      	adds	r7, #28
 80149ca:	46bd      	mov	sp, r7
 80149cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149d0:	4770      	bx	lr
 80149d2:	bf00      	nop
 80149d4:	24002acc 	.word	0x24002acc

080149d8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80149d8:	b580      	push	{r7, lr}
 80149da:	b082      	sub	sp, #8
 80149dc:	af00      	add	r7, sp, #0
 80149de:	6078      	str	r0, [r7, #4]
 80149e0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80149e2:	2200      	movs	r2, #0
 80149e4:	6839      	ldr	r1, [r7, #0]
 80149e6:	6878      	ldr	r0, [r7, #4]
 80149e8:	f7ff ffaa 	bl	8014940 <FATFS_LinkDriverEx>
 80149ec:	4603      	mov	r3, r0
}
 80149ee:	4618      	mov	r0, r3
 80149f0:	3708      	adds	r7, #8
 80149f2:	46bd      	mov	sp, r7
 80149f4:	bd80      	pop	{r7, pc}

080149f6 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 80149f6:	b580      	push	{r7, lr}
 80149f8:	b084      	sub	sp, #16
 80149fa:	af00      	add	r7, sp, #0
 80149fc:	6078      	str	r0, [r7, #4]
  int ret = 0;
 80149fe:	2300      	movs	r3, #0
 8014a00:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8014a02:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8014a06:	6878      	ldr	r0, [r7, #4]
 8014a08:	f000 f8a6 	bl	8014b58 <osSemaphoreWait>
 8014a0c:	4603      	mov	r3, r0
 8014a0e:	2b00      	cmp	r3, #0
 8014a10:	d101      	bne.n	8014a16 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 8014a12:	2301      	movs	r3, #1
 8014a14:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8014a16:	68fb      	ldr	r3, [r7, #12]
}
 8014a18:	4618      	mov	r0, r3
 8014a1a:	3710      	adds	r7, #16
 8014a1c:	46bd      	mov	sp, r7
 8014a1e:	bd80      	pop	{r7, pc}

08014a20 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8014a20:	b580      	push	{r7, lr}
 8014a22:	b082      	sub	sp, #8
 8014a24:	af00      	add	r7, sp, #0
 8014a26:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8014a28:	6878      	ldr	r0, [r7, #4]
 8014a2a:	f000 f8e3 	bl	8014bf4 <osSemaphoreRelease>
#endif
}
 8014a2e:	bf00      	nop
 8014a30:	3708      	adds	r7, #8
 8014a32:	46bd      	mov	sp, r7
 8014a34:	bd80      	pop	{r7, pc}

08014a36 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8014a36:	b480      	push	{r7}
 8014a38:	b085      	sub	sp, #20
 8014a3a:	af00      	add	r7, sp, #0
 8014a3c:	4603      	mov	r3, r0
 8014a3e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8014a40:	2300      	movs	r3, #0
 8014a42:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8014a44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014a48:	2b84      	cmp	r3, #132	@ 0x84
 8014a4a:	d005      	beq.n	8014a58 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8014a4c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8014a50:	68fb      	ldr	r3, [r7, #12]
 8014a52:	4413      	add	r3, r2
 8014a54:	3303      	adds	r3, #3
 8014a56:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8014a58:	68fb      	ldr	r3, [r7, #12]
}
 8014a5a:	4618      	mov	r0, r3
 8014a5c:	3714      	adds	r7, #20
 8014a5e:	46bd      	mov	sp, r7
 8014a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a64:	4770      	bx	lr

08014a66 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8014a66:	b480      	push	{r7}
 8014a68:	b083      	sub	sp, #12
 8014a6a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014a6c:	f3ef 8305 	mrs	r3, IPSR
 8014a70:	607b      	str	r3, [r7, #4]
  return(result);
 8014a72:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	bf14      	ite	ne
 8014a78:	2301      	movne	r3, #1
 8014a7a:	2300      	moveq	r3, #0
 8014a7c:	b2db      	uxtb	r3, r3
}
 8014a7e:	4618      	mov	r0, r3
 8014a80:	370c      	adds	r7, #12
 8014a82:	46bd      	mov	sp, r7
 8014a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a88:	4770      	bx	lr

08014a8a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8014a8a:	b580      	push	{r7, lr}
 8014a8c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8014a8e:	f000 ffb5 	bl	80159fc <vTaskStartScheduler>
  
  return osOK;
 8014a92:	2300      	movs	r3, #0
}
 8014a94:	4618      	mov	r0, r3
 8014a96:	bd80      	pop	{r7, pc}

08014a98 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8014a98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014a9a:	b089      	sub	sp, #36	@ 0x24
 8014a9c:	af04      	add	r7, sp, #16
 8014a9e:	6078      	str	r0, [r7, #4]
 8014aa0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8014aa2:	687b      	ldr	r3, [r7, #4]
 8014aa4:	695b      	ldr	r3, [r3, #20]
 8014aa6:	2b00      	cmp	r3, #0
 8014aa8:	d020      	beq.n	8014aec <osThreadCreate+0x54>
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	699b      	ldr	r3, [r3, #24]
 8014aae:	2b00      	cmp	r3, #0
 8014ab0:	d01c      	beq.n	8014aec <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014ab2:	687b      	ldr	r3, [r7, #4]
 8014ab4:	685c      	ldr	r4, [r3, #4]
 8014ab6:	687b      	ldr	r3, [r7, #4]
 8014ab8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	691e      	ldr	r6, [r3, #16]
 8014abe:	687b      	ldr	r3, [r7, #4]
 8014ac0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014ac4:	4618      	mov	r0, r3
 8014ac6:	f7ff ffb6 	bl	8014a36 <makeFreeRtosPriority>
 8014aca:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	695b      	ldr	r3, [r3, #20]
 8014ad0:	687a      	ldr	r2, [r7, #4]
 8014ad2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014ad4:	9202      	str	r2, [sp, #8]
 8014ad6:	9301      	str	r3, [sp, #4]
 8014ad8:	9100      	str	r1, [sp, #0]
 8014ada:	683b      	ldr	r3, [r7, #0]
 8014adc:	4632      	mov	r2, r6
 8014ade:	4629      	mov	r1, r5
 8014ae0:	4620      	mov	r0, r4
 8014ae2:	f000 fdbd 	bl	8015660 <xTaskCreateStatic>
 8014ae6:	4603      	mov	r3, r0
 8014ae8:	60fb      	str	r3, [r7, #12]
 8014aea:	e01c      	b.n	8014b26 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	685c      	ldr	r4, [r3, #4]
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8014af4:	687b      	ldr	r3, [r7, #4]
 8014af6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014af8:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014b00:	4618      	mov	r0, r3
 8014b02:	f7ff ff98 	bl	8014a36 <makeFreeRtosPriority>
 8014b06:	4602      	mov	r2, r0
 8014b08:	f107 030c 	add.w	r3, r7, #12
 8014b0c:	9301      	str	r3, [sp, #4]
 8014b0e:	9200      	str	r2, [sp, #0]
 8014b10:	683b      	ldr	r3, [r7, #0]
 8014b12:	4632      	mov	r2, r6
 8014b14:	4629      	mov	r1, r5
 8014b16:	4620      	mov	r0, r4
 8014b18:	f000 fe02 	bl	8015720 <xTaskCreate>
 8014b1c:	4603      	mov	r3, r0
 8014b1e:	2b01      	cmp	r3, #1
 8014b20:	d001      	beq.n	8014b26 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8014b22:	2300      	movs	r3, #0
 8014b24:	e000      	b.n	8014b28 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8014b26:	68fb      	ldr	r3, [r7, #12]
}
 8014b28:	4618      	mov	r0, r3
 8014b2a:	3714      	adds	r7, #20
 8014b2c:	46bd      	mov	sp, r7
 8014b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014b30 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8014b30:	b580      	push	{r7, lr}
 8014b32:	b084      	sub	sp, #16
 8014b34:	af00      	add	r7, sp, #0
 8014b36:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8014b3c:	68fb      	ldr	r3, [r7, #12]
 8014b3e:	2b00      	cmp	r3, #0
 8014b40:	d001      	beq.n	8014b46 <osDelay+0x16>
 8014b42:	68fb      	ldr	r3, [r7, #12]
 8014b44:	e000      	b.n	8014b48 <osDelay+0x18>
 8014b46:	2301      	movs	r3, #1
 8014b48:	4618      	mov	r0, r3
 8014b4a:	f000 ff21 	bl	8015990 <vTaskDelay>
  
  return osOK;
 8014b4e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8014b50:	4618      	mov	r0, r3
 8014b52:	3710      	adds	r7, #16
 8014b54:	46bd      	mov	sp, r7
 8014b56:	bd80      	pop	{r7, pc}

08014b58 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8014b58:	b580      	push	{r7, lr}
 8014b5a:	b084      	sub	sp, #16
 8014b5c:	af00      	add	r7, sp, #0
 8014b5e:	6078      	str	r0, [r7, #4]
 8014b60:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8014b62:	2300      	movs	r3, #0
 8014b64:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	2b00      	cmp	r3, #0
 8014b6a:	d101      	bne.n	8014b70 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8014b6c:	2380      	movs	r3, #128	@ 0x80
 8014b6e:	e03a      	b.n	8014be6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8014b70:	2300      	movs	r3, #0
 8014b72:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8014b74:	683b      	ldr	r3, [r7, #0]
 8014b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b7a:	d103      	bne.n	8014b84 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8014b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8014b80:	60fb      	str	r3, [r7, #12]
 8014b82:	e009      	b.n	8014b98 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8014b84:	683b      	ldr	r3, [r7, #0]
 8014b86:	2b00      	cmp	r3, #0
 8014b88:	d006      	beq.n	8014b98 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8014b8a:	683b      	ldr	r3, [r7, #0]
 8014b8c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8014b8e:	68fb      	ldr	r3, [r7, #12]
 8014b90:	2b00      	cmp	r3, #0
 8014b92:	d101      	bne.n	8014b98 <osSemaphoreWait+0x40>
      ticks = 1;
 8014b94:	2301      	movs	r3, #1
 8014b96:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8014b98:	f7ff ff65 	bl	8014a66 <inHandlerMode>
 8014b9c:	4603      	mov	r3, r0
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	d017      	beq.n	8014bd2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8014ba2:	f107 0308 	add.w	r3, r7, #8
 8014ba6:	461a      	mov	r2, r3
 8014ba8:	2100      	movs	r1, #0
 8014baa:	6878      	ldr	r0, [r7, #4]
 8014bac:	f000 fbae 	bl	801530c <xQueueReceiveFromISR>
 8014bb0:	4603      	mov	r3, r0
 8014bb2:	2b01      	cmp	r3, #1
 8014bb4:	d001      	beq.n	8014bba <osSemaphoreWait+0x62>
      return osErrorOS;
 8014bb6:	23ff      	movs	r3, #255	@ 0xff
 8014bb8:	e015      	b.n	8014be6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8014bba:	68bb      	ldr	r3, [r7, #8]
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	d011      	beq.n	8014be4 <osSemaphoreWait+0x8c>
 8014bc0:	4b0b      	ldr	r3, [pc, #44]	@ (8014bf0 <osSemaphoreWait+0x98>)
 8014bc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014bc6:	601a      	str	r2, [r3, #0]
 8014bc8:	f3bf 8f4f 	dsb	sy
 8014bcc:	f3bf 8f6f 	isb	sy
 8014bd0:	e008      	b.n	8014be4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8014bd2:	68f9      	ldr	r1, [r7, #12]
 8014bd4:	6878      	ldr	r0, [r7, #4]
 8014bd6:	f000 fa89 	bl	80150ec <xQueueSemaphoreTake>
 8014bda:	4603      	mov	r3, r0
 8014bdc:	2b01      	cmp	r3, #1
 8014bde:	d001      	beq.n	8014be4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8014be0:	23ff      	movs	r3, #255	@ 0xff
 8014be2:	e000      	b.n	8014be6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8014be4:	2300      	movs	r3, #0
}
 8014be6:	4618      	mov	r0, r3
 8014be8:	3710      	adds	r7, #16
 8014bea:	46bd      	mov	sp, r7
 8014bec:	bd80      	pop	{r7, pc}
 8014bee:	bf00      	nop
 8014bf0:	e000ed04 	.word	0xe000ed04

08014bf4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8014bf4:	b580      	push	{r7, lr}
 8014bf6:	b084      	sub	sp, #16
 8014bf8:	af00      	add	r7, sp, #0
 8014bfa:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8014bfc:	2300      	movs	r3, #0
 8014bfe:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8014c00:	2300      	movs	r3, #0
 8014c02:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8014c04:	f7ff ff2f 	bl	8014a66 <inHandlerMode>
 8014c08:	4603      	mov	r3, r0
 8014c0a:	2b00      	cmp	r3, #0
 8014c0c:	d016      	beq.n	8014c3c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8014c0e:	f107 0308 	add.w	r3, r7, #8
 8014c12:	4619      	mov	r1, r3
 8014c14:	6878      	ldr	r0, [r7, #4]
 8014c16:	f000 f9d9 	bl	8014fcc <xQueueGiveFromISR>
 8014c1a:	4603      	mov	r3, r0
 8014c1c:	2b01      	cmp	r3, #1
 8014c1e:	d001      	beq.n	8014c24 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8014c20:	23ff      	movs	r3, #255	@ 0xff
 8014c22:	e017      	b.n	8014c54 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8014c24:	68bb      	ldr	r3, [r7, #8]
 8014c26:	2b00      	cmp	r3, #0
 8014c28:	d013      	beq.n	8014c52 <osSemaphoreRelease+0x5e>
 8014c2a:	4b0c      	ldr	r3, [pc, #48]	@ (8014c5c <osSemaphoreRelease+0x68>)
 8014c2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014c30:	601a      	str	r2, [r3, #0]
 8014c32:	f3bf 8f4f 	dsb	sy
 8014c36:	f3bf 8f6f 	isb	sy
 8014c3a:	e00a      	b.n	8014c52 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8014c3c:	2300      	movs	r3, #0
 8014c3e:	2200      	movs	r2, #0
 8014c40:	2100      	movs	r1, #0
 8014c42:	6878      	ldr	r0, [r7, #4]
 8014c44:	f000 f8c0 	bl	8014dc8 <xQueueGenericSend>
 8014c48:	4603      	mov	r3, r0
 8014c4a:	2b01      	cmp	r3, #1
 8014c4c:	d001      	beq.n	8014c52 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8014c4e:	23ff      	movs	r3, #255	@ 0xff
 8014c50:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8014c52:	68fb      	ldr	r3, [r7, #12]
}
 8014c54:	4618      	mov	r0, r3
 8014c56:	3710      	adds	r7, #16
 8014c58:	46bd      	mov	sp, r7
 8014c5a:	bd80      	pop	{r7, pc}
 8014c5c:	e000ed04 	.word	0xe000ed04

08014c60 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8014c60:	b480      	push	{r7}
 8014c62:	b083      	sub	sp, #12
 8014c64:	af00      	add	r7, sp, #0
 8014c66:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	f103 0208 	add.w	r2, r3, #8
 8014c6e:	687b      	ldr	r3, [r7, #4]
 8014c70:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	f04f 32ff 	mov.w	r2, #4294967295
 8014c78:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014c7a:	687b      	ldr	r3, [r7, #4]
 8014c7c:	f103 0208 	add.w	r2, r3, #8
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	f103 0208 	add.w	r2, r3, #8
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	2200      	movs	r2, #0
 8014c92:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8014c94:	bf00      	nop
 8014c96:	370c      	adds	r7, #12
 8014c98:	46bd      	mov	sp, r7
 8014c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c9e:	4770      	bx	lr

08014ca0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8014ca0:	b480      	push	{r7}
 8014ca2:	b083      	sub	sp, #12
 8014ca4:	af00      	add	r7, sp, #0
 8014ca6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	2200      	movs	r2, #0
 8014cac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8014cae:	bf00      	nop
 8014cb0:	370c      	adds	r7, #12
 8014cb2:	46bd      	mov	sp, r7
 8014cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cb8:	4770      	bx	lr

08014cba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014cba:	b480      	push	{r7}
 8014cbc:	b085      	sub	sp, #20
 8014cbe:	af00      	add	r7, sp, #0
 8014cc0:	6078      	str	r0, [r7, #4]
 8014cc2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	685b      	ldr	r3, [r3, #4]
 8014cc8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8014cca:	683b      	ldr	r3, [r7, #0]
 8014ccc:	68fa      	ldr	r2, [r7, #12]
 8014cce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8014cd0:	68fb      	ldr	r3, [r7, #12]
 8014cd2:	689a      	ldr	r2, [r3, #8]
 8014cd4:	683b      	ldr	r3, [r7, #0]
 8014cd6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8014cd8:	68fb      	ldr	r3, [r7, #12]
 8014cda:	689b      	ldr	r3, [r3, #8]
 8014cdc:	683a      	ldr	r2, [r7, #0]
 8014cde:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8014ce0:	68fb      	ldr	r3, [r7, #12]
 8014ce2:	683a      	ldr	r2, [r7, #0]
 8014ce4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8014ce6:	683b      	ldr	r3, [r7, #0]
 8014ce8:	687a      	ldr	r2, [r7, #4]
 8014cea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	681b      	ldr	r3, [r3, #0]
 8014cf0:	1c5a      	adds	r2, r3, #1
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	601a      	str	r2, [r3, #0]
}
 8014cf6:	bf00      	nop
 8014cf8:	3714      	adds	r7, #20
 8014cfa:	46bd      	mov	sp, r7
 8014cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d00:	4770      	bx	lr

08014d02 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014d02:	b480      	push	{r7}
 8014d04:	b085      	sub	sp, #20
 8014d06:	af00      	add	r7, sp, #0
 8014d08:	6078      	str	r0, [r7, #4]
 8014d0a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8014d0c:	683b      	ldr	r3, [r7, #0]
 8014d0e:	681b      	ldr	r3, [r3, #0]
 8014d10:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8014d12:	68bb      	ldr	r3, [r7, #8]
 8014d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d18:	d103      	bne.n	8014d22 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	691b      	ldr	r3, [r3, #16]
 8014d1e:	60fb      	str	r3, [r7, #12]
 8014d20:	e00c      	b.n	8014d3c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	3308      	adds	r3, #8
 8014d26:	60fb      	str	r3, [r7, #12]
 8014d28:	e002      	b.n	8014d30 <vListInsert+0x2e>
 8014d2a:	68fb      	ldr	r3, [r7, #12]
 8014d2c:	685b      	ldr	r3, [r3, #4]
 8014d2e:	60fb      	str	r3, [r7, #12]
 8014d30:	68fb      	ldr	r3, [r7, #12]
 8014d32:	685b      	ldr	r3, [r3, #4]
 8014d34:	681b      	ldr	r3, [r3, #0]
 8014d36:	68ba      	ldr	r2, [r7, #8]
 8014d38:	429a      	cmp	r2, r3
 8014d3a:	d2f6      	bcs.n	8014d2a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8014d3c:	68fb      	ldr	r3, [r7, #12]
 8014d3e:	685a      	ldr	r2, [r3, #4]
 8014d40:	683b      	ldr	r3, [r7, #0]
 8014d42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8014d44:	683b      	ldr	r3, [r7, #0]
 8014d46:	685b      	ldr	r3, [r3, #4]
 8014d48:	683a      	ldr	r2, [r7, #0]
 8014d4a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8014d4c:	683b      	ldr	r3, [r7, #0]
 8014d4e:	68fa      	ldr	r2, [r7, #12]
 8014d50:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8014d52:	68fb      	ldr	r3, [r7, #12]
 8014d54:	683a      	ldr	r2, [r7, #0]
 8014d56:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8014d58:	683b      	ldr	r3, [r7, #0]
 8014d5a:	687a      	ldr	r2, [r7, #4]
 8014d5c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014d5e:	687b      	ldr	r3, [r7, #4]
 8014d60:	681b      	ldr	r3, [r3, #0]
 8014d62:	1c5a      	adds	r2, r3, #1
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	601a      	str	r2, [r3, #0]
}
 8014d68:	bf00      	nop
 8014d6a:	3714      	adds	r7, #20
 8014d6c:	46bd      	mov	sp, r7
 8014d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d72:	4770      	bx	lr

08014d74 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8014d74:	b480      	push	{r7}
 8014d76:	b085      	sub	sp, #20
 8014d78:	af00      	add	r7, sp, #0
 8014d7a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8014d7c:	687b      	ldr	r3, [r7, #4]
 8014d7e:	691b      	ldr	r3, [r3, #16]
 8014d80:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8014d82:	687b      	ldr	r3, [r7, #4]
 8014d84:	685b      	ldr	r3, [r3, #4]
 8014d86:	687a      	ldr	r2, [r7, #4]
 8014d88:	6892      	ldr	r2, [r2, #8]
 8014d8a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	689b      	ldr	r3, [r3, #8]
 8014d90:	687a      	ldr	r2, [r7, #4]
 8014d92:	6852      	ldr	r2, [r2, #4]
 8014d94:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8014d96:	68fb      	ldr	r3, [r7, #12]
 8014d98:	685b      	ldr	r3, [r3, #4]
 8014d9a:	687a      	ldr	r2, [r7, #4]
 8014d9c:	429a      	cmp	r2, r3
 8014d9e:	d103      	bne.n	8014da8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	689a      	ldr	r2, [r3, #8]
 8014da4:	68fb      	ldr	r3, [r7, #12]
 8014da6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	2200      	movs	r2, #0
 8014dac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8014dae:	68fb      	ldr	r3, [r7, #12]
 8014db0:	681b      	ldr	r3, [r3, #0]
 8014db2:	1e5a      	subs	r2, r3, #1
 8014db4:	68fb      	ldr	r3, [r7, #12]
 8014db6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8014db8:	68fb      	ldr	r3, [r7, #12]
 8014dba:	681b      	ldr	r3, [r3, #0]
}
 8014dbc:	4618      	mov	r0, r3
 8014dbe:	3714      	adds	r7, #20
 8014dc0:	46bd      	mov	sp, r7
 8014dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dc6:	4770      	bx	lr

08014dc8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8014dc8:	b580      	push	{r7, lr}
 8014dca:	b08e      	sub	sp, #56	@ 0x38
 8014dcc:	af00      	add	r7, sp, #0
 8014dce:	60f8      	str	r0, [r7, #12]
 8014dd0:	60b9      	str	r1, [r7, #8]
 8014dd2:	607a      	str	r2, [r7, #4]
 8014dd4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8014dd6:	2300      	movs	r3, #0
 8014dd8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014dda:	68fb      	ldr	r3, [r7, #12]
 8014ddc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8014dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014de0:	2b00      	cmp	r3, #0
 8014de2:	d10b      	bne.n	8014dfc <xQueueGenericSend+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8014de4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014de8:	f383 8811 	msr	BASEPRI, r3
 8014dec:	f3bf 8f6f 	isb	sy
 8014df0:	f3bf 8f4f 	dsb	sy
 8014df4:	62bb      	str	r3, [r7, #40]	@ 0x28
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8014df6:	bf00      	nop
 8014df8:	bf00      	nop
 8014dfa:	e7fd      	b.n	8014df8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014dfc:	68bb      	ldr	r3, [r7, #8]
 8014dfe:	2b00      	cmp	r3, #0
 8014e00:	d103      	bne.n	8014e0a <xQueueGenericSend+0x42>
 8014e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014e06:	2b00      	cmp	r3, #0
 8014e08:	d101      	bne.n	8014e0e <xQueueGenericSend+0x46>
 8014e0a:	2301      	movs	r3, #1
 8014e0c:	e000      	b.n	8014e10 <xQueueGenericSend+0x48>
 8014e0e:	2300      	movs	r3, #0
 8014e10:	2b00      	cmp	r3, #0
 8014e12:	d10b      	bne.n	8014e2c <xQueueGenericSend+0x64>
	__asm volatile
 8014e14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014e18:	f383 8811 	msr	BASEPRI, r3
 8014e1c:	f3bf 8f6f 	isb	sy
 8014e20:	f3bf 8f4f 	dsb	sy
 8014e24:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8014e26:	bf00      	nop
 8014e28:	bf00      	nop
 8014e2a:	e7fd      	b.n	8014e28 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014e2c:	683b      	ldr	r3, [r7, #0]
 8014e2e:	2b02      	cmp	r3, #2
 8014e30:	d103      	bne.n	8014e3a <xQueueGenericSend+0x72>
 8014e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014e36:	2b01      	cmp	r3, #1
 8014e38:	d101      	bne.n	8014e3e <xQueueGenericSend+0x76>
 8014e3a:	2301      	movs	r3, #1
 8014e3c:	e000      	b.n	8014e40 <xQueueGenericSend+0x78>
 8014e3e:	2300      	movs	r3, #0
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	d10b      	bne.n	8014e5c <xQueueGenericSend+0x94>
	__asm volatile
 8014e44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014e48:	f383 8811 	msr	BASEPRI, r3
 8014e4c:	f3bf 8f6f 	isb	sy
 8014e50:	f3bf 8f4f 	dsb	sy
 8014e54:	623b      	str	r3, [r7, #32]
}
 8014e56:	bf00      	nop
 8014e58:	bf00      	nop
 8014e5a:	e7fd      	b.n	8014e58 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014e5c:	f001 f9d8 	bl	8016210 <xTaskGetSchedulerState>
 8014e60:	4603      	mov	r3, r0
 8014e62:	2b00      	cmp	r3, #0
 8014e64:	d102      	bne.n	8014e6c <xQueueGenericSend+0xa4>
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	2b00      	cmp	r3, #0
 8014e6a:	d101      	bne.n	8014e70 <xQueueGenericSend+0xa8>
 8014e6c:	2301      	movs	r3, #1
 8014e6e:	e000      	b.n	8014e72 <xQueueGenericSend+0xaa>
 8014e70:	2300      	movs	r3, #0
 8014e72:	2b00      	cmp	r3, #0
 8014e74:	d10b      	bne.n	8014e8e <xQueueGenericSend+0xc6>
	__asm volatile
 8014e76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014e7a:	f383 8811 	msr	BASEPRI, r3
 8014e7e:	f3bf 8f6f 	isb	sy
 8014e82:	f3bf 8f4f 	dsb	sy
 8014e86:	61fb      	str	r3, [r7, #28]
}
 8014e88:	bf00      	nop
 8014e8a:	bf00      	nop
 8014e8c:	e7fd      	b.n	8014e8a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014e8e:	f001 fd13 	bl	80168b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8014e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014e9a:	429a      	cmp	r2, r3
 8014e9c:	d302      	bcc.n	8014ea4 <xQueueGenericSend+0xdc>
 8014e9e:	683b      	ldr	r3, [r7, #0]
 8014ea0:	2b02      	cmp	r3, #2
 8014ea2:	d129      	bne.n	8014ef8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014ea4:	683a      	ldr	r2, [r7, #0]
 8014ea6:	68b9      	ldr	r1, [r7, #8]
 8014ea8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014eaa:	f000 fac9 	bl	8015440 <prvCopyDataToQueue>
 8014eae:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014eb4:	2b00      	cmp	r3, #0
 8014eb6:	d010      	beq.n	8014eda <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014eba:	3324      	adds	r3, #36	@ 0x24
 8014ebc:	4618      	mov	r0, r3
 8014ebe:	f000 ffe7 	bl	8015e90 <xTaskRemoveFromEventList>
 8014ec2:	4603      	mov	r3, r0
 8014ec4:	2b00      	cmp	r3, #0
 8014ec6:	d013      	beq.n	8014ef0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8014ec8:	4b3f      	ldr	r3, [pc, #252]	@ (8014fc8 <xQueueGenericSend+0x200>)
 8014eca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014ece:	601a      	str	r2, [r3, #0]
 8014ed0:	f3bf 8f4f 	dsb	sy
 8014ed4:	f3bf 8f6f 	isb	sy
 8014ed8:	e00a      	b.n	8014ef0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8014eda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014edc:	2b00      	cmp	r3, #0
 8014ede:	d007      	beq.n	8014ef0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8014ee0:	4b39      	ldr	r3, [pc, #228]	@ (8014fc8 <xQueueGenericSend+0x200>)
 8014ee2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014ee6:	601a      	str	r2, [r3, #0]
 8014ee8:	f3bf 8f4f 	dsb	sy
 8014eec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8014ef0:	f001 fd14 	bl	801691c <vPortExitCritical>
				return pdPASS;
 8014ef4:	2301      	movs	r3, #1
 8014ef6:	e063      	b.n	8014fc0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	2b00      	cmp	r3, #0
 8014efc:	d103      	bne.n	8014f06 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8014efe:	f001 fd0d 	bl	801691c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8014f02:	2300      	movs	r3, #0
 8014f04:	e05c      	b.n	8014fc0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014f06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014f08:	2b00      	cmp	r3, #0
 8014f0a:	d106      	bne.n	8014f1a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014f0c:	f107 0314 	add.w	r3, r7, #20
 8014f10:	4618      	mov	r0, r3
 8014f12:	f001 f821 	bl	8015f58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014f16:	2301      	movs	r3, #1
 8014f18:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014f1a:	f001 fcff 	bl	801691c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014f1e:	f000 fdcf 	bl	8015ac0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014f22:	f001 fcc9 	bl	80168b8 <vPortEnterCritical>
 8014f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f28:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8014f2c:	b25b      	sxtb	r3, r3
 8014f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f32:	d103      	bne.n	8014f3c <xQueueGenericSend+0x174>
 8014f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f36:	2200      	movs	r2, #0
 8014f38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8014f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f3e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8014f42:	b25b      	sxtb	r3, r3
 8014f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f48:	d103      	bne.n	8014f52 <xQueueGenericSend+0x18a>
 8014f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f4c:	2200      	movs	r2, #0
 8014f4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8014f52:	f001 fce3 	bl	801691c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014f56:	1d3a      	adds	r2, r7, #4
 8014f58:	f107 0314 	add.w	r3, r7, #20
 8014f5c:	4611      	mov	r1, r2
 8014f5e:	4618      	mov	r0, r3
 8014f60:	f001 f810 	bl	8015f84 <xTaskCheckForTimeOut>
 8014f64:	4603      	mov	r3, r0
 8014f66:	2b00      	cmp	r3, #0
 8014f68:	d124      	bne.n	8014fb4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8014f6a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014f6c:	f000 fb60 	bl	8015630 <prvIsQueueFull>
 8014f70:	4603      	mov	r3, r0
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	d018      	beq.n	8014fa8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8014f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f78:	3310      	adds	r3, #16
 8014f7a:	687a      	ldr	r2, [r7, #4]
 8014f7c:	4611      	mov	r1, r2
 8014f7e:	4618      	mov	r0, r3
 8014f80:	f000 ff60 	bl	8015e44 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8014f84:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014f86:	f000 faeb 	bl	8015560 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8014f8a:	f000 fda7 	bl	8015adc <xTaskResumeAll>
 8014f8e:	4603      	mov	r3, r0
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	f47f af7c 	bne.w	8014e8e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8014f96:	4b0c      	ldr	r3, [pc, #48]	@ (8014fc8 <xQueueGenericSend+0x200>)
 8014f98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014f9c:	601a      	str	r2, [r3, #0]
 8014f9e:	f3bf 8f4f 	dsb	sy
 8014fa2:	f3bf 8f6f 	isb	sy
 8014fa6:	e772      	b.n	8014e8e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8014fa8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014faa:	f000 fad9 	bl	8015560 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014fae:	f000 fd95 	bl	8015adc <xTaskResumeAll>
 8014fb2:	e76c      	b.n	8014e8e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8014fb4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014fb6:	f000 fad3 	bl	8015560 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014fba:	f000 fd8f 	bl	8015adc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8014fbe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8014fc0:	4618      	mov	r0, r3
 8014fc2:	3738      	adds	r7, #56	@ 0x38
 8014fc4:	46bd      	mov	sp, r7
 8014fc6:	bd80      	pop	{r7, pc}
 8014fc8:	e000ed04 	.word	0xe000ed04

08014fcc <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8014fcc:	b580      	push	{r7, lr}
 8014fce:	b08e      	sub	sp, #56	@ 0x38
 8014fd0:	af00      	add	r7, sp, #0
 8014fd2:	6078      	str	r0, [r7, #4]
 8014fd4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8014fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014fdc:	2b00      	cmp	r3, #0
 8014fde:	d10b      	bne.n	8014ff8 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8014fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014fe4:	f383 8811 	msr	BASEPRI, r3
 8014fe8:	f3bf 8f6f 	isb	sy
 8014fec:	f3bf 8f4f 	dsb	sy
 8014ff0:	623b      	str	r3, [r7, #32]
}
 8014ff2:	bf00      	nop
 8014ff4:	bf00      	nop
 8014ff6:	e7fd      	b.n	8014ff4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8014ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014ffc:	2b00      	cmp	r3, #0
 8014ffe:	d00b      	beq.n	8015018 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8015000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015004:	f383 8811 	msr	BASEPRI, r3
 8015008:	f3bf 8f6f 	isb	sy
 801500c:	f3bf 8f4f 	dsb	sy
 8015010:	61fb      	str	r3, [r7, #28]
}
 8015012:	bf00      	nop
 8015014:	bf00      	nop
 8015016:	e7fd      	b.n	8015014 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8015018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801501a:	681b      	ldr	r3, [r3, #0]
 801501c:	2b00      	cmp	r3, #0
 801501e:	d103      	bne.n	8015028 <xQueueGiveFromISR+0x5c>
 8015020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015022:	689b      	ldr	r3, [r3, #8]
 8015024:	2b00      	cmp	r3, #0
 8015026:	d101      	bne.n	801502c <xQueueGiveFromISR+0x60>
 8015028:	2301      	movs	r3, #1
 801502a:	e000      	b.n	801502e <xQueueGiveFromISR+0x62>
 801502c:	2300      	movs	r3, #0
 801502e:	2b00      	cmp	r3, #0
 8015030:	d10b      	bne.n	801504a <xQueueGiveFromISR+0x7e>
	__asm volatile
 8015032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015036:	f383 8811 	msr	BASEPRI, r3
 801503a:	f3bf 8f6f 	isb	sy
 801503e:	f3bf 8f4f 	dsb	sy
 8015042:	61bb      	str	r3, [r7, #24]
}
 8015044:	bf00      	nop
 8015046:	bf00      	nop
 8015048:	e7fd      	b.n	8015046 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801504a:	f001 fd15 	bl	8016a78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801504e:	f3ef 8211 	mrs	r2, BASEPRI
 8015052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015056:	f383 8811 	msr	BASEPRI, r3
 801505a:	f3bf 8f6f 	isb	sy
 801505e:	f3bf 8f4f 	dsb	sy
 8015062:	617a      	str	r2, [r7, #20]
 8015064:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8015066:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015068:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801506a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801506c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801506e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8015070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015072:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015074:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015076:	429a      	cmp	r2, r3
 8015078:	d22b      	bcs.n	80150d2 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801507a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801507c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8015080:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8015084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015086:	1c5a      	adds	r2, r3, #1
 8015088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801508a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801508c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8015090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015094:	d112      	bne.n	80150bc <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801509a:	2b00      	cmp	r3, #0
 801509c:	d016      	beq.n	80150cc <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801509e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80150a0:	3324      	adds	r3, #36	@ 0x24
 80150a2:	4618      	mov	r0, r3
 80150a4:	f000 fef4 	bl	8015e90 <xTaskRemoveFromEventList>
 80150a8:	4603      	mov	r3, r0
 80150aa:	2b00      	cmp	r3, #0
 80150ac:	d00e      	beq.n	80150cc <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80150ae:	683b      	ldr	r3, [r7, #0]
 80150b0:	2b00      	cmp	r3, #0
 80150b2:	d00b      	beq.n	80150cc <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80150b4:	683b      	ldr	r3, [r7, #0]
 80150b6:	2201      	movs	r2, #1
 80150b8:	601a      	str	r2, [r3, #0]
 80150ba:	e007      	b.n	80150cc <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80150bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80150c0:	3301      	adds	r3, #1
 80150c2:	b2db      	uxtb	r3, r3
 80150c4:	b25a      	sxtb	r2, r3
 80150c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80150c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80150cc:	2301      	movs	r3, #1
 80150ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80150d0:	e001      	b.n	80150d6 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80150d2:	2300      	movs	r3, #0
 80150d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80150d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80150d8:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80150da:	68fb      	ldr	r3, [r7, #12]
 80150dc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80150e0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80150e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80150e4:	4618      	mov	r0, r3
 80150e6:	3738      	adds	r7, #56	@ 0x38
 80150e8:	46bd      	mov	sp, r7
 80150ea:	bd80      	pop	{r7, pc}

080150ec <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80150ec:	b580      	push	{r7, lr}
 80150ee:	b08e      	sub	sp, #56	@ 0x38
 80150f0:	af00      	add	r7, sp, #0
 80150f2:	6078      	str	r0, [r7, #4]
 80150f4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80150f6:	2300      	movs	r3, #0
 80150f8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80150fa:	687b      	ldr	r3, [r7, #4]
 80150fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80150fe:	2300      	movs	r3, #0
 8015100:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8015102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015104:	2b00      	cmp	r3, #0
 8015106:	d10b      	bne.n	8015120 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8015108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801510c:	f383 8811 	msr	BASEPRI, r3
 8015110:	f3bf 8f6f 	isb	sy
 8015114:	f3bf 8f4f 	dsb	sy
 8015118:	623b      	str	r3, [r7, #32]
}
 801511a:	bf00      	nop
 801511c:	bf00      	nop
 801511e:	e7fd      	b.n	801511c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8015120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015124:	2b00      	cmp	r3, #0
 8015126:	d00b      	beq.n	8015140 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8015128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801512c:	f383 8811 	msr	BASEPRI, r3
 8015130:	f3bf 8f6f 	isb	sy
 8015134:	f3bf 8f4f 	dsb	sy
 8015138:	61fb      	str	r3, [r7, #28]
}
 801513a:	bf00      	nop
 801513c:	bf00      	nop
 801513e:	e7fd      	b.n	801513c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015140:	f001 f866 	bl	8016210 <xTaskGetSchedulerState>
 8015144:	4603      	mov	r3, r0
 8015146:	2b00      	cmp	r3, #0
 8015148:	d102      	bne.n	8015150 <xQueueSemaphoreTake+0x64>
 801514a:	683b      	ldr	r3, [r7, #0]
 801514c:	2b00      	cmp	r3, #0
 801514e:	d101      	bne.n	8015154 <xQueueSemaphoreTake+0x68>
 8015150:	2301      	movs	r3, #1
 8015152:	e000      	b.n	8015156 <xQueueSemaphoreTake+0x6a>
 8015154:	2300      	movs	r3, #0
 8015156:	2b00      	cmp	r3, #0
 8015158:	d10b      	bne.n	8015172 <xQueueSemaphoreTake+0x86>
	__asm volatile
 801515a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801515e:	f383 8811 	msr	BASEPRI, r3
 8015162:	f3bf 8f6f 	isb	sy
 8015166:	f3bf 8f4f 	dsb	sy
 801516a:	61bb      	str	r3, [r7, #24]
}
 801516c:	bf00      	nop
 801516e:	bf00      	nop
 8015170:	e7fd      	b.n	801516e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015172:	f001 fba1 	bl	80168b8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8015176:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801517a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801517c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801517e:	2b00      	cmp	r3, #0
 8015180:	d024      	beq.n	80151cc <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8015182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015184:	1e5a      	subs	r2, r3, #1
 8015186:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015188:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801518a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801518c:	681b      	ldr	r3, [r3, #0]
 801518e:	2b00      	cmp	r3, #0
 8015190:	d104      	bne.n	801519c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8015192:	f001 f9e9 	bl	8016568 <pvTaskIncrementMutexHeldCount>
 8015196:	4602      	mov	r2, r0
 8015198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801519a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801519c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801519e:	691b      	ldr	r3, [r3, #16]
 80151a0:	2b00      	cmp	r3, #0
 80151a2:	d00f      	beq.n	80151c4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80151a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151a6:	3310      	adds	r3, #16
 80151a8:	4618      	mov	r0, r3
 80151aa:	f000 fe71 	bl	8015e90 <xTaskRemoveFromEventList>
 80151ae:	4603      	mov	r3, r0
 80151b0:	2b00      	cmp	r3, #0
 80151b2:	d007      	beq.n	80151c4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80151b4:	4b54      	ldr	r3, [pc, #336]	@ (8015308 <xQueueSemaphoreTake+0x21c>)
 80151b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80151ba:	601a      	str	r2, [r3, #0]
 80151bc:	f3bf 8f4f 	dsb	sy
 80151c0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80151c4:	f001 fbaa 	bl	801691c <vPortExitCritical>
				return pdPASS;
 80151c8:	2301      	movs	r3, #1
 80151ca:	e098      	b.n	80152fe <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80151cc:	683b      	ldr	r3, [r7, #0]
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	d112      	bne.n	80151f8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80151d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80151d4:	2b00      	cmp	r3, #0
 80151d6:	d00b      	beq.n	80151f0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80151d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80151dc:	f383 8811 	msr	BASEPRI, r3
 80151e0:	f3bf 8f6f 	isb	sy
 80151e4:	f3bf 8f4f 	dsb	sy
 80151e8:	617b      	str	r3, [r7, #20]
}
 80151ea:	bf00      	nop
 80151ec:	bf00      	nop
 80151ee:	e7fd      	b.n	80151ec <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80151f0:	f001 fb94 	bl	801691c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80151f4:	2300      	movs	r3, #0
 80151f6:	e082      	b.n	80152fe <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80151f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80151fa:	2b00      	cmp	r3, #0
 80151fc:	d106      	bne.n	801520c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80151fe:	f107 030c 	add.w	r3, r7, #12
 8015202:	4618      	mov	r0, r3
 8015204:	f000 fea8 	bl	8015f58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015208:	2301      	movs	r3, #1
 801520a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801520c:	f001 fb86 	bl	801691c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015210:	f000 fc56 	bl	8015ac0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015214:	f001 fb50 	bl	80168b8 <vPortEnterCritical>
 8015218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801521a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801521e:	b25b      	sxtb	r3, r3
 8015220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015224:	d103      	bne.n	801522e <xQueueSemaphoreTake+0x142>
 8015226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015228:	2200      	movs	r2, #0
 801522a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801522e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015230:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8015234:	b25b      	sxtb	r3, r3
 8015236:	f1b3 3fff 	cmp.w	r3, #4294967295
 801523a:	d103      	bne.n	8015244 <xQueueSemaphoreTake+0x158>
 801523c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801523e:	2200      	movs	r2, #0
 8015240:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8015244:	f001 fb6a 	bl	801691c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015248:	463a      	mov	r2, r7
 801524a:	f107 030c 	add.w	r3, r7, #12
 801524e:	4611      	mov	r1, r2
 8015250:	4618      	mov	r0, r3
 8015252:	f000 fe97 	bl	8015f84 <xTaskCheckForTimeOut>
 8015256:	4603      	mov	r3, r0
 8015258:	2b00      	cmp	r3, #0
 801525a:	d132      	bne.n	80152c2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801525c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801525e:	f000 f9d1 	bl	8015604 <prvIsQueueEmpty>
 8015262:	4603      	mov	r3, r0
 8015264:	2b00      	cmp	r3, #0
 8015266:	d026      	beq.n	80152b6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801526a:	681b      	ldr	r3, [r3, #0]
 801526c:	2b00      	cmp	r3, #0
 801526e:	d109      	bne.n	8015284 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8015270:	f001 fb22 	bl	80168b8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8015274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015276:	689b      	ldr	r3, [r3, #8]
 8015278:	4618      	mov	r0, r3
 801527a:	f000 ffe7 	bl	801624c <xTaskPriorityInherit>
 801527e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8015280:	f001 fb4c 	bl	801691c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8015284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015286:	3324      	adds	r3, #36	@ 0x24
 8015288:	683a      	ldr	r2, [r7, #0]
 801528a:	4611      	mov	r1, r2
 801528c:	4618      	mov	r0, r3
 801528e:	f000 fdd9 	bl	8015e44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8015292:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015294:	f000 f964 	bl	8015560 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015298:	f000 fc20 	bl	8015adc <xTaskResumeAll>
 801529c:	4603      	mov	r3, r0
 801529e:	2b00      	cmp	r3, #0
 80152a0:	f47f af67 	bne.w	8015172 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80152a4:	4b18      	ldr	r3, [pc, #96]	@ (8015308 <xQueueSemaphoreTake+0x21c>)
 80152a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80152aa:	601a      	str	r2, [r3, #0]
 80152ac:	f3bf 8f4f 	dsb	sy
 80152b0:	f3bf 8f6f 	isb	sy
 80152b4:	e75d      	b.n	8015172 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80152b6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80152b8:	f000 f952 	bl	8015560 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80152bc:	f000 fc0e 	bl	8015adc <xTaskResumeAll>
 80152c0:	e757      	b.n	8015172 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80152c2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80152c4:	f000 f94c 	bl	8015560 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80152c8:	f000 fc08 	bl	8015adc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80152cc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80152ce:	f000 f999 	bl	8015604 <prvIsQueueEmpty>
 80152d2:	4603      	mov	r3, r0
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	f43f af4c 	beq.w	8015172 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80152da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80152dc:	2b00      	cmp	r3, #0
 80152de:	d00d      	beq.n	80152fc <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80152e0:	f001 faea 	bl	80168b8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80152e4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80152e6:	f000 f893 	bl	8015410 <prvGetDisinheritPriorityAfterTimeout>
 80152ea:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80152ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152ee:	689b      	ldr	r3, [r3, #8]
 80152f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80152f2:	4618      	mov	r0, r3
 80152f4:	f001 f8a8 	bl	8016448 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80152f8:	f001 fb10 	bl	801691c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80152fc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80152fe:	4618      	mov	r0, r3
 8015300:	3738      	adds	r7, #56	@ 0x38
 8015302:	46bd      	mov	sp, r7
 8015304:	bd80      	pop	{r7, pc}
 8015306:	bf00      	nop
 8015308:	e000ed04 	.word	0xe000ed04

0801530c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801530c:	b580      	push	{r7, lr}
 801530e:	b08e      	sub	sp, #56	@ 0x38
 8015310:	af00      	add	r7, sp, #0
 8015312:	60f8      	str	r0, [r7, #12]
 8015314:	60b9      	str	r1, [r7, #8]
 8015316:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015318:	68fb      	ldr	r3, [r7, #12]
 801531a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 801531c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801531e:	2b00      	cmp	r3, #0
 8015320:	d10b      	bne.n	801533a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8015322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015326:	f383 8811 	msr	BASEPRI, r3
 801532a:	f3bf 8f6f 	isb	sy
 801532e:	f3bf 8f4f 	dsb	sy
 8015332:	623b      	str	r3, [r7, #32]
}
 8015334:	bf00      	nop
 8015336:	bf00      	nop
 8015338:	e7fd      	b.n	8015336 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801533a:	68bb      	ldr	r3, [r7, #8]
 801533c:	2b00      	cmp	r3, #0
 801533e:	d103      	bne.n	8015348 <xQueueReceiveFromISR+0x3c>
 8015340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015344:	2b00      	cmp	r3, #0
 8015346:	d101      	bne.n	801534c <xQueueReceiveFromISR+0x40>
 8015348:	2301      	movs	r3, #1
 801534a:	e000      	b.n	801534e <xQueueReceiveFromISR+0x42>
 801534c:	2300      	movs	r3, #0
 801534e:	2b00      	cmp	r3, #0
 8015350:	d10b      	bne.n	801536a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8015352:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015356:	f383 8811 	msr	BASEPRI, r3
 801535a:	f3bf 8f6f 	isb	sy
 801535e:	f3bf 8f4f 	dsb	sy
 8015362:	61fb      	str	r3, [r7, #28]
}
 8015364:	bf00      	nop
 8015366:	bf00      	nop
 8015368:	e7fd      	b.n	8015366 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801536a:	f001 fb85 	bl	8016a78 <vPortValidateInterruptPriority>
	__asm volatile
 801536e:	f3ef 8211 	mrs	r2, BASEPRI
 8015372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015376:	f383 8811 	msr	BASEPRI, r3
 801537a:	f3bf 8f6f 	isb	sy
 801537e:	f3bf 8f4f 	dsb	sy
 8015382:	61ba      	str	r2, [r7, #24]
 8015384:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8015386:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015388:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801538a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801538c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801538e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015392:	2b00      	cmp	r3, #0
 8015394:	d02f      	beq.n	80153f6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8015396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015398:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801539c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80153a0:	68b9      	ldr	r1, [r7, #8]
 80153a2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80153a4:	f000 f8b6 	bl	8015514 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80153a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80153aa:	1e5a      	subs	r2, r3, #1
 80153ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80153ae:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80153b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80153b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80153b8:	d112      	bne.n	80153e0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80153ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80153bc:	691b      	ldr	r3, [r3, #16]
 80153be:	2b00      	cmp	r3, #0
 80153c0:	d016      	beq.n	80153f0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80153c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80153c4:	3310      	adds	r3, #16
 80153c6:	4618      	mov	r0, r3
 80153c8:	f000 fd62 	bl	8015e90 <xTaskRemoveFromEventList>
 80153cc:	4603      	mov	r3, r0
 80153ce:	2b00      	cmp	r3, #0
 80153d0:	d00e      	beq.n	80153f0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	2b00      	cmp	r3, #0
 80153d6:	d00b      	beq.n	80153f0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	2201      	movs	r2, #1
 80153dc:	601a      	str	r2, [r3, #0]
 80153de:	e007      	b.n	80153f0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80153e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80153e4:	3301      	adds	r3, #1
 80153e6:	b2db      	uxtb	r3, r3
 80153e8:	b25a      	sxtb	r2, r3
 80153ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80153ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80153f0:	2301      	movs	r3, #1
 80153f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80153f4:	e001      	b.n	80153fa <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80153f6:	2300      	movs	r3, #0
 80153f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80153fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153fc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80153fe:	693b      	ldr	r3, [r7, #16]
 8015400:	f383 8811 	msr	BASEPRI, r3
}
 8015404:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015406:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8015408:	4618      	mov	r0, r3
 801540a:	3738      	adds	r7, #56	@ 0x38
 801540c:	46bd      	mov	sp, r7
 801540e:	bd80      	pop	{r7, pc}

08015410 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8015410:	b480      	push	{r7}
 8015412:	b085      	sub	sp, #20
 8015414:	af00      	add	r7, sp, #0
 8015416:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8015418:	687b      	ldr	r3, [r7, #4]
 801541a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801541c:	2b00      	cmp	r3, #0
 801541e:	d006      	beq.n	801542e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015424:	681b      	ldr	r3, [r3, #0]
 8015426:	f1c3 0307 	rsb	r3, r3, #7
 801542a:	60fb      	str	r3, [r7, #12]
 801542c:	e001      	b.n	8015432 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801542e:	2300      	movs	r3, #0
 8015430:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8015432:	68fb      	ldr	r3, [r7, #12]
	}
 8015434:	4618      	mov	r0, r3
 8015436:	3714      	adds	r7, #20
 8015438:	46bd      	mov	sp, r7
 801543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801543e:	4770      	bx	lr

08015440 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8015440:	b580      	push	{r7, lr}
 8015442:	b086      	sub	sp, #24
 8015444:	af00      	add	r7, sp, #0
 8015446:	60f8      	str	r0, [r7, #12]
 8015448:	60b9      	str	r1, [r7, #8]
 801544a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801544c:	2300      	movs	r3, #0
 801544e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015450:	68fb      	ldr	r3, [r7, #12]
 8015452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015454:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8015456:	68fb      	ldr	r3, [r7, #12]
 8015458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801545a:	2b00      	cmp	r3, #0
 801545c:	d10d      	bne.n	801547a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801545e:	68fb      	ldr	r3, [r7, #12]
 8015460:	681b      	ldr	r3, [r3, #0]
 8015462:	2b00      	cmp	r3, #0
 8015464:	d14d      	bne.n	8015502 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8015466:	68fb      	ldr	r3, [r7, #12]
 8015468:	689b      	ldr	r3, [r3, #8]
 801546a:	4618      	mov	r0, r3
 801546c:	f000 ff64 	bl	8016338 <xTaskPriorityDisinherit>
 8015470:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8015472:	68fb      	ldr	r3, [r7, #12]
 8015474:	2200      	movs	r2, #0
 8015476:	609a      	str	r2, [r3, #8]
 8015478:	e043      	b.n	8015502 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	2b00      	cmp	r3, #0
 801547e:	d119      	bne.n	80154b4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015480:	68fb      	ldr	r3, [r7, #12]
 8015482:	6858      	ldr	r0, [r3, #4]
 8015484:	68fb      	ldr	r3, [r7, #12]
 8015486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015488:	461a      	mov	r2, r3
 801548a:	68b9      	ldr	r1, [r7, #8]
 801548c:	f002 fd0d 	bl	8017eaa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015490:	68fb      	ldr	r3, [r7, #12]
 8015492:	685a      	ldr	r2, [r3, #4]
 8015494:	68fb      	ldr	r3, [r7, #12]
 8015496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015498:	441a      	add	r2, r3
 801549a:	68fb      	ldr	r3, [r7, #12]
 801549c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801549e:	68fb      	ldr	r3, [r7, #12]
 80154a0:	685a      	ldr	r2, [r3, #4]
 80154a2:	68fb      	ldr	r3, [r7, #12]
 80154a4:	689b      	ldr	r3, [r3, #8]
 80154a6:	429a      	cmp	r2, r3
 80154a8:	d32b      	bcc.n	8015502 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80154aa:	68fb      	ldr	r3, [r7, #12]
 80154ac:	681a      	ldr	r2, [r3, #0]
 80154ae:	68fb      	ldr	r3, [r7, #12]
 80154b0:	605a      	str	r2, [r3, #4]
 80154b2:	e026      	b.n	8015502 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80154b4:	68fb      	ldr	r3, [r7, #12]
 80154b6:	68d8      	ldr	r0, [r3, #12]
 80154b8:	68fb      	ldr	r3, [r7, #12]
 80154ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80154bc:	461a      	mov	r2, r3
 80154be:	68b9      	ldr	r1, [r7, #8]
 80154c0:	f002 fcf3 	bl	8017eaa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80154c4:	68fb      	ldr	r3, [r7, #12]
 80154c6:	68da      	ldr	r2, [r3, #12]
 80154c8:	68fb      	ldr	r3, [r7, #12]
 80154ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80154cc:	425b      	negs	r3, r3
 80154ce:	441a      	add	r2, r3
 80154d0:	68fb      	ldr	r3, [r7, #12]
 80154d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80154d4:	68fb      	ldr	r3, [r7, #12]
 80154d6:	68da      	ldr	r2, [r3, #12]
 80154d8:	68fb      	ldr	r3, [r7, #12]
 80154da:	681b      	ldr	r3, [r3, #0]
 80154dc:	429a      	cmp	r2, r3
 80154de:	d207      	bcs.n	80154f0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80154e0:	68fb      	ldr	r3, [r7, #12]
 80154e2:	689a      	ldr	r2, [r3, #8]
 80154e4:	68fb      	ldr	r3, [r7, #12]
 80154e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80154e8:	425b      	negs	r3, r3
 80154ea:	441a      	add	r2, r3
 80154ec:	68fb      	ldr	r3, [r7, #12]
 80154ee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	2b02      	cmp	r3, #2
 80154f4:	d105      	bne.n	8015502 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80154f6:	693b      	ldr	r3, [r7, #16]
 80154f8:	2b00      	cmp	r3, #0
 80154fa:	d002      	beq.n	8015502 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80154fc:	693b      	ldr	r3, [r7, #16]
 80154fe:	3b01      	subs	r3, #1
 8015500:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8015502:	693b      	ldr	r3, [r7, #16]
 8015504:	1c5a      	adds	r2, r3, #1
 8015506:	68fb      	ldr	r3, [r7, #12]
 8015508:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 801550a:	697b      	ldr	r3, [r7, #20]
}
 801550c:	4618      	mov	r0, r3
 801550e:	3718      	adds	r7, #24
 8015510:	46bd      	mov	sp, r7
 8015512:	bd80      	pop	{r7, pc}

08015514 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8015514:	b580      	push	{r7, lr}
 8015516:	b082      	sub	sp, #8
 8015518:	af00      	add	r7, sp, #0
 801551a:	6078      	str	r0, [r7, #4]
 801551c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801551e:	687b      	ldr	r3, [r7, #4]
 8015520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015522:	2b00      	cmp	r3, #0
 8015524:	d018      	beq.n	8015558 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015526:	687b      	ldr	r3, [r7, #4]
 8015528:	68da      	ldr	r2, [r3, #12]
 801552a:	687b      	ldr	r3, [r7, #4]
 801552c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801552e:	441a      	add	r2, r3
 8015530:	687b      	ldr	r3, [r7, #4]
 8015532:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	68da      	ldr	r2, [r3, #12]
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	689b      	ldr	r3, [r3, #8]
 801553c:	429a      	cmp	r2, r3
 801553e:	d303      	bcc.n	8015548 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8015540:	687b      	ldr	r3, [r7, #4]
 8015542:	681a      	ldr	r2, [r3, #0]
 8015544:	687b      	ldr	r3, [r7, #4]
 8015546:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015548:	687b      	ldr	r3, [r7, #4]
 801554a:	68d9      	ldr	r1, [r3, #12]
 801554c:	687b      	ldr	r3, [r7, #4]
 801554e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015550:	461a      	mov	r2, r3
 8015552:	6838      	ldr	r0, [r7, #0]
 8015554:	f002 fca9 	bl	8017eaa <memcpy>
	}
}
 8015558:	bf00      	nop
 801555a:	3708      	adds	r7, #8
 801555c:	46bd      	mov	sp, r7
 801555e:	bd80      	pop	{r7, pc}

08015560 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8015560:	b580      	push	{r7, lr}
 8015562:	b084      	sub	sp, #16
 8015564:	af00      	add	r7, sp, #0
 8015566:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8015568:	f001 f9a6 	bl	80168b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801556c:	687b      	ldr	r3, [r7, #4]
 801556e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8015572:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015574:	e011      	b.n	801559a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015576:	687b      	ldr	r3, [r7, #4]
 8015578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801557a:	2b00      	cmp	r3, #0
 801557c:	d012      	beq.n	80155a4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801557e:	687b      	ldr	r3, [r7, #4]
 8015580:	3324      	adds	r3, #36	@ 0x24
 8015582:	4618      	mov	r0, r3
 8015584:	f000 fc84 	bl	8015e90 <xTaskRemoveFromEventList>
 8015588:	4603      	mov	r3, r0
 801558a:	2b00      	cmp	r3, #0
 801558c:	d001      	beq.n	8015592 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801558e:	f000 fd5d 	bl	801604c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8015592:	7bfb      	ldrb	r3, [r7, #15]
 8015594:	3b01      	subs	r3, #1
 8015596:	b2db      	uxtb	r3, r3
 8015598:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801559a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801559e:	2b00      	cmp	r3, #0
 80155a0:	dce9      	bgt.n	8015576 <prvUnlockQueue+0x16>
 80155a2:	e000      	b.n	80155a6 <prvUnlockQueue+0x46>
					break;
 80155a4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80155a6:	687b      	ldr	r3, [r7, #4]
 80155a8:	22ff      	movs	r2, #255	@ 0xff
 80155aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80155ae:	f001 f9b5 	bl	801691c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80155b2:	f001 f981 	bl	80168b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80155bc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80155be:	e011      	b.n	80155e4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80155c0:	687b      	ldr	r3, [r7, #4]
 80155c2:	691b      	ldr	r3, [r3, #16]
 80155c4:	2b00      	cmp	r3, #0
 80155c6:	d012      	beq.n	80155ee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	3310      	adds	r3, #16
 80155cc:	4618      	mov	r0, r3
 80155ce:	f000 fc5f 	bl	8015e90 <xTaskRemoveFromEventList>
 80155d2:	4603      	mov	r3, r0
 80155d4:	2b00      	cmp	r3, #0
 80155d6:	d001      	beq.n	80155dc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80155d8:	f000 fd38 	bl	801604c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80155dc:	7bbb      	ldrb	r3, [r7, #14]
 80155de:	3b01      	subs	r3, #1
 80155e0:	b2db      	uxtb	r3, r3
 80155e2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80155e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80155e8:	2b00      	cmp	r3, #0
 80155ea:	dce9      	bgt.n	80155c0 <prvUnlockQueue+0x60>
 80155ec:	e000      	b.n	80155f0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80155ee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	22ff      	movs	r2, #255	@ 0xff
 80155f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80155f8:	f001 f990 	bl	801691c <vPortExitCritical>
}
 80155fc:	bf00      	nop
 80155fe:	3710      	adds	r7, #16
 8015600:	46bd      	mov	sp, r7
 8015602:	bd80      	pop	{r7, pc}

08015604 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8015604:	b580      	push	{r7, lr}
 8015606:	b084      	sub	sp, #16
 8015608:	af00      	add	r7, sp, #0
 801560a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801560c:	f001 f954 	bl	80168b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015614:	2b00      	cmp	r3, #0
 8015616:	d102      	bne.n	801561e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8015618:	2301      	movs	r3, #1
 801561a:	60fb      	str	r3, [r7, #12]
 801561c:	e001      	b.n	8015622 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801561e:	2300      	movs	r3, #0
 8015620:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8015622:	f001 f97b 	bl	801691c <vPortExitCritical>

	return xReturn;
 8015626:	68fb      	ldr	r3, [r7, #12]
}
 8015628:	4618      	mov	r0, r3
 801562a:	3710      	adds	r7, #16
 801562c:	46bd      	mov	sp, r7
 801562e:	bd80      	pop	{r7, pc}

08015630 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8015630:	b580      	push	{r7, lr}
 8015632:	b084      	sub	sp, #16
 8015634:	af00      	add	r7, sp, #0
 8015636:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8015638:	f001 f93e 	bl	80168b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801563c:	687b      	ldr	r3, [r7, #4]
 801563e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015640:	687b      	ldr	r3, [r7, #4]
 8015642:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015644:	429a      	cmp	r2, r3
 8015646:	d102      	bne.n	801564e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8015648:	2301      	movs	r3, #1
 801564a:	60fb      	str	r3, [r7, #12]
 801564c:	e001      	b.n	8015652 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801564e:	2300      	movs	r3, #0
 8015650:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8015652:	f001 f963 	bl	801691c <vPortExitCritical>

	return xReturn;
 8015656:	68fb      	ldr	r3, [r7, #12]
}
 8015658:	4618      	mov	r0, r3
 801565a:	3710      	adds	r7, #16
 801565c:	46bd      	mov	sp, r7
 801565e:	bd80      	pop	{r7, pc}

08015660 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8015660:	b580      	push	{r7, lr}
 8015662:	b08e      	sub	sp, #56	@ 0x38
 8015664:	af04      	add	r7, sp, #16
 8015666:	60f8      	str	r0, [r7, #12]
 8015668:	60b9      	str	r1, [r7, #8]
 801566a:	607a      	str	r2, [r7, #4]
 801566c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801566e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015670:	2b00      	cmp	r3, #0
 8015672:	d10b      	bne.n	801568c <xTaskCreateStatic+0x2c>
	__asm volatile
 8015674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015678:	f383 8811 	msr	BASEPRI, r3
 801567c:	f3bf 8f6f 	isb	sy
 8015680:	f3bf 8f4f 	dsb	sy
 8015684:	623b      	str	r3, [r7, #32]
}
 8015686:	bf00      	nop
 8015688:	bf00      	nop
 801568a:	e7fd      	b.n	8015688 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801568c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801568e:	2b00      	cmp	r3, #0
 8015690:	d10b      	bne.n	80156aa <xTaskCreateStatic+0x4a>
	__asm volatile
 8015692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015696:	f383 8811 	msr	BASEPRI, r3
 801569a:	f3bf 8f6f 	isb	sy
 801569e:	f3bf 8f4f 	dsb	sy
 80156a2:	61fb      	str	r3, [r7, #28]
}
 80156a4:	bf00      	nop
 80156a6:	bf00      	nop
 80156a8:	e7fd      	b.n	80156a6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80156aa:	2354      	movs	r3, #84	@ 0x54
 80156ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80156ae:	693b      	ldr	r3, [r7, #16]
 80156b0:	2b54      	cmp	r3, #84	@ 0x54
 80156b2:	d00b      	beq.n	80156cc <xTaskCreateStatic+0x6c>
	__asm volatile
 80156b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80156b8:	f383 8811 	msr	BASEPRI, r3
 80156bc:	f3bf 8f6f 	isb	sy
 80156c0:	f3bf 8f4f 	dsb	sy
 80156c4:	61bb      	str	r3, [r7, #24]
}
 80156c6:	bf00      	nop
 80156c8:	bf00      	nop
 80156ca:	e7fd      	b.n	80156c8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80156cc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80156ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156d0:	2b00      	cmp	r3, #0
 80156d2:	d01e      	beq.n	8015712 <xTaskCreateStatic+0xb2>
 80156d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80156d6:	2b00      	cmp	r3, #0
 80156d8:	d01b      	beq.n	8015712 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80156da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156dc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80156de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80156e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80156e2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80156e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80156e6:	2202      	movs	r2, #2
 80156e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80156ec:	2300      	movs	r3, #0
 80156ee:	9303      	str	r3, [sp, #12]
 80156f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80156f2:	9302      	str	r3, [sp, #8]
 80156f4:	f107 0314 	add.w	r3, r7, #20
 80156f8:	9301      	str	r3, [sp, #4]
 80156fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80156fc:	9300      	str	r3, [sp, #0]
 80156fe:	683b      	ldr	r3, [r7, #0]
 8015700:	687a      	ldr	r2, [r7, #4]
 8015702:	68b9      	ldr	r1, [r7, #8]
 8015704:	68f8      	ldr	r0, [r7, #12]
 8015706:	f000 f850 	bl	80157aa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801570a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801570c:	f000 f8d6 	bl	80158bc <prvAddNewTaskToReadyList>
 8015710:	e001      	b.n	8015716 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8015712:	2300      	movs	r3, #0
 8015714:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8015716:	697b      	ldr	r3, [r7, #20]
	}
 8015718:	4618      	mov	r0, r3
 801571a:	3728      	adds	r7, #40	@ 0x28
 801571c:	46bd      	mov	sp, r7
 801571e:	bd80      	pop	{r7, pc}

08015720 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8015720:	b580      	push	{r7, lr}
 8015722:	b08c      	sub	sp, #48	@ 0x30
 8015724:	af04      	add	r7, sp, #16
 8015726:	60f8      	str	r0, [r7, #12]
 8015728:	60b9      	str	r1, [r7, #8]
 801572a:	603b      	str	r3, [r7, #0]
 801572c:	4613      	mov	r3, r2
 801572e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8015730:	88fb      	ldrh	r3, [r7, #6]
 8015732:	009b      	lsls	r3, r3, #2
 8015734:	4618      	mov	r0, r3
 8015736:	f001 f9e1 	bl	8016afc <pvPortMalloc>
 801573a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801573c:	697b      	ldr	r3, [r7, #20]
 801573e:	2b00      	cmp	r3, #0
 8015740:	d00e      	beq.n	8015760 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8015742:	2054      	movs	r0, #84	@ 0x54
 8015744:	f001 f9da 	bl	8016afc <pvPortMalloc>
 8015748:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801574a:	69fb      	ldr	r3, [r7, #28]
 801574c:	2b00      	cmp	r3, #0
 801574e:	d003      	beq.n	8015758 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8015750:	69fb      	ldr	r3, [r7, #28]
 8015752:	697a      	ldr	r2, [r7, #20]
 8015754:	631a      	str	r2, [r3, #48]	@ 0x30
 8015756:	e005      	b.n	8015764 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8015758:	6978      	ldr	r0, [r7, #20]
 801575a:	f001 fa9d 	bl	8016c98 <vPortFree>
 801575e:	e001      	b.n	8015764 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8015760:	2300      	movs	r3, #0
 8015762:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8015764:	69fb      	ldr	r3, [r7, #28]
 8015766:	2b00      	cmp	r3, #0
 8015768:	d017      	beq.n	801579a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801576a:	69fb      	ldr	r3, [r7, #28]
 801576c:	2200      	movs	r2, #0
 801576e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8015772:	88fa      	ldrh	r2, [r7, #6]
 8015774:	2300      	movs	r3, #0
 8015776:	9303      	str	r3, [sp, #12]
 8015778:	69fb      	ldr	r3, [r7, #28]
 801577a:	9302      	str	r3, [sp, #8]
 801577c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801577e:	9301      	str	r3, [sp, #4]
 8015780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015782:	9300      	str	r3, [sp, #0]
 8015784:	683b      	ldr	r3, [r7, #0]
 8015786:	68b9      	ldr	r1, [r7, #8]
 8015788:	68f8      	ldr	r0, [r7, #12]
 801578a:	f000 f80e 	bl	80157aa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801578e:	69f8      	ldr	r0, [r7, #28]
 8015790:	f000 f894 	bl	80158bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8015794:	2301      	movs	r3, #1
 8015796:	61bb      	str	r3, [r7, #24]
 8015798:	e002      	b.n	80157a0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801579a:	f04f 33ff 	mov.w	r3, #4294967295
 801579e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80157a0:	69bb      	ldr	r3, [r7, #24]
	}
 80157a2:	4618      	mov	r0, r3
 80157a4:	3720      	adds	r7, #32
 80157a6:	46bd      	mov	sp, r7
 80157a8:	bd80      	pop	{r7, pc}

080157aa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80157aa:	b580      	push	{r7, lr}
 80157ac:	b088      	sub	sp, #32
 80157ae:	af00      	add	r7, sp, #0
 80157b0:	60f8      	str	r0, [r7, #12]
 80157b2:	60b9      	str	r1, [r7, #8]
 80157b4:	607a      	str	r2, [r7, #4]
 80157b6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80157b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80157ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80157bc:	6879      	ldr	r1, [r7, #4]
 80157be:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80157c2:	440b      	add	r3, r1
 80157c4:	009b      	lsls	r3, r3, #2
 80157c6:	4413      	add	r3, r2
 80157c8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80157ca:	69bb      	ldr	r3, [r7, #24]
 80157cc:	f023 0307 	bic.w	r3, r3, #7
 80157d0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80157d2:	69bb      	ldr	r3, [r7, #24]
 80157d4:	f003 0307 	and.w	r3, r3, #7
 80157d8:	2b00      	cmp	r3, #0
 80157da:	d00b      	beq.n	80157f4 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80157dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80157e0:	f383 8811 	msr	BASEPRI, r3
 80157e4:	f3bf 8f6f 	isb	sy
 80157e8:	f3bf 8f4f 	dsb	sy
 80157ec:	617b      	str	r3, [r7, #20]
}
 80157ee:	bf00      	nop
 80157f0:	bf00      	nop
 80157f2:	e7fd      	b.n	80157f0 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80157f4:	68bb      	ldr	r3, [r7, #8]
 80157f6:	2b00      	cmp	r3, #0
 80157f8:	d01f      	beq.n	801583a <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80157fa:	2300      	movs	r3, #0
 80157fc:	61fb      	str	r3, [r7, #28]
 80157fe:	e012      	b.n	8015826 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8015800:	68ba      	ldr	r2, [r7, #8]
 8015802:	69fb      	ldr	r3, [r7, #28]
 8015804:	4413      	add	r3, r2
 8015806:	7819      	ldrb	r1, [r3, #0]
 8015808:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801580a:	69fb      	ldr	r3, [r7, #28]
 801580c:	4413      	add	r3, r2
 801580e:	3334      	adds	r3, #52	@ 0x34
 8015810:	460a      	mov	r2, r1
 8015812:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8015814:	68ba      	ldr	r2, [r7, #8]
 8015816:	69fb      	ldr	r3, [r7, #28]
 8015818:	4413      	add	r3, r2
 801581a:	781b      	ldrb	r3, [r3, #0]
 801581c:	2b00      	cmp	r3, #0
 801581e:	d006      	beq.n	801582e <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8015820:	69fb      	ldr	r3, [r7, #28]
 8015822:	3301      	adds	r3, #1
 8015824:	61fb      	str	r3, [r7, #28]
 8015826:	69fb      	ldr	r3, [r7, #28]
 8015828:	2b0f      	cmp	r3, #15
 801582a:	d9e9      	bls.n	8015800 <prvInitialiseNewTask+0x56>
 801582c:	e000      	b.n	8015830 <prvInitialiseNewTask+0x86>
			{
				break;
 801582e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8015830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015832:	2200      	movs	r2, #0
 8015834:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8015838:	e003      	b.n	8015842 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801583a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801583c:	2200      	movs	r2, #0
 801583e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8015842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015844:	2b06      	cmp	r3, #6
 8015846:	d901      	bls.n	801584c <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8015848:	2306      	movs	r3, #6
 801584a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801584c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801584e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015850:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8015852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015854:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015856:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8015858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801585a:	2200      	movs	r2, #0
 801585c:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801585e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015860:	3304      	adds	r3, #4
 8015862:	4618      	mov	r0, r3
 8015864:	f7ff fa1c 	bl	8014ca0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8015868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801586a:	3318      	adds	r3, #24
 801586c:	4618      	mov	r0, r3
 801586e:	f7ff fa17 	bl	8014ca0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8015872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015874:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015876:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801587a:	f1c3 0207 	rsb	r2, r3, #7
 801587e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015880:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8015882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015884:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015886:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8015888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801588a:	2200      	movs	r2, #0
 801588c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801588e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015890:	2200      	movs	r2, #0
 8015892:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8015896:	683a      	ldr	r2, [r7, #0]
 8015898:	68f9      	ldr	r1, [r7, #12]
 801589a:	69b8      	ldr	r0, [r7, #24]
 801589c:	f000 fede 	bl	801665c <pxPortInitialiseStack>
 80158a0:	4602      	mov	r2, r0
 80158a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80158a4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80158a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80158a8:	2b00      	cmp	r3, #0
 80158aa:	d002      	beq.n	80158b2 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80158ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80158ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80158b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80158b2:	bf00      	nop
 80158b4:	3720      	adds	r7, #32
 80158b6:	46bd      	mov	sp, r7
 80158b8:	bd80      	pop	{r7, pc}
	...

080158bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80158bc:	b580      	push	{r7, lr}
 80158be:	b082      	sub	sp, #8
 80158c0:	af00      	add	r7, sp, #0
 80158c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80158c4:	f000 fff8 	bl	80168b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80158c8:	4b2a      	ldr	r3, [pc, #168]	@ (8015974 <prvAddNewTaskToReadyList+0xb8>)
 80158ca:	681b      	ldr	r3, [r3, #0]
 80158cc:	3301      	adds	r3, #1
 80158ce:	4a29      	ldr	r2, [pc, #164]	@ (8015974 <prvAddNewTaskToReadyList+0xb8>)
 80158d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80158d2:	4b29      	ldr	r3, [pc, #164]	@ (8015978 <prvAddNewTaskToReadyList+0xbc>)
 80158d4:	681b      	ldr	r3, [r3, #0]
 80158d6:	2b00      	cmp	r3, #0
 80158d8:	d109      	bne.n	80158ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80158da:	4a27      	ldr	r2, [pc, #156]	@ (8015978 <prvAddNewTaskToReadyList+0xbc>)
 80158dc:	687b      	ldr	r3, [r7, #4]
 80158de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80158e0:	4b24      	ldr	r3, [pc, #144]	@ (8015974 <prvAddNewTaskToReadyList+0xb8>)
 80158e2:	681b      	ldr	r3, [r3, #0]
 80158e4:	2b01      	cmp	r3, #1
 80158e6:	d110      	bne.n	801590a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80158e8:	f000 fbd4 	bl	8016094 <prvInitialiseTaskLists>
 80158ec:	e00d      	b.n	801590a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80158ee:	4b23      	ldr	r3, [pc, #140]	@ (801597c <prvAddNewTaskToReadyList+0xc0>)
 80158f0:	681b      	ldr	r3, [r3, #0]
 80158f2:	2b00      	cmp	r3, #0
 80158f4:	d109      	bne.n	801590a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80158f6:	4b20      	ldr	r3, [pc, #128]	@ (8015978 <prvAddNewTaskToReadyList+0xbc>)
 80158f8:	681b      	ldr	r3, [r3, #0]
 80158fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80158fc:	687b      	ldr	r3, [r7, #4]
 80158fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015900:	429a      	cmp	r2, r3
 8015902:	d802      	bhi.n	801590a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8015904:	4a1c      	ldr	r2, [pc, #112]	@ (8015978 <prvAddNewTaskToReadyList+0xbc>)
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801590a:	4b1d      	ldr	r3, [pc, #116]	@ (8015980 <prvAddNewTaskToReadyList+0xc4>)
 801590c:	681b      	ldr	r3, [r3, #0]
 801590e:	3301      	adds	r3, #1
 8015910:	4a1b      	ldr	r2, [pc, #108]	@ (8015980 <prvAddNewTaskToReadyList+0xc4>)
 8015912:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8015914:	687b      	ldr	r3, [r7, #4]
 8015916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015918:	2201      	movs	r2, #1
 801591a:	409a      	lsls	r2, r3
 801591c:	4b19      	ldr	r3, [pc, #100]	@ (8015984 <prvAddNewTaskToReadyList+0xc8>)
 801591e:	681b      	ldr	r3, [r3, #0]
 8015920:	4313      	orrs	r3, r2
 8015922:	4a18      	ldr	r2, [pc, #96]	@ (8015984 <prvAddNewTaskToReadyList+0xc8>)
 8015924:	6013      	str	r3, [r2, #0]
 8015926:	687b      	ldr	r3, [r7, #4]
 8015928:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801592a:	4613      	mov	r3, r2
 801592c:	009b      	lsls	r3, r3, #2
 801592e:	4413      	add	r3, r2
 8015930:	009b      	lsls	r3, r3, #2
 8015932:	4a15      	ldr	r2, [pc, #84]	@ (8015988 <prvAddNewTaskToReadyList+0xcc>)
 8015934:	441a      	add	r2, r3
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	3304      	adds	r3, #4
 801593a:	4619      	mov	r1, r3
 801593c:	4610      	mov	r0, r2
 801593e:	f7ff f9bc 	bl	8014cba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8015942:	f000 ffeb 	bl	801691c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8015946:	4b0d      	ldr	r3, [pc, #52]	@ (801597c <prvAddNewTaskToReadyList+0xc0>)
 8015948:	681b      	ldr	r3, [r3, #0]
 801594a:	2b00      	cmp	r3, #0
 801594c:	d00e      	beq.n	801596c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801594e:	4b0a      	ldr	r3, [pc, #40]	@ (8015978 <prvAddNewTaskToReadyList+0xbc>)
 8015950:	681b      	ldr	r3, [r3, #0]
 8015952:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015954:	687b      	ldr	r3, [r7, #4]
 8015956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015958:	429a      	cmp	r2, r3
 801595a:	d207      	bcs.n	801596c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801595c:	4b0b      	ldr	r3, [pc, #44]	@ (801598c <prvAddNewTaskToReadyList+0xd0>)
 801595e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015962:	601a      	str	r2, [r3, #0]
 8015964:	f3bf 8f4f 	dsb	sy
 8015968:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801596c:	bf00      	nop
 801596e:	3708      	adds	r7, #8
 8015970:	46bd      	mov	sp, r7
 8015972:	bd80      	pop	{r7, pc}
 8015974:	24002bd8 	.word	0x24002bd8
 8015978:	24002ad8 	.word	0x24002ad8
 801597c:	24002be4 	.word	0x24002be4
 8015980:	24002bf4 	.word	0x24002bf4
 8015984:	24002be0 	.word	0x24002be0
 8015988:	24002adc 	.word	0x24002adc
 801598c:	e000ed04 	.word	0xe000ed04

08015990 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8015990:	b580      	push	{r7, lr}
 8015992:	b084      	sub	sp, #16
 8015994:	af00      	add	r7, sp, #0
 8015996:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8015998:	2300      	movs	r3, #0
 801599a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801599c:	687b      	ldr	r3, [r7, #4]
 801599e:	2b00      	cmp	r3, #0
 80159a0:	d018      	beq.n	80159d4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80159a2:	4b14      	ldr	r3, [pc, #80]	@ (80159f4 <vTaskDelay+0x64>)
 80159a4:	681b      	ldr	r3, [r3, #0]
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	d00b      	beq.n	80159c2 <vTaskDelay+0x32>
	__asm volatile
 80159aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80159ae:	f383 8811 	msr	BASEPRI, r3
 80159b2:	f3bf 8f6f 	isb	sy
 80159b6:	f3bf 8f4f 	dsb	sy
 80159ba:	60bb      	str	r3, [r7, #8]
}
 80159bc:	bf00      	nop
 80159be:	bf00      	nop
 80159c0:	e7fd      	b.n	80159be <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80159c2:	f000 f87d 	bl	8015ac0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80159c6:	2100      	movs	r1, #0
 80159c8:	6878      	ldr	r0, [r7, #4]
 80159ca:	f000 fde1 	bl	8016590 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80159ce:	f000 f885 	bl	8015adc <xTaskResumeAll>
 80159d2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80159d4:	68fb      	ldr	r3, [r7, #12]
 80159d6:	2b00      	cmp	r3, #0
 80159d8:	d107      	bne.n	80159ea <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80159da:	4b07      	ldr	r3, [pc, #28]	@ (80159f8 <vTaskDelay+0x68>)
 80159dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80159e0:	601a      	str	r2, [r3, #0]
 80159e2:	f3bf 8f4f 	dsb	sy
 80159e6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80159ea:	bf00      	nop
 80159ec:	3710      	adds	r7, #16
 80159ee:	46bd      	mov	sp, r7
 80159f0:	bd80      	pop	{r7, pc}
 80159f2:	bf00      	nop
 80159f4:	24002c00 	.word	0x24002c00
 80159f8:	e000ed04 	.word	0xe000ed04

080159fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80159fc:	b580      	push	{r7, lr}
 80159fe:	b08a      	sub	sp, #40	@ 0x28
 8015a00:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8015a02:	2300      	movs	r3, #0
 8015a04:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8015a06:	2300      	movs	r3, #0
 8015a08:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8015a0a:	463a      	mov	r2, r7
 8015a0c:	1d39      	adds	r1, r7, #4
 8015a0e:	f107 0308 	add.w	r3, r7, #8
 8015a12:	4618      	mov	r0, r3
 8015a14:	f7ec fc94 	bl	8002340 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8015a18:	6839      	ldr	r1, [r7, #0]
 8015a1a:	687b      	ldr	r3, [r7, #4]
 8015a1c:	68ba      	ldr	r2, [r7, #8]
 8015a1e:	9202      	str	r2, [sp, #8]
 8015a20:	9301      	str	r3, [sp, #4]
 8015a22:	2300      	movs	r3, #0
 8015a24:	9300      	str	r3, [sp, #0]
 8015a26:	2300      	movs	r3, #0
 8015a28:	460a      	mov	r2, r1
 8015a2a:	491f      	ldr	r1, [pc, #124]	@ (8015aa8 <vTaskStartScheduler+0xac>)
 8015a2c:	481f      	ldr	r0, [pc, #124]	@ (8015aac <vTaskStartScheduler+0xb0>)
 8015a2e:	f7ff fe17 	bl	8015660 <xTaskCreateStatic>
 8015a32:	4603      	mov	r3, r0
 8015a34:	4a1e      	ldr	r2, [pc, #120]	@ (8015ab0 <vTaskStartScheduler+0xb4>)
 8015a36:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8015a38:	4b1d      	ldr	r3, [pc, #116]	@ (8015ab0 <vTaskStartScheduler+0xb4>)
 8015a3a:	681b      	ldr	r3, [r3, #0]
 8015a3c:	2b00      	cmp	r3, #0
 8015a3e:	d002      	beq.n	8015a46 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8015a40:	2301      	movs	r3, #1
 8015a42:	617b      	str	r3, [r7, #20]
 8015a44:	e001      	b.n	8015a4a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8015a46:	2300      	movs	r3, #0
 8015a48:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8015a4a:	697b      	ldr	r3, [r7, #20]
 8015a4c:	2b01      	cmp	r3, #1
 8015a4e:	d116      	bne.n	8015a7e <vTaskStartScheduler+0x82>
	__asm volatile
 8015a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015a54:	f383 8811 	msr	BASEPRI, r3
 8015a58:	f3bf 8f6f 	isb	sy
 8015a5c:	f3bf 8f4f 	dsb	sy
 8015a60:	613b      	str	r3, [r7, #16]
}
 8015a62:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8015a64:	4b13      	ldr	r3, [pc, #76]	@ (8015ab4 <vTaskStartScheduler+0xb8>)
 8015a66:	f04f 32ff 	mov.w	r2, #4294967295
 8015a6a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8015a6c:	4b12      	ldr	r3, [pc, #72]	@ (8015ab8 <vTaskStartScheduler+0xbc>)
 8015a6e:	2201      	movs	r2, #1
 8015a70:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8015a72:	4b12      	ldr	r3, [pc, #72]	@ (8015abc <vTaskStartScheduler+0xc0>)
 8015a74:	2200      	movs	r2, #0
 8015a76:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8015a78:	f000 fe7a 	bl	8016770 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8015a7c:	e00f      	b.n	8015a9e <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8015a7e:	697b      	ldr	r3, [r7, #20]
 8015a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015a84:	d10b      	bne.n	8015a9e <vTaskStartScheduler+0xa2>
	__asm volatile
 8015a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015a8a:	f383 8811 	msr	BASEPRI, r3
 8015a8e:	f3bf 8f6f 	isb	sy
 8015a92:	f3bf 8f4f 	dsb	sy
 8015a96:	60fb      	str	r3, [r7, #12]
}
 8015a98:	bf00      	nop
 8015a9a:	bf00      	nop
 8015a9c:	e7fd      	b.n	8015a9a <vTaskStartScheduler+0x9e>
}
 8015a9e:	bf00      	nop
 8015aa0:	3718      	adds	r7, #24
 8015aa2:	46bd      	mov	sp, r7
 8015aa4:	bd80      	pop	{r7, pc}
 8015aa6:	bf00      	nop
 8015aa8:	08019ebc 	.word	0x08019ebc
 8015aac:	08016065 	.word	0x08016065
 8015ab0:	24002bfc 	.word	0x24002bfc
 8015ab4:	24002bf8 	.word	0x24002bf8
 8015ab8:	24002be4 	.word	0x24002be4
 8015abc:	24002bdc 	.word	0x24002bdc

08015ac0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8015ac0:	b480      	push	{r7}
 8015ac2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8015ac4:	4b04      	ldr	r3, [pc, #16]	@ (8015ad8 <vTaskSuspendAll+0x18>)
 8015ac6:	681b      	ldr	r3, [r3, #0]
 8015ac8:	3301      	adds	r3, #1
 8015aca:	4a03      	ldr	r2, [pc, #12]	@ (8015ad8 <vTaskSuspendAll+0x18>)
 8015acc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8015ace:	bf00      	nop
 8015ad0:	46bd      	mov	sp, r7
 8015ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ad6:	4770      	bx	lr
 8015ad8:	24002c00 	.word	0x24002c00

08015adc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8015adc:	b580      	push	{r7, lr}
 8015ade:	b084      	sub	sp, #16
 8015ae0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8015ae2:	2300      	movs	r3, #0
 8015ae4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8015ae6:	2300      	movs	r3, #0
 8015ae8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8015aea:	4b42      	ldr	r3, [pc, #264]	@ (8015bf4 <xTaskResumeAll+0x118>)
 8015aec:	681b      	ldr	r3, [r3, #0]
 8015aee:	2b00      	cmp	r3, #0
 8015af0:	d10b      	bne.n	8015b0a <xTaskResumeAll+0x2e>
	__asm volatile
 8015af2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015af6:	f383 8811 	msr	BASEPRI, r3
 8015afa:	f3bf 8f6f 	isb	sy
 8015afe:	f3bf 8f4f 	dsb	sy
 8015b02:	603b      	str	r3, [r7, #0]
}
 8015b04:	bf00      	nop
 8015b06:	bf00      	nop
 8015b08:	e7fd      	b.n	8015b06 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8015b0a:	f000 fed5 	bl	80168b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8015b0e:	4b39      	ldr	r3, [pc, #228]	@ (8015bf4 <xTaskResumeAll+0x118>)
 8015b10:	681b      	ldr	r3, [r3, #0]
 8015b12:	3b01      	subs	r3, #1
 8015b14:	4a37      	ldr	r2, [pc, #220]	@ (8015bf4 <xTaskResumeAll+0x118>)
 8015b16:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015b18:	4b36      	ldr	r3, [pc, #216]	@ (8015bf4 <xTaskResumeAll+0x118>)
 8015b1a:	681b      	ldr	r3, [r3, #0]
 8015b1c:	2b00      	cmp	r3, #0
 8015b1e:	d161      	bne.n	8015be4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8015b20:	4b35      	ldr	r3, [pc, #212]	@ (8015bf8 <xTaskResumeAll+0x11c>)
 8015b22:	681b      	ldr	r3, [r3, #0]
 8015b24:	2b00      	cmp	r3, #0
 8015b26:	d05d      	beq.n	8015be4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015b28:	e02e      	b.n	8015b88 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015b2a:	4b34      	ldr	r3, [pc, #208]	@ (8015bfc <xTaskResumeAll+0x120>)
 8015b2c:	68db      	ldr	r3, [r3, #12]
 8015b2e:	68db      	ldr	r3, [r3, #12]
 8015b30:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015b32:	68fb      	ldr	r3, [r7, #12]
 8015b34:	3318      	adds	r3, #24
 8015b36:	4618      	mov	r0, r3
 8015b38:	f7ff f91c 	bl	8014d74 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015b3c:	68fb      	ldr	r3, [r7, #12]
 8015b3e:	3304      	adds	r3, #4
 8015b40:	4618      	mov	r0, r3
 8015b42:	f7ff f917 	bl	8014d74 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8015b46:	68fb      	ldr	r3, [r7, #12]
 8015b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015b4a:	2201      	movs	r2, #1
 8015b4c:	409a      	lsls	r2, r3
 8015b4e:	4b2c      	ldr	r3, [pc, #176]	@ (8015c00 <xTaskResumeAll+0x124>)
 8015b50:	681b      	ldr	r3, [r3, #0]
 8015b52:	4313      	orrs	r3, r2
 8015b54:	4a2a      	ldr	r2, [pc, #168]	@ (8015c00 <xTaskResumeAll+0x124>)
 8015b56:	6013      	str	r3, [r2, #0]
 8015b58:	68fb      	ldr	r3, [r7, #12]
 8015b5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015b5c:	4613      	mov	r3, r2
 8015b5e:	009b      	lsls	r3, r3, #2
 8015b60:	4413      	add	r3, r2
 8015b62:	009b      	lsls	r3, r3, #2
 8015b64:	4a27      	ldr	r2, [pc, #156]	@ (8015c04 <xTaskResumeAll+0x128>)
 8015b66:	441a      	add	r2, r3
 8015b68:	68fb      	ldr	r3, [r7, #12]
 8015b6a:	3304      	adds	r3, #4
 8015b6c:	4619      	mov	r1, r3
 8015b6e:	4610      	mov	r0, r2
 8015b70:	f7ff f8a3 	bl	8014cba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015b74:	68fb      	ldr	r3, [r7, #12]
 8015b76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015b78:	4b23      	ldr	r3, [pc, #140]	@ (8015c08 <xTaskResumeAll+0x12c>)
 8015b7a:	681b      	ldr	r3, [r3, #0]
 8015b7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015b7e:	429a      	cmp	r2, r3
 8015b80:	d302      	bcc.n	8015b88 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8015b82:	4b22      	ldr	r3, [pc, #136]	@ (8015c0c <xTaskResumeAll+0x130>)
 8015b84:	2201      	movs	r2, #1
 8015b86:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015b88:	4b1c      	ldr	r3, [pc, #112]	@ (8015bfc <xTaskResumeAll+0x120>)
 8015b8a:	681b      	ldr	r3, [r3, #0]
 8015b8c:	2b00      	cmp	r3, #0
 8015b8e:	d1cc      	bne.n	8015b2a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8015b90:	68fb      	ldr	r3, [r7, #12]
 8015b92:	2b00      	cmp	r3, #0
 8015b94:	d001      	beq.n	8015b9a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8015b96:	f000 fb1b 	bl	80161d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8015b9a:	4b1d      	ldr	r3, [pc, #116]	@ (8015c10 <xTaskResumeAll+0x134>)
 8015b9c:	681b      	ldr	r3, [r3, #0]
 8015b9e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8015ba0:	687b      	ldr	r3, [r7, #4]
 8015ba2:	2b00      	cmp	r3, #0
 8015ba4:	d010      	beq.n	8015bc8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8015ba6:	f000 f837 	bl	8015c18 <xTaskIncrementTick>
 8015baa:	4603      	mov	r3, r0
 8015bac:	2b00      	cmp	r3, #0
 8015bae:	d002      	beq.n	8015bb6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8015bb0:	4b16      	ldr	r3, [pc, #88]	@ (8015c0c <xTaskResumeAll+0x130>)
 8015bb2:	2201      	movs	r2, #1
 8015bb4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8015bb6:	687b      	ldr	r3, [r7, #4]
 8015bb8:	3b01      	subs	r3, #1
 8015bba:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8015bbc:	687b      	ldr	r3, [r7, #4]
 8015bbe:	2b00      	cmp	r3, #0
 8015bc0:	d1f1      	bne.n	8015ba6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8015bc2:	4b13      	ldr	r3, [pc, #76]	@ (8015c10 <xTaskResumeAll+0x134>)
 8015bc4:	2200      	movs	r2, #0
 8015bc6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8015bc8:	4b10      	ldr	r3, [pc, #64]	@ (8015c0c <xTaskResumeAll+0x130>)
 8015bca:	681b      	ldr	r3, [r3, #0]
 8015bcc:	2b00      	cmp	r3, #0
 8015bce:	d009      	beq.n	8015be4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8015bd0:	2301      	movs	r3, #1
 8015bd2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8015bd4:	4b0f      	ldr	r3, [pc, #60]	@ (8015c14 <xTaskResumeAll+0x138>)
 8015bd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015bda:	601a      	str	r2, [r3, #0]
 8015bdc:	f3bf 8f4f 	dsb	sy
 8015be0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015be4:	f000 fe9a 	bl	801691c <vPortExitCritical>

	return xAlreadyYielded;
 8015be8:	68bb      	ldr	r3, [r7, #8]
}
 8015bea:	4618      	mov	r0, r3
 8015bec:	3710      	adds	r7, #16
 8015bee:	46bd      	mov	sp, r7
 8015bf0:	bd80      	pop	{r7, pc}
 8015bf2:	bf00      	nop
 8015bf4:	24002c00 	.word	0x24002c00
 8015bf8:	24002bd8 	.word	0x24002bd8
 8015bfc:	24002b98 	.word	0x24002b98
 8015c00:	24002be0 	.word	0x24002be0
 8015c04:	24002adc 	.word	0x24002adc
 8015c08:	24002ad8 	.word	0x24002ad8
 8015c0c:	24002bec 	.word	0x24002bec
 8015c10:	24002be8 	.word	0x24002be8
 8015c14:	e000ed04 	.word	0xe000ed04

08015c18 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8015c18:	b580      	push	{r7, lr}
 8015c1a:	b086      	sub	sp, #24
 8015c1c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8015c1e:	2300      	movs	r3, #0
 8015c20:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015c22:	4b4f      	ldr	r3, [pc, #316]	@ (8015d60 <xTaskIncrementTick+0x148>)
 8015c24:	681b      	ldr	r3, [r3, #0]
 8015c26:	2b00      	cmp	r3, #0
 8015c28:	f040 808f 	bne.w	8015d4a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8015c2c:	4b4d      	ldr	r3, [pc, #308]	@ (8015d64 <xTaskIncrementTick+0x14c>)
 8015c2e:	681b      	ldr	r3, [r3, #0]
 8015c30:	3301      	adds	r3, #1
 8015c32:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8015c34:	4a4b      	ldr	r2, [pc, #300]	@ (8015d64 <xTaskIncrementTick+0x14c>)
 8015c36:	693b      	ldr	r3, [r7, #16]
 8015c38:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8015c3a:	693b      	ldr	r3, [r7, #16]
 8015c3c:	2b00      	cmp	r3, #0
 8015c3e:	d121      	bne.n	8015c84 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8015c40:	4b49      	ldr	r3, [pc, #292]	@ (8015d68 <xTaskIncrementTick+0x150>)
 8015c42:	681b      	ldr	r3, [r3, #0]
 8015c44:	681b      	ldr	r3, [r3, #0]
 8015c46:	2b00      	cmp	r3, #0
 8015c48:	d00b      	beq.n	8015c62 <xTaskIncrementTick+0x4a>
	__asm volatile
 8015c4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015c4e:	f383 8811 	msr	BASEPRI, r3
 8015c52:	f3bf 8f6f 	isb	sy
 8015c56:	f3bf 8f4f 	dsb	sy
 8015c5a:	603b      	str	r3, [r7, #0]
}
 8015c5c:	bf00      	nop
 8015c5e:	bf00      	nop
 8015c60:	e7fd      	b.n	8015c5e <xTaskIncrementTick+0x46>
 8015c62:	4b41      	ldr	r3, [pc, #260]	@ (8015d68 <xTaskIncrementTick+0x150>)
 8015c64:	681b      	ldr	r3, [r3, #0]
 8015c66:	60fb      	str	r3, [r7, #12]
 8015c68:	4b40      	ldr	r3, [pc, #256]	@ (8015d6c <xTaskIncrementTick+0x154>)
 8015c6a:	681b      	ldr	r3, [r3, #0]
 8015c6c:	4a3e      	ldr	r2, [pc, #248]	@ (8015d68 <xTaskIncrementTick+0x150>)
 8015c6e:	6013      	str	r3, [r2, #0]
 8015c70:	4a3e      	ldr	r2, [pc, #248]	@ (8015d6c <xTaskIncrementTick+0x154>)
 8015c72:	68fb      	ldr	r3, [r7, #12]
 8015c74:	6013      	str	r3, [r2, #0]
 8015c76:	4b3e      	ldr	r3, [pc, #248]	@ (8015d70 <xTaskIncrementTick+0x158>)
 8015c78:	681b      	ldr	r3, [r3, #0]
 8015c7a:	3301      	adds	r3, #1
 8015c7c:	4a3c      	ldr	r2, [pc, #240]	@ (8015d70 <xTaskIncrementTick+0x158>)
 8015c7e:	6013      	str	r3, [r2, #0]
 8015c80:	f000 faa6 	bl	80161d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8015c84:	4b3b      	ldr	r3, [pc, #236]	@ (8015d74 <xTaskIncrementTick+0x15c>)
 8015c86:	681b      	ldr	r3, [r3, #0]
 8015c88:	693a      	ldr	r2, [r7, #16]
 8015c8a:	429a      	cmp	r2, r3
 8015c8c:	d348      	bcc.n	8015d20 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015c8e:	4b36      	ldr	r3, [pc, #216]	@ (8015d68 <xTaskIncrementTick+0x150>)
 8015c90:	681b      	ldr	r3, [r3, #0]
 8015c92:	681b      	ldr	r3, [r3, #0]
 8015c94:	2b00      	cmp	r3, #0
 8015c96:	d104      	bne.n	8015ca2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015c98:	4b36      	ldr	r3, [pc, #216]	@ (8015d74 <xTaskIncrementTick+0x15c>)
 8015c9a:	f04f 32ff 	mov.w	r2, #4294967295
 8015c9e:	601a      	str	r2, [r3, #0]
					break;
 8015ca0:	e03e      	b.n	8015d20 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015ca2:	4b31      	ldr	r3, [pc, #196]	@ (8015d68 <xTaskIncrementTick+0x150>)
 8015ca4:	681b      	ldr	r3, [r3, #0]
 8015ca6:	68db      	ldr	r3, [r3, #12]
 8015ca8:	68db      	ldr	r3, [r3, #12]
 8015caa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8015cac:	68bb      	ldr	r3, [r7, #8]
 8015cae:	685b      	ldr	r3, [r3, #4]
 8015cb0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8015cb2:	693a      	ldr	r2, [r7, #16]
 8015cb4:	687b      	ldr	r3, [r7, #4]
 8015cb6:	429a      	cmp	r2, r3
 8015cb8:	d203      	bcs.n	8015cc2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8015cba:	4a2e      	ldr	r2, [pc, #184]	@ (8015d74 <xTaskIncrementTick+0x15c>)
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8015cc0:	e02e      	b.n	8015d20 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015cc2:	68bb      	ldr	r3, [r7, #8]
 8015cc4:	3304      	adds	r3, #4
 8015cc6:	4618      	mov	r0, r3
 8015cc8:	f7ff f854 	bl	8014d74 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8015ccc:	68bb      	ldr	r3, [r7, #8]
 8015cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015cd0:	2b00      	cmp	r3, #0
 8015cd2:	d004      	beq.n	8015cde <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015cd4:	68bb      	ldr	r3, [r7, #8]
 8015cd6:	3318      	adds	r3, #24
 8015cd8:	4618      	mov	r0, r3
 8015cda:	f7ff f84b 	bl	8014d74 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8015cde:	68bb      	ldr	r3, [r7, #8]
 8015ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015ce2:	2201      	movs	r2, #1
 8015ce4:	409a      	lsls	r2, r3
 8015ce6:	4b24      	ldr	r3, [pc, #144]	@ (8015d78 <xTaskIncrementTick+0x160>)
 8015ce8:	681b      	ldr	r3, [r3, #0]
 8015cea:	4313      	orrs	r3, r2
 8015cec:	4a22      	ldr	r2, [pc, #136]	@ (8015d78 <xTaskIncrementTick+0x160>)
 8015cee:	6013      	str	r3, [r2, #0]
 8015cf0:	68bb      	ldr	r3, [r7, #8]
 8015cf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015cf4:	4613      	mov	r3, r2
 8015cf6:	009b      	lsls	r3, r3, #2
 8015cf8:	4413      	add	r3, r2
 8015cfa:	009b      	lsls	r3, r3, #2
 8015cfc:	4a1f      	ldr	r2, [pc, #124]	@ (8015d7c <xTaskIncrementTick+0x164>)
 8015cfe:	441a      	add	r2, r3
 8015d00:	68bb      	ldr	r3, [r7, #8]
 8015d02:	3304      	adds	r3, #4
 8015d04:	4619      	mov	r1, r3
 8015d06:	4610      	mov	r0, r2
 8015d08:	f7fe ffd7 	bl	8014cba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015d0c:	68bb      	ldr	r3, [r7, #8]
 8015d0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015d10:	4b1b      	ldr	r3, [pc, #108]	@ (8015d80 <xTaskIncrementTick+0x168>)
 8015d12:	681b      	ldr	r3, [r3, #0]
 8015d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015d16:	429a      	cmp	r2, r3
 8015d18:	d3b9      	bcc.n	8015c8e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8015d1a:	2301      	movs	r3, #1
 8015d1c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015d1e:	e7b6      	b.n	8015c8e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8015d20:	4b17      	ldr	r3, [pc, #92]	@ (8015d80 <xTaskIncrementTick+0x168>)
 8015d22:	681b      	ldr	r3, [r3, #0]
 8015d24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015d26:	4915      	ldr	r1, [pc, #84]	@ (8015d7c <xTaskIncrementTick+0x164>)
 8015d28:	4613      	mov	r3, r2
 8015d2a:	009b      	lsls	r3, r3, #2
 8015d2c:	4413      	add	r3, r2
 8015d2e:	009b      	lsls	r3, r3, #2
 8015d30:	440b      	add	r3, r1
 8015d32:	681b      	ldr	r3, [r3, #0]
 8015d34:	2b01      	cmp	r3, #1
 8015d36:	d901      	bls.n	8015d3c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8015d38:	2301      	movs	r3, #1
 8015d3a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8015d3c:	4b11      	ldr	r3, [pc, #68]	@ (8015d84 <xTaskIncrementTick+0x16c>)
 8015d3e:	681b      	ldr	r3, [r3, #0]
 8015d40:	2b00      	cmp	r3, #0
 8015d42:	d007      	beq.n	8015d54 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8015d44:	2301      	movs	r3, #1
 8015d46:	617b      	str	r3, [r7, #20]
 8015d48:	e004      	b.n	8015d54 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8015d4a:	4b0f      	ldr	r3, [pc, #60]	@ (8015d88 <xTaskIncrementTick+0x170>)
 8015d4c:	681b      	ldr	r3, [r3, #0]
 8015d4e:	3301      	adds	r3, #1
 8015d50:	4a0d      	ldr	r2, [pc, #52]	@ (8015d88 <xTaskIncrementTick+0x170>)
 8015d52:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8015d54:	697b      	ldr	r3, [r7, #20]
}
 8015d56:	4618      	mov	r0, r3
 8015d58:	3718      	adds	r7, #24
 8015d5a:	46bd      	mov	sp, r7
 8015d5c:	bd80      	pop	{r7, pc}
 8015d5e:	bf00      	nop
 8015d60:	24002c00 	.word	0x24002c00
 8015d64:	24002bdc 	.word	0x24002bdc
 8015d68:	24002b90 	.word	0x24002b90
 8015d6c:	24002b94 	.word	0x24002b94
 8015d70:	24002bf0 	.word	0x24002bf0
 8015d74:	24002bf8 	.word	0x24002bf8
 8015d78:	24002be0 	.word	0x24002be0
 8015d7c:	24002adc 	.word	0x24002adc
 8015d80:	24002ad8 	.word	0x24002ad8
 8015d84:	24002bec 	.word	0x24002bec
 8015d88:	24002be8 	.word	0x24002be8

08015d8c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8015d8c:	b480      	push	{r7}
 8015d8e:	b087      	sub	sp, #28
 8015d90:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8015d92:	4b27      	ldr	r3, [pc, #156]	@ (8015e30 <vTaskSwitchContext+0xa4>)
 8015d94:	681b      	ldr	r3, [r3, #0]
 8015d96:	2b00      	cmp	r3, #0
 8015d98:	d003      	beq.n	8015da2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8015d9a:	4b26      	ldr	r3, [pc, #152]	@ (8015e34 <vTaskSwitchContext+0xa8>)
 8015d9c:	2201      	movs	r2, #1
 8015d9e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8015da0:	e040      	b.n	8015e24 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8015da2:	4b24      	ldr	r3, [pc, #144]	@ (8015e34 <vTaskSwitchContext+0xa8>)
 8015da4:	2200      	movs	r2, #0
 8015da6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015da8:	4b23      	ldr	r3, [pc, #140]	@ (8015e38 <vTaskSwitchContext+0xac>)
 8015daa:	681b      	ldr	r3, [r3, #0]
 8015dac:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8015dae:	68fb      	ldr	r3, [r7, #12]
 8015db0:	fab3 f383 	clz	r3, r3
 8015db4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8015db6:	7afb      	ldrb	r3, [r7, #11]
 8015db8:	f1c3 031f 	rsb	r3, r3, #31
 8015dbc:	617b      	str	r3, [r7, #20]
 8015dbe:	491f      	ldr	r1, [pc, #124]	@ (8015e3c <vTaskSwitchContext+0xb0>)
 8015dc0:	697a      	ldr	r2, [r7, #20]
 8015dc2:	4613      	mov	r3, r2
 8015dc4:	009b      	lsls	r3, r3, #2
 8015dc6:	4413      	add	r3, r2
 8015dc8:	009b      	lsls	r3, r3, #2
 8015dca:	440b      	add	r3, r1
 8015dcc:	681b      	ldr	r3, [r3, #0]
 8015dce:	2b00      	cmp	r3, #0
 8015dd0:	d10b      	bne.n	8015dea <vTaskSwitchContext+0x5e>
	__asm volatile
 8015dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015dd6:	f383 8811 	msr	BASEPRI, r3
 8015dda:	f3bf 8f6f 	isb	sy
 8015dde:	f3bf 8f4f 	dsb	sy
 8015de2:	607b      	str	r3, [r7, #4]
}
 8015de4:	bf00      	nop
 8015de6:	bf00      	nop
 8015de8:	e7fd      	b.n	8015de6 <vTaskSwitchContext+0x5a>
 8015dea:	697a      	ldr	r2, [r7, #20]
 8015dec:	4613      	mov	r3, r2
 8015dee:	009b      	lsls	r3, r3, #2
 8015df0:	4413      	add	r3, r2
 8015df2:	009b      	lsls	r3, r3, #2
 8015df4:	4a11      	ldr	r2, [pc, #68]	@ (8015e3c <vTaskSwitchContext+0xb0>)
 8015df6:	4413      	add	r3, r2
 8015df8:	613b      	str	r3, [r7, #16]
 8015dfa:	693b      	ldr	r3, [r7, #16]
 8015dfc:	685b      	ldr	r3, [r3, #4]
 8015dfe:	685a      	ldr	r2, [r3, #4]
 8015e00:	693b      	ldr	r3, [r7, #16]
 8015e02:	605a      	str	r2, [r3, #4]
 8015e04:	693b      	ldr	r3, [r7, #16]
 8015e06:	685a      	ldr	r2, [r3, #4]
 8015e08:	693b      	ldr	r3, [r7, #16]
 8015e0a:	3308      	adds	r3, #8
 8015e0c:	429a      	cmp	r2, r3
 8015e0e:	d104      	bne.n	8015e1a <vTaskSwitchContext+0x8e>
 8015e10:	693b      	ldr	r3, [r7, #16]
 8015e12:	685b      	ldr	r3, [r3, #4]
 8015e14:	685a      	ldr	r2, [r3, #4]
 8015e16:	693b      	ldr	r3, [r7, #16]
 8015e18:	605a      	str	r2, [r3, #4]
 8015e1a:	693b      	ldr	r3, [r7, #16]
 8015e1c:	685b      	ldr	r3, [r3, #4]
 8015e1e:	68db      	ldr	r3, [r3, #12]
 8015e20:	4a07      	ldr	r2, [pc, #28]	@ (8015e40 <vTaskSwitchContext+0xb4>)
 8015e22:	6013      	str	r3, [r2, #0]
}
 8015e24:	bf00      	nop
 8015e26:	371c      	adds	r7, #28
 8015e28:	46bd      	mov	sp, r7
 8015e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e2e:	4770      	bx	lr
 8015e30:	24002c00 	.word	0x24002c00
 8015e34:	24002bec 	.word	0x24002bec
 8015e38:	24002be0 	.word	0x24002be0
 8015e3c:	24002adc 	.word	0x24002adc
 8015e40:	24002ad8 	.word	0x24002ad8

08015e44 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8015e44:	b580      	push	{r7, lr}
 8015e46:	b084      	sub	sp, #16
 8015e48:	af00      	add	r7, sp, #0
 8015e4a:	6078      	str	r0, [r7, #4]
 8015e4c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8015e4e:	687b      	ldr	r3, [r7, #4]
 8015e50:	2b00      	cmp	r3, #0
 8015e52:	d10b      	bne.n	8015e6c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8015e54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015e58:	f383 8811 	msr	BASEPRI, r3
 8015e5c:	f3bf 8f6f 	isb	sy
 8015e60:	f3bf 8f4f 	dsb	sy
 8015e64:	60fb      	str	r3, [r7, #12]
}
 8015e66:	bf00      	nop
 8015e68:	bf00      	nop
 8015e6a:	e7fd      	b.n	8015e68 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015e6c:	4b07      	ldr	r3, [pc, #28]	@ (8015e8c <vTaskPlaceOnEventList+0x48>)
 8015e6e:	681b      	ldr	r3, [r3, #0]
 8015e70:	3318      	adds	r3, #24
 8015e72:	4619      	mov	r1, r3
 8015e74:	6878      	ldr	r0, [r7, #4]
 8015e76:	f7fe ff44 	bl	8014d02 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8015e7a:	2101      	movs	r1, #1
 8015e7c:	6838      	ldr	r0, [r7, #0]
 8015e7e:	f000 fb87 	bl	8016590 <prvAddCurrentTaskToDelayedList>
}
 8015e82:	bf00      	nop
 8015e84:	3710      	adds	r7, #16
 8015e86:	46bd      	mov	sp, r7
 8015e88:	bd80      	pop	{r7, pc}
 8015e8a:	bf00      	nop
 8015e8c:	24002ad8 	.word	0x24002ad8

08015e90 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8015e90:	b580      	push	{r7, lr}
 8015e92:	b086      	sub	sp, #24
 8015e94:	af00      	add	r7, sp, #0
 8015e96:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015e98:	687b      	ldr	r3, [r7, #4]
 8015e9a:	68db      	ldr	r3, [r3, #12]
 8015e9c:	68db      	ldr	r3, [r3, #12]
 8015e9e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8015ea0:	693b      	ldr	r3, [r7, #16]
 8015ea2:	2b00      	cmp	r3, #0
 8015ea4:	d10b      	bne.n	8015ebe <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8015ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015eaa:	f383 8811 	msr	BASEPRI, r3
 8015eae:	f3bf 8f6f 	isb	sy
 8015eb2:	f3bf 8f4f 	dsb	sy
 8015eb6:	60fb      	str	r3, [r7, #12]
}
 8015eb8:	bf00      	nop
 8015eba:	bf00      	nop
 8015ebc:	e7fd      	b.n	8015eba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8015ebe:	693b      	ldr	r3, [r7, #16]
 8015ec0:	3318      	adds	r3, #24
 8015ec2:	4618      	mov	r0, r3
 8015ec4:	f7fe ff56 	bl	8014d74 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015ec8:	4b1d      	ldr	r3, [pc, #116]	@ (8015f40 <xTaskRemoveFromEventList+0xb0>)
 8015eca:	681b      	ldr	r3, [r3, #0]
 8015ecc:	2b00      	cmp	r3, #0
 8015ece:	d11c      	bne.n	8015f0a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8015ed0:	693b      	ldr	r3, [r7, #16]
 8015ed2:	3304      	adds	r3, #4
 8015ed4:	4618      	mov	r0, r3
 8015ed6:	f7fe ff4d 	bl	8014d74 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8015eda:	693b      	ldr	r3, [r7, #16]
 8015edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015ede:	2201      	movs	r2, #1
 8015ee0:	409a      	lsls	r2, r3
 8015ee2:	4b18      	ldr	r3, [pc, #96]	@ (8015f44 <xTaskRemoveFromEventList+0xb4>)
 8015ee4:	681b      	ldr	r3, [r3, #0]
 8015ee6:	4313      	orrs	r3, r2
 8015ee8:	4a16      	ldr	r2, [pc, #88]	@ (8015f44 <xTaskRemoveFromEventList+0xb4>)
 8015eea:	6013      	str	r3, [r2, #0]
 8015eec:	693b      	ldr	r3, [r7, #16]
 8015eee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015ef0:	4613      	mov	r3, r2
 8015ef2:	009b      	lsls	r3, r3, #2
 8015ef4:	4413      	add	r3, r2
 8015ef6:	009b      	lsls	r3, r3, #2
 8015ef8:	4a13      	ldr	r2, [pc, #76]	@ (8015f48 <xTaskRemoveFromEventList+0xb8>)
 8015efa:	441a      	add	r2, r3
 8015efc:	693b      	ldr	r3, [r7, #16]
 8015efe:	3304      	adds	r3, #4
 8015f00:	4619      	mov	r1, r3
 8015f02:	4610      	mov	r0, r2
 8015f04:	f7fe fed9 	bl	8014cba <vListInsertEnd>
 8015f08:	e005      	b.n	8015f16 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8015f0a:	693b      	ldr	r3, [r7, #16]
 8015f0c:	3318      	adds	r3, #24
 8015f0e:	4619      	mov	r1, r3
 8015f10:	480e      	ldr	r0, [pc, #56]	@ (8015f4c <xTaskRemoveFromEventList+0xbc>)
 8015f12:	f7fe fed2 	bl	8014cba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8015f16:	693b      	ldr	r3, [r7, #16]
 8015f18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015f1a:	4b0d      	ldr	r3, [pc, #52]	@ (8015f50 <xTaskRemoveFromEventList+0xc0>)
 8015f1c:	681b      	ldr	r3, [r3, #0]
 8015f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015f20:	429a      	cmp	r2, r3
 8015f22:	d905      	bls.n	8015f30 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8015f24:	2301      	movs	r3, #1
 8015f26:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8015f28:	4b0a      	ldr	r3, [pc, #40]	@ (8015f54 <xTaskRemoveFromEventList+0xc4>)
 8015f2a:	2201      	movs	r2, #1
 8015f2c:	601a      	str	r2, [r3, #0]
 8015f2e:	e001      	b.n	8015f34 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8015f30:	2300      	movs	r3, #0
 8015f32:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8015f34:	697b      	ldr	r3, [r7, #20]
}
 8015f36:	4618      	mov	r0, r3
 8015f38:	3718      	adds	r7, #24
 8015f3a:	46bd      	mov	sp, r7
 8015f3c:	bd80      	pop	{r7, pc}
 8015f3e:	bf00      	nop
 8015f40:	24002c00 	.word	0x24002c00
 8015f44:	24002be0 	.word	0x24002be0
 8015f48:	24002adc 	.word	0x24002adc
 8015f4c:	24002b98 	.word	0x24002b98
 8015f50:	24002ad8 	.word	0x24002ad8
 8015f54:	24002bec 	.word	0x24002bec

08015f58 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8015f58:	b480      	push	{r7}
 8015f5a:	b083      	sub	sp, #12
 8015f5c:	af00      	add	r7, sp, #0
 8015f5e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8015f60:	4b06      	ldr	r3, [pc, #24]	@ (8015f7c <vTaskInternalSetTimeOutState+0x24>)
 8015f62:	681a      	ldr	r2, [r3, #0]
 8015f64:	687b      	ldr	r3, [r7, #4]
 8015f66:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8015f68:	4b05      	ldr	r3, [pc, #20]	@ (8015f80 <vTaskInternalSetTimeOutState+0x28>)
 8015f6a:	681a      	ldr	r2, [r3, #0]
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	605a      	str	r2, [r3, #4]
}
 8015f70:	bf00      	nop
 8015f72:	370c      	adds	r7, #12
 8015f74:	46bd      	mov	sp, r7
 8015f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f7a:	4770      	bx	lr
 8015f7c:	24002bf0 	.word	0x24002bf0
 8015f80:	24002bdc 	.word	0x24002bdc

08015f84 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8015f84:	b580      	push	{r7, lr}
 8015f86:	b088      	sub	sp, #32
 8015f88:	af00      	add	r7, sp, #0
 8015f8a:	6078      	str	r0, [r7, #4]
 8015f8c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8015f8e:	687b      	ldr	r3, [r7, #4]
 8015f90:	2b00      	cmp	r3, #0
 8015f92:	d10b      	bne.n	8015fac <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8015f94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015f98:	f383 8811 	msr	BASEPRI, r3
 8015f9c:	f3bf 8f6f 	isb	sy
 8015fa0:	f3bf 8f4f 	dsb	sy
 8015fa4:	613b      	str	r3, [r7, #16]
}
 8015fa6:	bf00      	nop
 8015fa8:	bf00      	nop
 8015faa:	e7fd      	b.n	8015fa8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8015fac:	683b      	ldr	r3, [r7, #0]
 8015fae:	2b00      	cmp	r3, #0
 8015fb0:	d10b      	bne.n	8015fca <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8015fb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015fb6:	f383 8811 	msr	BASEPRI, r3
 8015fba:	f3bf 8f6f 	isb	sy
 8015fbe:	f3bf 8f4f 	dsb	sy
 8015fc2:	60fb      	str	r3, [r7, #12]
}
 8015fc4:	bf00      	nop
 8015fc6:	bf00      	nop
 8015fc8:	e7fd      	b.n	8015fc6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8015fca:	f000 fc75 	bl	80168b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8015fce:	4b1d      	ldr	r3, [pc, #116]	@ (8016044 <xTaskCheckForTimeOut+0xc0>)
 8015fd0:	681b      	ldr	r3, [r3, #0]
 8015fd2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8015fd4:	687b      	ldr	r3, [r7, #4]
 8015fd6:	685b      	ldr	r3, [r3, #4]
 8015fd8:	69ba      	ldr	r2, [r7, #24]
 8015fda:	1ad3      	subs	r3, r2, r3
 8015fdc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8015fde:	683b      	ldr	r3, [r7, #0]
 8015fe0:	681b      	ldr	r3, [r3, #0]
 8015fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015fe6:	d102      	bne.n	8015fee <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8015fe8:	2300      	movs	r3, #0
 8015fea:	61fb      	str	r3, [r7, #28]
 8015fec:	e023      	b.n	8016036 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8015fee:	687b      	ldr	r3, [r7, #4]
 8015ff0:	681a      	ldr	r2, [r3, #0]
 8015ff2:	4b15      	ldr	r3, [pc, #84]	@ (8016048 <xTaskCheckForTimeOut+0xc4>)
 8015ff4:	681b      	ldr	r3, [r3, #0]
 8015ff6:	429a      	cmp	r2, r3
 8015ff8:	d007      	beq.n	801600a <xTaskCheckForTimeOut+0x86>
 8015ffa:	687b      	ldr	r3, [r7, #4]
 8015ffc:	685b      	ldr	r3, [r3, #4]
 8015ffe:	69ba      	ldr	r2, [r7, #24]
 8016000:	429a      	cmp	r2, r3
 8016002:	d302      	bcc.n	801600a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8016004:	2301      	movs	r3, #1
 8016006:	61fb      	str	r3, [r7, #28]
 8016008:	e015      	b.n	8016036 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801600a:	683b      	ldr	r3, [r7, #0]
 801600c:	681b      	ldr	r3, [r3, #0]
 801600e:	697a      	ldr	r2, [r7, #20]
 8016010:	429a      	cmp	r2, r3
 8016012:	d20b      	bcs.n	801602c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8016014:	683b      	ldr	r3, [r7, #0]
 8016016:	681a      	ldr	r2, [r3, #0]
 8016018:	697b      	ldr	r3, [r7, #20]
 801601a:	1ad2      	subs	r2, r2, r3
 801601c:	683b      	ldr	r3, [r7, #0]
 801601e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8016020:	6878      	ldr	r0, [r7, #4]
 8016022:	f7ff ff99 	bl	8015f58 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8016026:	2300      	movs	r3, #0
 8016028:	61fb      	str	r3, [r7, #28]
 801602a:	e004      	b.n	8016036 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 801602c:	683b      	ldr	r3, [r7, #0]
 801602e:	2200      	movs	r2, #0
 8016030:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8016032:	2301      	movs	r3, #1
 8016034:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8016036:	f000 fc71 	bl	801691c <vPortExitCritical>

	return xReturn;
 801603a:	69fb      	ldr	r3, [r7, #28]
}
 801603c:	4618      	mov	r0, r3
 801603e:	3720      	adds	r7, #32
 8016040:	46bd      	mov	sp, r7
 8016042:	bd80      	pop	{r7, pc}
 8016044:	24002bdc 	.word	0x24002bdc
 8016048:	24002bf0 	.word	0x24002bf0

0801604c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801604c:	b480      	push	{r7}
 801604e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8016050:	4b03      	ldr	r3, [pc, #12]	@ (8016060 <vTaskMissedYield+0x14>)
 8016052:	2201      	movs	r2, #1
 8016054:	601a      	str	r2, [r3, #0]
}
 8016056:	bf00      	nop
 8016058:	46bd      	mov	sp, r7
 801605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801605e:	4770      	bx	lr
 8016060:	24002bec 	.word	0x24002bec

08016064 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8016064:	b580      	push	{r7, lr}
 8016066:	b082      	sub	sp, #8
 8016068:	af00      	add	r7, sp, #0
 801606a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801606c:	f000 f852 	bl	8016114 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8016070:	4b06      	ldr	r3, [pc, #24]	@ (801608c <prvIdleTask+0x28>)
 8016072:	681b      	ldr	r3, [r3, #0]
 8016074:	2b01      	cmp	r3, #1
 8016076:	d9f9      	bls.n	801606c <prvIdleTask+0x8>
			{
				taskYIELD();
 8016078:	4b05      	ldr	r3, [pc, #20]	@ (8016090 <prvIdleTask+0x2c>)
 801607a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801607e:	601a      	str	r2, [r3, #0]
 8016080:	f3bf 8f4f 	dsb	sy
 8016084:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8016088:	e7f0      	b.n	801606c <prvIdleTask+0x8>
 801608a:	bf00      	nop
 801608c:	24002adc 	.word	0x24002adc
 8016090:	e000ed04 	.word	0xe000ed04

08016094 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8016094:	b580      	push	{r7, lr}
 8016096:	b082      	sub	sp, #8
 8016098:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801609a:	2300      	movs	r3, #0
 801609c:	607b      	str	r3, [r7, #4]
 801609e:	e00c      	b.n	80160ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80160a0:	687a      	ldr	r2, [r7, #4]
 80160a2:	4613      	mov	r3, r2
 80160a4:	009b      	lsls	r3, r3, #2
 80160a6:	4413      	add	r3, r2
 80160a8:	009b      	lsls	r3, r3, #2
 80160aa:	4a12      	ldr	r2, [pc, #72]	@ (80160f4 <prvInitialiseTaskLists+0x60>)
 80160ac:	4413      	add	r3, r2
 80160ae:	4618      	mov	r0, r3
 80160b0:	f7fe fdd6 	bl	8014c60 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80160b4:	687b      	ldr	r3, [r7, #4]
 80160b6:	3301      	adds	r3, #1
 80160b8:	607b      	str	r3, [r7, #4]
 80160ba:	687b      	ldr	r3, [r7, #4]
 80160bc:	2b06      	cmp	r3, #6
 80160be:	d9ef      	bls.n	80160a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80160c0:	480d      	ldr	r0, [pc, #52]	@ (80160f8 <prvInitialiseTaskLists+0x64>)
 80160c2:	f7fe fdcd 	bl	8014c60 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80160c6:	480d      	ldr	r0, [pc, #52]	@ (80160fc <prvInitialiseTaskLists+0x68>)
 80160c8:	f7fe fdca 	bl	8014c60 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80160cc:	480c      	ldr	r0, [pc, #48]	@ (8016100 <prvInitialiseTaskLists+0x6c>)
 80160ce:	f7fe fdc7 	bl	8014c60 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80160d2:	480c      	ldr	r0, [pc, #48]	@ (8016104 <prvInitialiseTaskLists+0x70>)
 80160d4:	f7fe fdc4 	bl	8014c60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80160d8:	480b      	ldr	r0, [pc, #44]	@ (8016108 <prvInitialiseTaskLists+0x74>)
 80160da:	f7fe fdc1 	bl	8014c60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80160de:	4b0b      	ldr	r3, [pc, #44]	@ (801610c <prvInitialiseTaskLists+0x78>)
 80160e0:	4a05      	ldr	r2, [pc, #20]	@ (80160f8 <prvInitialiseTaskLists+0x64>)
 80160e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80160e4:	4b0a      	ldr	r3, [pc, #40]	@ (8016110 <prvInitialiseTaskLists+0x7c>)
 80160e6:	4a05      	ldr	r2, [pc, #20]	@ (80160fc <prvInitialiseTaskLists+0x68>)
 80160e8:	601a      	str	r2, [r3, #0]
}
 80160ea:	bf00      	nop
 80160ec:	3708      	adds	r7, #8
 80160ee:	46bd      	mov	sp, r7
 80160f0:	bd80      	pop	{r7, pc}
 80160f2:	bf00      	nop
 80160f4:	24002adc 	.word	0x24002adc
 80160f8:	24002b68 	.word	0x24002b68
 80160fc:	24002b7c 	.word	0x24002b7c
 8016100:	24002b98 	.word	0x24002b98
 8016104:	24002bac 	.word	0x24002bac
 8016108:	24002bc4 	.word	0x24002bc4
 801610c:	24002b90 	.word	0x24002b90
 8016110:	24002b94 	.word	0x24002b94

08016114 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8016114:	b580      	push	{r7, lr}
 8016116:	b082      	sub	sp, #8
 8016118:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801611a:	e019      	b.n	8016150 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801611c:	f000 fbcc 	bl	80168b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016120:	4b10      	ldr	r3, [pc, #64]	@ (8016164 <prvCheckTasksWaitingTermination+0x50>)
 8016122:	68db      	ldr	r3, [r3, #12]
 8016124:	68db      	ldr	r3, [r3, #12]
 8016126:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016128:	687b      	ldr	r3, [r7, #4]
 801612a:	3304      	adds	r3, #4
 801612c:	4618      	mov	r0, r3
 801612e:	f7fe fe21 	bl	8014d74 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8016132:	4b0d      	ldr	r3, [pc, #52]	@ (8016168 <prvCheckTasksWaitingTermination+0x54>)
 8016134:	681b      	ldr	r3, [r3, #0]
 8016136:	3b01      	subs	r3, #1
 8016138:	4a0b      	ldr	r2, [pc, #44]	@ (8016168 <prvCheckTasksWaitingTermination+0x54>)
 801613a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801613c:	4b0b      	ldr	r3, [pc, #44]	@ (801616c <prvCheckTasksWaitingTermination+0x58>)
 801613e:	681b      	ldr	r3, [r3, #0]
 8016140:	3b01      	subs	r3, #1
 8016142:	4a0a      	ldr	r2, [pc, #40]	@ (801616c <prvCheckTasksWaitingTermination+0x58>)
 8016144:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8016146:	f000 fbe9 	bl	801691c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801614a:	6878      	ldr	r0, [r7, #4]
 801614c:	f000 f810 	bl	8016170 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016150:	4b06      	ldr	r3, [pc, #24]	@ (801616c <prvCheckTasksWaitingTermination+0x58>)
 8016152:	681b      	ldr	r3, [r3, #0]
 8016154:	2b00      	cmp	r3, #0
 8016156:	d1e1      	bne.n	801611c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8016158:	bf00      	nop
 801615a:	bf00      	nop
 801615c:	3708      	adds	r7, #8
 801615e:	46bd      	mov	sp, r7
 8016160:	bd80      	pop	{r7, pc}
 8016162:	bf00      	nop
 8016164:	24002bac 	.word	0x24002bac
 8016168:	24002bd8 	.word	0x24002bd8
 801616c:	24002bc0 	.word	0x24002bc0

08016170 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8016170:	b580      	push	{r7, lr}
 8016172:	b084      	sub	sp, #16
 8016174:	af00      	add	r7, sp, #0
 8016176:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 801617e:	2b00      	cmp	r3, #0
 8016180:	d108      	bne.n	8016194 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016186:	4618      	mov	r0, r3
 8016188:	f000 fd86 	bl	8016c98 <vPortFree>
				vPortFree( pxTCB );
 801618c:	6878      	ldr	r0, [r7, #4]
 801618e:	f000 fd83 	bl	8016c98 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8016192:	e019      	b.n	80161c8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8016194:	687b      	ldr	r3, [r7, #4]
 8016196:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 801619a:	2b01      	cmp	r3, #1
 801619c:	d103      	bne.n	80161a6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801619e:	6878      	ldr	r0, [r7, #4]
 80161a0:	f000 fd7a 	bl	8016c98 <vPortFree>
	}
 80161a4:	e010      	b.n	80161c8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80161a6:	687b      	ldr	r3, [r7, #4]
 80161a8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80161ac:	2b02      	cmp	r3, #2
 80161ae:	d00b      	beq.n	80161c8 <prvDeleteTCB+0x58>
	__asm volatile
 80161b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80161b4:	f383 8811 	msr	BASEPRI, r3
 80161b8:	f3bf 8f6f 	isb	sy
 80161bc:	f3bf 8f4f 	dsb	sy
 80161c0:	60fb      	str	r3, [r7, #12]
}
 80161c2:	bf00      	nop
 80161c4:	bf00      	nop
 80161c6:	e7fd      	b.n	80161c4 <prvDeleteTCB+0x54>
	}
 80161c8:	bf00      	nop
 80161ca:	3710      	adds	r7, #16
 80161cc:	46bd      	mov	sp, r7
 80161ce:	bd80      	pop	{r7, pc}

080161d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80161d0:	b480      	push	{r7}
 80161d2:	b083      	sub	sp, #12
 80161d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80161d6:	4b0c      	ldr	r3, [pc, #48]	@ (8016208 <prvResetNextTaskUnblockTime+0x38>)
 80161d8:	681b      	ldr	r3, [r3, #0]
 80161da:	681b      	ldr	r3, [r3, #0]
 80161dc:	2b00      	cmp	r3, #0
 80161de:	d104      	bne.n	80161ea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80161e0:	4b0a      	ldr	r3, [pc, #40]	@ (801620c <prvResetNextTaskUnblockTime+0x3c>)
 80161e2:	f04f 32ff 	mov.w	r2, #4294967295
 80161e6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80161e8:	e008      	b.n	80161fc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80161ea:	4b07      	ldr	r3, [pc, #28]	@ (8016208 <prvResetNextTaskUnblockTime+0x38>)
 80161ec:	681b      	ldr	r3, [r3, #0]
 80161ee:	68db      	ldr	r3, [r3, #12]
 80161f0:	68db      	ldr	r3, [r3, #12]
 80161f2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80161f4:	687b      	ldr	r3, [r7, #4]
 80161f6:	685b      	ldr	r3, [r3, #4]
 80161f8:	4a04      	ldr	r2, [pc, #16]	@ (801620c <prvResetNextTaskUnblockTime+0x3c>)
 80161fa:	6013      	str	r3, [r2, #0]
}
 80161fc:	bf00      	nop
 80161fe:	370c      	adds	r7, #12
 8016200:	46bd      	mov	sp, r7
 8016202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016206:	4770      	bx	lr
 8016208:	24002b90 	.word	0x24002b90
 801620c:	24002bf8 	.word	0x24002bf8

08016210 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8016210:	b480      	push	{r7}
 8016212:	b083      	sub	sp, #12
 8016214:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8016216:	4b0b      	ldr	r3, [pc, #44]	@ (8016244 <xTaskGetSchedulerState+0x34>)
 8016218:	681b      	ldr	r3, [r3, #0]
 801621a:	2b00      	cmp	r3, #0
 801621c:	d102      	bne.n	8016224 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801621e:	2301      	movs	r3, #1
 8016220:	607b      	str	r3, [r7, #4]
 8016222:	e008      	b.n	8016236 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016224:	4b08      	ldr	r3, [pc, #32]	@ (8016248 <xTaskGetSchedulerState+0x38>)
 8016226:	681b      	ldr	r3, [r3, #0]
 8016228:	2b00      	cmp	r3, #0
 801622a:	d102      	bne.n	8016232 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801622c:	2302      	movs	r3, #2
 801622e:	607b      	str	r3, [r7, #4]
 8016230:	e001      	b.n	8016236 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8016232:	2300      	movs	r3, #0
 8016234:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8016236:	687b      	ldr	r3, [r7, #4]
	}
 8016238:	4618      	mov	r0, r3
 801623a:	370c      	adds	r7, #12
 801623c:	46bd      	mov	sp, r7
 801623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016242:	4770      	bx	lr
 8016244:	24002be4 	.word	0x24002be4
 8016248:	24002c00 	.word	0x24002c00

0801624c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801624c:	b580      	push	{r7, lr}
 801624e:	b084      	sub	sp, #16
 8016250:	af00      	add	r7, sp, #0
 8016252:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8016254:	687b      	ldr	r3, [r7, #4]
 8016256:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8016258:	2300      	movs	r3, #0
 801625a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	2b00      	cmp	r3, #0
 8016260:	d05e      	beq.n	8016320 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8016262:	68bb      	ldr	r3, [r7, #8]
 8016264:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016266:	4b31      	ldr	r3, [pc, #196]	@ (801632c <xTaskPriorityInherit+0xe0>)
 8016268:	681b      	ldr	r3, [r3, #0]
 801626a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801626c:	429a      	cmp	r2, r3
 801626e:	d24e      	bcs.n	801630e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8016270:	68bb      	ldr	r3, [r7, #8]
 8016272:	699b      	ldr	r3, [r3, #24]
 8016274:	2b00      	cmp	r3, #0
 8016276:	db06      	blt.n	8016286 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016278:	4b2c      	ldr	r3, [pc, #176]	@ (801632c <xTaskPriorityInherit+0xe0>)
 801627a:	681b      	ldr	r3, [r3, #0]
 801627c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801627e:	f1c3 0207 	rsb	r2, r3, #7
 8016282:	68bb      	ldr	r3, [r7, #8]
 8016284:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8016286:	68bb      	ldr	r3, [r7, #8]
 8016288:	6959      	ldr	r1, [r3, #20]
 801628a:	68bb      	ldr	r3, [r7, #8]
 801628c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801628e:	4613      	mov	r3, r2
 8016290:	009b      	lsls	r3, r3, #2
 8016292:	4413      	add	r3, r2
 8016294:	009b      	lsls	r3, r3, #2
 8016296:	4a26      	ldr	r2, [pc, #152]	@ (8016330 <xTaskPriorityInherit+0xe4>)
 8016298:	4413      	add	r3, r2
 801629a:	4299      	cmp	r1, r3
 801629c:	d12f      	bne.n	80162fe <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801629e:	68bb      	ldr	r3, [r7, #8]
 80162a0:	3304      	adds	r3, #4
 80162a2:	4618      	mov	r0, r3
 80162a4:	f7fe fd66 	bl	8014d74 <uxListRemove>
 80162a8:	4603      	mov	r3, r0
 80162aa:	2b00      	cmp	r3, #0
 80162ac:	d10a      	bne.n	80162c4 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80162ae:	68bb      	ldr	r3, [r7, #8]
 80162b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80162b2:	2201      	movs	r2, #1
 80162b4:	fa02 f303 	lsl.w	r3, r2, r3
 80162b8:	43da      	mvns	r2, r3
 80162ba:	4b1e      	ldr	r3, [pc, #120]	@ (8016334 <xTaskPriorityInherit+0xe8>)
 80162bc:	681b      	ldr	r3, [r3, #0]
 80162be:	4013      	ands	r3, r2
 80162c0:	4a1c      	ldr	r2, [pc, #112]	@ (8016334 <xTaskPriorityInherit+0xe8>)
 80162c2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80162c4:	4b19      	ldr	r3, [pc, #100]	@ (801632c <xTaskPriorityInherit+0xe0>)
 80162c6:	681b      	ldr	r3, [r3, #0]
 80162c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80162ca:	68bb      	ldr	r3, [r7, #8]
 80162cc:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80162ce:	68bb      	ldr	r3, [r7, #8]
 80162d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80162d2:	2201      	movs	r2, #1
 80162d4:	409a      	lsls	r2, r3
 80162d6:	4b17      	ldr	r3, [pc, #92]	@ (8016334 <xTaskPriorityInherit+0xe8>)
 80162d8:	681b      	ldr	r3, [r3, #0]
 80162da:	4313      	orrs	r3, r2
 80162dc:	4a15      	ldr	r2, [pc, #84]	@ (8016334 <xTaskPriorityInherit+0xe8>)
 80162de:	6013      	str	r3, [r2, #0]
 80162e0:	68bb      	ldr	r3, [r7, #8]
 80162e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80162e4:	4613      	mov	r3, r2
 80162e6:	009b      	lsls	r3, r3, #2
 80162e8:	4413      	add	r3, r2
 80162ea:	009b      	lsls	r3, r3, #2
 80162ec:	4a10      	ldr	r2, [pc, #64]	@ (8016330 <xTaskPriorityInherit+0xe4>)
 80162ee:	441a      	add	r2, r3
 80162f0:	68bb      	ldr	r3, [r7, #8]
 80162f2:	3304      	adds	r3, #4
 80162f4:	4619      	mov	r1, r3
 80162f6:	4610      	mov	r0, r2
 80162f8:	f7fe fcdf 	bl	8014cba <vListInsertEnd>
 80162fc:	e004      	b.n	8016308 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80162fe:	4b0b      	ldr	r3, [pc, #44]	@ (801632c <xTaskPriorityInherit+0xe0>)
 8016300:	681b      	ldr	r3, [r3, #0]
 8016302:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016304:	68bb      	ldr	r3, [r7, #8]
 8016306:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8016308:	2301      	movs	r3, #1
 801630a:	60fb      	str	r3, [r7, #12]
 801630c:	e008      	b.n	8016320 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801630e:	68bb      	ldr	r3, [r7, #8]
 8016310:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8016312:	4b06      	ldr	r3, [pc, #24]	@ (801632c <xTaskPriorityInherit+0xe0>)
 8016314:	681b      	ldr	r3, [r3, #0]
 8016316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016318:	429a      	cmp	r2, r3
 801631a:	d201      	bcs.n	8016320 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801631c:	2301      	movs	r3, #1
 801631e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8016320:	68fb      	ldr	r3, [r7, #12]
	}
 8016322:	4618      	mov	r0, r3
 8016324:	3710      	adds	r7, #16
 8016326:	46bd      	mov	sp, r7
 8016328:	bd80      	pop	{r7, pc}
 801632a:	bf00      	nop
 801632c:	24002ad8 	.word	0x24002ad8
 8016330:	24002adc 	.word	0x24002adc
 8016334:	24002be0 	.word	0x24002be0

08016338 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8016338:	b580      	push	{r7, lr}
 801633a:	b086      	sub	sp, #24
 801633c:	af00      	add	r7, sp, #0
 801633e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8016340:	687b      	ldr	r3, [r7, #4]
 8016342:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8016344:	2300      	movs	r3, #0
 8016346:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8016348:	687b      	ldr	r3, [r7, #4]
 801634a:	2b00      	cmp	r3, #0
 801634c:	d070      	beq.n	8016430 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801634e:	4b3b      	ldr	r3, [pc, #236]	@ (801643c <xTaskPriorityDisinherit+0x104>)
 8016350:	681b      	ldr	r3, [r3, #0]
 8016352:	693a      	ldr	r2, [r7, #16]
 8016354:	429a      	cmp	r2, r3
 8016356:	d00b      	beq.n	8016370 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8016358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801635c:	f383 8811 	msr	BASEPRI, r3
 8016360:	f3bf 8f6f 	isb	sy
 8016364:	f3bf 8f4f 	dsb	sy
 8016368:	60fb      	str	r3, [r7, #12]
}
 801636a:	bf00      	nop
 801636c:	bf00      	nop
 801636e:	e7fd      	b.n	801636c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8016370:	693b      	ldr	r3, [r7, #16]
 8016372:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016374:	2b00      	cmp	r3, #0
 8016376:	d10b      	bne.n	8016390 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8016378:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801637c:	f383 8811 	msr	BASEPRI, r3
 8016380:	f3bf 8f6f 	isb	sy
 8016384:	f3bf 8f4f 	dsb	sy
 8016388:	60bb      	str	r3, [r7, #8]
}
 801638a:	bf00      	nop
 801638c:	bf00      	nop
 801638e:	e7fd      	b.n	801638c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8016390:	693b      	ldr	r3, [r7, #16]
 8016392:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016394:	1e5a      	subs	r2, r3, #1
 8016396:	693b      	ldr	r3, [r7, #16]
 8016398:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801639a:	693b      	ldr	r3, [r7, #16]
 801639c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801639e:	693b      	ldr	r3, [r7, #16]
 80163a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80163a2:	429a      	cmp	r2, r3
 80163a4:	d044      	beq.n	8016430 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80163a6:	693b      	ldr	r3, [r7, #16]
 80163a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80163aa:	2b00      	cmp	r3, #0
 80163ac:	d140      	bne.n	8016430 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80163ae:	693b      	ldr	r3, [r7, #16]
 80163b0:	3304      	adds	r3, #4
 80163b2:	4618      	mov	r0, r3
 80163b4:	f7fe fcde 	bl	8014d74 <uxListRemove>
 80163b8:	4603      	mov	r3, r0
 80163ba:	2b00      	cmp	r3, #0
 80163bc:	d115      	bne.n	80163ea <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80163be:	693b      	ldr	r3, [r7, #16]
 80163c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80163c2:	491f      	ldr	r1, [pc, #124]	@ (8016440 <xTaskPriorityDisinherit+0x108>)
 80163c4:	4613      	mov	r3, r2
 80163c6:	009b      	lsls	r3, r3, #2
 80163c8:	4413      	add	r3, r2
 80163ca:	009b      	lsls	r3, r3, #2
 80163cc:	440b      	add	r3, r1
 80163ce:	681b      	ldr	r3, [r3, #0]
 80163d0:	2b00      	cmp	r3, #0
 80163d2:	d10a      	bne.n	80163ea <xTaskPriorityDisinherit+0xb2>
 80163d4:	693b      	ldr	r3, [r7, #16]
 80163d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80163d8:	2201      	movs	r2, #1
 80163da:	fa02 f303 	lsl.w	r3, r2, r3
 80163de:	43da      	mvns	r2, r3
 80163e0:	4b18      	ldr	r3, [pc, #96]	@ (8016444 <xTaskPriorityDisinherit+0x10c>)
 80163e2:	681b      	ldr	r3, [r3, #0]
 80163e4:	4013      	ands	r3, r2
 80163e6:	4a17      	ldr	r2, [pc, #92]	@ (8016444 <xTaskPriorityDisinherit+0x10c>)
 80163e8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80163ea:	693b      	ldr	r3, [r7, #16]
 80163ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80163ee:	693b      	ldr	r3, [r7, #16]
 80163f0:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80163f2:	693b      	ldr	r3, [r7, #16]
 80163f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80163f6:	f1c3 0207 	rsb	r2, r3, #7
 80163fa:	693b      	ldr	r3, [r7, #16]
 80163fc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80163fe:	693b      	ldr	r3, [r7, #16]
 8016400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016402:	2201      	movs	r2, #1
 8016404:	409a      	lsls	r2, r3
 8016406:	4b0f      	ldr	r3, [pc, #60]	@ (8016444 <xTaskPriorityDisinherit+0x10c>)
 8016408:	681b      	ldr	r3, [r3, #0]
 801640a:	4313      	orrs	r3, r2
 801640c:	4a0d      	ldr	r2, [pc, #52]	@ (8016444 <xTaskPriorityDisinherit+0x10c>)
 801640e:	6013      	str	r3, [r2, #0]
 8016410:	693b      	ldr	r3, [r7, #16]
 8016412:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016414:	4613      	mov	r3, r2
 8016416:	009b      	lsls	r3, r3, #2
 8016418:	4413      	add	r3, r2
 801641a:	009b      	lsls	r3, r3, #2
 801641c:	4a08      	ldr	r2, [pc, #32]	@ (8016440 <xTaskPriorityDisinherit+0x108>)
 801641e:	441a      	add	r2, r3
 8016420:	693b      	ldr	r3, [r7, #16]
 8016422:	3304      	adds	r3, #4
 8016424:	4619      	mov	r1, r3
 8016426:	4610      	mov	r0, r2
 8016428:	f7fe fc47 	bl	8014cba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801642c:	2301      	movs	r3, #1
 801642e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8016430:	697b      	ldr	r3, [r7, #20]
	}
 8016432:	4618      	mov	r0, r3
 8016434:	3718      	adds	r7, #24
 8016436:	46bd      	mov	sp, r7
 8016438:	bd80      	pop	{r7, pc}
 801643a:	bf00      	nop
 801643c:	24002ad8 	.word	0x24002ad8
 8016440:	24002adc 	.word	0x24002adc
 8016444:	24002be0 	.word	0x24002be0

08016448 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8016448:	b580      	push	{r7, lr}
 801644a:	b088      	sub	sp, #32
 801644c:	af00      	add	r7, sp, #0
 801644e:	6078      	str	r0, [r7, #4]
 8016450:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8016452:	687b      	ldr	r3, [r7, #4]
 8016454:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8016456:	2301      	movs	r3, #1
 8016458:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801645a:	687b      	ldr	r3, [r7, #4]
 801645c:	2b00      	cmp	r3, #0
 801645e:	d079      	beq.n	8016554 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8016460:	69bb      	ldr	r3, [r7, #24]
 8016462:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016464:	2b00      	cmp	r3, #0
 8016466:	d10b      	bne.n	8016480 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8016468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801646c:	f383 8811 	msr	BASEPRI, r3
 8016470:	f3bf 8f6f 	isb	sy
 8016474:	f3bf 8f4f 	dsb	sy
 8016478:	60fb      	str	r3, [r7, #12]
}
 801647a:	bf00      	nop
 801647c:	bf00      	nop
 801647e:	e7fd      	b.n	801647c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8016480:	69bb      	ldr	r3, [r7, #24]
 8016482:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016484:	683a      	ldr	r2, [r7, #0]
 8016486:	429a      	cmp	r2, r3
 8016488:	d902      	bls.n	8016490 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801648a:	683b      	ldr	r3, [r7, #0]
 801648c:	61fb      	str	r3, [r7, #28]
 801648e:	e002      	b.n	8016496 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8016490:	69bb      	ldr	r3, [r7, #24]
 8016492:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016494:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8016496:	69bb      	ldr	r3, [r7, #24]
 8016498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801649a:	69fa      	ldr	r2, [r7, #28]
 801649c:	429a      	cmp	r2, r3
 801649e:	d059      	beq.n	8016554 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80164a0:	69bb      	ldr	r3, [r7, #24]
 80164a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80164a4:	697a      	ldr	r2, [r7, #20]
 80164a6:	429a      	cmp	r2, r3
 80164a8:	d154      	bne.n	8016554 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80164aa:	4b2c      	ldr	r3, [pc, #176]	@ (801655c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80164ac:	681b      	ldr	r3, [r3, #0]
 80164ae:	69ba      	ldr	r2, [r7, #24]
 80164b0:	429a      	cmp	r2, r3
 80164b2:	d10b      	bne.n	80164cc <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80164b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80164b8:	f383 8811 	msr	BASEPRI, r3
 80164bc:	f3bf 8f6f 	isb	sy
 80164c0:	f3bf 8f4f 	dsb	sy
 80164c4:	60bb      	str	r3, [r7, #8]
}
 80164c6:	bf00      	nop
 80164c8:	bf00      	nop
 80164ca:	e7fd      	b.n	80164c8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80164cc:	69bb      	ldr	r3, [r7, #24]
 80164ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80164d0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80164d2:	69bb      	ldr	r3, [r7, #24]
 80164d4:	69fa      	ldr	r2, [r7, #28]
 80164d6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80164d8:	69bb      	ldr	r3, [r7, #24]
 80164da:	699b      	ldr	r3, [r3, #24]
 80164dc:	2b00      	cmp	r3, #0
 80164de:	db04      	blt.n	80164ea <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80164e0:	69fb      	ldr	r3, [r7, #28]
 80164e2:	f1c3 0207 	rsb	r2, r3, #7
 80164e6:	69bb      	ldr	r3, [r7, #24]
 80164e8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80164ea:	69bb      	ldr	r3, [r7, #24]
 80164ec:	6959      	ldr	r1, [r3, #20]
 80164ee:	693a      	ldr	r2, [r7, #16]
 80164f0:	4613      	mov	r3, r2
 80164f2:	009b      	lsls	r3, r3, #2
 80164f4:	4413      	add	r3, r2
 80164f6:	009b      	lsls	r3, r3, #2
 80164f8:	4a19      	ldr	r2, [pc, #100]	@ (8016560 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80164fa:	4413      	add	r3, r2
 80164fc:	4299      	cmp	r1, r3
 80164fe:	d129      	bne.n	8016554 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016500:	69bb      	ldr	r3, [r7, #24]
 8016502:	3304      	adds	r3, #4
 8016504:	4618      	mov	r0, r3
 8016506:	f7fe fc35 	bl	8014d74 <uxListRemove>
 801650a:	4603      	mov	r3, r0
 801650c:	2b00      	cmp	r3, #0
 801650e:	d10a      	bne.n	8016526 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8016510:	69bb      	ldr	r3, [r7, #24]
 8016512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016514:	2201      	movs	r2, #1
 8016516:	fa02 f303 	lsl.w	r3, r2, r3
 801651a:	43da      	mvns	r2, r3
 801651c:	4b11      	ldr	r3, [pc, #68]	@ (8016564 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 801651e:	681b      	ldr	r3, [r3, #0]
 8016520:	4013      	ands	r3, r2
 8016522:	4a10      	ldr	r2, [pc, #64]	@ (8016564 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8016524:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8016526:	69bb      	ldr	r3, [r7, #24]
 8016528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801652a:	2201      	movs	r2, #1
 801652c:	409a      	lsls	r2, r3
 801652e:	4b0d      	ldr	r3, [pc, #52]	@ (8016564 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8016530:	681b      	ldr	r3, [r3, #0]
 8016532:	4313      	orrs	r3, r2
 8016534:	4a0b      	ldr	r2, [pc, #44]	@ (8016564 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8016536:	6013      	str	r3, [r2, #0]
 8016538:	69bb      	ldr	r3, [r7, #24]
 801653a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801653c:	4613      	mov	r3, r2
 801653e:	009b      	lsls	r3, r3, #2
 8016540:	4413      	add	r3, r2
 8016542:	009b      	lsls	r3, r3, #2
 8016544:	4a06      	ldr	r2, [pc, #24]	@ (8016560 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8016546:	441a      	add	r2, r3
 8016548:	69bb      	ldr	r3, [r7, #24]
 801654a:	3304      	adds	r3, #4
 801654c:	4619      	mov	r1, r3
 801654e:	4610      	mov	r0, r2
 8016550:	f7fe fbb3 	bl	8014cba <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8016554:	bf00      	nop
 8016556:	3720      	adds	r7, #32
 8016558:	46bd      	mov	sp, r7
 801655a:	bd80      	pop	{r7, pc}
 801655c:	24002ad8 	.word	0x24002ad8
 8016560:	24002adc 	.word	0x24002adc
 8016564:	24002be0 	.word	0x24002be0

08016568 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8016568:	b480      	push	{r7}
 801656a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801656c:	4b07      	ldr	r3, [pc, #28]	@ (801658c <pvTaskIncrementMutexHeldCount+0x24>)
 801656e:	681b      	ldr	r3, [r3, #0]
 8016570:	2b00      	cmp	r3, #0
 8016572:	d004      	beq.n	801657e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8016574:	4b05      	ldr	r3, [pc, #20]	@ (801658c <pvTaskIncrementMutexHeldCount+0x24>)
 8016576:	681b      	ldr	r3, [r3, #0]
 8016578:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801657a:	3201      	adds	r2, #1
 801657c:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 801657e:	4b03      	ldr	r3, [pc, #12]	@ (801658c <pvTaskIncrementMutexHeldCount+0x24>)
 8016580:	681b      	ldr	r3, [r3, #0]
	}
 8016582:	4618      	mov	r0, r3
 8016584:	46bd      	mov	sp, r7
 8016586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801658a:	4770      	bx	lr
 801658c:	24002ad8 	.word	0x24002ad8

08016590 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8016590:	b580      	push	{r7, lr}
 8016592:	b084      	sub	sp, #16
 8016594:	af00      	add	r7, sp, #0
 8016596:	6078      	str	r0, [r7, #4]
 8016598:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801659a:	4b29      	ldr	r3, [pc, #164]	@ (8016640 <prvAddCurrentTaskToDelayedList+0xb0>)
 801659c:	681b      	ldr	r3, [r3, #0]
 801659e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80165a0:	4b28      	ldr	r3, [pc, #160]	@ (8016644 <prvAddCurrentTaskToDelayedList+0xb4>)
 80165a2:	681b      	ldr	r3, [r3, #0]
 80165a4:	3304      	adds	r3, #4
 80165a6:	4618      	mov	r0, r3
 80165a8:	f7fe fbe4 	bl	8014d74 <uxListRemove>
 80165ac:	4603      	mov	r3, r0
 80165ae:	2b00      	cmp	r3, #0
 80165b0:	d10b      	bne.n	80165ca <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80165b2:	4b24      	ldr	r3, [pc, #144]	@ (8016644 <prvAddCurrentTaskToDelayedList+0xb4>)
 80165b4:	681b      	ldr	r3, [r3, #0]
 80165b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80165b8:	2201      	movs	r2, #1
 80165ba:	fa02 f303 	lsl.w	r3, r2, r3
 80165be:	43da      	mvns	r2, r3
 80165c0:	4b21      	ldr	r3, [pc, #132]	@ (8016648 <prvAddCurrentTaskToDelayedList+0xb8>)
 80165c2:	681b      	ldr	r3, [r3, #0]
 80165c4:	4013      	ands	r3, r2
 80165c6:	4a20      	ldr	r2, [pc, #128]	@ (8016648 <prvAddCurrentTaskToDelayedList+0xb8>)
 80165c8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80165ca:	687b      	ldr	r3, [r7, #4]
 80165cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80165d0:	d10a      	bne.n	80165e8 <prvAddCurrentTaskToDelayedList+0x58>
 80165d2:	683b      	ldr	r3, [r7, #0]
 80165d4:	2b00      	cmp	r3, #0
 80165d6:	d007      	beq.n	80165e8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80165d8:	4b1a      	ldr	r3, [pc, #104]	@ (8016644 <prvAddCurrentTaskToDelayedList+0xb4>)
 80165da:	681b      	ldr	r3, [r3, #0]
 80165dc:	3304      	adds	r3, #4
 80165de:	4619      	mov	r1, r3
 80165e0:	481a      	ldr	r0, [pc, #104]	@ (801664c <prvAddCurrentTaskToDelayedList+0xbc>)
 80165e2:	f7fe fb6a 	bl	8014cba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80165e6:	e026      	b.n	8016636 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80165e8:	68fa      	ldr	r2, [r7, #12]
 80165ea:	687b      	ldr	r3, [r7, #4]
 80165ec:	4413      	add	r3, r2
 80165ee:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80165f0:	4b14      	ldr	r3, [pc, #80]	@ (8016644 <prvAddCurrentTaskToDelayedList+0xb4>)
 80165f2:	681b      	ldr	r3, [r3, #0]
 80165f4:	68ba      	ldr	r2, [r7, #8]
 80165f6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80165f8:	68ba      	ldr	r2, [r7, #8]
 80165fa:	68fb      	ldr	r3, [r7, #12]
 80165fc:	429a      	cmp	r2, r3
 80165fe:	d209      	bcs.n	8016614 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016600:	4b13      	ldr	r3, [pc, #76]	@ (8016650 <prvAddCurrentTaskToDelayedList+0xc0>)
 8016602:	681a      	ldr	r2, [r3, #0]
 8016604:	4b0f      	ldr	r3, [pc, #60]	@ (8016644 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016606:	681b      	ldr	r3, [r3, #0]
 8016608:	3304      	adds	r3, #4
 801660a:	4619      	mov	r1, r3
 801660c:	4610      	mov	r0, r2
 801660e:	f7fe fb78 	bl	8014d02 <vListInsert>
}
 8016612:	e010      	b.n	8016636 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016614:	4b0f      	ldr	r3, [pc, #60]	@ (8016654 <prvAddCurrentTaskToDelayedList+0xc4>)
 8016616:	681a      	ldr	r2, [r3, #0]
 8016618:	4b0a      	ldr	r3, [pc, #40]	@ (8016644 <prvAddCurrentTaskToDelayedList+0xb4>)
 801661a:	681b      	ldr	r3, [r3, #0]
 801661c:	3304      	adds	r3, #4
 801661e:	4619      	mov	r1, r3
 8016620:	4610      	mov	r0, r2
 8016622:	f7fe fb6e 	bl	8014d02 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8016626:	4b0c      	ldr	r3, [pc, #48]	@ (8016658 <prvAddCurrentTaskToDelayedList+0xc8>)
 8016628:	681b      	ldr	r3, [r3, #0]
 801662a:	68ba      	ldr	r2, [r7, #8]
 801662c:	429a      	cmp	r2, r3
 801662e:	d202      	bcs.n	8016636 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8016630:	4a09      	ldr	r2, [pc, #36]	@ (8016658 <prvAddCurrentTaskToDelayedList+0xc8>)
 8016632:	68bb      	ldr	r3, [r7, #8]
 8016634:	6013      	str	r3, [r2, #0]
}
 8016636:	bf00      	nop
 8016638:	3710      	adds	r7, #16
 801663a:	46bd      	mov	sp, r7
 801663c:	bd80      	pop	{r7, pc}
 801663e:	bf00      	nop
 8016640:	24002bdc 	.word	0x24002bdc
 8016644:	24002ad8 	.word	0x24002ad8
 8016648:	24002be0 	.word	0x24002be0
 801664c:	24002bc4 	.word	0x24002bc4
 8016650:	24002b94 	.word	0x24002b94
 8016654:	24002b90 	.word	0x24002b90
 8016658:	24002bf8 	.word	0x24002bf8

0801665c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801665c:	b480      	push	{r7}
 801665e:	b085      	sub	sp, #20
 8016660:	af00      	add	r7, sp, #0
 8016662:	60f8      	str	r0, [r7, #12]
 8016664:	60b9      	str	r1, [r7, #8]
 8016666:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8016668:	68fb      	ldr	r3, [r7, #12]
 801666a:	3b04      	subs	r3, #4
 801666c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801666e:	68fb      	ldr	r3, [r7, #12]
 8016670:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8016674:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8016676:	68fb      	ldr	r3, [r7, #12]
 8016678:	3b04      	subs	r3, #4
 801667a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801667c:	68bb      	ldr	r3, [r7, #8]
 801667e:	f023 0201 	bic.w	r2, r3, #1
 8016682:	68fb      	ldr	r3, [r7, #12]
 8016684:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8016686:	68fb      	ldr	r3, [r7, #12]
 8016688:	3b04      	subs	r3, #4
 801668a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801668c:	4a0c      	ldr	r2, [pc, #48]	@ (80166c0 <pxPortInitialiseStack+0x64>)
 801668e:	68fb      	ldr	r3, [r7, #12]
 8016690:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8016692:	68fb      	ldr	r3, [r7, #12]
 8016694:	3b14      	subs	r3, #20
 8016696:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8016698:	687a      	ldr	r2, [r7, #4]
 801669a:	68fb      	ldr	r3, [r7, #12]
 801669c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801669e:	68fb      	ldr	r3, [r7, #12]
 80166a0:	3b04      	subs	r3, #4
 80166a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80166a4:	68fb      	ldr	r3, [r7, #12]
 80166a6:	f06f 0202 	mvn.w	r2, #2
 80166aa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80166ac:	68fb      	ldr	r3, [r7, #12]
 80166ae:	3b20      	subs	r3, #32
 80166b0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80166b2:	68fb      	ldr	r3, [r7, #12]
}
 80166b4:	4618      	mov	r0, r3
 80166b6:	3714      	adds	r7, #20
 80166b8:	46bd      	mov	sp, r7
 80166ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166be:	4770      	bx	lr
 80166c0:	080166c5 	.word	0x080166c5

080166c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80166c4:	b480      	push	{r7}
 80166c6:	b085      	sub	sp, #20
 80166c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80166ca:	2300      	movs	r3, #0
 80166cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80166ce:	4b13      	ldr	r3, [pc, #76]	@ (801671c <prvTaskExitError+0x58>)
 80166d0:	681b      	ldr	r3, [r3, #0]
 80166d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80166d6:	d00b      	beq.n	80166f0 <prvTaskExitError+0x2c>
	__asm volatile
 80166d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80166dc:	f383 8811 	msr	BASEPRI, r3
 80166e0:	f3bf 8f6f 	isb	sy
 80166e4:	f3bf 8f4f 	dsb	sy
 80166e8:	60fb      	str	r3, [r7, #12]
}
 80166ea:	bf00      	nop
 80166ec:	bf00      	nop
 80166ee:	e7fd      	b.n	80166ec <prvTaskExitError+0x28>
	__asm volatile
 80166f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80166f4:	f383 8811 	msr	BASEPRI, r3
 80166f8:	f3bf 8f6f 	isb	sy
 80166fc:	f3bf 8f4f 	dsb	sy
 8016700:	60bb      	str	r3, [r7, #8]
}
 8016702:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8016704:	bf00      	nop
 8016706:	687b      	ldr	r3, [r7, #4]
 8016708:	2b00      	cmp	r3, #0
 801670a:	d0fc      	beq.n	8016706 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801670c:	bf00      	nop
 801670e:	bf00      	nop
 8016710:	3714      	adds	r7, #20
 8016712:	46bd      	mov	sp, r7
 8016714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016718:	4770      	bx	lr
 801671a:	bf00      	nop
 801671c:	240000c4 	.word	0x240000c4

08016720 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8016720:	4b07      	ldr	r3, [pc, #28]	@ (8016740 <pxCurrentTCBConst2>)
 8016722:	6819      	ldr	r1, [r3, #0]
 8016724:	6808      	ldr	r0, [r1, #0]
 8016726:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801672a:	f380 8809 	msr	PSP, r0
 801672e:	f3bf 8f6f 	isb	sy
 8016732:	f04f 0000 	mov.w	r0, #0
 8016736:	f380 8811 	msr	BASEPRI, r0
 801673a:	4770      	bx	lr
 801673c:	f3af 8000 	nop.w

08016740 <pxCurrentTCBConst2>:
 8016740:	24002ad8 	.word	0x24002ad8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8016744:	bf00      	nop
 8016746:	bf00      	nop

08016748 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8016748:	4808      	ldr	r0, [pc, #32]	@ (801676c <prvPortStartFirstTask+0x24>)
 801674a:	6800      	ldr	r0, [r0, #0]
 801674c:	6800      	ldr	r0, [r0, #0]
 801674e:	f380 8808 	msr	MSP, r0
 8016752:	f04f 0000 	mov.w	r0, #0
 8016756:	f380 8814 	msr	CONTROL, r0
 801675a:	b662      	cpsie	i
 801675c:	b661      	cpsie	f
 801675e:	f3bf 8f4f 	dsb	sy
 8016762:	f3bf 8f6f 	isb	sy
 8016766:	df00      	svc	0
 8016768:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801676a:	bf00      	nop
 801676c:	e000ed08 	.word	0xe000ed08

08016770 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8016770:	b580      	push	{r7, lr}
 8016772:	b086      	sub	sp, #24
 8016774:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8016776:	4b47      	ldr	r3, [pc, #284]	@ (8016894 <xPortStartScheduler+0x124>)
 8016778:	681b      	ldr	r3, [r3, #0]
 801677a:	4a47      	ldr	r2, [pc, #284]	@ (8016898 <xPortStartScheduler+0x128>)
 801677c:	4293      	cmp	r3, r2
 801677e:	d10b      	bne.n	8016798 <xPortStartScheduler+0x28>
	__asm volatile
 8016780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016784:	f383 8811 	msr	BASEPRI, r3
 8016788:	f3bf 8f6f 	isb	sy
 801678c:	f3bf 8f4f 	dsb	sy
 8016790:	613b      	str	r3, [r7, #16]
}
 8016792:	bf00      	nop
 8016794:	bf00      	nop
 8016796:	e7fd      	b.n	8016794 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8016798:	4b3e      	ldr	r3, [pc, #248]	@ (8016894 <xPortStartScheduler+0x124>)
 801679a:	681b      	ldr	r3, [r3, #0]
 801679c:	4a3f      	ldr	r2, [pc, #252]	@ (801689c <xPortStartScheduler+0x12c>)
 801679e:	4293      	cmp	r3, r2
 80167a0:	d10b      	bne.n	80167ba <xPortStartScheduler+0x4a>
	__asm volatile
 80167a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80167a6:	f383 8811 	msr	BASEPRI, r3
 80167aa:	f3bf 8f6f 	isb	sy
 80167ae:	f3bf 8f4f 	dsb	sy
 80167b2:	60fb      	str	r3, [r7, #12]
}
 80167b4:	bf00      	nop
 80167b6:	bf00      	nop
 80167b8:	e7fd      	b.n	80167b6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80167ba:	4b39      	ldr	r3, [pc, #228]	@ (80168a0 <xPortStartScheduler+0x130>)
 80167bc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80167be:	697b      	ldr	r3, [r7, #20]
 80167c0:	781b      	ldrb	r3, [r3, #0]
 80167c2:	b2db      	uxtb	r3, r3
 80167c4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80167c6:	697b      	ldr	r3, [r7, #20]
 80167c8:	22ff      	movs	r2, #255	@ 0xff
 80167ca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80167cc:	697b      	ldr	r3, [r7, #20]
 80167ce:	781b      	ldrb	r3, [r3, #0]
 80167d0:	b2db      	uxtb	r3, r3
 80167d2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80167d4:	78fb      	ldrb	r3, [r7, #3]
 80167d6:	b2db      	uxtb	r3, r3
 80167d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80167dc:	b2da      	uxtb	r2, r3
 80167de:	4b31      	ldr	r3, [pc, #196]	@ (80168a4 <xPortStartScheduler+0x134>)
 80167e0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80167e2:	4b31      	ldr	r3, [pc, #196]	@ (80168a8 <xPortStartScheduler+0x138>)
 80167e4:	2207      	movs	r2, #7
 80167e6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80167e8:	e009      	b.n	80167fe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80167ea:	4b2f      	ldr	r3, [pc, #188]	@ (80168a8 <xPortStartScheduler+0x138>)
 80167ec:	681b      	ldr	r3, [r3, #0]
 80167ee:	3b01      	subs	r3, #1
 80167f0:	4a2d      	ldr	r2, [pc, #180]	@ (80168a8 <xPortStartScheduler+0x138>)
 80167f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80167f4:	78fb      	ldrb	r3, [r7, #3]
 80167f6:	b2db      	uxtb	r3, r3
 80167f8:	005b      	lsls	r3, r3, #1
 80167fa:	b2db      	uxtb	r3, r3
 80167fc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80167fe:	78fb      	ldrb	r3, [r7, #3]
 8016800:	b2db      	uxtb	r3, r3
 8016802:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016806:	2b80      	cmp	r3, #128	@ 0x80
 8016808:	d0ef      	beq.n	80167ea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801680a:	4b27      	ldr	r3, [pc, #156]	@ (80168a8 <xPortStartScheduler+0x138>)
 801680c:	681b      	ldr	r3, [r3, #0]
 801680e:	f1c3 0307 	rsb	r3, r3, #7
 8016812:	2b04      	cmp	r3, #4
 8016814:	d00b      	beq.n	801682e <xPortStartScheduler+0xbe>
	__asm volatile
 8016816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801681a:	f383 8811 	msr	BASEPRI, r3
 801681e:	f3bf 8f6f 	isb	sy
 8016822:	f3bf 8f4f 	dsb	sy
 8016826:	60bb      	str	r3, [r7, #8]
}
 8016828:	bf00      	nop
 801682a:	bf00      	nop
 801682c:	e7fd      	b.n	801682a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801682e:	4b1e      	ldr	r3, [pc, #120]	@ (80168a8 <xPortStartScheduler+0x138>)
 8016830:	681b      	ldr	r3, [r3, #0]
 8016832:	021b      	lsls	r3, r3, #8
 8016834:	4a1c      	ldr	r2, [pc, #112]	@ (80168a8 <xPortStartScheduler+0x138>)
 8016836:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8016838:	4b1b      	ldr	r3, [pc, #108]	@ (80168a8 <xPortStartScheduler+0x138>)
 801683a:	681b      	ldr	r3, [r3, #0]
 801683c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8016840:	4a19      	ldr	r2, [pc, #100]	@ (80168a8 <xPortStartScheduler+0x138>)
 8016842:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8016844:	687b      	ldr	r3, [r7, #4]
 8016846:	b2da      	uxtb	r2, r3
 8016848:	697b      	ldr	r3, [r7, #20]
 801684a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801684c:	4b17      	ldr	r3, [pc, #92]	@ (80168ac <xPortStartScheduler+0x13c>)
 801684e:	681b      	ldr	r3, [r3, #0]
 8016850:	4a16      	ldr	r2, [pc, #88]	@ (80168ac <xPortStartScheduler+0x13c>)
 8016852:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8016856:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8016858:	4b14      	ldr	r3, [pc, #80]	@ (80168ac <xPortStartScheduler+0x13c>)
 801685a:	681b      	ldr	r3, [r3, #0]
 801685c:	4a13      	ldr	r2, [pc, #76]	@ (80168ac <xPortStartScheduler+0x13c>)
 801685e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8016862:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8016864:	f000 f8da 	bl	8016a1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8016868:	4b11      	ldr	r3, [pc, #68]	@ (80168b0 <xPortStartScheduler+0x140>)
 801686a:	2200      	movs	r2, #0
 801686c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801686e:	f000 f8f9 	bl	8016a64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8016872:	4b10      	ldr	r3, [pc, #64]	@ (80168b4 <xPortStartScheduler+0x144>)
 8016874:	681b      	ldr	r3, [r3, #0]
 8016876:	4a0f      	ldr	r2, [pc, #60]	@ (80168b4 <xPortStartScheduler+0x144>)
 8016878:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801687c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801687e:	f7ff ff63 	bl	8016748 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8016882:	f7ff fa83 	bl	8015d8c <vTaskSwitchContext>
	prvTaskExitError();
 8016886:	f7ff ff1d 	bl	80166c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801688a:	2300      	movs	r3, #0
}
 801688c:	4618      	mov	r0, r3
 801688e:	3718      	adds	r7, #24
 8016890:	46bd      	mov	sp, r7
 8016892:	bd80      	pop	{r7, pc}
 8016894:	e000ed00 	.word	0xe000ed00
 8016898:	410fc271 	.word	0x410fc271
 801689c:	410fc270 	.word	0x410fc270
 80168a0:	e000e400 	.word	0xe000e400
 80168a4:	24002c04 	.word	0x24002c04
 80168a8:	24002c08 	.word	0x24002c08
 80168ac:	e000ed20 	.word	0xe000ed20
 80168b0:	240000c4 	.word	0x240000c4
 80168b4:	e000ef34 	.word	0xe000ef34

080168b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80168b8:	b480      	push	{r7}
 80168ba:	b083      	sub	sp, #12
 80168bc:	af00      	add	r7, sp, #0
	__asm volatile
 80168be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80168c2:	f383 8811 	msr	BASEPRI, r3
 80168c6:	f3bf 8f6f 	isb	sy
 80168ca:	f3bf 8f4f 	dsb	sy
 80168ce:	607b      	str	r3, [r7, #4]
}
 80168d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80168d2:	4b10      	ldr	r3, [pc, #64]	@ (8016914 <vPortEnterCritical+0x5c>)
 80168d4:	681b      	ldr	r3, [r3, #0]
 80168d6:	3301      	adds	r3, #1
 80168d8:	4a0e      	ldr	r2, [pc, #56]	@ (8016914 <vPortEnterCritical+0x5c>)
 80168da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80168dc:	4b0d      	ldr	r3, [pc, #52]	@ (8016914 <vPortEnterCritical+0x5c>)
 80168de:	681b      	ldr	r3, [r3, #0]
 80168e0:	2b01      	cmp	r3, #1
 80168e2:	d110      	bne.n	8016906 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80168e4:	4b0c      	ldr	r3, [pc, #48]	@ (8016918 <vPortEnterCritical+0x60>)
 80168e6:	681b      	ldr	r3, [r3, #0]
 80168e8:	b2db      	uxtb	r3, r3
 80168ea:	2b00      	cmp	r3, #0
 80168ec:	d00b      	beq.n	8016906 <vPortEnterCritical+0x4e>
	__asm volatile
 80168ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80168f2:	f383 8811 	msr	BASEPRI, r3
 80168f6:	f3bf 8f6f 	isb	sy
 80168fa:	f3bf 8f4f 	dsb	sy
 80168fe:	603b      	str	r3, [r7, #0]
}
 8016900:	bf00      	nop
 8016902:	bf00      	nop
 8016904:	e7fd      	b.n	8016902 <vPortEnterCritical+0x4a>
	}
}
 8016906:	bf00      	nop
 8016908:	370c      	adds	r7, #12
 801690a:	46bd      	mov	sp, r7
 801690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016910:	4770      	bx	lr
 8016912:	bf00      	nop
 8016914:	240000c4 	.word	0x240000c4
 8016918:	e000ed04 	.word	0xe000ed04

0801691c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801691c:	b480      	push	{r7}
 801691e:	b083      	sub	sp, #12
 8016920:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8016922:	4b12      	ldr	r3, [pc, #72]	@ (801696c <vPortExitCritical+0x50>)
 8016924:	681b      	ldr	r3, [r3, #0]
 8016926:	2b00      	cmp	r3, #0
 8016928:	d10b      	bne.n	8016942 <vPortExitCritical+0x26>
	__asm volatile
 801692a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801692e:	f383 8811 	msr	BASEPRI, r3
 8016932:	f3bf 8f6f 	isb	sy
 8016936:	f3bf 8f4f 	dsb	sy
 801693a:	607b      	str	r3, [r7, #4]
}
 801693c:	bf00      	nop
 801693e:	bf00      	nop
 8016940:	e7fd      	b.n	801693e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8016942:	4b0a      	ldr	r3, [pc, #40]	@ (801696c <vPortExitCritical+0x50>)
 8016944:	681b      	ldr	r3, [r3, #0]
 8016946:	3b01      	subs	r3, #1
 8016948:	4a08      	ldr	r2, [pc, #32]	@ (801696c <vPortExitCritical+0x50>)
 801694a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801694c:	4b07      	ldr	r3, [pc, #28]	@ (801696c <vPortExitCritical+0x50>)
 801694e:	681b      	ldr	r3, [r3, #0]
 8016950:	2b00      	cmp	r3, #0
 8016952:	d105      	bne.n	8016960 <vPortExitCritical+0x44>
 8016954:	2300      	movs	r3, #0
 8016956:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016958:	683b      	ldr	r3, [r7, #0]
 801695a:	f383 8811 	msr	BASEPRI, r3
}
 801695e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8016960:	bf00      	nop
 8016962:	370c      	adds	r7, #12
 8016964:	46bd      	mov	sp, r7
 8016966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801696a:	4770      	bx	lr
 801696c:	240000c4 	.word	0x240000c4

08016970 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8016970:	f3ef 8009 	mrs	r0, PSP
 8016974:	f3bf 8f6f 	isb	sy
 8016978:	4b15      	ldr	r3, [pc, #84]	@ (80169d0 <pxCurrentTCBConst>)
 801697a:	681a      	ldr	r2, [r3, #0]
 801697c:	f01e 0f10 	tst.w	lr, #16
 8016980:	bf08      	it	eq
 8016982:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016986:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801698a:	6010      	str	r0, [r2, #0]
 801698c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016990:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8016994:	f380 8811 	msr	BASEPRI, r0
 8016998:	f3bf 8f4f 	dsb	sy
 801699c:	f3bf 8f6f 	isb	sy
 80169a0:	f7ff f9f4 	bl	8015d8c <vTaskSwitchContext>
 80169a4:	f04f 0000 	mov.w	r0, #0
 80169a8:	f380 8811 	msr	BASEPRI, r0
 80169ac:	bc09      	pop	{r0, r3}
 80169ae:	6819      	ldr	r1, [r3, #0]
 80169b0:	6808      	ldr	r0, [r1, #0]
 80169b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169b6:	f01e 0f10 	tst.w	lr, #16
 80169ba:	bf08      	it	eq
 80169bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80169c0:	f380 8809 	msr	PSP, r0
 80169c4:	f3bf 8f6f 	isb	sy
 80169c8:	4770      	bx	lr
 80169ca:	bf00      	nop
 80169cc:	f3af 8000 	nop.w

080169d0 <pxCurrentTCBConst>:
 80169d0:	24002ad8 	.word	0x24002ad8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80169d4:	bf00      	nop
 80169d6:	bf00      	nop

080169d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80169d8:	b580      	push	{r7, lr}
 80169da:	b082      	sub	sp, #8
 80169dc:	af00      	add	r7, sp, #0
	__asm volatile
 80169de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80169e2:	f383 8811 	msr	BASEPRI, r3
 80169e6:	f3bf 8f6f 	isb	sy
 80169ea:	f3bf 8f4f 	dsb	sy
 80169ee:	607b      	str	r3, [r7, #4]
}
 80169f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80169f2:	f7ff f911 	bl	8015c18 <xTaskIncrementTick>
 80169f6:	4603      	mov	r3, r0
 80169f8:	2b00      	cmp	r3, #0
 80169fa:	d003      	beq.n	8016a04 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80169fc:	4b06      	ldr	r3, [pc, #24]	@ (8016a18 <SysTick_Handler+0x40>)
 80169fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016a02:	601a      	str	r2, [r3, #0]
 8016a04:	2300      	movs	r3, #0
 8016a06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016a08:	683b      	ldr	r3, [r7, #0]
 8016a0a:	f383 8811 	msr	BASEPRI, r3
}
 8016a0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8016a10:	bf00      	nop
 8016a12:	3708      	adds	r7, #8
 8016a14:	46bd      	mov	sp, r7
 8016a16:	bd80      	pop	{r7, pc}
 8016a18:	e000ed04 	.word	0xe000ed04

08016a1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8016a1c:	b480      	push	{r7}
 8016a1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8016a20:	4b0b      	ldr	r3, [pc, #44]	@ (8016a50 <vPortSetupTimerInterrupt+0x34>)
 8016a22:	2200      	movs	r2, #0
 8016a24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8016a26:	4b0b      	ldr	r3, [pc, #44]	@ (8016a54 <vPortSetupTimerInterrupt+0x38>)
 8016a28:	2200      	movs	r2, #0
 8016a2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8016a2c:	4b0a      	ldr	r3, [pc, #40]	@ (8016a58 <vPortSetupTimerInterrupt+0x3c>)
 8016a2e:	681b      	ldr	r3, [r3, #0]
 8016a30:	4a0a      	ldr	r2, [pc, #40]	@ (8016a5c <vPortSetupTimerInterrupt+0x40>)
 8016a32:	fba2 2303 	umull	r2, r3, r2, r3
 8016a36:	099b      	lsrs	r3, r3, #6
 8016a38:	4a09      	ldr	r2, [pc, #36]	@ (8016a60 <vPortSetupTimerInterrupt+0x44>)
 8016a3a:	3b01      	subs	r3, #1
 8016a3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8016a3e:	4b04      	ldr	r3, [pc, #16]	@ (8016a50 <vPortSetupTimerInterrupt+0x34>)
 8016a40:	2207      	movs	r2, #7
 8016a42:	601a      	str	r2, [r3, #0]
}
 8016a44:	bf00      	nop
 8016a46:	46bd      	mov	sp, r7
 8016a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a4c:	4770      	bx	lr
 8016a4e:	bf00      	nop
 8016a50:	e000e010 	.word	0xe000e010
 8016a54:	e000e018 	.word	0xe000e018
 8016a58:	24000000 	.word	0x24000000
 8016a5c:	10624dd3 	.word	0x10624dd3
 8016a60:	e000e014 	.word	0xe000e014

08016a64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8016a64:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8016a74 <vPortEnableVFP+0x10>
 8016a68:	6801      	ldr	r1, [r0, #0]
 8016a6a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8016a6e:	6001      	str	r1, [r0, #0]
 8016a70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8016a72:	bf00      	nop
 8016a74:	e000ed88 	.word	0xe000ed88

08016a78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8016a78:	b480      	push	{r7}
 8016a7a:	b085      	sub	sp, #20
 8016a7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8016a7e:	f3ef 8305 	mrs	r3, IPSR
 8016a82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8016a84:	68fb      	ldr	r3, [r7, #12]
 8016a86:	2b0f      	cmp	r3, #15
 8016a88:	d915      	bls.n	8016ab6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8016a8a:	4a18      	ldr	r2, [pc, #96]	@ (8016aec <vPortValidateInterruptPriority+0x74>)
 8016a8c:	68fb      	ldr	r3, [r7, #12]
 8016a8e:	4413      	add	r3, r2
 8016a90:	781b      	ldrb	r3, [r3, #0]
 8016a92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8016a94:	4b16      	ldr	r3, [pc, #88]	@ (8016af0 <vPortValidateInterruptPriority+0x78>)
 8016a96:	781b      	ldrb	r3, [r3, #0]
 8016a98:	7afa      	ldrb	r2, [r7, #11]
 8016a9a:	429a      	cmp	r2, r3
 8016a9c:	d20b      	bcs.n	8016ab6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8016a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016aa2:	f383 8811 	msr	BASEPRI, r3
 8016aa6:	f3bf 8f6f 	isb	sy
 8016aaa:	f3bf 8f4f 	dsb	sy
 8016aae:	607b      	str	r3, [r7, #4]
}
 8016ab0:	bf00      	nop
 8016ab2:	bf00      	nop
 8016ab4:	e7fd      	b.n	8016ab2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8016ab6:	4b0f      	ldr	r3, [pc, #60]	@ (8016af4 <vPortValidateInterruptPriority+0x7c>)
 8016ab8:	681b      	ldr	r3, [r3, #0]
 8016aba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8016abe:	4b0e      	ldr	r3, [pc, #56]	@ (8016af8 <vPortValidateInterruptPriority+0x80>)
 8016ac0:	681b      	ldr	r3, [r3, #0]
 8016ac2:	429a      	cmp	r2, r3
 8016ac4:	d90b      	bls.n	8016ade <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8016ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016aca:	f383 8811 	msr	BASEPRI, r3
 8016ace:	f3bf 8f6f 	isb	sy
 8016ad2:	f3bf 8f4f 	dsb	sy
 8016ad6:	603b      	str	r3, [r7, #0]
}
 8016ad8:	bf00      	nop
 8016ada:	bf00      	nop
 8016adc:	e7fd      	b.n	8016ada <vPortValidateInterruptPriority+0x62>
	}
 8016ade:	bf00      	nop
 8016ae0:	3714      	adds	r7, #20
 8016ae2:	46bd      	mov	sp, r7
 8016ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ae8:	4770      	bx	lr
 8016aea:	bf00      	nop
 8016aec:	e000e3f0 	.word	0xe000e3f0
 8016af0:	24002c04 	.word	0x24002c04
 8016af4:	e000ed0c 	.word	0xe000ed0c
 8016af8:	24002c08 	.word	0x24002c08

08016afc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8016afc:	b580      	push	{r7, lr}
 8016afe:	b08a      	sub	sp, #40	@ 0x28
 8016b00:	af00      	add	r7, sp, #0
 8016b02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8016b04:	2300      	movs	r3, #0
 8016b06:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8016b08:	f7fe ffda 	bl	8015ac0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8016b0c:	4b5c      	ldr	r3, [pc, #368]	@ (8016c80 <pvPortMalloc+0x184>)
 8016b0e:	681b      	ldr	r3, [r3, #0]
 8016b10:	2b00      	cmp	r3, #0
 8016b12:	d101      	bne.n	8016b18 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8016b14:	f000 f924 	bl	8016d60 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8016b18:	4b5a      	ldr	r3, [pc, #360]	@ (8016c84 <pvPortMalloc+0x188>)
 8016b1a:	681a      	ldr	r2, [r3, #0]
 8016b1c:	687b      	ldr	r3, [r7, #4]
 8016b1e:	4013      	ands	r3, r2
 8016b20:	2b00      	cmp	r3, #0
 8016b22:	f040 8095 	bne.w	8016c50 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8016b26:	687b      	ldr	r3, [r7, #4]
 8016b28:	2b00      	cmp	r3, #0
 8016b2a:	d01e      	beq.n	8016b6a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8016b2c:	2208      	movs	r2, #8
 8016b2e:	687b      	ldr	r3, [r7, #4]
 8016b30:	4413      	add	r3, r2
 8016b32:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8016b34:	687b      	ldr	r3, [r7, #4]
 8016b36:	f003 0307 	and.w	r3, r3, #7
 8016b3a:	2b00      	cmp	r3, #0
 8016b3c:	d015      	beq.n	8016b6a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8016b3e:	687b      	ldr	r3, [r7, #4]
 8016b40:	f023 0307 	bic.w	r3, r3, #7
 8016b44:	3308      	adds	r3, #8
 8016b46:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016b48:	687b      	ldr	r3, [r7, #4]
 8016b4a:	f003 0307 	and.w	r3, r3, #7
 8016b4e:	2b00      	cmp	r3, #0
 8016b50:	d00b      	beq.n	8016b6a <pvPortMalloc+0x6e>
	__asm volatile
 8016b52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016b56:	f383 8811 	msr	BASEPRI, r3
 8016b5a:	f3bf 8f6f 	isb	sy
 8016b5e:	f3bf 8f4f 	dsb	sy
 8016b62:	617b      	str	r3, [r7, #20]
}
 8016b64:	bf00      	nop
 8016b66:	bf00      	nop
 8016b68:	e7fd      	b.n	8016b66 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8016b6a:	687b      	ldr	r3, [r7, #4]
 8016b6c:	2b00      	cmp	r3, #0
 8016b6e:	d06f      	beq.n	8016c50 <pvPortMalloc+0x154>
 8016b70:	4b45      	ldr	r3, [pc, #276]	@ (8016c88 <pvPortMalloc+0x18c>)
 8016b72:	681b      	ldr	r3, [r3, #0]
 8016b74:	687a      	ldr	r2, [r7, #4]
 8016b76:	429a      	cmp	r2, r3
 8016b78:	d86a      	bhi.n	8016c50 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8016b7a:	4b44      	ldr	r3, [pc, #272]	@ (8016c8c <pvPortMalloc+0x190>)
 8016b7c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8016b7e:	4b43      	ldr	r3, [pc, #268]	@ (8016c8c <pvPortMalloc+0x190>)
 8016b80:	681b      	ldr	r3, [r3, #0]
 8016b82:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016b84:	e004      	b.n	8016b90 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8016b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b88:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8016b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b8c:	681b      	ldr	r3, [r3, #0]
 8016b8e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b92:	685b      	ldr	r3, [r3, #4]
 8016b94:	687a      	ldr	r2, [r7, #4]
 8016b96:	429a      	cmp	r2, r3
 8016b98:	d903      	bls.n	8016ba2 <pvPortMalloc+0xa6>
 8016b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b9c:	681b      	ldr	r3, [r3, #0]
 8016b9e:	2b00      	cmp	r3, #0
 8016ba0:	d1f1      	bne.n	8016b86 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8016ba2:	4b37      	ldr	r3, [pc, #220]	@ (8016c80 <pvPortMalloc+0x184>)
 8016ba4:	681b      	ldr	r3, [r3, #0]
 8016ba6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016ba8:	429a      	cmp	r2, r3
 8016baa:	d051      	beq.n	8016c50 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8016bac:	6a3b      	ldr	r3, [r7, #32]
 8016bae:	681b      	ldr	r3, [r3, #0]
 8016bb0:	2208      	movs	r2, #8
 8016bb2:	4413      	add	r3, r2
 8016bb4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8016bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016bb8:	681a      	ldr	r2, [r3, #0]
 8016bba:	6a3b      	ldr	r3, [r7, #32]
 8016bbc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8016bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016bc0:	685a      	ldr	r2, [r3, #4]
 8016bc2:	687b      	ldr	r3, [r7, #4]
 8016bc4:	1ad2      	subs	r2, r2, r3
 8016bc6:	2308      	movs	r3, #8
 8016bc8:	005b      	lsls	r3, r3, #1
 8016bca:	429a      	cmp	r2, r3
 8016bcc:	d920      	bls.n	8016c10 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8016bce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016bd0:	687b      	ldr	r3, [r7, #4]
 8016bd2:	4413      	add	r3, r2
 8016bd4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016bd6:	69bb      	ldr	r3, [r7, #24]
 8016bd8:	f003 0307 	and.w	r3, r3, #7
 8016bdc:	2b00      	cmp	r3, #0
 8016bde:	d00b      	beq.n	8016bf8 <pvPortMalloc+0xfc>
	__asm volatile
 8016be0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016be4:	f383 8811 	msr	BASEPRI, r3
 8016be8:	f3bf 8f6f 	isb	sy
 8016bec:	f3bf 8f4f 	dsb	sy
 8016bf0:	613b      	str	r3, [r7, #16]
}
 8016bf2:	bf00      	nop
 8016bf4:	bf00      	nop
 8016bf6:	e7fd      	b.n	8016bf4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8016bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016bfa:	685a      	ldr	r2, [r3, #4]
 8016bfc:	687b      	ldr	r3, [r7, #4]
 8016bfe:	1ad2      	subs	r2, r2, r3
 8016c00:	69bb      	ldr	r3, [r7, #24]
 8016c02:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8016c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c06:	687a      	ldr	r2, [r7, #4]
 8016c08:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8016c0a:	69b8      	ldr	r0, [r7, #24]
 8016c0c:	f000 f90a 	bl	8016e24 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8016c10:	4b1d      	ldr	r3, [pc, #116]	@ (8016c88 <pvPortMalloc+0x18c>)
 8016c12:	681a      	ldr	r2, [r3, #0]
 8016c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c16:	685b      	ldr	r3, [r3, #4]
 8016c18:	1ad3      	subs	r3, r2, r3
 8016c1a:	4a1b      	ldr	r2, [pc, #108]	@ (8016c88 <pvPortMalloc+0x18c>)
 8016c1c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8016c1e:	4b1a      	ldr	r3, [pc, #104]	@ (8016c88 <pvPortMalloc+0x18c>)
 8016c20:	681a      	ldr	r2, [r3, #0]
 8016c22:	4b1b      	ldr	r3, [pc, #108]	@ (8016c90 <pvPortMalloc+0x194>)
 8016c24:	681b      	ldr	r3, [r3, #0]
 8016c26:	429a      	cmp	r2, r3
 8016c28:	d203      	bcs.n	8016c32 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8016c2a:	4b17      	ldr	r3, [pc, #92]	@ (8016c88 <pvPortMalloc+0x18c>)
 8016c2c:	681b      	ldr	r3, [r3, #0]
 8016c2e:	4a18      	ldr	r2, [pc, #96]	@ (8016c90 <pvPortMalloc+0x194>)
 8016c30:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8016c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c34:	685a      	ldr	r2, [r3, #4]
 8016c36:	4b13      	ldr	r3, [pc, #76]	@ (8016c84 <pvPortMalloc+0x188>)
 8016c38:	681b      	ldr	r3, [r3, #0]
 8016c3a:	431a      	orrs	r2, r3
 8016c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c3e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8016c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c42:	2200      	movs	r2, #0
 8016c44:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8016c46:	4b13      	ldr	r3, [pc, #76]	@ (8016c94 <pvPortMalloc+0x198>)
 8016c48:	681b      	ldr	r3, [r3, #0]
 8016c4a:	3301      	adds	r3, #1
 8016c4c:	4a11      	ldr	r2, [pc, #68]	@ (8016c94 <pvPortMalloc+0x198>)
 8016c4e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8016c50:	f7fe ff44 	bl	8015adc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8016c54:	69fb      	ldr	r3, [r7, #28]
 8016c56:	f003 0307 	and.w	r3, r3, #7
 8016c5a:	2b00      	cmp	r3, #0
 8016c5c:	d00b      	beq.n	8016c76 <pvPortMalloc+0x17a>
	__asm volatile
 8016c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016c62:	f383 8811 	msr	BASEPRI, r3
 8016c66:	f3bf 8f6f 	isb	sy
 8016c6a:	f3bf 8f4f 	dsb	sy
 8016c6e:	60fb      	str	r3, [r7, #12]
}
 8016c70:	bf00      	nop
 8016c72:	bf00      	nop
 8016c74:	e7fd      	b.n	8016c72 <pvPortMalloc+0x176>
	return pvReturn;
 8016c76:	69fb      	ldr	r3, [r7, #28]
}
 8016c78:	4618      	mov	r0, r3
 8016c7a:	3728      	adds	r7, #40	@ 0x28
 8016c7c:	46bd      	mov	sp, r7
 8016c7e:	bd80      	pop	{r7, pc}
 8016c80:	24006814 	.word	0x24006814
 8016c84:	24006828 	.word	0x24006828
 8016c88:	24006818 	.word	0x24006818
 8016c8c:	2400680c 	.word	0x2400680c
 8016c90:	2400681c 	.word	0x2400681c
 8016c94:	24006820 	.word	0x24006820

08016c98 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8016c98:	b580      	push	{r7, lr}
 8016c9a:	b086      	sub	sp, #24
 8016c9c:	af00      	add	r7, sp, #0
 8016c9e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8016ca0:	687b      	ldr	r3, [r7, #4]
 8016ca2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8016ca4:	687b      	ldr	r3, [r7, #4]
 8016ca6:	2b00      	cmp	r3, #0
 8016ca8:	d04f      	beq.n	8016d4a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8016caa:	2308      	movs	r3, #8
 8016cac:	425b      	negs	r3, r3
 8016cae:	697a      	ldr	r2, [r7, #20]
 8016cb0:	4413      	add	r3, r2
 8016cb2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8016cb4:	697b      	ldr	r3, [r7, #20]
 8016cb6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8016cb8:	693b      	ldr	r3, [r7, #16]
 8016cba:	685a      	ldr	r2, [r3, #4]
 8016cbc:	4b25      	ldr	r3, [pc, #148]	@ (8016d54 <vPortFree+0xbc>)
 8016cbe:	681b      	ldr	r3, [r3, #0]
 8016cc0:	4013      	ands	r3, r2
 8016cc2:	2b00      	cmp	r3, #0
 8016cc4:	d10b      	bne.n	8016cde <vPortFree+0x46>
	__asm volatile
 8016cc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016cca:	f383 8811 	msr	BASEPRI, r3
 8016cce:	f3bf 8f6f 	isb	sy
 8016cd2:	f3bf 8f4f 	dsb	sy
 8016cd6:	60fb      	str	r3, [r7, #12]
}
 8016cd8:	bf00      	nop
 8016cda:	bf00      	nop
 8016cdc:	e7fd      	b.n	8016cda <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8016cde:	693b      	ldr	r3, [r7, #16]
 8016ce0:	681b      	ldr	r3, [r3, #0]
 8016ce2:	2b00      	cmp	r3, #0
 8016ce4:	d00b      	beq.n	8016cfe <vPortFree+0x66>
	__asm volatile
 8016ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016cea:	f383 8811 	msr	BASEPRI, r3
 8016cee:	f3bf 8f6f 	isb	sy
 8016cf2:	f3bf 8f4f 	dsb	sy
 8016cf6:	60bb      	str	r3, [r7, #8]
}
 8016cf8:	bf00      	nop
 8016cfa:	bf00      	nop
 8016cfc:	e7fd      	b.n	8016cfa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8016cfe:	693b      	ldr	r3, [r7, #16]
 8016d00:	685a      	ldr	r2, [r3, #4]
 8016d02:	4b14      	ldr	r3, [pc, #80]	@ (8016d54 <vPortFree+0xbc>)
 8016d04:	681b      	ldr	r3, [r3, #0]
 8016d06:	4013      	ands	r3, r2
 8016d08:	2b00      	cmp	r3, #0
 8016d0a:	d01e      	beq.n	8016d4a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8016d0c:	693b      	ldr	r3, [r7, #16]
 8016d0e:	681b      	ldr	r3, [r3, #0]
 8016d10:	2b00      	cmp	r3, #0
 8016d12:	d11a      	bne.n	8016d4a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016d14:	693b      	ldr	r3, [r7, #16]
 8016d16:	685a      	ldr	r2, [r3, #4]
 8016d18:	4b0e      	ldr	r3, [pc, #56]	@ (8016d54 <vPortFree+0xbc>)
 8016d1a:	681b      	ldr	r3, [r3, #0]
 8016d1c:	43db      	mvns	r3, r3
 8016d1e:	401a      	ands	r2, r3
 8016d20:	693b      	ldr	r3, [r7, #16]
 8016d22:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8016d24:	f7fe fecc 	bl	8015ac0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8016d28:	693b      	ldr	r3, [r7, #16]
 8016d2a:	685a      	ldr	r2, [r3, #4]
 8016d2c:	4b0a      	ldr	r3, [pc, #40]	@ (8016d58 <vPortFree+0xc0>)
 8016d2e:	681b      	ldr	r3, [r3, #0]
 8016d30:	4413      	add	r3, r2
 8016d32:	4a09      	ldr	r2, [pc, #36]	@ (8016d58 <vPortFree+0xc0>)
 8016d34:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8016d36:	6938      	ldr	r0, [r7, #16]
 8016d38:	f000 f874 	bl	8016e24 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8016d3c:	4b07      	ldr	r3, [pc, #28]	@ (8016d5c <vPortFree+0xc4>)
 8016d3e:	681b      	ldr	r3, [r3, #0]
 8016d40:	3301      	adds	r3, #1
 8016d42:	4a06      	ldr	r2, [pc, #24]	@ (8016d5c <vPortFree+0xc4>)
 8016d44:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8016d46:	f7fe fec9 	bl	8015adc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8016d4a:	bf00      	nop
 8016d4c:	3718      	adds	r7, #24
 8016d4e:	46bd      	mov	sp, r7
 8016d50:	bd80      	pop	{r7, pc}
 8016d52:	bf00      	nop
 8016d54:	24006828 	.word	0x24006828
 8016d58:	24006818 	.word	0x24006818
 8016d5c:	24006824 	.word	0x24006824

08016d60 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8016d60:	b480      	push	{r7}
 8016d62:	b085      	sub	sp, #20
 8016d64:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8016d66:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8016d6a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8016d6c:	4b27      	ldr	r3, [pc, #156]	@ (8016e0c <prvHeapInit+0xac>)
 8016d6e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8016d70:	68fb      	ldr	r3, [r7, #12]
 8016d72:	f003 0307 	and.w	r3, r3, #7
 8016d76:	2b00      	cmp	r3, #0
 8016d78:	d00c      	beq.n	8016d94 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8016d7a:	68fb      	ldr	r3, [r7, #12]
 8016d7c:	3307      	adds	r3, #7
 8016d7e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016d80:	68fb      	ldr	r3, [r7, #12]
 8016d82:	f023 0307 	bic.w	r3, r3, #7
 8016d86:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8016d88:	68ba      	ldr	r2, [r7, #8]
 8016d8a:	68fb      	ldr	r3, [r7, #12]
 8016d8c:	1ad3      	subs	r3, r2, r3
 8016d8e:	4a1f      	ldr	r2, [pc, #124]	@ (8016e0c <prvHeapInit+0xac>)
 8016d90:	4413      	add	r3, r2
 8016d92:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016d94:	68fb      	ldr	r3, [r7, #12]
 8016d96:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8016d98:	4a1d      	ldr	r2, [pc, #116]	@ (8016e10 <prvHeapInit+0xb0>)
 8016d9a:	687b      	ldr	r3, [r7, #4]
 8016d9c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8016d9e:	4b1c      	ldr	r3, [pc, #112]	@ (8016e10 <prvHeapInit+0xb0>)
 8016da0:	2200      	movs	r2, #0
 8016da2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016da4:	687b      	ldr	r3, [r7, #4]
 8016da6:	68ba      	ldr	r2, [r7, #8]
 8016da8:	4413      	add	r3, r2
 8016daa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8016dac:	2208      	movs	r2, #8
 8016dae:	68fb      	ldr	r3, [r7, #12]
 8016db0:	1a9b      	subs	r3, r3, r2
 8016db2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016db4:	68fb      	ldr	r3, [r7, #12]
 8016db6:	f023 0307 	bic.w	r3, r3, #7
 8016dba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8016dbc:	68fb      	ldr	r3, [r7, #12]
 8016dbe:	4a15      	ldr	r2, [pc, #84]	@ (8016e14 <prvHeapInit+0xb4>)
 8016dc0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8016dc2:	4b14      	ldr	r3, [pc, #80]	@ (8016e14 <prvHeapInit+0xb4>)
 8016dc4:	681b      	ldr	r3, [r3, #0]
 8016dc6:	2200      	movs	r2, #0
 8016dc8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8016dca:	4b12      	ldr	r3, [pc, #72]	@ (8016e14 <prvHeapInit+0xb4>)
 8016dcc:	681b      	ldr	r3, [r3, #0]
 8016dce:	2200      	movs	r2, #0
 8016dd0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8016dd2:	687b      	ldr	r3, [r7, #4]
 8016dd4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8016dd6:	683b      	ldr	r3, [r7, #0]
 8016dd8:	68fa      	ldr	r2, [r7, #12]
 8016dda:	1ad2      	subs	r2, r2, r3
 8016ddc:	683b      	ldr	r3, [r7, #0]
 8016dde:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8016de0:	4b0c      	ldr	r3, [pc, #48]	@ (8016e14 <prvHeapInit+0xb4>)
 8016de2:	681a      	ldr	r2, [r3, #0]
 8016de4:	683b      	ldr	r3, [r7, #0]
 8016de6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016de8:	683b      	ldr	r3, [r7, #0]
 8016dea:	685b      	ldr	r3, [r3, #4]
 8016dec:	4a0a      	ldr	r2, [pc, #40]	@ (8016e18 <prvHeapInit+0xb8>)
 8016dee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016df0:	683b      	ldr	r3, [r7, #0]
 8016df2:	685b      	ldr	r3, [r3, #4]
 8016df4:	4a09      	ldr	r2, [pc, #36]	@ (8016e1c <prvHeapInit+0xbc>)
 8016df6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8016df8:	4b09      	ldr	r3, [pc, #36]	@ (8016e20 <prvHeapInit+0xc0>)
 8016dfa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8016dfe:	601a      	str	r2, [r3, #0]
}
 8016e00:	bf00      	nop
 8016e02:	3714      	adds	r7, #20
 8016e04:	46bd      	mov	sp, r7
 8016e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e0a:	4770      	bx	lr
 8016e0c:	24002c0c 	.word	0x24002c0c
 8016e10:	2400680c 	.word	0x2400680c
 8016e14:	24006814 	.word	0x24006814
 8016e18:	2400681c 	.word	0x2400681c
 8016e1c:	24006818 	.word	0x24006818
 8016e20:	24006828 	.word	0x24006828

08016e24 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8016e24:	b480      	push	{r7}
 8016e26:	b085      	sub	sp, #20
 8016e28:	af00      	add	r7, sp, #0
 8016e2a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8016e2c:	4b28      	ldr	r3, [pc, #160]	@ (8016ed0 <prvInsertBlockIntoFreeList+0xac>)
 8016e2e:	60fb      	str	r3, [r7, #12]
 8016e30:	e002      	b.n	8016e38 <prvInsertBlockIntoFreeList+0x14>
 8016e32:	68fb      	ldr	r3, [r7, #12]
 8016e34:	681b      	ldr	r3, [r3, #0]
 8016e36:	60fb      	str	r3, [r7, #12]
 8016e38:	68fb      	ldr	r3, [r7, #12]
 8016e3a:	681b      	ldr	r3, [r3, #0]
 8016e3c:	687a      	ldr	r2, [r7, #4]
 8016e3e:	429a      	cmp	r2, r3
 8016e40:	d8f7      	bhi.n	8016e32 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8016e42:	68fb      	ldr	r3, [r7, #12]
 8016e44:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8016e46:	68fb      	ldr	r3, [r7, #12]
 8016e48:	685b      	ldr	r3, [r3, #4]
 8016e4a:	68ba      	ldr	r2, [r7, #8]
 8016e4c:	4413      	add	r3, r2
 8016e4e:	687a      	ldr	r2, [r7, #4]
 8016e50:	429a      	cmp	r2, r3
 8016e52:	d108      	bne.n	8016e66 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8016e54:	68fb      	ldr	r3, [r7, #12]
 8016e56:	685a      	ldr	r2, [r3, #4]
 8016e58:	687b      	ldr	r3, [r7, #4]
 8016e5a:	685b      	ldr	r3, [r3, #4]
 8016e5c:	441a      	add	r2, r3
 8016e5e:	68fb      	ldr	r3, [r7, #12]
 8016e60:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8016e62:	68fb      	ldr	r3, [r7, #12]
 8016e64:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8016e66:	687b      	ldr	r3, [r7, #4]
 8016e68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8016e6a:	687b      	ldr	r3, [r7, #4]
 8016e6c:	685b      	ldr	r3, [r3, #4]
 8016e6e:	68ba      	ldr	r2, [r7, #8]
 8016e70:	441a      	add	r2, r3
 8016e72:	68fb      	ldr	r3, [r7, #12]
 8016e74:	681b      	ldr	r3, [r3, #0]
 8016e76:	429a      	cmp	r2, r3
 8016e78:	d118      	bne.n	8016eac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8016e7a:	68fb      	ldr	r3, [r7, #12]
 8016e7c:	681a      	ldr	r2, [r3, #0]
 8016e7e:	4b15      	ldr	r3, [pc, #84]	@ (8016ed4 <prvInsertBlockIntoFreeList+0xb0>)
 8016e80:	681b      	ldr	r3, [r3, #0]
 8016e82:	429a      	cmp	r2, r3
 8016e84:	d00d      	beq.n	8016ea2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8016e86:	687b      	ldr	r3, [r7, #4]
 8016e88:	685a      	ldr	r2, [r3, #4]
 8016e8a:	68fb      	ldr	r3, [r7, #12]
 8016e8c:	681b      	ldr	r3, [r3, #0]
 8016e8e:	685b      	ldr	r3, [r3, #4]
 8016e90:	441a      	add	r2, r3
 8016e92:	687b      	ldr	r3, [r7, #4]
 8016e94:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8016e96:	68fb      	ldr	r3, [r7, #12]
 8016e98:	681b      	ldr	r3, [r3, #0]
 8016e9a:	681a      	ldr	r2, [r3, #0]
 8016e9c:	687b      	ldr	r3, [r7, #4]
 8016e9e:	601a      	str	r2, [r3, #0]
 8016ea0:	e008      	b.n	8016eb4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8016ea2:	4b0c      	ldr	r3, [pc, #48]	@ (8016ed4 <prvInsertBlockIntoFreeList+0xb0>)
 8016ea4:	681a      	ldr	r2, [r3, #0]
 8016ea6:	687b      	ldr	r3, [r7, #4]
 8016ea8:	601a      	str	r2, [r3, #0]
 8016eaa:	e003      	b.n	8016eb4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8016eac:	68fb      	ldr	r3, [r7, #12]
 8016eae:	681a      	ldr	r2, [r3, #0]
 8016eb0:	687b      	ldr	r3, [r7, #4]
 8016eb2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8016eb4:	68fa      	ldr	r2, [r7, #12]
 8016eb6:	687b      	ldr	r3, [r7, #4]
 8016eb8:	429a      	cmp	r2, r3
 8016eba:	d002      	beq.n	8016ec2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8016ebc:	68fb      	ldr	r3, [r7, #12]
 8016ebe:	687a      	ldr	r2, [r7, #4]
 8016ec0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016ec2:	bf00      	nop
 8016ec4:	3714      	adds	r7, #20
 8016ec6:	46bd      	mov	sp, r7
 8016ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ecc:	4770      	bx	lr
 8016ece:	bf00      	nop
 8016ed0:	2400680c 	.word	0x2400680c
 8016ed4:	24006814 	.word	0x24006814

08016ed8 <atof>:
 8016ed8:	2100      	movs	r1, #0
 8016eda:	f000 bdb7 	b.w	8017a4c <strtod>

08016ede <atoi>:
 8016ede:	220a      	movs	r2, #10
 8016ee0:	2100      	movs	r1, #0
 8016ee2:	f000 be39 	b.w	8017b58 <strtol>

08016ee6 <sulp>:
 8016ee6:	b570      	push	{r4, r5, r6, lr}
 8016ee8:	4604      	mov	r4, r0
 8016eea:	460d      	mov	r5, r1
 8016eec:	4616      	mov	r6, r2
 8016eee:	ec45 4b10 	vmov	d0, r4, r5
 8016ef2:	f001 ffa9 	bl	8018e48 <__ulp>
 8016ef6:	b17e      	cbz	r6, 8016f18 <sulp+0x32>
 8016ef8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8016efc:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8016f00:	2b00      	cmp	r3, #0
 8016f02:	dd09      	ble.n	8016f18 <sulp+0x32>
 8016f04:	051b      	lsls	r3, r3, #20
 8016f06:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8016f0a:	2000      	movs	r0, #0
 8016f0c:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8016f10:	ec41 0b17 	vmov	d7, r0, r1
 8016f14:	ee20 0b07 	vmul.f64	d0, d0, d7
 8016f18:	bd70      	pop	{r4, r5, r6, pc}
 8016f1a:	0000      	movs	r0, r0
 8016f1c:	0000      	movs	r0, r0
	...

08016f20 <_strtod_l>:
 8016f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f24:	ed2d 8b0a 	vpush	{d8-d12}
 8016f28:	b097      	sub	sp, #92	@ 0x5c
 8016f2a:	4688      	mov	r8, r1
 8016f2c:	920e      	str	r2, [sp, #56]	@ 0x38
 8016f2e:	2200      	movs	r2, #0
 8016f30:	9212      	str	r2, [sp, #72]	@ 0x48
 8016f32:	9005      	str	r0, [sp, #20]
 8016f34:	f04f 0a00 	mov.w	sl, #0
 8016f38:	f04f 0b00 	mov.w	fp, #0
 8016f3c:	460a      	mov	r2, r1
 8016f3e:	9211      	str	r2, [sp, #68]	@ 0x44
 8016f40:	7811      	ldrb	r1, [r2, #0]
 8016f42:	292b      	cmp	r1, #43	@ 0x2b
 8016f44:	d04c      	beq.n	8016fe0 <_strtod_l+0xc0>
 8016f46:	d839      	bhi.n	8016fbc <_strtod_l+0x9c>
 8016f48:	290d      	cmp	r1, #13
 8016f4a:	d833      	bhi.n	8016fb4 <_strtod_l+0x94>
 8016f4c:	2908      	cmp	r1, #8
 8016f4e:	d833      	bhi.n	8016fb8 <_strtod_l+0x98>
 8016f50:	2900      	cmp	r1, #0
 8016f52:	d03c      	beq.n	8016fce <_strtod_l+0xae>
 8016f54:	2200      	movs	r2, #0
 8016f56:	9208      	str	r2, [sp, #32]
 8016f58:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8016f5a:	782a      	ldrb	r2, [r5, #0]
 8016f5c:	2a30      	cmp	r2, #48	@ 0x30
 8016f5e:	f040 80b5 	bne.w	80170cc <_strtod_l+0x1ac>
 8016f62:	786a      	ldrb	r2, [r5, #1]
 8016f64:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8016f68:	2a58      	cmp	r2, #88	@ 0x58
 8016f6a:	d170      	bne.n	801704e <_strtod_l+0x12e>
 8016f6c:	9302      	str	r3, [sp, #8]
 8016f6e:	9b08      	ldr	r3, [sp, #32]
 8016f70:	9301      	str	r3, [sp, #4]
 8016f72:	ab12      	add	r3, sp, #72	@ 0x48
 8016f74:	9300      	str	r3, [sp, #0]
 8016f76:	4a8b      	ldr	r2, [pc, #556]	@ (80171a4 <_strtod_l+0x284>)
 8016f78:	9805      	ldr	r0, [sp, #20]
 8016f7a:	ab13      	add	r3, sp, #76	@ 0x4c
 8016f7c:	a911      	add	r1, sp, #68	@ 0x44
 8016f7e:	f001 f85d 	bl	801803c <__gethex>
 8016f82:	f010 060f 	ands.w	r6, r0, #15
 8016f86:	4604      	mov	r4, r0
 8016f88:	d005      	beq.n	8016f96 <_strtod_l+0x76>
 8016f8a:	2e06      	cmp	r6, #6
 8016f8c:	d12a      	bne.n	8016fe4 <_strtod_l+0xc4>
 8016f8e:	3501      	adds	r5, #1
 8016f90:	2300      	movs	r3, #0
 8016f92:	9511      	str	r5, [sp, #68]	@ 0x44
 8016f94:	9308      	str	r3, [sp, #32]
 8016f96:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016f98:	2b00      	cmp	r3, #0
 8016f9a:	f040 852f 	bne.w	80179fc <_strtod_l+0xadc>
 8016f9e:	9b08      	ldr	r3, [sp, #32]
 8016fa0:	ec4b ab10 	vmov	d0, sl, fp
 8016fa4:	b1cb      	cbz	r3, 8016fda <_strtod_l+0xba>
 8016fa6:	eeb1 0b40 	vneg.f64	d0, d0
 8016faa:	b017      	add	sp, #92	@ 0x5c
 8016fac:	ecbd 8b0a 	vpop	{d8-d12}
 8016fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016fb4:	2920      	cmp	r1, #32
 8016fb6:	d1cd      	bne.n	8016f54 <_strtod_l+0x34>
 8016fb8:	3201      	adds	r2, #1
 8016fba:	e7c0      	b.n	8016f3e <_strtod_l+0x1e>
 8016fbc:	292d      	cmp	r1, #45	@ 0x2d
 8016fbe:	d1c9      	bne.n	8016f54 <_strtod_l+0x34>
 8016fc0:	2101      	movs	r1, #1
 8016fc2:	9108      	str	r1, [sp, #32]
 8016fc4:	1c51      	adds	r1, r2, #1
 8016fc6:	9111      	str	r1, [sp, #68]	@ 0x44
 8016fc8:	7852      	ldrb	r2, [r2, #1]
 8016fca:	2a00      	cmp	r2, #0
 8016fcc:	d1c4      	bne.n	8016f58 <_strtod_l+0x38>
 8016fce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016fd0:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8016fd4:	2b00      	cmp	r3, #0
 8016fd6:	f040 850f 	bne.w	80179f8 <_strtod_l+0xad8>
 8016fda:	ec4b ab10 	vmov	d0, sl, fp
 8016fde:	e7e4      	b.n	8016faa <_strtod_l+0x8a>
 8016fe0:	2100      	movs	r1, #0
 8016fe2:	e7ee      	b.n	8016fc2 <_strtod_l+0xa2>
 8016fe4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8016fe6:	b13a      	cbz	r2, 8016ff8 <_strtod_l+0xd8>
 8016fe8:	2135      	movs	r1, #53	@ 0x35
 8016fea:	a814      	add	r0, sp, #80	@ 0x50
 8016fec:	f002 f823 	bl	8019036 <__copybits>
 8016ff0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8016ff2:	9805      	ldr	r0, [sp, #20]
 8016ff4:	f001 fbf4 	bl	80187e0 <_Bfree>
 8016ff8:	1e73      	subs	r3, r6, #1
 8016ffa:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8016ffc:	2b04      	cmp	r3, #4
 8016ffe:	d806      	bhi.n	801700e <_strtod_l+0xee>
 8017000:	e8df f003 	tbb	[pc, r3]
 8017004:	201d0314 	.word	0x201d0314
 8017008:	14          	.byte	0x14
 8017009:	00          	.byte	0x00
 801700a:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 801700e:	05e3      	lsls	r3, r4, #23
 8017010:	bf48      	it	mi
 8017012:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8017016:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801701a:	0d1b      	lsrs	r3, r3, #20
 801701c:	051b      	lsls	r3, r3, #20
 801701e:	2b00      	cmp	r3, #0
 8017020:	d1b9      	bne.n	8016f96 <_strtod_l+0x76>
 8017022:	f000 ff15 	bl	8017e50 <__errno>
 8017026:	2322      	movs	r3, #34	@ 0x22
 8017028:	6003      	str	r3, [r0, #0]
 801702a:	e7b4      	b.n	8016f96 <_strtod_l+0x76>
 801702c:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8017030:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8017034:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8017038:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801703c:	e7e7      	b.n	801700e <_strtod_l+0xee>
 801703e:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 80171ac <_strtod_l+0x28c>
 8017042:	e7e4      	b.n	801700e <_strtod_l+0xee>
 8017044:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8017048:	f04f 3aff 	mov.w	sl, #4294967295
 801704c:	e7df      	b.n	801700e <_strtod_l+0xee>
 801704e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8017050:	1c5a      	adds	r2, r3, #1
 8017052:	9211      	str	r2, [sp, #68]	@ 0x44
 8017054:	785b      	ldrb	r3, [r3, #1]
 8017056:	2b30      	cmp	r3, #48	@ 0x30
 8017058:	d0f9      	beq.n	801704e <_strtod_l+0x12e>
 801705a:	2b00      	cmp	r3, #0
 801705c:	d09b      	beq.n	8016f96 <_strtod_l+0x76>
 801705e:	2301      	movs	r3, #1
 8017060:	2600      	movs	r6, #0
 8017062:	9307      	str	r3, [sp, #28]
 8017064:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8017066:	930a      	str	r3, [sp, #40]	@ 0x28
 8017068:	46b1      	mov	r9, r6
 801706a:	4635      	mov	r5, r6
 801706c:	220a      	movs	r2, #10
 801706e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8017070:	7804      	ldrb	r4, [r0, #0]
 8017072:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8017076:	b2d9      	uxtb	r1, r3
 8017078:	2909      	cmp	r1, #9
 801707a:	d929      	bls.n	80170d0 <_strtod_l+0x1b0>
 801707c:	494a      	ldr	r1, [pc, #296]	@ (80171a8 <_strtod_l+0x288>)
 801707e:	2201      	movs	r2, #1
 8017080:	f000 fe8e 	bl	8017da0 <strncmp>
 8017084:	b378      	cbz	r0, 80170e6 <_strtod_l+0x1c6>
 8017086:	2000      	movs	r0, #0
 8017088:	4622      	mov	r2, r4
 801708a:	462b      	mov	r3, r5
 801708c:	4607      	mov	r7, r0
 801708e:	9006      	str	r0, [sp, #24]
 8017090:	2a65      	cmp	r2, #101	@ 0x65
 8017092:	d001      	beq.n	8017098 <_strtod_l+0x178>
 8017094:	2a45      	cmp	r2, #69	@ 0x45
 8017096:	d117      	bne.n	80170c8 <_strtod_l+0x1a8>
 8017098:	b91b      	cbnz	r3, 80170a2 <_strtod_l+0x182>
 801709a:	9b07      	ldr	r3, [sp, #28]
 801709c:	4303      	orrs	r3, r0
 801709e:	d096      	beq.n	8016fce <_strtod_l+0xae>
 80170a0:	2300      	movs	r3, #0
 80170a2:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 80170a6:	f108 0201 	add.w	r2, r8, #1
 80170aa:	9211      	str	r2, [sp, #68]	@ 0x44
 80170ac:	f898 2001 	ldrb.w	r2, [r8, #1]
 80170b0:	2a2b      	cmp	r2, #43	@ 0x2b
 80170b2:	d06b      	beq.n	801718c <_strtod_l+0x26c>
 80170b4:	2a2d      	cmp	r2, #45	@ 0x2d
 80170b6:	d071      	beq.n	801719c <_strtod_l+0x27c>
 80170b8:	f04f 0e00 	mov.w	lr, #0
 80170bc:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 80170c0:	2c09      	cmp	r4, #9
 80170c2:	d979      	bls.n	80171b8 <_strtod_l+0x298>
 80170c4:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 80170c8:	2400      	movs	r4, #0
 80170ca:	e094      	b.n	80171f6 <_strtod_l+0x2d6>
 80170cc:	2300      	movs	r3, #0
 80170ce:	e7c7      	b.n	8017060 <_strtod_l+0x140>
 80170d0:	2d08      	cmp	r5, #8
 80170d2:	f100 0001 	add.w	r0, r0, #1
 80170d6:	bfd4      	ite	le
 80170d8:	fb02 3909 	mlale	r9, r2, r9, r3
 80170dc:	fb02 3606 	mlagt	r6, r2, r6, r3
 80170e0:	3501      	adds	r5, #1
 80170e2:	9011      	str	r0, [sp, #68]	@ 0x44
 80170e4:	e7c3      	b.n	801706e <_strtod_l+0x14e>
 80170e6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80170e8:	1c5a      	adds	r2, r3, #1
 80170ea:	9211      	str	r2, [sp, #68]	@ 0x44
 80170ec:	785a      	ldrb	r2, [r3, #1]
 80170ee:	b375      	cbz	r5, 801714e <_strtod_l+0x22e>
 80170f0:	4607      	mov	r7, r0
 80170f2:	462b      	mov	r3, r5
 80170f4:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80170f8:	2909      	cmp	r1, #9
 80170fa:	d913      	bls.n	8017124 <_strtod_l+0x204>
 80170fc:	2101      	movs	r1, #1
 80170fe:	9106      	str	r1, [sp, #24]
 8017100:	e7c6      	b.n	8017090 <_strtod_l+0x170>
 8017102:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8017104:	1c5a      	adds	r2, r3, #1
 8017106:	9211      	str	r2, [sp, #68]	@ 0x44
 8017108:	785a      	ldrb	r2, [r3, #1]
 801710a:	3001      	adds	r0, #1
 801710c:	2a30      	cmp	r2, #48	@ 0x30
 801710e:	d0f8      	beq.n	8017102 <_strtod_l+0x1e2>
 8017110:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8017114:	2b08      	cmp	r3, #8
 8017116:	f200 8476 	bhi.w	8017a06 <_strtod_l+0xae6>
 801711a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801711c:	930a      	str	r3, [sp, #40]	@ 0x28
 801711e:	4607      	mov	r7, r0
 8017120:	2000      	movs	r0, #0
 8017122:	4603      	mov	r3, r0
 8017124:	3a30      	subs	r2, #48	@ 0x30
 8017126:	f100 0101 	add.w	r1, r0, #1
 801712a:	d023      	beq.n	8017174 <_strtod_l+0x254>
 801712c:	440f      	add	r7, r1
 801712e:	eb00 0c03 	add.w	ip, r0, r3
 8017132:	4619      	mov	r1, r3
 8017134:	240a      	movs	r4, #10
 8017136:	4561      	cmp	r1, ip
 8017138:	d10b      	bne.n	8017152 <_strtod_l+0x232>
 801713a:	1c5c      	adds	r4, r3, #1
 801713c:	4403      	add	r3, r0
 801713e:	2b08      	cmp	r3, #8
 8017140:	4404      	add	r4, r0
 8017142:	dc11      	bgt.n	8017168 <_strtod_l+0x248>
 8017144:	230a      	movs	r3, #10
 8017146:	fb03 2909 	mla	r9, r3, r9, r2
 801714a:	2100      	movs	r1, #0
 801714c:	e013      	b.n	8017176 <_strtod_l+0x256>
 801714e:	4628      	mov	r0, r5
 8017150:	e7dc      	b.n	801710c <_strtod_l+0x1ec>
 8017152:	2908      	cmp	r1, #8
 8017154:	f101 0101 	add.w	r1, r1, #1
 8017158:	dc02      	bgt.n	8017160 <_strtod_l+0x240>
 801715a:	fb04 f909 	mul.w	r9, r4, r9
 801715e:	e7ea      	b.n	8017136 <_strtod_l+0x216>
 8017160:	2910      	cmp	r1, #16
 8017162:	bfd8      	it	le
 8017164:	4366      	mulle	r6, r4
 8017166:	e7e6      	b.n	8017136 <_strtod_l+0x216>
 8017168:	2b0f      	cmp	r3, #15
 801716a:	dcee      	bgt.n	801714a <_strtod_l+0x22a>
 801716c:	230a      	movs	r3, #10
 801716e:	fb03 2606 	mla	r6, r3, r6, r2
 8017172:	e7ea      	b.n	801714a <_strtod_l+0x22a>
 8017174:	461c      	mov	r4, r3
 8017176:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8017178:	1c5a      	adds	r2, r3, #1
 801717a:	9211      	str	r2, [sp, #68]	@ 0x44
 801717c:	785a      	ldrb	r2, [r3, #1]
 801717e:	4608      	mov	r0, r1
 8017180:	4623      	mov	r3, r4
 8017182:	e7b7      	b.n	80170f4 <_strtod_l+0x1d4>
 8017184:	2301      	movs	r3, #1
 8017186:	2700      	movs	r7, #0
 8017188:	9306      	str	r3, [sp, #24]
 801718a:	e786      	b.n	801709a <_strtod_l+0x17a>
 801718c:	f04f 0e00 	mov.w	lr, #0
 8017190:	f108 0202 	add.w	r2, r8, #2
 8017194:	9211      	str	r2, [sp, #68]	@ 0x44
 8017196:	f898 2002 	ldrb.w	r2, [r8, #2]
 801719a:	e78f      	b.n	80170bc <_strtod_l+0x19c>
 801719c:	f04f 0e01 	mov.w	lr, #1
 80171a0:	e7f6      	b.n	8017190 <_strtod_l+0x270>
 80171a2:	bf00      	nop
 80171a4:	08019f28 	.word	0x08019f28
 80171a8:	08019f04 	.word	0x08019f04
 80171ac:	7ff00000 	.word	0x7ff00000
 80171b0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80171b2:	1c54      	adds	r4, r2, #1
 80171b4:	9411      	str	r4, [sp, #68]	@ 0x44
 80171b6:	7852      	ldrb	r2, [r2, #1]
 80171b8:	2a30      	cmp	r2, #48	@ 0x30
 80171ba:	d0f9      	beq.n	80171b0 <_strtod_l+0x290>
 80171bc:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 80171c0:	2c08      	cmp	r4, #8
 80171c2:	d881      	bhi.n	80170c8 <_strtod_l+0x1a8>
 80171c4:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 80171c8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80171ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80171cc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80171ce:	1c51      	adds	r1, r2, #1
 80171d0:	9111      	str	r1, [sp, #68]	@ 0x44
 80171d2:	7852      	ldrb	r2, [r2, #1]
 80171d4:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 80171d8:	2c09      	cmp	r4, #9
 80171da:	d938      	bls.n	801724e <_strtod_l+0x32e>
 80171dc:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80171de:	1b0c      	subs	r4, r1, r4
 80171e0:	2c08      	cmp	r4, #8
 80171e2:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 80171e6:	dc02      	bgt.n	80171ee <_strtod_l+0x2ce>
 80171e8:	4564      	cmp	r4, ip
 80171ea:	bfa8      	it	ge
 80171ec:	4664      	movge	r4, ip
 80171ee:	f1be 0f00 	cmp.w	lr, #0
 80171f2:	d000      	beq.n	80171f6 <_strtod_l+0x2d6>
 80171f4:	4264      	negs	r4, r4
 80171f6:	2b00      	cmp	r3, #0
 80171f8:	d14e      	bne.n	8017298 <_strtod_l+0x378>
 80171fa:	9b07      	ldr	r3, [sp, #28]
 80171fc:	4318      	orrs	r0, r3
 80171fe:	f47f aeca 	bne.w	8016f96 <_strtod_l+0x76>
 8017202:	9b06      	ldr	r3, [sp, #24]
 8017204:	2b00      	cmp	r3, #0
 8017206:	f47f aee2 	bne.w	8016fce <_strtod_l+0xae>
 801720a:	2a69      	cmp	r2, #105	@ 0x69
 801720c:	d027      	beq.n	801725e <_strtod_l+0x33e>
 801720e:	dc24      	bgt.n	801725a <_strtod_l+0x33a>
 8017210:	2a49      	cmp	r2, #73	@ 0x49
 8017212:	d024      	beq.n	801725e <_strtod_l+0x33e>
 8017214:	2a4e      	cmp	r2, #78	@ 0x4e
 8017216:	f47f aeda 	bne.w	8016fce <_strtod_l+0xae>
 801721a:	4997      	ldr	r1, [pc, #604]	@ (8017478 <_strtod_l+0x558>)
 801721c:	a811      	add	r0, sp, #68	@ 0x44
 801721e:	f001 f92f 	bl	8018480 <__match>
 8017222:	2800      	cmp	r0, #0
 8017224:	f43f aed3 	beq.w	8016fce <_strtod_l+0xae>
 8017228:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801722a:	781b      	ldrb	r3, [r3, #0]
 801722c:	2b28      	cmp	r3, #40	@ 0x28
 801722e:	d12d      	bne.n	801728c <_strtod_l+0x36c>
 8017230:	4992      	ldr	r1, [pc, #584]	@ (801747c <_strtod_l+0x55c>)
 8017232:	aa14      	add	r2, sp, #80	@ 0x50
 8017234:	a811      	add	r0, sp, #68	@ 0x44
 8017236:	f001 f937 	bl	80184a8 <__hexnan>
 801723a:	2805      	cmp	r0, #5
 801723c:	d126      	bne.n	801728c <_strtod_l+0x36c>
 801723e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8017240:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8017244:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8017248:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801724c:	e6a3      	b.n	8016f96 <_strtod_l+0x76>
 801724e:	240a      	movs	r4, #10
 8017250:	fb04 2c0c 	mla	ip, r4, ip, r2
 8017254:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8017258:	e7b8      	b.n	80171cc <_strtod_l+0x2ac>
 801725a:	2a6e      	cmp	r2, #110	@ 0x6e
 801725c:	e7db      	b.n	8017216 <_strtod_l+0x2f6>
 801725e:	4988      	ldr	r1, [pc, #544]	@ (8017480 <_strtod_l+0x560>)
 8017260:	a811      	add	r0, sp, #68	@ 0x44
 8017262:	f001 f90d 	bl	8018480 <__match>
 8017266:	2800      	cmp	r0, #0
 8017268:	f43f aeb1 	beq.w	8016fce <_strtod_l+0xae>
 801726c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801726e:	4985      	ldr	r1, [pc, #532]	@ (8017484 <_strtod_l+0x564>)
 8017270:	3b01      	subs	r3, #1
 8017272:	a811      	add	r0, sp, #68	@ 0x44
 8017274:	9311      	str	r3, [sp, #68]	@ 0x44
 8017276:	f001 f903 	bl	8018480 <__match>
 801727a:	b910      	cbnz	r0, 8017282 <_strtod_l+0x362>
 801727c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801727e:	3301      	adds	r3, #1
 8017280:	9311      	str	r3, [sp, #68]	@ 0x44
 8017282:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8017498 <_strtod_l+0x578>
 8017286:	f04f 0a00 	mov.w	sl, #0
 801728a:	e684      	b.n	8016f96 <_strtod_l+0x76>
 801728c:	487e      	ldr	r0, [pc, #504]	@ (8017488 <_strtod_l+0x568>)
 801728e:	f000 fe1b 	bl	8017ec8 <nan>
 8017292:	ec5b ab10 	vmov	sl, fp, d0
 8017296:	e67e      	b.n	8016f96 <_strtod_l+0x76>
 8017298:	ee07 9a90 	vmov	s15, r9
 801729c:	1be2      	subs	r2, r4, r7
 801729e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80172a2:	2d00      	cmp	r5, #0
 80172a4:	bf08      	it	eq
 80172a6:	461d      	moveq	r5, r3
 80172a8:	2b10      	cmp	r3, #16
 80172aa:	9209      	str	r2, [sp, #36]	@ 0x24
 80172ac:	461a      	mov	r2, r3
 80172ae:	bfa8      	it	ge
 80172b0:	2210      	movge	r2, #16
 80172b2:	2b09      	cmp	r3, #9
 80172b4:	ec5b ab17 	vmov	sl, fp, d7
 80172b8:	dc15      	bgt.n	80172e6 <_strtod_l+0x3c6>
 80172ba:	1be1      	subs	r1, r4, r7
 80172bc:	2900      	cmp	r1, #0
 80172be:	f43f ae6a 	beq.w	8016f96 <_strtod_l+0x76>
 80172c2:	eba4 0107 	sub.w	r1, r4, r7
 80172c6:	dd72      	ble.n	80173ae <_strtod_l+0x48e>
 80172c8:	2916      	cmp	r1, #22
 80172ca:	dc59      	bgt.n	8017380 <_strtod_l+0x460>
 80172cc:	4b6f      	ldr	r3, [pc, #444]	@ (801748c <_strtod_l+0x56c>)
 80172ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80172d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80172d4:	ed93 7b00 	vldr	d7, [r3]
 80172d8:	ec4b ab16 	vmov	d6, sl, fp
 80172dc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80172e0:	ec5b ab17 	vmov	sl, fp, d7
 80172e4:	e657      	b.n	8016f96 <_strtod_l+0x76>
 80172e6:	4969      	ldr	r1, [pc, #420]	@ (801748c <_strtod_l+0x56c>)
 80172e8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80172ec:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 80172f0:	ee06 6a90 	vmov	s13, r6
 80172f4:	2b0f      	cmp	r3, #15
 80172f6:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 80172fa:	eea7 6b05 	vfma.f64	d6, d7, d5
 80172fe:	ec5b ab16 	vmov	sl, fp, d6
 8017302:	ddda      	ble.n	80172ba <_strtod_l+0x39a>
 8017304:	1a9a      	subs	r2, r3, r2
 8017306:	1be1      	subs	r1, r4, r7
 8017308:	440a      	add	r2, r1
 801730a:	2a00      	cmp	r2, #0
 801730c:	f340 8094 	ble.w	8017438 <_strtod_l+0x518>
 8017310:	f012 000f 	ands.w	r0, r2, #15
 8017314:	d00a      	beq.n	801732c <_strtod_l+0x40c>
 8017316:	495d      	ldr	r1, [pc, #372]	@ (801748c <_strtod_l+0x56c>)
 8017318:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801731c:	ed91 7b00 	vldr	d7, [r1]
 8017320:	ec4b ab16 	vmov	d6, sl, fp
 8017324:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017328:	ec5b ab17 	vmov	sl, fp, d7
 801732c:	f032 020f 	bics.w	r2, r2, #15
 8017330:	d073      	beq.n	801741a <_strtod_l+0x4fa>
 8017332:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8017336:	dd47      	ble.n	80173c8 <_strtod_l+0x4a8>
 8017338:	2400      	movs	r4, #0
 801733a:	4625      	mov	r5, r4
 801733c:	9407      	str	r4, [sp, #28]
 801733e:	4626      	mov	r6, r4
 8017340:	9a05      	ldr	r2, [sp, #20]
 8017342:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8017498 <_strtod_l+0x578>
 8017346:	2322      	movs	r3, #34	@ 0x22
 8017348:	6013      	str	r3, [r2, #0]
 801734a:	f04f 0a00 	mov.w	sl, #0
 801734e:	9b07      	ldr	r3, [sp, #28]
 8017350:	2b00      	cmp	r3, #0
 8017352:	f43f ae20 	beq.w	8016f96 <_strtod_l+0x76>
 8017356:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8017358:	9805      	ldr	r0, [sp, #20]
 801735a:	f001 fa41 	bl	80187e0 <_Bfree>
 801735e:	9805      	ldr	r0, [sp, #20]
 8017360:	4631      	mov	r1, r6
 8017362:	f001 fa3d 	bl	80187e0 <_Bfree>
 8017366:	9805      	ldr	r0, [sp, #20]
 8017368:	4629      	mov	r1, r5
 801736a:	f001 fa39 	bl	80187e0 <_Bfree>
 801736e:	9907      	ldr	r1, [sp, #28]
 8017370:	9805      	ldr	r0, [sp, #20]
 8017372:	f001 fa35 	bl	80187e0 <_Bfree>
 8017376:	9805      	ldr	r0, [sp, #20]
 8017378:	4621      	mov	r1, r4
 801737a:	f001 fa31 	bl	80187e0 <_Bfree>
 801737e:	e60a      	b.n	8016f96 <_strtod_l+0x76>
 8017380:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8017384:	1be0      	subs	r0, r4, r7
 8017386:	4281      	cmp	r1, r0
 8017388:	dbbc      	blt.n	8017304 <_strtod_l+0x3e4>
 801738a:	4a40      	ldr	r2, [pc, #256]	@ (801748c <_strtod_l+0x56c>)
 801738c:	f1c3 030f 	rsb	r3, r3, #15
 8017390:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8017394:	ed91 7b00 	vldr	d7, [r1]
 8017398:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801739a:	ec4b ab16 	vmov	d6, sl, fp
 801739e:	1acb      	subs	r3, r1, r3
 80173a0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80173a4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80173a8:	ed92 6b00 	vldr	d6, [r2]
 80173ac:	e796      	b.n	80172dc <_strtod_l+0x3bc>
 80173ae:	3116      	adds	r1, #22
 80173b0:	dba8      	blt.n	8017304 <_strtod_l+0x3e4>
 80173b2:	4b36      	ldr	r3, [pc, #216]	@ (801748c <_strtod_l+0x56c>)
 80173b4:	1b3c      	subs	r4, r7, r4
 80173b6:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80173ba:	ed94 7b00 	vldr	d7, [r4]
 80173be:	ec4b ab16 	vmov	d6, sl, fp
 80173c2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80173c6:	e78b      	b.n	80172e0 <_strtod_l+0x3c0>
 80173c8:	2000      	movs	r0, #0
 80173ca:	ec4b ab17 	vmov	d7, sl, fp
 80173ce:	4e30      	ldr	r6, [pc, #192]	@ (8017490 <_strtod_l+0x570>)
 80173d0:	1112      	asrs	r2, r2, #4
 80173d2:	4601      	mov	r1, r0
 80173d4:	2a01      	cmp	r2, #1
 80173d6:	dc23      	bgt.n	8017420 <_strtod_l+0x500>
 80173d8:	b108      	cbz	r0, 80173de <_strtod_l+0x4be>
 80173da:	ec5b ab17 	vmov	sl, fp, d7
 80173de:	4a2c      	ldr	r2, [pc, #176]	@ (8017490 <_strtod_l+0x570>)
 80173e0:	482c      	ldr	r0, [pc, #176]	@ (8017494 <_strtod_l+0x574>)
 80173e2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80173e6:	ed92 7b00 	vldr	d7, [r2]
 80173ea:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80173ee:	ec4b ab16 	vmov	d6, sl, fp
 80173f2:	4a29      	ldr	r2, [pc, #164]	@ (8017498 <_strtod_l+0x578>)
 80173f4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80173f8:	ee17 1a90 	vmov	r1, s15
 80173fc:	400a      	ands	r2, r1
 80173fe:	4282      	cmp	r2, r0
 8017400:	ec5b ab17 	vmov	sl, fp, d7
 8017404:	d898      	bhi.n	8017338 <_strtod_l+0x418>
 8017406:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 801740a:	4282      	cmp	r2, r0
 801740c:	bf86      	itte	hi
 801740e:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 801749c <_strtod_l+0x57c>
 8017412:	f04f 3aff 	movhi.w	sl, #4294967295
 8017416:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 801741a:	2200      	movs	r2, #0
 801741c:	9206      	str	r2, [sp, #24]
 801741e:	e076      	b.n	801750e <_strtod_l+0x5ee>
 8017420:	f012 0f01 	tst.w	r2, #1
 8017424:	d004      	beq.n	8017430 <_strtod_l+0x510>
 8017426:	ed96 6b00 	vldr	d6, [r6]
 801742a:	2001      	movs	r0, #1
 801742c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017430:	3101      	adds	r1, #1
 8017432:	1052      	asrs	r2, r2, #1
 8017434:	3608      	adds	r6, #8
 8017436:	e7cd      	b.n	80173d4 <_strtod_l+0x4b4>
 8017438:	d0ef      	beq.n	801741a <_strtod_l+0x4fa>
 801743a:	4252      	negs	r2, r2
 801743c:	f012 000f 	ands.w	r0, r2, #15
 8017440:	d00a      	beq.n	8017458 <_strtod_l+0x538>
 8017442:	4912      	ldr	r1, [pc, #72]	@ (801748c <_strtod_l+0x56c>)
 8017444:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8017448:	ed91 7b00 	vldr	d7, [r1]
 801744c:	ec4b ab16 	vmov	d6, sl, fp
 8017450:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8017454:	ec5b ab17 	vmov	sl, fp, d7
 8017458:	1112      	asrs	r2, r2, #4
 801745a:	d0de      	beq.n	801741a <_strtod_l+0x4fa>
 801745c:	2a1f      	cmp	r2, #31
 801745e:	dd1f      	ble.n	80174a0 <_strtod_l+0x580>
 8017460:	2400      	movs	r4, #0
 8017462:	4625      	mov	r5, r4
 8017464:	9407      	str	r4, [sp, #28]
 8017466:	4626      	mov	r6, r4
 8017468:	9a05      	ldr	r2, [sp, #20]
 801746a:	2322      	movs	r3, #34	@ 0x22
 801746c:	f04f 0a00 	mov.w	sl, #0
 8017470:	f04f 0b00 	mov.w	fp, #0
 8017474:	6013      	str	r3, [r2, #0]
 8017476:	e76a      	b.n	801734e <_strtod_l+0x42e>
 8017478:	08019f0f 	.word	0x08019f0f
 801747c:	08019f14 	.word	0x08019f14
 8017480:	08019f06 	.word	0x08019f06
 8017484:	08019f09 	.word	0x08019f09
 8017488:	0801a28b 	.word	0x0801a28b
 801748c:	0801a188 	.word	0x0801a188
 8017490:	0801a160 	.word	0x0801a160
 8017494:	7ca00000 	.word	0x7ca00000
 8017498:	7ff00000 	.word	0x7ff00000
 801749c:	7fefffff 	.word	0x7fefffff
 80174a0:	f012 0110 	ands.w	r1, r2, #16
 80174a4:	bf18      	it	ne
 80174a6:	216a      	movne	r1, #106	@ 0x6a
 80174a8:	9106      	str	r1, [sp, #24]
 80174aa:	ec4b ab17 	vmov	d7, sl, fp
 80174ae:	49b0      	ldr	r1, [pc, #704]	@ (8017770 <_strtod_l+0x850>)
 80174b0:	2000      	movs	r0, #0
 80174b2:	07d6      	lsls	r6, r2, #31
 80174b4:	d504      	bpl.n	80174c0 <_strtod_l+0x5a0>
 80174b6:	ed91 6b00 	vldr	d6, [r1]
 80174ba:	2001      	movs	r0, #1
 80174bc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80174c0:	1052      	asrs	r2, r2, #1
 80174c2:	f101 0108 	add.w	r1, r1, #8
 80174c6:	d1f4      	bne.n	80174b2 <_strtod_l+0x592>
 80174c8:	b108      	cbz	r0, 80174ce <_strtod_l+0x5ae>
 80174ca:	ec5b ab17 	vmov	sl, fp, d7
 80174ce:	9a06      	ldr	r2, [sp, #24]
 80174d0:	b1b2      	cbz	r2, 8017500 <_strtod_l+0x5e0>
 80174d2:	f3cb 510a 	ubfx	r1, fp, #20, #11
 80174d6:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 80174da:	2a00      	cmp	r2, #0
 80174dc:	4658      	mov	r0, fp
 80174de:	dd0f      	ble.n	8017500 <_strtod_l+0x5e0>
 80174e0:	2a1f      	cmp	r2, #31
 80174e2:	dd55      	ble.n	8017590 <_strtod_l+0x670>
 80174e4:	2a34      	cmp	r2, #52	@ 0x34
 80174e6:	bfde      	ittt	le
 80174e8:	f04f 32ff 	movle.w	r2, #4294967295
 80174ec:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 80174f0:	408a      	lslle	r2, r1
 80174f2:	f04f 0a00 	mov.w	sl, #0
 80174f6:	bfcc      	ite	gt
 80174f8:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80174fc:	ea02 0b00 	andle.w	fp, r2, r0
 8017500:	ec4b ab17 	vmov	d7, sl, fp
 8017504:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8017508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801750c:	d0a8      	beq.n	8017460 <_strtod_l+0x540>
 801750e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017510:	9805      	ldr	r0, [sp, #20]
 8017512:	f8cd 9000 	str.w	r9, [sp]
 8017516:	462a      	mov	r2, r5
 8017518:	f001 f9ca 	bl	80188b0 <__s2b>
 801751c:	9007      	str	r0, [sp, #28]
 801751e:	2800      	cmp	r0, #0
 8017520:	f43f af0a 	beq.w	8017338 <_strtod_l+0x418>
 8017524:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017526:	1b3f      	subs	r7, r7, r4
 8017528:	2b00      	cmp	r3, #0
 801752a:	bfb4      	ite	lt
 801752c:	463b      	movlt	r3, r7
 801752e:	2300      	movge	r3, #0
 8017530:	930a      	str	r3, [sp, #40]	@ 0x28
 8017532:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017534:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 8017760 <_strtod_l+0x840>
 8017538:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801753c:	2400      	movs	r4, #0
 801753e:	930d      	str	r3, [sp, #52]	@ 0x34
 8017540:	4625      	mov	r5, r4
 8017542:	9b07      	ldr	r3, [sp, #28]
 8017544:	9805      	ldr	r0, [sp, #20]
 8017546:	6859      	ldr	r1, [r3, #4]
 8017548:	f001 f90a 	bl	8018760 <_Balloc>
 801754c:	4606      	mov	r6, r0
 801754e:	2800      	cmp	r0, #0
 8017550:	f43f aef6 	beq.w	8017340 <_strtod_l+0x420>
 8017554:	9b07      	ldr	r3, [sp, #28]
 8017556:	691a      	ldr	r2, [r3, #16]
 8017558:	ec4b ab19 	vmov	d9, sl, fp
 801755c:	3202      	adds	r2, #2
 801755e:	f103 010c 	add.w	r1, r3, #12
 8017562:	0092      	lsls	r2, r2, #2
 8017564:	300c      	adds	r0, #12
 8017566:	f000 fca0 	bl	8017eaa <memcpy>
 801756a:	eeb0 0b49 	vmov.f64	d0, d9
 801756e:	9805      	ldr	r0, [sp, #20]
 8017570:	aa14      	add	r2, sp, #80	@ 0x50
 8017572:	a913      	add	r1, sp, #76	@ 0x4c
 8017574:	f001 fcd8 	bl	8018f28 <__d2b>
 8017578:	9012      	str	r0, [sp, #72]	@ 0x48
 801757a:	2800      	cmp	r0, #0
 801757c:	f43f aee0 	beq.w	8017340 <_strtod_l+0x420>
 8017580:	9805      	ldr	r0, [sp, #20]
 8017582:	2101      	movs	r1, #1
 8017584:	f001 fa2a 	bl	80189dc <__i2b>
 8017588:	4605      	mov	r5, r0
 801758a:	b940      	cbnz	r0, 801759e <_strtod_l+0x67e>
 801758c:	2500      	movs	r5, #0
 801758e:	e6d7      	b.n	8017340 <_strtod_l+0x420>
 8017590:	f04f 31ff 	mov.w	r1, #4294967295
 8017594:	fa01 f202 	lsl.w	r2, r1, r2
 8017598:	ea02 0a0a 	and.w	sl, r2, sl
 801759c:	e7b0      	b.n	8017500 <_strtod_l+0x5e0>
 801759e:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 80175a0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80175a2:	2f00      	cmp	r7, #0
 80175a4:	bfab      	itete	ge
 80175a6:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 80175a8:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 80175aa:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 80175ae:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 80175b2:	bfac      	ite	ge
 80175b4:	eb07 0903 	addge.w	r9, r7, r3
 80175b8:	eba3 0807 	sublt.w	r8, r3, r7
 80175bc:	9b06      	ldr	r3, [sp, #24]
 80175be:	1aff      	subs	r7, r7, r3
 80175c0:	4417      	add	r7, r2
 80175c2:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 80175c6:	4a6b      	ldr	r2, [pc, #428]	@ (8017774 <_strtod_l+0x854>)
 80175c8:	3f01      	subs	r7, #1
 80175ca:	4297      	cmp	r7, r2
 80175cc:	da51      	bge.n	8017672 <_strtod_l+0x752>
 80175ce:	1bd1      	subs	r1, r2, r7
 80175d0:	291f      	cmp	r1, #31
 80175d2:	eba3 0301 	sub.w	r3, r3, r1
 80175d6:	f04f 0201 	mov.w	r2, #1
 80175da:	dc3e      	bgt.n	801765a <_strtod_l+0x73a>
 80175dc:	408a      	lsls	r2, r1
 80175de:	920c      	str	r2, [sp, #48]	@ 0x30
 80175e0:	2200      	movs	r2, #0
 80175e2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80175e4:	eb09 0703 	add.w	r7, r9, r3
 80175e8:	4498      	add	r8, r3
 80175ea:	9b06      	ldr	r3, [sp, #24]
 80175ec:	45b9      	cmp	r9, r7
 80175ee:	4498      	add	r8, r3
 80175f0:	464b      	mov	r3, r9
 80175f2:	bfa8      	it	ge
 80175f4:	463b      	movge	r3, r7
 80175f6:	4543      	cmp	r3, r8
 80175f8:	bfa8      	it	ge
 80175fa:	4643      	movge	r3, r8
 80175fc:	2b00      	cmp	r3, #0
 80175fe:	bfc2      	ittt	gt
 8017600:	1aff      	subgt	r7, r7, r3
 8017602:	eba8 0803 	subgt.w	r8, r8, r3
 8017606:	eba9 0903 	subgt.w	r9, r9, r3
 801760a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801760c:	2b00      	cmp	r3, #0
 801760e:	dd16      	ble.n	801763e <_strtod_l+0x71e>
 8017610:	4629      	mov	r1, r5
 8017612:	9805      	ldr	r0, [sp, #20]
 8017614:	461a      	mov	r2, r3
 8017616:	f001 faa1 	bl	8018b5c <__pow5mult>
 801761a:	4605      	mov	r5, r0
 801761c:	2800      	cmp	r0, #0
 801761e:	d0b5      	beq.n	801758c <_strtod_l+0x66c>
 8017620:	4601      	mov	r1, r0
 8017622:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8017624:	9805      	ldr	r0, [sp, #20]
 8017626:	f001 f9ef 	bl	8018a08 <__multiply>
 801762a:	900f      	str	r0, [sp, #60]	@ 0x3c
 801762c:	2800      	cmp	r0, #0
 801762e:	f43f ae87 	beq.w	8017340 <_strtod_l+0x420>
 8017632:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8017634:	9805      	ldr	r0, [sp, #20]
 8017636:	f001 f8d3 	bl	80187e0 <_Bfree>
 801763a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801763c:	9312      	str	r3, [sp, #72]	@ 0x48
 801763e:	2f00      	cmp	r7, #0
 8017640:	dc1b      	bgt.n	801767a <_strtod_l+0x75a>
 8017642:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017644:	2b00      	cmp	r3, #0
 8017646:	dd21      	ble.n	801768c <_strtod_l+0x76c>
 8017648:	4631      	mov	r1, r6
 801764a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801764c:	9805      	ldr	r0, [sp, #20]
 801764e:	f001 fa85 	bl	8018b5c <__pow5mult>
 8017652:	4606      	mov	r6, r0
 8017654:	b9d0      	cbnz	r0, 801768c <_strtod_l+0x76c>
 8017656:	2600      	movs	r6, #0
 8017658:	e672      	b.n	8017340 <_strtod_l+0x420>
 801765a:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 801765e:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 8017662:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 8017666:	37e2      	adds	r7, #226	@ 0xe2
 8017668:	fa02 f107 	lsl.w	r1, r2, r7
 801766c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801766e:	920c      	str	r2, [sp, #48]	@ 0x30
 8017670:	e7b8      	b.n	80175e4 <_strtod_l+0x6c4>
 8017672:	2200      	movs	r2, #0
 8017674:	920b      	str	r2, [sp, #44]	@ 0x2c
 8017676:	2201      	movs	r2, #1
 8017678:	e7f9      	b.n	801766e <_strtod_l+0x74e>
 801767a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801767c:	9805      	ldr	r0, [sp, #20]
 801767e:	463a      	mov	r2, r7
 8017680:	f001 fac6 	bl	8018c10 <__lshift>
 8017684:	9012      	str	r0, [sp, #72]	@ 0x48
 8017686:	2800      	cmp	r0, #0
 8017688:	d1db      	bne.n	8017642 <_strtod_l+0x722>
 801768a:	e659      	b.n	8017340 <_strtod_l+0x420>
 801768c:	f1b8 0f00 	cmp.w	r8, #0
 8017690:	dd07      	ble.n	80176a2 <_strtod_l+0x782>
 8017692:	4631      	mov	r1, r6
 8017694:	9805      	ldr	r0, [sp, #20]
 8017696:	4642      	mov	r2, r8
 8017698:	f001 faba 	bl	8018c10 <__lshift>
 801769c:	4606      	mov	r6, r0
 801769e:	2800      	cmp	r0, #0
 80176a0:	d0d9      	beq.n	8017656 <_strtod_l+0x736>
 80176a2:	f1b9 0f00 	cmp.w	r9, #0
 80176a6:	dd08      	ble.n	80176ba <_strtod_l+0x79a>
 80176a8:	4629      	mov	r1, r5
 80176aa:	9805      	ldr	r0, [sp, #20]
 80176ac:	464a      	mov	r2, r9
 80176ae:	f001 faaf 	bl	8018c10 <__lshift>
 80176b2:	4605      	mov	r5, r0
 80176b4:	2800      	cmp	r0, #0
 80176b6:	f43f ae43 	beq.w	8017340 <_strtod_l+0x420>
 80176ba:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80176bc:	9805      	ldr	r0, [sp, #20]
 80176be:	4632      	mov	r2, r6
 80176c0:	f001 fb2e 	bl	8018d20 <__mdiff>
 80176c4:	4604      	mov	r4, r0
 80176c6:	2800      	cmp	r0, #0
 80176c8:	f43f ae3a 	beq.w	8017340 <_strtod_l+0x420>
 80176cc:	2300      	movs	r3, #0
 80176ce:	f8d0 800c 	ldr.w	r8, [r0, #12]
 80176d2:	60c3      	str	r3, [r0, #12]
 80176d4:	4629      	mov	r1, r5
 80176d6:	f001 fb07 	bl	8018ce8 <__mcmp>
 80176da:	2800      	cmp	r0, #0
 80176dc:	da4e      	bge.n	801777c <_strtod_l+0x85c>
 80176de:	ea58 080a 	orrs.w	r8, r8, sl
 80176e2:	d174      	bne.n	80177ce <_strtod_l+0x8ae>
 80176e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80176e8:	2b00      	cmp	r3, #0
 80176ea:	d170      	bne.n	80177ce <_strtod_l+0x8ae>
 80176ec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80176f0:	0d1b      	lsrs	r3, r3, #20
 80176f2:	051b      	lsls	r3, r3, #20
 80176f4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80176f8:	d969      	bls.n	80177ce <_strtod_l+0x8ae>
 80176fa:	6963      	ldr	r3, [r4, #20]
 80176fc:	b913      	cbnz	r3, 8017704 <_strtod_l+0x7e4>
 80176fe:	6923      	ldr	r3, [r4, #16]
 8017700:	2b01      	cmp	r3, #1
 8017702:	dd64      	ble.n	80177ce <_strtod_l+0x8ae>
 8017704:	4621      	mov	r1, r4
 8017706:	2201      	movs	r2, #1
 8017708:	9805      	ldr	r0, [sp, #20]
 801770a:	f001 fa81 	bl	8018c10 <__lshift>
 801770e:	4629      	mov	r1, r5
 8017710:	4604      	mov	r4, r0
 8017712:	f001 fae9 	bl	8018ce8 <__mcmp>
 8017716:	2800      	cmp	r0, #0
 8017718:	dd59      	ble.n	80177ce <_strtod_l+0x8ae>
 801771a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801771e:	9a06      	ldr	r2, [sp, #24]
 8017720:	0d1b      	lsrs	r3, r3, #20
 8017722:	051b      	lsls	r3, r3, #20
 8017724:	2a00      	cmp	r2, #0
 8017726:	d070      	beq.n	801780a <_strtod_l+0x8ea>
 8017728:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801772c:	d86d      	bhi.n	801780a <_strtod_l+0x8ea>
 801772e:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8017732:	f67f ae99 	bls.w	8017468 <_strtod_l+0x548>
 8017736:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8017768 <_strtod_l+0x848>
 801773a:	ec4b ab16 	vmov	d6, sl, fp
 801773e:	4b0e      	ldr	r3, [pc, #56]	@ (8017778 <_strtod_l+0x858>)
 8017740:	ee26 7b07 	vmul.f64	d7, d6, d7
 8017744:	ee17 2a90 	vmov	r2, s15
 8017748:	4013      	ands	r3, r2
 801774a:	ec5b ab17 	vmov	sl, fp, d7
 801774e:	2b00      	cmp	r3, #0
 8017750:	f47f ae01 	bne.w	8017356 <_strtod_l+0x436>
 8017754:	9a05      	ldr	r2, [sp, #20]
 8017756:	2322      	movs	r3, #34	@ 0x22
 8017758:	6013      	str	r3, [r2, #0]
 801775a:	e5fc      	b.n	8017356 <_strtod_l+0x436>
 801775c:	f3af 8000 	nop.w
 8017760:	ffc00000 	.word	0xffc00000
 8017764:	41dfffff 	.word	0x41dfffff
 8017768:	00000000 	.word	0x00000000
 801776c:	39500000 	.word	0x39500000
 8017770:	08019f40 	.word	0x08019f40
 8017774:	fffffc02 	.word	0xfffffc02
 8017778:	7ff00000 	.word	0x7ff00000
 801777c:	46d9      	mov	r9, fp
 801777e:	d15d      	bne.n	801783c <_strtod_l+0x91c>
 8017780:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017784:	f1b8 0f00 	cmp.w	r8, #0
 8017788:	d02a      	beq.n	80177e0 <_strtod_l+0x8c0>
 801778a:	4aab      	ldr	r2, [pc, #684]	@ (8017a38 <_strtod_l+0xb18>)
 801778c:	4293      	cmp	r3, r2
 801778e:	d12a      	bne.n	80177e6 <_strtod_l+0x8c6>
 8017790:	9b06      	ldr	r3, [sp, #24]
 8017792:	4652      	mov	r2, sl
 8017794:	b1fb      	cbz	r3, 80177d6 <_strtod_l+0x8b6>
 8017796:	4ba9      	ldr	r3, [pc, #676]	@ (8017a3c <_strtod_l+0xb1c>)
 8017798:	ea0b 0303 	and.w	r3, fp, r3
 801779c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80177a0:	f04f 31ff 	mov.w	r1, #4294967295
 80177a4:	d81a      	bhi.n	80177dc <_strtod_l+0x8bc>
 80177a6:	0d1b      	lsrs	r3, r3, #20
 80177a8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80177ac:	fa01 f303 	lsl.w	r3, r1, r3
 80177b0:	429a      	cmp	r2, r3
 80177b2:	d118      	bne.n	80177e6 <_strtod_l+0x8c6>
 80177b4:	4ba2      	ldr	r3, [pc, #648]	@ (8017a40 <_strtod_l+0xb20>)
 80177b6:	4599      	cmp	r9, r3
 80177b8:	d102      	bne.n	80177c0 <_strtod_l+0x8a0>
 80177ba:	3201      	adds	r2, #1
 80177bc:	f43f adc0 	beq.w	8017340 <_strtod_l+0x420>
 80177c0:	4b9e      	ldr	r3, [pc, #632]	@ (8017a3c <_strtod_l+0xb1c>)
 80177c2:	ea09 0303 	and.w	r3, r9, r3
 80177c6:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 80177ca:	f04f 0a00 	mov.w	sl, #0
 80177ce:	9b06      	ldr	r3, [sp, #24]
 80177d0:	2b00      	cmp	r3, #0
 80177d2:	d1b0      	bne.n	8017736 <_strtod_l+0x816>
 80177d4:	e5bf      	b.n	8017356 <_strtod_l+0x436>
 80177d6:	f04f 33ff 	mov.w	r3, #4294967295
 80177da:	e7e9      	b.n	80177b0 <_strtod_l+0x890>
 80177dc:	460b      	mov	r3, r1
 80177de:	e7e7      	b.n	80177b0 <_strtod_l+0x890>
 80177e0:	ea53 030a 	orrs.w	r3, r3, sl
 80177e4:	d099      	beq.n	801771a <_strtod_l+0x7fa>
 80177e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80177e8:	b1c3      	cbz	r3, 801781c <_strtod_l+0x8fc>
 80177ea:	ea13 0f09 	tst.w	r3, r9
 80177ee:	d0ee      	beq.n	80177ce <_strtod_l+0x8ae>
 80177f0:	9a06      	ldr	r2, [sp, #24]
 80177f2:	4650      	mov	r0, sl
 80177f4:	4659      	mov	r1, fp
 80177f6:	f1b8 0f00 	cmp.w	r8, #0
 80177fa:	d013      	beq.n	8017824 <_strtod_l+0x904>
 80177fc:	f7ff fb73 	bl	8016ee6 <sulp>
 8017800:	ee39 7b00 	vadd.f64	d7, d9, d0
 8017804:	ec5b ab17 	vmov	sl, fp, d7
 8017808:	e7e1      	b.n	80177ce <_strtod_l+0x8ae>
 801780a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801780e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8017812:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8017816:	f04f 3aff 	mov.w	sl, #4294967295
 801781a:	e7d8      	b.n	80177ce <_strtod_l+0x8ae>
 801781c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801781e:	ea13 0f0a 	tst.w	r3, sl
 8017822:	e7e4      	b.n	80177ee <_strtod_l+0x8ce>
 8017824:	f7ff fb5f 	bl	8016ee6 <sulp>
 8017828:	ee39 0b40 	vsub.f64	d0, d9, d0
 801782c:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8017830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017834:	ec5b ab10 	vmov	sl, fp, d0
 8017838:	d1c9      	bne.n	80177ce <_strtod_l+0x8ae>
 801783a:	e615      	b.n	8017468 <_strtod_l+0x548>
 801783c:	4629      	mov	r1, r5
 801783e:	4620      	mov	r0, r4
 8017840:	f001 fbca 	bl	8018fd8 <__ratio>
 8017844:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8017848:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801784c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017850:	d85d      	bhi.n	801790e <_strtod_l+0x9ee>
 8017852:	f1b8 0f00 	cmp.w	r8, #0
 8017856:	d164      	bne.n	8017922 <_strtod_l+0xa02>
 8017858:	f1ba 0f00 	cmp.w	sl, #0
 801785c:	d14b      	bne.n	80178f6 <_strtod_l+0x9d6>
 801785e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017862:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8017866:	2b00      	cmp	r3, #0
 8017868:	d160      	bne.n	801792c <_strtod_l+0xa0c>
 801786a:	eeb4 0bc8 	vcmpe.f64	d0, d8
 801786e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8017872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017876:	d401      	bmi.n	801787c <_strtod_l+0x95c>
 8017878:	ee20 8b08 	vmul.f64	d8, d0, d8
 801787c:	eeb1 ab48 	vneg.f64	d10, d8
 8017880:	486e      	ldr	r0, [pc, #440]	@ (8017a3c <_strtod_l+0xb1c>)
 8017882:	4970      	ldr	r1, [pc, #448]	@ (8017a44 <_strtod_l+0xb24>)
 8017884:	ea09 0700 	and.w	r7, r9, r0
 8017888:	428f      	cmp	r7, r1
 801788a:	ec53 2b1a 	vmov	r2, r3, d10
 801788e:	d17d      	bne.n	801798c <_strtod_l+0xa6c>
 8017890:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 8017894:	ec4b ab1c 	vmov	d12, sl, fp
 8017898:	eeb0 0b4c 	vmov.f64	d0, d12
 801789c:	f001 fad4 	bl	8018e48 <__ulp>
 80178a0:	4866      	ldr	r0, [pc, #408]	@ (8017a3c <_strtod_l+0xb1c>)
 80178a2:	eea0 cb0a 	vfma.f64	d12, d0, d10
 80178a6:	ee1c 3a90 	vmov	r3, s25
 80178aa:	4a67      	ldr	r2, [pc, #412]	@ (8017a48 <_strtod_l+0xb28>)
 80178ac:	ea03 0100 	and.w	r1, r3, r0
 80178b0:	4291      	cmp	r1, r2
 80178b2:	ec5b ab1c 	vmov	sl, fp, d12
 80178b6:	d93c      	bls.n	8017932 <_strtod_l+0xa12>
 80178b8:	ee19 2a90 	vmov	r2, s19
 80178bc:	4b60      	ldr	r3, [pc, #384]	@ (8017a40 <_strtod_l+0xb20>)
 80178be:	429a      	cmp	r2, r3
 80178c0:	d104      	bne.n	80178cc <_strtod_l+0x9ac>
 80178c2:	ee19 3a10 	vmov	r3, s18
 80178c6:	3301      	adds	r3, #1
 80178c8:	f43f ad3a 	beq.w	8017340 <_strtod_l+0x420>
 80178cc:	f8df b170 	ldr.w	fp, [pc, #368]	@ 8017a40 <_strtod_l+0xb20>
 80178d0:	f04f 3aff 	mov.w	sl, #4294967295
 80178d4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80178d6:	9805      	ldr	r0, [sp, #20]
 80178d8:	f000 ff82 	bl	80187e0 <_Bfree>
 80178dc:	9805      	ldr	r0, [sp, #20]
 80178de:	4631      	mov	r1, r6
 80178e0:	f000 ff7e 	bl	80187e0 <_Bfree>
 80178e4:	9805      	ldr	r0, [sp, #20]
 80178e6:	4629      	mov	r1, r5
 80178e8:	f000 ff7a 	bl	80187e0 <_Bfree>
 80178ec:	9805      	ldr	r0, [sp, #20]
 80178ee:	4621      	mov	r1, r4
 80178f0:	f000 ff76 	bl	80187e0 <_Bfree>
 80178f4:	e625      	b.n	8017542 <_strtod_l+0x622>
 80178f6:	f1ba 0f01 	cmp.w	sl, #1
 80178fa:	d103      	bne.n	8017904 <_strtod_l+0x9e4>
 80178fc:	f1bb 0f00 	cmp.w	fp, #0
 8017900:	f43f adb2 	beq.w	8017468 <_strtod_l+0x548>
 8017904:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8017908:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 801790c:	e7b8      	b.n	8017880 <_strtod_l+0x960>
 801790e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8017912:	ee20 8b08 	vmul.f64	d8, d0, d8
 8017916:	f1b8 0f00 	cmp.w	r8, #0
 801791a:	d0af      	beq.n	801787c <_strtod_l+0x95c>
 801791c:	eeb0 ab48 	vmov.f64	d10, d8
 8017920:	e7ae      	b.n	8017880 <_strtod_l+0x960>
 8017922:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 8017926:	eeb0 8b4a 	vmov.f64	d8, d10
 801792a:	e7a9      	b.n	8017880 <_strtod_l+0x960>
 801792c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8017930:	e7a6      	b.n	8017880 <_strtod_l+0x960>
 8017932:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8017936:	9b06      	ldr	r3, [sp, #24]
 8017938:	46d9      	mov	r9, fp
 801793a:	2b00      	cmp	r3, #0
 801793c:	d1ca      	bne.n	80178d4 <_strtod_l+0x9b4>
 801793e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8017942:	0d1b      	lsrs	r3, r3, #20
 8017944:	051b      	lsls	r3, r3, #20
 8017946:	429f      	cmp	r7, r3
 8017948:	d1c4      	bne.n	80178d4 <_strtod_l+0x9b4>
 801794a:	ec51 0b18 	vmov	r0, r1, d8
 801794e:	f7e8 ff53 	bl	80007f8 <__aeabi_d2lz>
 8017952:	f7e8 febb 	bl	80006cc <__aeabi_l2d>
 8017956:	f3cb 0913 	ubfx	r9, fp, #0, #20
 801795a:	ec41 0b17 	vmov	d7, r0, r1
 801795e:	ea49 090a 	orr.w	r9, r9, sl
 8017962:	ea59 0908 	orrs.w	r9, r9, r8
 8017966:	ee38 8b47 	vsub.f64	d8, d8, d7
 801796a:	d03c      	beq.n	80179e6 <_strtod_l+0xac6>
 801796c:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8017a20 <_strtod_l+0xb00>
 8017970:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8017974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017978:	f53f aced 	bmi.w	8017356 <_strtod_l+0x436>
 801797c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8017a28 <_strtod_l+0xb08>
 8017980:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8017984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017988:	dda4      	ble.n	80178d4 <_strtod_l+0x9b4>
 801798a:	e4e4      	b.n	8017356 <_strtod_l+0x436>
 801798c:	9906      	ldr	r1, [sp, #24]
 801798e:	b1e1      	cbz	r1, 80179ca <_strtod_l+0xaaa>
 8017990:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 8017994:	d819      	bhi.n	80179ca <_strtod_l+0xaaa>
 8017996:	eeb4 8bcb 	vcmpe.f64	d8, d11
 801799a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801799e:	d811      	bhi.n	80179c4 <_strtod_l+0xaa4>
 80179a0:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 80179a4:	ee18 3a10 	vmov	r3, s16
 80179a8:	2b01      	cmp	r3, #1
 80179aa:	bf38      	it	cc
 80179ac:	2301      	movcc	r3, #1
 80179ae:	ee08 3a10 	vmov	s16, r3
 80179b2:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 80179b6:	f1b8 0f00 	cmp.w	r8, #0
 80179ba:	d111      	bne.n	80179e0 <_strtod_l+0xac0>
 80179bc:	eeb1 7b48 	vneg.f64	d7, d8
 80179c0:	ec53 2b17 	vmov	r2, r3, d7
 80179c4:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 80179c8:	1bcb      	subs	r3, r1, r7
 80179ca:	eeb0 0b49 	vmov.f64	d0, d9
 80179ce:	ec43 2b1a 	vmov	d10, r2, r3
 80179d2:	f001 fa39 	bl	8018e48 <__ulp>
 80179d6:	eeaa 9b00 	vfma.f64	d9, d10, d0
 80179da:	ec5b ab19 	vmov	sl, fp, d9
 80179de:	e7aa      	b.n	8017936 <_strtod_l+0xa16>
 80179e0:	eeb0 7b48 	vmov.f64	d7, d8
 80179e4:	e7ec      	b.n	80179c0 <_strtod_l+0xaa0>
 80179e6:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8017a30 <_strtod_l+0xb10>
 80179ea:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80179ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80179f2:	f57f af6f 	bpl.w	80178d4 <_strtod_l+0x9b4>
 80179f6:	e4ae      	b.n	8017356 <_strtod_l+0x436>
 80179f8:	2300      	movs	r3, #0
 80179fa:	9308      	str	r3, [sp, #32]
 80179fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80179fe:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8017a00:	6013      	str	r3, [r2, #0]
 8017a02:	f7ff bacc 	b.w	8016f9e <_strtod_l+0x7e>
 8017a06:	2a65      	cmp	r2, #101	@ 0x65
 8017a08:	f43f abbc 	beq.w	8017184 <_strtod_l+0x264>
 8017a0c:	2a45      	cmp	r2, #69	@ 0x45
 8017a0e:	f43f abb9 	beq.w	8017184 <_strtod_l+0x264>
 8017a12:	2301      	movs	r3, #1
 8017a14:	9306      	str	r3, [sp, #24]
 8017a16:	f7ff bbf0 	b.w	80171fa <_strtod_l+0x2da>
 8017a1a:	bf00      	nop
 8017a1c:	f3af 8000 	nop.w
 8017a20:	94a03595 	.word	0x94a03595
 8017a24:	3fdfffff 	.word	0x3fdfffff
 8017a28:	35afe535 	.word	0x35afe535
 8017a2c:	3fe00000 	.word	0x3fe00000
 8017a30:	94a03595 	.word	0x94a03595
 8017a34:	3fcfffff 	.word	0x3fcfffff
 8017a38:	000fffff 	.word	0x000fffff
 8017a3c:	7ff00000 	.word	0x7ff00000
 8017a40:	7fefffff 	.word	0x7fefffff
 8017a44:	7fe00000 	.word	0x7fe00000
 8017a48:	7c9fffff 	.word	0x7c9fffff

08017a4c <strtod>:
 8017a4c:	460a      	mov	r2, r1
 8017a4e:	4601      	mov	r1, r0
 8017a50:	4802      	ldr	r0, [pc, #8]	@ (8017a5c <strtod+0x10>)
 8017a52:	4b03      	ldr	r3, [pc, #12]	@ (8017a60 <strtod+0x14>)
 8017a54:	6800      	ldr	r0, [r0, #0]
 8017a56:	f7ff ba63 	b.w	8016f20 <_strtod_l>
 8017a5a:	bf00      	nop
 8017a5c:	24000240 	.word	0x24000240
 8017a60:	240000d4 	.word	0x240000d4

08017a64 <_strtol_l.constprop.0>:
 8017a64:	2b24      	cmp	r3, #36	@ 0x24
 8017a66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017a6a:	4686      	mov	lr, r0
 8017a6c:	4690      	mov	r8, r2
 8017a6e:	d801      	bhi.n	8017a74 <_strtol_l.constprop.0+0x10>
 8017a70:	2b01      	cmp	r3, #1
 8017a72:	d106      	bne.n	8017a82 <_strtol_l.constprop.0+0x1e>
 8017a74:	f000 f9ec 	bl	8017e50 <__errno>
 8017a78:	2316      	movs	r3, #22
 8017a7a:	6003      	str	r3, [r0, #0]
 8017a7c:	2000      	movs	r0, #0
 8017a7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017a82:	4834      	ldr	r0, [pc, #208]	@ (8017b54 <_strtol_l.constprop.0+0xf0>)
 8017a84:	460d      	mov	r5, r1
 8017a86:	462a      	mov	r2, r5
 8017a88:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017a8c:	5d06      	ldrb	r6, [r0, r4]
 8017a8e:	f016 0608 	ands.w	r6, r6, #8
 8017a92:	d1f8      	bne.n	8017a86 <_strtol_l.constprop.0+0x22>
 8017a94:	2c2d      	cmp	r4, #45	@ 0x2d
 8017a96:	d12d      	bne.n	8017af4 <_strtol_l.constprop.0+0x90>
 8017a98:	782c      	ldrb	r4, [r5, #0]
 8017a9a:	2601      	movs	r6, #1
 8017a9c:	1c95      	adds	r5, r2, #2
 8017a9e:	f033 0210 	bics.w	r2, r3, #16
 8017aa2:	d109      	bne.n	8017ab8 <_strtol_l.constprop.0+0x54>
 8017aa4:	2c30      	cmp	r4, #48	@ 0x30
 8017aa6:	d12a      	bne.n	8017afe <_strtol_l.constprop.0+0x9a>
 8017aa8:	782a      	ldrb	r2, [r5, #0]
 8017aaa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8017aae:	2a58      	cmp	r2, #88	@ 0x58
 8017ab0:	d125      	bne.n	8017afe <_strtol_l.constprop.0+0x9a>
 8017ab2:	786c      	ldrb	r4, [r5, #1]
 8017ab4:	2310      	movs	r3, #16
 8017ab6:	3502      	adds	r5, #2
 8017ab8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8017abc:	f10c 3cff 	add.w	ip, ip, #4294967295
 8017ac0:	2200      	movs	r2, #0
 8017ac2:	fbbc f9f3 	udiv	r9, ip, r3
 8017ac6:	4610      	mov	r0, r2
 8017ac8:	fb03 ca19 	mls	sl, r3, r9, ip
 8017acc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8017ad0:	2f09      	cmp	r7, #9
 8017ad2:	d81b      	bhi.n	8017b0c <_strtol_l.constprop.0+0xa8>
 8017ad4:	463c      	mov	r4, r7
 8017ad6:	42a3      	cmp	r3, r4
 8017ad8:	dd27      	ble.n	8017b2a <_strtol_l.constprop.0+0xc6>
 8017ada:	1c57      	adds	r7, r2, #1
 8017adc:	d007      	beq.n	8017aee <_strtol_l.constprop.0+0x8a>
 8017ade:	4581      	cmp	r9, r0
 8017ae0:	d320      	bcc.n	8017b24 <_strtol_l.constprop.0+0xc0>
 8017ae2:	d101      	bne.n	8017ae8 <_strtol_l.constprop.0+0x84>
 8017ae4:	45a2      	cmp	sl, r4
 8017ae6:	db1d      	blt.n	8017b24 <_strtol_l.constprop.0+0xc0>
 8017ae8:	fb00 4003 	mla	r0, r0, r3, r4
 8017aec:	2201      	movs	r2, #1
 8017aee:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017af2:	e7eb      	b.n	8017acc <_strtol_l.constprop.0+0x68>
 8017af4:	2c2b      	cmp	r4, #43	@ 0x2b
 8017af6:	bf04      	itt	eq
 8017af8:	782c      	ldrbeq	r4, [r5, #0]
 8017afa:	1c95      	addeq	r5, r2, #2
 8017afc:	e7cf      	b.n	8017a9e <_strtol_l.constprop.0+0x3a>
 8017afe:	2b00      	cmp	r3, #0
 8017b00:	d1da      	bne.n	8017ab8 <_strtol_l.constprop.0+0x54>
 8017b02:	2c30      	cmp	r4, #48	@ 0x30
 8017b04:	bf0c      	ite	eq
 8017b06:	2308      	moveq	r3, #8
 8017b08:	230a      	movne	r3, #10
 8017b0a:	e7d5      	b.n	8017ab8 <_strtol_l.constprop.0+0x54>
 8017b0c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8017b10:	2f19      	cmp	r7, #25
 8017b12:	d801      	bhi.n	8017b18 <_strtol_l.constprop.0+0xb4>
 8017b14:	3c37      	subs	r4, #55	@ 0x37
 8017b16:	e7de      	b.n	8017ad6 <_strtol_l.constprop.0+0x72>
 8017b18:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8017b1c:	2f19      	cmp	r7, #25
 8017b1e:	d804      	bhi.n	8017b2a <_strtol_l.constprop.0+0xc6>
 8017b20:	3c57      	subs	r4, #87	@ 0x57
 8017b22:	e7d8      	b.n	8017ad6 <_strtol_l.constprop.0+0x72>
 8017b24:	f04f 32ff 	mov.w	r2, #4294967295
 8017b28:	e7e1      	b.n	8017aee <_strtol_l.constprop.0+0x8a>
 8017b2a:	1c53      	adds	r3, r2, #1
 8017b2c:	d108      	bne.n	8017b40 <_strtol_l.constprop.0+0xdc>
 8017b2e:	2322      	movs	r3, #34	@ 0x22
 8017b30:	f8ce 3000 	str.w	r3, [lr]
 8017b34:	4660      	mov	r0, ip
 8017b36:	f1b8 0f00 	cmp.w	r8, #0
 8017b3a:	d0a0      	beq.n	8017a7e <_strtol_l.constprop.0+0x1a>
 8017b3c:	1e69      	subs	r1, r5, #1
 8017b3e:	e006      	b.n	8017b4e <_strtol_l.constprop.0+0xea>
 8017b40:	b106      	cbz	r6, 8017b44 <_strtol_l.constprop.0+0xe0>
 8017b42:	4240      	negs	r0, r0
 8017b44:	f1b8 0f00 	cmp.w	r8, #0
 8017b48:	d099      	beq.n	8017a7e <_strtol_l.constprop.0+0x1a>
 8017b4a:	2a00      	cmp	r2, #0
 8017b4c:	d1f6      	bne.n	8017b3c <_strtol_l.constprop.0+0xd8>
 8017b4e:	f8c8 1000 	str.w	r1, [r8]
 8017b52:	e794      	b.n	8017a7e <_strtol_l.constprop.0+0x1a>
 8017b54:	08019f69 	.word	0x08019f69

08017b58 <strtol>:
 8017b58:	4613      	mov	r3, r2
 8017b5a:	460a      	mov	r2, r1
 8017b5c:	4601      	mov	r1, r0
 8017b5e:	4802      	ldr	r0, [pc, #8]	@ (8017b68 <strtol+0x10>)
 8017b60:	6800      	ldr	r0, [r0, #0]
 8017b62:	f7ff bf7f 	b.w	8017a64 <_strtol_l.constprop.0>
 8017b66:	bf00      	nop
 8017b68:	24000240 	.word	0x24000240

08017b6c <std>:
 8017b6c:	2300      	movs	r3, #0
 8017b6e:	b510      	push	{r4, lr}
 8017b70:	4604      	mov	r4, r0
 8017b72:	e9c0 3300 	strd	r3, r3, [r0]
 8017b76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017b7a:	6083      	str	r3, [r0, #8]
 8017b7c:	8181      	strh	r1, [r0, #12]
 8017b7e:	6643      	str	r3, [r0, #100]	@ 0x64
 8017b80:	81c2      	strh	r2, [r0, #14]
 8017b82:	6183      	str	r3, [r0, #24]
 8017b84:	4619      	mov	r1, r3
 8017b86:	2208      	movs	r2, #8
 8017b88:	305c      	adds	r0, #92	@ 0x5c
 8017b8a:	f000 f8f4 	bl	8017d76 <memset>
 8017b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8017bc4 <std+0x58>)
 8017b90:	6263      	str	r3, [r4, #36]	@ 0x24
 8017b92:	4b0d      	ldr	r3, [pc, #52]	@ (8017bc8 <std+0x5c>)
 8017b94:	62a3      	str	r3, [r4, #40]	@ 0x28
 8017b96:	4b0d      	ldr	r3, [pc, #52]	@ (8017bcc <std+0x60>)
 8017b98:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8017b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8017bd0 <std+0x64>)
 8017b9c:	6323      	str	r3, [r4, #48]	@ 0x30
 8017b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8017bd4 <std+0x68>)
 8017ba0:	6224      	str	r4, [r4, #32]
 8017ba2:	429c      	cmp	r4, r3
 8017ba4:	d006      	beq.n	8017bb4 <std+0x48>
 8017ba6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8017baa:	4294      	cmp	r4, r2
 8017bac:	d002      	beq.n	8017bb4 <std+0x48>
 8017bae:	33d0      	adds	r3, #208	@ 0xd0
 8017bb0:	429c      	cmp	r4, r3
 8017bb2:	d105      	bne.n	8017bc0 <std+0x54>
 8017bb4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8017bb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017bbc:	f000 b972 	b.w	8017ea4 <__retarget_lock_init_recursive>
 8017bc0:	bd10      	pop	{r4, pc}
 8017bc2:	bf00      	nop
 8017bc4:	08017cf1 	.word	0x08017cf1
 8017bc8:	08017d13 	.word	0x08017d13
 8017bcc:	08017d4b 	.word	0x08017d4b
 8017bd0:	08017d6f 	.word	0x08017d6f
 8017bd4:	2400682c 	.word	0x2400682c

08017bd8 <stdio_exit_handler>:
 8017bd8:	4a02      	ldr	r2, [pc, #8]	@ (8017be4 <stdio_exit_handler+0xc>)
 8017bda:	4903      	ldr	r1, [pc, #12]	@ (8017be8 <stdio_exit_handler+0x10>)
 8017bdc:	4803      	ldr	r0, [pc, #12]	@ (8017bec <stdio_exit_handler+0x14>)
 8017bde:	f000 b869 	b.w	8017cb4 <_fwalk_sglue>
 8017be2:	bf00      	nop
 8017be4:	240000c8 	.word	0x240000c8
 8017be8:	080191e1 	.word	0x080191e1
 8017bec:	24000244 	.word	0x24000244

08017bf0 <cleanup_stdio>:
 8017bf0:	6841      	ldr	r1, [r0, #4]
 8017bf2:	4b0c      	ldr	r3, [pc, #48]	@ (8017c24 <cleanup_stdio+0x34>)
 8017bf4:	4299      	cmp	r1, r3
 8017bf6:	b510      	push	{r4, lr}
 8017bf8:	4604      	mov	r4, r0
 8017bfa:	d001      	beq.n	8017c00 <cleanup_stdio+0x10>
 8017bfc:	f001 faf0 	bl	80191e0 <_fflush_r>
 8017c00:	68a1      	ldr	r1, [r4, #8]
 8017c02:	4b09      	ldr	r3, [pc, #36]	@ (8017c28 <cleanup_stdio+0x38>)
 8017c04:	4299      	cmp	r1, r3
 8017c06:	d002      	beq.n	8017c0e <cleanup_stdio+0x1e>
 8017c08:	4620      	mov	r0, r4
 8017c0a:	f001 fae9 	bl	80191e0 <_fflush_r>
 8017c0e:	68e1      	ldr	r1, [r4, #12]
 8017c10:	4b06      	ldr	r3, [pc, #24]	@ (8017c2c <cleanup_stdio+0x3c>)
 8017c12:	4299      	cmp	r1, r3
 8017c14:	d004      	beq.n	8017c20 <cleanup_stdio+0x30>
 8017c16:	4620      	mov	r0, r4
 8017c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017c1c:	f001 bae0 	b.w	80191e0 <_fflush_r>
 8017c20:	bd10      	pop	{r4, pc}
 8017c22:	bf00      	nop
 8017c24:	2400682c 	.word	0x2400682c
 8017c28:	24006894 	.word	0x24006894
 8017c2c:	240068fc 	.word	0x240068fc

08017c30 <global_stdio_init.part.0>:
 8017c30:	b510      	push	{r4, lr}
 8017c32:	4b0b      	ldr	r3, [pc, #44]	@ (8017c60 <global_stdio_init.part.0+0x30>)
 8017c34:	4c0b      	ldr	r4, [pc, #44]	@ (8017c64 <global_stdio_init.part.0+0x34>)
 8017c36:	4a0c      	ldr	r2, [pc, #48]	@ (8017c68 <global_stdio_init.part.0+0x38>)
 8017c38:	601a      	str	r2, [r3, #0]
 8017c3a:	4620      	mov	r0, r4
 8017c3c:	2200      	movs	r2, #0
 8017c3e:	2104      	movs	r1, #4
 8017c40:	f7ff ff94 	bl	8017b6c <std>
 8017c44:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8017c48:	2201      	movs	r2, #1
 8017c4a:	2109      	movs	r1, #9
 8017c4c:	f7ff ff8e 	bl	8017b6c <std>
 8017c50:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8017c54:	2202      	movs	r2, #2
 8017c56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017c5a:	2112      	movs	r1, #18
 8017c5c:	f7ff bf86 	b.w	8017b6c <std>
 8017c60:	24006964 	.word	0x24006964
 8017c64:	2400682c 	.word	0x2400682c
 8017c68:	08017bd9 	.word	0x08017bd9

08017c6c <__sfp_lock_acquire>:
 8017c6c:	4801      	ldr	r0, [pc, #4]	@ (8017c74 <__sfp_lock_acquire+0x8>)
 8017c6e:	f000 b91a 	b.w	8017ea6 <__retarget_lock_acquire_recursive>
 8017c72:	bf00      	nop
 8017c74:	2400696d 	.word	0x2400696d

08017c78 <__sfp_lock_release>:
 8017c78:	4801      	ldr	r0, [pc, #4]	@ (8017c80 <__sfp_lock_release+0x8>)
 8017c7a:	f000 b915 	b.w	8017ea8 <__retarget_lock_release_recursive>
 8017c7e:	bf00      	nop
 8017c80:	2400696d 	.word	0x2400696d

08017c84 <__sinit>:
 8017c84:	b510      	push	{r4, lr}
 8017c86:	4604      	mov	r4, r0
 8017c88:	f7ff fff0 	bl	8017c6c <__sfp_lock_acquire>
 8017c8c:	6a23      	ldr	r3, [r4, #32]
 8017c8e:	b11b      	cbz	r3, 8017c98 <__sinit+0x14>
 8017c90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017c94:	f7ff bff0 	b.w	8017c78 <__sfp_lock_release>
 8017c98:	4b04      	ldr	r3, [pc, #16]	@ (8017cac <__sinit+0x28>)
 8017c9a:	6223      	str	r3, [r4, #32]
 8017c9c:	4b04      	ldr	r3, [pc, #16]	@ (8017cb0 <__sinit+0x2c>)
 8017c9e:	681b      	ldr	r3, [r3, #0]
 8017ca0:	2b00      	cmp	r3, #0
 8017ca2:	d1f5      	bne.n	8017c90 <__sinit+0xc>
 8017ca4:	f7ff ffc4 	bl	8017c30 <global_stdio_init.part.0>
 8017ca8:	e7f2      	b.n	8017c90 <__sinit+0xc>
 8017caa:	bf00      	nop
 8017cac:	08017bf1 	.word	0x08017bf1
 8017cb0:	24006964 	.word	0x24006964

08017cb4 <_fwalk_sglue>:
 8017cb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017cb8:	4607      	mov	r7, r0
 8017cba:	4688      	mov	r8, r1
 8017cbc:	4614      	mov	r4, r2
 8017cbe:	2600      	movs	r6, #0
 8017cc0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017cc4:	f1b9 0901 	subs.w	r9, r9, #1
 8017cc8:	d505      	bpl.n	8017cd6 <_fwalk_sglue+0x22>
 8017cca:	6824      	ldr	r4, [r4, #0]
 8017ccc:	2c00      	cmp	r4, #0
 8017cce:	d1f7      	bne.n	8017cc0 <_fwalk_sglue+0xc>
 8017cd0:	4630      	mov	r0, r6
 8017cd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017cd6:	89ab      	ldrh	r3, [r5, #12]
 8017cd8:	2b01      	cmp	r3, #1
 8017cda:	d907      	bls.n	8017cec <_fwalk_sglue+0x38>
 8017cdc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017ce0:	3301      	adds	r3, #1
 8017ce2:	d003      	beq.n	8017cec <_fwalk_sglue+0x38>
 8017ce4:	4629      	mov	r1, r5
 8017ce6:	4638      	mov	r0, r7
 8017ce8:	47c0      	blx	r8
 8017cea:	4306      	orrs	r6, r0
 8017cec:	3568      	adds	r5, #104	@ 0x68
 8017cee:	e7e9      	b.n	8017cc4 <_fwalk_sglue+0x10>

08017cf0 <__sread>:
 8017cf0:	b510      	push	{r4, lr}
 8017cf2:	460c      	mov	r4, r1
 8017cf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017cf8:	f000 f886 	bl	8017e08 <_read_r>
 8017cfc:	2800      	cmp	r0, #0
 8017cfe:	bfab      	itete	ge
 8017d00:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8017d02:	89a3      	ldrhlt	r3, [r4, #12]
 8017d04:	181b      	addge	r3, r3, r0
 8017d06:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8017d0a:	bfac      	ite	ge
 8017d0c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8017d0e:	81a3      	strhlt	r3, [r4, #12]
 8017d10:	bd10      	pop	{r4, pc}

08017d12 <__swrite>:
 8017d12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d16:	461f      	mov	r7, r3
 8017d18:	898b      	ldrh	r3, [r1, #12]
 8017d1a:	05db      	lsls	r3, r3, #23
 8017d1c:	4605      	mov	r5, r0
 8017d1e:	460c      	mov	r4, r1
 8017d20:	4616      	mov	r6, r2
 8017d22:	d505      	bpl.n	8017d30 <__swrite+0x1e>
 8017d24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017d28:	2302      	movs	r3, #2
 8017d2a:	2200      	movs	r2, #0
 8017d2c:	f000 f85a 	bl	8017de4 <_lseek_r>
 8017d30:	89a3      	ldrh	r3, [r4, #12]
 8017d32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017d36:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8017d3a:	81a3      	strh	r3, [r4, #12]
 8017d3c:	4632      	mov	r2, r6
 8017d3e:	463b      	mov	r3, r7
 8017d40:	4628      	mov	r0, r5
 8017d42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017d46:	f000 b871 	b.w	8017e2c <_write_r>

08017d4a <__sseek>:
 8017d4a:	b510      	push	{r4, lr}
 8017d4c:	460c      	mov	r4, r1
 8017d4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017d52:	f000 f847 	bl	8017de4 <_lseek_r>
 8017d56:	1c43      	adds	r3, r0, #1
 8017d58:	89a3      	ldrh	r3, [r4, #12]
 8017d5a:	bf15      	itete	ne
 8017d5c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8017d5e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8017d62:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8017d66:	81a3      	strheq	r3, [r4, #12]
 8017d68:	bf18      	it	ne
 8017d6a:	81a3      	strhne	r3, [r4, #12]
 8017d6c:	bd10      	pop	{r4, pc}

08017d6e <__sclose>:
 8017d6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017d72:	f000 b827 	b.w	8017dc4 <_close_r>

08017d76 <memset>:
 8017d76:	4402      	add	r2, r0
 8017d78:	4603      	mov	r3, r0
 8017d7a:	4293      	cmp	r3, r2
 8017d7c:	d100      	bne.n	8017d80 <memset+0xa>
 8017d7e:	4770      	bx	lr
 8017d80:	f803 1b01 	strb.w	r1, [r3], #1
 8017d84:	e7f9      	b.n	8017d7a <memset+0x4>

08017d86 <strchr>:
 8017d86:	b2c9      	uxtb	r1, r1
 8017d88:	4603      	mov	r3, r0
 8017d8a:	4618      	mov	r0, r3
 8017d8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017d90:	b112      	cbz	r2, 8017d98 <strchr+0x12>
 8017d92:	428a      	cmp	r2, r1
 8017d94:	d1f9      	bne.n	8017d8a <strchr+0x4>
 8017d96:	4770      	bx	lr
 8017d98:	2900      	cmp	r1, #0
 8017d9a:	bf18      	it	ne
 8017d9c:	2000      	movne	r0, #0
 8017d9e:	4770      	bx	lr

08017da0 <strncmp>:
 8017da0:	b510      	push	{r4, lr}
 8017da2:	b16a      	cbz	r2, 8017dc0 <strncmp+0x20>
 8017da4:	3901      	subs	r1, #1
 8017da6:	1884      	adds	r4, r0, r2
 8017da8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017dac:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8017db0:	429a      	cmp	r2, r3
 8017db2:	d103      	bne.n	8017dbc <strncmp+0x1c>
 8017db4:	42a0      	cmp	r0, r4
 8017db6:	d001      	beq.n	8017dbc <strncmp+0x1c>
 8017db8:	2a00      	cmp	r2, #0
 8017dba:	d1f5      	bne.n	8017da8 <strncmp+0x8>
 8017dbc:	1ad0      	subs	r0, r2, r3
 8017dbe:	bd10      	pop	{r4, pc}
 8017dc0:	4610      	mov	r0, r2
 8017dc2:	e7fc      	b.n	8017dbe <strncmp+0x1e>

08017dc4 <_close_r>:
 8017dc4:	b538      	push	{r3, r4, r5, lr}
 8017dc6:	4d06      	ldr	r5, [pc, #24]	@ (8017de0 <_close_r+0x1c>)
 8017dc8:	2300      	movs	r3, #0
 8017dca:	4604      	mov	r4, r0
 8017dcc:	4608      	mov	r0, r1
 8017dce:	602b      	str	r3, [r5, #0]
 8017dd0:	f7eb fd1e 	bl	8003810 <_close>
 8017dd4:	1c43      	adds	r3, r0, #1
 8017dd6:	d102      	bne.n	8017dde <_close_r+0x1a>
 8017dd8:	682b      	ldr	r3, [r5, #0]
 8017dda:	b103      	cbz	r3, 8017dde <_close_r+0x1a>
 8017ddc:	6023      	str	r3, [r4, #0]
 8017dde:	bd38      	pop	{r3, r4, r5, pc}
 8017de0:	24006968 	.word	0x24006968

08017de4 <_lseek_r>:
 8017de4:	b538      	push	{r3, r4, r5, lr}
 8017de6:	4d07      	ldr	r5, [pc, #28]	@ (8017e04 <_lseek_r+0x20>)
 8017de8:	4604      	mov	r4, r0
 8017dea:	4608      	mov	r0, r1
 8017dec:	4611      	mov	r1, r2
 8017dee:	2200      	movs	r2, #0
 8017df0:	602a      	str	r2, [r5, #0]
 8017df2:	461a      	mov	r2, r3
 8017df4:	f7eb fd33 	bl	800385e <_lseek>
 8017df8:	1c43      	adds	r3, r0, #1
 8017dfa:	d102      	bne.n	8017e02 <_lseek_r+0x1e>
 8017dfc:	682b      	ldr	r3, [r5, #0]
 8017dfe:	b103      	cbz	r3, 8017e02 <_lseek_r+0x1e>
 8017e00:	6023      	str	r3, [r4, #0]
 8017e02:	bd38      	pop	{r3, r4, r5, pc}
 8017e04:	24006968 	.word	0x24006968

08017e08 <_read_r>:
 8017e08:	b538      	push	{r3, r4, r5, lr}
 8017e0a:	4d07      	ldr	r5, [pc, #28]	@ (8017e28 <_read_r+0x20>)
 8017e0c:	4604      	mov	r4, r0
 8017e0e:	4608      	mov	r0, r1
 8017e10:	4611      	mov	r1, r2
 8017e12:	2200      	movs	r2, #0
 8017e14:	602a      	str	r2, [r5, #0]
 8017e16:	461a      	mov	r2, r3
 8017e18:	f7eb fcc1 	bl	800379e <_read>
 8017e1c:	1c43      	adds	r3, r0, #1
 8017e1e:	d102      	bne.n	8017e26 <_read_r+0x1e>
 8017e20:	682b      	ldr	r3, [r5, #0]
 8017e22:	b103      	cbz	r3, 8017e26 <_read_r+0x1e>
 8017e24:	6023      	str	r3, [r4, #0]
 8017e26:	bd38      	pop	{r3, r4, r5, pc}
 8017e28:	24006968 	.word	0x24006968

08017e2c <_write_r>:
 8017e2c:	b538      	push	{r3, r4, r5, lr}
 8017e2e:	4d07      	ldr	r5, [pc, #28]	@ (8017e4c <_write_r+0x20>)
 8017e30:	4604      	mov	r4, r0
 8017e32:	4608      	mov	r0, r1
 8017e34:	4611      	mov	r1, r2
 8017e36:	2200      	movs	r2, #0
 8017e38:	602a      	str	r2, [r5, #0]
 8017e3a:	461a      	mov	r2, r3
 8017e3c:	f7eb fccc 	bl	80037d8 <_write>
 8017e40:	1c43      	adds	r3, r0, #1
 8017e42:	d102      	bne.n	8017e4a <_write_r+0x1e>
 8017e44:	682b      	ldr	r3, [r5, #0]
 8017e46:	b103      	cbz	r3, 8017e4a <_write_r+0x1e>
 8017e48:	6023      	str	r3, [r4, #0]
 8017e4a:	bd38      	pop	{r3, r4, r5, pc}
 8017e4c:	24006968 	.word	0x24006968

08017e50 <__errno>:
 8017e50:	4b01      	ldr	r3, [pc, #4]	@ (8017e58 <__errno+0x8>)
 8017e52:	6818      	ldr	r0, [r3, #0]
 8017e54:	4770      	bx	lr
 8017e56:	bf00      	nop
 8017e58:	24000240 	.word	0x24000240

08017e5c <__libc_init_array>:
 8017e5c:	b570      	push	{r4, r5, r6, lr}
 8017e5e:	4d0d      	ldr	r5, [pc, #52]	@ (8017e94 <__libc_init_array+0x38>)
 8017e60:	4c0d      	ldr	r4, [pc, #52]	@ (8017e98 <__libc_init_array+0x3c>)
 8017e62:	1b64      	subs	r4, r4, r5
 8017e64:	10a4      	asrs	r4, r4, #2
 8017e66:	2600      	movs	r6, #0
 8017e68:	42a6      	cmp	r6, r4
 8017e6a:	d109      	bne.n	8017e80 <__libc_init_array+0x24>
 8017e6c:	4d0b      	ldr	r5, [pc, #44]	@ (8017e9c <__libc_init_array+0x40>)
 8017e6e:	4c0c      	ldr	r4, [pc, #48]	@ (8017ea0 <__libc_init_array+0x44>)
 8017e70:	f001 ff9a 	bl	8019da8 <_init>
 8017e74:	1b64      	subs	r4, r4, r5
 8017e76:	10a4      	asrs	r4, r4, #2
 8017e78:	2600      	movs	r6, #0
 8017e7a:	42a6      	cmp	r6, r4
 8017e7c:	d105      	bne.n	8017e8a <__libc_init_array+0x2e>
 8017e7e:	bd70      	pop	{r4, r5, r6, pc}
 8017e80:	f855 3b04 	ldr.w	r3, [r5], #4
 8017e84:	4798      	blx	r3
 8017e86:	3601      	adds	r6, #1
 8017e88:	e7ee      	b.n	8017e68 <__libc_init_array+0xc>
 8017e8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8017e8e:	4798      	blx	r3
 8017e90:	3601      	adds	r6, #1
 8017e92:	e7f2      	b.n	8017e7a <__libc_init_array+0x1e>
 8017e94:	0801ab58 	.word	0x0801ab58
 8017e98:	0801ab58 	.word	0x0801ab58
 8017e9c:	0801ab58 	.word	0x0801ab58
 8017ea0:	0801ab5c 	.word	0x0801ab5c

08017ea4 <__retarget_lock_init_recursive>:
 8017ea4:	4770      	bx	lr

08017ea6 <__retarget_lock_acquire_recursive>:
 8017ea6:	4770      	bx	lr

08017ea8 <__retarget_lock_release_recursive>:
 8017ea8:	4770      	bx	lr

08017eaa <memcpy>:
 8017eaa:	440a      	add	r2, r1
 8017eac:	4291      	cmp	r1, r2
 8017eae:	f100 33ff 	add.w	r3, r0, #4294967295
 8017eb2:	d100      	bne.n	8017eb6 <memcpy+0xc>
 8017eb4:	4770      	bx	lr
 8017eb6:	b510      	push	{r4, lr}
 8017eb8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017ebc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017ec0:	4291      	cmp	r1, r2
 8017ec2:	d1f9      	bne.n	8017eb8 <memcpy+0xe>
 8017ec4:	bd10      	pop	{r4, pc}
	...

08017ec8 <nan>:
 8017ec8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8017ed0 <nan+0x8>
 8017ecc:	4770      	bx	lr
 8017ece:	bf00      	nop
 8017ed0:	00000000 	.word	0x00000000
 8017ed4:	7ff80000 	.word	0x7ff80000

08017ed8 <_free_r>:
 8017ed8:	b538      	push	{r3, r4, r5, lr}
 8017eda:	4605      	mov	r5, r0
 8017edc:	2900      	cmp	r1, #0
 8017ede:	d041      	beq.n	8017f64 <_free_r+0x8c>
 8017ee0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017ee4:	1f0c      	subs	r4, r1, #4
 8017ee6:	2b00      	cmp	r3, #0
 8017ee8:	bfb8      	it	lt
 8017eea:	18e4      	addlt	r4, r4, r3
 8017eec:	f000 fc2c 	bl	8018748 <__malloc_lock>
 8017ef0:	4a1d      	ldr	r2, [pc, #116]	@ (8017f68 <_free_r+0x90>)
 8017ef2:	6813      	ldr	r3, [r2, #0]
 8017ef4:	b933      	cbnz	r3, 8017f04 <_free_r+0x2c>
 8017ef6:	6063      	str	r3, [r4, #4]
 8017ef8:	6014      	str	r4, [r2, #0]
 8017efa:	4628      	mov	r0, r5
 8017efc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017f00:	f000 bc28 	b.w	8018754 <__malloc_unlock>
 8017f04:	42a3      	cmp	r3, r4
 8017f06:	d908      	bls.n	8017f1a <_free_r+0x42>
 8017f08:	6820      	ldr	r0, [r4, #0]
 8017f0a:	1821      	adds	r1, r4, r0
 8017f0c:	428b      	cmp	r3, r1
 8017f0e:	bf01      	itttt	eq
 8017f10:	6819      	ldreq	r1, [r3, #0]
 8017f12:	685b      	ldreq	r3, [r3, #4]
 8017f14:	1809      	addeq	r1, r1, r0
 8017f16:	6021      	streq	r1, [r4, #0]
 8017f18:	e7ed      	b.n	8017ef6 <_free_r+0x1e>
 8017f1a:	461a      	mov	r2, r3
 8017f1c:	685b      	ldr	r3, [r3, #4]
 8017f1e:	b10b      	cbz	r3, 8017f24 <_free_r+0x4c>
 8017f20:	42a3      	cmp	r3, r4
 8017f22:	d9fa      	bls.n	8017f1a <_free_r+0x42>
 8017f24:	6811      	ldr	r1, [r2, #0]
 8017f26:	1850      	adds	r0, r2, r1
 8017f28:	42a0      	cmp	r0, r4
 8017f2a:	d10b      	bne.n	8017f44 <_free_r+0x6c>
 8017f2c:	6820      	ldr	r0, [r4, #0]
 8017f2e:	4401      	add	r1, r0
 8017f30:	1850      	adds	r0, r2, r1
 8017f32:	4283      	cmp	r3, r0
 8017f34:	6011      	str	r1, [r2, #0]
 8017f36:	d1e0      	bne.n	8017efa <_free_r+0x22>
 8017f38:	6818      	ldr	r0, [r3, #0]
 8017f3a:	685b      	ldr	r3, [r3, #4]
 8017f3c:	6053      	str	r3, [r2, #4]
 8017f3e:	4408      	add	r0, r1
 8017f40:	6010      	str	r0, [r2, #0]
 8017f42:	e7da      	b.n	8017efa <_free_r+0x22>
 8017f44:	d902      	bls.n	8017f4c <_free_r+0x74>
 8017f46:	230c      	movs	r3, #12
 8017f48:	602b      	str	r3, [r5, #0]
 8017f4a:	e7d6      	b.n	8017efa <_free_r+0x22>
 8017f4c:	6820      	ldr	r0, [r4, #0]
 8017f4e:	1821      	adds	r1, r4, r0
 8017f50:	428b      	cmp	r3, r1
 8017f52:	bf04      	itt	eq
 8017f54:	6819      	ldreq	r1, [r3, #0]
 8017f56:	685b      	ldreq	r3, [r3, #4]
 8017f58:	6063      	str	r3, [r4, #4]
 8017f5a:	bf04      	itt	eq
 8017f5c:	1809      	addeq	r1, r1, r0
 8017f5e:	6021      	streq	r1, [r4, #0]
 8017f60:	6054      	str	r4, [r2, #4]
 8017f62:	e7ca      	b.n	8017efa <_free_r+0x22>
 8017f64:	bd38      	pop	{r3, r4, r5, pc}
 8017f66:	bf00      	nop
 8017f68:	24006974 	.word	0x24006974

08017f6c <rshift>:
 8017f6c:	6903      	ldr	r3, [r0, #16]
 8017f6e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8017f72:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017f76:	ea4f 1261 	mov.w	r2, r1, asr #5
 8017f7a:	f100 0414 	add.w	r4, r0, #20
 8017f7e:	dd45      	ble.n	801800c <rshift+0xa0>
 8017f80:	f011 011f 	ands.w	r1, r1, #31
 8017f84:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8017f88:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8017f8c:	d10c      	bne.n	8017fa8 <rshift+0x3c>
 8017f8e:	f100 0710 	add.w	r7, r0, #16
 8017f92:	4629      	mov	r1, r5
 8017f94:	42b1      	cmp	r1, r6
 8017f96:	d334      	bcc.n	8018002 <rshift+0x96>
 8017f98:	1a9b      	subs	r3, r3, r2
 8017f9a:	009b      	lsls	r3, r3, #2
 8017f9c:	1eea      	subs	r2, r5, #3
 8017f9e:	4296      	cmp	r6, r2
 8017fa0:	bf38      	it	cc
 8017fa2:	2300      	movcc	r3, #0
 8017fa4:	4423      	add	r3, r4
 8017fa6:	e015      	b.n	8017fd4 <rshift+0x68>
 8017fa8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8017fac:	f1c1 0820 	rsb	r8, r1, #32
 8017fb0:	40cf      	lsrs	r7, r1
 8017fb2:	f105 0e04 	add.w	lr, r5, #4
 8017fb6:	46a1      	mov	r9, r4
 8017fb8:	4576      	cmp	r6, lr
 8017fba:	46f4      	mov	ip, lr
 8017fbc:	d815      	bhi.n	8017fea <rshift+0x7e>
 8017fbe:	1a9a      	subs	r2, r3, r2
 8017fc0:	0092      	lsls	r2, r2, #2
 8017fc2:	3a04      	subs	r2, #4
 8017fc4:	3501      	adds	r5, #1
 8017fc6:	42ae      	cmp	r6, r5
 8017fc8:	bf38      	it	cc
 8017fca:	2200      	movcc	r2, #0
 8017fcc:	18a3      	adds	r3, r4, r2
 8017fce:	50a7      	str	r7, [r4, r2]
 8017fd0:	b107      	cbz	r7, 8017fd4 <rshift+0x68>
 8017fd2:	3304      	adds	r3, #4
 8017fd4:	1b1a      	subs	r2, r3, r4
 8017fd6:	42a3      	cmp	r3, r4
 8017fd8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8017fdc:	bf08      	it	eq
 8017fde:	2300      	moveq	r3, #0
 8017fe0:	6102      	str	r2, [r0, #16]
 8017fe2:	bf08      	it	eq
 8017fe4:	6143      	streq	r3, [r0, #20]
 8017fe6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017fea:	f8dc c000 	ldr.w	ip, [ip]
 8017fee:	fa0c fc08 	lsl.w	ip, ip, r8
 8017ff2:	ea4c 0707 	orr.w	r7, ip, r7
 8017ff6:	f849 7b04 	str.w	r7, [r9], #4
 8017ffa:	f85e 7b04 	ldr.w	r7, [lr], #4
 8017ffe:	40cf      	lsrs	r7, r1
 8018000:	e7da      	b.n	8017fb8 <rshift+0x4c>
 8018002:	f851 cb04 	ldr.w	ip, [r1], #4
 8018006:	f847 cf04 	str.w	ip, [r7, #4]!
 801800a:	e7c3      	b.n	8017f94 <rshift+0x28>
 801800c:	4623      	mov	r3, r4
 801800e:	e7e1      	b.n	8017fd4 <rshift+0x68>

08018010 <__hexdig_fun>:
 8018010:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8018014:	2b09      	cmp	r3, #9
 8018016:	d802      	bhi.n	801801e <__hexdig_fun+0xe>
 8018018:	3820      	subs	r0, #32
 801801a:	b2c0      	uxtb	r0, r0
 801801c:	4770      	bx	lr
 801801e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8018022:	2b05      	cmp	r3, #5
 8018024:	d801      	bhi.n	801802a <__hexdig_fun+0x1a>
 8018026:	3847      	subs	r0, #71	@ 0x47
 8018028:	e7f7      	b.n	801801a <__hexdig_fun+0xa>
 801802a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801802e:	2b05      	cmp	r3, #5
 8018030:	d801      	bhi.n	8018036 <__hexdig_fun+0x26>
 8018032:	3827      	subs	r0, #39	@ 0x27
 8018034:	e7f1      	b.n	801801a <__hexdig_fun+0xa>
 8018036:	2000      	movs	r0, #0
 8018038:	4770      	bx	lr
	...

0801803c <__gethex>:
 801803c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018040:	b085      	sub	sp, #20
 8018042:	468a      	mov	sl, r1
 8018044:	9302      	str	r3, [sp, #8]
 8018046:	680b      	ldr	r3, [r1, #0]
 8018048:	9001      	str	r0, [sp, #4]
 801804a:	4690      	mov	r8, r2
 801804c:	1c9c      	adds	r4, r3, #2
 801804e:	46a1      	mov	r9, r4
 8018050:	f814 0b01 	ldrb.w	r0, [r4], #1
 8018054:	2830      	cmp	r0, #48	@ 0x30
 8018056:	d0fa      	beq.n	801804e <__gethex+0x12>
 8018058:	eba9 0303 	sub.w	r3, r9, r3
 801805c:	f1a3 0b02 	sub.w	fp, r3, #2
 8018060:	f7ff ffd6 	bl	8018010 <__hexdig_fun>
 8018064:	4605      	mov	r5, r0
 8018066:	2800      	cmp	r0, #0
 8018068:	d168      	bne.n	801813c <__gethex+0x100>
 801806a:	49a0      	ldr	r1, [pc, #640]	@ (80182ec <__gethex+0x2b0>)
 801806c:	2201      	movs	r2, #1
 801806e:	4648      	mov	r0, r9
 8018070:	f7ff fe96 	bl	8017da0 <strncmp>
 8018074:	4607      	mov	r7, r0
 8018076:	2800      	cmp	r0, #0
 8018078:	d167      	bne.n	801814a <__gethex+0x10e>
 801807a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801807e:	4626      	mov	r6, r4
 8018080:	f7ff ffc6 	bl	8018010 <__hexdig_fun>
 8018084:	2800      	cmp	r0, #0
 8018086:	d062      	beq.n	801814e <__gethex+0x112>
 8018088:	4623      	mov	r3, r4
 801808a:	7818      	ldrb	r0, [r3, #0]
 801808c:	2830      	cmp	r0, #48	@ 0x30
 801808e:	4699      	mov	r9, r3
 8018090:	f103 0301 	add.w	r3, r3, #1
 8018094:	d0f9      	beq.n	801808a <__gethex+0x4e>
 8018096:	f7ff ffbb 	bl	8018010 <__hexdig_fun>
 801809a:	fab0 f580 	clz	r5, r0
 801809e:	096d      	lsrs	r5, r5, #5
 80180a0:	f04f 0b01 	mov.w	fp, #1
 80180a4:	464a      	mov	r2, r9
 80180a6:	4616      	mov	r6, r2
 80180a8:	3201      	adds	r2, #1
 80180aa:	7830      	ldrb	r0, [r6, #0]
 80180ac:	f7ff ffb0 	bl	8018010 <__hexdig_fun>
 80180b0:	2800      	cmp	r0, #0
 80180b2:	d1f8      	bne.n	80180a6 <__gethex+0x6a>
 80180b4:	498d      	ldr	r1, [pc, #564]	@ (80182ec <__gethex+0x2b0>)
 80180b6:	2201      	movs	r2, #1
 80180b8:	4630      	mov	r0, r6
 80180ba:	f7ff fe71 	bl	8017da0 <strncmp>
 80180be:	2800      	cmp	r0, #0
 80180c0:	d13f      	bne.n	8018142 <__gethex+0x106>
 80180c2:	b944      	cbnz	r4, 80180d6 <__gethex+0x9a>
 80180c4:	1c74      	adds	r4, r6, #1
 80180c6:	4622      	mov	r2, r4
 80180c8:	4616      	mov	r6, r2
 80180ca:	3201      	adds	r2, #1
 80180cc:	7830      	ldrb	r0, [r6, #0]
 80180ce:	f7ff ff9f 	bl	8018010 <__hexdig_fun>
 80180d2:	2800      	cmp	r0, #0
 80180d4:	d1f8      	bne.n	80180c8 <__gethex+0x8c>
 80180d6:	1ba4      	subs	r4, r4, r6
 80180d8:	00a7      	lsls	r7, r4, #2
 80180da:	7833      	ldrb	r3, [r6, #0]
 80180dc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80180e0:	2b50      	cmp	r3, #80	@ 0x50
 80180e2:	d13e      	bne.n	8018162 <__gethex+0x126>
 80180e4:	7873      	ldrb	r3, [r6, #1]
 80180e6:	2b2b      	cmp	r3, #43	@ 0x2b
 80180e8:	d033      	beq.n	8018152 <__gethex+0x116>
 80180ea:	2b2d      	cmp	r3, #45	@ 0x2d
 80180ec:	d034      	beq.n	8018158 <__gethex+0x11c>
 80180ee:	1c71      	adds	r1, r6, #1
 80180f0:	2400      	movs	r4, #0
 80180f2:	7808      	ldrb	r0, [r1, #0]
 80180f4:	f7ff ff8c 	bl	8018010 <__hexdig_fun>
 80180f8:	1e43      	subs	r3, r0, #1
 80180fa:	b2db      	uxtb	r3, r3
 80180fc:	2b18      	cmp	r3, #24
 80180fe:	d830      	bhi.n	8018162 <__gethex+0x126>
 8018100:	f1a0 0210 	sub.w	r2, r0, #16
 8018104:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8018108:	f7ff ff82 	bl	8018010 <__hexdig_fun>
 801810c:	f100 3cff 	add.w	ip, r0, #4294967295
 8018110:	fa5f fc8c 	uxtb.w	ip, ip
 8018114:	f1bc 0f18 	cmp.w	ip, #24
 8018118:	f04f 030a 	mov.w	r3, #10
 801811c:	d91e      	bls.n	801815c <__gethex+0x120>
 801811e:	b104      	cbz	r4, 8018122 <__gethex+0xe6>
 8018120:	4252      	negs	r2, r2
 8018122:	4417      	add	r7, r2
 8018124:	f8ca 1000 	str.w	r1, [sl]
 8018128:	b1ed      	cbz	r5, 8018166 <__gethex+0x12a>
 801812a:	f1bb 0f00 	cmp.w	fp, #0
 801812e:	bf0c      	ite	eq
 8018130:	2506      	moveq	r5, #6
 8018132:	2500      	movne	r5, #0
 8018134:	4628      	mov	r0, r5
 8018136:	b005      	add	sp, #20
 8018138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801813c:	2500      	movs	r5, #0
 801813e:	462c      	mov	r4, r5
 8018140:	e7b0      	b.n	80180a4 <__gethex+0x68>
 8018142:	2c00      	cmp	r4, #0
 8018144:	d1c7      	bne.n	80180d6 <__gethex+0x9a>
 8018146:	4627      	mov	r7, r4
 8018148:	e7c7      	b.n	80180da <__gethex+0x9e>
 801814a:	464e      	mov	r6, r9
 801814c:	462f      	mov	r7, r5
 801814e:	2501      	movs	r5, #1
 8018150:	e7c3      	b.n	80180da <__gethex+0x9e>
 8018152:	2400      	movs	r4, #0
 8018154:	1cb1      	adds	r1, r6, #2
 8018156:	e7cc      	b.n	80180f2 <__gethex+0xb6>
 8018158:	2401      	movs	r4, #1
 801815a:	e7fb      	b.n	8018154 <__gethex+0x118>
 801815c:	fb03 0002 	mla	r0, r3, r2, r0
 8018160:	e7ce      	b.n	8018100 <__gethex+0xc4>
 8018162:	4631      	mov	r1, r6
 8018164:	e7de      	b.n	8018124 <__gethex+0xe8>
 8018166:	eba6 0309 	sub.w	r3, r6, r9
 801816a:	3b01      	subs	r3, #1
 801816c:	4629      	mov	r1, r5
 801816e:	2b07      	cmp	r3, #7
 8018170:	dc0a      	bgt.n	8018188 <__gethex+0x14c>
 8018172:	9801      	ldr	r0, [sp, #4]
 8018174:	f000 faf4 	bl	8018760 <_Balloc>
 8018178:	4604      	mov	r4, r0
 801817a:	b940      	cbnz	r0, 801818e <__gethex+0x152>
 801817c:	4b5c      	ldr	r3, [pc, #368]	@ (80182f0 <__gethex+0x2b4>)
 801817e:	4602      	mov	r2, r0
 8018180:	21e4      	movs	r1, #228	@ 0xe4
 8018182:	485c      	ldr	r0, [pc, #368]	@ (80182f4 <__gethex+0x2b8>)
 8018184:	f001 f864 	bl	8019250 <__assert_func>
 8018188:	3101      	adds	r1, #1
 801818a:	105b      	asrs	r3, r3, #1
 801818c:	e7ef      	b.n	801816e <__gethex+0x132>
 801818e:	f100 0a14 	add.w	sl, r0, #20
 8018192:	2300      	movs	r3, #0
 8018194:	4655      	mov	r5, sl
 8018196:	469b      	mov	fp, r3
 8018198:	45b1      	cmp	r9, r6
 801819a:	d337      	bcc.n	801820c <__gethex+0x1d0>
 801819c:	f845 bb04 	str.w	fp, [r5], #4
 80181a0:	eba5 050a 	sub.w	r5, r5, sl
 80181a4:	10ad      	asrs	r5, r5, #2
 80181a6:	6125      	str	r5, [r4, #16]
 80181a8:	4658      	mov	r0, fp
 80181aa:	f000 fbcb 	bl	8018944 <__hi0bits>
 80181ae:	016d      	lsls	r5, r5, #5
 80181b0:	f8d8 6000 	ldr.w	r6, [r8]
 80181b4:	1a2d      	subs	r5, r5, r0
 80181b6:	42b5      	cmp	r5, r6
 80181b8:	dd54      	ble.n	8018264 <__gethex+0x228>
 80181ba:	1bad      	subs	r5, r5, r6
 80181bc:	4629      	mov	r1, r5
 80181be:	4620      	mov	r0, r4
 80181c0:	f000 ff5c 	bl	801907c <__any_on>
 80181c4:	4681      	mov	r9, r0
 80181c6:	b178      	cbz	r0, 80181e8 <__gethex+0x1ac>
 80181c8:	1e6b      	subs	r3, r5, #1
 80181ca:	1159      	asrs	r1, r3, #5
 80181cc:	f003 021f 	and.w	r2, r3, #31
 80181d0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80181d4:	f04f 0901 	mov.w	r9, #1
 80181d8:	fa09 f202 	lsl.w	r2, r9, r2
 80181dc:	420a      	tst	r2, r1
 80181de:	d003      	beq.n	80181e8 <__gethex+0x1ac>
 80181e0:	454b      	cmp	r3, r9
 80181e2:	dc36      	bgt.n	8018252 <__gethex+0x216>
 80181e4:	f04f 0902 	mov.w	r9, #2
 80181e8:	4629      	mov	r1, r5
 80181ea:	4620      	mov	r0, r4
 80181ec:	f7ff febe 	bl	8017f6c <rshift>
 80181f0:	442f      	add	r7, r5
 80181f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80181f6:	42bb      	cmp	r3, r7
 80181f8:	da42      	bge.n	8018280 <__gethex+0x244>
 80181fa:	9801      	ldr	r0, [sp, #4]
 80181fc:	4621      	mov	r1, r4
 80181fe:	f000 faef 	bl	80187e0 <_Bfree>
 8018202:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018204:	2300      	movs	r3, #0
 8018206:	6013      	str	r3, [r2, #0]
 8018208:	25a3      	movs	r5, #163	@ 0xa3
 801820a:	e793      	b.n	8018134 <__gethex+0xf8>
 801820c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8018210:	2a2e      	cmp	r2, #46	@ 0x2e
 8018212:	d012      	beq.n	801823a <__gethex+0x1fe>
 8018214:	2b20      	cmp	r3, #32
 8018216:	d104      	bne.n	8018222 <__gethex+0x1e6>
 8018218:	f845 bb04 	str.w	fp, [r5], #4
 801821c:	f04f 0b00 	mov.w	fp, #0
 8018220:	465b      	mov	r3, fp
 8018222:	7830      	ldrb	r0, [r6, #0]
 8018224:	9303      	str	r3, [sp, #12]
 8018226:	f7ff fef3 	bl	8018010 <__hexdig_fun>
 801822a:	9b03      	ldr	r3, [sp, #12]
 801822c:	f000 000f 	and.w	r0, r0, #15
 8018230:	4098      	lsls	r0, r3
 8018232:	ea4b 0b00 	orr.w	fp, fp, r0
 8018236:	3304      	adds	r3, #4
 8018238:	e7ae      	b.n	8018198 <__gethex+0x15c>
 801823a:	45b1      	cmp	r9, r6
 801823c:	d8ea      	bhi.n	8018214 <__gethex+0x1d8>
 801823e:	492b      	ldr	r1, [pc, #172]	@ (80182ec <__gethex+0x2b0>)
 8018240:	9303      	str	r3, [sp, #12]
 8018242:	2201      	movs	r2, #1
 8018244:	4630      	mov	r0, r6
 8018246:	f7ff fdab 	bl	8017da0 <strncmp>
 801824a:	9b03      	ldr	r3, [sp, #12]
 801824c:	2800      	cmp	r0, #0
 801824e:	d1e1      	bne.n	8018214 <__gethex+0x1d8>
 8018250:	e7a2      	b.n	8018198 <__gethex+0x15c>
 8018252:	1ea9      	subs	r1, r5, #2
 8018254:	4620      	mov	r0, r4
 8018256:	f000 ff11 	bl	801907c <__any_on>
 801825a:	2800      	cmp	r0, #0
 801825c:	d0c2      	beq.n	80181e4 <__gethex+0x1a8>
 801825e:	f04f 0903 	mov.w	r9, #3
 8018262:	e7c1      	b.n	80181e8 <__gethex+0x1ac>
 8018264:	da09      	bge.n	801827a <__gethex+0x23e>
 8018266:	1b75      	subs	r5, r6, r5
 8018268:	4621      	mov	r1, r4
 801826a:	9801      	ldr	r0, [sp, #4]
 801826c:	462a      	mov	r2, r5
 801826e:	f000 fccf 	bl	8018c10 <__lshift>
 8018272:	1b7f      	subs	r7, r7, r5
 8018274:	4604      	mov	r4, r0
 8018276:	f100 0a14 	add.w	sl, r0, #20
 801827a:	f04f 0900 	mov.w	r9, #0
 801827e:	e7b8      	b.n	80181f2 <__gethex+0x1b6>
 8018280:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8018284:	42bd      	cmp	r5, r7
 8018286:	dd6f      	ble.n	8018368 <__gethex+0x32c>
 8018288:	1bed      	subs	r5, r5, r7
 801828a:	42ae      	cmp	r6, r5
 801828c:	dc34      	bgt.n	80182f8 <__gethex+0x2bc>
 801828e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018292:	2b02      	cmp	r3, #2
 8018294:	d022      	beq.n	80182dc <__gethex+0x2a0>
 8018296:	2b03      	cmp	r3, #3
 8018298:	d024      	beq.n	80182e4 <__gethex+0x2a8>
 801829a:	2b01      	cmp	r3, #1
 801829c:	d115      	bne.n	80182ca <__gethex+0x28e>
 801829e:	42ae      	cmp	r6, r5
 80182a0:	d113      	bne.n	80182ca <__gethex+0x28e>
 80182a2:	2e01      	cmp	r6, #1
 80182a4:	d10b      	bne.n	80182be <__gethex+0x282>
 80182a6:	9a02      	ldr	r2, [sp, #8]
 80182a8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80182ac:	6013      	str	r3, [r2, #0]
 80182ae:	2301      	movs	r3, #1
 80182b0:	6123      	str	r3, [r4, #16]
 80182b2:	f8ca 3000 	str.w	r3, [sl]
 80182b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80182b8:	2562      	movs	r5, #98	@ 0x62
 80182ba:	601c      	str	r4, [r3, #0]
 80182bc:	e73a      	b.n	8018134 <__gethex+0xf8>
 80182be:	1e71      	subs	r1, r6, #1
 80182c0:	4620      	mov	r0, r4
 80182c2:	f000 fedb 	bl	801907c <__any_on>
 80182c6:	2800      	cmp	r0, #0
 80182c8:	d1ed      	bne.n	80182a6 <__gethex+0x26a>
 80182ca:	9801      	ldr	r0, [sp, #4]
 80182cc:	4621      	mov	r1, r4
 80182ce:	f000 fa87 	bl	80187e0 <_Bfree>
 80182d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80182d4:	2300      	movs	r3, #0
 80182d6:	6013      	str	r3, [r2, #0]
 80182d8:	2550      	movs	r5, #80	@ 0x50
 80182da:	e72b      	b.n	8018134 <__gethex+0xf8>
 80182dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80182de:	2b00      	cmp	r3, #0
 80182e0:	d1f3      	bne.n	80182ca <__gethex+0x28e>
 80182e2:	e7e0      	b.n	80182a6 <__gethex+0x26a>
 80182e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80182e6:	2b00      	cmp	r3, #0
 80182e8:	d1dd      	bne.n	80182a6 <__gethex+0x26a>
 80182ea:	e7ee      	b.n	80182ca <__gethex+0x28e>
 80182ec:	08019f04 	.word	0x08019f04
 80182f0:	0801a071 	.word	0x0801a071
 80182f4:	0801a082 	.word	0x0801a082
 80182f8:	1e6f      	subs	r7, r5, #1
 80182fa:	f1b9 0f00 	cmp.w	r9, #0
 80182fe:	d130      	bne.n	8018362 <__gethex+0x326>
 8018300:	b127      	cbz	r7, 801830c <__gethex+0x2d0>
 8018302:	4639      	mov	r1, r7
 8018304:	4620      	mov	r0, r4
 8018306:	f000 feb9 	bl	801907c <__any_on>
 801830a:	4681      	mov	r9, r0
 801830c:	117a      	asrs	r2, r7, #5
 801830e:	2301      	movs	r3, #1
 8018310:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8018314:	f007 071f 	and.w	r7, r7, #31
 8018318:	40bb      	lsls	r3, r7
 801831a:	4213      	tst	r3, r2
 801831c:	4629      	mov	r1, r5
 801831e:	4620      	mov	r0, r4
 8018320:	bf18      	it	ne
 8018322:	f049 0902 	orrne.w	r9, r9, #2
 8018326:	f7ff fe21 	bl	8017f6c <rshift>
 801832a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801832e:	1b76      	subs	r6, r6, r5
 8018330:	2502      	movs	r5, #2
 8018332:	f1b9 0f00 	cmp.w	r9, #0
 8018336:	d047      	beq.n	80183c8 <__gethex+0x38c>
 8018338:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801833c:	2b02      	cmp	r3, #2
 801833e:	d015      	beq.n	801836c <__gethex+0x330>
 8018340:	2b03      	cmp	r3, #3
 8018342:	d017      	beq.n	8018374 <__gethex+0x338>
 8018344:	2b01      	cmp	r3, #1
 8018346:	d109      	bne.n	801835c <__gethex+0x320>
 8018348:	f019 0f02 	tst.w	r9, #2
 801834c:	d006      	beq.n	801835c <__gethex+0x320>
 801834e:	f8da 3000 	ldr.w	r3, [sl]
 8018352:	ea49 0903 	orr.w	r9, r9, r3
 8018356:	f019 0f01 	tst.w	r9, #1
 801835a:	d10e      	bne.n	801837a <__gethex+0x33e>
 801835c:	f045 0510 	orr.w	r5, r5, #16
 8018360:	e032      	b.n	80183c8 <__gethex+0x38c>
 8018362:	f04f 0901 	mov.w	r9, #1
 8018366:	e7d1      	b.n	801830c <__gethex+0x2d0>
 8018368:	2501      	movs	r5, #1
 801836a:	e7e2      	b.n	8018332 <__gethex+0x2f6>
 801836c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801836e:	f1c3 0301 	rsb	r3, r3, #1
 8018372:	930f      	str	r3, [sp, #60]	@ 0x3c
 8018374:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018376:	2b00      	cmp	r3, #0
 8018378:	d0f0      	beq.n	801835c <__gethex+0x320>
 801837a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801837e:	f104 0314 	add.w	r3, r4, #20
 8018382:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8018386:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801838a:	f04f 0c00 	mov.w	ip, #0
 801838e:	4618      	mov	r0, r3
 8018390:	f853 2b04 	ldr.w	r2, [r3], #4
 8018394:	f1b2 3fff 	cmp.w	r2, #4294967295
 8018398:	d01b      	beq.n	80183d2 <__gethex+0x396>
 801839a:	3201      	adds	r2, #1
 801839c:	6002      	str	r2, [r0, #0]
 801839e:	2d02      	cmp	r5, #2
 80183a0:	f104 0314 	add.w	r3, r4, #20
 80183a4:	d13c      	bne.n	8018420 <__gethex+0x3e4>
 80183a6:	f8d8 2000 	ldr.w	r2, [r8]
 80183aa:	3a01      	subs	r2, #1
 80183ac:	42b2      	cmp	r2, r6
 80183ae:	d109      	bne.n	80183c4 <__gethex+0x388>
 80183b0:	1171      	asrs	r1, r6, #5
 80183b2:	2201      	movs	r2, #1
 80183b4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80183b8:	f006 061f 	and.w	r6, r6, #31
 80183bc:	fa02 f606 	lsl.w	r6, r2, r6
 80183c0:	421e      	tst	r6, r3
 80183c2:	d13a      	bne.n	801843a <__gethex+0x3fe>
 80183c4:	f045 0520 	orr.w	r5, r5, #32
 80183c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80183ca:	601c      	str	r4, [r3, #0]
 80183cc:	9b02      	ldr	r3, [sp, #8]
 80183ce:	601f      	str	r7, [r3, #0]
 80183d0:	e6b0      	b.n	8018134 <__gethex+0xf8>
 80183d2:	4299      	cmp	r1, r3
 80183d4:	f843 cc04 	str.w	ip, [r3, #-4]
 80183d8:	d8d9      	bhi.n	801838e <__gethex+0x352>
 80183da:	68a3      	ldr	r3, [r4, #8]
 80183dc:	459b      	cmp	fp, r3
 80183de:	db17      	blt.n	8018410 <__gethex+0x3d4>
 80183e0:	6861      	ldr	r1, [r4, #4]
 80183e2:	9801      	ldr	r0, [sp, #4]
 80183e4:	3101      	adds	r1, #1
 80183e6:	f000 f9bb 	bl	8018760 <_Balloc>
 80183ea:	4681      	mov	r9, r0
 80183ec:	b918      	cbnz	r0, 80183f6 <__gethex+0x3ba>
 80183ee:	4b1a      	ldr	r3, [pc, #104]	@ (8018458 <__gethex+0x41c>)
 80183f0:	4602      	mov	r2, r0
 80183f2:	2184      	movs	r1, #132	@ 0x84
 80183f4:	e6c5      	b.n	8018182 <__gethex+0x146>
 80183f6:	6922      	ldr	r2, [r4, #16]
 80183f8:	3202      	adds	r2, #2
 80183fa:	f104 010c 	add.w	r1, r4, #12
 80183fe:	0092      	lsls	r2, r2, #2
 8018400:	300c      	adds	r0, #12
 8018402:	f7ff fd52 	bl	8017eaa <memcpy>
 8018406:	4621      	mov	r1, r4
 8018408:	9801      	ldr	r0, [sp, #4]
 801840a:	f000 f9e9 	bl	80187e0 <_Bfree>
 801840e:	464c      	mov	r4, r9
 8018410:	6923      	ldr	r3, [r4, #16]
 8018412:	1c5a      	adds	r2, r3, #1
 8018414:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8018418:	6122      	str	r2, [r4, #16]
 801841a:	2201      	movs	r2, #1
 801841c:	615a      	str	r2, [r3, #20]
 801841e:	e7be      	b.n	801839e <__gethex+0x362>
 8018420:	6922      	ldr	r2, [r4, #16]
 8018422:	455a      	cmp	r2, fp
 8018424:	dd0b      	ble.n	801843e <__gethex+0x402>
 8018426:	2101      	movs	r1, #1
 8018428:	4620      	mov	r0, r4
 801842a:	f7ff fd9f 	bl	8017f6c <rshift>
 801842e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018432:	3701      	adds	r7, #1
 8018434:	42bb      	cmp	r3, r7
 8018436:	f6ff aee0 	blt.w	80181fa <__gethex+0x1be>
 801843a:	2501      	movs	r5, #1
 801843c:	e7c2      	b.n	80183c4 <__gethex+0x388>
 801843e:	f016 061f 	ands.w	r6, r6, #31
 8018442:	d0fa      	beq.n	801843a <__gethex+0x3fe>
 8018444:	4453      	add	r3, sl
 8018446:	f1c6 0620 	rsb	r6, r6, #32
 801844a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801844e:	f000 fa79 	bl	8018944 <__hi0bits>
 8018452:	42b0      	cmp	r0, r6
 8018454:	dbe7      	blt.n	8018426 <__gethex+0x3ea>
 8018456:	e7f0      	b.n	801843a <__gethex+0x3fe>
 8018458:	0801a071 	.word	0x0801a071

0801845c <L_shift>:
 801845c:	f1c2 0208 	rsb	r2, r2, #8
 8018460:	0092      	lsls	r2, r2, #2
 8018462:	b570      	push	{r4, r5, r6, lr}
 8018464:	f1c2 0620 	rsb	r6, r2, #32
 8018468:	6843      	ldr	r3, [r0, #4]
 801846a:	6804      	ldr	r4, [r0, #0]
 801846c:	fa03 f506 	lsl.w	r5, r3, r6
 8018470:	432c      	orrs	r4, r5
 8018472:	40d3      	lsrs	r3, r2
 8018474:	6004      	str	r4, [r0, #0]
 8018476:	f840 3f04 	str.w	r3, [r0, #4]!
 801847a:	4288      	cmp	r0, r1
 801847c:	d3f4      	bcc.n	8018468 <L_shift+0xc>
 801847e:	bd70      	pop	{r4, r5, r6, pc}

08018480 <__match>:
 8018480:	b530      	push	{r4, r5, lr}
 8018482:	6803      	ldr	r3, [r0, #0]
 8018484:	3301      	adds	r3, #1
 8018486:	f811 4b01 	ldrb.w	r4, [r1], #1
 801848a:	b914      	cbnz	r4, 8018492 <__match+0x12>
 801848c:	6003      	str	r3, [r0, #0]
 801848e:	2001      	movs	r0, #1
 8018490:	bd30      	pop	{r4, r5, pc}
 8018492:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018496:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801849a:	2d19      	cmp	r5, #25
 801849c:	bf98      	it	ls
 801849e:	3220      	addls	r2, #32
 80184a0:	42a2      	cmp	r2, r4
 80184a2:	d0f0      	beq.n	8018486 <__match+0x6>
 80184a4:	2000      	movs	r0, #0
 80184a6:	e7f3      	b.n	8018490 <__match+0x10>

080184a8 <__hexnan>:
 80184a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80184ac:	680b      	ldr	r3, [r1, #0]
 80184ae:	6801      	ldr	r1, [r0, #0]
 80184b0:	115e      	asrs	r6, r3, #5
 80184b2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80184b6:	f013 031f 	ands.w	r3, r3, #31
 80184ba:	b087      	sub	sp, #28
 80184bc:	bf18      	it	ne
 80184be:	3604      	addne	r6, #4
 80184c0:	2500      	movs	r5, #0
 80184c2:	1f37      	subs	r7, r6, #4
 80184c4:	4682      	mov	sl, r0
 80184c6:	4690      	mov	r8, r2
 80184c8:	9301      	str	r3, [sp, #4]
 80184ca:	f846 5c04 	str.w	r5, [r6, #-4]
 80184ce:	46b9      	mov	r9, r7
 80184d0:	463c      	mov	r4, r7
 80184d2:	9502      	str	r5, [sp, #8]
 80184d4:	46ab      	mov	fp, r5
 80184d6:	784a      	ldrb	r2, [r1, #1]
 80184d8:	1c4b      	adds	r3, r1, #1
 80184da:	9303      	str	r3, [sp, #12]
 80184dc:	b342      	cbz	r2, 8018530 <__hexnan+0x88>
 80184de:	4610      	mov	r0, r2
 80184e0:	9105      	str	r1, [sp, #20]
 80184e2:	9204      	str	r2, [sp, #16]
 80184e4:	f7ff fd94 	bl	8018010 <__hexdig_fun>
 80184e8:	2800      	cmp	r0, #0
 80184ea:	d151      	bne.n	8018590 <__hexnan+0xe8>
 80184ec:	9a04      	ldr	r2, [sp, #16]
 80184ee:	9905      	ldr	r1, [sp, #20]
 80184f0:	2a20      	cmp	r2, #32
 80184f2:	d818      	bhi.n	8018526 <__hexnan+0x7e>
 80184f4:	9b02      	ldr	r3, [sp, #8]
 80184f6:	459b      	cmp	fp, r3
 80184f8:	dd13      	ble.n	8018522 <__hexnan+0x7a>
 80184fa:	454c      	cmp	r4, r9
 80184fc:	d206      	bcs.n	801850c <__hexnan+0x64>
 80184fe:	2d07      	cmp	r5, #7
 8018500:	dc04      	bgt.n	801850c <__hexnan+0x64>
 8018502:	462a      	mov	r2, r5
 8018504:	4649      	mov	r1, r9
 8018506:	4620      	mov	r0, r4
 8018508:	f7ff ffa8 	bl	801845c <L_shift>
 801850c:	4544      	cmp	r4, r8
 801850e:	d952      	bls.n	80185b6 <__hexnan+0x10e>
 8018510:	2300      	movs	r3, #0
 8018512:	f1a4 0904 	sub.w	r9, r4, #4
 8018516:	f844 3c04 	str.w	r3, [r4, #-4]
 801851a:	f8cd b008 	str.w	fp, [sp, #8]
 801851e:	464c      	mov	r4, r9
 8018520:	461d      	mov	r5, r3
 8018522:	9903      	ldr	r1, [sp, #12]
 8018524:	e7d7      	b.n	80184d6 <__hexnan+0x2e>
 8018526:	2a29      	cmp	r2, #41	@ 0x29
 8018528:	d157      	bne.n	80185da <__hexnan+0x132>
 801852a:	3102      	adds	r1, #2
 801852c:	f8ca 1000 	str.w	r1, [sl]
 8018530:	f1bb 0f00 	cmp.w	fp, #0
 8018534:	d051      	beq.n	80185da <__hexnan+0x132>
 8018536:	454c      	cmp	r4, r9
 8018538:	d206      	bcs.n	8018548 <__hexnan+0xa0>
 801853a:	2d07      	cmp	r5, #7
 801853c:	dc04      	bgt.n	8018548 <__hexnan+0xa0>
 801853e:	462a      	mov	r2, r5
 8018540:	4649      	mov	r1, r9
 8018542:	4620      	mov	r0, r4
 8018544:	f7ff ff8a 	bl	801845c <L_shift>
 8018548:	4544      	cmp	r4, r8
 801854a:	d936      	bls.n	80185ba <__hexnan+0x112>
 801854c:	f1a8 0204 	sub.w	r2, r8, #4
 8018550:	4623      	mov	r3, r4
 8018552:	f853 1b04 	ldr.w	r1, [r3], #4
 8018556:	f842 1f04 	str.w	r1, [r2, #4]!
 801855a:	429f      	cmp	r7, r3
 801855c:	d2f9      	bcs.n	8018552 <__hexnan+0xaa>
 801855e:	1b3b      	subs	r3, r7, r4
 8018560:	f023 0303 	bic.w	r3, r3, #3
 8018564:	3304      	adds	r3, #4
 8018566:	3401      	adds	r4, #1
 8018568:	3e03      	subs	r6, #3
 801856a:	42b4      	cmp	r4, r6
 801856c:	bf88      	it	hi
 801856e:	2304      	movhi	r3, #4
 8018570:	4443      	add	r3, r8
 8018572:	2200      	movs	r2, #0
 8018574:	f843 2b04 	str.w	r2, [r3], #4
 8018578:	429f      	cmp	r7, r3
 801857a:	d2fb      	bcs.n	8018574 <__hexnan+0xcc>
 801857c:	683b      	ldr	r3, [r7, #0]
 801857e:	b91b      	cbnz	r3, 8018588 <__hexnan+0xe0>
 8018580:	4547      	cmp	r7, r8
 8018582:	d128      	bne.n	80185d6 <__hexnan+0x12e>
 8018584:	2301      	movs	r3, #1
 8018586:	603b      	str	r3, [r7, #0]
 8018588:	2005      	movs	r0, #5
 801858a:	b007      	add	sp, #28
 801858c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018590:	3501      	adds	r5, #1
 8018592:	2d08      	cmp	r5, #8
 8018594:	f10b 0b01 	add.w	fp, fp, #1
 8018598:	dd06      	ble.n	80185a8 <__hexnan+0x100>
 801859a:	4544      	cmp	r4, r8
 801859c:	d9c1      	bls.n	8018522 <__hexnan+0x7a>
 801859e:	2300      	movs	r3, #0
 80185a0:	f844 3c04 	str.w	r3, [r4, #-4]
 80185a4:	2501      	movs	r5, #1
 80185a6:	3c04      	subs	r4, #4
 80185a8:	6822      	ldr	r2, [r4, #0]
 80185aa:	f000 000f 	and.w	r0, r0, #15
 80185ae:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80185b2:	6020      	str	r0, [r4, #0]
 80185b4:	e7b5      	b.n	8018522 <__hexnan+0x7a>
 80185b6:	2508      	movs	r5, #8
 80185b8:	e7b3      	b.n	8018522 <__hexnan+0x7a>
 80185ba:	9b01      	ldr	r3, [sp, #4]
 80185bc:	2b00      	cmp	r3, #0
 80185be:	d0dd      	beq.n	801857c <__hexnan+0xd4>
 80185c0:	f1c3 0320 	rsb	r3, r3, #32
 80185c4:	f04f 32ff 	mov.w	r2, #4294967295
 80185c8:	40da      	lsrs	r2, r3
 80185ca:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80185ce:	4013      	ands	r3, r2
 80185d0:	f846 3c04 	str.w	r3, [r6, #-4]
 80185d4:	e7d2      	b.n	801857c <__hexnan+0xd4>
 80185d6:	3f04      	subs	r7, #4
 80185d8:	e7d0      	b.n	801857c <__hexnan+0xd4>
 80185da:	2004      	movs	r0, #4
 80185dc:	e7d5      	b.n	801858a <__hexnan+0xe2>
	...

080185e0 <sbrk_aligned>:
 80185e0:	b570      	push	{r4, r5, r6, lr}
 80185e2:	4e0f      	ldr	r6, [pc, #60]	@ (8018620 <sbrk_aligned+0x40>)
 80185e4:	460c      	mov	r4, r1
 80185e6:	6831      	ldr	r1, [r6, #0]
 80185e8:	4605      	mov	r5, r0
 80185ea:	b911      	cbnz	r1, 80185f2 <sbrk_aligned+0x12>
 80185ec:	f000 fe20 	bl	8019230 <_sbrk_r>
 80185f0:	6030      	str	r0, [r6, #0]
 80185f2:	4621      	mov	r1, r4
 80185f4:	4628      	mov	r0, r5
 80185f6:	f000 fe1b 	bl	8019230 <_sbrk_r>
 80185fa:	1c43      	adds	r3, r0, #1
 80185fc:	d103      	bne.n	8018606 <sbrk_aligned+0x26>
 80185fe:	f04f 34ff 	mov.w	r4, #4294967295
 8018602:	4620      	mov	r0, r4
 8018604:	bd70      	pop	{r4, r5, r6, pc}
 8018606:	1cc4      	adds	r4, r0, #3
 8018608:	f024 0403 	bic.w	r4, r4, #3
 801860c:	42a0      	cmp	r0, r4
 801860e:	d0f8      	beq.n	8018602 <sbrk_aligned+0x22>
 8018610:	1a21      	subs	r1, r4, r0
 8018612:	4628      	mov	r0, r5
 8018614:	f000 fe0c 	bl	8019230 <_sbrk_r>
 8018618:	3001      	adds	r0, #1
 801861a:	d1f2      	bne.n	8018602 <sbrk_aligned+0x22>
 801861c:	e7ef      	b.n	80185fe <sbrk_aligned+0x1e>
 801861e:	bf00      	nop
 8018620:	24006970 	.word	0x24006970

08018624 <_malloc_r>:
 8018624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018628:	1ccd      	adds	r5, r1, #3
 801862a:	f025 0503 	bic.w	r5, r5, #3
 801862e:	3508      	adds	r5, #8
 8018630:	2d0c      	cmp	r5, #12
 8018632:	bf38      	it	cc
 8018634:	250c      	movcc	r5, #12
 8018636:	2d00      	cmp	r5, #0
 8018638:	4606      	mov	r6, r0
 801863a:	db01      	blt.n	8018640 <_malloc_r+0x1c>
 801863c:	42a9      	cmp	r1, r5
 801863e:	d904      	bls.n	801864a <_malloc_r+0x26>
 8018640:	230c      	movs	r3, #12
 8018642:	6033      	str	r3, [r6, #0]
 8018644:	2000      	movs	r0, #0
 8018646:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801864a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8018720 <_malloc_r+0xfc>
 801864e:	f000 f87b 	bl	8018748 <__malloc_lock>
 8018652:	f8d8 3000 	ldr.w	r3, [r8]
 8018656:	461c      	mov	r4, r3
 8018658:	bb44      	cbnz	r4, 80186ac <_malloc_r+0x88>
 801865a:	4629      	mov	r1, r5
 801865c:	4630      	mov	r0, r6
 801865e:	f7ff ffbf 	bl	80185e0 <sbrk_aligned>
 8018662:	1c43      	adds	r3, r0, #1
 8018664:	4604      	mov	r4, r0
 8018666:	d158      	bne.n	801871a <_malloc_r+0xf6>
 8018668:	f8d8 4000 	ldr.w	r4, [r8]
 801866c:	4627      	mov	r7, r4
 801866e:	2f00      	cmp	r7, #0
 8018670:	d143      	bne.n	80186fa <_malloc_r+0xd6>
 8018672:	2c00      	cmp	r4, #0
 8018674:	d04b      	beq.n	801870e <_malloc_r+0xea>
 8018676:	6823      	ldr	r3, [r4, #0]
 8018678:	4639      	mov	r1, r7
 801867a:	4630      	mov	r0, r6
 801867c:	eb04 0903 	add.w	r9, r4, r3
 8018680:	f000 fdd6 	bl	8019230 <_sbrk_r>
 8018684:	4581      	cmp	r9, r0
 8018686:	d142      	bne.n	801870e <_malloc_r+0xea>
 8018688:	6821      	ldr	r1, [r4, #0]
 801868a:	1a6d      	subs	r5, r5, r1
 801868c:	4629      	mov	r1, r5
 801868e:	4630      	mov	r0, r6
 8018690:	f7ff ffa6 	bl	80185e0 <sbrk_aligned>
 8018694:	3001      	adds	r0, #1
 8018696:	d03a      	beq.n	801870e <_malloc_r+0xea>
 8018698:	6823      	ldr	r3, [r4, #0]
 801869a:	442b      	add	r3, r5
 801869c:	6023      	str	r3, [r4, #0]
 801869e:	f8d8 3000 	ldr.w	r3, [r8]
 80186a2:	685a      	ldr	r2, [r3, #4]
 80186a4:	bb62      	cbnz	r2, 8018700 <_malloc_r+0xdc>
 80186a6:	f8c8 7000 	str.w	r7, [r8]
 80186aa:	e00f      	b.n	80186cc <_malloc_r+0xa8>
 80186ac:	6822      	ldr	r2, [r4, #0]
 80186ae:	1b52      	subs	r2, r2, r5
 80186b0:	d420      	bmi.n	80186f4 <_malloc_r+0xd0>
 80186b2:	2a0b      	cmp	r2, #11
 80186b4:	d917      	bls.n	80186e6 <_malloc_r+0xc2>
 80186b6:	1961      	adds	r1, r4, r5
 80186b8:	42a3      	cmp	r3, r4
 80186ba:	6025      	str	r5, [r4, #0]
 80186bc:	bf18      	it	ne
 80186be:	6059      	strne	r1, [r3, #4]
 80186c0:	6863      	ldr	r3, [r4, #4]
 80186c2:	bf08      	it	eq
 80186c4:	f8c8 1000 	streq.w	r1, [r8]
 80186c8:	5162      	str	r2, [r4, r5]
 80186ca:	604b      	str	r3, [r1, #4]
 80186cc:	4630      	mov	r0, r6
 80186ce:	f000 f841 	bl	8018754 <__malloc_unlock>
 80186d2:	f104 000b 	add.w	r0, r4, #11
 80186d6:	1d23      	adds	r3, r4, #4
 80186d8:	f020 0007 	bic.w	r0, r0, #7
 80186dc:	1ac2      	subs	r2, r0, r3
 80186de:	bf1c      	itt	ne
 80186e0:	1a1b      	subne	r3, r3, r0
 80186e2:	50a3      	strne	r3, [r4, r2]
 80186e4:	e7af      	b.n	8018646 <_malloc_r+0x22>
 80186e6:	6862      	ldr	r2, [r4, #4]
 80186e8:	42a3      	cmp	r3, r4
 80186ea:	bf0c      	ite	eq
 80186ec:	f8c8 2000 	streq.w	r2, [r8]
 80186f0:	605a      	strne	r2, [r3, #4]
 80186f2:	e7eb      	b.n	80186cc <_malloc_r+0xa8>
 80186f4:	4623      	mov	r3, r4
 80186f6:	6864      	ldr	r4, [r4, #4]
 80186f8:	e7ae      	b.n	8018658 <_malloc_r+0x34>
 80186fa:	463c      	mov	r4, r7
 80186fc:	687f      	ldr	r7, [r7, #4]
 80186fe:	e7b6      	b.n	801866e <_malloc_r+0x4a>
 8018700:	461a      	mov	r2, r3
 8018702:	685b      	ldr	r3, [r3, #4]
 8018704:	42a3      	cmp	r3, r4
 8018706:	d1fb      	bne.n	8018700 <_malloc_r+0xdc>
 8018708:	2300      	movs	r3, #0
 801870a:	6053      	str	r3, [r2, #4]
 801870c:	e7de      	b.n	80186cc <_malloc_r+0xa8>
 801870e:	230c      	movs	r3, #12
 8018710:	6033      	str	r3, [r6, #0]
 8018712:	4630      	mov	r0, r6
 8018714:	f000 f81e 	bl	8018754 <__malloc_unlock>
 8018718:	e794      	b.n	8018644 <_malloc_r+0x20>
 801871a:	6005      	str	r5, [r0, #0]
 801871c:	e7d6      	b.n	80186cc <_malloc_r+0xa8>
 801871e:	bf00      	nop
 8018720:	24006974 	.word	0x24006974

08018724 <__ascii_mbtowc>:
 8018724:	b082      	sub	sp, #8
 8018726:	b901      	cbnz	r1, 801872a <__ascii_mbtowc+0x6>
 8018728:	a901      	add	r1, sp, #4
 801872a:	b142      	cbz	r2, 801873e <__ascii_mbtowc+0x1a>
 801872c:	b14b      	cbz	r3, 8018742 <__ascii_mbtowc+0x1e>
 801872e:	7813      	ldrb	r3, [r2, #0]
 8018730:	600b      	str	r3, [r1, #0]
 8018732:	7812      	ldrb	r2, [r2, #0]
 8018734:	1e10      	subs	r0, r2, #0
 8018736:	bf18      	it	ne
 8018738:	2001      	movne	r0, #1
 801873a:	b002      	add	sp, #8
 801873c:	4770      	bx	lr
 801873e:	4610      	mov	r0, r2
 8018740:	e7fb      	b.n	801873a <__ascii_mbtowc+0x16>
 8018742:	f06f 0001 	mvn.w	r0, #1
 8018746:	e7f8      	b.n	801873a <__ascii_mbtowc+0x16>

08018748 <__malloc_lock>:
 8018748:	4801      	ldr	r0, [pc, #4]	@ (8018750 <__malloc_lock+0x8>)
 801874a:	f7ff bbac 	b.w	8017ea6 <__retarget_lock_acquire_recursive>
 801874e:	bf00      	nop
 8018750:	2400696c 	.word	0x2400696c

08018754 <__malloc_unlock>:
 8018754:	4801      	ldr	r0, [pc, #4]	@ (801875c <__malloc_unlock+0x8>)
 8018756:	f7ff bba7 	b.w	8017ea8 <__retarget_lock_release_recursive>
 801875a:	bf00      	nop
 801875c:	2400696c 	.word	0x2400696c

08018760 <_Balloc>:
 8018760:	b570      	push	{r4, r5, r6, lr}
 8018762:	69c6      	ldr	r6, [r0, #28]
 8018764:	4604      	mov	r4, r0
 8018766:	460d      	mov	r5, r1
 8018768:	b976      	cbnz	r6, 8018788 <_Balloc+0x28>
 801876a:	2010      	movs	r0, #16
 801876c:	f000 fda2 	bl	80192b4 <malloc>
 8018770:	4602      	mov	r2, r0
 8018772:	61e0      	str	r0, [r4, #28]
 8018774:	b920      	cbnz	r0, 8018780 <_Balloc+0x20>
 8018776:	4b18      	ldr	r3, [pc, #96]	@ (80187d8 <_Balloc+0x78>)
 8018778:	4818      	ldr	r0, [pc, #96]	@ (80187dc <_Balloc+0x7c>)
 801877a:	216b      	movs	r1, #107	@ 0x6b
 801877c:	f000 fd68 	bl	8019250 <__assert_func>
 8018780:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018784:	6006      	str	r6, [r0, #0]
 8018786:	60c6      	str	r6, [r0, #12]
 8018788:	69e6      	ldr	r6, [r4, #28]
 801878a:	68f3      	ldr	r3, [r6, #12]
 801878c:	b183      	cbz	r3, 80187b0 <_Balloc+0x50>
 801878e:	69e3      	ldr	r3, [r4, #28]
 8018790:	68db      	ldr	r3, [r3, #12]
 8018792:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8018796:	b9b8      	cbnz	r0, 80187c8 <_Balloc+0x68>
 8018798:	2101      	movs	r1, #1
 801879a:	fa01 f605 	lsl.w	r6, r1, r5
 801879e:	1d72      	adds	r2, r6, #5
 80187a0:	0092      	lsls	r2, r2, #2
 80187a2:	4620      	mov	r0, r4
 80187a4:	f000 fd72 	bl	801928c <_calloc_r>
 80187a8:	b160      	cbz	r0, 80187c4 <_Balloc+0x64>
 80187aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80187ae:	e00e      	b.n	80187ce <_Balloc+0x6e>
 80187b0:	2221      	movs	r2, #33	@ 0x21
 80187b2:	2104      	movs	r1, #4
 80187b4:	4620      	mov	r0, r4
 80187b6:	f000 fd69 	bl	801928c <_calloc_r>
 80187ba:	69e3      	ldr	r3, [r4, #28]
 80187bc:	60f0      	str	r0, [r6, #12]
 80187be:	68db      	ldr	r3, [r3, #12]
 80187c0:	2b00      	cmp	r3, #0
 80187c2:	d1e4      	bne.n	801878e <_Balloc+0x2e>
 80187c4:	2000      	movs	r0, #0
 80187c6:	bd70      	pop	{r4, r5, r6, pc}
 80187c8:	6802      	ldr	r2, [r0, #0]
 80187ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80187ce:	2300      	movs	r3, #0
 80187d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80187d4:	e7f7      	b.n	80187c6 <_Balloc+0x66>
 80187d6:	bf00      	nop
 80187d8:	0801a0e2 	.word	0x0801a0e2
 80187dc:	0801a0f9 	.word	0x0801a0f9

080187e0 <_Bfree>:
 80187e0:	b570      	push	{r4, r5, r6, lr}
 80187e2:	69c6      	ldr	r6, [r0, #28]
 80187e4:	4605      	mov	r5, r0
 80187e6:	460c      	mov	r4, r1
 80187e8:	b976      	cbnz	r6, 8018808 <_Bfree+0x28>
 80187ea:	2010      	movs	r0, #16
 80187ec:	f000 fd62 	bl	80192b4 <malloc>
 80187f0:	4602      	mov	r2, r0
 80187f2:	61e8      	str	r0, [r5, #28]
 80187f4:	b920      	cbnz	r0, 8018800 <_Bfree+0x20>
 80187f6:	4b09      	ldr	r3, [pc, #36]	@ (801881c <_Bfree+0x3c>)
 80187f8:	4809      	ldr	r0, [pc, #36]	@ (8018820 <_Bfree+0x40>)
 80187fa:	218f      	movs	r1, #143	@ 0x8f
 80187fc:	f000 fd28 	bl	8019250 <__assert_func>
 8018800:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018804:	6006      	str	r6, [r0, #0]
 8018806:	60c6      	str	r6, [r0, #12]
 8018808:	b13c      	cbz	r4, 801881a <_Bfree+0x3a>
 801880a:	69eb      	ldr	r3, [r5, #28]
 801880c:	6862      	ldr	r2, [r4, #4]
 801880e:	68db      	ldr	r3, [r3, #12]
 8018810:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018814:	6021      	str	r1, [r4, #0]
 8018816:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801881a:	bd70      	pop	{r4, r5, r6, pc}
 801881c:	0801a0e2 	.word	0x0801a0e2
 8018820:	0801a0f9 	.word	0x0801a0f9

08018824 <__multadd>:
 8018824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018828:	690d      	ldr	r5, [r1, #16]
 801882a:	4607      	mov	r7, r0
 801882c:	460c      	mov	r4, r1
 801882e:	461e      	mov	r6, r3
 8018830:	f101 0c14 	add.w	ip, r1, #20
 8018834:	2000      	movs	r0, #0
 8018836:	f8dc 3000 	ldr.w	r3, [ip]
 801883a:	b299      	uxth	r1, r3
 801883c:	fb02 6101 	mla	r1, r2, r1, r6
 8018840:	0c1e      	lsrs	r6, r3, #16
 8018842:	0c0b      	lsrs	r3, r1, #16
 8018844:	fb02 3306 	mla	r3, r2, r6, r3
 8018848:	b289      	uxth	r1, r1
 801884a:	3001      	adds	r0, #1
 801884c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8018850:	4285      	cmp	r5, r0
 8018852:	f84c 1b04 	str.w	r1, [ip], #4
 8018856:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801885a:	dcec      	bgt.n	8018836 <__multadd+0x12>
 801885c:	b30e      	cbz	r6, 80188a2 <__multadd+0x7e>
 801885e:	68a3      	ldr	r3, [r4, #8]
 8018860:	42ab      	cmp	r3, r5
 8018862:	dc19      	bgt.n	8018898 <__multadd+0x74>
 8018864:	6861      	ldr	r1, [r4, #4]
 8018866:	4638      	mov	r0, r7
 8018868:	3101      	adds	r1, #1
 801886a:	f7ff ff79 	bl	8018760 <_Balloc>
 801886e:	4680      	mov	r8, r0
 8018870:	b928      	cbnz	r0, 801887e <__multadd+0x5a>
 8018872:	4602      	mov	r2, r0
 8018874:	4b0c      	ldr	r3, [pc, #48]	@ (80188a8 <__multadd+0x84>)
 8018876:	480d      	ldr	r0, [pc, #52]	@ (80188ac <__multadd+0x88>)
 8018878:	21ba      	movs	r1, #186	@ 0xba
 801887a:	f000 fce9 	bl	8019250 <__assert_func>
 801887e:	6922      	ldr	r2, [r4, #16]
 8018880:	3202      	adds	r2, #2
 8018882:	f104 010c 	add.w	r1, r4, #12
 8018886:	0092      	lsls	r2, r2, #2
 8018888:	300c      	adds	r0, #12
 801888a:	f7ff fb0e 	bl	8017eaa <memcpy>
 801888e:	4621      	mov	r1, r4
 8018890:	4638      	mov	r0, r7
 8018892:	f7ff ffa5 	bl	80187e0 <_Bfree>
 8018896:	4644      	mov	r4, r8
 8018898:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801889c:	3501      	adds	r5, #1
 801889e:	615e      	str	r6, [r3, #20]
 80188a0:	6125      	str	r5, [r4, #16]
 80188a2:	4620      	mov	r0, r4
 80188a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80188a8:	0801a071 	.word	0x0801a071
 80188ac:	0801a0f9 	.word	0x0801a0f9

080188b0 <__s2b>:
 80188b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80188b4:	460c      	mov	r4, r1
 80188b6:	4615      	mov	r5, r2
 80188b8:	461f      	mov	r7, r3
 80188ba:	2209      	movs	r2, #9
 80188bc:	3308      	adds	r3, #8
 80188be:	4606      	mov	r6, r0
 80188c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80188c4:	2100      	movs	r1, #0
 80188c6:	2201      	movs	r2, #1
 80188c8:	429a      	cmp	r2, r3
 80188ca:	db09      	blt.n	80188e0 <__s2b+0x30>
 80188cc:	4630      	mov	r0, r6
 80188ce:	f7ff ff47 	bl	8018760 <_Balloc>
 80188d2:	b940      	cbnz	r0, 80188e6 <__s2b+0x36>
 80188d4:	4602      	mov	r2, r0
 80188d6:	4b19      	ldr	r3, [pc, #100]	@ (801893c <__s2b+0x8c>)
 80188d8:	4819      	ldr	r0, [pc, #100]	@ (8018940 <__s2b+0x90>)
 80188da:	21d3      	movs	r1, #211	@ 0xd3
 80188dc:	f000 fcb8 	bl	8019250 <__assert_func>
 80188e0:	0052      	lsls	r2, r2, #1
 80188e2:	3101      	adds	r1, #1
 80188e4:	e7f0      	b.n	80188c8 <__s2b+0x18>
 80188e6:	9b08      	ldr	r3, [sp, #32]
 80188e8:	6143      	str	r3, [r0, #20]
 80188ea:	2d09      	cmp	r5, #9
 80188ec:	f04f 0301 	mov.w	r3, #1
 80188f0:	6103      	str	r3, [r0, #16]
 80188f2:	dd16      	ble.n	8018922 <__s2b+0x72>
 80188f4:	f104 0909 	add.w	r9, r4, #9
 80188f8:	46c8      	mov	r8, r9
 80188fa:	442c      	add	r4, r5
 80188fc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8018900:	4601      	mov	r1, r0
 8018902:	3b30      	subs	r3, #48	@ 0x30
 8018904:	220a      	movs	r2, #10
 8018906:	4630      	mov	r0, r6
 8018908:	f7ff ff8c 	bl	8018824 <__multadd>
 801890c:	45a0      	cmp	r8, r4
 801890e:	d1f5      	bne.n	80188fc <__s2b+0x4c>
 8018910:	f1a5 0408 	sub.w	r4, r5, #8
 8018914:	444c      	add	r4, r9
 8018916:	1b2d      	subs	r5, r5, r4
 8018918:	1963      	adds	r3, r4, r5
 801891a:	42bb      	cmp	r3, r7
 801891c:	db04      	blt.n	8018928 <__s2b+0x78>
 801891e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018922:	340a      	adds	r4, #10
 8018924:	2509      	movs	r5, #9
 8018926:	e7f6      	b.n	8018916 <__s2b+0x66>
 8018928:	f814 3b01 	ldrb.w	r3, [r4], #1
 801892c:	4601      	mov	r1, r0
 801892e:	3b30      	subs	r3, #48	@ 0x30
 8018930:	220a      	movs	r2, #10
 8018932:	4630      	mov	r0, r6
 8018934:	f7ff ff76 	bl	8018824 <__multadd>
 8018938:	e7ee      	b.n	8018918 <__s2b+0x68>
 801893a:	bf00      	nop
 801893c:	0801a071 	.word	0x0801a071
 8018940:	0801a0f9 	.word	0x0801a0f9

08018944 <__hi0bits>:
 8018944:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8018948:	4603      	mov	r3, r0
 801894a:	bf36      	itet	cc
 801894c:	0403      	lslcc	r3, r0, #16
 801894e:	2000      	movcs	r0, #0
 8018950:	2010      	movcc	r0, #16
 8018952:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8018956:	bf3c      	itt	cc
 8018958:	021b      	lslcc	r3, r3, #8
 801895a:	3008      	addcc	r0, #8
 801895c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8018960:	bf3c      	itt	cc
 8018962:	011b      	lslcc	r3, r3, #4
 8018964:	3004      	addcc	r0, #4
 8018966:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801896a:	bf3c      	itt	cc
 801896c:	009b      	lslcc	r3, r3, #2
 801896e:	3002      	addcc	r0, #2
 8018970:	2b00      	cmp	r3, #0
 8018972:	db05      	blt.n	8018980 <__hi0bits+0x3c>
 8018974:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8018978:	f100 0001 	add.w	r0, r0, #1
 801897c:	bf08      	it	eq
 801897e:	2020      	moveq	r0, #32
 8018980:	4770      	bx	lr

08018982 <__lo0bits>:
 8018982:	6803      	ldr	r3, [r0, #0]
 8018984:	4602      	mov	r2, r0
 8018986:	f013 0007 	ands.w	r0, r3, #7
 801898a:	d00b      	beq.n	80189a4 <__lo0bits+0x22>
 801898c:	07d9      	lsls	r1, r3, #31
 801898e:	d421      	bmi.n	80189d4 <__lo0bits+0x52>
 8018990:	0798      	lsls	r0, r3, #30
 8018992:	bf49      	itett	mi
 8018994:	085b      	lsrmi	r3, r3, #1
 8018996:	089b      	lsrpl	r3, r3, #2
 8018998:	2001      	movmi	r0, #1
 801899a:	6013      	strmi	r3, [r2, #0]
 801899c:	bf5c      	itt	pl
 801899e:	6013      	strpl	r3, [r2, #0]
 80189a0:	2002      	movpl	r0, #2
 80189a2:	4770      	bx	lr
 80189a4:	b299      	uxth	r1, r3
 80189a6:	b909      	cbnz	r1, 80189ac <__lo0bits+0x2a>
 80189a8:	0c1b      	lsrs	r3, r3, #16
 80189aa:	2010      	movs	r0, #16
 80189ac:	b2d9      	uxtb	r1, r3
 80189ae:	b909      	cbnz	r1, 80189b4 <__lo0bits+0x32>
 80189b0:	3008      	adds	r0, #8
 80189b2:	0a1b      	lsrs	r3, r3, #8
 80189b4:	0719      	lsls	r1, r3, #28
 80189b6:	bf04      	itt	eq
 80189b8:	091b      	lsreq	r3, r3, #4
 80189ba:	3004      	addeq	r0, #4
 80189bc:	0799      	lsls	r1, r3, #30
 80189be:	bf04      	itt	eq
 80189c0:	089b      	lsreq	r3, r3, #2
 80189c2:	3002      	addeq	r0, #2
 80189c4:	07d9      	lsls	r1, r3, #31
 80189c6:	d403      	bmi.n	80189d0 <__lo0bits+0x4e>
 80189c8:	085b      	lsrs	r3, r3, #1
 80189ca:	f100 0001 	add.w	r0, r0, #1
 80189ce:	d003      	beq.n	80189d8 <__lo0bits+0x56>
 80189d0:	6013      	str	r3, [r2, #0]
 80189d2:	4770      	bx	lr
 80189d4:	2000      	movs	r0, #0
 80189d6:	4770      	bx	lr
 80189d8:	2020      	movs	r0, #32
 80189da:	4770      	bx	lr

080189dc <__i2b>:
 80189dc:	b510      	push	{r4, lr}
 80189de:	460c      	mov	r4, r1
 80189e0:	2101      	movs	r1, #1
 80189e2:	f7ff febd 	bl	8018760 <_Balloc>
 80189e6:	4602      	mov	r2, r0
 80189e8:	b928      	cbnz	r0, 80189f6 <__i2b+0x1a>
 80189ea:	4b05      	ldr	r3, [pc, #20]	@ (8018a00 <__i2b+0x24>)
 80189ec:	4805      	ldr	r0, [pc, #20]	@ (8018a04 <__i2b+0x28>)
 80189ee:	f240 1145 	movw	r1, #325	@ 0x145
 80189f2:	f000 fc2d 	bl	8019250 <__assert_func>
 80189f6:	2301      	movs	r3, #1
 80189f8:	6144      	str	r4, [r0, #20]
 80189fa:	6103      	str	r3, [r0, #16]
 80189fc:	bd10      	pop	{r4, pc}
 80189fe:	bf00      	nop
 8018a00:	0801a071 	.word	0x0801a071
 8018a04:	0801a0f9 	.word	0x0801a0f9

08018a08 <__multiply>:
 8018a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a0c:	4614      	mov	r4, r2
 8018a0e:	690a      	ldr	r2, [r1, #16]
 8018a10:	6923      	ldr	r3, [r4, #16]
 8018a12:	429a      	cmp	r2, r3
 8018a14:	bfa8      	it	ge
 8018a16:	4623      	movge	r3, r4
 8018a18:	460f      	mov	r7, r1
 8018a1a:	bfa4      	itt	ge
 8018a1c:	460c      	movge	r4, r1
 8018a1e:	461f      	movge	r7, r3
 8018a20:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8018a24:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8018a28:	68a3      	ldr	r3, [r4, #8]
 8018a2a:	6861      	ldr	r1, [r4, #4]
 8018a2c:	eb0a 0609 	add.w	r6, sl, r9
 8018a30:	42b3      	cmp	r3, r6
 8018a32:	b085      	sub	sp, #20
 8018a34:	bfb8      	it	lt
 8018a36:	3101      	addlt	r1, #1
 8018a38:	f7ff fe92 	bl	8018760 <_Balloc>
 8018a3c:	b930      	cbnz	r0, 8018a4c <__multiply+0x44>
 8018a3e:	4602      	mov	r2, r0
 8018a40:	4b44      	ldr	r3, [pc, #272]	@ (8018b54 <__multiply+0x14c>)
 8018a42:	4845      	ldr	r0, [pc, #276]	@ (8018b58 <__multiply+0x150>)
 8018a44:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8018a48:	f000 fc02 	bl	8019250 <__assert_func>
 8018a4c:	f100 0514 	add.w	r5, r0, #20
 8018a50:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8018a54:	462b      	mov	r3, r5
 8018a56:	2200      	movs	r2, #0
 8018a58:	4543      	cmp	r3, r8
 8018a5a:	d321      	bcc.n	8018aa0 <__multiply+0x98>
 8018a5c:	f107 0114 	add.w	r1, r7, #20
 8018a60:	f104 0214 	add.w	r2, r4, #20
 8018a64:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8018a68:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8018a6c:	9302      	str	r3, [sp, #8]
 8018a6e:	1b13      	subs	r3, r2, r4
 8018a70:	3b15      	subs	r3, #21
 8018a72:	f023 0303 	bic.w	r3, r3, #3
 8018a76:	3304      	adds	r3, #4
 8018a78:	f104 0715 	add.w	r7, r4, #21
 8018a7c:	42ba      	cmp	r2, r7
 8018a7e:	bf38      	it	cc
 8018a80:	2304      	movcc	r3, #4
 8018a82:	9301      	str	r3, [sp, #4]
 8018a84:	9b02      	ldr	r3, [sp, #8]
 8018a86:	9103      	str	r1, [sp, #12]
 8018a88:	428b      	cmp	r3, r1
 8018a8a:	d80c      	bhi.n	8018aa6 <__multiply+0x9e>
 8018a8c:	2e00      	cmp	r6, #0
 8018a8e:	dd03      	ble.n	8018a98 <__multiply+0x90>
 8018a90:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8018a94:	2b00      	cmp	r3, #0
 8018a96:	d05b      	beq.n	8018b50 <__multiply+0x148>
 8018a98:	6106      	str	r6, [r0, #16]
 8018a9a:	b005      	add	sp, #20
 8018a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018aa0:	f843 2b04 	str.w	r2, [r3], #4
 8018aa4:	e7d8      	b.n	8018a58 <__multiply+0x50>
 8018aa6:	f8b1 a000 	ldrh.w	sl, [r1]
 8018aaa:	f1ba 0f00 	cmp.w	sl, #0
 8018aae:	d024      	beq.n	8018afa <__multiply+0xf2>
 8018ab0:	f104 0e14 	add.w	lr, r4, #20
 8018ab4:	46a9      	mov	r9, r5
 8018ab6:	f04f 0c00 	mov.w	ip, #0
 8018aba:	f85e 7b04 	ldr.w	r7, [lr], #4
 8018abe:	f8d9 3000 	ldr.w	r3, [r9]
 8018ac2:	fa1f fb87 	uxth.w	fp, r7
 8018ac6:	b29b      	uxth	r3, r3
 8018ac8:	fb0a 330b 	mla	r3, sl, fp, r3
 8018acc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8018ad0:	f8d9 7000 	ldr.w	r7, [r9]
 8018ad4:	4463      	add	r3, ip
 8018ad6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8018ada:	fb0a c70b 	mla	r7, sl, fp, ip
 8018ade:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8018ae2:	b29b      	uxth	r3, r3
 8018ae4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8018ae8:	4572      	cmp	r2, lr
 8018aea:	f849 3b04 	str.w	r3, [r9], #4
 8018aee:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8018af2:	d8e2      	bhi.n	8018aba <__multiply+0xb2>
 8018af4:	9b01      	ldr	r3, [sp, #4]
 8018af6:	f845 c003 	str.w	ip, [r5, r3]
 8018afa:	9b03      	ldr	r3, [sp, #12]
 8018afc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8018b00:	3104      	adds	r1, #4
 8018b02:	f1b9 0f00 	cmp.w	r9, #0
 8018b06:	d021      	beq.n	8018b4c <__multiply+0x144>
 8018b08:	682b      	ldr	r3, [r5, #0]
 8018b0a:	f104 0c14 	add.w	ip, r4, #20
 8018b0e:	46ae      	mov	lr, r5
 8018b10:	f04f 0a00 	mov.w	sl, #0
 8018b14:	f8bc b000 	ldrh.w	fp, [ip]
 8018b18:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8018b1c:	fb09 770b 	mla	r7, r9, fp, r7
 8018b20:	4457      	add	r7, sl
 8018b22:	b29b      	uxth	r3, r3
 8018b24:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8018b28:	f84e 3b04 	str.w	r3, [lr], #4
 8018b2c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8018b30:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8018b34:	f8be 3000 	ldrh.w	r3, [lr]
 8018b38:	fb09 330a 	mla	r3, r9, sl, r3
 8018b3c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8018b40:	4562      	cmp	r2, ip
 8018b42:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8018b46:	d8e5      	bhi.n	8018b14 <__multiply+0x10c>
 8018b48:	9f01      	ldr	r7, [sp, #4]
 8018b4a:	51eb      	str	r3, [r5, r7]
 8018b4c:	3504      	adds	r5, #4
 8018b4e:	e799      	b.n	8018a84 <__multiply+0x7c>
 8018b50:	3e01      	subs	r6, #1
 8018b52:	e79b      	b.n	8018a8c <__multiply+0x84>
 8018b54:	0801a071 	.word	0x0801a071
 8018b58:	0801a0f9 	.word	0x0801a0f9

08018b5c <__pow5mult>:
 8018b5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018b60:	4615      	mov	r5, r2
 8018b62:	f012 0203 	ands.w	r2, r2, #3
 8018b66:	4607      	mov	r7, r0
 8018b68:	460e      	mov	r6, r1
 8018b6a:	d007      	beq.n	8018b7c <__pow5mult+0x20>
 8018b6c:	4c25      	ldr	r4, [pc, #148]	@ (8018c04 <__pow5mult+0xa8>)
 8018b6e:	3a01      	subs	r2, #1
 8018b70:	2300      	movs	r3, #0
 8018b72:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018b76:	f7ff fe55 	bl	8018824 <__multadd>
 8018b7a:	4606      	mov	r6, r0
 8018b7c:	10ad      	asrs	r5, r5, #2
 8018b7e:	d03d      	beq.n	8018bfc <__pow5mult+0xa0>
 8018b80:	69fc      	ldr	r4, [r7, #28]
 8018b82:	b97c      	cbnz	r4, 8018ba4 <__pow5mult+0x48>
 8018b84:	2010      	movs	r0, #16
 8018b86:	f000 fb95 	bl	80192b4 <malloc>
 8018b8a:	4602      	mov	r2, r0
 8018b8c:	61f8      	str	r0, [r7, #28]
 8018b8e:	b928      	cbnz	r0, 8018b9c <__pow5mult+0x40>
 8018b90:	4b1d      	ldr	r3, [pc, #116]	@ (8018c08 <__pow5mult+0xac>)
 8018b92:	481e      	ldr	r0, [pc, #120]	@ (8018c0c <__pow5mult+0xb0>)
 8018b94:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8018b98:	f000 fb5a 	bl	8019250 <__assert_func>
 8018b9c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018ba0:	6004      	str	r4, [r0, #0]
 8018ba2:	60c4      	str	r4, [r0, #12]
 8018ba4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8018ba8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018bac:	b94c      	cbnz	r4, 8018bc2 <__pow5mult+0x66>
 8018bae:	f240 2171 	movw	r1, #625	@ 0x271
 8018bb2:	4638      	mov	r0, r7
 8018bb4:	f7ff ff12 	bl	80189dc <__i2b>
 8018bb8:	2300      	movs	r3, #0
 8018bba:	f8c8 0008 	str.w	r0, [r8, #8]
 8018bbe:	4604      	mov	r4, r0
 8018bc0:	6003      	str	r3, [r0, #0]
 8018bc2:	f04f 0900 	mov.w	r9, #0
 8018bc6:	07eb      	lsls	r3, r5, #31
 8018bc8:	d50a      	bpl.n	8018be0 <__pow5mult+0x84>
 8018bca:	4631      	mov	r1, r6
 8018bcc:	4622      	mov	r2, r4
 8018bce:	4638      	mov	r0, r7
 8018bd0:	f7ff ff1a 	bl	8018a08 <__multiply>
 8018bd4:	4631      	mov	r1, r6
 8018bd6:	4680      	mov	r8, r0
 8018bd8:	4638      	mov	r0, r7
 8018bda:	f7ff fe01 	bl	80187e0 <_Bfree>
 8018bde:	4646      	mov	r6, r8
 8018be0:	106d      	asrs	r5, r5, #1
 8018be2:	d00b      	beq.n	8018bfc <__pow5mult+0xa0>
 8018be4:	6820      	ldr	r0, [r4, #0]
 8018be6:	b938      	cbnz	r0, 8018bf8 <__pow5mult+0x9c>
 8018be8:	4622      	mov	r2, r4
 8018bea:	4621      	mov	r1, r4
 8018bec:	4638      	mov	r0, r7
 8018bee:	f7ff ff0b 	bl	8018a08 <__multiply>
 8018bf2:	6020      	str	r0, [r4, #0]
 8018bf4:	f8c0 9000 	str.w	r9, [r0]
 8018bf8:	4604      	mov	r4, r0
 8018bfa:	e7e4      	b.n	8018bc6 <__pow5mult+0x6a>
 8018bfc:	4630      	mov	r0, r6
 8018bfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018c02:	bf00      	nop
 8018c04:	0801a154 	.word	0x0801a154
 8018c08:	0801a0e2 	.word	0x0801a0e2
 8018c0c:	0801a0f9 	.word	0x0801a0f9

08018c10 <__lshift>:
 8018c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018c14:	460c      	mov	r4, r1
 8018c16:	6849      	ldr	r1, [r1, #4]
 8018c18:	6923      	ldr	r3, [r4, #16]
 8018c1a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8018c1e:	68a3      	ldr	r3, [r4, #8]
 8018c20:	4607      	mov	r7, r0
 8018c22:	4691      	mov	r9, r2
 8018c24:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018c28:	f108 0601 	add.w	r6, r8, #1
 8018c2c:	42b3      	cmp	r3, r6
 8018c2e:	db0b      	blt.n	8018c48 <__lshift+0x38>
 8018c30:	4638      	mov	r0, r7
 8018c32:	f7ff fd95 	bl	8018760 <_Balloc>
 8018c36:	4605      	mov	r5, r0
 8018c38:	b948      	cbnz	r0, 8018c4e <__lshift+0x3e>
 8018c3a:	4602      	mov	r2, r0
 8018c3c:	4b28      	ldr	r3, [pc, #160]	@ (8018ce0 <__lshift+0xd0>)
 8018c3e:	4829      	ldr	r0, [pc, #164]	@ (8018ce4 <__lshift+0xd4>)
 8018c40:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8018c44:	f000 fb04 	bl	8019250 <__assert_func>
 8018c48:	3101      	adds	r1, #1
 8018c4a:	005b      	lsls	r3, r3, #1
 8018c4c:	e7ee      	b.n	8018c2c <__lshift+0x1c>
 8018c4e:	2300      	movs	r3, #0
 8018c50:	f100 0114 	add.w	r1, r0, #20
 8018c54:	f100 0210 	add.w	r2, r0, #16
 8018c58:	4618      	mov	r0, r3
 8018c5a:	4553      	cmp	r3, sl
 8018c5c:	db33      	blt.n	8018cc6 <__lshift+0xb6>
 8018c5e:	6920      	ldr	r0, [r4, #16]
 8018c60:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018c64:	f104 0314 	add.w	r3, r4, #20
 8018c68:	f019 091f 	ands.w	r9, r9, #31
 8018c6c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018c70:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018c74:	d02b      	beq.n	8018cce <__lshift+0xbe>
 8018c76:	f1c9 0e20 	rsb	lr, r9, #32
 8018c7a:	468a      	mov	sl, r1
 8018c7c:	2200      	movs	r2, #0
 8018c7e:	6818      	ldr	r0, [r3, #0]
 8018c80:	fa00 f009 	lsl.w	r0, r0, r9
 8018c84:	4310      	orrs	r0, r2
 8018c86:	f84a 0b04 	str.w	r0, [sl], #4
 8018c8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8018c8e:	459c      	cmp	ip, r3
 8018c90:	fa22 f20e 	lsr.w	r2, r2, lr
 8018c94:	d8f3      	bhi.n	8018c7e <__lshift+0x6e>
 8018c96:	ebac 0304 	sub.w	r3, ip, r4
 8018c9a:	3b15      	subs	r3, #21
 8018c9c:	f023 0303 	bic.w	r3, r3, #3
 8018ca0:	3304      	adds	r3, #4
 8018ca2:	f104 0015 	add.w	r0, r4, #21
 8018ca6:	4584      	cmp	ip, r0
 8018ca8:	bf38      	it	cc
 8018caa:	2304      	movcc	r3, #4
 8018cac:	50ca      	str	r2, [r1, r3]
 8018cae:	b10a      	cbz	r2, 8018cb4 <__lshift+0xa4>
 8018cb0:	f108 0602 	add.w	r6, r8, #2
 8018cb4:	3e01      	subs	r6, #1
 8018cb6:	4638      	mov	r0, r7
 8018cb8:	612e      	str	r6, [r5, #16]
 8018cba:	4621      	mov	r1, r4
 8018cbc:	f7ff fd90 	bl	80187e0 <_Bfree>
 8018cc0:	4628      	mov	r0, r5
 8018cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018cc6:	f842 0f04 	str.w	r0, [r2, #4]!
 8018cca:	3301      	adds	r3, #1
 8018ccc:	e7c5      	b.n	8018c5a <__lshift+0x4a>
 8018cce:	3904      	subs	r1, #4
 8018cd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8018cd4:	f841 2f04 	str.w	r2, [r1, #4]!
 8018cd8:	459c      	cmp	ip, r3
 8018cda:	d8f9      	bhi.n	8018cd0 <__lshift+0xc0>
 8018cdc:	e7ea      	b.n	8018cb4 <__lshift+0xa4>
 8018cde:	bf00      	nop
 8018ce0:	0801a071 	.word	0x0801a071
 8018ce4:	0801a0f9 	.word	0x0801a0f9

08018ce8 <__mcmp>:
 8018ce8:	690a      	ldr	r2, [r1, #16]
 8018cea:	4603      	mov	r3, r0
 8018cec:	6900      	ldr	r0, [r0, #16]
 8018cee:	1a80      	subs	r0, r0, r2
 8018cf0:	b530      	push	{r4, r5, lr}
 8018cf2:	d10e      	bne.n	8018d12 <__mcmp+0x2a>
 8018cf4:	3314      	adds	r3, #20
 8018cf6:	3114      	adds	r1, #20
 8018cf8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8018cfc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8018d00:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8018d04:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8018d08:	4295      	cmp	r5, r2
 8018d0a:	d003      	beq.n	8018d14 <__mcmp+0x2c>
 8018d0c:	d205      	bcs.n	8018d1a <__mcmp+0x32>
 8018d0e:	f04f 30ff 	mov.w	r0, #4294967295
 8018d12:	bd30      	pop	{r4, r5, pc}
 8018d14:	42a3      	cmp	r3, r4
 8018d16:	d3f3      	bcc.n	8018d00 <__mcmp+0x18>
 8018d18:	e7fb      	b.n	8018d12 <__mcmp+0x2a>
 8018d1a:	2001      	movs	r0, #1
 8018d1c:	e7f9      	b.n	8018d12 <__mcmp+0x2a>
	...

08018d20 <__mdiff>:
 8018d20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d24:	4689      	mov	r9, r1
 8018d26:	4606      	mov	r6, r0
 8018d28:	4611      	mov	r1, r2
 8018d2a:	4648      	mov	r0, r9
 8018d2c:	4614      	mov	r4, r2
 8018d2e:	f7ff ffdb 	bl	8018ce8 <__mcmp>
 8018d32:	1e05      	subs	r5, r0, #0
 8018d34:	d112      	bne.n	8018d5c <__mdiff+0x3c>
 8018d36:	4629      	mov	r1, r5
 8018d38:	4630      	mov	r0, r6
 8018d3a:	f7ff fd11 	bl	8018760 <_Balloc>
 8018d3e:	4602      	mov	r2, r0
 8018d40:	b928      	cbnz	r0, 8018d4e <__mdiff+0x2e>
 8018d42:	4b3f      	ldr	r3, [pc, #252]	@ (8018e40 <__mdiff+0x120>)
 8018d44:	f240 2137 	movw	r1, #567	@ 0x237
 8018d48:	483e      	ldr	r0, [pc, #248]	@ (8018e44 <__mdiff+0x124>)
 8018d4a:	f000 fa81 	bl	8019250 <__assert_func>
 8018d4e:	2301      	movs	r3, #1
 8018d50:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8018d54:	4610      	mov	r0, r2
 8018d56:	b003      	add	sp, #12
 8018d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d5c:	bfbc      	itt	lt
 8018d5e:	464b      	movlt	r3, r9
 8018d60:	46a1      	movlt	r9, r4
 8018d62:	4630      	mov	r0, r6
 8018d64:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8018d68:	bfba      	itte	lt
 8018d6a:	461c      	movlt	r4, r3
 8018d6c:	2501      	movlt	r5, #1
 8018d6e:	2500      	movge	r5, #0
 8018d70:	f7ff fcf6 	bl	8018760 <_Balloc>
 8018d74:	4602      	mov	r2, r0
 8018d76:	b918      	cbnz	r0, 8018d80 <__mdiff+0x60>
 8018d78:	4b31      	ldr	r3, [pc, #196]	@ (8018e40 <__mdiff+0x120>)
 8018d7a:	f240 2145 	movw	r1, #581	@ 0x245
 8018d7e:	e7e3      	b.n	8018d48 <__mdiff+0x28>
 8018d80:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8018d84:	6926      	ldr	r6, [r4, #16]
 8018d86:	60c5      	str	r5, [r0, #12]
 8018d88:	f109 0310 	add.w	r3, r9, #16
 8018d8c:	f109 0514 	add.w	r5, r9, #20
 8018d90:	f104 0e14 	add.w	lr, r4, #20
 8018d94:	f100 0b14 	add.w	fp, r0, #20
 8018d98:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8018d9c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8018da0:	9301      	str	r3, [sp, #4]
 8018da2:	46d9      	mov	r9, fp
 8018da4:	f04f 0c00 	mov.w	ip, #0
 8018da8:	9b01      	ldr	r3, [sp, #4]
 8018daa:	f85e 0b04 	ldr.w	r0, [lr], #4
 8018dae:	f853 af04 	ldr.w	sl, [r3, #4]!
 8018db2:	9301      	str	r3, [sp, #4]
 8018db4:	fa1f f38a 	uxth.w	r3, sl
 8018db8:	4619      	mov	r1, r3
 8018dba:	b283      	uxth	r3, r0
 8018dbc:	1acb      	subs	r3, r1, r3
 8018dbe:	0c00      	lsrs	r0, r0, #16
 8018dc0:	4463      	add	r3, ip
 8018dc2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8018dc6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8018dca:	b29b      	uxth	r3, r3
 8018dcc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8018dd0:	4576      	cmp	r6, lr
 8018dd2:	f849 3b04 	str.w	r3, [r9], #4
 8018dd6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8018dda:	d8e5      	bhi.n	8018da8 <__mdiff+0x88>
 8018ddc:	1b33      	subs	r3, r6, r4
 8018dde:	3b15      	subs	r3, #21
 8018de0:	f023 0303 	bic.w	r3, r3, #3
 8018de4:	3415      	adds	r4, #21
 8018de6:	3304      	adds	r3, #4
 8018de8:	42a6      	cmp	r6, r4
 8018dea:	bf38      	it	cc
 8018dec:	2304      	movcc	r3, #4
 8018dee:	441d      	add	r5, r3
 8018df0:	445b      	add	r3, fp
 8018df2:	461e      	mov	r6, r3
 8018df4:	462c      	mov	r4, r5
 8018df6:	4544      	cmp	r4, r8
 8018df8:	d30e      	bcc.n	8018e18 <__mdiff+0xf8>
 8018dfa:	f108 0103 	add.w	r1, r8, #3
 8018dfe:	1b49      	subs	r1, r1, r5
 8018e00:	f021 0103 	bic.w	r1, r1, #3
 8018e04:	3d03      	subs	r5, #3
 8018e06:	45a8      	cmp	r8, r5
 8018e08:	bf38      	it	cc
 8018e0a:	2100      	movcc	r1, #0
 8018e0c:	440b      	add	r3, r1
 8018e0e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8018e12:	b191      	cbz	r1, 8018e3a <__mdiff+0x11a>
 8018e14:	6117      	str	r7, [r2, #16]
 8018e16:	e79d      	b.n	8018d54 <__mdiff+0x34>
 8018e18:	f854 1b04 	ldr.w	r1, [r4], #4
 8018e1c:	46e6      	mov	lr, ip
 8018e1e:	0c08      	lsrs	r0, r1, #16
 8018e20:	fa1c fc81 	uxtah	ip, ip, r1
 8018e24:	4471      	add	r1, lr
 8018e26:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8018e2a:	b289      	uxth	r1, r1
 8018e2c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8018e30:	f846 1b04 	str.w	r1, [r6], #4
 8018e34:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8018e38:	e7dd      	b.n	8018df6 <__mdiff+0xd6>
 8018e3a:	3f01      	subs	r7, #1
 8018e3c:	e7e7      	b.n	8018e0e <__mdiff+0xee>
 8018e3e:	bf00      	nop
 8018e40:	0801a071 	.word	0x0801a071
 8018e44:	0801a0f9 	.word	0x0801a0f9

08018e48 <__ulp>:
 8018e48:	b082      	sub	sp, #8
 8018e4a:	ed8d 0b00 	vstr	d0, [sp]
 8018e4e:	9a01      	ldr	r2, [sp, #4]
 8018e50:	4b0f      	ldr	r3, [pc, #60]	@ (8018e90 <__ulp+0x48>)
 8018e52:	4013      	ands	r3, r2
 8018e54:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8018e58:	2b00      	cmp	r3, #0
 8018e5a:	dc08      	bgt.n	8018e6e <__ulp+0x26>
 8018e5c:	425b      	negs	r3, r3
 8018e5e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8018e62:	ea4f 5223 	mov.w	r2, r3, asr #20
 8018e66:	da04      	bge.n	8018e72 <__ulp+0x2a>
 8018e68:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8018e6c:	4113      	asrs	r3, r2
 8018e6e:	2200      	movs	r2, #0
 8018e70:	e008      	b.n	8018e84 <__ulp+0x3c>
 8018e72:	f1a2 0314 	sub.w	r3, r2, #20
 8018e76:	2b1e      	cmp	r3, #30
 8018e78:	bfda      	itte	le
 8018e7a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8018e7e:	40da      	lsrle	r2, r3
 8018e80:	2201      	movgt	r2, #1
 8018e82:	2300      	movs	r3, #0
 8018e84:	4619      	mov	r1, r3
 8018e86:	4610      	mov	r0, r2
 8018e88:	ec41 0b10 	vmov	d0, r0, r1
 8018e8c:	b002      	add	sp, #8
 8018e8e:	4770      	bx	lr
 8018e90:	7ff00000 	.word	0x7ff00000

08018e94 <__b2d>:
 8018e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018e98:	6906      	ldr	r6, [r0, #16]
 8018e9a:	f100 0814 	add.w	r8, r0, #20
 8018e9e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8018ea2:	1f37      	subs	r7, r6, #4
 8018ea4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8018ea8:	4610      	mov	r0, r2
 8018eaa:	f7ff fd4b 	bl	8018944 <__hi0bits>
 8018eae:	f1c0 0320 	rsb	r3, r0, #32
 8018eb2:	280a      	cmp	r0, #10
 8018eb4:	600b      	str	r3, [r1, #0]
 8018eb6:	491b      	ldr	r1, [pc, #108]	@ (8018f24 <__b2d+0x90>)
 8018eb8:	dc15      	bgt.n	8018ee6 <__b2d+0x52>
 8018eba:	f1c0 0c0b 	rsb	ip, r0, #11
 8018ebe:	fa22 f30c 	lsr.w	r3, r2, ip
 8018ec2:	45b8      	cmp	r8, r7
 8018ec4:	ea43 0501 	orr.w	r5, r3, r1
 8018ec8:	bf34      	ite	cc
 8018eca:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8018ece:	2300      	movcs	r3, #0
 8018ed0:	3015      	adds	r0, #21
 8018ed2:	fa02 f000 	lsl.w	r0, r2, r0
 8018ed6:	fa23 f30c 	lsr.w	r3, r3, ip
 8018eda:	4303      	orrs	r3, r0
 8018edc:	461c      	mov	r4, r3
 8018ede:	ec45 4b10 	vmov	d0, r4, r5
 8018ee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018ee6:	45b8      	cmp	r8, r7
 8018ee8:	bf3a      	itte	cc
 8018eea:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8018eee:	f1a6 0708 	subcc.w	r7, r6, #8
 8018ef2:	2300      	movcs	r3, #0
 8018ef4:	380b      	subs	r0, #11
 8018ef6:	d012      	beq.n	8018f1e <__b2d+0x8a>
 8018ef8:	f1c0 0120 	rsb	r1, r0, #32
 8018efc:	fa23 f401 	lsr.w	r4, r3, r1
 8018f00:	4082      	lsls	r2, r0
 8018f02:	4322      	orrs	r2, r4
 8018f04:	4547      	cmp	r7, r8
 8018f06:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8018f0a:	bf8c      	ite	hi
 8018f0c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8018f10:	2200      	movls	r2, #0
 8018f12:	4083      	lsls	r3, r0
 8018f14:	40ca      	lsrs	r2, r1
 8018f16:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8018f1a:	4313      	orrs	r3, r2
 8018f1c:	e7de      	b.n	8018edc <__b2d+0x48>
 8018f1e:	ea42 0501 	orr.w	r5, r2, r1
 8018f22:	e7db      	b.n	8018edc <__b2d+0x48>
 8018f24:	3ff00000 	.word	0x3ff00000

08018f28 <__d2b>:
 8018f28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018f2c:	460f      	mov	r7, r1
 8018f2e:	2101      	movs	r1, #1
 8018f30:	ec59 8b10 	vmov	r8, r9, d0
 8018f34:	4616      	mov	r6, r2
 8018f36:	f7ff fc13 	bl	8018760 <_Balloc>
 8018f3a:	4604      	mov	r4, r0
 8018f3c:	b930      	cbnz	r0, 8018f4c <__d2b+0x24>
 8018f3e:	4602      	mov	r2, r0
 8018f40:	4b23      	ldr	r3, [pc, #140]	@ (8018fd0 <__d2b+0xa8>)
 8018f42:	4824      	ldr	r0, [pc, #144]	@ (8018fd4 <__d2b+0xac>)
 8018f44:	f240 310f 	movw	r1, #783	@ 0x30f
 8018f48:	f000 f982 	bl	8019250 <__assert_func>
 8018f4c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8018f50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018f54:	b10d      	cbz	r5, 8018f5a <__d2b+0x32>
 8018f56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8018f5a:	9301      	str	r3, [sp, #4]
 8018f5c:	f1b8 0300 	subs.w	r3, r8, #0
 8018f60:	d023      	beq.n	8018faa <__d2b+0x82>
 8018f62:	4668      	mov	r0, sp
 8018f64:	9300      	str	r3, [sp, #0]
 8018f66:	f7ff fd0c 	bl	8018982 <__lo0bits>
 8018f6a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8018f6e:	b1d0      	cbz	r0, 8018fa6 <__d2b+0x7e>
 8018f70:	f1c0 0320 	rsb	r3, r0, #32
 8018f74:	fa02 f303 	lsl.w	r3, r2, r3
 8018f78:	430b      	orrs	r3, r1
 8018f7a:	40c2      	lsrs	r2, r0
 8018f7c:	6163      	str	r3, [r4, #20]
 8018f7e:	9201      	str	r2, [sp, #4]
 8018f80:	9b01      	ldr	r3, [sp, #4]
 8018f82:	61a3      	str	r3, [r4, #24]
 8018f84:	2b00      	cmp	r3, #0
 8018f86:	bf0c      	ite	eq
 8018f88:	2201      	moveq	r2, #1
 8018f8a:	2202      	movne	r2, #2
 8018f8c:	6122      	str	r2, [r4, #16]
 8018f8e:	b1a5      	cbz	r5, 8018fba <__d2b+0x92>
 8018f90:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8018f94:	4405      	add	r5, r0
 8018f96:	603d      	str	r5, [r7, #0]
 8018f98:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8018f9c:	6030      	str	r0, [r6, #0]
 8018f9e:	4620      	mov	r0, r4
 8018fa0:	b003      	add	sp, #12
 8018fa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018fa6:	6161      	str	r1, [r4, #20]
 8018fa8:	e7ea      	b.n	8018f80 <__d2b+0x58>
 8018faa:	a801      	add	r0, sp, #4
 8018fac:	f7ff fce9 	bl	8018982 <__lo0bits>
 8018fb0:	9b01      	ldr	r3, [sp, #4]
 8018fb2:	6163      	str	r3, [r4, #20]
 8018fb4:	3020      	adds	r0, #32
 8018fb6:	2201      	movs	r2, #1
 8018fb8:	e7e8      	b.n	8018f8c <__d2b+0x64>
 8018fba:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8018fbe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8018fc2:	6038      	str	r0, [r7, #0]
 8018fc4:	6918      	ldr	r0, [r3, #16]
 8018fc6:	f7ff fcbd 	bl	8018944 <__hi0bits>
 8018fca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8018fce:	e7e5      	b.n	8018f9c <__d2b+0x74>
 8018fd0:	0801a071 	.word	0x0801a071
 8018fd4:	0801a0f9 	.word	0x0801a0f9

08018fd8 <__ratio>:
 8018fd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018fdc:	4688      	mov	r8, r1
 8018fde:	4669      	mov	r1, sp
 8018fe0:	4681      	mov	r9, r0
 8018fe2:	f7ff ff57 	bl	8018e94 <__b2d>
 8018fe6:	a901      	add	r1, sp, #4
 8018fe8:	4640      	mov	r0, r8
 8018fea:	ec55 4b10 	vmov	r4, r5, d0
 8018fee:	f7ff ff51 	bl	8018e94 <__b2d>
 8018ff2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8018ff6:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8018ffa:	1ad2      	subs	r2, r2, r3
 8018ffc:	e9dd 3100 	ldrd	r3, r1, [sp]
 8019000:	1a5b      	subs	r3, r3, r1
 8019002:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8019006:	ec57 6b10 	vmov	r6, r7, d0
 801900a:	2b00      	cmp	r3, #0
 801900c:	bfd6      	itet	le
 801900e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8019012:	462a      	movgt	r2, r5
 8019014:	463a      	movle	r2, r7
 8019016:	46ab      	mov	fp, r5
 8019018:	46a2      	mov	sl, r4
 801901a:	bfce      	itee	gt
 801901c:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8019020:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8019024:	ee00 3a90 	vmovle	s1, r3
 8019028:	ec4b ab17 	vmov	d7, sl, fp
 801902c:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8019030:	b003      	add	sp, #12
 8019032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019036 <__copybits>:
 8019036:	3901      	subs	r1, #1
 8019038:	b570      	push	{r4, r5, r6, lr}
 801903a:	1149      	asrs	r1, r1, #5
 801903c:	6914      	ldr	r4, [r2, #16]
 801903e:	3101      	adds	r1, #1
 8019040:	f102 0314 	add.w	r3, r2, #20
 8019044:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8019048:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801904c:	1f05      	subs	r5, r0, #4
 801904e:	42a3      	cmp	r3, r4
 8019050:	d30c      	bcc.n	801906c <__copybits+0x36>
 8019052:	1aa3      	subs	r3, r4, r2
 8019054:	3b11      	subs	r3, #17
 8019056:	f023 0303 	bic.w	r3, r3, #3
 801905a:	3211      	adds	r2, #17
 801905c:	42a2      	cmp	r2, r4
 801905e:	bf88      	it	hi
 8019060:	2300      	movhi	r3, #0
 8019062:	4418      	add	r0, r3
 8019064:	2300      	movs	r3, #0
 8019066:	4288      	cmp	r0, r1
 8019068:	d305      	bcc.n	8019076 <__copybits+0x40>
 801906a:	bd70      	pop	{r4, r5, r6, pc}
 801906c:	f853 6b04 	ldr.w	r6, [r3], #4
 8019070:	f845 6f04 	str.w	r6, [r5, #4]!
 8019074:	e7eb      	b.n	801904e <__copybits+0x18>
 8019076:	f840 3b04 	str.w	r3, [r0], #4
 801907a:	e7f4      	b.n	8019066 <__copybits+0x30>

0801907c <__any_on>:
 801907c:	f100 0214 	add.w	r2, r0, #20
 8019080:	6900      	ldr	r0, [r0, #16]
 8019082:	114b      	asrs	r3, r1, #5
 8019084:	4298      	cmp	r0, r3
 8019086:	b510      	push	{r4, lr}
 8019088:	db11      	blt.n	80190ae <__any_on+0x32>
 801908a:	dd0a      	ble.n	80190a2 <__any_on+0x26>
 801908c:	f011 011f 	ands.w	r1, r1, #31
 8019090:	d007      	beq.n	80190a2 <__any_on+0x26>
 8019092:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8019096:	fa24 f001 	lsr.w	r0, r4, r1
 801909a:	fa00 f101 	lsl.w	r1, r0, r1
 801909e:	428c      	cmp	r4, r1
 80190a0:	d10b      	bne.n	80190ba <__any_on+0x3e>
 80190a2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80190a6:	4293      	cmp	r3, r2
 80190a8:	d803      	bhi.n	80190b2 <__any_on+0x36>
 80190aa:	2000      	movs	r0, #0
 80190ac:	bd10      	pop	{r4, pc}
 80190ae:	4603      	mov	r3, r0
 80190b0:	e7f7      	b.n	80190a2 <__any_on+0x26>
 80190b2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80190b6:	2900      	cmp	r1, #0
 80190b8:	d0f5      	beq.n	80190a6 <__any_on+0x2a>
 80190ba:	2001      	movs	r0, #1
 80190bc:	e7f6      	b.n	80190ac <__any_on+0x30>

080190be <__ascii_wctomb>:
 80190be:	4603      	mov	r3, r0
 80190c0:	4608      	mov	r0, r1
 80190c2:	b141      	cbz	r1, 80190d6 <__ascii_wctomb+0x18>
 80190c4:	2aff      	cmp	r2, #255	@ 0xff
 80190c6:	d904      	bls.n	80190d2 <__ascii_wctomb+0x14>
 80190c8:	228a      	movs	r2, #138	@ 0x8a
 80190ca:	601a      	str	r2, [r3, #0]
 80190cc:	f04f 30ff 	mov.w	r0, #4294967295
 80190d0:	4770      	bx	lr
 80190d2:	700a      	strb	r2, [r1, #0]
 80190d4:	2001      	movs	r0, #1
 80190d6:	4770      	bx	lr

080190d8 <__sflush_r>:
 80190d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80190dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80190e0:	0716      	lsls	r6, r2, #28
 80190e2:	4605      	mov	r5, r0
 80190e4:	460c      	mov	r4, r1
 80190e6:	d454      	bmi.n	8019192 <__sflush_r+0xba>
 80190e8:	684b      	ldr	r3, [r1, #4]
 80190ea:	2b00      	cmp	r3, #0
 80190ec:	dc02      	bgt.n	80190f4 <__sflush_r+0x1c>
 80190ee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80190f0:	2b00      	cmp	r3, #0
 80190f2:	dd48      	ble.n	8019186 <__sflush_r+0xae>
 80190f4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80190f6:	2e00      	cmp	r6, #0
 80190f8:	d045      	beq.n	8019186 <__sflush_r+0xae>
 80190fa:	2300      	movs	r3, #0
 80190fc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8019100:	682f      	ldr	r7, [r5, #0]
 8019102:	6a21      	ldr	r1, [r4, #32]
 8019104:	602b      	str	r3, [r5, #0]
 8019106:	d030      	beq.n	801916a <__sflush_r+0x92>
 8019108:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801910a:	89a3      	ldrh	r3, [r4, #12]
 801910c:	0759      	lsls	r1, r3, #29
 801910e:	d505      	bpl.n	801911c <__sflush_r+0x44>
 8019110:	6863      	ldr	r3, [r4, #4]
 8019112:	1ad2      	subs	r2, r2, r3
 8019114:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8019116:	b10b      	cbz	r3, 801911c <__sflush_r+0x44>
 8019118:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801911a:	1ad2      	subs	r2, r2, r3
 801911c:	2300      	movs	r3, #0
 801911e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8019120:	6a21      	ldr	r1, [r4, #32]
 8019122:	4628      	mov	r0, r5
 8019124:	47b0      	blx	r6
 8019126:	1c43      	adds	r3, r0, #1
 8019128:	89a3      	ldrh	r3, [r4, #12]
 801912a:	d106      	bne.n	801913a <__sflush_r+0x62>
 801912c:	6829      	ldr	r1, [r5, #0]
 801912e:	291d      	cmp	r1, #29
 8019130:	d82b      	bhi.n	801918a <__sflush_r+0xb2>
 8019132:	4a2a      	ldr	r2, [pc, #168]	@ (80191dc <__sflush_r+0x104>)
 8019134:	410a      	asrs	r2, r1
 8019136:	07d6      	lsls	r6, r2, #31
 8019138:	d427      	bmi.n	801918a <__sflush_r+0xb2>
 801913a:	2200      	movs	r2, #0
 801913c:	6062      	str	r2, [r4, #4]
 801913e:	04d9      	lsls	r1, r3, #19
 8019140:	6922      	ldr	r2, [r4, #16]
 8019142:	6022      	str	r2, [r4, #0]
 8019144:	d504      	bpl.n	8019150 <__sflush_r+0x78>
 8019146:	1c42      	adds	r2, r0, #1
 8019148:	d101      	bne.n	801914e <__sflush_r+0x76>
 801914a:	682b      	ldr	r3, [r5, #0]
 801914c:	b903      	cbnz	r3, 8019150 <__sflush_r+0x78>
 801914e:	6560      	str	r0, [r4, #84]	@ 0x54
 8019150:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019152:	602f      	str	r7, [r5, #0]
 8019154:	b1b9      	cbz	r1, 8019186 <__sflush_r+0xae>
 8019156:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801915a:	4299      	cmp	r1, r3
 801915c:	d002      	beq.n	8019164 <__sflush_r+0x8c>
 801915e:	4628      	mov	r0, r5
 8019160:	f7fe feba 	bl	8017ed8 <_free_r>
 8019164:	2300      	movs	r3, #0
 8019166:	6363      	str	r3, [r4, #52]	@ 0x34
 8019168:	e00d      	b.n	8019186 <__sflush_r+0xae>
 801916a:	2301      	movs	r3, #1
 801916c:	4628      	mov	r0, r5
 801916e:	47b0      	blx	r6
 8019170:	4602      	mov	r2, r0
 8019172:	1c50      	adds	r0, r2, #1
 8019174:	d1c9      	bne.n	801910a <__sflush_r+0x32>
 8019176:	682b      	ldr	r3, [r5, #0]
 8019178:	2b00      	cmp	r3, #0
 801917a:	d0c6      	beq.n	801910a <__sflush_r+0x32>
 801917c:	2b1d      	cmp	r3, #29
 801917e:	d001      	beq.n	8019184 <__sflush_r+0xac>
 8019180:	2b16      	cmp	r3, #22
 8019182:	d11e      	bne.n	80191c2 <__sflush_r+0xea>
 8019184:	602f      	str	r7, [r5, #0]
 8019186:	2000      	movs	r0, #0
 8019188:	e022      	b.n	80191d0 <__sflush_r+0xf8>
 801918a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801918e:	b21b      	sxth	r3, r3
 8019190:	e01b      	b.n	80191ca <__sflush_r+0xf2>
 8019192:	690f      	ldr	r7, [r1, #16]
 8019194:	2f00      	cmp	r7, #0
 8019196:	d0f6      	beq.n	8019186 <__sflush_r+0xae>
 8019198:	0793      	lsls	r3, r2, #30
 801919a:	680e      	ldr	r6, [r1, #0]
 801919c:	bf08      	it	eq
 801919e:	694b      	ldreq	r3, [r1, #20]
 80191a0:	600f      	str	r7, [r1, #0]
 80191a2:	bf18      	it	ne
 80191a4:	2300      	movne	r3, #0
 80191a6:	eba6 0807 	sub.w	r8, r6, r7
 80191aa:	608b      	str	r3, [r1, #8]
 80191ac:	f1b8 0f00 	cmp.w	r8, #0
 80191b0:	dde9      	ble.n	8019186 <__sflush_r+0xae>
 80191b2:	6a21      	ldr	r1, [r4, #32]
 80191b4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80191b6:	4643      	mov	r3, r8
 80191b8:	463a      	mov	r2, r7
 80191ba:	4628      	mov	r0, r5
 80191bc:	47b0      	blx	r6
 80191be:	2800      	cmp	r0, #0
 80191c0:	dc08      	bgt.n	80191d4 <__sflush_r+0xfc>
 80191c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80191c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80191ca:	81a3      	strh	r3, [r4, #12]
 80191cc:	f04f 30ff 	mov.w	r0, #4294967295
 80191d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80191d4:	4407      	add	r7, r0
 80191d6:	eba8 0800 	sub.w	r8, r8, r0
 80191da:	e7e7      	b.n	80191ac <__sflush_r+0xd4>
 80191dc:	dfbffffe 	.word	0xdfbffffe

080191e0 <_fflush_r>:
 80191e0:	b538      	push	{r3, r4, r5, lr}
 80191e2:	690b      	ldr	r3, [r1, #16]
 80191e4:	4605      	mov	r5, r0
 80191e6:	460c      	mov	r4, r1
 80191e8:	b913      	cbnz	r3, 80191f0 <_fflush_r+0x10>
 80191ea:	2500      	movs	r5, #0
 80191ec:	4628      	mov	r0, r5
 80191ee:	bd38      	pop	{r3, r4, r5, pc}
 80191f0:	b118      	cbz	r0, 80191fa <_fflush_r+0x1a>
 80191f2:	6a03      	ldr	r3, [r0, #32]
 80191f4:	b90b      	cbnz	r3, 80191fa <_fflush_r+0x1a>
 80191f6:	f7fe fd45 	bl	8017c84 <__sinit>
 80191fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80191fe:	2b00      	cmp	r3, #0
 8019200:	d0f3      	beq.n	80191ea <_fflush_r+0xa>
 8019202:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8019204:	07d0      	lsls	r0, r2, #31
 8019206:	d404      	bmi.n	8019212 <_fflush_r+0x32>
 8019208:	0599      	lsls	r1, r3, #22
 801920a:	d402      	bmi.n	8019212 <_fflush_r+0x32>
 801920c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801920e:	f7fe fe4a 	bl	8017ea6 <__retarget_lock_acquire_recursive>
 8019212:	4628      	mov	r0, r5
 8019214:	4621      	mov	r1, r4
 8019216:	f7ff ff5f 	bl	80190d8 <__sflush_r>
 801921a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801921c:	07da      	lsls	r2, r3, #31
 801921e:	4605      	mov	r5, r0
 8019220:	d4e4      	bmi.n	80191ec <_fflush_r+0xc>
 8019222:	89a3      	ldrh	r3, [r4, #12]
 8019224:	059b      	lsls	r3, r3, #22
 8019226:	d4e1      	bmi.n	80191ec <_fflush_r+0xc>
 8019228:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801922a:	f7fe fe3d 	bl	8017ea8 <__retarget_lock_release_recursive>
 801922e:	e7dd      	b.n	80191ec <_fflush_r+0xc>

08019230 <_sbrk_r>:
 8019230:	b538      	push	{r3, r4, r5, lr}
 8019232:	4d06      	ldr	r5, [pc, #24]	@ (801924c <_sbrk_r+0x1c>)
 8019234:	2300      	movs	r3, #0
 8019236:	4604      	mov	r4, r0
 8019238:	4608      	mov	r0, r1
 801923a:	602b      	str	r3, [r5, #0]
 801923c:	f7ea fb1c 	bl	8003878 <_sbrk>
 8019240:	1c43      	adds	r3, r0, #1
 8019242:	d102      	bne.n	801924a <_sbrk_r+0x1a>
 8019244:	682b      	ldr	r3, [r5, #0]
 8019246:	b103      	cbz	r3, 801924a <_sbrk_r+0x1a>
 8019248:	6023      	str	r3, [r4, #0]
 801924a:	bd38      	pop	{r3, r4, r5, pc}
 801924c:	24006968 	.word	0x24006968

08019250 <__assert_func>:
 8019250:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019252:	4614      	mov	r4, r2
 8019254:	461a      	mov	r2, r3
 8019256:	4b09      	ldr	r3, [pc, #36]	@ (801927c <__assert_func+0x2c>)
 8019258:	681b      	ldr	r3, [r3, #0]
 801925a:	4605      	mov	r5, r0
 801925c:	68d8      	ldr	r0, [r3, #12]
 801925e:	b954      	cbnz	r4, 8019276 <__assert_func+0x26>
 8019260:	4b07      	ldr	r3, [pc, #28]	@ (8019280 <__assert_func+0x30>)
 8019262:	461c      	mov	r4, r3
 8019264:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019268:	9100      	str	r1, [sp, #0]
 801926a:	462b      	mov	r3, r5
 801926c:	4905      	ldr	r1, [pc, #20]	@ (8019284 <__assert_func+0x34>)
 801926e:	f000 f829 	bl	80192c4 <fiprintf>
 8019272:	f000 f839 	bl	80192e8 <abort>
 8019276:	4b04      	ldr	r3, [pc, #16]	@ (8019288 <__assert_func+0x38>)
 8019278:	e7f4      	b.n	8019264 <__assert_func+0x14>
 801927a:	bf00      	nop
 801927c:	24000240 	.word	0x24000240
 8019280:	0801a28b 	.word	0x0801a28b
 8019284:	0801a25d 	.word	0x0801a25d
 8019288:	0801a250 	.word	0x0801a250

0801928c <_calloc_r>:
 801928c:	b570      	push	{r4, r5, r6, lr}
 801928e:	fba1 5402 	umull	r5, r4, r1, r2
 8019292:	b93c      	cbnz	r4, 80192a4 <_calloc_r+0x18>
 8019294:	4629      	mov	r1, r5
 8019296:	f7ff f9c5 	bl	8018624 <_malloc_r>
 801929a:	4606      	mov	r6, r0
 801929c:	b928      	cbnz	r0, 80192aa <_calloc_r+0x1e>
 801929e:	2600      	movs	r6, #0
 80192a0:	4630      	mov	r0, r6
 80192a2:	bd70      	pop	{r4, r5, r6, pc}
 80192a4:	220c      	movs	r2, #12
 80192a6:	6002      	str	r2, [r0, #0]
 80192a8:	e7f9      	b.n	801929e <_calloc_r+0x12>
 80192aa:	462a      	mov	r2, r5
 80192ac:	4621      	mov	r1, r4
 80192ae:	f7fe fd62 	bl	8017d76 <memset>
 80192b2:	e7f5      	b.n	80192a0 <_calloc_r+0x14>

080192b4 <malloc>:
 80192b4:	4b02      	ldr	r3, [pc, #8]	@ (80192c0 <malloc+0xc>)
 80192b6:	4601      	mov	r1, r0
 80192b8:	6818      	ldr	r0, [r3, #0]
 80192ba:	f7ff b9b3 	b.w	8018624 <_malloc_r>
 80192be:	bf00      	nop
 80192c0:	24000240 	.word	0x24000240

080192c4 <fiprintf>:
 80192c4:	b40e      	push	{r1, r2, r3}
 80192c6:	b503      	push	{r0, r1, lr}
 80192c8:	4601      	mov	r1, r0
 80192ca:	ab03      	add	r3, sp, #12
 80192cc:	4805      	ldr	r0, [pc, #20]	@ (80192e4 <fiprintf+0x20>)
 80192ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80192d2:	6800      	ldr	r0, [r0, #0]
 80192d4:	9301      	str	r3, [sp, #4]
 80192d6:	f000 f837 	bl	8019348 <_vfiprintf_r>
 80192da:	b002      	add	sp, #8
 80192dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80192e0:	b003      	add	sp, #12
 80192e2:	4770      	bx	lr
 80192e4:	24000240 	.word	0x24000240

080192e8 <abort>:
 80192e8:	b508      	push	{r3, lr}
 80192ea:	2006      	movs	r0, #6
 80192ec:	f000 fb8e 	bl	8019a0c <raise>
 80192f0:	2001      	movs	r0, #1
 80192f2:	f7ea fa49 	bl	8003788 <_exit>

080192f6 <__sfputc_r>:
 80192f6:	6893      	ldr	r3, [r2, #8]
 80192f8:	3b01      	subs	r3, #1
 80192fa:	2b00      	cmp	r3, #0
 80192fc:	b410      	push	{r4}
 80192fe:	6093      	str	r3, [r2, #8]
 8019300:	da08      	bge.n	8019314 <__sfputc_r+0x1e>
 8019302:	6994      	ldr	r4, [r2, #24]
 8019304:	42a3      	cmp	r3, r4
 8019306:	db01      	blt.n	801930c <__sfputc_r+0x16>
 8019308:	290a      	cmp	r1, #10
 801930a:	d103      	bne.n	8019314 <__sfputc_r+0x1e>
 801930c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019310:	f000 bac0 	b.w	8019894 <__swbuf_r>
 8019314:	6813      	ldr	r3, [r2, #0]
 8019316:	1c58      	adds	r0, r3, #1
 8019318:	6010      	str	r0, [r2, #0]
 801931a:	7019      	strb	r1, [r3, #0]
 801931c:	4608      	mov	r0, r1
 801931e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019322:	4770      	bx	lr

08019324 <__sfputs_r>:
 8019324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019326:	4606      	mov	r6, r0
 8019328:	460f      	mov	r7, r1
 801932a:	4614      	mov	r4, r2
 801932c:	18d5      	adds	r5, r2, r3
 801932e:	42ac      	cmp	r4, r5
 8019330:	d101      	bne.n	8019336 <__sfputs_r+0x12>
 8019332:	2000      	movs	r0, #0
 8019334:	e007      	b.n	8019346 <__sfputs_r+0x22>
 8019336:	f814 1b01 	ldrb.w	r1, [r4], #1
 801933a:	463a      	mov	r2, r7
 801933c:	4630      	mov	r0, r6
 801933e:	f7ff ffda 	bl	80192f6 <__sfputc_r>
 8019342:	1c43      	adds	r3, r0, #1
 8019344:	d1f3      	bne.n	801932e <__sfputs_r+0xa>
 8019346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08019348 <_vfiprintf_r>:
 8019348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801934c:	460d      	mov	r5, r1
 801934e:	b09d      	sub	sp, #116	@ 0x74
 8019350:	4614      	mov	r4, r2
 8019352:	4698      	mov	r8, r3
 8019354:	4606      	mov	r6, r0
 8019356:	b118      	cbz	r0, 8019360 <_vfiprintf_r+0x18>
 8019358:	6a03      	ldr	r3, [r0, #32]
 801935a:	b90b      	cbnz	r3, 8019360 <_vfiprintf_r+0x18>
 801935c:	f7fe fc92 	bl	8017c84 <__sinit>
 8019360:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019362:	07d9      	lsls	r1, r3, #31
 8019364:	d405      	bmi.n	8019372 <_vfiprintf_r+0x2a>
 8019366:	89ab      	ldrh	r3, [r5, #12]
 8019368:	059a      	lsls	r2, r3, #22
 801936a:	d402      	bmi.n	8019372 <_vfiprintf_r+0x2a>
 801936c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801936e:	f7fe fd9a 	bl	8017ea6 <__retarget_lock_acquire_recursive>
 8019372:	89ab      	ldrh	r3, [r5, #12]
 8019374:	071b      	lsls	r3, r3, #28
 8019376:	d501      	bpl.n	801937c <_vfiprintf_r+0x34>
 8019378:	692b      	ldr	r3, [r5, #16]
 801937a:	b99b      	cbnz	r3, 80193a4 <_vfiprintf_r+0x5c>
 801937c:	4629      	mov	r1, r5
 801937e:	4630      	mov	r0, r6
 8019380:	f000 fac6 	bl	8019910 <__swsetup_r>
 8019384:	b170      	cbz	r0, 80193a4 <_vfiprintf_r+0x5c>
 8019386:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019388:	07dc      	lsls	r4, r3, #31
 801938a:	d504      	bpl.n	8019396 <_vfiprintf_r+0x4e>
 801938c:	f04f 30ff 	mov.w	r0, #4294967295
 8019390:	b01d      	add	sp, #116	@ 0x74
 8019392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019396:	89ab      	ldrh	r3, [r5, #12]
 8019398:	0598      	lsls	r0, r3, #22
 801939a:	d4f7      	bmi.n	801938c <_vfiprintf_r+0x44>
 801939c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801939e:	f7fe fd83 	bl	8017ea8 <__retarget_lock_release_recursive>
 80193a2:	e7f3      	b.n	801938c <_vfiprintf_r+0x44>
 80193a4:	2300      	movs	r3, #0
 80193a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80193a8:	2320      	movs	r3, #32
 80193aa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80193ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80193b2:	2330      	movs	r3, #48	@ 0x30
 80193b4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8019564 <_vfiprintf_r+0x21c>
 80193b8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80193bc:	f04f 0901 	mov.w	r9, #1
 80193c0:	4623      	mov	r3, r4
 80193c2:	469a      	mov	sl, r3
 80193c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80193c8:	b10a      	cbz	r2, 80193ce <_vfiprintf_r+0x86>
 80193ca:	2a25      	cmp	r2, #37	@ 0x25
 80193cc:	d1f9      	bne.n	80193c2 <_vfiprintf_r+0x7a>
 80193ce:	ebba 0b04 	subs.w	fp, sl, r4
 80193d2:	d00b      	beq.n	80193ec <_vfiprintf_r+0xa4>
 80193d4:	465b      	mov	r3, fp
 80193d6:	4622      	mov	r2, r4
 80193d8:	4629      	mov	r1, r5
 80193da:	4630      	mov	r0, r6
 80193dc:	f7ff ffa2 	bl	8019324 <__sfputs_r>
 80193e0:	3001      	adds	r0, #1
 80193e2:	f000 80a7 	beq.w	8019534 <_vfiprintf_r+0x1ec>
 80193e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80193e8:	445a      	add	r2, fp
 80193ea:	9209      	str	r2, [sp, #36]	@ 0x24
 80193ec:	f89a 3000 	ldrb.w	r3, [sl]
 80193f0:	2b00      	cmp	r3, #0
 80193f2:	f000 809f 	beq.w	8019534 <_vfiprintf_r+0x1ec>
 80193f6:	2300      	movs	r3, #0
 80193f8:	f04f 32ff 	mov.w	r2, #4294967295
 80193fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019400:	f10a 0a01 	add.w	sl, sl, #1
 8019404:	9304      	str	r3, [sp, #16]
 8019406:	9307      	str	r3, [sp, #28]
 8019408:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801940c:	931a      	str	r3, [sp, #104]	@ 0x68
 801940e:	4654      	mov	r4, sl
 8019410:	2205      	movs	r2, #5
 8019412:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019416:	4853      	ldr	r0, [pc, #332]	@ (8019564 <_vfiprintf_r+0x21c>)
 8019418:	f7e6 ff7a 	bl	8000310 <memchr>
 801941c:	9a04      	ldr	r2, [sp, #16]
 801941e:	b9d8      	cbnz	r0, 8019458 <_vfiprintf_r+0x110>
 8019420:	06d1      	lsls	r1, r2, #27
 8019422:	bf44      	itt	mi
 8019424:	2320      	movmi	r3, #32
 8019426:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801942a:	0713      	lsls	r3, r2, #28
 801942c:	bf44      	itt	mi
 801942e:	232b      	movmi	r3, #43	@ 0x2b
 8019430:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019434:	f89a 3000 	ldrb.w	r3, [sl]
 8019438:	2b2a      	cmp	r3, #42	@ 0x2a
 801943a:	d015      	beq.n	8019468 <_vfiprintf_r+0x120>
 801943c:	9a07      	ldr	r2, [sp, #28]
 801943e:	4654      	mov	r4, sl
 8019440:	2000      	movs	r0, #0
 8019442:	f04f 0c0a 	mov.w	ip, #10
 8019446:	4621      	mov	r1, r4
 8019448:	f811 3b01 	ldrb.w	r3, [r1], #1
 801944c:	3b30      	subs	r3, #48	@ 0x30
 801944e:	2b09      	cmp	r3, #9
 8019450:	d94b      	bls.n	80194ea <_vfiprintf_r+0x1a2>
 8019452:	b1b0      	cbz	r0, 8019482 <_vfiprintf_r+0x13a>
 8019454:	9207      	str	r2, [sp, #28]
 8019456:	e014      	b.n	8019482 <_vfiprintf_r+0x13a>
 8019458:	eba0 0308 	sub.w	r3, r0, r8
 801945c:	fa09 f303 	lsl.w	r3, r9, r3
 8019460:	4313      	orrs	r3, r2
 8019462:	9304      	str	r3, [sp, #16]
 8019464:	46a2      	mov	sl, r4
 8019466:	e7d2      	b.n	801940e <_vfiprintf_r+0xc6>
 8019468:	9b03      	ldr	r3, [sp, #12]
 801946a:	1d19      	adds	r1, r3, #4
 801946c:	681b      	ldr	r3, [r3, #0]
 801946e:	9103      	str	r1, [sp, #12]
 8019470:	2b00      	cmp	r3, #0
 8019472:	bfbb      	ittet	lt
 8019474:	425b      	neglt	r3, r3
 8019476:	f042 0202 	orrlt.w	r2, r2, #2
 801947a:	9307      	strge	r3, [sp, #28]
 801947c:	9307      	strlt	r3, [sp, #28]
 801947e:	bfb8      	it	lt
 8019480:	9204      	strlt	r2, [sp, #16]
 8019482:	7823      	ldrb	r3, [r4, #0]
 8019484:	2b2e      	cmp	r3, #46	@ 0x2e
 8019486:	d10a      	bne.n	801949e <_vfiprintf_r+0x156>
 8019488:	7863      	ldrb	r3, [r4, #1]
 801948a:	2b2a      	cmp	r3, #42	@ 0x2a
 801948c:	d132      	bne.n	80194f4 <_vfiprintf_r+0x1ac>
 801948e:	9b03      	ldr	r3, [sp, #12]
 8019490:	1d1a      	adds	r2, r3, #4
 8019492:	681b      	ldr	r3, [r3, #0]
 8019494:	9203      	str	r2, [sp, #12]
 8019496:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801949a:	3402      	adds	r4, #2
 801949c:	9305      	str	r3, [sp, #20]
 801949e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8019574 <_vfiprintf_r+0x22c>
 80194a2:	7821      	ldrb	r1, [r4, #0]
 80194a4:	2203      	movs	r2, #3
 80194a6:	4650      	mov	r0, sl
 80194a8:	f7e6 ff32 	bl	8000310 <memchr>
 80194ac:	b138      	cbz	r0, 80194be <_vfiprintf_r+0x176>
 80194ae:	9b04      	ldr	r3, [sp, #16]
 80194b0:	eba0 000a 	sub.w	r0, r0, sl
 80194b4:	2240      	movs	r2, #64	@ 0x40
 80194b6:	4082      	lsls	r2, r0
 80194b8:	4313      	orrs	r3, r2
 80194ba:	3401      	adds	r4, #1
 80194bc:	9304      	str	r3, [sp, #16]
 80194be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80194c2:	4829      	ldr	r0, [pc, #164]	@ (8019568 <_vfiprintf_r+0x220>)
 80194c4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80194c8:	2206      	movs	r2, #6
 80194ca:	f7e6 ff21 	bl	8000310 <memchr>
 80194ce:	2800      	cmp	r0, #0
 80194d0:	d03f      	beq.n	8019552 <_vfiprintf_r+0x20a>
 80194d2:	4b26      	ldr	r3, [pc, #152]	@ (801956c <_vfiprintf_r+0x224>)
 80194d4:	bb1b      	cbnz	r3, 801951e <_vfiprintf_r+0x1d6>
 80194d6:	9b03      	ldr	r3, [sp, #12]
 80194d8:	3307      	adds	r3, #7
 80194da:	f023 0307 	bic.w	r3, r3, #7
 80194de:	3308      	adds	r3, #8
 80194e0:	9303      	str	r3, [sp, #12]
 80194e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80194e4:	443b      	add	r3, r7
 80194e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80194e8:	e76a      	b.n	80193c0 <_vfiprintf_r+0x78>
 80194ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80194ee:	460c      	mov	r4, r1
 80194f0:	2001      	movs	r0, #1
 80194f2:	e7a8      	b.n	8019446 <_vfiprintf_r+0xfe>
 80194f4:	2300      	movs	r3, #0
 80194f6:	3401      	adds	r4, #1
 80194f8:	9305      	str	r3, [sp, #20]
 80194fa:	4619      	mov	r1, r3
 80194fc:	f04f 0c0a 	mov.w	ip, #10
 8019500:	4620      	mov	r0, r4
 8019502:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019506:	3a30      	subs	r2, #48	@ 0x30
 8019508:	2a09      	cmp	r2, #9
 801950a:	d903      	bls.n	8019514 <_vfiprintf_r+0x1cc>
 801950c:	2b00      	cmp	r3, #0
 801950e:	d0c6      	beq.n	801949e <_vfiprintf_r+0x156>
 8019510:	9105      	str	r1, [sp, #20]
 8019512:	e7c4      	b.n	801949e <_vfiprintf_r+0x156>
 8019514:	fb0c 2101 	mla	r1, ip, r1, r2
 8019518:	4604      	mov	r4, r0
 801951a:	2301      	movs	r3, #1
 801951c:	e7f0      	b.n	8019500 <_vfiprintf_r+0x1b8>
 801951e:	ab03      	add	r3, sp, #12
 8019520:	9300      	str	r3, [sp, #0]
 8019522:	462a      	mov	r2, r5
 8019524:	4b12      	ldr	r3, [pc, #72]	@ (8019570 <_vfiprintf_r+0x228>)
 8019526:	a904      	add	r1, sp, #16
 8019528:	4630      	mov	r0, r6
 801952a:	f3af 8000 	nop.w
 801952e:	4607      	mov	r7, r0
 8019530:	1c78      	adds	r0, r7, #1
 8019532:	d1d6      	bne.n	80194e2 <_vfiprintf_r+0x19a>
 8019534:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019536:	07d9      	lsls	r1, r3, #31
 8019538:	d405      	bmi.n	8019546 <_vfiprintf_r+0x1fe>
 801953a:	89ab      	ldrh	r3, [r5, #12]
 801953c:	059a      	lsls	r2, r3, #22
 801953e:	d402      	bmi.n	8019546 <_vfiprintf_r+0x1fe>
 8019540:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019542:	f7fe fcb1 	bl	8017ea8 <__retarget_lock_release_recursive>
 8019546:	89ab      	ldrh	r3, [r5, #12]
 8019548:	065b      	lsls	r3, r3, #25
 801954a:	f53f af1f 	bmi.w	801938c <_vfiprintf_r+0x44>
 801954e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019550:	e71e      	b.n	8019390 <_vfiprintf_r+0x48>
 8019552:	ab03      	add	r3, sp, #12
 8019554:	9300      	str	r3, [sp, #0]
 8019556:	462a      	mov	r2, r5
 8019558:	4b05      	ldr	r3, [pc, #20]	@ (8019570 <_vfiprintf_r+0x228>)
 801955a:	a904      	add	r1, sp, #16
 801955c:	4630      	mov	r0, r6
 801955e:	f000 f879 	bl	8019654 <_printf_i>
 8019562:	e7e4      	b.n	801952e <_vfiprintf_r+0x1e6>
 8019564:	0801a28c 	.word	0x0801a28c
 8019568:	0801a296 	.word	0x0801a296
 801956c:	00000000 	.word	0x00000000
 8019570:	08019325 	.word	0x08019325
 8019574:	0801a292 	.word	0x0801a292

08019578 <_printf_common>:
 8019578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801957c:	4616      	mov	r6, r2
 801957e:	4698      	mov	r8, r3
 8019580:	688a      	ldr	r2, [r1, #8]
 8019582:	690b      	ldr	r3, [r1, #16]
 8019584:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8019588:	4293      	cmp	r3, r2
 801958a:	bfb8      	it	lt
 801958c:	4613      	movlt	r3, r2
 801958e:	6033      	str	r3, [r6, #0]
 8019590:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8019594:	4607      	mov	r7, r0
 8019596:	460c      	mov	r4, r1
 8019598:	b10a      	cbz	r2, 801959e <_printf_common+0x26>
 801959a:	3301      	adds	r3, #1
 801959c:	6033      	str	r3, [r6, #0]
 801959e:	6823      	ldr	r3, [r4, #0]
 80195a0:	0699      	lsls	r1, r3, #26
 80195a2:	bf42      	ittt	mi
 80195a4:	6833      	ldrmi	r3, [r6, #0]
 80195a6:	3302      	addmi	r3, #2
 80195a8:	6033      	strmi	r3, [r6, #0]
 80195aa:	6825      	ldr	r5, [r4, #0]
 80195ac:	f015 0506 	ands.w	r5, r5, #6
 80195b0:	d106      	bne.n	80195c0 <_printf_common+0x48>
 80195b2:	f104 0a19 	add.w	sl, r4, #25
 80195b6:	68e3      	ldr	r3, [r4, #12]
 80195b8:	6832      	ldr	r2, [r6, #0]
 80195ba:	1a9b      	subs	r3, r3, r2
 80195bc:	42ab      	cmp	r3, r5
 80195be:	dc26      	bgt.n	801960e <_printf_common+0x96>
 80195c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80195c4:	6822      	ldr	r2, [r4, #0]
 80195c6:	3b00      	subs	r3, #0
 80195c8:	bf18      	it	ne
 80195ca:	2301      	movne	r3, #1
 80195cc:	0692      	lsls	r2, r2, #26
 80195ce:	d42b      	bmi.n	8019628 <_printf_common+0xb0>
 80195d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80195d4:	4641      	mov	r1, r8
 80195d6:	4638      	mov	r0, r7
 80195d8:	47c8      	blx	r9
 80195da:	3001      	adds	r0, #1
 80195dc:	d01e      	beq.n	801961c <_printf_common+0xa4>
 80195de:	6823      	ldr	r3, [r4, #0]
 80195e0:	6922      	ldr	r2, [r4, #16]
 80195e2:	f003 0306 	and.w	r3, r3, #6
 80195e6:	2b04      	cmp	r3, #4
 80195e8:	bf02      	ittt	eq
 80195ea:	68e5      	ldreq	r5, [r4, #12]
 80195ec:	6833      	ldreq	r3, [r6, #0]
 80195ee:	1aed      	subeq	r5, r5, r3
 80195f0:	68a3      	ldr	r3, [r4, #8]
 80195f2:	bf0c      	ite	eq
 80195f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80195f8:	2500      	movne	r5, #0
 80195fa:	4293      	cmp	r3, r2
 80195fc:	bfc4      	itt	gt
 80195fe:	1a9b      	subgt	r3, r3, r2
 8019600:	18ed      	addgt	r5, r5, r3
 8019602:	2600      	movs	r6, #0
 8019604:	341a      	adds	r4, #26
 8019606:	42b5      	cmp	r5, r6
 8019608:	d11a      	bne.n	8019640 <_printf_common+0xc8>
 801960a:	2000      	movs	r0, #0
 801960c:	e008      	b.n	8019620 <_printf_common+0xa8>
 801960e:	2301      	movs	r3, #1
 8019610:	4652      	mov	r2, sl
 8019612:	4641      	mov	r1, r8
 8019614:	4638      	mov	r0, r7
 8019616:	47c8      	blx	r9
 8019618:	3001      	adds	r0, #1
 801961a:	d103      	bne.n	8019624 <_printf_common+0xac>
 801961c:	f04f 30ff 	mov.w	r0, #4294967295
 8019620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019624:	3501      	adds	r5, #1
 8019626:	e7c6      	b.n	80195b6 <_printf_common+0x3e>
 8019628:	18e1      	adds	r1, r4, r3
 801962a:	1c5a      	adds	r2, r3, #1
 801962c:	2030      	movs	r0, #48	@ 0x30
 801962e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8019632:	4422      	add	r2, r4
 8019634:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8019638:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801963c:	3302      	adds	r3, #2
 801963e:	e7c7      	b.n	80195d0 <_printf_common+0x58>
 8019640:	2301      	movs	r3, #1
 8019642:	4622      	mov	r2, r4
 8019644:	4641      	mov	r1, r8
 8019646:	4638      	mov	r0, r7
 8019648:	47c8      	blx	r9
 801964a:	3001      	adds	r0, #1
 801964c:	d0e6      	beq.n	801961c <_printf_common+0xa4>
 801964e:	3601      	adds	r6, #1
 8019650:	e7d9      	b.n	8019606 <_printf_common+0x8e>
	...

08019654 <_printf_i>:
 8019654:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019658:	7e0f      	ldrb	r7, [r1, #24]
 801965a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801965c:	2f78      	cmp	r7, #120	@ 0x78
 801965e:	4691      	mov	r9, r2
 8019660:	4680      	mov	r8, r0
 8019662:	460c      	mov	r4, r1
 8019664:	469a      	mov	sl, r3
 8019666:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801966a:	d807      	bhi.n	801967c <_printf_i+0x28>
 801966c:	2f62      	cmp	r7, #98	@ 0x62
 801966e:	d80a      	bhi.n	8019686 <_printf_i+0x32>
 8019670:	2f00      	cmp	r7, #0
 8019672:	f000 80d2 	beq.w	801981a <_printf_i+0x1c6>
 8019676:	2f58      	cmp	r7, #88	@ 0x58
 8019678:	f000 80b9 	beq.w	80197ee <_printf_i+0x19a>
 801967c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019680:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8019684:	e03a      	b.n	80196fc <_printf_i+0xa8>
 8019686:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801968a:	2b15      	cmp	r3, #21
 801968c:	d8f6      	bhi.n	801967c <_printf_i+0x28>
 801968e:	a101      	add	r1, pc, #4	@ (adr r1, 8019694 <_printf_i+0x40>)
 8019690:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019694:	080196ed 	.word	0x080196ed
 8019698:	08019701 	.word	0x08019701
 801969c:	0801967d 	.word	0x0801967d
 80196a0:	0801967d 	.word	0x0801967d
 80196a4:	0801967d 	.word	0x0801967d
 80196a8:	0801967d 	.word	0x0801967d
 80196ac:	08019701 	.word	0x08019701
 80196b0:	0801967d 	.word	0x0801967d
 80196b4:	0801967d 	.word	0x0801967d
 80196b8:	0801967d 	.word	0x0801967d
 80196bc:	0801967d 	.word	0x0801967d
 80196c0:	08019801 	.word	0x08019801
 80196c4:	0801972b 	.word	0x0801972b
 80196c8:	080197bb 	.word	0x080197bb
 80196cc:	0801967d 	.word	0x0801967d
 80196d0:	0801967d 	.word	0x0801967d
 80196d4:	08019823 	.word	0x08019823
 80196d8:	0801967d 	.word	0x0801967d
 80196dc:	0801972b 	.word	0x0801972b
 80196e0:	0801967d 	.word	0x0801967d
 80196e4:	0801967d 	.word	0x0801967d
 80196e8:	080197c3 	.word	0x080197c3
 80196ec:	6833      	ldr	r3, [r6, #0]
 80196ee:	1d1a      	adds	r2, r3, #4
 80196f0:	681b      	ldr	r3, [r3, #0]
 80196f2:	6032      	str	r2, [r6, #0]
 80196f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80196f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80196fc:	2301      	movs	r3, #1
 80196fe:	e09d      	b.n	801983c <_printf_i+0x1e8>
 8019700:	6833      	ldr	r3, [r6, #0]
 8019702:	6820      	ldr	r0, [r4, #0]
 8019704:	1d19      	adds	r1, r3, #4
 8019706:	6031      	str	r1, [r6, #0]
 8019708:	0606      	lsls	r6, r0, #24
 801970a:	d501      	bpl.n	8019710 <_printf_i+0xbc>
 801970c:	681d      	ldr	r5, [r3, #0]
 801970e:	e003      	b.n	8019718 <_printf_i+0xc4>
 8019710:	0645      	lsls	r5, r0, #25
 8019712:	d5fb      	bpl.n	801970c <_printf_i+0xb8>
 8019714:	f9b3 5000 	ldrsh.w	r5, [r3]
 8019718:	2d00      	cmp	r5, #0
 801971a:	da03      	bge.n	8019724 <_printf_i+0xd0>
 801971c:	232d      	movs	r3, #45	@ 0x2d
 801971e:	426d      	negs	r5, r5
 8019720:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019724:	4859      	ldr	r0, [pc, #356]	@ (801988c <_printf_i+0x238>)
 8019726:	230a      	movs	r3, #10
 8019728:	e011      	b.n	801974e <_printf_i+0xfa>
 801972a:	6821      	ldr	r1, [r4, #0]
 801972c:	6833      	ldr	r3, [r6, #0]
 801972e:	0608      	lsls	r0, r1, #24
 8019730:	f853 5b04 	ldr.w	r5, [r3], #4
 8019734:	d402      	bmi.n	801973c <_printf_i+0xe8>
 8019736:	0649      	lsls	r1, r1, #25
 8019738:	bf48      	it	mi
 801973a:	b2ad      	uxthmi	r5, r5
 801973c:	2f6f      	cmp	r7, #111	@ 0x6f
 801973e:	4853      	ldr	r0, [pc, #332]	@ (801988c <_printf_i+0x238>)
 8019740:	6033      	str	r3, [r6, #0]
 8019742:	bf14      	ite	ne
 8019744:	230a      	movne	r3, #10
 8019746:	2308      	moveq	r3, #8
 8019748:	2100      	movs	r1, #0
 801974a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801974e:	6866      	ldr	r6, [r4, #4]
 8019750:	60a6      	str	r6, [r4, #8]
 8019752:	2e00      	cmp	r6, #0
 8019754:	bfa2      	ittt	ge
 8019756:	6821      	ldrge	r1, [r4, #0]
 8019758:	f021 0104 	bicge.w	r1, r1, #4
 801975c:	6021      	strge	r1, [r4, #0]
 801975e:	b90d      	cbnz	r5, 8019764 <_printf_i+0x110>
 8019760:	2e00      	cmp	r6, #0
 8019762:	d04b      	beq.n	80197fc <_printf_i+0x1a8>
 8019764:	4616      	mov	r6, r2
 8019766:	fbb5 f1f3 	udiv	r1, r5, r3
 801976a:	fb03 5711 	mls	r7, r3, r1, r5
 801976e:	5dc7      	ldrb	r7, [r0, r7]
 8019770:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8019774:	462f      	mov	r7, r5
 8019776:	42bb      	cmp	r3, r7
 8019778:	460d      	mov	r5, r1
 801977a:	d9f4      	bls.n	8019766 <_printf_i+0x112>
 801977c:	2b08      	cmp	r3, #8
 801977e:	d10b      	bne.n	8019798 <_printf_i+0x144>
 8019780:	6823      	ldr	r3, [r4, #0]
 8019782:	07df      	lsls	r7, r3, #31
 8019784:	d508      	bpl.n	8019798 <_printf_i+0x144>
 8019786:	6923      	ldr	r3, [r4, #16]
 8019788:	6861      	ldr	r1, [r4, #4]
 801978a:	4299      	cmp	r1, r3
 801978c:	bfde      	ittt	le
 801978e:	2330      	movle	r3, #48	@ 0x30
 8019790:	f806 3c01 	strble.w	r3, [r6, #-1]
 8019794:	f106 36ff 	addle.w	r6, r6, #4294967295
 8019798:	1b92      	subs	r2, r2, r6
 801979a:	6122      	str	r2, [r4, #16]
 801979c:	f8cd a000 	str.w	sl, [sp]
 80197a0:	464b      	mov	r3, r9
 80197a2:	aa03      	add	r2, sp, #12
 80197a4:	4621      	mov	r1, r4
 80197a6:	4640      	mov	r0, r8
 80197a8:	f7ff fee6 	bl	8019578 <_printf_common>
 80197ac:	3001      	adds	r0, #1
 80197ae:	d14a      	bne.n	8019846 <_printf_i+0x1f2>
 80197b0:	f04f 30ff 	mov.w	r0, #4294967295
 80197b4:	b004      	add	sp, #16
 80197b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80197ba:	6823      	ldr	r3, [r4, #0]
 80197bc:	f043 0320 	orr.w	r3, r3, #32
 80197c0:	6023      	str	r3, [r4, #0]
 80197c2:	4833      	ldr	r0, [pc, #204]	@ (8019890 <_printf_i+0x23c>)
 80197c4:	2778      	movs	r7, #120	@ 0x78
 80197c6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80197ca:	6823      	ldr	r3, [r4, #0]
 80197cc:	6831      	ldr	r1, [r6, #0]
 80197ce:	061f      	lsls	r7, r3, #24
 80197d0:	f851 5b04 	ldr.w	r5, [r1], #4
 80197d4:	d402      	bmi.n	80197dc <_printf_i+0x188>
 80197d6:	065f      	lsls	r7, r3, #25
 80197d8:	bf48      	it	mi
 80197da:	b2ad      	uxthmi	r5, r5
 80197dc:	6031      	str	r1, [r6, #0]
 80197de:	07d9      	lsls	r1, r3, #31
 80197e0:	bf44      	itt	mi
 80197e2:	f043 0320 	orrmi.w	r3, r3, #32
 80197e6:	6023      	strmi	r3, [r4, #0]
 80197e8:	b11d      	cbz	r5, 80197f2 <_printf_i+0x19e>
 80197ea:	2310      	movs	r3, #16
 80197ec:	e7ac      	b.n	8019748 <_printf_i+0xf4>
 80197ee:	4827      	ldr	r0, [pc, #156]	@ (801988c <_printf_i+0x238>)
 80197f0:	e7e9      	b.n	80197c6 <_printf_i+0x172>
 80197f2:	6823      	ldr	r3, [r4, #0]
 80197f4:	f023 0320 	bic.w	r3, r3, #32
 80197f8:	6023      	str	r3, [r4, #0]
 80197fa:	e7f6      	b.n	80197ea <_printf_i+0x196>
 80197fc:	4616      	mov	r6, r2
 80197fe:	e7bd      	b.n	801977c <_printf_i+0x128>
 8019800:	6833      	ldr	r3, [r6, #0]
 8019802:	6825      	ldr	r5, [r4, #0]
 8019804:	6961      	ldr	r1, [r4, #20]
 8019806:	1d18      	adds	r0, r3, #4
 8019808:	6030      	str	r0, [r6, #0]
 801980a:	062e      	lsls	r6, r5, #24
 801980c:	681b      	ldr	r3, [r3, #0]
 801980e:	d501      	bpl.n	8019814 <_printf_i+0x1c0>
 8019810:	6019      	str	r1, [r3, #0]
 8019812:	e002      	b.n	801981a <_printf_i+0x1c6>
 8019814:	0668      	lsls	r0, r5, #25
 8019816:	d5fb      	bpl.n	8019810 <_printf_i+0x1bc>
 8019818:	8019      	strh	r1, [r3, #0]
 801981a:	2300      	movs	r3, #0
 801981c:	6123      	str	r3, [r4, #16]
 801981e:	4616      	mov	r6, r2
 8019820:	e7bc      	b.n	801979c <_printf_i+0x148>
 8019822:	6833      	ldr	r3, [r6, #0]
 8019824:	1d1a      	adds	r2, r3, #4
 8019826:	6032      	str	r2, [r6, #0]
 8019828:	681e      	ldr	r6, [r3, #0]
 801982a:	6862      	ldr	r2, [r4, #4]
 801982c:	2100      	movs	r1, #0
 801982e:	4630      	mov	r0, r6
 8019830:	f7e6 fd6e 	bl	8000310 <memchr>
 8019834:	b108      	cbz	r0, 801983a <_printf_i+0x1e6>
 8019836:	1b80      	subs	r0, r0, r6
 8019838:	6060      	str	r0, [r4, #4]
 801983a:	6863      	ldr	r3, [r4, #4]
 801983c:	6123      	str	r3, [r4, #16]
 801983e:	2300      	movs	r3, #0
 8019840:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019844:	e7aa      	b.n	801979c <_printf_i+0x148>
 8019846:	6923      	ldr	r3, [r4, #16]
 8019848:	4632      	mov	r2, r6
 801984a:	4649      	mov	r1, r9
 801984c:	4640      	mov	r0, r8
 801984e:	47d0      	blx	sl
 8019850:	3001      	adds	r0, #1
 8019852:	d0ad      	beq.n	80197b0 <_printf_i+0x15c>
 8019854:	6823      	ldr	r3, [r4, #0]
 8019856:	079b      	lsls	r3, r3, #30
 8019858:	d413      	bmi.n	8019882 <_printf_i+0x22e>
 801985a:	68e0      	ldr	r0, [r4, #12]
 801985c:	9b03      	ldr	r3, [sp, #12]
 801985e:	4298      	cmp	r0, r3
 8019860:	bfb8      	it	lt
 8019862:	4618      	movlt	r0, r3
 8019864:	e7a6      	b.n	80197b4 <_printf_i+0x160>
 8019866:	2301      	movs	r3, #1
 8019868:	4632      	mov	r2, r6
 801986a:	4649      	mov	r1, r9
 801986c:	4640      	mov	r0, r8
 801986e:	47d0      	blx	sl
 8019870:	3001      	adds	r0, #1
 8019872:	d09d      	beq.n	80197b0 <_printf_i+0x15c>
 8019874:	3501      	adds	r5, #1
 8019876:	68e3      	ldr	r3, [r4, #12]
 8019878:	9903      	ldr	r1, [sp, #12]
 801987a:	1a5b      	subs	r3, r3, r1
 801987c:	42ab      	cmp	r3, r5
 801987e:	dcf2      	bgt.n	8019866 <_printf_i+0x212>
 8019880:	e7eb      	b.n	801985a <_printf_i+0x206>
 8019882:	2500      	movs	r5, #0
 8019884:	f104 0619 	add.w	r6, r4, #25
 8019888:	e7f5      	b.n	8019876 <_printf_i+0x222>
 801988a:	bf00      	nop
 801988c:	0801a29d 	.word	0x0801a29d
 8019890:	0801a2ae 	.word	0x0801a2ae

08019894 <__swbuf_r>:
 8019894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019896:	460e      	mov	r6, r1
 8019898:	4614      	mov	r4, r2
 801989a:	4605      	mov	r5, r0
 801989c:	b118      	cbz	r0, 80198a6 <__swbuf_r+0x12>
 801989e:	6a03      	ldr	r3, [r0, #32]
 80198a0:	b90b      	cbnz	r3, 80198a6 <__swbuf_r+0x12>
 80198a2:	f7fe f9ef 	bl	8017c84 <__sinit>
 80198a6:	69a3      	ldr	r3, [r4, #24]
 80198a8:	60a3      	str	r3, [r4, #8]
 80198aa:	89a3      	ldrh	r3, [r4, #12]
 80198ac:	071a      	lsls	r2, r3, #28
 80198ae:	d501      	bpl.n	80198b4 <__swbuf_r+0x20>
 80198b0:	6923      	ldr	r3, [r4, #16]
 80198b2:	b943      	cbnz	r3, 80198c6 <__swbuf_r+0x32>
 80198b4:	4621      	mov	r1, r4
 80198b6:	4628      	mov	r0, r5
 80198b8:	f000 f82a 	bl	8019910 <__swsetup_r>
 80198bc:	b118      	cbz	r0, 80198c6 <__swbuf_r+0x32>
 80198be:	f04f 37ff 	mov.w	r7, #4294967295
 80198c2:	4638      	mov	r0, r7
 80198c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80198c6:	6823      	ldr	r3, [r4, #0]
 80198c8:	6922      	ldr	r2, [r4, #16]
 80198ca:	1a98      	subs	r0, r3, r2
 80198cc:	6963      	ldr	r3, [r4, #20]
 80198ce:	b2f6      	uxtb	r6, r6
 80198d0:	4283      	cmp	r3, r0
 80198d2:	4637      	mov	r7, r6
 80198d4:	dc05      	bgt.n	80198e2 <__swbuf_r+0x4e>
 80198d6:	4621      	mov	r1, r4
 80198d8:	4628      	mov	r0, r5
 80198da:	f7ff fc81 	bl	80191e0 <_fflush_r>
 80198de:	2800      	cmp	r0, #0
 80198e0:	d1ed      	bne.n	80198be <__swbuf_r+0x2a>
 80198e2:	68a3      	ldr	r3, [r4, #8]
 80198e4:	3b01      	subs	r3, #1
 80198e6:	60a3      	str	r3, [r4, #8]
 80198e8:	6823      	ldr	r3, [r4, #0]
 80198ea:	1c5a      	adds	r2, r3, #1
 80198ec:	6022      	str	r2, [r4, #0]
 80198ee:	701e      	strb	r6, [r3, #0]
 80198f0:	6962      	ldr	r2, [r4, #20]
 80198f2:	1c43      	adds	r3, r0, #1
 80198f4:	429a      	cmp	r2, r3
 80198f6:	d004      	beq.n	8019902 <__swbuf_r+0x6e>
 80198f8:	89a3      	ldrh	r3, [r4, #12]
 80198fa:	07db      	lsls	r3, r3, #31
 80198fc:	d5e1      	bpl.n	80198c2 <__swbuf_r+0x2e>
 80198fe:	2e0a      	cmp	r6, #10
 8019900:	d1df      	bne.n	80198c2 <__swbuf_r+0x2e>
 8019902:	4621      	mov	r1, r4
 8019904:	4628      	mov	r0, r5
 8019906:	f7ff fc6b 	bl	80191e0 <_fflush_r>
 801990a:	2800      	cmp	r0, #0
 801990c:	d0d9      	beq.n	80198c2 <__swbuf_r+0x2e>
 801990e:	e7d6      	b.n	80198be <__swbuf_r+0x2a>

08019910 <__swsetup_r>:
 8019910:	b538      	push	{r3, r4, r5, lr}
 8019912:	4b29      	ldr	r3, [pc, #164]	@ (80199b8 <__swsetup_r+0xa8>)
 8019914:	4605      	mov	r5, r0
 8019916:	6818      	ldr	r0, [r3, #0]
 8019918:	460c      	mov	r4, r1
 801991a:	b118      	cbz	r0, 8019924 <__swsetup_r+0x14>
 801991c:	6a03      	ldr	r3, [r0, #32]
 801991e:	b90b      	cbnz	r3, 8019924 <__swsetup_r+0x14>
 8019920:	f7fe f9b0 	bl	8017c84 <__sinit>
 8019924:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019928:	0719      	lsls	r1, r3, #28
 801992a:	d422      	bmi.n	8019972 <__swsetup_r+0x62>
 801992c:	06da      	lsls	r2, r3, #27
 801992e:	d407      	bmi.n	8019940 <__swsetup_r+0x30>
 8019930:	2209      	movs	r2, #9
 8019932:	602a      	str	r2, [r5, #0]
 8019934:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019938:	81a3      	strh	r3, [r4, #12]
 801993a:	f04f 30ff 	mov.w	r0, #4294967295
 801993e:	e033      	b.n	80199a8 <__swsetup_r+0x98>
 8019940:	0758      	lsls	r0, r3, #29
 8019942:	d512      	bpl.n	801996a <__swsetup_r+0x5a>
 8019944:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019946:	b141      	cbz	r1, 801995a <__swsetup_r+0x4a>
 8019948:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801994c:	4299      	cmp	r1, r3
 801994e:	d002      	beq.n	8019956 <__swsetup_r+0x46>
 8019950:	4628      	mov	r0, r5
 8019952:	f7fe fac1 	bl	8017ed8 <_free_r>
 8019956:	2300      	movs	r3, #0
 8019958:	6363      	str	r3, [r4, #52]	@ 0x34
 801995a:	89a3      	ldrh	r3, [r4, #12]
 801995c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8019960:	81a3      	strh	r3, [r4, #12]
 8019962:	2300      	movs	r3, #0
 8019964:	6063      	str	r3, [r4, #4]
 8019966:	6923      	ldr	r3, [r4, #16]
 8019968:	6023      	str	r3, [r4, #0]
 801996a:	89a3      	ldrh	r3, [r4, #12]
 801996c:	f043 0308 	orr.w	r3, r3, #8
 8019970:	81a3      	strh	r3, [r4, #12]
 8019972:	6923      	ldr	r3, [r4, #16]
 8019974:	b94b      	cbnz	r3, 801998a <__swsetup_r+0x7a>
 8019976:	89a3      	ldrh	r3, [r4, #12]
 8019978:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801997c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019980:	d003      	beq.n	801998a <__swsetup_r+0x7a>
 8019982:	4621      	mov	r1, r4
 8019984:	4628      	mov	r0, r5
 8019986:	f000 f883 	bl	8019a90 <__smakebuf_r>
 801998a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801998e:	f013 0201 	ands.w	r2, r3, #1
 8019992:	d00a      	beq.n	80199aa <__swsetup_r+0x9a>
 8019994:	2200      	movs	r2, #0
 8019996:	60a2      	str	r2, [r4, #8]
 8019998:	6962      	ldr	r2, [r4, #20]
 801999a:	4252      	negs	r2, r2
 801999c:	61a2      	str	r2, [r4, #24]
 801999e:	6922      	ldr	r2, [r4, #16]
 80199a0:	b942      	cbnz	r2, 80199b4 <__swsetup_r+0xa4>
 80199a2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80199a6:	d1c5      	bne.n	8019934 <__swsetup_r+0x24>
 80199a8:	bd38      	pop	{r3, r4, r5, pc}
 80199aa:	0799      	lsls	r1, r3, #30
 80199ac:	bf58      	it	pl
 80199ae:	6962      	ldrpl	r2, [r4, #20]
 80199b0:	60a2      	str	r2, [r4, #8]
 80199b2:	e7f4      	b.n	801999e <__swsetup_r+0x8e>
 80199b4:	2000      	movs	r0, #0
 80199b6:	e7f7      	b.n	80199a8 <__swsetup_r+0x98>
 80199b8:	24000240 	.word	0x24000240

080199bc <_raise_r>:
 80199bc:	291f      	cmp	r1, #31
 80199be:	b538      	push	{r3, r4, r5, lr}
 80199c0:	4605      	mov	r5, r0
 80199c2:	460c      	mov	r4, r1
 80199c4:	d904      	bls.n	80199d0 <_raise_r+0x14>
 80199c6:	2316      	movs	r3, #22
 80199c8:	6003      	str	r3, [r0, #0]
 80199ca:	f04f 30ff 	mov.w	r0, #4294967295
 80199ce:	bd38      	pop	{r3, r4, r5, pc}
 80199d0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80199d2:	b112      	cbz	r2, 80199da <_raise_r+0x1e>
 80199d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80199d8:	b94b      	cbnz	r3, 80199ee <_raise_r+0x32>
 80199da:	4628      	mov	r0, r5
 80199dc:	f000 f830 	bl	8019a40 <_getpid_r>
 80199e0:	4622      	mov	r2, r4
 80199e2:	4601      	mov	r1, r0
 80199e4:	4628      	mov	r0, r5
 80199e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80199ea:	f000 b817 	b.w	8019a1c <_kill_r>
 80199ee:	2b01      	cmp	r3, #1
 80199f0:	d00a      	beq.n	8019a08 <_raise_r+0x4c>
 80199f2:	1c59      	adds	r1, r3, #1
 80199f4:	d103      	bne.n	80199fe <_raise_r+0x42>
 80199f6:	2316      	movs	r3, #22
 80199f8:	6003      	str	r3, [r0, #0]
 80199fa:	2001      	movs	r0, #1
 80199fc:	e7e7      	b.n	80199ce <_raise_r+0x12>
 80199fe:	2100      	movs	r1, #0
 8019a00:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8019a04:	4620      	mov	r0, r4
 8019a06:	4798      	blx	r3
 8019a08:	2000      	movs	r0, #0
 8019a0a:	e7e0      	b.n	80199ce <_raise_r+0x12>

08019a0c <raise>:
 8019a0c:	4b02      	ldr	r3, [pc, #8]	@ (8019a18 <raise+0xc>)
 8019a0e:	4601      	mov	r1, r0
 8019a10:	6818      	ldr	r0, [r3, #0]
 8019a12:	f7ff bfd3 	b.w	80199bc <_raise_r>
 8019a16:	bf00      	nop
 8019a18:	24000240 	.word	0x24000240

08019a1c <_kill_r>:
 8019a1c:	b538      	push	{r3, r4, r5, lr}
 8019a1e:	4d07      	ldr	r5, [pc, #28]	@ (8019a3c <_kill_r+0x20>)
 8019a20:	2300      	movs	r3, #0
 8019a22:	4604      	mov	r4, r0
 8019a24:	4608      	mov	r0, r1
 8019a26:	4611      	mov	r1, r2
 8019a28:	602b      	str	r3, [r5, #0]
 8019a2a:	f7e9 fe9d 	bl	8003768 <_kill>
 8019a2e:	1c43      	adds	r3, r0, #1
 8019a30:	d102      	bne.n	8019a38 <_kill_r+0x1c>
 8019a32:	682b      	ldr	r3, [r5, #0]
 8019a34:	b103      	cbz	r3, 8019a38 <_kill_r+0x1c>
 8019a36:	6023      	str	r3, [r4, #0]
 8019a38:	bd38      	pop	{r3, r4, r5, pc}
 8019a3a:	bf00      	nop
 8019a3c:	24006968 	.word	0x24006968

08019a40 <_getpid_r>:
 8019a40:	f7e9 be8a 	b.w	8003758 <_getpid>

08019a44 <__swhatbuf_r>:
 8019a44:	b570      	push	{r4, r5, r6, lr}
 8019a46:	460c      	mov	r4, r1
 8019a48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019a4c:	2900      	cmp	r1, #0
 8019a4e:	b096      	sub	sp, #88	@ 0x58
 8019a50:	4615      	mov	r5, r2
 8019a52:	461e      	mov	r6, r3
 8019a54:	da0d      	bge.n	8019a72 <__swhatbuf_r+0x2e>
 8019a56:	89a3      	ldrh	r3, [r4, #12]
 8019a58:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8019a5c:	f04f 0100 	mov.w	r1, #0
 8019a60:	bf14      	ite	ne
 8019a62:	2340      	movne	r3, #64	@ 0x40
 8019a64:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8019a68:	2000      	movs	r0, #0
 8019a6a:	6031      	str	r1, [r6, #0]
 8019a6c:	602b      	str	r3, [r5, #0]
 8019a6e:	b016      	add	sp, #88	@ 0x58
 8019a70:	bd70      	pop	{r4, r5, r6, pc}
 8019a72:	466a      	mov	r2, sp
 8019a74:	f000 f848 	bl	8019b08 <_fstat_r>
 8019a78:	2800      	cmp	r0, #0
 8019a7a:	dbec      	blt.n	8019a56 <__swhatbuf_r+0x12>
 8019a7c:	9901      	ldr	r1, [sp, #4]
 8019a7e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8019a82:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8019a86:	4259      	negs	r1, r3
 8019a88:	4159      	adcs	r1, r3
 8019a8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8019a8e:	e7eb      	b.n	8019a68 <__swhatbuf_r+0x24>

08019a90 <__smakebuf_r>:
 8019a90:	898b      	ldrh	r3, [r1, #12]
 8019a92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019a94:	079d      	lsls	r5, r3, #30
 8019a96:	4606      	mov	r6, r0
 8019a98:	460c      	mov	r4, r1
 8019a9a:	d507      	bpl.n	8019aac <__smakebuf_r+0x1c>
 8019a9c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8019aa0:	6023      	str	r3, [r4, #0]
 8019aa2:	6123      	str	r3, [r4, #16]
 8019aa4:	2301      	movs	r3, #1
 8019aa6:	6163      	str	r3, [r4, #20]
 8019aa8:	b003      	add	sp, #12
 8019aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019aac:	ab01      	add	r3, sp, #4
 8019aae:	466a      	mov	r2, sp
 8019ab0:	f7ff ffc8 	bl	8019a44 <__swhatbuf_r>
 8019ab4:	9f00      	ldr	r7, [sp, #0]
 8019ab6:	4605      	mov	r5, r0
 8019ab8:	4639      	mov	r1, r7
 8019aba:	4630      	mov	r0, r6
 8019abc:	f7fe fdb2 	bl	8018624 <_malloc_r>
 8019ac0:	b948      	cbnz	r0, 8019ad6 <__smakebuf_r+0x46>
 8019ac2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019ac6:	059a      	lsls	r2, r3, #22
 8019ac8:	d4ee      	bmi.n	8019aa8 <__smakebuf_r+0x18>
 8019aca:	f023 0303 	bic.w	r3, r3, #3
 8019ace:	f043 0302 	orr.w	r3, r3, #2
 8019ad2:	81a3      	strh	r3, [r4, #12]
 8019ad4:	e7e2      	b.n	8019a9c <__smakebuf_r+0xc>
 8019ad6:	89a3      	ldrh	r3, [r4, #12]
 8019ad8:	6020      	str	r0, [r4, #0]
 8019ada:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019ade:	81a3      	strh	r3, [r4, #12]
 8019ae0:	9b01      	ldr	r3, [sp, #4]
 8019ae2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8019ae6:	b15b      	cbz	r3, 8019b00 <__smakebuf_r+0x70>
 8019ae8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019aec:	4630      	mov	r0, r6
 8019aee:	f000 f81d 	bl	8019b2c <_isatty_r>
 8019af2:	b128      	cbz	r0, 8019b00 <__smakebuf_r+0x70>
 8019af4:	89a3      	ldrh	r3, [r4, #12]
 8019af6:	f023 0303 	bic.w	r3, r3, #3
 8019afa:	f043 0301 	orr.w	r3, r3, #1
 8019afe:	81a3      	strh	r3, [r4, #12]
 8019b00:	89a3      	ldrh	r3, [r4, #12]
 8019b02:	431d      	orrs	r5, r3
 8019b04:	81a5      	strh	r5, [r4, #12]
 8019b06:	e7cf      	b.n	8019aa8 <__smakebuf_r+0x18>

08019b08 <_fstat_r>:
 8019b08:	b538      	push	{r3, r4, r5, lr}
 8019b0a:	4d07      	ldr	r5, [pc, #28]	@ (8019b28 <_fstat_r+0x20>)
 8019b0c:	2300      	movs	r3, #0
 8019b0e:	4604      	mov	r4, r0
 8019b10:	4608      	mov	r0, r1
 8019b12:	4611      	mov	r1, r2
 8019b14:	602b      	str	r3, [r5, #0]
 8019b16:	f7e9 fe87 	bl	8003828 <_fstat>
 8019b1a:	1c43      	adds	r3, r0, #1
 8019b1c:	d102      	bne.n	8019b24 <_fstat_r+0x1c>
 8019b1e:	682b      	ldr	r3, [r5, #0]
 8019b20:	b103      	cbz	r3, 8019b24 <_fstat_r+0x1c>
 8019b22:	6023      	str	r3, [r4, #0]
 8019b24:	bd38      	pop	{r3, r4, r5, pc}
 8019b26:	bf00      	nop
 8019b28:	24006968 	.word	0x24006968

08019b2c <_isatty_r>:
 8019b2c:	b538      	push	{r3, r4, r5, lr}
 8019b2e:	4d06      	ldr	r5, [pc, #24]	@ (8019b48 <_isatty_r+0x1c>)
 8019b30:	2300      	movs	r3, #0
 8019b32:	4604      	mov	r4, r0
 8019b34:	4608      	mov	r0, r1
 8019b36:	602b      	str	r3, [r5, #0]
 8019b38:	f7e9 fe86 	bl	8003848 <_isatty>
 8019b3c:	1c43      	adds	r3, r0, #1
 8019b3e:	d102      	bne.n	8019b46 <_isatty_r+0x1a>
 8019b40:	682b      	ldr	r3, [r5, #0]
 8019b42:	b103      	cbz	r3, 8019b46 <_isatty_r+0x1a>
 8019b44:	6023      	str	r3, [r4, #0]
 8019b46:	bd38      	pop	{r3, r4, r5, pc}
 8019b48:	24006968 	.word	0x24006968
 8019b4c:	00000000 	.word	0x00000000

08019b50 <log>:
 8019b50:	b4f0      	push	{r4, r5, r6, r7}
 8019b52:	ee10 0a90 	vmov	r0, s1
 8019b56:	ee10 3a10 	vmov	r3, s0
 8019b5a:	f04f 34ff 	mov.w	r4, #4294967295
 8019b5e:	429c      	cmp	r4, r3
 8019b60:	f100 4140 	add.w	r1, r0, #3221225472	@ 0xc0000000
 8019b64:	4c70      	ldr	r4, [pc, #448]	@ (8019d28 <log+0x1d8>)
 8019b66:	f501 1190 	add.w	r1, r1, #1179648	@ 0x120000
 8019b6a:	418c      	sbcs	r4, r1
 8019b6c:	ed2d 8b02 	vpush	{d8}
 8019b70:	ea4f 4210 	mov.w	r2, r0, lsr #16
 8019b74:	d35a      	bcc.n	8019c2c <log+0xdc>
 8019b76:	4a6d      	ldr	r2, [pc, #436]	@ (8019d2c <log+0x1dc>)
 8019b78:	4290      	cmp	r0, r2
 8019b7a:	bf08      	it	eq
 8019b7c:	2b00      	cmpeq	r3, #0
 8019b7e:	f000 80c4 	beq.w	8019d0a <log+0x1ba>
 8019b82:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 8019b86:	ee30 0b47 	vsub.f64	d0, d0, d7
 8019b8a:	4b69      	ldr	r3, [pc, #420]	@ (8019d30 <log+0x1e0>)
 8019b8c:	ee20 2b00 	vmul.f64	d2, d0, d0
 8019b90:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 8019b94:	ee20 4b02 	vmul.f64	d4, d0, d2
 8019b98:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 8019b9c:	eea6 7b00 	vfma.f64	d7, d6, d0
 8019ba0:	ed93 6b14 	vldr	d6, [r3, #80]	@ 0x50
 8019ba4:	ed93 5b18 	vldr	d5, [r3, #96]	@ 0x60
 8019ba8:	eea6 7b02 	vfma.f64	d7, d6, d2
 8019bac:	ed93 6b16 	vldr	d6, [r3, #88]	@ 0x58
 8019bb0:	eea5 6b00 	vfma.f64	d6, d5, d0
 8019bb4:	ed93 5b1a 	vldr	d5, [r3, #104]	@ 0x68
 8019bb8:	ed93 3b1e 	vldr	d3, [r3, #120]	@ 0x78
 8019bbc:	eea5 6b02 	vfma.f64	d6, d5, d2
 8019bc0:	ed93 5b1c 	vldr	d5, [r3, #112]	@ 0x70
 8019bc4:	eea3 5b00 	vfma.f64	d5, d3, d0
 8019bc8:	ed93 3b20 	vldr	d3, [r3, #128]	@ 0x80
 8019bcc:	eea3 5b02 	vfma.f64	d5, d3, d2
 8019bd0:	ed93 3b22 	vldr	d3, [r3, #136]	@ 0x88
 8019bd4:	eea3 5b04 	vfma.f64	d5, d3, d4
 8019bd8:	eea5 6b04 	vfma.f64	d6, d5, d4
 8019bdc:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 8019be0:	eea6 7b04 	vfma.f64	d7, d6, d4
 8019be4:	eeb0 2b47 	vmov.f64	d2, d7
 8019be8:	ed9f 7b49 	vldr	d7, [pc, #292]	@ 8019d10 <log+0x1c0>
 8019bec:	eeb0 6b40 	vmov.f64	d6, d0
 8019bf0:	eeb0 3b40 	vmov.f64	d3, d0
 8019bf4:	eea0 6b07 	vfma.f64	d6, d0, d7
 8019bf8:	eea0 6b47 	vfms.f64	d6, d0, d7
 8019bfc:	ee30 8b46 	vsub.f64	d8, d0, d6
 8019c00:	ee26 1b06 	vmul.f64	d1, d6, d6
 8019c04:	eea1 3b05 	vfma.f64	d3, d1, d5
 8019c08:	ee30 7b43 	vsub.f64	d7, d0, d3
 8019c0c:	ee30 0b06 	vadd.f64	d0, d0, d6
 8019c10:	eea1 7b05 	vfma.f64	d7, d1, d5
 8019c14:	ee25 5b08 	vmul.f64	d5, d5, d8
 8019c18:	eea5 7b00 	vfma.f64	d7, d5, d0
 8019c1c:	eea2 7b04 	vfma.f64	d7, d2, d4
 8019c20:	ee33 0b07 	vadd.f64	d0, d3, d7
 8019c24:	ecbd 8b02 	vpop	{d8}
 8019c28:	bcf0      	pop	{r4, r5, r6, r7}
 8019c2a:	4770      	bx	lr
 8019c2c:	f1a2 0410 	sub.w	r4, r2, #16
 8019c30:	f647 71df 	movw	r1, #32735	@ 0x7fdf
 8019c34:	428c      	cmp	r4, r1
 8019c36:	d923      	bls.n	8019c80 <log+0x130>
 8019c38:	18d9      	adds	r1, r3, r3
 8019c3a:	eb40 0400 	adc.w	r4, r0, r0
 8019c3e:	4321      	orrs	r1, r4
 8019c40:	d105      	bne.n	8019c4e <log+0xfe>
 8019c42:	ecbd 8b02 	vpop	{d8}
 8019c46:	2001      	movs	r0, #1
 8019c48:	bcf0      	pop	{r4, r5, r6, r7}
 8019c4a:	f000 b885 	b.w	8019d58 <__math_divzero>
 8019c4e:	4939      	ldr	r1, [pc, #228]	@ (8019d34 <log+0x1e4>)
 8019c50:	4288      	cmp	r0, r1
 8019c52:	bf08      	it	eq
 8019c54:	2b00      	cmpeq	r3, #0
 8019c56:	d0e5      	beq.n	8019c24 <log+0xd4>
 8019c58:	0413      	lsls	r3, r2, #16
 8019c5a:	d403      	bmi.n	8019c64 <log+0x114>
 8019c5c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8019c60:	4393      	bics	r3, r2
 8019c62:	d104      	bne.n	8019c6e <log+0x11e>
 8019c64:	ecbd 8b02 	vpop	{d8}
 8019c68:	bcf0      	pop	{r4, r5, r6, r7}
 8019c6a:	f000 b88d 	b.w	8019d88 <__math_invalid>
 8019c6e:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8019d18 <log+0x1c8>
 8019c72:	ee20 7b07 	vmul.f64	d7, d0, d7
 8019c76:	ec53 2b17 	vmov	r2, r3, d7
 8019c7a:	f1a3 7050 	sub.w	r0, r3, #54525952	@ 0x3400000
 8019c7e:	4613      	mov	r3, r2
 8019c80:	f100 4240 	add.w	r2, r0, #3221225472	@ 0xc0000000
 8019c84:	492a      	ldr	r1, [pc, #168]	@ (8019d30 <log+0x1e0>)
 8019c86:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 8019c8a:	f502 12d0 	add.w	r2, r2, #1703936	@ 0x1a0000
 8019c8e:	f3c2 3446 	ubfx	r4, r2, #13, #7
 8019c92:	0d15      	lsrs	r5, r2, #20
 8019c94:	eb01 1c04 	add.w	ip, r1, r4, lsl #4
 8019c98:	052d      	lsls	r5, r5, #20
 8019c9a:	ed9c 7b24 	vldr	d7, [ip, #144]	@ 0x90
 8019c9e:	1e1e      	subs	r6, r3, #0
 8019ca0:	1b47      	subs	r7, r0, r5
 8019ca2:	ec47 6b16 	vmov	d6, r6, r7
 8019ca6:	1512      	asrs	r2, r2, #20
 8019ca8:	eea7 5b06 	vfma.f64	d5, d7, d6
 8019cac:	ee07 2a90 	vmov	s15, r2
 8019cb0:	ee25 2b05 	vmul.f64	d2, d5, d5
 8019cb4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8019cb8:	ed91 4b00 	vldr	d4, [r1]
 8019cbc:	ee25 1b02 	vmul.f64	d1, d5, d2
 8019cc0:	ed9c 7b26 	vldr	d7, [ip, #152]	@ 0x98
 8019cc4:	eea4 7b06 	vfma.f64	d7, d4, d6
 8019cc8:	ee35 4b07 	vadd.f64	d4, d5, d7
 8019ccc:	ee37 0b44 	vsub.f64	d0, d7, d4
 8019cd0:	ed91 7b02 	vldr	d7, [r1, #8]
 8019cd4:	ee30 0b05 	vadd.f64	d0, d0, d5
 8019cd8:	eea7 0b06 	vfma.f64	d0, d7, d6
 8019cdc:	ed91 7b04 	vldr	d7, [r1, #16]
 8019ce0:	ed91 6b08 	vldr	d6, [r1, #32]
 8019ce4:	eea7 0b02 	vfma.f64	d0, d7, d2
 8019ce8:	ed91 7b06 	vldr	d7, [r1, #24]
 8019cec:	ed91 3b0c 	vldr	d3, [r1, #48]	@ 0x30
 8019cf0:	eea6 7b05 	vfma.f64	d7, d6, d5
 8019cf4:	ed91 6b0a 	vldr	d6, [r1, #40]	@ 0x28
 8019cf8:	eea3 6b05 	vfma.f64	d6, d3, d5
 8019cfc:	eea6 7b02 	vfma.f64	d7, d6, d2
 8019d00:	eea1 0b07 	vfma.f64	d0, d1, d7
 8019d04:	ee30 0b04 	vadd.f64	d0, d0, d4
 8019d08:	e78c      	b.n	8019c24 <log+0xd4>
 8019d0a:	ed9f 0b05 	vldr	d0, [pc, #20]	@ 8019d20 <log+0x1d0>
 8019d0e:	e789      	b.n	8019c24 <log+0xd4>
 8019d10:	00000000 	.word	0x00000000
 8019d14:	41a00000 	.word	0x41a00000
 8019d18:	00000000 	.word	0x00000000
 8019d1c:	43300000 	.word	0x43300000
	...
 8019d28:	000308ff 	.word	0x000308ff
 8019d2c:	3ff00000 	.word	0x3ff00000
 8019d30:	0801a2c0 	.word	0x0801a2c0
 8019d34:	7ff00000 	.word	0x7ff00000

08019d38 <with_errno>:
 8019d38:	b510      	push	{r4, lr}
 8019d3a:	ed2d 8b02 	vpush	{d8}
 8019d3e:	eeb0 8b40 	vmov.f64	d8, d0
 8019d42:	4604      	mov	r4, r0
 8019d44:	f7fe f884 	bl	8017e50 <__errno>
 8019d48:	eeb0 0b48 	vmov.f64	d0, d8
 8019d4c:	ecbd 8b02 	vpop	{d8}
 8019d50:	6004      	str	r4, [r0, #0]
 8019d52:	bd10      	pop	{r4, pc}
 8019d54:	0000      	movs	r0, r0
	...

08019d58 <__math_divzero>:
 8019d58:	b082      	sub	sp, #8
 8019d5a:	2800      	cmp	r0, #0
 8019d5c:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8019d60:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 8019d64:	fe07 7b06 	vseleq.f64	d7, d7, d6
 8019d68:	ed8d 7b00 	vstr	d7, [sp]
 8019d6c:	ed9d 0b00 	vldr	d0, [sp]
 8019d70:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 8019d80 <__math_divzero+0x28>
 8019d74:	2022      	movs	r0, #34	@ 0x22
 8019d76:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8019d7a:	b002      	add	sp, #8
 8019d7c:	f7ff bfdc 	b.w	8019d38 <with_errno>
	...

08019d88 <__math_invalid>:
 8019d88:	eeb0 7b40 	vmov.f64	d7, d0
 8019d8c:	eeb4 7b47 	vcmp.f64	d7, d7
 8019d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d94:	ee30 6b40 	vsub.f64	d6, d0, d0
 8019d98:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8019d9c:	d602      	bvs.n	8019da4 <__math_invalid+0x1c>
 8019d9e:	2021      	movs	r0, #33	@ 0x21
 8019da0:	f7ff bfca 	b.w	8019d38 <with_errno>
 8019da4:	4770      	bx	lr
	...

08019da8 <_init>:
 8019da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019daa:	bf00      	nop
 8019dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019dae:	bc08      	pop	{r3}
 8019db0:	469e      	mov	lr, r3
 8019db2:	4770      	bx	lr

08019db4 <_fini>:
 8019db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019db6:	bf00      	nop
 8019db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019dba:	bc08      	pop	{r3}
 8019dbc:	469e      	mov	lr, r3
 8019dbe:	4770      	bx	lr
